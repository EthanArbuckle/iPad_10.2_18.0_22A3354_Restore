unint64_t sub_223E0CA8C(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  _BOOL4 v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  _BOOL4 v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  unsigned int v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  _BOOL4 v229;
  _BOOL4 v230;
  unsigned __int8 **v231;
  uint64_t v232;
  unsigned int v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  uint64_t v250;
  unsigned int v251;
  unint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  _BOOL4 v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  _BOOL4 v294;
  _BOOL4 v295;
  _BOOL4 v296;
  _BOOL4 v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unint64_t v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  _BOOL4 v307;
  _BOOL4 v308;
  _BOOL4 v309;
  _BOOL4 v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  _BOOL4 v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unint64_t v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  _BOOL4 v334;
  _BOOL4 v335;
  _BOOL4 v336;
  _BOOL4 v337;
  _BOOL4 v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  _BOOL4 v346;
  _BOOL4 v347;
  _BOOL4 v348;
  _BOOL4 v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  _BOOL4 v361;
  _BOOL4 v362;
  _BOOL4 v363;
  _BOOL4 v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _BYTE *v368;
  unsigned int v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  unsigned int v373;
  unint64_t v374;
  uint64_t v375;
  unsigned int v376;
  unint64_t v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  int v419;
  unsigned int v420;
  int v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  int v427;
  unsigned int v428;
  int v429;
  unsigned int v430;
  int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unint64_t v436;
  uint64_t v437;
  unsigned int v438;
  unsigned int v439;
  _BOOL4 v440;
  _BOOL4 v441;
  _BOOL4 v442;
  _BOOL4 v443;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t *v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  int v455;
  unsigned int v456;
  unsigned int v457;
  __int128 v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned __int8 **v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  uint64_t v500;
  unsigned int v501;
  _BYTE **v502;
  unsigned int v503;
  unsigned int v504;
  unsigned __int8 **v505;
  uint64_t v506;
  unsigned int v507;
  unsigned int *v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  float32x4_t v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  uint64_t v599;
  _OWORD v600[2];
  _QWORD v601[3];

  v4 = a2;
  v601[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v502 = *a1;
  v6 = *((_DWORD *)v5 + 232);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 296);
    v9 = *((_DWORD *)v5 + 240);
    v10 = *((_DWORD *)v5 + 304);
    v11 = *((_DWORD *)v5 + 248);
    v506 = *a2;
    v490 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 296);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 296);
    v18 = *((_DWORD *)v5 + 240);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 240);
    v19 = *((_DWORD *)v5 + 304);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 304);
    v20 = *((_DWORD *)v5 + 248);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v506 = *a2;
    v490 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v503 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v506 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v506 + 2328);
    if (v23 >= (*(_QWORD *)(v506 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v24 = *(_QWORD *)(v506 + 2328);
      v10 = v490;
      v8 = v503;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 956);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v490;
      v8 = v503;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1212);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v507 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v490;
      v8 = v503;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 988);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 1524);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v490;
      v8 = v503;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1244);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v499 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v490;
      v8 = v503;
      v38 = v64;
      v48 = v499;
      goto LABEL_73;
    }
LABEL_1240:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v507 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1020);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v502 = *a1;
  v506 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v464 = v6 >> 30;
  v495 = (unsigned __int8 **)v4[2];
  v500 = v4[1];
  v516 = a3[2];
  v517 = a3[3];
  v518 = a3[4];
  v514 = *a3;
  v515 = a3[1];
  v70 = *((_DWORD *)v5 + 233);
  v450 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 297);
    v72 = *((_DWORD *)v5 + 241);
    v485 = *((_DWORD *)v5 + 305);
    v73 = *((_DWORD *)v5 + 249);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 297);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 241);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 305);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v485 = v81;
    v82 = *((_DWORD *)v5 + 249);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v85 = v11 >> 30;
  v447 = v70 >> 30;
  v475 = v72 >> 30;
  v480 = v71 >> 30;
  v453 = v73 >> 30;
  v526 = a3[2];
  v527 = a3[3];
  v528 = a3[4];
  v524 = *a3;
  v525 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v86 = v15;
    v87 = v16;
    v88 = a3[3];
    v541 = a3[2];
    v542 = v88;
    v543 = a3[4];
    v89 = *a3;
    v540 = a3[1];
    v539 = v89;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224682C40;
    v535 = (__int128)xmmword_224682C50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 0, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17000000130), xmmword_224682C50);
    if (!v13)
    {
      v536 = v526;
      v537 = v527;
      v538 = v528;
      v535 = v525;
      v534 = v524;
      *(_QWORD *)&v589 = 0x4040D0D04040D0DLL;
      v594 = xmmword_224682C60;
      v595 = (__int128)xmmword_224682C70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 0, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17000000130), xmmword_224682C70);
      if (!(v86 | v84 & 1))
      {
        v596 = v526;
        v597 = v527;
        v598 = v528;
        *(_QWORD *)&v584 = 0x40404040D0D0D0DLL;
        v594 = v524;
        v595 = v525;
        v589 = xmmword_224682C80;
        v590 = (__int128)xmmword_224682C90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 0, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17000000130), xmmword_224682C90);
        v90 = (v464 & 1) == 0 && (v14 | v83 & 1) == 0;
        if (!v87 && v90)
        {
          v591 = v526;
          v592 = v527;
          v593 = v528;
          v590 = v525;
          v589 = v524;
          *(_QWORD *)&v579 = 0x4040D0D04040D0DLL;
          v584 = xmmword_224682CA0;
          v585 = (__int128)xmmword_224682CB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 0, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF000000130), xmmword_224682CB0);
        }
      }
      if (v12)
        v91 = 0;
      else
        v91 = (v14 | v83 & 1) == 0;
      if (v91 && (v85 & 1) == 0)
      {
        v586 = v526;
        v587 = v527;
        v588 = v528;
        *(_QWORD *)&v574 = 0x40404040D0D0D0DLL;
        v585 = v525;
        v584 = v524;
        v579 = xmmword_224682CC0;
        v580 = (__int128)xmmword_224682CD0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 0, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF000000130), xmmword_224682CD0);
      }
    }
    if (((v84 | v480) & 1) == 0)
    {
      v581 = v526;
      v582 = v527;
      v583 = v528;
      v580 = v525;
      v579 = v524;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224682CE0;
      v575 = (__int128)xmmword_224682CF0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 0, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17000000130), xmmword_224682CF0);
      v92 = (v447 & 1) == 0 && ((v83 | v475) & 1) == 0;
      if ((v464 & 1) == 0 && v92)
      {
        v576 = v526;
        v577 = v527;
        v578 = v528;
        v575 = v525;
        v574 = v524;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224682D00;
        v570 = (__int128)xmmword_224682D10;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 0, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF000000130), xmmword_224682D10);
      }
    }
    v93 = (v85 & 1) == 0 && ((v83 | v475) & 1) == 0;
    v10 = v490;
    if (v93 && (v453 & 1) == 0)
    {
      v571 = v526;
      v572 = v527;
      v573 = v528;
      v570 = v525;
      v569 = v524;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224682D20;
      v565 = xmmword_224682D30;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 0, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF000000130), xmmword_224682D30);
      v10 = v490;
    }
  }
  v94 = *((_DWORD *)v5 + 234);
  if (**v502)
  {
    v95 = *((_DWORD *)v5 + 298);
    v96 = *((_DWORD *)v5 + 242);
    v97 = *((_DWORD *)v5 + 306);
    v98 = *((_DWORD *)v5 + 250);
  }
  else
  {
    if ((v94 & 0x10000000) != 0)
      v99 = 0x40000000;
    else
      v99 = 0x80000000;
    if ((v94 & 0x20000000) != 0)
      v94 = v99;
    else
      v94 &= 0xCFFFFFFF;
    v100 = *((_DWORD *)v5 + 298);
    if ((v100 & 0x10000000) != 0)
      v101 = 0x40000000;
    else
      v101 = 0x80000000;
    if ((v100 & 0x20000000) != 0)
      v95 = v101;
    else
      v95 = v100 & 0xCFFFFFFF;
    v102 = *((_DWORD *)v5 + 242);
    if ((v102 & 0x10000000) != 0)
      v103 = 0x40000000;
    else
      v103 = 0x80000000;
    if ((v102 & 0x20000000) != 0)
      v96 = v103;
    else
      v96 = v102 & 0xCFFFFFFF;
    v104 = *((_DWORD *)v5 + 306);
    if ((v104 & 0x10000000) != 0)
      v105 = 0x40000000;
    else
      v105 = 0x80000000;
    if ((v104 & 0x20000000) != 0)
      v97 = v105;
    else
      v97 = v104 & 0xCFFFFFFF;
    v106 = *((_DWORD *)v5 + 250);
    if ((v106 & 0x10000000) != 0)
      v98 = 0x40000000;
    else
      v98 = 0x80000000;
    if ((v106 & 0x20000000) == 0)
      v98 = v106 & 0xCFFFFFFF;
  }
  v470 = v96 >> 30;
  v107 = v94 >> 30;
  v491 = v95 >> 30;
  v108 = v98 >> 30;
  if ((v485 & 0x40000000) != 0)
  {
    v109 = (v10 & 0x40000000) == 0;
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224682D40;
    v535 = (__int128)xmmword_224682D50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 1, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17100000131), xmmword_224682D50);
    if (v109)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224682D60;
      v595 = (__int128)xmmword_224682D70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 1, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17100000131), xmmword_224682D70);
      if (((v84 | v480) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224682D80;
        v590 = (__int128)xmmword_224682D90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 1, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17100000131), xmmword_224682D90);
        v110 = (v447 & 1) == 0 && ((v83 | v475) & 1) == 0;
        if ((v464 & 1) == 0 && v110)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_224682DA0;
          v585 = (__int128)xmmword_224682DB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 1, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF100000131), xmmword_224682DB0);
        }
      }
      v111 = (v85 & 1) == 0 && ((v83 | v475) & 1) == 0;
      if (v111 && (v453 & 1) == 0)
      {
        v586 = v516;
        v587 = v517;
        v588 = v518;
        v585 = v515;
        v584 = v514;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_224682DC0;
        v580 = (__int128)xmmword_224682DD0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 1, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF100000131), xmmword_224682DD0);
      }
    }
    if (((v480 | v491) & 1) == 0)
    {
      v581 = v516;
      v582 = v517;
      v583 = v518;
      v580 = v515;
      v579 = v514;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224682DE0;
      v575 = (__int128)xmmword_224682DF0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 1, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17100000131), xmmword_224682DF0);
      v112 = (v107 & 1) == 0 && ((v475 | v470) & 1) == 0;
      if ((v447 & 1) == 0 && v112)
      {
        v576 = v516;
        v577 = v517;
        v578 = v518;
        v575 = v515;
        v574 = v514;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224682E00;
        v570 = (__int128)xmmword_224682E10;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 1, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF100000131), xmmword_224682E10);
      }
    }
    v113 = (v453 & 1) == 0 && ((v475 | v470) & 1) == 0;
    if (v113 && (v108 & 1) == 0)
    {
      v571 = v516;
      v572 = v517;
      v573 = v518;
      v570 = v515;
      v569 = v514;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224682E20;
      v565 = xmmword_224682E30;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 1, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF100000131), xmmword_224682E30);
    }
  }
  v114 = *((_DWORD *)v5 + 235);
  if (**v502)
  {
    v115 = *((_DWORD *)v5 + 299);
    v116 = *((_DWORD *)v5 + 243);
    v117 = *((_DWORD *)v5 + 307);
    v118 = *((_DWORD *)v5 + 251);
  }
  else
  {
    if ((v114 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v114 = v119;
    else
      v114 &= 0xCFFFFFFF;
    v120 = *((_DWORD *)v5 + 299);
    if ((v120 & 0x10000000) != 0)
      v121 = 0x40000000;
    else
      v121 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v115 = v121;
    else
      v115 = v120 & 0xCFFFFFFF;
    v122 = *((_DWORD *)v5 + 243);
    if ((v122 & 0x10000000) != 0)
      v123 = 0x40000000;
    else
      v123 = 0x80000000;
    if ((v122 & 0x20000000) != 0)
      v116 = v123;
    else
      v116 = v122 & 0xCFFFFFFF;
    v124 = *((_DWORD *)v5 + 307);
    if ((v124 & 0x10000000) != 0)
      v125 = 0x40000000;
    else
      v125 = 0x80000000;
    if ((v124 & 0x20000000) != 0)
      v117 = v125;
    else
      v117 = v124 & 0xCFFFFFFF;
    v126 = *((_DWORD *)v5 + 251);
    if ((v126 & 0x10000000) != 0)
      v118 = 0x40000000;
    else
      v118 = 0x80000000;
    if ((v126 & 0x20000000) == 0)
      v118 = v126 & 0xCFFFFFFF;
  }
  v446 = v114 >> 30;
  v460 = v116 >> 30;
  v465 = v115 >> 30;
  v127 = v118 >> 30;
  if ((v97 & 0x40000000) != 0)
  {
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224682E40;
    v535 = (__int128)xmmword_224682E50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 2, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17200000132), xmmword_224682E50);
    if ((v485 & 0x40000000) == 0)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224682E60;
      v595 = (__int128)xmmword_224682E70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 2, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17200000132), xmmword_224682E70);
      if (((v480 | v491) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224682E80;
        v590 = (__int128)xmmword_224682E90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 2, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17200000132), xmmword_224682E90);
        v128 = (v107 & 1) == 0 && ((v475 | v470) & 1) == 0;
        if ((v447 & 1) == 0 && v128)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_224682EA0;
          v585 = (__int128)xmmword_224682EB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 2, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF200000132), xmmword_224682EB0);
        }
      }
      v129 = (v453 & 1) == 0 && ((v475 | v470) & 1) == 0;
      if (v129 && (v108 & 1) == 0)
      {
        v586 = v516;
        v587 = v517;
        v588 = v518;
        v585 = v515;
        v584 = v514;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_224682EC0;
        v580 = (__int128)xmmword_224682ED0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 2, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF200000132), xmmword_224682ED0);
      }
    }
    if (((v491 | v465) & 1) == 0)
    {
      v581 = v516;
      v582 = v517;
      v583 = v518;
      v580 = v515;
      v579 = v514;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224682EE0;
      v575 = (__int128)xmmword_224682EF0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 2, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17200000132), xmmword_224682EF0);
      v130 = (v446 & 1) == 0 && ((v470 | v460) & 1) == 0;
      if ((v107 & 1) == 0 && v130)
      {
        v576 = v516;
        v577 = v517;
        v578 = v518;
        v575 = v515;
        v574 = v514;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224682F00;
        v570 = (__int128)xmmword_224682F10;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 2, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF200000132), xmmword_224682F10);
      }
    }
    v131 = (v108 & 1) == 0 && ((v470 | v460) & 1) == 0;
    if (v131 && (v127 & 1) == 0)
    {
      v571 = v516;
      v572 = v517;
      v573 = v518;
      v570 = v515;
      v569 = v514;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224682F20;
      v565 = xmmword_224682F30;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 2, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF200000132), xmmword_224682F30);
    }
  }
  v132 = *((_DWORD *)v5 + 236);
  if (**v502)
  {
    v133 = *((_DWORD *)v5 + 300);
    v134 = *((_DWORD *)v5 + 244);
    v135 = *((_DWORD *)v5 + 308);
    v136 = *((_DWORD *)v5 + 252);
  }
  else
  {
    if ((v132 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v132 & 0x20000000) != 0)
      v132 = v137;
    else
      v132 &= 0xCFFFFFFF;
    v138 = *((_DWORD *)v5 + 300);
    if ((v138 & 0x10000000) != 0)
      v139 = 0x40000000;
    else
      v139 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v133 = v139;
    else
      v133 = v138 & 0xCFFFFFFF;
    v140 = *((_DWORD *)v5 + 244);
    if ((v140 & 0x10000000) != 0)
      v141 = 0x40000000;
    else
      v141 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v134 = v141;
    else
      v134 = v140 & 0xCFFFFFFF;
    v142 = *((_DWORD *)v5 + 308);
    if ((v142 & 0x10000000) != 0)
      v143 = 0x40000000;
    else
      v143 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v135 = v143;
    else
      v135 = v142 & 0xCFFFFFFF;
    v144 = *((_DWORD *)v5 + 252);
    if ((v144 & 0x10000000) != 0)
      v136 = 0x40000000;
    else
      v136 = 0x80000000;
    if ((v144 & 0x20000000) == 0)
      v136 = v144 & 0xCFFFFFFF;
  }
  v448 = v132 >> 30;
  v481 = v134 >> 30;
  v486 = v133 >> 30;
  v454 = v136 >> 30;
  if ((v117 & 0x40000000) != 0)
  {
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224682F40;
    v535 = (__int128)xmmword_224682F50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 3, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17300000133), xmmword_224682F50);
    if ((v97 & 0x40000000) == 0)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224682F60;
      v595 = (__int128)xmmword_224682F70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 3, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17300000133), xmmword_224682F70);
      if (((v491 | v465) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224682F80;
        v590 = (__int128)xmmword_224682F90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 3, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17300000133), xmmword_224682F90);
        v145 = (v446 & 1) == 0 && ((v470 | v460) & 1) == 0;
        if ((v107 & 1) == 0 && v145)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_224682FA0;
          v585 = (__int128)xmmword_224682FB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 3, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF300000133), xmmword_224682FB0);
        }
      }
      v146 = (v108 & 1) == 0 && ((v470 | v460) & 1) == 0;
      if (v146 && (v127 & 1) == 0)
      {
        v586 = v516;
        v587 = v517;
        v588 = v518;
        v585 = v515;
        v584 = v514;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_224682FC0;
        v580 = (__int128)xmmword_224682FD0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 3, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF300000133), xmmword_224682FD0);
      }
    }
    if (((v465 | v486) & 1) == 0)
    {
      v581 = v516;
      v582 = v517;
      v583 = v518;
      v580 = v515;
      v579 = v514;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224682FE0;
      v575 = (__int128)xmmword_224682FF0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 3, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17300000133), xmmword_224682FF0);
      v147 = (v448 & 1) == 0 && ((v460 | v481) & 1) == 0;
      if ((v446 & 1) == 0 && v147)
      {
        v576 = v516;
        v577 = v517;
        v578 = v518;
        v575 = v515;
        v574 = v514;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683000;
        v570 = (__int128)xmmword_224683010;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 3, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF300000133), xmmword_224683010);
      }
    }
    v148 = (v127 & 1) == 0 && ((v460 | v481) & 1) == 0;
    if (v148 && (v454 & 1) == 0)
    {
      v571 = v516;
      v572 = v517;
      v573 = v518;
      v570 = v515;
      v569 = v514;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224683020;
      v565 = xmmword_224683030;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 3, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF300000133), xmmword_224683030);
    }
  }
  v149 = *((_DWORD *)v5 + 237);
  if (**v502)
  {
    v150 = *((_DWORD *)v5 + 301);
    v151 = *((_DWORD *)v5 + 245);
    v152 = *((_DWORD *)v5 + 309);
    v153 = *((_DWORD *)v5 + 253);
  }
  else
  {
    if ((v149 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v149 & 0x20000000) != 0)
      v149 = v154;
    else
      v149 &= 0xCFFFFFFF;
    v155 = *((_DWORD *)v5 + 301);
    if ((v155 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v155 & 0x20000000) != 0)
      v150 = v156;
    else
      v150 = v155 & 0xCFFFFFFF;
    v157 = *((_DWORD *)v5 + 245);
    if ((v157 & 0x10000000) != 0)
      v158 = 0x40000000;
    else
      v158 = 0x80000000;
    if ((v157 & 0x20000000) != 0)
      v151 = v158;
    else
      v151 = v157 & 0xCFFFFFFF;
    v159 = *((_DWORD *)v5 + 309);
    if ((v159 & 0x10000000) != 0)
      v160 = 0x40000000;
    else
      v160 = 0x80000000;
    if ((v159 & 0x20000000) != 0)
      v152 = v160;
    else
      v152 = v159 & 0xCFFFFFFF;
    v161 = *((_DWORD *)v5 + 253);
    if ((v161 & 0x10000000) != 0)
      v153 = 0x40000000;
    else
      v153 = 0x80000000;
    if ((v161 & 0x20000000) == 0)
      v153 = v161 & 0xCFFFFFFF;
  }
  v162 = v151 >> 30;
  v445 = v149 >> 30;
  v163 = v150 >> 30;
  v471 = v153 >> 30;
  if ((v135 & 0x40000000) != 0)
  {
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224683040;
    v535 = (__int128)xmmword_224683050;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 4, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17400000134), xmmword_224683050);
    if ((v117 & 0x40000000) == 0)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224683060;
      v595 = (__int128)xmmword_224683070;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 4, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17400000134), xmmword_224683070);
      if (((v465 | v486) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683080;
        v590 = (__int128)xmmword_224683090;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 4, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17400000134), xmmword_224683090);
        v164 = (v448 & 1) == 0 && ((v460 | v481) & 1) == 0;
        if ((v446 & 1) == 0 && v164)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246830A0;
          v585 = (__int128)xmmword_2246830B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 4, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF400000134), xmmword_2246830B0);
        }
      }
      v165 = (v127 & 1) == 0 && ((v460 | v481) & 1) == 0;
      if (v165 && (v454 & 1) == 0)
      {
        v586 = v516;
        v587 = v517;
        v588 = v518;
        v585 = v515;
        v584 = v514;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_2246830C0;
        v580 = (__int128)xmmword_2246830D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 4, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF400000134), xmmword_2246830D0);
      }
    }
    if (((v486 | v163) & 1) == 0)
    {
      v581 = v516;
      v582 = v517;
      v583 = v518;
      v580 = v515;
      v579 = v514;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246830E0;
      v575 = (__int128)xmmword_2246830F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 4, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17400000134), xmmword_2246830F0);
      v166 = (v445 & 1) == 0 && ((v481 | v162) & 1) == 0;
      if ((v448 & 1) == 0 && v166)
      {
        v576 = v516;
        v577 = v517;
        v578 = v518;
        v575 = v515;
        v574 = v514;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683100;
        v570 = (__int128)xmmword_224683110;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 4, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF400000134), xmmword_224683110);
      }
    }
    v167 = (v454 & 1) == 0 && ((v481 | v162) & 1) == 0;
    if (v167 && (v471 & 1) == 0)
    {
      v571 = v516;
      v572 = v517;
      v573 = v518;
      v570 = v515;
      v569 = v514;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224683120;
      v565 = xmmword_224683130;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 4, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF400000134), xmmword_224683130);
    }
  }
  v168 = *((_DWORD *)v5 + 238);
  if (**v502)
  {
    v169 = *((_DWORD *)v5 + 302);
    v170 = *((_DWORD *)v5 + 246);
    v171 = *((_DWORD *)v5 + 310);
    v172 = *((_DWORD *)v5 + 254);
  }
  else
  {
    if ((v168 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v168 = v173;
    else
      v168 &= 0xCFFFFFFF;
    v174 = *((_DWORD *)v5 + 302);
    if ((v174 & 0x10000000) != 0)
      v175 = 0x40000000;
    else
      v175 = 0x80000000;
    if ((v174 & 0x20000000) != 0)
      v169 = v175;
    else
      v169 = v174 & 0xCFFFFFFF;
    v176 = *((_DWORD *)v5 + 246);
    if ((v176 & 0x10000000) != 0)
      v177 = 0x40000000;
    else
      v177 = 0x80000000;
    if ((v176 & 0x20000000) != 0)
      v170 = v177;
    else
      v170 = v176 & 0xCFFFFFFF;
    v178 = *((_DWORD *)v5 + 310);
    if ((v178 & 0x10000000) != 0)
      v179 = 0x40000000;
    else
      v179 = 0x80000000;
    if ((v178 & 0x20000000) != 0)
      v171 = v179;
    else
      v171 = v178 & 0xCFFFFFFF;
    v180 = *((_DWORD *)v5 + 254);
    if ((v180 & 0x10000000) != 0)
      v172 = 0x40000000;
    else
      v172 = 0x80000000;
    if ((v180 & 0x20000000) == 0)
      v172 = v180 & 0xCFFFFFFF;
  }
  v476 = v170 >> 30;
  v492 = v169 >> 30;
  v461 = v168 >> 30;
  v466 = v172 >> 30;
  v556 = v516;
  v557 = v517;
  v558 = v518;
  v555 = v515;
  v554 = v514;
  if ((v152 & 0x40000000) != 0)
  {
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224683140;
    v535 = (__int128)xmmword_224683150;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 5, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17500000135), xmmword_224683150);
    if ((v135 & 0x40000000) == 0)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224683160;
      v595 = (__int128)xmmword_224683170;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 5, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17500000135), xmmword_224683170);
      if (((v486 | v163) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683180;
        v590 = (__int128)xmmword_224683190;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 5, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17500000135), xmmword_224683190);
        v181 = (v445 & 1) == 0 && ((v481 | v162) & 1) == 0;
        if ((v448 & 1) == 0 && v181)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246831A0;
          v585 = (__int128)xmmword_2246831B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 5, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF500000135), xmmword_2246831B0);
        }
      }
      v182 = (v454 & 1) == 0 && ((v481 | v162) & 1) == 0;
      if (v182 && (v471 & 1) == 0)
      {
        v586 = v556;
        v587 = v557;
        v588 = v558;
        v585 = v555;
        v584 = v554;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_2246831C0;
        v580 = (__int128)xmmword_2246831D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 5, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF500000135), xmmword_2246831D0);
      }
    }
    if (((v163 | v492) & 1) == 0)
    {
      v581 = v556;
      v582 = v557;
      v583 = v558;
      v580 = v555;
      v579 = v554;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246831E0;
      v575 = (__int128)xmmword_2246831F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 5, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17500000135), xmmword_2246831F0);
      v183 = (v461 & 1) == 0 && ((v162 | v476) & 1) == 0;
      if ((v445 & 1) == 0 && v183)
      {
        v576 = v556;
        v577 = v557;
        v578 = v558;
        v575 = v555;
        v574 = v554;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683200;
        v570 = (__int128)xmmword_224683210;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 5, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF500000135), xmmword_224683210);
      }
    }
    v184 = (v471 & 1) == 0 && ((v162 | v476) & 1) == 0;
    if (v184 && (v466 & 1) == 0)
    {
      v571 = v556;
      v572 = v557;
      v573 = v558;
      v570 = v555;
      v569 = v554;
      *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224683220;
      v565 = xmmword_224683230;
      *(_QWORD *)&v549 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 5, 6, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v549, COERCE_DOUBLE(0xF500000135), xmmword_224683230);
    }
  }
  v551 = v516;
  v552 = v517;
  v553 = v518;
  v550 = v515;
  v549 = v514;
  v185 = *((_DWORD *)v5 + 239);
  if (**v502)
  {
    v186 = *((_DWORD *)v5 + 303);
    v187 = *((_DWORD *)v5 + 247);
    v188 = *((_DWORD *)v5 + 311);
    v189 = *((_DWORD *)v5 + 255);
  }
  else
  {
    if ((v185 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v185 & 0x20000000) != 0)
      v185 = v190;
    else
      v185 &= 0xCFFFFFFF;
    v191 = *((_DWORD *)v5 + 303);
    if ((v191 & 0x10000000) != 0)
      v192 = 0x40000000;
    else
      v192 = 0x80000000;
    if ((v191 & 0x20000000) != 0)
      v186 = v192;
    else
      v186 = v191 & 0xCFFFFFFF;
    v193 = *((_DWORD *)v5 + 247);
    if ((v193 & 0x10000000) != 0)
      v194 = 0x40000000;
    else
      v194 = 0x80000000;
    if ((v193 & 0x20000000) != 0)
      v187 = v194;
    else
      v187 = v193 & 0xCFFFFFFF;
    v195 = *((_DWORD *)v5 + 311);
    if ((v195 & 0x10000000) != 0)
      v196 = 0x40000000;
    else
      v196 = 0x80000000;
    if ((v195 & 0x20000000) != 0)
      v188 = v196;
    else
      v188 = v195 & 0xCFFFFFFF;
    v197 = *((_DWORD *)v5 + 255);
    if ((v197 & 0x10000000) != 0)
      v189 = 0x40000000;
    else
      v189 = 0x80000000;
    if ((v197 & 0x20000000) == 0)
      v189 = v197 & 0xCFFFFFFF;
  }
  v198 = v187 >> 30;
  v504 = v185 >> 30;
  v199 = v186 >> 30;
  v200 = v189 >> 30;
  v561 = v516;
  v562 = v517;
  v563 = v518;
  v560 = v515;
  v559 = v514;
  if ((v171 & 0x40000000) != 0)
  {
    v541 = v516;
    v542 = v517;
    v543 = v518;
    v540 = v515;
    v539 = v514;
    *(_QWORD *)&v594 = 0xD0D0D0D0D0D0D0DLL;
    v534 = xmmword_224683240;
    v535 = (__int128)xmmword_224683250;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 6, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17600000136), xmmword_224683250);
    if ((v152 & 0x40000000) == 0)
    {
      v536 = v516;
      v537 = v517;
      v538 = v518;
      v535 = v515;
      v534 = v514;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224683260;
      v595 = (__int128)xmmword_224683270;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 6, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17600000136), xmmword_224683270);
      if (((v163 | v492) & 1) == 0)
      {
        v596 = v516;
        v597 = v517;
        v598 = v518;
        v594 = v514;
        v595 = v515;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683280;
        v590 = (__int128)xmmword_224683290;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 6, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17600000136), xmmword_224683290);
        v201 = (v461 & 1) == 0 && ((v162 | v476) & 1) == 0;
        if ((v445 & 1) == 0 && v201)
        {
          v591 = v516;
          v592 = v517;
          v593 = v518;
          v590 = v515;
          v589 = v514;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246832A0;
          v585 = (__int128)xmmword_2246832B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 6, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF600000136), xmmword_2246832B0);
        }
      }
      v202 = (v471 & 1) == 0 && ((v162 | v476) & 1) == 0;
      if (v202 && (v466 & 1) == 0)
      {
        v586 = v561;
        v587 = v562;
        v588 = v563;
        v585 = v560;
        v584 = v559;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_2246832C0;
        v580 = (__int128)xmmword_2246832D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 6, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF600000136), xmmword_2246832D0);
      }
    }
    if (((v492 | v199) & 1) == 0)
    {
      v581 = v561;
      v582 = v562;
      v583 = v563;
      v580 = v560;
      v579 = v559;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246832E0;
      v575 = (__int128)xmmword_2246832F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 6, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17600000136), xmmword_2246832F0);
      v203 = (v504 & 1) == 0 && ((v476 | v198) & 1) == 0;
      if ((v461 & 1) == 0 && v203)
      {
        v576 = v561;
        v577 = v562;
        v578 = v563;
        v575 = v560;
        v574 = v559;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683300;
        v570 = (__int128)xmmword_224683310;
        *(_QWORD *)&v544 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 6, 6, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v544, COERCE_DOUBLE(0xF600000136), xmmword_224683310);
      }
    }
    v204 = (v466 & 1) == 0 && ((v476 | v198) & 1) == 0;
    if (v204 && (v200 & 1) == 0)
    {
      v571 = v561;
      v572 = v562;
      v573 = v563;
      v570 = v560;
      v569 = v559;
      *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
      v564 = xmmword_224683320;
      v565 = xmmword_224683330;
      *(_QWORD *)&v600[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 6, 6, 4, (uint64_t)&v544, (uint64_t)&v564, (uint64_t)v600, COERCE_DOUBLE(0xF600000136), xmmword_224683330);
    }
  }
  v205 = *(unsigned int *)(v500 + 88);
  if ((v205 & 0x80000000) != 0)
  {
    v208 = *v495;
    v209 = *(_DWORD *)(v506 + 1208);
    v210 = **v495;
    if (**v495)
      goto LABEL_509;
  }
  else
  {
    v206 = *(_QWORD *)(v506 + 2328);
    if (v205 >= (*(_QWORD *)(v506 + 2336) - v206) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v206 = *(_QWORD *)(v506 + 2328);
    }
    v207 = v206 + (v205 << 11);
    v208 = *v495;
    v209 = *(_DWORD *)(v207 + 928);
    v210 = **v495;
    if (**v495)
    {
LABEL_509:
      v211 = *(unsigned int *)(v500 + 88);
      if ((v211 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v213 = *(_DWORD *)(v506 + 1464);
      if (v210)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v209 & 0x10000000) != 0)
    v218 = 0x40000000;
  else
    v218 = 0x80000000;
  if ((v209 & 0x20000000) != 0)
    v209 = v218;
  else
    v209 &= 0xCFFFFFFF;
  v211 = *(unsigned int *)(v500 + 88);
  if ((v211 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v212 = *(_QWORD *)(v506 + 2328);
  if (v211 >= (*(_QWORD *)(v506 + 2336) - v212) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v212 = *(_QWORD *)(v506 + 2328);
    v208 = *v495;
    v210 = **v495;
  }
  v213 = *(_DWORD *)(v212 + (v211 << 11) + 1184);
  if (v210)
  {
LABEL_514:
    v214 = *(unsigned int *)(v500 + 88);
    if ((v214 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v216 = *(_DWORD *)(v506 + 1240);
    if (v210)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v213 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v213 = v219;
  else
    v213 &= 0xCFFFFFFF;
  v214 = *(unsigned int *)(v500 + 88);
  if ((v214 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v215 = *(_QWORD *)(v506 + 2328);
  if (v214 >= (*(_QWORD *)(v506 + 2336) - v215) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v215 = *(_QWORD *)(v506 + 2328);
    v208 = *v495;
    v210 = **v495;
  }
  v216 = *(_DWORD *)(v215 + (v214 << 11) + 960);
  if (v210)
  {
LABEL_519:
    v217 = *(unsigned int *)(v500 + 88);
    if ((v217 & 0x80000000) != 0)
      goto LABEL_595;
    goto LABEL_545;
  }
LABEL_538:
  if ((v216 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v216 & 0x20000000) != 0)
    v216 = v220;
  else
    v216 &= 0xCFFFFFFF;
  v217 = *(unsigned int *)(v500 + 88);
  if ((v217 & 0x80000000) != 0)
    goto LABEL_595;
LABEL_545:
  v221 = *(_QWORD *)(v506 + 2328);
  v222 = (*(_QWORD *)(v506 + 2336) - v221) >> 11;
  if (v222 > v217)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v208 = *v495;
  v217 = *(unsigned int *)(v500 + 88);
  if ((v217 & 0x80000000) != 0)
  {
LABEL_595:
    v223 = v171;
    v224 = *(_DWORD *)(v506 + 1272);
    if (*v208)
      goto LABEL_559;
    goto LABEL_553;
  }
  v221 = *(_QWORD *)(v506 + 2328);
  v222 = (*(_QWORD *)(v506 + 2336) - v221) >> 11;
LABEL_549:
  if (v222 <= v217)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v221 = *(_QWORD *)(v506 + 2328);
    v208 = *v495;
  }
  v223 = v171;
  v224 = *(_DWORD *)(v221 + (v217 << 11) + 992);
  if (!*v208)
  {
LABEL_553:
    if ((v224 & 0x10000000) != 0)
      v225 = 0x40000000;
    else
      v225 = 0x80000000;
    if ((v224 & 0x20000000) != 0)
      v224 = v225;
    else
      v224 &= 0xCFFFFFFF;
  }
LABEL_559:
  v566 = v551;
  v567 = v552;
  v568 = v553;
  v565 = (float32x4_t)v550;
  v564 = v549;
  if ((v188 & 0x40000000) != 0)
  {
    v226 = (v223 & 0x40000000) == 0;
    v541 = v551;
    v542 = v552;
    v543 = v553;
    v540 = v550;
    v539 = v549;
    *(_QWORD *)&v594 = 0x161616160D0D0D0DLL;
    v534 = xmmword_224683340;
    v535 = (__int128)xmmword_224683350;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 7, 6, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17700000137), xmmword_224683350);
    if (v226)
    {
      v536 = v551;
      v537 = v552;
      v538 = v553;
      v535 = v550;
      v534 = v549;
      *(_QWORD *)&v589 = 0xD0D0D0D0D0D0D0DLL;
      v594 = xmmword_224683360;
      v595 = (__int128)xmmword_224683370;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 7, 6, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17700000137), xmmword_224683370);
      if (((v492 | v199) & 1) == 0)
      {
        v596 = v551;
        v597 = v552;
        v598 = v553;
        v594 = v549;
        v595 = v550;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683380;
        v590 = (__int128)xmmword_224683390;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 7, 6, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17700000137), xmmword_224683390);
        v227 = (v504 & 1) == 0 && ((v476 | v198) & 1) == 0;
        if ((v461 & 1) == 0 && v227)
        {
          v591 = v551;
          v592 = v552;
          v593 = v553;
          v590 = v550;
          v589 = v549;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246833A0;
          v585 = (__int128)xmmword_2246833B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 7, 6, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF700000137), xmmword_2246833B0);
        }
      }
      v228 = (v466 & 1) == 0 && ((v476 | v198) & 1) == 0;
      if (v228 && (v200 & 1) == 0)
      {
        v586 = v566;
        v587 = v567;
        v588 = v568;
        v585 = (__int128)v565;
        v584 = v564;
        *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
        v579 = xmmword_2246833C0;
        v580 = (__int128)xmmword_2246833D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 7, 6, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF700000137), xmmword_2246833D0);
      }
    }
    if (!(v213 & 0x40000000 | v199 & 1))
    {
      v581 = v566;
      v582 = v567;
      v583 = v568;
      *(_QWORD *)&v569 = 0x16160D0D16160D0DLL;
      v580 = (__int128)v565;
      v579 = v564;
      v574 = xmmword_2246833E0;
      v575 = (__int128)xmmword_2246833F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 7, 6, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v544, COERCE_DOUBLE(0x17700000137), xmmword_2246833F0);
      v229 = (v209 & 0x40000000) == 0 && (v216 & 0x40000000 | v198 & 1) == 0;
      if ((v504 & 1) == 0 && v229)
      {
        v576 = v566;
        v577 = v567;
        v578 = v568;
        *(_QWORD *)&v544 = 0x161616160D0D0D0DLL;
        v575 = (__int128)v565;
        v574 = v564;
        v569 = xmmword_224683400;
        v570 = (__int128)xmmword_224683410;
        *(_QWORD *)&v600[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 7, 6, 4, (uint64_t)&v544, (uint64_t)&v569, (uint64_t)v600, COERCE_DOUBLE(0xF700000137), xmmword_224683410);
      }
    }
    v230 = (v200 & 1) == 0 && (v216 & 0x40000000 | v198 & 1) == 0;
    if (v230 && (v224 & 0x40000000) == 0)
    {
      v571 = v566;
      v572 = v567;
      v573 = v568;
      *(_QWORD *)&v600[0] = 0x16160D0D16160D0DLL;
      v570 = (__int128)v565;
      v569 = v564;
      v544 = xmmword_224683420;
      v545 = (__int128)xmmword_224683430;
      v601[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 7, 6, 4, (uint64_t)v600, (uint64_t)&v544, (uint64_t)v601, COERCE_DOUBLE(0xF700000137), xmmword_224683430);
    }
  }
  v231 = a1[2];
  v232 = *v450;
  v505 = (unsigned __int8 **)v450[2];
  v508 = (unsigned int *)v450[1];
  v512 = a3[3];
  v513 = a3[4];
  v510 = a3[1];
  v511 = a3[2];
  v509 = *a3;
  v459 = *(_OWORD *)a1;
  v233 = *((_DWORD *)v231 + 240);
  if (**(_BYTE **)v459)
  {
    v482 = *((_DWORD *)v231 + 248);
    v487 = *((_DWORD *)v231 + 304);
    v496 = *((_DWORD *)v231 + 312);
    v234 = v508[16];
    if ((v234 & 0x80000000) == 0)
      goto LABEL_589;
LABEL_611:
    v237 = *v505;
    v238 = *(_DWORD *)(v232 + 1048);
    v239 = **v505;
    if (**v505)
      goto LABEL_593;
LABEL_612:
    if ((v238 & 0x10000000) != 0)
      v248 = 0x40000000;
    else
      v248 = 0x80000000;
    if ((v238 & 0x20000000) != 0)
      v238 = v248;
    else
      v238 &= 0xCFFFFFFF;
    if ((v496 & 0x40000000) == 0)
      goto LABEL_594;
    goto LABEL_619;
  }
  if ((v233 & 0x20000000) != 0)
    v233 *= 4;
  v242 = *((_DWORD *)v231 + 304);
  if ((v242 & 0x20000000) != 0)
    v243 = 4 * v242;
  else
    v243 = *((_DWORD *)v231 + 304);
  v244 = *((_DWORD *)v231 + 248);
  if ((v244 & 0x20000000) != 0)
    v244 *= 4;
  v482 = v244;
  v487 = v243;
  v245 = *((_DWORD *)v231 + 312);
  if ((v245 & 0x10000000) != 0)
    v246 = 0x40000000;
  else
    v246 = 0x80000000;
  if ((v245 & 0x20000000) != 0)
    v247 = v246;
  else
    v247 = v245 & 0xCFFFFFFF;
  v496 = v247;
  v234 = v508[16];
  if ((v234 & 0x80000000) != 0)
    goto LABEL_611;
LABEL_589:
  v235 = *(_QWORD *)(v232 + 2328);
  if (v234 >= (*(_QWORD *)(v232 + 2336) - v235) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v235 = *(_QWORD *)(v232 + 2328);
  }
  v236 = v235 + (v234 << 11);
  v237 = *v505;
  v238 = *(_DWORD *)(v236 + 768);
  v239 = **v505;
  if (!**v505)
    goto LABEL_612;
LABEL_593:
  if ((v496 & 0x40000000) == 0)
  {
LABEL_594:
    v467 = 0;
    v240 = 0;
    v241 = 0;
    v477 = 0;
    v455 = 0;
    goto LABEL_685;
  }
LABEL_619:
  v249 = v508[4];
  if ((v249 & 0x80000000) != 0)
  {
    v251 = *(_DWORD *)(v232 + 1268);
    if (v239)
      goto LABEL_624;
  }
  else
  {
    v250 = *(_QWORD *)(v232 + 2328);
    if (v249 >= (*(_QWORD *)(v232 + 2336) - v250) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v250 = *(_QWORD *)(v232 + 2328);
      v237 = *v505;
      v239 = **v505;
    }
    v251 = *(_DWORD *)(v250 + (v249 << 11) + 988);
    if (v239)
    {
LABEL_624:
      v252 = v508[4];
      if ((v252 & 0x80000000) == 0)
        goto LABEL_625;
LABEL_652:
      v254 = *(_DWORD *)(v232 + 1524);
      if (v239)
        goto LABEL_629;
      goto LABEL_653;
    }
  }
  if ((v251 & 0x10000000) != 0)
    v264 = 0x40000000;
  else
    v264 = 0x80000000;
  if ((v251 & 0x20000000) != 0)
    v251 = v264;
  else
    v251 &= 0xCFFFFFFF;
  v252 = v508[4];
  if ((v252 & 0x80000000) != 0)
    goto LABEL_652;
LABEL_625:
  v253 = *(_QWORD *)(v232 + 2328);
  if (v252 >= (*(_QWORD *)(v232 + 2336) - v253) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v253 = *(_QWORD *)(v232 + 2328);
    v237 = *v505;
    v239 = **v505;
  }
  v254 = *(_DWORD *)(v253 + (v252 << 11) + 1244);
  if (v239)
  {
LABEL_629:
    v255 = v508[4];
    if ((v255 & 0x80000000) == 0)
      goto LABEL_630;
LABEL_660:
    v257 = *(_DWORD *)(v232 + 1300);
    if (v239)
      goto LABEL_634;
    goto LABEL_661;
  }
LABEL_653:
  if ((v254 & 0x10000000) != 0)
    v265 = 0x40000000;
  else
    v265 = 0x80000000;
  if ((v254 & 0x20000000) != 0)
    v254 = v265;
  else
    v254 &= 0xCFFFFFFF;
  v255 = v508[4];
  if ((v255 & 0x80000000) != 0)
    goto LABEL_660;
LABEL_630:
  v256 = *(_QWORD *)(v232 + 2328);
  if (v255 >= (*(_QWORD *)(v232 + 2336) - v256) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v256 = *(_QWORD *)(v232 + 2328);
    v237 = *v505;
    v239 = **v505;
  }
  v257 = *(_DWORD *)(v256 + (v255 << 11) + 1020);
  if (v239)
  {
LABEL_634:
    v258 = v508[4];
    if ((v258 & 0x80000000) == 0)
      goto LABEL_635;
LABEL_668:
    v260 = *(_DWORD *)(v232 + 1556);
    if (v239)
      goto LABEL_639;
LABEL_669:
    if ((v260 & 0x10000000) != 0)
      v267 = 0x40000000;
    else
      v267 = 0x80000000;
    if ((v260 & 0x20000000) != 0)
      v260 = v267;
    else
      v260 &= 0xCFFFFFFF;
    v261 = v508[7];
    if ((v261 & 0x80000000) == 0)
      goto LABEL_640;
    goto LABEL_676;
  }
LABEL_661:
  if ((v257 & 0x10000000) != 0)
    v266 = 0x40000000;
  else
    v266 = 0x80000000;
  if ((v257 & 0x20000000) != 0)
    v257 = v266;
  else
    v257 &= 0xCFFFFFFF;
  v258 = v508[4];
  if ((v258 & 0x80000000) != 0)
    goto LABEL_668;
LABEL_635:
  v259 = *(_QWORD *)(v232 + 2328);
  if (v258 >= (*(_QWORD *)(v232 + 2336) - v259) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v259 = *(_QWORD *)(v232 + 2328);
    v237 = *v505;
    v239 = **v505;
  }
  v260 = *(_DWORD *)(v259 + (v258 << 11) + 1276);
  if (!v239)
    goto LABEL_669;
LABEL_639:
  v261 = v508[7];
  if ((v261 & 0x80000000) == 0)
  {
LABEL_640:
    v262 = *(_QWORD *)(v232 + 2328);
    if (v261 >= (*(_QWORD *)(v232 + 2336) - v262) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v262 = *(_QWORD *)(v232 + 2328);
      v237 = *v505;
      v239 = **v505;
    }
    v263 = v262 + (v261 << 11);
    goto LABEL_677;
  }
LABEL_676:
  v263 = v232 + 280;
LABEL_677:
  v455 = (v251 >> 30) & 1;
  v477 = (v254 >> 30) & 1;
  v241 = (v257 >> 30) & 1;
  v268 = *(_DWORD *)(v263 + 796);
  v240 = (v260 >> 30) & 1;
  if (!v239)
  {
    if ((v268 & 0x10000000) != 0)
      v269 = 0x40000000;
    else
      v269 = 0x80000000;
    if ((v268 & 0x20000000) != 0)
      v268 = v269;
    else
      v268 &= 0xCFFFFFFF;
  }
  v467 = (v268 >> 30) & 1;
LABEL_685:
  v546 = v511;
  v547 = v512;
  v548 = v513;
  v545 = v510;
  v544 = v509;
  v270 = *((_DWORD *)v231 + 241);
  if (**(_BYTE **)v459)
  {
    v271 = *((_DWORD *)v231 + 305);
    v272 = *((_DWORD *)v231 + 249);
    v493 = *((_DWORD *)v231 + 313);
    v273 = v508[16];
    if ((v273 & 0x80000000) == 0)
      goto LABEL_687;
LABEL_1007:
    v472 = v233 >> 30;
    v275 = *(_DWORD *)(v232 + 1052);
    if (*v237)
      goto LABEL_697;
    goto LABEL_691;
  }
  if ((v270 & 0x10000000) != 0)
    v378 = 0x40000000;
  else
    v378 = 0x80000000;
  if ((v270 & 0x20000000) != 0)
    v270 = v378;
  else
    v270 &= 0xCFFFFFFF;
  v379 = *((_DWORD *)v231 + 305);
  if ((v379 & 0x10000000) != 0)
    v380 = 0x40000000;
  else
    v380 = 0x80000000;
  if ((v379 & 0x20000000) != 0)
    v271 = v380;
  else
    v271 = v379 & 0xCFFFFFFF;
  v381 = *((_DWORD *)v231 + 249);
  if ((v381 & 0x10000000) != 0)
    v382 = 0x40000000;
  else
    v382 = 0x80000000;
  if ((v381 & 0x20000000) != 0)
    v272 = v382;
  else
    v272 = v381 & 0xCFFFFFFF;
  v383 = *((_DWORD *)v231 + 313);
  if ((v383 & 0x10000000) != 0)
    v384 = 0x40000000;
  else
    v384 = 0x80000000;
  if ((v383 & 0x20000000) != 0)
    v385 = v384;
  else
    v385 = v383 & 0xCFFFFFFF;
  v493 = v385;
  v273 = v508[16];
  if ((v273 & 0x80000000) != 0)
    goto LABEL_1007;
LABEL_687:
  v274 = *(_QWORD *)(v232 + 2328);
  if (v273 >= (*(_QWORD *)(v232 + 2336) - v274) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v274 = *(_QWORD *)(v232 + 2328);
    v237 = *v505;
  }
  v472 = v233 >> 30;
  v275 = *(_DWORD *)(v274 + (v273 << 11) + 772);
  if (!*v237)
  {
LABEL_691:
    if ((v275 & 0x10000000) != 0)
      v276 = 0x40000000;
    else
      v276 = 0x80000000;
    if ((v275 & 0x20000000) != 0)
      v275 = v276;
    else
      v275 &= 0xCFFFFFFF;
  }
LABEL_697:
  v462 = v270 >> 30;
  v277 = v482 >> 30;
  v278 = v487 >> 30;
  v279 = v238 >> 30;
  v483 = v272 >> 30;
  v488 = v271 >> 30;
  v280 = v275 >> 30;
  if ((v496 & 0x40000000) != 0)
  {
    v541 = v511;
    v542 = v512;
    v543 = v513;
    v540 = v510;
    v539 = v509;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683440;
    v535 = (__int128)xmmword_224683450;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 0, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17800000138), xmmword_224683450);
    if (!v240)
    {
      v536 = v511;
      v537 = v512;
      v538 = v513;
      *(_QWORD *)&v589 = 0x707101004040D0DLL;
      v535 = v510;
      v534 = v509;
      v594 = xmmword_224683460;
      v595 = (__int128)xmmword_224683470;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 0, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17800000138), xmmword_224683470);
      if (!(v477 | v278 & 1))
      {
        v596 = v511;
        v597 = v512;
        v598 = v513;
        *(_QWORD *)&v584 = 0x40404040D0D0D0DLL;
        v594 = v509;
        v595 = v510;
        v589 = xmmword_224683480;
        v590 = (__int128)xmmword_224683490;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 0, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17800000138), xmmword_224683490);
        v281 = (v472 & 1) == 0 && (v241 | v277 & 1) == 0;
        if (!v455 && v281)
        {
          v591 = v511;
          v592 = v512;
          v593 = v513;
          v590 = v510;
          v589 = v509;
          *(_QWORD *)&v579 = 0x4040D0D04040D0DLL;
          v584 = xmmword_2246834A0;
          v585 = (__int128)xmmword_2246834B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 0, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF800000138), xmmword_2246834B0);
        }
      }
      if (v467)
        v282 = 0;
      else
        v282 = (v241 | v277 & 1) == 0;
      if (v282 && (v279 & 1) == 0)
      {
        v586 = v511;
        v587 = v512;
        v588 = v513;
        *(_QWORD *)&v574 = 0x707040410100D0DLL;
        v585 = v510;
        v584 = v509;
        v579 = xmmword_2246834C0;
        v580 = (__int128)xmmword_2246834D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 0, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF800000138), xmmword_2246834D0);
      }
    }
    if (((v278 | v488) & 1) == 0)
    {
      v581 = v511;
      v582 = v512;
      v583 = v513;
      v580 = v510;
      v579 = v509;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246834E0;
      v575 = (__int128)xmmword_2246834F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 0, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17800000138), xmmword_2246834F0);
      v283 = (v462 & 1) == 0 && ((v277 | v483) & 1) == 0;
      if ((v472 & 1) == 0 && v283)
      {
        v576 = v511;
        v577 = v512;
        v578 = v513;
        v575 = v510;
        v574 = v509;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683500;
        v570 = (__int128)xmmword_224683510;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 0, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF800000138), xmmword_224683510);
      }
    }
    v284 = (v279 & 1) == 0 && ((v277 | v483) & 1) == 0;
    if (v284 && (v280 & 1) == 0)
    {
      v571 = v511;
      v572 = v512;
      v573 = v513;
      v570 = v510;
      v569 = v509;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683520;
      v565 = xmmword_224683530;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 0, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF800000138), xmmword_224683530);
    }
  }
  v521 = v546;
  v522 = v547;
  v523 = v548;
  v519 = v544;
  v520 = v545;
  v285 = *((_DWORD *)v231 + 242);
  if (**(_BYTE **)v459)
  {
    v286 = *((_DWORD *)v231 + 306);
    v287 = *((_DWORD *)v231 + 250);
    v478 = *((_DWORD *)v231 + 314);
    v288 = v508[16];
    if ((v288 & 0x80000000) == 0)
      goto LABEL_727;
LABEL_1034:
    v290 = *(_DWORD *)(v232 + 1056);
    if (**v505)
      goto LABEL_737;
    goto LABEL_731;
  }
  if ((v285 & 0x10000000) != 0)
    v386 = 0x40000000;
  else
    v386 = 0x80000000;
  if ((v285 & 0x20000000) != 0)
    v285 = v386;
  else
    v285 &= 0xCFFFFFFF;
  v387 = *((_DWORD *)v231 + 306);
  if ((v387 & 0x10000000) != 0)
    v388 = 0x40000000;
  else
    v388 = 0x80000000;
  if ((v387 & 0x20000000) != 0)
    v286 = v388;
  else
    v286 = v387 & 0xCFFFFFFF;
  v389 = *((_DWORD *)v231 + 250);
  if ((v389 & 0x10000000) != 0)
    v390 = 0x40000000;
  else
    v390 = 0x80000000;
  if ((v389 & 0x20000000) != 0)
    v287 = v390;
  else
    v287 = v389 & 0xCFFFFFFF;
  v391 = *((_DWORD *)v231 + 314);
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v393 = v392;
  else
    v393 = v391 & 0xCFFFFFFF;
  v478 = v393;
  v288 = v508[16];
  if ((v288 & 0x80000000) != 0)
    goto LABEL_1034;
LABEL_727:
  v289 = *(_QWORD *)(v232 + 2328);
  if (v288 >= (*(_QWORD *)(v232 + 2336) - v289) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v289 = *(_QWORD *)(v232 + 2328);
  }
  v290 = *(_DWORD *)(v289 + (v288 << 11) + 776);
  if (!**v505)
  {
LABEL_731:
    if ((v290 & 0x10000000) != 0)
      v291 = 0x40000000;
    else
      v291 = 0x80000000;
    if ((v290 & 0x20000000) != 0)
      v290 = v291;
    else
      v290 &= 0xCFFFFFFF;
  }
LABEL_737:
  v456 = v285 >> 30;
  v292 = v286 >> 30;
  v293 = v287 >> 30;
  v468 = v290 >> 30;
  v531 = v546;
  v532 = v547;
  v533 = v548;
  v529 = v544;
  v530 = v545;
  if ((v493 & 0x40000000) != 0)
  {
    v541 = v546;
    v542 = v547;
    v543 = v548;
    v540 = v545;
    v539 = v544;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683540;
    v535 = (__int128)xmmword_224683550;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 1, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17900000139), xmmword_224683550);
    if ((v496 & 0x40000000) == 0)
    {
      v536 = v546;
      v537 = v547;
      v538 = v548;
      v535 = v545;
      v534 = v544;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683560;
      v595 = (__int128)xmmword_224683570;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 1, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17900000139), xmmword_224683570);
      if (((v278 | v488) & 1) == 0)
      {
        v596 = v546;
        v597 = v547;
        v598 = v548;
        v594 = v544;
        v595 = v545;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683580;
        v590 = (__int128)xmmword_224683590;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 1, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17900000139), xmmword_224683590);
        v294 = (v462 & 1) == 0 && ((v277 | v483) & 1) == 0;
        if ((v472 & 1) == 0 && v294)
        {
          v591 = v546;
          v592 = v547;
          v593 = v548;
          v590 = v545;
          v589 = v544;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246835A0;
          v585 = (__int128)xmmword_2246835B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 1, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xF900000139), xmmword_2246835B0);
        }
      }
      v295 = (v279 & 1) == 0 && ((v277 | v483) & 1) == 0;
      if (v295 && (v280 & 1) == 0)
      {
        v586 = v531;
        v587 = v532;
        v588 = v533;
        v585 = v530;
        v584 = v529;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_2246835C0;
        v580 = (__int128)xmmword_2246835D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 1, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xF900000139), xmmword_2246835D0);
      }
    }
    if (((v488 | v292) & 1) == 0)
    {
      v581 = v531;
      v582 = v532;
      v583 = v533;
      v580 = v530;
      v579 = v529;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246835E0;
      v575 = (__int128)xmmword_2246835F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 1, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17900000139), xmmword_2246835F0);
      v296 = (v285 & 0x40000000) == 0 && ((v483 | v293) & 1) == 0;
      if ((v462 & 1) == 0 && v296)
      {
        v576 = v531;
        v577 = v532;
        v578 = v533;
        v575 = v530;
        v574 = v529;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683600;
        v570 = (__int128)xmmword_224683610;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 1, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xF900000139), xmmword_224683610);
      }
    }
    v297 = (v280 & 1) == 0 && ((v483 | v293) & 1) == 0;
    if (v297 && (v468 & 1) == 0)
    {
      v571 = v531;
      v572 = v532;
      v573 = v533;
      v570 = v530;
      v569 = v529;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683620;
      v565 = xmmword_224683630;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 1, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xF900000139), xmmword_224683630);
    }
  }
  v298 = *((_DWORD *)v231 + 243);
  if (**(_BYTE **)v459)
  {
    v299 = *((_DWORD *)v231 + 307);
    v300 = *((_DWORD *)v231 + 251);
    v497 = *((_DWORD *)v231 + 315);
    v301 = v508[16];
    if ((v301 & 0x80000000) == 0)
      goto LABEL_767;
LABEL_1061:
    v303 = *(_DWORD *)(v232 + 1060);
    if (**v505)
      goto LABEL_777;
    goto LABEL_771;
  }
  if ((v298 & 0x10000000) != 0)
    v394 = 0x40000000;
  else
    v394 = 0x80000000;
  if ((v298 & 0x20000000) != 0)
    v298 = v394;
  else
    v298 &= 0xCFFFFFFF;
  v395 = *((_DWORD *)v231 + 307);
  if ((v395 & 0x10000000) != 0)
    v396 = 0x40000000;
  else
    v396 = 0x80000000;
  if ((v395 & 0x20000000) != 0)
    v299 = v396;
  else
    v299 = v395 & 0xCFFFFFFF;
  v397 = *((_DWORD *)v231 + 251);
  if ((v397 & 0x10000000) != 0)
    v398 = 0x40000000;
  else
    v398 = 0x80000000;
  if ((v397 & 0x20000000) != 0)
    v300 = v398;
  else
    v300 = v397 & 0xCFFFFFFF;
  v399 = *((_DWORD *)v231 + 315);
  if ((v399 & 0x10000000) != 0)
    v400 = 0x40000000;
  else
    v400 = 0x80000000;
  if ((v399 & 0x20000000) != 0)
    v401 = v400;
  else
    v401 = v399 & 0xCFFFFFFF;
  v497 = v401;
  v301 = v508[16];
  if ((v301 & 0x80000000) != 0)
    goto LABEL_1061;
LABEL_767:
  v302 = *(_QWORD *)(v232 + 2328);
  if (v301 >= (*(_QWORD *)(v232 + 2336) - v302) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v302 = *(_QWORD *)(v232 + 2328);
  }
  v303 = *(_DWORD *)(v302 + (v301 << 11) + 780);
  if (!**v505)
  {
LABEL_771:
    if ((v303 & 0x10000000) != 0)
      v304 = 0x40000000;
    else
      v304 = 0x80000000;
    if ((v303 & 0x20000000) != 0)
      v303 = v304;
    else
      v303 &= 0xCFFFFFFF;
  }
LABEL_777:
  v451 = v298 >> 30;
  v473 = v299 >> 30;
  v305 = v300 >> 30;
  v306 = v303 >> 30;
  if ((v478 & 0x40000000) != 0)
  {
    v541 = v521;
    v542 = v522;
    v543 = v523;
    v540 = v520;
    v539 = v519;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683640;
    v535 = (__int128)xmmword_224683650;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 2, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17A0000013ALL), xmmword_224683650);
    if ((v493 & 0x40000000) == 0)
    {
      v536 = v521;
      v537 = v522;
      v538 = v523;
      v535 = v520;
      v534 = v519;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683660;
      v595 = (__int128)xmmword_224683670;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 2, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17A0000013ALL), xmmword_224683670);
      if (((v488 | v292) & 1) == 0)
      {
        v596 = v521;
        v597 = v522;
        v598 = v523;
        v594 = v519;
        v595 = v520;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683680;
        v590 = (__int128)xmmword_224683690;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 2, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17A0000013ALL), xmmword_224683690);
        v307 = (v456 & 1) == 0 && ((v483 | v293) & 1) == 0;
        if ((v462 & 1) == 0 && v307)
        {
          v591 = v521;
          v592 = v522;
          v593 = v523;
          v590 = v520;
          v589 = v519;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246836A0;
          v585 = (__int128)xmmword_2246836B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 2, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFA0000013ALL), xmmword_2246836B0);
        }
      }
      v308 = (v280 & 1) == 0 && ((v483 | v293) & 1) == 0;
      if (v308 && (v468 & 1) == 0)
      {
        v586 = v521;
        v587 = v522;
        v588 = v523;
        v585 = v520;
        v584 = v519;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_2246836C0;
        v580 = (__int128)xmmword_2246836D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 2, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFA0000013ALL), xmmword_2246836D0);
      }
    }
    if (((v292 | v473) & 1) == 0)
    {
      v581 = v521;
      v582 = v522;
      v583 = v523;
      v580 = v520;
      v579 = v519;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246836E0;
      v575 = (__int128)xmmword_2246836F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 2, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17A0000013ALL), xmmword_2246836F0);
      v309 = (v451 & 1) == 0 && ((v293 | v305) & 1) == 0;
      if ((v456 & 1) == 0 && v309)
      {
        v576 = v521;
        v577 = v522;
        v578 = v523;
        v575 = v520;
        v574 = v519;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683700;
        v570 = (__int128)xmmword_224683710;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 2, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xFA0000013ALL), xmmword_224683710);
      }
    }
    v310 = (v468 & 1) == 0 && ((v293 | v305) & 1) == 0;
    if (v310 && (v306 & 1) == 0)
    {
      v571 = v521;
      v572 = v522;
      v573 = v523;
      v570 = v520;
      v569 = v519;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683720;
      v565 = xmmword_224683730;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 2, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xFA0000013ALL), xmmword_224683730);
    }
  }
  v311 = *((_DWORD *)v231 + 244);
  if (**(_BYTE **)v459)
  {
    v312 = *((_DWORD *)v231 + 308);
    v313 = *((_DWORD *)v231 + 252);
    v494 = *((_DWORD *)v231 + 316);
    v314 = v508[16];
    if ((v314 & 0x80000000) == 0)
      goto LABEL_807;
LABEL_1088:
    v316 = *(_DWORD *)(v232 + 1064);
    if (**v505)
      goto LABEL_817;
    goto LABEL_811;
  }
  if ((v311 & 0x10000000) != 0)
    v402 = 0x40000000;
  else
    v402 = 0x80000000;
  if ((v311 & 0x20000000) != 0)
    v311 = v402;
  else
    v311 &= 0xCFFFFFFF;
  v403 = *((_DWORD *)v231 + 308);
  if ((v403 & 0x10000000) != 0)
    v404 = 0x40000000;
  else
    v404 = 0x80000000;
  if ((v403 & 0x20000000) != 0)
    v312 = v404;
  else
    v312 = v403 & 0xCFFFFFFF;
  v405 = *((_DWORD *)v231 + 252);
  if ((v405 & 0x10000000) != 0)
    v406 = 0x40000000;
  else
    v406 = 0x80000000;
  if ((v405 & 0x20000000) != 0)
    v313 = v406;
  else
    v313 = v405 & 0xCFFFFFFF;
  v407 = *((_DWORD *)v231 + 316);
  if ((v407 & 0x10000000) != 0)
    v408 = 0x40000000;
  else
    v408 = 0x80000000;
  if ((v407 & 0x20000000) != 0)
    v409 = v408;
  else
    v409 = v407 & 0xCFFFFFFF;
  v494 = v409;
  v314 = v508[16];
  if ((v314 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_807:
  v315 = *(_QWORD *)(v232 + 2328);
  if (v314 >= (*(_QWORD *)(v232 + 2336) - v315) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v315 = *(_QWORD *)(v232 + 2328);
  }
  v316 = *(_DWORD *)(v315 + (v314 << 11) + 784);
  if (!**v505)
  {
LABEL_811:
    if ((v316 & 0x10000000) != 0)
      v317 = 0x40000000;
    else
      v317 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v316 = v317;
    else
      v316 &= 0xCFFFFFFF;
  }
LABEL_817:
  v449 = v311 >> 30;
  v318 = v312 >> 30;
  v319 = v313 >> 30;
  v463 = v316 >> 30;
  if ((v497 & 0x40000000) != 0)
  {
    v541 = v521;
    v542 = v522;
    v543 = v523;
    v540 = v520;
    v539 = v519;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683740;
    v535 = (__int128)xmmword_224683750;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 3, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17B0000013BLL), xmmword_224683750);
    if ((v478 & 0x40000000) == 0)
    {
      v536 = v521;
      v537 = v522;
      v538 = v523;
      v535 = v520;
      v534 = v519;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683760;
      v595 = (__int128)xmmword_224683770;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 3, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17B0000013BLL), xmmword_224683770);
      v320 = ((v293 | v305) & 1) == 0;
      if (((v292 | v473) & 1) == 0)
      {
        v596 = v521;
        v597 = v522;
        v598 = v523;
        v594 = v519;
        v595 = v520;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683780;
        v590 = (__int128)xmmword_224683790;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 3, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17B0000013BLL), xmmword_224683790);
        v321 = (v451 & 1) == 0 && v320;
        if ((v456 & 1) == 0 && v321)
        {
          v591 = v521;
          v592 = v522;
          v593 = v523;
          v590 = v520;
          v589 = v519;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246837A0;
          v585 = (__int128)xmmword_2246837B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 3, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFB0000013BLL), xmmword_2246837B0);
        }
      }
      v322 = (v468 & 1) == 0 && v320;
      if (v322 && (v306 & 1) == 0)
      {
        v586 = v521;
        v587 = v522;
        v588 = v523;
        v585 = v520;
        v584 = v519;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_2246837C0;
        v580 = (__int128)xmmword_2246837D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 3, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFB0000013BLL), xmmword_2246837D0);
      }
    }
    if (((v473 | v318) & 1) == 0)
    {
      v581 = v521;
      v582 = v522;
      v583 = v523;
      v580 = v520;
      v579 = v519;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246837E0;
      v575 = (__int128)xmmword_2246837F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 3, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17B0000013BLL), xmmword_2246837F0);
      v323 = (v449 & 1) == 0 && ((v305 | v319) & 1) == 0;
      if ((v451 & 1) == 0 && v323)
      {
        v576 = v521;
        v577 = v522;
        v578 = v523;
        v575 = v520;
        v574 = v519;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683800;
        v570 = (__int128)xmmword_224683810;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 3, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xFB0000013BLL), xmmword_224683810);
      }
    }
    v324 = (v306 & 1) == 0 && ((v305 | v319) & 1) == 0;
    if (v324 && (v463 & 1) == 0)
    {
      v571 = v521;
      v572 = v522;
      v573 = v523;
      v570 = v520;
      v569 = v519;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683820;
      v565 = xmmword_224683830;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 3, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xFB0000013BLL), xmmword_224683830);
    }
  }
  v325 = *((_DWORD *)v231 + 245);
  if (**(_BYTE **)v459)
  {
    v326 = *((_DWORD *)v231 + 309);
    v327 = *((_DWORD *)v231 + 253);
    v489 = *((_DWORD *)v231 + 317);
    v328 = v508[16];
    if ((v328 & 0x80000000) == 0)
      goto LABEL_847;
LABEL_1115:
    v330 = *(_DWORD *)(v232 + 1068);
    if (**v505)
      goto LABEL_857;
    goto LABEL_851;
  }
  if ((v325 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v325 & 0x20000000) != 0)
    v325 = v410;
  else
    v325 &= 0xCFFFFFFF;
  v411 = *((_DWORD *)v231 + 309);
  if ((v411 & 0x10000000) != 0)
    v412 = 0x40000000;
  else
    v412 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v326 = v412;
  else
    v326 = v411 & 0xCFFFFFFF;
  v413 = *((_DWORD *)v231 + 253);
  if ((v413 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v413 & 0x20000000) != 0)
    v327 = v414;
  else
    v327 = v413 & 0xCFFFFFFF;
  v415 = *((_DWORD *)v231 + 317);
  if ((v415 & 0x10000000) != 0)
    v416 = 0x40000000;
  else
    v416 = 0x80000000;
  if ((v415 & 0x20000000) != 0)
    v417 = v416;
  else
    v417 = v415 & 0xCFFFFFFF;
  v489 = v417;
  v328 = v508[16];
  if ((v328 & 0x80000000) != 0)
    goto LABEL_1115;
LABEL_847:
  v329 = *(_QWORD *)(v232 + 2328);
  if (v328 >= (*(_QWORD *)(v232 + 2336) - v329) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v329 = *(_QWORD *)(v232 + 2328);
  }
  v330 = *(_DWORD *)(v329 + (v328 << 11) + 788);
  if (!**v505)
  {
LABEL_851:
    if ((v330 & 0x10000000) != 0)
      v331 = 0x40000000;
    else
      v331 = 0x80000000;
    if ((v330 & 0x20000000) != 0)
      v330 = v331;
    else
      v330 &= 0xCFFFFFFF;
  }
LABEL_857:
  v457 = v325 >> 30;
  v332 = v326 >> 30;
  v333 = v327 >> 30;
  v469 = v330 >> 30;
  if ((v494 & 0x40000000) != 0)
  {
    v541 = v521;
    v542 = v522;
    v543 = v523;
    v540 = v520;
    v539 = v519;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683840;
    v535 = (__int128)xmmword_224683850;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 4, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17C0000013CLL), xmmword_224683850);
    if ((v497 & 0x40000000) == 0)
    {
      v536 = v521;
      v537 = v522;
      v538 = v523;
      v535 = v520;
      v534 = v519;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683860;
      v595 = (__int128)xmmword_224683870;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 4, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17C0000013CLL), xmmword_224683870);
      v334 = ((v305 | v319) & 1) == 0;
      if (((v473 | v318) & 1) == 0)
      {
        v596 = v521;
        v597 = v522;
        v598 = v523;
        v594 = v519;
        v595 = v520;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683880;
        v590 = (__int128)xmmword_224683890;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 4, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17C0000013CLL), xmmword_224683890);
        v335 = (v449 & 1) == 0 && v334;
        if ((v451 & 1) == 0 && v335)
        {
          v591 = v521;
          v592 = v522;
          v593 = v523;
          v590 = v520;
          v589 = v519;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246838A0;
          v585 = (__int128)xmmword_2246838B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 4, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFC0000013CLL), xmmword_2246838B0);
        }
      }
      v336 = (v306 & 1) == 0 && v334;
      if (v336 && (v463 & 1) == 0)
      {
        v586 = v521;
        v587 = v522;
        v588 = v523;
        v585 = v520;
        v584 = v519;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_2246838C0;
        v580 = (__int128)xmmword_2246838D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 4, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFC0000013CLL), xmmword_2246838D0);
      }
    }
    if (((v318 | v332) & 1) == 0)
    {
      v581 = v521;
      v582 = v522;
      v583 = v523;
      v580 = v520;
      v579 = v519;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246838E0;
      v575 = (__int128)xmmword_2246838F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 4, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17C0000013CLL), xmmword_2246838F0);
      v337 = (v325 & 0x40000000) == 0 && ((v319 | v333) & 1) == 0;
      if ((v449 & 1) == 0 && v337)
      {
        v576 = v521;
        v577 = v522;
        v578 = v523;
        v575 = v520;
        v574 = v519;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683900;
        v570 = (__int128)xmmword_224683910;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 4, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xFC0000013CLL), xmmword_224683910);
      }
    }
    v338 = (v463 & 1) == 0 && ((v319 | v333) & 1) == 0;
    if (v338 && (v469 & 1) == 0)
    {
      v571 = v521;
      v572 = v522;
      v573 = v523;
      v570 = v520;
      v569 = v519;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683920;
      v565 = xmmword_224683930;
      *(_QWORD *)&v554 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 4, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0xFC0000013CLL), xmmword_224683930);
    }
  }
  v339 = *((_DWORD *)v231 + 246);
  if (**(_BYTE **)v459)
  {
    v340 = *((_DWORD *)v231 + 310);
    v341 = *((_DWORD *)v231 + 254);
    v498 = *((_DWORD *)v231 + 318);
    v342 = v508[16];
    if ((v342 & 0x80000000) == 0)
      goto LABEL_887;
LABEL_1142:
    v344 = *(_DWORD *)(v232 + 1072);
    if (**v505)
      goto LABEL_897;
    goto LABEL_891;
  }
  if ((v339 & 0x10000000) != 0)
    v418 = 0x40000000;
  else
    v418 = 0x80000000;
  if ((v339 & 0x20000000) != 0)
    v339 = v418;
  else
    v339 &= 0xCFFFFFFF;
  v419 = *((_DWORD *)v231 + 310);
  if ((v419 & 0x10000000) != 0)
    v420 = 0x40000000;
  else
    v420 = 0x80000000;
  if ((v419 & 0x20000000) != 0)
    v340 = v420;
  else
    v340 = v419 & 0xCFFFFFFF;
  v421 = *((_DWORD *)v231 + 254);
  if ((v421 & 0x10000000) != 0)
    v422 = 0x40000000;
  else
    v422 = 0x80000000;
  if ((v421 & 0x20000000) != 0)
    v341 = v422;
  else
    v341 = v421 & 0xCFFFFFFF;
  v423 = *((_DWORD *)v231 + 318);
  if ((v423 & 0x10000000) != 0)
    v424 = 0x40000000;
  else
    v424 = 0x80000000;
  if ((v423 & 0x20000000) != 0)
    v425 = v424;
  else
    v425 = v423 & 0xCFFFFFFF;
  v498 = v425;
  v342 = v508[16];
  if ((v342 & 0x80000000) != 0)
    goto LABEL_1142;
LABEL_887:
  v343 = *(_QWORD *)(v232 + 2328);
  if (v342 >= (*(_QWORD *)(v232 + 2336) - v343) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v343 = *(_QWORD *)(v232 + 2328);
  }
  v344 = *(_DWORD *)(v343 + (v342 << 11) + 792);
  if (!**v505)
  {
LABEL_891:
    if ((v344 & 0x10000000) != 0)
      v345 = 0x40000000;
    else
      v345 = 0x80000000;
    if ((v344 & 0x20000000) != 0)
      v344 = v345;
    else
      v344 &= 0xCFFFFFFF;
  }
LABEL_897:
  v452 = v339 >> 30;
  v479 = v341 >> 30;
  v484 = v340 >> 30;
  v474 = v344 >> 30;
  v556 = v521;
  v557 = v522;
  v558 = v523;
  v555 = v520;
  v554 = v519;
  if ((v489 & 0x40000000) != 0)
  {
    v541 = v521;
    v542 = v522;
    v543 = v523;
    v540 = v520;
    v539 = v519;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683940;
    v535 = (__int128)xmmword_224683950;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 5, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17D0000013DLL), xmmword_224683950);
    if ((v494 & 0x40000000) == 0)
    {
      v536 = v521;
      v537 = v522;
      v538 = v523;
      v535 = v520;
      v534 = v519;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683960;
      v595 = (__int128)xmmword_224683970;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 5, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17D0000013DLL), xmmword_224683970);
      if (((v318 | v332) & 1) == 0)
      {
        v596 = v521;
        v597 = v522;
        v598 = v523;
        v594 = v519;
        v595 = v520;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683980;
        v590 = (__int128)xmmword_224683990;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 5, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17D0000013DLL), xmmword_224683990);
        v346 = (v457 & 1) == 0 && ((v319 | v333) & 1) == 0;
        if ((v449 & 1) == 0 && v346)
        {
          v591 = v521;
          v592 = v522;
          v593 = v523;
          v590 = v520;
          v589 = v519;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_2246839A0;
          v585 = (__int128)xmmword_2246839B0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 5, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFD0000013DLL), xmmword_2246839B0);
        }
      }
      v347 = (v463 & 1) == 0 && ((v319 | v333) & 1) == 0;
      if (v347 && (v469 & 1) == 0)
      {
        v586 = v556;
        v587 = v557;
        v588 = v558;
        v585 = v555;
        v584 = v554;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_2246839C0;
        v580 = (__int128)xmmword_2246839D0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 5, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFD0000013DLL), xmmword_2246839D0);
      }
    }
    if (((v332 | v484) & 1) == 0)
    {
      v581 = v556;
      v582 = v557;
      v583 = v558;
      v580 = v555;
      v579 = v554;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_2246839E0;
      v575 = (__int128)xmmword_2246839F0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 5, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17D0000013DLL), xmmword_2246839F0);
      v348 = (v339 & 0x40000000) == 0 && ((v333 | v479) & 1) == 0;
      if ((v457 & 1) == 0 && v348)
      {
        v576 = v556;
        v577 = v557;
        v578 = v558;
        v575 = v555;
        v574 = v554;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683A00;
        v570 = (__int128)xmmword_224683A10;
        *(_QWORD *)&v559 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 5, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0xFD0000013DLL), xmmword_224683A10);
      }
    }
    v349 = (v469 & 1) == 0 && ((v333 | v479) & 1) == 0;
    if (v349 && (v474 & 1) == 0)
    {
      v571 = v556;
      v572 = v557;
      v573 = v558;
      v570 = v555;
      v569 = v554;
      *(_QWORD *)&v559 = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683A20;
      v565 = xmmword_224683A30;
      *(_QWORD *)&v549 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 5, 7, 4, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v549, COERCE_DOUBLE(0xFD0000013DLL), xmmword_224683A30);
    }
  }
  v551 = v521;
  v552 = v522;
  v553 = v523;
  v550 = v520;
  v549 = v519;
  v350 = *((_DWORD *)v231 + 247);
  if (**(_BYTE **)v459)
  {
    v351 = *((_DWORD *)v231 + 311);
    v352 = *((_DWORD *)v231 + 255);
    v353 = *((_DWORD *)v231 + 319);
    v354 = v508[16];
    if ((v354 & 0x80000000) == 0)
      goto LABEL_927;
LABEL_1169:
    v356 = *(_DWORD *)(v232 + 1076);
    if (**v505)
      goto LABEL_937;
    goto LABEL_931;
  }
  if ((v350 & 0x10000000) != 0)
    v426 = 0x40000000;
  else
    v426 = 0x80000000;
  if ((v350 & 0x20000000) != 0)
    v350 = v426;
  else
    v350 &= 0xCFFFFFFF;
  v427 = *((_DWORD *)v231 + 311);
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v351 = v428;
  else
    v351 = v427 & 0xCFFFFFFF;
  v429 = *((_DWORD *)v231 + 255);
  if ((v429 & 0x10000000) != 0)
    v430 = 0x40000000;
  else
    v430 = 0x80000000;
  if ((v429 & 0x20000000) != 0)
    v352 = v430;
  else
    v352 = v429 & 0xCFFFFFFF;
  v431 = *((_DWORD *)v231 + 319);
  if ((v431 & 0x10000000) != 0)
    v432 = 0x40000000;
  else
    v432 = 0x80000000;
  if ((v431 & 0x20000000) != 0)
    v353 = v432;
  else
    v353 = v431 & 0xCFFFFFFF;
  v354 = v508[16];
  if ((v354 & 0x80000000) != 0)
    goto LABEL_1169;
LABEL_927:
  v355 = *(_QWORD *)(v232 + 2328);
  if (v354 >= (*(_QWORD *)(v232 + 2336) - v355) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v355 = *(_QWORD *)(v232 + 2328);
  }
  v356 = *(_DWORD *)(v355 + (v354 << 11) + 796);
  if (!**v505)
  {
LABEL_931:
    if ((v356 & 0x10000000) != 0)
      v357 = 0x40000000;
    else
      v357 = 0x80000000;
    if ((v356 & 0x20000000) != 0)
      v356 = v357;
    else
      v356 &= 0xCFFFFFFF;
  }
LABEL_937:
  v501 = v350 >> 30;
  v358 = v351 >> 30;
  v359 = v352 >> 30;
  v360 = v356 >> 30;
  v561 = v521;
  v562 = v522;
  v563 = v523;
  v560 = v520;
  v559 = v519;
  if ((v498 & 0x40000000) != 0)
  {
    v541 = v521;
    v542 = v522;
    v543 = v523;
    v540 = v520;
    v539 = v519;
    *(_QWORD *)&v594 = 0x10100D0D10100D0DLL;
    v534 = xmmword_224683A40;
    v535 = (__int128)xmmword_224683A50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 6, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17E0000013ELL), xmmword_224683A50);
    if ((v489 & 0x40000000) == 0)
    {
      v536 = v521;
      v537 = v522;
      v538 = v523;
      v535 = v520;
      v534 = v519;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v594 = xmmword_224683A60;
      v595 = (__int128)xmmword_224683A70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 6, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17E0000013ELL), xmmword_224683A70);
      if (((v332 | v484) & 1) == 0)
      {
        v596 = v521;
        v597 = v522;
        v598 = v523;
        v594 = v519;
        v595 = v520;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683A80;
        v590 = (__int128)xmmword_224683A90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 6, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17E0000013ELL), xmmword_224683A90);
        v361 = (v452 & 1) == 0 && ((v333 | v479) & 1) == 0;
        if ((v457 & 1) == 0 && v361)
        {
          v591 = v521;
          v592 = v522;
          v593 = v523;
          v590 = v520;
          v589 = v519;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_224683AA0;
          v585 = (__int128)xmmword_224683AB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 6, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFE0000013ELL), xmmword_224683AB0);
        }
      }
      v362 = (v469 & 1) == 0 && ((v333 | v479) & 1) == 0;
      if (v362 && (v474 & 1) == 0)
      {
        v586 = v561;
        v587 = v562;
        v588 = v563;
        v585 = v560;
        v584 = v559;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v579 = xmmword_224683AC0;
        v580 = (__int128)xmmword_224683AD0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 6, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFE0000013ELL), xmmword_224683AD0);
      }
    }
    if (((v484 | v358) & 1) == 0)
    {
      v581 = v561;
      v582 = v562;
      v583 = v563;
      v580 = v560;
      v579 = v559;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224683AE0;
      v575 = (__int128)xmmword_224683AF0;
      *(_QWORD *)&v564 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 6, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x17E0000013ELL), xmmword_224683AF0);
      v363 = (v350 & 0x40000000) == 0 && ((v479 | v359) & 1) == 0;
      if ((v452 & 1) == 0 && v363)
      {
        v576 = v561;
        v577 = v562;
        v578 = v563;
        v575 = v560;
        v574 = v559;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224683B00;
        v570 = (__int128)xmmword_224683B10;
        *(_QWORD *)&v600[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 6, 7, 4, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)v600, COERCE_DOUBLE(0xFE0000013ELL), xmmword_224683B10);
      }
    }
    v364 = (v474 & 1) == 0 && ((v479 | v359) & 1) == 0;
    if (v364 && (v360 & 1) == 0)
    {
      v571 = v561;
      v572 = v562;
      v573 = v563;
      v570 = v560;
      v569 = v559;
      *(_QWORD *)&v600[0] = 0x101010100D0D0D0DLL;
      v564 = xmmword_224683B20;
      v565 = xmmword_224683B30;
      v601[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 6, 7, 4, (uint64_t)v600, (uint64_t)&v564, (uint64_t)v601, COERCE_DOUBLE(0xFE0000013ELL), xmmword_224683B30);
    }
  }
  v365 = v508[22];
  if ((v365 & 0x80000000) != 0)
  {
    v368 = *v505;
    v369 = *(_DWORD *)(v232 + 1240);
    v370 = **v505;
    if (**v505)
      goto LABEL_970;
  }
  else
  {
    v366 = *(_QWORD *)(v232 + 2328);
    if (v365 >= (*(_QWORD *)(v232 + 2336) - v366) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v366 = *(_QWORD *)(v232 + 2328);
    }
    v367 = v366 + (v365 << 11);
    v368 = *v505;
    v369 = *(_DWORD *)(v367 + 960);
    v370 = **v505;
    if (**v505)
    {
LABEL_970:
      v371 = v508[22];
      if ((v371 & 0x80000000) == 0)
        goto LABEL_971;
LABEL_1179:
      v373 = *(_DWORD *)(v232 + 1496);
      if (v370)
        goto LABEL_975;
      goto LABEL_1180;
    }
  }
  if ((v369 & 0x10000000) != 0)
    v433 = 0x40000000;
  else
    v433 = 0x80000000;
  if ((v369 & 0x20000000) != 0)
    v369 = v433;
  else
    v369 &= 0xCFFFFFFF;
  v371 = v508[22];
  if ((v371 & 0x80000000) != 0)
    goto LABEL_1179;
LABEL_971:
  v372 = *(_QWORD *)(v232 + 2328);
  if (v371 >= (*(_QWORD *)(v232 + 2336) - v372) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v372 = *(_QWORD *)(v232 + 2328);
    v368 = *v505;
    v370 = **v505;
  }
  v373 = *(_DWORD *)(v372 + (v371 << 11) + 1216);
  if (v370)
  {
LABEL_975:
    v374 = v508[22];
    if ((v374 & 0x80000000) == 0)
      goto LABEL_976;
LABEL_1187:
    v376 = *(_DWORD *)(v232 + 1272);
    if (v370)
      goto LABEL_980;
LABEL_1188:
    if ((v376 & 0x10000000) != 0)
      v435 = 0x40000000;
    else
      v435 = 0x80000000;
    if ((v376 & 0x20000000) != 0)
      v376 = v435;
    else
      v376 &= 0xCFFFFFFF;
    v377 = v508[22];
    if ((v377 & 0x80000000) != 0)
      goto LABEL_1198;
    goto LABEL_1195;
  }
LABEL_1180:
  if ((v373 & 0x10000000) != 0)
    v434 = 0x40000000;
  else
    v434 = 0x80000000;
  if ((v373 & 0x20000000) != 0)
    v373 = v434;
  else
    v373 &= 0xCFFFFFFF;
  v374 = v508[22];
  if ((v374 & 0x80000000) != 0)
    goto LABEL_1187;
LABEL_976:
  v375 = *(_QWORD *)(v232 + 2328);
  if (v374 >= (*(_QWORD *)(v232 + 2336) - v375) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v375 = *(_QWORD *)(v232 + 2328);
    v368 = *v505;
    v370 = **v505;
  }
  v376 = *(_DWORD *)(v375 + (v374 << 11) + 992);
  if (!v370)
    goto LABEL_1188;
LABEL_980:
  v377 = v508[22];
  if ((v377 & 0x80000000) != 0)
    goto LABEL_1198;
LABEL_1195:
  if (v377 >= (uint64_t)(*(_QWORD *)(v232 + 2336) - *(_QWORD *)(v232 + 2328)) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v368 = *v505;
  }
LABEL_1198:
  v436 = v508[25];
  if ((v436 & 0x80000000) != 0)
  {
    v438 = *(_DWORD *)(v232 + 1048);
    if (*v368)
      goto LABEL_1209;
    goto LABEL_1203;
  }
  v437 = *(_QWORD *)(v232 + 2328);
  if (v436 >= (*(_QWORD *)(v232 + 2336) - v437) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v437 = *(_QWORD *)(v232 + 2328);
    v368 = *v505;
  }
  v438 = *(_DWORD *)(v437 + (v436 << 11) + 768);
  if (!*v368)
  {
LABEL_1203:
    if ((v438 & 0x10000000) != 0)
      v439 = 0x40000000;
    else
      v439 = 0x80000000;
    if ((v438 & 0x20000000) != 0)
      v438 = v439;
    else
      v438 &= 0xCFFFFFFF;
  }
LABEL_1209:
  v566 = v551;
  v567 = v552;
  v568 = v553;
  v565 = (float32x4_t)v550;
  v564 = v549;
  if ((v353 & 0x40000000) != 0)
  {
    v541 = v551;
    v542 = v552;
    v543 = v553;
    *(_QWORD *)&v594 = 0x1919161610100D0DLL;
    v540 = v550;
    v539 = v549;
    v534 = xmmword_224683B40;
    v535 = (__int128)xmmword_224683B50;
    *(_QWORD *)&v589 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v539, 7, 7, 4, (uint64_t)&v594, (uint64_t)&v534, (uint64_t)&v589, COERCE_DOUBLE(0x17F0000013FLL), xmmword_224683B50);
    if ((v498 & 0x40000000) == 0)
    {
      v536 = v551;
      v537 = v552;
      v538 = v553;
      *(_QWORD *)&v589 = 0x101010100D0D0D0DLL;
      v535 = v550;
      v534 = v549;
      v594 = xmmword_224683B60;
      v595 = (__int128)xmmword_224683B70;
      *(_QWORD *)&v584 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v534, 7, 7, 4, (uint64_t)&v589, (uint64_t)&v594, (uint64_t)&v584, COERCE_DOUBLE(0x17F0000013FLL), xmmword_224683B70);
      if (((v484 | v358) & 1) == 0)
      {
        v596 = v551;
        v597 = v552;
        v598 = v553;
        v594 = v549;
        v595 = v550;
        *(_QWORD *)&v584 = 0xD0D0D0D0D0D0D0DLL;
        v589 = xmmword_224683B80;
        v590 = (__int128)xmmword_224683B90;
        *(_QWORD *)&v579 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v594, 7, 7, 4, (uint64_t)&v584, (uint64_t)&v589, (uint64_t)&v579, COERCE_DOUBLE(0x17F0000013FLL), xmmword_224683B90);
        v440 = (v501 & 1) == 0 && ((v479 | v359) & 1) == 0;
        if ((v452 & 1) == 0 && v440)
        {
          v591 = v551;
          v592 = v552;
          v593 = v553;
          v590 = v550;
          v589 = v549;
          *(_QWORD *)&v579 = 0xD0D0D0D0D0D0D0DLL;
          v584 = xmmword_224683BA0;
          v585 = (__int128)xmmword_224683BB0;
          *(_QWORD *)&v574 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v589, 7, 7, 4, (uint64_t)&v579, (uint64_t)&v584, (uint64_t)&v574, COERCE_DOUBLE(0xFF0000013FLL), xmmword_224683BB0);
        }
      }
      v441 = (v474 & 1) == 0 && ((v479 | v359) & 1) == 0;
      if (v441 && (v360 & 1) == 0)
      {
        v586 = v566;
        v587 = v567;
        v588 = v568;
        *(_QWORD *)&v574 = 0x10100D0D10100D0DLL;
        v585 = (__int128)v565;
        v584 = v564;
        v579 = xmmword_224683BC0;
        v580 = (__int128)xmmword_224683BD0;
        *(_QWORD *)&v569 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v584, 7, 7, 4, (uint64_t)&v574, (uint64_t)&v579, (uint64_t)&v569, COERCE_DOUBLE(0xFF0000013FLL), xmmword_224683BD0);
      }
    }
    if (!(v373 & 0x40000000 | v358 & 1))
    {
      v581 = v566;
      v582 = v567;
      v583 = v568;
      *(_QWORD *)&v569 = 0x16160D0D16160D0DLL;
      v580 = (__int128)v565;
      v579 = v564;
      v574 = xmmword_224683BE0;
      v575 = (__int128)xmmword_224683BF0;
      *(_QWORD *)&v600[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v579, 7, 7, 4, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)v600, COERCE_DOUBLE(0x17F0000013FLL), xmmword_224683BF0);
      v442 = (v369 & 0x40000000) == 0 && (v376 & 0x40000000 | v359 & 1) == 0;
      if ((v501 & 1) == 0 && v442)
      {
        v576 = v566;
        v577 = v567;
        v578 = v568;
        *(_QWORD *)&v600[0] = 0x161616160D0D0D0DLL;
        v575 = (__int128)v565;
        v574 = v564;
        v569 = xmmword_224683C00;
        v570 = (__int128)xmmword_224683C10;
        v601[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v574, 7, 7, 4, (uint64_t)v600, (uint64_t)&v569, (uint64_t)v601, COERCE_DOUBLE(0xFF0000013FLL), xmmword_224683C10);
      }
    }
    v443 = (v360 & 1) == 0 && (v376 & 0x40000000 | v359 & 1) == 0;
    if (v443 && (v438 & 0x40000000) == 0)
    {
      v571 = v566;
      v572 = v567;
      v573 = v568;
      v601[0] = 0x1919101016160D0DLL;
      v570 = (__int128)v565;
      v569 = v564;
      v600[0] = xmmword_224683C20;
      v600[1] = xmmword_224683C30;
      v599 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v569, 7, 7, 4, (uint64_t)v601, (uint64_t)v600, (uint64_t)&v599, COERCE_DOUBLE(0xFF0000013FLL), xmmword_224683C30);
    }
  }
  v534 = v459;
  *(_QWORD *)&v535 = v231;
  *(_QWORD *)&v594 = v232;
  *((_QWORD *)&v594 + 1) = v508;
  *(_QWORD *)&v595 = v505;
  v543 = v513;
  v542 = v512;
  v541 = v511;
  v539 = v509;
  v540 = v510;
  return sub_223E13390((uint64_t)&v534, (uint64_t *)&v594, &v539);
}

unint64_t sub_223E13390(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  _BYTE **v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _BYTE **v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE **v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE **v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  _BYTE **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  _BYTE **v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL4 v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  _BOOL4 v136;
  _BOOL4 v137;
  _BOOL4 v138;
  _BOOL4 v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  _BOOL4 v157;
  _BOOL4 v158;
  _BOOL4 v159;
  _BOOL4 v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  _BOOL4 v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  _BOOL4 v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  _BOOL4 v222;
  _BOOL4 v223;
  _BOOL4 v224;
  _BOOL4 v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  unsigned int v230;
  int v231;
  unint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unsigned int v245;
  _BOOL4 v246;
  _BOOL4 v247;
  _BOOL4 v248;
  _BOOL4 v249;
  _BOOL4 v250;
  _DWORD *v251;
  unsigned int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  unsigned int v271;
  int v272;
  unint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  _BOOL4 v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  _BOOL4 v323;
  _BOOL4 v324;
  _BOOL4 v325;
  _BOOL4 v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  unsigned int v339;
  int v340;
  unsigned int v341;
  _BOOL4 v342;
  _BOOL4 v343;
  _BOOL4 v344;
  _BOOL4 v345;
  _BOOL4 v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  _BOOL4 v362;
  _BOOL4 v363;
  _BOOL4 v364;
  _BOOL4 v365;
  _BOOL4 v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  _BOOL4 v382;
  _BOOL4 v383;
  _BOOL4 v384;
  _BOOL4 v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  int v398;
  _BOOL4 v399;
  _BOOL4 v400;
  _BOOL4 v401;
  _BOOL4 v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  _BOOL4 v419;
  _BOOL4 v420;
  _BOOL4 v421;
  _BOOL4 v422;
  _BOOL4 v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _BYTE *v427;
  unsigned int v428;
  int v429;
  unint64_t v430;
  uint64_t v431;
  unsigned int v432;
  unint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unint64_t v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  uint64_t v440;
  unint64_t v441;
  unsigned int v442;
  unsigned int v443;
  _BOOL4 v444;
  _BOOL4 v445;
  _BOOL4 v446;
  _BOOL4 v447;
  _BOOL4 v448;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  uint64_t v471;
  __int128 v472;
  _OWORD *v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  uint64_t v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  _BYTE **v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  _BYTE **v516;
  uint64_t v517;
  __int128 v518;
  float32x4_t v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  float32x4_t v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  float32x4_t v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  float32x4_t v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  float32x4_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  float32x4_t v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  float32x4_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  float32x4_t v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  float32x4_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  float32x4_t v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  float32x4_t v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  float32x4_t v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  float32x4_t v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  float32x4_t v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  float32x4_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  float32x4_t v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  float32x4_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  _OWORD v604[2];
  _QWORD v605[3];

  v605[1] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = (_BYTE **)a2[2];
  v8 = *(unsigned int *)(a2[1] + 40);
  if ((v8 & 0x80000000) != 0)
  {
    v10 = v6 + 280;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 2328);
    if (v8 >= (*(_QWORD *)(v6 + 2336) - v9) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v9 = *(_QWORD *)(v6 + 2328);
    }
    v10 = v9 + (v8 << 11);
  }
  v11 = *(_DWORD *)(v10 + 1248);
  v12 = v11 & 0xCFFFFFFF;
  if ((v11 & 0x10000000) != 0)
    v13 = 0x40000000;
  else
    v13 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v12 = v13;
  if (**v7)
    v14 = v11;
  else
    v14 = v12;
  v15 = *a2;
  v16 = (_BYTE **)a2[2];
  v17 = *(unsigned int *)(a2[1] + 40);
  v507 = v14;
  if ((v17 & 0x80000000) != 0)
  {
    v19 = v15 + 280;
  }
  else
  {
    v18 = *(_QWORD *)(v15 + 2328);
    if (v17 >= (*(_QWORD *)(v15 + 2336) - v18) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v18 = *(_QWORD *)(v15 + 2328);
    }
    v19 = v18 + (v17 << 11);
  }
  v20 = *(_DWORD *)(v19 + 1504);
  v21 = v20 & 0xCFFFFFFF;
  if ((v20 & 0x10000000) != 0)
    v22 = 0x40000000;
  else
    v22 = 0x80000000;
  if ((v20 & 0x20000000) != 0)
    v21 = v22;
  if (!**v16)
    v20 = v21;
  v502 = v20;
  v23 = *(_DWORD **)(a1 + 16);
  v24 = *(_BYTE ***)a1;
  v25 = v23[256];
  if (***(_BYTE ***)a1)
  {
    v26 = v23[320];
    v27 = v23[264];
  }
  else
  {
    if ((v25 & 0x20000000) != 0)
      v25 *= 4;
    v28 = v23[320];
    if ((v28 & 0x20000000) != 0)
      v26 = 4 * v28;
    else
      v26 = v23[320];
    v29 = v23[264];
    if ((v29 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v29 & 0x20000000) != 0)
      v27 = v30;
    else
      v27 = v29 & 0xCFFFFFFF;
  }
  v31 = *a2;
  v32 = (unsigned int *)a2[1];
  v516 = (_BYTE **)a2[2];
  v473 = a3;
  v471 = a1;
  v512 = v26;
  v496 = v27;
  if ((v26 & 0x40000000) == 0)
  {
    v481 = 0;
    v33 = 0;
    v34 = 0;
    v491 = 0;
    goto LABEL_110;
  }
  v35 = v32[1];
  if ((v35 & 0x80000000) != 0)
  {
    v37 = v31 + 280;
  }
  else
  {
    v36 = *(_QWORD *)(v31 + 2328);
    if (v35 >= (*(_QWORD *)(v31 + 2336) - v36) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v36 = *(_QWORD *)(v31 + 2328);
    }
    v37 = v36 + (v35 << 11);
  }
  v38 = *(_DWORD *)(v37 + 1276);
  v39 = v38 & 0xCFFFFFFF;
  if ((v38 & 0x10000000) != 0)
    v40 = 0x40000000;
  else
    v40 = 0x80000000;
  if ((v38 & 0x20000000) != 0)
    v39 = v40;
  if (**v516)
    v41 = v38;
  else
    v41 = v39;
  v42 = *a2;
  v43 = (_BYTE **)a2[2];
  v44 = *(unsigned int *)(a2[1] + 4);
  if ((v44 & 0x80000000) != 0)
  {
    v65 = *v43;
    v47 = *(_DWORD *)(v42 + 1812);
    if (*v65)
      goto LABEL_62;
  }
  else
  {
    v45 = *(_QWORD *)(v42 + 2328);
    if (v44 >= (*(_QWORD *)(v42 + 2336) - v45) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v45 = *(_QWORD *)(v42 + 2328);
    }
    v46 = *v43;
    v47 = *(_DWORD *)(v45 + (v44 << 11) + 1532);
    if (*v46)
    {
LABEL_62:
      v48 = *a2;
      v49 = (_BYTE **)a2[2];
      v50 = *(unsigned int *)(a2[1] + 16);
      if ((v50 & 0x80000000) == 0)
        goto LABEL_63;
LABEL_85:
      v67 = *v49;
      v53 = *(_DWORD *)(v48 + 1332);
      if (*v67)
        goto LABEL_67;
      goto LABEL_86;
    }
  }
  if ((v47 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v47 & 0x20000000) != 0)
    v47 = v66;
  else
    v47 &= 0xCFFFFFFF;
  v48 = *a2;
  v49 = (_BYTE **)a2[2];
  v50 = *(unsigned int *)(a2[1] + 16);
  if ((v50 & 0x80000000) != 0)
    goto LABEL_85;
LABEL_63:
  v51 = *(_QWORD *)(v48 + 2328);
  if (v50 >= (*(_QWORD *)(v48 + 2336) - v51) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1299;
    }
    v51 = *(_QWORD *)(v48 + 2328);
  }
  v52 = *v49;
  v53 = *(_DWORD *)(v51 + (v50 << 11) + 1052);
  if (*v52)
  {
LABEL_67:
    v54 = *a2;
    v55 = (_BYTE **)a2[2];
    v56 = *(unsigned int *)(a2[1] + 16);
    if ((v56 & 0x80000000) == 0)
      goto LABEL_68;
LABEL_93:
    v69 = *v55;
    v59 = *(_DWORD *)(v54 + 1588);
    if (*v69)
      goto LABEL_72;
LABEL_94:
    if ((v59 & 0x10000000) != 0)
      v70 = 0x40000000;
    else
      v70 = 0x80000000;
    if ((v59 & 0x20000000) != 0)
      v59 = v70;
    else
      v59 &= 0xCFFFFFFF;
    v60 = *a2;
    v61 = (_BYTE **)a2[2];
    v62 = *(unsigned int *)(a2[1] + 16);
    if ((v62 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_101;
  }
LABEL_86:
  if ((v53 & 0x10000000) != 0)
    v68 = 0x40000000;
  else
    v68 = 0x80000000;
  if ((v53 & 0x20000000) != 0)
    v53 = v68;
  else
    v53 &= 0xCFFFFFFF;
  v54 = *a2;
  v55 = (_BYTE **)a2[2];
  v56 = *(unsigned int *)(a2[1] + 16);
  if ((v56 & 0x80000000) != 0)
    goto LABEL_93;
LABEL_68:
  v57 = *(_QWORD *)(v54 + 2328);
  if (v56 >= (*(_QWORD *)(v54 + 2336) - v57) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1299;
    }
    v57 = *(_QWORD *)(v54 + 2328);
  }
  v58 = *v55;
  v59 = *(_DWORD *)(v57 + (v56 << 11) + 1308);
  if (!*v58)
    goto LABEL_94;
LABEL_72:
  v60 = *a2;
  v61 = (_BYTE **)a2[2];
  v62 = *(unsigned int *)(a2[1] + 16);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_73:
    v63 = *(_QWORD *)(v60 + 2328);
    if (v62 >= (*(_QWORD *)(v60 + 2336) - v63) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v63 = *(_QWORD *)(v60 + 2328);
    }
    v64 = v63 + (v62 << 11);
    goto LABEL_102;
  }
LABEL_101:
  v64 = v60 + 280;
LABEL_102:
  LODWORD(v481) = (v41 >> 30) & 1;
  v491 = (v47 >> 30) & 1;
  v34 = (v53 >> 30) & 1;
  v33 = (v59 >> 30) & 1;
  v71 = *(_DWORD *)(v64 + 1084);
  if (!**v61)
  {
    if ((v71 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v71 & 0x20000000) != 0)
      v71 = v72;
    else
      v71 &= 0xCFFFFFFF;
  }
  HIDWORD(v481) = (v71 >> 30) & 1;
  v24 = *(_BYTE ***)v471;
  v23 = *(_DWORD **)(v471 + 16);
  v31 = *a2;
  v32 = (unsigned int *)a2[1];
  v516 = (_BYTE **)a2[2];
  a3 = v473;
LABEL_110:
  v525 = a3[2];
  v526 = a3[3];
  v527 = a3[4];
  v523 = *a3;
  v524 = *((float32x4_t *)a3 + 1);
  v73 = v32[10];
  if ((v73 & 0x80000000) != 0)
  {
    v75 = *(_DWORD *)(v31 + 1532);
    v76 = **v516;
    if (**v516)
      goto LABEL_115;
  }
  else
  {
    v74 = *(_QWORD *)(v31 + 2328);
    if (v73 >= (*(_QWORD *)(v31 + 2336) - v74) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v74 = *(_QWORD *)(v31 + 2328);
    }
    v75 = *(_DWORD *)(v74 + (v73 << 11) + 1252);
    v76 = **v516;
    if (**v516)
    {
LABEL_115:
      v77 = v32[10];
      if ((v77 & 0x80000000) == 0)
        goto LABEL_116;
LABEL_136:
      v79 = *(_DWORD *)(v31 + 1788);
      if (!v76)
        goto LABEL_120;
      goto LABEL_126;
    }
  }
  if ((v75 & 0x10000000) != 0)
    v83 = 0x40000000;
  else
    v83 = 0x80000000;
  if ((v75 & 0x20000000) != 0)
    v75 = v83;
  else
    v75 &= 0xCFFFFFFF;
  v77 = v32[10];
  if ((v77 & 0x80000000) != 0)
    goto LABEL_136;
LABEL_116:
  v78 = *(_QWORD *)(v31 + 2328);
  if (v77 < (*(_QWORD *)(v31 + 2336) - v78) >> 11)
    goto LABEL_119;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
LABEL_1299:
    abort();
  }
  v78 = *(_QWORD *)(v31 + 2328);
  v76 = **v516;
LABEL_119:
  v79 = *(_DWORD *)(v78 + (v77 << 11) + 1508);
  if (!v76)
  {
LABEL_120:
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v79 = v80;
    else
      v79 &= 0xCFFFFFFF;
  }
LABEL_126:
  v462 = v507 >> 30;
  v81 = v23[257];
  if (**v24)
  {
    v508 = v23[321];
    v82 = v23[265];
  }
  else
  {
    if ((v81 & 0x10000000) != 0)
      v84 = 0x40000000;
    else
      v84 = 0x80000000;
    if ((v81 & 0x20000000) != 0)
      v81 = v84;
    else
      v81 &= 0xCFFFFFFF;
    v85 = v23[321];
    if ((v85 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v85 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v85 & 0xCFFFFFFF;
    v508 = v87;
    v88 = v23[265];
    if ((v88 & 0x10000000) != 0)
      v89 = 0x40000000;
    else
      v89 = 0x80000000;
    if ((v88 & 0x20000000) != 0)
      v82 = v89;
    else
      v82 = v88 & 0xCFFFFFFF;
  }
  v458 = v75 >> 30;
  v476 = v502 >> 30;
  v90 = v25 >> 30;
  v91 = v496 >> 30;
  v497 = v81 >> 30;
  v503 = v79 >> 30;
  v467 = v82 >> 30;
  v92 = v24;
  if ((v512 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224683C40;
    v539 = xmmword_224683C50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18000000140), xmmword_224683C50);
    if (!v33)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      *(_QWORD *)&v593 = 0x4040D0D04040D0DLL;
      v539 = v524;
      v538 = v523;
      v598 = xmmword_224683C60;
      v599 = xmmword_224683C70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18000000140), xmmword_224683C70);
      if (!(v491 | v476 & 1))
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0x10104040A0A0D0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_224683C80;
        v594 = xmmword_224683C90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18000000140), xmmword_224683C90);
        v93 = (v462 & 1) == 0 && (v34 | v90 & 1) == 0;
        if (!(_DWORD)v481 && v93)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0x1010A0A04040D0DLL;
          v588 = xmmword_224683CA0;
          v589 = xmmword_224683CB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10000000140), xmmword_224683CB0);
        }
      }
      if (HIDWORD(v481))
        v94 = 0;
      else
        v94 = (v34 | v90 & 1) == 0;
      if (v94 && (v91 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v524;
        v588 = v523;
        v583 = xmmword_224683CC0;
        v584 = xmmword_224683CD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10000000140), xmmword_224683CD0);
      }
    }
    if (((v476 | v503) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224683CE0;
      v579 = xmmword_224683CF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18000000140), xmmword_224683CF0);
      v95 = (v458 & 1) == 0 && ((v90 | v497) & 1) == 0;
      if ((v462 & 1) == 0 && v95)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224683D00;
        v574 = xmmword_224683D10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10000000140), xmmword_224683D10);
      }
    }
    v96 = (v91 & 1) == 0 && ((v90 | v497) & 1) == 0;
    if (v96 && (v467 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224683D20;
      v569 = xmmword_224683D30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10000000140), xmmword_224683D30);
    }
  }
  v97 = v32[10];
  if ((v97 & 0x80000000) != 0)
  {
    v99 = *(_DWORD *)(v31 + 1536);
    v100 = **v516;
    if (**v516)
      goto LABEL_189;
  }
  else
  {
    v98 = *(_QWORD *)(v31 + 2328);
    if (v97 >= (*(_QWORD *)(v31 + 2336) - v98) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v98 = *(_QWORD *)(v31 + 2328);
    }
    v99 = *(_DWORD *)(v98 + (v97 << 11) + 1256);
    v100 = **v516;
    if (**v516)
    {
LABEL_189:
      v101 = v32[10];
      if ((v101 & 0x80000000) == 0)
        goto LABEL_190;
LABEL_204:
      v103 = *(_DWORD *)(v31 + 1792);
      if (v100)
        goto LABEL_194;
LABEL_205:
      if ((v103 & 0x10000000) != 0)
        v107 = 0x40000000;
      else
        v107 = 0x80000000;
      if ((v103 & 0x20000000) != 0)
        v103 = v107;
      else
        v103 &= 0xCFFFFFFF;
      v104 = v23[258];
      if (**v92)
        goto LABEL_195;
      goto LABEL_212;
    }
  }
  if ((v99 & 0x10000000) != 0)
    v106 = 0x40000000;
  else
    v106 = 0x80000000;
  if ((v99 & 0x20000000) != 0)
    v99 = v106;
  else
    v99 &= 0xCFFFFFFF;
  v101 = v32[10];
  if ((v101 & 0x80000000) != 0)
    goto LABEL_204;
LABEL_190:
  v102 = *(_QWORD *)(v31 + 2328);
  if (v101 >= (*(_QWORD *)(v31 + 2336) - v102) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = *(_QWORD *)(v31 + 2328);
    v100 = **v516;
  }
  v103 = *(_DWORD *)(v102 + (v101 << 11) + 1512);
  if (!v100)
    goto LABEL_205;
LABEL_194:
  v104 = v23[258];
  if (**v92)
  {
LABEL_195:
    v492 = v23[322];
    v105 = v23[266];
    goto LABEL_230;
  }
LABEL_212:
  if ((v104 & 0x10000000) != 0)
    v108 = 0x40000000;
  else
    v108 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v104 = v108;
  else
    v104 &= 0xCFFFFFFF;
  v109 = v23[322];
  if ((v109 & 0x10000000) != 0)
    v110 = 0x40000000;
  else
    v110 = 0x80000000;
  if ((v109 & 0x20000000) != 0)
    v111 = v110;
  else
    v111 = v109 & 0xCFFFFFFF;
  v492 = v111;
  v112 = v23[266];
  if ((v112 & 0x10000000) != 0)
    v113 = 0x40000000;
  else
    v113 = 0x80000000;
  if ((v112 & 0x20000000) != 0)
    v105 = v113;
  else
    v105 = v112 & 0xCFFFFFFF;
LABEL_230:
  v456 = v99 >> 30;
  v482 = v104 >> 30;
  v487 = v103 >> 30;
  v114 = v105 >> 30;
  if ((v508 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224683D40;
    v539 = xmmword_224683D50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18100000141), xmmword_224683D50);
    if ((v512 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224683D60;
      v599 = xmmword_224683D70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18100000141), xmmword_224683D70);
      if (((v476 | v503) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224683D80;
        v594 = xmmword_224683D90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18100000141), xmmword_224683D90);
        v115 = (v458 & 1) == 0 && ((v90 | v497) & 1) == 0;
        if ((v462 & 1) == 0 && v115)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224683DA0;
          v589 = xmmword_224683DB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10100000141), xmmword_224683DB0);
        }
      }
      v116 = (v91 & 1) == 0 && ((v90 | v497) & 1) == 0;
      if (v116 && (v467 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224683DC0;
        v584 = xmmword_224683DD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10100000141), xmmword_224683DD0);
      }
    }
    if (((v503 | v487) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224683DE0;
      v579 = xmmword_224683DF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18100000141), xmmword_224683DF0);
      v117 = (v99 & 0x40000000) == 0 && ((v497 | v482) & 1) == 0;
      if ((v458 & 1) == 0 && v117)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224683E00;
        v574 = xmmword_224683E10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10100000141), xmmword_224683E10);
      }
    }
    v118 = (v467 & 1) == 0 && ((v497 | v482) & 1) == 0;
    if (v118 && (v114 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224683E20;
      v569 = xmmword_224683E30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10100000141), xmmword_224683E30);
    }
  }
  v119 = v32[10];
  if ((v119 & 0x80000000) != 0)
  {
    v121 = *(_DWORD *)(v31 + 1540);
    v122 = **v516;
    if (**v516)
      goto LABEL_263;
  }
  else
  {
    v120 = *(_QWORD *)(v31 + 2328);
    if (v119 >= (*(_QWORD *)(v31 + 2336) - v120) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v120 = *(_QWORD *)(v31 + 2328);
    }
    v121 = *(_DWORD *)(v120 + (v119 << 11) + 1260);
    v122 = **v516;
    if (**v516)
    {
LABEL_263:
      v123 = v32[10];
      if ((v123 & 0x80000000) == 0)
        goto LABEL_264;
LABEL_278:
      v125 = *(_DWORD *)(v31 + 1796);
      if (v122)
        goto LABEL_268;
LABEL_279:
      if ((v125 & 0x10000000) != 0)
        v130 = 0x40000000;
      else
        v130 = 0x80000000;
      if ((v125 & 0x20000000) != 0)
        v125 = v130;
      else
        v125 &= 0xCFFFFFFF;
      v126 = v23[259];
      if (**v92)
        goto LABEL_269;
      goto LABEL_286;
    }
  }
  if ((v121 & 0x10000000) != 0)
    v129 = 0x40000000;
  else
    v129 = 0x80000000;
  if ((v121 & 0x20000000) != 0)
    v121 = v129;
  else
    v121 &= 0xCFFFFFFF;
  v123 = v32[10];
  if ((v123 & 0x80000000) != 0)
    goto LABEL_278;
LABEL_264:
  v124 = *(_QWORD *)(v31 + 2328);
  if (v123 >= (*(_QWORD *)(v31 + 2336) - v124) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v124 = *(_QWORD *)(v31 + 2328);
    v122 = **v516;
  }
  v125 = *(_DWORD *)(v124 + (v123 << 11) + 1516);
  if (!v122)
    goto LABEL_279;
LABEL_268:
  v126 = v23[259];
  if (**v92)
  {
LABEL_269:
    v127 = v23[323];
    v128 = v23[267];
    goto LABEL_304;
  }
LABEL_286:
  if ((v126 & 0x10000000) != 0)
    v131 = 0x40000000;
  else
    v131 = 0x80000000;
  if ((v126 & 0x20000000) != 0)
    v126 = v131;
  else
    v126 &= 0xCFFFFFFF;
  v132 = v23[323];
  if ((v132 & 0x10000000) != 0)
    v133 = 0x40000000;
  else
    v133 = 0x80000000;
  if ((v132 & 0x20000000) != 0)
    v127 = v133;
  else
    v127 = v132 & 0xCFFFFFFF;
  v134 = v23[267];
  if ((v134 & 0x10000000) != 0)
    v135 = 0x40000000;
  else
    v135 = 0x80000000;
  if ((v134 & 0x20000000) != 0)
    v128 = v135;
  else
    v128 = v134 & 0xCFFFFFFF;
LABEL_304:
  v455 = v121 >> 30;
  v513 = v125 >> 30;
  v477 = v126 >> 30;
  v463 = v128 >> 30;
  if ((v492 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224683E40;
    v539 = xmmword_224683E50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18200000142), xmmword_224683E50);
    if ((v508 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224683E60;
      v599 = xmmword_224683E70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18200000142), xmmword_224683E70);
      if (((v503 | v487) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224683E80;
        v594 = xmmword_224683E90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18200000142), xmmword_224683E90);
        v136 = (v456 & 1) == 0 && ((v497 | v482) & 1) == 0;
        if ((v458 & 1) == 0 && v136)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224683EA0;
          v589 = xmmword_224683EB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10200000142), xmmword_224683EB0);
        }
      }
      v137 = (v467 & 1) == 0 && ((v497 | v482) & 1) == 0;
      if (v137 && (v114 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224683EC0;
        v584 = xmmword_224683ED0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10200000142), xmmword_224683ED0);
      }
    }
    if (((v487 | v513) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224683EE0;
      v579 = xmmword_224683EF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18200000142), xmmword_224683EF0);
      v138 = (v121 & 0x40000000) == 0 && ((v482 | v477) & 1) == 0;
      if ((v456 & 1) == 0 && v138)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224683F00;
        v574 = xmmword_224683F10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10200000142), xmmword_224683F10);
      }
    }
    v139 = (v114 & 1) == 0 && ((v482 | v477) & 1) == 0;
    if (v139 && (v463 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224683F20;
      v569 = xmmword_224683F30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10200000142), xmmword_224683F30);
    }
  }
  v140 = v32[10];
  if ((v140 & 0x80000000) != 0)
  {
    v142 = *(_DWORD *)(v31 + 1544);
    v143 = **v516;
    if (**v516)
      goto LABEL_337;
  }
  else
  {
    v141 = *(_QWORD *)(v31 + 2328);
    if (v140 >= (*(_QWORD *)(v31 + 2336) - v141) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v141 = *(_QWORD *)(v31 + 2328);
    }
    v142 = *(_DWORD *)(v141 + (v140 << 11) + 1264);
    v143 = **v516;
    if (**v516)
    {
LABEL_337:
      v144 = v32[10];
      if ((v144 & 0x80000000) == 0)
        goto LABEL_338;
LABEL_352:
      v146 = *(_DWORD *)(v31 + 1800);
      if (v143)
        goto LABEL_342;
LABEL_353:
      if ((v146 & 0x10000000) != 0)
        v151 = 0x40000000;
      else
        v151 = 0x80000000;
      if ((v146 & 0x20000000) != 0)
        v146 = v151;
      else
        v146 &= 0xCFFFFFFF;
      v147 = v23[260];
      if (**v92)
        goto LABEL_343;
      goto LABEL_360;
    }
  }
  if ((v142 & 0x10000000) != 0)
    v150 = 0x40000000;
  else
    v150 = 0x80000000;
  if ((v142 & 0x20000000) != 0)
    v142 = v150;
  else
    v142 &= 0xCFFFFFFF;
  v144 = v32[10];
  if ((v144 & 0x80000000) != 0)
    goto LABEL_352;
LABEL_338:
  v145 = *(_QWORD *)(v31 + 2328);
  if (v144 >= (*(_QWORD *)(v31 + 2336) - v145) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v145 = *(_QWORD *)(v31 + 2328);
    v143 = **v516;
  }
  v146 = *(_DWORD *)(v145 + (v144 << 11) + 1520);
  if (!v143)
    goto LABEL_353;
LABEL_342:
  v147 = v23[260];
  if (**v92)
  {
LABEL_343:
    v148 = v23[324];
    v149 = v23[268];
    goto LABEL_378;
  }
LABEL_360:
  if ((v147 & 0x10000000) != 0)
    v152 = 0x40000000;
  else
    v152 = 0x80000000;
  if ((v147 & 0x20000000) != 0)
    v147 = v152;
  else
    v147 &= 0xCFFFFFFF;
  v153 = v23[324];
  if ((v153 & 0x10000000) != 0)
    v154 = 0x40000000;
  else
    v154 = 0x80000000;
  if ((v153 & 0x20000000) != 0)
    v148 = v154;
  else
    v148 = v153 & 0xCFFFFFFF;
  v155 = v23[268];
  if ((v155 & 0x10000000) != 0)
    v156 = 0x40000000;
  else
    v156 = 0x80000000;
  if ((v155 & 0x20000000) != 0)
    v149 = v156;
  else
    v149 = v155 & 0xCFFFFFFF;
LABEL_378:
  v454 = v142 >> 30;
  v509 = v146 >> 30;
  v504 = v147 >> 30;
  v468 = v149 >> 30;
  if ((v127 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224683F40;
    v539 = xmmword_224683F50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18300000143), xmmword_224683F50);
    if ((v492 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224683F60;
      v599 = xmmword_224683F70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18300000143), xmmword_224683F70);
      if (((v487 | v513) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224683F80;
        v594 = xmmword_224683F90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18300000143), xmmword_224683F90);
        v157 = (v455 & 1) == 0 && ((v482 | v477) & 1) == 0;
        if ((v456 & 1) == 0 && v157)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224683FA0;
          v589 = xmmword_224683FB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10300000143), xmmword_224683FB0);
        }
      }
      v158 = (v114 & 1) == 0 && ((v482 | v477) & 1) == 0;
      if (v158 && (v463 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224683FC0;
        v584 = xmmword_224683FD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10300000143), xmmword_224683FD0);
      }
    }
    if (((v513 | v509) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224683FE0;
      v579 = xmmword_224683FF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18300000143), xmmword_224683FF0);
      v159 = (v142 & 0x40000000) == 0 && ((v477 | v504) & 1) == 0;
      if ((v455 & 1) == 0 && v159)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224684000;
        v574 = xmmword_224684010;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10300000143), xmmword_224684010);
      }
    }
    v160 = (v463 & 1) == 0 && ((v477 | v504) & 1) == 0;
    if (v160 && (v468 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684020;
      v569 = xmmword_224684030;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10300000143), xmmword_224684030);
    }
  }
  v161 = v32[10];
  if ((v161 & 0x80000000) != 0)
  {
    v163 = *(_DWORD *)(v31 + 1548);
    v164 = **v516;
    if (**v516)
      goto LABEL_411;
  }
  else
  {
    v162 = *(_QWORD *)(v31 + 2328);
    if (v161 >= (*(_QWORD *)(v31 + 2336) - v162) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v162 = *(_QWORD *)(v31 + 2328);
    }
    v163 = *(_DWORD *)(v162 + (v161 << 11) + 1268);
    v164 = **v516;
    if (**v516)
    {
LABEL_411:
      v165 = v32[10];
      if ((v165 & 0x80000000) == 0)
        goto LABEL_412;
LABEL_426:
      v167 = *(_DWORD *)(v31 + 1804);
      if (v164)
        goto LABEL_416;
LABEL_427:
      if ((v167 & 0x10000000) != 0)
        v172 = 0x40000000;
      else
        v172 = 0x80000000;
      if ((v167 & 0x20000000) != 0)
        v167 = v172;
      else
        v167 &= 0xCFFFFFFF;
      v168 = v23[261];
      if (**v92)
        goto LABEL_417;
      goto LABEL_434;
    }
  }
  if ((v163 & 0x10000000) != 0)
    v171 = 0x40000000;
  else
    v171 = 0x80000000;
  if ((v163 & 0x20000000) != 0)
    v163 = v171;
  else
    v163 &= 0xCFFFFFFF;
  v165 = v32[10];
  if ((v165 & 0x80000000) != 0)
    goto LABEL_426;
LABEL_412:
  v166 = *(_QWORD *)(v31 + 2328);
  if (v165 >= (*(_QWORD *)(v31 + 2336) - v166) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v166 = *(_QWORD *)(v31 + 2328);
    v164 = **v516;
  }
  v167 = *(_DWORD *)(v166 + (v165 << 11) + 1524);
  if (!v164)
    goto LABEL_427;
LABEL_416:
  v168 = v23[261];
  if (**v92)
  {
LABEL_417:
    v169 = v23[325];
    v170 = v23[269];
    goto LABEL_452;
  }
LABEL_434:
  if ((v168 & 0x10000000) != 0)
    v173 = 0x40000000;
  else
    v173 = 0x80000000;
  if ((v168 & 0x20000000) != 0)
    v168 = v173;
  else
    v168 &= 0xCFFFFFFF;
  v174 = v23[325];
  if ((v174 & 0x10000000) != 0)
    v175 = 0x40000000;
  else
    v175 = 0x80000000;
  if ((v174 & 0x20000000) != 0)
    v169 = v175;
  else
    v169 = v174 & 0xCFFFFFFF;
  v176 = v23[269];
  if ((v176 & 0x10000000) != 0)
    v177 = 0x40000000;
  else
    v177 = 0x80000000;
  if ((v176 & 0x20000000) != 0)
    v170 = v177;
  else
    v170 = v176 & 0xCFFFFFFF;
LABEL_452:
  v498 = v167 >> 30;
  v493 = v168 >> 30;
  v457 = v163 >> 30;
  v459 = v170 >> 30;
  if ((v148 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684040;
    v539 = xmmword_224684050;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18400000144), xmmword_224684050);
    if ((v127 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684060;
      v599 = xmmword_224684070;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18400000144), xmmword_224684070);
      if (((v513 | v509) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224684080;
        v594 = xmmword_224684090;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18400000144), xmmword_224684090);
        v178 = (v454 & 1) == 0 && ((v477 | v504) & 1) == 0;
        if ((v455 & 1) == 0 && v178)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246840A0;
          v589 = xmmword_2246840B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10400000144), xmmword_2246840B0);
        }
      }
      v179 = (v463 & 1) == 0 && ((v477 | v504) & 1) == 0;
      if (v179 && (v468 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246840C0;
        v584 = xmmword_2246840D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10400000144), xmmword_2246840D0);
      }
    }
    if (((v509 | v498) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246840E0;
      v579 = xmmword_2246840F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18400000144), xmmword_2246840F0);
      v180 = (v163 & 0x40000000) == 0 && ((v504 | v493) & 1) == 0;
      if ((v454 & 1) == 0 && v180)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224684100;
        v574 = xmmword_224684110;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10400000144), xmmword_224684110);
      }
    }
    v181 = (v468 & 1) == 0 && ((v504 | v493) & 1) == 0;
    if (v181 && (v459 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684120;
      v569 = xmmword_224684130;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10400000144), xmmword_224684130);
    }
  }
  v182 = v32[10];
  if ((v182 & 0x80000000) != 0)
  {
    v184 = *(_DWORD *)(v31 + 1552);
    v185 = **v516;
    if (**v516)
      goto LABEL_485;
  }
  else
  {
    v183 = *(_QWORD *)(v31 + 2328);
    if (v182 >= (*(_QWORD *)(v31 + 2336) - v183) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v183 = *(_QWORD *)(v31 + 2328);
    }
    v184 = *(_DWORD *)(v183 + (v182 << 11) + 1272);
    v185 = **v516;
    if (**v516)
    {
LABEL_485:
      v186 = v32[10];
      if ((v186 & 0x80000000) == 0)
        goto LABEL_486;
LABEL_500:
      v188 = *(_DWORD *)(v31 + 1808);
      if (v185)
        goto LABEL_490;
LABEL_501:
      if ((v188 & 0x10000000) != 0)
        v192 = 0x40000000;
      else
        v192 = 0x80000000;
      if ((v188 & 0x20000000) != 0)
        v188 = v192;
      else
        v188 &= 0xCFFFFFFF;
      v189 = v23[262];
      if (**v92)
        goto LABEL_491;
      goto LABEL_508;
    }
  }
  if ((v184 & 0x10000000) != 0)
    v191 = 0x40000000;
  else
    v191 = 0x80000000;
  if ((v184 & 0x20000000) != 0)
    v184 = v191;
  else
    v184 &= 0xCFFFFFFF;
  v186 = v32[10];
  if ((v186 & 0x80000000) != 0)
    goto LABEL_500;
LABEL_486:
  v187 = *(_QWORD *)(v31 + 2328);
  if (v186 >= (*(_QWORD *)(v31 + 2336) - v187) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v187 = *(_QWORD *)(v31 + 2328);
    v185 = **v516;
  }
  v188 = *(_DWORD *)(v187 + (v186 << 11) + 1528);
  if (!v185)
    goto LABEL_501;
LABEL_490:
  v189 = v23[262];
  if (**v92)
  {
LABEL_491:
    v514 = v23[326];
    v190 = v23[270];
    goto LABEL_526;
  }
LABEL_508:
  if ((v189 & 0x10000000) != 0)
    v193 = 0x40000000;
  else
    v193 = 0x80000000;
  if ((v189 & 0x20000000) != 0)
    v189 = v193;
  else
    v189 &= 0xCFFFFFFF;
  v194 = v23[326];
  if ((v194 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v194 & 0x20000000) != 0)
    v196 = v195;
  else
    v196 = v194 & 0xCFFFFFFF;
  v514 = v196;
  v197 = v23[270];
  if ((v197 & 0x10000000) != 0)
    v198 = 0x40000000;
  else
    v198 = 0x80000000;
  if ((v197 & 0x20000000) != 0)
    v190 = v198;
  else
    v190 = v197 & 0xCFFFFFFF;
LABEL_526:
  v464 = v184 >> 30;
  v483 = v189 >> 30;
  v488 = v188 >> 30;
  v478 = v190 >> 30;
  v560 = v525;
  v561 = v526;
  v562 = v527;
  v559 = v524;
  v558 = v523;
  if ((v169 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684140;
    v539 = xmmword_224684150;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18500000145), xmmword_224684150);
    if ((v148 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684160;
      v599 = xmmword_224684170;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18500000145), xmmword_224684170);
      if (((v509 | v498) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224684180;
        v594 = xmmword_224684190;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18500000145), xmmword_224684190);
        v199 = (v457 & 1) == 0 && ((v504 | v493) & 1) == 0;
        if ((v454 & 1) == 0 && v199)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246841A0;
          v589 = xmmword_2246841B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10500000145), xmmword_2246841B0);
        }
      }
      v200 = (v468 & 1) == 0 && ((v504 | v493) & 1) == 0;
      if (v200 && (v459 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246841C0;
        v584 = xmmword_2246841D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10500000145), xmmword_2246841D0);
      }
    }
    if (((v498 | v488) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246841E0;
      v579 = xmmword_2246841F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18500000145), xmmword_2246841F0);
      v201 = (v184 & 0x40000000) == 0 && ((v493 | v483) & 1) == 0;
      if ((v457 & 1) == 0 && v201)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        v579 = v559;
        v578 = v558;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224684200;
        v574 = xmmword_224684210;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10500000145), xmmword_224684210);
      }
    }
    v202 = (v459 & 1) == 0 && ((v493 | v483) & 1) == 0;
    if (v202 && (v478 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684220;
      v569 = xmmword_224684230;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 0, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x10500000145), xmmword_224684230);
    }
  }
  v555 = v525;
  v556 = v526;
  v557 = v527;
  v554 = v524;
  v553 = v523;
  v203 = v32[10];
  if ((v203 & 0x80000000) != 0)
  {
    v205 = *(_DWORD *)(v31 + 1556);
    v206 = **v516;
    if (**v516)
      goto LABEL_559;
  }
  else
  {
    v204 = *(_QWORD *)(v31 + 2328);
    if (v203 >= (*(_QWORD *)(v31 + 2336) - v204) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v204 = *(_QWORD *)(v31 + 2328);
    }
    v205 = *(_DWORD *)(v204 + (v203 << 11) + 1276);
    v206 = **v516;
    if (**v516)
    {
LABEL_559:
      v207 = v32[10];
      if ((v207 & 0x80000000) == 0)
        goto LABEL_560;
LABEL_574:
      v209 = *(_DWORD *)(v31 + 1812);
      if (v206)
        goto LABEL_564;
LABEL_575:
      if ((v209 & 0x10000000) != 0)
        v214 = 0x40000000;
      else
        v214 = 0x80000000;
      if ((v209 & 0x20000000) != 0)
        v209 = v214;
      else
        v209 &= 0xCFFFFFFF;
      v210 = v23[263];
      if (**v92)
        goto LABEL_565;
      goto LABEL_582;
    }
  }
  if ((v205 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v205 & 0x20000000) != 0)
    v205 = v213;
  else
    v205 &= 0xCFFFFFFF;
  v207 = v32[10];
  if ((v207 & 0x80000000) != 0)
    goto LABEL_574;
LABEL_560:
  v208 = *(_QWORD *)(v31 + 2328);
  if (v207 >= (*(_QWORD *)(v31 + 2336) - v208) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v208 = *(_QWORD *)(v31 + 2328);
    v206 = **v516;
  }
  v209 = *(_DWORD *)(v208 + (v207 << 11) + 1532);
  if (!v206)
    goto LABEL_575;
LABEL_564:
  v210 = v23[263];
  if (**v92)
  {
LABEL_565:
    v211 = v23[327];
    v212 = v23[271];
    goto LABEL_600;
  }
LABEL_582:
  if ((v210 & 0x10000000) != 0)
    v215 = 0x40000000;
  else
    v215 = 0x80000000;
  if ((v210 & 0x20000000) != 0)
    v210 = v215;
  else
    v210 &= 0xCFFFFFFF;
  v216 = v23[327];
  if ((v216 & 0x10000000) != 0)
    v217 = 0x40000000;
  else
    v217 = 0x80000000;
  if ((v216 & 0x20000000) != 0)
    v211 = v217;
  else
    v211 = v216 & 0xCFFFFFFF;
  v218 = v23[271];
  if ((v218 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v218 & 0x20000000) != 0)
    v212 = v219;
  else
    v212 = v218 & 0xCFFFFFFF;
LABEL_600:
  v505 = v205 >> 30;
  v220 = v209 >> 30;
  v221 = v210 >> 30;
  v510 = v212 >> 30;
  v565 = v525;
  v566 = v526;
  v567 = v527;
  v564 = v524;
  v563 = v523;
  if ((v514 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684240;
    v539 = xmmword_224684250;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18600000146), xmmword_224684250);
    if ((v169 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684260;
      v599 = xmmword_224684270;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18600000146), xmmword_224684270);
      if (((v498 | v488) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224684280;
        v594 = xmmword_224684290;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18600000146), xmmword_224684290);
        v222 = (v464 & 1) == 0 && ((v493 | v483) & 1) == 0;
        if ((v457 & 1) == 0 && v222)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246842A0;
          v589 = xmmword_2246842B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10600000146), xmmword_2246842B0);
        }
      }
      v223 = (v459 & 1) == 0 && ((v493 | v483) & 1) == 0;
      if (v223 && (v478 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246842C0;
        v584 = xmmword_2246842D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10600000146), xmmword_2246842D0);
      }
    }
    if (((v488 | v220) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      v584 = v564;
      v583 = v563;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246842E0;
      v579 = xmmword_2246842F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18600000146), xmmword_2246842F0);
      v224 = (v205 & 0x40000000) == 0 && ((v483 | v221) & 1) == 0;
      if ((v464 & 1) == 0 && v224)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        v579 = v564;
        v578 = v563;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224684300;
        v574 = xmmword_224684310;
        *(_QWORD *)&v548 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 0, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v548, COERCE_DOUBLE(0x10600000146), xmmword_224684310);
      }
    }
    v225 = (v478 & 1) == 0 && ((v483 | v221) & 1) == 0;
    if (v225 && (v510 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684320;
      v569 = xmmword_224684330;
      *(_QWORD *)&v604[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 0, 5, (uint64_t)&v548, (uint64_t)&v568, (uint64_t)v604, COERCE_DOUBLE(0x10600000146), xmmword_224684330);
    }
  }
  v226 = v32[19];
  if ((v226 & 0x80000000) != 0)
  {
    v229 = *v516;
    v230 = *(_DWORD *)(v31 + 1528);
    v231 = **v516;
    if (**v516)
      goto LABEL_633;
  }
  else
  {
    v227 = *(_QWORD *)(v31 + 2328);
    if (v226 >= (*(_QWORD *)(v31 + 2336) - v227) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v227 = *(_QWORD *)(v31 + 2328);
    }
    v228 = v227 + (v226 << 11);
    v229 = *v516;
    v230 = *(_DWORD *)(v228 + 1248);
    v231 = **v516;
    if (**v516)
    {
LABEL_633:
      v232 = v32[19];
      if ((v232 & 0x80000000) == 0)
        goto LABEL_634;
LABEL_653:
      v234 = *(_DWORD *)(v31 + 1784);
      if (v231)
        goto LABEL_638;
      goto LABEL_654;
    }
  }
  if ((v230 & 0x10000000) != 0)
    v239 = 0x40000000;
  else
    v239 = 0x80000000;
  if ((v230 & 0x20000000) != 0)
    v230 = v239;
  else
    v230 &= 0xCFFFFFFF;
  v232 = v32[19];
  if ((v232 & 0x80000000) != 0)
    goto LABEL_653;
LABEL_634:
  v233 = *(_QWORD *)(v31 + 2328);
  if (v232 >= (*(_QWORD *)(v31 + 2336) - v233) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v233 = *(_QWORD *)(v31 + 2328);
    v229 = *v516;
    v231 = **v516;
  }
  v234 = *(_DWORD *)(v233 + (v232 << 11) + 1504);
  if (v231)
  {
LABEL_638:
    v235 = v32[22];
    if ((v235 & 0x80000000) == 0)
      goto LABEL_639;
LABEL_661:
    v237 = *(_DWORD *)(v31 + 1304);
    if (v231)
      goto LABEL_643;
    goto LABEL_662;
  }
LABEL_654:
  if ((v234 & 0x10000000) != 0)
    v240 = 0x40000000;
  else
    v240 = 0x80000000;
  if ((v234 & 0x20000000) != 0)
    v234 = v240;
  else
    v234 &= 0xCFFFFFFF;
  v235 = v32[22];
  if ((v235 & 0x80000000) != 0)
    goto LABEL_661;
LABEL_639:
  v236 = *(_QWORD *)(v31 + 2328);
  if (v235 >= (*(_QWORD *)(v31 + 2336) - v236) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v236 = *(_QWORD *)(v31 + 2328);
    v229 = *v516;
    v231 = **v516;
  }
  v237 = *(_DWORD *)(v236 + (v235 << 11) + 1024);
  if (v231)
  {
LABEL_643:
    v238 = v32[22];
    if ((v238 & 0x80000000) != 0)
      goto LABEL_714;
    goto LABEL_669;
  }
LABEL_662:
  if ((v237 & 0x10000000) != 0)
    v241 = 0x40000000;
  else
    v241 = 0x80000000;
  if ((v237 & 0x20000000) != 0)
    v237 = v241;
  else
    v237 &= 0xCFFFFFFF;
  v238 = v32[22];
  if ((v238 & 0x80000000) != 0)
    goto LABEL_714;
LABEL_669:
  v242 = *(_QWORD *)(v31 + 2328);
  v243 = (*(_QWORD *)(v31 + 2336) - v242) >> 11;
  if (v243 > v238)
    goto LABEL_673;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v229 = *v516;
  v238 = v32[22];
  if ((v238 & 0x80000000) != 0)
  {
LABEL_714:
    v244 = *(_DWORD *)(v31 + 1336);
    if (*v229)
      goto LABEL_683;
    goto LABEL_677;
  }
  v242 = *(_QWORD *)(v31 + 2328);
  v243 = (*(_QWORD *)(v31 + 2336) - v242) >> 11;
LABEL_673:
  if (v243 <= v238)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v242 = *(_QWORD *)(v31 + 2328);
    v229 = *v516;
  }
  v244 = *(_DWORD *)(v242 + (v238 << 11) + 1056);
  if (!*v229)
  {
LABEL_677:
    if ((v244 & 0x10000000) != 0)
      v245 = 0x40000000;
    else
      v245 = 0x80000000;
    if ((v244 & 0x20000000) != 0)
      v244 = v245;
    else
      v244 &= 0xCFFFFFFF;
  }
LABEL_683:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v211 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    *(_QWORD *)&v598 = 0x161616160D0D0D0DLL;
    v544 = v554;
    v543 = v553;
    v538 = xmmword_224684340;
    v539 = xmmword_224684350;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 0, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18700000147), xmmword_224684350);
    if ((v514 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684360;
      v599 = xmmword_224684370;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 0, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18700000147), xmmword_224684370);
      if (((v488 | v220) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v598 = v553;
        v599 = v554;
        v593 = xmmword_224684380;
        v594 = xmmword_224684390;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 0, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18700000147), xmmword_224684390);
        v246 = (v505 & 1) == 0 && ((v483 | v221) & 1) == 0;
        if ((v464 & 1) == 0 && v246)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246843A0;
          v589 = xmmword_2246843B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 0, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10700000147), xmmword_2246843B0);
        }
      }
      v247 = (v478 & 1) == 0 && ((v483 | v221) & 1) == 0;
      if (v247 && (v510 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        v589 = v569;
        v588 = v568;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246843C0;
        v584 = xmmword_2246843D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 0, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10700000147), xmmword_2246843D0);
      }
    }
    v248 = (v237 & 0x40000000 | v221 & 1) == 0;
    if (!(v234 & 0x40000000 | v220 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      *(_QWORD *)&v573 = 0x13130A0A16160D0DLL;
      v584 = v569;
      v583 = v568;
      v578 = xmmword_2246843E0;
      v579 = xmmword_2246843F0;
      *(_QWORD *)&v548 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 0, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v548, COERCE_DOUBLE(0x18700000147), xmmword_2246843F0);
      v249 = (v230 & 0x40000000) == 0 && v248;
      if ((v505 & 1) == 0 && v249)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v548 = 0x131316160A0A0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_224684400;
        v574 = xmmword_224684410;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 0, 5, (uint64_t)&v548, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x10700000147), xmmword_224684410);
      }
    }
    v250 = (v510 & 1) == 0 && v248;
    if (v250 && (v244 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      *(_QWORD *)&v604[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v548 = xmmword_224684420;
      v549 = xmmword_224684430;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 0, 5, (uint64_t)v604, (uint64_t)&v548, (uint64_t)v605, COERCE_DOUBLE(0x10700000147), xmmword_224684430);
    }
  }
  v251 = *(_DWORD **)(v471 + 16);
  v515 = a2[1];
  v517 = *a2;
  v521 = v473[3];
  v522 = v473[4];
  v519 = *((float32x4_t *)v473 + 1);
  v520 = v473[2];
  v518 = *v473;
  v472 = *(_OWORD *)v471;
  v506 = (_BYTE **)a2[2];
  v252 = v251[256];
  v253 = **(unsigned __int8 **)v472;
  if (**(_BYTE **)v472)
  {
    v254 = v251[320];
    v255 = v251[264];
    v256 = v251[272];
    v499 = v251[328];
    if ((v499 & 0x40000000) == 0)
    {
LABEL_713:
      v257 = v254;
      v258 = 0;
      v259 = 0;
      v260 = 0;
      v261 = 0;
      v262 = 0;
      goto LABEL_766;
    }
  }
  else
  {
    if ((v252 & 0x20000000) != 0)
      v252 *= 4;
    v263 = v251[320];
    if ((v263 & 0x20000000) != 0)
      v254 = 4 * v263;
    else
      v254 = v251[320];
    v264 = v251[264];
    if ((v264 & 0x20000000) != 0)
      v255 = 4 * v264;
    else
      v255 = v251[264];
    v265 = v251[328];
    if ((v265 & 0x20000000) != 0)
      v266 = 4 * v265;
    else
      v266 = v251[328];
    v267 = v251[272];
    if ((v267 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v267 & 0x20000000) != 0)
      v256 = v268;
    else
      v256 = v267 & 0xCFFFFFFF;
    v499 = v266;
    if ((v266 & 0x40000000) == 0)
      goto LABEL_713;
  }
  v269 = *(unsigned int *)(v515 + 16);
  if ((v269 & 0x80000000) != 0)
  {
    v271 = *(_DWORD *)(v517 + 1332);
    v272 = **v506;
    if (**v506)
      goto LABEL_739;
  }
  else
  {
    v270 = *(_QWORD *)(v517 + 2328);
    if (v269 >= (*(_QWORD *)(v517 + 2336) - v270) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v270 = *(_QWORD *)(v517 + 2328);
    }
    v271 = *(_DWORD *)(v270 + (v269 << 11) + 1052);
    v272 = **v506;
    if (**v506)
    {
LABEL_739:
      v273 = *(unsigned int *)(v515 + 16);
      if ((v273 & 0x80000000) == 0)
        goto LABEL_740;
LABEL_1273:
      v275 = *(_DWORD *)(v517 + 1588);
      if (v272)
        goto LABEL_744;
      goto LABEL_1274;
    }
  }
  if ((v271 & 0x10000000) != 0)
    v450 = 0x40000000;
  else
    v450 = 0x80000000;
  if ((v271 & 0x20000000) != 0)
    v271 = v450;
  else
    v271 &= 0xCFFFFFFF;
  v273 = *(unsigned int *)(v515 + 16);
  if ((v273 & 0x80000000) != 0)
    goto LABEL_1273;
LABEL_740:
  v274 = *(_QWORD *)(v517 + 2328);
  if (v273 >= (*(_QWORD *)(v517 + 2336) - v274) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v274 = *(_QWORD *)(v517 + 2328);
    v272 = **v506;
  }
  v275 = *(_DWORD *)(v274 + (v273 << 11) + 1308);
  if (v272)
  {
LABEL_744:
    v276 = *(unsigned int *)(v515 + 16);
    if ((v276 & 0x80000000) == 0)
      goto LABEL_745;
LABEL_1281:
    v278 = *(_DWORD *)(v517 + 1364);
    if (v272)
      goto LABEL_749;
    goto LABEL_1282;
  }
LABEL_1274:
  if ((v275 & 0x10000000) != 0)
    v451 = 0x40000000;
  else
    v451 = 0x80000000;
  if ((v275 & 0x20000000) != 0)
    v275 = v451;
  else
    v275 &= 0xCFFFFFFF;
  v276 = *(unsigned int *)(v515 + 16);
  if ((v276 & 0x80000000) != 0)
    goto LABEL_1281;
LABEL_745:
  v277 = *(_QWORD *)(v517 + 2328);
  if (v276 >= (*(_QWORD *)(v517 + 2336) - v277) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v277 = *(_QWORD *)(v517 + 2328);
    v272 = **v506;
  }
  v278 = *(_DWORD *)(v277 + (v276 << 11) + 1084);
  if (v272)
  {
LABEL_749:
    v279 = *(unsigned int *)(v515 + 16);
    if ((v279 & 0x80000000) == 0)
      goto LABEL_750;
LABEL_1289:
    v281 = *(_DWORD *)(v517 + 1620);
    if (v272)
      goto LABEL_754;
    goto LABEL_1290;
  }
LABEL_1282:
  if ((v278 & 0x10000000) != 0)
    v452 = 0x40000000;
  else
    v452 = 0x80000000;
  if ((v278 & 0x20000000) != 0)
    v278 = v452;
  else
    v278 &= 0xCFFFFFFF;
  v279 = *(unsigned int *)(v515 + 16);
  if ((v279 & 0x80000000) != 0)
    goto LABEL_1289;
LABEL_750:
  v280 = *(_QWORD *)(v517 + 2328);
  if (v279 >= (*(_QWORD *)(v517 + 2336) - v280) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v280 = *(_QWORD *)(v517 + 2328);
    v272 = **v506;
  }
  v281 = *(_DWORD *)(v280 + (v279 << 11) + 1340);
  if (v272)
  {
LABEL_754:
    v282 = *(unsigned int *)(v515 + 16);
    if ((v282 & 0x80000000) == 0)
      goto LABEL_755;
    goto LABEL_1297;
  }
LABEL_1290:
  if ((v281 & 0x10000000) != 0)
    v453 = 0x40000000;
  else
    v453 = 0x80000000;
  if ((v281 & 0x20000000) != 0)
    v281 = v453;
  else
    v281 &= 0xCFFFFFFF;
  v282 = *(unsigned int *)(v515 + 16);
  if ((v282 & 0x80000000) == 0)
  {
LABEL_755:
    v283 = *(_QWORD *)(v517 + 2328);
    if (v282 >= (*(_QWORD *)(v517 + 2336) - v283) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v283 = *(_QWORD *)(v517 + 2328);
      v272 = **v506;
    }
    v257 = v254;
    v284 = v283 + (v282 << 11);
    v262 = (v271 >> 30) & 1;
    v261 = (v275 >> 30) & 1;
    v260 = (v278 >> 30) & 1;
    v285 = *(_DWORD *)(v284 + 1116);
    v259 = (v281 >> 30) & 1;
    if (v272)
      goto LABEL_765;
    goto LABEL_759;
  }
LABEL_1297:
  v257 = v254;
  v262 = (v271 >> 30) & 1;
  v261 = (v275 >> 30) & 1;
  v260 = (v278 >> 30) & 1;
  v285 = *(_DWORD *)(v517 + 1396);
  v259 = (v281 >> 30) & 1;
  if (!v272)
  {
LABEL_759:
    if ((v285 & 0x10000000) != 0)
      v286 = 0x40000000;
    else
      v286 = 0x80000000;
    if ((v285 & 0x20000000) != 0)
      v285 = v286;
    else
      v285 &= 0xCFFFFFFF;
  }
LABEL_765:
  v258 = (v285 >> 30) & 1;
  v253 = **(unsigned __int8 **)v472;
LABEL_766:
  v484 = v252 >> 30;
  v550 = v520;
  v551 = v521;
  v552 = v522;
  v549 = v519;
  v548 = v518;
  v287 = v251[257];
  if (v253)
  {
    v288 = v251[321];
    v289 = v251[265];
    v290 = v251[329];
    v291 = v251[273];
  }
  else
  {
    if ((v287 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v287 & 0x20000000) != 0)
      v287 = v292;
    else
      v287 &= 0xCFFFFFFF;
    v293 = v251[321];
    if ((v293 & 0x10000000) != 0)
      v294 = 0x40000000;
    else
      v294 = 0x80000000;
    if ((v293 & 0x20000000) != 0)
      v288 = v294;
    else
      v288 = v293 & 0xCFFFFFFF;
    v295 = v251[265];
    if ((v295 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v295 & 0x20000000) != 0)
      v289 = v296;
    else
      v289 = v295 & 0xCFFFFFFF;
    v297 = v251[329];
    if ((v297 & 0x10000000) != 0)
      v298 = 0x40000000;
    else
      v298 = 0x80000000;
    if ((v297 & 0x20000000) != 0)
      v290 = v298;
    else
      v290 = v297 & 0xCFFFFFFF;
    v299 = v251[273];
    if ((v299 & 0x10000000) != 0)
      v291 = 0x40000000;
    else
      v291 = 0x80000000;
    if ((v299 & 0x20000000) == 0)
      v291 = v299 & 0xCFFFFFFF;
  }
  v300 = v255 >> 30;
  v301 = v257 >> 30;
  v302 = v256 >> 30;
  v469 = v287 >> 30;
  v489 = v289 >> 30;
  v494 = v288 >> 30;
  v479 = v291 >> 30;
  if ((v499 & 0x40000000) != 0)
  {
    v545 = v520;
    v546 = v521;
    v547 = v522;
    v544 = v519;
    v543 = v518;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684440;
    v539 = xmmword_224684450;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18800000148), xmmword_224684450);
    if (!v259)
    {
      v540 = v520;
      v541 = v521;
      v542 = v522;
      v539 = v519;
      v538 = v518;
      *(_QWORD *)&v593 = 0x4040D0D04040D0DLL;
      v598 = xmmword_224684460;
      v599 = xmmword_224684470;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18800000148), xmmword_224684470);
      v303 = (v260 | v300 & 1) == 0;
      if (!(v261 | v301 & 1))
      {
        v600 = v520;
        v601 = v521;
        v602 = v522;
        v598 = v518;
        v599 = v519;
        *(_QWORD *)&v588 = 0x40404040D0D0D0DLL;
        v593 = xmmword_224684480;
        v594 = xmmword_224684490;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18800000148), xmmword_224684490);
        v304 = (v484 & 1) == 0 && v303;
        if (!v262 && v304)
        {
          v595 = v520;
          v596 = v521;
          v597 = v522;
          v594 = v519;
          v593 = v518;
          *(_QWORD *)&v583 = 0x4040D0D04040D0DLL;
          v588 = xmmword_2246844A0;
          v589 = xmmword_2246844B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10800000148), xmmword_2246844B0);
        }
      }
      if (v258)
        v305 = 0;
      else
        v305 = v303;
      if (v305 && (v302 & 1) == 0)
      {
        v590 = v520;
        v591 = v521;
        v592 = v522;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v519;
        v588 = v518;
        v583 = xmmword_2246844C0;
        v584 = xmmword_2246844D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10800000148), xmmword_2246844D0);
      }
    }
    if (((v301 | v494) & 1) == 0)
    {
      v585 = v520;
      v586 = v521;
      v587 = v522;
      v584 = v519;
      v583 = v518;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246844E0;
      v579 = xmmword_2246844F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18800000148), xmmword_2246844F0);
      v306 = (v469 & 1) == 0 && ((v300 | v489) & 1) == 0;
      if ((v484 & 1) == 0 && v306)
      {
        v580 = v520;
        v581 = v521;
        v582 = v522;
        v579 = v519;
        v578 = v518;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684500;
        v574 = xmmword_224684510;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10800000148), xmmword_224684510);
      }
    }
    v307 = (v302 & 1) == 0 && ((v300 | v489) & 1) == 0;
    if (v307 && (v479 & 1) == 0)
    {
      v575 = v520;
      v576 = v521;
      v577 = v522;
      v574 = v519;
      v573 = v518;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684520;
      v569 = xmmword_224684530;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10800000148), xmmword_224684530);
    }
  }
  v530 = v550;
  v531 = v551;
  v532 = v552;
  v528 = v548;
  v529 = v549;
  v308 = v251[258];
  if (**(_BYTE **)v472)
  {
    v309 = v251[322];
    v310 = v251[266];
    v311 = v251[330];
    v312 = v251[274];
  }
  else
  {
    if ((v308 & 0x10000000) != 0)
      v313 = 0x40000000;
    else
      v313 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v308 = v313;
    else
      v308 &= 0xCFFFFFFF;
    v314 = v251[322];
    if ((v314 & 0x10000000) != 0)
      v315 = 0x40000000;
    else
      v315 = 0x80000000;
    if ((v314 & 0x20000000) != 0)
      v309 = v315;
    else
      v309 = v314 & 0xCFFFFFFF;
    v316 = v251[266];
    if ((v316 & 0x10000000) != 0)
      v317 = 0x40000000;
    else
      v317 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v310 = v317;
    else
      v310 = v316 & 0xCFFFFFFF;
    v318 = v251[330];
    if ((v318 & 0x10000000) != 0)
      v319 = 0x40000000;
    else
      v319 = 0x80000000;
    if ((v318 & 0x20000000) != 0)
      v311 = v319;
    else
      v311 = v318 & 0xCFFFFFFF;
    v320 = v251[274];
    if ((v320 & 0x10000000) != 0)
      v312 = 0x40000000;
    else
      v312 = 0x80000000;
    if ((v320 & 0x20000000) == 0)
      v312 = v320 & 0xCFFFFFFF;
  }
  v321 = v310 >> 30;
  v465 = v308 >> 30;
  v322 = v309 >> 30;
  v474 = v312 >> 30;
  v535 = v550;
  v536 = v551;
  v537 = v552;
  v533 = v548;
  v534 = v549;
  if ((v290 & 0x40000000) != 0)
  {
    v545 = v550;
    v546 = v551;
    v547 = v552;
    v544 = v549;
    v543 = v548;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684540;
    v539 = xmmword_224684550;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18900000149), xmmword_224684550);
    if ((v499 & 0x40000000) == 0)
    {
      v540 = v550;
      v541 = v551;
      v542 = v552;
      v539 = v549;
      v538 = v548;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684560;
      v599 = xmmword_224684570;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18900000149), xmmword_224684570);
      if (((v301 | v494) & 1) == 0)
      {
        v600 = v550;
        v601 = v551;
        v602 = v552;
        v598 = v548;
        v599 = v549;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684580;
        v594 = xmmword_224684590;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18900000149), xmmword_224684590);
        v323 = (v469 & 1) == 0 && ((v300 | v489) & 1) == 0;
        if ((v484 & 1) == 0 && v323)
        {
          v595 = v550;
          v596 = v551;
          v597 = v552;
          v594 = v549;
          v593 = v548;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246845A0;
          v589 = xmmword_2246845B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10900000149), xmmword_2246845B0);
        }
      }
      v324 = (v302 & 1) == 0 && ((v300 | v489) & 1) == 0;
      if (v324 && (v479 & 1) == 0)
      {
        v590 = v535;
        v591 = v536;
        v592 = v537;
        v589 = v534;
        v588 = v533;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246845C0;
        v584 = xmmword_2246845D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10900000149), xmmword_2246845D0);
      }
    }
    if (((v494 | v322) & 1) == 0)
    {
      v585 = v535;
      v586 = v536;
      v587 = v537;
      v584 = v534;
      v583 = v533;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246845E0;
      v579 = xmmword_2246845F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18900000149), xmmword_2246845F0);
      v325 = (v465 & 1) == 0 && ((v489 | v321) & 1) == 0;
      if ((v469 & 1) == 0 && v325)
      {
        v580 = v535;
        v581 = v536;
        v582 = v537;
        v579 = v534;
        v578 = v533;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684600;
        v574 = xmmword_224684610;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10900000149), xmmword_224684610);
      }
    }
    v326 = (v479 & 1) == 0 && ((v489 | v321) & 1) == 0;
    if (v326 && (v474 & 1) == 0)
    {
      v575 = v535;
      v576 = v536;
      v577 = v537;
      v574 = v534;
      v573 = v533;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684620;
      v569 = xmmword_224684630;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10900000149), xmmword_224684630);
    }
  }
  v327 = v251[259];
  if (**(_BYTE **)v472)
  {
    v328 = v290;
    v329 = v251[323];
    v330 = v251[267];
    v331 = v251[331];
    v332 = v251[275];
  }
  else
  {
    v328 = v290;
    if ((v327 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v327 & 0x20000000) != 0)
      v327 = v333;
    else
      v327 &= 0xCFFFFFFF;
    v334 = v251[323];
    if ((v334 & 0x10000000) != 0)
      v335 = 0x40000000;
    else
      v335 = 0x80000000;
    if ((v334 & 0x20000000) != 0)
      v329 = v335;
    else
      v329 = v334 & 0xCFFFFFFF;
    v336 = v251[267];
    if ((v336 & 0x10000000) != 0)
      v337 = 0x40000000;
    else
      v337 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v330 = v337;
    else
      v330 = v336 & 0xCFFFFFFF;
    v338 = v251[331];
    if ((v338 & 0x10000000) != 0)
      v339 = 0x40000000;
    else
      v339 = 0x80000000;
    if ((v338 & 0x20000000) != 0)
      v331 = v339;
    else
      v331 = v338 & 0xCFFFFFFF;
    v340 = v251[275];
    if ((v340 & 0x10000000) != 0)
      v332 = 0x40000000;
    else
      v332 = 0x80000000;
    if ((v340 & 0x20000000) == 0)
      v332 = v340 & 0xCFFFFFFF;
  }
  v485 = v330 >> 30;
  v460 = v327 >> 30;
  v500 = v329 >> 30;
  v341 = v332 >> 30;
  if ((v311 & 0x40000000) != 0)
  {
    v342 = (v328 & 0x40000000) == 0;
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684640;
    v539 = xmmword_224684650;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18A0000014ALL), xmmword_224684650);
    if (v342)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684660;
      v599 = xmmword_224684670;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18A0000014ALL), xmmword_224684670);
      if (((v494 | v322) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684680;
        v594 = xmmword_224684690;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18A0000014ALL), xmmword_224684690);
        v343 = (v465 & 1) == 0 && ((v489 | v321) & 1) == 0;
        if ((v469 & 1) == 0 && v343)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246846A0;
          v589 = xmmword_2246846B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10A0000014ALL), xmmword_2246846B0);
        }
      }
      v344 = (v479 & 1) == 0 && ((v489 | v321) & 1) == 0;
      if (v344 && (v474 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246846C0;
        v584 = xmmword_2246846D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10A0000014ALL), xmmword_2246846D0);
      }
    }
    if (((v322 | v500) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246846E0;
      v579 = xmmword_2246846F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18A0000014ALL), xmmword_2246846F0);
      v345 = (v460 & 1) == 0 && ((v321 | v485) & 1) == 0;
      if ((v465 & 1) == 0 && v345)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684700;
        v574 = xmmword_224684710;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10A0000014ALL), xmmword_224684710);
      }
    }
    v346 = (v474 & 1) == 0 && ((v321 | v485) & 1) == 0;
    if (v346 && (v341 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684720;
      v569 = xmmword_224684730;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10A0000014ALL), xmmword_224684730);
    }
  }
  v347 = v251[260];
  if (**(_BYTE **)v472)
  {
    v348 = v251[324];
    v349 = v251[268];
    v350 = v251[332];
    v351 = v251[276];
  }
  else
  {
    if ((v347 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v347 & 0x20000000) != 0)
      v347 = v352;
    else
      v347 &= 0xCFFFFFFF;
    v353 = v251[324];
    if ((v353 & 0x10000000) != 0)
      v354 = 0x40000000;
    else
      v354 = 0x80000000;
    if ((v353 & 0x20000000) != 0)
      v348 = v354;
    else
      v348 = v353 & 0xCFFFFFFF;
    v355 = v251[268];
    if ((v355 & 0x10000000) != 0)
      v356 = 0x40000000;
    else
      v356 = 0x80000000;
    if ((v355 & 0x20000000) != 0)
      v349 = v356;
    else
      v349 = v355 & 0xCFFFFFFF;
    v357 = v251[332];
    if ((v357 & 0x10000000) != 0)
      v358 = 0x40000000;
    else
      v358 = 0x80000000;
    if ((v357 & 0x20000000) != 0)
      v350 = v358;
    else
      v350 = v357 & 0xCFFFFFFF;
    v359 = v251[276];
    if ((v359 & 0x10000000) != 0)
      v351 = 0x40000000;
    else
      v351 = 0x80000000;
    if ((v359 & 0x20000000) == 0)
      v351 = v359 & 0xCFFFFFFF;
  }
  v360 = v349 >> 30;
  v470 = v347 >> 30;
  v361 = v348 >> 30;
  v480 = v351 >> 30;
  if ((v331 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684740;
    v539 = xmmword_224684750;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18B0000014BLL), xmmword_224684750);
    if ((v311 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684760;
      v599 = xmmword_224684770;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18B0000014BLL), xmmword_224684770);
      v362 = ((v321 | v485) & 1) == 0;
      if (((v322 | v500) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684780;
        v594 = xmmword_224684790;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18B0000014BLL), xmmword_224684790);
        v363 = (v460 & 1) == 0 && v362;
        if ((v465 & 1) == 0 && v363)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246847A0;
          v589 = xmmword_2246847B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10B0000014BLL), xmmword_2246847B0);
        }
      }
      v364 = (v474 & 1) == 0 && v362;
      if (v364 && (v341 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246847C0;
        v584 = xmmword_2246847D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10B0000014BLL), xmmword_2246847D0);
      }
    }
    if (((v500 | v361) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246847E0;
      v579 = xmmword_2246847F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18B0000014BLL), xmmword_2246847F0);
      v365 = (v470 & 1) == 0 && ((v485 | v360) & 1) == 0;
      if ((v460 & 1) == 0 && v365)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684800;
        v574 = xmmword_224684810;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10B0000014BLL), xmmword_224684810);
      }
    }
    v366 = (v341 & 1) == 0 && ((v485 | v360) & 1) == 0;
    if (v366 && (v480 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684820;
      v569 = xmmword_224684830;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10B0000014BLL), xmmword_224684830);
    }
  }
  v367 = v251[261];
  if (**(_BYTE **)v472)
  {
    v368 = v251[325];
    v369 = v251[269];
    v370 = v251[333];
    v371 = v251[277];
  }
  else
  {
    if ((v367 & 0x10000000) != 0)
      v372 = 0x40000000;
    else
      v372 = 0x80000000;
    if ((v367 & 0x20000000) != 0)
      v367 = v372;
    else
      v367 &= 0xCFFFFFFF;
    v373 = v251[325];
    if ((v373 & 0x10000000) != 0)
      v374 = 0x40000000;
    else
      v374 = 0x80000000;
    if ((v373 & 0x20000000) != 0)
      v368 = v374;
    else
      v368 = v373 & 0xCFFFFFFF;
    v375 = v251[269];
    if ((v375 & 0x10000000) != 0)
      v376 = 0x40000000;
    else
      v376 = 0x80000000;
    if ((v375 & 0x20000000) != 0)
      v369 = v376;
    else
      v369 = v375 & 0xCFFFFFFF;
    v377 = v251[333];
    if ((v377 & 0x10000000) != 0)
      v378 = 0x40000000;
    else
      v378 = 0x80000000;
    if ((v377 & 0x20000000) != 0)
      v370 = v378;
    else
      v370 = v377 & 0xCFFFFFFF;
    v379 = v251[277];
    if ((v379 & 0x10000000) != 0)
      v371 = 0x40000000;
    else
      v371 = 0x80000000;
    if ((v379 & 0x20000000) == 0)
      v371 = v379 & 0xCFFFFFFF;
  }
  v380 = v369 >> 30;
  v466 = v367 >> 30;
  v381 = v368 >> 30;
  v475 = v371 >> 30;
  if ((v350 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684840;
    v539 = xmmword_224684850;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18C0000014CLL), xmmword_224684850);
    if ((v331 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684860;
      v599 = xmmword_224684870;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18C0000014CLL), xmmword_224684870);
      if (((v500 | v361) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684880;
        v594 = xmmword_224684890;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18C0000014CLL), xmmword_224684890);
        v382 = (v470 & 1) == 0 && ((v485 | v360) & 1) == 0;
        if ((v460 & 1) == 0 && v382)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246848A0;
          v589 = xmmword_2246848B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10C0000014CLL), xmmword_2246848B0);
        }
      }
      v383 = (v341 & 1) == 0 && ((v485 | v360) & 1) == 0;
      if (v383 && (v480 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246848C0;
        v584 = xmmword_2246848D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10C0000014CLL), xmmword_2246848D0);
      }
    }
    if (((v361 | v381) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246848E0;
      v579 = xmmword_2246848F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18C0000014CLL), xmmword_2246848F0);
      v384 = (v466 & 1) == 0 && ((v360 | v380) & 1) == 0;
      if ((v470 & 1) == 0 && v384)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684900;
        v574 = xmmword_224684910;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10C0000014CLL), xmmword_224684910);
      }
    }
    v385 = (v480 & 1) == 0 && ((v360 | v380) & 1) == 0;
    if (v385 && (v475 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684920;
      v569 = xmmword_224684930;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x10C0000014CLL), xmmword_224684930);
    }
  }
  v386 = v251[262];
  if (**(_BYTE **)v472)
  {
    v387 = v251[326];
    v388 = v251[270];
    v501 = v251[334];
    v389 = v251[278];
  }
  else
  {
    if ((v386 & 0x10000000) != 0)
      v390 = 0x40000000;
    else
      v390 = 0x80000000;
    if ((v386 & 0x20000000) != 0)
      v386 = v390;
    else
      v386 &= 0xCFFFFFFF;
    v391 = v251[326];
    if ((v391 & 0x10000000) != 0)
      v392 = 0x40000000;
    else
      v392 = 0x80000000;
    if ((v391 & 0x20000000) != 0)
      v387 = v392;
    else
      v387 = v391 & 0xCFFFFFFF;
    v393 = v251[270];
    if ((v393 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v393 & 0x20000000) != 0)
      v388 = v394;
    else
      v388 = v393 & 0xCFFFFFFF;
    v395 = v251[334];
    if ((v395 & 0x10000000) != 0)
      v396 = 0x40000000;
    else
      v396 = 0x80000000;
    if ((v395 & 0x20000000) != 0)
      v397 = v396;
    else
      v397 = v395 & 0xCFFFFFFF;
    v501 = v397;
    v398 = v251[278];
    if ((v398 & 0x10000000) != 0)
      v389 = 0x40000000;
    else
      v389 = 0x80000000;
    if ((v398 & 0x20000000) == 0)
      v389 = v398 & 0xCFFFFFFF;
  }
  v461 = v386 >> 30;
  v490 = v388 >> 30;
  v495 = v387 >> 30;
  v486 = v389 >> 30;
  v560 = v530;
  v561 = v531;
  v562 = v532;
  v559 = v529;
  v558 = v528;
  if ((v370 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684940;
    v539 = xmmword_224684950;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18D0000014DLL), xmmword_224684950);
    if ((v350 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684960;
      v599 = xmmword_224684970;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18D0000014DLL), xmmword_224684970);
      if (((v361 | v381) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684980;
        v594 = xmmword_224684990;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18D0000014DLL), xmmword_224684990);
        v399 = (v466 & 1) == 0 && ((v360 | v380) & 1) == 0;
        if ((v470 & 1) == 0 && v399)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246849A0;
          v589 = xmmword_2246849B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10D0000014DLL), xmmword_2246849B0);
        }
      }
      v400 = (v480 & 1) == 0 && ((v360 | v380) & 1) == 0;
      if (v400 && (v475 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246849C0;
        v584 = xmmword_2246849D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10D0000014DLL), xmmword_2246849D0);
      }
    }
    if (((v381 | v495) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246849E0;
      v579 = xmmword_2246849F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18D0000014DLL), xmmword_2246849F0);
      v401 = (v461 & 1) == 0 && ((v380 | v490) & 1) == 0;
      if ((v466 & 1) == 0 && v401)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        v579 = v559;
        v578 = v558;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684A00;
        v574 = xmmword_224684A10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x10D0000014DLL), xmmword_224684A10);
      }
    }
    v402 = (v475 & 1) == 0 && ((v380 | v490) & 1) == 0;
    if (v402 && (v486 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684A20;
      v569 = xmmword_224684A30;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 1, 5, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x10D0000014DLL), xmmword_224684A30);
    }
  }
  v555 = v530;
  v556 = v531;
  v557 = v532;
  v554 = v529;
  v553 = v528;
  v403 = v251[263];
  if (**(_BYTE **)v472)
  {
    v404 = v251[327];
    v405 = v251[271];
    v406 = v251[335];
    v407 = v251[279];
  }
  else
  {
    if ((v403 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v403 & 0x20000000) != 0)
      v403 = v408;
    else
      v403 &= 0xCFFFFFFF;
    v409 = v251[327];
    if ((v409 & 0x10000000) != 0)
      v410 = 0x40000000;
    else
      v410 = 0x80000000;
    if ((v409 & 0x20000000) != 0)
      v404 = v410;
    else
      v404 = v409 & 0xCFFFFFFF;
    v411 = v251[271];
    if ((v411 & 0x10000000) != 0)
      v412 = 0x40000000;
    else
      v412 = 0x80000000;
    if ((v411 & 0x20000000) != 0)
      v405 = v412;
    else
      v405 = v411 & 0xCFFFFFFF;
    v413 = v251[335];
    if ((v413 & 0x10000000) != 0)
      v414 = 0x40000000;
    else
      v414 = 0x80000000;
    if ((v413 & 0x20000000) != 0)
      v406 = v414;
    else
      v406 = v413 & 0xCFFFFFFF;
    v415 = v251[279];
    if ((v415 & 0x10000000) != 0)
      v407 = 0x40000000;
    else
      v407 = 0x80000000;
    if ((v415 & 0x20000000) == 0)
      v407 = v415 & 0xCFFFFFFF;
  }
  v416 = v405 >> 30;
  v511 = v403 >> 30;
  v417 = v404 >> 30;
  v418 = v407 >> 30;
  v565 = v530;
  v566 = v531;
  v567 = v532;
  v564 = v529;
  v563 = v528;
  if ((v501 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224684A40;
    v539 = xmmword_224684A50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18E0000014ELL), xmmword_224684A50);
    if ((v370 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684A60;
      v599 = xmmword_224684A70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18E0000014ELL), xmmword_224684A70);
      v419 = ((v380 | v490) & 1) == 0;
      if (((v381 | v495) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684A80;
        v594 = xmmword_224684A90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18E0000014ELL), xmmword_224684A90);
        v420 = (v461 & 1) == 0 && v419;
        if ((v466 & 1) == 0 && v420)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_224684AA0;
          v589 = xmmword_224684AB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10E0000014ELL), xmmword_224684AB0);
        }
      }
      v421 = (v475 & 1) == 0 && v419;
      if (v421 && (v486 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224684AC0;
        v584 = xmmword_224684AD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10E0000014ELL), xmmword_224684AD0);
      }
    }
    if (((v495 | v417) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      v584 = v564;
      v583 = v563;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_224684AE0;
      v579 = xmmword_224684AF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x18E0000014ELL), xmmword_224684AF0);
      v422 = (v511 & 1) == 0 && ((v490 | v416) & 1) == 0;
      if ((v461 & 1) == 0 && v422)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        v579 = v564;
        v578 = v563;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224684B00;
        v574 = xmmword_224684B10;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 1, 5, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x10E0000014ELL), xmmword_224684B10);
      }
    }
    v423 = (v486 & 1) == 0 && ((v490 | v416) & 1) == 0;
    if (v423 && (v418 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v604[0] = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224684B20;
      v569 = xmmword_224684B30;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 1, 5, (uint64_t)v604, (uint64_t)&v568, (uint64_t)v605, COERCE_DOUBLE(0x10E0000014ELL), xmmword_224684B30);
    }
  }
  v424 = *(unsigned int *)(v515 + 88);
  if ((v424 & 0x80000000) != 0)
  {
    v427 = *v506;
    v428 = *(_DWORD *)(v517 + 1304);
    v429 = **v506;
    if (**v506)
      goto LABEL_1184;
  }
  else
  {
    v425 = *(_QWORD *)(v517 + 2328);
    if (v424 >= (*(_QWORD *)(v517 + 2336) - v425) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v425 = *(_QWORD *)(v517 + 2328);
    }
    v426 = v425 + (v424 << 11);
    v427 = *v506;
    v428 = *(_DWORD *)(v426 + 1024);
    v429 = **v506;
    if (**v506)
    {
LABEL_1184:
      v430 = *(unsigned int *)(v515 + 88);
      if ((v430 & 0x80000000) == 0)
        goto LABEL_1185;
LABEL_1204:
      v432 = *(_DWORD *)(v517 + 1560);
      if (v429)
        goto LABEL_1189;
      goto LABEL_1205;
    }
  }
  if ((v428 & 0x10000000) != 0)
    v437 = 0x40000000;
  else
    v437 = 0x80000000;
  if ((v428 & 0x20000000) != 0)
    v428 = v437;
  else
    v428 &= 0xCFFFFFFF;
  v430 = *(unsigned int *)(v515 + 88);
  if ((v430 & 0x80000000) != 0)
    goto LABEL_1204;
LABEL_1185:
  v431 = *(_QWORD *)(v517 + 2328);
  if (v430 >= (*(_QWORD *)(v517 + 2336) - v431) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v431 = *(_QWORD *)(v517 + 2328);
    v427 = *v506;
    v429 = **v506;
  }
  v432 = *(_DWORD *)(v431 + (v430 << 11) + 1280);
  if (v429)
  {
LABEL_1189:
    v433 = *(unsigned int *)(v515 + 88);
    if ((v433 & 0x80000000) == 0)
      goto LABEL_1190;
LABEL_1212:
    v435 = *(_DWORD *)(v517 + 1336);
    if (v429)
      goto LABEL_1194;
    goto LABEL_1213;
  }
LABEL_1205:
  if ((v432 & 0x10000000) != 0)
    v438 = 0x40000000;
  else
    v438 = 0x80000000;
  if ((v432 & 0x20000000) != 0)
    v432 = v438;
  else
    v432 &= 0xCFFFFFFF;
  v433 = *(unsigned int *)(v515 + 88);
  if ((v433 & 0x80000000) != 0)
    goto LABEL_1212;
LABEL_1190:
  v434 = *(_QWORD *)(v517 + 2328);
  if (v433 >= (*(_QWORD *)(v517 + 2336) - v434) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v434 = *(_QWORD *)(v517 + 2328);
    v427 = *v506;
    v429 = **v506;
  }
  v435 = *(_DWORD *)(v434 + (v433 << 11) + 1056);
  if (v429)
  {
LABEL_1194:
    v436 = *(unsigned int *)(v515 + 88);
    if ((v436 & 0x80000000) != 0)
      goto LABEL_1263;
    goto LABEL_1220;
  }
LABEL_1213:
  if ((v435 & 0x10000000) != 0)
    v439 = 0x40000000;
  else
    v439 = 0x80000000;
  if ((v435 & 0x20000000) != 0)
    v435 = v439;
  else
    v435 &= 0xCFFFFFFF;
  v436 = *(unsigned int *)(v515 + 88);
  if ((v436 & 0x80000000) != 0)
    goto LABEL_1263;
LABEL_1220:
  v440 = *(_QWORD *)(v517 + 2328);
  v441 = (*(_QWORD *)(v517 + 2336) - v440) >> 11;
  if (v441 > v436)
    goto LABEL_1224;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v427 = *v506;
  v436 = *(unsigned int *)(v515 + 88);
  if ((v436 & 0x80000000) != 0)
  {
LABEL_1263:
    v442 = *(_DWORD *)(v517 + 1368);
    if (*v427)
      goto LABEL_1234;
    goto LABEL_1228;
  }
  v440 = *(_QWORD *)(v517 + 2328);
  v441 = (*(_QWORD *)(v517 + 2336) - v440) >> 11;
LABEL_1224:
  if (v441 <= v436)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v440 = *(_QWORD *)(v517 + 2328);
    v427 = *v506;
  }
  v442 = *(_DWORD *)(v440 + (v436 << 11) + 1088);
  if (!*v427)
  {
LABEL_1228:
    if ((v442 & 0x10000000) != 0)
      v443 = 0x40000000;
    else
      v443 = 0x80000000;
    if ((v442 & 0x20000000) != 0)
      v442 = v443;
    else
      v442 &= 0xCFFFFFFF;
  }
LABEL_1234:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v406 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    v544 = v554;
    v543 = v553;
    *(_QWORD *)&v598 = 0x161616160D0D0D0DLL;
    v538 = xmmword_224684B40;
    v539 = xmmword_224684B50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 1, 5, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x18F0000014FLL), xmmword_224684B50);
    if ((v501 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224684B60;
      v599 = xmmword_224684B70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 1, 5, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x18F0000014FLL), xmmword_224684B70);
      if (((v495 | v417) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        v598 = v553;
        v599 = v554;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224684B80;
        v594 = xmmword_224684B90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 1, 5, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x18F0000014FLL), xmmword_224684B90);
        v444 = (v511 & 1) == 0 && ((v490 | v416) & 1) == 0;
        if ((v461 & 1) == 0 && v444)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_224684BA0;
          v589 = xmmword_224684BB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 1, 5, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x10F0000014FLL), xmmword_224684BB0);
        }
      }
      v445 = (v486 & 1) == 0 && ((v490 | v416) & 1) == 0;
      if (v445 && (v418 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v589 = v569;
        v588 = v568;
        v583 = xmmword_224684BC0;
        v584 = xmmword_224684BD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 1, 5, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x10F0000014FLL), xmmword_224684BD0);
      }
    }
    v446 = (v435 & 0x40000000 | v416 & 1) == 0;
    if (!(v432 & 0x40000000 | v417 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      *(_QWORD *)&v573 = 0x16160D0D16160D0DLL;
      v584 = v569;
      v583 = v568;
      v578 = xmmword_224684BE0;
      v579 = xmmword_224684BF0;
      *(_QWORD *)&v604[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 1, 5, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)v604, COERCE_DOUBLE(0x18F0000014FLL), xmmword_224684BF0);
      v447 = (v428 & 0x40000000) == 0 && v446;
      if ((v511 & 1) == 0 && v447)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v604[0] = 0x161616160D0D0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_224684C00;
        v574 = xmmword_224684C10;
        v605[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 1, 5, (uint64_t)v604, (uint64_t)&v573, (uint64_t)v605, COERCE_DOUBLE(0x10F0000014FLL), xmmword_224684C10);
      }
    }
    v448 = (v418 & 1) == 0 && v446;
    if (v448 && (v442 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      v605[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v604[0] = xmmword_224684C20;
      v604[1] = xmmword_224684C30;
      v603 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 1, 5, (uint64_t)v605, (uint64_t)v604, (uint64_t)&v603, COERCE_DOUBLE(0x10F0000014FLL), xmmword_224684C30);
    }
  }
  v538 = v472;
  v539.i64[0] = (uint64_t)v251;
  *(_QWORD *)&v598 = v517;
  *((_QWORD *)&v598 + 1) = v515;
  v599.i64[0] = (uint64_t)v506;
  v547 = v522;
  v546 = v521;
  v545 = v520;
  v543 = v518;
  v544 = v519;
  return sub_223E1A100((unsigned __int8 ***)&v538, &v598, &v543);
}

unint64_t sub_223E1A100(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  _BOOL4 v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  _BOOL4 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  _BOOL4 v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  unsigned int v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  unsigned __int8 **v229;
  unsigned int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  _BOOL4 v282;
  _BOOL4 v283;
  _BOOL4 v284;
  _BOOL4 v285;
  _BOOL4 v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  _BOOL4 v300;
  _BOOL4 v301;
  _BOOL4 v302;
  _BOOL4 v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  _BOOL4 v318;
  _BOOL4 v319;
  _BOOL4 v320;
  _BOOL4 v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  unsigned int v336;
  _BOOL4 v337;
  _BOOL4 v338;
  _BOOL4 v339;
  _BOOL4 v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  _BOOL4 v355;
  _BOOL4 v356;
  _BOOL4 v357;
  _BOOL4 v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  _BOOL4 v373;
  _BOOL4 v374;
  _BOOL4 v375;
  _BOOL4 v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  _BOOL4 v392;
  _BOOL4 v393;
  _BOOL4 v394;
  _BOOL4 v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _BYTE *v399;
  unsigned int v400;
  int v401;
  unint64_t v402;
  uint64_t v403;
  unsigned int v404;
  unint64_t v405;
  uint64_t v406;
  unsigned int v407;
  unint64_t v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t v412;
  unint64_t v413;
  unsigned int v414;
  unsigned int v415;
  _BOOL4 v416;
  _BOOL4 v417;
  _BOOL4 v418;
  _BOOL4 v419;
  _BOOL4 v420;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t *v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  __int128 v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned __int8 **v474;
  _BYTE **v475;
  unsigned int v476;
  uint64_t v477;
  _BYTE **v478;
  unsigned int v479;
  _BYTE **v480;
  unsigned int v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  float32x4_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  _OWORD v578[2];
  _QWORD v579[3];

  v4 = a2;
  v579[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v480 = *a1;
  v6 = *((_DWORD *)v5 + 264);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 328);
    v9 = *((_DWORD *)v5 + 272);
    v10 = *((_DWORD *)v5 + 336);
    v11 = *((_DWORD *)v5 + 280);
    v484 = *a2;
    v468 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 328);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 328);
    v18 = *((_DWORD *)v5 + 272);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 272);
    v19 = *((_DWORD *)v5 + 336);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 336);
    v20 = *((_DWORD *)v5 + 280);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v484 = *a2;
    v468 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v481 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v484 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v484 + 2328);
    if (v23 >= (*(_QWORD *)(v484 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v24 = *(_QWORD *)(v484 + 2328);
      v10 = v468;
      v8 = v481;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1084);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v468;
      v8 = v481;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1340);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v485 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1116);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 1652);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1372);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v476 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v64;
      v48 = v476;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v485 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1148);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v480 = *a1;
  v484 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v445 = v6 >> 30;
  v474 = (unsigned __int8 **)v4[2];
  v477 = v4[1];
  v494 = a3[2];
  v495 = a3[3];
  v496 = a3[4];
  v492 = *a3;
  v493 = a3[1];
  v70 = *((_DWORD *)v5 + 265);
  v432 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 329);
    v72 = *((_DWORD *)v5 + 273);
    v463 = *((_DWORD *)v5 + 337);
    v73 = *((_DWORD *)v5 + 281);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 329);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 273);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 337);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v463 = v81;
    v82 = *((_DWORD *)v5 + 281);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v85 = v11 >> 30;
  v429 = v70 >> 30;
  v454 = v72 >> 30;
  v459 = v71 >> 30;
  v438 = v73 >> 30;
  v504 = a3[2];
  v505 = a3[3];
  v506 = a3[4];
  v502 = *a3;
  v503 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v86 = v15;
    v87 = v16;
    v88 = a3[3];
    v519 = a3[2];
    v520 = v88;
    v521 = a3[4];
    v89 = *a3;
    v518 = a3[1];
    v517 = v89;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224684C40;
    v513 = (__int128)xmmword_224684C50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 0, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19000000150), xmmword_224684C50);
    if (!v13)
    {
      v514 = v504;
      v515 = v505;
      v516 = v506;
      v513 = v503;
      v512 = v502;
      *(_QWORD *)&v567 = 0x4040D0D04040D0DLL;
      v572 = xmmword_224684C60;
      v573 = (__int128)xmmword_224684C70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 0, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19000000150), xmmword_224684C70);
      v90 = (v14 | v83 & 1) == 0;
      if (!(v86 | v84 & 1))
      {
        v574 = v504;
        v575 = v505;
        v576 = v506;
        v572 = v502;
        v573 = v503;
        *(_QWORD *)&v562 = 0x40404040D0D0D0DLL;
        v567 = xmmword_224684C80;
        v568 = (__int128)xmmword_224684C90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 0, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19000000150), xmmword_224684C90);
        v91 = (v445 & 1) == 0 && v90;
        if (!v87 && v91)
        {
          v569 = v504;
          v570 = v505;
          v571 = v506;
          v568 = v503;
          v567 = v502;
          *(_QWORD *)&v557 = 0x4040D0D04040D0DLL;
          v562 = xmmword_224684CA0;
          v563 = (__int128)xmmword_224684CB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 0, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11000000150), xmmword_224684CB0);
        }
      }
      if (v12)
        v92 = 0;
      else
        v92 = v90;
      if (v92 && (v85 & 1) == 0)
      {
        v564 = v504;
        v565 = v505;
        v566 = v506;
        *(_QWORD *)&v552 = 0x40404040D0D0D0DLL;
        v563 = v503;
        v562 = v502;
        v557 = xmmword_224684CC0;
        v558 = (__int128)xmmword_224684CD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 0, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11000000150), xmmword_224684CD0);
      }
    }
    if (((v84 | v459) & 1) == 0)
    {
      v559 = v504;
      v560 = v505;
      v561 = v506;
      v558 = v503;
      v557 = v502;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_224684CE0;
      v553 = (__int128)xmmword_224684CF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 0, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19000000150), xmmword_224684CF0);
      v93 = (v429 & 1) == 0 && ((v83 | v454) & 1) == 0;
      if ((v445 & 1) == 0 && v93)
      {
        v554 = v504;
        v555 = v505;
        v556 = v506;
        v553 = v503;
        v552 = v502;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224684D00;
        v548 = (__int128)xmmword_224684D10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 0, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11000000150), xmmword_224684D10);
      }
    }
    v94 = (v85 & 1) == 0 && ((v83 | v454) & 1) == 0;
    v10 = v468;
    if (v94 && (v438 & 1) == 0)
    {
      v549 = v504;
      v550 = v505;
      v551 = v506;
      v548 = v503;
      v547 = v502;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224684D20;
      v543 = xmmword_224684D30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 0, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11000000150), xmmword_224684D30);
      v10 = v468;
    }
  }
  v95 = *((_DWORD *)v5 + 266);
  if (**v480)
  {
    v96 = *((_DWORD *)v5 + 330);
    v97 = *((_DWORD *)v5 + 274);
    v98 = *((_DWORD *)v5 + 338);
    v99 = *((_DWORD *)v5 + 282);
  }
  else
  {
    if ((v95 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v95 & 0x20000000) != 0)
      v95 = v100;
    else
      v95 &= 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 330);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v96 = v102;
    else
      v96 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 274);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v97 = v104;
    else
      v97 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 338);
    if ((v105 & 0x10000000) != 0)
      v106 = 0x40000000;
    else
      v106 = 0x80000000;
    if ((v105 & 0x20000000) != 0)
      v98 = v106;
    else
      v98 = v105 & 0xCFFFFFFF;
    v107 = *((_DWORD *)v5 + 282);
    if ((v107 & 0x10000000) != 0)
      v99 = 0x40000000;
    else
      v99 = 0x80000000;
    if ((v107 & 0x20000000) == 0)
      v99 = v107 & 0xCFFFFFFF;
  }
  v450 = v97 >> 30;
  v427 = v95 >> 30;
  v469 = v96 >> 30;
  v108 = v99 >> 30;
  if ((v463 & 0x40000000) != 0)
  {
    v109 = (v10 & 0x40000000) == 0;
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224684D40;
    v513 = (__int128)xmmword_224684D50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 1, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19100000151), xmmword_224684D50);
    if (v109)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224684D60;
      v573 = (__int128)xmmword_224684D70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 1, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19100000151), xmmword_224684D70);
      if (((v84 | v459) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224684D80;
        v568 = (__int128)xmmword_224684D90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 1, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19100000151), xmmword_224684D90);
        v110 = (v429 & 1) == 0 && ((v83 | v454) & 1) == 0;
        if ((v445 & 1) == 0 && v110)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_224684DA0;
          v563 = (__int128)xmmword_224684DB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 1, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11100000151), xmmword_224684DB0);
        }
      }
      v111 = (v85 & 1) == 0 && ((v83 | v454) & 1) == 0;
      if (v111 && (v438 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_224684DC0;
        v558 = (__int128)xmmword_224684DD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 1, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11100000151), xmmword_224684DD0);
      }
    }
    if (((v459 | v469) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_224684DE0;
      v553 = (__int128)xmmword_224684DF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 1, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19100000151), xmmword_224684DF0);
      v112 = (v427 & 1) == 0 && ((v454 | v450) & 1) == 0;
      if ((v429 & 1) == 0 && v112)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224684E00;
        v548 = (__int128)xmmword_224684E10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 1, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11100000151), xmmword_224684E10);
      }
    }
    v113 = (v438 & 1) == 0 && ((v454 | v450) & 1) == 0;
    if (v113 && (v108 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224684E20;
      v543 = xmmword_224684E30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 1, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11100000151), xmmword_224684E30);
    }
  }
  v114 = *((_DWORD *)v5 + 267);
  if (**v480)
  {
    v115 = *((_DWORD *)v5 + 331);
    v116 = *((_DWORD *)v5 + 275);
    v117 = *((_DWORD *)v5 + 339);
    v118 = *((_DWORD *)v5 + 283);
  }
  else
  {
    if ((v114 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v114 = v119;
    else
      v114 &= 0xCFFFFFFF;
    v120 = *((_DWORD *)v5 + 331);
    if ((v120 & 0x10000000) != 0)
      v121 = 0x40000000;
    else
      v121 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v115 = v121;
    else
      v115 = v120 & 0xCFFFFFFF;
    v122 = *((_DWORD *)v5 + 275);
    if ((v122 & 0x10000000) != 0)
      v123 = 0x40000000;
    else
      v123 = 0x80000000;
    if ((v122 & 0x20000000) != 0)
      v116 = v123;
    else
      v116 = v122 & 0xCFFFFFFF;
    v124 = *((_DWORD *)v5 + 339);
    if ((v124 & 0x10000000) != 0)
      v125 = 0x40000000;
    else
      v125 = 0x80000000;
    if ((v124 & 0x20000000) != 0)
      v117 = v125;
    else
      v117 = v124 & 0xCFFFFFFF;
    v126 = *((_DWORD *)v5 + 283);
    if ((v126 & 0x10000000) != 0)
      v118 = 0x40000000;
    else
      v118 = 0x80000000;
    if ((v126 & 0x20000000) == 0)
      v118 = v126 & 0xCFFFFFFF;
  }
  v127 = v116 >> 30;
  v426 = v114 >> 30;
  v446 = v115 >> 30;
  v435 = v118 >> 30;
  if ((v98 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224684E40;
    v513 = (__int128)xmmword_224684E50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 2, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19200000152), xmmword_224684E50);
    if ((v463 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224684E60;
      v573 = (__int128)xmmword_224684E70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 2, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19200000152), xmmword_224684E70);
      if (((v459 | v469) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224684E80;
        v568 = (__int128)xmmword_224684E90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 2, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19200000152), xmmword_224684E90);
        v128 = (v427 & 1) == 0 && ((v454 | v450) & 1) == 0;
        if ((v429 & 1) == 0 && v128)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_224684EA0;
          v563 = (__int128)xmmword_224684EB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 2, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11200000152), xmmword_224684EB0);
        }
      }
      v129 = (v438 & 1) == 0 && ((v454 | v450) & 1) == 0;
      if (v129 && (v108 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_224684EC0;
        v558 = (__int128)xmmword_224684ED0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 2, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11200000152), xmmword_224684ED0);
      }
    }
    if (((v469 | v446) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_224684EE0;
      v553 = (__int128)xmmword_224684EF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 2, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19200000152), xmmword_224684EF0);
      v130 = (v426 & 1) == 0 && ((v450 | v127) & 1) == 0;
      if ((v427 & 1) == 0 && v130)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224684F00;
        v548 = (__int128)xmmword_224684F10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 2, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11200000152), xmmword_224684F10);
      }
    }
    v131 = (v108 & 1) == 0 && ((v450 | v127) & 1) == 0;
    if (v131 && (v435 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224684F20;
      v543 = xmmword_224684F30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 2, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11200000152), xmmword_224684F30);
    }
  }
  v132 = *((_DWORD *)v5 + 268);
  if (**v480)
  {
    v133 = *((_DWORD *)v5 + 332);
    v134 = *((_DWORD *)v5 + 276);
    v135 = *((_DWORD *)v5 + 340);
    v136 = *((_DWORD *)v5 + 284);
  }
  else
  {
    if ((v132 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v132 & 0x20000000) != 0)
      v132 = v137;
    else
      v132 &= 0xCFFFFFFF;
    v138 = *((_DWORD *)v5 + 332);
    if ((v138 & 0x10000000) != 0)
      v139 = 0x40000000;
    else
      v139 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v133 = v139;
    else
      v133 = v138 & 0xCFFFFFFF;
    v140 = *((_DWORD *)v5 + 276);
    if ((v140 & 0x10000000) != 0)
      v141 = 0x40000000;
    else
      v141 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v134 = v141;
    else
      v134 = v140 & 0xCFFFFFFF;
    v142 = *((_DWORD *)v5 + 340);
    if ((v142 & 0x10000000) != 0)
      v143 = 0x40000000;
    else
      v143 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v135 = v143;
    else
      v135 = v142 & 0xCFFFFFFF;
    v144 = *((_DWORD *)v5 + 284);
    if ((v144 & 0x10000000) != 0)
      v136 = 0x40000000;
    else
      v136 = 0x80000000;
    if ((v144 & 0x20000000) == 0)
      v136 = v144 & 0xCFFFFFFF;
  }
  v439 = v132 >> 30;
  v460 = v134 >> 30;
  v464 = v133 >> 30;
  v145 = v136 >> 30;
  if ((v117 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224684F40;
    v513 = (__int128)xmmword_224684F50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 3, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19300000153), xmmword_224684F50);
    if ((v98 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224684F60;
      v573 = (__int128)xmmword_224684F70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 3, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19300000153), xmmword_224684F70);
      if (((v469 | v446) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224684F80;
        v568 = (__int128)xmmword_224684F90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 3, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19300000153), xmmword_224684F90);
        v146 = (v426 & 1) == 0 && ((v450 | v127) & 1) == 0;
        if ((v427 & 1) == 0 && v146)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_224684FA0;
          v563 = (__int128)xmmword_224684FB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 3, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11300000153), xmmword_224684FB0);
        }
      }
      v147 = (v108 & 1) == 0 && ((v450 | v127) & 1) == 0;
      if (v147 && (v435 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_224684FC0;
        v558 = (__int128)xmmword_224684FD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 3, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11300000153), xmmword_224684FD0);
      }
    }
    if (((v446 | v464) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_224684FE0;
      v553 = (__int128)xmmword_224684FF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 3, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19300000153), xmmword_224684FF0);
      v148 = (v439 & 1) == 0 && ((v127 | v460) & 1) == 0;
      if ((v426 & 1) == 0 && v148)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685000;
        v548 = (__int128)xmmword_224685010;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 3, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11300000153), xmmword_224685010);
      }
    }
    v149 = (v435 & 1) == 0 && ((v127 | v460) & 1) == 0;
    if (v149 && (v145 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685020;
      v543 = xmmword_224685030;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 3, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11300000153), xmmword_224685030);
    }
  }
  v150 = *((_DWORD *)v5 + 269);
  if (**v480)
  {
    v151 = *((_DWORD *)v5 + 333);
    v152 = *((_DWORD *)v5 + 277);
    v153 = *((_DWORD *)v5 + 341);
    v154 = *((_DWORD *)v5 + 285);
  }
  else
  {
    if ((v150 & 0x10000000) != 0)
      v155 = 0x40000000;
    else
      v155 = 0x80000000;
    if ((v150 & 0x20000000) != 0)
      v150 = v155;
    else
      v150 &= 0xCFFFFFFF;
    v156 = *((_DWORD *)v5 + 333);
    if ((v156 & 0x10000000) != 0)
      v157 = 0x40000000;
    else
      v157 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v151 = v157;
    else
      v151 = v156 & 0xCFFFFFFF;
    v158 = *((_DWORD *)v5 + 277);
    if ((v158 & 0x10000000) != 0)
      v159 = 0x40000000;
    else
      v159 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v152 = v159;
    else
      v152 = v158 & 0xCFFFFFFF;
    v160 = *((_DWORD *)v5 + 341);
    if ((v160 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v160 & 0x20000000) != 0)
      v153 = v161;
    else
      v153 = v160 & 0xCFFFFFFF;
    v162 = *((_DWORD *)v5 + 285);
    if ((v162 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v162 & 0x20000000) == 0)
      v154 = v162 & 0xCFFFFFFF;
  }
  v163 = v152 >> 30;
  v430 = v150 >> 30;
  v470 = v151 >> 30;
  v164 = v154 >> 30;
  if ((v135 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685040;
    v513 = (__int128)xmmword_224685050;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 4, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19400000154), xmmword_224685050);
    if ((v117 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685060;
      v573 = (__int128)xmmword_224685070;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 4, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19400000154), xmmword_224685070);
      if (((v446 | v464) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685080;
        v568 = (__int128)xmmword_224685090;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 4, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19400000154), xmmword_224685090);
        v165 = (v439 & 1) == 0 && ((v127 | v460) & 1) == 0;
        if ((v426 & 1) == 0 && v165)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246850A0;
          v563 = (__int128)xmmword_2246850B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 4, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11400000154), xmmword_2246850B0);
        }
      }
      v166 = (v435 & 1) == 0 && ((v127 | v460) & 1) == 0;
      if (v166 && (v145 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246850C0;
        v558 = (__int128)xmmword_2246850D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 4, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11400000154), xmmword_2246850D0);
      }
    }
    if (((v464 | v470) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246850E0;
      v553 = (__int128)xmmword_2246850F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 4, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19400000154), xmmword_2246850F0);
      v167 = (v430 & 1) == 0 && ((v460 | v163) & 1) == 0;
      if ((v439 & 1) == 0 && v167)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685100;
        v548 = (__int128)xmmword_224685110;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 4, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11400000154), xmmword_224685110);
      }
    }
    v168 = (v145 & 1) == 0 && ((v460 | v163) & 1) == 0;
    if (v168 && (v164 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685120;
      v543 = xmmword_224685130;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 4, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11400000154), xmmword_224685130);
    }
  }
  v169 = *((_DWORD *)v5 + 270);
  if (**v480)
  {
    v170 = *((_DWORD *)v5 + 334);
    v171 = *((_DWORD *)v5 + 278);
    v172 = *((_DWORD *)v5 + 342);
    v173 = *((_DWORD *)v5 + 286);
  }
  else
  {
    if ((v169 & 0x10000000) != 0)
      v174 = 0x40000000;
    else
      v174 = 0x80000000;
    if ((v169 & 0x20000000) != 0)
      v169 = v174;
    else
      v169 &= 0xCFFFFFFF;
    v175 = *((_DWORD *)v5 + 334);
    if ((v175 & 0x10000000) != 0)
      v176 = 0x40000000;
    else
      v176 = 0x80000000;
    if ((v175 & 0x20000000) != 0)
      v170 = v176;
    else
      v170 = v175 & 0xCFFFFFFF;
    v177 = *((_DWORD *)v5 + 278);
    if ((v177 & 0x10000000) != 0)
      v178 = 0x40000000;
    else
      v178 = 0x80000000;
    if ((v177 & 0x20000000) != 0)
      v171 = v178;
    else
      v171 = v177 & 0xCFFFFFFF;
    v179 = *((_DWORD *)v5 + 342);
    if ((v179 & 0x10000000) != 0)
      v180 = 0x40000000;
    else
      v180 = 0x80000000;
    if ((v179 & 0x20000000) != 0)
      v172 = v180;
    else
      v172 = v179 & 0xCFFFFFFF;
    v181 = *((_DWORD *)v5 + 286);
    if ((v181 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v181 & 0x20000000) == 0)
      v173 = v181 & 0xCFFFFFFF;
  }
  v436 = v169 >> 30;
  v451 = v171 >> 30;
  v455 = v170 >> 30;
  v447 = v173 >> 30;
  v534 = v494;
  v535 = v495;
  v536 = v496;
  v533 = v493;
  v532 = v492;
  if ((v153 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685140;
    v513 = (__int128)xmmword_224685150;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 5, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19500000155), xmmword_224685150);
    if ((v135 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685160;
      v573 = (__int128)xmmword_224685170;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 5, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19500000155), xmmword_224685170);
      if (((v464 | v470) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685180;
        v568 = (__int128)xmmword_224685190;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 5, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19500000155), xmmword_224685190);
        v182 = (v430 & 1) == 0 && ((v460 | v163) & 1) == 0;
        if ((v439 & 1) == 0 && v182)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246851A0;
          v563 = (__int128)xmmword_2246851B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 5, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11500000155), xmmword_2246851B0);
        }
      }
      v183 = (v145 & 1) == 0 && ((v460 | v163) & 1) == 0;
      if (v183 && (v164 & 1) == 0)
      {
        v564 = v534;
        v565 = v535;
        v566 = v536;
        v563 = v533;
        v562 = v532;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246851C0;
        v558 = (__int128)xmmword_2246851D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 5, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11500000155), xmmword_2246851D0);
      }
    }
    if (((v470 | v455) & 1) == 0)
    {
      v559 = v534;
      v560 = v535;
      v561 = v536;
      v558 = v533;
      v557 = v532;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246851E0;
      v553 = (__int128)xmmword_2246851F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 5, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19500000155), xmmword_2246851F0);
      v184 = (v436 & 1) == 0 && ((v163 | v451) & 1) == 0;
      if ((v430 & 1) == 0 && v184)
      {
        v554 = v534;
        v555 = v535;
        v556 = v536;
        v553 = v533;
        v552 = v532;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685200;
        v548 = (__int128)xmmword_224685210;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 5, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11500000155), xmmword_224685210);
      }
    }
    v185 = (v164 & 1) == 0 && ((v163 | v451) & 1) == 0;
    if (v185 && (v447 & 1) == 0)
    {
      v549 = v534;
      v550 = v535;
      v551 = v536;
      v548 = v533;
      v547 = v532;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685220;
      v543 = xmmword_224685230;
      *(_QWORD *)&v527 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 5, 2, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v527, COERCE_DOUBLE(0x11500000155), xmmword_224685230);
    }
  }
  v529 = v494;
  v530 = v495;
  v531 = v496;
  v528 = v493;
  v527 = v492;
  v186 = *((_DWORD *)v5 + 271);
  if (**v480)
  {
    v187 = *((_DWORD *)v5 + 335);
    v188 = *((_DWORD *)v5 + 279);
    v189 = *((_DWORD *)v5 + 343);
    v190 = *((_DWORD *)v5 + 287);
  }
  else
  {
    if ((v186 & 0x10000000) != 0)
      v191 = 0x40000000;
    else
      v191 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v186 = v191;
    else
      v186 &= 0xCFFFFFFF;
    v192 = *((_DWORD *)v5 + 335);
    if ((v192 & 0x10000000) != 0)
      v193 = 0x40000000;
    else
      v193 = 0x80000000;
    if ((v192 & 0x20000000) != 0)
      v187 = v193;
    else
      v187 = v192 & 0xCFFFFFFF;
    v194 = *((_DWORD *)v5 + 279);
    if ((v194 & 0x10000000) != 0)
      v195 = 0x40000000;
    else
      v195 = 0x80000000;
    if ((v194 & 0x20000000) != 0)
      v188 = v195;
    else
      v188 = v194 & 0xCFFFFFFF;
    v196 = *((_DWORD *)v5 + 343);
    if ((v196 & 0x10000000) != 0)
      v197 = 0x40000000;
    else
      v197 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v189 = v197;
    else
      v189 = v196 & 0xCFFFFFFF;
    v198 = *((_DWORD *)v5 + 287);
    if ((v198 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v198 & 0x20000000) == 0)
      v190 = v198 & 0xCFFFFFFF;
  }
  v199 = v188 >> 30;
  v465 = v186 >> 30;
  v200 = v187 >> 30;
  v482 = v190 >> 30;
  v539 = v494;
  v540 = v495;
  v541 = v496;
  v538 = v493;
  v537 = v492;
  if ((v172 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685240;
    v513 = (__int128)xmmword_224685250;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 6, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19600000156), xmmword_224685250);
    if ((v153 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685260;
      v573 = (__int128)xmmword_224685270;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 6, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19600000156), xmmword_224685270);
      if (((v470 | v455) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685280;
        v568 = (__int128)xmmword_224685290;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 6, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19600000156), xmmword_224685290);
        v201 = (v436 & 1) == 0 && ((v163 | v451) & 1) == 0;
        if ((v430 & 1) == 0 && v201)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246852A0;
          v563 = (__int128)xmmword_2246852B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 6, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11600000156), xmmword_2246852B0);
        }
      }
      v202 = (v164 & 1) == 0 && ((v163 | v451) & 1) == 0;
      if (v202 && (v447 & 1) == 0)
      {
        v564 = v539;
        v565 = v540;
        v566 = v541;
        v563 = v538;
        v562 = v537;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246852C0;
        v558 = (__int128)xmmword_2246852D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 6, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11600000156), xmmword_2246852D0);
      }
    }
    if (((v455 | v200) & 1) == 0)
    {
      v559 = v539;
      v560 = v540;
      v561 = v541;
      v558 = v538;
      v557 = v537;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246852E0;
      v553 = (__int128)xmmword_2246852F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 6, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19600000156), xmmword_2246852F0);
      v203 = (v465 & 1) == 0 && ((v451 | v199) & 1) == 0;
      if ((v436 & 1) == 0 && v203)
      {
        v554 = v539;
        v555 = v540;
        v556 = v541;
        v553 = v538;
        v552 = v537;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685300;
        v548 = (__int128)xmmword_224685310;
        *(_QWORD *)&v522 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 6, 2, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v522, COERCE_DOUBLE(0x11600000156), xmmword_224685310);
      }
    }
    v204 = (v447 & 1) == 0 && ((v451 | v199) & 1) == 0;
    if (v204 && (v482 & 1) == 0)
    {
      v549 = v539;
      v550 = v540;
      v551 = v541;
      v548 = v538;
      v547 = v537;
      *(_QWORD *)&v522 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685320;
      v543 = xmmword_224685330;
      *(_QWORD *)&v578[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 6, 2, 5, (uint64_t)&v522, (uint64_t)&v542, (uint64_t)v578, COERCE_DOUBLE(0x11600000156), xmmword_224685330);
    }
  }
  v205 = *(unsigned int *)(v477 + 88);
  if ((v205 & 0x80000000) != 0)
  {
    v208 = *v474;
    v209 = *(_DWORD *)(v484 + 1336);
    v210 = **v474;
    if (**v474)
      goto LABEL_509;
  }
  else
  {
    v206 = *(_QWORD *)(v484 + 2328);
    if (v205 >= (*(_QWORD *)(v484 + 2336) - v206) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v206 = *(_QWORD *)(v484 + 2328);
    }
    v207 = v206 + (v205 << 11);
    v208 = *v474;
    v209 = *(_DWORD *)(v207 + 1056);
    v210 = **v474;
    if (**v474)
    {
LABEL_509:
      v211 = *(unsigned int *)(v477 + 88);
      if ((v211 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v213 = *(_DWORD *)(v484 + 1592);
      if (v210)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v209 & 0x10000000) != 0)
    v218 = 0x40000000;
  else
    v218 = 0x80000000;
  if ((v209 & 0x20000000) != 0)
    v209 = v218;
  else
    v209 &= 0xCFFFFFFF;
  v211 = *(unsigned int *)(v477 + 88);
  if ((v211 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v212 = *(_QWORD *)(v484 + 2328);
  if (v211 >= (*(_QWORD *)(v484 + 2336) - v212) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v212 = *(_QWORD *)(v484 + 2328);
    v208 = *v474;
    v210 = **v474;
  }
  v213 = *(_DWORD *)(v212 + (v211 << 11) + 1312);
  if (v210)
  {
LABEL_514:
    v214 = *(unsigned int *)(v477 + 88);
    if ((v214 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v216 = *(_DWORD *)(v484 + 1368);
    if (v210)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v213 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v213 = v219;
  else
    v213 &= 0xCFFFFFFF;
  v214 = *(unsigned int *)(v477 + 88);
  if ((v214 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v215 = *(_QWORD *)(v484 + 2328);
  if (v214 >= (*(_QWORD *)(v484 + 2336) - v215) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v215 = *(_QWORD *)(v484 + 2328);
    v208 = *v474;
    v210 = **v474;
  }
  v216 = *(_DWORD *)(v215 + (v214 << 11) + 1088);
  if (v210)
  {
LABEL_519:
    v217 = *(unsigned int *)(v477 + 88);
    if ((v217 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v216 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v216 & 0x20000000) != 0)
    v216 = v220;
  else
    v216 &= 0xCFFFFFFF;
  v217 = *(unsigned int *)(v477 + 88);
  if ((v217 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v221 = *(_QWORD *)(v484 + 2328);
  v222 = (*(_QWORD *)(v484 + 2336) - v221) >> 11;
  if (v222 > v217)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v208 = *v474;
  v217 = *(unsigned int *)(v477 + 88);
  if ((v217 & 0x80000000) != 0)
  {
LABEL_590:
    v223 = *(_DWORD *)(v484 + 1400);
    if (*v208)
      goto LABEL_559;
    goto LABEL_553;
  }
  v221 = *(_QWORD *)(v484 + 2328);
  v222 = (*(_QWORD *)(v484 + 2336) - v221) >> 11;
LABEL_549:
  if (v222 <= v217)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v221 = *(_QWORD *)(v484 + 2328);
    v208 = *v474;
  }
  v223 = *(_DWORD *)(v221 + (v217 << 11) + 1120);
  if (!*v208)
  {
LABEL_553:
    if ((v223 & 0x10000000) != 0)
      v224 = 0x40000000;
    else
      v224 = 0x80000000;
    if ((v223 & 0x20000000) != 0)
      v223 = v224;
    else
      v223 &= 0xCFFFFFFF;
  }
LABEL_559:
  v544 = v529;
  v545 = v530;
  v546 = v531;
  v543 = (float32x4_t)v528;
  v542 = v527;
  if ((v189 & 0x40000000) != 0)
  {
    v519 = v529;
    v520 = v530;
    v521 = v531;
    v518 = v528;
    v517 = v527;
    *(_QWORD *)&v572 = 0x161616160D0D0D0DLL;
    v512 = xmmword_224685340;
    v513 = (__int128)xmmword_224685350;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 7, 2, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19700000157), xmmword_224685350);
    if ((v172 & 0x40000000) == 0)
    {
      v514 = v529;
      v515 = v530;
      v516 = v531;
      v513 = v528;
      v512 = v527;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685360;
      v573 = (__int128)xmmword_224685370;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 7, 2, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19700000157), xmmword_224685370);
      if (((v455 | v200) & 1) == 0)
      {
        v574 = v529;
        v575 = v530;
        v576 = v531;
        v572 = v527;
        v573 = v528;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685380;
        v568 = (__int128)xmmword_224685390;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 7, 2, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19700000157), xmmword_224685390);
        v225 = (v465 & 1) == 0 && ((v451 | v199) & 1) == 0;
        if ((v436 & 1) == 0 && v225)
        {
          v569 = v529;
          v570 = v530;
          v571 = v531;
          v568 = v528;
          v567 = v527;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246853A0;
          v563 = (__int128)xmmword_2246853B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 7, 2, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11700000157), xmmword_2246853B0);
        }
      }
      v226 = (v447 & 1) == 0 && ((v451 | v199) & 1) == 0;
      if (v226 && (v482 & 1) == 0)
      {
        v564 = v544;
        v565 = v545;
        v566 = v546;
        v563 = (__int128)v543;
        v562 = v542;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246853C0;
        v558 = (__int128)xmmword_2246853D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 7, 2, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11700000157), xmmword_2246853D0);
      }
    }
    if (!(v213 & 0x40000000 | v200 & 1))
    {
      v559 = v544;
      v560 = v545;
      v561 = v546;
      *(_QWORD *)&v547 = 0x16160D0D16160D0DLL;
      v558 = (__int128)v543;
      v557 = v542;
      v552 = xmmword_2246853E0;
      v553 = (__int128)xmmword_2246853F0;
      *(_QWORD *)&v522 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 7, 2, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v522, COERCE_DOUBLE(0x19700000157), xmmword_2246853F0);
      v227 = (v209 & 0x40000000) == 0 && (v216 & 0x40000000 | v199 & 1) == 0;
      if ((v465 & 1) == 0 && v227)
      {
        v554 = v544;
        v555 = v545;
        v556 = v546;
        *(_QWORD *)&v522 = 0x161616160D0D0D0DLL;
        v553 = (__int128)v543;
        v552 = v542;
        v547 = xmmword_224685400;
        v548 = (__int128)xmmword_224685410;
        *(_QWORD *)&v578[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 7, 2, 5, (uint64_t)&v522, (uint64_t)&v547, (uint64_t)v578, COERCE_DOUBLE(0x11700000157), xmmword_224685410);
      }
    }
    v228 = (v482 & 1) == 0 && (v216 & 0x40000000 | v199 & 1) == 0;
    if (v228 && (v223 & 0x40000000) == 0)
    {
      v549 = v544;
      v550 = v545;
      v551 = v546;
      *(_QWORD *)&v578[0] = 0x16160D0D16160D0DLL;
      v548 = (__int128)v543;
      v547 = v542;
      v522 = xmmword_224685420;
      v523 = (__int128)xmmword_224685430;
      v579[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 7, 2, 5, (uint64_t)v578, (uint64_t)&v522, (uint64_t)v579, COERCE_DOUBLE(0x11700000157), xmmword_224685430);
    }
  }
  v229 = a1[2];
  v483 = v432[1];
  v486 = *v432;
  v490 = a3[3];
  v491 = a3[4];
  v488 = a3[1];
  v489 = a3[2];
  v487 = *a3;
  v437 = *(_OWORD *)a1;
  v475 = (_BYTE **)v432[2];
  v478 = *a1;
  v230 = *((_DWORD *)v229 + 272);
  v231 = ***a1;
  if (***a1)
  {
    v232 = *((_DWORD *)v229 + 336);
    v233 = *((_DWORD *)v229 + 280);
    v234 = *((_DWORD *)v229 + 288);
    v471 = *((_DWORD *)v229 + 344);
    if ((v471 & 0x40000000) == 0)
    {
LABEL_589:
      v235 = v232;
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v239 = 0;
      v240 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v230 & 0x20000000) != 0)
      v230 *= 4;
    v241 = *((_DWORD *)v229 + 336);
    if ((v241 & 0x20000000) != 0)
      v232 = 4 * v241;
    else
      v232 = *((_DWORD *)v229 + 336);
    v242 = *((_DWORD *)v229 + 280);
    if ((v242 & 0x20000000) != 0)
      v233 = 4 * v242;
    else
      v233 = *((_DWORD *)v229 + 280);
    v243 = *((_DWORD *)v229 + 344);
    if ((v243 & 0x20000000) != 0)
      v244 = 4 * v243;
    else
      v244 = *((_DWORD *)v229 + 344);
    v245 = *((_DWORD *)v229 + 288);
    if ((v245 & 0x10000000) != 0)
      v246 = 0x40000000;
    else
      v246 = 0x80000000;
    if ((v245 & 0x20000000) != 0)
      v234 = v246;
    else
      v234 = v245 & 0xCFFFFFFF;
    v471 = v244;
    if ((v244 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v247 = *(unsigned int *)(v483 + 16);
  if ((v247 & 0x80000000) != 0)
  {
    v249 = *(_DWORD *)(v486 + 1396);
    v250 = **v475;
    if (**v475)
      goto LABEL_615;
  }
  else
  {
    v248 = *(_QWORD *)(v486 + 2328);
    if (v247 >= (*(_QWORD *)(v486 + 2336) - v248) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v248 = *(_QWORD *)(v486 + 2328);
    }
    v249 = *(_DWORD *)(v248 + (v247 << 11) + 1116);
    v250 = **v475;
    if (**v475)
    {
LABEL_615:
      v251 = *(unsigned int *)(v483 + 16);
      if ((v251 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v253 = *(_DWORD *)(v486 + 1652);
      if (v250)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v249 & 0x10000000) != 0)
    v422 = 0x40000000;
  else
    v422 = 0x80000000;
  if ((v249 & 0x20000000) != 0)
    v249 = v422;
  else
    v249 &= 0xCFFFFFFF;
  v251 = *(unsigned int *)(v483 + 16);
  if ((v251 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v252 = *(_QWORD *)(v486 + 2328);
  if (v251 >= (*(_QWORD *)(v486 + 2336) - v252) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v252 = *(_QWORD *)(v486 + 2328);
    v250 = **v475;
  }
  v253 = *(_DWORD *)(v252 + (v251 << 11) + 1372);
  if (v250)
  {
LABEL_620:
    v254 = *(unsigned int *)(v483 + 16);
    if ((v254 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v256 = *(_DWORD *)(v486 + 1428);
    if (v250)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v253 & 0x10000000) != 0)
    v423 = 0x40000000;
  else
    v423 = 0x80000000;
  if ((v253 & 0x20000000) != 0)
    v253 = v423;
  else
    v253 &= 0xCFFFFFFF;
  v254 = *(unsigned int *)(v483 + 16);
  if ((v254 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v255 = *(_QWORD *)(v486 + 2328);
  if (v254 >= (*(_QWORD *)(v486 + 2336) - v255) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v255 = *(_QWORD *)(v486 + 2328);
    v250 = **v475;
  }
  v256 = *(_DWORD *)(v255 + (v254 << 11) + 1148);
  if (v250)
  {
LABEL_625:
    v257 = *(unsigned int *)(v483 + 16);
    if ((v257 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v259 = *(_DWORD *)(v486 + 1684);
    if (v250)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v256 & 0x10000000) != 0)
    v424 = 0x40000000;
  else
    v424 = 0x80000000;
  if ((v256 & 0x20000000) != 0)
    v256 = v424;
  else
    v256 &= 0xCFFFFFFF;
  v257 = *(unsigned int *)(v483 + 16);
  if ((v257 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v258 = *(_QWORD *)(v486 + 2328);
  if (v257 >= (*(_QWORD *)(v486 + 2336) - v258) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v258 = *(_QWORD *)(v486 + 2328);
    v250 = **v475;
  }
  v259 = *(_DWORD *)(v258 + (v257 << 11) + 1404);
  if (v250)
  {
LABEL_630:
    v260 = *(unsigned int *)(v483 + 16);
    if ((v260 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v259 & 0x10000000) != 0)
    v425 = 0x40000000;
  else
    v425 = 0x80000000;
  if ((v259 & 0x20000000) != 0)
    v259 = v425;
  else
    v259 &= 0xCFFFFFFF;
  v260 = *(unsigned int *)(v483 + 16);
  if ((v260 & 0x80000000) == 0)
  {
LABEL_631:
    v261 = *(_QWORD *)(v486 + 2328);
    if (v260 >= (*(_QWORD *)(v486 + 2336) - v261) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v261 = *(_QWORD *)(v486 + 2328);
      v250 = **v475;
    }
    v235 = v232;
    v262 = v261 + (v260 << 11);
    v240 = (v249 >> 30) & 1;
    v239 = (v253 >> 30) & 1;
    v238 = (v256 >> 30) & 1;
    v263 = *(_DWORD *)(v262 + 1180);
    v237 = (v259 >> 30) & 1;
    if (v250)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v235 = v232;
  v240 = (v249 >> 30) & 1;
  v239 = (v253 >> 30) & 1;
  v238 = (v256 >> 30) & 1;
  v263 = *(_DWORD *)(v486 + 1460);
  v237 = (v259 >> 30) & 1;
  if (!v250)
  {
LABEL_635:
    if ((v263 & 0x10000000) != 0)
      v264 = 0x40000000;
    else
      v264 = 0x80000000;
    if ((v263 & 0x20000000) != 0)
      v263 = v264;
    else
      v263 &= 0xCFFFFFFF;
  }
LABEL_641:
  v236 = (v263 >> 30) & 1;
  v231 = **v478;
LABEL_642:
  v440 = v230 >> 30;
  v524 = v489;
  v525 = v490;
  v526 = v491;
  v523 = v488;
  v522 = v487;
  v265 = *((_DWORD *)v229 + 273);
  if (v231)
  {
    v266 = *((_DWORD *)v229 + 337);
    v267 = *((_DWORD *)v229 + 281);
    v466 = *((_DWORD *)v229 + 345);
    v268 = *((_DWORD *)v229 + 289);
  }
  else
  {
    if ((v265 & 0x10000000) != 0)
      v269 = 0x40000000;
    else
      v269 = 0x80000000;
    if ((v265 & 0x20000000) != 0)
      v265 = v269;
    else
      v265 &= 0xCFFFFFFF;
    v270 = *((_DWORD *)v229 + 337);
    if ((v270 & 0x10000000) != 0)
      v271 = 0x40000000;
    else
      v271 = 0x80000000;
    if ((v270 & 0x20000000) != 0)
      v266 = v271;
    else
      v266 = v270 & 0xCFFFFFFF;
    v272 = *((_DWORD *)v229 + 281);
    if ((v272 & 0x10000000) != 0)
      v273 = 0x40000000;
    else
      v273 = 0x80000000;
    if ((v272 & 0x20000000) != 0)
      v267 = v273;
    else
      v267 = v272 & 0xCFFFFFFF;
    v274 = *((_DWORD *)v229 + 345);
    if ((v274 & 0x10000000) != 0)
      v275 = 0x40000000;
    else
      v275 = 0x80000000;
    if ((v274 & 0x20000000) != 0)
      v276 = v275;
    else
      v276 = v274 & 0xCFFFFFFF;
    v466 = v276;
    v277 = *((_DWORD *)v229 + 289);
    if ((v277 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v277 & 0x20000000) == 0)
      v268 = v277 & 0xCFFFFFFF;
  }
  v278 = v233 >> 30;
  v279 = v235 >> 30;
  v280 = v234 >> 30;
  v433 = v265 >> 30;
  v456 = v267 >> 30;
  v461 = v266 >> 30;
  v281 = v268 >> 30;
  if ((v471 & 0x40000000) != 0)
  {
    v519 = v489;
    v520 = v490;
    v521 = v491;
    v518 = v488;
    v517 = v487;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685440;
    v513 = (__int128)xmmword_224685450;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 0, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19800000158), xmmword_224685450);
    if (!v237)
    {
      v514 = v489;
      v515 = v490;
      v516 = v491;
      v513 = v488;
      v512 = v487;
      *(_QWORD *)&v567 = 0x4040D0D04040D0DLL;
      v572 = xmmword_224685460;
      v573 = (__int128)xmmword_224685470;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 0, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19800000158), xmmword_224685470);
      v282 = (v238 | v278 & 1) == 0;
      if (!(v239 | v279 & 1))
      {
        v574 = v489;
        v575 = v490;
        v576 = v491;
        v572 = v487;
        v573 = v488;
        *(_QWORD *)&v562 = 0x40404040D0D0D0DLL;
        v567 = xmmword_224685480;
        v568 = (__int128)xmmword_224685490;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 0, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19800000158), xmmword_224685490);
        v283 = (v440 & 1) == 0 && v282;
        if (!v240 && v283)
        {
          v569 = v489;
          v570 = v490;
          v571 = v491;
          v568 = v488;
          v567 = v487;
          *(_QWORD *)&v557 = 0x4040D0D04040D0DLL;
          v562 = xmmword_2246854A0;
          v563 = (__int128)xmmword_2246854B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 0, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11800000158), xmmword_2246854B0);
        }
      }
      if (v236)
        v284 = 0;
      else
        v284 = v282;
      if (v284 && (v280 & 1) == 0)
      {
        v564 = v489;
        v565 = v490;
        v566 = v491;
        *(_QWORD *)&v552 = 0x40404040D0D0D0DLL;
        v563 = v488;
        v562 = v487;
        v557 = xmmword_2246854C0;
        v558 = (__int128)xmmword_2246854D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 0, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11800000158), xmmword_2246854D0);
      }
    }
    if (((v279 | v461) & 1) == 0)
    {
      v559 = v489;
      v560 = v490;
      v561 = v491;
      v558 = v488;
      v557 = v487;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246854E0;
      v553 = (__int128)xmmword_2246854F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 0, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19800000158), xmmword_2246854F0);
      v285 = (v433 & 1) == 0 && ((v278 | v456) & 1) == 0;
      if ((v440 & 1) == 0 && v285)
      {
        v554 = v489;
        v555 = v490;
        v556 = v491;
        v553 = v488;
        v552 = v487;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685500;
        v548 = (__int128)xmmword_224685510;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 0, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11800000158), xmmword_224685510);
      }
    }
    v286 = (v280 & 1) == 0 && ((v278 | v456) & 1) == 0;
    if (v286 && (v281 & 1) == 0)
    {
      v549 = v489;
      v550 = v490;
      v551 = v491;
      v548 = v488;
      v547 = v487;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685520;
      v543 = xmmword_224685530;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 0, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11800000158), xmmword_224685530);
    }
  }
  v499 = v524;
  v500 = v525;
  v501 = v526;
  v497 = v522;
  v498 = v523;
  v287 = *((_DWORD *)v229 + 274);
  if (**v478)
  {
    v288 = *((_DWORD *)v229 + 338);
    v289 = *((_DWORD *)v229 + 282);
    v290 = *((_DWORD *)v229 + 346);
    v291 = *((_DWORD *)v229 + 290);
  }
  else
  {
    if ((v287 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v287 & 0x20000000) != 0)
      v287 = v292;
    else
      v287 &= 0xCFFFFFFF;
    v293 = *((_DWORD *)v229 + 338);
    if ((v293 & 0x10000000) != 0)
      v294 = 0x40000000;
    else
      v294 = 0x80000000;
    if ((v293 & 0x20000000) != 0)
      v288 = v294;
    else
      v288 = v293 & 0xCFFFFFFF;
    v295 = *((_DWORD *)v229 + 282);
    if ((v295 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v295 & 0x20000000) != 0)
      v289 = v296;
    else
      v289 = v295 & 0xCFFFFFFF;
    v297 = *((_DWORD *)v229 + 346);
    if ((v297 & 0x10000000) != 0)
      v298 = 0x40000000;
    else
      v298 = 0x80000000;
    if ((v297 & 0x20000000) != 0)
      v290 = v298;
    else
      v290 = v297 & 0xCFFFFFFF;
    v299 = *((_DWORD *)v229 + 290);
    if ((v299 & 0x10000000) != 0)
      v291 = 0x40000000;
    else
      v291 = 0x80000000;
    if ((v299 & 0x20000000) == 0)
      v291 = v299 & 0xCFFFFFFF;
  }
  v431 = v287 >> 30;
  v448 = v289 >> 30;
  v452 = v288 >> 30;
  v443 = v291 >> 30;
  v509 = v524;
  v510 = v525;
  v511 = v526;
  v507 = v522;
  v508 = v523;
  if ((v466 & 0x40000000) != 0)
  {
    v519 = v524;
    v520 = v525;
    v521 = v526;
    v518 = v523;
    v517 = v522;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685540;
    v513 = (__int128)xmmword_224685550;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 1, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19900000159), xmmword_224685550);
    if ((v471 & 0x40000000) == 0)
    {
      v514 = v524;
      v515 = v525;
      v516 = v526;
      v513 = v523;
      v512 = v522;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685560;
      v573 = (__int128)xmmword_224685570;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 1, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19900000159), xmmword_224685570);
      if (((v279 | v461) & 1) == 0)
      {
        v574 = v524;
        v575 = v525;
        v576 = v526;
        v572 = v522;
        v573 = v523;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685580;
        v568 = (__int128)xmmword_224685590;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 1, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19900000159), xmmword_224685590);
        v300 = (v433 & 1) == 0 && ((v278 | v456) & 1) == 0;
        if ((v440 & 1) == 0 && v300)
        {
          v569 = v524;
          v570 = v525;
          v571 = v526;
          v568 = v523;
          v567 = v522;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246855A0;
          v563 = (__int128)xmmword_2246855B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 1, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11900000159), xmmword_2246855B0);
        }
      }
      v301 = (v280 & 1) == 0 && ((v278 | v456) & 1) == 0;
      if (v301 && (v281 & 1) == 0)
      {
        v564 = v509;
        v565 = v510;
        v566 = v511;
        v563 = v508;
        v562 = v507;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246855C0;
        v558 = (__int128)xmmword_2246855D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 1, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11900000159), xmmword_2246855D0);
      }
    }
    if (((v461 | v452) & 1) == 0)
    {
      v559 = v509;
      v560 = v510;
      v561 = v511;
      v558 = v508;
      v557 = v507;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246855E0;
      v553 = (__int128)xmmword_2246855F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 1, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19900000159), xmmword_2246855F0);
      v302 = (v431 & 1) == 0 && ((v456 | v448) & 1) == 0;
      if ((v433 & 1) == 0 && v302)
      {
        v554 = v509;
        v555 = v510;
        v556 = v511;
        v553 = v508;
        v552 = v507;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685600;
        v548 = (__int128)xmmword_224685610;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 1, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11900000159), xmmword_224685610);
      }
    }
    v303 = (v281 & 1) == 0 && ((v456 | v448) & 1) == 0;
    if (v303 && (v443 & 1) == 0)
    {
      v549 = v509;
      v550 = v510;
      v551 = v511;
      v548 = v508;
      v547 = v507;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685620;
      v543 = xmmword_224685630;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 1, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11900000159), xmmword_224685630);
    }
  }
  v304 = *((_DWORD *)v229 + 275);
  if (**v478)
  {
    v305 = *((_DWORD *)v229 + 339);
    v306 = *((_DWORD *)v229 + 283);
    v307 = *((_DWORD *)v229 + 347);
    v308 = *((_DWORD *)v229 + 291);
  }
  else
  {
    if ((v304 & 0x10000000) != 0)
      v309 = 0x40000000;
    else
      v309 = 0x80000000;
    if ((v304 & 0x20000000) != 0)
      v304 = v309;
    else
      v304 &= 0xCFFFFFFF;
    v310 = *((_DWORD *)v229 + 339);
    if ((v310 & 0x10000000) != 0)
      v311 = 0x40000000;
    else
      v311 = 0x80000000;
    if ((v310 & 0x20000000) != 0)
      v305 = v311;
    else
      v305 = v310 & 0xCFFFFFFF;
    v312 = *((_DWORD *)v229 + 283);
    if ((v312 & 0x10000000) != 0)
      v313 = 0x40000000;
    else
      v313 = 0x80000000;
    if ((v312 & 0x20000000) != 0)
      v306 = v313;
    else
      v306 = v312 & 0xCFFFFFFF;
    v314 = *((_DWORD *)v229 + 347);
    if ((v314 & 0x10000000) != 0)
      v315 = 0x40000000;
    else
      v315 = 0x80000000;
    if ((v314 & 0x20000000) != 0)
      v307 = v315;
    else
      v307 = v314 & 0xCFFFFFFF;
    v316 = *((_DWORD *)v229 + 291);
    if ((v316 & 0x10000000) != 0)
      v308 = 0x40000000;
    else
      v308 = 0x80000000;
    if ((v316 & 0x20000000) == 0)
      v308 = v316 & 0xCFFFFFFF;
  }
  v317 = v306 >> 30;
  v428 = v304 >> 30;
  v472 = v305 >> 30;
  v441 = v308 >> 30;
  if ((v290 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685640;
    v513 = (__int128)xmmword_224685650;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 2, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19A0000015ALL), xmmword_224685650);
    if ((v466 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685660;
      v573 = (__int128)xmmword_224685670;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 2, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19A0000015ALL), xmmword_224685670);
      if (((v461 | v452) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685680;
        v568 = (__int128)xmmword_224685690;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 2, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19A0000015ALL), xmmword_224685690);
        v318 = (v431 & 1) == 0 && ((v456 | v448) & 1) == 0;
        if ((v433 & 1) == 0 && v318)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246856A0;
          v563 = (__int128)xmmword_2246856B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 2, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11A0000015ALL), xmmword_2246856B0);
        }
      }
      v319 = (v281 & 1) == 0 && ((v456 | v448) & 1) == 0;
      if (v319 && (v443 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246856C0;
        v558 = (__int128)xmmword_2246856D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 2, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11A0000015ALL), xmmword_2246856D0);
      }
    }
    if (((v452 | v472) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246856E0;
      v553 = (__int128)xmmword_2246856F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 2, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19A0000015ALL), xmmword_2246856F0);
      v320 = (v428 & 1) == 0 && ((v448 | v317) & 1) == 0;
      if ((v431 & 1) == 0 && v320)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685700;
        v548 = (__int128)xmmword_224685710;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 2, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11A0000015ALL), xmmword_224685710);
      }
    }
    v321 = (v443 & 1) == 0 && ((v448 | v317) & 1) == 0;
    if (v321 && (v441 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685720;
      v543 = xmmword_224685730;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 2, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11A0000015ALL), xmmword_224685730);
    }
  }
  v322 = *((_DWORD *)v229 + 276);
  if (**v478)
  {
    v323 = *((_DWORD *)v229 + 340);
    v324 = *((_DWORD *)v229 + 284);
    v325 = *((_DWORD *)v229 + 348);
    v326 = *((_DWORD *)v229 + 292);
  }
  else
  {
    if ((v322 & 0x10000000) != 0)
      v327 = 0x40000000;
    else
      v327 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v322 = v327;
    else
      v322 &= 0xCFFFFFFF;
    v328 = *((_DWORD *)v229 + 340);
    if ((v328 & 0x10000000) != 0)
      v329 = 0x40000000;
    else
      v329 = 0x80000000;
    if ((v328 & 0x20000000) != 0)
      v323 = v329;
    else
      v323 = v328 & 0xCFFFFFFF;
    v330 = *((_DWORD *)v229 + 284);
    if ((v330 & 0x10000000) != 0)
      v331 = 0x40000000;
    else
      v331 = 0x80000000;
    if ((v330 & 0x20000000) != 0)
      v324 = v331;
    else
      v324 = v330 & 0xCFFFFFFF;
    v332 = *((_DWORD *)v229 + 348);
    if ((v332 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v332 & 0x20000000) != 0)
      v325 = v333;
    else
      v325 = v332 & 0xCFFFFFFF;
    v334 = *((_DWORD *)v229 + 292);
    if ((v334 & 0x10000000) != 0)
      v326 = 0x40000000;
    else
      v326 = 0x80000000;
    if ((v334 & 0x20000000) == 0)
      v326 = v334 & 0xCFFFFFFF;
  }
  v335 = v324 >> 30;
  v434 = v322 >> 30;
  v336 = v323 >> 30;
  v457 = v326 >> 30;
  if ((v307 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685740;
    v513 = (__int128)xmmword_224685750;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 3, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19B0000015BLL), xmmword_224685750);
    if ((v290 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685760;
      v573 = (__int128)xmmword_224685770;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 3, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19B0000015BLL), xmmword_224685770);
      if (((v452 | v472) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685780;
        v568 = (__int128)xmmword_224685790;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 3, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19B0000015BLL), xmmword_224685790);
        v337 = (v428 & 1) == 0 && ((v448 | v317) & 1) == 0;
        if ((v431 & 1) == 0 && v337)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246857A0;
          v563 = (__int128)xmmword_2246857B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 3, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11B0000015BLL), xmmword_2246857B0);
        }
      }
      v338 = (v443 & 1) == 0 && ((v448 | v317) & 1) == 0;
      if (v338 && (v441 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246857C0;
        v558 = (__int128)xmmword_2246857D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 3, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11B0000015BLL), xmmword_2246857D0);
      }
    }
    if (((v472 | v336) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246857E0;
      v553 = (__int128)xmmword_2246857F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 3, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19B0000015BLL), xmmword_2246857F0);
      v339 = (v434 & 1) == 0 && ((v317 | v335) & 1) == 0;
      if ((v428 & 1) == 0 && v339)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685800;
        v548 = (__int128)xmmword_224685810;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 3, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11B0000015BLL), xmmword_224685810);
      }
    }
    v340 = (v441 & 1) == 0 && ((v317 | v335) & 1) == 0;
    if (v340 && (v457 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685820;
      v543 = xmmword_224685830;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 3, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11B0000015BLL), xmmword_224685830);
    }
  }
  v341 = *((_DWORD *)v229 + 277);
  if (**v478)
  {
    v342 = *((_DWORD *)v229 + 341);
    v343 = *((_DWORD *)v229 + 285);
    v344 = *((_DWORD *)v229 + 349);
    v345 = *((_DWORD *)v229 + 293);
  }
  else
  {
    if ((v341 & 0x10000000) != 0)
      v346 = 0x40000000;
    else
      v346 = 0x80000000;
    if ((v341 & 0x20000000) != 0)
      v341 = v346;
    else
      v341 &= 0xCFFFFFFF;
    v347 = *((_DWORD *)v229 + 341);
    if ((v347 & 0x10000000) != 0)
      v348 = 0x40000000;
    else
      v348 = 0x80000000;
    if ((v347 & 0x20000000) != 0)
      v342 = v348;
    else
      v342 = v347 & 0xCFFFFFFF;
    v349 = *((_DWORD *)v229 + 285);
    if ((v349 & 0x10000000) != 0)
      v350 = 0x40000000;
    else
      v350 = 0x80000000;
    if ((v349 & 0x20000000) != 0)
      v343 = v350;
    else
      v343 = v349 & 0xCFFFFFFF;
    v351 = *((_DWORD *)v229 + 349);
    if ((v351 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v351 & 0x20000000) != 0)
      v344 = v352;
    else
      v344 = v351 & 0xCFFFFFFF;
    v353 = *((_DWORD *)v229 + 293);
    if ((v353 & 0x10000000) != 0)
      v345 = 0x40000000;
    else
      v345 = 0x80000000;
    if ((v353 & 0x20000000) == 0)
      v345 = v353 & 0xCFFFFFFF;
  }
  v354 = v343 >> 30;
  v467 = v342 >> 30;
  v449 = v341 >> 30;
  v453 = v345 >> 30;
  if ((v325 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685840;
    v513 = (__int128)xmmword_224685850;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 4, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19C0000015CLL), xmmword_224685850);
    if ((v307 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685860;
      v573 = (__int128)xmmword_224685870;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 4, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19C0000015CLL), xmmword_224685870);
      if (((v472 | v336) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685880;
        v568 = (__int128)xmmword_224685890;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 4, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19C0000015CLL), xmmword_224685890);
        v355 = (v434 & 1) == 0 && ((v317 | v335) & 1) == 0;
        if ((v428 & 1) == 0 && v355)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246858A0;
          v563 = (__int128)xmmword_2246858B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 4, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11C0000015CLL), xmmword_2246858B0);
        }
      }
      v356 = (v441 & 1) == 0 && ((v317 | v335) & 1) == 0;
      if (v356 && (v457 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246858C0;
        v558 = (__int128)xmmword_2246858D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 4, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11C0000015CLL), xmmword_2246858D0);
      }
    }
    if (((v336 | v467) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246858E0;
      v553 = (__int128)xmmword_2246858F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 4, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19C0000015CLL), xmmword_2246858F0);
      v357 = (v449 & 1) == 0 && ((v335 | v354) & 1) == 0;
      if ((v434 & 1) == 0 && v357)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685900;
        v548 = (__int128)xmmword_224685910;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 4, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11C0000015CLL), xmmword_224685910);
      }
    }
    v358 = (v457 & 1) == 0 && ((v335 | v354) & 1) == 0;
    if (v358 && (v453 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685920;
      v543 = xmmword_224685930;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 4, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x11C0000015CLL), xmmword_224685930);
    }
  }
  v359 = *((_DWORD *)v229 + 278);
  if (**v478)
  {
    v360 = *((_DWORD *)v229 + 342);
    v361 = *((_DWORD *)v229 + 286);
    v362 = *((_DWORD *)v229 + 350);
    v363 = *((_DWORD *)v229 + 294);
  }
  else
  {
    if ((v359 & 0x10000000) != 0)
      v364 = 0x40000000;
    else
      v364 = 0x80000000;
    if ((v359 & 0x20000000) != 0)
      v359 = v364;
    else
      v359 &= 0xCFFFFFFF;
    v365 = *((_DWORD *)v229 + 342);
    if ((v365 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v365 & 0x20000000) != 0)
      v360 = v366;
    else
      v360 = v365 & 0xCFFFFFFF;
    v367 = *((_DWORD *)v229 + 286);
    if ((v367 & 0x10000000) != 0)
      v368 = 0x40000000;
    else
      v368 = 0x80000000;
    if ((v367 & 0x20000000) != 0)
      v361 = v368;
    else
      v361 = v367 & 0xCFFFFFFF;
    v369 = *((_DWORD *)v229 + 350);
    if ((v369 & 0x10000000) != 0)
      v370 = 0x40000000;
    else
      v370 = 0x80000000;
    if ((v369 & 0x20000000) != 0)
      v362 = v370;
    else
      v362 = v369 & 0xCFFFFFFF;
    v371 = *((_DWORD *)v229 + 294);
    if ((v371 & 0x10000000) != 0)
      v363 = 0x40000000;
    else
      v363 = 0x80000000;
    if ((v371 & 0x20000000) == 0)
      v363 = v371 & 0xCFFFFFFF;
  }
  v462 = v361 >> 30;
  v444 = v359 >> 30;
  v473 = v360 >> 30;
  v372 = v363 >> 30;
  v534 = v499;
  v535 = v500;
  v536 = v501;
  v533 = v498;
  v532 = v497;
  if ((v344 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685940;
    v513 = (__int128)xmmword_224685950;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 5, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19D0000015DLL), xmmword_224685950);
    if ((v325 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685960;
      v573 = (__int128)xmmword_224685970;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 5, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19D0000015DLL), xmmword_224685970);
      if (((v336 | v467) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685980;
        v568 = (__int128)xmmword_224685990;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 5, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19D0000015DLL), xmmword_224685990);
        v373 = (v449 & 1) == 0 && ((v335 | v354) & 1) == 0;
        if ((v434 & 1) == 0 && v373)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_2246859A0;
          v563 = (__int128)xmmword_2246859B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 5, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11D0000015DLL), xmmword_2246859B0);
        }
      }
      v374 = (v457 & 1) == 0 && ((v335 | v354) & 1) == 0;
      if (v374 && (v453 & 1) == 0)
      {
        v564 = v534;
        v565 = v535;
        v566 = v536;
        v563 = v533;
        v562 = v532;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_2246859C0;
        v558 = (__int128)xmmword_2246859D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 5, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11D0000015DLL), xmmword_2246859D0);
      }
    }
    if (((v467 | v473) & 1) == 0)
    {
      v559 = v534;
      v560 = v535;
      v561 = v536;
      v558 = v533;
      v557 = v532;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_2246859E0;
      v553 = (__int128)xmmword_2246859F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 5, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19D0000015DLL), xmmword_2246859F0);
      v375 = (v444 & 1) == 0 && ((v354 | v462) & 1) == 0;
      if ((v449 & 1) == 0 && v375)
      {
        v554 = v534;
        v555 = v535;
        v556 = v536;
        v553 = v533;
        v552 = v532;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685A00;
        v548 = (__int128)xmmword_224685A10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 5, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x11D0000015DLL), xmmword_224685A10);
      }
    }
    v376 = (v453 & 1) == 0 && ((v354 | v462) & 1) == 0;
    if (v376 && (v372 & 1) == 0)
    {
      v549 = v534;
      v550 = v535;
      v551 = v536;
      v548 = v533;
      v547 = v532;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685A20;
      v543 = xmmword_224685A30;
      *(_QWORD *)&v527 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 5, 3, 5, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v527, COERCE_DOUBLE(0x11D0000015DLL), xmmword_224685A30);
    }
  }
  v529 = v499;
  v530 = v500;
  v531 = v501;
  v528 = v498;
  v527 = v497;
  v377 = *((_DWORD *)v229 + 279);
  if (**v478)
  {
    v378 = *((_DWORD *)v229 + 343);
    v379 = *((_DWORD *)v229 + 287);
    v380 = *((_DWORD *)v229 + 351);
    v381 = *((_DWORD *)v229 + 295);
  }
  else
  {
    if ((v377 & 0x10000000) != 0)
      v382 = 0x40000000;
    else
      v382 = 0x80000000;
    if ((v377 & 0x20000000) != 0)
      v377 = v382;
    else
      v377 &= 0xCFFFFFFF;
    v383 = *((_DWORD *)v229 + 343);
    if ((v383 & 0x10000000) != 0)
      v384 = 0x40000000;
    else
      v384 = 0x80000000;
    if ((v383 & 0x20000000) != 0)
      v378 = v384;
    else
      v378 = v383 & 0xCFFFFFFF;
    v385 = *((_DWORD *)v229 + 287);
    if ((v385 & 0x10000000) != 0)
      v386 = 0x40000000;
    else
      v386 = 0x80000000;
    if ((v385 & 0x20000000) != 0)
      v379 = v386;
    else
      v379 = v385 & 0xCFFFFFFF;
    v387 = *((_DWORD *)v229 + 351);
    if ((v387 & 0x10000000) != 0)
      v388 = 0x40000000;
    else
      v388 = 0x80000000;
    if ((v387 & 0x20000000) != 0)
      v380 = v388;
    else
      v380 = v387 & 0xCFFFFFFF;
    v389 = *((_DWORD *)v229 + 295);
    if ((v389 & 0x10000000) != 0)
      v381 = 0x40000000;
    else
      v381 = 0x80000000;
    if ((v389 & 0x20000000) == 0)
      v381 = v389 & 0xCFFFFFFF;
  }
  v390 = v379 >> 30;
  v458 = v377 >> 30;
  v391 = v378 >> 30;
  v479 = v381 >> 30;
  v539 = v499;
  v540 = v500;
  v541 = v501;
  v538 = v498;
  v537 = v497;
  if ((v362 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
    v512 = xmmword_224685A40;
    v513 = (__int128)xmmword_224685A50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 6, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19E0000015ELL), xmmword_224685A50);
    if ((v344 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685A60;
      v573 = (__int128)xmmword_224685A70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 6, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19E0000015ELL), xmmword_224685A70);
      if (((v467 | v473) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685A80;
        v568 = (__int128)xmmword_224685A90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 6, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19E0000015ELL), xmmword_224685A90);
        v392 = (v444 & 1) == 0 && ((v354 | v462) & 1) == 0;
        if ((v449 & 1) == 0 && v392)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_224685AA0;
          v563 = (__int128)xmmword_224685AB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 6, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11E0000015ELL), xmmword_224685AB0);
        }
      }
      v393 = (v453 & 1) == 0 && ((v354 | v462) & 1) == 0;
      if (v393 && (v372 & 1) == 0)
      {
        v564 = v539;
        v565 = v540;
        v566 = v541;
        v563 = v538;
        v562 = v537;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_224685AC0;
        v558 = (__int128)xmmword_224685AD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 6, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11E0000015ELL), xmmword_224685AD0);
      }
    }
    if (((v473 | v391) & 1) == 0)
    {
      v559 = v539;
      v560 = v540;
      v561 = v541;
      v558 = v538;
      v557 = v537;
      *(_QWORD *)&v547 = 0xD0D0D0D0D0D0D0DLL;
      v552 = xmmword_224685AE0;
      v553 = (__int128)xmmword_224685AF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 6, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19E0000015ELL), xmmword_224685AF0);
      v394 = (v458 & 1) == 0 && ((v462 | v390) & 1) == 0;
      if ((v444 & 1) == 0 && v394)
      {
        v554 = v539;
        v555 = v540;
        v556 = v541;
        v553 = v538;
        v552 = v537;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_224685B00;
        v548 = (__int128)xmmword_224685B10;
        *(_QWORD *)&v578[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 6, 3, 5, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)v578, COERCE_DOUBLE(0x11E0000015ELL), xmmword_224685B10);
      }
    }
    v395 = (v372 & 1) == 0 && ((v462 | v390) & 1) == 0;
    if (v395 && (v479 & 1) == 0)
    {
      v549 = v539;
      v550 = v540;
      v551 = v541;
      v548 = v538;
      v547 = v537;
      *(_QWORD *)&v578[0] = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_224685B20;
      v543 = xmmword_224685B30;
      v579[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 6, 3, 5, (uint64_t)v578, (uint64_t)&v542, (uint64_t)v579, COERCE_DOUBLE(0x11E0000015ELL), xmmword_224685B30);
    }
  }
  v396 = *(unsigned int *)(v483 + 88);
  if ((v396 & 0x80000000) != 0)
  {
    v399 = *v475;
    v400 = *(_DWORD *)(v486 + 1368);
    v401 = **v475;
    if (**v475)
      goto LABEL_1060;
  }
  else
  {
    v397 = *(_QWORD *)(v486 + 2328);
    if (v396 >= (*(_QWORD *)(v486 + 2336) - v397) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v397 = *(_QWORD *)(v486 + 2328);
    }
    v398 = v397 + (v396 << 11);
    v399 = *v475;
    v400 = *(_DWORD *)(v398 + 1088);
    v401 = **v475;
    if (**v475)
    {
LABEL_1060:
      v402 = *(unsigned int *)(v483 + 88);
      if ((v402 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v404 = *(_DWORD *)(v486 + 1624);
      if (v401)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v400 & 0x10000000) != 0)
    v409 = 0x40000000;
  else
    v409 = 0x80000000;
  if ((v400 & 0x20000000) != 0)
    v400 = v409;
  else
    v400 &= 0xCFFFFFFF;
  v402 = *(unsigned int *)(v483 + 88);
  if ((v402 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v403 = *(_QWORD *)(v486 + 2328);
  if (v402 >= (*(_QWORD *)(v486 + 2336) - v403) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v403 = *(_QWORD *)(v486 + 2328);
    v399 = *v475;
    v401 = **v475;
  }
  v404 = *(_DWORD *)(v403 + (v402 << 11) + 1344);
  if (v401)
  {
LABEL_1065:
    v405 = *(unsigned int *)(v483 + 88);
    if ((v405 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v407 = *(_DWORD *)(v486 + 1400);
    if (v401)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v404 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v404 & 0x20000000) != 0)
    v404 = v410;
  else
    v404 &= 0xCFFFFFFF;
  v405 = *(unsigned int *)(v483 + 88);
  if ((v405 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v406 = *(_QWORD *)(v486 + 2328);
  if (v405 >= (*(_QWORD *)(v486 + 2336) - v406) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v406 = *(_QWORD *)(v486 + 2328);
    v399 = *v475;
    v401 = **v475;
  }
  v407 = *(_DWORD *)(v406 + (v405 << 11) + 1120);
  if (v401)
  {
LABEL_1070:
    v408 = *(unsigned int *)(v483 + 88);
    if ((v408 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v407 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v407 & 0x20000000) != 0)
    v407 = v411;
  else
    v407 &= 0xCFFFFFFF;
  v408 = *(unsigned int *)(v483 + 88);
  if ((v408 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v412 = *(_QWORD *)(v486 + 2328);
  v413 = (*(_QWORD *)(v486 + 2336) - v412) >> 11;
  if (v413 > v408)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v399 = *v475;
  v408 = *(unsigned int *)(v483 + 88);
  if ((v408 & 0x80000000) != 0)
  {
LABEL_1139:
    v414 = *(_DWORD *)(v486 + 1432);
    if (*v399)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v412 = *(_QWORD *)(v486 + 2328);
  v413 = (*(_QWORD *)(v486 + 2336) - v412) >> 11;
LABEL_1100:
  if (v413 <= v408)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v412 = *(_QWORD *)(v486 + 2328);
    v399 = *v475;
  }
  v414 = *(_DWORD *)(v412 + (v408 << 11) + 1152);
  if (!*v399)
  {
LABEL_1104:
    if ((v414 & 0x10000000) != 0)
      v415 = 0x40000000;
    else
      v415 = 0x80000000;
    if ((v414 & 0x20000000) != 0)
      v414 = v415;
    else
      v414 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v544 = v529;
  v545 = v530;
  v546 = v531;
  v543 = (float32x4_t)v528;
  v542 = v527;
  if ((v380 & 0x40000000) != 0)
  {
    v519 = v529;
    v520 = v530;
    v521 = v531;
    v518 = v528;
    v517 = v527;
    *(_QWORD *)&v572 = 0x161616160D0D0D0DLL;
    v512 = xmmword_224685B40;
    v513 = (__int128)xmmword_224685B50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 7, 3, 5, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19F0000015FLL), xmmword_224685B50);
    if ((v362 & 0x40000000) == 0)
    {
      v514 = v529;
      v515 = v530;
      v516 = v531;
      v513 = v528;
      v512 = v527;
      *(_QWORD *)&v567 = 0xD0D0D0D0D0D0D0DLL;
      v572 = xmmword_224685B60;
      v573 = (__int128)xmmword_224685B70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 7, 3, 5, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19F0000015FLL), xmmword_224685B70);
      if (((v473 | v391) & 1) == 0)
      {
        v574 = v529;
        v575 = v530;
        v576 = v531;
        v572 = v527;
        v573 = v528;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_224685B80;
        v568 = (__int128)xmmword_224685B90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 7, 3, 5, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19F0000015FLL), xmmword_224685B90);
        v416 = (v458 & 1) == 0 && ((v462 | v390) & 1) == 0;
        if ((v444 & 1) == 0 && v416)
        {
          v569 = v529;
          v570 = v530;
          v571 = v531;
          v568 = v528;
          v567 = v527;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_224685BA0;
          v563 = (__int128)xmmword_224685BB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 7, 3, 5, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x11F0000015FLL), xmmword_224685BB0);
        }
      }
      v417 = (v372 & 1) == 0 && ((v462 | v390) & 1) == 0;
      if (v417 && (v479 & 1) == 0)
      {
        v564 = v544;
        v565 = v545;
        v566 = v546;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v563 = (__int128)v543;
        v562 = v542;
        v557 = xmmword_224685BC0;
        v558 = (__int128)xmmword_224685BD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 7, 3, 5, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x11F0000015FLL), xmmword_224685BD0);
      }
    }
    v418 = (v407 & 0x40000000 | v390 & 1) == 0;
    if (!(v404 & 0x40000000 | v391 & 1))
    {
      v559 = v544;
      v560 = v545;
      v561 = v546;
      *(_QWORD *)&v547 = 0x16160D0D16160D0DLL;
      v558 = (__int128)v543;
      v557 = v542;
      v552 = xmmword_224685BE0;
      v553 = (__int128)xmmword_224685BF0;
      *(_QWORD *)&v578[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 7, 3, 5, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)v578, COERCE_DOUBLE(0x19F0000015FLL), xmmword_224685BF0);
      v419 = (v400 & 0x40000000) == 0 && v418;
      if ((v458 & 1) == 0 && v419)
      {
        v554 = v544;
        v555 = v545;
        v556 = v546;
        *(_QWORD *)&v578[0] = 0x161616160D0D0D0DLL;
        v553 = (__int128)v543;
        v552 = v542;
        v547 = xmmword_224685C00;
        v548 = (__int128)xmmword_224685C10;
        v579[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 7, 3, 5, (uint64_t)v578, (uint64_t)&v547, (uint64_t)v579, COERCE_DOUBLE(0x11F0000015FLL), xmmword_224685C10);
      }
    }
    v420 = (v479 & 1) == 0 && v418;
    if (v420 && (v414 & 0x40000000) == 0)
    {
      v549 = v544;
      v550 = v545;
      v551 = v546;
      v579[0] = 0x16160D0D16160D0DLL;
      v548 = (__int128)v543;
      v547 = v542;
      v578[0] = xmmword_224685C20;
      v578[1] = xmmword_224685C30;
      v577 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 7, 3, 5, (uint64_t)v579, (uint64_t)v578, (uint64_t)&v577, COERCE_DOUBLE(0x11F0000015FLL), xmmword_224685C30);
    }
  }
  v512 = v437;
  *(_QWORD *)&v513 = v229;
  *(_QWORD *)&v572 = v486;
  *((_QWORD *)&v572 + 1) = v483;
  *(_QWORD *)&v573 = v475;
  v521 = v491;
  v520 = v490;
  v519 = v489;
  v517 = v487;
  v518 = v488;
  return sub_223E204E8((unsigned __int8 ***)&v512, &v572, &v517);
}

unint64_t sub_223E204E8(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  _BOOL4 v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  _BOOL4 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  _BOOL4 v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  unsigned int v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  _BOOL4 v228;
  _BOOL4 v229;
  _BOOL4 v230;
  _BOOL4 v231;
  unsigned __int8 **v232;
  unsigned int v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  _BOOL4 v286;
  _BOOL4 v287;
  _BOOL4 v288;
  _BOOL4 v289;
  _BOOL4 v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  int v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  _BOOL4 v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  _BOOL4 v342;
  _BOOL4 v343;
  _BOOL4 v344;
  _BOOL4 v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  _BOOL4 v361;
  _BOOL4 v362;
  _BOOL4 v363;
  _BOOL4 v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  _BOOL4 v378;
  _BOOL4 v379;
  _BOOL4 v380;
  _BOOL4 v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  int v392;
  unsigned int v393;
  int v394;
  unsigned int v395;
  unsigned int v396;
  _BOOL4 v397;
  _BOOL4 v398;
  _BOOL4 v399;
  _BOOL4 v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _BYTE *v404;
  unsigned int v405;
  int v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int v409;
  unint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unint64_t v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  uint64_t v417;
  unint64_t v418;
  unsigned int v419;
  unsigned int v420;
  _BOOL4 v421;
  _BOOL4 v422;
  _BOOL4 v423;
  _BOOL4 v424;
  _BOOL4 v425;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t *v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  __int128 v442;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned __int8 **v477;
  _BYTE **v478;
  unsigned int v479;
  uint64_t v480;
  _BYTE **v481;
  unsigned int v482;
  _BYTE **v483;
  unsigned int v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  float32x4_t v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  uint64_t v580;
  _OWORD v581[2];
  _QWORD v582[3];

  v4 = a2;
  v582[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v483 = *a1;
  v6 = *((_DWORD *)v5 + 280);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 344);
    v9 = *((_DWORD *)v5 + 288);
    v10 = *((_DWORD *)v5 + 352);
    v11 = *((_DWORD *)v5 + 296);
    v487 = *a2;
    v471 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 344);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 344);
    v18 = *((_DWORD *)v5 + 288);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 288);
    v19 = *((_DWORD *)v5 + 352);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 352);
    v20 = *((_DWORD *)v5 + 296);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v487 = *a2;
    v471 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v484 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v487 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v487 + 2328);
    if (v23 >= (*(_QWORD *)(v487 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v24 = *(_QWORD *)(v487 + 2328);
      v10 = v471;
      v8 = v484;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1148);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v471;
      v8 = v484;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1404);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v488 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v471;
      v8 = v484;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1180);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 1716);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v471;
      v8 = v484;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1436);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v479 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v471;
      v8 = v484;
      v38 = v64;
      v48 = v479;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v488 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1212);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v483 = *a1;
  v487 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v449 = v6 >> 30;
  v477 = (unsigned __int8 **)v4[2];
  v480 = v4[1];
  v497 = a3[2];
  v498 = a3[3];
  v499 = a3[4];
  v495 = *a3;
  v496 = a3[1];
  v70 = *((_DWORD *)v5 + 281);
  v437 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 345);
    v72 = *((_DWORD *)v5 + 289);
    v467 = *((_DWORD *)v5 + 353);
    v73 = *((_DWORD *)v5 + 297);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 345);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 289);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 353);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v467 = v81;
    v82 = *((_DWORD *)v5 + 297);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v85 = v11 >> 30;
  v434 = v70 >> 30;
  v459 = v72 >> 30;
  v463 = v71 >> 30;
  v440 = v73 >> 30;
  v507 = a3[2];
  v508 = a3[3];
  v509 = a3[4];
  v505 = *a3;
  v506 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v86 = v15;
    v87 = v16;
    v88 = a3[3];
    v522 = a3[2];
    v523 = v88;
    v524 = a3[4];
    v89 = *a3;
    v521 = a3[1];
    v520 = v89;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224685C40;
    v516 = (__int128)xmmword_224685C50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 0, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A000000160), xmmword_224685C50);
    if (!v13)
    {
      v517 = v507;
      v518 = v508;
      v519 = v509;
      v516 = v506;
      v515 = v505;
      *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
      v575 = xmmword_224685C60;
      v576 = (__int128)xmmword_224685C70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 0, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A000000160), xmmword_224685C70);
      v90 = (v14 | v83 & 1) == 0;
      if (!(v86 | v84 & 1))
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v575 = v505;
        v576 = v506;
        *(_QWORD *)&v565 = 0x40404040D0D0D0DLL;
        v570 = xmmword_224685C80;
        v571 = (__int128)xmmword_224685C90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 0, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A000000160), xmmword_224685C90);
        v91 = (v449 & 1) == 0 && v90;
        if (!v87 && v91)
        {
          v572 = v507;
          v573 = v508;
          v574 = v509;
          v571 = v506;
          v570 = v505;
          *(_QWORD *)&v560 = 0x4040D0D04040D0DLL;
          v565 = xmmword_224685CA0;
          v566 = (__int128)xmmword_224685CB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 0, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12000000160), xmmword_224685CB0);
        }
      }
      if (v12)
        v92 = 0;
      else
        v92 = v90;
      if (v92 && (v85 & 1) == 0)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        *(_QWORD *)&v555 = 0x40404040D0D0D0DLL;
        v566 = v506;
        v565 = v505;
        v560 = xmmword_224685CC0;
        v561 = (__int128)xmmword_224685CD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12000000160), xmmword_224685CD0);
      }
    }
    if (((v84 | v463) & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224685CE0;
      v556 = (__int128)xmmword_224685CF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 0, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A000000160), xmmword_224685CF0);
      v93 = (v434 & 1) == 0 && ((v83 | v459) & 1) == 0;
      if ((v449 & 1) == 0 && v93)
      {
        v557 = v507;
        v558 = v508;
        v559 = v509;
        v556 = v506;
        v555 = v505;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224685D00;
        v551 = (__int128)xmmword_224685D10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 0, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12000000160), xmmword_224685D10);
      }
    }
    v94 = (v85 & 1) == 0 && ((v83 | v459) & 1) == 0;
    v10 = v471;
    if (v94 && (v440 & 1) == 0)
    {
      v552 = v507;
      v553 = v508;
      v554 = v509;
      v551 = v506;
      v550 = v505;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224685D20;
      v546 = xmmword_224685D30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 0, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12000000160), xmmword_224685D30);
      v10 = v471;
    }
  }
  v95 = *((_DWORD *)v5 + 282);
  if (**v483)
  {
    v96 = *((_DWORD *)v5 + 346);
    v97 = *((_DWORD *)v5 + 290);
    v98 = *((_DWORD *)v5 + 354);
    v99 = *((_DWORD *)v5 + 298);
  }
  else
  {
    if ((v95 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v95 & 0x20000000) != 0)
      v95 = v100;
    else
      v95 &= 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 346);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v96 = v102;
    else
      v96 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 290);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v97 = v104;
    else
      v97 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 354);
    if ((v105 & 0x10000000) != 0)
      v106 = 0x40000000;
    else
      v106 = 0x80000000;
    if ((v105 & 0x20000000) != 0)
      v98 = v106;
    else
      v98 = v105 & 0xCFFFFFFF;
    v107 = *((_DWORD *)v5 + 298);
    if ((v107 & 0x10000000) != 0)
      v99 = 0x40000000;
    else
      v99 = 0x80000000;
    if ((v107 & 0x20000000) == 0)
      v99 = v107 & 0xCFFFFFFF;
  }
  v455 = v97 >> 30;
  v108 = v95 >> 30;
  v472 = v96 >> 30;
  v109 = v99 >> 30;
  if ((v467 & 0x40000000) != 0)
  {
    v110 = (v10 & 0x40000000) == 0;
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224685D40;
    v516 = (__int128)xmmword_224685D50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 1, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A100000161), xmmword_224685D50);
    if (v110)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224685D60;
      v576 = (__int128)xmmword_224685D70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 1, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A100000161), xmmword_224685D70);
      if (((v84 | v463) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224685D80;
        v571 = (__int128)xmmword_224685D90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 1, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A100000161), xmmword_224685D90);
        v111 = (v434 & 1) == 0 && ((v83 | v459) & 1) == 0;
        if ((v449 & 1) == 0 && v111)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224685DA0;
          v566 = (__int128)xmmword_224685DB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 1, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12100000161), xmmword_224685DB0);
        }
      }
      v112 = (v85 & 1) == 0 && ((v83 | v459) & 1) == 0;
      if (v112 && (v440 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224685DC0;
        v561 = (__int128)xmmword_224685DD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12100000161), xmmword_224685DD0);
      }
    }
    if (((v463 | v472) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224685DE0;
      v556 = (__int128)xmmword_224685DF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 1, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A100000161), xmmword_224685DF0);
      v113 = (v108 & 1) == 0 && ((v459 | v455) & 1) == 0;
      if ((v434 & 1) == 0 && v113)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224685E00;
        v551 = (__int128)xmmword_224685E10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 1, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12100000161), xmmword_224685E10);
      }
    }
    v114 = (v440 & 1) == 0 && ((v459 | v455) & 1) == 0;
    if (v114 && (v109 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224685E20;
      v546 = xmmword_224685E30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 1, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12100000161), xmmword_224685E30);
    }
  }
  v115 = *((_DWORD *)v5 + 283);
  if (**v483)
  {
    v116 = *((_DWORD *)v5 + 347);
    v117 = *((_DWORD *)v5 + 291);
    v118 = *((_DWORD *)v5 + 355);
    v119 = *((_DWORD *)v5 + 299);
  }
  else
  {
    if ((v115 & 0x10000000) != 0)
      v120 = 0x40000000;
    else
      v120 = 0x80000000;
    if ((v115 & 0x20000000) != 0)
      v115 = v120;
    else
      v115 &= 0xCFFFFFFF;
    v121 = *((_DWORD *)v5 + 347);
    if ((v121 & 0x10000000) != 0)
      v122 = 0x40000000;
    else
      v122 = 0x80000000;
    if ((v121 & 0x20000000) != 0)
      v116 = v122;
    else
      v116 = v121 & 0xCFFFFFFF;
    v123 = *((_DWORD *)v5 + 291);
    if ((v123 & 0x10000000) != 0)
      v124 = 0x40000000;
    else
      v124 = 0x80000000;
    if ((v123 & 0x20000000) != 0)
      v117 = v124;
    else
      v117 = v123 & 0xCFFFFFFF;
    v125 = *((_DWORD *)v5 + 355);
    if ((v125 & 0x10000000) != 0)
      v126 = 0x40000000;
    else
      v126 = 0x80000000;
    if ((v125 & 0x20000000) != 0)
      v118 = v126;
    else
      v118 = v125 & 0xCFFFFFFF;
    v127 = *((_DWORD *)v5 + 299);
    if ((v127 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v127 & 0x20000000) == 0)
      v119 = v127 & 0xCFFFFFFF;
  }
  v432 = v115 >> 30;
  v445 = v117 >> 30;
  v450 = v116 >> 30;
  v128 = v119 >> 30;
  if ((v98 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224685E40;
    v516 = (__int128)xmmword_224685E50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 2, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A200000162), xmmword_224685E50);
    if ((v467 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224685E60;
      v576 = (__int128)xmmword_224685E70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 2, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A200000162), xmmword_224685E70);
      if (((v463 | v472) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224685E80;
        v571 = (__int128)xmmword_224685E90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 2, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A200000162), xmmword_224685E90);
        v129 = (v108 & 1) == 0 && ((v459 | v455) & 1) == 0;
        if ((v434 & 1) == 0 && v129)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224685EA0;
          v566 = (__int128)xmmword_224685EB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 2, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12200000162), xmmword_224685EB0);
        }
      }
      v130 = (v440 & 1) == 0 && ((v459 | v455) & 1) == 0;
      if (v130 && (v109 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224685EC0;
        v561 = (__int128)xmmword_224685ED0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12200000162), xmmword_224685ED0);
      }
    }
    if (((v472 | v450) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224685EE0;
      v556 = (__int128)xmmword_224685EF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 2, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A200000162), xmmword_224685EF0);
      v131 = (v432 & 1) == 0 && ((v455 | v445) & 1) == 0;
      if ((v108 & 1) == 0 && v131)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224685F00;
        v551 = (__int128)xmmword_224685F10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 2, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12200000162), xmmword_224685F10);
      }
    }
    v132 = (v109 & 1) == 0 && ((v455 | v445) & 1) == 0;
    if (v132 && (v128 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224685F20;
      v546 = xmmword_224685F30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 2, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12200000162), xmmword_224685F30);
    }
  }
  v133 = *((_DWORD *)v5 + 284);
  if (**v483)
  {
    v134 = *((_DWORD *)v5 + 348);
    v135 = *((_DWORD *)v5 + 292);
    v136 = *((_DWORD *)v5 + 356);
    v137 = *((_DWORD *)v5 + 300);
  }
  else
  {
    if ((v133 & 0x10000000) != 0)
      v138 = 0x40000000;
    else
      v138 = 0x80000000;
    if ((v133 & 0x20000000) != 0)
      v133 = v138;
    else
      v133 &= 0xCFFFFFFF;
    v139 = *((_DWORD *)v5 + 348);
    if ((v139 & 0x10000000) != 0)
      v140 = 0x40000000;
    else
      v140 = 0x80000000;
    if ((v139 & 0x20000000) != 0)
      v134 = v140;
    else
      v134 = v139 & 0xCFFFFFFF;
    v141 = *((_DWORD *)v5 + 292);
    if ((v141 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v141 & 0x20000000) != 0)
      v135 = v142;
    else
      v135 = v141 & 0xCFFFFFFF;
    v143 = *((_DWORD *)v5 + 356);
    if ((v143 & 0x10000000) != 0)
      v144 = 0x40000000;
    else
      v144 = 0x80000000;
    if ((v143 & 0x20000000) != 0)
      v136 = v144;
    else
      v136 = v143 & 0xCFFFFFFF;
    v145 = *((_DWORD *)v5 + 300);
    if ((v145 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v145 & 0x20000000) == 0)
      v137 = v145 & 0xCFFFFFFF;
  }
  v435 = v133 >> 30;
  v464 = v135 >> 30;
  v468 = v134 >> 30;
  v441 = v137 >> 30;
  if ((v118 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224685F40;
    v516 = (__int128)xmmword_224685F50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 3, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A300000163), xmmword_224685F50);
    if ((v98 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224685F60;
      v576 = (__int128)xmmword_224685F70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 3, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A300000163), xmmword_224685F70);
      if (((v472 | v450) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224685F80;
        v571 = (__int128)xmmword_224685F90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 3, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A300000163), xmmword_224685F90);
        v146 = (v432 & 1) == 0 && ((v455 | v445) & 1) == 0;
        if ((v108 & 1) == 0 && v146)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224685FA0;
          v566 = (__int128)xmmword_224685FB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 3, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12300000163), xmmword_224685FB0);
        }
      }
      v147 = (v109 & 1) == 0 && ((v455 | v445) & 1) == 0;
      if (v147 && (v128 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224685FC0;
        v561 = (__int128)xmmword_224685FD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12300000163), xmmword_224685FD0);
      }
    }
    if (((v450 | v468) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224685FE0;
      v556 = (__int128)xmmword_224685FF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 3, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A300000163), xmmword_224685FF0);
      v148 = (v435 & 1) == 0 && ((v445 | v464) & 1) == 0;
      if ((v432 & 1) == 0 && v148)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686000;
        v551 = (__int128)xmmword_224686010;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 3, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12300000163), xmmword_224686010);
      }
    }
    v149 = (v128 & 1) == 0 && ((v445 | v464) & 1) == 0;
    if (v149 && (v441 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686020;
      v546 = xmmword_224686030;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 3, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12300000163), xmmword_224686030);
    }
  }
  v150 = *((_DWORD *)v5 + 285);
  if (**v483)
  {
    v151 = *((_DWORD *)v5 + 349);
    v152 = *((_DWORD *)v5 + 293);
    v153 = *((_DWORD *)v5 + 357);
    v154 = *((_DWORD *)v5 + 301);
  }
  else
  {
    if ((v150 & 0x10000000) != 0)
      v155 = 0x40000000;
    else
      v155 = 0x80000000;
    if ((v150 & 0x20000000) != 0)
      v150 = v155;
    else
      v150 &= 0xCFFFFFFF;
    v156 = *((_DWORD *)v5 + 349);
    if ((v156 & 0x10000000) != 0)
      v157 = 0x40000000;
    else
      v157 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v151 = v157;
    else
      v151 = v156 & 0xCFFFFFFF;
    v158 = *((_DWORD *)v5 + 293);
    if ((v158 & 0x10000000) != 0)
      v159 = 0x40000000;
    else
      v159 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v152 = v159;
    else
      v152 = v158 & 0xCFFFFFFF;
    v160 = *((_DWORD *)v5 + 357);
    if ((v160 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v160 & 0x20000000) != 0)
      v153 = v161;
    else
      v153 = v160 & 0xCFFFFFFF;
    v162 = *((_DWORD *)v5 + 301);
    if ((v162 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v162 & 0x20000000) == 0)
      v154 = v162 & 0xCFFFFFFF;
  }
  v163 = v152 >> 30;
  v431 = v150 >> 30;
  v164 = v151 >> 30;
  v456 = v154 >> 30;
  if ((v136 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686040;
    v516 = (__int128)xmmword_224686050;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 4, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A400000164), xmmword_224686050);
    if ((v118 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686060;
      v576 = (__int128)xmmword_224686070;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 4, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A400000164), xmmword_224686070);
      if (((v450 | v468) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686080;
        v571 = (__int128)xmmword_224686090;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 4, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A400000164), xmmword_224686090);
        v165 = (v435 & 1) == 0 && ((v445 | v464) & 1) == 0;
        if ((v432 & 1) == 0 && v165)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246860A0;
          v566 = (__int128)xmmword_2246860B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 4, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12400000164), xmmword_2246860B0);
        }
      }
      v166 = (v128 & 1) == 0 && ((v445 | v464) & 1) == 0;
      if (v166 && (v441 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246860C0;
        v561 = (__int128)xmmword_2246860D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12400000164), xmmword_2246860D0);
      }
    }
    if (((v468 | v164) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246860E0;
      v556 = (__int128)xmmword_2246860F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 4, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A400000164), xmmword_2246860F0);
      v167 = (v431 & 1) == 0 && ((v464 | v163) & 1) == 0;
      if ((v435 & 1) == 0 && v167)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686100;
        v551 = (__int128)xmmword_224686110;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 4, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12400000164), xmmword_224686110);
      }
    }
    v168 = (v441 & 1) == 0 && ((v464 | v163) & 1) == 0;
    if (v168 && (v456 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686120;
      v546 = xmmword_224686130;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 4, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12400000164), xmmword_224686130);
    }
  }
  v169 = *((_DWORD *)v5 + 286);
  if (**v483)
  {
    v170 = *((_DWORD *)v5 + 350);
    v171 = *((_DWORD *)v5 + 294);
    v172 = *((_DWORD *)v5 + 358);
    v173 = *((_DWORD *)v5 + 302);
  }
  else
  {
    if ((v169 & 0x10000000) != 0)
      v174 = 0x40000000;
    else
      v174 = 0x80000000;
    if ((v169 & 0x20000000) != 0)
      v169 = v174;
    else
      v169 &= 0xCFFFFFFF;
    v175 = *((_DWORD *)v5 + 350);
    if ((v175 & 0x10000000) != 0)
      v176 = 0x40000000;
    else
      v176 = 0x80000000;
    if ((v175 & 0x20000000) != 0)
      v170 = v176;
    else
      v170 = v175 & 0xCFFFFFFF;
    v177 = *((_DWORD *)v5 + 294);
    if ((v177 & 0x10000000) != 0)
      v178 = 0x40000000;
    else
      v178 = 0x80000000;
    if ((v177 & 0x20000000) != 0)
      v171 = v178;
    else
      v171 = v177 & 0xCFFFFFFF;
    v179 = *((_DWORD *)v5 + 358);
    if ((v179 & 0x10000000) != 0)
      v180 = 0x40000000;
    else
      v180 = 0x80000000;
    if ((v179 & 0x20000000) != 0)
      v172 = v180;
    else
      v172 = v179 & 0xCFFFFFFF;
    v181 = *((_DWORD *)v5 + 302);
    if ((v181 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v181 & 0x20000000) == 0)
      v173 = v181 & 0xCFFFFFFF;
  }
  v460 = v171 >> 30;
  v473 = v170 >> 30;
  v446 = v169 >> 30;
  v451 = v173 >> 30;
  v537 = v497;
  v538 = v498;
  v539 = v499;
  v536 = v496;
  v535 = v495;
  if ((v153 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686140;
    v516 = (__int128)xmmword_224686150;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 5, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A500000165), xmmword_224686150);
    if ((v136 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686160;
      v576 = (__int128)xmmword_224686170;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 5, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A500000165), xmmword_224686170);
      if (((v468 | v164) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686180;
        v571 = (__int128)xmmword_224686190;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 5, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A500000165), xmmword_224686190);
        v182 = (v431 & 1) == 0 && ((v464 | v163) & 1) == 0;
        if ((v435 & 1) == 0 && v182)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246861A0;
          v566 = (__int128)xmmword_2246861B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 5, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12500000165), xmmword_2246861B0);
        }
      }
      v183 = (v441 & 1) == 0 && ((v464 | v163) & 1) == 0;
      if (v183 && (v456 & 1) == 0)
      {
        v567 = v537;
        v568 = v538;
        v569 = v539;
        v566 = v536;
        v565 = v535;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246861C0;
        v561 = (__int128)xmmword_2246861D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12500000165), xmmword_2246861D0);
      }
    }
    if (((v164 | v473) & 1) == 0)
    {
      v562 = v537;
      v563 = v538;
      v564 = v539;
      v561 = v536;
      v560 = v535;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246861E0;
      v556 = (__int128)xmmword_2246861F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 5, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A500000165), xmmword_2246861F0);
      v184 = (v446 & 1) == 0 && ((v163 | v460) & 1) == 0;
      if ((v431 & 1) == 0 && v184)
      {
        v557 = v537;
        v558 = v538;
        v559 = v539;
        v556 = v536;
        v555 = v535;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686200;
        v551 = (__int128)xmmword_224686210;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 5, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12500000165), xmmword_224686210);
      }
    }
    v185 = (v456 & 1) == 0 && ((v163 | v460) & 1) == 0;
    if (v185 && (v451 & 1) == 0)
    {
      v552 = v537;
      v553 = v538;
      v554 = v539;
      v551 = v536;
      v550 = v535;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686220;
      v546 = xmmword_224686230;
      *(_QWORD *)&v530 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 5, 4, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v530, COERCE_DOUBLE(0x12500000165), xmmword_224686230);
    }
  }
  v532 = v497;
  v533 = v498;
  v534 = v499;
  v531 = v496;
  v530 = v495;
  v186 = *((_DWORD *)v5 + 287);
  if (**v483)
  {
    v187 = *((_DWORD *)v5 + 351);
    v188 = *((_DWORD *)v5 + 295);
    v189 = *((_DWORD *)v5 + 359);
    v190 = *((_DWORD *)v5 + 303);
  }
  else
  {
    if ((v186 & 0x10000000) != 0)
      v191 = 0x40000000;
    else
      v191 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v186 = v191;
    else
      v186 &= 0xCFFFFFFF;
    v192 = *((_DWORD *)v5 + 351);
    if ((v192 & 0x10000000) != 0)
      v193 = 0x40000000;
    else
      v193 = 0x80000000;
    if ((v192 & 0x20000000) != 0)
      v187 = v193;
    else
      v187 = v192 & 0xCFFFFFFF;
    v194 = *((_DWORD *)v5 + 295);
    if ((v194 & 0x10000000) != 0)
      v195 = 0x40000000;
    else
      v195 = 0x80000000;
    if ((v194 & 0x20000000) != 0)
      v188 = v195;
    else
      v188 = v194 & 0xCFFFFFFF;
    v196 = *((_DWORD *)v5 + 359);
    if ((v196 & 0x10000000) != 0)
      v197 = 0x40000000;
    else
      v197 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v189 = v197;
    else
      v189 = v196 & 0xCFFFFFFF;
    v198 = *((_DWORD *)v5 + 303);
    if ((v198 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v198 & 0x20000000) == 0)
      v190 = v198 & 0xCFFFFFFF;
  }
  v199 = v188 >> 30;
  v485 = v186 >> 30;
  v200 = v187 >> 30;
  v201 = v190 >> 30;
  v542 = v497;
  v543 = v498;
  v544 = v499;
  v541 = v496;
  v540 = v495;
  if ((v172 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686240;
    v516 = (__int128)xmmword_224686250;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 6, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A600000166), xmmword_224686250);
    if ((v153 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686260;
      v576 = (__int128)xmmword_224686270;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 6, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A600000166), xmmword_224686270);
      if (((v164 | v473) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686280;
        v571 = (__int128)xmmword_224686290;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 6, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A600000166), xmmword_224686290);
        v202 = (v446 & 1) == 0 && ((v163 | v460) & 1) == 0;
        if ((v431 & 1) == 0 && v202)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246862A0;
          v566 = (__int128)xmmword_2246862B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 6, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12600000166), xmmword_2246862B0);
        }
      }
      v203 = (v456 & 1) == 0 && ((v163 | v460) & 1) == 0;
      if (v203 && (v451 & 1) == 0)
      {
        v567 = v542;
        v568 = v543;
        v569 = v544;
        v566 = v541;
        v565 = v540;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246862C0;
        v561 = (__int128)xmmword_2246862D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12600000166), xmmword_2246862D0);
      }
    }
    if (((v473 | v200) & 1) == 0)
    {
      v562 = v542;
      v563 = v543;
      v564 = v544;
      v561 = v541;
      v560 = v540;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246862E0;
      v556 = (__int128)xmmword_2246862F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 6, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A600000166), xmmword_2246862F0);
      v204 = (v485 & 1) == 0 && ((v460 | v199) & 1) == 0;
      if ((v446 & 1) == 0 && v204)
      {
        v557 = v542;
        v558 = v543;
        v559 = v544;
        v556 = v541;
        v555 = v540;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686300;
        v551 = (__int128)xmmword_224686310;
        *(_QWORD *)&v525 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 6, 4, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v525, COERCE_DOUBLE(0x12600000166), xmmword_224686310);
      }
    }
    v205 = (v451 & 1) == 0 && ((v460 | v199) & 1) == 0;
    if (v205 && (v201 & 1) == 0)
    {
      v552 = v542;
      v553 = v543;
      v554 = v544;
      v551 = v541;
      v550 = v540;
      *(_QWORD *)&v525 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686320;
      v546 = xmmword_224686330;
      *(_QWORD *)&v581[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 6, 4, 5, (uint64_t)&v525, (uint64_t)&v545, (uint64_t)v581, COERCE_DOUBLE(0x12600000166), xmmword_224686330);
    }
  }
  v206 = *(unsigned int *)(v480 + 88);
  if ((v206 & 0x80000000) != 0)
  {
    v209 = *v477;
    v210 = *(_DWORD *)(v487 + 1400);
    v211 = **v477;
    if (**v477)
      goto LABEL_509;
  }
  else
  {
    v207 = *(_QWORD *)(v487 + 2328);
    if (v206 >= (*(_QWORD *)(v487 + 2336) - v207) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v207 = *(_QWORD *)(v487 + 2328);
    }
    v208 = v207 + (v206 << 11);
    v209 = *v477;
    v210 = *(_DWORD *)(v208 + 1120);
    v211 = **v477;
    if (**v477)
    {
LABEL_509:
      v212 = *(unsigned int *)(v480 + 88);
      if ((v212 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v214 = *(_DWORD *)(v487 + 1656);
      if (v211)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v210 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v210 & 0x20000000) != 0)
    v210 = v219;
  else
    v210 &= 0xCFFFFFFF;
  v212 = *(unsigned int *)(v480 + 88);
  if ((v212 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v213 = *(_QWORD *)(v487 + 2328);
  if (v212 >= (*(_QWORD *)(v487 + 2336) - v213) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v213 = *(_QWORD *)(v487 + 2328);
    v209 = *v477;
    v211 = **v477;
  }
  v214 = *(_DWORD *)(v213 + (v212 << 11) + 1376);
  if (v211)
  {
LABEL_514:
    v215 = *(unsigned int *)(v480 + 88);
    if ((v215 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v217 = *(_DWORD *)(v487 + 1432);
    if (v211)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v214 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v214 & 0x20000000) != 0)
    v214 = v220;
  else
    v214 &= 0xCFFFFFFF;
  v215 = *(unsigned int *)(v480 + 88);
  if ((v215 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v216 = *(_QWORD *)(v487 + 2328);
  if (v215 >= (*(_QWORD *)(v487 + 2336) - v216) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v216 = *(_QWORD *)(v487 + 2328);
    v209 = *v477;
    v211 = **v477;
  }
  v217 = *(_DWORD *)(v216 + (v215 << 11) + 1152);
  if (v211)
  {
LABEL_519:
    v218 = *(unsigned int *)(v480 + 88);
    if ((v218 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v217 & 0x10000000) != 0)
    v221 = 0x40000000;
  else
    v221 = 0x80000000;
  if ((v217 & 0x20000000) != 0)
    v217 = v221;
  else
    v217 &= 0xCFFFFFFF;
  v218 = *(unsigned int *)(v480 + 88);
  if ((v218 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v222 = *(_QWORD *)(v487 + 2328);
  v223 = (*(_QWORD *)(v487 + 2336) - v222) >> 11;
  if (v223 > v218)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v209 = *v477;
  v218 = *(unsigned int *)(v480 + 88);
  if ((v218 & 0x80000000) != 0)
  {
LABEL_590:
    v224 = v172;
    v225 = *(_DWORD *)(v487 + 1464);
    if (*v209)
      goto LABEL_559;
    goto LABEL_553;
  }
  v222 = *(_QWORD *)(v487 + 2328);
  v223 = (*(_QWORD *)(v487 + 2336) - v222) >> 11;
LABEL_549:
  if (v223 <= v218)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v222 = *(_QWORD *)(v487 + 2328);
    v209 = *v477;
  }
  v224 = v172;
  v225 = *(_DWORD *)(v222 + (v218 << 11) + 1184);
  if (!*v209)
  {
LABEL_553:
    if ((v225 & 0x10000000) != 0)
      v226 = 0x40000000;
    else
      v226 = 0x80000000;
    if ((v225 & 0x20000000) != 0)
      v225 = v226;
    else
      v225 &= 0xCFFFFFFF;
  }
LABEL_559:
  v547 = v532;
  v548 = v533;
  v549 = v534;
  v546 = (float32x4_t)v531;
  v545 = v530;
  if ((v189 & 0x40000000) != 0)
  {
    v227 = (v224 & 0x40000000) == 0;
    v522 = v532;
    v523 = v533;
    v524 = v534;
    v521 = v531;
    v520 = v530;
    *(_QWORD *)&v575 = 0x161616160D0D0D0DLL;
    v515 = xmmword_224686340;
    v516 = (__int128)xmmword_224686350;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 7, 4, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A700000167), xmmword_224686350);
    if (v227)
    {
      v517 = v532;
      v518 = v533;
      v519 = v534;
      v516 = v531;
      v515 = v530;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686360;
      v576 = (__int128)xmmword_224686370;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 7, 4, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A700000167), xmmword_224686370);
      if (((v473 | v200) & 1) == 0)
      {
        v577 = v532;
        v578 = v533;
        v579 = v534;
        v575 = v530;
        v576 = v531;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686380;
        v571 = (__int128)xmmword_224686390;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 7, 4, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A700000167), xmmword_224686390);
        v228 = (v485 & 1) == 0 && ((v460 | v199) & 1) == 0;
        if ((v446 & 1) == 0 && v228)
        {
          v572 = v532;
          v573 = v533;
          v574 = v534;
          v571 = v531;
          v570 = v530;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246863A0;
          v566 = (__int128)xmmword_2246863B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 7, 4, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12700000167), xmmword_2246863B0);
        }
      }
      v229 = (v451 & 1) == 0 && ((v460 | v199) & 1) == 0;
      if (v229 && (v201 & 1) == 0)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        v566 = (__int128)v546;
        v565 = v545;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246863C0;
        v561 = (__int128)xmmword_2246863D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 4, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12700000167), xmmword_2246863D0);
      }
    }
    if (!(v214 & 0x40000000 | v200 & 1))
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      *(_QWORD *)&v550 = 0x16160D0D16160D0DLL;
      v561 = (__int128)v546;
      v560 = v545;
      v555 = xmmword_2246863E0;
      v556 = (__int128)xmmword_2246863F0;
      *(_QWORD *)&v525 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 7, 4, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v525, COERCE_DOUBLE(0x1A700000167), xmmword_2246863F0);
      v230 = (v210 & 0x40000000) == 0 && (v217 & 0x40000000 | v199 & 1) == 0;
      if ((v485 & 1) == 0 && v230)
      {
        v557 = v547;
        v558 = v548;
        v559 = v549;
        *(_QWORD *)&v525 = 0x161616160D0D0D0DLL;
        v556 = (__int128)v546;
        v555 = v545;
        v550 = xmmword_224686400;
        v551 = (__int128)xmmword_224686410;
        *(_QWORD *)&v581[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 7, 4, 5, (uint64_t)&v525, (uint64_t)&v550, (uint64_t)v581, COERCE_DOUBLE(0x12700000167), xmmword_224686410);
      }
    }
    v231 = (v201 & 1) == 0 && (v217 & 0x40000000 | v199 & 1) == 0;
    if (v231 && (v225 & 0x40000000) == 0)
    {
      v552 = v547;
      v553 = v548;
      v554 = v549;
      *(_QWORD *)&v581[0] = 0x16160D0D16160D0DLL;
      v551 = (__int128)v546;
      v550 = v545;
      v525 = xmmword_224686420;
      v526 = (__int128)xmmword_224686430;
      v582[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 7, 4, 5, (uint64_t)v581, (uint64_t)&v525, (uint64_t)v582, COERCE_DOUBLE(0x12700000167), xmmword_224686430);
    }
  }
  v232 = a1[2];
  v486 = v437[1];
  v489 = *v437;
  v493 = a3[3];
  v494 = a3[4];
  v491 = a3[1];
  v492 = a3[2];
  v490 = *a3;
  v442 = *(_OWORD *)a1;
  v478 = (_BYTE **)v437[2];
  v481 = *a1;
  v233 = *((_DWORD *)v232 + 288);
  v234 = ***a1;
  if (***a1)
  {
    v235 = *((_DWORD *)v232 + 352);
    v236 = *((_DWORD *)v232 + 296);
    v237 = *((_DWORD *)v232 + 304);
    v474 = *((_DWORD *)v232 + 360);
    if ((v474 & 0x40000000) == 0)
    {
LABEL_589:
      v238 = v236;
      v239 = v235;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      v243 = 0;
      v244 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v233 & 0x20000000) != 0)
      v233 *= 4;
    v245 = *((_DWORD *)v232 + 352);
    if ((v245 & 0x20000000) != 0)
      v235 = 4 * v245;
    else
      v235 = *((_DWORD *)v232 + 352);
    v246 = *((_DWORD *)v232 + 296);
    if ((v246 & 0x20000000) != 0)
      v236 = 4 * v246;
    else
      v236 = *((_DWORD *)v232 + 296);
    v247 = *((_DWORD *)v232 + 360);
    if ((v247 & 0x20000000) != 0)
      v248 = 4 * v247;
    else
      v248 = *((_DWORD *)v232 + 360);
    v249 = *((_DWORD *)v232 + 304);
    if ((v249 & 0x10000000) != 0)
      v250 = 0x40000000;
    else
      v250 = 0x80000000;
    if ((v249 & 0x20000000) != 0)
      v237 = v250;
    else
      v237 = v249 & 0xCFFFFFFF;
    v474 = v248;
    if ((v248 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v251 = *(unsigned int *)(v486 + 16);
  if ((v251 & 0x80000000) != 0)
  {
    v253 = *(_DWORD *)(v489 + 1460);
    v254 = **v478;
    if (**v478)
      goto LABEL_615;
  }
  else
  {
    v252 = *(_QWORD *)(v489 + 2328);
    if (v251 >= (*(_QWORD *)(v489 + 2336) - v252) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v252 = *(_QWORD *)(v489 + 2328);
    }
    v253 = *(_DWORD *)(v252 + (v251 << 11) + 1180);
    v254 = **v478;
    if (**v478)
    {
LABEL_615:
      v255 = *(unsigned int *)(v486 + 16);
      if ((v255 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v257 = *(_DWORD *)(v489 + 1716);
      if (v254)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v253 & 0x10000000) != 0)
    v427 = 0x40000000;
  else
    v427 = 0x80000000;
  if ((v253 & 0x20000000) != 0)
    v253 = v427;
  else
    v253 &= 0xCFFFFFFF;
  v255 = *(unsigned int *)(v486 + 16);
  if ((v255 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v256 = *(_QWORD *)(v489 + 2328);
  if (v255 >= (*(_QWORD *)(v489 + 2336) - v256) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v256 = *(_QWORD *)(v489 + 2328);
    v254 = **v478;
  }
  v257 = *(_DWORD *)(v256 + (v255 << 11) + 1436);
  if (v254)
  {
LABEL_620:
    v258 = *(unsigned int *)(v486 + 16);
    if ((v258 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v260 = *(_DWORD *)(v489 + 1492);
    if (v254)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v257 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v257 & 0x20000000) != 0)
    v257 = v428;
  else
    v257 &= 0xCFFFFFFF;
  v258 = *(unsigned int *)(v486 + 16);
  if ((v258 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v259 = *(_QWORD *)(v489 + 2328);
  if (v258 >= (*(_QWORD *)(v489 + 2336) - v259) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v259 = *(_QWORD *)(v489 + 2328);
    v254 = **v478;
  }
  v260 = *(_DWORD *)(v259 + (v258 << 11) + 1212);
  if (v254)
  {
LABEL_625:
    v261 = *(unsigned int *)(v486 + 16);
    if ((v261 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v263 = *(_DWORD *)(v489 + 1748);
    if (v254)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v260 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v260 & 0x20000000) != 0)
    v260 = v429;
  else
    v260 &= 0xCFFFFFFF;
  v261 = *(unsigned int *)(v486 + 16);
  if ((v261 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v262 = *(_QWORD *)(v489 + 2328);
  if (v261 >= (*(_QWORD *)(v489 + 2336) - v262) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v262 = *(_QWORD *)(v489 + 2328);
    v254 = **v478;
  }
  v263 = *(_DWORD *)(v262 + (v261 << 11) + 1468);
  if (v254)
  {
LABEL_630:
    v264 = *(unsigned int *)(v486 + 16);
    if ((v264 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v263 & 0x10000000) != 0)
    v430 = 0x40000000;
  else
    v430 = 0x80000000;
  if ((v263 & 0x20000000) != 0)
    v263 = v430;
  else
    v263 &= 0xCFFFFFFF;
  v264 = *(unsigned int *)(v486 + 16);
  if ((v264 & 0x80000000) == 0)
  {
LABEL_631:
    v265 = *(_QWORD *)(v489 + 2328);
    if (v264 >= (*(_QWORD *)(v489 + 2336) - v265) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v265 = *(_QWORD *)(v489 + 2328);
      v254 = **v478;
    }
    v238 = v236;
    v239 = v235;
    v266 = v265 + (v264 << 11);
    v244 = (v253 >> 30) & 1;
    v243 = (v257 >> 30) & 1;
    v242 = (v260 >> 30) & 1;
    v267 = *(_DWORD *)(v266 + 1244);
    v241 = (v263 >> 30) & 1;
    if (v254)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v238 = v236;
  v239 = v235;
  v244 = (v253 >> 30) & 1;
  v243 = (v257 >> 30) & 1;
  v242 = (v260 >> 30) & 1;
  v267 = *(_DWORD *)(v489 + 1524);
  v241 = (v263 >> 30) & 1;
  if (!v254)
  {
LABEL_635:
    if ((v267 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v267 & 0x20000000) != 0)
      v267 = v268;
    else
      v267 &= 0xCFFFFFFF;
  }
LABEL_641:
  v240 = (v267 >> 30) & 1;
  v234 = **v481;
LABEL_642:
  v452 = v233 >> 30;
  v527 = v492;
  v528 = v493;
  v529 = v494;
  v526 = v491;
  v525 = v490;
  v269 = *((_DWORD *)v232 + 289);
  if (v234)
  {
    v270 = *((_DWORD *)v232 + 353);
    v271 = *((_DWORD *)v232 + 297);
    v469 = *((_DWORD *)v232 + 361);
    v272 = *((_DWORD *)v232 + 305);
  }
  else
  {
    if ((v269 & 0x10000000) != 0)
      v273 = 0x40000000;
    else
      v273 = 0x80000000;
    if ((v269 & 0x20000000) != 0)
      v269 = v273;
    else
      v269 &= 0xCFFFFFFF;
    v274 = *((_DWORD *)v232 + 353);
    if ((v274 & 0x10000000) != 0)
      v275 = 0x40000000;
    else
      v275 = 0x80000000;
    if ((v274 & 0x20000000) != 0)
      v270 = v275;
    else
      v270 = v274 & 0xCFFFFFFF;
    v276 = *((_DWORD *)v232 + 297);
    if ((v276 & 0x10000000) != 0)
      v277 = 0x40000000;
    else
      v277 = 0x80000000;
    if ((v276 & 0x20000000) != 0)
      v271 = v277;
    else
      v271 = v276 & 0xCFFFFFFF;
    v278 = *((_DWORD *)v232 + 361);
    if ((v278 & 0x10000000) != 0)
      v279 = 0x40000000;
    else
      v279 = 0x80000000;
    if ((v278 & 0x20000000) != 0)
      v280 = v279;
    else
      v280 = v278 & 0xCFFFFFFF;
    v469 = v280;
    v281 = *((_DWORD *)v232 + 305);
    if ((v281 & 0x10000000) != 0)
      v272 = 0x40000000;
    else
      v272 = 0x80000000;
    if ((v281 & 0x20000000) == 0)
      v272 = v281 & 0xCFFFFFFF;
  }
  v282 = v238 >> 30;
  v283 = v239 >> 30;
  v284 = v237 >> 30;
  v438 = v269 >> 30;
  v461 = v271 >> 30;
  v465 = v270 >> 30;
  v285 = v272 >> 30;
  if ((v474 & 0x40000000) != 0)
  {
    v522 = v492;
    v523 = v493;
    v524 = v494;
    v521 = v491;
    v520 = v490;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686440;
    v516 = (__int128)xmmword_224686450;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 0, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A800000168), xmmword_224686450);
    if (!v241)
    {
      v517 = v492;
      v518 = v493;
      v519 = v494;
      v516 = v491;
      v515 = v490;
      *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
      v575 = xmmword_224686460;
      v576 = (__int128)xmmword_224686470;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 0, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A800000168), xmmword_224686470);
      v286 = (v242 | v282 & 1) == 0;
      if (!(v243 | v283 & 1))
      {
        v577 = v492;
        v578 = v493;
        v579 = v494;
        v575 = v490;
        v576 = v491;
        *(_QWORD *)&v565 = 0x40404040D0D0D0DLL;
        v570 = xmmword_224686480;
        v571 = (__int128)xmmword_224686490;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 0, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A800000168), xmmword_224686490);
        v287 = (v452 & 1) == 0 && v286;
        if (!v244 && v287)
        {
          v572 = v492;
          v573 = v493;
          v574 = v494;
          v571 = v491;
          v570 = v490;
          *(_QWORD *)&v560 = 0x4040D0D04040D0DLL;
          v565 = xmmword_2246864A0;
          v566 = (__int128)xmmword_2246864B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 0, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12800000168), xmmword_2246864B0);
        }
      }
      if (v240)
        v288 = 0;
      else
        v288 = v286;
      if (v288 && (v284 & 1) == 0)
      {
        v567 = v492;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v555 = 0x40404040D0D0D0DLL;
        v566 = v491;
        v565 = v490;
        v560 = xmmword_2246864C0;
        v561 = (__int128)xmmword_2246864D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12800000168), xmmword_2246864D0);
      }
    }
    if (((v283 | v465) & 1) == 0)
    {
      v562 = v492;
      v563 = v493;
      v564 = v494;
      v561 = v491;
      v560 = v490;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246864E0;
      v556 = (__int128)xmmword_2246864F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 0, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A800000168), xmmword_2246864F0);
      v289 = (v438 & 1) == 0 && ((v282 | v461) & 1) == 0;
      if ((v452 & 1) == 0 && v289)
      {
        v557 = v492;
        v558 = v493;
        v559 = v494;
        v556 = v491;
        v555 = v490;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686500;
        v551 = (__int128)xmmword_224686510;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 0, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12800000168), xmmword_224686510);
      }
    }
    v290 = (v284 & 1) == 0 && ((v282 | v461) & 1) == 0;
    if (v290 && (v285 & 1) == 0)
    {
      v552 = v492;
      v553 = v493;
      v554 = v494;
      v551 = v491;
      v550 = v490;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686520;
      v546 = xmmword_224686530;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 0, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12800000168), xmmword_224686530);
    }
  }
  v502 = v527;
  v503 = v528;
  v504 = v529;
  v500 = v525;
  v501 = v526;
  v291 = *((_DWORD *)v232 + 290);
  if (**v481)
  {
    v292 = *((_DWORD *)v232 + 354);
    v293 = *((_DWORD *)v232 + 298);
    v294 = *((_DWORD *)v232 + 362);
    v295 = *((_DWORD *)v232 + 306);
  }
  else
  {
    if ((v291 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v291 & 0x20000000) != 0)
      v291 = v296;
    else
      v291 &= 0xCFFFFFFF;
    v297 = *((_DWORD *)v232 + 354);
    if ((v297 & 0x10000000) != 0)
      v298 = 0x40000000;
    else
      v298 = 0x80000000;
    if ((v297 & 0x20000000) != 0)
      v292 = v298;
    else
      v292 = v297 & 0xCFFFFFFF;
    v299 = *((_DWORD *)v232 + 298);
    if ((v299 & 0x10000000) != 0)
      v300 = 0x40000000;
    else
      v300 = 0x80000000;
    if ((v299 & 0x20000000) != 0)
      v293 = v300;
    else
      v293 = v299 & 0xCFFFFFFF;
    v301 = *((_DWORD *)v232 + 362);
    if ((v301 & 0x10000000) != 0)
      v302 = 0x40000000;
    else
      v302 = 0x80000000;
    if ((v301 & 0x20000000) != 0)
      v294 = v302;
    else
      v294 = v301 & 0xCFFFFFFF;
    v303 = *((_DWORD *)v232 + 306);
    if ((v303 & 0x10000000) != 0)
      v295 = 0x40000000;
    else
      v295 = 0x80000000;
    if ((v303 & 0x20000000) == 0)
      v295 = v303 & 0xCFFFFFFF;
  }
  v304 = v293 >> 30;
  v436 = v291 >> 30;
  v457 = v292 >> 30;
  v447 = v295 >> 30;
  v512 = v527;
  v513 = v528;
  v514 = v529;
  v510 = v525;
  v511 = v526;
  if ((v469 & 0x40000000) != 0)
  {
    v522 = v527;
    v523 = v528;
    v524 = v529;
    v521 = v526;
    v520 = v525;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686540;
    v516 = (__int128)xmmword_224686550;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 1, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1A900000169), xmmword_224686550);
    if ((v474 & 0x40000000) == 0)
    {
      v517 = v527;
      v518 = v528;
      v519 = v529;
      v516 = v526;
      v515 = v525;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686560;
      v576 = (__int128)xmmword_224686570;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 1, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1A900000169), xmmword_224686570);
      if (((v283 | v465) & 1) == 0)
      {
        v577 = v527;
        v578 = v528;
        v579 = v529;
        v575 = v525;
        v576 = v526;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686580;
        v571 = (__int128)xmmword_224686590;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 1, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1A900000169), xmmword_224686590);
        v305 = (v438 & 1) == 0 && ((v282 | v461) & 1) == 0;
        if ((v452 & 1) == 0 && v305)
        {
          v572 = v527;
          v573 = v528;
          v574 = v529;
          v571 = v526;
          v570 = v525;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246865A0;
          v566 = (__int128)xmmword_2246865B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 1, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12900000169), xmmword_2246865B0);
        }
      }
      v306 = (v284 & 1) == 0 && ((v282 | v461) & 1) == 0;
      if (v306 && (v285 & 1) == 0)
      {
        v567 = v512;
        v568 = v513;
        v569 = v514;
        v566 = v511;
        v565 = v510;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246865C0;
        v561 = (__int128)xmmword_2246865D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12900000169), xmmword_2246865D0);
      }
    }
    if (((v465 | v457) & 1) == 0)
    {
      v562 = v512;
      v563 = v513;
      v564 = v514;
      v561 = v511;
      v560 = v510;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246865E0;
      v556 = (__int128)xmmword_2246865F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 1, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1A900000169), xmmword_2246865F0);
      v307 = (v436 & 1) == 0 && ((v461 | v304) & 1) == 0;
      if ((v438 & 1) == 0 && v307)
      {
        v557 = v512;
        v558 = v513;
        v559 = v514;
        v556 = v511;
        v555 = v510;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686600;
        v551 = (__int128)xmmword_224686610;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 1, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12900000169), xmmword_224686610);
      }
    }
    v308 = (v285 & 1) == 0 && ((v461 | v304) & 1) == 0;
    if (v308 && (v447 & 1) == 0)
    {
      v552 = v512;
      v553 = v513;
      v554 = v514;
      v551 = v511;
      v550 = v510;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686620;
      v546 = xmmword_224686630;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 1, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12900000169), xmmword_224686630);
    }
  }
  v309 = *((_DWORD *)v232 + 291);
  if (**v481)
  {
    v310 = *((_DWORD *)v232 + 355);
    v311 = *((_DWORD *)v232 + 299);
    v312 = *((_DWORD *)v232 + 363);
    v313 = *((_DWORD *)v232 + 307);
  }
  else
  {
    if ((v309 & 0x10000000) != 0)
      v314 = 0x40000000;
    else
      v314 = 0x80000000;
    if ((v309 & 0x20000000) != 0)
      v309 = v314;
    else
      v309 &= 0xCFFFFFFF;
    v315 = *((_DWORD *)v232 + 355);
    if ((v315 & 0x10000000) != 0)
      v316 = 0x40000000;
    else
      v316 = 0x80000000;
    if ((v315 & 0x20000000) != 0)
      v310 = v316;
    else
      v310 = v315 & 0xCFFFFFFF;
    v317 = *((_DWORD *)v232 + 299);
    if ((v317 & 0x10000000) != 0)
      v318 = 0x40000000;
    else
      v318 = 0x80000000;
    if ((v317 & 0x20000000) != 0)
      v311 = v318;
    else
      v311 = v317 & 0xCFFFFFFF;
    v319 = *((_DWORD *)v232 + 363);
    if ((v319 & 0x10000000) != 0)
      v320 = 0x40000000;
    else
      v320 = 0x80000000;
    if ((v319 & 0x20000000) != 0)
      v312 = v320;
    else
      v312 = v319 & 0xCFFFFFFF;
    v321 = *((_DWORD *)v232 + 307);
    if ((v321 & 0x10000000) != 0)
      v313 = 0x40000000;
    else
      v313 = 0x80000000;
    if ((v321 & 0x20000000) == 0)
      v313 = v321 & 0xCFFFFFFF;
  }
  v453 = v311 >> 30;
  v433 = v309 >> 30;
  v475 = v310 >> 30;
  v444 = v313 >> 30;
  if ((v294 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686640;
    v516 = (__int128)xmmword_224686650;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 2, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AA0000016ALL), xmmword_224686650);
    if ((v469 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686660;
      v576 = (__int128)xmmword_224686670;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 2, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AA0000016ALL), xmmword_224686670);
      if (((v465 | v457) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686680;
        v571 = (__int128)xmmword_224686690;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 2, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AA0000016ALL), xmmword_224686690);
        v322 = (v436 & 1) == 0 && ((v461 | v304) & 1) == 0;
        if ((v438 & 1) == 0 && v322)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246866A0;
          v566 = (__int128)xmmword_2246866B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 2, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12A0000016ALL), xmmword_2246866B0);
        }
      }
      v323 = (v285 & 1) == 0 && ((v461 | v304) & 1) == 0;
      if (v323 && (v447 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246866C0;
        v561 = (__int128)xmmword_2246866D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12A0000016ALL), xmmword_2246866D0);
      }
    }
    if (((v457 | v475) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246866E0;
      v556 = (__int128)xmmword_2246866F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 2, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1AA0000016ALL), xmmword_2246866F0);
      v324 = (v433 & 1) == 0 && ((v304 | v453) & 1) == 0;
      if ((v436 & 1) == 0 && v324)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686700;
        v551 = (__int128)xmmword_224686710;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 2, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12A0000016ALL), xmmword_224686710);
      }
    }
    v325 = (v447 & 1) == 0 && ((v304 | v453) & 1) == 0;
    if (v325 && (v444 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686720;
      v546 = xmmword_224686730;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 2, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12A0000016ALL), xmmword_224686730);
    }
  }
  v326 = *((_DWORD *)v232 + 292);
  if (**v481)
  {
    v327 = *((_DWORD *)v232 + 356);
    v328 = *((_DWORD *)v232 + 300);
    v329 = *((_DWORD *)v232 + 364);
    v330 = *((_DWORD *)v232 + 308);
  }
  else
  {
    if ((v326 & 0x10000000) != 0)
      v331 = 0x40000000;
    else
      v331 = 0x80000000;
    if ((v326 & 0x20000000) != 0)
      v326 = v331;
    else
      v326 &= 0xCFFFFFFF;
    v332 = *((_DWORD *)v232 + 356);
    if ((v332 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v332 & 0x20000000) != 0)
      v327 = v333;
    else
      v327 = v332 & 0xCFFFFFFF;
    v334 = *((_DWORD *)v232 + 300);
    if ((v334 & 0x10000000) != 0)
      v335 = 0x40000000;
    else
      v335 = 0x80000000;
    if ((v334 & 0x20000000) != 0)
      v328 = v335;
    else
      v328 = v334 & 0xCFFFFFFF;
    v336 = *((_DWORD *)v232 + 364);
    if ((v336 & 0x10000000) != 0)
      v337 = 0x40000000;
    else
      v337 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v329 = v337;
    else
      v329 = v336 & 0xCFFFFFFF;
    v338 = *((_DWORD *)v232 + 308);
    if ((v338 & 0x10000000) != 0)
      v330 = 0x40000000;
    else
      v330 = 0x80000000;
    if ((v338 & 0x20000000) == 0)
      v330 = v338 & 0xCFFFFFFF;
  }
  v339 = v328 >> 30;
  v439 = v326 >> 30;
  v340 = v327 >> 30;
  v341 = v330 >> 30;
  if ((v312 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686740;
    v516 = (__int128)xmmword_224686750;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 3, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AB0000016BLL), xmmword_224686750);
    if ((v294 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686760;
      v576 = (__int128)xmmword_224686770;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 3, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AB0000016BLL), xmmword_224686770);
      if (((v457 | v475) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686780;
        v571 = (__int128)xmmword_224686790;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 3, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AB0000016BLL), xmmword_224686790);
        v342 = (v433 & 1) == 0 && ((v304 | v453) & 1) == 0;
        if ((v436 & 1) == 0 && v342)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246867A0;
          v566 = (__int128)xmmword_2246867B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 3, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12B0000016BLL), xmmword_2246867B0);
        }
      }
      v343 = (v447 & 1) == 0 && ((v304 | v453) & 1) == 0;
      if (v343 && (v444 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246867C0;
        v561 = (__int128)xmmword_2246867D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12B0000016BLL), xmmword_2246867D0);
      }
    }
    if (((v475 | v340) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246867E0;
      v556 = (__int128)xmmword_2246867F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 3, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1AB0000016BLL), xmmword_2246867F0);
      v344 = (v439 & 1) == 0 && ((v453 | v339) & 1) == 0;
      if ((v433 & 1) == 0 && v344)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686800;
        v551 = (__int128)xmmword_224686810;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 3, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12B0000016BLL), xmmword_224686810);
      }
    }
    v345 = (v444 & 1) == 0 && ((v453 | v339) & 1) == 0;
    if (v345 && (v341 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686820;
      v546 = xmmword_224686830;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 3, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12B0000016BLL), xmmword_224686830);
    }
  }
  v346 = *((_DWORD *)v232 + 293);
  if (**v481)
  {
    v347 = *((_DWORD *)v232 + 357);
    v348 = *((_DWORD *)v232 + 301);
    v349 = *((_DWORD *)v232 + 365);
    v350 = *((_DWORD *)v232 + 309);
  }
  else
  {
    if ((v346 & 0x10000000) != 0)
      v351 = 0x40000000;
    else
      v351 = 0x80000000;
    if ((v346 & 0x20000000) != 0)
      v346 = v351;
    else
      v346 &= 0xCFFFFFFF;
    v352 = *((_DWORD *)v232 + 357);
    if ((v352 & 0x10000000) != 0)
      v353 = 0x40000000;
    else
      v353 = 0x80000000;
    if ((v352 & 0x20000000) != 0)
      v347 = v353;
    else
      v347 = v352 & 0xCFFFFFFF;
    v354 = *((_DWORD *)v232 + 301);
    if ((v354 & 0x10000000) != 0)
      v355 = 0x40000000;
    else
      v355 = 0x80000000;
    if ((v354 & 0x20000000) != 0)
      v348 = v355;
    else
      v348 = v354 & 0xCFFFFFFF;
    v356 = *((_DWORD *)v232 + 365);
    if ((v356 & 0x10000000) != 0)
      v357 = 0x40000000;
    else
      v357 = 0x80000000;
    if ((v356 & 0x20000000) != 0)
      v349 = v357;
    else
      v349 = v356 & 0xCFFFFFFF;
    v358 = *((_DWORD *)v232 + 309);
    if ((v358 & 0x10000000) != 0)
      v350 = 0x40000000;
    else
      v350 = 0x80000000;
    if ((v358 & 0x20000000) == 0)
      v350 = v358 & 0xCFFFFFFF;
  }
  v359 = v348 >> 30;
  v458 = v346 >> 30;
  v360 = v347 >> 30;
  v466 = v350 >> 30;
  if ((v329 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686840;
    v516 = (__int128)xmmword_224686850;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 4, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AC0000016CLL), xmmword_224686850);
    if ((v312 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686860;
      v576 = (__int128)xmmword_224686870;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 4, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AC0000016CLL), xmmword_224686870);
      if (((v475 | v340) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686880;
        v571 = (__int128)xmmword_224686890;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 4, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AC0000016CLL), xmmword_224686890);
        v361 = (v439 & 1) == 0 && ((v453 | v339) & 1) == 0;
        if ((v433 & 1) == 0 && v361)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246868A0;
          v566 = (__int128)xmmword_2246868B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 4, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12C0000016CLL), xmmword_2246868B0);
        }
      }
      v362 = (v444 & 1) == 0 && ((v453 | v339) & 1) == 0;
      if (v362 && (v341 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246868C0;
        v561 = (__int128)xmmword_2246868D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12C0000016CLL), xmmword_2246868D0);
      }
    }
    if (((v340 | v360) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246868E0;
      v556 = (__int128)xmmword_2246868F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 4, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1AC0000016CLL), xmmword_2246868F0);
      v363 = (v458 & 1) == 0 && ((v339 | v359) & 1) == 0;
      if ((v439 & 1) == 0 && v363)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686900;
        v551 = (__int128)xmmword_224686910;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 4, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12C0000016CLL), xmmword_224686910);
      }
    }
    v364 = (v341 & 1) == 0 && ((v339 | v359) & 1) == 0;
    if (v364 && (v466 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686920;
      v546 = xmmword_224686930;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 4, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x12C0000016CLL), xmmword_224686930);
    }
  }
  v365 = *((_DWORD *)v232 + 294);
  if (**v481)
  {
    v366 = *((_DWORD *)v232 + 358);
    v367 = *((_DWORD *)v232 + 302);
    v368 = *((_DWORD *)v232 + 366);
    v369 = *((_DWORD *)v232 + 310);
  }
  else
  {
    if ((v365 & 0x10000000) != 0)
      v370 = 0x40000000;
    else
      v370 = 0x80000000;
    if ((v365 & 0x20000000) != 0)
      v365 = v370;
    else
      v365 &= 0xCFFFFFFF;
    v371 = *((_DWORD *)v232 + 358);
    if ((v371 & 0x10000000) != 0)
      v372 = 0x40000000;
    else
      v372 = 0x80000000;
    if ((v371 & 0x20000000) != 0)
      v366 = v372;
    else
      v366 = v371 & 0xCFFFFFFF;
    v373 = *((_DWORD *)v232 + 302);
    if ((v373 & 0x10000000) != 0)
      v374 = 0x40000000;
    else
      v374 = 0x80000000;
    if ((v373 & 0x20000000) != 0)
      v367 = v374;
    else
      v367 = v373 & 0xCFFFFFFF;
    v375 = *((_DWORD *)v232 + 366);
    if ((v375 & 0x10000000) != 0)
      v376 = 0x40000000;
    else
      v376 = 0x80000000;
    if ((v375 & 0x20000000) != 0)
      v368 = v376;
    else
      v368 = v375 & 0xCFFFFFFF;
    v377 = *((_DWORD *)v232 + 310);
    if ((v377 & 0x10000000) != 0)
      v369 = 0x40000000;
    else
      v369 = 0x80000000;
    if ((v377 & 0x20000000) == 0)
      v369 = v377 & 0xCFFFFFFF;
  }
  v454 = v365 >> 30;
  v470 = v367 >> 30;
  v476 = v366 >> 30;
  v462 = v369 >> 30;
  v537 = v502;
  v538 = v503;
  v539 = v504;
  v536 = v501;
  v535 = v500;
  if ((v349 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686940;
    v516 = (__int128)xmmword_224686950;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 5, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AD0000016DLL), xmmword_224686950);
    if ((v329 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686960;
      v576 = (__int128)xmmword_224686970;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 5, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AD0000016DLL), xmmword_224686970);
      if (((v340 | v360) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686980;
        v571 = (__int128)xmmword_224686990;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 5, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AD0000016DLL), xmmword_224686990);
        v378 = (v458 & 1) == 0 && ((v339 | v359) & 1) == 0;
        if ((v439 & 1) == 0 && v378)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246869A0;
          v566 = (__int128)xmmword_2246869B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 5, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12D0000016DLL), xmmword_2246869B0);
        }
      }
      v379 = (v341 & 1) == 0 && ((v339 | v359) & 1) == 0;
      if (v379 && (v466 & 1) == 0)
      {
        v567 = v537;
        v568 = v538;
        v569 = v539;
        v566 = v536;
        v565 = v535;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246869C0;
        v561 = (__int128)xmmword_2246869D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12D0000016DLL), xmmword_2246869D0);
      }
    }
    if (((v360 | v476) & 1) == 0)
    {
      v562 = v537;
      v563 = v538;
      v564 = v539;
      v561 = v536;
      v560 = v535;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246869E0;
      v556 = (__int128)xmmword_2246869F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 5, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1AD0000016DLL), xmmword_2246869F0);
      v380 = (v454 & 1) == 0 && ((v359 | v470) & 1) == 0;
      if ((v458 & 1) == 0 && v380)
      {
        v557 = v537;
        v558 = v538;
        v559 = v539;
        v556 = v536;
        v555 = v535;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686A00;
        v551 = (__int128)xmmword_224686A10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 5, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x12D0000016DLL), xmmword_224686A10);
      }
    }
    v381 = (v466 & 1) == 0 && ((v359 | v470) & 1) == 0;
    if (v381 && (v462 & 1) == 0)
    {
      v552 = v537;
      v553 = v538;
      v554 = v539;
      v551 = v536;
      v550 = v535;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686A20;
      v546 = xmmword_224686A30;
      *(_QWORD *)&v530 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 5, 5, 5, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v530, COERCE_DOUBLE(0x12D0000016DLL), xmmword_224686A30);
    }
  }
  v532 = v502;
  v533 = v503;
  v534 = v504;
  v531 = v501;
  v530 = v500;
  v382 = *((_DWORD *)v232 + 295);
  if (**v481)
  {
    v383 = *((_DWORD *)v232 + 359);
    v384 = *((_DWORD *)v232 + 303);
    v385 = *((_DWORD *)v232 + 367);
    v386 = *((_DWORD *)v232 + 311);
  }
  else
  {
    if ((v382 & 0x10000000) != 0)
      v387 = 0x40000000;
    else
      v387 = 0x80000000;
    if ((v382 & 0x20000000) != 0)
      v382 = v387;
    else
      v382 &= 0xCFFFFFFF;
    v388 = *((_DWORD *)v232 + 359);
    if ((v388 & 0x10000000) != 0)
      v389 = 0x40000000;
    else
      v389 = 0x80000000;
    if ((v388 & 0x20000000) != 0)
      v383 = v389;
    else
      v383 = v388 & 0xCFFFFFFF;
    v390 = *((_DWORD *)v232 + 303);
    if ((v390 & 0x10000000) != 0)
      v391 = 0x40000000;
    else
      v391 = 0x80000000;
    if ((v390 & 0x20000000) != 0)
      v384 = v391;
    else
      v384 = v390 & 0xCFFFFFFF;
    v392 = *((_DWORD *)v232 + 367);
    if ((v392 & 0x10000000) != 0)
      v393 = 0x40000000;
    else
      v393 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v385 = v393;
    else
      v385 = v392 & 0xCFFFFFFF;
    v394 = *((_DWORD *)v232 + 311);
    if ((v394 & 0x10000000) != 0)
      v386 = 0x40000000;
    else
      v386 = 0x80000000;
    if ((v394 & 0x20000000) == 0)
      v386 = v394 & 0xCFFFFFFF;
  }
  v395 = v384 >> 30;
  v448 = v382 >> 30;
  v396 = v383 >> 30;
  v482 = v386 >> 30;
  v542 = v502;
  v543 = v503;
  v544 = v504;
  v541 = v501;
  v540 = v500;
  if ((v368 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224686A40;
    v516 = (__int128)xmmword_224686A50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 6, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AE0000016ELL), xmmword_224686A50);
    if ((v349 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686A60;
      v576 = (__int128)xmmword_224686A70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 6, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AE0000016ELL), xmmword_224686A70);
      if (((v360 | v476) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686A80;
        v571 = (__int128)xmmword_224686A90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 6, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AE0000016ELL), xmmword_224686A90);
        v397 = (v454 & 1) == 0 && ((v359 | v470) & 1) == 0;
        if ((v458 & 1) == 0 && v397)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224686AA0;
          v566 = (__int128)xmmword_224686AB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 6, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12E0000016ELL), xmmword_224686AB0);
        }
      }
      v398 = (v466 & 1) == 0 && ((v359 | v470) & 1) == 0;
      if (v398 && (v462 & 1) == 0)
      {
        v567 = v542;
        v568 = v543;
        v569 = v544;
        v566 = v541;
        v565 = v540;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224686AC0;
        v561 = (__int128)xmmword_224686AD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12E0000016ELL), xmmword_224686AD0);
      }
    }
    if (((v476 | v396) & 1) == 0)
    {
      v562 = v542;
      v563 = v543;
      v564 = v544;
      v561 = v541;
      v560 = v540;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224686AE0;
      v556 = (__int128)xmmword_224686AF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 6, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1AE0000016ELL), xmmword_224686AF0);
      v399 = (v448 & 1) == 0 && ((v470 | v395) & 1) == 0;
      if ((v454 & 1) == 0 && v399)
      {
        v557 = v542;
        v558 = v543;
        v559 = v544;
        v556 = v541;
        v555 = v540;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224686B00;
        v551 = (__int128)xmmword_224686B10;
        *(_QWORD *)&v581[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 6, 5, 5, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)v581, COERCE_DOUBLE(0x12E0000016ELL), xmmword_224686B10);
      }
    }
    v400 = (v462 & 1) == 0 && ((v470 | v395) & 1) == 0;
    if (v400 && (v482 & 1) == 0)
    {
      v552 = v542;
      v553 = v543;
      v554 = v544;
      v551 = v541;
      v550 = v540;
      *(_QWORD *)&v581[0] = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224686B20;
      v546 = xmmword_224686B30;
      v582[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 6, 5, 5, (uint64_t)v581, (uint64_t)&v545, (uint64_t)v582, COERCE_DOUBLE(0x12E0000016ELL), xmmword_224686B30);
    }
  }
  v401 = *(unsigned int *)(v486 + 88);
  if ((v401 & 0x80000000) != 0)
  {
    v404 = *v478;
    v405 = *(_DWORD *)(v489 + 1432);
    v406 = **v478;
    if (**v478)
      goto LABEL_1060;
  }
  else
  {
    v402 = *(_QWORD *)(v489 + 2328);
    if (v401 >= (*(_QWORD *)(v489 + 2336) - v402) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v402 = *(_QWORD *)(v489 + 2328);
    }
    v403 = v402 + (v401 << 11);
    v404 = *v478;
    v405 = *(_DWORD *)(v403 + 1152);
    v406 = **v478;
    if (**v478)
    {
LABEL_1060:
      v407 = *(unsigned int *)(v486 + 88);
      if ((v407 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v409 = *(_DWORD *)(v489 + 1688);
      if (v406)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v405 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v405 & 0x20000000) != 0)
    v405 = v414;
  else
    v405 &= 0xCFFFFFFF;
  v407 = *(unsigned int *)(v486 + 88);
  if ((v407 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v408 = *(_QWORD *)(v489 + 2328);
  if (v407 >= (*(_QWORD *)(v489 + 2336) - v408) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v408 = *(_QWORD *)(v489 + 2328);
    v404 = *v478;
    v406 = **v478;
  }
  v409 = *(_DWORD *)(v408 + (v407 << 11) + 1408);
  if (v406)
  {
LABEL_1065:
    v410 = *(unsigned int *)(v486 + 88);
    if ((v410 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v412 = *(_DWORD *)(v489 + 1464);
    if (v406)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v409 & 0x10000000) != 0)
    v415 = 0x40000000;
  else
    v415 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v409 = v415;
  else
    v409 &= 0xCFFFFFFF;
  v410 = *(unsigned int *)(v486 + 88);
  if ((v410 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v411 = *(_QWORD *)(v489 + 2328);
  if (v410 >= (*(_QWORD *)(v489 + 2336) - v411) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v411 = *(_QWORD *)(v489 + 2328);
    v404 = *v478;
    v406 = **v478;
  }
  v412 = *(_DWORD *)(v411 + (v410 << 11) + 1184);
  if (v406)
  {
LABEL_1070:
    v413 = *(unsigned int *)(v486 + 88);
    if ((v413 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v412 & 0x10000000) != 0)
    v416 = 0x40000000;
  else
    v416 = 0x80000000;
  if ((v412 & 0x20000000) != 0)
    v412 = v416;
  else
    v412 &= 0xCFFFFFFF;
  v413 = *(unsigned int *)(v486 + 88);
  if ((v413 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v417 = *(_QWORD *)(v489 + 2328);
  v418 = (*(_QWORD *)(v489 + 2336) - v417) >> 11;
  if (v418 > v413)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v404 = *v478;
  v413 = *(unsigned int *)(v486 + 88);
  if ((v413 & 0x80000000) != 0)
  {
LABEL_1139:
    v419 = *(_DWORD *)(v489 + 1496);
    if (*v404)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v417 = *(_QWORD *)(v489 + 2328);
  v418 = (*(_QWORD *)(v489 + 2336) - v417) >> 11;
LABEL_1100:
  if (v418 <= v413)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v417 = *(_QWORD *)(v489 + 2328);
    v404 = *v478;
  }
  v419 = *(_DWORD *)(v417 + (v413 << 11) + 1216);
  if (!*v404)
  {
LABEL_1104:
    if ((v419 & 0x10000000) != 0)
      v420 = 0x40000000;
    else
      v420 = 0x80000000;
    if ((v419 & 0x20000000) != 0)
      v419 = v420;
    else
      v419 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v547 = v532;
  v548 = v533;
  v549 = v534;
  v546 = (float32x4_t)v531;
  v545 = v530;
  if ((v385 & 0x40000000) != 0)
  {
    v522 = v532;
    v523 = v533;
    v524 = v534;
    v521 = v531;
    v520 = v530;
    *(_QWORD *)&v575 = 0x161616160D0D0D0DLL;
    v515 = xmmword_224686B40;
    v516 = (__int128)xmmword_224686B50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 7, 5, 5, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1AF0000016FLL), xmmword_224686B50);
    if ((v368 & 0x40000000) == 0)
    {
      v517 = v532;
      v518 = v533;
      v519 = v534;
      v516 = v531;
      v515 = v530;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224686B60;
      v576 = (__int128)xmmword_224686B70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 7, 5, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1AF0000016FLL), xmmword_224686B70);
      if (((v476 | v396) & 1) == 0)
      {
        v577 = v532;
        v578 = v533;
        v579 = v534;
        v575 = v530;
        v576 = v531;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686B80;
        v571 = (__int128)xmmword_224686B90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 7, 5, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1AF0000016FLL), xmmword_224686B90);
        v421 = (v448 & 1) == 0 && ((v470 | v395) & 1) == 0;
        if ((v454 & 1) == 0 && v421)
        {
          v572 = v532;
          v573 = v533;
          v574 = v534;
          v571 = v531;
          v570 = v530;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224686BA0;
          v566 = (__int128)xmmword_224686BB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 7, 5, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x12F0000016FLL), xmmword_224686BB0);
        }
      }
      v422 = (v462 & 1) == 0 && ((v470 | v395) & 1) == 0;
      if (v422 && (v482 & 1) == 0)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v566 = (__int128)v546;
        v565 = v545;
        v560 = xmmword_224686BC0;
        v561 = (__int128)xmmword_224686BD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 5, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x12F0000016FLL), xmmword_224686BD0);
      }
    }
    v423 = (v412 & 0x40000000 | v395 & 1) == 0;
    if (!(v409 & 0x40000000 | v396 & 1))
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      *(_QWORD *)&v550 = 0x16160D0D16160D0DLL;
      v561 = (__int128)v546;
      v560 = v545;
      v555 = xmmword_224686BE0;
      v556 = (__int128)xmmword_224686BF0;
      *(_QWORD *)&v581[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 7, 5, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)v581, COERCE_DOUBLE(0x1AF0000016FLL), xmmword_224686BF0);
      v424 = (v405 & 0x40000000) == 0 && v423;
      if ((v448 & 1) == 0 && v424)
      {
        v557 = v547;
        v558 = v548;
        v559 = v549;
        *(_QWORD *)&v581[0] = 0x161616160D0D0D0DLL;
        v556 = (__int128)v546;
        v555 = v545;
        v550 = xmmword_224686C00;
        v551 = (__int128)xmmword_224686C10;
        v582[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 7, 5, 5, (uint64_t)v581, (uint64_t)&v550, (uint64_t)v582, COERCE_DOUBLE(0x12F0000016FLL), xmmword_224686C10);
      }
    }
    v425 = (v482 & 1) == 0 && v423;
    if (v425 && (v419 & 0x40000000) == 0)
    {
      v552 = v547;
      v553 = v548;
      v554 = v549;
      v582[0] = 0x16160D0D16160D0DLL;
      v551 = (__int128)v546;
      v550 = v545;
      v581[0] = xmmword_224686C20;
      v581[1] = xmmword_224686C30;
      v580 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 7, 5, 5, (uint64_t)v582, (uint64_t)v581, (uint64_t)&v580, COERCE_DOUBLE(0x12F0000016FLL), xmmword_224686C30);
    }
  }
  v515 = v442;
  *(_QWORD *)&v516 = v232;
  *(_QWORD *)&v575 = v489;
  *((_QWORD *)&v575 + 1) = v486;
  *(_QWORD *)&v576 = v478;
  v524 = v494;
  v523 = v493;
  v522 = v492;
  v520 = v490;
  v521 = v491;
  return sub_223E268C8((unsigned __int8 ***)&v515, &v575, &v520);
}

unint64_t sub_223E268C8(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  unsigned __int8 **v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  _BYTE **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  _BYTE **v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  __int128 v78;
  __int128 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  _BOOL4 v82;
  _BOOL4 v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  _BOOL4 v102;
  _BOOL4 v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  _BOOL4 v134;
  _BOOL4 v135;
  _BOOL4 v136;
  _BOOL4 v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL4 v153;
  _BOOL4 v154;
  _BOOL4 v155;
  _BOOL4 v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  _BOOL4 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  _BOOL4 v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  _BOOL4 v190;
  _BOOL4 v191;
  _BOOL4 v192;
  _BOOL4 v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  uint64_t v201;
  unsigned int v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  unsigned int v212;
  unsigned int v213;
  _BOOL4 v214;
  _BOOL4 v215;
  _BOOL4 v216;
  _BOOL4 v217;
  unsigned __int8 **v218;
  uint64_t v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  _BOOL4 v268;
  _BOOL4 v269;
  _BOOL4 v270;
  _BOOL4 v271;
  _BOOL4 v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  _BOOL4 v282;
  _BOOL4 v283;
  _BOOL4 v284;
  _BOOL4 v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  _BOOL4 v295;
  _BOOL4 v296;
  _BOOL4 v297;
  _BOOL4 v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unint64_t v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  _BOOL4 v308;
  _BOOL4 v309;
  _BOOL4 v310;
  _BOOL4 v311;
  _BOOL4 v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unint64_t v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  _BOOL4 v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unint64_t v329;
  uint64_t v330;
  unsigned int v331;
  unsigned int v332;
  _BOOL4 v333;
  _BOOL4 v334;
  _BOOL4 v335;
  _BOOL4 v336;
  _BOOL4 v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  _BOOL4 v349;
  _BOOL4 v350;
  _BOOL4 v351;
  _BOOL4 v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _BYTE *v356;
  unsigned int v357;
  int v358;
  unint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unint64_t v362;
  uint64_t v363;
  unsigned int v364;
  unint64_t v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  int v407;
  unsigned int v408;
  int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unint64_t v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  _BOOL4 v428;
  _BOOL4 v429;
  _BOOL4 v430;
  _BOOL4 v431;
  _BOOL4 v432;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  __int128 v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned __int8 **v483;
  unsigned int v484;
  unsigned int v485;
  _QWORD *v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  uint64_t v491;
  _BYTE **v492;
  unsigned int v493;
  _BYTE **v494;
  unsigned int v495;
  unsigned int v496;
  unsigned __int8 **v497;
  uint64_t v498;
  unsigned int *v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  float32x4_t v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  uint64_t v590;
  _OWORD v591[2];
  _QWORD v592[3];

  v592[1] = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v494 = *a1;
  v5 = *((_DWORD *)v4 + 296);
  v6 = ***a1;
  v486 = a2;
  if (***a1)
  {
    v7 = *((_DWORD *)v4 + 360);
    v8 = *((_DWORD *)v4 + 304);
    v9 = *((_DWORD *)v4 + 368);
    v10 = *((_DWORD *)v4 + 312);
    v498 = *a2;
    v477 = v9;
    if ((v9 & 0x40000000) == 0)
    {
LABEL_3:
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v5 & 0x20000000) != 0)
      v5 *= 4;
    v16 = *((_DWORD *)v4 + 360);
    if ((v16 & 0x20000000) != 0)
      v7 = 4 * v16;
    else
      v7 = *((_DWORD *)v4 + 360);
    v17 = *((_DWORD *)v4 + 304);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v4 + 304);
    v18 = *((_DWORD *)v4 + 368);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v4 + 368);
    v19 = *((_DWORD *)v4 + 312);
    if ((v19 & 0x10000000) != 0)
      v20 = 0x40000000;
    else
      v20 = 0x80000000;
    if ((v19 & 0x20000000) != 0)
      v10 = v20;
    else
      v10 = v19 & 0xCFFFFFFF;
    v498 = *a2;
    v477 = v9;
    if ((v9 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v490 = v8;
  v21 = (_BYTE **)a2[2];
  v22 = *(unsigned int *)(a2[1] + 16);
  v495 = v7;
  if ((v22 & 0x80000000) != 0)
  {
    v24 = v498 + 280;
  }
  else
  {
    v23 = *(_QWORD *)(v498 + 2328);
    if (v22 >= (*(_QWORD *)(v498 + 2336) - v23) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v23 = *(_QWORD *)(v498 + 2328);
      v9 = v477;
      v7 = v495;
    }
    v24 = v23 + (v22 << 11);
  }
  v25 = *(_DWORD *)(v24 + 1212);
  v26 = v25 & 0xCFFFFFFF;
  if ((v25 & 0x10000000) != 0)
    v27 = 0x40000000;
  else
    v27 = 0x80000000;
  if ((v25 & 0x20000000) != 0)
    v26 = v27;
  if (**v21)
    v28 = v25;
  else
    v28 = v26;
  v29 = *v486;
  v30 = (_BYTE **)v486[2];
  v31 = *(unsigned int *)(v486[1] + 16);
  if ((v31 & 0x80000000) != 0)
  {
    v33 = v29 + 280;
  }
  else
  {
    v32 = *(_QWORD *)(v29 + 2328);
    if (v31 >= (*(_QWORD *)(v29 + 2336) - v32) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v32 = *(_QWORD *)(v29 + 2328);
      v9 = v477;
      v7 = v495;
    }
    v33 = v32 + (v31 << 11);
  }
  v34 = *(_DWORD *)(v33 + 1468);
  v35 = v34 & 0xCFFFFFFF;
  if ((v34 & 0x10000000) != 0)
    v36 = 0x40000000;
  else
    v36 = 0x80000000;
  if ((v34 & 0x20000000) != 0)
    v35 = v36;
  if (**v30)
    v37 = v34;
  else
    v37 = v35;
  v38 = *v486;
  v39 = (_BYTE **)v486[2];
  v40 = *(unsigned int *)(v486[1] + 16);
  if ((v40 & 0x80000000) != 0)
  {
    v42 = v38 + 280;
  }
  else
  {
    v41 = *(_QWORD *)(v38 + 2328);
    if (v40 >= (*(_QWORD *)(v38 + 2336) - v41) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v41 = *(_QWORD *)(v38 + 2328);
      v9 = v477;
      v7 = v495;
    }
    v42 = v41 + (v40 << 11);
  }
  v43 = *(_DWORD *)(v42 + 1244);
  v44 = v43 & 0xCFFFFFFF;
  if ((v43 & 0x10000000) != 0)
    v45 = 0x40000000;
  else
    v45 = 0x80000000;
  if ((v43 & 0x20000000) != 0)
    v44 = v45;
  if (**v39)
    v46 = v43;
  else
    v46 = v44;
  v47 = *v486;
  v48 = (_BYTE **)v486[2];
  v49 = *(unsigned int *)(v486[1] + 16);
  if ((v49 & 0x80000000) != 0)
  {
    v51 = v10;
    v52 = v28;
    v53 = *(_DWORD *)(v47 + 1780);
    if (**v48)
      goto LABEL_69;
  }
  else
  {
    v50 = *(_QWORD *)(v47 + 2328);
    if (v49 >= (*(_QWORD *)(v47 + 2336) - v50) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v50 = *(_QWORD *)(v47 + 2328);
      v9 = v477;
      v7 = v495;
    }
    v51 = v10;
    v52 = v28;
    v53 = *(_DWORD *)(v50 + (v49 << 11) + 1500);
    if (**v48)
    {
LABEL_69:
      v54 = *v486;
      v55 = (_BYTE **)v486[2];
      v56 = *(unsigned int *)(v486[1] + 16);
      if ((v56 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v58 = v54 + 280;
      goto LABEL_83;
    }
  }
  if ((v53 & 0x10000000) != 0)
    v59 = 0x40000000;
  else
    v59 = 0x80000000;
  if ((v53 & 0x20000000) != 0)
    v53 = v59;
  else
    v53 &= 0xCFFFFFFF;
  v54 = *v486;
  v55 = (_BYTE **)v486[2];
  v56 = *(unsigned int *)(v486[1] + 16);
  if ((v56 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v57 = *(_QWORD *)(v54 + 2328);
  if (v56 >= (*(_QWORD *)(v54 + 2336) - v57) >> 11)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v57 = *(_QWORD *)(v54 + 2328);
      v9 = v477;
      v7 = v495;
      goto LABEL_73;
    }
LABEL_1240:
    abort();
  }
LABEL_73:
  v58 = v57 + (v56 << 11);
LABEL_83:
  v15 = (v52 >> 30) & 1;
  v14 = (v37 >> 30) & 1;
  v13 = (v46 >> 30) & 1;
  v12 = (v53 >> 30) & 1;
  v60 = *(_DWORD *)(v58 + 1276);
  v8 = v490;
  if (!**v55)
  {
    if ((v60 & 0x10000000) != 0)
      v61 = 0x40000000;
    else
      v61 = 0x80000000;
    if ((v60 & 0x20000000) != 0)
      v60 = v61;
    else
      v60 &= 0xCFFFFFFF;
  }
  v11 = (v60 >> 30) & 1;
  v4 = a1[2];
  a2 = v486;
  v494 = *a1;
  v498 = *v486;
  v6 = ***a1;
  v10 = v51;
LABEL_91:
  v452 = v5 >> 30;
  v491 = a2[1];
  v483 = (unsigned __int8 **)a2[2];
  v507 = a3[2];
  v508 = a3[3];
  v509 = a3[4];
  v505 = *a3;
  v506 = a3[1];
  v62 = *((_DWORD *)v4 + 297);
  if (v6)
  {
    v63 = *((_DWORD *)v4 + 361);
    v64 = *((_DWORD *)v4 + 305);
    v472 = *((_DWORD *)v4 + 369);
    v65 = *((_DWORD *)v4 + 313);
  }
  else
  {
    if ((v62 & 0x10000000) != 0)
      v66 = 0x40000000;
    else
      v66 = 0x80000000;
    if ((v62 & 0x20000000) != 0)
      v62 = v66;
    else
      v62 &= 0xCFFFFFFF;
    v67 = *((_DWORD *)v4 + 361);
    if ((v67 & 0x10000000) != 0)
      v68 = 0x40000000;
    else
      v68 = 0x80000000;
    if ((v67 & 0x20000000) != 0)
      v63 = v68;
    else
      v63 = v67 & 0xCFFFFFFF;
    v69 = *((_DWORD *)v4 + 305);
    if ((v69 & 0x10000000) != 0)
      v70 = 0x40000000;
    else
      v70 = 0x80000000;
    if ((v69 & 0x20000000) != 0)
      v64 = v70;
    else
      v64 = v69 & 0xCFFFFFFF;
    v71 = *((_DWORD *)v4 + 369);
    if ((v71 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v71 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v71 & 0xCFFFFFFF;
    v472 = v73;
    v74 = *((_DWORD *)v4 + 313);
    if ((v74 & 0x10000000) != 0)
      v65 = 0x40000000;
    else
      v65 = 0x80000000;
    if ((v74 & 0x20000000) == 0)
      v65 = v74 & 0xCFFFFFFF;
  }
  v75 = v8 >> 30;
  v76 = v7 >> 30;
  v77 = v10 >> 30;
  v437 = v62 >> 30;
  v462 = v64 >> 30;
  v467 = v63 >> 30;
  v441 = v65 >> 30;
  v517 = a3[2];
  v518 = a3[3];
  v519 = a3[4];
  v515 = *a3;
  v516 = a3[1];
  if ((v9 & 0x40000000) != 0)
  {
    v78 = a3[3];
    v532 = a3[2];
    v533 = v78;
    v534 = a3[4];
    v79 = *a3;
    v531 = a3[1];
    v530 = v79;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224686C40;
    v526 = (__int128)xmmword_224686C50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 0, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B000000170), xmmword_224686C50);
    if (!v12)
    {
      v527 = v517;
      v528 = v518;
      v529 = v519;
      v526 = v516;
      v525 = v515;
      *(_QWORD *)&v580 = 0x4040D0D04040D0DLL;
      v585 = xmmword_224686C60;
      v586 = (__int128)xmmword_224686C70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 0, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B000000170), xmmword_224686C70);
      if (!(v14 | v76 & 1))
      {
        v587 = v517;
        v588 = v518;
        v589 = v519;
        *(_QWORD *)&v575 = 0x40404040D0D0D0DLL;
        v585 = v515;
        v586 = v516;
        v580 = xmmword_224686C80;
        v581 = (__int128)xmmword_224686C90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 0, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B000000170), xmmword_224686C90);
        v80 = (v452 & 1) == 0 && (v13 | v75 & 1) == 0;
        if (!v15 && v80)
        {
          v582 = v517;
          v583 = v518;
          v584 = v519;
          v581 = v516;
          v580 = v515;
          *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
          v575 = xmmword_224686CA0;
          v576 = (__int128)xmmword_224686CB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 0, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13000000170), xmmword_224686CB0);
        }
      }
      if (v11)
        v81 = 0;
      else
        v81 = (v13 | v75 & 1) == 0;
      if (v81 && (v77 & 1) == 0)
      {
        v577 = v517;
        v578 = v518;
        v579 = v519;
        *(_QWORD *)&v565 = 0x40404040D0D0D0DLL;
        v576 = v516;
        v575 = v515;
        v570 = xmmword_224686CC0;
        v571 = (__int128)xmmword_224686CD0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 0, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13000000170), xmmword_224686CD0);
      }
    }
    if (((v76 | v467) & 1) == 0)
    {
      v572 = v517;
      v573 = v518;
      v574 = v519;
      v571 = v516;
      v570 = v515;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_224686CE0;
      v566 = (__int128)xmmword_224686CF0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 0, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B000000170), xmmword_224686CF0);
      v82 = (v437 & 1) == 0 && ((v75 | v462) & 1) == 0;
      if ((v452 & 1) == 0 && v82)
      {
        v567 = v517;
        v568 = v518;
        v569 = v519;
        v566 = v516;
        v565 = v515;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224686D00;
        v561 = (__int128)xmmword_224686D10;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13000000170), xmmword_224686D10);
      }
    }
    v83 = (v77 & 1) == 0 && ((v75 | v462) & 1) == 0;
    v9 = v477;
    if (v83 && (v441 & 1) == 0)
    {
      v562 = v517;
      v563 = v518;
      v564 = v519;
      v561 = v516;
      v560 = v515;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224686D20;
      v556 = xmmword_224686D30;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 0, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13000000170), xmmword_224686D30);
      v9 = v477;
    }
  }
  v84 = *((_DWORD *)v4 + 298);
  if (**v494)
  {
    v85 = *((_DWORD *)v4 + 362);
    v86 = *((_DWORD *)v4 + 306);
    v87 = *((_DWORD *)v4 + 370);
    v88 = *((_DWORD *)v4 + 314);
  }
  else
  {
    if ((v84 & 0x10000000) != 0)
      v89 = 0x40000000;
    else
      v89 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v84 = v89;
    else
      v84 &= 0xCFFFFFFF;
    v90 = *((_DWORD *)v4 + 362);
    if ((v90 & 0x10000000) != 0)
      v91 = 0x40000000;
    else
      v91 = 0x80000000;
    if ((v90 & 0x20000000) != 0)
      v85 = v91;
    else
      v85 = v90 & 0xCFFFFFFF;
    v92 = *((_DWORD *)v4 + 306);
    if ((v92 & 0x10000000) != 0)
      v93 = 0x40000000;
    else
      v93 = 0x80000000;
    if ((v92 & 0x20000000) != 0)
      v86 = v93;
    else
      v86 = v92 & 0xCFFFFFFF;
    v94 = *((_DWORD *)v4 + 370);
    if ((v94 & 0x10000000) != 0)
      v95 = 0x40000000;
    else
      v95 = 0x80000000;
    if ((v94 & 0x20000000) != 0)
      v87 = v95;
    else
      v87 = v94 & 0xCFFFFFFF;
    v96 = *((_DWORD *)v4 + 314);
    if ((v96 & 0x10000000) != 0)
      v88 = 0x40000000;
    else
      v88 = 0x80000000;
    if ((v96 & 0x20000000) == 0)
      v88 = v96 & 0xCFFFFFFF;
  }
  v457 = v86 >> 30;
  v97 = v84 >> 30;
  v478 = v85 >> 30;
  v98 = v88 >> 30;
  if ((v472 & 0x40000000) != 0)
  {
    v99 = (v9 & 0x40000000) == 0;
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224686D40;
    v526 = (__int128)xmmword_224686D50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 1, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B100000171), xmmword_224686D50);
    if (v99)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224686D60;
      v586 = (__int128)xmmword_224686D70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 1, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B100000171), xmmword_224686D70);
      if (((v76 | v467) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224686D80;
        v581 = (__int128)xmmword_224686D90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 1, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B100000171), xmmword_224686D90);
        v100 = (v437 & 1) == 0 && ((v75 | v462) & 1) == 0;
        if ((v452 & 1) == 0 && v100)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_224686DA0;
          v576 = (__int128)xmmword_224686DB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 1, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13100000171), xmmword_224686DB0);
        }
      }
      v101 = (v77 & 1) == 0 && ((v75 | v462) & 1) == 0;
      if (v101 && (v441 & 1) == 0)
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v576 = v506;
        v575 = v505;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686DC0;
        v571 = (__int128)xmmword_224686DD0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 1, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13100000171), xmmword_224686DD0);
      }
    }
    if (((v467 | v478) & 1) == 0)
    {
      v572 = v507;
      v573 = v508;
      v574 = v509;
      v571 = v506;
      v570 = v505;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_224686DE0;
      v566 = (__int128)xmmword_224686DF0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 1, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B100000171), xmmword_224686DF0);
      v102 = (v97 & 1) == 0 && ((v462 | v457) & 1) == 0;
      if ((v437 & 1) == 0 && v102)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        v566 = v506;
        v565 = v505;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224686E00;
        v561 = (__int128)xmmword_224686E10;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13100000171), xmmword_224686E10);
      }
    }
    v103 = (v441 & 1) == 0 && ((v462 | v457) & 1) == 0;
    if (v103 && (v98 & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224686E20;
      v556 = xmmword_224686E30;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 1, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13100000171), xmmword_224686E30);
    }
  }
  v104 = *((_DWORD *)v4 + 299);
  if (**v494)
  {
    v105 = *((_DWORD *)v4 + 363);
    v106 = *((_DWORD *)v4 + 307);
    v107 = *((_DWORD *)v4 + 371);
    v108 = *((_DWORD *)v4 + 315);
  }
  else
  {
    if ((v104 & 0x10000000) != 0)
      v109 = 0x40000000;
    else
      v109 = 0x80000000;
    if ((v104 & 0x20000000) != 0)
      v104 = v109;
    else
      v104 &= 0xCFFFFFFF;
    v110 = *((_DWORD *)v4 + 363);
    if ((v110 & 0x10000000) != 0)
      v111 = 0x40000000;
    else
      v111 = 0x80000000;
    if ((v110 & 0x20000000) != 0)
      v105 = v111;
    else
      v105 = v110 & 0xCFFFFFFF;
    v112 = *((_DWORD *)v4 + 307);
    if ((v112 & 0x10000000) != 0)
      v113 = 0x40000000;
    else
      v113 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v106 = v113;
    else
      v106 = v112 & 0xCFFFFFFF;
    v114 = *((_DWORD *)v4 + 371);
    if ((v114 & 0x10000000) != 0)
      v115 = 0x40000000;
    else
      v115 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v107 = v115;
    else
      v107 = v114 & 0xCFFFFFFF;
    v116 = *((_DWORD *)v4 + 315);
    if ((v116 & 0x10000000) != 0)
      v108 = 0x40000000;
    else
      v108 = 0x80000000;
    if ((v116 & 0x20000000) == 0)
      v108 = v116 & 0xCFFFFFFF;
  }
  v449 = v106 >> 30;
  v436 = v104 >> 30;
  v453 = v105 >> 30;
  v439 = v108 >> 30;
  if ((v87 & 0x40000000) != 0)
  {
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224686E40;
    v526 = (__int128)xmmword_224686E50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 2, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B200000172), xmmword_224686E50);
    if ((v472 & 0x40000000) == 0)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224686E60;
      v586 = (__int128)xmmword_224686E70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 2, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B200000172), xmmword_224686E70);
      if (((v467 | v478) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224686E80;
        v581 = (__int128)xmmword_224686E90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 2, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B200000172), xmmword_224686E90);
        v117 = (v97 & 1) == 0 && ((v462 | v457) & 1) == 0;
        if ((v437 & 1) == 0 && v117)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_224686EA0;
          v576 = (__int128)xmmword_224686EB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 2, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13200000172), xmmword_224686EB0);
        }
      }
      v118 = (v441 & 1) == 0 && ((v462 | v457) & 1) == 0;
      if (v118 && (v98 & 1) == 0)
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v576 = v506;
        v575 = v505;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686EC0;
        v571 = (__int128)xmmword_224686ED0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 2, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13200000172), xmmword_224686ED0);
      }
    }
    if (((v478 | v453) & 1) == 0)
    {
      v572 = v507;
      v573 = v508;
      v574 = v509;
      v571 = v506;
      v570 = v505;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_224686EE0;
      v566 = (__int128)xmmword_224686EF0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 2, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B200000172), xmmword_224686EF0);
      v119 = (v436 & 1) == 0 && ((v457 | v449) & 1) == 0;
      if ((v97 & 1) == 0 && v119)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        v566 = v506;
        v565 = v505;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224686F00;
        v561 = (__int128)xmmword_224686F10;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13200000172), xmmword_224686F10);
      }
    }
    v120 = (v98 & 1) == 0 && ((v457 | v449) & 1) == 0;
    if (v120 && (v439 & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224686F20;
      v556 = xmmword_224686F30;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 2, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13200000172), xmmword_224686F30);
    }
  }
  v121 = *((_DWORD *)v4 + 300);
  if (**v494)
  {
    v122 = *((_DWORD *)v4 + 364);
    v123 = *((_DWORD *)v4 + 308);
    v124 = *((_DWORD *)v4 + 372);
    v125 = *((_DWORD *)v4 + 316);
  }
  else
  {
    if ((v121 & 0x10000000) != 0)
      v126 = 0x40000000;
    else
      v126 = 0x80000000;
    if ((v121 & 0x20000000) != 0)
      v121 = v126;
    else
      v121 &= 0xCFFFFFFF;
    v127 = *((_DWORD *)v4 + 364);
    if ((v127 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v127 & 0x20000000) != 0)
      v122 = v128;
    else
      v122 = v127 & 0xCFFFFFFF;
    v129 = *((_DWORD *)v4 + 308);
    if ((v129 & 0x10000000) != 0)
      v130 = 0x40000000;
    else
      v130 = 0x80000000;
    if ((v129 & 0x20000000) != 0)
      v123 = v130;
    else
      v123 = v129 & 0xCFFFFFFF;
    v131 = *((_DWORD *)v4 + 372);
    if ((v131 & 0x10000000) != 0)
      v132 = 0x40000000;
    else
      v132 = 0x80000000;
    if ((v131 & 0x20000000) != 0)
      v124 = v132;
    else
      v124 = v131 & 0xCFFFFFFF;
    v133 = *((_DWORD *)v4 + 316);
    if ((v133 & 0x10000000) != 0)
      v125 = 0x40000000;
    else
      v125 = 0x80000000;
    if ((v133 & 0x20000000) == 0)
      v125 = v133 & 0xCFFFFFFF;
  }
  v435 = v121 >> 30;
  v468 = v123 >> 30;
  v473 = v122 >> 30;
  v442 = v125 >> 30;
  if ((v107 & 0x40000000) != 0)
  {
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224686F40;
    v526 = (__int128)xmmword_224686F50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 3, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B300000173), xmmword_224686F50);
    if ((v87 & 0x40000000) == 0)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224686F60;
      v586 = (__int128)xmmword_224686F70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 3, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B300000173), xmmword_224686F70);
      if (((v478 | v453) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224686F80;
        v581 = (__int128)xmmword_224686F90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 3, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B300000173), xmmword_224686F90);
        v134 = (v436 & 1) == 0 && ((v457 | v449) & 1) == 0;
        if ((v97 & 1) == 0 && v134)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_224686FA0;
          v576 = (__int128)xmmword_224686FB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 3, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13300000173), xmmword_224686FB0);
        }
      }
      v135 = (v98 & 1) == 0 && ((v457 | v449) & 1) == 0;
      if (v135 && (v439 & 1) == 0)
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v576 = v506;
        v575 = v505;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224686FC0;
        v571 = (__int128)xmmword_224686FD0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 3, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13300000173), xmmword_224686FD0);
      }
    }
    if (((v453 | v473) & 1) == 0)
    {
      v572 = v507;
      v573 = v508;
      v574 = v509;
      v571 = v506;
      v570 = v505;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_224686FE0;
      v566 = (__int128)xmmword_224686FF0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 3, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B300000173), xmmword_224686FF0);
      v136 = (v435 & 1) == 0 && ((v449 | v468) & 1) == 0;
      if ((v436 & 1) == 0 && v136)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        v566 = v506;
        v565 = v505;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687000;
        v561 = (__int128)xmmword_224687010;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13300000173), xmmword_224687010);
      }
    }
    v137 = (v439 & 1) == 0 && ((v449 | v468) & 1) == 0;
    if (v137 && (v442 & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224687020;
      v556 = xmmword_224687030;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 3, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13300000173), xmmword_224687030);
    }
  }
  v138 = *((_DWORD *)v4 + 301);
  if (**v494)
  {
    v139 = *((_DWORD *)v4 + 365);
    v140 = *((_DWORD *)v4 + 309);
    v141 = *((_DWORD *)v4 + 373);
    v142 = *((_DWORD *)v4 + 317);
  }
  else
  {
    if ((v138 & 0x10000000) != 0)
      v143 = 0x40000000;
    else
      v143 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v138 = v143;
    else
      v138 &= 0xCFFFFFFF;
    v144 = *((_DWORD *)v4 + 365);
    if ((v144 & 0x10000000) != 0)
      v145 = 0x40000000;
    else
      v145 = 0x80000000;
    if ((v144 & 0x20000000) != 0)
      v139 = v145;
    else
      v139 = v144 & 0xCFFFFFFF;
    v146 = *((_DWORD *)v4 + 309);
    if ((v146 & 0x10000000) != 0)
      v147 = 0x40000000;
    else
      v147 = 0x80000000;
    if ((v146 & 0x20000000) != 0)
      v140 = v147;
    else
      v140 = v146 & 0xCFFFFFFF;
    v148 = *((_DWORD *)v4 + 373);
    if ((v148 & 0x10000000) != 0)
      v149 = 0x40000000;
    else
      v149 = 0x80000000;
    if ((v148 & 0x20000000) != 0)
      v141 = v149;
    else
      v141 = v148 & 0xCFFFFFFF;
    v150 = *((_DWORD *)v4 + 317);
    if ((v150 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v150 & 0x20000000) == 0)
      v142 = v150 & 0xCFFFFFFF;
  }
  v151 = v140 >> 30;
  v434 = v138 >> 30;
  v152 = v139 >> 30;
  v438 = v142 >> 30;
  if ((v124 & 0x40000000) != 0)
  {
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224687040;
    v526 = (__int128)xmmword_224687050;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 4, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B400000174), xmmword_224687050);
    if ((v107 & 0x40000000) == 0)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224687060;
      v586 = (__int128)xmmword_224687070;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 4, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B400000174), xmmword_224687070);
      if (((v453 | v473) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687080;
        v581 = (__int128)xmmword_224687090;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 4, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B400000174), xmmword_224687090);
        v153 = (v435 & 1) == 0 && ((v449 | v468) & 1) == 0;
        if ((v436 & 1) == 0 && v153)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246870A0;
          v576 = (__int128)xmmword_2246870B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 4, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13400000174), xmmword_2246870B0);
        }
      }
      v154 = (v439 & 1) == 0 && ((v449 | v468) & 1) == 0;
      if (v154 && (v442 & 1) == 0)
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v576 = v506;
        v575 = v505;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_2246870C0;
        v571 = (__int128)xmmword_2246870D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 4, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13400000174), xmmword_2246870D0);
      }
    }
    if (((v473 | v152) & 1) == 0)
    {
      v572 = v507;
      v573 = v508;
      v574 = v509;
      v571 = v506;
      v570 = v505;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246870E0;
      v566 = (__int128)xmmword_2246870F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 4, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B400000174), xmmword_2246870F0);
      v155 = (v434 & 1) == 0 && ((v468 | v151) & 1) == 0;
      if ((v435 & 1) == 0 && v155)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        v566 = v506;
        v565 = v505;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687100;
        v561 = (__int128)xmmword_224687110;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13400000174), xmmword_224687110);
      }
    }
    v156 = (v442 & 1) == 0 && ((v468 | v151) & 1) == 0;
    if (v156 && (v438 & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224687120;
      v556 = xmmword_224687130;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 4, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13400000174), xmmword_224687130);
    }
  }
  v157 = *((_DWORD *)v4 + 302);
  if (**v494)
  {
    v158 = *((_DWORD *)v4 + 366);
    v159 = *((_DWORD *)v4 + 310);
    v479 = *((_DWORD *)v4 + 374);
    v160 = *((_DWORD *)v4 + 318);
  }
  else
  {
    if ((v157 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v157 & 0x20000000) != 0)
      v157 = v161;
    else
      v157 &= 0xCFFFFFFF;
    v162 = *((_DWORD *)v4 + 366);
    if ((v162 & 0x10000000) != 0)
      v163 = 0x40000000;
    else
      v163 = 0x80000000;
    if ((v162 & 0x20000000) != 0)
      v158 = v163;
    else
      v158 = v162 & 0xCFFFFFFF;
    v164 = *((_DWORD *)v4 + 310);
    if ((v164 & 0x10000000) != 0)
      v165 = 0x40000000;
    else
      v165 = 0x80000000;
    if ((v164 & 0x20000000) != 0)
      v159 = v165;
    else
      v159 = v164 & 0xCFFFFFFF;
    v166 = *((_DWORD *)v4 + 374);
    if ((v166 & 0x10000000) != 0)
      v167 = 0x40000000;
    else
      v167 = 0x80000000;
    if ((v166 & 0x20000000) != 0)
      v168 = v167;
    else
      v168 = v166 & 0xCFFFFFFF;
    v479 = v168;
    v169 = *((_DWORD *)v4 + 318);
    if ((v169 & 0x10000000) != 0)
      v160 = 0x40000000;
    else
      v160 = 0x80000000;
    if ((v169 & 0x20000000) == 0)
      v160 = v169 & 0xCFFFFFFF;
  }
  v450 = v157 >> 30;
  v458 = v159 >> 30;
  v463 = v158 >> 30;
  v454 = v160 >> 30;
  v547 = v507;
  v548 = v508;
  v549 = v509;
  v546 = v506;
  v545 = v505;
  if ((v141 & 0x40000000) != 0)
  {
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224687140;
    v526 = (__int128)xmmword_224687150;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 5, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B500000175), xmmword_224687150);
    if ((v124 & 0x40000000) == 0)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224687160;
      v586 = (__int128)xmmword_224687170;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 5, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B500000175), xmmword_224687170);
      if (((v473 | v152) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687180;
        v581 = (__int128)xmmword_224687190;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 5, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B500000175), xmmword_224687190);
        v170 = (v434 & 1) == 0 && ((v468 | v151) & 1) == 0;
        if ((v435 & 1) == 0 && v170)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246871A0;
          v576 = (__int128)xmmword_2246871B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 5, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13500000175), xmmword_2246871B0);
        }
      }
      v171 = (v442 & 1) == 0 && ((v468 | v151) & 1) == 0;
      if (v171 && (v438 & 1) == 0)
      {
        v577 = v547;
        v578 = v548;
        v579 = v549;
        v576 = v546;
        v575 = v545;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_2246871C0;
        v571 = (__int128)xmmword_2246871D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 5, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13500000175), xmmword_2246871D0);
      }
    }
    if (((v152 | v463) & 1) == 0)
    {
      v572 = v547;
      v573 = v548;
      v574 = v549;
      v571 = v546;
      v570 = v545;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246871E0;
      v566 = (__int128)xmmword_2246871F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 5, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B500000175), xmmword_2246871F0);
      v172 = (v450 & 1) == 0 && ((v151 | v458) & 1) == 0;
      if ((v434 & 1) == 0 && v172)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        v566 = v546;
        v565 = v545;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687200;
        v561 = (__int128)xmmword_224687210;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13500000175), xmmword_224687210);
      }
    }
    v173 = (v438 & 1) == 0 && ((v151 | v458) & 1) == 0;
    if (v173 && (v454 & 1) == 0)
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      v561 = v546;
      v560 = v545;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224687220;
      v556 = xmmword_224687230;
      *(_QWORD *)&v540 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 5, 6, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v540, COERCE_DOUBLE(0x13500000175), xmmword_224687230);
    }
  }
  v542 = v507;
  v543 = v508;
  v544 = v509;
  v541 = v506;
  v540 = v505;
  v174 = *((_DWORD *)v4 + 303);
  if (**v494)
  {
    v175 = *((_DWORD *)v4 + 367);
    v176 = *((_DWORD *)v4 + 311);
    v177 = *((_DWORD *)v4 + 375);
    v178 = *((_DWORD *)v4 + 319);
  }
  else
  {
    if ((v174 & 0x10000000) != 0)
      v179 = 0x40000000;
    else
      v179 = 0x80000000;
    if ((v174 & 0x20000000) != 0)
      v174 = v179;
    else
      v174 &= 0xCFFFFFFF;
    v180 = *((_DWORD *)v4 + 367);
    if ((v180 & 0x10000000) != 0)
      v181 = 0x40000000;
    else
      v181 = 0x80000000;
    if ((v180 & 0x20000000) != 0)
      v175 = v181;
    else
      v175 = v180 & 0xCFFFFFFF;
    v182 = *((_DWORD *)v4 + 311);
    if ((v182 & 0x10000000) != 0)
      v183 = 0x40000000;
    else
      v183 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v176 = v183;
    else
      v176 = v182 & 0xCFFFFFFF;
    v184 = *((_DWORD *)v4 + 375);
    if ((v184 & 0x10000000) != 0)
      v185 = 0x40000000;
    else
      v185 = 0x80000000;
    if ((v184 & 0x20000000) != 0)
      v177 = v185;
    else
      v177 = v184 & 0xCFFFFFFF;
    v186 = *((_DWORD *)v4 + 319);
    if ((v186 & 0x10000000) != 0)
      v178 = 0x40000000;
    else
      v178 = 0x80000000;
    if ((v186 & 0x20000000) == 0)
      v178 = v186 & 0xCFFFFFFF;
  }
  v187 = v176 >> 30;
  v496 = v174 >> 30;
  v188 = v175 >> 30;
  v189 = v178 >> 30;
  v552 = v507;
  v553 = v508;
  v554 = v509;
  v551 = v506;
  v550 = v505;
  if ((v479 & 0x40000000) != 0)
  {
    v532 = v507;
    v533 = v508;
    v534 = v509;
    v531 = v506;
    v530 = v505;
    *(_QWORD *)&v585 = 0xD0D0D0D0D0D0D0DLL;
    v525 = xmmword_224687240;
    v526 = (__int128)xmmword_224687250;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 6, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B600000176), xmmword_224687250);
    if ((v141 & 0x40000000) == 0)
    {
      v527 = v507;
      v528 = v508;
      v529 = v509;
      v526 = v506;
      v525 = v505;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224687260;
      v586 = (__int128)xmmword_224687270;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 6, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B600000176), xmmword_224687270);
      if (((v152 | v463) & 1) == 0)
      {
        v587 = v507;
        v588 = v508;
        v589 = v509;
        v585 = v505;
        v586 = v506;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687280;
        v581 = (__int128)xmmword_224687290;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 6, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B600000176), xmmword_224687290);
        v190 = (v450 & 1) == 0 && ((v151 | v458) & 1) == 0;
        if ((v434 & 1) == 0 && v190)
        {
          v582 = v507;
          v583 = v508;
          v584 = v509;
          v581 = v506;
          v580 = v505;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246872A0;
          v576 = (__int128)xmmword_2246872B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 6, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13600000176), xmmword_2246872B0);
        }
      }
      v191 = (v438 & 1) == 0 && ((v151 | v458) & 1) == 0;
      if (v191 && (v454 & 1) == 0)
      {
        v577 = v552;
        v578 = v553;
        v579 = v554;
        v576 = v551;
        v575 = v550;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_2246872C0;
        v571 = (__int128)xmmword_2246872D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 6, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13600000176), xmmword_2246872D0);
      }
    }
    if (((v463 | v188) & 1) == 0)
    {
      v572 = v552;
      v573 = v553;
      v574 = v554;
      v571 = v551;
      v570 = v550;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246872E0;
      v566 = (__int128)xmmword_2246872F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 6, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B600000176), xmmword_2246872F0);
      v192 = (v496 & 1) == 0 && ((v458 | v187) & 1) == 0;
      if ((v450 & 1) == 0 && v192)
      {
        v567 = v552;
        v568 = v553;
        v569 = v554;
        v566 = v551;
        v565 = v550;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687300;
        v561 = (__int128)xmmword_224687310;
        *(_QWORD *)&v535 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 6, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v535, COERCE_DOUBLE(0x13600000176), xmmword_224687310);
      }
    }
    v193 = (v454 & 1) == 0 && ((v458 | v187) & 1) == 0;
    if (v193 && (v189 & 1) == 0)
    {
      v562 = v552;
      v563 = v553;
      v564 = v554;
      v561 = v551;
      v560 = v550;
      *(_QWORD *)&v535 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224687320;
      v556 = xmmword_224687330;
      *(_QWORD *)&v591[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 6, 6, 5, (uint64_t)&v535, (uint64_t)&v555, (uint64_t)v591, COERCE_DOUBLE(0x13600000176), xmmword_224687330);
    }
  }
  v194 = *(unsigned int *)(v491 + 88);
  if ((v194 & 0x80000000) != 0)
  {
    v197 = *v483;
    v198 = *(_DWORD *)(v498 + 1464);
    v199 = **v483;
    if (**v483)
      goto LABEL_509;
  }
  else
  {
    v195 = *(_QWORD *)(v498 + 2328);
    if (v194 >= (*(_QWORD *)(v498 + 2336) - v195) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v195 = *(_QWORD *)(v498 + 2328);
    }
    v196 = v195 + (v194 << 11);
    v197 = *v483;
    v198 = *(_DWORD *)(v196 + 1184);
    v199 = **v483;
    if (**v483)
    {
LABEL_509:
      v200 = *(unsigned int *)(v491 + 88);
      if ((v200 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v202 = *(_DWORD *)(v498 + 1720);
      if (v199)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v198 & 0x10000000) != 0)
    v207 = 0x40000000;
  else
    v207 = 0x80000000;
  if ((v198 & 0x20000000) != 0)
    v198 = v207;
  else
    v198 &= 0xCFFFFFFF;
  v200 = *(unsigned int *)(v491 + 88);
  if ((v200 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v201 = *(_QWORD *)(v498 + 2328);
  if (v200 >= (*(_QWORD *)(v498 + 2336) - v201) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v201 = *(_QWORD *)(v498 + 2328);
    v197 = *v483;
    v199 = **v483;
  }
  v202 = *(_DWORD *)(v201 + (v200 << 11) + 1440);
  if (v199)
  {
LABEL_514:
    v203 = *(unsigned int *)(v491 + 88);
    if ((v203 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v205 = *(_DWORD *)(v498 + 1496);
    if (v199)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v202 & 0x10000000) != 0)
    v208 = 0x40000000;
  else
    v208 = 0x80000000;
  if ((v202 & 0x20000000) != 0)
    v202 = v208;
  else
    v202 &= 0xCFFFFFFF;
  v203 = *(unsigned int *)(v491 + 88);
  if ((v203 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v204 = *(_QWORD *)(v498 + 2328);
  if (v203 >= (*(_QWORD *)(v498 + 2336) - v204) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v204 = *(_QWORD *)(v498 + 2328);
    v197 = *v483;
    v199 = **v483;
  }
  v205 = *(_DWORD *)(v204 + (v203 << 11) + 1216);
  if (v199)
  {
LABEL_519:
    v206 = *(unsigned int *)(v491 + 88);
    if ((v206 & 0x80000000) != 0)
      goto LABEL_595;
    goto LABEL_545;
  }
LABEL_538:
  if ((v205 & 0x10000000) != 0)
    v209 = 0x40000000;
  else
    v209 = 0x80000000;
  if ((v205 & 0x20000000) != 0)
    v205 = v209;
  else
    v205 &= 0xCFFFFFFF;
  v206 = *(unsigned int *)(v491 + 88);
  if ((v206 & 0x80000000) != 0)
    goto LABEL_595;
LABEL_545:
  v210 = *(_QWORD *)(v498 + 2328);
  v211 = (*(_QWORD *)(v498 + 2336) - v210) >> 11;
  if (v211 > v206)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v197 = *v483;
  v206 = *(unsigned int *)(v491 + 88);
  if ((v206 & 0x80000000) != 0)
  {
LABEL_595:
    v212 = *(_DWORD *)(v498 + 1528);
    if (*v197)
      goto LABEL_559;
    goto LABEL_553;
  }
  v210 = *(_QWORD *)(v498 + 2328);
  v211 = (*(_QWORD *)(v498 + 2336) - v210) >> 11;
LABEL_549:
  if (v211 <= v206)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v210 = *(_QWORD *)(v498 + 2328);
    v197 = *v483;
  }
  v212 = *(_DWORD *)(v210 + (v206 << 11) + 1248);
  if (!*v197)
  {
LABEL_553:
    if ((v212 & 0x10000000) != 0)
      v213 = 0x40000000;
    else
      v213 = 0x80000000;
    if ((v212 & 0x20000000) != 0)
      v212 = v213;
    else
      v212 &= 0xCFFFFFFF;
  }
LABEL_559:
  v557 = v542;
  v558 = v543;
  v559 = v544;
  v556 = (float32x4_t)v541;
  v555 = v540;
  if ((v177 & 0x40000000) != 0)
  {
    v532 = v542;
    v533 = v543;
    v534 = v544;
    v531 = v541;
    v530 = v540;
    *(_QWORD *)&v585 = 0x161616160D0D0D0DLL;
    v525 = xmmword_224687340;
    v526 = (__int128)xmmword_224687350;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 7, 6, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B700000177), xmmword_224687350);
    if ((v479 & 0x40000000) == 0)
    {
      v527 = v542;
      v528 = v543;
      v529 = v544;
      v526 = v541;
      v525 = v540;
      *(_QWORD *)&v580 = 0xD0D0D0D0D0D0D0DLL;
      v585 = xmmword_224687360;
      v586 = (__int128)xmmword_224687370;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 7, 6, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B700000177), xmmword_224687370);
      if (((v463 | v188) & 1) == 0)
      {
        v587 = v542;
        v588 = v543;
        v589 = v544;
        v585 = v540;
        v586 = v541;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687380;
        v581 = (__int128)xmmword_224687390;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 7, 6, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B700000177), xmmword_224687390);
        v214 = (v496 & 1) == 0 && ((v458 | v187) & 1) == 0;
        if ((v450 & 1) == 0 && v214)
        {
          v582 = v542;
          v583 = v543;
          v584 = v544;
          v581 = v541;
          v580 = v540;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246873A0;
          v576 = (__int128)xmmword_2246873B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 7, 6, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13700000177), xmmword_2246873B0);
        }
      }
      v215 = (v454 & 1) == 0 && ((v458 | v187) & 1) == 0;
      if (v215 && (v189 & 1) == 0)
      {
        v577 = v557;
        v578 = v558;
        v579 = v559;
        v576 = (__int128)v556;
        v575 = v555;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_2246873C0;
        v571 = (__int128)xmmword_2246873D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 7, 6, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13700000177), xmmword_2246873D0);
      }
    }
    if (!(v202 & 0x40000000 | v188 & 1))
    {
      v572 = v557;
      v573 = v558;
      v574 = v559;
      *(_QWORD *)&v560 = 0x16160D0D16160D0DLL;
      v571 = (__int128)v556;
      v570 = v555;
      v565 = xmmword_2246873E0;
      v566 = (__int128)xmmword_2246873F0;
      *(_QWORD *)&v535 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 7, 6, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v535, COERCE_DOUBLE(0x1B700000177), xmmword_2246873F0);
      v216 = (v198 & 0x40000000) == 0 && (v205 & 0x40000000 | v187 & 1) == 0;
      if ((v496 & 1) == 0 && v216)
      {
        v567 = v557;
        v568 = v558;
        v569 = v559;
        *(_QWORD *)&v535 = 0x161616160D0D0D0DLL;
        v566 = (__int128)v556;
        v565 = v555;
        v560 = xmmword_224687400;
        v561 = (__int128)xmmword_224687410;
        *(_QWORD *)&v591[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 6, 5, (uint64_t)&v535, (uint64_t)&v560, (uint64_t)v591, COERCE_DOUBLE(0x13700000177), xmmword_224687410);
      }
    }
    v217 = (v189 & 1) == 0 && (v205 & 0x40000000 | v187 & 1) == 0;
    if (v217 && (v212 & 0x40000000) == 0)
    {
      v562 = v557;
      v563 = v558;
      v564 = v559;
      *(_QWORD *)&v591[0] = 0x16160D0D16160D0DLL;
      v561 = (__int128)v556;
      v560 = v555;
      v535 = xmmword_224687420;
      v536 = (__int128)xmmword_224687430;
      v592[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 7, 6, 5, (uint64_t)v591, (uint64_t)&v535, (uint64_t)v592, COERCE_DOUBLE(0x13700000177), xmmword_224687430);
    }
  }
  v218 = a1[2];
  v219 = *v486;
  v497 = (unsigned __int8 **)v486[2];
  v499 = (unsigned int *)v486[1];
  v503 = a3[3];
  v504 = a3[4];
  v501 = a3[1];
  v502 = a3[2];
  v500 = *a3;
  v451 = *(_OWORD *)a1;
  v492 = *a1;
  v220 = *((_DWORD *)v218 + 304);
  if (***a1)
  {
    v474 = *((_DWORD *)v218 + 312);
    v480 = *((_DWORD *)v218 + 368);
    v487 = *((_DWORD *)v218 + 376);
    v221 = v499[16];
    if ((v221 & 0x80000000) == 0)
      goto LABEL_589;
LABEL_611:
    v224 = *v497;
    v225 = *(_DWORD *)(v219 + 1304);
    v226 = **v497;
    if (**v497)
      goto LABEL_593;
LABEL_612:
    if ((v225 & 0x10000000) != 0)
      v235 = 0x40000000;
    else
      v235 = 0x80000000;
    if ((v225 & 0x20000000) != 0)
      v225 = v235;
    else
      v225 &= 0xCFFFFFFF;
    if ((v487 & 0x40000000) == 0)
      goto LABEL_594;
    goto LABEL_619;
  }
  if ((v220 & 0x20000000) != 0)
    v220 *= 4;
  v229 = *((_DWORD *)v218 + 368);
  if ((v229 & 0x20000000) != 0)
    v230 = 4 * v229;
  else
    v230 = *((_DWORD *)v218 + 368);
  v231 = *((_DWORD *)v218 + 312);
  if ((v231 & 0x20000000) != 0)
    v231 *= 4;
  v474 = v231;
  v480 = v230;
  v232 = *((_DWORD *)v218 + 376);
  if ((v232 & 0x10000000) != 0)
    v233 = 0x40000000;
  else
    v233 = 0x80000000;
  if ((v232 & 0x20000000) != 0)
    v234 = v233;
  else
    v234 = v232 & 0xCFFFFFFF;
  v487 = v234;
  v221 = v499[16];
  if ((v221 & 0x80000000) != 0)
    goto LABEL_611;
LABEL_589:
  v222 = *(_QWORD *)(v219 + 2328);
  if (v221 >= (*(_QWORD *)(v219 + 2336) - v222) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v222 = *(_QWORD *)(v219 + 2328);
  }
  v223 = v222 + (v221 << 11);
  v224 = *v497;
  v225 = *(_DWORD *)(v223 + 1024);
  v226 = **v497;
  if (!**v497)
    goto LABEL_612;
LABEL_593:
  if ((v487 & 0x40000000) == 0)
  {
LABEL_594:
    v459 = 0;
    v227 = 0;
    v228 = 0;
    v469 = 0;
    v446 = 0;
    goto LABEL_685;
  }
LABEL_619:
  v236 = v499[4];
  if ((v236 & 0x80000000) != 0)
  {
    v238 = *(_DWORD *)(v219 + 1524);
    if (v226)
      goto LABEL_624;
  }
  else
  {
    v237 = *(_QWORD *)(v219 + 2328);
    if (v236 >= (*(_QWORD *)(v219 + 2336) - v237) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v237 = *(_QWORD *)(v219 + 2328);
      v224 = *v497;
      v226 = **v497;
    }
    v238 = *(_DWORD *)(v237 + (v236 << 11) + 1244);
    if (v226)
    {
LABEL_624:
      v239 = v499[4];
      if ((v239 & 0x80000000) == 0)
        goto LABEL_625;
LABEL_652:
      v241 = *(_DWORD *)(v219 + 1780);
      if (v226)
        goto LABEL_629;
      goto LABEL_653;
    }
  }
  if ((v238 & 0x10000000) != 0)
    v251 = 0x40000000;
  else
    v251 = 0x80000000;
  if ((v238 & 0x20000000) != 0)
    v238 = v251;
  else
    v238 &= 0xCFFFFFFF;
  v239 = v499[4];
  if ((v239 & 0x80000000) != 0)
    goto LABEL_652;
LABEL_625:
  v240 = *(_QWORD *)(v219 + 2328);
  if (v239 >= (*(_QWORD *)(v219 + 2336) - v240) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v240 = *(_QWORD *)(v219 + 2328);
    v224 = *v497;
    v226 = **v497;
  }
  v241 = *(_DWORD *)(v240 + (v239 << 11) + 1500);
  if (v226)
  {
LABEL_629:
    v242 = v499[4];
    if ((v242 & 0x80000000) == 0)
      goto LABEL_630;
LABEL_660:
    v244 = *(_DWORD *)(v219 + 1556);
    if (v226)
      goto LABEL_634;
    goto LABEL_661;
  }
LABEL_653:
  if ((v241 & 0x10000000) != 0)
    v252 = 0x40000000;
  else
    v252 = 0x80000000;
  if ((v241 & 0x20000000) != 0)
    v241 = v252;
  else
    v241 &= 0xCFFFFFFF;
  v242 = v499[4];
  if ((v242 & 0x80000000) != 0)
    goto LABEL_660;
LABEL_630:
  v243 = *(_QWORD *)(v219 + 2328);
  if (v242 >= (*(_QWORD *)(v219 + 2336) - v243) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v243 = *(_QWORD *)(v219 + 2328);
    v224 = *v497;
    v226 = **v497;
  }
  v244 = *(_DWORD *)(v243 + (v242 << 11) + 1276);
  if (v226)
  {
LABEL_634:
    v245 = v499[4];
    if ((v245 & 0x80000000) == 0)
      goto LABEL_635;
LABEL_668:
    v247 = *(_DWORD *)(v219 + 1812);
    if (v226)
      goto LABEL_639;
LABEL_669:
    if ((v247 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v247 & 0x20000000) != 0)
      v247 = v254;
    else
      v247 &= 0xCFFFFFFF;
    v248 = v499[7];
    if ((v248 & 0x80000000) == 0)
      goto LABEL_640;
    goto LABEL_676;
  }
LABEL_661:
  if ((v244 & 0x10000000) != 0)
    v253 = 0x40000000;
  else
    v253 = 0x80000000;
  if ((v244 & 0x20000000) != 0)
    v244 = v253;
  else
    v244 &= 0xCFFFFFFF;
  v245 = v499[4];
  if ((v245 & 0x80000000) != 0)
    goto LABEL_668;
LABEL_635:
  v246 = *(_QWORD *)(v219 + 2328);
  if (v245 >= (*(_QWORD *)(v219 + 2336) - v246) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v246 = *(_QWORD *)(v219 + 2328);
    v224 = *v497;
    v226 = **v497;
  }
  v247 = *(_DWORD *)(v246 + (v245 << 11) + 1532);
  if (!v226)
    goto LABEL_669;
LABEL_639:
  v248 = v499[7];
  if ((v248 & 0x80000000) == 0)
  {
LABEL_640:
    v249 = *(_QWORD *)(v219 + 2328);
    if (v248 >= (*(_QWORD *)(v219 + 2336) - v249) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v249 = *(_QWORD *)(v219 + 2328);
      v224 = *v497;
      v226 = **v497;
    }
    v250 = v249 + (v248 << 11);
    goto LABEL_677;
  }
LABEL_676:
  v250 = v219 + 280;
LABEL_677:
  v446 = (v238 >> 30) & 1;
  v469 = (v241 >> 30) & 1;
  v228 = (v244 >> 30) & 1;
  v255 = *(_DWORD *)(v250 + 1052);
  v227 = (v247 >> 30) & 1;
  if (!v226)
  {
    if ((v255 & 0x10000000) != 0)
      v256 = 0x40000000;
    else
      v256 = 0x80000000;
    if ((v255 & 0x20000000) != 0)
      v255 = v256;
    else
      v255 &= 0xCFFFFFFF;
  }
  v459 = (v255 >> 30) & 1;
LABEL_685:
  v537 = v502;
  v538 = v503;
  v539 = v504;
  v536 = v501;
  v535 = v500;
  v257 = *((_DWORD *)v218 + 305);
  if (**v492)
  {
    v258 = *((_DWORD *)v218 + 369);
    v259 = *((_DWORD *)v218 + 313);
    v484 = *((_DWORD *)v218 + 377);
    v260 = v499[16];
    if ((v260 & 0x80000000) == 0)
      goto LABEL_687;
LABEL_1007:
    v464 = v220 >> 30;
    v262 = *(_DWORD *)(v219 + 1308);
    if (*v224)
      goto LABEL_697;
    goto LABEL_691;
  }
  if ((v257 & 0x10000000) != 0)
    v366 = 0x40000000;
  else
    v366 = 0x80000000;
  if ((v257 & 0x20000000) != 0)
    v257 = v366;
  else
    v257 &= 0xCFFFFFFF;
  v367 = *((_DWORD *)v218 + 369);
  if ((v367 & 0x10000000) != 0)
    v368 = 0x40000000;
  else
    v368 = 0x80000000;
  if ((v367 & 0x20000000) != 0)
    v258 = v368;
  else
    v258 = v367 & 0xCFFFFFFF;
  v369 = *((_DWORD *)v218 + 313);
  if ((v369 & 0x10000000) != 0)
    v370 = 0x40000000;
  else
    v370 = 0x80000000;
  if ((v369 & 0x20000000) != 0)
    v259 = v370;
  else
    v259 = v369 & 0xCFFFFFFF;
  v371 = *((_DWORD *)v218 + 377);
  if ((v371 & 0x10000000) != 0)
    v372 = 0x40000000;
  else
    v372 = 0x80000000;
  if ((v371 & 0x20000000) != 0)
    v373 = v372;
  else
    v373 = v371 & 0xCFFFFFFF;
  v484 = v373;
  v260 = v499[16];
  if ((v260 & 0x80000000) != 0)
    goto LABEL_1007;
LABEL_687:
  v261 = *(_QWORD *)(v219 + 2328);
  if (v260 >= (*(_QWORD *)(v219 + 2336) - v261) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v261 = *(_QWORD *)(v219 + 2328);
    v224 = *v497;
  }
  v464 = v220 >> 30;
  v262 = *(_DWORD *)(v261 + (v260 << 11) + 1028);
  if (!*v224)
  {
LABEL_691:
    if ((v262 & 0x10000000) != 0)
      v263 = 0x40000000;
    else
      v263 = 0x80000000;
    if ((v262 & 0x20000000) != 0)
      v262 = v263;
    else
      v262 &= 0xCFFFFFFF;
  }
LABEL_697:
  v455 = v257 >> 30;
  v264 = v474 >> 30;
  v265 = v480 >> 30;
  v266 = v225 >> 30;
  v475 = v259 >> 30;
  v481 = v258 >> 30;
  v267 = v262 >> 30;
  if ((v487 & 0x40000000) != 0)
  {
    v532 = v502;
    v533 = v503;
    v534 = v504;
    v531 = v501;
    v530 = v500;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687440;
    v526 = (__int128)xmmword_224687450;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 0, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B800000178), xmmword_224687450);
    if (!v227)
    {
      v527 = v502;
      v528 = v503;
      v529 = v504;
      *(_QWORD *)&v580 = 0x707101004040D0DLL;
      v526 = v501;
      v525 = v500;
      v585 = xmmword_224687460;
      v586 = (__int128)xmmword_224687470;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 0, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B800000178), xmmword_224687470);
      v268 = (v228 | v264 & 1) == 0;
      if (!(v469 | v265 & 1))
      {
        v587 = v502;
        v588 = v503;
        v589 = v504;
        *(_QWORD *)&v575 = 0x40404040D0D0D0DLL;
        v585 = v500;
        v586 = v501;
        v580 = xmmword_224687480;
        v581 = (__int128)xmmword_224687490;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 0, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B800000178), xmmword_224687490);
        v269 = (v464 & 1) == 0 && v268;
        if (!v446 && v269)
        {
          v582 = v502;
          v583 = v503;
          v584 = v504;
          v581 = v501;
          v580 = v500;
          *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
          v575 = xmmword_2246874A0;
          v576 = (__int128)xmmword_2246874B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 0, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13800000178), xmmword_2246874B0);
        }
      }
      if (v459)
        v270 = 0;
      else
        v270 = v268;
      if (v270 && (v266 & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        *(_QWORD *)&v565 = 0x707040410100D0DLL;
        v576 = v501;
        v575 = v500;
        v570 = xmmword_2246874C0;
        v571 = (__int128)xmmword_2246874D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 0, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13800000178), xmmword_2246874D0);
      }
    }
    if (((v265 | v481) & 1) == 0)
    {
      v572 = v502;
      v573 = v503;
      v574 = v504;
      v571 = v501;
      v570 = v500;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246874E0;
      v566 = (__int128)xmmword_2246874F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 0, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B800000178), xmmword_2246874F0);
      v271 = (v455 & 1) == 0 && ((v264 | v475) & 1) == 0;
      if ((v464 & 1) == 0 && v271)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687500;
        v561 = (__int128)xmmword_224687510;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13800000178), xmmword_224687510);
      }
    }
    v272 = (v266 & 1) == 0 && ((v264 | v475) & 1) == 0;
    if (v272 && (v267 & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687520;
      v556 = xmmword_224687530;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 0, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13800000178), xmmword_224687530);
    }
  }
  v512 = v537;
  v513 = v538;
  v514 = v539;
  v510 = v535;
  v511 = v536;
  v273 = *((_DWORD *)v218 + 306);
  if (**v492)
  {
    v274 = *((_DWORD *)v218 + 370);
    v275 = *((_DWORD *)v218 + 314);
    v470 = *((_DWORD *)v218 + 378);
    v276 = v499[16];
    if ((v276 & 0x80000000) == 0)
      goto LABEL_727;
LABEL_1034:
    v278 = *(_DWORD *)(v219 + 1312);
    if (**v497)
      goto LABEL_737;
    goto LABEL_731;
  }
  if ((v273 & 0x10000000) != 0)
    v374 = 0x40000000;
  else
    v374 = 0x80000000;
  if ((v273 & 0x20000000) != 0)
    v273 = v374;
  else
    v273 &= 0xCFFFFFFF;
  v375 = *((_DWORD *)v218 + 370);
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v274 = v376;
  else
    v274 = v375 & 0xCFFFFFFF;
  v377 = *((_DWORD *)v218 + 314);
  if ((v377 & 0x10000000) != 0)
    v378 = 0x40000000;
  else
    v378 = 0x80000000;
  if ((v377 & 0x20000000) != 0)
    v275 = v378;
  else
    v275 = v377 & 0xCFFFFFFF;
  v379 = *((_DWORD *)v218 + 378);
  if ((v379 & 0x10000000) != 0)
    v380 = 0x40000000;
  else
    v380 = 0x80000000;
  if ((v379 & 0x20000000) != 0)
    v381 = v380;
  else
    v381 = v379 & 0xCFFFFFFF;
  v470 = v381;
  v276 = v499[16];
  if ((v276 & 0x80000000) != 0)
    goto LABEL_1034;
LABEL_727:
  v277 = *(_QWORD *)(v219 + 2328);
  if (v276 >= (*(_QWORD *)(v219 + 2336) - v277) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v277 = *(_QWORD *)(v219 + 2328);
  }
  v278 = *(_DWORD *)(v277 + (v276 << 11) + 1032);
  if (!**v497)
  {
LABEL_731:
    if ((v278 & 0x10000000) != 0)
      v279 = 0x40000000;
    else
      v279 = 0x80000000;
    if ((v278 & 0x20000000) != 0)
      v278 = v279;
    else
      v278 &= 0xCFFFFFFF;
  }
LABEL_737:
  v447 = v273 >> 30;
  v280 = v274 >> 30;
  v281 = v275 >> 30;
  v460 = v278 >> 30;
  v522 = v537;
  v523 = v538;
  v524 = v539;
  v520 = v535;
  v521 = v536;
  if ((v484 & 0x40000000) != 0)
  {
    v532 = v537;
    v533 = v538;
    v534 = v539;
    v531 = v536;
    v530 = v535;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687540;
    v526 = (__int128)xmmword_224687550;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 1, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1B900000179), xmmword_224687550);
    if ((v487 & 0x40000000) == 0)
    {
      v527 = v537;
      v528 = v538;
      v529 = v539;
      v526 = v536;
      v525 = v535;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687560;
      v586 = (__int128)xmmword_224687570;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 1, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1B900000179), xmmword_224687570);
      if (((v265 | v481) & 1) == 0)
      {
        v587 = v537;
        v588 = v538;
        v589 = v539;
        v585 = v535;
        v586 = v536;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687580;
        v581 = (__int128)xmmword_224687590;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 1, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1B900000179), xmmword_224687590);
        v282 = (v455 & 1) == 0 && ((v264 | v475) & 1) == 0;
        if ((v464 & 1) == 0 && v282)
        {
          v582 = v537;
          v583 = v538;
          v584 = v539;
          v581 = v536;
          v580 = v535;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246875A0;
          v576 = (__int128)xmmword_2246875B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 1, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13900000179), xmmword_2246875B0);
        }
      }
      v283 = (v266 & 1) == 0 && ((v264 | v475) & 1) == 0;
      if (v283 && (v267 & 1) == 0)
      {
        v577 = v522;
        v578 = v523;
        v579 = v524;
        v576 = v521;
        v575 = v520;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_2246875C0;
        v571 = (__int128)xmmword_2246875D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 1, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13900000179), xmmword_2246875D0);
      }
    }
    if (((v481 | v280) & 1) == 0)
    {
      v572 = v522;
      v573 = v523;
      v574 = v524;
      v571 = v521;
      v570 = v520;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246875E0;
      v566 = (__int128)xmmword_2246875F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 1, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1B900000179), xmmword_2246875F0);
      v284 = (v273 & 0x40000000) == 0 && ((v475 | v281) & 1) == 0;
      if ((v455 & 1) == 0 && v284)
      {
        v567 = v522;
        v568 = v523;
        v569 = v524;
        v566 = v521;
        v565 = v520;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687600;
        v561 = (__int128)xmmword_224687610;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13900000179), xmmword_224687610);
      }
    }
    v285 = (v267 & 1) == 0 && ((v475 | v281) & 1) == 0;
    if (v285 && (v460 & 1) == 0)
    {
      v562 = v522;
      v563 = v523;
      v564 = v524;
      v561 = v521;
      v560 = v520;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687620;
      v556 = xmmword_224687630;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 1, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13900000179), xmmword_224687630);
    }
  }
  v286 = *((_DWORD *)v218 + 307);
  if (**v492)
  {
    v287 = *((_DWORD *)v218 + 371);
    v288 = *((_DWORD *)v218 + 315);
    v488 = *((_DWORD *)v218 + 379);
    v289 = v499[16];
    if ((v289 & 0x80000000) == 0)
      goto LABEL_767;
LABEL_1061:
    v291 = *(_DWORD *)(v219 + 1316);
    if (**v497)
      goto LABEL_777;
    goto LABEL_771;
  }
  if ((v286 & 0x10000000) != 0)
    v382 = 0x40000000;
  else
    v382 = 0x80000000;
  if ((v286 & 0x20000000) != 0)
    v286 = v382;
  else
    v286 &= 0xCFFFFFFF;
  v383 = *((_DWORD *)v218 + 371);
  if ((v383 & 0x10000000) != 0)
    v384 = 0x40000000;
  else
    v384 = 0x80000000;
  if ((v383 & 0x20000000) != 0)
    v287 = v384;
  else
    v287 = v383 & 0xCFFFFFFF;
  v385 = *((_DWORD *)v218 + 315);
  if ((v385 & 0x10000000) != 0)
    v386 = 0x40000000;
  else
    v386 = 0x80000000;
  if ((v385 & 0x20000000) != 0)
    v288 = v386;
  else
    v288 = v385 & 0xCFFFFFFF;
  v387 = *((_DWORD *)v218 + 379);
  if ((v387 & 0x10000000) != 0)
    v388 = 0x40000000;
  else
    v388 = 0x80000000;
  if ((v387 & 0x20000000) != 0)
    v389 = v388;
  else
    v389 = v387 & 0xCFFFFFFF;
  v488 = v389;
  v289 = v499[16];
  if ((v289 & 0x80000000) != 0)
    goto LABEL_1061;
LABEL_767:
  v290 = *(_QWORD *)(v219 + 2328);
  if (v289 >= (*(_QWORD *)(v219 + 2336) - v290) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v290 = *(_QWORD *)(v219 + 2328);
  }
  v291 = *(_DWORD *)(v290 + (v289 << 11) + 1036);
  if (!**v497)
  {
LABEL_771:
    if ((v291 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v291 & 0x20000000) != 0)
      v291 = v292;
    else
      v291 &= 0xCFFFFFFF;
  }
LABEL_777:
  v443 = v286 >> 30;
  v465 = v287 >> 30;
  v293 = v288 >> 30;
  v294 = v291 >> 30;
  if ((v470 & 0x40000000) != 0)
  {
    v532 = v512;
    v533 = v513;
    v534 = v514;
    v531 = v511;
    v530 = v510;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687640;
    v526 = (__int128)xmmword_224687650;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 2, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BA0000017ALL), xmmword_224687650);
    if ((v484 & 0x40000000) == 0)
    {
      v527 = v512;
      v528 = v513;
      v529 = v514;
      v526 = v511;
      v525 = v510;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687660;
      v586 = (__int128)xmmword_224687670;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 2, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BA0000017ALL), xmmword_224687670);
      if (((v481 | v280) & 1) == 0)
      {
        v587 = v512;
        v588 = v513;
        v589 = v514;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687680;
        v581 = (__int128)xmmword_224687690;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 2, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BA0000017ALL), xmmword_224687690);
        v295 = (v447 & 1) == 0 && ((v475 | v281) & 1) == 0;
        if ((v455 & 1) == 0 && v295)
        {
          v582 = v512;
          v583 = v513;
          v584 = v514;
          v581 = v511;
          v580 = v510;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246876A0;
          v576 = (__int128)xmmword_2246876B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 2, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13A0000017ALL), xmmword_2246876B0);
        }
      }
      v296 = (v267 & 1) == 0 && ((v475 | v281) & 1) == 0;
      if (v296 && (v460 & 1) == 0)
      {
        v577 = v512;
        v578 = v513;
        v579 = v514;
        v576 = v511;
        v575 = v510;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_2246876C0;
        v571 = (__int128)xmmword_2246876D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 2, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13A0000017ALL), xmmword_2246876D0);
      }
    }
    if (((v280 | v465) & 1) == 0)
    {
      v572 = v512;
      v573 = v513;
      v574 = v514;
      v571 = v511;
      v570 = v510;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246876E0;
      v566 = (__int128)xmmword_2246876F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 2, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1BA0000017ALL), xmmword_2246876F0);
      v297 = (v286 & 0x40000000) == 0 && ((v281 | v293) & 1) == 0;
      if ((v447 & 1) == 0 && v297)
      {
        v567 = v512;
        v568 = v513;
        v569 = v514;
        v566 = v511;
        v565 = v510;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687700;
        v561 = (__int128)xmmword_224687710;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13A0000017ALL), xmmword_224687710);
      }
    }
    v298 = (v460 & 1) == 0 && ((v281 | v293) & 1) == 0;
    if (v298 && (v294 & 1) == 0)
    {
      v562 = v512;
      v563 = v513;
      v564 = v514;
      v561 = v511;
      v560 = v510;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687720;
      v556 = xmmword_224687730;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 2, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13A0000017ALL), xmmword_224687730);
    }
  }
  v299 = *((_DWORD *)v218 + 308);
  if (**v492)
  {
    v300 = *((_DWORD *)v218 + 372);
    v301 = *((_DWORD *)v218 + 316);
    v485 = *((_DWORD *)v218 + 380);
    v302 = v499[16];
    if ((v302 & 0x80000000) == 0)
      goto LABEL_807;
LABEL_1088:
    v304 = *(_DWORD *)(v219 + 1320);
    if (**v497)
      goto LABEL_817;
    goto LABEL_811;
  }
  if ((v299 & 0x10000000) != 0)
    v390 = 0x40000000;
  else
    v390 = 0x80000000;
  if ((v299 & 0x20000000) != 0)
    v299 = v390;
  else
    v299 &= 0xCFFFFFFF;
  v391 = *((_DWORD *)v218 + 372);
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v300 = v392;
  else
    v300 = v391 & 0xCFFFFFFF;
  v393 = *((_DWORD *)v218 + 316);
  if ((v393 & 0x10000000) != 0)
    v394 = 0x40000000;
  else
    v394 = 0x80000000;
  if ((v393 & 0x20000000) != 0)
    v301 = v394;
  else
    v301 = v393 & 0xCFFFFFFF;
  v395 = *((_DWORD *)v218 + 380);
  if ((v395 & 0x10000000) != 0)
    v396 = 0x40000000;
  else
    v396 = 0x80000000;
  if ((v395 & 0x20000000) != 0)
    v397 = v396;
  else
    v397 = v395 & 0xCFFFFFFF;
  v485 = v397;
  v302 = v499[16];
  if ((v302 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_807:
  v303 = *(_QWORD *)(v219 + 2328);
  if (v302 >= (*(_QWORD *)(v219 + 2336) - v303) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v303 = *(_QWORD *)(v219 + 2328);
  }
  v304 = *(_DWORD *)(v303 + (v302 << 11) + 1040);
  if (!**v497)
  {
LABEL_811:
    if ((v304 & 0x10000000) != 0)
      v305 = 0x40000000;
    else
      v305 = 0x80000000;
    if ((v304 & 0x20000000) != 0)
      v304 = v305;
    else
      v304 &= 0xCFFFFFFF;
  }
LABEL_817:
  v440 = v299 >> 30;
  v306 = v300 >> 30;
  v307 = v301 >> 30;
  v456 = v304 >> 30;
  if ((v488 & 0x40000000) != 0)
  {
    v532 = v512;
    v533 = v513;
    v534 = v514;
    v531 = v511;
    v530 = v510;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687740;
    v526 = (__int128)xmmword_224687750;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 3, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BB0000017BLL), xmmword_224687750);
    if ((v470 & 0x40000000) == 0)
    {
      v527 = v512;
      v528 = v513;
      v529 = v514;
      v526 = v511;
      v525 = v510;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687760;
      v586 = (__int128)xmmword_224687770;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 3, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BB0000017BLL), xmmword_224687770);
      v308 = ((v281 | v293) & 1) == 0;
      if (((v280 | v465) & 1) == 0)
      {
        v587 = v512;
        v588 = v513;
        v589 = v514;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687780;
        v581 = (__int128)xmmword_224687790;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 3, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BB0000017BLL), xmmword_224687790);
        v309 = (v443 & 1) == 0 && v308;
        if ((v447 & 1) == 0 && v309)
        {
          v582 = v512;
          v583 = v513;
          v584 = v514;
          v581 = v511;
          v580 = v510;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246877A0;
          v576 = (__int128)xmmword_2246877B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 3, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13B0000017BLL), xmmword_2246877B0);
        }
      }
      v310 = (v460 & 1) == 0 && v308;
      if (v310 && (v294 & 1) == 0)
      {
        v577 = v512;
        v578 = v513;
        v579 = v514;
        v576 = v511;
        v575 = v510;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_2246877C0;
        v571 = (__int128)xmmword_2246877D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 3, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13B0000017BLL), xmmword_2246877D0);
      }
    }
    if (((v465 | v306) & 1) == 0)
    {
      v572 = v512;
      v573 = v513;
      v574 = v514;
      v571 = v511;
      v570 = v510;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246877E0;
      v566 = (__int128)xmmword_2246877F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 3, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1BB0000017BLL), xmmword_2246877F0);
      v311 = (v440 & 1) == 0 && ((v293 | v307) & 1) == 0;
      if ((v443 & 1) == 0 && v311)
      {
        v567 = v512;
        v568 = v513;
        v569 = v514;
        v566 = v511;
        v565 = v510;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687800;
        v561 = (__int128)xmmword_224687810;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13B0000017BLL), xmmword_224687810);
      }
    }
    v312 = (v294 & 1) == 0 && ((v293 | v307) & 1) == 0;
    if (v312 && (v456 & 1) == 0)
    {
      v562 = v512;
      v563 = v513;
      v564 = v514;
      v561 = v511;
      v560 = v510;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687820;
      v556 = xmmword_224687830;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 3, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13B0000017BLL), xmmword_224687830);
    }
  }
  v313 = *((_DWORD *)v218 + 309);
  if (**v492)
  {
    v314 = *((_DWORD *)v218 + 373);
    v315 = *((_DWORD *)v218 + 317);
    v482 = *((_DWORD *)v218 + 381);
    v316 = v499[16];
    if ((v316 & 0x80000000) == 0)
      goto LABEL_847;
LABEL_1115:
    v318 = *(_DWORD *)(v219 + 1324);
    if (**v497)
      goto LABEL_857;
    goto LABEL_851;
  }
  if ((v313 & 0x10000000) != 0)
    v398 = 0x40000000;
  else
    v398 = 0x80000000;
  if ((v313 & 0x20000000) != 0)
    v313 = v398;
  else
    v313 &= 0xCFFFFFFF;
  v399 = *((_DWORD *)v218 + 373);
  if ((v399 & 0x10000000) != 0)
    v400 = 0x40000000;
  else
    v400 = 0x80000000;
  if ((v399 & 0x20000000) != 0)
    v314 = v400;
  else
    v314 = v399 & 0xCFFFFFFF;
  v401 = *((_DWORD *)v218 + 317);
  if ((v401 & 0x10000000) != 0)
    v402 = 0x40000000;
  else
    v402 = 0x80000000;
  if ((v401 & 0x20000000) != 0)
    v315 = v402;
  else
    v315 = v401 & 0xCFFFFFFF;
  v403 = *((_DWORD *)v218 + 381);
  if ((v403 & 0x10000000) != 0)
    v404 = 0x40000000;
  else
    v404 = 0x80000000;
  if ((v403 & 0x20000000) != 0)
    v405 = v404;
  else
    v405 = v403 & 0xCFFFFFFF;
  v482 = v405;
  v316 = v499[16];
  if ((v316 & 0x80000000) != 0)
    goto LABEL_1115;
LABEL_847:
  v317 = *(_QWORD *)(v219 + 2328);
  if (v316 >= (*(_QWORD *)(v219 + 2336) - v317) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v317 = *(_QWORD *)(v219 + 2328);
  }
  v318 = *(_DWORD *)(v317 + (v316 << 11) + 1044);
  if (!**v497)
  {
LABEL_851:
    if ((v318 & 0x10000000) != 0)
      v319 = 0x40000000;
    else
      v319 = 0x80000000;
    if ((v318 & 0x20000000) != 0)
      v318 = v319;
    else
      v318 &= 0xCFFFFFFF;
  }
LABEL_857:
  v448 = v313 >> 30;
  v320 = v314 >> 30;
  v321 = v315 >> 30;
  v461 = v318 >> 30;
  if ((v485 & 0x40000000) != 0)
  {
    v532 = v512;
    v533 = v513;
    v534 = v514;
    v531 = v511;
    v530 = v510;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687840;
    v526 = (__int128)xmmword_224687850;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 4, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BC0000017CLL), xmmword_224687850);
    if ((v488 & 0x40000000) == 0)
    {
      v527 = v512;
      v528 = v513;
      v529 = v514;
      v526 = v511;
      v525 = v510;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687860;
      v586 = (__int128)xmmword_224687870;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 4, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BC0000017CLL), xmmword_224687870);
      if (((v465 | v306) & 1) == 0)
      {
        v587 = v512;
        v588 = v513;
        v589 = v514;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687880;
        v581 = (__int128)xmmword_224687890;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 4, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BC0000017CLL), xmmword_224687890);
        v322 = (v440 & 1) == 0 && ((v293 | v307) & 1) == 0;
        if ((v443 & 1) == 0 && v322)
        {
          v582 = v512;
          v583 = v513;
          v584 = v514;
          v581 = v511;
          v580 = v510;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246878A0;
          v576 = (__int128)xmmword_2246878B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 4, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13C0000017CLL), xmmword_2246878B0);
        }
      }
      v323 = (v294 & 1) == 0 && ((v293 | v307) & 1) == 0;
      if (v323 && (v456 & 1) == 0)
      {
        v577 = v512;
        v578 = v513;
        v579 = v514;
        v576 = v511;
        v575 = v510;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_2246878C0;
        v571 = (__int128)xmmword_2246878D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 4, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13C0000017CLL), xmmword_2246878D0);
      }
    }
    if (((v306 | v320) & 1) == 0)
    {
      v572 = v512;
      v573 = v513;
      v574 = v514;
      v571 = v511;
      v570 = v510;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246878E0;
      v566 = (__int128)xmmword_2246878F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 4, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1BC0000017CLL), xmmword_2246878F0);
      v324 = (v313 & 0x40000000) == 0 && ((v307 | v321) & 1) == 0;
      if ((v440 & 1) == 0 && v324)
      {
        v567 = v512;
        v568 = v513;
        v569 = v514;
        v566 = v511;
        v565 = v510;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687900;
        v561 = (__int128)xmmword_224687910;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13C0000017CLL), xmmword_224687910);
      }
    }
    v325 = (v456 & 1) == 0 && ((v307 | v321) & 1) == 0;
    if (v325 && (v461 & 1) == 0)
    {
      v562 = v512;
      v563 = v513;
      v564 = v514;
      v561 = v511;
      v560 = v510;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687920;
      v556 = xmmword_224687930;
      *(_QWORD *)&v545 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 4, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x13C0000017CLL), xmmword_224687930);
    }
  }
  v326 = *((_DWORD *)v218 + 310);
  if (**v492)
  {
    v327 = *((_DWORD *)v218 + 374);
    v328 = *((_DWORD *)v218 + 318);
    v489 = *((_DWORD *)v218 + 382);
    v329 = v499[16];
    if ((v329 & 0x80000000) == 0)
      goto LABEL_887;
LABEL_1142:
    v331 = *(_DWORD *)(v219 + 1328);
    if (**v497)
      goto LABEL_897;
    goto LABEL_891;
  }
  if ((v326 & 0x10000000) != 0)
    v406 = 0x40000000;
  else
    v406 = 0x80000000;
  if ((v326 & 0x20000000) != 0)
    v326 = v406;
  else
    v326 &= 0xCFFFFFFF;
  v407 = *((_DWORD *)v218 + 374);
  if ((v407 & 0x10000000) != 0)
    v408 = 0x40000000;
  else
    v408 = 0x80000000;
  if ((v407 & 0x20000000) != 0)
    v327 = v408;
  else
    v327 = v407 & 0xCFFFFFFF;
  v409 = *((_DWORD *)v218 + 318);
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v328 = v410;
  else
    v328 = v409 & 0xCFFFFFFF;
  v411 = *((_DWORD *)v218 + 382);
  if ((v411 & 0x10000000) != 0)
    v412 = 0x40000000;
  else
    v412 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v413 = v412;
  else
    v413 = v411 & 0xCFFFFFFF;
  v489 = v413;
  v329 = v499[16];
  if ((v329 & 0x80000000) != 0)
    goto LABEL_1142;
LABEL_887:
  v330 = *(_QWORD *)(v219 + 2328);
  if (v329 >= (*(_QWORD *)(v219 + 2336) - v330) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v330 = *(_QWORD *)(v219 + 2328);
  }
  v331 = *(_DWORD *)(v330 + (v329 << 11) + 1048);
  if (!**v497)
  {
LABEL_891:
    if ((v331 & 0x10000000) != 0)
      v332 = 0x40000000;
    else
      v332 = 0x80000000;
    if ((v331 & 0x20000000) != 0)
      v331 = v332;
    else
      v331 &= 0xCFFFFFFF;
  }
LABEL_897:
  v444 = v326 >> 30;
  v471 = v328 >> 30;
  v476 = v327 >> 30;
  v466 = v331 >> 30;
  v547 = v512;
  v548 = v513;
  v549 = v514;
  v546 = v511;
  v545 = v510;
  if ((v482 & 0x40000000) != 0)
  {
    v532 = v512;
    v533 = v513;
    v534 = v514;
    v531 = v511;
    v530 = v510;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687940;
    v526 = (__int128)xmmword_224687950;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 5, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BD0000017DLL), xmmword_224687950);
    if ((v485 & 0x40000000) == 0)
    {
      v527 = v512;
      v528 = v513;
      v529 = v514;
      v526 = v511;
      v525 = v510;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687960;
      v586 = (__int128)xmmword_224687970;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 5, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BD0000017DLL), xmmword_224687970);
      v333 = ((v307 | v321) & 1) == 0;
      if (((v306 | v320) & 1) == 0)
      {
        v587 = v512;
        v588 = v513;
        v589 = v514;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687980;
        v581 = (__int128)xmmword_224687990;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 5, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BD0000017DLL), xmmword_224687990);
        v334 = (v448 & 1) == 0 && v333;
        if ((v440 & 1) == 0 && v334)
        {
          v582 = v512;
          v583 = v513;
          v584 = v514;
          v581 = v511;
          v580 = v510;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_2246879A0;
          v576 = (__int128)xmmword_2246879B0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 5, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13D0000017DLL), xmmword_2246879B0);
        }
      }
      v335 = (v456 & 1) == 0 && v333;
      if (v335 && (v461 & 1) == 0)
      {
        v577 = v547;
        v578 = v548;
        v579 = v549;
        v576 = v546;
        v575 = v545;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_2246879C0;
        v571 = (__int128)xmmword_2246879D0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 5, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13D0000017DLL), xmmword_2246879D0);
      }
    }
    if (((v320 | v476) & 1) == 0)
    {
      v572 = v547;
      v573 = v548;
      v574 = v549;
      v571 = v546;
      v570 = v545;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_2246879E0;
      v566 = (__int128)xmmword_2246879F0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 5, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1BD0000017DLL), xmmword_2246879F0);
      v336 = (v326 & 0x40000000) == 0 && ((v321 | v471) & 1) == 0;
      if ((v448 & 1) == 0 && v336)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        v566 = v546;
        v565 = v545;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687A00;
        v561 = (__int128)xmmword_224687A10;
        *(_QWORD *)&v550 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x13D0000017DLL), xmmword_224687A10);
      }
    }
    v337 = (v461 & 1) == 0 && ((v321 | v471) & 1) == 0;
    if (v337 && (v466 & 1) == 0)
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      v561 = v546;
      v560 = v545;
      *(_QWORD *)&v550 = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687A20;
      v556 = xmmword_224687A30;
      *(_QWORD *)&v540 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 5, 7, 5, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v540, COERCE_DOUBLE(0x13D0000017DLL), xmmword_224687A30);
    }
  }
  v542 = v512;
  v543 = v513;
  v544 = v514;
  v541 = v511;
  v540 = v510;
  v338 = *((_DWORD *)v218 + 311);
  if (**v492)
  {
    v339 = *((_DWORD *)v218 + 375);
    v340 = *((_DWORD *)v218 + 319);
    v341 = *((_DWORD *)v218 + 383);
    v342 = v499[16];
    if ((v342 & 0x80000000) == 0)
      goto LABEL_927;
LABEL_1169:
    v344 = *(_DWORD *)(v219 + 1332);
    if (**v497)
      goto LABEL_937;
    goto LABEL_931;
  }
  if ((v338 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v338 & 0x20000000) != 0)
    v338 = v414;
  else
    v338 &= 0xCFFFFFFF;
  v415 = *((_DWORD *)v218 + 375);
  if ((v415 & 0x10000000) != 0)
    v416 = 0x40000000;
  else
    v416 = 0x80000000;
  if ((v415 & 0x20000000) != 0)
    v339 = v416;
  else
    v339 = v415 & 0xCFFFFFFF;
  v417 = *((_DWORD *)v218 + 319);
  if ((v417 & 0x10000000) != 0)
    v418 = 0x40000000;
  else
    v418 = 0x80000000;
  if ((v417 & 0x20000000) != 0)
    v340 = v418;
  else
    v340 = v417 & 0xCFFFFFFF;
  v419 = *((_DWORD *)v218 + 383);
  if ((v419 & 0x10000000) != 0)
    v420 = 0x40000000;
  else
    v420 = 0x80000000;
  if ((v419 & 0x20000000) != 0)
    v341 = v420;
  else
    v341 = v419 & 0xCFFFFFFF;
  v342 = v499[16];
  if ((v342 & 0x80000000) != 0)
    goto LABEL_1169;
LABEL_927:
  v343 = *(_QWORD *)(v219 + 2328);
  if (v342 >= (*(_QWORD *)(v219 + 2336) - v343) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v343 = *(_QWORD *)(v219 + 2328);
  }
  v344 = *(_DWORD *)(v343 + (v342 << 11) + 1052);
  if (!**v497)
  {
LABEL_931:
    if ((v344 & 0x10000000) != 0)
      v345 = 0x40000000;
    else
      v345 = 0x80000000;
    if ((v344 & 0x20000000) != 0)
      v344 = v345;
    else
      v344 &= 0xCFFFFFFF;
  }
LABEL_937:
  v493 = v338 >> 30;
  v346 = v339 >> 30;
  v347 = v340 >> 30;
  v348 = v344 >> 30;
  v552 = v512;
  v553 = v513;
  v554 = v514;
  v551 = v511;
  v550 = v510;
  if ((v489 & 0x40000000) != 0)
  {
    v532 = v512;
    v533 = v513;
    v534 = v514;
    v531 = v511;
    v530 = v510;
    *(_QWORD *)&v585 = 0x10100D0D10100D0DLL;
    v525 = xmmword_224687A40;
    v526 = (__int128)xmmword_224687A50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 6, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BE0000017ELL), xmmword_224687A50);
    if ((v482 & 0x40000000) == 0)
    {
      v527 = v512;
      v528 = v513;
      v529 = v514;
      v526 = v511;
      v525 = v510;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v585 = xmmword_224687A60;
      v586 = (__int128)xmmword_224687A70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 6, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BE0000017ELL), xmmword_224687A70);
      if (((v320 | v476) & 1) == 0)
      {
        v587 = v512;
        v588 = v513;
        v589 = v514;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687A80;
        v581 = (__int128)xmmword_224687A90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 6, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BE0000017ELL), xmmword_224687A90);
        v349 = (v444 & 1) == 0 && ((v321 | v471) & 1) == 0;
        if ((v448 & 1) == 0 && v349)
        {
          v582 = v512;
          v583 = v513;
          v584 = v514;
          v581 = v511;
          v580 = v510;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_224687AA0;
          v576 = (__int128)xmmword_224687AB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 6, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13E0000017ELL), xmmword_224687AB0);
        }
      }
      v350 = (v461 & 1) == 0 && ((v321 | v471) & 1) == 0;
      if (v350 && (v466 & 1) == 0)
      {
        v577 = v552;
        v578 = v553;
        v579 = v554;
        v576 = v551;
        v575 = v550;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v570 = xmmword_224687AC0;
        v571 = (__int128)xmmword_224687AD0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 6, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13E0000017ELL), xmmword_224687AD0);
      }
    }
    if (((v476 | v346) & 1) == 0)
    {
      v572 = v552;
      v573 = v553;
      v574 = v554;
      v571 = v551;
      v570 = v550;
      *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
      v565 = xmmword_224687AE0;
      v566 = (__int128)xmmword_224687AF0;
      *(_QWORD *)&v555 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 6, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x1BE0000017ELL), xmmword_224687AF0);
      v351 = (v338 & 0x40000000) == 0 && ((v471 | v347) & 1) == 0;
      if ((v444 & 1) == 0 && v351)
      {
        v567 = v552;
        v568 = v553;
        v569 = v554;
        v566 = v551;
        v565 = v550;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224687B00;
        v561 = (__int128)xmmword_224687B10;
        *(_QWORD *)&v591[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 7, 5, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)v591, COERCE_DOUBLE(0x13E0000017ELL), xmmword_224687B10);
      }
    }
    v352 = (v466 & 1) == 0 && ((v471 | v347) & 1) == 0;
    if (v352 && (v348 & 1) == 0)
    {
      v562 = v552;
      v563 = v553;
      v564 = v554;
      v561 = v551;
      v560 = v550;
      *(_QWORD *)&v591[0] = 0x101010100D0D0D0DLL;
      v555 = xmmword_224687B20;
      v556 = xmmword_224687B30;
      v592[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 6, 7, 5, (uint64_t)v591, (uint64_t)&v555, (uint64_t)v592, COERCE_DOUBLE(0x13E0000017ELL), xmmword_224687B30);
    }
  }
  v353 = v499[22];
  if ((v353 & 0x80000000) != 0)
  {
    v356 = *v497;
    v357 = *(_DWORD *)(v219 + 1496);
    v358 = **v497;
    if (**v497)
      goto LABEL_970;
  }
  else
  {
    v354 = *(_QWORD *)(v219 + 2328);
    if (v353 >= (*(_QWORD *)(v219 + 2336) - v354) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v354 = *(_QWORD *)(v219 + 2328);
    }
    v355 = v354 + (v353 << 11);
    v356 = *v497;
    v357 = *(_DWORD *)(v355 + 1216);
    v358 = **v497;
    if (**v497)
    {
LABEL_970:
      v359 = v499[22];
      if ((v359 & 0x80000000) == 0)
        goto LABEL_971;
LABEL_1179:
      v361 = *(_DWORD *)(v219 + 1752);
      if (v358)
        goto LABEL_975;
      goto LABEL_1180;
    }
  }
  if ((v357 & 0x10000000) != 0)
    v421 = 0x40000000;
  else
    v421 = 0x80000000;
  if ((v357 & 0x20000000) != 0)
    v357 = v421;
  else
    v357 &= 0xCFFFFFFF;
  v359 = v499[22];
  if ((v359 & 0x80000000) != 0)
    goto LABEL_1179;
LABEL_971:
  v360 = *(_QWORD *)(v219 + 2328);
  if (v359 >= (*(_QWORD *)(v219 + 2336) - v360) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v360 = *(_QWORD *)(v219 + 2328);
    v356 = *v497;
    v358 = **v497;
  }
  v361 = *(_DWORD *)(v360 + (v359 << 11) + 1472);
  if (v358)
  {
LABEL_975:
    v362 = v499[22];
    if ((v362 & 0x80000000) == 0)
      goto LABEL_976;
LABEL_1187:
    v364 = *(_DWORD *)(v219 + 1528);
    if (v358)
      goto LABEL_980;
LABEL_1188:
    if ((v364 & 0x10000000) != 0)
      v423 = 0x40000000;
    else
      v423 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v364 = v423;
    else
      v364 &= 0xCFFFFFFF;
    v365 = v499[22];
    if ((v365 & 0x80000000) != 0)
      goto LABEL_1198;
    goto LABEL_1195;
  }
LABEL_1180:
  if ((v361 & 0x10000000) != 0)
    v422 = 0x40000000;
  else
    v422 = 0x80000000;
  if ((v361 & 0x20000000) != 0)
    v361 = v422;
  else
    v361 &= 0xCFFFFFFF;
  v362 = v499[22];
  if ((v362 & 0x80000000) != 0)
    goto LABEL_1187;
LABEL_976:
  v363 = *(_QWORD *)(v219 + 2328);
  if (v362 >= (*(_QWORD *)(v219 + 2336) - v363) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v363 = *(_QWORD *)(v219 + 2328);
    v356 = *v497;
    v358 = **v497;
  }
  v364 = *(_DWORD *)(v363 + (v362 << 11) + 1248);
  if (!v358)
    goto LABEL_1188;
LABEL_980:
  v365 = v499[22];
  if ((v365 & 0x80000000) != 0)
    goto LABEL_1198;
LABEL_1195:
  if (v365 >= (uint64_t)(*(_QWORD *)(v219 + 2336) - *(_QWORD *)(v219 + 2328)) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v356 = *v497;
  }
LABEL_1198:
  v424 = v499[25];
  if ((v424 & 0x80000000) != 0)
  {
    v426 = *(_DWORD *)(v219 + 1304);
    if (*v356)
      goto LABEL_1209;
    goto LABEL_1203;
  }
  v425 = *(_QWORD *)(v219 + 2328);
  if (v424 >= (*(_QWORD *)(v219 + 2336) - v425) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v425 = *(_QWORD *)(v219 + 2328);
    v356 = *v497;
  }
  v426 = *(_DWORD *)(v425 + (v424 << 11) + 1024);
  if (!*v356)
  {
LABEL_1203:
    if ((v426 & 0x10000000) != 0)
      v427 = 0x40000000;
    else
      v427 = 0x80000000;
    if ((v426 & 0x20000000) != 0)
      v426 = v427;
    else
      v426 &= 0xCFFFFFFF;
  }
LABEL_1209:
  v557 = v542;
  v558 = v543;
  v559 = v544;
  v556 = (float32x4_t)v541;
  v555 = v540;
  if ((v341 & 0x40000000) != 0)
  {
    v532 = v542;
    v533 = v543;
    v534 = v544;
    *(_QWORD *)&v585 = 0x1919161610100D0DLL;
    v531 = v541;
    v530 = v540;
    v525 = xmmword_224687B40;
    v526 = (__int128)xmmword_224687B50;
    *(_QWORD *)&v580 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v530, 7, 7, 5, (uint64_t)&v585, (uint64_t)&v525, (uint64_t)&v580, COERCE_DOUBLE(0x1BF0000017FLL), xmmword_224687B50);
    if ((v489 & 0x40000000) == 0)
    {
      v527 = v542;
      v528 = v543;
      v529 = v544;
      *(_QWORD *)&v580 = 0x101010100D0D0D0DLL;
      v526 = v541;
      v525 = v540;
      v585 = xmmword_224687B60;
      v586 = (__int128)xmmword_224687B70;
      *(_QWORD *)&v575 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v525, 7, 7, 5, (uint64_t)&v580, (uint64_t)&v585, (uint64_t)&v575, COERCE_DOUBLE(0x1BF0000017FLL), xmmword_224687B70);
      if (((v476 | v346) & 1) == 0)
      {
        v587 = v542;
        v588 = v543;
        v589 = v544;
        v585 = v540;
        v586 = v541;
        *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
        v580 = xmmword_224687B80;
        v581 = (__int128)xmmword_224687B90;
        *(_QWORD *)&v570 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v585, 7, 7, 5, (uint64_t)&v575, (uint64_t)&v580, (uint64_t)&v570, COERCE_DOUBLE(0x1BF0000017FLL), xmmword_224687B90);
        v428 = (v493 & 1) == 0 && ((v471 | v347) & 1) == 0;
        if ((v444 & 1) == 0 && v428)
        {
          v582 = v542;
          v583 = v543;
          v584 = v544;
          v581 = v541;
          v580 = v540;
          *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
          v575 = xmmword_224687BA0;
          v576 = (__int128)xmmword_224687BB0;
          *(_QWORD *)&v565 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v580, 7, 7, 5, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x13F0000017FLL), xmmword_224687BB0);
        }
      }
      v429 = (v466 & 1) == 0 && ((v471 | v347) & 1) == 0;
      if (v429 && (v348 & 1) == 0)
      {
        v577 = v557;
        v578 = v558;
        v579 = v559;
        *(_QWORD *)&v565 = 0x10100D0D10100D0DLL;
        v576 = (__int128)v556;
        v575 = v555;
        v570 = xmmword_224687BC0;
        v571 = (__int128)xmmword_224687BD0;
        *(_QWORD *)&v560 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v575, 7, 7, 5, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x13F0000017FLL), xmmword_224687BD0);
      }
    }
    v430 = (v364 & 0x40000000 | v347 & 1) == 0;
    if (!(v361 & 0x40000000 | v346 & 1))
    {
      v572 = v557;
      v573 = v558;
      v574 = v559;
      *(_QWORD *)&v560 = 0x16160D0D16160D0DLL;
      v571 = (__int128)v556;
      v570 = v555;
      v565 = xmmword_224687BE0;
      v566 = (__int128)xmmword_224687BF0;
      *(_QWORD *)&v591[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v570, 7, 7, 5, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)v591, COERCE_DOUBLE(0x1BF0000017FLL), xmmword_224687BF0);
      v431 = (v357 & 0x40000000) == 0 && v430;
      if ((v493 & 1) == 0 && v431)
      {
        v567 = v557;
        v568 = v558;
        v569 = v559;
        *(_QWORD *)&v591[0] = 0x161616160D0D0D0DLL;
        v566 = (__int128)v556;
        v565 = v555;
        v560 = xmmword_224687C00;
        v561 = (__int128)xmmword_224687C10;
        v592[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 7, 5, (uint64_t)v591, (uint64_t)&v560, (uint64_t)v592, COERCE_DOUBLE(0x13F0000017FLL), xmmword_224687C10);
      }
    }
    v432 = (v348 & 1) == 0 && v430;
    if (v432 && (v426 & 0x40000000) == 0)
    {
      v562 = v557;
      v563 = v558;
      v564 = v559;
      v592[0] = 0x1919101016160D0DLL;
      v561 = (__int128)v556;
      v560 = v555;
      v591[0] = xmmword_224687C20;
      v591[1] = xmmword_224687C30;
      v590 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v560, 7, 7, 5, (uint64_t)v592, (uint64_t)v591, (uint64_t)&v590, COERCE_DOUBLE(0x13F0000017FLL), xmmword_224687C30);
    }
  }
  v525 = v451;
  *(_QWORD *)&v526 = v218;
  *(_QWORD *)&v585 = v219;
  *((_QWORD *)&v585 + 1) = v499;
  *(_QWORD *)&v586 = v497;
  v534 = v504;
  v533 = v503;
  v532 = v502;
  v530 = v500;
  v531 = v501;
  return sub_223E2D1AC((unsigned __int8 ***)&v525, (uint64_t *)&v585, &v530);
}

unint64_t sub_223E2D1AC(unsigned __int8 ***a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _BYTE **v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned int v47;
  uint64_t v48;
  _BYTE **v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE **v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  _BYTE **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned __int8 **v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  _BOOL4 v114;
  _BOOL4 v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  _BOOL4 v135;
  _BOOL4 v136;
  _BOOL4 v137;
  _BOOL4 v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  _BOOL4 v157;
  _BOOL4 v158;
  _BOOL4 v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  _BOOL4 v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  _BOOL4 v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  unsigned int v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  unsigned int v247;
  _BOOL4 v248;
  _BOOL4 v249;
  _BOOL4 v250;
  _BOOL4 v251;
  unsigned __int8 **v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unint64_t v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  _BOOL4 v324;
  _BOOL4 v325;
  _BOOL4 v326;
  _BOOL4 v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  _BOOL4 v343;
  _BOOL4 v344;
  _BOOL4 v345;
  _BOOL4 v346;
  _BOOL4 v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  _BOOL4 v362;
  _BOOL4 v363;
  _BOOL4 v364;
  _BOOL4 v365;
  _BOOL4 v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  _BOOL4 v382;
  _BOOL4 v383;
  _BOOL4 v384;
  _BOOL4 v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  int v392;
  unsigned int v393;
  int v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  int v398;
  _BOOL4 v399;
  _BOOL4 v400;
  _BOOL4 v401;
  _BOOL4 v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  _BOOL4 v418;
  _BOOL4 v419;
  _BOOL4 v420;
  _BOOL4 v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _BYTE *v425;
  unsigned int v426;
  int v427;
  unint64_t v428;
  uint64_t v429;
  unsigned int v430;
  unint64_t v431;
  uint64_t v432;
  unsigned int v433;
  unint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  uint64_t v438;
  unint64_t v439;
  unsigned int v440;
  unsigned int v441;
  _BOOL4 v442;
  _BOOL4 v443;
  _BOOL4 v444;
  _BOOL4 v445;
  _BOOL4 v446;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  __int128 v471;
  unsigned __int8 ***v472;
  unsigned int v473;
  unsigned int v474;
  _OWORD *v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  _BYTE **v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned __int8 **v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  _BYTE **v516;
  uint64_t v517;
  __int128 v518;
  float32x4_t v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  float32x4_t v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  float32x4_t v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  float32x4_t v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  float32x4_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  float32x4_t v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  float32x4_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  float32x4_t v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  float32x4_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  float32x4_t v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  float32x4_t v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  float32x4_t v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  float32x4_t v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  float32x4_t v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  float32x4_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  float32x4_t v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  float32x4_t v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  _OWORD v604[2];
  _QWORD v605[3];

  v605[1] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = (_BYTE **)a2[2];
  v8 = *(unsigned int *)(a2[1] + 40);
  if ((v8 & 0x80000000) != 0)
  {
    v10 = v6 + 280;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 2328);
    if (v8 >= (*(_QWORD *)(v6 + 2336) - v9) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v9 = *(_QWORD *)(v6 + 2328);
    }
    v10 = v9 + (v8 << 11);
  }
  v11 = *(_DWORD *)(v10 + 1504);
  v12 = v11 & 0xCFFFFFFF;
  if ((v11 & 0x10000000) != 0)
    v13 = 0x40000000;
  else
    v13 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v12 = v13;
  if (**v7)
    v14 = v11;
  else
    v14 = v12;
  v15 = *a2;
  v16 = (_BYTE **)a2[2];
  v17 = *(unsigned int *)(a2[1] + 40);
  v506 = v14;
  if ((v17 & 0x80000000) != 0)
  {
    v19 = v15 + 280;
  }
  else
  {
    v18 = *(_QWORD *)(v15 + 2328);
    if (v17 >= (*(_QWORD *)(v15 + 2336) - v18) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v18 = *(_QWORD *)(v15 + 2328);
    }
    v19 = v18 + (v17 << 11);
  }
  v20 = *(_DWORD *)(v19 + 1760);
  v21 = v20 & 0xCFFFFFFF;
  if ((v20 & 0x10000000) != 0)
    v22 = 0x40000000;
  else
    v22 = 0x80000000;
  if ((v20 & 0x20000000) != 0)
    v21 = v22;
  if (!**v16)
    v20 = v21;
  v501 = v20;
  v23 = a1[2];
  v24 = *a1;
  v25 = *((_DWORD *)v23 + 320);
  if (***a1)
  {
    v26 = *((_DWORD *)v23 + 384);
    v27 = *((_DWORD *)v23 + 328);
  }
  else
  {
    if ((v25 & 0x20000000) != 0)
      v25 *= 4;
    v28 = *((_DWORD *)v23 + 384);
    if ((v28 & 0x20000000) != 0)
      v26 = 4 * v28;
    else
      v26 = *((_DWORD *)v23 + 384);
    v29 = *((_DWORD *)v23 + 328);
    if ((v29 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v29 & 0x20000000) != 0)
      v27 = v30;
    else
      v27 = v29 & 0xCFFFFFFF;
  }
  v31 = *a2;
  v32 = (unsigned int *)a2[1];
  v516 = (_BYTE **)a2[2];
  v472 = a1;
  v475 = a3;
  v512 = v26;
  v495 = v27;
  if ((v26 & 0x40000000) == 0)
  {
    v484 = 0;
    v489 = 0;
    v33 = 0;
    v34 = 0;
    v464 = 0;
    goto LABEL_110;
  }
  v35 = v32[1];
  if ((v35 & 0x80000000) != 0)
  {
    v37 = v31 + 280;
  }
  else
  {
    v36 = *(_QWORD *)(v31 + 2328);
    if (v35 >= (*(_QWORD *)(v31 + 2336) - v36) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v36 = *(_QWORD *)(v31 + 2328);
    }
    v37 = v36 + (v35 << 11);
  }
  v38 = *(_DWORD *)(v37 + 1532);
  v39 = v38 & 0xCFFFFFFF;
  if ((v38 & 0x10000000) != 0)
    v40 = 0x40000000;
  else
    v40 = 0x80000000;
  if ((v38 & 0x20000000) != 0)
    v39 = v40;
  if (**v516)
    v41 = v38;
  else
    v41 = v39;
  v42 = *a2;
  v43 = (_BYTE **)a2[2];
  v44 = *(unsigned int *)(a2[1] + 4);
  if ((v44 & 0x80000000) != 0)
  {
    v65 = *v43;
    v47 = *(_DWORD *)(v42 + 2068);
    if (*v65)
      goto LABEL_62;
  }
  else
  {
    v45 = *(_QWORD *)(v42 + 2328);
    if (v44 >= (*(_QWORD *)(v42 + 2336) - v45) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v45 = *(_QWORD *)(v42 + 2328);
    }
    v46 = *v43;
    v47 = *(_DWORD *)(v45 + (v44 << 11) + 1788);
    if (*v46)
    {
LABEL_62:
      v48 = *a2;
      v49 = (_BYTE **)a2[2];
      v50 = *(unsigned int *)(a2[1] + 16);
      if ((v50 & 0x80000000) == 0)
        goto LABEL_63;
LABEL_85:
      v67 = *v49;
      v53 = *(_DWORD *)(v48 + 1588);
      if (*v67)
        goto LABEL_67;
      goto LABEL_86;
    }
  }
  if ((v47 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v47 & 0x20000000) != 0)
    v47 = v66;
  else
    v47 &= 0xCFFFFFFF;
  v48 = *a2;
  v49 = (_BYTE **)a2[2];
  v50 = *(unsigned int *)(a2[1] + 16);
  if ((v50 & 0x80000000) != 0)
    goto LABEL_85;
LABEL_63:
  v51 = *(_QWORD *)(v48 + 2328);
  if (v50 >= (*(_QWORD *)(v48 + 2336) - v51) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1299;
    }
    v51 = *(_QWORD *)(v48 + 2328);
  }
  v52 = *v49;
  v53 = *(_DWORD *)(v51 + (v50 << 11) + 1308);
  if (*v52)
  {
LABEL_67:
    v54 = *a2;
    v55 = (_BYTE **)a2[2];
    v56 = *(unsigned int *)(a2[1] + 16);
    if ((v56 & 0x80000000) == 0)
      goto LABEL_68;
LABEL_93:
    v69 = *v55;
    v59 = *(_DWORD *)(v54 + 1844);
    if (*v69)
      goto LABEL_72;
LABEL_94:
    if ((v59 & 0x10000000) != 0)
      v70 = 0x40000000;
    else
      v70 = 0x80000000;
    if ((v59 & 0x20000000) != 0)
      v59 = v70;
    else
      v59 &= 0xCFFFFFFF;
    v60 = *a2;
    v61 = (_BYTE **)a2[2];
    v62 = *(unsigned int *)(a2[1] + 16);
    if ((v62 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_101;
  }
LABEL_86:
  if ((v53 & 0x10000000) != 0)
    v68 = 0x40000000;
  else
    v68 = 0x80000000;
  if ((v53 & 0x20000000) != 0)
    v53 = v68;
  else
    v53 &= 0xCFFFFFFF;
  v54 = *a2;
  v55 = (_BYTE **)a2[2];
  v56 = *(unsigned int *)(a2[1] + 16);
  if ((v56 & 0x80000000) != 0)
    goto LABEL_93;
LABEL_68:
  v57 = *(_QWORD *)(v54 + 2328);
  if (v56 >= (*(_QWORD *)(v54 + 2336) - v57) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1299;
    }
    v57 = *(_QWORD *)(v54 + 2328);
  }
  v58 = *v55;
  v59 = *(_DWORD *)(v57 + (v56 << 11) + 1564);
  if (!*v58)
    goto LABEL_94;
LABEL_72:
  v60 = *a2;
  v61 = (_BYTE **)a2[2];
  v62 = *(unsigned int *)(a2[1] + 16);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_73:
    v63 = *(_QWORD *)(v60 + 2328);
    if (v62 >= (*(_QWORD *)(v60 + 2336) - v63) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v63 = *(_QWORD *)(v60 + 2328);
    }
    v64 = v63 + (v62 << 11);
    goto LABEL_102;
  }
LABEL_101:
  v64 = v60 + 280;
LABEL_102:
  v464 = (v41 >> 30) & 1;
  v489 = (v47 >> 30) & 1;
  v34 = (v53 >> 30) & 1;
  v33 = (v59 >> 30) & 1;
  v71 = *(_DWORD *)(v64 + 1340);
  if (!**v61)
  {
    if ((v71 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v71 & 0x20000000) != 0)
      v71 = v72;
    else
      v71 &= 0xCFFFFFFF;
  }
  v484 = (v71 >> 30) & 1;
  a3 = v475;
  v24 = *v472;
  v23 = v472[2];
  v31 = *a2;
  v32 = (unsigned int *)a2[1];
  v516 = (_BYTE **)a2[2];
LABEL_110:
  v525 = a3[2];
  v526 = a3[3];
  v527 = a3[4];
  v523 = *a3;
  v524 = *((float32x4_t *)a3 + 1);
  v73 = v32[10];
  if ((v73 & 0x80000000) != 0)
  {
    v75 = *(_DWORD *)(v31 + 1788);
    v76 = **v516;
    if (**v516)
      goto LABEL_115;
  }
  else
  {
    v74 = *(_QWORD *)(v31 + 2328);
    if (v73 >= (*(_QWORD *)(v31 + 2336) - v74) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1299;
      }
      v74 = *(_QWORD *)(v31 + 2328);
    }
    v75 = *(_DWORD *)(v74 + (v73 << 11) + 1508);
    v76 = **v516;
    if (**v516)
    {
LABEL_115:
      v77 = v32[10];
      if ((v77 & 0x80000000) == 0)
        goto LABEL_116;
LABEL_136:
      v79 = *(_DWORD *)(v31 + 2044);
      if (!v76)
        goto LABEL_120;
      goto LABEL_126;
    }
  }
  if ((v75 & 0x10000000) != 0)
    v83 = 0x40000000;
  else
    v83 = 0x80000000;
  if ((v75 & 0x20000000) != 0)
    v75 = v83;
  else
    v75 &= 0xCFFFFFFF;
  v77 = v32[10];
  if ((v77 & 0x80000000) != 0)
    goto LABEL_136;
LABEL_116:
  v78 = *(_QWORD *)(v31 + 2328);
  if (v77 < (*(_QWORD *)(v31 + 2336) - v78) >> 11)
    goto LABEL_119;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
LABEL_1299:
    abort();
  }
  v78 = *(_QWORD *)(v31 + 2328);
  v76 = **v516;
LABEL_119:
  v79 = *(_DWORD *)(v78 + (v77 << 11) + 1764);
  if (!v76)
  {
LABEL_120:
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v79 = v80;
    else
      v79 &= 0xCFFFFFFF;
  }
LABEL_126:
  v459 = v506 >> 30;
  v81 = *((_DWORD *)v23 + 321);
  if (**v24)
  {
    v507 = *((_DWORD *)v23 + 385);
    v82 = *((_DWORD *)v23 + 329);
  }
  else
  {
    if ((v81 & 0x10000000) != 0)
      v84 = 0x40000000;
    else
      v84 = 0x80000000;
    if ((v81 & 0x20000000) != 0)
      v81 = v84;
    else
      v81 &= 0xCFFFFFFF;
    v85 = *((_DWORD *)v23 + 385);
    if ((v85 & 0x10000000) != 0)
      v86 = 0x40000000;
    else
      v86 = 0x80000000;
    if ((v85 & 0x20000000) != 0)
      v87 = v86;
    else
      v87 = v85 & 0xCFFFFFFF;
    v507 = v87;
    v88 = *((_DWORD *)v23 + 329);
    if ((v88 & 0x10000000) != 0)
      v89 = 0x40000000;
    else
      v89 = 0x80000000;
    if ((v88 & 0x20000000) != 0)
      v82 = v89;
    else
      v82 = v88 & 0xCFFFFFFF;
  }
  v455 = v75 >> 30;
  v478 = v501 >> 30;
  v90 = v25 >> 30;
  v91 = v495 >> 30;
  v496 = v81 >> 30;
  v502 = v79 >> 30;
  v469 = v82 >> 30;
  v92 = v24;
  if ((v512 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224687C40;
    v539 = xmmword_224687C50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C000000180), xmmword_224687C50);
    if (!v33)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      *(_QWORD *)&v593 = 0x4040D0D04040D0DLL;
      v539 = v524;
      v538 = v523;
      v598 = xmmword_224687C60;
      v599 = xmmword_224687C70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C000000180), xmmword_224687C70);
      if (!(v489 | v478 & 1))
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0x10104040A0A0D0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_224687C80;
        v594 = xmmword_224687C90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C000000180), xmmword_224687C90);
        v93 = (v459 & 1) == 0 && (v34 | v90 & 1) == 0;
        if (!v464 && v93)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0x1010A0A04040D0DLL;
          v588 = xmmword_224687CA0;
          v589 = xmmword_224687CB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14000000180), xmmword_224687CB0);
        }
      }
      if (v484)
        v94 = 0;
      else
        v94 = (v34 | v90 & 1) == 0;
      if (v94 && (v91 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v524;
        v588 = v523;
        v583 = xmmword_224687CC0;
        v584 = xmmword_224687CD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14000000180), xmmword_224687CD0);
      }
    }
    if (((v478 | v502) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224687CE0;
      v579 = xmmword_224687CF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C000000180), xmmword_224687CF0);
      v95 = (v455 & 1) == 0 && ((v90 | v496) & 1) == 0;
      if ((v459 & 1) == 0 && v95)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224687D00;
        v574 = xmmword_224687D10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14000000180), xmmword_224687D10);
      }
    }
    v96 = (v91 & 1) == 0 && ((v90 | v496) & 1) == 0;
    if (v96 && (v469 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224687D20;
      v569 = xmmword_224687D30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14000000180), xmmword_224687D30);
    }
  }
  v97 = v32[10];
  if ((v97 & 0x80000000) != 0)
  {
    v99 = *(_DWORD *)(v31 + 1792);
    v100 = **v516;
    if (**v516)
      goto LABEL_189;
  }
  else
  {
    v98 = *(_QWORD *)(v31 + 2328);
    if (v97 >= (*(_QWORD *)(v31 + 2336) - v98) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v98 = *(_QWORD *)(v31 + 2328);
    }
    v99 = *(_DWORD *)(v98 + (v97 << 11) + 1512);
    v100 = **v516;
    if (**v516)
    {
LABEL_189:
      v101 = v32[10];
      if ((v101 & 0x80000000) == 0)
        goto LABEL_190;
LABEL_204:
      v103 = *(_DWORD *)(v31 + 2048);
      if (v100)
        goto LABEL_194;
LABEL_205:
      if ((v103 & 0x10000000) != 0)
        v108 = 0x40000000;
      else
        v108 = 0x80000000;
      if ((v103 & 0x20000000) != 0)
        v103 = v108;
      else
        v103 &= 0xCFFFFFFF;
      v104 = *((_DWORD *)v23 + 322);
      if (**v92)
        goto LABEL_195;
      goto LABEL_212;
    }
  }
  if ((v99 & 0x10000000) != 0)
    v107 = 0x40000000;
  else
    v107 = 0x80000000;
  if ((v99 & 0x20000000) != 0)
    v99 = v107;
  else
    v99 &= 0xCFFFFFFF;
  v101 = v32[10];
  if ((v101 & 0x80000000) != 0)
    goto LABEL_204;
LABEL_190:
  v102 = *(_QWORD *)(v31 + 2328);
  if (v101 >= (*(_QWORD *)(v31 + 2336) - v102) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v102 = *(_QWORD *)(v31 + 2328);
    v100 = **v516;
  }
  v103 = *(_DWORD *)(v102 + (v101 << 11) + 1768);
  if (!v100)
    goto LABEL_205;
LABEL_194:
  v104 = *((_DWORD *)v23 + 322);
  if (**v92)
  {
LABEL_195:
    v105 = *((_DWORD *)v23 + 386);
    v106 = *((_DWORD *)v23 + 330);
    goto LABEL_230;
  }
LABEL_212:
  if ((v104 & 0x10000000) != 0)
    v109 = 0x40000000;
  else
    v109 = 0x80000000;
  if ((v104 & 0x20000000) != 0)
    v104 = v109;
  else
    v104 &= 0xCFFFFFFF;
  v110 = *((_DWORD *)v23 + 386);
  if ((v110 & 0x10000000) != 0)
    v111 = 0x40000000;
  else
    v111 = 0x80000000;
  if ((v110 & 0x20000000) != 0)
    v105 = v111;
  else
    v105 = v110 & 0xCFFFFFFF;
  v112 = *((_DWORD *)v23 + 330);
  if ((v112 & 0x10000000) != 0)
    v113 = 0x40000000;
  else
    v113 = 0x80000000;
  if ((v112 & 0x20000000) != 0)
    v106 = v113;
  else
    v106 = v112 & 0xCFFFFFFF;
LABEL_230:
  v453 = v99 >> 30;
  v485 = v104 >> 30;
  v490 = v103 >> 30;
  v465 = v106 >> 30;
  if ((v507 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224687D40;
    v539 = xmmword_224687D50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C100000181), xmmword_224687D50);
    if ((v512 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224687D60;
      v599 = xmmword_224687D70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C100000181), xmmword_224687D70);
      if (((v478 | v502) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224687D80;
        v594 = xmmword_224687D90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C100000181), xmmword_224687D90);
        v114 = (v455 & 1) == 0 && ((v90 | v496) & 1) == 0;
        if ((v459 & 1) == 0 && v114)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224687DA0;
          v589 = xmmword_224687DB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14100000181), xmmword_224687DB0);
        }
      }
      v115 = (v91 & 1) == 0 && ((v90 | v496) & 1) == 0;
      if (v115 && (v469 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224687DC0;
        v584 = xmmword_224687DD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14100000181), xmmword_224687DD0);
      }
    }
    if (((v502 | v490) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224687DE0;
      v579 = xmmword_224687DF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C100000181), xmmword_224687DF0);
      v116 = (v99 & 0x40000000) == 0 && ((v496 | v485) & 1) == 0;
      if ((v455 & 1) == 0 && v116)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224687E00;
        v574 = xmmword_224687E10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14100000181), xmmword_224687E10);
      }
    }
    v117 = (v469 & 1) == 0 && ((v496 | v485) & 1) == 0;
    if (v117 && (v465 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224687E20;
      v569 = xmmword_224687E30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14100000181), xmmword_224687E30);
    }
  }
  v118 = v32[10];
  if ((v118 & 0x80000000) != 0)
  {
    v120 = *(_DWORD *)(v31 + 1796);
    v121 = **v516;
    if (**v516)
      goto LABEL_263;
  }
  else
  {
    v119 = *(_QWORD *)(v31 + 2328);
    if (v118 >= (*(_QWORD *)(v31 + 2336) - v119) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v119 = *(_QWORD *)(v31 + 2328);
    }
    v120 = *(_DWORD *)(v119 + (v118 << 11) + 1516);
    v121 = **v516;
    if (**v516)
    {
LABEL_263:
      v122 = v32[10];
      if ((v122 & 0x80000000) == 0)
        goto LABEL_264;
LABEL_278:
      v124 = *(_DWORD *)(v31 + 2052);
      if (v121)
        goto LABEL_268;
LABEL_279:
      if ((v124 & 0x10000000) != 0)
        v129 = 0x40000000;
      else
        v129 = 0x80000000;
      if ((v124 & 0x20000000) != 0)
        v124 = v129;
      else
        v124 &= 0xCFFFFFFF;
      v125 = *((_DWORD *)v23 + 323);
      if (**v92)
        goto LABEL_269;
      goto LABEL_286;
    }
  }
  if ((v120 & 0x10000000) != 0)
    v128 = 0x40000000;
  else
    v128 = 0x80000000;
  if ((v120 & 0x20000000) != 0)
    v120 = v128;
  else
    v120 &= 0xCFFFFFFF;
  v122 = v32[10];
  if ((v122 & 0x80000000) != 0)
    goto LABEL_278;
LABEL_264:
  v123 = *(_QWORD *)(v31 + 2328);
  if (v122 >= (*(_QWORD *)(v31 + 2336) - v123) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v123 = *(_QWORD *)(v31 + 2328);
    v121 = **v516;
  }
  v124 = *(_DWORD *)(v123 + (v122 << 11) + 1772);
  if (!v121)
    goto LABEL_279;
LABEL_268:
  v125 = *((_DWORD *)v23 + 323);
  if (**v92)
  {
LABEL_269:
    v126 = *((_DWORD *)v23 + 387);
    v127 = *((_DWORD *)v23 + 331);
    goto LABEL_304;
  }
LABEL_286:
  if ((v125 & 0x10000000) != 0)
    v130 = 0x40000000;
  else
    v130 = 0x80000000;
  if ((v125 & 0x20000000) != 0)
    v125 = v130;
  else
    v125 &= 0xCFFFFFFF;
  v131 = *((_DWORD *)v23 + 387);
  if ((v131 & 0x10000000) != 0)
    v132 = 0x40000000;
  else
    v132 = 0x80000000;
  if ((v131 & 0x20000000) != 0)
    v126 = v132;
  else
    v126 = v131 & 0xCFFFFFFF;
  v133 = *((_DWORD *)v23 + 331);
  if ((v133 & 0x10000000) != 0)
    v134 = 0x40000000;
  else
    v134 = 0x80000000;
  if ((v133 & 0x20000000) != 0)
    v127 = v134;
  else
    v127 = v133 & 0xCFFFFFFF;
LABEL_304:
  v452 = v120 >> 30;
  v513 = v124 >> 30;
  v479 = v125 >> 30;
  v460 = v127 >> 30;
  if ((v105 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224687E40;
    v539 = xmmword_224687E50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C200000182), xmmword_224687E50);
    if ((v507 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224687E60;
      v599 = xmmword_224687E70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C200000182), xmmword_224687E70);
      if (((v502 | v490) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224687E80;
        v594 = xmmword_224687E90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C200000182), xmmword_224687E90);
        v135 = (v453 & 1) == 0 && ((v496 | v485) & 1) == 0;
        if ((v455 & 1) == 0 && v135)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224687EA0;
          v589 = xmmword_224687EB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14200000182), xmmword_224687EB0);
        }
      }
      v136 = (v469 & 1) == 0 && ((v496 | v485) & 1) == 0;
      if (v136 && (v465 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224687EC0;
        v584 = xmmword_224687ED0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14200000182), xmmword_224687ED0);
      }
    }
    if (((v490 | v513) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224687EE0;
      v579 = xmmword_224687EF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C200000182), xmmword_224687EF0);
      v137 = (v120 & 0x40000000) == 0 && ((v485 | v479) & 1) == 0;
      if ((v453 & 1) == 0 && v137)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224687F00;
        v574 = xmmword_224687F10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14200000182), xmmword_224687F10);
      }
    }
    v138 = (v465 & 1) == 0 && ((v485 | v479) & 1) == 0;
    if (v138 && (v460 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224687F20;
      v569 = xmmword_224687F30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14200000182), xmmword_224687F30);
    }
  }
  v139 = v32[10];
  if ((v139 & 0x80000000) != 0)
  {
    v141 = *(_DWORD *)(v31 + 1800);
    v142 = **v516;
    if (**v516)
      goto LABEL_337;
  }
  else
  {
    v140 = *(_QWORD *)(v31 + 2328);
    if (v139 >= (*(_QWORD *)(v31 + 2336) - v140) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v140 = *(_QWORD *)(v31 + 2328);
    }
    v141 = *(_DWORD *)(v140 + (v139 << 11) + 1520);
    v142 = **v516;
    if (**v516)
    {
LABEL_337:
      v143 = v32[10];
      if ((v143 & 0x80000000) == 0)
        goto LABEL_338;
LABEL_352:
      v145 = *(_DWORD *)(v31 + 2056);
      if (v142)
        goto LABEL_342;
LABEL_353:
      if ((v145 & 0x10000000) != 0)
        v151 = 0x40000000;
      else
        v151 = 0x80000000;
      if ((v145 & 0x20000000) != 0)
        v145 = v151;
      else
        v145 &= 0xCFFFFFFF;
      v146 = v105;
      v147 = *((_DWORD *)v23 + 324);
      if (**v92)
        goto LABEL_343;
      goto LABEL_360;
    }
  }
  if ((v141 & 0x10000000) != 0)
    v150 = 0x40000000;
  else
    v150 = 0x80000000;
  if ((v141 & 0x20000000) != 0)
    v141 = v150;
  else
    v141 &= 0xCFFFFFFF;
  v143 = v32[10];
  if ((v143 & 0x80000000) != 0)
    goto LABEL_352;
LABEL_338:
  v144 = *(_QWORD *)(v31 + 2328);
  if (v143 >= (*(_QWORD *)(v31 + 2336) - v144) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v144 = *(_QWORD *)(v31 + 2328);
    v142 = **v516;
  }
  v145 = *(_DWORD *)(v144 + (v143 << 11) + 1776);
  if (!v142)
    goto LABEL_353;
LABEL_342:
  v146 = v105;
  v147 = *((_DWORD *)v23 + 324);
  if (**v92)
  {
LABEL_343:
    v148 = *((_DWORD *)v23 + 388);
    v149 = *((_DWORD *)v23 + 332);
    goto LABEL_378;
  }
LABEL_360:
  if ((v147 & 0x10000000) != 0)
    v152 = 0x40000000;
  else
    v152 = 0x80000000;
  if ((v147 & 0x20000000) != 0)
    v147 = v152;
  else
    v147 &= 0xCFFFFFFF;
  v153 = *((_DWORD *)v23 + 388);
  if ((v153 & 0x10000000) != 0)
    v154 = 0x40000000;
  else
    v154 = 0x80000000;
  if ((v153 & 0x20000000) != 0)
    v148 = v154;
  else
    v148 = v153 & 0xCFFFFFFF;
  v155 = *((_DWORD *)v23 + 332);
  if ((v155 & 0x10000000) != 0)
    v156 = 0x40000000;
  else
    v156 = 0x80000000;
  if ((v155 & 0x20000000) != 0)
    v149 = v156;
  else
    v149 = v155 & 0xCFFFFFFF;
LABEL_378:
  v456 = v141 >> 30;
  v508 = v145 >> 30;
  v503 = v147 >> 30;
  v470 = v149 >> 30;
  if ((v126 & 0x40000000) != 0)
  {
    v157 = (v146 & 0x40000000) == 0;
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224687F40;
    v539 = xmmword_224687F50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C300000183), xmmword_224687F50);
    if (v157)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224687F60;
      v599 = xmmword_224687F70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C300000183), xmmword_224687F70);
      if (((v490 | v513) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224687F80;
        v594 = xmmword_224687F90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C300000183), xmmword_224687F90);
        v158 = (v452 & 1) == 0 && ((v485 | v479) & 1) == 0;
        if ((v453 & 1) == 0 && v158)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_224687FA0;
          v589 = xmmword_224687FB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14300000183), xmmword_224687FB0);
        }
      }
      v159 = (v465 & 1) == 0 && ((v485 | v479) & 1) == 0;
      if (v159 && (v460 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224687FC0;
        v584 = xmmword_224687FD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14300000183), xmmword_224687FD0);
      }
    }
    if (((v513 | v508) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_224687FE0;
      v579 = xmmword_224687FF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C300000183), xmmword_224687FF0);
      v160 = (v456 & 1) == 0 && ((v479 | v503) & 1) == 0;
      if ((v452 & 1) == 0 && v160)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224688000;
        v574 = xmmword_224688010;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14300000183), xmmword_224688010);
      }
    }
    v161 = (v460 & 1) == 0 && ((v479 | v503) & 1) == 0;
    if (v161 && (v470 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688020;
      v569 = xmmword_224688030;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14300000183), xmmword_224688030);
    }
  }
  v162 = v32[10];
  if ((v162 & 0x80000000) != 0)
  {
    v164 = *(_DWORD *)(v31 + 1804);
    v165 = **v516;
    if (**v516)
      goto LABEL_411;
  }
  else
  {
    v163 = *(_QWORD *)(v31 + 2328);
    if (v162 >= (*(_QWORD *)(v31 + 2336) - v163) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v163 = *(_QWORD *)(v31 + 2328);
    }
    v164 = *(_DWORD *)(v163 + (v162 << 11) + 1524);
    v165 = **v516;
    if (**v516)
    {
LABEL_411:
      v166 = v32[10];
      if ((v166 & 0x80000000) == 0)
        goto LABEL_412;
LABEL_426:
      v168 = *(_DWORD *)(v31 + 2060);
      if (v165)
        goto LABEL_416;
LABEL_427:
      if ((v168 & 0x10000000) != 0)
        v173 = 0x40000000;
      else
        v173 = 0x80000000;
      if ((v168 & 0x20000000) != 0)
        v168 = v173;
      else
        v168 &= 0xCFFFFFFF;
      v169 = *((_DWORD *)v23 + 325);
      if (**v92)
        goto LABEL_417;
      goto LABEL_434;
    }
  }
  if ((v164 & 0x10000000) != 0)
    v172 = 0x40000000;
  else
    v172 = 0x80000000;
  if ((v164 & 0x20000000) != 0)
    v164 = v172;
  else
    v164 &= 0xCFFFFFFF;
  v166 = v32[10];
  if ((v166 & 0x80000000) != 0)
    goto LABEL_426;
LABEL_412:
  v167 = *(_QWORD *)(v31 + 2328);
  if (v166 >= (*(_QWORD *)(v31 + 2336) - v167) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v167 = *(_QWORD *)(v31 + 2328);
    v165 = **v516;
  }
  v168 = *(_DWORD *)(v167 + (v166 << 11) + 1780);
  if (!v165)
    goto LABEL_427;
LABEL_416:
  v169 = *((_DWORD *)v23 + 325);
  if (**v92)
  {
LABEL_417:
    v170 = *((_DWORD *)v23 + 389);
    v171 = *((_DWORD *)v23 + 333);
    goto LABEL_452;
  }
LABEL_434:
  if ((v169 & 0x10000000) != 0)
    v174 = 0x40000000;
  else
    v174 = 0x80000000;
  if ((v169 & 0x20000000) != 0)
    v169 = v174;
  else
    v169 &= 0xCFFFFFFF;
  v175 = *((_DWORD *)v23 + 389);
  if ((v175 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v175 & 0x20000000) != 0)
    v170 = v176;
  else
    v170 = v175 & 0xCFFFFFFF;
  v177 = *((_DWORD *)v23 + 333);
  if ((v177 & 0x10000000) != 0)
    v178 = 0x40000000;
  else
    v178 = 0x80000000;
  if ((v177 & 0x20000000) != 0)
    v171 = v178;
  else
    v171 = v177 & 0xCFFFFFFF;
LABEL_452:
  v454 = v164 >> 30;
  v491 = v169 >> 30;
  v497 = v168 >> 30;
  v179 = v171 >> 30;
  if ((v148 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688040;
    v539 = xmmword_224688050;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C400000184), xmmword_224688050);
    if ((v126 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688060;
      v599 = xmmword_224688070;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C400000184), xmmword_224688070);
      if (((v513 | v508) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224688080;
        v594 = xmmword_224688090;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C400000184), xmmword_224688090);
        v180 = (v456 & 1) == 0 && ((v479 | v503) & 1) == 0;
        if ((v452 & 1) == 0 && v180)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246880A0;
          v589 = xmmword_2246880B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14400000184), xmmword_2246880B0);
        }
      }
      v181 = (v460 & 1) == 0 && ((v479 | v503) & 1) == 0;
      if (v181 && (v470 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246880C0;
        v584 = xmmword_2246880D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14400000184), xmmword_2246880D0);
      }
    }
    if (((v508 | v497) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246880E0;
      v579 = xmmword_2246880F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C400000184), xmmword_2246880F0);
      v182 = (v164 & 0x40000000) == 0 && ((v503 | v491) & 1) == 0;
      if ((v456 & 1) == 0 && v182)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        v579 = v524;
        v578 = v523;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224688100;
        v574 = xmmword_224688110;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14400000184), xmmword_224688110);
      }
    }
    v183 = (v470 & 1) == 0 && ((v503 | v491) & 1) == 0;
    if (v183 && (v179 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688120;
      v569 = xmmword_224688130;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14400000184), xmmword_224688130);
    }
  }
  v184 = v32[10];
  if ((v184 & 0x80000000) != 0)
  {
    v186 = *(_DWORD *)(v31 + 1808);
    v187 = **v516;
    if (**v516)
      goto LABEL_485;
  }
  else
  {
    v185 = *(_QWORD *)(v31 + 2328);
    if (v184 >= (*(_QWORD *)(v31 + 2336) - v185) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v185 = *(_QWORD *)(v31 + 2328);
    }
    v186 = *(_DWORD *)(v185 + (v184 << 11) + 1528);
    v187 = **v516;
    if (**v516)
    {
LABEL_485:
      v188 = v32[10];
      if ((v188 & 0x80000000) == 0)
        goto LABEL_486;
LABEL_500:
      v190 = *(_DWORD *)(v31 + 2064);
      if (v187)
        goto LABEL_490;
LABEL_501:
      if ((v190 & 0x10000000) != 0)
        v194 = 0x40000000;
      else
        v194 = 0x80000000;
      if ((v190 & 0x20000000) != 0)
        v190 = v194;
      else
        v190 &= 0xCFFFFFFF;
      v191 = *((_DWORD *)v23 + 326);
      if (**v92)
        goto LABEL_491;
      goto LABEL_508;
    }
  }
  if ((v186 & 0x10000000) != 0)
    v193 = 0x40000000;
  else
    v193 = 0x80000000;
  if ((v186 & 0x20000000) != 0)
    v186 = v193;
  else
    v186 &= 0xCFFFFFFF;
  v188 = v32[10];
  if ((v188 & 0x80000000) != 0)
    goto LABEL_500;
LABEL_486:
  v189 = *(_QWORD *)(v31 + 2328);
  if (v188 >= (*(_QWORD *)(v31 + 2336) - v189) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v189 = *(_QWORD *)(v31 + 2328);
    v187 = **v516;
  }
  v190 = *(_DWORD *)(v189 + (v188 << 11) + 1784);
  if (!v187)
    goto LABEL_501;
LABEL_490:
  v191 = *((_DWORD *)v23 + 326);
  if (**v92)
  {
LABEL_491:
    v514 = *((_DWORD *)v23 + 390);
    v192 = *((_DWORD *)v23 + 334);
    goto LABEL_526;
  }
LABEL_508:
  if ((v191 & 0x10000000) != 0)
    v195 = 0x40000000;
  else
    v195 = 0x80000000;
  if ((v191 & 0x20000000) != 0)
    v191 = v195;
  else
    v191 &= 0xCFFFFFFF;
  v196 = *((_DWORD *)v23 + 390);
  if ((v196 & 0x10000000) != 0)
    v197 = 0x40000000;
  else
    v197 = 0x80000000;
  if ((v196 & 0x20000000) != 0)
    v198 = v197;
  else
    v198 = v196 & 0xCFFFFFFF;
  v514 = v198;
  v199 = *((_DWORD *)v23 + 334);
  if ((v199 & 0x10000000) != 0)
    v200 = 0x40000000;
  else
    v200 = 0x80000000;
  if ((v199 & 0x20000000) != 0)
    v192 = v200;
  else
    v192 = v199 & 0xCFFFFFFF;
LABEL_526:
  v486 = v190 >> 30;
  v480 = v191 >> 30;
  v461 = v186 >> 30;
  v466 = v192 >> 30;
  v560 = v525;
  v561 = v526;
  v562 = v527;
  v559 = v524;
  v558 = v523;
  if ((v170 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688140;
    v539 = xmmword_224688150;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C500000185), xmmword_224688150);
    if ((v148 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688160;
      v599 = xmmword_224688170;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C500000185), xmmword_224688170);
      if (((v508 | v497) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224688180;
        v594 = xmmword_224688190;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C500000185), xmmword_224688190);
        v201 = (v454 & 1) == 0 && ((v503 | v491) & 1) == 0;
        if ((v456 & 1) == 0 && v201)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246881A0;
          v589 = xmmword_2246881B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14500000185), xmmword_2246881B0);
        }
      }
      v202 = (v470 & 1) == 0 && ((v503 | v491) & 1) == 0;
      if (v202 && (v179 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246881C0;
        v584 = xmmword_2246881D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14500000185), xmmword_2246881D0);
      }
    }
    if (((v497 | v486) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246881E0;
      v579 = xmmword_2246881F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C500000185), xmmword_2246881F0);
      v203 = (v186 & 0x40000000) == 0 && ((v491 | v480) & 1) == 0;
      if ((v454 & 1) == 0 && v203)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        v579 = v559;
        v578 = v558;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224688200;
        v574 = xmmword_224688210;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14500000185), xmmword_224688210);
      }
    }
    v204 = (v179 & 1) == 0 && ((v491 | v480) & 1) == 0;
    if (v204 && (v466 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688220;
      v569 = xmmword_224688230;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 0, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x14500000185), xmmword_224688230);
    }
  }
  v555 = v525;
  v556 = v526;
  v557 = v527;
  v554 = v524;
  v553 = v523;
  v205 = v32[10];
  if ((v205 & 0x80000000) != 0)
  {
    v207 = *(_DWORD *)(v31 + 1812);
    v208 = **v516;
    if (**v516)
      goto LABEL_559;
  }
  else
  {
    v206 = *(_QWORD *)(v31 + 2328);
    if (v205 >= (*(_QWORD *)(v31 + 2336) - v206) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v206 = *(_QWORD *)(v31 + 2328);
    }
    v207 = *(_DWORD *)(v206 + (v205 << 11) + 1532);
    v208 = **v516;
    if (**v516)
    {
LABEL_559:
      v209 = v32[10];
      if ((v209 & 0x80000000) == 0)
        goto LABEL_560;
LABEL_574:
      v211 = *(_DWORD *)(v31 + 2068);
      if (v208)
        goto LABEL_564;
LABEL_575:
      if ((v211 & 0x10000000) != 0)
        v216 = 0x40000000;
      else
        v216 = 0x80000000;
      if ((v211 & 0x20000000) != 0)
        v211 = v216;
      else
        v211 &= 0xCFFFFFFF;
      v212 = *((_DWORD *)v23 + 327);
      if (**v92)
        goto LABEL_565;
      goto LABEL_582;
    }
  }
  if ((v207 & 0x10000000) != 0)
    v215 = 0x40000000;
  else
    v215 = 0x80000000;
  if ((v207 & 0x20000000) != 0)
    v207 = v215;
  else
    v207 &= 0xCFFFFFFF;
  v209 = v32[10];
  if ((v209 & 0x80000000) != 0)
    goto LABEL_574;
LABEL_560:
  v210 = *(_QWORD *)(v31 + 2328);
  if (v209 >= (*(_QWORD *)(v31 + 2336) - v210) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v210 = *(_QWORD *)(v31 + 2328);
    v208 = **v516;
  }
  v211 = *(_DWORD *)(v210 + (v209 << 11) + 1788);
  if (!v208)
    goto LABEL_575;
LABEL_564:
  v212 = *((_DWORD *)v23 + 327);
  if (**v92)
  {
LABEL_565:
    v213 = *((_DWORD *)v23 + 391);
    v214 = *((_DWORD *)v23 + 335);
    goto LABEL_600;
  }
LABEL_582:
  if ((v212 & 0x10000000) != 0)
    v217 = 0x40000000;
  else
    v217 = 0x80000000;
  if ((v212 & 0x20000000) != 0)
    v212 = v217;
  else
    v212 &= 0xCFFFFFFF;
  v218 = *((_DWORD *)v23 + 391);
  if ((v218 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v218 & 0x20000000) != 0)
    v213 = v219;
  else
    v213 = v218 & 0xCFFFFFFF;
  v220 = *((_DWORD *)v23 + 335);
  if ((v220 & 0x10000000) != 0)
    v221 = 0x40000000;
  else
    v221 = 0x80000000;
  if ((v220 & 0x20000000) != 0)
    v214 = v221;
  else
    v214 = v220 & 0xCFFFFFFF;
LABEL_600:
  v504 = v207 >> 30;
  v222 = v211 >> 30;
  v223 = v212 >> 30;
  v509 = v214 >> 30;
  v565 = v525;
  v566 = v526;
  v567 = v527;
  v564 = v524;
  v563 = v523;
  if ((v514 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688240;
    v539 = xmmword_224688250;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C600000186), xmmword_224688250);
    if ((v170 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688260;
      v599 = xmmword_224688270;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C600000186), xmmword_224688270);
      if (((v497 | v486) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v593 = xmmword_224688280;
        v594 = xmmword_224688290;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C600000186), xmmword_224688290);
        v224 = (v461 & 1) == 0 && ((v491 | v480) & 1) == 0;
        if ((v454 & 1) == 0 && v224)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246882A0;
          v589 = xmmword_2246882B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14600000186), xmmword_2246882B0);
        }
      }
      v225 = (v179 & 1) == 0 && ((v491 | v480) & 1) == 0;
      if (v225 && (v466 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246882C0;
        v584 = xmmword_2246882D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14600000186), xmmword_2246882D0);
      }
    }
    if (((v486 | v222) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      v584 = v564;
      v583 = v563;
      *(_QWORD *)&v573 = 0xA0A0A0A0D0D0D0DLL;
      v578 = xmmword_2246882E0;
      v579 = xmmword_2246882F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C600000186), xmmword_2246882F0);
      v226 = (v207 & 0x40000000) == 0 && ((v480 | v223) & 1) == 0;
      if ((v461 & 1) == 0 && v226)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        v579 = v564;
        v578 = v563;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v573 = xmmword_224688300;
        v574 = xmmword_224688310;
        *(_QWORD *)&v548 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 0, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v548, COERCE_DOUBLE(0x14600000186), xmmword_224688310);
      }
    }
    v227 = (v466 & 1) == 0 && ((v480 | v223) & 1) == 0;
    if (v227 && (v509 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688320;
      v569 = xmmword_224688330;
      *(_QWORD *)&v604[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 0, 6, (uint64_t)&v548, (uint64_t)&v568, (uint64_t)v604, COERCE_DOUBLE(0x14600000186), xmmword_224688330);
    }
  }
  v228 = v32[19];
  if ((v228 & 0x80000000) != 0)
  {
    v231 = *v516;
    v232 = *(_DWORD *)(v31 + 1784);
    v233 = **v516;
    if (**v516)
      goto LABEL_633;
  }
  else
  {
    v229 = *(_QWORD *)(v31 + 2328);
    if (v228 >= (*(_QWORD *)(v31 + 2336) - v229) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v229 = *(_QWORD *)(v31 + 2328);
    }
    v230 = v229 + (v228 << 11);
    v231 = *v516;
    v232 = *(_DWORD *)(v230 + 1504);
    v233 = **v516;
    if (**v516)
    {
LABEL_633:
      v234 = v32[19];
      if ((v234 & 0x80000000) == 0)
        goto LABEL_634;
LABEL_653:
      v236 = *(_DWORD *)(v31 + 2040);
      if (v233)
        goto LABEL_638;
      goto LABEL_654;
    }
  }
  if ((v232 & 0x10000000) != 0)
    v241 = 0x40000000;
  else
    v241 = 0x80000000;
  if ((v232 & 0x20000000) != 0)
    v232 = v241;
  else
    v232 &= 0xCFFFFFFF;
  v234 = v32[19];
  if ((v234 & 0x80000000) != 0)
    goto LABEL_653;
LABEL_634:
  v235 = *(_QWORD *)(v31 + 2328);
  if (v234 >= (*(_QWORD *)(v31 + 2336) - v235) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v235 = *(_QWORD *)(v31 + 2328);
    v231 = *v516;
    v233 = **v516;
  }
  v236 = *(_DWORD *)(v235 + (v234 << 11) + 1760);
  if (v233)
  {
LABEL_638:
    v237 = v32[22];
    if ((v237 & 0x80000000) == 0)
      goto LABEL_639;
LABEL_661:
    v239 = *(_DWORD *)(v31 + 1560);
    if (v233)
      goto LABEL_643;
    goto LABEL_662;
  }
LABEL_654:
  if ((v236 & 0x10000000) != 0)
    v242 = 0x40000000;
  else
    v242 = 0x80000000;
  if ((v236 & 0x20000000) != 0)
    v236 = v242;
  else
    v236 &= 0xCFFFFFFF;
  v237 = v32[22];
  if ((v237 & 0x80000000) != 0)
    goto LABEL_661;
LABEL_639:
  v238 = *(_QWORD *)(v31 + 2328);
  if (v237 >= (*(_QWORD *)(v31 + 2336) - v238) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v238 = *(_QWORD *)(v31 + 2328);
    v231 = *v516;
    v233 = **v516;
  }
  v239 = *(_DWORD *)(v238 + (v237 << 11) + 1280);
  if (v233)
  {
LABEL_643:
    v240 = v32[22];
    if ((v240 & 0x80000000) != 0)
      goto LABEL_714;
    goto LABEL_669;
  }
LABEL_662:
  if ((v239 & 0x10000000) != 0)
    v243 = 0x40000000;
  else
    v243 = 0x80000000;
  if ((v239 & 0x20000000) != 0)
    v239 = v243;
  else
    v239 &= 0xCFFFFFFF;
  v240 = v32[22];
  if ((v240 & 0x80000000) != 0)
    goto LABEL_714;
LABEL_669:
  v244 = *(_QWORD *)(v31 + 2328);
  v245 = (*(_QWORD *)(v31 + 2336) - v244) >> 11;
  if (v245 > v240)
    goto LABEL_673;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v231 = *v516;
  v240 = v32[22];
  if ((v240 & 0x80000000) != 0)
  {
LABEL_714:
    v246 = *(_DWORD *)(v31 + 1592);
    if (*v231)
      goto LABEL_683;
    goto LABEL_677;
  }
  v244 = *(_QWORD *)(v31 + 2328);
  v245 = (*(_QWORD *)(v31 + 2336) - v244) >> 11;
LABEL_673:
  if (v245 <= v240)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v244 = *(_QWORD *)(v31 + 2328);
    v231 = *v516;
  }
  v246 = *(_DWORD *)(v244 + (v240 << 11) + 1312);
  if (!*v231)
  {
LABEL_677:
    if ((v246 & 0x10000000) != 0)
      v247 = 0x40000000;
    else
      v247 = 0x80000000;
    if ((v246 & 0x20000000) != 0)
      v246 = v247;
    else
      v246 &= 0xCFFFFFFF;
  }
LABEL_683:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v213 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    *(_QWORD *)&v598 = 0x161616160D0D0D0DLL;
    v544 = v554;
    v543 = v553;
    v538 = xmmword_224688340;
    v539 = xmmword_224688350;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 0, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C700000187), xmmword_224688350);
    if ((v514 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688360;
      v599 = xmmword_224688370;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 0, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C700000187), xmmword_224688370);
      if (((v486 | v222) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        *(_QWORD *)&v588 = 0xA0A0D0D0A0A0D0DLL;
        v598 = v553;
        v599 = v554;
        v593 = xmmword_224688380;
        v594 = xmmword_224688390;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 0, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C700000187), xmmword_224688390);
        v248 = (v504 & 1) == 0 && ((v480 | v223) & 1) == 0;
        if ((v461 & 1) == 0 && v248)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_2246883A0;
          v589 = xmmword_2246883B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 0, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14700000187), xmmword_2246883B0);
        }
      }
      v249 = (v466 & 1) == 0 && ((v480 | v223) & 1) == 0;
      if (v249 && (v509 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        v589 = v569;
        v588 = v568;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246883C0;
        v584 = xmmword_2246883D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 0, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14700000187), xmmword_2246883D0);
      }
    }
    if (!(v236 & 0x40000000 | v222 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      *(_QWORD *)&v573 = 0x13130A0A16160D0DLL;
      v584 = v569;
      v583 = v568;
      v578 = xmmword_2246883E0;
      v579 = xmmword_2246883F0;
      *(_QWORD *)&v548 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 0, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v548, COERCE_DOUBLE(0x1C700000187), xmmword_2246883F0);
      v250 = (v232 & 0x40000000) == 0 && (v239 & 0x40000000 | v223 & 1) == 0;
      if ((v504 & 1) == 0 && v250)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v548 = 0x131316160A0A0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_224688400;
        v574 = xmmword_224688410;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 0, 6, (uint64_t)&v548, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x14700000187), xmmword_224688410);
      }
    }
    v251 = (v509 & 1) == 0 && (v239 & 0x40000000 | v223 & 1) == 0;
    if (v251 && (v246 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      *(_QWORD *)&v604[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v548 = xmmword_224688420;
      v549 = xmmword_224688430;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 0, 6, (uint64_t)v604, (uint64_t)&v548, (uint64_t)v605, COERCE_DOUBLE(0x14700000187), xmmword_224688430);
    }
  }
  v252 = v472[2];
  v515 = a2[1];
  v517 = *a2;
  v521 = v475[3];
  v522 = v475[4];
  v519 = *((float32x4_t *)v475 + 1);
  v520 = v475[2];
  v518 = *v475;
  v471 = *(_OWORD *)v472;
  v505 = (_BYTE **)a2[2];
  v510 = *v472;
  v253 = *((_DWORD *)v252 + 320);
  v254 = ***v472;
  if (***v472)
  {
    v255 = *((_DWORD *)v252 + 384);
    v256 = *((_DWORD *)v252 + 328);
    v257 = *((_DWORD *)v252 + 336);
    v498 = *((_DWORD *)v252 + 392);
    if ((v498 & 0x40000000) == 0)
    {
LABEL_713:
      v258 = v255;
      v259 = 0;
      v260 = 0;
      v261 = 0;
      v262 = 0;
      v263 = 0;
      goto LABEL_766;
    }
  }
  else
  {
    if ((v253 & 0x20000000) != 0)
      v253 *= 4;
    v264 = *((_DWORD *)v252 + 384);
    if ((v264 & 0x20000000) != 0)
      v255 = 4 * v264;
    else
      v255 = *((_DWORD *)v252 + 384);
    v265 = *((_DWORD *)v252 + 328);
    if ((v265 & 0x20000000) != 0)
      v256 = 4 * v265;
    else
      v256 = *((_DWORD *)v252 + 328);
    v266 = *((_DWORD *)v252 + 392);
    if ((v266 & 0x20000000) != 0)
      v267 = 4 * v266;
    else
      v267 = *((_DWORD *)v252 + 392);
    v268 = *((_DWORD *)v252 + 336);
    if ((v268 & 0x10000000) != 0)
      v269 = 0x40000000;
    else
      v269 = 0x80000000;
    if ((v268 & 0x20000000) != 0)
      v257 = v269;
    else
      v257 = v268 & 0xCFFFFFFF;
    v498 = v267;
    if ((v267 & 0x40000000) == 0)
      goto LABEL_713;
  }
  v270 = *(unsigned int *)(v515 + 16);
  if ((v270 & 0x80000000) != 0)
  {
    v272 = *(_DWORD *)(v517 + 1588);
    v273 = **v505;
    if (**v505)
      goto LABEL_739;
  }
  else
  {
    v271 = *(_QWORD *)(v517 + 2328);
    if (v270 >= (*(_QWORD *)(v517 + 2336) - v271) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v271 = *(_QWORD *)(v517 + 2328);
    }
    v272 = *(_DWORD *)(v271 + (v270 << 11) + 1308);
    v273 = **v505;
    if (**v505)
    {
LABEL_739:
      v274 = *(unsigned int *)(v515 + 16);
      if ((v274 & 0x80000000) == 0)
        goto LABEL_740;
LABEL_1273:
      v276 = *(_DWORD *)(v517 + 1844);
      if (v273)
        goto LABEL_744;
      goto LABEL_1274;
    }
  }
  if ((v272 & 0x10000000) != 0)
    v448 = 0x40000000;
  else
    v448 = 0x80000000;
  if ((v272 & 0x20000000) != 0)
    v272 = v448;
  else
    v272 &= 0xCFFFFFFF;
  v274 = *(unsigned int *)(v515 + 16);
  if ((v274 & 0x80000000) != 0)
    goto LABEL_1273;
LABEL_740:
  v275 = *(_QWORD *)(v517 + 2328);
  if (v274 >= (*(_QWORD *)(v517 + 2336) - v275) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v275 = *(_QWORD *)(v517 + 2328);
    v273 = **v505;
  }
  v276 = *(_DWORD *)(v275 + (v274 << 11) + 1564);
  if (v273)
  {
LABEL_744:
    v277 = *(unsigned int *)(v515 + 16);
    if ((v277 & 0x80000000) == 0)
      goto LABEL_745;
LABEL_1281:
    v279 = *(_DWORD *)(v517 + 1620);
    if (v273)
      goto LABEL_749;
    goto LABEL_1282;
  }
LABEL_1274:
  if ((v276 & 0x10000000) != 0)
    v449 = 0x40000000;
  else
    v449 = 0x80000000;
  if ((v276 & 0x20000000) != 0)
    v276 = v449;
  else
    v276 &= 0xCFFFFFFF;
  v277 = *(unsigned int *)(v515 + 16);
  if ((v277 & 0x80000000) != 0)
    goto LABEL_1281;
LABEL_745:
  v278 = *(_QWORD *)(v517 + 2328);
  if (v277 >= (*(_QWORD *)(v517 + 2336) - v278) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v278 = *(_QWORD *)(v517 + 2328);
    v273 = **v505;
  }
  v279 = *(_DWORD *)(v278 + (v277 << 11) + 1340);
  if (v273)
  {
LABEL_749:
    v280 = *(unsigned int *)(v515 + 16);
    if ((v280 & 0x80000000) == 0)
      goto LABEL_750;
LABEL_1289:
    v282 = *(_DWORD *)(v517 + 1876);
    if (v273)
      goto LABEL_754;
    goto LABEL_1290;
  }
LABEL_1282:
  if ((v279 & 0x10000000) != 0)
    v450 = 0x40000000;
  else
    v450 = 0x80000000;
  if ((v279 & 0x20000000) != 0)
    v279 = v450;
  else
    v279 &= 0xCFFFFFFF;
  v280 = *(unsigned int *)(v515 + 16);
  if ((v280 & 0x80000000) != 0)
    goto LABEL_1289;
LABEL_750:
  v281 = *(_QWORD *)(v517 + 2328);
  if (v280 >= (*(_QWORD *)(v517 + 2336) - v281) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v281 = *(_QWORD *)(v517 + 2328);
    v273 = **v505;
  }
  v282 = *(_DWORD *)(v281 + (v280 << 11) + 1596);
  if (v273)
  {
LABEL_754:
    v283 = *(unsigned int *)(v515 + 16);
    if ((v283 & 0x80000000) == 0)
      goto LABEL_755;
    goto LABEL_1297;
  }
LABEL_1290:
  if ((v282 & 0x10000000) != 0)
    v451 = 0x40000000;
  else
    v451 = 0x80000000;
  if ((v282 & 0x20000000) != 0)
    v282 = v451;
  else
    v282 &= 0xCFFFFFFF;
  v283 = *(unsigned int *)(v515 + 16);
  if ((v283 & 0x80000000) == 0)
  {
LABEL_755:
    v284 = *(_QWORD *)(v517 + 2328);
    if (v283 >= (*(_QWORD *)(v517 + 2336) - v284) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v284 = *(_QWORD *)(v517 + 2328);
      v273 = **v505;
    }
    v258 = v255;
    v285 = v284 + (v283 << 11);
    v263 = (v272 >> 30) & 1;
    v262 = (v276 >> 30) & 1;
    v261 = (v279 >> 30) & 1;
    v286 = *(_DWORD *)(v285 + 1372);
    v260 = (v282 >> 30) & 1;
    if (v273)
      goto LABEL_765;
    goto LABEL_759;
  }
LABEL_1297:
  v258 = v255;
  v263 = (v272 >> 30) & 1;
  v262 = (v276 >> 30) & 1;
  v261 = (v279 >> 30) & 1;
  v286 = *(_DWORD *)(v517 + 1652);
  v260 = (v282 >> 30) & 1;
  if (!v273)
  {
LABEL_759:
    if ((v286 & 0x10000000) != 0)
      v287 = 0x40000000;
    else
      v287 = 0x80000000;
    if ((v286 & 0x20000000) != 0)
      v286 = v287;
    else
      v286 &= 0xCFFFFFFF;
  }
LABEL_765:
  v259 = (v286 >> 30) & 1;
  v254 = **v510;
LABEL_766:
  v481 = v253 >> 30;
  v550 = v520;
  v551 = v521;
  v552 = v522;
  v549 = v519;
  v548 = v518;
  v288 = *((_DWORD *)v252 + 321);
  if (v254)
  {
    v289 = *((_DWORD *)v252 + 385);
    v290 = *((_DWORD *)v252 + 329);
    v291 = *((_DWORD *)v252 + 393);
    v292 = *((_DWORD *)v252 + 337);
  }
  else
  {
    if ((v288 & 0x10000000) != 0)
      v293 = 0x40000000;
    else
      v293 = 0x80000000;
    if ((v288 & 0x20000000) != 0)
      v288 = v293;
    else
      v288 &= 0xCFFFFFFF;
    v294 = *((_DWORD *)v252 + 385);
    if ((v294 & 0x10000000) != 0)
      v295 = 0x40000000;
    else
      v295 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v289 = v295;
    else
      v289 = v294 & 0xCFFFFFFF;
    v296 = *((_DWORD *)v252 + 329);
    if ((v296 & 0x10000000) != 0)
      v297 = 0x40000000;
    else
      v297 = 0x80000000;
    if ((v296 & 0x20000000) != 0)
      v290 = v297;
    else
      v290 = v296 & 0xCFFFFFFF;
    v298 = *((_DWORD *)v252 + 393);
    if ((v298 & 0x10000000) != 0)
      v299 = 0x40000000;
    else
      v299 = 0x80000000;
    if ((v298 & 0x20000000) != 0)
      v291 = v299;
    else
      v291 = v298 & 0xCFFFFFFF;
    v300 = *((_DWORD *)v252 + 337);
    if ((v300 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v300 & 0x20000000) == 0)
      v292 = v300 & 0xCFFFFFFF;
  }
  v301 = v256 >> 30;
  v302 = v258 >> 30;
  v303 = v257 >> 30;
  v467 = v288 >> 30;
  v487 = v290 >> 30;
  v492 = v289 >> 30;
  v476 = v292 >> 30;
  if ((v498 & 0x40000000) != 0)
  {
    v545 = v520;
    v546 = v521;
    v547 = v522;
    v544 = v519;
    v543 = v518;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688440;
    v539 = xmmword_224688450;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C800000188), xmmword_224688450);
    if (!v260)
    {
      v540 = v520;
      v541 = v521;
      v542 = v522;
      v539 = v519;
      v538 = v518;
      *(_QWORD *)&v593 = 0x4040D0D04040D0DLL;
      v598 = xmmword_224688460;
      v599 = xmmword_224688470;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C800000188), xmmword_224688470);
      v304 = (v261 | v301 & 1) == 0;
      if (!(v262 | v302 & 1))
      {
        v600 = v520;
        v601 = v521;
        v602 = v522;
        v598 = v518;
        v599 = v519;
        *(_QWORD *)&v588 = 0x40404040D0D0D0DLL;
        v593 = xmmword_224688480;
        v594 = xmmword_224688490;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C800000188), xmmword_224688490);
        v305 = (v481 & 1) == 0 && v304;
        if (!v263 && v305)
        {
          v595 = v520;
          v596 = v521;
          v597 = v522;
          v594 = v519;
          v593 = v518;
          *(_QWORD *)&v583 = 0x4040D0D04040D0DLL;
          v588 = xmmword_2246884A0;
          v589 = xmmword_2246884B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14800000188), xmmword_2246884B0);
        }
      }
      if (v259)
        v306 = 0;
      else
        v306 = v304;
      if (v306 && (v303 & 1) == 0)
      {
        v590 = v520;
        v591 = v521;
        v592 = v522;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v519;
        v588 = v518;
        v583 = xmmword_2246884C0;
        v584 = xmmword_2246884D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14800000188), xmmword_2246884D0);
      }
    }
    if (((v302 | v492) & 1) == 0)
    {
      v585 = v520;
      v586 = v521;
      v587 = v522;
      v584 = v519;
      v583 = v518;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246884E0;
      v579 = xmmword_2246884F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C800000188), xmmword_2246884F0);
      v307 = (v467 & 1) == 0 && ((v301 | v487) & 1) == 0;
      if ((v481 & 1) == 0 && v307)
      {
        v580 = v520;
        v581 = v521;
        v582 = v522;
        v579 = v519;
        v578 = v518;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688500;
        v574 = xmmword_224688510;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14800000188), xmmword_224688510);
      }
    }
    v308 = (v303 & 1) == 0 && ((v301 | v487) & 1) == 0;
    if (v308 && (v476 & 1) == 0)
    {
      v575 = v520;
      v576 = v521;
      v577 = v522;
      v574 = v519;
      v573 = v518;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688520;
      v569 = xmmword_224688530;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14800000188), xmmword_224688530);
    }
  }
  v530 = v550;
  v531 = v551;
  v532 = v552;
  v528 = v548;
  v529 = v549;
  v309 = *((_DWORD *)v252 + 322);
  if (**v510)
  {
    v310 = *((_DWORD *)v252 + 386);
    v311 = *((_DWORD *)v252 + 330);
    v312 = *((_DWORD *)v252 + 394);
    v313 = *((_DWORD *)v252 + 338);
  }
  else
  {
    if ((v309 & 0x10000000) != 0)
      v314 = 0x40000000;
    else
      v314 = 0x80000000;
    if ((v309 & 0x20000000) != 0)
      v309 = v314;
    else
      v309 &= 0xCFFFFFFF;
    v315 = *((_DWORD *)v252 + 386);
    if ((v315 & 0x10000000) != 0)
      v316 = 0x40000000;
    else
      v316 = 0x80000000;
    if ((v315 & 0x20000000) != 0)
      v310 = v316;
    else
      v310 = v315 & 0xCFFFFFFF;
    v317 = *((_DWORD *)v252 + 330);
    if ((v317 & 0x10000000) != 0)
      v318 = 0x40000000;
    else
      v318 = 0x80000000;
    if ((v317 & 0x20000000) != 0)
      v311 = v318;
    else
      v311 = v317 & 0xCFFFFFFF;
    v319 = *((_DWORD *)v252 + 394);
    if ((v319 & 0x10000000) != 0)
      v320 = 0x40000000;
    else
      v320 = 0x80000000;
    if ((v319 & 0x20000000) != 0)
      v312 = v320;
    else
      v312 = v319 & 0xCFFFFFFF;
    v321 = *((_DWORD *)v252 + 338);
    if ((v321 & 0x10000000) != 0)
      v313 = 0x40000000;
    else
      v313 = 0x80000000;
    if ((v321 & 0x20000000) == 0)
      v313 = v321 & 0xCFFFFFFF;
  }
  v322 = v311 >> 30;
  v462 = v309 >> 30;
  v323 = v310 >> 30;
  v473 = v313 >> 30;
  v535 = v550;
  v536 = v551;
  v537 = v552;
  v533 = v548;
  v534 = v549;
  if ((v291 & 0x40000000) != 0)
  {
    v545 = v550;
    v546 = v551;
    v547 = v552;
    v544 = v549;
    v543 = v548;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688540;
    v539 = xmmword_224688550;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1C900000189), xmmword_224688550);
    if ((v498 & 0x40000000) == 0)
    {
      v540 = v550;
      v541 = v551;
      v542 = v552;
      v539 = v549;
      v538 = v548;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688560;
      v599 = xmmword_224688570;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1C900000189), xmmword_224688570);
      if (((v302 | v492) & 1) == 0)
      {
        v600 = v550;
        v601 = v551;
        v602 = v552;
        v598 = v548;
        v599 = v549;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688580;
        v594 = xmmword_224688590;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1C900000189), xmmword_224688590);
        v324 = (v467 & 1) == 0 && ((v301 | v487) & 1) == 0;
        if ((v481 & 1) == 0 && v324)
        {
          v595 = v550;
          v596 = v551;
          v597 = v552;
          v594 = v549;
          v593 = v548;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246885A0;
          v589 = xmmword_2246885B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14900000189), xmmword_2246885B0);
        }
      }
      v325 = (v303 & 1) == 0 && ((v301 | v487) & 1) == 0;
      if (v325 && (v476 & 1) == 0)
      {
        v590 = v535;
        v591 = v536;
        v592 = v537;
        v589 = v534;
        v588 = v533;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246885C0;
        v584 = xmmword_2246885D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14900000189), xmmword_2246885D0);
      }
    }
    if (((v492 | v323) & 1) == 0)
    {
      v585 = v535;
      v586 = v536;
      v587 = v537;
      v584 = v534;
      v583 = v533;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246885E0;
      v579 = xmmword_2246885F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1C900000189), xmmword_2246885F0);
      v326 = (v462 & 1) == 0 && ((v487 | v322) & 1) == 0;
      if ((v467 & 1) == 0 && v326)
      {
        v580 = v535;
        v581 = v536;
        v582 = v537;
        v579 = v534;
        v578 = v533;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688600;
        v574 = xmmword_224688610;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14900000189), xmmword_224688610);
      }
    }
    v327 = (v476 & 1) == 0 && ((v487 | v322) & 1) == 0;
    if (v327 && (v473 & 1) == 0)
    {
      v575 = v535;
      v576 = v536;
      v577 = v537;
      v574 = v534;
      v573 = v533;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688620;
      v569 = xmmword_224688630;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14900000189), xmmword_224688630);
    }
  }
  v328 = *((_DWORD *)v252 + 323);
  if (**v510)
  {
    v329 = v291;
    v330 = *((_DWORD *)v252 + 387);
    v331 = *((_DWORD *)v252 + 331);
    v332 = *((_DWORD *)v252 + 395);
    v333 = *((_DWORD *)v252 + 339);
  }
  else
  {
    v329 = v291;
    if ((v328 & 0x10000000) != 0)
      v334 = 0x40000000;
    else
      v334 = 0x80000000;
    if ((v328 & 0x20000000) != 0)
      v328 = v334;
    else
      v328 &= 0xCFFFFFFF;
    v335 = *((_DWORD *)v252 + 387);
    if ((v335 & 0x10000000) != 0)
      v336 = 0x40000000;
    else
      v336 = 0x80000000;
    if ((v335 & 0x20000000) != 0)
      v330 = v336;
    else
      v330 = v335 & 0xCFFFFFFF;
    v337 = *((_DWORD *)v252 + 331);
    if ((v337 & 0x10000000) != 0)
      v338 = 0x40000000;
    else
      v338 = 0x80000000;
    if ((v337 & 0x20000000) != 0)
      v331 = v338;
    else
      v331 = v337 & 0xCFFFFFFF;
    v339 = *((_DWORD *)v252 + 395);
    if ((v339 & 0x10000000) != 0)
      v340 = 0x40000000;
    else
      v340 = 0x80000000;
    if ((v339 & 0x20000000) != 0)
      v332 = v340;
    else
      v332 = v339 & 0xCFFFFFFF;
    v341 = *((_DWORD *)v252 + 339);
    if ((v341 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v341 & 0x20000000) == 0)
      v333 = v341 & 0xCFFFFFFF;
  }
  v482 = v331 >> 30;
  v457 = v328 >> 30;
  v499 = v330 >> 30;
  v342 = v333 >> 30;
  if ((v312 & 0x40000000) != 0)
  {
    v343 = (v329 & 0x40000000) == 0;
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688640;
    v539 = xmmword_224688650;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CA0000018ALL), xmmword_224688650);
    if (v343)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688660;
      v599 = xmmword_224688670;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CA0000018ALL), xmmword_224688670);
      if (((v492 | v323) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688680;
        v594 = xmmword_224688690;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CA0000018ALL), xmmword_224688690);
        v344 = (v462 & 1) == 0 && ((v487 | v322) & 1) == 0;
        if ((v467 & 1) == 0 && v344)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246886A0;
          v589 = xmmword_2246886B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14A0000018ALL), xmmword_2246886B0);
        }
      }
      v345 = (v476 & 1) == 0 && ((v487 | v322) & 1) == 0;
      if (v345 && (v473 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246886C0;
        v584 = xmmword_2246886D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14A0000018ALL), xmmword_2246886D0);
      }
    }
    if (((v323 | v499) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246886E0;
      v579 = xmmword_2246886F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1CA0000018ALL), xmmword_2246886F0);
      v346 = (v457 & 1) == 0 && ((v322 | v482) & 1) == 0;
      if ((v462 & 1) == 0 && v346)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688700;
        v574 = xmmword_224688710;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14A0000018ALL), xmmword_224688710);
      }
    }
    v347 = (v473 & 1) == 0 && ((v322 | v482) & 1) == 0;
    if (v347 && (v342 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688720;
      v569 = xmmword_224688730;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14A0000018ALL), xmmword_224688730);
    }
  }
  v348 = *((_DWORD *)v252 + 324);
  if (**v510)
  {
    v349 = *((_DWORD *)v252 + 388);
    v350 = *((_DWORD *)v252 + 332);
    v351 = *((_DWORD *)v252 + 396);
    v352 = *((_DWORD *)v252 + 340);
  }
  else
  {
    if ((v348 & 0x10000000) != 0)
      v353 = 0x40000000;
    else
      v353 = 0x80000000;
    if ((v348 & 0x20000000) != 0)
      v348 = v353;
    else
      v348 &= 0xCFFFFFFF;
    v354 = *((_DWORD *)v252 + 388);
    if ((v354 & 0x10000000) != 0)
      v355 = 0x40000000;
    else
      v355 = 0x80000000;
    if ((v354 & 0x20000000) != 0)
      v349 = v355;
    else
      v349 = v354 & 0xCFFFFFFF;
    v356 = *((_DWORD *)v252 + 332);
    if ((v356 & 0x10000000) != 0)
      v357 = 0x40000000;
    else
      v357 = 0x80000000;
    if ((v356 & 0x20000000) != 0)
      v350 = v357;
    else
      v350 = v356 & 0xCFFFFFFF;
    v358 = *((_DWORD *)v252 + 396);
    if ((v358 & 0x10000000) != 0)
      v359 = 0x40000000;
    else
      v359 = 0x80000000;
    if ((v358 & 0x20000000) != 0)
      v351 = v359;
    else
      v351 = v358 & 0xCFFFFFFF;
    v360 = *((_DWORD *)v252 + 340);
    if ((v360 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v360 & 0x20000000) == 0)
      v352 = v360 & 0xCFFFFFFF;
  }
  v361 = v350 >> 30;
  v468 = v348 >> 30;
  v493 = v349 >> 30;
  v477 = v352 >> 30;
  if ((v332 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688740;
    v539 = xmmword_224688750;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CB0000018BLL), xmmword_224688750);
    if ((v312 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688760;
      v599 = xmmword_224688770;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CB0000018BLL), xmmword_224688770);
      v362 = ((v322 | v482) & 1) == 0;
      if (((v323 | v499) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688780;
        v594 = xmmword_224688790;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CB0000018BLL), xmmword_224688790);
        v363 = (v457 & 1) == 0 && v362;
        if ((v462 & 1) == 0 && v363)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246887A0;
          v589 = xmmword_2246887B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14B0000018BLL), xmmword_2246887B0);
        }
      }
      v364 = (v473 & 1) == 0 && v362;
      if (v364 && (v342 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246887C0;
        v584 = xmmword_2246887D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14B0000018BLL), xmmword_2246887D0);
      }
    }
    if (((v499 | v493) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246887E0;
      v579 = xmmword_2246887F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1CB0000018BLL), xmmword_2246887F0);
      v365 = (v468 & 1) == 0 && ((v482 | v361) & 1) == 0;
      if ((v457 & 1) == 0 && v365)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688800;
        v574 = xmmword_224688810;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14B0000018BLL), xmmword_224688810);
      }
    }
    v366 = (v342 & 1) == 0 && ((v482 | v361) & 1) == 0;
    if (v366 && (v477 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688820;
      v569 = xmmword_224688830;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14B0000018BLL), xmmword_224688830);
    }
  }
  v367 = *((_DWORD *)v252 + 325);
  if (**v510)
  {
    v368 = *((_DWORD *)v252 + 389);
    v369 = *((_DWORD *)v252 + 333);
    v370 = *((_DWORD *)v252 + 397);
    v371 = *((_DWORD *)v252 + 341);
  }
  else
  {
    if ((v367 & 0x10000000) != 0)
      v372 = 0x40000000;
    else
      v372 = 0x80000000;
    if ((v367 & 0x20000000) != 0)
      v367 = v372;
    else
      v367 &= 0xCFFFFFFF;
    v373 = *((_DWORD *)v252 + 389);
    if ((v373 & 0x10000000) != 0)
      v374 = 0x40000000;
    else
      v374 = 0x80000000;
    if ((v373 & 0x20000000) != 0)
      v368 = v374;
    else
      v368 = v373 & 0xCFFFFFFF;
    v375 = *((_DWORD *)v252 + 333);
    if ((v375 & 0x10000000) != 0)
      v376 = 0x40000000;
    else
      v376 = 0x80000000;
    if ((v375 & 0x20000000) != 0)
      v369 = v376;
    else
      v369 = v375 & 0xCFFFFFFF;
    v377 = *((_DWORD *)v252 + 397);
    if ((v377 & 0x10000000) != 0)
      v378 = 0x40000000;
    else
      v378 = 0x80000000;
    if ((v377 & 0x20000000) != 0)
      v370 = v378;
    else
      v370 = v377 & 0xCFFFFFFF;
    v379 = *((_DWORD *)v252 + 341);
    if ((v379 & 0x10000000) != 0)
      v371 = 0x40000000;
    else
      v371 = 0x80000000;
    if ((v379 & 0x20000000) == 0)
      v371 = v379 & 0xCFFFFFFF;
  }
  v380 = v369 >> 30;
  v463 = v367 >> 30;
  v381 = v368 >> 30;
  v474 = v371 >> 30;
  if ((v351 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688840;
    v539 = xmmword_224688850;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CC0000018CLL), xmmword_224688850);
    if ((v332 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688860;
      v599 = xmmword_224688870;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CC0000018CLL), xmmword_224688870);
      if (((v499 | v493) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688880;
        v594 = xmmword_224688890;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CC0000018CLL), xmmword_224688890);
        v382 = (v468 & 1) == 0 && ((v482 | v361) & 1) == 0;
        if ((v457 & 1) == 0 && v382)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246888A0;
          v589 = xmmword_2246888B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14C0000018CLL), xmmword_2246888B0);
        }
      }
      v383 = (v342 & 1) == 0 && ((v482 | v361) & 1) == 0;
      if (v383 && (v477 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246888C0;
        v584 = xmmword_2246888D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14C0000018CLL), xmmword_2246888D0);
      }
    }
    if (((v493 | v381) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246888E0;
      v579 = xmmword_2246888F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1CC0000018CLL), xmmword_2246888F0);
      v384 = (v463 & 1) == 0 && ((v361 | v380) & 1) == 0;
      if ((v468 & 1) == 0 && v384)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688900;
        v574 = xmmword_224688910;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14C0000018CLL), xmmword_224688910);
      }
    }
    v385 = (v477 & 1) == 0 && ((v361 | v380) & 1) == 0;
    if (v385 && (v474 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688920;
      v569 = xmmword_224688930;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x14C0000018CLL), xmmword_224688930);
    }
  }
  v386 = *((_DWORD *)v252 + 326);
  if (**v510)
  {
    v387 = *((_DWORD *)v252 + 390);
    v388 = *((_DWORD *)v252 + 334);
    v389 = *((_DWORD *)v252 + 398);
    v390 = *((_DWORD *)v252 + 342);
  }
  else
  {
    if ((v386 & 0x10000000) != 0)
      v391 = 0x40000000;
    else
      v391 = 0x80000000;
    if ((v386 & 0x20000000) != 0)
      v386 = v391;
    else
      v386 &= 0xCFFFFFFF;
    v392 = *((_DWORD *)v252 + 390);
    if ((v392 & 0x10000000) != 0)
      v393 = 0x40000000;
    else
      v393 = 0x80000000;
    if ((v392 & 0x20000000) != 0)
      v387 = v393;
    else
      v387 = v392 & 0xCFFFFFFF;
    v394 = *((_DWORD *)v252 + 334);
    if ((v394 & 0x10000000) != 0)
      v395 = 0x40000000;
    else
      v395 = 0x80000000;
    if ((v394 & 0x20000000) != 0)
      v388 = v395;
    else
      v388 = v394 & 0xCFFFFFFF;
    v396 = *((_DWORD *)v252 + 398);
    if ((v396 & 0x10000000) != 0)
      v397 = 0x40000000;
    else
      v397 = 0x80000000;
    if ((v396 & 0x20000000) != 0)
      v389 = v397;
    else
      v389 = v396 & 0xCFFFFFFF;
    v398 = *((_DWORD *)v252 + 342);
    if ((v398 & 0x10000000) != 0)
      v390 = 0x40000000;
    else
      v390 = 0x80000000;
    if ((v398 & 0x20000000) == 0)
      v390 = v398 & 0xCFFFFFFF;
  }
  v458 = v386 >> 30;
  v500 = v387 >> 30;
  v483 = v390 >> 30;
  v488 = v388 >> 30;
  v560 = v530;
  v561 = v531;
  v562 = v532;
  v559 = v529;
  v558 = v528;
  if ((v370 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688940;
    v539 = xmmword_224688950;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CD0000018DLL), xmmword_224688950);
    if ((v351 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688960;
      v599 = xmmword_224688970;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CD0000018DLL), xmmword_224688970);
      if (((v493 | v381) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688980;
        v594 = xmmword_224688990;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CD0000018DLL), xmmword_224688990);
        v399 = (v463 & 1) == 0 && ((v361 | v380) & 1) == 0;
        if ((v468 & 1) == 0 && v399)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_2246889A0;
          v589 = xmmword_2246889B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14D0000018DLL), xmmword_2246889B0);
        }
      }
      v400 = (v477 & 1) == 0 && ((v361 | v380) & 1) == 0;
      if (v400 && (v474 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_2246889C0;
        v584 = xmmword_2246889D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14D0000018DLL), xmmword_2246889D0);
      }
    }
    if (((v381 | v500) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_2246889E0;
      v579 = xmmword_2246889F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1CD0000018DLL), xmmword_2246889F0);
      v401 = (v458 & 1) == 0 && ((v380 | v488) & 1) == 0;
      if ((v463 & 1) == 0 && v401)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        v579 = v559;
        v578 = v558;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688A00;
        v574 = xmmword_224688A10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x14D0000018DLL), xmmword_224688A10);
      }
    }
    v402 = (v474 & 1) == 0 && ((v380 | v488) & 1) == 0;
    if (v402 && (v483 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688A20;
      v569 = xmmword_224688A30;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 1, 6, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x14D0000018DLL), xmmword_224688A30);
    }
  }
  v555 = v530;
  v556 = v531;
  v557 = v532;
  v554 = v529;
  v553 = v528;
  v403 = *((_DWORD *)v252 + 327);
  if (**v510)
  {
    v404 = *((_DWORD *)v252 + 391);
    v405 = *((_DWORD *)v252 + 335);
    v406 = *((_DWORD *)v252 + 399);
    v407 = *((_DWORD *)v252 + 343);
  }
  else
  {
    if ((v403 & 0x10000000) != 0)
      v408 = 0x40000000;
    else
      v408 = 0x80000000;
    if ((v403 & 0x20000000) != 0)
      v403 = v408;
    else
      v403 &= 0xCFFFFFFF;
    v409 = *((_DWORD *)v252 + 391);
    if ((v409 & 0x10000000) != 0)
      v410 = 0x40000000;
    else
      v410 = 0x80000000;
    if ((v409 & 0x20000000) != 0)
      v404 = v410;
    else
      v404 = v409 & 0xCFFFFFFF;
    v411 = *((_DWORD *)v252 + 335);
    if ((v411 & 0x10000000) != 0)
      v412 = 0x40000000;
    else
      v412 = 0x80000000;
    if ((v411 & 0x20000000) != 0)
      v405 = v412;
    else
      v405 = v411 & 0xCFFFFFFF;
    v413 = *((_DWORD *)v252 + 399);
    if ((v413 & 0x10000000) != 0)
      v414 = 0x40000000;
    else
      v414 = 0x80000000;
    if ((v413 & 0x20000000) != 0)
      v406 = v414;
    else
      v406 = v413 & 0xCFFFFFFF;
    v415 = *((_DWORD *)v252 + 343);
    if ((v415 & 0x10000000) != 0)
      v407 = 0x40000000;
    else
      v407 = 0x80000000;
    if ((v415 & 0x20000000) == 0)
      v407 = v415 & 0xCFFFFFFF;
  }
  v416 = v405 >> 30;
  v494 = v403 >> 30;
  v417 = v404 >> 30;
  v511 = v407 >> 30;
  v565 = v530;
  v566 = v531;
  v567 = v532;
  v564 = v529;
  v563 = v528;
  if ((v389 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xD0D0D0D0D0D0D0DLL;
    v538 = xmmword_224688A40;
    v539 = xmmword_224688A50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CE0000018ELL), xmmword_224688A50);
    if ((v370 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688A60;
      v599 = xmmword_224688A70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CE0000018ELL), xmmword_224688A70);
      if (((v381 | v500) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688A80;
        v594 = xmmword_224688A90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CE0000018ELL), xmmword_224688A90);
        v418 = (v458 & 1) == 0 && ((v380 | v488) & 1) == 0;
        if ((v463 & 1) == 0 && v418)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_224688AA0;
          v589 = xmmword_224688AB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14E0000018ELL), xmmword_224688AB0);
        }
      }
      v419 = (v474 & 1) == 0 && ((v380 | v488) & 1) == 0;
      if (v419 && (v483 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_224688AC0;
        v584 = xmmword_224688AD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14E0000018ELL), xmmword_224688AD0);
      }
    }
    if (((v500 | v417) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      v584 = v564;
      v583 = v563;
      *(_QWORD *)&v573 = 0xD0D0D0D0D0D0D0DLL;
      v578 = xmmword_224688AE0;
      v579 = xmmword_224688AF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1CE0000018ELL), xmmword_224688AF0);
      v420 = (v494 & 1) == 0 && ((v488 | v416) & 1) == 0;
      if ((v458 & 1) == 0 && v420)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        v579 = v564;
        v578 = v563;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_224688B00;
        v574 = xmmword_224688B10;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 1, 6, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x14E0000018ELL), xmmword_224688B10);
      }
    }
    v421 = (v483 & 1) == 0 && ((v488 | v416) & 1) == 0;
    if (v421 && (v511 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v604[0] = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_224688B20;
      v569 = xmmword_224688B30;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 1, 6, (uint64_t)v604, (uint64_t)&v568, (uint64_t)v605, COERCE_DOUBLE(0x14E0000018ELL), xmmword_224688B30);
    }
  }
  v422 = *(unsigned int *)(v515 + 88);
  if ((v422 & 0x80000000) != 0)
  {
    v425 = *v505;
    v426 = *(_DWORD *)(v517 + 1560);
    v427 = **v505;
    if (**v505)
      goto LABEL_1184;
  }
  else
  {
    v423 = *(_QWORD *)(v517 + 2328);
    if (v422 >= (*(_QWORD *)(v517 + 2336) - v423) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v423 = *(_QWORD *)(v517 + 2328);
    }
    v424 = v423 + (v422 << 11);
    v425 = *v505;
    v426 = *(_DWORD *)(v424 + 1280);
    v427 = **v505;
    if (**v505)
    {
LABEL_1184:
      v428 = *(unsigned int *)(v515 + 88);
      if ((v428 & 0x80000000) == 0)
        goto LABEL_1185;
LABEL_1204:
      v430 = *(_DWORD *)(v517 + 1816);
      if (v427)
        goto LABEL_1189;
      goto LABEL_1205;
    }
  }
  if ((v426 & 0x10000000) != 0)
    v435 = 0x40000000;
  else
    v435 = 0x80000000;
  if ((v426 & 0x20000000) != 0)
    v426 = v435;
  else
    v426 &= 0xCFFFFFFF;
  v428 = *(unsigned int *)(v515 + 88);
  if ((v428 & 0x80000000) != 0)
    goto LABEL_1204;
LABEL_1185:
  v429 = *(_QWORD *)(v517 + 2328);
  if (v428 >= (*(_QWORD *)(v517 + 2336) - v429) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v429 = *(_QWORD *)(v517 + 2328);
    v425 = *v505;
    v427 = **v505;
  }
  v430 = *(_DWORD *)(v429 + (v428 << 11) + 1536);
  if (v427)
  {
LABEL_1189:
    v431 = *(unsigned int *)(v515 + 88);
    if ((v431 & 0x80000000) == 0)
      goto LABEL_1190;
LABEL_1212:
    v433 = *(_DWORD *)(v517 + 1592);
    if (v427)
      goto LABEL_1194;
    goto LABEL_1213;
  }
LABEL_1205:
  if ((v430 & 0x10000000) != 0)
    v436 = 0x40000000;
  else
    v436 = 0x80000000;
  if ((v430 & 0x20000000) != 0)
    v430 = v436;
  else
    v430 &= 0xCFFFFFFF;
  v431 = *(unsigned int *)(v515 + 88);
  if ((v431 & 0x80000000) != 0)
    goto LABEL_1212;
LABEL_1190:
  v432 = *(_QWORD *)(v517 + 2328);
  if (v431 >= (*(_QWORD *)(v517 + 2336) - v432) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v432 = *(_QWORD *)(v517 + 2328);
    v425 = *v505;
    v427 = **v505;
  }
  v433 = *(_DWORD *)(v432 + (v431 << 11) + 1312);
  if (v427)
  {
LABEL_1194:
    v434 = *(unsigned int *)(v515 + 88);
    if ((v434 & 0x80000000) != 0)
      goto LABEL_1263;
    goto LABEL_1220;
  }
LABEL_1213:
  if ((v433 & 0x10000000) != 0)
    v437 = 0x40000000;
  else
    v437 = 0x80000000;
  if ((v433 & 0x20000000) != 0)
    v433 = v437;
  else
    v433 &= 0xCFFFFFFF;
  v434 = *(unsigned int *)(v515 + 88);
  if ((v434 & 0x80000000) != 0)
    goto LABEL_1263;
LABEL_1220:
  v438 = *(_QWORD *)(v517 + 2328);
  v439 = (*(_QWORD *)(v517 + 2336) - v438) >> 11;
  if (v439 > v434)
    goto LABEL_1224;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v425 = *v505;
  v434 = *(unsigned int *)(v515 + 88);
  if ((v434 & 0x80000000) != 0)
  {
LABEL_1263:
    v440 = *(_DWORD *)(v517 + 1624);
    if (*v425)
      goto LABEL_1234;
    goto LABEL_1228;
  }
  v438 = *(_QWORD *)(v517 + 2328);
  v439 = (*(_QWORD *)(v517 + 2336) - v438) >> 11;
LABEL_1224:
  if (v439 <= v434)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v438 = *(_QWORD *)(v517 + 2328);
    v425 = *v505;
  }
  v440 = *(_DWORD *)(v438 + (v434 << 11) + 1344);
  if (!*v425)
  {
LABEL_1228:
    if ((v440 & 0x10000000) != 0)
      v441 = 0x40000000;
    else
      v441 = 0x80000000;
    if ((v440 & 0x20000000) != 0)
      v440 = v441;
    else
      v440 &= 0xCFFFFFFF;
  }
LABEL_1234:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v406 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    v544 = v554;
    v543 = v553;
    *(_QWORD *)&v598 = 0x161616160D0D0D0DLL;
    v538 = xmmword_224688B40;
    v539 = xmmword_224688B50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 1, 6, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1CF0000018FLL), xmmword_224688B50);
    if ((v389 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xD0D0D0D0D0D0D0DLL;
      v598 = xmmword_224688B60;
      v599 = xmmword_224688B70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 1, 6, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1CF0000018FLL), xmmword_224688B70);
      if (((v500 | v417) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        v598 = v553;
        v599 = v554;
        *(_QWORD *)&v588 = 0xD0D0D0D0D0D0D0DLL;
        v593 = xmmword_224688B80;
        v594 = xmmword_224688B90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 1, 6, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1CF0000018FLL), xmmword_224688B90);
        v442 = (v494 & 1) == 0 && ((v488 | v416) & 1) == 0;
        if ((v458 & 1) == 0 && v442)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_224688BA0;
          v589 = xmmword_224688BB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 1, 6, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x14F0000018FLL), xmmword_224688BB0);
        }
      }
      v443 = (v483 & 1) == 0 && ((v488 | v416) & 1) == 0;
      if (v443 && (v511 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v589 = v569;
        v588 = v568;
        v583 = xmmword_224688BC0;
        v584 = xmmword_224688BD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 1, 6, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x14F0000018FLL), xmmword_224688BD0);
      }
    }
    v444 = (v433 & 0x40000000 | v416 & 1) == 0;
    if (!(v430 & 0x40000000 | v417 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      *(_QWORD *)&v573 = 0x16160D0D16160D0DLL;
      v584 = v569;
      v583 = v568;
      v578 = xmmword_224688BE0;
      v579 = xmmword_224688BF0;
      *(_QWORD *)&v604[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 1, 6, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)v604, COERCE_DOUBLE(0x1CF0000018FLL), xmmword_224688BF0);
      v445 = (v426 & 0x40000000) == 0 && v444;
      if ((v494 & 1) == 0 && v445)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v604[0] = 0x161616160D0D0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_224688C00;
        v574 = xmmword_224688C10;
        v605[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 1, 6, (uint64_t)v604, (uint64_t)&v573, (uint64_t)v605, COERCE_DOUBLE(0x14F0000018FLL), xmmword_224688C10);
      }
    }
    v446 = (v511 & 1) == 0 && v444;
    if (v446 && (v440 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      v605[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v604[0] = xmmword_224688C20;
      v604[1] = xmmword_224688C30;
      v603 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 1, 6, (uint64_t)v605, (uint64_t)v604, (uint64_t)&v603, COERCE_DOUBLE(0x14F0000018FLL), xmmword_224688C30);
    }
  }
  v538 = v471;
  v539.i64[0] = (uint64_t)v252;
  *(_QWORD *)&v598 = v517;
  *((_QWORD *)&v598 + 1) = v515;
  v599.i64[0] = (uint64_t)v505;
  v547 = v522;
  v546 = v521;
  v545 = v520;
  v543 = v518;
  v544 = v519;
  return sub_223E33F14((unsigned __int8 ***)&v538, &v598, &v543);
}

unint64_t sub_223E33F14(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  _BOOL4 v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  _BOOL4 v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  _BOOL4 v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  unsigned int v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  _BOOL4 v229;
  _BOOL4 v230;
  unsigned __int8 **v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  unint64_t v249;
  uint64_t v250;
  unsigned int v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  _BOOL4 v284;
  _BOOL4 v285;
  _BOOL4 v286;
  _BOOL4 v287;
  _BOOL4 v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  _BOOL4 v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  _BOOL4 v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  unsigned int v339;
  _BOOL4 v340;
  _BOOL4 v341;
  _BOOL4 v342;
  _BOOL4 v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  _BOOL4 v359;
  _BOOL4 v360;
  _BOOL4 v361;
  _BOOL4 v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  int v368;
  unsigned int v369;
  int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  unsigned int v374;
  int v375;
  _BOOL4 v376;
  _BOOL4 v377;
  _BOOL4 v378;
  _BOOL4 v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  _BOOL4 v396;
  _BOOL4 v397;
  _BOOL4 v398;
  _BOOL4 v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _BYTE *v403;
  unsigned int v404;
  int v405;
  unint64_t v406;
  uint64_t v407;
  unsigned int v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unint64_t v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  unsigned int v418;
  unsigned int v419;
  _BOOL4 v420;
  _BOOL4 v421;
  _BOOL4 v422;
  _BOOL4 v423;
  _BOOL4 v424;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t *v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  __int128 v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  unsigned __int8 **v477;
  _BYTE **v478;
  unsigned int v479;
  uint64_t v480;
  _BYTE **v481;
  unsigned int v482;
  _BYTE **v483;
  unsigned int v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  float32x4_t v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  uint64_t v580;
  _OWORD v581[2];
  _QWORD v582[3];

  v4 = a2;
  v582[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v483 = *a1;
  v6 = *((_DWORD *)v5 + 328);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 392);
    v9 = *((_DWORD *)v5 + 336);
    v10 = *((_DWORD *)v5 + 400);
    v11 = *((_DWORD *)v5 + 344);
    v487 = *a2;
    v472 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 392);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 392);
    v18 = *((_DWORD *)v5 + 336);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 336);
    v19 = *((_DWORD *)v5 + 400);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 400);
    v20 = *((_DWORD *)v5 + 344);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v487 = *a2;
    v472 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v484 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v487 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v487 + 2328);
    if (v23 >= (*(_QWORD *)(v487 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v24 = *(_QWORD *)(v487 + 2328);
      v10 = v472;
      v8 = v484;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1340);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v472;
      v8 = v484;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1596);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v488 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v472;
      v8 = v484;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1372);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 1908);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v472;
      v8 = v484;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1628);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v479 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v472;
      v8 = v484;
      v38 = v64;
      v48 = v479;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v488 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1404);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v483 = *a1;
  v487 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v451 = v6 >> 30;
  v477 = (unsigned __int8 **)v4[2];
  v480 = v4[1];
  v497 = a3[2];
  v498 = a3[3];
  v499 = a3[4];
  v495 = *a3;
  v496 = a3[1];
  v70 = *((_DWORD *)v5 + 329);
  v437 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 393);
    v72 = *((_DWORD *)v5 + 337);
    v468 = *((_DWORD *)v5 + 401);
    v73 = *((_DWORD *)v5 + 345);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 393);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 337);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 401);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v468 = v81;
    v82 = *((_DWORD *)v5 + 345);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v85 = v11 >> 30;
  v434 = v70 >> 30;
  v460 = v72 >> 30;
  v464 = v71 >> 30;
  v443 = v73 >> 30;
  v507 = a3[2];
  v508 = a3[3];
  v509 = a3[4];
  v505 = *a3;
  v506 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v86 = v15;
    v87 = v16;
    v88 = a3[3];
    v522 = a3[2];
    v523 = v88;
    v524 = a3[4];
    v89 = *a3;
    v521 = a3[1];
    v520 = v89;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224688C40;
    v516 = (__int128)xmmword_224688C50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 0, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D000000190), xmmword_224688C50);
    if (!v13)
    {
      v517 = v507;
      v518 = v508;
      v519 = v509;
      v516 = v506;
      v515 = v505;
      *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
      v575 = xmmword_224688C60;
      v576 = (__int128)xmmword_224688C70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 0, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D000000190), xmmword_224688C70);
      v90 = (v14 | v83 & 1) == 0;
      if (!(v86 | v84 & 1))
      {
        v577 = v507;
        v578 = v508;
        v579 = v509;
        v575 = v505;
        v576 = v506;
        *(_QWORD *)&v565 = 0x40404040D0D0D0DLL;
        v570 = xmmword_224688C80;
        v571 = (__int128)xmmword_224688C90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 0, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D000000190), xmmword_224688C90);
        v91 = (v451 & 1) == 0 && v90;
        if (!v87 && v91)
        {
          v572 = v507;
          v573 = v508;
          v574 = v509;
          v571 = v506;
          v570 = v505;
          *(_QWORD *)&v560 = 0x4040D0D04040D0DLL;
          v565 = xmmword_224688CA0;
          v566 = (__int128)xmmword_224688CB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 0, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15000000190), xmmword_224688CB0);
        }
      }
      if (v12)
        v92 = 0;
      else
        v92 = v90;
      if (v92 && (v85 & 1) == 0)
      {
        v567 = v507;
        v568 = v508;
        v569 = v509;
        *(_QWORD *)&v555 = 0x40404040D0D0D0DLL;
        v566 = v506;
        v565 = v505;
        v560 = xmmword_224688CC0;
        v561 = (__int128)xmmword_224688CD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15000000190), xmmword_224688CD0);
      }
    }
    if (((v84 | v464) & 1) == 0)
    {
      v562 = v507;
      v563 = v508;
      v564 = v509;
      v561 = v506;
      v560 = v505;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224688CE0;
      v556 = (__int128)xmmword_224688CF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 0, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D000000190), xmmword_224688CF0);
      v93 = (v434 & 1) == 0 && ((v83 | v460) & 1) == 0;
      if ((v451 & 1) == 0 && v93)
      {
        v557 = v507;
        v558 = v508;
        v559 = v509;
        v556 = v506;
        v555 = v505;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224688D00;
        v551 = (__int128)xmmword_224688D10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 0, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15000000190), xmmword_224688D10);
      }
    }
    v94 = (v85 & 1) == 0 && ((v83 | v460) & 1) == 0;
    v10 = v472;
    if (v94 && (v443 & 1) == 0)
    {
      v552 = v507;
      v553 = v508;
      v554 = v509;
      v551 = v506;
      v550 = v505;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224688D20;
      v546 = xmmword_224688D30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 0, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15000000190), xmmword_224688D30);
      v10 = v472;
    }
  }
  v95 = *((_DWORD *)v5 + 330);
  if (**v483)
  {
    v96 = *((_DWORD *)v5 + 394);
    v97 = *((_DWORD *)v5 + 338);
    v98 = *((_DWORD *)v5 + 402);
    v99 = *((_DWORD *)v5 + 346);
  }
  else
  {
    if ((v95 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v95 & 0x20000000) != 0)
      v95 = v100;
    else
      v95 &= 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 394);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v96 = v102;
    else
      v96 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 338);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v97 = v104;
    else
      v97 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 402);
    if ((v105 & 0x10000000) != 0)
      v106 = 0x40000000;
    else
      v106 = 0x80000000;
    if ((v105 & 0x20000000) != 0)
      v98 = v106;
    else
      v98 = v105 & 0xCFFFFFFF;
    v107 = *((_DWORD *)v5 + 346);
    if ((v107 & 0x10000000) != 0)
      v99 = 0x40000000;
    else
      v99 = 0x80000000;
    if ((v107 & 0x20000000) == 0)
      v99 = v107 & 0xCFFFFFFF;
  }
  v456 = v97 >> 30;
  v431 = v95 >> 30;
  v473 = v96 >> 30;
  v108 = v99 >> 30;
  if ((v468 & 0x40000000) != 0)
  {
    v109 = (v10 & 0x40000000) == 0;
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224688D40;
    v516 = (__int128)xmmword_224688D50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 1, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D100000191), xmmword_224688D50);
    if (v109)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224688D60;
      v576 = (__int128)xmmword_224688D70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 1, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D100000191), xmmword_224688D70);
      if (((v84 | v464) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224688D80;
        v571 = (__int128)xmmword_224688D90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 1, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D100000191), xmmword_224688D90);
        v110 = (v434 & 1) == 0 && ((v83 | v460) & 1) == 0;
        if ((v451 & 1) == 0 && v110)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224688DA0;
          v566 = (__int128)xmmword_224688DB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 1, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15100000191), xmmword_224688DB0);
        }
      }
      v111 = (v85 & 1) == 0 && ((v83 | v460) & 1) == 0;
      if (v111 && (v443 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224688DC0;
        v561 = (__int128)xmmword_224688DD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15100000191), xmmword_224688DD0);
      }
    }
    if (((v464 | v473) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224688DE0;
      v556 = (__int128)xmmword_224688DF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 1, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D100000191), xmmword_224688DF0);
      v112 = (v431 & 1) == 0 && ((v460 | v456) & 1) == 0;
      if ((v434 & 1) == 0 && v112)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224688E00;
        v551 = (__int128)xmmword_224688E10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 1, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15100000191), xmmword_224688E10);
      }
    }
    v113 = (v443 & 1) == 0 && ((v460 | v456) & 1) == 0;
    if (v113 && (v108 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224688E20;
      v546 = xmmword_224688E30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 1, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15100000191), xmmword_224688E30);
    }
  }
  v114 = *((_DWORD *)v5 + 331);
  if (**v483)
  {
    v115 = *((_DWORD *)v5 + 395);
    v116 = *((_DWORD *)v5 + 339);
    v117 = *((_DWORD *)v5 + 403);
    v118 = *((_DWORD *)v5 + 347);
  }
  else
  {
    if ((v114 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v114 = v119;
    else
      v114 &= 0xCFFFFFFF;
    v120 = *((_DWORD *)v5 + 395);
    if ((v120 & 0x10000000) != 0)
      v121 = 0x40000000;
    else
      v121 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v115 = v121;
    else
      v115 = v120 & 0xCFFFFFFF;
    v122 = *((_DWORD *)v5 + 339);
    if ((v122 & 0x10000000) != 0)
      v123 = 0x40000000;
    else
      v123 = 0x80000000;
    if ((v122 & 0x20000000) != 0)
      v116 = v123;
    else
      v116 = v122 & 0xCFFFFFFF;
    v124 = *((_DWORD *)v5 + 403);
    if ((v124 & 0x10000000) != 0)
      v125 = 0x40000000;
    else
      v125 = 0x80000000;
    if ((v124 & 0x20000000) != 0)
      v117 = v125;
    else
      v117 = v124 & 0xCFFFFFFF;
    v126 = *((_DWORD *)v5 + 347);
    if ((v126 & 0x10000000) != 0)
      v118 = 0x40000000;
    else
      v118 = 0x80000000;
    if ((v126 & 0x20000000) == 0)
      v118 = v126 & 0xCFFFFFFF;
  }
  v127 = v116 >> 30;
  v430 = v114 >> 30;
  v452 = v115 >> 30;
  v440 = v118 >> 30;
  if ((v98 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224688E40;
    v516 = (__int128)xmmword_224688E50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 2, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D200000192), xmmword_224688E50);
    if ((v468 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224688E60;
      v576 = (__int128)xmmword_224688E70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 2, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D200000192), xmmword_224688E70);
      if (((v464 | v473) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224688E80;
        v571 = (__int128)xmmword_224688E90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 2, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D200000192), xmmword_224688E90);
        v128 = (v431 & 1) == 0 && ((v460 | v456) & 1) == 0;
        if ((v434 & 1) == 0 && v128)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224688EA0;
          v566 = (__int128)xmmword_224688EB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 2, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15200000192), xmmword_224688EB0);
        }
      }
      v129 = (v443 & 1) == 0 && ((v460 | v456) & 1) == 0;
      if (v129 && (v108 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224688EC0;
        v561 = (__int128)xmmword_224688ED0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15200000192), xmmword_224688ED0);
      }
    }
    if (((v473 | v452) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224688EE0;
      v556 = (__int128)xmmword_224688EF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 2, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D200000192), xmmword_224688EF0);
      v130 = (v430 & 1) == 0 && ((v456 | v127) & 1) == 0;
      if ((v431 & 1) == 0 && v130)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224688F00;
        v551 = (__int128)xmmword_224688F10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 2, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15200000192), xmmword_224688F10);
      }
    }
    v131 = (v108 & 1) == 0 && ((v456 | v127) & 1) == 0;
    if (v131 && (v440 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224688F20;
      v546 = xmmword_224688F30;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 2, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15200000192), xmmword_224688F30);
    }
  }
  v132 = *((_DWORD *)v5 + 332);
  if (**v483)
  {
    v133 = *((_DWORD *)v5 + 396);
    v134 = *((_DWORD *)v5 + 340);
    v135 = *((_DWORD *)v5 + 404);
    v136 = *((_DWORD *)v5 + 348);
  }
  else
  {
    if ((v132 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v132 & 0x20000000) != 0)
      v132 = v137;
    else
      v132 &= 0xCFFFFFFF;
    v138 = *((_DWORD *)v5 + 396);
    if ((v138 & 0x10000000) != 0)
      v139 = 0x40000000;
    else
      v139 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v133 = v139;
    else
      v133 = v138 & 0xCFFFFFFF;
    v140 = *((_DWORD *)v5 + 340);
    if ((v140 & 0x10000000) != 0)
      v141 = 0x40000000;
    else
      v141 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v134 = v141;
    else
      v134 = v140 & 0xCFFFFFFF;
    v142 = *((_DWORD *)v5 + 404);
    if ((v142 & 0x10000000) != 0)
      v143 = 0x40000000;
    else
      v143 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v135 = v143;
    else
      v135 = v142 & 0xCFFFFFFF;
    v144 = *((_DWORD *)v5 + 348);
    if ((v144 & 0x10000000) != 0)
      v136 = 0x40000000;
    else
      v136 = 0x80000000;
    if ((v144 & 0x20000000) == 0)
      v136 = v144 & 0xCFFFFFFF;
  }
  v435 = v132 >> 30;
  v465 = v134 >> 30;
  v469 = v133 >> 30;
  v145 = v136 >> 30;
  if ((v117 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224688F40;
    v516 = (__int128)xmmword_224688F50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 3, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D300000193), xmmword_224688F50);
    if ((v98 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224688F60;
      v576 = (__int128)xmmword_224688F70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 3, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D300000193), xmmword_224688F70);
      if (((v473 | v452) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224688F80;
        v571 = (__int128)xmmword_224688F90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 3, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D300000193), xmmword_224688F90);
        v146 = (v430 & 1) == 0 && ((v456 | v127) & 1) == 0;
        if ((v431 & 1) == 0 && v146)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224688FA0;
          v566 = (__int128)xmmword_224688FB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 3, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15300000193), xmmword_224688FB0);
        }
      }
      v147 = (v108 & 1) == 0 && ((v456 | v127) & 1) == 0;
      if (v147 && (v440 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224688FC0;
        v561 = (__int128)xmmword_224688FD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15300000193), xmmword_224688FD0);
      }
    }
    if (((v452 | v469) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224688FE0;
      v556 = (__int128)xmmword_224688FF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 3, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D300000193), xmmword_224688FF0);
      v148 = (v435 & 1) == 0 && ((v127 | v465) & 1) == 0;
      if ((v430 & 1) == 0 && v148)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689000;
        v551 = (__int128)xmmword_224689010;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 3, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15300000193), xmmword_224689010);
      }
    }
    v149 = (v440 & 1) == 0 && ((v127 | v465) & 1) == 0;
    if (v149 && (v145 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689020;
      v546 = xmmword_224689030;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 3, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15300000193), xmmword_224689030);
    }
  }
  v150 = *((_DWORD *)v5 + 333);
  if (**v483)
  {
    v151 = *((_DWORD *)v5 + 397);
    v152 = *((_DWORD *)v5 + 341);
    v153 = *((_DWORD *)v5 + 405);
    v154 = *((_DWORD *)v5 + 349);
  }
  else
  {
    if ((v150 & 0x10000000) != 0)
      v155 = 0x40000000;
    else
      v155 = 0x80000000;
    if ((v150 & 0x20000000) != 0)
      v150 = v155;
    else
      v150 &= 0xCFFFFFFF;
    v156 = *((_DWORD *)v5 + 397);
    if ((v156 & 0x10000000) != 0)
      v157 = 0x40000000;
    else
      v157 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v151 = v157;
    else
      v151 = v156 & 0xCFFFFFFF;
    v158 = *((_DWORD *)v5 + 341);
    if ((v158 & 0x10000000) != 0)
      v159 = 0x40000000;
    else
      v159 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v152 = v159;
    else
      v152 = v158 & 0xCFFFFFFF;
    v160 = *((_DWORD *)v5 + 405);
    if ((v160 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v160 & 0x20000000) != 0)
      v153 = v161;
    else
      v153 = v160 & 0xCFFFFFFF;
    v162 = *((_DWORD *)v5 + 349);
    if ((v162 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v162 & 0x20000000) == 0)
      v154 = v162 & 0xCFFFFFFF;
  }
  v163 = v152 >> 30;
  v432 = v150 >> 30;
  v474 = v151 >> 30;
  v444 = v154 >> 30;
  if ((v135 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689040;
    v516 = (__int128)xmmword_224689050;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 4, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D400000194), xmmword_224689050);
    if ((v117 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689060;
      v576 = (__int128)xmmword_224689070;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 4, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D400000194), xmmword_224689070);
      if (((v452 | v469) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689080;
        v571 = (__int128)xmmword_224689090;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 4, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D400000194), xmmword_224689090);
        v164 = (v435 & 1) == 0 && ((v127 | v465) & 1) == 0;
        if ((v430 & 1) == 0 && v164)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246890A0;
          v566 = (__int128)xmmword_2246890B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 4, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15400000194), xmmword_2246890B0);
        }
      }
      v165 = (v440 & 1) == 0 && ((v127 | v465) & 1) == 0;
      if (v165 && (v145 & 1) == 0)
      {
        v567 = v497;
        v568 = v498;
        v569 = v499;
        v566 = v496;
        v565 = v495;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246890C0;
        v561 = (__int128)xmmword_2246890D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15400000194), xmmword_2246890D0);
      }
    }
    if (((v469 | v474) & 1) == 0)
    {
      v562 = v497;
      v563 = v498;
      v564 = v499;
      v561 = v496;
      v560 = v495;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246890E0;
      v556 = (__int128)xmmword_2246890F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 4, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D400000194), xmmword_2246890F0);
      v166 = (v432 & 1) == 0 && ((v465 | v163) & 1) == 0;
      if ((v435 & 1) == 0 && v166)
      {
        v557 = v497;
        v558 = v498;
        v559 = v499;
        v556 = v496;
        v555 = v495;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689100;
        v551 = (__int128)xmmword_224689110;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 4, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15400000194), xmmword_224689110);
      }
    }
    v167 = (v145 & 1) == 0 && ((v465 | v163) & 1) == 0;
    if (v167 && (v444 & 1) == 0)
    {
      v552 = v497;
      v553 = v498;
      v554 = v499;
      v551 = v496;
      v550 = v495;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689120;
      v546 = xmmword_224689130;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 4, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15400000194), xmmword_224689130);
    }
  }
  v168 = *((_DWORD *)v5 + 334);
  if (**v483)
  {
    v169 = *((_DWORD *)v5 + 398);
    v170 = *((_DWORD *)v5 + 342);
    v171 = *((_DWORD *)v5 + 406);
    v172 = *((_DWORD *)v5 + 350);
  }
  else
  {
    if ((v168 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v168 = v173;
    else
      v168 &= 0xCFFFFFFF;
    v174 = *((_DWORD *)v5 + 398);
    if ((v174 & 0x10000000) != 0)
      v175 = 0x40000000;
    else
      v175 = 0x80000000;
    if ((v174 & 0x20000000) != 0)
      v169 = v175;
    else
      v169 = v174 & 0xCFFFFFFF;
    v176 = *((_DWORD *)v5 + 342);
    if ((v176 & 0x10000000) != 0)
      v177 = 0x40000000;
    else
      v177 = 0x80000000;
    if ((v176 & 0x20000000) != 0)
      v170 = v177;
    else
      v170 = v176 & 0xCFFFFFFF;
    v178 = *((_DWORD *)v5 + 406);
    if ((v178 & 0x10000000) != 0)
      v179 = 0x40000000;
    else
      v179 = 0x80000000;
    if ((v178 & 0x20000000) != 0)
      v171 = v179;
    else
      v171 = v178 & 0xCFFFFFFF;
    v180 = *((_DWORD *)v5 + 350);
    if ((v180 & 0x10000000) != 0)
      v172 = 0x40000000;
    else
      v172 = 0x80000000;
    if ((v180 & 0x20000000) == 0)
      v172 = v180 & 0xCFFFFFFF;
  }
  v441 = v168 >> 30;
  v457 = v170 >> 30;
  v461 = v169 >> 30;
  v453 = v172 >> 30;
  v537 = v497;
  v538 = v498;
  v539 = v499;
  v536 = v496;
  v535 = v495;
  if ((v153 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689140;
    v516 = (__int128)xmmword_224689150;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 5, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D500000195), xmmword_224689150);
    if ((v135 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689160;
      v576 = (__int128)xmmword_224689170;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 5, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D500000195), xmmword_224689170);
      if (((v469 | v474) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689180;
        v571 = (__int128)xmmword_224689190;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 5, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D500000195), xmmword_224689190);
        v181 = (v432 & 1) == 0 && ((v465 | v163) & 1) == 0;
        if ((v435 & 1) == 0 && v181)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246891A0;
          v566 = (__int128)xmmword_2246891B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 5, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15500000195), xmmword_2246891B0);
        }
      }
      v182 = (v145 & 1) == 0 && ((v465 | v163) & 1) == 0;
      if (v182 && (v444 & 1) == 0)
      {
        v567 = v537;
        v568 = v538;
        v569 = v539;
        v566 = v536;
        v565 = v535;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246891C0;
        v561 = (__int128)xmmword_2246891D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15500000195), xmmword_2246891D0);
      }
    }
    if (((v474 | v461) & 1) == 0)
    {
      v562 = v537;
      v563 = v538;
      v564 = v539;
      v561 = v536;
      v560 = v535;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246891E0;
      v556 = (__int128)xmmword_2246891F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 5, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D500000195), xmmword_2246891F0);
      v183 = (v441 & 1) == 0 && ((v163 | v457) & 1) == 0;
      if ((v432 & 1) == 0 && v183)
      {
        v557 = v537;
        v558 = v538;
        v559 = v539;
        v556 = v536;
        v555 = v535;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689200;
        v551 = (__int128)xmmword_224689210;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 5, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15500000195), xmmword_224689210);
      }
    }
    v184 = (v444 & 1) == 0 && ((v163 | v457) & 1) == 0;
    if (v184 && (v453 & 1) == 0)
    {
      v552 = v537;
      v553 = v538;
      v554 = v539;
      v551 = v536;
      v550 = v535;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689220;
      v546 = xmmword_224689230;
      *(_QWORD *)&v530 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 5, 2, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v530, COERCE_DOUBLE(0x15500000195), xmmword_224689230);
    }
  }
  v532 = v497;
  v533 = v498;
  v534 = v499;
  v531 = v496;
  v530 = v495;
  v185 = *((_DWORD *)v5 + 335);
  if (**v483)
  {
    v186 = *((_DWORD *)v5 + 399);
    v187 = *((_DWORD *)v5 + 343);
    v188 = *((_DWORD *)v5 + 407);
    v189 = *((_DWORD *)v5 + 351);
  }
  else
  {
    if ((v185 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v185 & 0x20000000) != 0)
      v185 = v190;
    else
      v185 &= 0xCFFFFFFF;
    v191 = *((_DWORD *)v5 + 399);
    if ((v191 & 0x10000000) != 0)
      v192 = 0x40000000;
    else
      v192 = 0x80000000;
    if ((v191 & 0x20000000) != 0)
      v186 = v192;
    else
      v186 = v191 & 0xCFFFFFFF;
    v193 = *((_DWORD *)v5 + 343);
    if ((v193 & 0x10000000) != 0)
      v194 = 0x40000000;
    else
      v194 = 0x80000000;
    if ((v193 & 0x20000000) != 0)
      v187 = v194;
    else
      v187 = v193 & 0xCFFFFFFF;
    v195 = *((_DWORD *)v5 + 407);
    if ((v195 & 0x10000000) != 0)
      v196 = 0x40000000;
    else
      v196 = 0x80000000;
    if ((v195 & 0x20000000) != 0)
      v188 = v196;
    else
      v188 = v195 & 0xCFFFFFFF;
    v197 = *((_DWORD *)v5 + 351);
    if ((v197 & 0x10000000) != 0)
      v189 = 0x40000000;
    else
      v189 = 0x80000000;
    if ((v197 & 0x20000000) == 0)
      v189 = v197 & 0xCFFFFFFF;
  }
  v198 = v187 >> 30;
  v485 = v185 >> 30;
  v199 = v186 >> 30;
  v200 = v189 >> 30;
  v542 = v497;
  v543 = v498;
  v544 = v499;
  v541 = v496;
  v540 = v495;
  if ((v171 & 0x40000000) != 0)
  {
    v522 = v497;
    v523 = v498;
    v524 = v499;
    v521 = v496;
    v520 = v495;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689240;
    v516 = (__int128)xmmword_224689250;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 6, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D600000196), xmmword_224689250);
    if ((v153 & 0x40000000) == 0)
    {
      v517 = v497;
      v518 = v498;
      v519 = v499;
      v516 = v496;
      v515 = v495;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689260;
      v576 = (__int128)xmmword_224689270;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 6, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D600000196), xmmword_224689270);
      if (((v474 | v461) & 1) == 0)
      {
        v577 = v497;
        v578 = v498;
        v579 = v499;
        v575 = v495;
        v576 = v496;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689280;
        v571 = (__int128)xmmword_224689290;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 6, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D600000196), xmmword_224689290);
        v201 = (v441 & 1) == 0 && ((v163 | v457) & 1) == 0;
        if ((v432 & 1) == 0 && v201)
        {
          v572 = v497;
          v573 = v498;
          v574 = v499;
          v571 = v496;
          v570 = v495;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246892A0;
          v566 = (__int128)xmmword_2246892B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 6, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15600000196), xmmword_2246892B0);
        }
      }
      v202 = (v444 & 1) == 0 && ((v163 | v457) & 1) == 0;
      if (v202 && (v453 & 1) == 0)
      {
        v567 = v542;
        v568 = v543;
        v569 = v544;
        v566 = v541;
        v565 = v540;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246892C0;
        v561 = (__int128)xmmword_2246892D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15600000196), xmmword_2246892D0);
      }
    }
    if (((v461 | v199) & 1) == 0)
    {
      v562 = v542;
      v563 = v543;
      v564 = v544;
      v561 = v541;
      v560 = v540;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246892E0;
      v556 = (__int128)xmmword_2246892F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 6, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D600000196), xmmword_2246892F0);
      v203 = (v485 & 1) == 0 && ((v457 | v198) & 1) == 0;
      if ((v441 & 1) == 0 && v203)
      {
        v557 = v542;
        v558 = v543;
        v559 = v544;
        v556 = v541;
        v555 = v540;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689300;
        v551 = (__int128)xmmword_224689310;
        *(_QWORD *)&v525 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 6, 2, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v525, COERCE_DOUBLE(0x15600000196), xmmword_224689310);
      }
    }
    v204 = (v453 & 1) == 0 && ((v457 | v198) & 1) == 0;
    if (v204 && (v200 & 1) == 0)
    {
      v552 = v542;
      v553 = v543;
      v554 = v544;
      v551 = v541;
      v550 = v540;
      *(_QWORD *)&v525 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689320;
      v546 = xmmword_224689330;
      *(_QWORD *)&v581[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 6, 2, 6, (uint64_t)&v525, (uint64_t)&v545, (uint64_t)v581, COERCE_DOUBLE(0x15600000196), xmmword_224689330);
    }
  }
  v205 = *(unsigned int *)(v480 + 88);
  if ((v205 & 0x80000000) != 0)
  {
    v208 = *v477;
    v209 = *(_DWORD *)(v487 + 1592);
    v210 = **v477;
    if (**v477)
      goto LABEL_509;
  }
  else
  {
    v206 = *(_QWORD *)(v487 + 2328);
    if (v205 >= (*(_QWORD *)(v487 + 2336) - v206) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v206 = *(_QWORD *)(v487 + 2328);
    }
    v207 = v206 + (v205 << 11);
    v208 = *v477;
    v209 = *(_DWORD *)(v207 + 1312);
    v210 = **v477;
    if (**v477)
    {
LABEL_509:
      v211 = *(unsigned int *)(v480 + 88);
      if ((v211 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v213 = *(_DWORD *)(v487 + 1848);
      if (v210)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v209 & 0x10000000) != 0)
    v218 = 0x40000000;
  else
    v218 = 0x80000000;
  if ((v209 & 0x20000000) != 0)
    v209 = v218;
  else
    v209 &= 0xCFFFFFFF;
  v211 = *(unsigned int *)(v480 + 88);
  if ((v211 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v212 = *(_QWORD *)(v487 + 2328);
  if (v211 >= (*(_QWORD *)(v487 + 2336) - v212) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v212 = *(_QWORD *)(v487 + 2328);
    v208 = *v477;
    v210 = **v477;
  }
  v213 = *(_DWORD *)(v212 + (v211 << 11) + 1568);
  if (v210)
  {
LABEL_514:
    v214 = *(unsigned int *)(v480 + 88);
    if ((v214 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v216 = *(_DWORD *)(v487 + 1624);
    if (v210)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v213 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v213 = v219;
  else
    v213 &= 0xCFFFFFFF;
  v214 = *(unsigned int *)(v480 + 88);
  if ((v214 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v215 = *(_QWORD *)(v487 + 2328);
  if (v214 >= (*(_QWORD *)(v487 + 2336) - v215) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v215 = *(_QWORD *)(v487 + 2328);
    v208 = *v477;
    v210 = **v477;
  }
  v216 = *(_DWORD *)(v215 + (v214 << 11) + 1344);
  if (v210)
  {
LABEL_519:
    v217 = *(unsigned int *)(v480 + 88);
    if ((v217 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v216 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v216 & 0x20000000) != 0)
    v216 = v220;
  else
    v216 &= 0xCFFFFFFF;
  v217 = *(unsigned int *)(v480 + 88);
  if ((v217 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v221 = *(_QWORD *)(v487 + 2328);
  v222 = (*(_QWORD *)(v487 + 2336) - v221) >> 11;
  if (v222 > v217)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v208 = *v477;
  v217 = *(unsigned int *)(v480 + 88);
  if ((v217 & 0x80000000) != 0)
  {
LABEL_590:
    v223 = v171;
    v224 = *(_DWORD *)(v487 + 1656);
    if (*v208)
      goto LABEL_559;
    goto LABEL_553;
  }
  v221 = *(_QWORD *)(v487 + 2328);
  v222 = (*(_QWORD *)(v487 + 2336) - v221) >> 11;
LABEL_549:
  if (v222 <= v217)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v221 = *(_QWORD *)(v487 + 2328);
    v208 = *v477;
  }
  v223 = v171;
  v224 = *(_DWORD *)(v221 + (v217 << 11) + 1376);
  if (!*v208)
  {
LABEL_553:
    if ((v224 & 0x10000000) != 0)
      v225 = 0x40000000;
    else
      v225 = 0x80000000;
    if ((v224 & 0x20000000) != 0)
      v224 = v225;
    else
      v224 &= 0xCFFFFFFF;
  }
LABEL_559:
  v547 = v532;
  v548 = v533;
  v549 = v534;
  v546 = (float32x4_t)v531;
  v545 = v530;
  if ((v188 & 0x40000000) != 0)
  {
    v226 = (v223 & 0x40000000) == 0;
    v522 = v532;
    v523 = v533;
    v524 = v534;
    v521 = v531;
    v520 = v530;
    *(_QWORD *)&v575 = 0x161616160D0D0D0DLL;
    v515 = xmmword_224689340;
    v516 = (__int128)xmmword_224689350;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 7, 2, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D700000197), xmmword_224689350);
    if (v226)
    {
      v517 = v532;
      v518 = v533;
      v519 = v534;
      v516 = v531;
      v515 = v530;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689360;
      v576 = (__int128)xmmword_224689370;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 7, 2, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D700000197), xmmword_224689370);
      if (((v461 | v199) & 1) == 0)
      {
        v577 = v532;
        v578 = v533;
        v579 = v534;
        v575 = v530;
        v576 = v531;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689380;
        v571 = (__int128)xmmword_224689390;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 7, 2, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D700000197), xmmword_224689390);
        v227 = (v485 & 1) == 0 && ((v457 | v198) & 1) == 0;
        if ((v441 & 1) == 0 && v227)
        {
          v572 = v532;
          v573 = v533;
          v574 = v534;
          v571 = v531;
          v570 = v530;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246893A0;
          v566 = (__int128)xmmword_2246893B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 7, 2, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15700000197), xmmword_2246893B0);
        }
      }
      v228 = (v453 & 1) == 0 && ((v457 | v198) & 1) == 0;
      if (v228 && (v200 & 1) == 0)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        v566 = (__int128)v546;
        v565 = v545;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246893C0;
        v561 = (__int128)xmmword_2246893D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 2, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15700000197), xmmword_2246893D0);
      }
    }
    if (!(v213 & 0x40000000 | v199 & 1))
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      *(_QWORD *)&v550 = 0x16160D0D16160D0DLL;
      v561 = (__int128)v546;
      v560 = v545;
      v555 = xmmword_2246893E0;
      v556 = (__int128)xmmword_2246893F0;
      *(_QWORD *)&v525 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 7, 2, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v525, COERCE_DOUBLE(0x1D700000197), xmmword_2246893F0);
      v229 = (v209 & 0x40000000) == 0 && (v216 & 0x40000000 | v198 & 1) == 0;
      if ((v485 & 1) == 0 && v229)
      {
        v557 = v547;
        v558 = v548;
        v559 = v549;
        *(_QWORD *)&v525 = 0x161616160D0D0D0DLL;
        v556 = (__int128)v546;
        v555 = v545;
        v550 = xmmword_224689400;
        v551 = (__int128)xmmword_224689410;
        *(_QWORD *)&v581[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 7, 2, 6, (uint64_t)&v525, (uint64_t)&v550, (uint64_t)v581, COERCE_DOUBLE(0x15700000197), xmmword_224689410);
      }
    }
    v230 = (v200 & 1) == 0 && (v216 & 0x40000000 | v198 & 1) == 0;
    if (v230 && (v224 & 0x40000000) == 0)
    {
      v552 = v547;
      v553 = v548;
      v554 = v549;
      *(_QWORD *)&v581[0] = 0x16160D0D16160D0DLL;
      v551 = (__int128)v546;
      v550 = v545;
      v525 = xmmword_224689420;
      v526 = (__int128)xmmword_224689430;
      v582[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 7, 2, 6, (uint64_t)v581, (uint64_t)&v525, (uint64_t)v582, COERCE_DOUBLE(0x15700000197), xmmword_224689430);
    }
  }
  v231 = a1[2];
  v486 = v437[1];
  v489 = *v437;
  v493 = a3[3];
  v494 = a3[4];
  v491 = a3[1];
  v492 = a3[2];
  v490 = *a3;
  v442 = *(_OWORD *)a1;
  v478 = (_BYTE **)v437[2];
  v481 = *a1;
  v232 = *((_DWORD *)v231 + 336);
  v233 = ***a1;
  if (***a1)
  {
    v234 = *((_DWORD *)v231 + 400);
    v235 = *((_DWORD *)v231 + 344);
    v236 = *((_DWORD *)v231 + 352);
    v475 = *((_DWORD *)v231 + 408);
    if ((v475 & 0x40000000) == 0)
    {
LABEL_589:
      v237 = v234;
      v238 = 0;
      v239 = 0;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v232 & 0x20000000) != 0)
      v232 *= 4;
    v243 = *((_DWORD *)v231 + 400);
    if ((v243 & 0x20000000) != 0)
      v234 = 4 * v243;
    else
      v234 = *((_DWORD *)v231 + 400);
    v244 = *((_DWORD *)v231 + 344);
    if ((v244 & 0x20000000) != 0)
      v235 = 4 * v244;
    else
      v235 = *((_DWORD *)v231 + 344);
    v245 = *((_DWORD *)v231 + 408);
    if ((v245 & 0x20000000) != 0)
      v246 = 4 * v245;
    else
      v246 = *((_DWORD *)v231 + 408);
    v247 = *((_DWORD *)v231 + 352);
    if ((v247 & 0x10000000) != 0)
      v248 = 0x40000000;
    else
      v248 = 0x80000000;
    if ((v247 & 0x20000000) != 0)
      v236 = v248;
    else
      v236 = v247 & 0xCFFFFFFF;
    v475 = v246;
    if ((v246 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v249 = *(unsigned int *)(v486 + 16);
  if ((v249 & 0x80000000) != 0)
  {
    v251 = *(_DWORD *)(v489 + 1652);
    v252 = **v478;
    if (**v478)
      goto LABEL_615;
  }
  else
  {
    v250 = *(_QWORD *)(v489 + 2328);
    if (v249 >= (*(_QWORD *)(v489 + 2336) - v250) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v250 = *(_QWORD *)(v489 + 2328);
    }
    v251 = *(_DWORD *)(v250 + (v249 << 11) + 1372);
    v252 = **v478;
    if (**v478)
    {
LABEL_615:
      v253 = *(unsigned int *)(v486 + 16);
      if ((v253 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v255 = *(_DWORD *)(v489 + 1908);
      if (v252)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v251 & 0x10000000) != 0)
    v426 = 0x40000000;
  else
    v426 = 0x80000000;
  if ((v251 & 0x20000000) != 0)
    v251 = v426;
  else
    v251 &= 0xCFFFFFFF;
  v253 = *(unsigned int *)(v486 + 16);
  if ((v253 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v254 = *(_QWORD *)(v489 + 2328);
  if (v253 >= (*(_QWORD *)(v489 + 2336) - v254) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v254 = *(_QWORD *)(v489 + 2328);
    v252 = **v478;
  }
  v255 = *(_DWORD *)(v254 + (v253 << 11) + 1628);
  if (v252)
  {
LABEL_620:
    v256 = *(unsigned int *)(v486 + 16);
    if ((v256 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v258 = *(_DWORD *)(v489 + 1684);
    if (v252)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v255 & 0x10000000) != 0)
    v427 = 0x40000000;
  else
    v427 = 0x80000000;
  if ((v255 & 0x20000000) != 0)
    v255 = v427;
  else
    v255 &= 0xCFFFFFFF;
  v256 = *(unsigned int *)(v486 + 16);
  if ((v256 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v257 = *(_QWORD *)(v489 + 2328);
  if (v256 >= (*(_QWORD *)(v489 + 2336) - v257) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v257 = *(_QWORD *)(v489 + 2328);
    v252 = **v478;
  }
  v258 = *(_DWORD *)(v257 + (v256 << 11) + 1404);
  if (v252)
  {
LABEL_625:
    v259 = *(unsigned int *)(v486 + 16);
    if ((v259 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v261 = *(_DWORD *)(v489 + 1940);
    if (v252)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v258 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v258 & 0x20000000) != 0)
    v258 = v428;
  else
    v258 &= 0xCFFFFFFF;
  v259 = *(unsigned int *)(v486 + 16);
  if ((v259 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v260 = *(_QWORD *)(v489 + 2328);
  if (v259 >= (*(_QWORD *)(v489 + 2336) - v260) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v260 = *(_QWORD *)(v489 + 2328);
    v252 = **v478;
  }
  v261 = *(_DWORD *)(v260 + (v259 << 11) + 1660);
  if (v252)
  {
LABEL_630:
    v262 = *(unsigned int *)(v486 + 16);
    if ((v262 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v261 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v261 & 0x20000000) != 0)
    v261 = v429;
  else
    v261 &= 0xCFFFFFFF;
  v262 = *(unsigned int *)(v486 + 16);
  if ((v262 & 0x80000000) == 0)
  {
LABEL_631:
    v263 = *(_QWORD *)(v489 + 2328);
    if (v262 >= (*(_QWORD *)(v489 + 2336) - v263) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v263 = *(_QWORD *)(v489 + 2328);
      v252 = **v478;
    }
    v237 = v234;
    v264 = v263 + (v262 << 11);
    v242 = (v251 >> 30) & 1;
    v241 = (v255 >> 30) & 1;
    v240 = (v258 >> 30) & 1;
    v265 = *(_DWORD *)(v264 + 1436);
    v239 = (v261 >> 30) & 1;
    if (v252)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v237 = v234;
  v242 = (v251 >> 30) & 1;
  v241 = (v255 >> 30) & 1;
  v240 = (v258 >> 30) & 1;
  v265 = *(_DWORD *)(v489 + 1716);
  v239 = (v261 >> 30) & 1;
  if (!v252)
  {
LABEL_635:
    if ((v265 & 0x10000000) != 0)
      v266 = 0x40000000;
    else
      v266 = 0x80000000;
    if ((v265 & 0x20000000) != 0)
      v265 = v266;
    else
      v265 &= 0xCFFFFFFF;
  }
LABEL_641:
  v238 = (v265 >> 30) & 1;
  v233 = **v481;
LABEL_642:
  v448 = v232 >> 30;
  v527 = v492;
  v528 = v493;
  v529 = v494;
  v526 = v491;
  v525 = v490;
  v267 = *((_DWORD *)v231 + 337);
  if (v233)
  {
    v268 = *((_DWORD *)v231 + 401);
    v269 = *((_DWORD *)v231 + 345);
    v470 = *((_DWORD *)v231 + 409);
    v270 = *((_DWORD *)v231 + 353);
  }
  else
  {
    if ((v267 & 0x10000000) != 0)
      v271 = 0x40000000;
    else
      v271 = 0x80000000;
    if ((v267 & 0x20000000) != 0)
      v267 = v271;
    else
      v267 &= 0xCFFFFFFF;
    v272 = *((_DWORD *)v231 + 401);
    if ((v272 & 0x10000000) != 0)
      v273 = 0x40000000;
    else
      v273 = 0x80000000;
    if ((v272 & 0x20000000) != 0)
      v268 = v273;
    else
      v268 = v272 & 0xCFFFFFFF;
    v274 = *((_DWORD *)v231 + 345);
    if ((v274 & 0x10000000) != 0)
      v275 = 0x40000000;
    else
      v275 = 0x80000000;
    if ((v274 & 0x20000000) != 0)
      v269 = v275;
    else
      v269 = v274 & 0xCFFFFFFF;
    v276 = *((_DWORD *)v231 + 409);
    if ((v276 & 0x10000000) != 0)
      v277 = 0x40000000;
    else
      v277 = 0x80000000;
    if ((v276 & 0x20000000) != 0)
      v278 = v277;
    else
      v278 = v276 & 0xCFFFFFFF;
    v470 = v278;
    v279 = *((_DWORD *)v231 + 353);
    if ((v279 & 0x10000000) != 0)
      v270 = 0x40000000;
    else
      v270 = 0x80000000;
    if ((v279 & 0x20000000) == 0)
      v270 = v279 & 0xCFFFFFFF;
  }
  v280 = v235 >> 30;
  v281 = v237 >> 30;
  v282 = v236 >> 30;
  v445 = v267 >> 30;
  v462 = v269 >> 30;
  v466 = v268 >> 30;
  v283 = v270 >> 30;
  if ((v475 & 0x40000000) != 0)
  {
    v522 = v492;
    v523 = v493;
    v524 = v494;
    v521 = v491;
    v520 = v490;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689440;
    v516 = (__int128)xmmword_224689450;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 0, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D800000198), xmmword_224689450);
    if (!v239)
    {
      v517 = v492;
      v518 = v493;
      v519 = v494;
      v516 = v491;
      v515 = v490;
      *(_QWORD *)&v570 = 0x4040D0D04040D0DLL;
      v575 = xmmword_224689460;
      v576 = (__int128)xmmword_224689470;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 0, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D800000198), xmmword_224689470);
      v284 = (v240 | v280 & 1) == 0;
      if (!(v241 | v281 & 1))
      {
        v577 = v492;
        v578 = v493;
        v579 = v494;
        v575 = v490;
        v576 = v491;
        *(_QWORD *)&v565 = 0x40404040D0D0D0DLL;
        v570 = xmmword_224689480;
        v571 = (__int128)xmmword_224689490;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 0, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D800000198), xmmword_224689490);
        v285 = (v448 & 1) == 0 && v284;
        if (!v242 && v285)
        {
          v572 = v492;
          v573 = v493;
          v574 = v494;
          v571 = v491;
          v570 = v490;
          *(_QWORD *)&v560 = 0x4040D0D04040D0DLL;
          v565 = xmmword_2246894A0;
          v566 = (__int128)xmmword_2246894B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 0, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15800000198), xmmword_2246894B0);
        }
      }
      if (v238)
        v286 = 0;
      else
        v286 = v284;
      if (v286 && (v282 & 1) == 0)
      {
        v567 = v492;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v555 = 0x40404040D0D0D0DLL;
        v566 = v491;
        v565 = v490;
        v560 = xmmword_2246894C0;
        v561 = (__int128)xmmword_2246894D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 0, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15800000198), xmmword_2246894D0);
      }
    }
    if (((v281 | v466) & 1) == 0)
    {
      v562 = v492;
      v563 = v493;
      v564 = v494;
      v561 = v491;
      v560 = v490;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246894E0;
      v556 = (__int128)xmmword_2246894F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 0, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D800000198), xmmword_2246894F0);
      v287 = (v445 & 1) == 0 && ((v280 | v462) & 1) == 0;
      if ((v448 & 1) == 0 && v287)
      {
        v557 = v492;
        v558 = v493;
        v559 = v494;
        v556 = v491;
        v555 = v490;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689500;
        v551 = (__int128)xmmword_224689510;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 0, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15800000198), xmmword_224689510);
      }
    }
    v288 = (v282 & 1) == 0 && ((v280 | v462) & 1) == 0;
    if (v288 && (v283 & 1) == 0)
    {
      v552 = v492;
      v553 = v493;
      v554 = v494;
      v551 = v491;
      v550 = v490;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689520;
      v546 = xmmword_224689530;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 0, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15800000198), xmmword_224689530);
    }
  }
  v502 = v527;
  v503 = v528;
  v504 = v529;
  v500 = v525;
  v501 = v526;
  v289 = *((_DWORD *)v231 + 338);
  if (**v481)
  {
    v290 = *((_DWORD *)v231 + 402);
    v291 = *((_DWORD *)v231 + 346);
    v292 = *((_DWORD *)v231 + 410);
    v293 = *((_DWORD *)v231 + 354);
  }
  else
  {
    if ((v289 & 0x10000000) != 0)
      v294 = 0x40000000;
    else
      v294 = 0x80000000;
    if ((v289 & 0x20000000) != 0)
      v289 = v294;
    else
      v289 &= 0xCFFFFFFF;
    v295 = *((_DWORD *)v231 + 402);
    if ((v295 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v295 & 0x20000000) != 0)
      v290 = v296;
    else
      v290 = v295 & 0xCFFFFFFF;
    v297 = *((_DWORD *)v231 + 346);
    if ((v297 & 0x10000000) != 0)
      v298 = 0x40000000;
    else
      v298 = 0x80000000;
    if ((v297 & 0x20000000) != 0)
      v291 = v298;
    else
      v291 = v297 & 0xCFFFFFFF;
    v299 = *((_DWORD *)v231 + 410);
    if ((v299 & 0x10000000) != 0)
      v300 = 0x40000000;
    else
      v300 = 0x80000000;
    if ((v299 & 0x20000000) != 0)
      v292 = v300;
    else
      v292 = v299 & 0xCFFFFFFF;
    v301 = *((_DWORD *)v231 + 354);
    if ((v301 & 0x10000000) != 0)
      v293 = 0x40000000;
    else
      v293 = 0x80000000;
    if ((v301 & 0x20000000) == 0)
      v293 = v301 & 0xCFFFFFFF;
  }
  v438 = v289 >> 30;
  v454 = v291 >> 30;
  v458 = v290 >> 30;
  v302 = v293 >> 30;
  v512 = v527;
  v513 = v528;
  v514 = v529;
  v510 = v525;
  v511 = v526;
  if ((v470 & 0x40000000) != 0)
  {
    v522 = v527;
    v523 = v528;
    v524 = v529;
    v521 = v526;
    v520 = v525;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689540;
    v516 = (__int128)xmmword_224689550;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 1, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1D900000199), xmmword_224689550);
    if ((v475 & 0x40000000) == 0)
    {
      v517 = v527;
      v518 = v528;
      v519 = v529;
      v516 = v526;
      v515 = v525;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689560;
      v576 = (__int128)xmmword_224689570;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 1, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1D900000199), xmmword_224689570);
      if (((v281 | v466) & 1) == 0)
      {
        v577 = v527;
        v578 = v528;
        v579 = v529;
        v575 = v525;
        v576 = v526;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689580;
        v571 = (__int128)xmmword_224689590;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 1, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1D900000199), xmmword_224689590);
        v303 = (v445 & 1) == 0 && ((v280 | v462) & 1) == 0;
        if ((v448 & 1) == 0 && v303)
        {
          v572 = v527;
          v573 = v528;
          v574 = v529;
          v571 = v526;
          v570 = v525;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246895A0;
          v566 = (__int128)xmmword_2246895B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 1, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15900000199), xmmword_2246895B0);
        }
      }
      v304 = (v282 & 1) == 0 && ((v280 | v462) & 1) == 0;
      if (v304 && (v283 & 1) == 0)
      {
        v567 = v512;
        v568 = v513;
        v569 = v514;
        v566 = v511;
        v565 = v510;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246895C0;
        v561 = (__int128)xmmword_2246895D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 1, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15900000199), xmmword_2246895D0);
      }
    }
    if (((v466 | v458) & 1) == 0)
    {
      v562 = v512;
      v563 = v513;
      v564 = v514;
      v561 = v511;
      v560 = v510;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246895E0;
      v556 = (__int128)xmmword_2246895F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 1, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1D900000199), xmmword_2246895F0);
      v305 = (v438 & 1) == 0 && ((v462 | v454) & 1) == 0;
      if ((v445 & 1) == 0 && v305)
      {
        v557 = v512;
        v558 = v513;
        v559 = v514;
        v556 = v511;
        v555 = v510;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689600;
        v551 = (__int128)xmmword_224689610;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 1, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15900000199), xmmword_224689610);
      }
    }
    v306 = (v283 & 1) == 0 && ((v462 | v454) & 1) == 0;
    if (v306 && (v302 & 1) == 0)
    {
      v552 = v512;
      v553 = v513;
      v554 = v514;
      v551 = v511;
      v550 = v510;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689620;
      v546 = xmmword_224689630;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 1, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15900000199), xmmword_224689630);
    }
  }
  v307 = *((_DWORD *)v231 + 339);
  if (**v481)
  {
    v308 = *((_DWORD *)v231 + 403);
    v309 = *((_DWORD *)v231 + 347);
    v310 = *((_DWORD *)v231 + 411);
    v311 = *((_DWORD *)v231 + 355);
  }
  else
  {
    if ((v307 & 0x10000000) != 0)
      v312 = 0x40000000;
    else
      v312 = 0x80000000;
    if ((v307 & 0x20000000) != 0)
      v307 = v312;
    else
      v307 &= 0xCFFFFFFF;
    v313 = *((_DWORD *)v231 + 403);
    if ((v313 & 0x10000000) != 0)
      v314 = 0x40000000;
    else
      v314 = 0x80000000;
    if ((v313 & 0x20000000) != 0)
      v308 = v314;
    else
      v308 = v313 & 0xCFFFFFFF;
    v315 = *((_DWORD *)v231 + 347);
    if ((v315 & 0x10000000) != 0)
      v316 = 0x40000000;
    else
      v316 = 0x80000000;
    if ((v315 & 0x20000000) != 0)
      v309 = v316;
    else
      v309 = v315 & 0xCFFFFFFF;
    v317 = *((_DWORD *)v231 + 411);
    if ((v317 & 0x10000000) != 0)
      v318 = 0x40000000;
    else
      v318 = 0x80000000;
    if ((v317 & 0x20000000) != 0)
      v310 = v318;
    else
      v310 = v317 & 0xCFFFFFFF;
    v319 = *((_DWORD *)v231 + 355);
    if ((v319 & 0x10000000) != 0)
      v311 = 0x40000000;
    else
      v311 = 0x80000000;
    if ((v319 & 0x20000000) == 0)
      v311 = v319 & 0xCFFFFFFF;
  }
  v320 = v309 >> 30;
  v436 = v307 >> 30;
  v321 = v308 >> 30;
  v449 = v311 >> 30;
  if ((v292 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689640;
    v516 = (__int128)xmmword_224689650;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 2, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DA0000019ALL), xmmword_224689650);
    if ((v470 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689660;
      v576 = (__int128)xmmword_224689670;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 2, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DA0000019ALL), xmmword_224689670);
      if (((v466 | v458) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689680;
        v571 = (__int128)xmmword_224689690;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 2, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DA0000019ALL), xmmword_224689690);
        v322 = (v438 & 1) == 0 && ((v462 | v454) & 1) == 0;
        if ((v445 & 1) == 0 && v322)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246896A0;
          v566 = (__int128)xmmword_2246896B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 2, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15A0000019ALL), xmmword_2246896B0);
        }
      }
      v323 = (v283 & 1) == 0 && ((v462 | v454) & 1) == 0;
      if (v323 && (v302 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246896C0;
        v561 = (__int128)xmmword_2246896D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 2, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15A0000019ALL), xmmword_2246896D0);
      }
    }
    if (((v458 | v321) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246896E0;
      v556 = (__int128)xmmword_2246896F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 2, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1DA0000019ALL), xmmword_2246896F0);
      v324 = (v436 & 1) == 0 && ((v454 | v320) & 1) == 0;
      if ((v438 & 1) == 0 && v324)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689700;
        v551 = (__int128)xmmword_224689710;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 2, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15A0000019ALL), xmmword_224689710);
      }
    }
    v325 = (v302 & 1) == 0 && ((v454 | v320) & 1) == 0;
    if (v325 && (v449 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689720;
      v546 = xmmword_224689730;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 2, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15A0000019ALL), xmmword_224689730);
    }
  }
  v326 = *((_DWORD *)v231 + 340);
  if (**v481)
  {
    v327 = *((_DWORD *)v231 + 404);
    v328 = *((_DWORD *)v231 + 348);
    v329 = *((_DWORD *)v231 + 412);
    v330 = *((_DWORD *)v231 + 356);
  }
  else
  {
    if ((v326 & 0x10000000) != 0)
      v331 = 0x40000000;
    else
      v331 = 0x80000000;
    if ((v326 & 0x20000000) != 0)
      v326 = v331;
    else
      v326 &= 0xCFFFFFFF;
    v332 = *((_DWORD *)v231 + 404);
    if ((v332 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v332 & 0x20000000) != 0)
      v327 = v333;
    else
      v327 = v332 & 0xCFFFFFFF;
    v334 = *((_DWORD *)v231 + 348);
    if ((v334 & 0x10000000) != 0)
      v335 = 0x40000000;
    else
      v335 = 0x80000000;
    if ((v334 & 0x20000000) != 0)
      v328 = v335;
    else
      v328 = v334 & 0xCFFFFFFF;
    v336 = *((_DWORD *)v231 + 412);
    if ((v336 & 0x10000000) != 0)
      v337 = 0x40000000;
    else
      v337 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v329 = v337;
    else
      v329 = v336 & 0xCFFFFFFF;
    v338 = *((_DWORD *)v231 + 356);
    if ((v338 & 0x10000000) != 0)
      v330 = 0x40000000;
    else
      v330 = 0x80000000;
    if ((v338 & 0x20000000) == 0)
      v330 = v338 & 0xCFFFFFFF;
  }
  v339 = v328 >> 30;
  v433 = v326 >> 30;
  v476 = v327 >> 30;
  v446 = v330 >> 30;
  if ((v310 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689740;
    v516 = (__int128)xmmword_224689750;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 3, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DB0000019BLL), xmmword_224689750);
    if ((v292 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689760;
      v576 = (__int128)xmmword_224689770;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 3, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DB0000019BLL), xmmword_224689770);
      if (((v458 | v321) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689780;
        v571 = (__int128)xmmword_224689790;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 3, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DB0000019BLL), xmmword_224689790);
        v340 = (v436 & 1) == 0 && ((v454 | v320) & 1) == 0;
        if ((v438 & 1) == 0 && v340)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246897A0;
          v566 = (__int128)xmmword_2246897B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 3, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15B0000019BLL), xmmword_2246897B0);
        }
      }
      v341 = (v302 & 1) == 0 && ((v454 | v320) & 1) == 0;
      if (v341 && (v449 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246897C0;
        v561 = (__int128)xmmword_2246897D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 3, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15B0000019BLL), xmmword_2246897D0);
      }
    }
    if (((v321 | v476) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246897E0;
      v556 = (__int128)xmmword_2246897F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 3, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1DB0000019BLL), xmmword_2246897F0);
      v342 = (v433 & 1) == 0 && ((v320 | v339) & 1) == 0;
      if ((v436 & 1) == 0 && v342)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689800;
        v551 = (__int128)xmmword_224689810;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 3, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15B0000019BLL), xmmword_224689810);
      }
    }
    v343 = (v449 & 1) == 0 && ((v320 | v339) & 1) == 0;
    if (v343 && (v446 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689820;
      v546 = xmmword_224689830;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 3, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15B0000019BLL), xmmword_224689830);
    }
  }
  v344 = *((_DWORD *)v231 + 341);
  if (**v481)
  {
    v345 = *((_DWORD *)v231 + 405);
    v346 = *((_DWORD *)v231 + 349);
    v347 = *((_DWORD *)v231 + 413);
    v348 = *((_DWORD *)v231 + 357);
  }
  else
  {
    if ((v344 & 0x10000000) != 0)
      v349 = 0x40000000;
    else
      v349 = 0x80000000;
    if ((v344 & 0x20000000) != 0)
      v344 = v349;
    else
      v344 &= 0xCFFFFFFF;
    v350 = *((_DWORD *)v231 + 405);
    if ((v350 & 0x10000000) != 0)
      v351 = 0x40000000;
    else
      v351 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v345 = v351;
    else
      v345 = v350 & 0xCFFFFFFF;
    v352 = *((_DWORD *)v231 + 349);
    if ((v352 & 0x10000000) != 0)
      v353 = 0x40000000;
    else
      v353 = 0x80000000;
    if ((v352 & 0x20000000) != 0)
      v346 = v353;
    else
      v346 = v352 & 0xCFFFFFFF;
    v354 = *((_DWORD *)v231 + 413);
    if ((v354 & 0x10000000) != 0)
      v355 = 0x40000000;
    else
      v355 = 0x80000000;
    if ((v354 & 0x20000000) != 0)
      v347 = v355;
    else
      v347 = v354 & 0xCFFFFFFF;
    v356 = *((_DWORD *)v231 + 357);
    if ((v356 & 0x10000000) != 0)
      v348 = 0x40000000;
    else
      v348 = 0x80000000;
    if ((v356 & 0x20000000) == 0)
      v348 = v356 & 0xCFFFFFFF;
  }
  v357 = v346 >> 30;
  v439 = v344 >> 30;
  v471 = v345 >> 30;
  v358 = v348 >> 30;
  if ((v329 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689840;
    v516 = (__int128)xmmword_224689850;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 4, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DC0000019CLL), xmmword_224689850);
    if ((v310 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689860;
      v576 = (__int128)xmmword_224689870;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 4, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DC0000019CLL), xmmword_224689870);
      if (((v321 | v476) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689880;
        v571 = (__int128)xmmword_224689890;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 4, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DC0000019CLL), xmmword_224689890);
        v359 = (v433 & 1) == 0 && ((v320 | v339) & 1) == 0;
        if ((v436 & 1) == 0 && v359)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246898A0;
          v566 = (__int128)xmmword_2246898B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 4, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15C0000019CLL), xmmword_2246898B0);
        }
      }
      v360 = (v449 & 1) == 0 && ((v320 | v339) & 1) == 0;
      if (v360 && (v446 & 1) == 0)
      {
        v567 = v502;
        v568 = v503;
        v569 = v504;
        v566 = v501;
        v565 = v500;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246898C0;
        v561 = (__int128)xmmword_2246898D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 4, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15C0000019CLL), xmmword_2246898D0);
      }
    }
    if (((v476 | v471) & 1) == 0)
    {
      v562 = v502;
      v563 = v503;
      v564 = v504;
      v561 = v501;
      v560 = v500;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246898E0;
      v556 = (__int128)xmmword_2246898F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 4, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1DC0000019CLL), xmmword_2246898F0);
      v361 = (v439 & 1) == 0 && ((v339 | v357) & 1) == 0;
      if ((v433 & 1) == 0 && v361)
      {
        v557 = v502;
        v558 = v503;
        v559 = v504;
        v556 = v501;
        v555 = v500;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689900;
        v551 = (__int128)xmmword_224689910;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 4, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15C0000019CLL), xmmword_224689910);
      }
    }
    v362 = (v446 & 1) == 0 && ((v339 | v357) & 1) == 0;
    if (v362 && (v358 & 1) == 0)
    {
      v552 = v502;
      v553 = v503;
      v554 = v504;
      v551 = v501;
      v550 = v500;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689920;
      v546 = xmmword_224689930;
      *(_QWORD *)&v535 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 4, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v535, COERCE_DOUBLE(0x15C0000019CLL), xmmword_224689930);
    }
  }
  v363 = *((_DWORD *)v231 + 342);
  if (**v481)
  {
    v364 = *((_DWORD *)v231 + 406);
    v365 = *((_DWORD *)v231 + 350);
    v467 = *((_DWORD *)v231 + 414);
    v366 = *((_DWORD *)v231 + 358);
  }
  else
  {
    if ((v363 & 0x10000000) != 0)
      v367 = 0x40000000;
    else
      v367 = 0x80000000;
    if ((v363 & 0x20000000) != 0)
      v363 = v367;
    else
      v363 &= 0xCFFFFFFF;
    v368 = *((_DWORD *)v231 + 406);
    if ((v368 & 0x10000000) != 0)
      v369 = 0x40000000;
    else
      v369 = 0x80000000;
    if ((v368 & 0x20000000) != 0)
      v364 = v369;
    else
      v364 = v368 & 0xCFFFFFFF;
    v370 = *((_DWORD *)v231 + 350);
    if ((v370 & 0x10000000) != 0)
      v371 = 0x40000000;
    else
      v371 = 0x80000000;
    if ((v370 & 0x20000000) != 0)
      v365 = v371;
    else
      v365 = v370 & 0xCFFFFFFF;
    v372 = *((_DWORD *)v231 + 414);
    if ((v372 & 0x10000000) != 0)
      v373 = 0x40000000;
    else
      v373 = 0x80000000;
    if ((v372 & 0x20000000) != 0)
      v374 = v373;
    else
      v374 = v372 & 0xCFFFFFFF;
    v467 = v374;
    v375 = *((_DWORD *)v231 + 358);
    if ((v375 & 0x10000000) != 0)
      v366 = 0x40000000;
    else
      v366 = 0x80000000;
    if ((v375 & 0x20000000) == 0)
      v366 = v375 & 0xCFFFFFFF;
  }
  v450 = v363 >> 30;
  v459 = v365 >> 30;
  v463 = v364 >> 30;
  v455 = v366 >> 30;
  v537 = v502;
  v538 = v503;
  v539 = v504;
  v536 = v501;
  v535 = v500;
  if ((v347 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689940;
    v516 = (__int128)xmmword_224689950;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 5, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DD0000019DLL), xmmword_224689950);
    if ((v329 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689960;
      v576 = (__int128)xmmword_224689970;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 5, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DD0000019DLL), xmmword_224689970);
      if (((v476 | v471) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689980;
        v571 = (__int128)xmmword_224689990;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 5, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DD0000019DLL), xmmword_224689990);
        v376 = (v439 & 1) == 0 && ((v339 | v357) & 1) == 0;
        if ((v433 & 1) == 0 && v376)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_2246899A0;
          v566 = (__int128)xmmword_2246899B0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 5, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15D0000019DLL), xmmword_2246899B0);
        }
      }
      v377 = (v446 & 1) == 0 && ((v339 | v357) & 1) == 0;
      if (v377 && (v358 & 1) == 0)
      {
        v567 = v537;
        v568 = v538;
        v569 = v539;
        v566 = v536;
        v565 = v535;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_2246899C0;
        v561 = (__int128)xmmword_2246899D0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 5, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15D0000019DLL), xmmword_2246899D0);
      }
    }
    if (((v471 | v463) & 1) == 0)
    {
      v562 = v537;
      v563 = v538;
      v564 = v539;
      v561 = v536;
      v560 = v535;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_2246899E0;
      v556 = (__int128)xmmword_2246899F0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 5, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1DD0000019DLL), xmmword_2246899F0);
      v378 = (v450 & 1) == 0 && ((v357 | v459) & 1) == 0;
      if ((v439 & 1) == 0 && v378)
      {
        v557 = v537;
        v558 = v538;
        v559 = v539;
        v556 = v536;
        v555 = v535;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689A00;
        v551 = (__int128)xmmword_224689A10;
        *(_QWORD *)&v540 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 5, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)&v540, COERCE_DOUBLE(0x15D0000019DLL), xmmword_224689A10);
      }
    }
    v379 = (v358 & 1) == 0 && ((v357 | v459) & 1) == 0;
    if (v379 && (v455 & 1) == 0)
    {
      v552 = v537;
      v553 = v538;
      v554 = v539;
      v551 = v536;
      v550 = v535;
      *(_QWORD *)&v540 = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689A20;
      v546 = xmmword_224689A30;
      *(_QWORD *)&v530 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 5, 3, 6, (uint64_t)&v540, (uint64_t)&v545, (uint64_t)&v530, COERCE_DOUBLE(0x15D0000019DLL), xmmword_224689A30);
    }
  }
  v532 = v502;
  v533 = v503;
  v534 = v504;
  v531 = v501;
  v530 = v500;
  v380 = *((_DWORD *)v231 + 343);
  if (**v481)
  {
    v381 = *((_DWORD *)v231 + 407);
    v382 = *((_DWORD *)v231 + 351);
    v383 = *((_DWORD *)v231 + 415);
    v384 = *((_DWORD *)v231 + 359);
  }
  else
  {
    if ((v380 & 0x10000000) != 0)
      v385 = 0x40000000;
    else
      v385 = 0x80000000;
    if ((v380 & 0x20000000) != 0)
      v380 = v385;
    else
      v380 &= 0xCFFFFFFF;
    v386 = *((_DWORD *)v231 + 407);
    if ((v386 & 0x10000000) != 0)
      v387 = 0x40000000;
    else
      v387 = 0x80000000;
    if ((v386 & 0x20000000) != 0)
      v381 = v387;
    else
      v381 = v386 & 0xCFFFFFFF;
    v388 = *((_DWORD *)v231 + 351);
    if ((v388 & 0x10000000) != 0)
      v389 = 0x40000000;
    else
      v389 = 0x80000000;
    if ((v388 & 0x20000000) != 0)
      v382 = v389;
    else
      v382 = v388 & 0xCFFFFFFF;
    v390 = *((_DWORD *)v231 + 415);
    if ((v390 & 0x10000000) != 0)
      v391 = 0x40000000;
    else
      v391 = 0x80000000;
    if ((v390 & 0x20000000) != 0)
      v383 = v391;
    else
      v383 = v390 & 0xCFFFFFFF;
    v392 = *((_DWORD *)v231 + 359);
    if ((v392 & 0x10000000) != 0)
      v384 = 0x40000000;
    else
      v384 = 0x80000000;
    if ((v392 & 0x20000000) == 0)
      v384 = v392 & 0xCFFFFFFF;
  }
  v393 = v382 >> 30;
  v482 = v380 >> 30;
  v394 = v381 >> 30;
  v395 = v384 >> 30;
  v542 = v502;
  v543 = v503;
  v544 = v504;
  v541 = v501;
  v540 = v500;
  if ((v467 & 0x40000000) != 0)
  {
    v522 = v502;
    v523 = v503;
    v524 = v504;
    v521 = v501;
    v520 = v500;
    *(_QWORD *)&v575 = 0xD0D0D0D0D0D0D0DLL;
    v515 = xmmword_224689A40;
    v516 = (__int128)xmmword_224689A50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 6, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DE0000019ELL), xmmword_224689A50);
    if ((v347 & 0x40000000) == 0)
    {
      v517 = v502;
      v518 = v503;
      v519 = v504;
      v516 = v501;
      v515 = v500;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689A60;
      v576 = (__int128)xmmword_224689A70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 6, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DE0000019ELL), xmmword_224689A70);
      if (((v471 | v463) & 1) == 0)
      {
        v577 = v502;
        v578 = v503;
        v579 = v504;
        v575 = v500;
        v576 = v501;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689A80;
        v571 = (__int128)xmmword_224689A90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 6, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DE0000019ELL), xmmword_224689A90);
        v396 = (v450 & 1) == 0 && ((v357 | v459) & 1) == 0;
        if ((v439 & 1) == 0 && v396)
        {
          v572 = v502;
          v573 = v503;
          v574 = v504;
          v571 = v501;
          v570 = v500;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224689AA0;
          v566 = (__int128)xmmword_224689AB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 6, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15E0000019ELL), xmmword_224689AB0);
        }
      }
      v397 = (v358 & 1) == 0 && ((v357 | v459) & 1) == 0;
      if (v397 && (v455 & 1) == 0)
      {
        v567 = v542;
        v568 = v543;
        v569 = v544;
        v566 = v541;
        v565 = v540;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v560 = xmmword_224689AC0;
        v561 = (__int128)xmmword_224689AD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 6, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15E0000019ELL), xmmword_224689AD0);
      }
    }
    if (((v463 | v394) & 1) == 0)
    {
      v562 = v542;
      v563 = v543;
      v564 = v544;
      v561 = v541;
      v560 = v540;
      *(_QWORD *)&v550 = 0xD0D0D0D0D0D0D0DLL;
      v555 = xmmword_224689AE0;
      v556 = (__int128)xmmword_224689AF0;
      *(_QWORD *)&v545 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 6, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)&v545, COERCE_DOUBLE(0x1DE0000019ELL), xmmword_224689AF0);
      v398 = (v482 & 1) == 0 && ((v459 | v393) & 1) == 0;
      if ((v450 & 1) == 0 && v398)
      {
        v557 = v542;
        v558 = v543;
        v559 = v544;
        v556 = v541;
        v555 = v540;
        *(_QWORD *)&v545 = 0xD0D0D0D0D0D0D0DLL;
        v550 = xmmword_224689B00;
        v551 = (__int128)xmmword_224689B10;
        *(_QWORD *)&v581[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 6, 3, 6, (uint64_t)&v545, (uint64_t)&v550, (uint64_t)v581, COERCE_DOUBLE(0x15E0000019ELL), xmmword_224689B10);
      }
    }
    v399 = (v455 & 1) == 0 && ((v459 | v393) & 1) == 0;
    if (v399 && (v395 & 1) == 0)
    {
      v552 = v542;
      v553 = v543;
      v554 = v544;
      v551 = v541;
      v550 = v540;
      *(_QWORD *)&v581[0] = 0xD0D0D0D0D0D0D0DLL;
      v545 = xmmword_224689B20;
      v546 = xmmword_224689B30;
      v582[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 6, 3, 6, (uint64_t)v581, (uint64_t)&v545, (uint64_t)v582, COERCE_DOUBLE(0x15E0000019ELL), xmmword_224689B30);
    }
  }
  v400 = *(unsigned int *)(v486 + 88);
  if ((v400 & 0x80000000) != 0)
  {
    v403 = *v478;
    v404 = *(_DWORD *)(v489 + 1624);
    v405 = **v478;
    if (**v478)
      goto LABEL_1060;
  }
  else
  {
    v401 = *(_QWORD *)(v489 + 2328);
    if (v400 >= (*(_QWORD *)(v489 + 2336) - v401) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v401 = *(_QWORD *)(v489 + 2328);
    }
    v402 = v401 + (v400 << 11);
    v403 = *v478;
    v404 = *(_DWORD *)(v402 + 1344);
    v405 = **v478;
    if (**v478)
    {
LABEL_1060:
      v406 = *(unsigned int *)(v486 + 88);
      if ((v406 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v408 = *(_DWORD *)(v489 + 1880);
      if (v405)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v404 & 0x10000000) != 0)
    v413 = 0x40000000;
  else
    v413 = 0x80000000;
  if ((v404 & 0x20000000) != 0)
    v404 = v413;
  else
    v404 &= 0xCFFFFFFF;
  v406 = *(unsigned int *)(v486 + 88);
  if ((v406 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v407 = *(_QWORD *)(v489 + 2328);
  if (v406 >= (*(_QWORD *)(v489 + 2336) - v407) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v407 = *(_QWORD *)(v489 + 2328);
    v403 = *v478;
    v405 = **v478;
  }
  v408 = *(_DWORD *)(v407 + (v406 << 11) + 1600);
  if (v405)
  {
LABEL_1065:
    v409 = *(unsigned int *)(v486 + 88);
    if ((v409 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v411 = *(_DWORD *)(v489 + 1656);
    if (v405)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v408 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v408 & 0x20000000) != 0)
    v408 = v414;
  else
    v408 &= 0xCFFFFFFF;
  v409 = *(unsigned int *)(v486 + 88);
  if ((v409 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v410 = *(_QWORD *)(v489 + 2328);
  if (v409 >= (*(_QWORD *)(v489 + 2336) - v410) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v410 = *(_QWORD *)(v489 + 2328);
    v403 = *v478;
    v405 = **v478;
  }
  v411 = *(_DWORD *)(v410 + (v409 << 11) + 1376);
  if (v405)
  {
LABEL_1070:
    v412 = *(unsigned int *)(v486 + 88);
    if ((v412 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v411 & 0x10000000) != 0)
    v415 = 0x40000000;
  else
    v415 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v411 = v415;
  else
    v411 &= 0xCFFFFFFF;
  v412 = *(unsigned int *)(v486 + 88);
  if ((v412 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v416 = *(_QWORD *)(v489 + 2328);
  v417 = (*(_QWORD *)(v489 + 2336) - v416) >> 11;
  if (v417 > v412)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v403 = *v478;
  v412 = *(unsigned int *)(v486 + 88);
  if ((v412 & 0x80000000) != 0)
  {
LABEL_1139:
    v418 = *(_DWORD *)(v489 + 1688);
    if (*v403)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v416 = *(_QWORD *)(v489 + 2328);
  v417 = (*(_QWORD *)(v489 + 2336) - v416) >> 11;
LABEL_1100:
  if (v417 <= v412)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v416 = *(_QWORD *)(v489 + 2328);
    v403 = *v478;
  }
  v418 = *(_DWORD *)(v416 + (v412 << 11) + 1408);
  if (!*v403)
  {
LABEL_1104:
    if ((v418 & 0x10000000) != 0)
      v419 = 0x40000000;
    else
      v419 = 0x80000000;
    if ((v418 & 0x20000000) != 0)
      v418 = v419;
    else
      v418 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v547 = v532;
  v548 = v533;
  v549 = v534;
  v546 = (float32x4_t)v531;
  v545 = v530;
  if ((v383 & 0x40000000) != 0)
  {
    v522 = v532;
    v523 = v533;
    v524 = v534;
    v521 = v531;
    v520 = v530;
    *(_QWORD *)&v575 = 0x161616160D0D0D0DLL;
    v515 = xmmword_224689B40;
    v516 = (__int128)xmmword_224689B50;
    *(_QWORD *)&v570 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v520, 7, 3, 6, (uint64_t)&v575, (uint64_t)&v515, (uint64_t)&v570, COERCE_DOUBLE(0x1DF0000019FLL), xmmword_224689B50);
    if ((v467 & 0x40000000) == 0)
    {
      v517 = v532;
      v518 = v533;
      v519 = v534;
      v516 = v531;
      v515 = v530;
      *(_QWORD *)&v570 = 0xD0D0D0D0D0D0D0DLL;
      v575 = xmmword_224689B60;
      v576 = (__int128)xmmword_224689B70;
      *(_QWORD *)&v565 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v515, 7, 3, 6, (uint64_t)&v570, (uint64_t)&v575, (uint64_t)&v565, COERCE_DOUBLE(0x1DF0000019FLL), xmmword_224689B70);
      if (((v463 | v394) & 1) == 0)
      {
        v577 = v532;
        v578 = v533;
        v579 = v534;
        v575 = v530;
        v576 = v531;
        *(_QWORD *)&v565 = 0xD0D0D0D0D0D0D0DLL;
        v570 = xmmword_224689B80;
        v571 = (__int128)xmmword_224689B90;
        *(_QWORD *)&v560 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v575, 7, 3, 6, (uint64_t)&v565, (uint64_t)&v570, (uint64_t)&v560, COERCE_DOUBLE(0x1DF0000019FLL), xmmword_224689B90);
        v420 = (v482 & 1) == 0 && ((v459 | v393) & 1) == 0;
        if ((v450 & 1) == 0 && v420)
        {
          v572 = v532;
          v573 = v533;
          v574 = v534;
          v571 = v531;
          v570 = v530;
          *(_QWORD *)&v560 = 0xD0D0D0D0D0D0D0DLL;
          v565 = xmmword_224689BA0;
          v566 = (__int128)xmmword_224689BB0;
          *(_QWORD *)&v555 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v570, 7, 3, 6, (uint64_t)&v560, (uint64_t)&v565, (uint64_t)&v555, COERCE_DOUBLE(0x15F0000019FLL), xmmword_224689BB0);
        }
      }
      v421 = (v455 & 1) == 0 && ((v459 | v393) & 1) == 0;
      if (v421 && (v395 & 1) == 0)
      {
        v567 = v547;
        v568 = v548;
        v569 = v549;
        *(_QWORD *)&v555 = 0xD0D0D0D0D0D0D0DLL;
        v566 = (__int128)v546;
        v565 = v545;
        v560 = xmmword_224689BC0;
        v561 = (__int128)xmmword_224689BD0;
        *(_QWORD *)&v550 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v565, 7, 3, 6, (uint64_t)&v555, (uint64_t)&v560, (uint64_t)&v550, COERCE_DOUBLE(0x15F0000019FLL), xmmword_224689BD0);
      }
    }
    v422 = (v411 & 0x40000000 | v393 & 1) == 0;
    if (!(v408 & 0x40000000 | v394 & 1))
    {
      v562 = v547;
      v563 = v548;
      v564 = v549;
      *(_QWORD *)&v550 = 0x16160D0D16160D0DLL;
      v561 = (__int128)v546;
      v560 = v545;
      v555 = xmmword_224689BE0;
      v556 = (__int128)xmmword_224689BF0;
      *(_QWORD *)&v581[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v560, 7, 3, 6, (uint64_t)&v550, (uint64_t)&v555, (uint64_t)v581, COERCE_DOUBLE(0x1DF0000019FLL), xmmword_224689BF0);
      v423 = (v404 & 0x40000000) == 0 && v422;
      if ((v482 & 1) == 0 && v423)
      {
        v557 = v547;
        v558 = v548;
        v559 = v549;
        *(_QWORD *)&v581[0] = 0x161616160D0D0D0DLL;
        v556 = (__int128)v546;
        v555 = v545;
        v550 = xmmword_224689C00;
        v551 = (__int128)xmmword_224689C10;
        v582[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v555, 7, 3, 6, (uint64_t)v581, (uint64_t)&v550, (uint64_t)v582, COERCE_DOUBLE(0x15F0000019FLL), xmmword_224689C10);
      }
    }
    v424 = (v395 & 1) == 0 && v422;
    if (v424 && (v418 & 0x40000000) == 0)
    {
      v552 = v547;
      v553 = v548;
      v554 = v549;
      v582[0] = 0x16160D0D16160D0DLL;
      v551 = (__int128)v546;
      v550 = v545;
      v581[0] = xmmword_224689C20;
      v581[1] = xmmword_224689C30;
      v580 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v550, 7, 3, 6, (uint64_t)v582, (uint64_t)v581, (uint64_t)&v580, COERCE_DOUBLE(0x15F0000019FLL), xmmword_224689C30);
    }
  }
  v515 = v442;
  *(_QWORD *)&v516 = v231;
  *(_QWORD *)&v575 = v489;
  *((_QWORD *)&v575 + 1) = v486;
  *(_QWORD *)&v576 = v478;
  v524 = v494;
  v523 = v493;
  v522 = v492;
  v520 = v490;
  v521 = v491;
  return sub_223E3A2E4((unsigned __int8 ***)&v515, &v575, &v520);
}

unint64_t sub_223E3A2E4(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  __int128 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  _BOOL4 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  _BOOL4 v165;
  _BOOL4 v166;
  _BOOL4 v167;
  _BOOL4 v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  _BOOL4 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  _BOOL4 v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  unsigned int v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  _BOOL4 v228;
  _BOOL4 v229;
  _BOOL4 v230;
  _BOOL4 v231;
  unsigned __int8 **v232;
  unsigned int v233;
  int v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  int v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  _BOOL4 v285;
  _BOOL4 v286;
  _BOOL4 v287;
  _BOOL4 v288;
  _BOOL4 v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  int v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  _BOOL4 v341;
  _BOOL4 v342;
  _BOOL4 v343;
  _BOOL4 v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  _BOOL4 v360;
  _BOOL4 v361;
  _BOOL4 v362;
  _BOOL4 v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  int v376;
  _BOOL4 v377;
  _BOOL4 v378;
  _BOOL4 v379;
  _BOOL4 v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  _BOOL4 v396;
  _BOOL4 v397;
  _BOOL4 v398;
  _BOOL4 v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _BYTE *v403;
  unsigned int v404;
  int v405;
  unint64_t v406;
  uint64_t v407;
  unsigned int v408;
  unint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unint64_t v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  unsigned int v418;
  unsigned int v419;
  _BOOL4 v420;
  _BOOL4 v421;
  _BOOL4 v422;
  _BOOL4 v423;
  _BOOL4 v424;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t *v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  __int128 v441;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned __int8 **v476;
  _BYTE **v477;
  unsigned int v478;
  uint64_t v479;
  _BYTE **v480;
  unsigned int v481;
  _BYTE **v482;
  unsigned int v483;
  unsigned int v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  float32x4_t v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  uint64_t v579;
  _OWORD v580[2];
  _QWORD v581[3];

  v4 = a2;
  v581[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v482 = *a1;
  v6 = *((_DWORD *)v5 + 344);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 408);
    v9 = *((_DWORD *)v5 + 352);
    v10 = *((_DWORD *)v5 + 416);
    v11 = *((_DWORD *)v5 + 360);
    v486 = *a2;
    v470 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 408);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 408);
    v18 = *((_DWORD *)v5 + 352);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 352);
    v19 = *((_DWORD *)v5 + 416);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 416);
    v20 = *((_DWORD *)v5 + 360);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v486 = *a2;
    v470 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v483 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v486 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v486 + 2328);
    if (v23 >= (*(_QWORD *)(v486 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v24 = *(_QWORD *)(v486 + 2328);
      v10 = v470;
      v8 = v483;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1404);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v470;
      v8 = v483;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1660);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v487 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v470;
      v8 = v483;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1436);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 1972);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v470;
      v8 = v483;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1692);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v478 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v470;
      v8 = v483;
      v38 = v64;
      v48 = v478;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v487 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1468);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v482 = *a1;
  v486 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v448 = v6 >> 30;
  v476 = (unsigned __int8 **)v4[2];
  v479 = v4[1];
  v496 = a3[2];
  v497 = a3[3];
  v498 = a3[4];
  v494 = *a3;
  v495 = a3[1];
  v70 = *((_DWORD *)v5 + 345);
  v436 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 409);
    v72 = *((_DWORD *)v5 + 353);
    v466 = *((_DWORD *)v5 + 417);
    v73 = *((_DWORD *)v5 + 361);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 409);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 353);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 417);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v466 = v81;
    v82 = *((_DWORD *)v5 + 361);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v85 = v11 >> 30;
  v433 = v70 >> 30;
  v458 = v72 >> 30;
  v462 = v71 >> 30;
  v439 = v73 >> 30;
  v506 = a3[2];
  v507 = a3[3];
  v508 = a3[4];
  v504 = *a3;
  v505 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v86 = v15;
    v87 = v16;
    v88 = a3[3];
    v521 = a3[2];
    v522 = v88;
    v523 = a3[4];
    v89 = *a3;
    v520 = a3[1];
    v519 = v89;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_224689C40;
    v515 = (__int128)xmmword_224689C50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 0, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E0000001A0), xmmword_224689C50);
    if (!v13)
    {
      v516 = v506;
      v517 = v507;
      v518 = v508;
      v515 = v505;
      v514 = v504;
      *(_QWORD *)&v569 = 0x4040D0D04040D0DLL;
      v574 = xmmword_224689C60;
      v575 = (__int128)xmmword_224689C70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 0, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E0000001A0), xmmword_224689C70);
      v90 = (v14 | v83 & 1) == 0;
      if (!(v86 | v84 & 1))
      {
        v576 = v506;
        v577 = v507;
        v578 = v508;
        v574 = v504;
        v575 = v505;
        *(_QWORD *)&v564 = 0x40404040D0D0D0DLL;
        v569 = xmmword_224689C80;
        v570 = (__int128)xmmword_224689C90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 0, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E0000001A0), xmmword_224689C90);
        v91 = (v448 & 1) == 0 && v90;
        if (!v87 && v91)
        {
          v571 = v506;
          v572 = v507;
          v573 = v508;
          v570 = v505;
          v569 = v504;
          *(_QWORD *)&v559 = 0x4040D0D04040D0DLL;
          v564 = xmmword_224689CA0;
          v565 = (__int128)xmmword_224689CB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 0, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x160000001A0), xmmword_224689CB0);
        }
      }
      if (v12)
        v92 = 0;
      else
        v92 = v90;
      if (v92 && (v85 & 1) == 0)
      {
        v566 = v506;
        v567 = v507;
        v568 = v508;
        *(_QWORD *)&v554 = 0x40404040D0D0D0DLL;
        v565 = v505;
        v564 = v504;
        v559 = xmmword_224689CC0;
        v560 = (__int128)xmmword_224689CD0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 0, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x160000001A0), xmmword_224689CD0);
      }
    }
    if (((v84 | v462) & 1) == 0)
    {
      v561 = v506;
      v562 = v507;
      v563 = v508;
      v560 = v505;
      v559 = v504;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_224689CE0;
      v555 = (__int128)xmmword_224689CF0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 0, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E0000001A0), xmmword_224689CF0);
      v93 = (v433 & 1) == 0 && ((v83 | v458) & 1) == 0;
      if ((v448 & 1) == 0 && v93)
      {
        v556 = v506;
        v557 = v507;
        v558 = v508;
        v555 = v505;
        v554 = v504;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_224689D00;
        v550 = (__int128)xmmword_224689D10;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 0, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x160000001A0), xmmword_224689D10);
      }
    }
    v94 = (v85 & 1) == 0 && ((v83 | v458) & 1) == 0;
    v10 = v470;
    if (v94 && (v439 & 1) == 0)
    {
      v551 = v506;
      v552 = v507;
      v553 = v508;
      v550 = v505;
      v549 = v504;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_224689D20;
      v545 = xmmword_224689D30;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 0, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x160000001A0), xmmword_224689D30);
      v10 = v470;
    }
  }
  v95 = *((_DWORD *)v5 + 346);
  if (**v482)
  {
    v96 = *((_DWORD *)v5 + 410);
    v97 = *((_DWORD *)v5 + 354);
    v98 = *((_DWORD *)v5 + 418);
    v99 = *((_DWORD *)v5 + 362);
  }
  else
  {
    if ((v95 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v95 & 0x20000000) != 0)
      v95 = v100;
    else
      v95 &= 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 410);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v96 = v102;
    else
      v96 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 354);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v97 = v104;
    else
      v97 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 418);
    if ((v105 & 0x10000000) != 0)
      v106 = 0x40000000;
    else
      v106 = 0x80000000;
    if ((v105 & 0x20000000) != 0)
      v98 = v106;
    else
      v98 = v105 & 0xCFFFFFFF;
    v107 = *((_DWORD *)v5 + 362);
    if ((v107 & 0x10000000) != 0)
      v99 = 0x40000000;
    else
      v99 = 0x80000000;
    if ((v107 & 0x20000000) == 0)
      v99 = v107 & 0xCFFFFFFF;
  }
  v454 = v97 >> 30;
  v108 = v95 >> 30;
  v471 = v96 >> 30;
  v109 = v99 >> 30;
  if ((v466 & 0x40000000) != 0)
  {
    v110 = (v10 & 0x40000000) == 0;
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_224689D40;
    v515 = (__int128)xmmword_224689D50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 1, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E1000001A1), xmmword_224689D50);
    if (v110)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224689D60;
      v575 = (__int128)xmmword_224689D70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 1, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E1000001A1), xmmword_224689D70);
      if (((v84 | v462) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224689D80;
        v570 = (__int128)xmmword_224689D90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 1, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E1000001A1), xmmword_224689D90);
        v111 = (v433 & 1) == 0 && ((v83 | v458) & 1) == 0;
        if ((v448 & 1) == 0 && v111)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_224689DA0;
          v565 = (__int128)xmmword_224689DB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 1, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x161000001A1), xmmword_224689DB0);
        }
      }
      v112 = (v85 & 1) == 0 && ((v83 | v458) & 1) == 0;
      if (v112 && (v439 & 1) == 0)
      {
        v566 = v496;
        v567 = v497;
        v568 = v498;
        v565 = v495;
        v564 = v494;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_224689DC0;
        v560 = (__int128)xmmword_224689DD0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 1, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x161000001A1), xmmword_224689DD0);
      }
    }
    if (((v462 | v471) & 1) == 0)
    {
      v561 = v496;
      v562 = v497;
      v563 = v498;
      v560 = v495;
      v559 = v494;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_224689DE0;
      v555 = (__int128)xmmword_224689DF0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 1, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E1000001A1), xmmword_224689DF0);
      v113 = (v108 & 1) == 0 && ((v458 | v454) & 1) == 0;
      if ((v433 & 1) == 0 && v113)
      {
        v556 = v496;
        v557 = v497;
        v558 = v498;
        v555 = v495;
        v554 = v494;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_224689E00;
        v550 = (__int128)xmmword_224689E10;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 1, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x161000001A1), xmmword_224689E10);
      }
    }
    v114 = (v439 & 1) == 0 && ((v458 | v454) & 1) == 0;
    if (v114 && (v109 & 1) == 0)
    {
      v551 = v496;
      v552 = v497;
      v553 = v498;
      v550 = v495;
      v549 = v494;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_224689E20;
      v545 = xmmword_224689E30;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 1, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x161000001A1), xmmword_224689E30);
    }
  }
  v115 = *((_DWORD *)v5 + 347);
  if (**v482)
  {
    v116 = *((_DWORD *)v5 + 411);
    v117 = *((_DWORD *)v5 + 355);
    v118 = *((_DWORD *)v5 + 419);
    v119 = *((_DWORD *)v5 + 363);
  }
  else
  {
    if ((v115 & 0x10000000) != 0)
      v120 = 0x40000000;
    else
      v120 = 0x80000000;
    if ((v115 & 0x20000000) != 0)
      v115 = v120;
    else
      v115 &= 0xCFFFFFFF;
    v121 = *((_DWORD *)v5 + 411);
    if ((v121 & 0x10000000) != 0)
      v122 = 0x40000000;
    else
      v122 = 0x80000000;
    if ((v121 & 0x20000000) != 0)
      v116 = v122;
    else
      v116 = v121 & 0xCFFFFFFF;
    v123 = *((_DWORD *)v5 + 355);
    if ((v123 & 0x10000000) != 0)
      v124 = 0x40000000;
    else
      v124 = 0x80000000;
    if ((v123 & 0x20000000) != 0)
      v117 = v124;
    else
      v117 = v123 & 0xCFFFFFFF;
    v125 = *((_DWORD *)v5 + 419);
    if ((v125 & 0x10000000) != 0)
      v126 = 0x40000000;
    else
      v126 = 0x80000000;
    if ((v125 & 0x20000000) != 0)
      v118 = v126;
    else
      v118 = v125 & 0xCFFFFFFF;
    v127 = *((_DWORD *)v5 + 363);
    if ((v127 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v127 & 0x20000000) == 0)
      v119 = v127 & 0xCFFFFFFF;
  }
  v431 = v115 >> 30;
  v444 = v117 >> 30;
  v449 = v116 >> 30;
  v128 = v119 >> 30;
  if ((v98 & 0x40000000) != 0)
  {
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_224689E40;
    v515 = (__int128)xmmword_224689E50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 2, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E2000001A2), xmmword_224689E50);
    if ((v466 & 0x40000000) == 0)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224689E60;
      v575 = (__int128)xmmword_224689E70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 2, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E2000001A2), xmmword_224689E70);
      if (((v462 | v471) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224689E80;
        v570 = (__int128)xmmword_224689E90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 2, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E2000001A2), xmmword_224689E90);
        v129 = (v108 & 1) == 0 && ((v458 | v454) & 1) == 0;
        if ((v433 & 1) == 0 && v129)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_224689EA0;
          v565 = (__int128)xmmword_224689EB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 2, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x162000001A2), xmmword_224689EB0);
        }
      }
      v130 = (v439 & 1) == 0 && ((v458 | v454) & 1) == 0;
      if (v130 && (v109 & 1) == 0)
      {
        v566 = v496;
        v567 = v497;
        v568 = v498;
        v565 = v495;
        v564 = v494;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_224689EC0;
        v560 = (__int128)xmmword_224689ED0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 2, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x162000001A2), xmmword_224689ED0);
      }
    }
    if (((v471 | v449) & 1) == 0)
    {
      v561 = v496;
      v562 = v497;
      v563 = v498;
      v560 = v495;
      v559 = v494;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_224689EE0;
      v555 = (__int128)xmmword_224689EF0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 2, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E2000001A2), xmmword_224689EF0);
      v131 = (v431 & 1) == 0 && ((v454 | v444) & 1) == 0;
      if ((v108 & 1) == 0 && v131)
      {
        v556 = v496;
        v557 = v497;
        v558 = v498;
        v555 = v495;
        v554 = v494;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_224689F00;
        v550 = (__int128)xmmword_224689F10;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 2, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x162000001A2), xmmword_224689F10);
      }
    }
    v132 = (v109 & 1) == 0 && ((v454 | v444) & 1) == 0;
    if (v132 && (v128 & 1) == 0)
    {
      v551 = v496;
      v552 = v497;
      v553 = v498;
      v550 = v495;
      v549 = v494;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_224689F20;
      v545 = xmmword_224689F30;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 2, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x162000001A2), xmmword_224689F30);
    }
  }
  v133 = *((_DWORD *)v5 + 348);
  if (**v482)
  {
    v134 = *((_DWORD *)v5 + 412);
    v135 = *((_DWORD *)v5 + 356);
    v136 = *((_DWORD *)v5 + 420);
    v137 = *((_DWORD *)v5 + 364);
  }
  else
  {
    if ((v133 & 0x10000000) != 0)
      v138 = 0x40000000;
    else
      v138 = 0x80000000;
    if ((v133 & 0x20000000) != 0)
      v133 = v138;
    else
      v133 &= 0xCFFFFFFF;
    v139 = *((_DWORD *)v5 + 412);
    if ((v139 & 0x10000000) != 0)
      v140 = 0x40000000;
    else
      v140 = 0x80000000;
    if ((v139 & 0x20000000) != 0)
      v134 = v140;
    else
      v134 = v139 & 0xCFFFFFFF;
    v141 = *((_DWORD *)v5 + 356);
    if ((v141 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v141 & 0x20000000) != 0)
      v135 = v142;
    else
      v135 = v141 & 0xCFFFFFFF;
    v143 = *((_DWORD *)v5 + 420);
    if ((v143 & 0x10000000) != 0)
      v144 = 0x40000000;
    else
      v144 = 0x80000000;
    if ((v143 & 0x20000000) != 0)
      v136 = v144;
    else
      v136 = v143 & 0xCFFFFFFF;
    v145 = *((_DWORD *)v5 + 364);
    if ((v145 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v145 & 0x20000000) == 0)
      v137 = v145 & 0xCFFFFFFF;
  }
  v434 = v133 >> 30;
  v463 = v135 >> 30;
  v467 = v134 >> 30;
  v440 = v137 >> 30;
  if ((v118 & 0x40000000) != 0)
  {
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_224689F40;
    v515 = (__int128)xmmword_224689F50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 3, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E3000001A3), xmmword_224689F50);
    if ((v98 & 0x40000000) == 0)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_224689F60;
      v575 = (__int128)xmmword_224689F70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 3, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E3000001A3), xmmword_224689F70);
      if (((v471 | v449) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_224689F80;
        v570 = (__int128)xmmword_224689F90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 3, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E3000001A3), xmmword_224689F90);
        v146 = (v431 & 1) == 0 && ((v454 | v444) & 1) == 0;
        if ((v108 & 1) == 0 && v146)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_224689FA0;
          v565 = (__int128)xmmword_224689FB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 3, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x163000001A3), xmmword_224689FB0);
        }
      }
      v147 = (v109 & 1) == 0 && ((v454 | v444) & 1) == 0;
      if (v147 && (v128 & 1) == 0)
      {
        v566 = v496;
        v567 = v497;
        v568 = v498;
        v565 = v495;
        v564 = v494;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_224689FC0;
        v560 = (__int128)xmmword_224689FD0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 3, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x163000001A3), xmmword_224689FD0);
      }
    }
    if (((v449 | v467) & 1) == 0)
    {
      v561 = v496;
      v562 = v497;
      v563 = v498;
      v560 = v495;
      v559 = v494;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_224689FE0;
      v555 = (__int128)xmmword_224689FF0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 3, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E3000001A3), xmmword_224689FF0);
      v148 = (v434 & 1) == 0 && ((v444 | v463) & 1) == 0;
      if ((v431 & 1) == 0 && v148)
      {
        v556 = v496;
        v557 = v497;
        v558 = v498;
        v555 = v495;
        v554 = v494;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A000;
        v550 = (__int128)xmmword_22468A010;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 3, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x163000001A3), xmmword_22468A010);
      }
    }
    v149 = (v128 & 1) == 0 && ((v444 | v463) & 1) == 0;
    if (v149 && (v440 & 1) == 0)
    {
      v551 = v496;
      v552 = v497;
      v553 = v498;
      v550 = v495;
      v549 = v494;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A020;
      v545 = xmmword_22468A030;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 3, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x163000001A3), xmmword_22468A030);
    }
  }
  v150 = *((_DWORD *)v5 + 349);
  if (**v482)
  {
    v151 = *((_DWORD *)v5 + 413);
    v152 = *((_DWORD *)v5 + 357);
    v153 = *((_DWORD *)v5 + 421);
    v154 = *((_DWORD *)v5 + 365);
  }
  else
  {
    if ((v150 & 0x10000000) != 0)
      v155 = 0x40000000;
    else
      v155 = 0x80000000;
    if ((v150 & 0x20000000) != 0)
      v150 = v155;
    else
      v150 &= 0xCFFFFFFF;
    v156 = *((_DWORD *)v5 + 413);
    if ((v156 & 0x10000000) != 0)
      v157 = 0x40000000;
    else
      v157 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v151 = v157;
    else
      v151 = v156 & 0xCFFFFFFF;
    v158 = *((_DWORD *)v5 + 357);
    if ((v158 & 0x10000000) != 0)
      v159 = 0x40000000;
    else
      v159 = 0x80000000;
    if ((v158 & 0x20000000) != 0)
      v152 = v159;
    else
      v152 = v158 & 0xCFFFFFFF;
    v160 = *((_DWORD *)v5 + 421);
    if ((v160 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v160 & 0x20000000) != 0)
      v153 = v161;
    else
      v153 = v160 & 0xCFFFFFFF;
    v162 = *((_DWORD *)v5 + 365);
    if ((v162 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v162 & 0x20000000) == 0)
      v154 = v162 & 0xCFFFFFFF;
  }
  v163 = v152 >> 30;
  v430 = v150 >> 30;
  v164 = v151 >> 30;
  v455 = v154 >> 30;
  if ((v136 & 0x40000000) != 0)
  {
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A040;
    v515 = (__int128)xmmword_22468A050;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 4, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E4000001A4), xmmword_22468A050);
    if ((v118 & 0x40000000) == 0)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A060;
      v575 = (__int128)xmmword_22468A070;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 4, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E4000001A4), xmmword_22468A070);
      if (((v449 | v467) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A080;
        v570 = (__int128)xmmword_22468A090;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 4, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E4000001A4), xmmword_22468A090);
        v165 = (v434 & 1) == 0 && ((v444 | v463) & 1) == 0;
        if ((v431 & 1) == 0 && v165)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A0A0;
          v565 = (__int128)xmmword_22468A0B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 4, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x164000001A4), xmmword_22468A0B0);
        }
      }
      v166 = (v128 & 1) == 0 && ((v444 | v463) & 1) == 0;
      if (v166 && (v440 & 1) == 0)
      {
        v566 = v496;
        v567 = v497;
        v568 = v498;
        v565 = v495;
        v564 = v494;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A0C0;
        v560 = (__int128)xmmword_22468A0D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 4, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x164000001A4), xmmword_22468A0D0);
      }
    }
    if (((v467 | v164) & 1) == 0)
    {
      v561 = v496;
      v562 = v497;
      v563 = v498;
      v560 = v495;
      v559 = v494;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A0E0;
      v555 = (__int128)xmmword_22468A0F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 4, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E4000001A4), xmmword_22468A0F0);
      v167 = (v430 & 1) == 0 && ((v463 | v163) & 1) == 0;
      if ((v434 & 1) == 0 && v167)
      {
        v556 = v496;
        v557 = v497;
        v558 = v498;
        v555 = v495;
        v554 = v494;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A100;
        v550 = (__int128)xmmword_22468A110;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 4, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x164000001A4), xmmword_22468A110);
      }
    }
    v168 = (v440 & 1) == 0 && ((v463 | v163) & 1) == 0;
    if (v168 && (v455 & 1) == 0)
    {
      v551 = v496;
      v552 = v497;
      v553 = v498;
      v550 = v495;
      v549 = v494;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A120;
      v545 = xmmword_22468A130;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 4, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x164000001A4), xmmword_22468A130);
    }
  }
  v169 = *((_DWORD *)v5 + 350);
  if (**v482)
  {
    v170 = *((_DWORD *)v5 + 414);
    v171 = *((_DWORD *)v5 + 358);
    v172 = *((_DWORD *)v5 + 422);
    v173 = *((_DWORD *)v5 + 366);
  }
  else
  {
    if ((v169 & 0x10000000) != 0)
      v174 = 0x40000000;
    else
      v174 = 0x80000000;
    if ((v169 & 0x20000000) != 0)
      v169 = v174;
    else
      v169 &= 0xCFFFFFFF;
    v175 = *((_DWORD *)v5 + 414);
    if ((v175 & 0x10000000) != 0)
      v176 = 0x40000000;
    else
      v176 = 0x80000000;
    if ((v175 & 0x20000000) != 0)
      v170 = v176;
    else
      v170 = v175 & 0xCFFFFFFF;
    v177 = *((_DWORD *)v5 + 358);
    if ((v177 & 0x10000000) != 0)
      v178 = 0x40000000;
    else
      v178 = 0x80000000;
    if ((v177 & 0x20000000) != 0)
      v171 = v178;
    else
      v171 = v177 & 0xCFFFFFFF;
    v179 = *((_DWORD *)v5 + 422);
    if ((v179 & 0x10000000) != 0)
      v180 = 0x40000000;
    else
      v180 = 0x80000000;
    if ((v179 & 0x20000000) != 0)
      v172 = v180;
    else
      v172 = v179 & 0xCFFFFFFF;
    v181 = *((_DWORD *)v5 + 366);
    if ((v181 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v181 & 0x20000000) == 0)
      v173 = v181 & 0xCFFFFFFF;
  }
  v459 = v171 >> 30;
  v472 = v170 >> 30;
  v445 = v169 >> 30;
  v450 = v173 >> 30;
  v536 = v496;
  v537 = v497;
  v538 = v498;
  v535 = v495;
  v534 = v494;
  if ((v153 & 0x40000000) != 0)
  {
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A140;
    v515 = (__int128)xmmword_22468A150;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 5, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E5000001A5), xmmword_22468A150);
    if ((v136 & 0x40000000) == 0)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A160;
      v575 = (__int128)xmmword_22468A170;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 5, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E5000001A5), xmmword_22468A170);
      if (((v467 | v164) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A180;
        v570 = (__int128)xmmword_22468A190;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 5, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E5000001A5), xmmword_22468A190);
        v182 = (v430 & 1) == 0 && ((v463 | v163) & 1) == 0;
        if ((v434 & 1) == 0 && v182)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A1A0;
          v565 = (__int128)xmmword_22468A1B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 5, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x165000001A5), xmmword_22468A1B0);
        }
      }
      v183 = (v440 & 1) == 0 && ((v463 | v163) & 1) == 0;
      if (v183 && (v455 & 1) == 0)
      {
        v566 = v536;
        v567 = v537;
        v568 = v538;
        v565 = v535;
        v564 = v534;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A1C0;
        v560 = (__int128)xmmword_22468A1D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 5, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x165000001A5), xmmword_22468A1D0);
      }
    }
    if (((v164 | v472) & 1) == 0)
    {
      v561 = v536;
      v562 = v537;
      v563 = v538;
      v560 = v535;
      v559 = v534;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A1E0;
      v555 = (__int128)xmmword_22468A1F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 5, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E5000001A5), xmmword_22468A1F0);
      v184 = (v445 & 1) == 0 && ((v163 | v459) & 1) == 0;
      if ((v430 & 1) == 0 && v184)
      {
        v556 = v536;
        v557 = v537;
        v558 = v538;
        v555 = v535;
        v554 = v534;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A200;
        v550 = (__int128)xmmword_22468A210;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 5, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x165000001A5), xmmword_22468A210);
      }
    }
    v185 = (v455 & 1) == 0 && ((v163 | v459) & 1) == 0;
    if (v185 && (v450 & 1) == 0)
    {
      v551 = v536;
      v552 = v537;
      v553 = v538;
      v550 = v535;
      v549 = v534;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A220;
      v545 = xmmword_22468A230;
      *(_QWORD *)&v529 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 5, 4, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v529, COERCE_DOUBLE(0x165000001A5), xmmword_22468A230);
    }
  }
  v531 = v496;
  v532 = v497;
  v533 = v498;
  v530 = v495;
  v529 = v494;
  v186 = *((_DWORD *)v5 + 351);
  if (**v482)
  {
    v187 = *((_DWORD *)v5 + 415);
    v188 = *((_DWORD *)v5 + 359);
    v189 = *((_DWORD *)v5 + 423);
    v190 = *((_DWORD *)v5 + 367);
  }
  else
  {
    if ((v186 & 0x10000000) != 0)
      v191 = 0x40000000;
    else
      v191 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v186 = v191;
    else
      v186 &= 0xCFFFFFFF;
    v192 = *((_DWORD *)v5 + 415);
    if ((v192 & 0x10000000) != 0)
      v193 = 0x40000000;
    else
      v193 = 0x80000000;
    if ((v192 & 0x20000000) != 0)
      v187 = v193;
    else
      v187 = v192 & 0xCFFFFFFF;
    v194 = *((_DWORD *)v5 + 359);
    if ((v194 & 0x10000000) != 0)
      v195 = 0x40000000;
    else
      v195 = 0x80000000;
    if ((v194 & 0x20000000) != 0)
      v188 = v195;
    else
      v188 = v194 & 0xCFFFFFFF;
    v196 = *((_DWORD *)v5 + 423);
    if ((v196 & 0x10000000) != 0)
      v197 = 0x40000000;
    else
      v197 = 0x80000000;
    if ((v196 & 0x20000000) != 0)
      v189 = v197;
    else
      v189 = v196 & 0xCFFFFFFF;
    v198 = *((_DWORD *)v5 + 367);
    if ((v198 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v198 & 0x20000000) == 0)
      v190 = v198 & 0xCFFFFFFF;
  }
  v199 = v188 >> 30;
  v484 = v186 >> 30;
  v200 = v187 >> 30;
  v201 = v190 >> 30;
  v541 = v496;
  v542 = v497;
  v543 = v498;
  v540 = v495;
  v539 = v494;
  if ((v172 & 0x40000000) != 0)
  {
    v521 = v496;
    v522 = v497;
    v523 = v498;
    v520 = v495;
    v519 = v494;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A240;
    v515 = (__int128)xmmword_22468A250;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 6, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E6000001A6), xmmword_22468A250);
    if ((v153 & 0x40000000) == 0)
    {
      v516 = v496;
      v517 = v497;
      v518 = v498;
      v515 = v495;
      v514 = v494;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A260;
      v575 = (__int128)xmmword_22468A270;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 6, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E6000001A6), xmmword_22468A270);
      if (((v164 | v472) & 1) == 0)
      {
        v576 = v496;
        v577 = v497;
        v578 = v498;
        v574 = v494;
        v575 = v495;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A280;
        v570 = (__int128)xmmword_22468A290;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 6, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E6000001A6), xmmword_22468A290);
        v202 = (v445 & 1) == 0 && ((v163 | v459) & 1) == 0;
        if ((v430 & 1) == 0 && v202)
        {
          v571 = v496;
          v572 = v497;
          v573 = v498;
          v570 = v495;
          v569 = v494;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A2A0;
          v565 = (__int128)xmmword_22468A2B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 6, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x166000001A6), xmmword_22468A2B0);
        }
      }
      v203 = (v455 & 1) == 0 && ((v163 | v459) & 1) == 0;
      if (v203 && (v450 & 1) == 0)
      {
        v566 = v541;
        v567 = v542;
        v568 = v543;
        v565 = v540;
        v564 = v539;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A2C0;
        v560 = (__int128)xmmword_22468A2D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 6, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x166000001A6), xmmword_22468A2D0);
      }
    }
    if (((v472 | v200) & 1) == 0)
    {
      v561 = v541;
      v562 = v542;
      v563 = v543;
      v560 = v540;
      v559 = v539;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A2E0;
      v555 = (__int128)xmmword_22468A2F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 6, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E6000001A6), xmmword_22468A2F0);
      v204 = (v484 & 1) == 0 && ((v459 | v199) & 1) == 0;
      if ((v445 & 1) == 0 && v204)
      {
        v556 = v541;
        v557 = v542;
        v558 = v543;
        v555 = v540;
        v554 = v539;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A300;
        v550 = (__int128)xmmword_22468A310;
        *(_QWORD *)&v524 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 6, 4, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v524, COERCE_DOUBLE(0x166000001A6), xmmword_22468A310);
      }
    }
    v205 = (v450 & 1) == 0 && ((v459 | v199) & 1) == 0;
    if (v205 && (v201 & 1) == 0)
    {
      v551 = v541;
      v552 = v542;
      v553 = v543;
      v550 = v540;
      v549 = v539;
      *(_QWORD *)&v524 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A320;
      v545 = xmmword_22468A330;
      *(_QWORD *)&v580[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 6, 4, 6, (uint64_t)&v524, (uint64_t)&v544, (uint64_t)v580, COERCE_DOUBLE(0x166000001A6), xmmword_22468A330);
    }
  }
  v206 = *(unsigned int *)(v479 + 88);
  if ((v206 & 0x80000000) != 0)
  {
    v209 = *v476;
    v210 = *(_DWORD *)(v486 + 1656);
    v211 = **v476;
    if (**v476)
      goto LABEL_509;
  }
  else
  {
    v207 = *(_QWORD *)(v486 + 2328);
    if (v206 >= (*(_QWORD *)(v486 + 2336) - v207) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v207 = *(_QWORD *)(v486 + 2328);
    }
    v208 = v207 + (v206 << 11);
    v209 = *v476;
    v210 = *(_DWORD *)(v208 + 1376);
    v211 = **v476;
    if (**v476)
    {
LABEL_509:
      v212 = *(unsigned int *)(v479 + 88);
      if ((v212 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v214 = *(_DWORD *)(v486 + 1912);
      if (v211)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v210 & 0x10000000) != 0)
    v219 = 0x40000000;
  else
    v219 = 0x80000000;
  if ((v210 & 0x20000000) != 0)
    v210 = v219;
  else
    v210 &= 0xCFFFFFFF;
  v212 = *(unsigned int *)(v479 + 88);
  if ((v212 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v213 = *(_QWORD *)(v486 + 2328);
  if (v212 >= (*(_QWORD *)(v486 + 2336) - v213) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v213 = *(_QWORD *)(v486 + 2328);
    v209 = *v476;
    v211 = **v476;
  }
  v214 = *(_DWORD *)(v213 + (v212 << 11) + 1632);
  if (v211)
  {
LABEL_514:
    v215 = *(unsigned int *)(v479 + 88);
    if ((v215 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v217 = *(_DWORD *)(v486 + 1688);
    if (v211)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v214 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v214 & 0x20000000) != 0)
    v214 = v220;
  else
    v214 &= 0xCFFFFFFF;
  v215 = *(unsigned int *)(v479 + 88);
  if ((v215 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v216 = *(_QWORD *)(v486 + 2328);
  if (v215 >= (*(_QWORD *)(v486 + 2336) - v216) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v216 = *(_QWORD *)(v486 + 2328);
    v209 = *v476;
    v211 = **v476;
  }
  v217 = *(_DWORD *)(v216 + (v215 << 11) + 1408);
  if (v211)
  {
LABEL_519:
    v218 = *(unsigned int *)(v479 + 88);
    if ((v218 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v217 & 0x10000000) != 0)
    v221 = 0x40000000;
  else
    v221 = 0x80000000;
  if ((v217 & 0x20000000) != 0)
    v217 = v221;
  else
    v217 &= 0xCFFFFFFF;
  v218 = *(unsigned int *)(v479 + 88);
  if ((v218 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v222 = *(_QWORD *)(v486 + 2328);
  v223 = (*(_QWORD *)(v486 + 2336) - v222) >> 11;
  if (v223 > v218)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v209 = *v476;
  v218 = *(unsigned int *)(v479 + 88);
  if ((v218 & 0x80000000) != 0)
  {
LABEL_590:
    v224 = v172;
    v225 = *(_DWORD *)(v486 + 1720);
    if (*v209)
      goto LABEL_559;
    goto LABEL_553;
  }
  v222 = *(_QWORD *)(v486 + 2328);
  v223 = (*(_QWORD *)(v486 + 2336) - v222) >> 11;
LABEL_549:
  if (v223 <= v218)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v222 = *(_QWORD *)(v486 + 2328);
    v209 = *v476;
  }
  v224 = v172;
  v225 = *(_DWORD *)(v222 + (v218 << 11) + 1440);
  if (!*v209)
  {
LABEL_553:
    if ((v225 & 0x10000000) != 0)
      v226 = 0x40000000;
    else
      v226 = 0x80000000;
    if ((v225 & 0x20000000) != 0)
      v225 = v226;
    else
      v225 &= 0xCFFFFFFF;
  }
LABEL_559:
  v546 = v531;
  v547 = v532;
  v548 = v533;
  v545 = (float32x4_t)v530;
  v544 = v529;
  if ((v189 & 0x40000000) != 0)
  {
    v227 = (v224 & 0x40000000) == 0;
    v521 = v531;
    v522 = v532;
    v523 = v533;
    v520 = v530;
    v519 = v529;
    *(_QWORD *)&v574 = 0x161616160D0D0D0DLL;
    v514 = xmmword_22468A340;
    v515 = (__int128)xmmword_22468A350;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 7, 4, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E7000001A7), xmmword_22468A350);
    if (v227)
    {
      v516 = v531;
      v517 = v532;
      v518 = v533;
      v515 = v530;
      v514 = v529;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A360;
      v575 = (__int128)xmmword_22468A370;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 7, 4, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E7000001A7), xmmword_22468A370);
      if (((v472 | v200) & 1) == 0)
      {
        v576 = v531;
        v577 = v532;
        v578 = v533;
        v574 = v529;
        v575 = v530;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A380;
        v570 = (__int128)xmmword_22468A390;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 7, 4, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E7000001A7), xmmword_22468A390);
        v228 = (v484 & 1) == 0 && ((v459 | v199) & 1) == 0;
        if ((v445 & 1) == 0 && v228)
        {
          v571 = v531;
          v572 = v532;
          v573 = v533;
          v570 = v530;
          v569 = v529;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A3A0;
          v565 = (__int128)xmmword_22468A3B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 7, 4, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x167000001A7), xmmword_22468A3B0);
        }
      }
      v229 = (v450 & 1) == 0 && ((v459 | v199) & 1) == 0;
      if (v229 && (v201 & 1) == 0)
      {
        v566 = v546;
        v567 = v547;
        v568 = v548;
        v565 = (__int128)v545;
        v564 = v544;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A3C0;
        v560 = (__int128)xmmword_22468A3D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 7, 4, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x167000001A7), xmmword_22468A3D0);
      }
    }
    if (!(v214 & 0x40000000 | v200 & 1))
    {
      v561 = v546;
      v562 = v547;
      v563 = v548;
      *(_QWORD *)&v549 = 0x16160D0D16160D0DLL;
      v560 = (__int128)v545;
      v559 = v544;
      v554 = xmmword_22468A3E0;
      v555 = (__int128)xmmword_22468A3F0;
      *(_QWORD *)&v524 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 7, 4, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v524, COERCE_DOUBLE(0x1E7000001A7), xmmword_22468A3F0);
      v230 = (v210 & 0x40000000) == 0 && (v217 & 0x40000000 | v199 & 1) == 0;
      if ((v484 & 1) == 0 && v230)
      {
        v556 = v546;
        v557 = v547;
        v558 = v548;
        *(_QWORD *)&v524 = 0x161616160D0D0D0DLL;
        v555 = (__int128)v545;
        v554 = v544;
        v549 = xmmword_22468A400;
        v550 = (__int128)xmmword_22468A410;
        *(_QWORD *)&v580[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 7, 4, 6, (uint64_t)&v524, (uint64_t)&v549, (uint64_t)v580, COERCE_DOUBLE(0x167000001A7), xmmword_22468A410);
      }
    }
    v231 = (v201 & 1) == 0 && (v217 & 0x40000000 | v199 & 1) == 0;
    if (v231 && (v225 & 0x40000000) == 0)
    {
      v551 = v546;
      v552 = v547;
      v553 = v548;
      *(_QWORD *)&v580[0] = 0x16160D0D16160D0DLL;
      v550 = (__int128)v545;
      v549 = v544;
      v524 = xmmword_22468A420;
      v525 = (__int128)xmmword_22468A430;
      v581[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 7, 4, 6, (uint64_t)v580, (uint64_t)&v524, (uint64_t)v581, COERCE_DOUBLE(0x167000001A7), xmmword_22468A430);
    }
  }
  v232 = a1[2];
  v485 = v436[1];
  v488 = *v436;
  v492 = a3[3];
  v493 = a3[4];
  v490 = a3[1];
  v491 = a3[2];
  v489 = *a3;
  v441 = *(_OWORD *)a1;
  v477 = (_BYTE **)v436[2];
  v480 = *a1;
  v233 = *((_DWORD *)v232 + 352);
  v234 = ***a1;
  if (***a1)
  {
    v235 = *((_DWORD *)v232 + 416);
    v236 = *((_DWORD *)v232 + 360);
    v237 = *((_DWORD *)v232 + 368);
    v473 = *((_DWORD *)v232 + 424);
    if ((v473 & 0x40000000) == 0)
    {
LABEL_589:
      v238 = v235;
      v239 = 0;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      v243 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v233 & 0x20000000) != 0)
      v233 *= 4;
    v244 = *((_DWORD *)v232 + 416);
    if ((v244 & 0x20000000) != 0)
      v235 = 4 * v244;
    else
      v235 = *((_DWORD *)v232 + 416);
    v245 = *((_DWORD *)v232 + 360);
    if ((v245 & 0x20000000) != 0)
      v236 = 4 * v245;
    else
      v236 = *((_DWORD *)v232 + 360);
    v246 = *((_DWORD *)v232 + 424);
    if ((v246 & 0x20000000) != 0)
      v247 = 4 * v246;
    else
      v247 = *((_DWORD *)v232 + 424);
    v248 = *((_DWORD *)v232 + 368);
    if ((v248 & 0x10000000) != 0)
      v249 = 0x40000000;
    else
      v249 = 0x80000000;
    if ((v248 & 0x20000000) != 0)
      v237 = v249;
    else
      v237 = v248 & 0xCFFFFFFF;
    v473 = v247;
    if ((v247 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v250 = *(unsigned int *)(v485 + 16);
  if ((v250 & 0x80000000) != 0)
  {
    v252 = *(_DWORD *)(v488 + 1716);
    v253 = **v477;
    if (**v477)
      goto LABEL_615;
  }
  else
  {
    v251 = *(_QWORD *)(v488 + 2328);
    if (v250 >= (*(_QWORD *)(v488 + 2336) - v251) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v251 = *(_QWORD *)(v488 + 2328);
    }
    v252 = *(_DWORD *)(v251 + (v250 << 11) + 1436);
    v253 = **v477;
    if (**v477)
    {
LABEL_615:
      v254 = *(unsigned int *)(v485 + 16);
      if ((v254 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v256 = *(_DWORD *)(v488 + 1972);
      if (v253)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v252 & 0x10000000) != 0)
    v426 = 0x40000000;
  else
    v426 = 0x80000000;
  if ((v252 & 0x20000000) != 0)
    v252 = v426;
  else
    v252 &= 0xCFFFFFFF;
  v254 = *(unsigned int *)(v485 + 16);
  if ((v254 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v255 = *(_QWORD *)(v488 + 2328);
  if (v254 >= (*(_QWORD *)(v488 + 2336) - v255) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v255 = *(_QWORD *)(v488 + 2328);
    v253 = **v477;
  }
  v256 = *(_DWORD *)(v255 + (v254 << 11) + 1692);
  if (v253)
  {
LABEL_620:
    v257 = *(unsigned int *)(v485 + 16);
    if ((v257 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v259 = *(_DWORD *)(v488 + 1748);
    if (v253)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v256 & 0x10000000) != 0)
    v427 = 0x40000000;
  else
    v427 = 0x80000000;
  if ((v256 & 0x20000000) != 0)
    v256 = v427;
  else
    v256 &= 0xCFFFFFFF;
  v257 = *(unsigned int *)(v485 + 16);
  if ((v257 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v258 = *(_QWORD *)(v488 + 2328);
  if (v257 >= (*(_QWORD *)(v488 + 2336) - v258) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v258 = *(_QWORD *)(v488 + 2328);
    v253 = **v477;
  }
  v259 = *(_DWORD *)(v258 + (v257 << 11) + 1468);
  if (v253)
  {
LABEL_625:
    v260 = *(unsigned int *)(v485 + 16);
    if ((v260 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v262 = *(_DWORD *)(v488 + 2004);
    if (v253)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v259 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v259 & 0x20000000) != 0)
    v259 = v428;
  else
    v259 &= 0xCFFFFFFF;
  v260 = *(unsigned int *)(v485 + 16);
  if ((v260 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v261 = *(_QWORD *)(v488 + 2328);
  if (v260 >= (*(_QWORD *)(v488 + 2336) - v261) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v261 = *(_QWORD *)(v488 + 2328);
    v253 = **v477;
  }
  v262 = *(_DWORD *)(v261 + (v260 << 11) + 1724);
  if (v253)
  {
LABEL_630:
    v263 = *(unsigned int *)(v485 + 16);
    if ((v263 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v262 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v262 & 0x20000000) != 0)
    v262 = v429;
  else
    v262 &= 0xCFFFFFFF;
  v263 = *(unsigned int *)(v485 + 16);
  if ((v263 & 0x80000000) == 0)
  {
LABEL_631:
    v264 = *(_QWORD *)(v488 + 2328);
    if (v263 >= (*(_QWORD *)(v488 + 2336) - v264) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v264 = *(_QWORD *)(v488 + 2328);
      v253 = **v477;
    }
    v238 = v235;
    v265 = v264 + (v263 << 11);
    v243 = (v252 >> 30) & 1;
    v242 = (v256 >> 30) & 1;
    v241 = (v259 >> 30) & 1;
    v266 = *(_DWORD *)(v265 + 1500);
    v240 = (v262 >> 30) & 1;
    if (v253)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v238 = v235;
  v243 = (v252 >> 30) & 1;
  v242 = (v256 >> 30) & 1;
  v241 = (v259 >> 30) & 1;
  v266 = *(_DWORD *)(v488 + 1780);
  v240 = (v262 >> 30) & 1;
  if (!v253)
  {
LABEL_635:
    if ((v266 & 0x10000000) != 0)
      v267 = 0x40000000;
    else
      v267 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v266 = v267;
    else
      v266 &= 0xCFFFFFFF;
  }
LABEL_641:
  v239 = (v266 >> 30) & 1;
  v234 = **v480;
LABEL_642:
  v451 = v233 >> 30;
  v526 = v491;
  v527 = v492;
  v528 = v493;
  v525 = v490;
  v524 = v489;
  v268 = *((_DWORD *)v232 + 353);
  if (v234)
  {
    v269 = *((_DWORD *)v232 + 417);
    v270 = *((_DWORD *)v232 + 361);
    v468 = *((_DWORD *)v232 + 425);
    v271 = *((_DWORD *)v232 + 369);
  }
  else
  {
    if ((v268 & 0x10000000) != 0)
      v272 = 0x40000000;
    else
      v272 = 0x80000000;
    if ((v268 & 0x20000000) != 0)
      v268 = v272;
    else
      v268 &= 0xCFFFFFFF;
    v273 = *((_DWORD *)v232 + 417);
    if ((v273 & 0x10000000) != 0)
      v274 = 0x40000000;
    else
      v274 = 0x80000000;
    if ((v273 & 0x20000000) != 0)
      v269 = v274;
    else
      v269 = v273 & 0xCFFFFFFF;
    v275 = *((_DWORD *)v232 + 361);
    if ((v275 & 0x10000000) != 0)
      v276 = 0x40000000;
    else
      v276 = 0x80000000;
    if ((v275 & 0x20000000) != 0)
      v270 = v276;
    else
      v270 = v275 & 0xCFFFFFFF;
    v277 = *((_DWORD *)v232 + 425);
    if ((v277 & 0x10000000) != 0)
      v278 = 0x40000000;
    else
      v278 = 0x80000000;
    if ((v277 & 0x20000000) != 0)
      v279 = v278;
    else
      v279 = v277 & 0xCFFFFFFF;
    v468 = v279;
    v280 = *((_DWORD *)v232 + 369);
    if ((v280 & 0x10000000) != 0)
      v271 = 0x40000000;
    else
      v271 = 0x80000000;
    if ((v280 & 0x20000000) == 0)
      v271 = v280 & 0xCFFFFFFF;
  }
  v281 = v236 >> 30;
  v282 = v238 >> 30;
  v283 = v237 >> 30;
  v437 = v268 >> 30;
  v460 = v270 >> 30;
  v464 = v269 >> 30;
  v284 = v271 >> 30;
  if ((v473 & 0x40000000) != 0)
  {
    v521 = v491;
    v522 = v492;
    v523 = v493;
    v520 = v490;
    v519 = v489;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A440;
    v515 = (__int128)xmmword_22468A450;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 0, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E8000001A8), xmmword_22468A450);
    if (!v240)
    {
      v516 = v491;
      v517 = v492;
      v518 = v493;
      v515 = v490;
      v514 = v489;
      *(_QWORD *)&v569 = 0x4040D0D04040D0DLL;
      v574 = xmmword_22468A460;
      v575 = (__int128)xmmword_22468A470;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 0, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E8000001A8), xmmword_22468A470);
      v285 = (v241 | v281 & 1) == 0;
      if (!(v242 | v282 & 1))
      {
        v576 = v491;
        v577 = v492;
        v578 = v493;
        v574 = v489;
        v575 = v490;
        *(_QWORD *)&v564 = 0x40404040D0D0D0DLL;
        v569 = xmmword_22468A480;
        v570 = (__int128)xmmword_22468A490;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 0, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E8000001A8), xmmword_22468A490);
        v286 = (v451 & 1) == 0 && v285;
        if (!v243 && v286)
        {
          v571 = v491;
          v572 = v492;
          v573 = v493;
          v570 = v490;
          v569 = v489;
          *(_QWORD *)&v559 = 0x4040D0D04040D0DLL;
          v564 = xmmword_22468A4A0;
          v565 = (__int128)xmmword_22468A4B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 0, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x168000001A8), xmmword_22468A4B0);
        }
      }
      if (v239)
        v287 = 0;
      else
        v287 = v285;
      if (v287 && (v283 & 1) == 0)
      {
        v566 = v491;
        v567 = v492;
        v568 = v493;
        *(_QWORD *)&v554 = 0x40404040D0D0D0DLL;
        v565 = v490;
        v564 = v489;
        v559 = xmmword_22468A4C0;
        v560 = (__int128)xmmword_22468A4D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 0, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x168000001A8), xmmword_22468A4D0);
      }
    }
    if (((v282 | v464) & 1) == 0)
    {
      v561 = v491;
      v562 = v492;
      v563 = v493;
      v560 = v490;
      v559 = v489;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A4E0;
      v555 = (__int128)xmmword_22468A4F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 0, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E8000001A8), xmmword_22468A4F0);
      v288 = (v437 & 1) == 0 && ((v281 | v460) & 1) == 0;
      if ((v451 & 1) == 0 && v288)
      {
        v556 = v491;
        v557 = v492;
        v558 = v493;
        v555 = v490;
        v554 = v489;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A500;
        v550 = (__int128)xmmword_22468A510;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 0, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x168000001A8), xmmword_22468A510);
      }
    }
    v289 = (v283 & 1) == 0 && ((v281 | v460) & 1) == 0;
    if (v289 && (v284 & 1) == 0)
    {
      v551 = v491;
      v552 = v492;
      v553 = v493;
      v550 = v490;
      v549 = v489;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A520;
      v545 = xmmword_22468A530;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 0, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x168000001A8), xmmword_22468A530);
    }
  }
  v501 = v526;
  v502 = v527;
  v503 = v528;
  v499 = v524;
  v500 = v525;
  v290 = *((_DWORD *)v232 + 354);
  if (**v480)
  {
    v291 = *((_DWORD *)v232 + 418);
    v292 = *((_DWORD *)v232 + 362);
    v293 = *((_DWORD *)v232 + 426);
    v294 = *((_DWORD *)v232 + 370);
  }
  else
  {
    if ((v290 & 0x10000000) != 0)
      v295 = 0x40000000;
    else
      v295 = 0x80000000;
    if ((v290 & 0x20000000) != 0)
      v290 = v295;
    else
      v290 &= 0xCFFFFFFF;
    v296 = *((_DWORD *)v232 + 418);
    if ((v296 & 0x10000000) != 0)
      v297 = 0x40000000;
    else
      v297 = 0x80000000;
    if ((v296 & 0x20000000) != 0)
      v291 = v297;
    else
      v291 = v296 & 0xCFFFFFFF;
    v298 = *((_DWORD *)v232 + 362);
    if ((v298 & 0x10000000) != 0)
      v299 = 0x40000000;
    else
      v299 = 0x80000000;
    if ((v298 & 0x20000000) != 0)
      v292 = v299;
    else
      v292 = v298 & 0xCFFFFFFF;
    v300 = *((_DWORD *)v232 + 426);
    if ((v300 & 0x10000000) != 0)
      v301 = 0x40000000;
    else
      v301 = 0x80000000;
    if ((v300 & 0x20000000) != 0)
      v293 = v301;
    else
      v293 = v300 & 0xCFFFFFFF;
    v302 = *((_DWORD *)v232 + 370);
    if ((v302 & 0x10000000) != 0)
      v294 = 0x40000000;
    else
      v294 = 0x80000000;
    if ((v302 & 0x20000000) == 0)
      v294 = v302 & 0xCFFFFFFF;
  }
  v303 = v292 >> 30;
  v435 = v290 >> 30;
  v456 = v291 >> 30;
  v446 = v294 >> 30;
  v511 = v526;
  v512 = v527;
  v513 = v528;
  v509 = v524;
  v510 = v525;
  if ((v468 & 0x40000000) != 0)
  {
    v521 = v526;
    v522 = v527;
    v523 = v528;
    v520 = v525;
    v519 = v524;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A540;
    v515 = (__int128)xmmword_22468A550;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 1, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1E9000001A9), xmmword_22468A550);
    if ((v473 & 0x40000000) == 0)
    {
      v516 = v526;
      v517 = v527;
      v518 = v528;
      v515 = v525;
      v514 = v524;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A560;
      v575 = (__int128)xmmword_22468A570;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 1, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1E9000001A9), xmmword_22468A570);
      if (((v282 | v464) & 1) == 0)
      {
        v576 = v526;
        v577 = v527;
        v578 = v528;
        v574 = v524;
        v575 = v525;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A580;
        v570 = (__int128)xmmword_22468A590;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 1, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1E9000001A9), xmmword_22468A590);
        v304 = (v437 & 1) == 0 && ((v281 | v460) & 1) == 0;
        if ((v451 & 1) == 0 && v304)
        {
          v571 = v526;
          v572 = v527;
          v573 = v528;
          v570 = v525;
          v569 = v524;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A5A0;
          v565 = (__int128)xmmword_22468A5B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 1, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x169000001A9), xmmword_22468A5B0);
        }
      }
      v305 = (v283 & 1) == 0 && ((v281 | v460) & 1) == 0;
      if (v305 && (v284 & 1) == 0)
      {
        v566 = v511;
        v567 = v512;
        v568 = v513;
        v565 = v510;
        v564 = v509;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A5C0;
        v560 = (__int128)xmmword_22468A5D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 1, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x169000001A9), xmmword_22468A5D0);
      }
    }
    if (((v464 | v456) & 1) == 0)
    {
      v561 = v511;
      v562 = v512;
      v563 = v513;
      v560 = v510;
      v559 = v509;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A5E0;
      v555 = (__int128)xmmword_22468A5F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 1, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1E9000001A9), xmmword_22468A5F0);
      v306 = (v435 & 1) == 0 && ((v460 | v303) & 1) == 0;
      if ((v437 & 1) == 0 && v306)
      {
        v556 = v511;
        v557 = v512;
        v558 = v513;
        v555 = v510;
        v554 = v509;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A600;
        v550 = (__int128)xmmword_22468A610;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 1, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x169000001A9), xmmword_22468A610);
      }
    }
    v307 = (v284 & 1) == 0 && ((v460 | v303) & 1) == 0;
    if (v307 && (v446 & 1) == 0)
    {
      v551 = v511;
      v552 = v512;
      v553 = v513;
      v550 = v510;
      v549 = v509;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A620;
      v545 = xmmword_22468A630;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 1, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x169000001A9), xmmword_22468A630);
    }
  }
  v308 = *((_DWORD *)v232 + 355);
  if (**v480)
  {
    v309 = *((_DWORD *)v232 + 419);
    v310 = *((_DWORD *)v232 + 363);
    v311 = *((_DWORD *)v232 + 427);
    v312 = *((_DWORD *)v232 + 371);
  }
  else
  {
    if ((v308 & 0x10000000) != 0)
      v313 = 0x40000000;
    else
      v313 = 0x80000000;
    if ((v308 & 0x20000000) != 0)
      v308 = v313;
    else
      v308 &= 0xCFFFFFFF;
    v314 = *((_DWORD *)v232 + 419);
    if ((v314 & 0x10000000) != 0)
      v315 = 0x40000000;
    else
      v315 = 0x80000000;
    if ((v314 & 0x20000000) != 0)
      v309 = v315;
    else
      v309 = v314 & 0xCFFFFFFF;
    v316 = *((_DWORD *)v232 + 363);
    if ((v316 & 0x10000000) != 0)
      v317 = 0x40000000;
    else
      v317 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v310 = v317;
    else
      v310 = v316 & 0xCFFFFFFF;
    v318 = *((_DWORD *)v232 + 427);
    if ((v318 & 0x10000000) != 0)
      v319 = 0x40000000;
    else
      v319 = 0x80000000;
    if ((v318 & 0x20000000) != 0)
      v311 = v319;
    else
      v311 = v318 & 0xCFFFFFFF;
    v320 = *((_DWORD *)v232 + 371);
    if ((v320 & 0x10000000) != 0)
      v312 = 0x40000000;
    else
      v312 = 0x80000000;
    if ((v320 & 0x20000000) == 0)
      v312 = v320 & 0xCFFFFFFF;
  }
  v452 = v310 >> 30;
  v432 = v308 >> 30;
  v474 = v309 >> 30;
  v443 = v312 >> 30;
  if ((v293 & 0x40000000) != 0)
  {
    v521 = v501;
    v522 = v502;
    v523 = v503;
    v520 = v500;
    v519 = v499;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A640;
    v515 = (__int128)xmmword_22468A650;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 2, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1EA000001AALL), xmmword_22468A650);
    if ((v468 & 0x40000000) == 0)
    {
      v516 = v501;
      v517 = v502;
      v518 = v503;
      v515 = v500;
      v514 = v499;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A660;
      v575 = (__int128)xmmword_22468A670;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 2, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1EA000001AALL), xmmword_22468A670);
      if (((v464 | v456) & 1) == 0)
      {
        v576 = v501;
        v577 = v502;
        v578 = v503;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A680;
        v570 = (__int128)xmmword_22468A690;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 2, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1EA000001AALL), xmmword_22468A690);
        v321 = (v435 & 1) == 0 && ((v460 | v303) & 1) == 0;
        if ((v437 & 1) == 0 && v321)
        {
          v571 = v501;
          v572 = v502;
          v573 = v503;
          v570 = v500;
          v569 = v499;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A6A0;
          v565 = (__int128)xmmword_22468A6B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 2, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16A000001AALL), xmmword_22468A6B0);
        }
      }
      v322 = (v284 & 1) == 0 && ((v460 | v303) & 1) == 0;
      if (v322 && (v446 & 1) == 0)
      {
        v566 = v501;
        v567 = v502;
        v568 = v503;
        v565 = v500;
        v564 = v499;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A6C0;
        v560 = (__int128)xmmword_22468A6D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 2, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16A000001AALL), xmmword_22468A6D0);
      }
    }
    if (((v456 | v474) & 1) == 0)
    {
      v561 = v501;
      v562 = v502;
      v563 = v503;
      v560 = v500;
      v559 = v499;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A6E0;
      v555 = (__int128)xmmword_22468A6F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 2, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1EA000001AALL), xmmword_22468A6F0);
      v323 = (v432 & 1) == 0 && ((v303 | v452) & 1) == 0;
      if ((v435 & 1) == 0 && v323)
      {
        v556 = v501;
        v557 = v502;
        v558 = v503;
        v555 = v500;
        v554 = v499;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A700;
        v550 = (__int128)xmmword_22468A710;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 2, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x16A000001AALL), xmmword_22468A710);
      }
    }
    v324 = (v446 & 1) == 0 && ((v303 | v452) & 1) == 0;
    if (v324 && (v443 & 1) == 0)
    {
      v551 = v501;
      v552 = v502;
      v553 = v503;
      v550 = v500;
      v549 = v499;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A720;
      v545 = xmmword_22468A730;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 2, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x16A000001AALL), xmmword_22468A730);
    }
  }
  v325 = *((_DWORD *)v232 + 356);
  if (**v480)
  {
    v326 = *((_DWORD *)v232 + 420);
    v327 = *((_DWORD *)v232 + 364);
    v328 = *((_DWORD *)v232 + 428);
    v329 = *((_DWORD *)v232 + 372);
  }
  else
  {
    if ((v325 & 0x10000000) != 0)
      v330 = 0x40000000;
    else
      v330 = 0x80000000;
    if ((v325 & 0x20000000) != 0)
      v325 = v330;
    else
      v325 &= 0xCFFFFFFF;
    v331 = *((_DWORD *)v232 + 420);
    if ((v331 & 0x10000000) != 0)
      v332 = 0x40000000;
    else
      v332 = 0x80000000;
    if ((v331 & 0x20000000) != 0)
      v326 = v332;
    else
      v326 = v331 & 0xCFFFFFFF;
    v333 = *((_DWORD *)v232 + 364);
    if ((v333 & 0x10000000) != 0)
      v334 = 0x40000000;
    else
      v334 = 0x80000000;
    if ((v333 & 0x20000000) != 0)
      v327 = v334;
    else
      v327 = v333 & 0xCFFFFFFF;
    v335 = *((_DWORD *)v232 + 428);
    if ((v335 & 0x10000000) != 0)
      v336 = 0x40000000;
    else
      v336 = 0x80000000;
    if ((v335 & 0x20000000) != 0)
      v328 = v336;
    else
      v328 = v335 & 0xCFFFFFFF;
    v337 = *((_DWORD *)v232 + 372);
    if ((v337 & 0x10000000) != 0)
      v329 = 0x40000000;
    else
      v329 = 0x80000000;
    if ((v337 & 0x20000000) == 0)
      v329 = v337 & 0xCFFFFFFF;
  }
  v338 = v327 >> 30;
  v438 = v325 >> 30;
  v339 = v326 >> 30;
  v340 = v329 >> 30;
  if ((v311 & 0x40000000) != 0)
  {
    v521 = v501;
    v522 = v502;
    v523 = v503;
    v520 = v500;
    v519 = v499;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A740;
    v515 = (__int128)xmmword_22468A750;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 3, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1EB000001ABLL), xmmword_22468A750);
    if ((v293 & 0x40000000) == 0)
    {
      v516 = v501;
      v517 = v502;
      v518 = v503;
      v515 = v500;
      v514 = v499;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A760;
      v575 = (__int128)xmmword_22468A770;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 3, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1EB000001ABLL), xmmword_22468A770);
      if (((v456 | v474) & 1) == 0)
      {
        v576 = v501;
        v577 = v502;
        v578 = v503;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A780;
        v570 = (__int128)xmmword_22468A790;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 3, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1EB000001ABLL), xmmword_22468A790);
        v341 = (v432 & 1) == 0 && ((v303 | v452) & 1) == 0;
        if ((v435 & 1) == 0 && v341)
        {
          v571 = v501;
          v572 = v502;
          v573 = v503;
          v570 = v500;
          v569 = v499;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A7A0;
          v565 = (__int128)xmmword_22468A7B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 3, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16B000001ABLL), xmmword_22468A7B0);
        }
      }
      v342 = (v446 & 1) == 0 && ((v303 | v452) & 1) == 0;
      if (v342 && (v443 & 1) == 0)
      {
        v566 = v501;
        v567 = v502;
        v568 = v503;
        v565 = v500;
        v564 = v499;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A7C0;
        v560 = (__int128)xmmword_22468A7D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 3, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16B000001ABLL), xmmword_22468A7D0);
      }
    }
    if (((v474 | v339) & 1) == 0)
    {
      v561 = v501;
      v562 = v502;
      v563 = v503;
      v560 = v500;
      v559 = v499;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A7E0;
      v555 = (__int128)xmmword_22468A7F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 3, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1EB000001ABLL), xmmword_22468A7F0);
      v343 = (v438 & 1) == 0 && ((v452 | v338) & 1) == 0;
      if ((v432 & 1) == 0 && v343)
      {
        v556 = v501;
        v557 = v502;
        v558 = v503;
        v555 = v500;
        v554 = v499;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A800;
        v550 = (__int128)xmmword_22468A810;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 3, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x16B000001ABLL), xmmword_22468A810);
      }
    }
    v344 = (v443 & 1) == 0 && ((v452 | v338) & 1) == 0;
    if (v344 && (v340 & 1) == 0)
    {
      v551 = v501;
      v552 = v502;
      v553 = v503;
      v550 = v500;
      v549 = v499;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A820;
      v545 = xmmword_22468A830;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 3, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x16B000001ABLL), xmmword_22468A830);
    }
  }
  v345 = *((_DWORD *)v232 + 357);
  if (**v480)
  {
    v346 = *((_DWORD *)v232 + 421);
    v347 = *((_DWORD *)v232 + 365);
    v348 = *((_DWORD *)v232 + 429);
    v349 = *((_DWORD *)v232 + 373);
  }
  else
  {
    if ((v345 & 0x10000000) != 0)
      v350 = 0x40000000;
    else
      v350 = 0x80000000;
    if ((v345 & 0x20000000) != 0)
      v345 = v350;
    else
      v345 &= 0xCFFFFFFF;
    v351 = *((_DWORD *)v232 + 421);
    if ((v351 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v351 & 0x20000000) != 0)
      v346 = v352;
    else
      v346 = v351 & 0xCFFFFFFF;
    v353 = *((_DWORD *)v232 + 365);
    if ((v353 & 0x10000000) != 0)
      v354 = 0x40000000;
    else
      v354 = 0x80000000;
    if ((v353 & 0x20000000) != 0)
      v347 = v354;
    else
      v347 = v353 & 0xCFFFFFFF;
    v355 = *((_DWORD *)v232 + 429);
    if ((v355 & 0x10000000) != 0)
      v356 = 0x40000000;
    else
      v356 = 0x80000000;
    if ((v355 & 0x20000000) != 0)
      v348 = v356;
    else
      v348 = v355 & 0xCFFFFFFF;
    v357 = *((_DWORD *)v232 + 373);
    if ((v357 & 0x10000000) != 0)
      v349 = 0x40000000;
    else
      v349 = 0x80000000;
    if ((v357 & 0x20000000) == 0)
      v349 = v357 & 0xCFFFFFFF;
  }
  v358 = v347 >> 30;
  v457 = v345 >> 30;
  v359 = v346 >> 30;
  v465 = v349 >> 30;
  if ((v328 & 0x40000000) != 0)
  {
    v521 = v501;
    v522 = v502;
    v523 = v503;
    v520 = v500;
    v519 = v499;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A840;
    v515 = (__int128)xmmword_22468A850;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 4, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1EC000001ACLL), xmmword_22468A850);
    if ((v311 & 0x40000000) == 0)
    {
      v516 = v501;
      v517 = v502;
      v518 = v503;
      v515 = v500;
      v514 = v499;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A860;
      v575 = (__int128)xmmword_22468A870;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 4, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1EC000001ACLL), xmmword_22468A870);
      if (((v474 | v339) & 1) == 0)
      {
        v576 = v501;
        v577 = v502;
        v578 = v503;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A880;
        v570 = (__int128)xmmword_22468A890;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 4, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1EC000001ACLL), xmmword_22468A890);
        v360 = (v438 & 1) == 0 && ((v452 | v338) & 1) == 0;
        if ((v432 & 1) == 0 && v360)
        {
          v571 = v501;
          v572 = v502;
          v573 = v503;
          v570 = v500;
          v569 = v499;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A8A0;
          v565 = (__int128)xmmword_22468A8B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 4, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16C000001ACLL), xmmword_22468A8B0);
        }
      }
      v361 = (v443 & 1) == 0 && ((v452 | v338) & 1) == 0;
      if (v361 && (v340 & 1) == 0)
      {
        v566 = v501;
        v567 = v502;
        v568 = v503;
        v565 = v500;
        v564 = v499;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A8C0;
        v560 = (__int128)xmmword_22468A8D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 4, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16C000001ACLL), xmmword_22468A8D0);
      }
    }
    if (((v339 | v359) & 1) == 0)
    {
      v561 = v501;
      v562 = v502;
      v563 = v503;
      v560 = v500;
      v559 = v499;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A8E0;
      v555 = (__int128)xmmword_22468A8F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 4, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1EC000001ACLL), xmmword_22468A8F0);
      v362 = (v457 & 1) == 0 && ((v338 | v358) & 1) == 0;
      if ((v438 & 1) == 0 && v362)
      {
        v556 = v501;
        v557 = v502;
        v558 = v503;
        v555 = v500;
        v554 = v499;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468A900;
        v550 = (__int128)xmmword_22468A910;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 4, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x16C000001ACLL), xmmword_22468A910);
      }
    }
    v363 = (v340 & 1) == 0 && ((v338 | v358) & 1) == 0;
    if (v363 && (v465 & 1) == 0)
    {
      v551 = v501;
      v552 = v502;
      v553 = v503;
      v550 = v500;
      v549 = v499;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468A920;
      v545 = xmmword_22468A930;
      *(_QWORD *)&v534 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 4, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v534, COERCE_DOUBLE(0x16C000001ACLL), xmmword_22468A930);
    }
  }
  v364 = *((_DWORD *)v232 + 358);
  if (**v480)
  {
    v365 = *((_DWORD *)v232 + 422);
    v366 = *((_DWORD *)v232 + 366);
    v367 = *((_DWORD *)v232 + 430);
    v368 = *((_DWORD *)v232 + 374);
  }
  else
  {
    if ((v364 & 0x10000000) != 0)
      v369 = 0x40000000;
    else
      v369 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v364 = v369;
    else
      v364 &= 0xCFFFFFFF;
    v370 = *((_DWORD *)v232 + 422);
    if ((v370 & 0x10000000) != 0)
      v371 = 0x40000000;
    else
      v371 = 0x80000000;
    if ((v370 & 0x20000000) != 0)
      v365 = v371;
    else
      v365 = v370 & 0xCFFFFFFF;
    v372 = *((_DWORD *)v232 + 366);
    if ((v372 & 0x10000000) != 0)
      v373 = 0x40000000;
    else
      v373 = 0x80000000;
    if ((v372 & 0x20000000) != 0)
      v366 = v373;
    else
      v366 = v372 & 0xCFFFFFFF;
    v374 = *((_DWORD *)v232 + 430);
    if ((v374 & 0x10000000) != 0)
      v375 = 0x40000000;
    else
      v375 = 0x80000000;
    if ((v374 & 0x20000000) != 0)
      v367 = v375;
    else
      v367 = v374 & 0xCFFFFFFF;
    v376 = *((_DWORD *)v232 + 374);
    if ((v376 & 0x10000000) != 0)
      v368 = 0x40000000;
    else
      v368 = 0x80000000;
    if ((v376 & 0x20000000) == 0)
      v368 = v376 & 0xCFFFFFFF;
  }
  v453 = v364 >> 30;
  v469 = v366 >> 30;
  v475 = v365 >> 30;
  v461 = v368 >> 30;
  v536 = v501;
  v537 = v502;
  v538 = v503;
  v535 = v500;
  v534 = v499;
  if ((v348 & 0x40000000) != 0)
  {
    v521 = v501;
    v522 = v502;
    v523 = v503;
    v520 = v500;
    v519 = v499;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468A940;
    v515 = (__int128)xmmword_22468A950;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 5, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1ED000001ADLL), xmmword_22468A950);
    if ((v328 & 0x40000000) == 0)
    {
      v516 = v501;
      v517 = v502;
      v518 = v503;
      v515 = v500;
      v514 = v499;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468A960;
      v575 = (__int128)xmmword_22468A970;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 5, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1ED000001ADLL), xmmword_22468A970);
      if (((v339 | v359) & 1) == 0)
      {
        v576 = v501;
        v577 = v502;
        v578 = v503;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468A980;
        v570 = (__int128)xmmword_22468A990;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 5, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1ED000001ADLL), xmmword_22468A990);
        v377 = (v457 & 1) == 0 && ((v338 | v358) & 1) == 0;
        if ((v438 & 1) == 0 && v377)
        {
          v571 = v501;
          v572 = v502;
          v573 = v503;
          v570 = v500;
          v569 = v499;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468A9A0;
          v565 = (__int128)xmmword_22468A9B0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 5, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16D000001ADLL), xmmword_22468A9B0);
        }
      }
      v378 = (v340 & 1) == 0 && ((v338 | v358) & 1) == 0;
      if (v378 && (v465 & 1) == 0)
      {
        v566 = v536;
        v567 = v537;
        v568 = v538;
        v565 = v535;
        v564 = v534;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468A9C0;
        v560 = (__int128)xmmword_22468A9D0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 5, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16D000001ADLL), xmmword_22468A9D0);
      }
    }
    if (((v359 | v475) & 1) == 0)
    {
      v561 = v536;
      v562 = v537;
      v563 = v538;
      v560 = v535;
      v559 = v534;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468A9E0;
      v555 = (__int128)xmmword_22468A9F0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 5, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1ED000001ADLL), xmmword_22468A9F0);
      v379 = (v453 & 1) == 0 && ((v358 | v469) & 1) == 0;
      if ((v457 & 1) == 0 && v379)
      {
        v556 = v536;
        v557 = v537;
        v558 = v538;
        v555 = v535;
        v554 = v534;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468AA00;
        v550 = (__int128)xmmword_22468AA10;
        *(_QWORD *)&v539 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 5, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)&v539, COERCE_DOUBLE(0x16D000001ADLL), xmmword_22468AA10);
      }
    }
    v380 = (v465 & 1) == 0 && ((v358 | v469) & 1) == 0;
    if (v380 && (v461 & 1) == 0)
    {
      v551 = v536;
      v552 = v537;
      v553 = v538;
      v550 = v535;
      v549 = v534;
      *(_QWORD *)&v539 = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468AA20;
      v545 = xmmword_22468AA30;
      *(_QWORD *)&v529 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 5, 5, 6, (uint64_t)&v539, (uint64_t)&v544, (uint64_t)&v529, COERCE_DOUBLE(0x16D000001ADLL), xmmword_22468AA30);
    }
  }
  v531 = v501;
  v532 = v502;
  v533 = v503;
  v530 = v500;
  v529 = v499;
  v381 = *((_DWORD *)v232 + 359);
  if (**v480)
  {
    v382 = *((_DWORD *)v232 + 423);
    v383 = *((_DWORD *)v232 + 367);
    v384 = *((_DWORD *)v232 + 431);
    v385 = *((_DWORD *)v232 + 375);
  }
  else
  {
    if ((v381 & 0x10000000) != 0)
      v386 = 0x40000000;
    else
      v386 = 0x80000000;
    if ((v381 & 0x20000000) != 0)
      v381 = v386;
    else
      v381 &= 0xCFFFFFFF;
    v387 = *((_DWORD *)v232 + 423);
    if ((v387 & 0x10000000) != 0)
      v388 = 0x40000000;
    else
      v388 = 0x80000000;
    if ((v387 & 0x20000000) != 0)
      v382 = v388;
    else
      v382 = v387 & 0xCFFFFFFF;
    v389 = *((_DWORD *)v232 + 367);
    if ((v389 & 0x10000000) != 0)
      v390 = 0x40000000;
    else
      v390 = 0x80000000;
    if ((v389 & 0x20000000) != 0)
      v383 = v390;
    else
      v383 = v389 & 0xCFFFFFFF;
    v391 = *((_DWORD *)v232 + 431);
    if ((v391 & 0x10000000) != 0)
      v392 = 0x40000000;
    else
      v392 = 0x80000000;
    if ((v391 & 0x20000000) != 0)
      v384 = v392;
    else
      v384 = v391 & 0xCFFFFFFF;
    v393 = *((_DWORD *)v232 + 375);
    if ((v393 & 0x10000000) != 0)
      v385 = 0x40000000;
    else
      v385 = 0x80000000;
    if ((v393 & 0x20000000) == 0)
      v385 = v393 & 0xCFFFFFFF;
  }
  v394 = v383 >> 30;
  v447 = v381 >> 30;
  v395 = v382 >> 30;
  v481 = v385 >> 30;
  v541 = v501;
  v542 = v502;
  v543 = v503;
  v540 = v500;
  v539 = v499;
  if ((v367 & 0x40000000) != 0)
  {
    v521 = v501;
    v522 = v502;
    v523 = v503;
    v520 = v500;
    v519 = v499;
    *(_QWORD *)&v574 = 0xD0D0D0D0D0D0D0DLL;
    v514 = xmmword_22468AA40;
    v515 = (__int128)xmmword_22468AA50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 6, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1EE000001AELL), xmmword_22468AA50);
    if ((v348 & 0x40000000) == 0)
    {
      v516 = v501;
      v517 = v502;
      v518 = v503;
      v515 = v500;
      v514 = v499;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468AA60;
      v575 = (__int128)xmmword_22468AA70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 6, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1EE000001AELL), xmmword_22468AA70);
      if (((v359 | v475) & 1) == 0)
      {
        v576 = v501;
        v577 = v502;
        v578 = v503;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468AA80;
        v570 = (__int128)xmmword_22468AA90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 6, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1EE000001AELL), xmmword_22468AA90);
        v396 = (v453 & 1) == 0 && ((v358 | v469) & 1) == 0;
        if ((v457 & 1) == 0 && v396)
        {
          v571 = v501;
          v572 = v502;
          v573 = v503;
          v570 = v500;
          v569 = v499;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468AAA0;
          v565 = (__int128)xmmword_22468AAB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 6, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16E000001AELL), xmmword_22468AAB0);
        }
      }
      v397 = (v465 & 1) == 0 && ((v358 | v469) & 1) == 0;
      if (v397 && (v461 & 1) == 0)
      {
        v566 = v541;
        v567 = v542;
        v568 = v543;
        v565 = v540;
        v564 = v539;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v559 = xmmword_22468AAC0;
        v560 = (__int128)xmmword_22468AAD0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 6, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16E000001AELL), xmmword_22468AAD0);
      }
    }
    if (((v475 | v395) & 1) == 0)
    {
      v561 = v541;
      v562 = v542;
      v563 = v543;
      v560 = v540;
      v559 = v539;
      *(_QWORD *)&v549 = 0xD0D0D0D0D0D0D0DLL;
      v554 = xmmword_22468AAE0;
      v555 = (__int128)xmmword_22468AAF0;
      *(_QWORD *)&v544 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 6, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)&v544, COERCE_DOUBLE(0x1EE000001AELL), xmmword_22468AAF0);
      v398 = (v447 & 1) == 0 && ((v469 | v394) & 1) == 0;
      if ((v453 & 1) == 0 && v398)
      {
        v556 = v541;
        v557 = v542;
        v558 = v543;
        v555 = v540;
        v554 = v539;
        *(_QWORD *)&v544 = 0xD0D0D0D0D0D0D0DLL;
        v549 = xmmword_22468AB00;
        v550 = (__int128)xmmword_22468AB10;
        *(_QWORD *)&v580[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 6, 5, 6, (uint64_t)&v544, (uint64_t)&v549, (uint64_t)v580, COERCE_DOUBLE(0x16E000001AELL), xmmword_22468AB10);
      }
    }
    v399 = (v461 & 1) == 0 && ((v469 | v394) & 1) == 0;
    if (v399 && (v481 & 1) == 0)
    {
      v551 = v541;
      v552 = v542;
      v553 = v543;
      v550 = v540;
      v549 = v539;
      *(_QWORD *)&v580[0] = 0xD0D0D0D0D0D0D0DLL;
      v544 = xmmword_22468AB20;
      v545 = xmmword_22468AB30;
      v581[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 6, 5, 6, (uint64_t)v580, (uint64_t)&v544, (uint64_t)v581, COERCE_DOUBLE(0x16E000001AELL), xmmword_22468AB30);
    }
  }
  v400 = *(unsigned int *)(v485 + 88);
  if ((v400 & 0x80000000) != 0)
  {
    v403 = *v477;
    v404 = *(_DWORD *)(v488 + 1688);
    v405 = **v477;
    if (**v477)
      goto LABEL_1060;
  }
  else
  {
    v401 = *(_QWORD *)(v488 + 2328);
    if (v400 >= (*(_QWORD *)(v488 + 2336) - v401) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v401 = *(_QWORD *)(v488 + 2328);
    }
    v402 = v401 + (v400 << 11);
    v403 = *v477;
    v404 = *(_DWORD *)(v402 + 1408);
    v405 = **v477;
    if (**v477)
    {
LABEL_1060:
      v406 = *(unsigned int *)(v485 + 88);
      if ((v406 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v408 = *(_DWORD *)(v488 + 1944);
      if (v405)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v404 & 0x10000000) != 0)
    v413 = 0x40000000;
  else
    v413 = 0x80000000;
  if ((v404 & 0x20000000) != 0)
    v404 = v413;
  else
    v404 &= 0xCFFFFFFF;
  v406 = *(unsigned int *)(v485 + 88);
  if ((v406 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v407 = *(_QWORD *)(v488 + 2328);
  if (v406 >= (*(_QWORD *)(v488 + 2336) - v407) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v407 = *(_QWORD *)(v488 + 2328);
    v403 = *v477;
    v405 = **v477;
  }
  v408 = *(_DWORD *)(v407 + (v406 << 11) + 1664);
  if (v405)
  {
LABEL_1065:
    v409 = *(unsigned int *)(v485 + 88);
    if ((v409 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v411 = *(_DWORD *)(v488 + 1720);
    if (v405)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v408 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v408 & 0x20000000) != 0)
    v408 = v414;
  else
    v408 &= 0xCFFFFFFF;
  v409 = *(unsigned int *)(v485 + 88);
  if ((v409 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v410 = *(_QWORD *)(v488 + 2328);
  if (v409 >= (*(_QWORD *)(v488 + 2336) - v410) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v410 = *(_QWORD *)(v488 + 2328);
    v403 = *v477;
    v405 = **v477;
  }
  v411 = *(_DWORD *)(v410 + (v409 << 11) + 1440);
  if (v405)
  {
LABEL_1070:
    v412 = *(unsigned int *)(v485 + 88);
    if ((v412 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v411 & 0x10000000) != 0)
    v415 = 0x40000000;
  else
    v415 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v411 = v415;
  else
    v411 &= 0xCFFFFFFF;
  v412 = *(unsigned int *)(v485 + 88);
  if ((v412 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v416 = *(_QWORD *)(v488 + 2328);
  v417 = (*(_QWORD *)(v488 + 2336) - v416) >> 11;
  if (v417 > v412)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v403 = *v477;
  v412 = *(unsigned int *)(v485 + 88);
  if ((v412 & 0x80000000) != 0)
  {
LABEL_1139:
    v418 = *(_DWORD *)(v488 + 1752);
    if (*v403)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v416 = *(_QWORD *)(v488 + 2328);
  v417 = (*(_QWORD *)(v488 + 2336) - v416) >> 11;
LABEL_1100:
  if (v417 <= v412)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v416 = *(_QWORD *)(v488 + 2328);
    v403 = *v477;
  }
  v418 = *(_DWORD *)(v416 + (v412 << 11) + 1472);
  if (!*v403)
  {
LABEL_1104:
    if ((v418 & 0x10000000) != 0)
      v419 = 0x40000000;
    else
      v419 = 0x80000000;
    if ((v418 & 0x20000000) != 0)
      v418 = v419;
    else
      v418 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v546 = v531;
  v547 = v532;
  v548 = v533;
  v545 = (float32x4_t)v530;
  v544 = v529;
  if ((v384 & 0x40000000) != 0)
  {
    v521 = v531;
    v522 = v532;
    v523 = v533;
    v520 = v530;
    v519 = v529;
    *(_QWORD *)&v574 = 0x161616160D0D0D0DLL;
    v514 = xmmword_22468AB40;
    v515 = (__int128)xmmword_22468AB50;
    *(_QWORD *)&v569 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v519, 7, 5, 6, (uint64_t)&v574, (uint64_t)&v514, (uint64_t)&v569, COERCE_DOUBLE(0x1EF000001AFLL), xmmword_22468AB50);
    if ((v367 & 0x40000000) == 0)
    {
      v516 = v531;
      v517 = v532;
      v518 = v533;
      v515 = v530;
      v514 = v529;
      *(_QWORD *)&v569 = 0xD0D0D0D0D0D0D0DLL;
      v574 = xmmword_22468AB60;
      v575 = (__int128)xmmword_22468AB70;
      *(_QWORD *)&v564 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v514, 7, 5, 6, (uint64_t)&v569, (uint64_t)&v574, (uint64_t)&v564, COERCE_DOUBLE(0x1EF000001AFLL), xmmword_22468AB70);
      if (((v475 | v395) & 1) == 0)
      {
        v576 = v531;
        v577 = v532;
        v578 = v533;
        v574 = v529;
        v575 = v530;
        *(_QWORD *)&v564 = 0xD0D0D0D0D0D0D0DLL;
        v569 = xmmword_22468AB80;
        v570 = (__int128)xmmword_22468AB90;
        *(_QWORD *)&v559 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v574, 7, 5, 6, (uint64_t)&v564, (uint64_t)&v569, (uint64_t)&v559, COERCE_DOUBLE(0x1EF000001AFLL), xmmword_22468AB90);
        v420 = (v447 & 1) == 0 && ((v469 | v394) & 1) == 0;
        if ((v453 & 1) == 0 && v420)
        {
          v571 = v531;
          v572 = v532;
          v573 = v533;
          v570 = v530;
          v569 = v529;
          *(_QWORD *)&v559 = 0xD0D0D0D0D0D0D0DLL;
          v564 = xmmword_22468ABA0;
          v565 = (__int128)xmmword_22468ABB0;
          *(_QWORD *)&v554 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v569, 7, 5, 6, (uint64_t)&v559, (uint64_t)&v564, (uint64_t)&v554, COERCE_DOUBLE(0x16F000001AFLL), xmmword_22468ABB0);
        }
      }
      v421 = (v461 & 1) == 0 && ((v469 | v394) & 1) == 0;
      if (v421 && (v481 & 1) == 0)
      {
        v566 = v546;
        v567 = v547;
        v568 = v548;
        *(_QWORD *)&v554 = 0xD0D0D0D0D0D0D0DLL;
        v565 = (__int128)v545;
        v564 = v544;
        v559 = xmmword_22468ABC0;
        v560 = (__int128)xmmword_22468ABD0;
        *(_QWORD *)&v549 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v564, 7, 5, 6, (uint64_t)&v554, (uint64_t)&v559, (uint64_t)&v549, COERCE_DOUBLE(0x16F000001AFLL), xmmword_22468ABD0);
      }
    }
    v422 = (v411 & 0x40000000 | v394 & 1) == 0;
    if (!(v408 & 0x40000000 | v395 & 1))
    {
      v561 = v546;
      v562 = v547;
      v563 = v548;
      *(_QWORD *)&v549 = 0x16160D0D16160D0DLL;
      v560 = (__int128)v545;
      v559 = v544;
      v554 = xmmword_22468ABE0;
      v555 = (__int128)xmmword_22468ABF0;
      *(_QWORD *)&v580[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v559, 7, 5, 6, (uint64_t)&v549, (uint64_t)&v554, (uint64_t)v580, COERCE_DOUBLE(0x1EF000001AFLL), xmmword_22468ABF0);
      v423 = (v404 & 0x40000000) == 0 && v422;
      if ((v447 & 1) == 0 && v423)
      {
        v556 = v546;
        v557 = v547;
        v558 = v548;
        *(_QWORD *)&v580[0] = 0x161616160D0D0D0DLL;
        v555 = (__int128)v545;
        v554 = v544;
        v549 = xmmword_22468AC00;
        v550 = (__int128)xmmword_22468AC10;
        v581[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v554, 7, 5, 6, (uint64_t)v580, (uint64_t)&v549, (uint64_t)v581, COERCE_DOUBLE(0x16F000001AFLL), xmmword_22468AC10);
      }
    }
    v424 = (v481 & 1) == 0 && v422;
    if (v424 && (v418 & 0x40000000) == 0)
    {
      v551 = v546;
      v552 = v547;
      v553 = v548;
      v581[0] = 0x16160D0D16160D0DLL;
      v550 = (__int128)v545;
      v549 = v544;
      v580[0] = xmmword_22468AC20;
      v580[1] = xmmword_22468AC30;
      v579 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v549, 7, 5, 6, (uint64_t)v581, (uint64_t)v580, (uint64_t)&v579, COERCE_DOUBLE(0x16F000001AFLL), xmmword_22468AC30);
    }
  }
  v514 = v441;
  *(_QWORD *)&v515 = v232;
  *(_QWORD *)&v574 = v488;
  *((_QWORD *)&v574 + 1) = v485;
  *(_QWORD *)&v575 = v477;
  v523 = v493;
  v522 = v492;
  v521 = v491;
  v519 = v489;
  v520 = v490;
  return sub_223E406B8((unsigned __int8 ***)&v514, &v574, &v519);
}

unint64_t sub_223E406B8(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  unsigned __int8 **v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  _BYTE **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  _BYTE **v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _BYTE **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  __int128 v78;
  __int128 v79;
  _BOOL4 v80;
  _BOOL4 v81;
  _BOOL4 v82;
  _BOOL4 v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  _BOOL4 v98;
  _BOOL4 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  _BOOL4 v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  _BOOL4 v135;
  _BOOL4 v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  _BOOL4 v154;
  _BOOL4 v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  _BOOL4 v188;
  _BOOL4 v189;
  _BOOL4 v190;
  _BOOL4 v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  unsigned int v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unint64_t v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unint64_t v209;
  unsigned int v210;
  unsigned int v211;
  _BOOL4 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  _BOOL4 v215;
  unsigned __int8 **v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  unsigned int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  _BOOL4 v266;
  _BOOL4 v267;
  _BOOL4 v268;
  _BOOL4 v269;
  _BOOL4 v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  _BOOL4 v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  _BOOL4 v293;
  _BOOL4 v294;
  _BOOL4 v295;
  _BOOL4 v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unint64_t v300;
  uint64_t v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  _BOOL4 v309;
  _BOOL4 v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  _BOOL4 v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  _BOOL4 v331;
  _BOOL4 v332;
  _BOOL4 v333;
  _BOOL4 v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unint64_t v339;
  uint64_t v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  _BOOL4 v346;
  _BOOL4 v347;
  _BOOL4 v348;
  _BOOL4 v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _BYTE *v353;
  unsigned int v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unint64_t v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  int v372;
  unsigned int v373;
  int v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  int v390;
  unsigned int v391;
  int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  int v398;
  unsigned int v399;
  int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  int v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unint64_t v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  _BOOL4 v425;
  _BOOL4 v426;
  _BOOL4 v427;
  _BOOL4 v428;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  __int128 v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  uint64_t v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned __int8 **v479;
  unsigned int v480;
  unsigned int v481;
  _QWORD *v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  uint64_t v487;
  _BYTE **v488;
  unsigned int v489;
  _BYTE **v490;
  unsigned int v491;
  unsigned int v492;
  unsigned __int8 **v493;
  uint64_t v494;
  unsigned int *v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  float32x4_t v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  uint64_t v586;
  _OWORD v587[2];
  _QWORD v588[3];

  v588[1] = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  v490 = *a1;
  v5 = *((_DWORD *)v4 + 360);
  v6 = ***a1;
  v482 = a2;
  if (***a1)
  {
    v7 = *((_DWORD *)v4 + 424);
    v8 = *((_DWORD *)v4 + 368);
    v9 = *((_DWORD *)v4 + 432);
    v10 = *((_DWORD *)v4 + 376);
    v494 = *a2;
    v473 = v9;
    if ((v9 & 0x40000000) == 0)
    {
LABEL_3:
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v5 & 0x20000000) != 0)
      v5 *= 4;
    v16 = *((_DWORD *)v4 + 424);
    if ((v16 & 0x20000000) != 0)
      v7 = 4 * v16;
    else
      v7 = *((_DWORD *)v4 + 424);
    v17 = *((_DWORD *)v4 + 368);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v4 + 368);
    v18 = *((_DWORD *)v4 + 432);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v4 + 432);
    v19 = *((_DWORD *)v4 + 376);
    if ((v19 & 0x10000000) != 0)
      v20 = 0x40000000;
    else
      v20 = 0x80000000;
    if ((v19 & 0x20000000) != 0)
      v10 = v20;
    else
      v10 = v19 & 0xCFFFFFFF;
    v494 = *a2;
    v473 = v9;
    if ((v9 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v486 = v8;
  v21 = (_BYTE **)a2[2];
  v22 = *(unsigned int *)(a2[1] + 16);
  v491 = v7;
  if ((v22 & 0x80000000) != 0)
  {
    v24 = v494 + 280;
  }
  else
  {
    v23 = *(_QWORD *)(v494 + 2328);
    if (v22 >= (*(_QWORD *)(v494 + 2336) - v23) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v23 = *(_QWORD *)(v494 + 2328);
      v9 = v473;
      v7 = v491;
    }
    v24 = v23 + (v22 << 11);
  }
  v25 = *(_DWORD *)(v24 + 1468);
  v26 = v25 & 0xCFFFFFFF;
  if ((v25 & 0x10000000) != 0)
    v27 = 0x40000000;
  else
    v27 = 0x80000000;
  if ((v25 & 0x20000000) != 0)
    v26 = v27;
  if (**v21)
    v28 = v25;
  else
    v28 = v26;
  v29 = *v482;
  v30 = (_BYTE **)v482[2];
  v31 = *(unsigned int *)(v482[1] + 16);
  if ((v31 & 0x80000000) != 0)
  {
    v33 = v29 + 280;
  }
  else
  {
    v32 = *(_QWORD *)(v29 + 2328);
    if (v31 >= (*(_QWORD *)(v29 + 2336) - v32) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v32 = *(_QWORD *)(v29 + 2328);
      v9 = v473;
      v7 = v491;
    }
    v33 = v32 + (v31 << 11);
  }
  v34 = *(_DWORD *)(v33 + 1724);
  v35 = v34 & 0xCFFFFFFF;
  if ((v34 & 0x10000000) != 0)
    v36 = 0x40000000;
  else
    v36 = 0x80000000;
  if ((v34 & 0x20000000) != 0)
    v35 = v36;
  if (**v30)
    v37 = v34;
  else
    v37 = v35;
  v38 = *v482;
  v39 = (_BYTE **)v482[2];
  v40 = *(unsigned int *)(v482[1] + 16);
  if ((v40 & 0x80000000) != 0)
  {
    v42 = v38 + 280;
  }
  else
  {
    v41 = *(_QWORD *)(v38 + 2328);
    if (v40 >= (*(_QWORD *)(v38 + 2336) - v41) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v41 = *(_QWORD *)(v38 + 2328);
      v9 = v473;
      v7 = v491;
    }
    v42 = v41 + (v40 << 11);
  }
  v43 = *(_DWORD *)(v42 + 1500);
  v44 = v43 & 0xCFFFFFFF;
  if ((v43 & 0x10000000) != 0)
    v45 = 0x40000000;
  else
    v45 = 0x80000000;
  if ((v43 & 0x20000000) != 0)
    v44 = v45;
  if (**v39)
    v46 = v43;
  else
    v46 = v44;
  v47 = *v482;
  v48 = (_BYTE **)v482[2];
  v49 = *(unsigned int *)(v482[1] + 16);
  if ((v49 & 0x80000000) != 0)
  {
    v51 = v10;
    v52 = v28;
    v53 = *(_DWORD *)(v47 + 2036);
    if (**v48)
      goto LABEL_69;
  }
  else
  {
    v50 = *(_QWORD *)(v47 + 2328);
    if (v49 >= (*(_QWORD *)(v47 + 2336) - v50) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v50 = *(_QWORD *)(v47 + 2328);
      v9 = v473;
      v7 = v491;
    }
    v51 = v10;
    v52 = v28;
    v53 = *(_DWORD *)(v50 + (v49 << 11) + 1756);
    if (**v48)
    {
LABEL_69:
      v54 = *v482;
      v55 = (_BYTE **)v482[2];
      v56 = *(unsigned int *)(v482[1] + 16);
      if ((v56 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v58 = v54 + 280;
      goto LABEL_83;
    }
  }
  if ((v53 & 0x10000000) != 0)
    v59 = 0x40000000;
  else
    v59 = 0x80000000;
  if ((v53 & 0x20000000) != 0)
    v53 = v59;
  else
    v53 &= 0xCFFFFFFF;
  v54 = *v482;
  v55 = (_BYTE **)v482[2];
  v56 = *(unsigned int *)(v482[1] + 16);
  if ((v56 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v57 = *(_QWORD *)(v54 + 2328);
  if (v56 >= (*(_QWORD *)(v54 + 2336) - v57) >> 11)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v57 = *(_QWORD *)(v54 + 2328);
      v9 = v473;
      v7 = v491;
      goto LABEL_73;
    }
LABEL_1240:
    abort();
  }
LABEL_73:
  v58 = v57 + (v56 << 11);
LABEL_83:
  v15 = (v52 >> 30) & 1;
  v14 = (v37 >> 30) & 1;
  v13 = (v46 >> 30) & 1;
  v12 = (v53 >> 30) & 1;
  v60 = *(_DWORD *)(v58 + 1532);
  v8 = v486;
  if (!**v55)
  {
    if ((v60 & 0x10000000) != 0)
      v61 = 0x40000000;
    else
      v61 = 0x80000000;
    if ((v60 & 0x20000000) != 0)
      v60 = v61;
    else
      v60 &= 0xCFFFFFFF;
  }
  v11 = (v60 >> 30) & 1;
  v4 = a1[2];
  a2 = v482;
  v490 = *a1;
  v494 = *v482;
  v6 = ***a1;
  v10 = v51;
LABEL_91:
  v448 = v5 >> 30;
  v487 = a2[1];
  v479 = (unsigned __int8 **)a2[2];
  v503 = a3[2];
  v504 = a3[3];
  v505 = a3[4];
  v501 = *a3;
  v502 = a3[1];
  v62 = *((_DWORD *)v4 + 361);
  if (v6)
  {
    v63 = *((_DWORD *)v4 + 425);
    v64 = *((_DWORD *)v4 + 369);
    v467 = *((_DWORD *)v4 + 433);
    v65 = *((_DWORD *)v4 + 377);
  }
  else
  {
    if ((v62 & 0x10000000) != 0)
      v66 = 0x40000000;
    else
      v66 = 0x80000000;
    if ((v62 & 0x20000000) != 0)
      v62 = v66;
    else
      v62 &= 0xCFFFFFFF;
    v67 = *((_DWORD *)v4 + 425);
    if ((v67 & 0x10000000) != 0)
      v68 = 0x40000000;
    else
      v68 = 0x80000000;
    if ((v67 & 0x20000000) != 0)
      v63 = v68;
    else
      v63 = v67 & 0xCFFFFFFF;
    v69 = *((_DWORD *)v4 + 369);
    if ((v69 & 0x10000000) != 0)
      v70 = 0x40000000;
    else
      v70 = 0x80000000;
    if ((v69 & 0x20000000) != 0)
      v64 = v70;
    else
      v64 = v69 & 0xCFFFFFFF;
    v71 = *((_DWORD *)v4 + 433);
    if ((v71 & 0x10000000) != 0)
      v72 = 0x40000000;
    else
      v72 = 0x80000000;
    if ((v71 & 0x20000000) != 0)
      v73 = v72;
    else
      v73 = v71 & 0xCFFFFFFF;
    v467 = v73;
    v74 = *((_DWORD *)v4 + 377);
    if ((v74 & 0x10000000) != 0)
      v65 = 0x40000000;
    else
      v65 = 0x80000000;
    if ((v74 & 0x20000000) == 0)
      v65 = v74 & 0xCFFFFFFF;
  }
  v75 = v8 >> 30;
  v76 = v7 >> 30;
  v77 = v10 >> 30;
  v433 = v62 >> 30;
  v458 = v64 >> 30;
  v463 = v63 >> 30;
  v437 = v65 >> 30;
  v513 = a3[2];
  v514 = a3[3];
  v515 = a3[4];
  v511 = *a3;
  v512 = a3[1];
  if ((v9 & 0x40000000) != 0)
  {
    v78 = a3[3];
    v528 = a3[2];
    v529 = v78;
    v530 = a3[4];
    v79 = *a3;
    v527 = a3[1];
    v526 = v79;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468AC40;
    v522 = (__int128)xmmword_22468AC50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 0, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F0000001B0), xmmword_22468AC50);
    if (!v12)
    {
      v523 = v513;
      v524 = v514;
      v525 = v515;
      v522 = v512;
      v521 = v511;
      *(_QWORD *)&v576 = 0x4040D0D04040D0DLL;
      v581 = xmmword_22468AC60;
      v582 = (__int128)xmmword_22468AC70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 0, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F0000001B0), xmmword_22468AC70);
      if (!(v14 | v76 & 1))
      {
        v583 = v513;
        v584 = v514;
        v585 = v515;
        *(_QWORD *)&v571 = 0x40404040D0D0D0DLL;
        v581 = v511;
        v582 = v512;
        v576 = xmmword_22468AC80;
        v577 = (__int128)xmmword_22468AC90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 0, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F0000001B0), xmmword_22468AC90);
        v80 = (v448 & 1) == 0 && (v13 | v75 & 1) == 0;
        if (!v15 && v80)
        {
          v578 = v513;
          v579 = v514;
          v580 = v515;
          v577 = v512;
          v576 = v511;
          *(_QWORD *)&v566 = 0x4040D0D04040D0DLL;
          v571 = xmmword_22468ACA0;
          v572 = (__int128)xmmword_22468ACB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 0, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x170000001B0), xmmword_22468ACB0);
        }
      }
      if (v11)
        v81 = 0;
      else
        v81 = (v13 | v75 & 1) == 0;
      if (v81 && (v77 & 1) == 0)
      {
        v573 = v513;
        v574 = v514;
        v575 = v515;
        *(_QWORD *)&v561 = 0x40404040D0D0D0DLL;
        v572 = v512;
        v571 = v511;
        v566 = xmmword_22468ACC0;
        v567 = (__int128)xmmword_22468ACD0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 0, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x170000001B0), xmmword_22468ACD0);
      }
    }
    if (((v76 | v463) & 1) == 0)
    {
      v568 = v513;
      v569 = v514;
      v570 = v515;
      v567 = v512;
      v566 = v511;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468ACE0;
      v562 = (__int128)xmmword_22468ACF0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 0, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F0000001B0), xmmword_22468ACF0);
      v82 = (v433 & 1) == 0 && ((v75 | v458) & 1) == 0;
      if ((v448 & 1) == 0 && v82)
      {
        v563 = v513;
        v564 = v514;
        v565 = v515;
        v562 = v512;
        v561 = v511;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468AD00;
        v557 = (__int128)xmmword_22468AD10;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 0, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x170000001B0), xmmword_22468AD10);
      }
    }
    v83 = (v77 & 1) == 0 && ((v75 | v458) & 1) == 0;
    v9 = v473;
    if (v83 && (v437 & 1) == 0)
    {
      v558 = v513;
      v559 = v514;
      v560 = v515;
      v557 = v512;
      v556 = v511;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468AD20;
      v552 = xmmword_22468AD30;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 0, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x170000001B0), xmmword_22468AD30);
      v9 = v473;
    }
  }
  v84 = *((_DWORD *)v4 + 362);
  if (**v490)
  {
    v85 = *((_DWORD *)v4 + 426);
    v86 = *((_DWORD *)v4 + 370);
    v87 = *((_DWORD *)v4 + 434);
    v88 = *((_DWORD *)v4 + 378);
  }
  else
  {
    if ((v84 & 0x10000000) != 0)
      v89 = 0x40000000;
    else
      v89 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v84 = v89;
    else
      v84 &= 0xCFFFFFFF;
    v90 = *((_DWORD *)v4 + 426);
    if ((v90 & 0x10000000) != 0)
      v91 = 0x40000000;
    else
      v91 = 0x80000000;
    if ((v90 & 0x20000000) != 0)
      v85 = v91;
    else
      v85 = v90 & 0xCFFFFFFF;
    v92 = *((_DWORD *)v4 + 370);
    if ((v92 & 0x10000000) != 0)
      v93 = 0x40000000;
    else
      v93 = 0x80000000;
    if ((v92 & 0x20000000) != 0)
      v86 = v93;
    else
      v86 = v92 & 0xCFFFFFFF;
    v94 = *((_DWORD *)v4 + 434);
    if ((v94 & 0x10000000) != 0)
      v95 = 0x40000000;
    else
      v95 = 0x80000000;
    if ((v94 & 0x20000000) != 0)
      v87 = v95;
    else
      v87 = v94 & 0xCFFFFFFF;
    v96 = *((_DWORD *)v4 + 378);
    if ((v96 & 0x10000000) != 0)
      v88 = 0x40000000;
    else
      v88 = 0x80000000;
    if ((v96 & 0x20000000) == 0)
      v88 = v96 & 0xCFFFFFFF;
  }
  v453 = v86 >> 30;
  v431 = v84 >> 30;
  v474 = v85 >> 30;
  v97 = v88 >> 30;
  if ((v467 & 0x40000000) != 0)
  {
    v98 = (v9 & 0x40000000) == 0;
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468AD40;
    v522 = (__int128)xmmword_22468AD50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 1, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F1000001B1), xmmword_22468AD50);
    if (v98)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468AD60;
      v582 = (__int128)xmmword_22468AD70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 1, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F1000001B1), xmmword_22468AD70);
      if (((v76 | v463) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468AD80;
        v577 = (__int128)xmmword_22468AD90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 1, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F1000001B1), xmmword_22468AD90);
        v99 = (v433 & 1) == 0 && ((v75 | v458) & 1) == 0;
        if ((v448 & 1) == 0 && v99)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468ADA0;
          v572 = (__int128)xmmword_22468ADB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 1, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x171000001B1), xmmword_22468ADB0);
        }
      }
      v100 = (v77 & 1) == 0 && ((v75 | v458) & 1) == 0;
      if (v100 && (v437 & 1) == 0)
      {
        v573 = v503;
        v574 = v504;
        v575 = v505;
        v572 = v502;
        v571 = v501;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468ADC0;
        v567 = (__int128)xmmword_22468ADD0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 1, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x171000001B1), xmmword_22468ADD0);
      }
    }
    if (((v463 | v474) & 1) == 0)
    {
      v568 = v503;
      v569 = v504;
      v570 = v505;
      v567 = v502;
      v566 = v501;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468ADE0;
      v562 = (__int128)xmmword_22468ADF0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 1, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F1000001B1), xmmword_22468ADF0);
      v101 = (v431 & 1) == 0 && ((v458 | v453) & 1) == 0;
      if ((v433 & 1) == 0 && v101)
      {
        v563 = v503;
        v564 = v504;
        v565 = v505;
        v562 = v502;
        v561 = v501;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468AE00;
        v557 = (__int128)xmmword_22468AE10;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 1, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x171000001B1), xmmword_22468AE10);
      }
    }
    v102 = (v437 & 1) == 0 && ((v458 | v453) & 1) == 0;
    if (v102 && (v97 & 1) == 0)
    {
      v558 = v503;
      v559 = v504;
      v560 = v505;
      v557 = v502;
      v556 = v501;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468AE20;
      v552 = xmmword_22468AE30;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 1, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x171000001B1), xmmword_22468AE30);
    }
  }
  v103 = *((_DWORD *)v4 + 363);
  if (**v490)
  {
    v104 = *((_DWORD *)v4 + 427);
    v105 = *((_DWORD *)v4 + 371);
    v106 = *((_DWORD *)v4 + 435);
    v107 = *((_DWORD *)v4 + 379);
  }
  else
  {
    if ((v103 & 0x10000000) != 0)
      v108 = 0x40000000;
    else
      v108 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v103 = v108;
    else
      v103 &= 0xCFFFFFFF;
    v109 = *((_DWORD *)v4 + 427);
    if ((v109 & 0x10000000) != 0)
      v110 = 0x40000000;
    else
      v110 = 0x80000000;
    if ((v109 & 0x20000000) != 0)
      v104 = v110;
    else
      v104 = v109 & 0xCFFFFFFF;
    v111 = *((_DWORD *)v4 + 371);
    if ((v111 & 0x10000000) != 0)
      v112 = 0x40000000;
    else
      v112 = 0x80000000;
    if ((v111 & 0x20000000) != 0)
      v105 = v112;
    else
      v105 = v111 & 0xCFFFFFFF;
    v113 = *((_DWORD *)v4 + 435);
    if ((v113 & 0x10000000) != 0)
      v114 = 0x40000000;
    else
      v114 = 0x80000000;
    if ((v113 & 0x20000000) != 0)
      v106 = v114;
    else
      v106 = v113 & 0xCFFFFFFF;
    v115 = *((_DWORD *)v4 + 379);
    if ((v115 & 0x10000000) != 0)
      v107 = 0x40000000;
    else
      v107 = 0x80000000;
    if ((v115 & 0x20000000) == 0)
      v107 = v115 & 0xCFFFFFFF;
  }
  v445 = v105 >> 30;
  v430 = v103 >> 30;
  v449 = v104 >> 30;
  v435 = v107 >> 30;
  if ((v87 & 0x40000000) != 0)
  {
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468AE40;
    v522 = (__int128)xmmword_22468AE50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 2, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F2000001B2), xmmword_22468AE50);
    if ((v467 & 0x40000000) == 0)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468AE60;
      v582 = (__int128)xmmword_22468AE70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 2, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F2000001B2), xmmword_22468AE70);
      if (((v463 | v474) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468AE80;
        v577 = (__int128)xmmword_22468AE90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 2, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F2000001B2), xmmword_22468AE90);
        v116 = (v431 & 1) == 0 && ((v458 | v453) & 1) == 0;
        if ((v433 & 1) == 0 && v116)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468AEA0;
          v572 = (__int128)xmmword_22468AEB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 2, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x172000001B2), xmmword_22468AEB0);
        }
      }
      v117 = (v437 & 1) == 0 && ((v458 | v453) & 1) == 0;
      if (v117 && (v97 & 1) == 0)
      {
        v573 = v503;
        v574 = v504;
        v575 = v505;
        v572 = v502;
        v571 = v501;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468AEC0;
        v567 = (__int128)xmmword_22468AED0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 2, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x172000001B2), xmmword_22468AED0);
      }
    }
    if (((v474 | v449) & 1) == 0)
    {
      v568 = v503;
      v569 = v504;
      v570 = v505;
      v567 = v502;
      v566 = v501;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468AEE0;
      v562 = (__int128)xmmword_22468AEF0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 2, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F2000001B2), xmmword_22468AEF0);
      v118 = (v430 & 1) == 0 && ((v453 | v445) & 1) == 0;
      if ((v431 & 1) == 0 && v118)
      {
        v563 = v503;
        v564 = v504;
        v565 = v505;
        v562 = v502;
        v561 = v501;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468AF00;
        v557 = (__int128)xmmword_22468AF10;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 2, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x172000001B2), xmmword_22468AF10);
      }
    }
    v119 = (v97 & 1) == 0 && ((v453 | v445) & 1) == 0;
    if (v119 && (v435 & 1) == 0)
    {
      v558 = v503;
      v559 = v504;
      v560 = v505;
      v557 = v502;
      v556 = v501;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468AF20;
      v552 = xmmword_22468AF30;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 2, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x172000001B2), xmmword_22468AF30);
    }
  }
  v120 = *((_DWORD *)v4 + 364);
  if (**v490)
  {
    v121 = *((_DWORD *)v4 + 428);
    v122 = *((_DWORD *)v4 + 372);
    v123 = *((_DWORD *)v4 + 436);
    v124 = *((_DWORD *)v4 + 380);
  }
  else
  {
    if ((v120 & 0x10000000) != 0)
      v125 = 0x40000000;
    else
      v125 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v120 = v125;
    else
      v120 &= 0xCFFFFFFF;
    v126 = *((_DWORD *)v4 + 428);
    if ((v126 & 0x10000000) != 0)
      v127 = 0x40000000;
    else
      v127 = 0x80000000;
    if ((v126 & 0x20000000) != 0)
      v121 = v127;
    else
      v121 = v126 & 0xCFFFFFFF;
    v128 = *((_DWORD *)v4 + 372);
    if ((v128 & 0x10000000) != 0)
      v129 = 0x40000000;
    else
      v129 = 0x80000000;
    if ((v128 & 0x20000000) != 0)
      v122 = v129;
    else
      v122 = v128 & 0xCFFFFFFF;
    v130 = *((_DWORD *)v4 + 436);
    if ((v130 & 0x10000000) != 0)
      v131 = 0x40000000;
    else
      v131 = 0x80000000;
    if ((v130 & 0x20000000) != 0)
      v123 = v131;
    else
      v123 = v130 & 0xCFFFFFFF;
    v132 = *((_DWORD *)v4 + 380);
    if ((v132 & 0x10000000) != 0)
      v124 = 0x40000000;
    else
      v124 = 0x80000000;
    if ((v132 & 0x20000000) == 0)
      v124 = v132 & 0xCFFFFFFF;
  }
  v434 = v120 >> 30;
  v464 = v122 >> 30;
  v468 = v121 >> 30;
  v438 = v124 >> 30;
  if ((v106 & 0x40000000) != 0)
  {
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468AF40;
    v522 = (__int128)xmmword_22468AF50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 3, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F3000001B3), xmmword_22468AF50);
    if ((v87 & 0x40000000) == 0)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468AF60;
      v582 = (__int128)xmmword_22468AF70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 3, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F3000001B3), xmmword_22468AF70);
      if (((v474 | v449) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468AF80;
        v577 = (__int128)xmmword_22468AF90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 3, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F3000001B3), xmmword_22468AF90);
        v133 = (v430 & 1) == 0 && ((v453 | v445) & 1) == 0;
        if ((v431 & 1) == 0 && v133)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468AFA0;
          v572 = (__int128)xmmword_22468AFB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 3, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x173000001B3), xmmword_22468AFB0);
        }
      }
      v134 = (v97 & 1) == 0 && ((v453 | v445) & 1) == 0;
      if (v134 && (v435 & 1) == 0)
      {
        v573 = v503;
        v574 = v504;
        v575 = v505;
        v572 = v502;
        v571 = v501;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468AFC0;
        v567 = (__int128)xmmword_22468AFD0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 3, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x173000001B3), xmmword_22468AFD0);
      }
    }
    if (((v449 | v468) & 1) == 0)
    {
      v568 = v503;
      v569 = v504;
      v570 = v505;
      v567 = v502;
      v566 = v501;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468AFE0;
      v562 = (__int128)xmmword_22468AFF0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 3, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F3000001B3), xmmword_22468AFF0);
      v135 = (v434 & 1) == 0 && ((v445 | v464) & 1) == 0;
      if ((v430 & 1) == 0 && v135)
      {
        v563 = v503;
        v564 = v504;
        v565 = v505;
        v562 = v502;
        v561 = v501;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B000;
        v557 = (__int128)xmmword_22468B010;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 3, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x173000001B3), xmmword_22468B010);
      }
    }
    v136 = (v435 & 1) == 0 && ((v445 | v464) & 1) == 0;
    if (v136 && (v438 & 1) == 0)
    {
      v558 = v503;
      v559 = v504;
      v560 = v505;
      v557 = v502;
      v556 = v501;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468B020;
      v552 = xmmword_22468B030;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 3, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x173000001B3), xmmword_22468B030);
    }
  }
  v137 = *((_DWORD *)v4 + 365);
  if (**v490)
  {
    v138 = *((_DWORD *)v4 + 429);
    v139 = *((_DWORD *)v4 + 373);
    v140 = *((_DWORD *)v4 + 437);
    v141 = *((_DWORD *)v4 + 381);
  }
  else
  {
    if ((v137 & 0x10000000) != 0)
      v142 = 0x40000000;
    else
      v142 = 0x80000000;
    if ((v137 & 0x20000000) != 0)
      v137 = v142;
    else
      v137 &= 0xCFFFFFFF;
    v143 = *((_DWORD *)v4 + 429);
    if ((v143 & 0x10000000) != 0)
      v144 = 0x40000000;
    else
      v144 = 0x80000000;
    if ((v143 & 0x20000000) != 0)
      v138 = v144;
    else
      v138 = v143 & 0xCFFFFFFF;
    v145 = *((_DWORD *)v4 + 373);
    if ((v145 & 0x10000000) != 0)
      v146 = 0x40000000;
    else
      v146 = 0x80000000;
    if ((v145 & 0x20000000) != 0)
      v139 = v146;
    else
      v139 = v145 & 0xCFFFFFFF;
    v147 = *((_DWORD *)v4 + 437);
    if ((v147 & 0x10000000) != 0)
      v148 = 0x40000000;
    else
      v148 = 0x80000000;
    if ((v147 & 0x20000000) != 0)
      v140 = v148;
    else
      v140 = v147 & 0xCFFFFFFF;
    v149 = *((_DWORD *)v4 + 381);
    if ((v149 & 0x10000000) != 0)
      v141 = 0x40000000;
    else
      v141 = 0x80000000;
    if ((v149 & 0x20000000) == 0)
      v141 = v149 & 0xCFFFFFFF;
  }
  v150 = v139 >> 30;
  v432 = v137 >> 30;
  v151 = v138 >> 30;
  v454 = v141 >> 30;
  if ((v123 & 0x40000000) != 0)
  {
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468B040;
    v522 = (__int128)xmmword_22468B050;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 4, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F4000001B4), xmmword_22468B050);
    if ((v106 & 0x40000000) == 0)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468B060;
      v582 = (__int128)xmmword_22468B070;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 4, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F4000001B4), xmmword_22468B070);
      if (((v449 | v468) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B080;
        v577 = (__int128)xmmword_22468B090;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 4, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F4000001B4), xmmword_22468B090);
        v152 = (v434 & 1) == 0 && ((v445 | v464) & 1) == 0;
        if ((v430 & 1) == 0 && v152)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B0A0;
          v572 = (__int128)xmmword_22468B0B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 4, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x174000001B4), xmmword_22468B0B0);
        }
      }
      v153 = (v435 & 1) == 0 && ((v445 | v464) & 1) == 0;
      if (v153 && (v438 & 1) == 0)
      {
        v573 = v503;
        v574 = v504;
        v575 = v505;
        v572 = v502;
        v571 = v501;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468B0C0;
        v567 = (__int128)xmmword_22468B0D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 4, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x174000001B4), xmmword_22468B0D0);
      }
    }
    if (((v468 | v151) & 1) == 0)
    {
      v568 = v503;
      v569 = v504;
      v570 = v505;
      v567 = v502;
      v566 = v501;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B0E0;
      v562 = (__int128)xmmword_22468B0F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 4, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F4000001B4), xmmword_22468B0F0);
      v154 = (v432 & 1) == 0 && ((v464 | v150) & 1) == 0;
      if ((v434 & 1) == 0 && v154)
      {
        v563 = v503;
        v564 = v504;
        v565 = v505;
        v562 = v502;
        v561 = v501;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B100;
        v557 = (__int128)xmmword_22468B110;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 4, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x174000001B4), xmmword_22468B110);
      }
    }
    v155 = (v438 & 1) == 0 && ((v464 | v150) & 1) == 0;
    if (v155 && (v454 & 1) == 0)
    {
      v558 = v503;
      v559 = v504;
      v560 = v505;
      v557 = v502;
      v556 = v501;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468B120;
      v552 = xmmword_22468B130;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 4, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x174000001B4), xmmword_22468B130);
    }
  }
  v156 = *((_DWORD *)v4 + 366);
  if (**v490)
  {
    v157 = *((_DWORD *)v4 + 430);
    v158 = *((_DWORD *)v4 + 374);
    v159 = *((_DWORD *)v4 + 438);
    v160 = *((_DWORD *)v4 + 382);
  }
  else
  {
    if ((v156 & 0x10000000) != 0)
      v161 = 0x40000000;
    else
      v161 = 0x80000000;
    if ((v156 & 0x20000000) != 0)
      v156 = v161;
    else
      v156 &= 0xCFFFFFFF;
    v162 = *((_DWORD *)v4 + 430);
    if ((v162 & 0x10000000) != 0)
      v163 = 0x40000000;
    else
      v163 = 0x80000000;
    if ((v162 & 0x20000000) != 0)
      v157 = v163;
    else
      v157 = v162 & 0xCFFFFFFF;
    v164 = *((_DWORD *)v4 + 374);
    if ((v164 & 0x10000000) != 0)
      v165 = 0x40000000;
    else
      v165 = 0x80000000;
    if ((v164 & 0x20000000) != 0)
      v158 = v165;
    else
      v158 = v164 & 0xCFFFFFFF;
    v166 = *((_DWORD *)v4 + 438);
    if ((v166 & 0x10000000) != 0)
      v167 = 0x40000000;
    else
      v167 = 0x80000000;
    if ((v166 & 0x20000000) != 0)
      v159 = v167;
    else
      v159 = v166 & 0xCFFFFFFF;
    v168 = *((_DWORD *)v4 + 382);
    if ((v168 & 0x10000000) != 0)
      v160 = 0x40000000;
    else
      v160 = 0x80000000;
    if ((v168 & 0x20000000) == 0)
      v160 = v168 & 0xCFFFFFFF;
  }
  v459 = v158 >> 30;
  v446 = v156 >> 30;
  v475 = v157 >> 30;
  v450 = v160 >> 30;
  v543 = v503;
  v544 = v504;
  v545 = v505;
  v542 = v502;
  v541 = v501;
  if ((v140 & 0x40000000) != 0)
  {
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468B140;
    v522 = (__int128)xmmword_22468B150;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 5, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F5000001B5), xmmword_22468B150);
    if ((v123 & 0x40000000) == 0)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468B160;
      v582 = (__int128)xmmword_22468B170;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 5, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F5000001B5), xmmword_22468B170);
      if (((v468 | v151) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B180;
        v577 = (__int128)xmmword_22468B190;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 5, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F5000001B5), xmmword_22468B190);
        v169 = (v432 & 1) == 0 && ((v464 | v150) & 1) == 0;
        if ((v434 & 1) == 0 && v169)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B1A0;
          v572 = (__int128)xmmword_22468B1B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 5, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x175000001B5), xmmword_22468B1B0);
        }
      }
      v170 = (v438 & 1) == 0 && ((v464 | v150) & 1) == 0;
      if (v170 && (v454 & 1) == 0)
      {
        v573 = v543;
        v574 = v544;
        v575 = v545;
        v572 = v542;
        v571 = v541;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468B1C0;
        v567 = (__int128)xmmword_22468B1D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 5, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x175000001B5), xmmword_22468B1D0);
      }
    }
    if (((v151 | v475) & 1) == 0)
    {
      v568 = v543;
      v569 = v544;
      v570 = v545;
      v567 = v542;
      v566 = v541;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B1E0;
      v562 = (__int128)xmmword_22468B1F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 5, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F5000001B5), xmmword_22468B1F0);
      v171 = (v446 & 1) == 0 && ((v150 | v459) & 1) == 0;
      if ((v432 & 1) == 0 && v171)
      {
        v563 = v543;
        v564 = v544;
        v565 = v545;
        v562 = v542;
        v561 = v541;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B200;
        v557 = (__int128)xmmword_22468B210;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 5, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x175000001B5), xmmword_22468B210);
      }
    }
    v172 = (v454 & 1) == 0 && ((v150 | v459) & 1) == 0;
    if (v172 && (v450 & 1) == 0)
    {
      v558 = v543;
      v559 = v544;
      v560 = v545;
      v557 = v542;
      v556 = v541;
      *(_QWORD *)&v546 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468B220;
      v552 = xmmword_22468B230;
      *(_QWORD *)&v536 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 5, 6, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v536, COERCE_DOUBLE(0x175000001B5), xmmword_22468B230);
    }
  }
  v538 = v503;
  v539 = v504;
  v540 = v505;
  v537 = v502;
  v536 = v501;
  v173 = *((_DWORD *)v4 + 367);
  if (**v490)
  {
    v174 = *((_DWORD *)v4 + 431);
    v175 = *((_DWORD *)v4 + 375);
    v176 = *((_DWORD *)v4 + 439);
    v177 = *((_DWORD *)v4 + 383);
  }
  else
  {
    if ((v173 & 0x10000000) != 0)
      v178 = 0x40000000;
    else
      v178 = 0x80000000;
    if ((v173 & 0x20000000) != 0)
      v173 = v178;
    else
      v173 &= 0xCFFFFFFF;
    v179 = *((_DWORD *)v4 + 431);
    if ((v179 & 0x10000000) != 0)
      v180 = 0x40000000;
    else
      v180 = 0x80000000;
    if ((v179 & 0x20000000) != 0)
      v174 = v180;
    else
      v174 = v179 & 0xCFFFFFFF;
    v181 = *((_DWORD *)v4 + 375);
    if ((v181 & 0x10000000) != 0)
      v182 = 0x40000000;
    else
      v182 = 0x80000000;
    if ((v181 & 0x20000000) != 0)
      v175 = v182;
    else
      v175 = v181 & 0xCFFFFFFF;
    v183 = *((_DWORD *)v4 + 439);
    if ((v183 & 0x10000000) != 0)
      v184 = 0x40000000;
    else
      v184 = 0x80000000;
    if ((v183 & 0x20000000) != 0)
      v176 = v184;
    else
      v176 = v183 & 0xCFFFFFFF;
    v185 = *((_DWORD *)v4 + 383);
    if ((v185 & 0x10000000) != 0)
      v177 = 0x40000000;
    else
      v177 = 0x80000000;
    if ((v185 & 0x20000000) == 0)
      v177 = v185 & 0xCFFFFFFF;
  }
  v186 = v175 >> 30;
  v469 = v173 >> 30;
  v187 = v174 >> 30;
  v492 = v177 >> 30;
  v548 = v503;
  v549 = v504;
  v550 = v505;
  v547 = v502;
  v546 = v501;
  if ((v159 & 0x40000000) != 0)
  {
    v528 = v503;
    v529 = v504;
    v530 = v505;
    v527 = v502;
    v526 = v501;
    *(_QWORD *)&v581 = 0xD0D0D0D0D0D0D0DLL;
    v521 = xmmword_22468B240;
    v522 = (__int128)xmmword_22468B250;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 6, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F6000001B6), xmmword_22468B250);
    if ((v140 & 0x40000000) == 0)
    {
      v523 = v503;
      v524 = v504;
      v525 = v505;
      v522 = v502;
      v521 = v501;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468B260;
      v582 = (__int128)xmmword_22468B270;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 6, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F6000001B6), xmmword_22468B270);
      if (((v151 | v475) & 1) == 0)
      {
        v583 = v503;
        v584 = v504;
        v585 = v505;
        v581 = v501;
        v582 = v502;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B280;
        v577 = (__int128)xmmword_22468B290;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 6, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F6000001B6), xmmword_22468B290);
        v188 = (v446 & 1) == 0 && ((v150 | v459) & 1) == 0;
        if ((v432 & 1) == 0 && v188)
        {
          v578 = v503;
          v579 = v504;
          v580 = v505;
          v577 = v502;
          v576 = v501;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B2A0;
          v572 = (__int128)xmmword_22468B2B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 6, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x176000001B6), xmmword_22468B2B0);
        }
      }
      v189 = (v454 & 1) == 0 && ((v150 | v459) & 1) == 0;
      if (v189 && (v450 & 1) == 0)
      {
        v573 = v548;
        v574 = v549;
        v575 = v550;
        v572 = v547;
        v571 = v546;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468B2C0;
        v567 = (__int128)xmmword_22468B2D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 6, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x176000001B6), xmmword_22468B2D0);
      }
    }
    if (((v475 | v187) & 1) == 0)
    {
      v568 = v548;
      v569 = v549;
      v570 = v550;
      v567 = v547;
      v566 = v546;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B2E0;
      v562 = (__int128)xmmword_22468B2F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 6, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F6000001B6), xmmword_22468B2F0);
      v190 = (v469 & 1) == 0 && ((v459 | v186) & 1) == 0;
      if ((v446 & 1) == 0 && v190)
      {
        v563 = v548;
        v564 = v549;
        v565 = v550;
        v562 = v547;
        v561 = v546;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B300;
        v557 = (__int128)xmmword_22468B310;
        *(_QWORD *)&v531 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 6, 6, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v531, COERCE_DOUBLE(0x176000001B6), xmmword_22468B310);
      }
    }
    v191 = (v450 & 1) == 0 && ((v459 | v186) & 1) == 0;
    if (v191 && (v492 & 1) == 0)
    {
      v558 = v548;
      v559 = v549;
      v560 = v550;
      v557 = v547;
      v556 = v546;
      *(_QWORD *)&v531 = 0xD0D0D0D0D0D0D0DLL;
      v551 = xmmword_22468B320;
      v552 = xmmword_22468B330;
      *(_QWORD *)&v587[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 6, 6, 6, (uint64_t)&v531, (uint64_t)&v551, (uint64_t)v587, COERCE_DOUBLE(0x176000001B6), xmmword_22468B330);
    }
  }
  v192 = *(unsigned int *)(v487 + 88);
  if ((v192 & 0x80000000) != 0)
  {
    v195 = *v479;
    v196 = *(_DWORD *)(v494 + 1720);
    v197 = **v479;
    if (**v479)
      goto LABEL_509;
  }
  else
  {
    v193 = *(_QWORD *)(v494 + 2328);
    if (v192 >= (*(_QWORD *)(v494 + 2336) - v193) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v193 = *(_QWORD *)(v494 + 2328);
    }
    v194 = v193 + (v192 << 11);
    v195 = *v479;
    v196 = *(_DWORD *)(v194 + 1440);
    v197 = **v479;
    if (**v479)
    {
LABEL_509:
      v198 = *(unsigned int *)(v487 + 88);
      if ((v198 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v200 = *(_DWORD *)(v494 + 1976);
      if (v197)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v196 & 0x10000000) != 0)
    v205 = 0x40000000;
  else
    v205 = 0x80000000;
  if ((v196 & 0x20000000) != 0)
    v196 = v205;
  else
    v196 &= 0xCFFFFFFF;
  v198 = *(unsigned int *)(v487 + 88);
  if ((v198 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v199 = *(_QWORD *)(v494 + 2328);
  if (v198 >= (*(_QWORD *)(v494 + 2336) - v199) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v199 = *(_QWORD *)(v494 + 2328);
    v195 = *v479;
    v197 = **v479;
  }
  v200 = *(_DWORD *)(v199 + (v198 << 11) + 1696);
  if (v197)
  {
LABEL_514:
    v201 = *(unsigned int *)(v487 + 88);
    if ((v201 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v203 = *(_DWORD *)(v494 + 1752);
    if (v197)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v200 & 0x10000000) != 0)
    v206 = 0x40000000;
  else
    v206 = 0x80000000;
  if ((v200 & 0x20000000) != 0)
    v200 = v206;
  else
    v200 &= 0xCFFFFFFF;
  v201 = *(unsigned int *)(v487 + 88);
  if ((v201 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v202 = *(_QWORD *)(v494 + 2328);
  if (v201 >= (*(_QWORD *)(v494 + 2336) - v202) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v202 = *(_QWORD *)(v494 + 2328);
    v195 = *v479;
    v197 = **v479;
  }
  v203 = *(_DWORD *)(v202 + (v201 << 11) + 1472);
  if (v197)
  {
LABEL_519:
    v204 = *(unsigned int *)(v487 + 88);
    if ((v204 & 0x80000000) != 0)
      goto LABEL_595;
    goto LABEL_545;
  }
LABEL_538:
  if ((v203 & 0x10000000) != 0)
    v207 = 0x40000000;
  else
    v207 = 0x80000000;
  if ((v203 & 0x20000000) != 0)
    v203 = v207;
  else
    v203 &= 0xCFFFFFFF;
  v204 = *(unsigned int *)(v487 + 88);
  if ((v204 & 0x80000000) != 0)
    goto LABEL_595;
LABEL_545:
  v208 = *(_QWORD *)(v494 + 2328);
  v209 = (*(_QWORD *)(v494 + 2336) - v208) >> 11;
  if (v209 > v204)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v195 = *v479;
  v204 = *(unsigned int *)(v487 + 88);
  if ((v204 & 0x80000000) != 0)
  {
LABEL_595:
    v210 = *(_DWORD *)(v494 + 1784);
    if (*v195)
      goto LABEL_559;
    goto LABEL_553;
  }
  v208 = *(_QWORD *)(v494 + 2328);
  v209 = (*(_QWORD *)(v494 + 2336) - v208) >> 11;
LABEL_549:
  if (v209 <= v204)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v208 = *(_QWORD *)(v494 + 2328);
    v195 = *v479;
  }
  v210 = *(_DWORD *)(v208 + (v204 << 11) + 1504);
  if (!*v195)
  {
LABEL_553:
    if ((v210 & 0x10000000) != 0)
      v211 = 0x40000000;
    else
      v211 = 0x80000000;
    if ((v210 & 0x20000000) != 0)
      v210 = v211;
    else
      v210 &= 0xCFFFFFFF;
  }
LABEL_559:
  v553 = v538;
  v554 = v539;
  v555 = v540;
  v552 = (float32x4_t)v537;
  v551 = v536;
  if ((v176 & 0x40000000) != 0)
  {
    v528 = v538;
    v529 = v539;
    v530 = v540;
    v527 = v537;
    v526 = v536;
    *(_QWORD *)&v581 = 0x161616160D0D0D0DLL;
    v521 = xmmword_22468B340;
    v522 = (__int128)xmmword_22468B350;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 7, 6, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F7000001B7), xmmword_22468B350);
    if ((v159 & 0x40000000) == 0)
    {
      v523 = v538;
      v524 = v539;
      v525 = v540;
      v522 = v537;
      v521 = v536;
      *(_QWORD *)&v576 = 0xD0D0D0D0D0D0D0DLL;
      v581 = xmmword_22468B360;
      v582 = (__int128)xmmword_22468B370;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 7, 6, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F7000001B7), xmmword_22468B370);
      if (((v475 | v187) & 1) == 0)
      {
        v583 = v538;
        v584 = v539;
        v585 = v540;
        v581 = v536;
        v582 = v537;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B380;
        v577 = (__int128)xmmword_22468B390;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 7, 6, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F7000001B7), xmmword_22468B390);
        v212 = (v469 & 1) == 0 && ((v459 | v186) & 1) == 0;
        if ((v446 & 1) == 0 && v212)
        {
          v578 = v538;
          v579 = v539;
          v580 = v540;
          v577 = v537;
          v576 = v536;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B3A0;
          v572 = (__int128)xmmword_22468B3B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 7, 6, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x177000001B7), xmmword_22468B3B0);
        }
      }
      v213 = (v450 & 1) == 0 && ((v459 | v186) & 1) == 0;
      if (v213 && (v492 & 1) == 0)
      {
        v573 = v553;
        v574 = v554;
        v575 = v555;
        v572 = (__int128)v552;
        v571 = v551;
        *(_QWORD *)&v561 = 0xD0D0D0D0D0D0D0DLL;
        v566 = xmmword_22468B3C0;
        v567 = (__int128)xmmword_22468B3D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 7, 6, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x177000001B7), xmmword_22468B3D0);
      }
    }
    if (!(v200 & 0x40000000 | v187 & 1))
    {
      v568 = v553;
      v569 = v554;
      v570 = v555;
      *(_QWORD *)&v556 = 0x16160D0D16160D0DLL;
      v567 = (__int128)v552;
      v566 = v551;
      v561 = xmmword_22468B3E0;
      v562 = (__int128)xmmword_22468B3F0;
      *(_QWORD *)&v531 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 7, 6, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v531, COERCE_DOUBLE(0x1F7000001B7), xmmword_22468B3F0);
      v214 = (v196 & 0x40000000) == 0 && (v203 & 0x40000000 | v186 & 1) == 0;
      if ((v469 & 1) == 0 && v214)
      {
        v563 = v553;
        v564 = v554;
        v565 = v555;
        *(_QWORD *)&v531 = 0x161616160D0D0D0DLL;
        v562 = (__int128)v552;
        v561 = v551;
        v556 = xmmword_22468B400;
        v557 = (__int128)xmmword_22468B410;
        *(_QWORD *)&v587[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 7, 6, 6, (uint64_t)&v531, (uint64_t)&v556, (uint64_t)v587, COERCE_DOUBLE(0x177000001B7), xmmword_22468B410);
      }
    }
    v215 = (v492 & 1) == 0 && (v203 & 0x40000000 | v186 & 1) == 0;
    if (v215 && (v210 & 0x40000000) == 0)
    {
      v558 = v553;
      v559 = v554;
      v560 = v555;
      *(_QWORD *)&v587[0] = 0x16160D0D16160D0DLL;
      v557 = (__int128)v552;
      v556 = v551;
      v531 = xmmword_22468B420;
      v532 = (__int128)xmmword_22468B430;
      v588[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 7, 6, 6, (uint64_t)v587, (uint64_t)&v531, (uint64_t)v588, COERCE_DOUBLE(0x177000001B7), xmmword_22468B430);
    }
  }
  v216 = a1[2];
  v217 = *v482;
  v493 = (unsigned __int8 **)v482[2];
  v495 = (unsigned int *)v482[1];
  v499 = a3[3];
  v500 = a3[4];
  v497 = a3[1];
  v498 = a3[2];
  v496 = *a3;
  v447 = *(_OWORD *)a1;
  v488 = *a1;
  v218 = *((_DWORD *)v216 + 368);
  if (***a1)
  {
    v470 = *((_DWORD *)v216 + 376);
    v476 = *((_DWORD *)v216 + 432);
    v483 = *((_DWORD *)v216 + 440);
    v219 = v495[16];
    if ((v219 & 0x80000000) == 0)
      goto LABEL_589;
LABEL_611:
    v222 = *v493;
    v223 = *(_DWORD *)(v217 + 1560);
    v224 = **v493;
    if (**v493)
      goto LABEL_593;
LABEL_612:
    if ((v223 & 0x10000000) != 0)
      v233 = 0x40000000;
    else
      v233 = 0x80000000;
    if ((v223 & 0x20000000) != 0)
      v223 = v233;
    else
      v223 &= 0xCFFFFFFF;
    if ((v483 & 0x40000000) == 0)
      goto LABEL_594;
    goto LABEL_619;
  }
  if ((v218 & 0x20000000) != 0)
    v218 *= 4;
  v227 = *((_DWORD *)v216 + 432);
  if ((v227 & 0x20000000) != 0)
    v228 = 4 * v227;
  else
    v228 = *((_DWORD *)v216 + 432);
  v229 = *((_DWORD *)v216 + 376);
  if ((v229 & 0x20000000) != 0)
    v229 *= 4;
  v470 = v229;
  v476 = v228;
  v230 = *((_DWORD *)v216 + 440);
  if ((v230 & 0x10000000) != 0)
    v231 = 0x40000000;
  else
    v231 = 0x80000000;
  if ((v230 & 0x20000000) != 0)
    v232 = v231;
  else
    v232 = v230 & 0xCFFFFFFF;
  v483 = v232;
  v219 = v495[16];
  if ((v219 & 0x80000000) != 0)
    goto LABEL_611;
LABEL_589:
  v220 = *(_QWORD *)(v217 + 2328);
  if (v219 >= (*(_QWORD *)(v217 + 2336) - v220) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v220 = *(_QWORD *)(v217 + 2328);
  }
  v221 = v220 + (v219 << 11);
  v222 = *v493;
  v223 = *(_DWORD *)(v221 + 1280);
  v224 = **v493;
  if (!**v493)
    goto LABEL_612;
LABEL_593:
  if ((v483 & 0x40000000) == 0)
  {
LABEL_594:
    v460 = 0;
    v225 = 0;
    v226 = 0;
    v442 = 0;
    goto LABEL_685;
  }
LABEL_619:
  v234 = v495[4];
  if ((v234 & 0x80000000) != 0)
  {
    v236 = *(_DWORD *)(v217 + 1780);
    if (v224)
      goto LABEL_624;
  }
  else
  {
    v235 = *(_QWORD *)(v217 + 2328);
    if (v234 >= (*(_QWORD *)(v217 + 2336) - v235) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v235 = *(_QWORD *)(v217 + 2328);
      v222 = *v493;
      v224 = **v493;
    }
    v236 = *(_DWORD *)(v235 + (v234 << 11) + 1500);
    if (v224)
    {
LABEL_624:
      v237 = v495[4];
      if ((v237 & 0x80000000) == 0)
        goto LABEL_625;
LABEL_652:
      v239 = *(_DWORD *)(v217 + 2036);
      if (v224)
        goto LABEL_629;
      goto LABEL_653;
    }
  }
  if ((v236 & 0x10000000) != 0)
    v249 = 0x40000000;
  else
    v249 = 0x80000000;
  if ((v236 & 0x20000000) != 0)
    v236 = v249;
  else
    v236 &= 0xCFFFFFFF;
  v237 = v495[4];
  if ((v237 & 0x80000000) != 0)
    goto LABEL_652;
LABEL_625:
  v238 = *(_QWORD *)(v217 + 2328);
  if (v237 >= (*(_QWORD *)(v217 + 2336) - v238) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v238 = *(_QWORD *)(v217 + 2328);
    v222 = *v493;
    v224 = **v493;
  }
  v239 = *(_DWORD *)(v238 + (v237 << 11) + 1756);
  if (v224)
  {
LABEL_629:
    v240 = v495[4];
    if ((v240 & 0x80000000) == 0)
      goto LABEL_630;
LABEL_660:
    v242 = *(_DWORD *)(v217 + 1812);
    if (v224)
      goto LABEL_634;
    goto LABEL_661;
  }
LABEL_653:
  if ((v239 & 0x10000000) != 0)
    v250 = 0x40000000;
  else
    v250 = 0x80000000;
  if ((v239 & 0x20000000) != 0)
    v239 = v250;
  else
    v239 &= 0xCFFFFFFF;
  v240 = v495[4];
  if ((v240 & 0x80000000) != 0)
    goto LABEL_660;
LABEL_630:
  v241 = *(_QWORD *)(v217 + 2328);
  if (v240 >= (*(_QWORD *)(v217 + 2336) - v241) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v241 = *(_QWORD *)(v217 + 2328);
    v222 = *v493;
    v224 = **v493;
  }
  v242 = *(_DWORD *)(v241 + (v240 << 11) + 1532);
  if (v224)
  {
LABEL_634:
    v243 = v495[4];
    if ((v243 & 0x80000000) == 0)
      goto LABEL_635;
LABEL_668:
    v245 = *(_DWORD *)(v217 + 2068);
    if (v224)
      goto LABEL_639;
LABEL_669:
    if ((v245 & 0x10000000) != 0)
      v252 = 0x40000000;
    else
      v252 = 0x80000000;
    if ((v245 & 0x20000000) != 0)
      v245 = v252;
    else
      v245 &= 0xCFFFFFFF;
    v246 = v495[7];
    if ((v246 & 0x80000000) == 0)
      goto LABEL_640;
    goto LABEL_676;
  }
LABEL_661:
  if ((v242 & 0x10000000) != 0)
    v251 = 0x40000000;
  else
    v251 = 0x80000000;
  if ((v242 & 0x20000000) != 0)
    v242 = v251;
  else
    v242 &= 0xCFFFFFFF;
  v243 = v495[4];
  if ((v243 & 0x80000000) != 0)
    goto LABEL_668;
LABEL_635:
  v244 = *(_QWORD *)(v217 + 2328);
  if (v243 >= (*(_QWORD *)(v217 + 2336) - v244) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v244 = *(_QWORD *)(v217 + 2328);
    v222 = *v493;
    v224 = **v493;
  }
  v245 = *(_DWORD *)(v244 + (v243 << 11) + 1788);
  if (!v224)
    goto LABEL_669;
LABEL_639:
  v246 = v495[7];
  if ((v246 & 0x80000000) == 0)
  {
LABEL_640:
    v247 = *(_QWORD *)(v217 + 2328);
    if (v246 >= (*(_QWORD *)(v217 + 2336) - v247) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v247 = *(_QWORD *)(v217 + 2328);
      v222 = *v493;
      v224 = **v493;
    }
    v248 = v247 + (v246 << 11);
    goto LABEL_677;
  }
LABEL_676:
  v248 = v217 + 280;
LABEL_677:
  v442 = (v236 >> 30) & 1;
  HIDWORD(v460) = (v239 >> 30) & 1;
  v226 = (v242 >> 30) & 1;
  v253 = *(_DWORD *)(v248 + 1308);
  v225 = (v245 >> 30) & 1;
  if (!v224)
  {
    if ((v253 & 0x10000000) != 0)
      v254 = 0x40000000;
    else
      v254 = 0x80000000;
    if ((v253 & 0x20000000) != 0)
      v253 = v254;
    else
      v253 &= 0xCFFFFFFF;
  }
  LODWORD(v460) = (v253 >> 30) & 1;
LABEL_685:
  v533 = v498;
  v534 = v499;
  v535 = v500;
  v532 = v497;
  v531 = v496;
  v255 = *((_DWORD *)v216 + 369);
  if (**v488)
  {
    v256 = *((_DWORD *)v216 + 433);
    v257 = *((_DWORD *)v216 + 377);
    v480 = *((_DWORD *)v216 + 441);
    v258 = v495[16];
    if ((v258 & 0x80000000) == 0)
      goto LABEL_687;
LABEL_1007:
    v455 = v218 >> 30;
    v260 = *(_DWORD *)(v217 + 1564);
    if (*v222)
      goto LABEL_697;
    goto LABEL_691;
  }
  if ((v255 & 0x10000000) != 0)
    v363 = 0x40000000;
  else
    v363 = 0x80000000;
  if ((v255 & 0x20000000) != 0)
    v255 = v363;
  else
    v255 &= 0xCFFFFFFF;
  v364 = *((_DWORD *)v216 + 433);
  if ((v364 & 0x10000000) != 0)
    v365 = 0x40000000;
  else
    v365 = 0x80000000;
  if ((v364 & 0x20000000) != 0)
    v256 = v365;
  else
    v256 = v364 & 0xCFFFFFFF;
  v366 = *((_DWORD *)v216 + 377);
  if ((v366 & 0x10000000) != 0)
    v367 = 0x40000000;
  else
    v367 = 0x80000000;
  if ((v366 & 0x20000000) != 0)
    v257 = v367;
  else
    v257 = v366 & 0xCFFFFFFF;
  v368 = *((_DWORD *)v216 + 441);
  if ((v368 & 0x10000000) != 0)
    v369 = 0x40000000;
  else
    v369 = 0x80000000;
  if ((v368 & 0x20000000) != 0)
    v370 = v369;
  else
    v370 = v368 & 0xCFFFFFFF;
  v480 = v370;
  v258 = v495[16];
  if ((v258 & 0x80000000) != 0)
    goto LABEL_1007;
LABEL_687:
  v259 = *(_QWORD *)(v217 + 2328);
  if (v258 >= (*(_QWORD *)(v217 + 2336) - v259) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v259 = *(_QWORD *)(v217 + 2328);
    v222 = *v493;
  }
  v455 = v218 >> 30;
  v260 = *(_DWORD *)(v259 + (v258 << 11) + 1284);
  if (!*v222)
  {
LABEL_691:
    if ((v260 & 0x10000000) != 0)
      v261 = 0x40000000;
    else
      v261 = 0x80000000;
    if ((v260 & 0x20000000) != 0)
      v260 = v261;
    else
      v260 &= 0xCFFFFFFF;
  }
LABEL_697:
  v451 = v255 >> 30;
  v262 = v470 >> 30;
  v263 = v476 >> 30;
  v264 = v223 >> 30;
  v471 = v257 >> 30;
  v477 = v256 >> 30;
  v265 = v260 >> 30;
  if ((v483 & 0x40000000) != 0)
  {
    v528 = v498;
    v529 = v499;
    v530 = v500;
    v527 = v497;
    v526 = v496;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B440;
    v522 = (__int128)xmmword_22468B450;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 0, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F8000001B8), xmmword_22468B450);
    if (!v225)
    {
      v523 = v498;
      v524 = v499;
      v525 = v500;
      *(_QWORD *)&v576 = 0x707101004040D0DLL;
      v522 = v497;
      v521 = v496;
      v581 = xmmword_22468B460;
      v582 = (__int128)xmmword_22468B470;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 0, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F8000001B8), xmmword_22468B470);
      v266 = (v226 | v262 & 1) == 0;
      if (!(HIDWORD(v460) | v263 & 1))
      {
        v583 = v498;
        v584 = v499;
        v585 = v500;
        *(_QWORD *)&v571 = 0x40404040D0D0D0DLL;
        v581 = v496;
        v582 = v497;
        v576 = xmmword_22468B480;
        v577 = (__int128)xmmword_22468B490;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 0, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F8000001B8), xmmword_22468B490);
        v267 = (v455 & 1) == 0 && v266;
        if (!v442 && v267)
        {
          v578 = v498;
          v579 = v499;
          v580 = v500;
          v577 = v497;
          v576 = v496;
          *(_QWORD *)&v566 = 0x4040D0D04040D0DLL;
          v571 = xmmword_22468B4A0;
          v572 = (__int128)xmmword_22468B4B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 0, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x178000001B8), xmmword_22468B4B0);
        }
      }
      if ((_DWORD)v460)
        v268 = 0;
      else
        v268 = v266;
      if (v268 && (v264 & 1) == 0)
      {
        v573 = v498;
        v574 = v499;
        v575 = v500;
        *(_QWORD *)&v561 = 0x707040410100D0DLL;
        v572 = v497;
        v571 = v496;
        v566 = xmmword_22468B4C0;
        v567 = (__int128)xmmword_22468B4D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 0, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x178000001B8), xmmword_22468B4D0);
      }
    }
    if (((v263 | v477) & 1) == 0)
    {
      v568 = v498;
      v569 = v499;
      v570 = v500;
      v567 = v497;
      v566 = v496;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B4E0;
      v562 = (__int128)xmmword_22468B4F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 0, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F8000001B8), xmmword_22468B4F0);
      v269 = (v451 & 1) == 0 && ((v262 | v471) & 1) == 0;
      if ((v455 & 1) == 0 && v269)
      {
        v563 = v498;
        v564 = v499;
        v565 = v500;
        v562 = v497;
        v561 = v496;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B500;
        v557 = (__int128)xmmword_22468B510;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 0, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x178000001B8), xmmword_22468B510);
      }
    }
    v270 = (v264 & 1) == 0 && ((v262 | v471) & 1) == 0;
    if (v270 && (v265 & 1) == 0)
    {
      v558 = v498;
      v559 = v499;
      v560 = v500;
      v557 = v497;
      v556 = v496;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468B520;
      v552 = xmmword_22468B530;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 0, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x178000001B8), xmmword_22468B530);
    }
  }
  v508 = v533;
  v509 = v534;
  v510 = v535;
  v506 = v531;
  v507 = v532;
  v271 = *((_DWORD *)v216 + 370);
  if (**v488)
  {
    v272 = *((_DWORD *)v216 + 434);
    v273 = *((_DWORD *)v216 + 378);
    v465 = *((_DWORD *)v216 + 442);
    v274 = v495[16];
    if ((v274 & 0x80000000) == 0)
      goto LABEL_727;
LABEL_1034:
    v276 = *(_DWORD *)(v217 + 1568);
    if (**v493)
      goto LABEL_737;
    goto LABEL_731;
  }
  if ((v271 & 0x10000000) != 0)
    v371 = 0x40000000;
  else
    v371 = 0x80000000;
  if ((v271 & 0x20000000) != 0)
    v271 = v371;
  else
    v271 &= 0xCFFFFFFF;
  v372 = *((_DWORD *)v216 + 434);
  if ((v372 & 0x10000000) != 0)
    v373 = 0x40000000;
  else
    v373 = 0x80000000;
  if ((v372 & 0x20000000) != 0)
    v272 = v373;
  else
    v272 = v372 & 0xCFFFFFFF;
  v374 = *((_DWORD *)v216 + 378);
  if ((v374 & 0x10000000) != 0)
    v375 = 0x40000000;
  else
    v375 = 0x80000000;
  if ((v374 & 0x20000000) != 0)
    v273 = v375;
  else
    v273 = v374 & 0xCFFFFFFF;
  v376 = *((_DWORD *)v216 + 442);
  if ((v376 & 0x10000000) != 0)
    v377 = 0x40000000;
  else
    v377 = 0x80000000;
  if ((v376 & 0x20000000) != 0)
    v378 = v377;
  else
    v378 = v376 & 0xCFFFFFFF;
  v465 = v378;
  v274 = v495[16];
  if ((v274 & 0x80000000) != 0)
    goto LABEL_1034;
LABEL_727:
  v275 = *(_QWORD *)(v217 + 2328);
  if (v274 >= (*(_QWORD *)(v217 + 2336) - v275) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v275 = *(_QWORD *)(v217 + 2328);
  }
  v276 = *(_DWORD *)(v275 + (v274 << 11) + 1288);
  if (!**v493)
  {
LABEL_731:
    if ((v276 & 0x10000000) != 0)
      v277 = 0x40000000;
    else
      v277 = 0x80000000;
    if ((v276 & 0x20000000) != 0)
      v276 = v277;
    else
      v276 &= 0xCFFFFFFF;
  }
LABEL_737:
  v443 = v271 >> 30;
  v278 = v272 >> 30;
  v279 = v273 >> 30;
  v461 = v276 >> 30;
  v518 = v533;
  v519 = v534;
  v520 = v535;
  v516 = v531;
  v517 = v532;
  if ((v480 & 0x40000000) != 0)
  {
    v528 = v533;
    v529 = v534;
    v530 = v535;
    v527 = v532;
    v526 = v531;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B540;
    v522 = (__int128)xmmword_22468B550;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 1, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1F9000001B9), xmmword_22468B550);
    if ((v483 & 0x40000000) == 0)
    {
      v523 = v533;
      v524 = v534;
      v525 = v535;
      v522 = v532;
      v521 = v531;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468B560;
      v582 = (__int128)xmmword_22468B570;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 1, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1F9000001B9), xmmword_22468B570);
      if (((v263 | v477) & 1) == 0)
      {
        v583 = v533;
        v584 = v534;
        v585 = v535;
        v581 = v531;
        v582 = v532;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B580;
        v577 = (__int128)xmmword_22468B590;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 1, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1F9000001B9), xmmword_22468B590);
        v280 = (v451 & 1) == 0 && ((v262 | v471) & 1) == 0;
        if ((v455 & 1) == 0 && v280)
        {
          v578 = v533;
          v579 = v534;
          v580 = v535;
          v577 = v532;
          v576 = v531;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B5A0;
          v572 = (__int128)xmmword_22468B5B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 1, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x179000001B9), xmmword_22468B5B0);
        }
      }
      v281 = (v264 & 1) == 0 && ((v262 | v471) & 1) == 0;
      if (v281 && (v265 & 1) == 0)
      {
        v573 = v518;
        v574 = v519;
        v575 = v520;
        v572 = v517;
        v571 = v516;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468B5C0;
        v567 = (__int128)xmmword_22468B5D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 1, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x179000001B9), xmmword_22468B5D0);
      }
    }
    if (((v477 | v278) & 1) == 0)
    {
      v568 = v518;
      v569 = v519;
      v570 = v520;
      v567 = v517;
      v566 = v516;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B5E0;
      v562 = (__int128)xmmword_22468B5F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 1, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1F9000001B9), xmmword_22468B5F0);
      v282 = (v271 & 0x40000000) == 0 && ((v471 | v279) & 1) == 0;
      if ((v451 & 1) == 0 && v282)
      {
        v563 = v518;
        v564 = v519;
        v565 = v520;
        v562 = v517;
        v561 = v516;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B600;
        v557 = (__int128)xmmword_22468B610;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 1, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x179000001B9), xmmword_22468B610);
      }
    }
    v283 = (v265 & 1) == 0 && ((v471 | v279) & 1) == 0;
    if (v283 && (v461 & 1) == 0)
    {
      v558 = v518;
      v559 = v519;
      v560 = v520;
      v557 = v517;
      v556 = v516;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468B620;
      v552 = xmmword_22468B630;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 1, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x179000001B9), xmmword_22468B630);
    }
  }
  v284 = *((_DWORD *)v216 + 371);
  if (**v488)
  {
    v285 = *((_DWORD *)v216 + 435);
    v286 = *((_DWORD *)v216 + 379);
    v484 = *((_DWORD *)v216 + 443);
    v287 = v495[16];
    if ((v287 & 0x80000000) == 0)
      goto LABEL_767;
LABEL_1061:
    v289 = *(_DWORD *)(v217 + 1572);
    if (**v493)
      goto LABEL_777;
    goto LABEL_771;
  }
  if ((v284 & 0x10000000) != 0)
    v379 = 0x40000000;
  else
    v379 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v284 = v379;
  else
    v284 &= 0xCFFFFFFF;
  v380 = *((_DWORD *)v216 + 435);
  if ((v380 & 0x10000000) != 0)
    v381 = 0x40000000;
  else
    v381 = 0x80000000;
  if ((v380 & 0x20000000) != 0)
    v285 = v381;
  else
    v285 = v380 & 0xCFFFFFFF;
  v382 = *((_DWORD *)v216 + 379);
  if ((v382 & 0x10000000) != 0)
    v383 = 0x40000000;
  else
    v383 = 0x80000000;
  if ((v382 & 0x20000000) != 0)
    v286 = v383;
  else
    v286 = v382 & 0xCFFFFFFF;
  v384 = *((_DWORD *)v216 + 443);
  if ((v384 & 0x10000000) != 0)
    v385 = 0x40000000;
  else
    v385 = 0x80000000;
  if ((v384 & 0x20000000) != 0)
    v386 = v385;
  else
    v386 = v384 & 0xCFFFFFFF;
  v484 = v386;
  v287 = v495[16];
  if ((v287 & 0x80000000) != 0)
    goto LABEL_1061;
LABEL_767:
  v288 = *(_QWORD *)(v217 + 2328);
  if (v287 >= (*(_QWORD *)(v217 + 2336) - v288) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v288 = *(_QWORD *)(v217 + 2328);
  }
  v289 = *(_DWORD *)(v288 + (v287 << 11) + 1292);
  if (!**v493)
  {
LABEL_771:
    if ((v289 & 0x10000000) != 0)
      v290 = 0x40000000;
    else
      v290 = 0x80000000;
    if ((v289 & 0x20000000) != 0)
      v289 = v290;
    else
      v289 &= 0xCFFFFFFF;
  }
LABEL_777:
  v439 = v284 >> 30;
  v291 = v285 >> 30;
  v292 = v286 >> 30;
  v456 = v289 >> 30;
  if ((v465 & 0x40000000) != 0)
  {
    v528 = v508;
    v529 = v509;
    v530 = v510;
    v527 = v507;
    v526 = v506;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B640;
    v522 = (__int128)xmmword_22468B650;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 2, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FA000001BALL), xmmword_22468B650);
    if ((v480 & 0x40000000) == 0)
    {
      v523 = v508;
      v524 = v509;
      v525 = v510;
      v522 = v507;
      v521 = v506;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468B660;
      v582 = (__int128)xmmword_22468B670;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 2, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FA000001BALL), xmmword_22468B670);
      if (((v477 | v278) & 1) == 0)
      {
        v583 = v508;
        v584 = v509;
        v585 = v510;
        v581 = v506;
        v582 = v507;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B680;
        v577 = (__int128)xmmword_22468B690;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 2, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FA000001BALL), xmmword_22468B690);
        v293 = (v443 & 1) == 0 && ((v471 | v279) & 1) == 0;
        if ((v451 & 1) == 0 && v293)
        {
          v578 = v508;
          v579 = v509;
          v580 = v510;
          v577 = v507;
          v576 = v506;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B6A0;
          v572 = (__int128)xmmword_22468B6B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 2, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17A000001BALL), xmmword_22468B6B0);
        }
      }
      v294 = (v265 & 1) == 0 && ((v471 | v279) & 1) == 0;
      if (v294 && (v461 & 1) == 0)
      {
        v573 = v508;
        v574 = v509;
        v575 = v510;
        v572 = v507;
        v571 = v506;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468B6C0;
        v567 = (__int128)xmmword_22468B6D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 2, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17A000001BALL), xmmword_22468B6D0);
      }
    }
    if (((v278 | v291) & 1) == 0)
    {
      v568 = v508;
      v569 = v509;
      v570 = v510;
      v567 = v507;
      v566 = v506;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B6E0;
      v562 = (__int128)xmmword_22468B6F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 2, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1FA000001BALL), xmmword_22468B6F0);
      v295 = (v439 & 1) == 0 && ((v279 | v292) & 1) == 0;
      if ((v443 & 1) == 0 && v295)
      {
        v563 = v508;
        v564 = v509;
        v565 = v510;
        v562 = v507;
        v561 = v506;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B700;
        v557 = (__int128)xmmword_22468B710;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 2, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x17A000001BALL), xmmword_22468B710);
      }
    }
    v296 = (v461 & 1) == 0 && ((v279 | v292) & 1) == 0;
    if (v296 && (v456 & 1) == 0)
    {
      v558 = v508;
      v559 = v509;
      v560 = v510;
      v557 = v507;
      v556 = v506;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468B720;
      v552 = xmmword_22468B730;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 2, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x17A000001BALL), xmmword_22468B730);
    }
  }
  v297 = *((_DWORD *)v216 + 372);
  if (**v488)
  {
    v298 = *((_DWORD *)v216 + 436);
    v299 = *((_DWORD *)v216 + 380);
    v481 = *((_DWORD *)v216 + 444);
    v300 = v495[16];
    if ((v300 & 0x80000000) == 0)
      goto LABEL_807;
LABEL_1088:
    v302 = *(_DWORD *)(v217 + 1576);
    if (**v493)
      goto LABEL_817;
    goto LABEL_811;
  }
  if ((v297 & 0x10000000) != 0)
    v387 = 0x40000000;
  else
    v387 = 0x80000000;
  if ((v297 & 0x20000000) != 0)
    v297 = v387;
  else
    v297 &= 0xCFFFFFFF;
  v388 = *((_DWORD *)v216 + 436);
  if ((v388 & 0x10000000) != 0)
    v389 = 0x40000000;
  else
    v389 = 0x80000000;
  if ((v388 & 0x20000000) != 0)
    v298 = v389;
  else
    v298 = v388 & 0xCFFFFFFF;
  v390 = *((_DWORD *)v216 + 380);
  if ((v390 & 0x10000000) != 0)
    v391 = 0x40000000;
  else
    v391 = 0x80000000;
  if ((v390 & 0x20000000) != 0)
    v299 = v391;
  else
    v299 = v390 & 0xCFFFFFFF;
  v392 = *((_DWORD *)v216 + 444);
  if ((v392 & 0x10000000) != 0)
    v393 = 0x40000000;
  else
    v393 = 0x80000000;
  if ((v392 & 0x20000000) != 0)
    v394 = v393;
  else
    v394 = v392 & 0xCFFFFFFF;
  v481 = v394;
  v300 = v495[16];
  if ((v300 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_807:
  v301 = *(_QWORD *)(v217 + 2328);
  if (v300 >= (*(_QWORD *)(v217 + 2336) - v301) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v301 = *(_QWORD *)(v217 + 2328);
  }
  v302 = *(_DWORD *)(v301 + (v300 << 11) + 1296);
  if (!**v493)
  {
LABEL_811:
    if ((v302 & 0x10000000) != 0)
      v303 = 0x40000000;
    else
      v303 = 0x80000000;
    if ((v302 & 0x20000000) != 0)
      v302 = v303;
    else
      v302 &= 0xCFFFFFFF;
  }
LABEL_817:
  v436 = v297 >> 30;
  v478 = v298 >> 30;
  v304 = v299 >> 30;
  v305 = v302 >> 30;
  if ((v484 & 0x40000000) != 0)
  {
    v528 = v508;
    v529 = v509;
    v530 = v510;
    v527 = v507;
    v526 = v506;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B740;
    v522 = (__int128)xmmword_22468B750;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 3, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FB000001BBLL), xmmword_22468B750);
    if ((v465 & 0x40000000) == 0)
    {
      v523 = v508;
      v524 = v509;
      v525 = v510;
      v522 = v507;
      v521 = v506;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468B760;
      v582 = (__int128)xmmword_22468B770;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 3, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FB000001BBLL), xmmword_22468B770);
      v306 = ((v279 | v292) & 1) == 0;
      if (((v278 | v291) & 1) == 0)
      {
        v583 = v508;
        v584 = v509;
        v585 = v510;
        v581 = v506;
        v582 = v507;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B780;
        v577 = (__int128)xmmword_22468B790;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 3, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FB000001BBLL), xmmword_22468B790);
        v307 = (v439 & 1) == 0 && v306;
        if ((v443 & 1) == 0 && v307)
        {
          v578 = v508;
          v579 = v509;
          v580 = v510;
          v577 = v507;
          v576 = v506;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B7A0;
          v572 = (__int128)xmmword_22468B7B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 3, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17B000001BBLL), xmmword_22468B7B0);
        }
      }
      v308 = (v461 & 1) == 0 && v306;
      if (v308 && (v456 & 1) == 0)
      {
        v573 = v508;
        v574 = v509;
        v575 = v510;
        v572 = v507;
        v571 = v506;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468B7C0;
        v567 = (__int128)xmmword_22468B7D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 3, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17B000001BBLL), xmmword_22468B7D0);
      }
    }
    if (((v291 | v478) & 1) == 0)
    {
      v568 = v508;
      v569 = v509;
      v570 = v510;
      v567 = v507;
      v566 = v506;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B7E0;
      v562 = (__int128)xmmword_22468B7F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 3, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1FB000001BBLL), xmmword_22468B7F0);
      v309 = (v436 & 1) == 0 && ((v292 | v304) & 1) == 0;
      if ((v439 & 1) == 0 && v309)
      {
        v563 = v508;
        v564 = v509;
        v565 = v510;
        v562 = v507;
        v561 = v506;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B800;
        v557 = (__int128)xmmword_22468B810;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 3, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x17B000001BBLL), xmmword_22468B810);
      }
    }
    v310 = (v456 & 1) == 0 && ((v292 | v304) & 1) == 0;
    if (v310 && (v305 & 1) == 0)
    {
      v558 = v508;
      v559 = v509;
      v560 = v510;
      v557 = v507;
      v556 = v506;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468B820;
      v552 = xmmword_22468B830;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 3, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x17B000001BBLL), xmmword_22468B830);
    }
  }
  v311 = *((_DWORD *)v216 + 373);
  if (**v488)
  {
    v312 = *((_DWORD *)v216 + 437);
    v313 = *((_DWORD *)v216 + 381);
    v472 = *((_DWORD *)v216 + 445);
    v314 = v495[16];
    if ((v314 & 0x80000000) == 0)
      goto LABEL_847;
LABEL_1115:
    v316 = *(_DWORD *)(v217 + 1580);
    if (**v493)
      goto LABEL_857;
    goto LABEL_851;
  }
  if ((v311 & 0x10000000) != 0)
    v395 = 0x40000000;
  else
    v395 = 0x80000000;
  if ((v311 & 0x20000000) != 0)
    v311 = v395;
  else
    v311 &= 0xCFFFFFFF;
  v396 = *((_DWORD *)v216 + 437);
  if ((v396 & 0x10000000) != 0)
    v397 = 0x40000000;
  else
    v397 = 0x80000000;
  if ((v396 & 0x20000000) != 0)
    v312 = v397;
  else
    v312 = v396 & 0xCFFFFFFF;
  v398 = *((_DWORD *)v216 + 381);
  if ((v398 & 0x10000000) != 0)
    v399 = 0x40000000;
  else
    v399 = 0x80000000;
  if ((v398 & 0x20000000) != 0)
    v313 = v399;
  else
    v313 = v398 & 0xCFFFFFFF;
  v400 = *((_DWORD *)v216 + 445);
  if ((v400 & 0x10000000) != 0)
    v401 = 0x40000000;
  else
    v401 = 0x80000000;
  if ((v400 & 0x20000000) != 0)
    v402 = v401;
  else
    v402 = v400 & 0xCFFFFFFF;
  v472 = v402;
  v314 = v495[16];
  if ((v314 & 0x80000000) != 0)
    goto LABEL_1115;
LABEL_847:
  v315 = *(_QWORD *)(v217 + 2328);
  if (v314 >= (*(_QWORD *)(v217 + 2336) - v315) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v315 = *(_QWORD *)(v217 + 2328);
  }
  v316 = *(_DWORD *)(v315 + (v314 << 11) + 1300);
  if (!**v493)
  {
LABEL_851:
    if ((v316 & 0x10000000) != 0)
      v317 = 0x40000000;
    else
      v317 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v316 = v317;
    else
      v316 &= 0xCFFFFFFF;
  }
LABEL_857:
  v444 = v311 >> 30;
  v318 = v312 >> 30;
  v319 = v313 >> 30;
  v452 = v316 >> 30;
  if ((v481 & 0x40000000) != 0)
  {
    v528 = v508;
    v529 = v509;
    v530 = v510;
    v527 = v507;
    v526 = v506;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B840;
    v522 = (__int128)xmmword_22468B850;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 4, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FC000001BCLL), xmmword_22468B850);
    if ((v484 & 0x40000000) == 0)
    {
      v523 = v508;
      v524 = v509;
      v525 = v510;
      v522 = v507;
      v521 = v506;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468B860;
      v582 = (__int128)xmmword_22468B870;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 4, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FC000001BCLL), xmmword_22468B870);
      if (((v291 | v478) & 1) == 0)
      {
        v583 = v508;
        v584 = v509;
        v585 = v510;
        v581 = v506;
        v582 = v507;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B880;
        v577 = (__int128)xmmword_22468B890;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 4, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FC000001BCLL), xmmword_22468B890);
        v320 = (v436 & 1) == 0 && ((v292 | v304) & 1) == 0;
        if ((v439 & 1) == 0 && v320)
        {
          v578 = v508;
          v579 = v509;
          v580 = v510;
          v577 = v507;
          v576 = v506;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B8A0;
          v572 = (__int128)xmmword_22468B8B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 4, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17C000001BCLL), xmmword_22468B8B0);
        }
      }
      v321 = (v456 & 1) == 0 && ((v292 | v304) & 1) == 0;
      if (v321 && (v305 & 1) == 0)
      {
        v573 = v508;
        v574 = v509;
        v575 = v510;
        v572 = v507;
        v571 = v506;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468B8C0;
        v567 = (__int128)xmmword_22468B8D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 4, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17C000001BCLL), xmmword_22468B8D0);
      }
    }
    if (((v478 | v318) & 1) == 0)
    {
      v568 = v508;
      v569 = v509;
      v570 = v510;
      v567 = v507;
      v566 = v506;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B8E0;
      v562 = (__int128)xmmword_22468B8F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 4, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1FC000001BCLL), xmmword_22468B8F0);
      v322 = (v311 & 0x40000000) == 0 && ((v304 | v319) & 1) == 0;
      if ((v436 & 1) == 0 && v322)
      {
        v563 = v508;
        v564 = v509;
        v565 = v510;
        v562 = v507;
        v561 = v506;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468B900;
        v557 = (__int128)xmmword_22468B910;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 4, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x17C000001BCLL), xmmword_22468B910);
      }
    }
    v323 = (v305 & 1) == 0 && ((v304 | v319) & 1) == 0;
    if (v323 && (v452 & 1) == 0)
    {
      v558 = v508;
      v559 = v509;
      v560 = v510;
      v557 = v507;
      v556 = v506;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468B920;
      v552 = xmmword_22468B930;
      *(_QWORD *)&v541 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 4, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v541, COERCE_DOUBLE(0x17C000001BCLL), xmmword_22468B930);
    }
  }
  v324 = *((_DWORD *)v216 + 374);
  if (**v488)
  {
    v325 = *((_DWORD *)v216 + 438);
    v326 = *((_DWORD *)v216 + 382);
    v485 = *((_DWORD *)v216 + 446);
    v327 = v495[16];
    if ((v327 & 0x80000000) == 0)
      goto LABEL_887;
LABEL_1142:
    v329 = *(_DWORD *)(v217 + 1584);
    if (**v493)
      goto LABEL_897;
    goto LABEL_891;
  }
  if ((v324 & 0x10000000) != 0)
    v403 = 0x40000000;
  else
    v403 = 0x80000000;
  if ((v324 & 0x20000000) != 0)
    v324 = v403;
  else
    v324 &= 0xCFFFFFFF;
  v404 = *((_DWORD *)v216 + 438);
  if ((v404 & 0x10000000) != 0)
    v405 = 0x40000000;
  else
    v405 = 0x80000000;
  if ((v404 & 0x20000000) != 0)
    v325 = v405;
  else
    v325 = v404 & 0xCFFFFFFF;
  v406 = *((_DWORD *)v216 + 382);
  if ((v406 & 0x10000000) != 0)
    v407 = 0x40000000;
  else
    v407 = 0x80000000;
  if ((v406 & 0x20000000) != 0)
    v326 = v407;
  else
    v326 = v406 & 0xCFFFFFFF;
  v408 = *((_DWORD *)v216 + 446);
  if ((v408 & 0x10000000) != 0)
    v409 = 0x40000000;
  else
    v409 = 0x80000000;
  if ((v408 & 0x20000000) != 0)
    v410 = v409;
  else
    v410 = v408 & 0xCFFFFFFF;
  v485 = v410;
  v327 = v495[16];
  if ((v327 & 0x80000000) != 0)
    goto LABEL_1142;
LABEL_887:
  v328 = *(_QWORD *)(v217 + 2328);
  if (v327 >= (*(_QWORD *)(v217 + 2336) - v328) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v328 = *(_QWORD *)(v217 + 2328);
  }
  v329 = *(_DWORD *)(v328 + (v327 << 11) + 1304);
  if (!**v493)
  {
LABEL_891:
    if ((v329 & 0x10000000) != 0)
      v330 = 0x40000000;
    else
      v330 = 0x80000000;
    if ((v329 & 0x20000000) != 0)
      v329 = v330;
    else
      v329 &= 0xCFFFFFFF;
  }
LABEL_897:
  v440 = v324 >> 30;
  v462 = v326 >> 30;
  v466 = v325 >> 30;
  v457 = v329 >> 30;
  v543 = v508;
  v544 = v509;
  v545 = v510;
  v542 = v507;
  v541 = v506;
  if ((v472 & 0x40000000) != 0)
  {
    v528 = v508;
    v529 = v509;
    v530 = v510;
    v527 = v507;
    v526 = v506;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468B940;
    v522 = (__int128)xmmword_22468B950;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 5, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FD000001BDLL), xmmword_22468B950);
    if ((v481 & 0x40000000) == 0)
    {
      v523 = v508;
      v524 = v509;
      v525 = v510;
      v522 = v507;
      v521 = v506;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468B960;
      v582 = (__int128)xmmword_22468B970;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 5, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FD000001BDLL), xmmword_22468B970);
      if (((v478 | v318) & 1) == 0)
      {
        v583 = v508;
        v584 = v509;
        v585 = v510;
        v581 = v506;
        v582 = v507;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468B980;
        v577 = (__int128)xmmword_22468B990;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 5, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FD000001BDLL), xmmword_22468B990);
        v331 = (v444 & 1) == 0 && ((v304 | v319) & 1) == 0;
        if ((v436 & 1) == 0 && v331)
        {
          v578 = v508;
          v579 = v509;
          v580 = v510;
          v577 = v507;
          v576 = v506;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468B9A0;
          v572 = (__int128)xmmword_22468B9B0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 5, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17D000001BDLL), xmmword_22468B9B0);
        }
      }
      v332 = (v305 & 1) == 0 && ((v304 | v319) & 1) == 0;
      if (v332 && (v452 & 1) == 0)
      {
        v573 = v543;
        v574 = v544;
        v575 = v545;
        v572 = v542;
        v571 = v541;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468B9C0;
        v567 = (__int128)xmmword_22468B9D0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 5, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17D000001BDLL), xmmword_22468B9D0);
      }
    }
    if (((v318 | v466) & 1) == 0)
    {
      v568 = v543;
      v569 = v544;
      v570 = v545;
      v567 = v542;
      v566 = v541;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468B9E0;
      v562 = (__int128)xmmword_22468B9F0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 5, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1FD000001BDLL), xmmword_22468B9F0);
      v333 = (v324 & 0x40000000) == 0 && ((v319 | v462) & 1) == 0;
      if ((v444 & 1) == 0 && v333)
      {
        v563 = v543;
        v564 = v544;
        v565 = v545;
        v562 = v542;
        v561 = v541;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468BA00;
        v557 = (__int128)xmmword_22468BA10;
        *(_QWORD *)&v546 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 5, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)&v546, COERCE_DOUBLE(0x17D000001BDLL), xmmword_22468BA10);
      }
    }
    v334 = (v452 & 1) == 0 && ((v319 | v462) & 1) == 0;
    if (v334 && (v457 & 1) == 0)
    {
      v558 = v543;
      v559 = v544;
      v560 = v545;
      v557 = v542;
      v556 = v541;
      *(_QWORD *)&v546 = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468BA20;
      v552 = xmmword_22468BA30;
      *(_QWORD *)&v536 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 5, 7, 6, (uint64_t)&v546, (uint64_t)&v551, (uint64_t)&v536, COERCE_DOUBLE(0x17D000001BDLL), xmmword_22468BA30);
    }
  }
  v538 = v508;
  v539 = v509;
  v540 = v510;
  v537 = v507;
  v536 = v506;
  v335 = *((_DWORD *)v216 + 375);
  if (**v488)
  {
    v336 = *((_DWORD *)v216 + 439);
    v337 = *((_DWORD *)v216 + 383);
    v338 = *((_DWORD *)v216 + 447);
    v339 = v495[16];
    if ((v339 & 0x80000000) == 0)
      goto LABEL_927;
LABEL_1169:
    v341 = *(_DWORD *)(v217 + 1588);
    if (**v493)
      goto LABEL_937;
    goto LABEL_931;
  }
  if ((v335 & 0x10000000) != 0)
    v411 = 0x40000000;
  else
    v411 = 0x80000000;
  if ((v335 & 0x20000000) != 0)
    v335 = v411;
  else
    v335 &= 0xCFFFFFFF;
  v412 = *((_DWORD *)v216 + 439);
  if ((v412 & 0x10000000) != 0)
    v413 = 0x40000000;
  else
    v413 = 0x80000000;
  if ((v412 & 0x20000000) != 0)
    v336 = v413;
  else
    v336 = v412 & 0xCFFFFFFF;
  v414 = *((_DWORD *)v216 + 383);
  if ((v414 & 0x10000000) != 0)
    v415 = 0x40000000;
  else
    v415 = 0x80000000;
  if ((v414 & 0x20000000) != 0)
    v337 = v415;
  else
    v337 = v414 & 0xCFFFFFFF;
  v416 = *((_DWORD *)v216 + 447);
  if ((v416 & 0x10000000) != 0)
    v417 = 0x40000000;
  else
    v417 = 0x80000000;
  if ((v416 & 0x20000000) != 0)
    v338 = v417;
  else
    v338 = v416 & 0xCFFFFFFF;
  v339 = v495[16];
  if ((v339 & 0x80000000) != 0)
    goto LABEL_1169;
LABEL_927:
  v340 = *(_QWORD *)(v217 + 2328);
  if (v339 >= (*(_QWORD *)(v217 + 2336) - v340) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v340 = *(_QWORD *)(v217 + 2328);
  }
  v341 = *(_DWORD *)(v340 + (v339 << 11) + 1308);
  if (!**v493)
  {
LABEL_931:
    if ((v341 & 0x10000000) != 0)
      v342 = 0x40000000;
    else
      v342 = 0x80000000;
    if ((v341 & 0x20000000) != 0)
      v341 = v342;
    else
      v341 &= 0xCFFFFFFF;
  }
LABEL_937:
  v489 = v335 >> 30;
  v343 = v336 >> 30;
  v344 = v337 >> 30;
  v345 = v341 >> 30;
  v548 = v508;
  v549 = v509;
  v550 = v510;
  v547 = v507;
  v546 = v506;
  if ((v485 & 0x40000000) != 0)
  {
    v528 = v508;
    v529 = v509;
    v530 = v510;
    v527 = v507;
    v526 = v506;
    *(_QWORD *)&v581 = 0x10100D0D10100D0DLL;
    v521 = xmmword_22468BA40;
    v522 = (__int128)xmmword_22468BA50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 6, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FE000001BELL), xmmword_22468BA50);
    if ((v472 & 0x40000000) == 0)
    {
      v523 = v508;
      v524 = v509;
      v525 = v510;
      v522 = v507;
      v521 = v506;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v581 = xmmword_22468BA60;
      v582 = (__int128)xmmword_22468BA70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 6, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FE000001BELL), xmmword_22468BA70);
      if (((v318 | v466) & 1) == 0)
      {
        v583 = v508;
        v584 = v509;
        v585 = v510;
        v581 = v506;
        v582 = v507;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468BA80;
        v577 = (__int128)xmmword_22468BA90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 6, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FE000001BELL), xmmword_22468BA90);
        v346 = (v440 & 1) == 0 && ((v319 | v462) & 1) == 0;
        if ((v444 & 1) == 0 && v346)
        {
          v578 = v508;
          v579 = v509;
          v580 = v510;
          v577 = v507;
          v576 = v506;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468BAA0;
          v572 = (__int128)xmmword_22468BAB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 6, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17E000001BELL), xmmword_22468BAB0);
        }
      }
      v347 = (v452 & 1) == 0 && ((v319 | v462) & 1) == 0;
      if (v347 && (v457 & 1) == 0)
      {
        v573 = v548;
        v574 = v549;
        v575 = v550;
        v572 = v547;
        v571 = v546;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v566 = xmmword_22468BAC0;
        v567 = (__int128)xmmword_22468BAD0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 6, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17E000001BELL), xmmword_22468BAD0);
      }
    }
    if (((v466 | v343) & 1) == 0)
    {
      v568 = v548;
      v569 = v549;
      v570 = v550;
      v567 = v547;
      v566 = v546;
      *(_QWORD *)&v556 = 0xD0D0D0D0D0D0D0DLL;
      v561 = xmmword_22468BAE0;
      v562 = (__int128)xmmword_22468BAF0;
      *(_QWORD *)&v551 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 6, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)&v551, COERCE_DOUBLE(0x1FE000001BELL), xmmword_22468BAF0);
      v348 = (v335 & 0x40000000) == 0 && ((v462 | v344) & 1) == 0;
      if ((v440 & 1) == 0 && v348)
      {
        v563 = v548;
        v564 = v549;
        v565 = v550;
        v562 = v547;
        v561 = v546;
        *(_QWORD *)&v551 = 0xD0D0D0D0D0D0D0DLL;
        v556 = xmmword_22468BB00;
        v557 = (__int128)xmmword_22468BB10;
        *(_QWORD *)&v587[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 6, 7, 6, (uint64_t)&v551, (uint64_t)&v556, (uint64_t)v587, COERCE_DOUBLE(0x17E000001BELL), xmmword_22468BB10);
      }
    }
    v349 = (v457 & 1) == 0 && ((v462 | v344) & 1) == 0;
    if (v349 && (v345 & 1) == 0)
    {
      v558 = v548;
      v559 = v549;
      v560 = v550;
      v557 = v547;
      v556 = v546;
      *(_QWORD *)&v587[0] = 0x101010100D0D0D0DLL;
      v551 = xmmword_22468BB20;
      v552 = xmmword_22468BB30;
      v588[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 6, 7, 6, (uint64_t)v587, (uint64_t)&v551, (uint64_t)v588, COERCE_DOUBLE(0x17E000001BELL), xmmword_22468BB30);
    }
  }
  v350 = v495[22];
  if ((v350 & 0x80000000) != 0)
  {
    v353 = *v493;
    v354 = *(_DWORD *)(v217 + 1752);
    v355 = **v493;
    if (**v493)
      goto LABEL_970;
  }
  else
  {
    v351 = *(_QWORD *)(v217 + 2328);
    if (v350 >= (*(_QWORD *)(v217 + 2336) - v351) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v351 = *(_QWORD *)(v217 + 2328);
    }
    v352 = v351 + (v350 << 11);
    v353 = *v493;
    v354 = *(_DWORD *)(v352 + 1472);
    v355 = **v493;
    if (**v493)
    {
LABEL_970:
      v356 = v495[22];
      if ((v356 & 0x80000000) == 0)
        goto LABEL_971;
LABEL_1179:
      v358 = *(_DWORD *)(v217 + 2008);
      if (v355)
        goto LABEL_975;
      goto LABEL_1180;
    }
  }
  if ((v354 & 0x10000000) != 0)
    v418 = 0x40000000;
  else
    v418 = 0x80000000;
  if ((v354 & 0x20000000) != 0)
    v354 = v418;
  else
    v354 &= 0xCFFFFFFF;
  v356 = v495[22];
  if ((v356 & 0x80000000) != 0)
    goto LABEL_1179;
LABEL_971:
  v357 = *(_QWORD *)(v217 + 2328);
  if (v356 >= (*(_QWORD *)(v217 + 2336) - v357) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v357 = *(_QWORD *)(v217 + 2328);
    v353 = *v493;
    v355 = **v493;
  }
  v358 = *(_DWORD *)(v357 + (v356 << 11) + 1728);
  if (v355)
  {
LABEL_975:
    v359 = v495[22];
    if ((v359 & 0x80000000) == 0)
      goto LABEL_976;
LABEL_1187:
    v361 = *(_DWORD *)(v217 + 1784);
    if (v355)
      goto LABEL_980;
LABEL_1188:
    if ((v361 & 0x10000000) != 0)
      v420 = 0x40000000;
    else
      v420 = 0x80000000;
    if ((v361 & 0x20000000) != 0)
      v361 = v420;
    else
      v361 &= 0xCFFFFFFF;
    v362 = v495[22];
    if ((v362 & 0x80000000) != 0)
      goto LABEL_1198;
    goto LABEL_1195;
  }
LABEL_1180:
  if ((v358 & 0x10000000) != 0)
    v419 = 0x40000000;
  else
    v419 = 0x80000000;
  if ((v358 & 0x20000000) != 0)
    v358 = v419;
  else
    v358 &= 0xCFFFFFFF;
  v359 = v495[22];
  if ((v359 & 0x80000000) != 0)
    goto LABEL_1187;
LABEL_976:
  v360 = *(_QWORD *)(v217 + 2328);
  if (v359 >= (*(_QWORD *)(v217 + 2336) - v360) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v360 = *(_QWORD *)(v217 + 2328);
    v353 = *v493;
    v355 = **v493;
  }
  v361 = *(_DWORD *)(v360 + (v359 << 11) + 1504);
  if (!v355)
    goto LABEL_1188;
LABEL_980:
  v362 = v495[22];
  if ((v362 & 0x80000000) != 0)
    goto LABEL_1198;
LABEL_1195:
  if (v362 >= (uint64_t)(*(_QWORD *)(v217 + 2336) - *(_QWORD *)(v217 + 2328)) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v353 = *v493;
  }
LABEL_1198:
  v421 = v495[25];
  if ((v421 & 0x80000000) != 0)
  {
    v423 = *(_DWORD *)(v217 + 1560);
    if (*v353)
      goto LABEL_1209;
    goto LABEL_1203;
  }
  v422 = *(_QWORD *)(v217 + 2328);
  if (v421 >= (*(_QWORD *)(v217 + 2336) - v422) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v422 = *(_QWORD *)(v217 + 2328);
    v353 = *v493;
  }
  v423 = *(_DWORD *)(v422 + (v421 << 11) + 1280);
  if (!*v353)
  {
LABEL_1203:
    if ((v423 & 0x10000000) != 0)
      v424 = 0x40000000;
    else
      v424 = 0x80000000;
    if ((v423 & 0x20000000) != 0)
      v423 = v424;
    else
      v423 &= 0xCFFFFFFF;
  }
LABEL_1209:
  v553 = v538;
  v554 = v539;
  v555 = v540;
  v552 = (float32x4_t)v537;
  v551 = v536;
  if ((v338 & 0x40000000) != 0)
  {
    v528 = v538;
    v529 = v539;
    v530 = v540;
    *(_QWORD *)&v581 = 0x1919161610100D0DLL;
    v527 = v537;
    v526 = v536;
    v521 = xmmword_22468BB40;
    v522 = (__int128)xmmword_22468BB50;
    *(_QWORD *)&v576 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v526, 7, 7, 6, (uint64_t)&v581, (uint64_t)&v521, (uint64_t)&v576, COERCE_DOUBLE(0x1FF000001BFLL), xmmword_22468BB50);
    if ((v485 & 0x40000000) == 0)
    {
      v523 = v538;
      v524 = v539;
      v525 = v540;
      *(_QWORD *)&v576 = 0x101010100D0D0D0DLL;
      v522 = v537;
      v521 = v536;
      v581 = xmmword_22468BB60;
      v582 = (__int128)xmmword_22468BB70;
      *(_QWORD *)&v571 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v521, 7, 7, 6, (uint64_t)&v576, (uint64_t)&v581, (uint64_t)&v571, COERCE_DOUBLE(0x1FF000001BFLL), xmmword_22468BB70);
      if (((v466 | v343) & 1) == 0)
      {
        v583 = v538;
        v584 = v539;
        v585 = v540;
        v581 = v536;
        v582 = v537;
        *(_QWORD *)&v571 = 0xD0D0D0D0D0D0D0DLL;
        v576 = xmmword_22468BB80;
        v577 = (__int128)xmmword_22468BB90;
        *(_QWORD *)&v566 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v581, 7, 7, 6, (uint64_t)&v571, (uint64_t)&v576, (uint64_t)&v566, COERCE_DOUBLE(0x1FF000001BFLL), xmmword_22468BB90);
        v425 = (v489 & 1) == 0 && ((v462 | v344) & 1) == 0;
        if ((v440 & 1) == 0 && v425)
        {
          v578 = v538;
          v579 = v539;
          v580 = v540;
          v577 = v537;
          v576 = v536;
          *(_QWORD *)&v566 = 0xD0D0D0D0D0D0D0DLL;
          v571 = xmmword_22468BBA0;
          v572 = (__int128)xmmword_22468BBB0;
          *(_QWORD *)&v561 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v576, 7, 7, 6, (uint64_t)&v566, (uint64_t)&v571, (uint64_t)&v561, COERCE_DOUBLE(0x17F000001BFLL), xmmword_22468BBB0);
        }
      }
      v426 = (v457 & 1) == 0 && ((v462 | v344) & 1) == 0;
      if (v426 && (v345 & 1) == 0)
      {
        v573 = v553;
        v574 = v554;
        v575 = v555;
        *(_QWORD *)&v561 = 0x10100D0D10100D0DLL;
        v572 = (__int128)v552;
        v571 = v551;
        v566 = xmmword_22468BBC0;
        v567 = (__int128)xmmword_22468BBD0;
        *(_QWORD *)&v556 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v571, 7, 7, 6, (uint64_t)&v561, (uint64_t)&v566, (uint64_t)&v556, COERCE_DOUBLE(0x17F000001BFLL), xmmword_22468BBD0);
      }
    }
    if (!(v358 & 0x40000000 | v343 & 1))
    {
      v568 = v553;
      v569 = v554;
      v570 = v555;
      *(_QWORD *)&v556 = 0x16160D0D16160D0DLL;
      v567 = (__int128)v552;
      v566 = v551;
      v561 = xmmword_22468BBE0;
      v562 = (__int128)xmmword_22468BBF0;
      *(_QWORD *)&v587[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v566, 7, 7, 6, (uint64_t)&v556, (uint64_t)&v561, (uint64_t)v587, COERCE_DOUBLE(0x1FF000001BFLL), xmmword_22468BBF0);
      v427 = (v354 & 0x40000000) == 0 && (v361 & 0x40000000 | v344 & 1) == 0;
      if ((v489 & 1) == 0 && v427)
      {
        v563 = v553;
        v564 = v554;
        v565 = v555;
        *(_QWORD *)&v587[0] = 0x161616160D0D0D0DLL;
        v562 = (__int128)v552;
        v561 = v551;
        v556 = xmmword_22468BC00;
        v557 = (__int128)xmmword_22468BC10;
        v588[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v561, 7, 7, 6, (uint64_t)v587, (uint64_t)&v556, (uint64_t)v588, COERCE_DOUBLE(0x17F000001BFLL), xmmword_22468BC10);
      }
    }
    v428 = (v345 & 1) == 0 && (v361 & 0x40000000 | v344 & 1) == 0;
    if (v428 && (v423 & 0x40000000) == 0)
    {
      v558 = v553;
      v559 = v554;
      v560 = v555;
      v588[0] = 0x1919101016160D0DLL;
      v557 = (__int128)v552;
      v556 = v551;
      v587[0] = xmmword_22468BC20;
      v587[1] = xmmword_22468BC30;
      v586 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v556, 7, 7, 6, (uint64_t)v588, (uint64_t)v587, (uint64_t)&v586, COERCE_DOUBLE(0x17F000001BFLL), xmmword_22468BC30);
    }
  }
  v521 = v447;
  *(_QWORD *)&v522 = v216;
  *(_QWORD *)&v581 = v217;
  *((_QWORD *)&v581 + 1) = v495;
  *(_QWORD *)&v582 = v493;
  v530 = v500;
  v529 = v499;
  v528 = v498;
  v526 = v496;
  v527 = v497;
  return sub_223E46FA0((unsigned __int8 ***)&v521, (uint64_t *)&v581, &v526);
}

unint64_t sub_223E46FA0(unsigned __int8 ***a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _BYTE **v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  _BYTE **v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _BYTE *v55;
  unsigned int v56;
  uint64_t v57;
  _BYTE **v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unsigned int v62;
  uint64_t v63;
  _BYTE **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned __int8 **v95;
  _BOOL4 v96;
  _BOOL4 v97;
  _BOOL4 v98;
  _BOOL4 v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  _BOOL4 v139;
  _BOOL4 v140;
  _BOOL4 v141;
  _BOOL4 v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  _BOOL4 v162;
  _BOOL4 v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  _BOOL4 v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  unsigned int v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unint64_t v238;
  uint64_t v239;
  unsigned int v240;
  unint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  unint64_t v246;
  unsigned int v247;
  unsigned int v248;
  _BOOL4 v249;
  _BOOL4 v250;
  _BOOL4 v251;
  _BOOL4 v252;
  _BOOL4 v253;
  unsigned __int8 **v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  _BOOL4 v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  int v318;
  unsigned int v319;
  int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  _BOOL4 v324;
  _BOOL4 v325;
  _BOOL4 v326;
  _BOOL4 v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  unsigned int v339;
  int v340;
  _BOOL4 v341;
  _BOOL4 v342;
  _BOOL4 v343;
  _BOOL4 v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  _BOOL4 v360;
  _BOOL4 v361;
  _BOOL4 v362;
  _BOOL4 v363;
  _BOOL4 v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  _BOOL4 v379;
  _BOOL4 v380;
  _BOOL4 v381;
  _BOOL4 v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  int v395;
  _BOOL4 v396;
  _BOOL4 v397;
  _BOOL4 v398;
  _BOOL4 v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  int v406;
  unsigned int v407;
  int v408;
  unsigned int v409;
  int v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  _BOOL4 v415;
  _BOOL4 v416;
  _BOOL4 v417;
  _BOOL4 v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE *v422;
  unsigned int v423;
  int v424;
  unint64_t v425;
  uint64_t v426;
  unsigned int v427;
  unint64_t v428;
  uint64_t v429;
  unsigned int v430;
  unint64_t v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  unint64_t v436;
  unsigned int v437;
  unsigned int v438;
  _BOOL4 v439;
  _BOOL4 v440;
  _BOOL4 v441;
  _BOOL4 v442;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  __int128 v458;
  __int128 *v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned __int8 ***v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  _BYTE **v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned __int8 **v510;
  unsigned int v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  _BYTE **v516;
  uint64_t v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  uint64_t v603;
  _OWORD v604[2];
  _QWORD v605[3];

  v605[1] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = (_BYTE **)a2[2];
  v8 = *(unsigned int *)(a2[1] + 40);
  if ((v8 & 0x80000000) != 0)
  {
    v10 = v6 + 280;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 2328);
    if (v8 >= (*(_QWORD *)(v6 + 2336) - v9) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v9 = *(_QWORD *)(v6 + 2328);
    }
    v10 = v9 + (v8 << 11);
  }
  v11 = *(_DWORD *)(v10 + 1760);
  v12 = v11 & 0xCFFFFFFF;
  if ((v11 & 0x10000000) != 0)
    v13 = 0x40000000;
  else
    v13 = 0x80000000;
  if ((v11 & 0x20000000) != 0)
    v12 = v13;
  if (**v7)
    v14 = v11;
  else
    v14 = v12;
  v15 = *a2;
  v16 = (_BYTE **)a2[2];
  v17 = *(unsigned int *)(a2[1] + 40);
  v506 = v14;
  if ((v17 & 0x80000000) != 0)
  {
    v19 = v15 + 280;
  }
  else
  {
    v18 = *(_QWORD *)(v15 + 2328);
    if (v17 >= (*(_QWORD *)(v15 + 2336) - v18) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v18 = *(_QWORD *)(v15 + 2328);
    }
    v19 = v18 + (v17 << 11);
  }
  v20 = *(_DWORD *)(v19 + 2016);
  v21 = v20 & 0xCFFFFFFF;
  if ((v20 & 0x10000000) != 0)
    v22 = 0x40000000;
  else
    v22 = 0x80000000;
  if ((v20 & 0x20000000) != 0)
    v21 = v22;
  if (**v16)
    v23 = *(_DWORD *)(v19 + 2016);
  else
    v23 = v21;
  v24 = *a1;
  v470 = a1;
  v25 = a1[2];
  v26 = *((_DWORD *)v25 + 384);
  if (**v24)
  {
    v27 = *a2;
    v28 = (unsigned int *)a2[1];
    v516 = (_BYTE **)a2[2];
    v512 = *((_DWORD *)v25 + 448);
    v495 = *((_DWORD *)v25 + 392);
    v501 = v23;
    if ((v512 & 0x40000000) == 0)
    {
LABEL_31:
      v29 = 0;
      v30 = 0;
      v485 = 0;
      v490 = 0;
      v31 = 0;
      goto LABEL_111;
    }
  }
  else
  {
    if ((v26 & 0x20000000) != 0)
      v26 *= 4;
    v32 = *((_DWORD *)v25 + 448);
    if ((v32 & 0x20000000) != 0)
      v33 = 4 * v32;
    else
      v33 = *((_DWORD *)v25 + 448);
    v34 = *((_DWORD *)v25 + 392);
    if ((v34 & 0x10000000) != 0)
      v35 = 0x40000000;
    else
      v35 = 0x80000000;
    if ((v34 & 0x20000000) != 0)
      v36 = v35;
    else
      v36 = v34 & 0xCFFFFFFF;
    v27 = *a2;
    v28 = (unsigned int *)a2[1];
    v516 = (_BYTE **)a2[2];
    v512 = v33;
    v495 = v36;
    v501 = v23;
    if ((v33 & 0x40000000) == 0)
      goto LABEL_31;
  }
  v37 = v28[1];
  if ((v37 & 0x80000000) != 0)
  {
    v39 = v27 + 280;
  }
  else
  {
    v38 = *(_QWORD *)(v27 + 2328);
    if (v37 >= (*(_QWORD *)(v27 + 2336) - v38) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v38 = *(_QWORD *)(v27 + 2328);
    }
    v39 = v38 + (v37 << 11);
  }
  v40 = *(_DWORD *)(v39 + 1788);
  v41 = v40 & 0xCFFFFFFF;
  if ((v40 & 0x10000000) != 0)
    v42 = 0x40000000;
  else
    v42 = 0x80000000;
  if ((v40 & 0x20000000) != 0)
    v41 = v42;
  if (**v516)
    v43 = v40;
  else
    v43 = v41;
  v44 = *a2;
  v45 = (_BYTE **)a2[2];
  v46 = *(unsigned int *)(a2[1] + 4);
  if ((v46 & 0x80000000) != 0)
  {
    v68 = *v45;
    v49 = *(_DWORD *)(v44 + 2324);
    if (*v68)
      goto LABEL_63;
  }
  else
  {
    v47 = *(_QWORD *)(v44 + 2328);
    if (v46 >= (*(_QWORD *)(v44 + 2336) - v47) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v47 = *(_QWORD *)(v44 + 2328);
    }
    v48 = *v45;
    v49 = *(_DWORD *)(v47 + (v46 << 11) + 2044);
    if (*v48)
    {
LABEL_63:
      v50 = *a2;
      v51 = (_BYTE **)a2[2];
      v52 = *(unsigned int *)(a2[1] + 16);
      if ((v52 & 0x80000000) == 0)
        goto LABEL_64;
LABEL_86:
      v54 = a3;
      v70 = *v51;
      v56 = *(_DWORD *)(v50 + 1844);
      if (*v70)
        goto LABEL_68;
      goto LABEL_87;
    }
  }
  if ((v49 & 0x10000000) != 0)
    v69 = 0x40000000;
  else
    v69 = 0x80000000;
  if ((v49 & 0x20000000) != 0)
    v49 = v69;
  else
    v49 &= 0xCFFFFFFF;
  v50 = *a2;
  v51 = (_BYTE **)a2[2];
  v52 = *(unsigned int *)(a2[1] + 16);
  if ((v52 & 0x80000000) != 0)
    goto LABEL_86;
LABEL_64:
  v53 = *(_QWORD *)(v50 + 2328);
  if (v52 >= (*(_QWORD *)(v50 + 2336) - v53) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1300;
    }
    v53 = *(_QWORD *)(v50 + 2328);
  }
  v54 = a3;
  v55 = *v51;
  v56 = *(_DWORD *)(v53 + (v52 << 11) + 1564);
  if (*v55)
  {
LABEL_68:
    v57 = *a2;
    v58 = (_BYTE **)a2[2];
    v59 = *(unsigned int *)(a2[1] + 16);
    if ((v59 & 0x80000000) == 0)
      goto LABEL_69;
LABEL_94:
    v72 = *v58;
    v62 = *(_DWORD *)(v57 + 2100);
    if (*v72)
      goto LABEL_73;
LABEL_95:
    if ((v62 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v62 & 0x20000000) != 0)
      v62 = v73;
    else
      v62 &= 0xCFFFFFFF;
    v63 = *a2;
    v64 = (_BYTE **)a2[2];
    v65 = *(unsigned int *)(a2[1] + 16);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_102;
  }
LABEL_87:
  if ((v56 & 0x10000000) != 0)
    v71 = 0x40000000;
  else
    v71 = 0x80000000;
  if ((v56 & 0x20000000) != 0)
    v56 = v71;
  else
    v56 &= 0xCFFFFFFF;
  v57 = *a2;
  v58 = (_BYTE **)a2[2];
  v59 = *(unsigned int *)(a2[1] + 16);
  if ((v59 & 0x80000000) != 0)
    goto LABEL_94;
LABEL_69:
  v60 = *(_QWORD *)(v57 + 2328);
  if (v59 >= (*(_QWORD *)(v57 + 2336) - v60) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_1300;
    }
    v60 = *(_QWORD *)(v57 + 2328);
  }
  v61 = *v58;
  v62 = *(_DWORD *)(v60 + (v59 << 11) + 1820);
  if (!*v61)
    goto LABEL_95;
LABEL_73:
  v63 = *a2;
  v64 = (_BYTE **)a2[2];
  v65 = *(unsigned int *)(a2[1] + 16);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_74:
    v66 = *(_QWORD *)(v63 + 2328);
    if (v65 >= (*(_QWORD *)(v63 + 2336) - v66) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v66 = *(_QWORD *)(v63 + 2328);
    }
    v67 = v66 + (v65 << 11);
    goto LABEL_103;
  }
LABEL_102:
  v67 = v63 + 280;
LABEL_103:
  v31 = (v43 >> 30) & 1;
  v485 = (v56 >> 30) & 1;
  v490 = (v49 >> 30) & 1;
  v30 = (v62 >> 30) & 1;
  v74 = *(_DWORD *)(v67 + 1596);
  a3 = v54;
  if (!**v64)
  {
    if ((v74 & 0x10000000) != 0)
      v75 = 0x40000000;
    else
      v75 = 0x80000000;
    if ((v74 & 0x20000000) != 0)
      v74 = v75;
    else
      v74 &= 0xCFFFFFFF;
  }
  v29 = (v74 >> 30) & 1;
  v24 = *v470;
  v25 = v470[2];
  v27 = *a2;
  v28 = (unsigned int *)a2[1];
  v516 = (_BYTE **)a2[2];
LABEL_111:
  v525 = a3[2];
  v526 = a3[3];
  v527 = a3[4];
  v459 = a3;
  v523 = *a3;
  v524 = a3[1];
  v76 = v28[10];
  v479 = v31;
  if ((v76 & 0x80000000) != 0)
  {
    v78 = *(_DWORD *)(v27 + 2044);
    v79 = **v516;
    if (**v516)
      goto LABEL_116;
  }
  else
  {
    v77 = *(_QWORD *)(v27 + 2328);
    if (v76 >= (*(_QWORD *)(v27 + 2336) - v77) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1300;
      }
      v77 = *(_QWORD *)(v27 + 2328);
    }
    v78 = *(_DWORD *)(v77 + (v76 << 11) + 1764);
    v79 = **v516;
    if (**v516)
    {
LABEL_116:
      v80 = v28[10];
      if ((v80 & 0x80000000) == 0)
        goto LABEL_117;
LABEL_137:
      v82 = *(_DWORD *)(v27 + 2300);
      if (!v79)
        goto LABEL_121;
      goto LABEL_127;
    }
  }
  if ((v78 & 0x10000000) != 0)
    v86 = 0x40000000;
  else
    v86 = 0x80000000;
  if ((v78 & 0x20000000) != 0)
    v78 = v86;
  else
    v78 &= 0xCFFFFFFF;
  v80 = v28[10];
  if ((v80 & 0x80000000) != 0)
    goto LABEL_137;
LABEL_117:
  v81 = *(_QWORD *)(v27 + 2328);
  if (v80 < (*(_QWORD *)(v27 + 2336) - v81) >> 11)
    goto LABEL_120;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
LABEL_1300:
    abort();
  }
  v81 = *(_QWORD *)(v27 + 2328);
  v79 = **v516;
LABEL_120:
  v82 = *(_DWORD *)(v81 + (v80 << 11) + 2020);
  if (!v79)
  {
LABEL_121:
    if ((v82 & 0x10000000) != 0)
      v83 = 0x40000000;
    else
      v83 = 0x80000000;
    if ((v82 & 0x20000000) != 0)
      v82 = v83;
    else
      v82 &= 0xCFFFFFFF;
  }
LABEL_127:
  v449 = v506 >> 30;
  v84 = *((_DWORD *)v25 + 385);
  if (**v24)
  {
    v507 = *((_DWORD *)v25 + 449);
    v85 = *((_DWORD *)v25 + 393);
  }
  else
  {
    if ((v84 & 0x10000000) != 0)
      v87 = 0x40000000;
    else
      v87 = 0x80000000;
    if ((v84 & 0x20000000) != 0)
      v84 = v87;
    else
      v84 &= 0xCFFFFFFF;
    v88 = *((_DWORD *)v25 + 449);
    if ((v88 & 0x10000000) != 0)
      v89 = 0x40000000;
    else
      v89 = 0x80000000;
    if ((v88 & 0x20000000) != 0)
      v90 = v89;
    else
      v90 = v88 & 0xCFFFFFFF;
    v507 = v90;
    v91 = *((_DWORD *)v25 + 393);
    if ((v91 & 0x10000000) != 0)
      v92 = 0x40000000;
    else
      v92 = 0x80000000;
    if ((v91 & 0x20000000) != 0)
      v85 = v92;
    else
      v85 = v91 & 0xCFFFFFFF;
  }
  v456 = v78 >> 30;
  v474 = v501 >> 30;
  v93 = v26 >> 30;
  v94 = v495 >> 30;
  v496 = v84 >> 30;
  v502 = v82 >> 30;
  v466 = v85 >> 30;
  v95 = v24;
  if ((v512 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468BC40;
    v539 = (__int128)xmmword_22468BC50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(448), xmmword_22468BC50);
    if (!v30)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      *(_QWORD *)&v593 = 0x5040E0D05040E0DLL;
      v539 = v524;
      v538 = v523;
      v598 = xmmword_22468BC60;
      v599 = (__int128)xmmword_22468BC70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(448), xmmword_22468BC70);
      if (!(v490 | v474 & 1))
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        v598 = v523;
        v599 = v524;
        *(_QWORD *)&v588 = 0x20105040B0A0E0DLL;
        v593 = xmmword_22468BC80;
        v594 = (__int128)xmmword_22468BC90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(448), xmmword_22468BC90);
        v96 = (v449 & 1) == 0 && (v485 | v93 & 1) == 0;
        if (!v479 && v96)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0x1010A0A04040D0DLL;
          v588 = xmmword_22468BCA0;
          v589 = (__int128)xmmword_22468BCB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x180000001C0), xmmword_22468BCB0);
        }
      }
      if (v29)
        v97 = 0;
      else
        v97 = (v485 | v93 & 1) == 0;
      if (v97 && (v94 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v524;
        v588 = v523;
        v583 = xmmword_22468BCC0;
        v584 = (__int128)xmmword_22468BCD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x180000001C0), xmmword_22468BCD0);
      }
    }
    if (((v474 | v502) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468BCE0;
      v579 = (__int128)xmmword_22468BCF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(448), xmmword_22468BCF0);
      v98 = (v456 & 1) == 0 && ((v93 | v496) & 1) == 0;
      if ((v449 & 1) == 0 && v98)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v524;
        v578 = v523;
        v573 = xmmword_22468BD00;
        v574 = (__int128)xmmword_22468BD10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x180000001C0), xmmword_22468BD10);
      }
    }
    v99 = (v94 & 1) == 0 && ((v93 | v496) & 1) == 0;
    if (v99 && (v466 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468BD20;
      v569 = (__int128)xmmword_22468BD30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x180000001C0), xmmword_22468BD30);
    }
  }
  v100 = v28[10];
  if ((v100 & 0x80000000) != 0)
  {
    v102 = *(_DWORD *)(v27 + 2048);
    v103 = **v516;
    if (**v516)
      goto LABEL_190;
  }
  else
  {
    v101 = *(_QWORD *)(v27 + 2328);
    if (v100 >= (*(_QWORD *)(v27 + 2336) - v101) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v101 = *(_QWORD *)(v27 + 2328);
    }
    v102 = *(_DWORD *)(v101 + (v100 << 11) + 1768);
    v103 = **v516;
    if (**v516)
    {
LABEL_190:
      v104 = v28[10];
      if ((v104 & 0x80000000) == 0)
        goto LABEL_191;
LABEL_205:
      v106 = *(_DWORD *)(v27 + 2304);
      if (v103)
        goto LABEL_195;
LABEL_206:
      if ((v106 & 0x10000000) != 0)
        v110 = 0x40000000;
      else
        v110 = 0x80000000;
      if ((v106 & 0x20000000) != 0)
        v106 = v110;
      else
        v106 &= 0xCFFFFFFF;
      v107 = *((_DWORD *)v25 + 386);
      if (**v24)
        goto LABEL_196;
      goto LABEL_213;
    }
  }
  if ((v102 & 0x10000000) != 0)
    v109 = 0x40000000;
  else
    v109 = 0x80000000;
  if ((v102 & 0x20000000) != 0)
    v102 = v109;
  else
    v102 &= 0xCFFFFFFF;
  v104 = v28[10];
  if ((v104 & 0x80000000) != 0)
    goto LABEL_205;
LABEL_191:
  v105 = *(_QWORD *)(v27 + 2328);
  if (v104 >= (*(_QWORD *)(v27 + 2336) - v105) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v105 = *(_QWORD *)(v27 + 2328);
    v103 = **v516;
  }
  v106 = *(_DWORD *)(v105 + (v104 << 11) + 2024);
  if (!v103)
    goto LABEL_206;
LABEL_195:
  v107 = *((_DWORD *)v25 + 386);
  if (**v24)
  {
LABEL_196:
    v491 = *((_DWORD *)v25 + 450);
    v108 = *((_DWORD *)v25 + 394);
    goto LABEL_231;
  }
LABEL_213:
  if ((v107 & 0x10000000) != 0)
    v111 = 0x40000000;
  else
    v111 = 0x80000000;
  if ((v107 & 0x20000000) != 0)
    v107 = v111;
  else
    v107 &= 0xCFFFFFFF;
  v112 = *((_DWORD *)v25 + 450);
  if ((v112 & 0x10000000) != 0)
    v113 = 0x40000000;
  else
    v113 = 0x80000000;
  if ((v112 & 0x20000000) != 0)
    v114 = v113;
  else
    v114 = v112 & 0xCFFFFFFF;
  v491 = v114;
  v115 = *((_DWORD *)v25 + 394);
  if ((v115 & 0x10000000) != 0)
    v116 = 0x40000000;
  else
    v116 = 0x80000000;
  if ((v115 & 0x20000000) != 0)
    v108 = v116;
  else
    v108 = v115 & 0xCFFFFFFF;
LABEL_231:
  v453 = v102 >> 30;
  v480 = v107 >> 30;
  v486 = v106 >> 30;
  v462 = v108 >> 30;
  if ((v507 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468BD40;
    v539 = (__int128)xmmword_22468BD50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x1000001C1), xmmword_22468BD50);
    if ((v512 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468BD60;
      v599 = (__int128)xmmword_22468BD70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x1000001C1), xmmword_22468BD70);
      if (((v474 | v502) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468BD80;
        v594 = (__int128)xmmword_22468BD90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x1000001C1), xmmword_22468BD90);
        v117 = (v456 & 1) == 0 && ((v93 | v496) & 1) == 0;
        if ((v449 & 1) == 0 && v117)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468BDA0;
          v589 = (__int128)xmmword_22468BDB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x181000001C1), xmmword_22468BDB0);
        }
      }
      v118 = (v94 & 1) == 0 && ((v93 | v496) & 1) == 0;
      if (v118 && (v466 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468BDC0;
        v584 = (__int128)xmmword_22468BDD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x181000001C1), xmmword_22468BDD0);
      }
    }
    if (((v502 | v486) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468BDE0;
      v579 = (__int128)xmmword_22468BDF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x1000001C1), xmmword_22468BDF0);
      v119 = (v102 & 0x40000000) == 0 && ((v496 | v480) & 1) == 0;
      if ((v456 & 1) == 0 && v119)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v524;
        v578 = v523;
        v573 = xmmword_22468BE00;
        v574 = (__int128)xmmword_22468BE10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x181000001C1), xmmword_22468BE10);
      }
    }
    v120 = (v466 & 1) == 0 && ((v496 | v480) & 1) == 0;
    if (v120 && (v462 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468BE20;
      v569 = (__int128)xmmword_22468BE30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x181000001C1), xmmword_22468BE30);
    }
  }
  v121 = v28[10];
  if ((v121 & 0x80000000) != 0)
  {
    v123 = *(_DWORD *)(v27 + 2052);
    v124 = **v516;
    if (**v516)
      goto LABEL_264;
  }
  else
  {
    v122 = *(_QWORD *)(v27 + 2328);
    if (v121 >= (*(_QWORD *)(v27 + 2336) - v122) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v122 = *(_QWORD *)(v27 + 2328);
    }
    v123 = *(_DWORD *)(v122 + (v121 << 11) + 1772);
    v124 = **v516;
    if (**v516)
    {
LABEL_264:
      v125 = v28[10];
      if ((v125 & 0x80000000) == 0)
        goto LABEL_265;
LABEL_279:
      v127 = *(_DWORD *)(v27 + 2308);
      if (v124)
        goto LABEL_269;
LABEL_280:
      if ((v127 & 0x10000000) != 0)
        v132 = 0x40000000;
      else
        v132 = 0x80000000;
      if ((v127 & 0x20000000) != 0)
        v127 = v132;
      else
        v127 &= 0xCFFFFFFF;
      v128 = *((_DWORD *)v25 + 387);
      if (**v24)
        goto LABEL_270;
      goto LABEL_287;
    }
  }
  if ((v123 & 0x10000000) != 0)
    v131 = 0x40000000;
  else
    v131 = 0x80000000;
  if ((v123 & 0x20000000) != 0)
    v123 = v131;
  else
    v123 &= 0xCFFFFFFF;
  v125 = v28[10];
  if ((v125 & 0x80000000) != 0)
    goto LABEL_279;
LABEL_265:
  v126 = *(_QWORD *)(v27 + 2328);
  if (v125 >= (*(_QWORD *)(v27 + 2336) - v126) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v126 = *(_QWORD *)(v27 + 2328);
    v124 = **v516;
  }
  v127 = *(_DWORD *)(v126 + (v125 << 11) + 2028);
  if (!v124)
    goto LABEL_280;
LABEL_269:
  v128 = *((_DWORD *)v25 + 387);
  if (**v24)
  {
LABEL_270:
    v129 = *((_DWORD *)v25 + 451);
    v130 = *((_DWORD *)v25 + 395);
    goto LABEL_305;
  }
LABEL_287:
  if ((v128 & 0x10000000) != 0)
    v133 = 0x40000000;
  else
    v133 = 0x80000000;
  if ((v128 & 0x20000000) != 0)
    v128 = v133;
  else
    v128 &= 0xCFFFFFFF;
  v134 = *((_DWORD *)v25 + 451);
  if ((v134 & 0x10000000) != 0)
    v135 = 0x40000000;
  else
    v135 = 0x80000000;
  if ((v134 & 0x20000000) != 0)
    v129 = v135;
  else
    v129 = v134 & 0xCFFFFFFF;
  v136 = *((_DWORD *)v25 + 395);
  if ((v136 & 0x10000000) != 0)
    v137 = 0x40000000;
  else
    v137 = 0x80000000;
  if ((v136 & 0x20000000) != 0)
    v130 = v137;
  else
    v130 = v136 & 0xCFFFFFFF;
LABEL_305:
  v450 = v123 >> 30;
  v513 = v127 >> 30;
  v475 = v128 >> 30;
  v138 = v130 >> 30;
  if ((v491 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468BE40;
    v539 = (__int128)xmmword_22468BE50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x2000001C2), xmmword_22468BE50);
    if ((v507 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468BE60;
      v599 = (__int128)xmmword_22468BE70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x2000001C2), xmmword_22468BE70);
      if (((v502 | v486) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468BE80;
        v594 = (__int128)xmmword_22468BE90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x2000001C2), xmmword_22468BE90);
        v139 = (v453 & 1) == 0 && ((v496 | v480) & 1) == 0;
        if ((v456 & 1) == 0 && v139)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468BEA0;
          v589 = (__int128)xmmword_22468BEB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x182000001C2), xmmword_22468BEB0);
        }
      }
      v140 = (v466 & 1) == 0 && ((v496 | v480) & 1) == 0;
      if (v140 && (v462 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468BEC0;
        v584 = (__int128)xmmword_22468BED0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x182000001C2), xmmword_22468BED0);
      }
    }
    if (((v486 | v513) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468BEE0;
      v579 = (__int128)xmmword_22468BEF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x2000001C2), xmmword_22468BEF0);
      v141 = (v123 & 0x40000000) == 0 && ((v480 | v475) & 1) == 0;
      if ((v453 & 1) == 0 && v141)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v524;
        v578 = v523;
        v573 = xmmword_22468BF00;
        v574 = (__int128)xmmword_22468BF10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x182000001C2), xmmword_22468BF10);
      }
    }
    v142 = (v462 & 1) == 0 && ((v480 | v475) & 1) == 0;
    if (v142 && (v138 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468BF20;
      v569 = (__int128)xmmword_22468BF30;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x182000001C2), xmmword_22468BF30);
    }
  }
  v143 = v28[10];
  if ((v143 & 0x80000000) != 0)
  {
    v145 = *(_DWORD *)(v27 + 2056);
    v146 = **v516;
    if (**v516)
      goto LABEL_338;
  }
  else
  {
    v144 = *(_QWORD *)(v27 + 2328);
    if (v143 >= (*(_QWORD *)(v27 + 2336) - v144) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v144 = *(_QWORD *)(v27 + 2328);
    }
    v145 = *(_DWORD *)(v144 + (v143 << 11) + 1776);
    v146 = **v516;
    if (**v516)
    {
LABEL_338:
      v147 = v28[10];
      if ((v147 & 0x80000000) == 0)
        goto LABEL_339;
LABEL_353:
      v149 = *(_DWORD *)(v27 + 2312);
      if (v146)
        goto LABEL_343;
LABEL_354:
      if ((v149 & 0x10000000) != 0)
        v154 = 0x40000000;
      else
        v154 = 0x80000000;
      if ((v149 & 0x20000000) != 0)
        v149 = v154;
      else
        v149 &= 0xCFFFFFFF;
      v150 = *((_DWORD *)v25 + 388);
      if (**v95)
        goto LABEL_344;
      goto LABEL_361;
    }
  }
  if ((v145 & 0x10000000) != 0)
    v153 = 0x40000000;
  else
    v153 = 0x80000000;
  if ((v145 & 0x20000000) != 0)
    v145 = v153;
  else
    v145 &= 0xCFFFFFFF;
  v147 = v28[10];
  if ((v147 & 0x80000000) != 0)
    goto LABEL_353;
LABEL_339:
  v148 = *(_QWORD *)(v27 + 2328);
  if (v147 >= (*(_QWORD *)(v27 + 2336) - v148) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v148 = *(_QWORD *)(v27 + 2328);
    v146 = **v516;
  }
  v149 = *(_DWORD *)(v148 + (v147 << 11) + 2032);
  if (!v146)
    goto LABEL_354;
LABEL_343:
  v150 = *((_DWORD *)v25 + 388);
  if (**v95)
  {
LABEL_344:
    v151 = *((_DWORD *)v25 + 452);
    v152 = *((_DWORD *)v25 + 396);
    goto LABEL_379;
  }
LABEL_361:
  if ((v150 & 0x10000000) != 0)
    v155 = 0x40000000;
  else
    v155 = 0x80000000;
  if ((v150 & 0x20000000) != 0)
    v150 = v155;
  else
    v150 &= 0xCFFFFFFF;
  v156 = *((_DWORD *)v25 + 452);
  if ((v156 & 0x10000000) != 0)
    v157 = 0x40000000;
  else
    v157 = 0x80000000;
  if ((v156 & 0x20000000) != 0)
    v151 = v157;
  else
    v151 = v156 & 0xCFFFFFFF;
  v158 = *((_DWORD *)v25 + 396);
  if ((v158 & 0x10000000) != 0)
    v159 = 0x40000000;
  else
    v159 = 0x80000000;
  if ((v158 & 0x20000000) != 0)
    v152 = v159;
  else
    v152 = v158 & 0xCFFFFFFF;
LABEL_379:
  v457 = v145 >> 30;
  v508 = v149 >> 30;
  v503 = v150 >> 30;
  v467 = v152 >> 30;
  if ((v129 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468BF40;
    v539 = (__int128)xmmword_22468BF50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x3000001C3), xmmword_22468BF50);
    if ((v491 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468BF60;
      v599 = (__int128)xmmword_22468BF70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x3000001C3), xmmword_22468BF70);
      if (((v486 | v513) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468BF80;
        v594 = (__int128)xmmword_22468BF90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x3000001C3), xmmword_22468BF90);
        v160 = (v450 & 1) == 0 && ((v480 | v475) & 1) == 0;
        if ((v453 & 1) == 0 && v160)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468BFA0;
          v589 = (__int128)xmmword_22468BFB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x183000001C3), xmmword_22468BFB0);
        }
      }
      v161 = (v462 & 1) == 0 && ((v480 | v475) & 1) == 0;
      if (v161 && (v138 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468BFC0;
        v584 = (__int128)xmmword_22468BFD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x183000001C3), xmmword_22468BFD0);
      }
    }
    if (((v513 | v508) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468BFE0;
      v579 = (__int128)xmmword_22468BFF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x3000001C3), xmmword_22468BFF0);
      v162 = (v145 & 0x40000000) == 0 && ((v475 | v503) & 1) == 0;
      if ((v450 & 1) == 0 && v162)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v524;
        v578 = v523;
        v573 = xmmword_22468C000;
        v574 = (__int128)xmmword_22468C010;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x183000001C3), xmmword_22468C010);
      }
    }
    v163 = (v138 & 1) == 0 && ((v475 | v503) & 1) == 0;
    if (v163 && (v467 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C020;
      v569 = (__int128)xmmword_22468C030;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x183000001C3), xmmword_22468C030);
    }
  }
  v164 = v28[10];
  if ((v164 & 0x80000000) != 0)
  {
    v166 = *(_DWORD *)(v27 + 2060);
    v167 = **v516;
    if (**v516)
      goto LABEL_412;
  }
  else
  {
    v165 = *(_QWORD *)(v27 + 2328);
    if (v164 >= (*(_QWORD *)(v27 + 2336) - v165) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v165 = *(_QWORD *)(v27 + 2328);
    }
    v166 = *(_DWORD *)(v165 + (v164 << 11) + 1780);
    v167 = **v516;
    if (**v516)
    {
LABEL_412:
      v168 = v28[10];
      if ((v168 & 0x80000000) == 0)
        goto LABEL_413;
LABEL_427:
      v170 = *(_DWORD *)(v27 + 2316);
      if (v167)
        goto LABEL_417;
LABEL_428:
      if ((v170 & 0x10000000) != 0)
        v175 = 0x40000000;
      else
        v175 = 0x80000000;
      if ((v170 & 0x20000000) != 0)
        v170 = v175;
      else
        v170 &= 0xCFFFFFFF;
      v171 = *((_DWORD *)v25 + 389);
      if (**v95)
        goto LABEL_418;
      goto LABEL_435;
    }
  }
  if ((v166 & 0x10000000) != 0)
    v174 = 0x40000000;
  else
    v174 = 0x80000000;
  if ((v166 & 0x20000000) != 0)
    v166 = v174;
  else
    v166 &= 0xCFFFFFFF;
  v168 = v28[10];
  if ((v168 & 0x80000000) != 0)
    goto LABEL_427;
LABEL_413:
  v169 = *(_QWORD *)(v27 + 2328);
  if (v168 >= (*(_QWORD *)(v27 + 2336) - v169) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v169 = *(_QWORD *)(v27 + 2328);
    v167 = **v516;
  }
  v170 = *(_DWORD *)(v169 + (v168 << 11) + 2036);
  if (!v167)
    goto LABEL_428;
LABEL_417:
  v171 = *((_DWORD *)v25 + 389);
  if (**v95)
  {
LABEL_418:
    v172 = *((_DWORD *)v25 + 453);
    v173 = *((_DWORD *)v25 + 397);
    goto LABEL_453;
  }
LABEL_435:
  if ((v171 & 0x10000000) != 0)
    v176 = 0x40000000;
  else
    v176 = 0x80000000;
  if ((v171 & 0x20000000) != 0)
    v171 = v176;
  else
    v171 &= 0xCFFFFFFF;
  v177 = *((_DWORD *)v25 + 453);
  if ((v177 & 0x10000000) != 0)
    v178 = 0x40000000;
  else
    v178 = 0x80000000;
  if ((v177 & 0x20000000) != 0)
    v172 = v178;
  else
    v172 = v177 & 0xCFFFFFFF;
  v179 = *((_DWORD *)v25 + 397);
  if ((v179 & 0x10000000) != 0)
    v180 = 0x40000000;
  else
    v180 = 0x80000000;
  if ((v179 & 0x20000000) != 0)
    v173 = v180;
  else
    v173 = v179 & 0xCFFFFFFF;
LABEL_453:
  v454 = v166 >> 30;
  v492 = v171 >> 30;
  v497 = v170 >> 30;
  v463 = v173 >> 30;
  if ((v151 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C040;
    v539 = (__int128)xmmword_22468C050;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x4000001C4), xmmword_22468C050);
    if ((v129 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C060;
      v599 = (__int128)xmmword_22468C070;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x4000001C4), xmmword_22468C070);
      if (((v513 | v508) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468C080;
        v594 = (__int128)xmmword_22468C090;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x4000001C4), xmmword_22468C090);
        v181 = (v457 & 1) == 0 && ((v475 | v503) & 1) == 0;
        if ((v450 & 1) == 0 && v181)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468C0A0;
          v589 = (__int128)xmmword_22468C0B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x184000001C4), xmmword_22468C0B0);
        }
      }
      v182 = (v138 & 1) == 0 && ((v475 | v503) & 1) == 0;
      if (v182 && (v467 & 1) == 0)
      {
        v590 = v525;
        v591 = v526;
        v592 = v527;
        v589 = v524;
        v588 = v523;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C0C0;
        v584 = (__int128)xmmword_22468C0D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x184000001C4), xmmword_22468C0D0);
      }
    }
    if (((v508 | v497) & 1) == 0)
    {
      v585 = v525;
      v586 = v526;
      v587 = v527;
      v584 = v524;
      v583 = v523;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468C0E0;
      v579 = (__int128)xmmword_22468C0F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x4000001C4), xmmword_22468C0F0);
      v183 = (v166 & 0x40000000) == 0 && ((v503 | v492) & 1) == 0;
      if ((v457 & 1) == 0 && v183)
      {
        v580 = v525;
        v581 = v526;
        v582 = v527;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v524;
        v578 = v523;
        v573 = xmmword_22468C100;
        v574 = (__int128)xmmword_22468C110;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x184000001C4), xmmword_22468C110);
      }
    }
    v184 = (v467 & 1) == 0 && ((v503 | v492) & 1) == 0;
    if (v184 && (v463 & 1) == 0)
    {
      v575 = v525;
      v576 = v526;
      v577 = v527;
      v574 = v524;
      v573 = v523;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C120;
      v569 = (__int128)xmmword_22468C130;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x184000001C4), xmmword_22468C130);
    }
  }
  v185 = v28[10];
  if ((v185 & 0x80000000) != 0)
  {
    v187 = *(_DWORD *)(v27 + 2064);
    v188 = **v516;
    if (**v516)
      goto LABEL_486;
  }
  else
  {
    v186 = *(_QWORD *)(v27 + 2328);
    if (v185 >= (*(_QWORD *)(v27 + 2336) - v186) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v186 = *(_QWORD *)(v27 + 2328);
    }
    v187 = *(_DWORD *)(v186 + (v185 << 11) + 1784);
    v188 = **v516;
    if (**v516)
    {
LABEL_486:
      v189 = v28[10];
      if ((v189 & 0x80000000) == 0)
        goto LABEL_487;
LABEL_501:
      v191 = *(_DWORD *)(v27 + 2320);
      if (v188)
        goto LABEL_491;
LABEL_502:
      if ((v191 & 0x10000000) != 0)
        v195 = 0x40000000;
      else
        v195 = 0x80000000;
      if ((v191 & 0x20000000) != 0)
        v191 = v195;
      else
        v191 &= 0xCFFFFFFF;
      v192 = *((_DWORD *)v25 + 390);
      if (**v95)
        goto LABEL_492;
      goto LABEL_509;
    }
  }
  if ((v187 & 0x10000000) != 0)
    v194 = 0x40000000;
  else
    v194 = 0x80000000;
  if ((v187 & 0x20000000) != 0)
    v187 = v194;
  else
    v187 &= 0xCFFFFFFF;
  v189 = v28[10];
  if ((v189 & 0x80000000) != 0)
    goto LABEL_501;
LABEL_487:
  v190 = *(_QWORD *)(v27 + 2328);
  if (v189 >= (*(_QWORD *)(v27 + 2336) - v190) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v190 = *(_QWORD *)(v27 + 2328);
    v188 = **v516;
  }
  v191 = *(_DWORD *)(v190 + (v189 << 11) + 2040);
  if (!v188)
    goto LABEL_502;
LABEL_491:
  v192 = *((_DWORD *)v25 + 390);
  if (**v95)
  {
LABEL_492:
    v514 = *((_DWORD *)v25 + 454);
    v193 = *((_DWORD *)v25 + 398);
    goto LABEL_527;
  }
LABEL_509:
  if ((v192 & 0x10000000) != 0)
    v196 = 0x40000000;
  else
    v196 = 0x80000000;
  if ((v192 & 0x20000000) != 0)
    v192 = v196;
  else
    v192 &= 0xCFFFFFFF;
  v197 = *((_DWORD *)v25 + 454);
  if ((v197 & 0x10000000) != 0)
    v198 = 0x40000000;
  else
    v198 = 0x80000000;
  if ((v197 & 0x20000000) != 0)
    v199 = v198;
  else
    v199 = v197 & 0xCFFFFFFF;
  v514 = v199;
  v200 = *((_DWORD *)v25 + 398);
  if ((v200 & 0x10000000) != 0)
    v201 = 0x40000000;
  else
    v201 = 0x80000000;
  if ((v200 & 0x20000000) != 0)
    v193 = v201;
  else
    v193 = v200 & 0xCFFFFFFF;
LABEL_527:
  v451 = v187 >> 30;
  v481 = v192 >> 30;
  v487 = v191 >> 30;
  v476 = v193 >> 30;
  v560 = v525;
  v561 = v526;
  v562 = v527;
  v559 = v524;
  v558 = v523;
  if ((v172 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C140;
    v539 = (__int128)xmmword_22468C150;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x5000001C5), xmmword_22468C150);
    if ((v151 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C160;
      v599 = (__int128)xmmword_22468C170;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x5000001C5), xmmword_22468C170);
      if (((v508 | v497) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468C180;
        v594 = (__int128)xmmword_22468C190;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x5000001C5), xmmword_22468C190);
        v202 = (v454 & 1) == 0 && ((v503 | v492) & 1) == 0;
        if ((v457 & 1) == 0 && v202)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468C1A0;
          v589 = (__int128)xmmword_22468C1B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x185000001C5), xmmword_22468C1B0);
        }
      }
      v203 = (v467 & 1) == 0 && ((v503 | v492) & 1) == 0;
      if (v203 && (v463 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C1C0;
        v584 = (__int128)xmmword_22468C1D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x185000001C5), xmmword_22468C1D0);
      }
    }
    if (((v497 | v487) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v578 = xmmword_22468C1E0;
      v579 = (__int128)xmmword_22468C1F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x5000001C5), xmmword_22468C1F0);
      v204 = (v187 & 0x40000000) == 0 && ((v492 | v481) & 1) == 0;
      if ((v454 & 1) == 0 && v204)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v559;
        v578 = v558;
        v573 = xmmword_22468C200;
        v574 = (__int128)xmmword_22468C210;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x185000001C5), xmmword_22468C210);
      }
    }
    v205 = (v463 & 1) == 0 && ((v492 | v481) & 1) == 0;
    if (v205 && (v476 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C220;
      v569 = (__int128)xmmword_22468C230;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 0, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x185000001C5), xmmword_22468C230);
    }
  }
  v555 = v525;
  v556 = v526;
  v557 = v527;
  v554 = v524;
  v553 = v523;
  v206 = v28[10];
  if ((v206 & 0x80000000) != 0)
  {
    v208 = *(_DWORD *)(v27 + 2068);
    v209 = **v516;
    if (**v516)
      goto LABEL_560;
  }
  else
  {
    v207 = *(_QWORD *)(v27 + 2328);
    if (v206 >= (*(_QWORD *)(v27 + 2336) - v207) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v207 = *(_QWORD *)(v27 + 2328);
    }
    v208 = *(_DWORD *)(v207 + (v206 << 11) + 1788);
    v209 = **v516;
    if (**v516)
    {
LABEL_560:
      v210 = v28[10];
      if ((v210 & 0x80000000) == 0)
        goto LABEL_561;
LABEL_575:
      v212 = *(_DWORD *)(v27 + 2324);
      if (v209)
        goto LABEL_565;
LABEL_576:
      if ((v212 & 0x10000000) != 0)
        v217 = 0x40000000;
      else
        v217 = 0x80000000;
      if ((v212 & 0x20000000) != 0)
        v212 = v217;
      else
        v212 &= 0xCFFFFFFF;
      v213 = *((_DWORD *)v25 + 391);
      if (**v95)
        goto LABEL_566;
      goto LABEL_583;
    }
  }
  if ((v208 & 0x10000000) != 0)
    v216 = 0x40000000;
  else
    v216 = 0x80000000;
  if ((v208 & 0x20000000) != 0)
    v208 = v216;
  else
    v208 &= 0xCFFFFFFF;
  v210 = v28[10];
  if ((v210 & 0x80000000) != 0)
    goto LABEL_575;
LABEL_561:
  v211 = *(_QWORD *)(v27 + 2328);
  if (v210 >= (*(_QWORD *)(v27 + 2336) - v211) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v211 = *(_QWORD *)(v27 + 2328);
    v209 = **v516;
  }
  v212 = *(_DWORD *)(v211 + (v210 << 11) + 2044);
  if (!v209)
    goto LABEL_576;
LABEL_565:
  v213 = *((_DWORD *)v25 + 391);
  if (**v95)
  {
LABEL_566:
    v214 = *((_DWORD *)v25 + 455);
    v215 = *((_DWORD *)v25 + 399);
    goto LABEL_601;
  }
LABEL_583:
  if ((v213 & 0x10000000) != 0)
    v218 = 0x40000000;
  else
    v218 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v213 = v218;
  else
    v213 &= 0xCFFFFFFF;
  v219 = *((_DWORD *)v25 + 455);
  if ((v219 & 0x10000000) != 0)
    v220 = 0x40000000;
  else
    v220 = 0x80000000;
  if ((v219 & 0x20000000) != 0)
    v214 = v220;
  else
    v214 = v219 & 0xCFFFFFFF;
  v221 = *((_DWORD *)v25 + 399);
  if ((v221 & 0x10000000) != 0)
    v222 = 0x40000000;
  else
    v222 = 0x80000000;
  if ((v221 & 0x20000000) != 0)
    v215 = v222;
  else
    v215 = v221 & 0xCFFFFFFF;
LABEL_601:
  v504 = v208 >> 30;
  v223 = v212 >> 30;
  v224 = v213 >> 30;
  v509 = v215 >> 30;
  v565 = v525;
  v566 = v526;
  v567 = v527;
  v564 = v524;
  v563 = v523;
  if ((v514 & 0x40000000) != 0)
  {
    v545 = v525;
    v546 = v526;
    v547 = v527;
    v544 = v524;
    v543 = v523;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C240;
    v539 = (__int128)xmmword_22468C250;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x6000001C6), xmmword_22468C250);
    if ((v172 & 0x40000000) == 0)
    {
      v540 = v525;
      v541 = v526;
      v542 = v527;
      v539 = v524;
      v538 = v523;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C260;
      v599 = (__int128)xmmword_22468C270;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x6000001C6), xmmword_22468C270);
      if (((v497 | v487) & 1) == 0)
      {
        v600 = v525;
        v601 = v526;
        v602 = v527;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v523;
        v599 = v524;
        v593 = xmmword_22468C280;
        v594 = (__int128)xmmword_22468C290;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x6000001C6), xmmword_22468C290);
        v225 = (v451 & 1) == 0 && ((v492 | v481) & 1) == 0;
        if ((v454 & 1) == 0 && v225)
        {
          v595 = v525;
          v596 = v526;
          v597 = v527;
          v594 = v524;
          v593 = v523;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468C2A0;
          v589 = (__int128)xmmword_22468C2B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x186000001C6), xmmword_22468C2B0);
        }
      }
      v226 = (v463 & 1) == 0 && ((v492 | v481) & 1) == 0;
      if (v226 && (v476 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C2C0;
        v584 = (__int128)xmmword_22468C2D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x186000001C6), xmmword_22468C2D0);
      }
    }
    if (((v487 | v223) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      *(_QWORD *)&v573 = 0xB0A0B0A0E0D0E0DLL;
      v584 = v564;
      v583 = v563;
      v578 = xmmword_22468C2E0;
      v579 = (__int128)xmmword_22468C2F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x6000001C6), xmmword_22468C2F0);
      v227 = (v208 & 0x40000000) == 0 && ((v481 | v224) & 1) == 0;
      if ((v451 & 1) == 0 && v227)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        *(_QWORD *)&v568 = 0xA0A0D0D0A0A0D0DLL;
        v579 = v564;
        v578 = v563;
        v573 = xmmword_22468C300;
        v574 = (__int128)xmmword_22468C310;
        *(_QWORD *)&v548 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 0, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v548, COERCE_DOUBLE(0x186000001C6), xmmword_22468C310);
      }
    }
    v228 = (v476 & 1) == 0 && ((v481 | v224) & 1) == 0;
    if (v228 && (v509 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C320;
      v569 = (__int128)xmmword_22468C330;
      *(_QWORD *)&v604[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 0, 7, (uint64_t)&v548, (uint64_t)&v568, (uint64_t)v604, COERCE_DOUBLE(0x186000001C6), xmmword_22468C330);
    }
  }
  v229 = v28[19];
  if ((v229 & 0x80000000) != 0)
  {
    v232 = *v516;
    v233 = *(_DWORD *)(v27 + 2040);
    v234 = **v516;
    if (**v516)
      goto LABEL_634;
  }
  else
  {
    v230 = *(_QWORD *)(v27 + 2328);
    if (v229 >= (*(_QWORD *)(v27 + 2336) - v230) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v230 = *(_QWORD *)(v27 + 2328);
    }
    v231 = v230 + (v229 << 11);
    v232 = *v516;
    v233 = *(_DWORD *)(v231 + 1760);
    v234 = **v516;
    if (**v516)
    {
LABEL_634:
      v235 = v28[19];
      if ((v235 & 0x80000000) == 0)
        goto LABEL_635;
LABEL_654:
      v237 = *(_DWORD *)(v27 + 2296);
      if (v234)
        goto LABEL_639;
      goto LABEL_655;
    }
  }
  if ((v233 & 0x10000000) != 0)
    v242 = 0x40000000;
  else
    v242 = 0x80000000;
  if ((v233 & 0x20000000) != 0)
    v233 = v242;
  else
    v233 &= 0xCFFFFFFF;
  v235 = v28[19];
  if ((v235 & 0x80000000) != 0)
    goto LABEL_654;
LABEL_635:
  v236 = *(_QWORD *)(v27 + 2328);
  if (v235 >= (*(_QWORD *)(v27 + 2336) - v236) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v236 = *(_QWORD *)(v27 + 2328);
    v232 = *v516;
    v234 = **v516;
  }
  v237 = *(_DWORD *)(v236 + (v235 << 11) + 2016);
  if (v234)
  {
LABEL_639:
    v238 = v28[22];
    if ((v238 & 0x80000000) == 0)
      goto LABEL_640;
LABEL_662:
    v240 = *(_DWORD *)(v27 + 1816);
    if (v234)
      goto LABEL_644;
    goto LABEL_663;
  }
LABEL_655:
  if ((v237 & 0x10000000) != 0)
    v243 = 0x40000000;
  else
    v243 = 0x80000000;
  if ((v237 & 0x20000000) != 0)
    v237 = v243;
  else
    v237 &= 0xCFFFFFFF;
  v238 = v28[22];
  if ((v238 & 0x80000000) != 0)
    goto LABEL_662;
LABEL_640:
  v239 = *(_QWORD *)(v27 + 2328);
  if (v238 >= (*(_QWORD *)(v27 + 2336) - v239) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v239 = *(_QWORD *)(v27 + 2328);
    v232 = *v516;
    v234 = **v516;
  }
  v240 = *(_DWORD *)(v239 + (v238 << 11) + 1536);
  if (v234)
  {
LABEL_644:
    v241 = v28[22];
    if ((v241 & 0x80000000) != 0)
      goto LABEL_715;
    goto LABEL_670;
  }
LABEL_663:
  if ((v240 & 0x10000000) != 0)
    v244 = 0x40000000;
  else
    v244 = 0x80000000;
  if ((v240 & 0x20000000) != 0)
    v240 = v244;
  else
    v240 &= 0xCFFFFFFF;
  v241 = v28[22];
  if ((v241 & 0x80000000) != 0)
    goto LABEL_715;
LABEL_670:
  v245 = *(_QWORD *)(v27 + 2328);
  v246 = (*(_QWORD *)(v27 + 2336) - v245) >> 11;
  if (v246 > v241)
    goto LABEL_674;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v232 = *v516;
  v241 = v28[22];
  if ((v241 & 0x80000000) != 0)
  {
LABEL_715:
    v247 = *(_DWORD *)(v27 + 1848);
    if (*v232)
      goto LABEL_684;
    goto LABEL_678;
  }
  v245 = *(_QWORD *)(v27 + 2328);
  v246 = (*(_QWORD *)(v27 + 2336) - v245) >> 11;
LABEL_674:
  if (v246 <= v241)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v245 = *(_QWORD *)(v27 + 2328);
    v232 = *v516;
  }
  v247 = *(_DWORD *)(v245 + (v241 << 11) + 1568);
  if (!*v232)
  {
LABEL_678:
    if ((v247 & 0x10000000) != 0)
      v248 = 0x40000000;
    else
      v248 = 0x80000000;
    if ((v247 & 0x20000000) != 0)
      v247 = v248;
    else
      v247 &= 0xCFFFFFFF;
  }
LABEL_684:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v214 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    *(_QWORD *)&v598 = 0x171617160E0D0E0DLL;
    v544 = v554;
    v543 = v553;
    v538 = xmmword_22468C340;
    v539 = (__int128)xmmword_22468C350;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 0, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x7000001C7), xmmword_22468C350);
    if ((v514 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C360;
      v599 = (__int128)xmmword_22468C370;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 0, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x7000001C7), xmmword_22468C370);
      if (((v487 | v223) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        *(_QWORD *)&v588 = 0xB0A0E0D0B0A0E0DLL;
        v598 = v553;
        v599 = v554;
        v593 = xmmword_22468C380;
        v594 = (__int128)xmmword_22468C390;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 0, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x7000001C7), xmmword_22468C390);
        v249 = (v504 & 1) == 0 && ((v481 | v224) & 1) == 0;
        if ((v451 & 1) == 0 && v249)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xA0A0A0A0D0D0D0DLL;
          v588 = xmmword_22468C3A0;
          v589 = (__int128)xmmword_22468C3B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 0, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x187000001C7), xmmword_22468C3B0);
        }
      }
      v250 = (v476 & 1) == 0 && ((v481 | v224) & 1) == 0;
      if (v250 && (v509 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        v589 = v569;
        v588 = v568;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C3C0;
        v584 = (__int128)xmmword_22468C3D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 0, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x187000001C7), xmmword_22468C3D0);
      }
    }
    v251 = (v240 & 0x40000000 | v224 & 1) == 0;
    if (!(v237 & 0x40000000 | v223 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      v584 = v569;
      v583 = v568;
      *(_QWORD *)&v573 = 0x14130B0A17160E0DLL;
      v578 = xmmword_22468C3E0;
      v579 = (__int128)xmmword_22468C3F0;
      *(_QWORD *)&v548 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 0, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v548, COERCE_DOUBLE(0x7000001C7), xmmword_22468C3F0);
      v252 = (v233 & 0x40000000) == 0 && v251;
      if ((v504 & 1) == 0 && v252)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v548 = 0x131316160A0A0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_22468C400;
        v574 = (__int128)xmmword_22468C410;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 0, 7, (uint64_t)&v548, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x187000001C7), xmmword_22468C410);
      }
    }
    v253 = (v509 & 1) == 0 && v251;
    if (v253 && (v247 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      *(_QWORD *)&v604[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v548 = xmmword_22468C420;
      v549 = (__int128)xmmword_22468C430;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 0, 7, (uint64_t)v604, (uint64_t)&v548, (uint64_t)v605, COERCE_DOUBLE(0x187000001C7), xmmword_22468C430);
    }
  }
  v254 = v470[2];
  v515 = a2[1];
  v517 = *a2;
  v521 = v459[3];
  v522 = v459[4];
  v519 = v459[1];
  v520 = v459[2];
  v518 = *v459;
  v458 = *(_OWORD *)v470;
  v505 = (_BYTE **)a2[2];
  v510 = *v470;
  v255 = *((_DWORD *)v254 + 384);
  v256 = ***v470;
  if (***v470)
  {
    v257 = *((_DWORD *)v254 + 448);
    v258 = *((_DWORD *)v254 + 392);
    v259 = *((_DWORD *)v254 + 400);
    v498 = *((_DWORD *)v254 + 456);
    if ((v498 & 0x40000000) == 0)
    {
LABEL_714:
      v260 = 0;
      v261 = 0;
      v262 = 0;
      v263 = 0;
      v264 = 0;
      goto LABEL_767;
    }
  }
  else
  {
    if ((v255 & 0x20000000) != 0)
      v255 *= 4;
    v265 = *((_DWORD *)v254 + 448);
    if ((v265 & 0x20000000) != 0)
      v257 = 4 * v265;
    else
      v257 = *((_DWORD *)v254 + 448);
    v266 = *((_DWORD *)v254 + 392);
    if ((v266 & 0x20000000) != 0)
      v258 = 4 * v266;
    else
      v258 = *((_DWORD *)v254 + 392);
    v267 = *((_DWORD *)v254 + 456);
    if ((v267 & 0x20000000) != 0)
      v268 = 4 * v267;
    else
      v268 = *((_DWORD *)v254 + 456);
    v269 = *((_DWORD *)v254 + 400);
    if ((v269 & 0x10000000) != 0)
      v270 = 0x40000000;
    else
      v270 = 0x80000000;
    if ((v269 & 0x20000000) != 0)
      v259 = v270;
    else
      v259 = v269 & 0xCFFFFFFF;
    v498 = v268;
    if ((v268 & 0x40000000) == 0)
      goto LABEL_714;
  }
  v271 = *(unsigned int *)(v515 + 16);
  if ((v271 & 0x80000000) != 0)
  {
    v273 = *(_DWORD *)(v517 + 1844);
    v274 = **v505;
    if (**v505)
      goto LABEL_740;
  }
  else
  {
    v272 = *(_QWORD *)(v517 + 2328);
    if (v271 >= (*(_QWORD *)(v517 + 2336) - v272) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v272 = *(_QWORD *)(v517 + 2328);
    }
    v273 = *(_DWORD *)(v272 + (v271 << 11) + 1564);
    v274 = **v505;
    if (**v505)
    {
LABEL_740:
      v275 = *(unsigned int *)(v515 + 16);
      if ((v275 & 0x80000000) == 0)
        goto LABEL_741;
LABEL_1274:
      v277 = *(_DWORD *)(v517 + 2100);
      if (v274)
        goto LABEL_745;
      goto LABEL_1275;
    }
  }
  if ((v273 & 0x10000000) != 0)
    v444 = 0x40000000;
  else
    v444 = 0x80000000;
  if ((v273 & 0x20000000) != 0)
    v273 = v444;
  else
    v273 &= 0xCFFFFFFF;
  v275 = *(unsigned int *)(v515 + 16);
  if ((v275 & 0x80000000) != 0)
    goto LABEL_1274;
LABEL_741:
  v276 = *(_QWORD *)(v517 + 2328);
  if (v275 >= (*(_QWORD *)(v517 + 2336) - v276) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v276 = *(_QWORD *)(v517 + 2328);
    v274 = **v505;
  }
  v277 = *(_DWORD *)(v276 + (v275 << 11) + 1820);
  if (v274)
  {
LABEL_745:
    v278 = *(unsigned int *)(v515 + 16);
    if ((v278 & 0x80000000) == 0)
      goto LABEL_746;
LABEL_1282:
    v280 = *(_DWORD *)(v517 + 1876);
    if (v274)
      goto LABEL_750;
    goto LABEL_1283;
  }
LABEL_1275:
  if ((v277 & 0x10000000) != 0)
    v445 = 0x40000000;
  else
    v445 = 0x80000000;
  if ((v277 & 0x20000000) != 0)
    v277 = v445;
  else
    v277 &= 0xCFFFFFFF;
  v278 = *(unsigned int *)(v515 + 16);
  if ((v278 & 0x80000000) != 0)
    goto LABEL_1282;
LABEL_746:
  v279 = *(_QWORD *)(v517 + 2328);
  if (v278 >= (*(_QWORD *)(v517 + 2336) - v279) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v279 = *(_QWORD *)(v517 + 2328);
    v274 = **v505;
  }
  v280 = *(_DWORD *)(v279 + (v278 << 11) + 1596);
  if (v274)
  {
LABEL_750:
    v281 = *(unsigned int *)(v515 + 16);
    if ((v281 & 0x80000000) == 0)
      goto LABEL_751;
LABEL_1290:
    v283 = *(_DWORD *)(v517 + 2132);
    if (v274)
      goto LABEL_755;
    goto LABEL_1291;
  }
LABEL_1283:
  if ((v280 & 0x10000000) != 0)
    v446 = 0x40000000;
  else
    v446 = 0x80000000;
  if ((v280 & 0x20000000) != 0)
    v280 = v446;
  else
    v280 &= 0xCFFFFFFF;
  v281 = *(unsigned int *)(v515 + 16);
  if ((v281 & 0x80000000) != 0)
    goto LABEL_1290;
LABEL_751:
  v282 = *(_QWORD *)(v517 + 2328);
  if (v281 >= (*(_QWORD *)(v517 + 2336) - v282) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v282 = *(_QWORD *)(v517 + 2328);
    v274 = **v505;
  }
  v283 = *(_DWORD *)(v282 + (v281 << 11) + 1852);
  if (v274)
  {
LABEL_755:
    v284 = *(unsigned int *)(v515 + 16);
    if ((v284 & 0x80000000) == 0)
      goto LABEL_756;
    goto LABEL_1298;
  }
LABEL_1291:
  if ((v283 & 0x10000000) != 0)
    v447 = 0x40000000;
  else
    v447 = 0x80000000;
  if ((v283 & 0x20000000) != 0)
    v283 = v447;
  else
    v283 &= 0xCFFFFFFF;
  v284 = *(unsigned int *)(v515 + 16);
  if ((v284 & 0x80000000) == 0)
  {
LABEL_756:
    v285 = *(_QWORD *)(v517 + 2328);
    if (v284 >= (*(_QWORD *)(v517 + 2336) - v285) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v285 = *(_QWORD *)(v517 + 2328);
      v274 = **v505;
    }
    v286 = v285 + (v284 << 11);
    v264 = (v273 >> 30) & 1;
    v263 = (v277 >> 30) & 1;
    v262 = (v280 >> 30) & 1;
    v287 = *(_DWORD *)(v286 + 1628);
    v261 = (v283 >> 30) & 1;
    if (v274)
      goto LABEL_766;
    goto LABEL_760;
  }
LABEL_1298:
  v264 = (v273 >> 30) & 1;
  v263 = (v277 >> 30) & 1;
  v262 = (v280 >> 30) & 1;
  v287 = *(_DWORD *)(v517 + 1908);
  v261 = (v283 >> 30) & 1;
  if (!v274)
  {
LABEL_760:
    if ((v287 & 0x10000000) != 0)
      v288 = 0x40000000;
    else
      v288 = 0x80000000;
    if ((v287 & 0x20000000) != 0)
      v287 = v288;
    else
      v287 &= 0xCFFFFFFF;
  }
LABEL_766:
  v260 = (v287 >> 30) & 1;
  v256 = **v510;
LABEL_767:
  v471 = v255 >> 30;
  v550 = v520;
  v551 = v521;
  v552 = v522;
  v549 = v519;
  v548 = v518;
  v289 = *((_DWORD *)v254 + 385);
  if (v256)
  {
    v290 = *((_DWORD *)v254 + 449);
    v291 = *((_DWORD *)v254 + 393);
    v493 = *((_DWORD *)v254 + 457);
    v292 = *((_DWORD *)v254 + 401);
  }
  else
  {
    if ((v289 & 0x10000000) != 0)
      v293 = 0x40000000;
    else
      v293 = 0x80000000;
    if ((v289 & 0x20000000) != 0)
      v289 = v293;
    else
      v289 &= 0xCFFFFFFF;
    v294 = *((_DWORD *)v254 + 449);
    if ((v294 & 0x10000000) != 0)
      v295 = 0x40000000;
    else
      v295 = 0x80000000;
    if ((v294 & 0x20000000) != 0)
      v290 = v295;
    else
      v290 = v294 & 0xCFFFFFFF;
    v296 = *((_DWORD *)v254 + 393);
    if ((v296 & 0x10000000) != 0)
      v297 = 0x40000000;
    else
      v297 = 0x80000000;
    if ((v296 & 0x20000000) != 0)
      v291 = v297;
    else
      v291 = v296 & 0xCFFFFFFF;
    v298 = *((_DWORD *)v254 + 457);
    if ((v298 & 0x10000000) != 0)
      v299 = 0x40000000;
    else
      v299 = 0x80000000;
    if ((v298 & 0x20000000) != 0)
      v300 = v299;
    else
      v300 = v298 & 0xCFFFFFFF;
    v493 = v300;
    v301 = *((_DWORD *)v254 + 401);
    if ((v301 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v301 & 0x20000000) == 0)
      v292 = v301 & 0xCFFFFFFF;
  }
  v302 = v258 >> 30;
  v303 = v257 >> 30;
  v304 = v259 >> 30;
  v455 = v289 >> 30;
  v482 = v291 >> 30;
  v488 = v290 >> 30;
  v468 = v292 >> 30;
  if ((v498 & 0x40000000) != 0)
  {
    v545 = v520;
    v546 = v521;
    v547 = v522;
    v544 = v519;
    v543 = v518;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C440;
    v539 = (__int128)xmmword_22468C450;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 0, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x8000001C8), xmmword_22468C450);
    if (!v261)
    {
      v540 = v520;
      v541 = v521;
      v542 = v522;
      *(_QWORD *)&v593 = 0x5040E0D05040E0DLL;
      v539 = v519;
      v538 = v518;
      v598 = xmmword_22468C460;
      v599 = (__int128)xmmword_22468C470;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 0, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x8000001C8), xmmword_22468C470);
      v305 = (v262 | v302 & 1) == 0;
      if (!(v263 | ((v257 & 0x40000000) != 0)))
      {
        v600 = v520;
        v601 = v521;
        v602 = v522;
        *(_QWORD *)&v588 = 0x50405040E0D0E0DLL;
        v598 = v518;
        v599 = v519;
        v593 = xmmword_22468C480;
        v594 = (__int128)xmmword_22468C490;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 0, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x8000001C8), xmmword_22468C490);
        v306 = (v471 & 1) == 0 && v305;
        if (!v264 && v306)
        {
          v595 = v520;
          v596 = v521;
          v597 = v522;
          v594 = v519;
          v593 = v518;
          *(_QWORD *)&v583 = 0x4040D0D04040D0DLL;
          v588 = xmmword_22468C4A0;
          v589 = (__int128)xmmword_22468C4B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 0, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x188000001C8), xmmword_22468C4B0);
        }
      }
      if (v260)
        v307 = 0;
      else
        v307 = v305;
      if (v307 && (v304 & 1) == 0)
      {
        v590 = v520;
        v591 = v521;
        v592 = v522;
        *(_QWORD *)&v578 = 0x40404040D0D0D0DLL;
        v589 = v519;
        v588 = v518;
        v583 = xmmword_22468C4C0;
        v584 = (__int128)xmmword_22468C4D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 0, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x188000001C8), xmmword_22468C4D0);
      }
    }
    if (((v303 | v488) & 1) == 0)
    {
      v585 = v520;
      v586 = v521;
      v587 = v522;
      v584 = v519;
      v583 = v518;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C4E0;
      v579 = (__int128)xmmword_22468C4F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 0, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x8000001C8), xmmword_22468C4F0);
      v308 = (v455 & 1) == 0 && ((v302 | v482) & 1) == 0;
      if ((v471 & 1) == 0 && v308)
      {
        v580 = v520;
        v581 = v521;
        v582 = v522;
        v579 = v519;
        v578 = v518;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468C500;
        v574 = (__int128)xmmword_22468C510;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 0, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x188000001C8), xmmword_22468C510);
      }
    }
    v309 = (v304 & 1) == 0 && ((v302 | v482) & 1) == 0;
    if (v309 && (v468 & 1) == 0)
    {
      v575 = v520;
      v576 = v521;
      v577 = v522;
      v574 = v519;
      v573 = v518;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C520;
      v569 = (__int128)xmmword_22468C530;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 0, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x188000001C8), xmmword_22468C530);
    }
  }
  v530 = v550;
  v531 = v551;
  v532 = v552;
  v528 = v548;
  v529 = v549;
  v310 = *((_DWORD *)v254 + 386);
  if (**v510)
  {
    v311 = *((_DWORD *)v254 + 450);
    v312 = *((_DWORD *)v254 + 394);
    v313 = *((_DWORD *)v254 + 458);
    v314 = *((_DWORD *)v254 + 402);
  }
  else
  {
    if ((v310 & 0x10000000) != 0)
      v315 = 0x40000000;
    else
      v315 = 0x80000000;
    if ((v310 & 0x20000000) != 0)
      v310 = v315;
    else
      v310 &= 0xCFFFFFFF;
    v316 = *((_DWORD *)v254 + 450);
    if ((v316 & 0x10000000) != 0)
      v317 = 0x40000000;
    else
      v317 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v311 = v317;
    else
      v311 = v316 & 0xCFFFFFFF;
    v318 = *((_DWORD *)v254 + 394);
    if ((v318 & 0x10000000) != 0)
      v319 = 0x40000000;
    else
      v319 = 0x80000000;
    if ((v318 & 0x20000000) != 0)
      v312 = v319;
    else
      v312 = v318 & 0xCFFFFFFF;
    v320 = *((_DWORD *)v254 + 458);
    if ((v320 & 0x10000000) != 0)
      v321 = 0x40000000;
    else
      v321 = 0x80000000;
    if ((v320 & 0x20000000) != 0)
      v313 = v321;
    else
      v313 = v320 & 0xCFFFFFFF;
    v322 = *((_DWORD *)v254 + 402);
    if ((v322 & 0x10000000) != 0)
      v314 = 0x40000000;
    else
      v314 = 0x80000000;
    if ((v322 & 0x20000000) == 0)
      v314 = v322 & 0xCFFFFFFF;
  }
  v323 = v312 >> 30;
  v452 = v310 >> 30;
  v477 = v311 >> 30;
  v464 = v314 >> 30;
  v535 = v550;
  v536 = v551;
  v537 = v552;
  v533 = v548;
  v534 = v549;
  if ((v493 & 0x40000000) != 0)
  {
    v545 = v550;
    v546 = v551;
    v547 = v552;
    v544 = v549;
    v543 = v548;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C540;
    v539 = (__int128)xmmword_22468C550;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 1, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0x9000001C9), xmmword_22468C550);
    if ((v498 & 0x40000000) == 0)
    {
      v540 = v550;
      v541 = v551;
      v542 = v552;
      v539 = v549;
      v538 = v548;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C560;
      v599 = (__int128)xmmword_22468C570;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 1, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0x9000001C9), xmmword_22468C570);
      if (((v303 | v488) & 1) == 0)
      {
        v600 = v550;
        v601 = v551;
        v602 = v552;
        v598 = v548;
        v599 = v549;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468C580;
        v594 = (__int128)xmmword_22468C590;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 1, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0x9000001C9), xmmword_22468C590);
        v324 = (v455 & 1) == 0 && ((v302 | v482) & 1) == 0;
        if ((v471 & 1) == 0 && v324)
        {
          v595 = v550;
          v596 = v551;
          v597 = v552;
          v594 = v549;
          v593 = v548;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468C5A0;
          v589 = (__int128)xmmword_22468C5B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 1, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x189000001C9), xmmword_22468C5B0);
        }
      }
      v325 = (v304 & 1) == 0 && ((v302 | v482) & 1) == 0;
      if (v325 && (v468 & 1) == 0)
      {
        v590 = v535;
        v591 = v536;
        v592 = v537;
        v589 = v534;
        v588 = v533;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C5C0;
        v584 = (__int128)xmmword_22468C5D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 1, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x189000001C9), xmmword_22468C5D0);
      }
    }
    if (((v488 | v477) & 1) == 0)
    {
      v585 = v535;
      v586 = v536;
      v587 = v537;
      v584 = v534;
      v583 = v533;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C5E0;
      v579 = (__int128)xmmword_22468C5F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 1, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0x9000001C9), xmmword_22468C5F0);
      v326 = (v452 & 1) == 0 && ((v482 | v323) & 1) == 0;
      if ((v455 & 1) == 0 && v326)
      {
        v580 = v535;
        v581 = v536;
        v582 = v537;
        v579 = v534;
        v578 = v533;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468C600;
        v574 = (__int128)xmmword_22468C610;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 1, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x189000001C9), xmmword_22468C610);
      }
    }
    v327 = (v468 & 1) == 0 && ((v482 | v323) & 1) == 0;
    if (v327 && (v464 & 1) == 0)
    {
      v575 = v535;
      v576 = v536;
      v577 = v537;
      v574 = v534;
      v573 = v533;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C620;
      v569 = (__int128)xmmword_22468C630;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 1, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x189000001C9), xmmword_22468C630);
    }
  }
  v328 = *((_DWORD *)v254 + 387);
  if (**v510)
  {
    v329 = *((_DWORD *)v254 + 451);
    v330 = *((_DWORD *)v254 + 395);
    v331 = *((_DWORD *)v254 + 459);
    v332 = *((_DWORD *)v254 + 403);
  }
  else
  {
    if ((v328 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v328 & 0x20000000) != 0)
      v328 = v333;
    else
      v328 &= 0xCFFFFFFF;
    v334 = *((_DWORD *)v254 + 451);
    if ((v334 & 0x10000000) != 0)
      v335 = 0x40000000;
    else
      v335 = 0x80000000;
    if ((v334 & 0x20000000) != 0)
      v329 = v335;
    else
      v329 = v334 & 0xCFFFFFFF;
    v336 = *((_DWORD *)v254 + 395);
    if ((v336 & 0x10000000) != 0)
      v337 = 0x40000000;
    else
      v337 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v330 = v337;
    else
      v330 = v336 & 0xCFFFFFFF;
    v338 = *((_DWORD *)v254 + 459);
    if ((v338 & 0x10000000) != 0)
      v339 = 0x40000000;
    else
      v339 = 0x80000000;
    if ((v338 & 0x20000000) != 0)
      v331 = v339;
    else
      v331 = v338 & 0xCFFFFFFF;
    v340 = *((_DWORD *)v254 + 403);
    if ((v340 & 0x10000000) != 0)
      v332 = 0x40000000;
    else
      v332 = 0x80000000;
    if ((v340 & 0x20000000) == 0)
      v332 = v340 & 0xCFFFFFFF;
  }
  v472 = v330 >> 30;
  v448 = v328 >> 30;
  v499 = v329 >> 30;
  v460 = v332 >> 30;
  if ((v313 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C640;
    v539 = (__int128)xmmword_22468C650;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 2, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xA000001CALL), xmmword_22468C650);
    if ((v493 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C660;
      v599 = (__int128)xmmword_22468C670;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 2, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xA000001CALL), xmmword_22468C670);
      if (((v488 | v477) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468C680;
        v594 = (__int128)xmmword_22468C690;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 2, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xA000001CALL), xmmword_22468C690);
        v341 = (v452 & 1) == 0 && ((v482 | v323) & 1) == 0;
        if ((v455 & 1) == 0 && v341)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468C6A0;
          v589 = (__int128)xmmword_22468C6B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 2, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18A000001CALL), xmmword_22468C6B0);
        }
      }
      v342 = (v468 & 1) == 0 && ((v482 | v323) & 1) == 0;
      if (v342 && (v464 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C6C0;
        v584 = (__int128)xmmword_22468C6D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 2, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18A000001CALL), xmmword_22468C6D0);
      }
    }
    if (((v477 | v499) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C6E0;
      v579 = (__int128)xmmword_22468C6F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 2, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0xA000001CALL), xmmword_22468C6F0);
      v343 = (v448 & 1) == 0 && ((v323 | v472) & 1) == 0;
      if ((v452 & 1) == 0 && v343)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468C700;
        v574 = (__int128)xmmword_22468C710;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 2, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x18A000001CALL), xmmword_22468C710);
      }
    }
    v344 = (v464 & 1) == 0 && ((v323 | v472) & 1) == 0;
    if (v344 && (v460 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C720;
      v569 = (__int128)xmmword_22468C730;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 2, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x18A000001CALL), xmmword_22468C730);
    }
  }
  v345 = *((_DWORD *)v254 + 388);
  if (**v510)
  {
    v346 = *((_DWORD *)v254 + 452);
    v347 = *((_DWORD *)v254 + 396);
    v348 = *((_DWORD *)v254 + 460);
    v349 = *((_DWORD *)v254 + 404);
  }
  else
  {
    if ((v345 & 0x10000000) != 0)
      v350 = 0x40000000;
    else
      v350 = 0x80000000;
    if ((v345 & 0x20000000) != 0)
      v345 = v350;
    else
      v345 &= 0xCFFFFFFF;
    v351 = *((_DWORD *)v254 + 452);
    if ((v351 & 0x10000000) != 0)
      v352 = 0x40000000;
    else
      v352 = 0x80000000;
    if ((v351 & 0x20000000) != 0)
      v346 = v352;
    else
      v346 = v351 & 0xCFFFFFFF;
    v353 = *((_DWORD *)v254 + 396);
    if ((v353 & 0x10000000) != 0)
      v354 = 0x40000000;
    else
      v354 = 0x80000000;
    if ((v353 & 0x20000000) != 0)
      v347 = v354;
    else
      v347 = v353 & 0xCFFFFFFF;
    v355 = *((_DWORD *)v254 + 460);
    if ((v355 & 0x10000000) != 0)
      v356 = 0x40000000;
    else
      v356 = 0x80000000;
    if ((v355 & 0x20000000) != 0)
      v348 = v356;
    else
      v348 = v355 & 0xCFFFFFFF;
    v357 = *((_DWORD *)v254 + 404);
    if ((v357 & 0x10000000) != 0)
      v349 = 0x40000000;
    else
      v349 = 0x80000000;
    if ((v357 & 0x20000000) == 0)
      v349 = v357 & 0xCFFFFFFF;
  }
  v358 = v347 >> 30;
  v469 = v345 >> 30;
  v359 = v346 >> 30;
  v483 = v349 >> 30;
  if ((v331 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C740;
    v539 = (__int128)xmmword_22468C750;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 3, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xB000001CBLL), xmmword_22468C750);
    if ((v313 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C760;
      v599 = (__int128)xmmword_22468C770;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 3, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xB000001CBLL), xmmword_22468C770);
      v360 = ((v323 | v472) & 1) == 0;
      if (((v477 | v499) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468C780;
        v594 = (__int128)xmmword_22468C790;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 3, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xB000001CBLL), xmmword_22468C790);
        v361 = (v448 & 1) == 0 && v360;
        if ((v452 & 1) == 0 && v361)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468C7A0;
          v589 = (__int128)xmmword_22468C7B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 3, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18B000001CBLL), xmmword_22468C7B0);
        }
      }
      v362 = (v464 & 1) == 0 && v360;
      if (v362 && (v460 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C7C0;
        v584 = (__int128)xmmword_22468C7D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 3, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18B000001CBLL), xmmword_22468C7D0);
      }
    }
    if (((v499 | v359) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C7E0;
      v579 = (__int128)xmmword_22468C7F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 3, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0xB000001CBLL), xmmword_22468C7F0);
      v363 = (v469 & 1) == 0 && ((v472 | v358) & 1) == 0;
      if ((v448 & 1) == 0 && v363)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468C800;
        v574 = (__int128)xmmword_22468C810;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 3, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x18B000001CBLL), xmmword_22468C810);
      }
    }
    v364 = (v460 & 1) == 0 && ((v472 | v358) & 1) == 0;
    if (v364 && (v483 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C820;
      v569 = (__int128)xmmword_22468C830;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 3, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x18B000001CBLL), xmmword_22468C830);
    }
  }
  v365 = *((_DWORD *)v254 + 389);
  if (**v510)
  {
    v366 = *((_DWORD *)v254 + 453);
    v367 = *((_DWORD *)v254 + 397);
    v368 = *((_DWORD *)v254 + 461);
    v369 = *((_DWORD *)v254 + 405);
  }
  else
  {
    if ((v365 & 0x10000000) != 0)
      v370 = 0x40000000;
    else
      v370 = 0x80000000;
    if ((v365 & 0x20000000) != 0)
      v365 = v370;
    else
      v365 &= 0xCFFFFFFF;
    v371 = *((_DWORD *)v254 + 453);
    if ((v371 & 0x10000000) != 0)
      v372 = 0x40000000;
    else
      v372 = 0x80000000;
    if ((v371 & 0x20000000) != 0)
      v366 = v372;
    else
      v366 = v371 & 0xCFFFFFFF;
    v373 = *((_DWORD *)v254 + 397);
    if ((v373 & 0x10000000) != 0)
      v374 = 0x40000000;
    else
      v374 = 0x80000000;
    if ((v373 & 0x20000000) != 0)
      v367 = v374;
    else
      v367 = v373 & 0xCFFFFFFF;
    v375 = *((_DWORD *)v254 + 461);
    if ((v375 & 0x10000000) != 0)
      v376 = 0x40000000;
    else
      v376 = 0x80000000;
    if ((v375 & 0x20000000) != 0)
      v368 = v376;
    else
      v368 = v375 & 0xCFFFFFFF;
    v377 = *((_DWORD *)v254 + 405);
    if ((v377 & 0x10000000) != 0)
      v369 = 0x40000000;
    else
      v369 = 0x80000000;
    if ((v377 & 0x20000000) == 0)
      v369 = v377 & 0xCFFFFFFF;
  }
  v378 = v367 >> 30;
  v465 = v365 >> 30;
  v494 = v366 >> 30;
  v478 = v369 >> 30;
  if ((v348 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C840;
    v539 = (__int128)xmmword_22468C850;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 4, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xC000001CCLL), xmmword_22468C850);
    if ((v331 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C860;
      v599 = (__int128)xmmword_22468C870;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 4, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xC000001CCLL), xmmword_22468C870);
      if (((v499 | v359) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468C880;
        v594 = (__int128)xmmword_22468C890;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 4, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xC000001CCLL), xmmword_22468C890);
        v379 = (v469 & 1) == 0 && ((v472 | v358) & 1) == 0;
        if ((v448 & 1) == 0 && v379)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468C8A0;
          v589 = (__int128)xmmword_22468C8B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 4, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18C000001CCLL), xmmword_22468C8B0);
        }
      }
      v380 = (v460 & 1) == 0 && ((v472 | v358) & 1) == 0;
      if (v380 && (v483 & 1) == 0)
      {
        v590 = v530;
        v591 = v531;
        v592 = v532;
        v589 = v529;
        v588 = v528;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C8C0;
        v584 = (__int128)xmmword_22468C8D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 4, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18C000001CCLL), xmmword_22468C8D0);
      }
    }
    if (((v359 | v494) & 1) == 0)
    {
      v585 = v530;
      v586 = v531;
      v587 = v532;
      v584 = v529;
      v583 = v528;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C8E0;
      v579 = (__int128)xmmword_22468C8F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 4, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0xC000001CCLL), xmmword_22468C8F0);
      v381 = (v465 & 1) == 0 && ((v358 | v378) & 1) == 0;
      if ((v469 & 1) == 0 && v381)
      {
        v580 = v530;
        v581 = v531;
        v582 = v532;
        v579 = v529;
        v578 = v528;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468C900;
        v574 = (__int128)xmmword_22468C910;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 4, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x18C000001CCLL), xmmword_22468C910);
      }
    }
    v382 = (v483 & 1) == 0 && ((v358 | v378) & 1) == 0;
    if (v382 && (v478 & 1) == 0)
    {
      v575 = v530;
      v576 = v531;
      v577 = v532;
      v574 = v529;
      v573 = v528;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468C920;
      v569 = (__int128)xmmword_22468C930;
      *(_QWORD *)&v558 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 4, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x18C000001CCLL), xmmword_22468C930);
    }
  }
  v383 = *((_DWORD *)v254 + 390);
  if (**v510)
  {
    v384 = *((_DWORD *)v254 + 454);
    v385 = *((_DWORD *)v254 + 398);
    v386 = *((_DWORD *)v254 + 462);
    v387 = *((_DWORD *)v254 + 406);
  }
  else
  {
    if ((v383 & 0x10000000) != 0)
      v388 = 0x40000000;
    else
      v388 = 0x80000000;
    if ((v383 & 0x20000000) != 0)
      v383 = v388;
    else
      v383 &= 0xCFFFFFFF;
    v389 = *((_DWORD *)v254 + 454);
    if ((v389 & 0x10000000) != 0)
      v390 = 0x40000000;
    else
      v390 = 0x80000000;
    if ((v389 & 0x20000000) != 0)
      v384 = v390;
    else
      v384 = v389 & 0xCFFFFFFF;
    v391 = *((_DWORD *)v254 + 398);
    if ((v391 & 0x10000000) != 0)
      v392 = 0x40000000;
    else
      v392 = 0x80000000;
    if ((v391 & 0x20000000) != 0)
      v385 = v392;
    else
      v385 = v391 & 0xCFFFFFFF;
    v393 = *((_DWORD *)v254 + 462);
    if ((v393 & 0x10000000) != 0)
      v394 = 0x40000000;
    else
      v394 = 0x80000000;
    if ((v393 & 0x20000000) != 0)
      v386 = v394;
    else
      v386 = v393 & 0xCFFFFFFF;
    v395 = *((_DWORD *)v254 + 406);
    if ((v395 & 0x10000000) != 0)
      v387 = 0x40000000;
    else
      v387 = 0x80000000;
    if ((v395 & 0x20000000) == 0)
      v387 = v395 & 0xCFFFFFFF;
  }
  v489 = v385 >> 30;
  v461 = v383 >> 30;
  v500 = v384 >> 30;
  v473 = v387 >> 30;
  v560 = v530;
  v561 = v531;
  v562 = v532;
  v559 = v529;
  v558 = v528;
  if ((v368 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468C940;
    v539 = (__int128)xmmword_22468C950;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 5, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xD000001CDLL), xmmword_22468C950);
    if ((v348 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468C960;
      v599 = (__int128)xmmword_22468C970;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 5, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xD000001CDLL), xmmword_22468C970);
      if (((v359 | v494) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468C980;
        v594 = (__int128)xmmword_22468C990;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 5, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xD000001CDLL), xmmword_22468C990);
        v396 = (v465 & 1) == 0 && ((v358 | v378) & 1) == 0;
        if ((v469 & 1) == 0 && v396)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468C9A0;
          v589 = (__int128)xmmword_22468C9B0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 5, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18D000001CDLL), xmmword_22468C9B0);
        }
      }
      v397 = (v483 & 1) == 0 && ((v358 | v378) & 1) == 0;
      if (v397 && (v478 & 1) == 0)
      {
        v590 = v560;
        v591 = v561;
        v592 = v562;
        v589 = v559;
        v588 = v558;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468C9C0;
        v584 = (__int128)xmmword_22468C9D0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 5, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18D000001CDLL), xmmword_22468C9D0);
      }
    }
    if (((v494 | v500) & 1) == 0)
    {
      v585 = v560;
      v586 = v561;
      v587 = v562;
      v584 = v559;
      v583 = v558;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468C9E0;
      v579 = (__int128)xmmword_22468C9F0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 5, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0xD000001CDLL), xmmword_22468C9F0);
      v398 = (v461 & 1) == 0 && ((v378 | v489) & 1) == 0;
      if ((v465 & 1) == 0 && v398)
      {
        v580 = v560;
        v581 = v561;
        v582 = v562;
        v579 = v559;
        v578 = v558;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468CA00;
        v574 = (__int128)xmmword_22468CA10;
        *(_QWORD *)&v563 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 5, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)&v563, COERCE_DOUBLE(0x18D000001CDLL), xmmword_22468CA10);
      }
    }
    v399 = (v478 & 1) == 0 && ((v378 | v489) & 1) == 0;
    if (v399 && (v473 & 1) == 0)
    {
      v575 = v560;
      v576 = v561;
      v577 = v562;
      v574 = v559;
      v573 = v558;
      *(_QWORD *)&v563 = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468CA20;
      v569 = (__int128)xmmword_22468CA30;
      *(_QWORD *)&v553 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 5, 1, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v553, COERCE_DOUBLE(0x18D000001CDLL), xmmword_22468CA30);
    }
  }
  v555 = v530;
  v556 = v531;
  v557 = v532;
  v554 = v529;
  v553 = v528;
  v400 = *((_DWORD *)v254 + 391);
  if (**v510)
  {
    v401 = *((_DWORD *)v254 + 455);
    v402 = *((_DWORD *)v254 + 399);
    v403 = *((_DWORD *)v254 + 463);
    v404 = *((_DWORD *)v254 + 407);
  }
  else
  {
    if ((v400 & 0x10000000) != 0)
      v405 = 0x40000000;
    else
      v405 = 0x80000000;
    if ((v400 & 0x20000000) != 0)
      v400 = v405;
    else
      v400 &= 0xCFFFFFFF;
    v406 = *((_DWORD *)v254 + 455);
    if ((v406 & 0x10000000) != 0)
      v407 = 0x40000000;
    else
      v407 = 0x80000000;
    if ((v406 & 0x20000000) != 0)
      v401 = v407;
    else
      v401 = v406 & 0xCFFFFFFF;
    v408 = *((_DWORD *)v254 + 399);
    if ((v408 & 0x10000000) != 0)
      v409 = 0x40000000;
    else
      v409 = 0x80000000;
    if ((v408 & 0x20000000) != 0)
      v402 = v409;
    else
      v402 = v408 & 0xCFFFFFFF;
    v410 = *((_DWORD *)v254 + 463);
    if ((v410 & 0x10000000) != 0)
      v411 = 0x40000000;
    else
      v411 = 0x80000000;
    if ((v410 & 0x20000000) != 0)
      v403 = v411;
    else
      v403 = v410 & 0xCFFFFFFF;
    v412 = *((_DWORD *)v254 + 407);
    if ((v412 & 0x10000000) != 0)
      v404 = 0x40000000;
    else
      v404 = 0x80000000;
    if ((v412 & 0x20000000) == 0)
      v404 = v412 & 0xCFFFFFFF;
  }
  v413 = v402 >> 30;
  v484 = v400 >> 30;
  v414 = v401 >> 30;
  v511 = v404 >> 30;
  v565 = v530;
  v566 = v531;
  v567 = v532;
  v564 = v529;
  v563 = v528;
  if ((v386 & 0x40000000) != 0)
  {
    v545 = v530;
    v546 = v531;
    v547 = v532;
    v544 = v529;
    v543 = v528;
    *(_QWORD *)&v598 = 0xE0D0E0D0E0D0E0DLL;
    v538 = xmmword_22468CA40;
    v539 = (__int128)xmmword_22468CA50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 6, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xE000001CELL), xmmword_22468CA50);
    if ((v368 & 0x40000000) == 0)
    {
      v540 = v530;
      v541 = v531;
      v542 = v532;
      v539 = v529;
      v538 = v528;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468CA60;
      v599 = (__int128)xmmword_22468CA70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 6, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xE000001CELL), xmmword_22468CA70);
      if (((v494 | v500) & 1) == 0)
      {
        v600 = v530;
        v601 = v531;
        v602 = v532;
        v598 = v528;
        v599 = v529;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v593 = xmmword_22468CA80;
        v594 = (__int128)xmmword_22468CA90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 6, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xE000001CELL), xmmword_22468CA90);
        v415 = (v461 & 1) == 0 && ((v378 | v489) & 1) == 0;
        if ((v465 & 1) == 0 && v415)
        {
          v595 = v530;
          v596 = v531;
          v597 = v532;
          v594 = v529;
          v593 = v528;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468CAA0;
          v589 = (__int128)xmmword_22468CAB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 6, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18E000001CELL), xmmword_22468CAB0);
        }
      }
      v416 = (v478 & 1) == 0 && ((v378 | v489) & 1) == 0;
      if (v416 && (v473 & 1) == 0)
      {
        v590 = v565;
        v591 = v566;
        v592 = v567;
        v589 = v564;
        v588 = v563;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v583 = xmmword_22468CAC0;
        v584 = (__int128)xmmword_22468CAD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 6, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18E000001CELL), xmmword_22468CAD0);
      }
    }
    if (((v500 | v414) & 1) == 0)
    {
      v585 = v565;
      v586 = v566;
      v587 = v567;
      v584 = v564;
      v583 = v563;
      *(_QWORD *)&v573 = 0xE0D0E0D0E0D0E0DLL;
      v578 = xmmword_22468CAE0;
      v579 = (__int128)xmmword_22468CAF0;
      *(_QWORD *)&v568 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 6, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)&v568, COERCE_DOUBLE(0xE000001CELL), xmmword_22468CAF0);
      v417 = (v484 & 1) == 0 && ((v489 | v413) & 1) == 0;
      if ((v461 & 1) == 0 && v417)
      {
        v580 = v565;
        v581 = v566;
        v582 = v567;
        v579 = v564;
        v578 = v563;
        *(_QWORD *)&v568 = 0xD0D0D0D0D0D0D0DLL;
        v573 = xmmword_22468CB00;
        v574 = (__int128)xmmword_22468CB10;
        *(_QWORD *)&v604[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 6, 1, 7, (uint64_t)&v568, (uint64_t)&v573, (uint64_t)v604, COERCE_DOUBLE(0x18E000001CELL), xmmword_22468CB10);
      }
    }
    v418 = (v473 & 1) == 0 && ((v489 | v413) & 1) == 0;
    if (v418 && (v511 & 1) == 0)
    {
      v575 = v565;
      v576 = v566;
      v577 = v567;
      v574 = v564;
      v573 = v563;
      *(_QWORD *)&v604[0] = 0xD0D0D0D0D0D0D0DLL;
      v568 = xmmword_22468CB20;
      v569 = (__int128)xmmword_22468CB30;
      v605[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 6, 1, 7, (uint64_t)v604, (uint64_t)&v568, (uint64_t)v605, COERCE_DOUBLE(0x18E000001CELL), xmmword_22468CB30);
    }
  }
  v419 = *(unsigned int *)(v515 + 88);
  if ((v419 & 0x80000000) != 0)
  {
    v422 = *v505;
    v423 = *(_DWORD *)(v517 + 1816);
    v424 = **v505;
    if (**v505)
      goto LABEL_1185;
  }
  else
  {
    v420 = *(_QWORD *)(v517 + 2328);
    if (v419 >= (*(_QWORD *)(v517 + 2336) - v420) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v420 = *(_QWORD *)(v517 + 2328);
    }
    v421 = v420 + (v419 << 11);
    v422 = *v505;
    v423 = *(_DWORD *)(v421 + 1536);
    v424 = **v505;
    if (**v505)
    {
LABEL_1185:
      v425 = *(unsigned int *)(v515 + 88);
      if ((v425 & 0x80000000) == 0)
        goto LABEL_1186;
LABEL_1205:
      v427 = *(_DWORD *)(v517 + 2072);
      if (v424)
        goto LABEL_1190;
      goto LABEL_1206;
    }
  }
  if ((v423 & 0x10000000) != 0)
    v432 = 0x40000000;
  else
    v432 = 0x80000000;
  if ((v423 & 0x20000000) != 0)
    v423 = v432;
  else
    v423 &= 0xCFFFFFFF;
  v425 = *(unsigned int *)(v515 + 88);
  if ((v425 & 0x80000000) != 0)
    goto LABEL_1205;
LABEL_1186:
  v426 = *(_QWORD *)(v517 + 2328);
  if (v425 >= (*(_QWORD *)(v517 + 2336) - v426) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v426 = *(_QWORD *)(v517 + 2328);
    v422 = *v505;
    v424 = **v505;
  }
  v427 = *(_DWORD *)(v426 + (v425 << 11) + 1792);
  if (v424)
  {
LABEL_1190:
    v428 = *(unsigned int *)(v515 + 88);
    if ((v428 & 0x80000000) == 0)
      goto LABEL_1191;
LABEL_1213:
    v430 = *(_DWORD *)(v517 + 1848);
    if (v424)
      goto LABEL_1195;
    goto LABEL_1214;
  }
LABEL_1206:
  if ((v427 & 0x10000000) != 0)
    v433 = 0x40000000;
  else
    v433 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v427 = v433;
  else
    v427 &= 0xCFFFFFFF;
  v428 = *(unsigned int *)(v515 + 88);
  if ((v428 & 0x80000000) != 0)
    goto LABEL_1213;
LABEL_1191:
  v429 = *(_QWORD *)(v517 + 2328);
  if (v428 >= (*(_QWORD *)(v517 + 2336) - v429) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v429 = *(_QWORD *)(v517 + 2328);
    v422 = *v505;
    v424 = **v505;
  }
  v430 = *(_DWORD *)(v429 + (v428 << 11) + 1568);
  if (v424)
  {
LABEL_1195:
    v431 = *(unsigned int *)(v515 + 88);
    if ((v431 & 0x80000000) != 0)
      goto LABEL_1264;
    goto LABEL_1221;
  }
LABEL_1214:
  if ((v430 & 0x10000000) != 0)
    v434 = 0x40000000;
  else
    v434 = 0x80000000;
  if ((v430 & 0x20000000) != 0)
    v430 = v434;
  else
    v430 &= 0xCFFFFFFF;
  v431 = *(unsigned int *)(v515 + 88);
  if ((v431 & 0x80000000) != 0)
    goto LABEL_1264;
LABEL_1221:
  v435 = *(_QWORD *)(v517 + 2328);
  v436 = (*(_QWORD *)(v517 + 2336) - v435) >> 11;
  if (v436 > v431)
    goto LABEL_1225;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v422 = *v505;
  v431 = *(unsigned int *)(v515 + 88);
  if ((v431 & 0x80000000) != 0)
  {
LABEL_1264:
    v437 = *(_DWORD *)(v517 + 1880);
    if (*v422)
      goto LABEL_1235;
    goto LABEL_1229;
  }
  v435 = *(_QWORD *)(v517 + 2328);
  v436 = (*(_QWORD *)(v517 + 2336) - v435) >> 11;
LABEL_1225:
  if (v436 <= v431)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v435 = *(_QWORD *)(v517 + 2328);
    v422 = *v505;
  }
  v437 = *(_DWORD *)(v435 + (v431 << 11) + 1600);
  if (!*v422)
  {
LABEL_1229:
    if ((v437 & 0x10000000) != 0)
      v438 = 0x40000000;
    else
      v438 = 0x80000000;
    if ((v437 & 0x20000000) != 0)
      v437 = v438;
    else
      v437 &= 0xCFFFFFFF;
  }
LABEL_1235:
  v570 = v555;
  v571 = v556;
  v572 = v557;
  v569 = v554;
  v568 = v553;
  if ((v403 & 0x40000000) != 0)
  {
    v545 = v555;
    v546 = v556;
    v547 = v557;
    *(_QWORD *)&v598 = 0x171617160E0D0E0DLL;
    v544 = v554;
    v543 = v553;
    v538 = xmmword_22468CB40;
    v539 = (__int128)xmmword_22468CB50;
    *(_QWORD *)&v593 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v543, 7, 1, 7, (uint64_t)&v598, (uint64_t)&v538, (uint64_t)&v593, COERCE_DOUBLE(0xF000001CFLL), xmmword_22468CB50);
    if ((v386 & 0x40000000) == 0)
    {
      v540 = v555;
      v541 = v556;
      v542 = v557;
      v539 = v554;
      v538 = v553;
      *(_QWORD *)&v593 = 0xE0D0E0D0E0D0E0DLL;
      v598 = xmmword_22468CB60;
      v599 = (__int128)xmmword_22468CB70;
      *(_QWORD *)&v588 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v538, 7, 1, 7, (uint64_t)&v593, (uint64_t)&v598, (uint64_t)&v588, COERCE_DOUBLE(0xF000001CFLL), xmmword_22468CB70);
      if (((v500 | v414) & 1) == 0)
      {
        v600 = v555;
        v601 = v556;
        v602 = v557;
        *(_QWORD *)&v588 = 0xE0D0E0D0E0D0E0DLL;
        v598 = v553;
        v599 = v554;
        v593 = xmmword_22468CB80;
        v594 = (__int128)xmmword_22468CB90;
        *(_QWORD *)&v583 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v598, 7, 1, 7, (uint64_t)&v588, (uint64_t)&v593, (uint64_t)&v583, COERCE_DOUBLE(0xF000001CFLL), xmmword_22468CB90);
        v439 = (v484 & 1) == 0 && ((v489 | v413) & 1) == 0;
        if ((v461 & 1) == 0 && v439)
        {
          v595 = v555;
          v596 = v556;
          v597 = v557;
          v594 = v554;
          v593 = v553;
          *(_QWORD *)&v583 = 0xD0D0D0D0D0D0D0DLL;
          v588 = xmmword_22468CBA0;
          v589 = (__int128)xmmword_22468CBB0;
          *(_QWORD *)&v578 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v593, 7, 1, 7, (uint64_t)&v583, (uint64_t)&v588, (uint64_t)&v578, COERCE_DOUBLE(0x18F000001CFLL), xmmword_22468CBB0);
        }
      }
      v440 = (v473 & 1) == 0 && ((v489 | v413) & 1) == 0;
      if (v440 && (v511 & 1) == 0)
      {
        v590 = v570;
        v591 = v571;
        v592 = v572;
        *(_QWORD *)&v578 = 0xD0D0D0D0D0D0D0DLL;
        v589 = v569;
        v588 = v568;
        v583 = xmmword_22468CBC0;
        v584 = (__int128)xmmword_22468CBD0;
        *(_QWORD *)&v573 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v588, 7, 1, 7, (uint64_t)&v578, (uint64_t)&v583, (uint64_t)&v573, COERCE_DOUBLE(0x18F000001CFLL), xmmword_22468CBD0);
      }
    }
    if (!(v427 & 0x40000000 | v414 & 1))
    {
      v585 = v570;
      v586 = v571;
      v587 = v572;
      *(_QWORD *)&v573 = 0x17160E0D17160E0DLL;
      v584 = v569;
      v583 = v568;
      v578 = xmmword_22468CBE0;
      v579 = (__int128)xmmword_22468CBF0;
      *(_QWORD *)&v604[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v583, 7, 1, 7, (uint64_t)&v573, (uint64_t)&v578, (uint64_t)v604, COERCE_DOUBLE(0xF000001CFLL), xmmword_22468CBF0);
      v441 = (v423 & 0x40000000) == 0 && (v430 & 0x40000000 | v413 & 1) == 0;
      if ((v484 & 1) == 0 && v441)
      {
        v580 = v570;
        v581 = v571;
        v582 = v572;
        *(_QWORD *)&v604[0] = 0x161616160D0D0D0DLL;
        v579 = v569;
        v578 = v568;
        v573 = xmmword_22468CC00;
        v574 = (__int128)xmmword_22468CC10;
        v605[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v578, 7, 1, 7, (uint64_t)v604, (uint64_t)&v573, (uint64_t)v605, COERCE_DOUBLE(0x18F000001CFLL), xmmword_22468CC10);
      }
    }
    v442 = (v511 & 1) == 0 && (v430 & 0x40000000 | v413 & 1) == 0;
    if (v442 && (v437 & 0x40000000) == 0)
    {
      v575 = v570;
      v576 = v571;
      v577 = v572;
      v605[0] = 0x16160D0D16160D0DLL;
      v574 = v569;
      v573 = v568;
      v604[0] = xmmword_22468CC20;
      v604[1] = xmmword_22468CC30;
      v603 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v573, 7, 1, 7, (uint64_t)v605, (uint64_t)v604, (uint64_t)&v603, COERCE_DOUBLE(0x18F000001CFLL), xmmword_22468CC30);
    }
  }
  v538 = v458;
  *(_QWORD *)&v539 = v254;
  *(_QWORD *)&v598 = v517;
  *((_QWORD *)&v598 + 1) = v515;
  *(_QWORD *)&v599 = v505;
  v547 = v522;
  v546 = v521;
  v545 = v520;
  v543 = v518;
  v544 = v519;
  return sub_223E4DEA0((unsigned __int8 ***)&v538, &v598, &v543);
}

unint64_t sub_223E4DEA0(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  _BOOL4 v125;
  _BOOL4 v126;
  _BOOL4 v127;
  _BOOL4 v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  _BOOL4 v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  _BOOL4 v161;
  _BOOL4 v162;
  _BOOL4 v163;
  _BOOL4 v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  _BOOL4 v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  _BOOL4 v198;
  _BOOL4 v199;
  _BOOL4 v200;
  _BOOL4 v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  unsigned int v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  _BOOL4 v223;
  _BOOL4 v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  unsigned __int8 **v228;
  unsigned int v229;
  int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  _BOOL4 v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  _BOOL4 v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  _BOOL4 v299;
  _BOOL4 v300;
  _BOOL4 v301;
  _BOOL4 v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  _BOOL4 v318;
  _BOOL4 v319;
  _BOOL4 v320;
  _BOOL4 v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  _BOOL4 v336;
  _BOOL4 v337;
  _BOOL4 v338;
  _BOOL4 v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  int v350;
  unsigned int v351;
  int v352;
  unsigned int v353;
  _BOOL4 v354;
  _BOOL4 v355;
  _BOOL4 v356;
  _BOOL4 v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  int v368;
  unsigned int v369;
  int v370;
  unsigned int v371;
  _BOOL4 v372;
  _BOOL4 v373;
  _BOOL4 v374;
  _BOOL4 v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  int v384;
  unsigned int v385;
  int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  unsigned int v390;
  _BOOL4 v391;
  _BOOL4 v392;
  _BOOL4 v393;
  _BOOL4 v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _BYTE *v398;
  unsigned int v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  unsigned int v403;
  unint64_t v404;
  uint64_t v405;
  unsigned int v406;
  unint64_t v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  unint64_t v412;
  unsigned int v413;
  unsigned int v414;
  _BOOL4 v415;
  _BOOL4 v416;
  _BOOL4 v417;
  _BOOL4 v418;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  uint64_t *v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  __int128 v437;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned __int8 **v474;
  _BYTE **v475;
  unsigned int v476;
  uint64_t v477;
  _BYTE **v478;
  unsigned int v479;
  _BYTE **v480;
  unsigned int v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  float32x4_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  _OWORD v578[2];
  _QWORD v579[3];

  v4 = a2;
  v579[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v480 = *a1;
  v6 = *((_DWORD *)v5 + 392);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 456);
    v9 = *((_DWORD *)v5 + 400);
    v10 = *((_DWORD *)v5 + 464);
    v11 = *((_DWORD *)v5 + 408);
    v484 = *a2;
    v468 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 456);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 456);
    v18 = *((_DWORD *)v5 + 400);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 400);
    v19 = *((_DWORD *)v5 + 464);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 464);
    v20 = *((_DWORD *)v5 + 408);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v484 = *a2;
    v468 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  v481 = v8;
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v484 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v484 + 2328);
    if (v23 >= (*(_QWORD *)(v484 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v24 = *(_QWORD *)(v484 + 2328);
      v10 = v468;
      v8 = v481;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1596);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v468;
      v8 = v481;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1852);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v485 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1628);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v49 + 2164);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v53;
    }
    v54 = a3;
    v55 = v11;
    v56 = v9;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 1884);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v476 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v468;
      v8 = v481;
      v38 = v64;
      v48 = v476;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  v16 = (v485 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1660);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v480 = *a1;
  v484 = *v61;
  v7 = ***a1;
  v9 = v56;
  v11 = v55;
  a3 = v54;
LABEL_91:
  v442 = v6 >> 30;
  v474 = (unsigned __int8 **)v4[2];
  v477 = v4[1];
  v494 = a3[2];
  v495 = a3[3];
  v496 = a3[4];
  v492 = *a3;
  v493 = a3[1];
  v70 = *((_DWORD *)v5 + 393);
  v430 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 457);
    v72 = *((_DWORD *)v5 + 401);
    v464 = *((_DWORD *)v5 + 465);
    v73 = *((_DWORD *)v5 + 409);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 457);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 401);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 465);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v464 = v81;
    v82 = *((_DWORD *)v5 + 409);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v447 = v11 >> 30;
  v427 = v70 >> 30;
  v456 = v72 >> 30;
  v460 = v71 >> 30;
  v504 = a3[2];
  v505 = a3[3];
  v506 = a3[4];
  v435 = v73 >> 30;
  v502 = *a3;
  v503 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v85 = v15;
    v86 = v16;
    v87 = a3[3];
    v519 = a3[2];
    v520 = v87;
    v521 = a3[4];
    v88 = *a3;
    v518 = a3[1];
    v517 = v88;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468CC40;
    v513 = (__int128)xmmword_22468CC50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 0, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x10000001D0), xmmword_22468CC50);
    if (!v13)
    {
      v514 = v504;
      v515 = v505;
      v516 = v506;
      *(_QWORD *)&v567 = 0x5040E0D05040E0DLL;
      v513 = v503;
      v512 = v502;
      v572 = xmmword_22468CC60;
      v573 = (__int128)xmmword_22468CC70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 0, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x10000001D0), xmmword_22468CC70);
      if (!(v85 | v84 & 1))
      {
        v574 = v504;
        v575 = v505;
        v576 = v506;
        *(_QWORD *)&v562 = 0x50405040E0D0E0DLL;
        v572 = v502;
        v573 = v503;
        v567 = xmmword_22468CC80;
        v568 = (__int128)xmmword_22468CC90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 0, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x10000001D0), xmmword_22468CC90);
        v89 = (v442 & 1) == 0 && (v14 | v83 & 1) == 0;
        if (!v86 && v89)
        {
          v569 = v504;
          v570 = v505;
          v571 = v506;
          v568 = v503;
          v567 = v502;
          *(_QWORD *)&v557 = 0x4040D0D04040D0DLL;
          v562 = xmmword_22468CCA0;
          v563 = (__int128)xmmword_22468CCB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 0, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x190000001D0), xmmword_22468CCB0);
        }
      }
      if (v12)
        v90 = 0;
      else
        v90 = (v14 | v83 & 1) == 0;
      if (v90 && (v11 & 0x40000000) == 0)
      {
        v564 = v504;
        v565 = v505;
        v566 = v506;
        *(_QWORD *)&v552 = 0x40404040D0D0D0DLL;
        v563 = v503;
        v562 = v502;
        v557 = xmmword_22468CCC0;
        v558 = (__int128)xmmword_22468CCD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 0, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x190000001D0), xmmword_22468CCD0);
      }
    }
    if (((v84 | v460) & 1) == 0)
    {
      v559 = v504;
      v560 = v505;
      v561 = v506;
      v558 = v503;
      v557 = v502;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468CCE0;
      v553 = (__int128)xmmword_22468CCF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 0, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x10000001D0), xmmword_22468CCF0);
      v91 = (v427 & 1) == 0 && ((v83 | v456) & 1) == 0;
      if ((v442 & 1) == 0 && v91)
      {
        v554 = v504;
        v555 = v505;
        v556 = v506;
        v553 = v503;
        v552 = v502;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468CD00;
        v548 = (__int128)xmmword_22468CD10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 0, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x190000001D0), xmmword_22468CD10);
      }
    }
    v92 = (v11 & 0x40000000) == 0 && ((v83 | v456) & 1) == 0;
    v10 = v468;
    if (v92 && (v435 & 1) == 0)
    {
      v549 = v504;
      v550 = v505;
      v551 = v506;
      v548 = v503;
      v547 = v502;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468CD20;
      v543 = xmmword_22468CD30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 0, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x190000001D0), xmmword_22468CD30);
      v10 = v468;
    }
  }
  v93 = *((_DWORD *)v5 + 394);
  if (**v480)
  {
    v94 = *((_DWORD *)v5 + 458);
    v95 = *((_DWORD *)v5 + 402);
    v96 = *((_DWORD *)v5 + 466);
    v97 = *((_DWORD *)v5 + 410);
  }
  else
  {
    if ((v93 & 0x10000000) != 0)
      v98 = 0x40000000;
    else
      v98 = 0x80000000;
    if ((v93 & 0x20000000) != 0)
      v93 = v98;
    else
      v93 &= 0xCFFFFFFF;
    v99 = *((_DWORD *)v5 + 458);
    if ((v99 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v99 & 0x20000000) != 0)
      v94 = v100;
    else
      v94 = v99 & 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 402);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v95 = v102;
    else
      v95 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 466);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v96 = v104;
    else
      v96 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 410);
    if ((v105 & 0x10000000) != 0)
      v97 = 0x40000000;
    else
      v97 = 0x80000000;
    if ((v105 & 0x20000000) == 0)
      v97 = v105 & 0xCFFFFFFF;
  }
  v452 = v95 >> 30;
  v425 = v93 >> 30;
  v469 = v94 >> 30;
  v106 = v97 >> 30;
  if ((v464 & 0x40000000) != 0)
  {
    v107 = (v10 & 0x40000000) == 0;
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468CD40;
    v513 = (__int128)xmmword_22468CD50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 1, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x11000001D1), xmmword_22468CD50);
    if (v107)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468CD60;
      v573 = (__int128)xmmword_22468CD70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 1, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x11000001D1), xmmword_22468CD70);
      if (((v84 | v460) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468CD80;
        v568 = (__int128)xmmword_22468CD90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 1, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x11000001D1), xmmword_22468CD90);
        v108 = (v427 & 1) == 0 && ((v83 | v456) & 1) == 0;
        if ((v442 & 1) == 0 && v108)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468CDA0;
          v563 = (__int128)xmmword_22468CDB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 1, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x191000001D1), xmmword_22468CDB0);
        }
      }
      v109 = (v447 & 1) == 0 && ((v83 | v456) & 1) == 0;
      if (v109 && (v435 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468CDC0;
        v558 = (__int128)xmmword_22468CDD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 1, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x191000001D1), xmmword_22468CDD0);
      }
    }
    if (((v460 | v469) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468CDE0;
      v553 = (__int128)xmmword_22468CDF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 1, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x11000001D1), xmmword_22468CDF0);
      v110 = (v425 & 1) == 0 && ((v456 | v452) & 1) == 0;
      if ((v427 & 1) == 0 && v110)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468CE00;
        v548 = (__int128)xmmword_22468CE10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 1, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x191000001D1), xmmword_22468CE10);
      }
    }
    v111 = (v435 & 1) == 0 && ((v456 | v452) & 1) == 0;
    if (v111 && (v106 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468CE20;
      v543 = xmmword_22468CE30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 1, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x191000001D1), xmmword_22468CE30);
    }
  }
  v112 = *((_DWORD *)v5 + 395);
  if (**v480)
  {
    v113 = *((_DWORD *)v5 + 459);
    v114 = *((_DWORD *)v5 + 403);
    v115 = *((_DWORD *)v5 + 467);
    v116 = *((_DWORD *)v5 + 411);
  }
  else
  {
    if ((v112 & 0x10000000) != 0)
      v117 = 0x40000000;
    else
      v117 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v112 = v117;
    else
      v112 &= 0xCFFFFFFF;
    v118 = *((_DWORD *)v5 + 459);
    if ((v118 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v118 & 0x20000000) != 0)
      v113 = v119;
    else
      v113 = v118 & 0xCFFFFFFF;
    v120 = *((_DWORD *)v5 + 403);
    if ((v120 & 0x10000000) != 0)
      v121 = 0x40000000;
    else
      v121 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v114 = v121;
    else
      v114 = v120 & 0xCFFFFFFF;
    v122 = *((_DWORD *)v5 + 467);
    if ((v122 & 0x10000000) != 0)
      v123 = 0x40000000;
    else
      v123 = 0x80000000;
    if ((v122 & 0x20000000) != 0)
      v115 = v123;
    else
      v115 = v122 & 0xCFFFFFFF;
    v124 = *((_DWORD *)v5 + 411);
    if ((v124 & 0x10000000) != 0)
      v116 = 0x40000000;
    else
      v116 = 0x80000000;
    if ((v124 & 0x20000000) == 0)
      v116 = v124 & 0xCFFFFFFF;
  }
  v424 = v112 >> 30;
  v443 = v114 >> 30;
  v448 = v113 >> 30;
  v432 = v116 >> 30;
  if ((v96 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468CE40;
    v513 = (__int128)xmmword_22468CE50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 2, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x12000001D2), xmmword_22468CE50);
    if ((v464 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468CE60;
      v573 = (__int128)xmmword_22468CE70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 2, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x12000001D2), xmmword_22468CE70);
      if (((v460 | v469) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468CE80;
        v568 = (__int128)xmmword_22468CE90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 2, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x12000001D2), xmmword_22468CE90);
        v125 = (v425 & 1) == 0 && ((v456 | v452) & 1) == 0;
        if ((v427 & 1) == 0 && v125)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468CEA0;
          v563 = (__int128)xmmword_22468CEB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 2, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x192000001D2), xmmword_22468CEB0);
        }
      }
      v126 = (v435 & 1) == 0 && ((v456 | v452) & 1) == 0;
      if (v126 && (v106 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468CEC0;
        v558 = (__int128)xmmword_22468CED0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 2, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x192000001D2), xmmword_22468CED0);
      }
    }
    if (((v469 | v448) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468CEE0;
      v553 = (__int128)xmmword_22468CEF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 2, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x12000001D2), xmmword_22468CEF0);
      v127 = (v424 & 1) == 0 && ((v452 | v443) & 1) == 0;
      if ((v425 & 1) == 0 && v127)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468CF00;
        v548 = (__int128)xmmword_22468CF10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 2, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x192000001D2), xmmword_22468CF10);
      }
    }
    v128 = (v106 & 1) == 0 && ((v452 | v443) & 1) == 0;
    if (v128 && (v432 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468CF20;
      v543 = xmmword_22468CF30;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 2, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x192000001D2), xmmword_22468CF30);
    }
  }
  v129 = *((_DWORD *)v5 + 396);
  if (**v480)
  {
    v130 = *((_DWORD *)v5 + 460);
    v131 = *((_DWORD *)v5 + 404);
    v132 = *((_DWORD *)v5 + 468);
    v133 = *((_DWORD *)v5 + 412);
  }
  else
  {
    if ((v129 & 0x10000000) != 0)
      v134 = 0x40000000;
    else
      v134 = 0x80000000;
    if ((v129 & 0x20000000) != 0)
      v129 = v134;
    else
      v129 &= 0xCFFFFFFF;
    v135 = *((_DWORD *)v5 + 460);
    if ((v135 & 0x10000000) != 0)
      v136 = 0x40000000;
    else
      v136 = 0x80000000;
    if ((v135 & 0x20000000) != 0)
      v130 = v136;
    else
      v130 = v135 & 0xCFFFFFFF;
    v137 = *((_DWORD *)v5 + 404);
    if ((v137 & 0x10000000) != 0)
      v138 = 0x40000000;
    else
      v138 = 0x80000000;
    if ((v137 & 0x20000000) != 0)
      v131 = v138;
    else
      v131 = v137 & 0xCFFFFFFF;
    v139 = *((_DWORD *)v5 + 468);
    if ((v139 & 0x10000000) != 0)
      v140 = 0x40000000;
    else
      v140 = 0x80000000;
    if ((v139 & 0x20000000) != 0)
      v132 = v140;
    else
      v132 = v139 & 0xCFFFFFFF;
    v141 = *((_DWORD *)v5 + 412);
    if ((v141 & 0x10000000) != 0)
      v133 = 0x40000000;
    else
      v133 = 0x80000000;
    if ((v141 & 0x20000000) == 0)
      v133 = v141 & 0xCFFFFFFF;
  }
  v428 = v129 >> 30;
  v461 = v131 >> 30;
  v465 = v130 >> 30;
  v142 = v133 >> 30;
  if ((v115 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468CF40;
    v513 = (__int128)xmmword_22468CF50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 3, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x13000001D3), xmmword_22468CF50);
    if ((v96 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468CF60;
      v573 = (__int128)xmmword_22468CF70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 3, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x13000001D3), xmmword_22468CF70);
      if (((v469 | v448) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468CF80;
        v568 = (__int128)xmmword_22468CF90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 3, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x13000001D3), xmmword_22468CF90);
        v143 = (v424 & 1) == 0 && ((v452 | v443) & 1) == 0;
        if ((v425 & 1) == 0 && v143)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468CFA0;
          v563 = (__int128)xmmword_22468CFB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 3, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x193000001D3), xmmword_22468CFB0);
        }
      }
      v144 = (v106 & 1) == 0 && ((v452 | v443) & 1) == 0;
      if (v144 && (v432 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468CFC0;
        v558 = (__int128)xmmword_22468CFD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 3, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x193000001D3), xmmword_22468CFD0);
      }
    }
    if (((v448 | v465) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468CFE0;
      v553 = (__int128)xmmword_22468CFF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 3, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x13000001D3), xmmword_22468CFF0);
      v145 = (v428 & 1) == 0 && ((v443 | v461) & 1) == 0;
      if ((v424 & 1) == 0 && v145)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D000;
        v548 = (__int128)xmmword_22468D010;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 3, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x193000001D3), xmmword_22468D010);
      }
    }
    v146 = (v432 & 1) == 0 && ((v443 | v461) & 1) == 0;
    if (v146 && (v142 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D020;
      v543 = xmmword_22468D030;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 3, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x193000001D3), xmmword_22468D030);
    }
  }
  v147 = *((_DWORD *)v5 + 397);
  if (**v480)
  {
    v148 = *((_DWORD *)v5 + 461);
    v149 = *((_DWORD *)v5 + 405);
    v150 = *((_DWORD *)v5 + 469);
    v151 = *((_DWORD *)v5 + 413);
  }
  else
  {
    if ((v147 & 0x10000000) != 0)
      v152 = 0x40000000;
    else
      v152 = 0x80000000;
    if ((v147 & 0x20000000) != 0)
      v147 = v152;
    else
      v147 &= 0xCFFFFFFF;
    v153 = *((_DWORD *)v5 + 461);
    if ((v153 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v153 & 0x20000000) != 0)
      v148 = v154;
    else
      v148 = v153 & 0xCFFFFFFF;
    v155 = *((_DWORD *)v5 + 405);
    if ((v155 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v155 & 0x20000000) != 0)
      v149 = v156;
    else
      v149 = v155 & 0xCFFFFFFF;
    v157 = *((_DWORD *)v5 + 469);
    if ((v157 & 0x10000000) != 0)
      v158 = 0x40000000;
    else
      v158 = 0x80000000;
    if ((v157 & 0x20000000) != 0)
      v150 = v158;
    else
      v150 = v157 & 0xCFFFFFFF;
    v159 = *((_DWORD *)v5 + 413);
    if ((v159 & 0x10000000) != 0)
      v151 = 0x40000000;
    else
      v151 = 0x80000000;
    if ((v159 & 0x20000000) == 0)
      v151 = v159 & 0xCFFFFFFF;
  }
  v160 = v149 >> 30;
  v426 = v147 >> 30;
  v470 = v148 >> 30;
  v436 = v151 >> 30;
  if ((v132 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D040;
    v513 = (__int128)xmmword_22468D050;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 4, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x14000001D4), xmmword_22468D050);
    if ((v115 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D060;
      v573 = (__int128)xmmword_22468D070;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 4, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x14000001D4), xmmword_22468D070);
      if (((v448 | v465) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D080;
        v568 = (__int128)xmmword_22468D090;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 4, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x14000001D4), xmmword_22468D090);
        v161 = (v428 & 1) == 0 && ((v443 | v461) & 1) == 0;
        if ((v424 & 1) == 0 && v161)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D0A0;
          v563 = (__int128)xmmword_22468D0B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 4, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x194000001D4), xmmword_22468D0B0);
        }
      }
      v162 = (v432 & 1) == 0 && ((v443 | v461) & 1) == 0;
      if (v162 && (v142 & 1) == 0)
      {
        v564 = v494;
        v565 = v495;
        v566 = v496;
        v563 = v493;
        v562 = v492;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D0C0;
        v558 = (__int128)xmmword_22468D0D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 4, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x194000001D4), xmmword_22468D0D0);
      }
    }
    if (((v465 | v470) & 1) == 0)
    {
      v559 = v494;
      v560 = v495;
      v561 = v496;
      v558 = v493;
      v557 = v492;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D0E0;
      v553 = (__int128)xmmword_22468D0F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 4, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x14000001D4), xmmword_22468D0F0);
      v163 = (v426 & 1) == 0 && ((v461 | v160) & 1) == 0;
      if ((v428 & 1) == 0 && v163)
      {
        v554 = v494;
        v555 = v495;
        v556 = v496;
        v553 = v493;
        v552 = v492;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D100;
        v548 = (__int128)xmmword_22468D110;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 4, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x194000001D4), xmmword_22468D110);
      }
    }
    v164 = (v142 & 1) == 0 && ((v461 | v160) & 1) == 0;
    if (v164 && (v436 & 1) == 0)
    {
      v549 = v494;
      v550 = v495;
      v551 = v496;
      v548 = v493;
      v547 = v492;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D120;
      v543 = xmmword_22468D130;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 4, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x194000001D4), xmmword_22468D130);
    }
  }
  v165 = *((_DWORD *)v5 + 398);
  if (**v480)
  {
    v166 = *((_DWORD *)v5 + 462);
    v167 = *((_DWORD *)v5 + 406);
    v168 = *((_DWORD *)v5 + 470);
    v169 = *((_DWORD *)v5 + 414);
  }
  else
  {
    if ((v165 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v165 & 0x20000000) != 0)
      v165 = v170;
    else
      v165 &= 0xCFFFFFFF;
    v171 = *((_DWORD *)v5 + 462);
    if ((v171 & 0x10000000) != 0)
      v172 = 0x40000000;
    else
      v172 = 0x80000000;
    if ((v171 & 0x20000000) != 0)
      v166 = v172;
    else
      v166 = v171 & 0xCFFFFFFF;
    v173 = *((_DWORD *)v5 + 406);
    if ((v173 & 0x10000000) != 0)
      v174 = 0x40000000;
    else
      v174 = 0x80000000;
    if ((v173 & 0x20000000) != 0)
      v167 = v174;
    else
      v167 = v173 & 0xCFFFFFFF;
    v175 = *((_DWORD *)v5 + 470);
    if ((v175 & 0x10000000) != 0)
      v176 = 0x40000000;
    else
      v176 = 0x80000000;
    if ((v175 & 0x20000000) != 0)
      v168 = v176;
    else
      v168 = v175 & 0xCFFFFFFF;
    v177 = *((_DWORD *)v5 + 414);
    if ((v177 & 0x10000000) != 0)
      v169 = 0x40000000;
    else
      v169 = 0x80000000;
    if ((v177 & 0x20000000) == 0)
      v169 = v177 & 0xCFFFFFFF;
  }
  v444 = v165 >> 30;
  v453 = v167 >> 30;
  v457 = v166 >> 30;
  v449 = v169 >> 30;
  v534 = v494;
  v535 = v495;
  v536 = v496;
  v533 = v493;
  v532 = v492;
  if ((v150 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D140;
    v513 = (__int128)xmmword_22468D150;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 5, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x15000001D5), xmmword_22468D150);
    if ((v132 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D160;
      v573 = (__int128)xmmword_22468D170;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 5, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x15000001D5), xmmword_22468D170);
      if (((v465 | v470) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D180;
        v568 = (__int128)xmmword_22468D190;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 5, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x15000001D5), xmmword_22468D190);
        v178 = (v426 & 1) == 0 && ((v461 | v160) & 1) == 0;
        if ((v428 & 1) == 0 && v178)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D1A0;
          v563 = (__int128)xmmword_22468D1B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 5, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x195000001D5), xmmword_22468D1B0);
        }
      }
      v179 = (v142 & 1) == 0 && ((v461 | v160) & 1) == 0;
      if (v179 && (v436 & 1) == 0)
      {
        v564 = v534;
        v565 = v535;
        v566 = v536;
        v563 = v533;
        v562 = v532;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D1C0;
        v558 = (__int128)xmmword_22468D1D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 5, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x195000001D5), xmmword_22468D1D0);
      }
    }
    if (((v470 | v457) & 1) == 0)
    {
      v559 = v534;
      v560 = v535;
      v561 = v536;
      v558 = v533;
      v557 = v532;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D1E0;
      v553 = (__int128)xmmword_22468D1F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 5, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x15000001D5), xmmword_22468D1F0);
      v180 = (v444 & 1) == 0 && ((v160 | v453) & 1) == 0;
      if ((v426 & 1) == 0 && v180)
      {
        v554 = v534;
        v555 = v535;
        v556 = v536;
        v553 = v533;
        v552 = v532;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D200;
        v548 = (__int128)xmmword_22468D210;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 5, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x195000001D5), xmmword_22468D210);
      }
    }
    v181 = (v436 & 1) == 0 && ((v160 | v453) & 1) == 0;
    if (v181 && (v449 & 1) == 0)
    {
      v549 = v534;
      v550 = v535;
      v551 = v536;
      v548 = v533;
      v547 = v532;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D220;
      v543 = xmmword_22468D230;
      *(_QWORD *)&v527 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 5, 2, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v527, COERCE_DOUBLE(0x195000001D5), xmmword_22468D230);
    }
  }
  v529 = v494;
  v530 = v495;
  v531 = v496;
  v528 = v493;
  v527 = v492;
  v182 = *((_DWORD *)v5 + 399);
  if (**v480)
  {
    v183 = *((_DWORD *)v5 + 463);
    v184 = *((_DWORD *)v5 + 407);
    v185 = *((_DWORD *)v5 + 471);
    v186 = *((_DWORD *)v5 + 415);
  }
  else
  {
    if ((v182 & 0x10000000) != 0)
      v187 = 0x40000000;
    else
      v187 = 0x80000000;
    if ((v182 & 0x20000000) != 0)
      v182 = v187;
    else
      v182 &= 0xCFFFFFFF;
    v188 = *((_DWORD *)v5 + 463);
    if ((v188 & 0x10000000) != 0)
      v189 = 0x40000000;
    else
      v189 = 0x80000000;
    if ((v188 & 0x20000000) != 0)
      v183 = v189;
    else
      v183 = v188 & 0xCFFFFFFF;
    v190 = *((_DWORD *)v5 + 407);
    if ((v190 & 0x10000000) != 0)
      v191 = 0x40000000;
    else
      v191 = 0x80000000;
    if ((v190 & 0x20000000) != 0)
      v184 = v191;
    else
      v184 = v190 & 0xCFFFFFFF;
    v192 = *((_DWORD *)v5 + 471);
    if ((v192 & 0x10000000) != 0)
      v193 = 0x40000000;
    else
      v193 = 0x80000000;
    if ((v192 & 0x20000000) != 0)
      v185 = v193;
    else
      v185 = v192 & 0xCFFFFFFF;
    v194 = *((_DWORD *)v5 + 415);
    if ((v194 & 0x10000000) != 0)
      v186 = 0x40000000;
    else
      v186 = 0x80000000;
    if ((v194 & 0x20000000) == 0)
      v186 = v194 & 0xCFFFFFFF;
  }
  v195 = v184 >> 30;
  v482 = v182 >> 30;
  v196 = v183 >> 30;
  v197 = v186 >> 30;
  v539 = v494;
  v540 = v495;
  v541 = v496;
  v538 = v493;
  v537 = v492;
  if ((v168 & 0x40000000) != 0)
  {
    v519 = v494;
    v520 = v495;
    v521 = v496;
    v518 = v493;
    v517 = v492;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D240;
    v513 = (__int128)xmmword_22468D250;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 6, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x16000001D6), xmmword_22468D250);
    if ((v150 & 0x40000000) == 0)
    {
      v514 = v494;
      v515 = v495;
      v516 = v496;
      v513 = v493;
      v512 = v492;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D260;
      v573 = (__int128)xmmword_22468D270;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 6, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x16000001D6), xmmword_22468D270);
      if (((v470 | v457) & 1) == 0)
      {
        v574 = v494;
        v575 = v495;
        v576 = v496;
        v572 = v492;
        v573 = v493;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D280;
        v568 = (__int128)xmmword_22468D290;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 6, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x16000001D6), xmmword_22468D290);
        v198 = (v444 & 1) == 0 && ((v160 | v453) & 1) == 0;
        if ((v426 & 1) == 0 && v198)
        {
          v569 = v494;
          v570 = v495;
          v571 = v496;
          v568 = v493;
          v567 = v492;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D2A0;
          v563 = (__int128)xmmword_22468D2B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 6, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x196000001D6), xmmword_22468D2B0);
        }
      }
      v199 = (v436 & 1) == 0 && ((v160 | v453) & 1) == 0;
      if (v199 && (v449 & 1) == 0)
      {
        v564 = v539;
        v565 = v540;
        v566 = v541;
        v563 = v538;
        v562 = v537;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D2C0;
        v558 = (__int128)xmmword_22468D2D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 6, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x196000001D6), xmmword_22468D2D0);
      }
    }
    if (((v457 | v196) & 1) == 0)
    {
      v559 = v539;
      v560 = v540;
      v561 = v541;
      v558 = v538;
      v557 = v537;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D2E0;
      v553 = (__int128)xmmword_22468D2F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 6, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x16000001D6), xmmword_22468D2F0);
      v200 = (v482 & 1) == 0 && ((v453 | v195) & 1) == 0;
      if ((v444 & 1) == 0 && v200)
      {
        v554 = v539;
        v555 = v540;
        v556 = v541;
        v553 = v538;
        v552 = v537;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D300;
        v548 = (__int128)xmmword_22468D310;
        *(_QWORD *)&v522 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 6, 2, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v522, COERCE_DOUBLE(0x196000001D6), xmmword_22468D310);
      }
    }
    v201 = (v449 & 1) == 0 && ((v453 | v195) & 1) == 0;
    if (v201 && (v197 & 1) == 0)
    {
      v549 = v539;
      v550 = v540;
      v551 = v541;
      v548 = v538;
      v547 = v537;
      *(_QWORD *)&v522 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D320;
      v543 = xmmword_22468D330;
      *(_QWORD *)&v578[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 6, 2, 7, (uint64_t)&v522, (uint64_t)&v542, (uint64_t)v578, COERCE_DOUBLE(0x196000001D6), xmmword_22468D330);
    }
  }
  v202 = *(unsigned int *)(v477 + 88);
  if ((v202 & 0x80000000) != 0)
  {
    v205 = *v474;
    v206 = *(_DWORD *)(v484 + 1848);
    v207 = **v474;
    if (**v474)
      goto LABEL_509;
  }
  else
  {
    v203 = *(_QWORD *)(v484 + 2328);
    if (v202 >= (*(_QWORD *)(v484 + 2336) - v203) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v203 = *(_QWORD *)(v484 + 2328);
    }
    v204 = v203 + (v202 << 11);
    v205 = *v474;
    v206 = *(_DWORD *)(v204 + 1568);
    v207 = **v474;
    if (**v474)
    {
LABEL_509:
      v208 = *(unsigned int *)(v477 + 88);
      if ((v208 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v210 = *(_DWORD *)(v484 + 2104);
      if (v207)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v206 & 0x10000000) != 0)
    v215 = 0x40000000;
  else
    v215 = 0x80000000;
  if ((v206 & 0x20000000) != 0)
    v206 = v215;
  else
    v206 &= 0xCFFFFFFF;
  v208 = *(unsigned int *)(v477 + 88);
  if ((v208 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v209 = *(_QWORD *)(v484 + 2328);
  if (v208 >= (*(_QWORD *)(v484 + 2336) - v209) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v209 = *(_QWORD *)(v484 + 2328);
    v205 = *v474;
    v207 = **v474;
  }
  v210 = *(_DWORD *)(v209 + (v208 << 11) + 1824);
  if (v207)
  {
LABEL_514:
    v211 = *(unsigned int *)(v477 + 88);
    if ((v211 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v213 = *(_DWORD *)(v484 + 1880);
    if (v207)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v210 & 0x10000000) != 0)
    v216 = 0x40000000;
  else
    v216 = 0x80000000;
  if ((v210 & 0x20000000) != 0)
    v210 = v216;
  else
    v210 &= 0xCFFFFFFF;
  v211 = *(unsigned int *)(v477 + 88);
  if ((v211 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v212 = *(_QWORD *)(v484 + 2328);
  if (v211 >= (*(_QWORD *)(v484 + 2336) - v212) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v212 = *(_QWORD *)(v484 + 2328);
    v205 = *v474;
    v207 = **v474;
  }
  v213 = *(_DWORD *)(v212 + (v211 << 11) + 1600);
  if (v207)
  {
LABEL_519:
    v214 = *(unsigned int *)(v477 + 88);
    if ((v214 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v213 & 0x10000000) != 0)
    v217 = 0x40000000;
  else
    v217 = 0x80000000;
  if ((v213 & 0x20000000) != 0)
    v213 = v217;
  else
    v213 &= 0xCFFFFFFF;
  v214 = *(unsigned int *)(v477 + 88);
  if ((v214 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v218 = *(_QWORD *)(v484 + 2328);
  v219 = (*(_QWORD *)(v484 + 2336) - v218) >> 11;
  if (v219 > v214)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v205 = *v474;
  v214 = *(unsigned int *)(v477 + 88);
  if ((v214 & 0x80000000) != 0)
  {
LABEL_590:
    v220 = v168;
    v221 = *(_DWORD *)(v484 + 1912);
    if (*v205)
      goto LABEL_559;
    goto LABEL_553;
  }
  v218 = *(_QWORD *)(v484 + 2328);
  v219 = (*(_QWORD *)(v484 + 2336) - v218) >> 11;
LABEL_549:
  if (v219 <= v214)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v218 = *(_QWORD *)(v484 + 2328);
    v205 = *v474;
  }
  v220 = v168;
  v221 = *(_DWORD *)(v218 + (v214 << 11) + 1632);
  if (!*v205)
  {
LABEL_553:
    if ((v221 & 0x10000000) != 0)
      v222 = 0x40000000;
    else
      v222 = 0x80000000;
    if ((v221 & 0x20000000) != 0)
      v221 = v222;
    else
      v221 &= 0xCFFFFFFF;
  }
LABEL_559:
  v544 = v529;
  v545 = v530;
  v546 = v531;
  v543 = (float32x4_t)v528;
  v542 = v527;
  if ((v185 & 0x40000000) != 0)
  {
    v223 = (v220 & 0x40000000) == 0;
    v519 = v529;
    v520 = v530;
    v521 = v531;
    *(_QWORD *)&v572 = 0x171617160E0D0E0DLL;
    v518 = v528;
    v517 = v527;
    v512 = xmmword_22468D340;
    v513 = (__int128)xmmword_22468D350;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 7, 2, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x17000001D7), xmmword_22468D350);
    if (v223)
    {
      v514 = v529;
      v515 = v530;
      v516 = v531;
      v513 = v528;
      v512 = v527;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D360;
      v573 = (__int128)xmmword_22468D370;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 7, 2, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x17000001D7), xmmword_22468D370);
      if (((v457 | v196) & 1) == 0)
      {
        v574 = v529;
        v575 = v530;
        v576 = v531;
        v572 = v527;
        v573 = v528;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D380;
        v568 = (__int128)xmmword_22468D390;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 7, 2, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x17000001D7), xmmword_22468D390);
        v224 = (v482 & 1) == 0 && ((v453 | v195) & 1) == 0;
        if ((v444 & 1) == 0 && v224)
        {
          v569 = v529;
          v570 = v530;
          v571 = v531;
          v568 = v528;
          v567 = v527;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D3A0;
          v563 = (__int128)xmmword_22468D3B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 7, 2, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x197000001D7), xmmword_22468D3B0);
        }
      }
      v225 = (v449 & 1) == 0 && ((v453 | v195) & 1) == 0;
      if (v225 && (v197 & 1) == 0)
      {
        v564 = v544;
        v565 = v545;
        v566 = v546;
        v563 = (__int128)v543;
        v562 = v542;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D3C0;
        v558 = (__int128)xmmword_22468D3D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 7, 2, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x197000001D7), xmmword_22468D3D0);
      }
    }
    if (!(v210 & 0x40000000 | v196 & 1))
    {
      v559 = v544;
      v560 = v545;
      v561 = v546;
      *(_QWORD *)&v547 = 0x17160E0D17160E0DLL;
      v558 = (__int128)v543;
      v557 = v542;
      v552 = xmmword_22468D3E0;
      v553 = (__int128)xmmword_22468D3F0;
      *(_QWORD *)&v522 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 7, 2, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v522, COERCE_DOUBLE(0x17000001D7), xmmword_22468D3F0);
      v226 = (v206 & 0x40000000) == 0 && (v213 & 0x40000000 | v195 & 1) == 0;
      if ((v482 & 1) == 0 && v226)
      {
        v554 = v544;
        v555 = v545;
        v556 = v546;
        *(_QWORD *)&v522 = 0x161616160D0D0D0DLL;
        v553 = (__int128)v543;
        v552 = v542;
        v547 = xmmword_22468D400;
        v548 = (__int128)xmmword_22468D410;
        *(_QWORD *)&v578[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 7, 2, 7, (uint64_t)&v522, (uint64_t)&v547, (uint64_t)v578, COERCE_DOUBLE(0x197000001D7), xmmword_22468D410);
      }
    }
    v227 = (v197 & 1) == 0 && (v213 & 0x40000000 | v195 & 1) == 0;
    if (v227 && (v221 & 0x40000000) == 0)
    {
      v549 = v544;
      v550 = v545;
      v551 = v546;
      *(_QWORD *)&v578[0] = 0x16160D0D16160D0DLL;
      v548 = (__int128)v543;
      v547 = v542;
      v522 = xmmword_22468D420;
      v523 = (__int128)xmmword_22468D430;
      v579[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 7, 2, 7, (uint64_t)v578, (uint64_t)&v522, (uint64_t)v579, COERCE_DOUBLE(0x197000001D7), xmmword_22468D430);
    }
  }
  v228 = a1[2];
  v483 = v430[1];
  v486 = *v430;
  v490 = a3[3];
  v491 = a3[4];
  v488 = a3[1];
  v489 = a3[2];
  v487 = *a3;
  v437 = *(_OWORD *)a1;
  v475 = (_BYTE **)v430[2];
  v478 = *a1;
  v229 = *((_DWORD *)v228 + 400);
  v230 = ***a1;
  if (***a1)
  {
    v231 = *((_DWORD *)v228 + 464);
    v232 = *((_DWORD *)v228 + 408);
    v233 = *((_DWORD *)v228 + 416);
    v471 = *((_DWORD *)v228 + 472);
    if ((v471 & 0x40000000) == 0)
    {
LABEL_589:
      v234 = v231;
      v235 = 0;
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v239 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v229 & 0x20000000) != 0)
      v229 *= 4;
    v240 = *((_DWORD *)v228 + 464);
    if ((v240 & 0x20000000) != 0)
      v231 = 4 * v240;
    else
      v231 = *((_DWORD *)v228 + 464);
    v241 = *((_DWORD *)v228 + 408);
    if ((v241 & 0x20000000) != 0)
      v232 = 4 * v241;
    else
      v232 = *((_DWORD *)v228 + 408);
    v242 = *((_DWORD *)v228 + 472);
    if ((v242 & 0x20000000) != 0)
      v243 = 4 * v242;
    else
      v243 = *((_DWORD *)v228 + 472);
    v244 = *((_DWORD *)v228 + 416);
    if ((v244 & 0x10000000) != 0)
      v245 = 0x40000000;
    else
      v245 = 0x80000000;
    if ((v244 & 0x20000000) != 0)
      v233 = v245;
    else
      v233 = v244 & 0xCFFFFFFF;
    v471 = v243;
    if ((v243 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v246 = *(unsigned int *)(v483 + 16);
  if ((v246 & 0x80000000) != 0)
  {
    v248 = *(_DWORD *)(v486 + 1908);
    v249 = **v475;
    if (**v475)
      goto LABEL_615;
  }
  else
  {
    v247 = *(_QWORD *)(v486 + 2328);
    if (v246 >= (*(_QWORD *)(v486 + 2336) - v247) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v247 = *(_QWORD *)(v486 + 2328);
    }
    v248 = *(_DWORD *)(v247 + (v246 << 11) + 1628);
    v249 = **v475;
    if (**v475)
    {
LABEL_615:
      v250 = *(unsigned int *)(v483 + 16);
      if ((v250 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v252 = *(_DWORD *)(v486 + 2164);
      if (v249)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v248 & 0x10000000) != 0)
    v420 = 0x40000000;
  else
    v420 = 0x80000000;
  if ((v248 & 0x20000000) != 0)
    v248 = v420;
  else
    v248 &= 0xCFFFFFFF;
  v250 = *(unsigned int *)(v483 + 16);
  if ((v250 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v251 = *(_QWORD *)(v486 + 2328);
  if (v250 >= (*(_QWORD *)(v486 + 2336) - v251) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v251 = *(_QWORD *)(v486 + 2328);
    v249 = **v475;
  }
  v252 = *(_DWORD *)(v251 + (v250 << 11) + 1884);
  if (v249)
  {
LABEL_620:
    v253 = *(unsigned int *)(v483 + 16);
    if ((v253 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v255 = *(_DWORD *)(v486 + 1940);
    if (v249)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v252 & 0x10000000) != 0)
    v421 = 0x40000000;
  else
    v421 = 0x80000000;
  if ((v252 & 0x20000000) != 0)
    v252 = v421;
  else
    v252 &= 0xCFFFFFFF;
  v253 = *(unsigned int *)(v483 + 16);
  if ((v253 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v254 = *(_QWORD *)(v486 + 2328);
  if (v253 >= (*(_QWORD *)(v486 + 2336) - v254) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v254 = *(_QWORD *)(v486 + 2328);
    v249 = **v475;
  }
  v255 = *(_DWORD *)(v254 + (v253 << 11) + 1660);
  if (v249)
  {
LABEL_625:
    v256 = *(unsigned int *)(v483 + 16);
    if ((v256 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v258 = *(_DWORD *)(v486 + 2196);
    if (v249)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v255 & 0x10000000) != 0)
    v422 = 0x40000000;
  else
    v422 = 0x80000000;
  if ((v255 & 0x20000000) != 0)
    v255 = v422;
  else
    v255 &= 0xCFFFFFFF;
  v256 = *(unsigned int *)(v483 + 16);
  if ((v256 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v257 = *(_QWORD *)(v486 + 2328);
  if (v256 >= (*(_QWORD *)(v486 + 2336) - v257) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v257 = *(_QWORD *)(v486 + 2328);
    v249 = **v475;
  }
  v258 = *(_DWORD *)(v257 + (v256 << 11) + 1916);
  if (v249)
  {
LABEL_630:
    v259 = *(unsigned int *)(v483 + 16);
    if ((v259 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v258 & 0x10000000) != 0)
    v423 = 0x40000000;
  else
    v423 = 0x80000000;
  if ((v258 & 0x20000000) != 0)
    v258 = v423;
  else
    v258 &= 0xCFFFFFFF;
  v259 = *(unsigned int *)(v483 + 16);
  if ((v259 & 0x80000000) == 0)
  {
LABEL_631:
    v260 = *(_QWORD *)(v486 + 2328);
    if (v259 >= (*(_QWORD *)(v486 + 2336) - v260) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v260 = *(_QWORD *)(v486 + 2328);
      v249 = **v475;
    }
    v234 = v231;
    v261 = v260 + (v259 << 11);
    v239 = (v248 >> 30) & 1;
    v238 = (v252 >> 30) & 1;
    v237 = (v255 >> 30) & 1;
    v262 = *(_DWORD *)(v261 + 1692);
    v236 = (v258 >> 30) & 1;
    if (v249)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v234 = v231;
  v239 = (v248 >> 30) & 1;
  v238 = (v252 >> 30) & 1;
  v237 = (v255 >> 30) & 1;
  v262 = *(_DWORD *)(v486 + 1972);
  v236 = (v258 >> 30) & 1;
  if (!v249)
  {
LABEL_635:
    if ((v262 & 0x10000000) != 0)
      v263 = 0x40000000;
    else
      v263 = 0x80000000;
    if ((v262 & 0x20000000) != 0)
      v262 = v263;
    else
      v262 &= 0xCFFFFFFF;
  }
LABEL_641:
  v235 = (v262 >> 30) & 1;
  v230 = **v478;
LABEL_642:
  v439 = v229 >> 30;
  v524 = v489;
  v525 = v490;
  v526 = v491;
  v523 = v488;
  v522 = v487;
  v264 = *((_DWORD *)v228 + 401);
  if (v230)
  {
    v265 = *((_DWORD *)v228 + 465);
    v266 = *((_DWORD *)v228 + 409);
    v466 = *((_DWORD *)v228 + 473);
    v267 = *((_DWORD *)v228 + 417);
  }
  else
  {
    if ((v264 & 0x10000000) != 0)
      v268 = 0x40000000;
    else
      v268 = 0x80000000;
    if ((v264 & 0x20000000) != 0)
      v264 = v268;
    else
      v264 &= 0xCFFFFFFF;
    v269 = *((_DWORD *)v228 + 465);
    if ((v269 & 0x10000000) != 0)
      v270 = 0x40000000;
    else
      v270 = 0x80000000;
    if ((v269 & 0x20000000) != 0)
      v265 = v270;
    else
      v265 = v269 & 0xCFFFFFFF;
    v271 = *((_DWORD *)v228 + 409);
    if ((v271 & 0x10000000) != 0)
      v272 = 0x40000000;
    else
      v272 = 0x80000000;
    if ((v271 & 0x20000000) != 0)
      v266 = v272;
    else
      v266 = v271 & 0xCFFFFFFF;
    v273 = *((_DWORD *)v228 + 473);
    if ((v273 & 0x10000000) != 0)
      v274 = 0x40000000;
    else
      v274 = 0x80000000;
    if ((v273 & 0x20000000) != 0)
      v275 = v274;
    else
      v275 = v273 & 0xCFFFFFFF;
    v466 = v275;
    v276 = *((_DWORD *)v228 + 417);
    if ((v276 & 0x10000000) != 0)
      v267 = 0x40000000;
    else
      v267 = 0x80000000;
    if ((v276 & 0x20000000) == 0)
      v267 = v276 & 0xCFFFFFFF;
  }
  v277 = v232 >> 30;
  v278 = v234 >> 30;
  v279 = v233 >> 30;
  v433 = v264 >> 30;
  v458 = v266 >> 30;
  v462 = v265 >> 30;
  v445 = v267 >> 30;
  if ((v471 & 0x40000000) != 0)
  {
    v519 = v489;
    v520 = v490;
    v521 = v491;
    v518 = v488;
    v517 = v487;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D440;
    v513 = (__int128)xmmword_22468D450;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 0, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x18000001D8), xmmword_22468D450);
    if (!v236)
    {
      v514 = v489;
      v515 = v490;
      v516 = v491;
      *(_QWORD *)&v567 = 0x5040E0D05040E0DLL;
      v513 = v488;
      v512 = v487;
      v572 = xmmword_22468D460;
      v573 = (__int128)xmmword_22468D470;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 0, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x18000001D8), xmmword_22468D470);
      v280 = (v237 | v277 & 1) == 0;
      if (!(v238 | v278 & 1))
      {
        v574 = v489;
        v575 = v490;
        v576 = v491;
        *(_QWORD *)&v562 = 0x50405040E0D0E0DLL;
        v572 = v487;
        v573 = v488;
        v567 = xmmword_22468D480;
        v568 = (__int128)xmmword_22468D490;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 0, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x18000001D8), xmmword_22468D490);
        v281 = (v439 & 1) == 0 && v280;
        if (!v239 && v281)
        {
          v569 = v489;
          v570 = v490;
          v571 = v491;
          v568 = v488;
          v567 = v487;
          *(_QWORD *)&v557 = 0x4040D0D04040D0DLL;
          v562 = xmmword_22468D4A0;
          v563 = (__int128)xmmword_22468D4B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 0, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x198000001D8), xmmword_22468D4B0);
        }
      }
      if (v235)
        v282 = 0;
      else
        v282 = v280;
      if (v282 && (v279 & 1) == 0)
      {
        v564 = v489;
        v565 = v490;
        v566 = v491;
        *(_QWORD *)&v552 = 0x40404040D0D0D0DLL;
        v563 = v488;
        v562 = v487;
        v557 = xmmword_22468D4C0;
        v558 = (__int128)xmmword_22468D4D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 0, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x198000001D8), xmmword_22468D4D0);
      }
    }
    if (((v278 | v462) & 1) == 0)
    {
      v559 = v489;
      v560 = v490;
      v561 = v491;
      v558 = v488;
      v557 = v487;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D4E0;
      v553 = (__int128)xmmword_22468D4F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 0, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x18000001D8), xmmword_22468D4F0);
      v283 = (v433 & 1) == 0 && ((v277 | v458) & 1) == 0;
      if ((v439 & 1) == 0 && v283)
      {
        v554 = v489;
        v555 = v490;
        v556 = v491;
        v553 = v488;
        v552 = v487;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D500;
        v548 = (__int128)xmmword_22468D510;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 0, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x198000001D8), xmmword_22468D510);
      }
    }
    v284 = (v279 & 1) == 0 && ((v277 | v458) & 1) == 0;
    if (v284 && (v445 & 1) == 0)
    {
      v549 = v489;
      v550 = v490;
      v551 = v491;
      v548 = v488;
      v547 = v487;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D520;
      v543 = xmmword_22468D530;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 0, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x198000001D8), xmmword_22468D530);
    }
  }
  v499 = v524;
  v500 = v525;
  v501 = v526;
  v497 = v522;
  v498 = v523;
  v285 = *((_DWORD *)v228 + 402);
  if (**v478)
  {
    v286 = *((_DWORD *)v228 + 466);
    v287 = *((_DWORD *)v228 + 410);
    v288 = *((_DWORD *)v228 + 474);
    v289 = *((_DWORD *)v228 + 418);
  }
  else
  {
    if ((v285 & 0x10000000) != 0)
      v290 = 0x40000000;
    else
      v290 = 0x80000000;
    if ((v285 & 0x20000000) != 0)
      v285 = v290;
    else
      v285 &= 0xCFFFFFFF;
    v291 = *((_DWORD *)v228 + 466);
    if ((v291 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v291 & 0x20000000) != 0)
      v286 = v292;
    else
      v286 = v291 & 0xCFFFFFFF;
    v293 = *((_DWORD *)v228 + 410);
    if ((v293 & 0x10000000) != 0)
      v294 = 0x40000000;
    else
      v294 = 0x80000000;
    if ((v293 & 0x20000000) != 0)
      v287 = v294;
    else
      v287 = v293 & 0xCFFFFFFF;
    v295 = *((_DWORD *)v228 + 474);
    if ((v295 & 0x10000000) != 0)
      v296 = 0x40000000;
    else
      v296 = 0x80000000;
    if ((v295 & 0x20000000) != 0)
      v288 = v296;
    else
      v288 = v295 & 0xCFFFFFFF;
    v297 = *((_DWORD *)v228 + 418);
    if ((v297 & 0x10000000) != 0)
      v289 = 0x40000000;
    else
      v289 = 0x80000000;
    if ((v297 & 0x20000000) == 0)
      v289 = v297 & 0xCFFFFFFF;
  }
  v431 = v285 >> 30;
  v450 = v287 >> 30;
  v454 = v286 >> 30;
  v298 = v289 >> 30;
  v509 = v524;
  v510 = v525;
  v511 = v526;
  v507 = v522;
  v508 = v523;
  if ((v466 & 0x40000000) != 0)
  {
    v519 = v524;
    v520 = v525;
    v521 = v526;
    v518 = v523;
    v517 = v522;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D540;
    v513 = (__int128)xmmword_22468D550;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 1, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x19000001D9), xmmword_22468D550);
    if ((v471 & 0x40000000) == 0)
    {
      v514 = v524;
      v515 = v525;
      v516 = v526;
      v513 = v523;
      v512 = v522;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D560;
      v573 = (__int128)xmmword_22468D570;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 1, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x19000001D9), xmmword_22468D570);
      if (((v278 | v462) & 1) == 0)
      {
        v574 = v524;
        v575 = v525;
        v576 = v526;
        v572 = v522;
        v573 = v523;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D580;
        v568 = (__int128)xmmword_22468D590;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 1, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x19000001D9), xmmword_22468D590);
        v299 = (v433 & 1) == 0 && ((v277 | v458) & 1) == 0;
        if ((v439 & 1) == 0 && v299)
        {
          v569 = v524;
          v570 = v525;
          v571 = v526;
          v568 = v523;
          v567 = v522;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D5A0;
          v563 = (__int128)xmmword_22468D5B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 1, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x199000001D9), xmmword_22468D5B0);
        }
      }
      v300 = (v279 & 1) == 0 && ((v277 | v458) & 1) == 0;
      if (v300 && (v445 & 1) == 0)
      {
        v564 = v509;
        v565 = v510;
        v566 = v511;
        v563 = v508;
        v562 = v507;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D5C0;
        v558 = (__int128)xmmword_22468D5D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 1, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x199000001D9), xmmword_22468D5D0);
      }
    }
    if (((v462 | v454) & 1) == 0)
    {
      v559 = v509;
      v560 = v510;
      v561 = v511;
      v558 = v508;
      v557 = v507;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D5E0;
      v553 = (__int128)xmmword_22468D5F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 1, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x19000001D9), xmmword_22468D5F0);
      v301 = (v431 & 1) == 0 && ((v458 | v450) & 1) == 0;
      if ((v433 & 1) == 0 && v301)
      {
        v554 = v509;
        v555 = v510;
        v556 = v511;
        v553 = v508;
        v552 = v507;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D600;
        v548 = (__int128)xmmword_22468D610;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 1, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x199000001D9), xmmword_22468D610);
      }
    }
    v302 = (v445 & 1) == 0 && ((v458 | v450) & 1) == 0;
    if (v302 && (v298 & 1) == 0)
    {
      v549 = v509;
      v550 = v510;
      v551 = v511;
      v548 = v508;
      v547 = v507;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D620;
      v543 = xmmword_22468D630;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 1, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x199000001D9), xmmword_22468D630);
    }
  }
  v303 = *((_DWORD *)v228 + 403);
  if (**v478)
  {
    v304 = *((_DWORD *)v228 + 467);
    v305 = *((_DWORD *)v228 + 411);
    v306 = *((_DWORD *)v228 + 475);
    v307 = *((_DWORD *)v228 + 419);
  }
  else
  {
    if ((v303 & 0x10000000) != 0)
      v308 = 0x40000000;
    else
      v308 = 0x80000000;
    if ((v303 & 0x20000000) != 0)
      v303 = v308;
    else
      v303 &= 0xCFFFFFFF;
    v309 = *((_DWORD *)v228 + 467);
    if ((v309 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v309 & 0x20000000) != 0)
      v304 = v310;
    else
      v304 = v309 & 0xCFFFFFFF;
    v311 = *((_DWORD *)v228 + 411);
    if ((v311 & 0x10000000) != 0)
      v312 = 0x40000000;
    else
      v312 = 0x80000000;
    if ((v311 & 0x20000000) != 0)
      v305 = v312;
    else
      v305 = v311 & 0xCFFFFFFF;
    v313 = *((_DWORD *)v228 + 475);
    if ((v313 & 0x10000000) != 0)
      v314 = 0x40000000;
    else
      v314 = 0x80000000;
    if ((v313 & 0x20000000) != 0)
      v306 = v314;
    else
      v306 = v313 & 0xCFFFFFFF;
    v315 = *((_DWORD *)v228 + 419);
    if ((v315 & 0x10000000) != 0)
      v307 = 0x40000000;
    else
      v307 = 0x80000000;
    if ((v315 & 0x20000000) == 0)
      v307 = v315 & 0xCFFFFFFF;
  }
  v316 = v305 >> 30;
  v429 = v303 >> 30;
  v317 = v304 >> 30;
  v440 = v307 >> 30;
  if ((v288 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D640;
    v513 = (__int128)xmmword_22468D650;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 2, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1A000001DALL), xmmword_22468D650);
    if ((v466 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D660;
      v573 = (__int128)xmmword_22468D670;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 2, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1A000001DALL), xmmword_22468D670);
      if (((v462 | v454) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D680;
        v568 = (__int128)xmmword_22468D690;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 2, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1A000001DALL), xmmword_22468D690);
        v318 = (v431 & 1) == 0 && ((v458 | v450) & 1) == 0;
        if ((v433 & 1) == 0 && v318)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D6A0;
          v563 = (__int128)xmmword_22468D6B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 2, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19A000001DALL), xmmword_22468D6B0);
        }
      }
      v319 = (v445 & 1) == 0 && ((v458 | v450) & 1) == 0;
      if (v319 && (v298 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D6C0;
        v558 = (__int128)xmmword_22468D6D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 2, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19A000001DALL), xmmword_22468D6D0);
      }
    }
    if (((v454 | v317) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D6E0;
      v553 = (__int128)xmmword_22468D6F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 2, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x1A000001DALL), xmmword_22468D6F0);
      v320 = (v429 & 1) == 0 && ((v450 | v316) & 1) == 0;
      if ((v431 & 1) == 0 && v320)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D700;
        v548 = (__int128)xmmword_22468D710;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 2, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x19A000001DALL), xmmword_22468D710);
      }
    }
    v321 = (v298 & 1) == 0 && ((v450 | v316) & 1) == 0;
    if (v321 && (v440 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D720;
      v543 = xmmword_22468D730;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 2, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x19A000001DALL), xmmword_22468D730);
    }
  }
  v322 = *((_DWORD *)v228 + 404);
  if (**v478)
  {
    v323 = *((_DWORD *)v228 + 468);
    v324 = *((_DWORD *)v228 + 412);
    v325 = *((_DWORD *)v228 + 476);
    v326 = *((_DWORD *)v228 + 420);
  }
  else
  {
    if ((v322 & 0x10000000) != 0)
      v327 = 0x40000000;
    else
      v327 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v322 = v327;
    else
      v322 &= 0xCFFFFFFF;
    v328 = *((_DWORD *)v228 + 468);
    if ((v328 & 0x10000000) != 0)
      v329 = 0x40000000;
    else
      v329 = 0x80000000;
    if ((v328 & 0x20000000) != 0)
      v323 = v329;
    else
      v323 = v328 & 0xCFFFFFFF;
    v330 = *((_DWORD *)v228 + 412);
    if ((v330 & 0x10000000) != 0)
      v331 = 0x40000000;
    else
      v331 = 0x80000000;
    if ((v330 & 0x20000000) != 0)
      v324 = v331;
    else
      v324 = v330 & 0xCFFFFFFF;
    v332 = *((_DWORD *)v228 + 476);
    if ((v332 & 0x10000000) != 0)
      v333 = 0x40000000;
    else
      v333 = 0x80000000;
    if ((v332 & 0x20000000) != 0)
      v325 = v333;
    else
      v325 = v332 & 0xCFFFFFFF;
    v334 = *((_DWORD *)v228 + 420);
    if ((v334 & 0x10000000) != 0)
      v326 = 0x40000000;
    else
      v326 = 0x80000000;
    if ((v334 & 0x20000000) == 0)
      v326 = v334 & 0xCFFFFFFF;
  }
  v335 = v324 >> 30;
  v434 = v322 >> 30;
  v472 = v323 >> 30;
  v446 = v326 >> 30;
  if ((v306 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D740;
    v513 = (__int128)xmmword_22468D750;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 3, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1B000001DBLL), xmmword_22468D750);
    if ((v288 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D760;
      v573 = (__int128)xmmword_22468D770;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 3, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1B000001DBLL), xmmword_22468D770);
      if (((v454 | v317) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D780;
        v568 = (__int128)xmmword_22468D790;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 3, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B000001DBLL), xmmword_22468D790);
        v336 = (v429 & 1) == 0 && ((v450 | v316) & 1) == 0;
        if ((v431 & 1) == 0 && v336)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D7A0;
          v563 = (__int128)xmmword_22468D7B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 3, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19B000001DBLL), xmmword_22468D7B0);
        }
      }
      v337 = (v298 & 1) == 0 && ((v450 | v316) & 1) == 0;
      if (v337 && (v440 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D7C0;
        v558 = (__int128)xmmword_22468D7D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 3, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19B000001DBLL), xmmword_22468D7D0);
      }
    }
    if (((v317 | v472) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D7E0;
      v553 = (__int128)xmmword_22468D7F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 3, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x1B000001DBLL), xmmword_22468D7F0);
      v338 = (v434 & 1) == 0 && ((v316 | v335) & 1) == 0;
      if ((v429 & 1) == 0 && v338)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D800;
        v548 = (__int128)xmmword_22468D810;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 3, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x19B000001DBLL), xmmword_22468D810);
      }
    }
    v339 = (v440 & 1) == 0 && ((v316 | v335) & 1) == 0;
    if (v339 && (v446 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D820;
      v543 = xmmword_22468D830;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 3, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x19B000001DBLL), xmmword_22468D830);
    }
  }
  v340 = *((_DWORD *)v228 + 405);
  if (**v478)
  {
    v341 = *((_DWORD *)v228 + 469);
    v342 = *((_DWORD *)v228 + 413);
    v343 = *((_DWORD *)v228 + 477);
    v344 = *((_DWORD *)v228 + 421);
  }
  else
  {
    if ((v340 & 0x10000000) != 0)
      v345 = 0x40000000;
    else
      v345 = 0x80000000;
    if ((v340 & 0x20000000) != 0)
      v340 = v345;
    else
      v340 &= 0xCFFFFFFF;
    v346 = *((_DWORD *)v228 + 469);
    if ((v346 & 0x10000000) != 0)
      v347 = 0x40000000;
    else
      v347 = 0x80000000;
    if ((v346 & 0x20000000) != 0)
      v341 = v347;
    else
      v341 = v346 & 0xCFFFFFFF;
    v348 = *((_DWORD *)v228 + 413);
    if ((v348 & 0x10000000) != 0)
      v349 = 0x40000000;
    else
      v349 = 0x80000000;
    if ((v348 & 0x20000000) != 0)
      v342 = v349;
    else
      v342 = v348 & 0xCFFFFFFF;
    v350 = *((_DWORD *)v228 + 477);
    if ((v350 & 0x10000000) != 0)
      v351 = 0x40000000;
    else
      v351 = 0x80000000;
    if ((v350 & 0x20000000) != 0)
      v343 = v351;
    else
      v343 = v350 & 0xCFFFFFFF;
    v352 = *((_DWORD *)v228 + 421);
    if ((v352 & 0x10000000) != 0)
      v344 = 0x40000000;
    else
      v344 = 0x80000000;
    if ((v352 & 0x20000000) == 0)
      v344 = v352 & 0xCFFFFFFF;
  }
  v353 = v342 >> 30;
  v467 = v341 >> 30;
  v451 = v340 >> 30;
  v455 = v344 >> 30;
  if ((v325 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D840;
    v513 = (__int128)xmmword_22468D850;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 4, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1C000001DCLL), xmmword_22468D850);
    if ((v306 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D860;
      v573 = (__int128)xmmword_22468D870;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 4, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1C000001DCLL), xmmword_22468D870);
      if (((v317 | v472) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D880;
        v568 = (__int128)xmmword_22468D890;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 4, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1C000001DCLL), xmmword_22468D890);
        v354 = (v434 & 1) == 0 && ((v316 | v335) & 1) == 0;
        if ((v429 & 1) == 0 && v354)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D8A0;
          v563 = (__int128)xmmword_22468D8B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 4, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19C000001DCLL), xmmword_22468D8B0);
        }
      }
      v355 = (v440 & 1) == 0 && ((v316 | v335) & 1) == 0;
      if (v355 && (v446 & 1) == 0)
      {
        v564 = v499;
        v565 = v500;
        v566 = v501;
        v563 = v498;
        v562 = v497;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D8C0;
        v558 = (__int128)xmmword_22468D8D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 4, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19C000001DCLL), xmmword_22468D8D0);
      }
    }
    if (((v472 | v467) & 1) == 0)
    {
      v559 = v499;
      v560 = v500;
      v561 = v501;
      v558 = v498;
      v557 = v497;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D8E0;
      v553 = (__int128)xmmword_22468D8F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 4, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x1C000001DCLL), xmmword_22468D8F0);
      v356 = (v451 & 1) == 0 && ((v335 | v353) & 1) == 0;
      if ((v434 & 1) == 0 && v356)
      {
        v554 = v499;
        v555 = v500;
        v556 = v501;
        v553 = v498;
        v552 = v497;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468D900;
        v548 = (__int128)xmmword_22468D910;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 4, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x19C000001DCLL), xmmword_22468D910);
      }
    }
    v357 = (v446 & 1) == 0 && ((v335 | v353) & 1) == 0;
    if (v357 && (v455 & 1) == 0)
    {
      v549 = v499;
      v550 = v500;
      v551 = v501;
      v548 = v498;
      v547 = v497;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468D920;
      v543 = xmmword_22468D930;
      *(_QWORD *)&v532 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 4, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v532, COERCE_DOUBLE(0x19C000001DCLL), xmmword_22468D930);
    }
  }
  v358 = *((_DWORD *)v228 + 406);
  if (**v478)
  {
    v359 = *((_DWORD *)v228 + 470);
    v360 = *((_DWORD *)v228 + 414);
    v361 = *((_DWORD *)v228 + 478);
    v362 = *((_DWORD *)v228 + 422);
  }
  else
  {
    if ((v358 & 0x10000000) != 0)
      v363 = 0x40000000;
    else
      v363 = 0x80000000;
    if ((v358 & 0x20000000) != 0)
      v358 = v363;
    else
      v358 &= 0xCFFFFFFF;
    v364 = *((_DWORD *)v228 + 470);
    if ((v364 & 0x10000000) != 0)
      v365 = 0x40000000;
    else
      v365 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v359 = v365;
    else
      v359 = v364 & 0xCFFFFFFF;
    v366 = *((_DWORD *)v228 + 414);
    if ((v366 & 0x10000000) != 0)
      v367 = 0x40000000;
    else
      v367 = 0x80000000;
    if ((v366 & 0x20000000) != 0)
      v360 = v367;
    else
      v360 = v366 & 0xCFFFFFFF;
    v368 = *((_DWORD *)v228 + 478);
    if ((v368 & 0x10000000) != 0)
      v369 = 0x40000000;
    else
      v369 = 0x80000000;
    if ((v368 & 0x20000000) != 0)
      v361 = v369;
    else
      v361 = v368 & 0xCFFFFFFF;
    v370 = *((_DWORD *)v228 + 422);
    if ((v370 & 0x10000000) != 0)
      v362 = 0x40000000;
    else
      v362 = 0x80000000;
    if ((v370 & 0x20000000) == 0)
      v362 = v370 & 0xCFFFFFFF;
  }
  v441 = v358 >> 30;
  v459 = v360 >> 30;
  v463 = v359 >> 30;
  v371 = v362 >> 30;
  v534 = v499;
  v535 = v500;
  v536 = v501;
  v533 = v498;
  v532 = v497;
  if ((v343 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468D940;
    v513 = (__int128)xmmword_22468D950;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 5, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1D000001DDLL), xmmword_22468D950);
    if ((v325 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468D960;
      v573 = (__int128)xmmword_22468D970;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 5, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1D000001DDLL), xmmword_22468D970);
      if (((v472 | v467) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468D980;
        v568 = (__int128)xmmword_22468D990;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 5, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1D000001DDLL), xmmword_22468D990);
        v372 = (v451 & 1) == 0 && ((v335 | v353) & 1) == 0;
        if ((v434 & 1) == 0 && v372)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468D9A0;
          v563 = (__int128)xmmword_22468D9B0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 5, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19D000001DDLL), xmmword_22468D9B0);
        }
      }
      v373 = (v446 & 1) == 0 && ((v335 | v353) & 1) == 0;
      if (v373 && (v455 & 1) == 0)
      {
        v564 = v534;
        v565 = v535;
        v566 = v536;
        v563 = v533;
        v562 = v532;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468D9C0;
        v558 = (__int128)xmmword_22468D9D0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 5, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19D000001DDLL), xmmword_22468D9D0);
      }
    }
    if (((v467 | v463) & 1) == 0)
    {
      v559 = v534;
      v560 = v535;
      v561 = v536;
      v558 = v533;
      v557 = v532;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468D9E0;
      v553 = (__int128)xmmword_22468D9F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 5, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x1D000001DDLL), xmmword_22468D9F0);
      v374 = (v441 & 1) == 0 && ((v353 | v459) & 1) == 0;
      if ((v451 & 1) == 0 && v374)
      {
        v554 = v534;
        v555 = v535;
        v556 = v536;
        v553 = v533;
        v552 = v532;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468DA00;
        v548 = (__int128)xmmword_22468DA10;
        *(_QWORD *)&v537 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 5, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)&v537, COERCE_DOUBLE(0x19D000001DDLL), xmmword_22468DA10);
      }
    }
    v375 = (v455 & 1) == 0 && ((v353 | v459) & 1) == 0;
    if (v375 && (v371 & 1) == 0)
    {
      v549 = v534;
      v550 = v535;
      v551 = v536;
      v548 = v533;
      v547 = v532;
      *(_QWORD *)&v537 = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468DA20;
      v543 = xmmword_22468DA30;
      *(_QWORD *)&v527 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 5, 3, 7, (uint64_t)&v537, (uint64_t)&v542, (uint64_t)&v527, COERCE_DOUBLE(0x19D000001DDLL), xmmword_22468DA30);
    }
  }
  v529 = v499;
  v530 = v500;
  v531 = v501;
  v528 = v498;
  v527 = v497;
  v376 = *((_DWORD *)v228 + 407);
  if (**v478)
  {
    v377 = *((_DWORD *)v228 + 471);
    v378 = *((_DWORD *)v228 + 415);
    v379 = *((_DWORD *)v228 + 479);
    v380 = *((_DWORD *)v228 + 423);
  }
  else
  {
    if ((v376 & 0x10000000) != 0)
      v381 = 0x40000000;
    else
      v381 = 0x80000000;
    if ((v376 & 0x20000000) != 0)
      v376 = v381;
    else
      v376 &= 0xCFFFFFFF;
    v382 = *((_DWORD *)v228 + 471);
    if ((v382 & 0x10000000) != 0)
      v383 = 0x40000000;
    else
      v383 = 0x80000000;
    if ((v382 & 0x20000000) != 0)
      v377 = v383;
    else
      v377 = v382 & 0xCFFFFFFF;
    v384 = *((_DWORD *)v228 + 415);
    if ((v384 & 0x10000000) != 0)
      v385 = 0x40000000;
    else
      v385 = 0x80000000;
    if ((v384 & 0x20000000) != 0)
      v378 = v385;
    else
      v378 = v384 & 0xCFFFFFFF;
    v386 = *((_DWORD *)v228 + 479);
    if ((v386 & 0x10000000) != 0)
      v387 = 0x40000000;
    else
      v387 = 0x80000000;
    if ((v386 & 0x20000000) != 0)
      v379 = v387;
    else
      v379 = v386 & 0xCFFFFFFF;
    v388 = *((_DWORD *)v228 + 423);
    if ((v388 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v388 & 0x20000000) == 0)
      v380 = v388 & 0xCFFFFFFF;
  }
  v389 = v378 >> 30;
  v473 = v376 >> 30;
  v390 = v377 >> 30;
  v479 = v380 >> 30;
  v539 = v499;
  v540 = v500;
  v541 = v501;
  v538 = v498;
  v537 = v497;
  if ((v361 & 0x40000000) != 0)
  {
    v519 = v499;
    v520 = v500;
    v521 = v501;
    v518 = v498;
    v517 = v497;
    *(_QWORD *)&v572 = 0xE0D0E0D0E0D0E0DLL;
    v512 = xmmword_22468DA40;
    v513 = (__int128)xmmword_22468DA50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 6, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1E000001DELL), xmmword_22468DA50);
    if ((v343 & 0x40000000) == 0)
    {
      v514 = v499;
      v515 = v500;
      v516 = v501;
      v513 = v498;
      v512 = v497;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468DA60;
      v573 = (__int128)xmmword_22468DA70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 6, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1E000001DELL), xmmword_22468DA70);
      if (((v467 | v463) & 1) == 0)
      {
        v574 = v499;
        v575 = v500;
        v576 = v501;
        v572 = v497;
        v573 = v498;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v567 = xmmword_22468DA80;
        v568 = (__int128)xmmword_22468DA90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 6, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1E000001DELL), xmmword_22468DA90);
        v391 = (v441 & 1) == 0 && ((v353 | v459) & 1) == 0;
        if ((v451 & 1) == 0 && v391)
        {
          v569 = v499;
          v570 = v500;
          v571 = v501;
          v568 = v498;
          v567 = v497;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468DAA0;
          v563 = (__int128)xmmword_22468DAB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 6, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19E000001DELL), xmmword_22468DAB0);
        }
      }
      v392 = (v455 & 1) == 0 && ((v353 | v459) & 1) == 0;
      if (v392 && (v371 & 1) == 0)
      {
        v564 = v539;
        v565 = v540;
        v566 = v541;
        v563 = v538;
        v562 = v537;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v557 = xmmword_22468DAC0;
        v558 = (__int128)xmmword_22468DAD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 6, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19E000001DELL), xmmword_22468DAD0);
      }
    }
    if (((v463 | v390) & 1) == 0)
    {
      v559 = v539;
      v560 = v540;
      v561 = v541;
      v558 = v538;
      v557 = v537;
      *(_QWORD *)&v547 = 0xE0D0E0D0E0D0E0DLL;
      v552 = xmmword_22468DAE0;
      v553 = (__int128)xmmword_22468DAF0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 6, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)&v542, COERCE_DOUBLE(0x1E000001DELL), xmmword_22468DAF0);
      v393 = (v473 & 1) == 0 && ((v459 | v389) & 1) == 0;
      if ((v441 & 1) == 0 && v393)
      {
        v554 = v539;
        v555 = v540;
        v556 = v541;
        v553 = v538;
        v552 = v537;
        *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
        v547 = xmmword_22468DB00;
        v548 = (__int128)xmmword_22468DB10;
        *(_QWORD *)&v578[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 6, 3, 7, (uint64_t)&v542, (uint64_t)&v547, (uint64_t)v578, COERCE_DOUBLE(0x19E000001DELL), xmmword_22468DB10);
      }
    }
    v394 = (v371 & 1) == 0 && ((v459 | v389) & 1) == 0;
    if (v394 && (v479 & 1) == 0)
    {
      v549 = v539;
      v550 = v540;
      v551 = v541;
      v548 = v538;
      v547 = v537;
      *(_QWORD *)&v578[0] = 0xD0D0D0D0D0D0D0DLL;
      v542 = xmmword_22468DB20;
      v543 = xmmword_22468DB30;
      v579[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 6, 3, 7, (uint64_t)v578, (uint64_t)&v542, (uint64_t)v579, COERCE_DOUBLE(0x19E000001DELL), xmmword_22468DB30);
    }
  }
  v395 = *(unsigned int *)(v483 + 88);
  if ((v395 & 0x80000000) != 0)
  {
    v398 = *v475;
    v399 = *(_DWORD *)(v486 + 1880);
    v400 = **v475;
    if (**v475)
      goto LABEL_1060;
  }
  else
  {
    v396 = *(_QWORD *)(v486 + 2328);
    if (v395 >= (*(_QWORD *)(v486 + 2336) - v396) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v396 = *(_QWORD *)(v486 + 2328);
    }
    v397 = v396 + (v395 << 11);
    v398 = *v475;
    v399 = *(_DWORD *)(v397 + 1600);
    v400 = **v475;
    if (**v475)
    {
LABEL_1060:
      v401 = *(unsigned int *)(v483 + 88);
      if ((v401 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v403 = *(_DWORD *)(v486 + 2136);
      if (v400)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v399 & 0x10000000) != 0)
    v408 = 0x40000000;
  else
    v408 = 0x80000000;
  if ((v399 & 0x20000000) != 0)
    v399 = v408;
  else
    v399 &= 0xCFFFFFFF;
  v401 = *(unsigned int *)(v483 + 88);
  if ((v401 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v402 = *(_QWORD *)(v486 + 2328);
  if (v401 >= (*(_QWORD *)(v486 + 2336) - v402) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v402 = *(_QWORD *)(v486 + 2328);
    v398 = *v475;
    v400 = **v475;
  }
  v403 = *(_DWORD *)(v402 + (v401 << 11) + 1856);
  if (v400)
  {
LABEL_1065:
    v404 = *(unsigned int *)(v483 + 88);
    if ((v404 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v406 = *(_DWORD *)(v486 + 1912);
    if (v400)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v403 & 0x10000000) != 0)
    v409 = 0x40000000;
  else
    v409 = 0x80000000;
  if ((v403 & 0x20000000) != 0)
    v403 = v409;
  else
    v403 &= 0xCFFFFFFF;
  v404 = *(unsigned int *)(v483 + 88);
  if ((v404 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v405 = *(_QWORD *)(v486 + 2328);
  if (v404 >= (*(_QWORD *)(v486 + 2336) - v405) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v405 = *(_QWORD *)(v486 + 2328);
    v398 = *v475;
    v400 = **v475;
  }
  v406 = *(_DWORD *)(v405 + (v404 << 11) + 1632);
  if (v400)
  {
LABEL_1070:
    v407 = *(unsigned int *)(v483 + 88);
    if ((v407 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v406 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v406 & 0x20000000) != 0)
    v406 = v410;
  else
    v406 &= 0xCFFFFFFF;
  v407 = *(unsigned int *)(v483 + 88);
  if ((v407 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v411 = *(_QWORD *)(v486 + 2328);
  v412 = (*(_QWORD *)(v486 + 2336) - v411) >> 11;
  if (v412 > v407)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v398 = *v475;
  v407 = *(unsigned int *)(v483 + 88);
  if ((v407 & 0x80000000) != 0)
  {
LABEL_1139:
    v413 = *(_DWORD *)(v486 + 1944);
    if (*v398)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v411 = *(_QWORD *)(v486 + 2328);
  v412 = (*(_QWORD *)(v486 + 2336) - v411) >> 11;
LABEL_1100:
  if (v412 <= v407)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v411 = *(_QWORD *)(v486 + 2328);
    v398 = *v475;
  }
  v413 = *(_DWORD *)(v411 + (v407 << 11) + 1664);
  if (!*v398)
  {
LABEL_1104:
    if ((v413 & 0x10000000) != 0)
      v414 = 0x40000000;
    else
      v414 = 0x80000000;
    if ((v413 & 0x20000000) != 0)
      v413 = v414;
    else
      v413 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v544 = v529;
  v545 = v530;
  v546 = v531;
  v543 = (float32x4_t)v528;
  v542 = v527;
  if ((v379 & 0x40000000) != 0)
  {
    v519 = v529;
    v520 = v530;
    v521 = v531;
    *(_QWORD *)&v572 = 0x171617160E0D0E0DLL;
    v518 = v528;
    v517 = v527;
    v512 = xmmword_22468DB40;
    v513 = (__int128)xmmword_22468DB50;
    *(_QWORD *)&v567 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v517, 7, 3, 7, (uint64_t)&v572, (uint64_t)&v512, (uint64_t)&v567, COERCE_DOUBLE(0x1F000001DFLL), xmmword_22468DB50);
    if ((v361 & 0x40000000) == 0)
    {
      v514 = v529;
      v515 = v530;
      v516 = v531;
      v513 = v528;
      v512 = v527;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468DB60;
      v573 = (__int128)xmmword_22468DB70;
      *(_QWORD *)&v562 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v512, 7, 3, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x1F000001DFLL), xmmword_22468DB70);
      if (((v463 | v390) & 1) == 0)
      {
        v574 = v529;
        v575 = v530;
        v576 = v531;
        *(_QWORD *)&v562 = 0xE0D0E0D0E0D0E0DLL;
        v572 = v527;
        v573 = v528;
        v567 = xmmword_22468DB80;
        v568 = (__int128)xmmword_22468DB90;
        *(_QWORD *)&v557 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v572, 7, 3, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1F000001DFLL), xmmword_22468DB90);
        v415 = (v473 & 1) == 0 && ((v459 | v389) & 1) == 0;
        if ((v441 & 1) == 0 && v415)
        {
          v569 = v529;
          v570 = v530;
          v571 = v531;
          v568 = v528;
          v567 = v527;
          *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
          v562 = xmmword_22468DBA0;
          v563 = (__int128)xmmword_22468DBB0;
          *(_QWORD *)&v552 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v567, 7, 3, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x19F000001DFLL), xmmword_22468DBB0);
        }
      }
      v416 = (v371 & 1) == 0 && ((v459 | v389) & 1) == 0;
      if (v416 && (v479 & 1) == 0)
      {
        v564 = v544;
        v565 = v545;
        v566 = v546;
        *(_QWORD *)&v552 = 0xD0D0D0D0D0D0D0DLL;
        v563 = (__int128)v543;
        v562 = v542;
        v557 = xmmword_22468DBC0;
        v558 = (__int128)xmmword_22468DBD0;
        *(_QWORD *)&v547 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v562, 7, 3, 7, (uint64_t)&v552, (uint64_t)&v557, (uint64_t)&v547, COERCE_DOUBLE(0x19F000001DFLL), xmmword_22468DBD0);
      }
    }
    if (!(v403 & 0x40000000 | v390 & 1))
    {
      v559 = v544;
      v560 = v545;
      v561 = v546;
      *(_QWORD *)&v547 = 0x17160E0D17160E0DLL;
      v558 = (__int128)v543;
      v557 = v542;
      v552 = xmmword_22468DBE0;
      v553 = (__int128)xmmword_22468DBF0;
      *(_QWORD *)&v578[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v557, 7, 3, 7, (uint64_t)&v547, (uint64_t)&v552, (uint64_t)v578, COERCE_DOUBLE(0x1F000001DFLL), xmmword_22468DBF0);
      v417 = (v399 & 0x40000000) == 0 && (v406 & 0x40000000 | v389 & 1) == 0;
      if ((v473 & 1) == 0 && v417)
      {
        v554 = v544;
        v555 = v545;
        v556 = v546;
        *(_QWORD *)&v578[0] = 0x161616160D0D0D0DLL;
        v553 = (__int128)v543;
        v552 = v542;
        v547 = xmmword_22468DC00;
        v548 = (__int128)xmmword_22468DC10;
        v579[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v552, 7, 3, 7, (uint64_t)v578, (uint64_t)&v547, (uint64_t)v579, COERCE_DOUBLE(0x19F000001DFLL), xmmword_22468DC10);
      }
    }
    v418 = (v479 & 1) == 0 && (v406 & 0x40000000 | v389 & 1) == 0;
    if (v418 && (v413 & 0x40000000) == 0)
    {
      v549 = v544;
      v550 = v545;
      v551 = v546;
      v579[0] = 0x16160D0D16160D0DLL;
      v548 = (__int128)v543;
      v547 = v542;
      v578[0] = xmmword_22468DC20;
      v578[1] = xmmword_22468DC30;
      v577 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v547, 7, 3, 7, (uint64_t)v579, (uint64_t)v578, (uint64_t)&v577, COERCE_DOUBLE(0x19F000001DFLL), xmmword_22468DC30);
    }
  }
  v512 = v437;
  *(_QWORD *)&v513 = v228;
  *(_QWORD *)&v572 = v486;
  *((_QWORD *)&v572 + 1) = v483;
  *(_QWORD *)&v573 = v475;
  v521 = v491;
  v520 = v490;
  v519 = v489;
  v517 = v487;
  v518 = v488;
  return sub_223E544A0((unsigned __int8 ***)&v512, &v572, &v517);
}

unint64_t sub_223E544A0(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  _BYTE **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _BYTE **v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  __int128 v81;
  __int128 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  _BOOL4 v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  _BOOL4 v120;
  _BOOL4 v121;
  _BOOL4 v122;
  _BOOL4 v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  _BOOL4 v138;
  _BOOL4 v139;
  _BOOL4 v140;
  _BOOL4 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  _BOOL4 v157;
  _BOOL4 v158;
  _BOOL4 v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  _BOOL4 v174;
  _BOOL4 v175;
  _BOOL4 v176;
  _BOOL4 v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  int v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  _BOOL4 v195;
  _BOOL4 v196;
  _BOOL4 v197;
  _BOOL4 v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  unsigned int v203;
  int v204;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unsigned int v218;
  _BOOL4 v219;
  _BOOL4 v220;
  _BOOL4 v221;
  _BOOL4 v222;
  unsigned __int8 **v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  unint64_t v241;
  uint64_t v242;
  unsigned int v243;
  int v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  _BOOL4 v276;
  _BOOL4 v277;
  _BOOL4 v278;
  _BOOL4 v279;
  _BOOL4 v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  _BOOL4 v295;
  _BOOL4 v296;
  _BOOL4 v297;
  _BOOL4 v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  int v311;
  _BOOL4 v312;
  _BOOL4 v313;
  _BOOL4 v314;
  _BOOL4 v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  _BOOL4 v331;
  _BOOL4 v332;
  _BOOL4 v333;
  _BOOL4 v334;
  _BOOL4 v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  _BOOL4 v352;
  _BOOL4 v353;
  _BOOL4 v354;
  _BOOL4 v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  int v368;
  _BOOL4 v369;
  _BOOL4 v370;
  _BOOL4 v371;
  _BOOL4 v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  _BOOL4 v388;
  _BOOL4 v389;
  _BOOL4 v390;
  _BOOL4 v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _BYTE *v395;
  unsigned int v396;
  int v397;
  unint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unint64_t v401;
  uint64_t v402;
  unsigned int v403;
  unint64_t v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  uint64_t v408;
  unint64_t v409;
  unsigned int v410;
  unsigned int v411;
  _BOOL4 v412;
  _BOOL4 v413;
  _BOOL4 v414;
  _BOOL4 v415;
  _BOOL4 v416;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t *v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  __int128 v434;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned __int8 **v471;
  _BYTE **v472;
  uint64_t v473;
  _BYTE **v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  _BYTE **v479;
  unsigned int v480;
  unsigned int v481;
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  float32x4_t v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  uint64_t v573;
  _OWORD v574[2];
  _QWORD v575[3];

  v575[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v479 = *a1;
  v6 = *((_DWORD *)v5 + 408);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 472);
    v9 = *((_DWORD *)v5 + 416);
    v10 = *((_DWORD *)v5 + 480);
    v11 = *((_DWORD *)v5 + 424);
    v12 = *a2;
    v464 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v473 = v12;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v18 = *((_DWORD *)v5 + 472);
    if ((v18 & 0x20000000) != 0)
      v8 = 4 * v18;
    else
      v8 = *((_DWORD *)v5 + 472);
    v19 = *((_DWORD *)v5 + 416);
    if ((v19 & 0x20000000) != 0)
      v9 = 4 * v19;
    else
      v9 = *((_DWORD *)v5 + 416);
    v20 = *((_DWORD *)v5 + 480);
    if ((v20 & 0x20000000) != 0)
      v10 = 4 * v20;
    else
      v10 = *((_DWORD *)v5 + 480);
    v21 = *((_DWORD *)v5 + 424);
    if ((v21 & 0x10000000) != 0)
      v22 = 0x40000000;
    else
      v22 = 0x80000000;
    if ((v21 & 0x20000000) != 0)
      v11 = v22;
    else
      v11 = v21 & 0xCFFFFFFF;
    v12 = *a2;
    v464 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v470 = v11;
  v476 = v9;
  v23 = (_BYTE **)a2[2];
  v24 = *(unsigned int *)(a2[1] + 16);
  v480 = v8;
  if ((v24 & 0x80000000) != 0)
  {
    v26 = v12 + 280;
  }
  else
  {
    v25 = *(_QWORD *)(v12 + 2328);
    if (v24 >= (*(_QWORD *)(v12 + 2336) - v25) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v25 = *(_QWORD *)(v12 + 2328);
      v10 = v464;
      v8 = v480;
    }
    v26 = v25 + (v24 << 11);
  }
  v27 = *(_DWORD *)(v26 + 1660);
  v28 = v27 & 0xCFFFFFFF;
  if ((v27 & 0x10000000) != 0)
    v29 = 0x40000000;
  else
    v29 = 0x80000000;
  if ((v27 & 0x20000000) != 0)
    v28 = v29;
  if (**v23)
    v30 = v27;
  else
    v30 = v28;
  v31 = *a2;
  v32 = (_BYTE **)a2[2];
  v33 = *(unsigned int *)(a2[1] + 16);
  if ((v33 & 0x80000000) != 0)
  {
    v35 = v31 + 280;
  }
  else
  {
    v34 = *(_QWORD *)(v31 + 2328);
    if (v33 >= (*(_QWORD *)(v31 + 2336) - v34) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v34 = *(_QWORD *)(v31 + 2328);
      v10 = v464;
      v8 = v480;
    }
    v35 = v34 + (v33 << 11);
  }
  v36 = *(_DWORD *)(v35 + 1916);
  v37 = v36 & 0xCFFFFFFF;
  if ((v36 & 0x10000000) != 0)
    v38 = 0x40000000;
  else
    v38 = 0x80000000;
  if ((v36 & 0x20000000) != 0)
    v37 = v38;
  if (**v32)
    v39 = v36;
  else
    v39 = v37;
  v40 = *a2;
  v41 = (_BYTE **)a2[2];
  v42 = *(unsigned int *)(a2[1] + 16);
  if ((v42 & 0x80000000) != 0)
  {
    v44 = v40 + 280;
  }
  else
  {
    v43 = *(_QWORD *)(v40 + 2328);
    if (v42 >= (*(_QWORD *)(v40 + 2336) - v43) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v43 = *(_QWORD *)(v40 + 2328);
      v10 = v464;
      v8 = v480;
    }
    v44 = v43 + (v42 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1692);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v41)
    v48 = v45;
  else
    v48 = v46;
  v49 = *a2;
  v50 = (_BYTE **)a2[2];
  v51 = *(unsigned int *)(a2[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v53 = *(_DWORD *)(v49 + 2228);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1175;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v464;
      v8 = v480;
    }
    v53 = *(_DWORD *)(v52 + (v51 << 11) + 1948);
    if (**v50)
    {
LABEL_69:
      v54 = a2;
      v55 = *a2;
      v56 = (_BYTE **)v54[2];
      v57 = v54;
      v58 = *(unsigned int *)(v54[1] + 16);
      if ((v58 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v60 = v55 + 280;
      goto LABEL_83;
    }
  }
  if ((v53 & 0x10000000) != 0)
    v61 = 0x40000000;
  else
    v61 = 0x80000000;
  if ((v53 & 0x20000000) != 0)
    v53 = v61;
  else
    v53 &= 0xCFFFFFFF;
  v62 = a2;
  v55 = *a2;
  v56 = (_BYTE **)v62[2];
  v57 = v62;
  v58 = *(unsigned int *)(v62[1] + 16);
  if ((v58 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v59 = *(_QWORD *)(v55 + 2328);
  if (v58 >= (*(_QWORD *)(v55 + 2336) - v59) >> 11)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v59 = *(_QWORD *)(v55 + 2328);
      v10 = v464;
      v8 = v480;
      goto LABEL_73;
    }
LABEL_1175:
    abort();
  }
LABEL_73:
  v60 = v59 + (v58 << 11);
LABEL_83:
  v17 = (v30 >> 30) & 1;
  v16 = (v39 >> 30) & 1;
  v15 = (v48 >> 30) & 1;
  v14 = (v53 >> 30) & 1;
  v63 = *(_DWORD *)(v60 + 1724);
  a2 = v57;
  v9 = v476;
  v11 = v470;
  if (!**v56)
  {
    if ((v63 & 0x10000000) != 0)
      v64 = 0x40000000;
    else
      v64 = 0x80000000;
    if ((v63 & 0x20000000) != 0)
      v63 = v64;
    else
      v63 &= 0xCFFFFFFF;
  }
  v13 = (v63 >> 30) & 1;
  v5 = a1[2];
  v473 = *v57;
  v479 = *a1;
  v7 = ***a1;
LABEL_91:
  v437 = v6 >> 30;
  v477 = a2[1];
  v471 = (unsigned __int8 **)a2[2];
  v490 = a3[2];
  v491 = a3[3];
  v492 = a3[4];
  v488 = *a3;
  v489 = a3[1];
  v65 = *((_DWORD *)v5 + 409);
  v429 = a2;
  if (v7)
  {
    v66 = *((_DWORD *)v5 + 473);
    v67 = *((_DWORD *)v5 + 417);
    v460 = *((_DWORD *)v5 + 481);
    v68 = *((_DWORD *)v5 + 425);
  }
  else
  {
    if ((v65 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v65 & 0x20000000) != 0)
      v65 = v69;
    else
      v65 &= 0xCFFFFFFF;
    v70 = *((_DWORD *)v5 + 473);
    if ((v70 & 0x10000000) != 0)
      v71 = 0x40000000;
    else
      v71 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v66 = v71;
    else
      v66 = v70 & 0xCFFFFFFF;
    v72 = *((_DWORD *)v5 + 417);
    if ((v72 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v72 & 0x20000000) != 0)
      v67 = v73;
    else
      v67 = v72 & 0xCFFFFFFF;
    v74 = *((_DWORD *)v5 + 481);
    if ((v74 & 0x10000000) != 0)
      v75 = 0x40000000;
    else
      v75 = 0x80000000;
    if ((v74 & 0x20000000) != 0)
      v76 = v75;
    else
      v76 = v74 & 0xCFFFFFFF;
    v460 = v76;
    v77 = *((_DWORD *)v5 + 425);
    if ((v77 & 0x10000000) != 0)
      v68 = 0x40000000;
    else
      v68 = 0x80000000;
    if ((v77 & 0x20000000) == 0)
      v68 = v77 & 0xCFFFFFFF;
  }
  v78 = v9 >> 30;
  v79 = v8 >> 30;
  v441 = v11 >> 30;
  v426 = v65 >> 30;
  v451 = v67 >> 30;
  v455 = v66 >> 30;
  v500 = a3[2];
  v501 = a3[3];
  v502 = a3[4];
  v432 = v68 >> 30;
  v498 = *a3;
  v499 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v80 = v17;
    v81 = a3[3];
    v515 = a3[2];
    v516 = v81;
    v517 = a3[4];
    v82 = *a3;
    v514 = a3[1];
    v513 = v82;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468DC40;
    v509 = (__int128)xmmword_22468DC50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 0, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x20000001E0), xmmword_22468DC50);
    if (!v14)
    {
      v510 = v500;
      v511 = v501;
      v512 = v502;
      *(_QWORD *)&v563 = 0x5040E0D05040E0DLL;
      v509 = v499;
      v508 = v498;
      v568 = xmmword_22468DC60;
      v569 = (__int128)xmmword_22468DC70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 0, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x20000001E0), xmmword_22468DC70);
      if (!(v16 | v79 & 1))
      {
        v570 = v500;
        v571 = v501;
        v572 = v502;
        *(_QWORD *)&v558 = 0x50405040E0D0E0DLL;
        v568 = v498;
        v569 = v499;
        v563 = xmmword_22468DC80;
        v564 = (__int128)xmmword_22468DC90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 0, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x20000001E0), xmmword_22468DC90);
        v83 = (v437 & 1) == 0 && (v15 | v78 & 1) == 0;
        if (!v80 && v83)
        {
          v565 = v500;
          v566 = v501;
          v567 = v502;
          v564 = v499;
          v563 = v498;
          *(_QWORD *)&v553 = 0x4040D0D04040D0DLL;
          v558 = xmmword_22468DCA0;
          v559 = (__int128)xmmword_22468DCB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 0, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A0000001E0), xmmword_22468DCB0);
        }
      }
      if (v13)
        v84 = 0;
      else
        v84 = (v15 | v78 & 1) == 0;
      if (v84 && (v441 & 1) == 0)
      {
        v560 = v500;
        v561 = v501;
        v562 = v502;
        *(_QWORD *)&v548 = 0x40404040D0D0D0DLL;
        v559 = v499;
        v558 = v498;
        v553 = xmmword_22468DCC0;
        v554 = (__int128)xmmword_22468DCD0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 0, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A0000001E0), xmmword_22468DCD0);
      }
    }
    if (((v79 | v455) & 1) == 0)
    {
      v555 = v500;
      v556 = v501;
      v557 = v502;
      v554 = v499;
      v553 = v498;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468DCE0;
      v549 = (__int128)xmmword_22468DCF0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 0, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x20000001E0), xmmword_22468DCF0);
      v85 = (v426 & 1) == 0 && ((v78 | v451) & 1) == 0;
      if ((v437 & 1) == 0 && v85)
      {
        v550 = v500;
        v551 = v501;
        v552 = v502;
        v549 = v499;
        v548 = v498;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468DD00;
        v544 = (__int128)xmmword_22468DD10;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 0, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A0000001E0), xmmword_22468DD10);
      }
    }
    v86 = (v441 & 1) == 0 && ((v78 | v451) & 1) == 0;
    v10 = v464;
    if (v86 && (v432 & 1) == 0)
    {
      v545 = v500;
      v546 = v501;
      v547 = v502;
      v544 = v499;
      v543 = v498;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468DD20;
      v539 = xmmword_22468DD30;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 0, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A0000001E0), xmmword_22468DD30);
      v10 = v464;
    }
  }
  v87 = *((_DWORD *)v5 + 410);
  if (**v479)
  {
    v88 = *((_DWORD *)v5 + 474);
    v89 = *((_DWORD *)v5 + 418);
    v90 = *((_DWORD *)v5 + 482);
    v91 = *((_DWORD *)v5 + 426);
  }
  else
  {
    if ((v87 & 0x10000000) != 0)
      v92 = 0x40000000;
    else
      v92 = 0x80000000;
    if ((v87 & 0x20000000) != 0)
      v87 = v92;
    else
      v87 &= 0xCFFFFFFF;
    v93 = *((_DWORD *)v5 + 474);
    if ((v93 & 0x10000000) != 0)
      v94 = 0x40000000;
    else
      v94 = 0x80000000;
    if ((v93 & 0x20000000) != 0)
      v88 = v94;
    else
      v88 = v93 & 0xCFFFFFFF;
    v95 = *((_DWORD *)v5 + 418);
    if ((v95 & 0x10000000) != 0)
      v96 = 0x40000000;
    else
      v96 = 0x80000000;
    if ((v95 & 0x20000000) != 0)
      v89 = v96;
    else
      v89 = v95 & 0xCFFFFFFF;
    v97 = *((_DWORD *)v5 + 482);
    if ((v97 & 0x10000000) != 0)
      v98 = 0x40000000;
    else
      v98 = 0x80000000;
    if ((v97 & 0x20000000) != 0)
      v90 = v98;
    else
      v90 = v97 & 0xCFFFFFFF;
    v99 = *((_DWORD *)v5 + 426);
    if ((v99 & 0x10000000) != 0)
      v91 = 0x40000000;
    else
      v91 = 0x80000000;
    if ((v99 & 0x20000000) == 0)
      v91 = v99 & 0xCFFFFFFF;
  }
  v447 = v89 >> 30;
  v423 = v87 >> 30;
  v465 = v88 >> 30;
  v100 = v91 >> 30;
  if ((v460 & 0x40000000) != 0)
  {
    v101 = (v10 & 0x40000000) == 0;
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468DD40;
    v509 = (__int128)xmmword_22468DD50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 1, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x21000001E1), xmmword_22468DD50);
    if (v101)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468DD60;
      v569 = (__int128)xmmword_22468DD70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 1, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x21000001E1), xmmword_22468DD70);
      if (((v79 | v455) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468DD80;
        v564 = (__int128)xmmword_22468DD90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 1, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x21000001E1), xmmword_22468DD90);
        v102 = (v426 & 1) == 0 && ((v78 | v451) & 1) == 0;
        if ((v437 & 1) == 0 && v102)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468DDA0;
          v559 = (__int128)xmmword_22468DDB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 1, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A1000001E1), xmmword_22468DDB0);
        }
      }
      v103 = (v441 & 1) == 0 && ((v78 | v451) & 1) == 0;
      if (v103 && (v432 & 1) == 0)
      {
        v560 = v490;
        v561 = v491;
        v562 = v492;
        v559 = v489;
        v558 = v488;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468DDC0;
        v554 = (__int128)xmmword_22468DDD0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 1, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A1000001E1), xmmword_22468DDD0);
      }
    }
    if (((v455 | v465) & 1) == 0)
    {
      v555 = v490;
      v556 = v491;
      v557 = v492;
      v554 = v489;
      v553 = v488;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468DDE0;
      v549 = (__int128)xmmword_22468DDF0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 1, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x21000001E1), xmmword_22468DDF0);
      v104 = (v423 & 1) == 0 && ((v451 | v447) & 1) == 0;
      if ((v426 & 1) == 0 && v104)
      {
        v550 = v490;
        v551 = v491;
        v552 = v492;
        v549 = v489;
        v548 = v488;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468DE00;
        v544 = (__int128)xmmword_22468DE10;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 1, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A1000001E1), xmmword_22468DE10);
      }
    }
    v105 = (v432 & 1) == 0 && ((v451 | v447) & 1) == 0;
    if (v105 && (v100 & 1) == 0)
    {
      v545 = v490;
      v546 = v491;
      v547 = v492;
      v544 = v489;
      v543 = v488;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468DE20;
      v539 = xmmword_22468DE30;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 1, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A1000001E1), xmmword_22468DE30);
    }
  }
  v106 = *((_DWORD *)v5 + 411);
  if (**v479)
  {
    v107 = *((_DWORD *)v5 + 475);
    v108 = *((_DWORD *)v5 + 419);
    v109 = *((_DWORD *)v5 + 483);
    v110 = *((_DWORD *)v5 + 427);
  }
  else
  {
    if ((v106 & 0x10000000) != 0)
      v111 = 0x40000000;
    else
      v111 = 0x80000000;
    if ((v106 & 0x20000000) != 0)
      v106 = v111;
    else
      v106 &= 0xCFFFFFFF;
    v112 = *((_DWORD *)v5 + 475);
    if ((v112 & 0x10000000) != 0)
      v113 = 0x40000000;
    else
      v113 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v107 = v113;
    else
      v107 = v112 & 0xCFFFFFFF;
    v114 = *((_DWORD *)v5 + 419);
    if ((v114 & 0x10000000) != 0)
      v115 = 0x40000000;
    else
      v115 = 0x80000000;
    if ((v114 & 0x20000000) != 0)
      v108 = v115;
    else
      v108 = v114 & 0xCFFFFFFF;
    v116 = *((_DWORD *)v5 + 483);
    if ((v116 & 0x10000000) != 0)
      v117 = 0x40000000;
    else
      v117 = 0x80000000;
    if ((v116 & 0x20000000) != 0)
      v109 = v117;
    else
      v109 = v116 & 0xCFFFFFFF;
    v118 = *((_DWORD *)v5 + 427);
    if ((v118 & 0x10000000) != 0)
      v110 = 0x40000000;
    else
      v110 = 0x80000000;
    if ((v118 & 0x20000000) == 0)
      v110 = v118 & 0xCFFFFFFF;
  }
  v422 = v106 >> 30;
  v438 = v108 >> 30;
  v442 = v107 >> 30;
  v119 = v110 >> 30;
  if ((v90 & 0x40000000) != 0)
  {
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468DE40;
    v509 = (__int128)xmmword_22468DE50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 2, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x22000001E2), xmmword_22468DE50);
    if ((v460 & 0x40000000) == 0)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468DE60;
      v569 = (__int128)xmmword_22468DE70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 2, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x22000001E2), xmmword_22468DE70);
      if (((v455 | v465) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468DE80;
        v564 = (__int128)xmmword_22468DE90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 2, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x22000001E2), xmmword_22468DE90);
        v120 = (v423 & 1) == 0 && ((v451 | v447) & 1) == 0;
        if ((v426 & 1) == 0 && v120)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468DEA0;
          v559 = (__int128)xmmword_22468DEB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 2, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A2000001E2), xmmword_22468DEB0);
        }
      }
      v121 = (v432 & 1) == 0 && ((v451 | v447) & 1) == 0;
      if (v121 && (v100 & 1) == 0)
      {
        v560 = v490;
        v561 = v491;
        v562 = v492;
        v559 = v489;
        v558 = v488;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468DEC0;
        v554 = (__int128)xmmword_22468DED0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 2, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A2000001E2), xmmword_22468DED0);
      }
    }
    if (((v465 | v442) & 1) == 0)
    {
      v555 = v490;
      v556 = v491;
      v557 = v492;
      v554 = v489;
      v553 = v488;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468DEE0;
      v549 = (__int128)xmmword_22468DEF0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 2, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x22000001E2), xmmword_22468DEF0);
      v122 = (v422 & 1) == 0 && ((v447 | v438) & 1) == 0;
      if ((v423 & 1) == 0 && v122)
      {
        v550 = v490;
        v551 = v491;
        v552 = v492;
        v549 = v489;
        v548 = v488;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468DF00;
        v544 = (__int128)xmmword_22468DF10;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 2, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A2000001E2), xmmword_22468DF10);
      }
    }
    v123 = (v100 & 1) == 0 && ((v447 | v438) & 1) == 0;
    if (v123 && (v119 & 1) == 0)
    {
      v545 = v490;
      v546 = v491;
      v547 = v492;
      v544 = v489;
      v543 = v488;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468DF20;
      v539 = xmmword_22468DF30;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 2, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A2000001E2), xmmword_22468DF30);
    }
  }
  v124 = *((_DWORD *)v5 + 412);
  if (**v479)
  {
    v125 = *((_DWORD *)v5 + 476);
    v126 = *((_DWORD *)v5 + 420);
    v127 = *((_DWORD *)v5 + 484);
    v128 = *((_DWORD *)v5 + 428);
  }
  else
  {
    if ((v124 & 0x10000000) != 0)
      v129 = 0x40000000;
    else
      v129 = 0x80000000;
    if ((v124 & 0x20000000) != 0)
      v124 = v129;
    else
      v124 &= 0xCFFFFFFF;
    v130 = *((_DWORD *)v5 + 476);
    if ((v130 & 0x10000000) != 0)
      v131 = 0x40000000;
    else
      v131 = 0x80000000;
    if ((v130 & 0x20000000) != 0)
      v125 = v131;
    else
      v125 = v130 & 0xCFFFFFFF;
    v132 = *((_DWORD *)v5 + 420);
    if ((v132 & 0x10000000) != 0)
      v133 = 0x40000000;
    else
      v133 = 0x80000000;
    if ((v132 & 0x20000000) != 0)
      v126 = v133;
    else
      v126 = v132 & 0xCFFFFFFF;
    v134 = *((_DWORD *)v5 + 484);
    if ((v134 & 0x10000000) != 0)
      v135 = 0x40000000;
    else
      v135 = 0x80000000;
    if ((v134 & 0x20000000) != 0)
      v127 = v135;
    else
      v127 = v134 & 0xCFFFFFFF;
    v136 = *((_DWORD *)v5 + 428);
    if ((v136 & 0x10000000) != 0)
      v128 = 0x40000000;
    else
      v128 = 0x80000000;
    if ((v136 & 0x20000000) == 0)
      v128 = v136 & 0xCFFFFFFF;
  }
  v137 = v126 >> 30;
  v427 = v124 >> 30;
  v461 = v125 >> 30;
  v433 = v128 >> 30;
  if ((v109 & 0x40000000) != 0)
  {
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468DF40;
    v509 = (__int128)xmmword_22468DF50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 3, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x23000001E3), xmmword_22468DF50);
    if ((v90 & 0x40000000) == 0)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468DF60;
      v569 = (__int128)xmmword_22468DF70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 3, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x23000001E3), xmmword_22468DF70);
      if (((v465 | v442) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468DF80;
        v564 = (__int128)xmmword_22468DF90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 3, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x23000001E3), xmmword_22468DF90);
        v138 = (v422 & 1) == 0 && ((v447 | v438) & 1) == 0;
        if ((v423 & 1) == 0 && v138)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468DFA0;
          v559 = (__int128)xmmword_22468DFB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 3, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A3000001E3), xmmword_22468DFB0);
        }
      }
      v139 = (v100 & 1) == 0 && ((v447 | v438) & 1) == 0;
      if (v139 && (v119 & 1) == 0)
      {
        v560 = v490;
        v561 = v491;
        v562 = v492;
        v559 = v489;
        v558 = v488;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468DFC0;
        v554 = (__int128)xmmword_22468DFD0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 3, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A3000001E3), xmmword_22468DFD0);
      }
    }
    if (((v442 | v461) & 1) == 0)
    {
      v555 = v490;
      v556 = v491;
      v557 = v492;
      v554 = v489;
      v553 = v488;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468DFE0;
      v549 = (__int128)xmmword_22468DFF0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 3, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x23000001E3), xmmword_22468DFF0);
      v140 = (v427 & 1) == 0 && ((v438 | v137) & 1) == 0;
      if ((v422 & 1) == 0 && v140)
      {
        v550 = v490;
        v551 = v491;
        v552 = v492;
        v549 = v489;
        v548 = v488;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E000;
        v544 = (__int128)xmmword_22468E010;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 3, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A3000001E3), xmmword_22468E010);
      }
    }
    v141 = (v119 & 1) == 0 && ((v438 | v137) & 1) == 0;
    if (v141 && (v433 & 1) == 0)
    {
      v545 = v490;
      v546 = v491;
      v547 = v492;
      v544 = v489;
      v543 = v488;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E020;
      v539 = xmmword_22468E030;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 3, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A3000001E3), xmmword_22468E030);
    }
  }
  v142 = *((_DWORD *)v5 + 413);
  if (**v479)
  {
    v143 = *((_DWORD *)v5 + 477);
    v144 = *((_DWORD *)v5 + 421);
    v145 = *((_DWORD *)v5 + 485);
    v146 = *((_DWORD *)v5 + 429);
  }
  else
  {
    if ((v142 & 0x10000000) != 0)
      v147 = 0x40000000;
    else
      v147 = 0x80000000;
    if ((v142 & 0x20000000) != 0)
      v142 = v147;
    else
      v142 &= 0xCFFFFFFF;
    v148 = *((_DWORD *)v5 + 477);
    if ((v148 & 0x10000000) != 0)
      v149 = 0x40000000;
    else
      v149 = 0x80000000;
    if ((v148 & 0x20000000) != 0)
      v143 = v149;
    else
      v143 = v148 & 0xCFFFFFFF;
    v150 = *((_DWORD *)v5 + 421);
    if ((v150 & 0x10000000) != 0)
      v151 = 0x40000000;
    else
      v151 = 0x80000000;
    if ((v150 & 0x20000000) != 0)
      v144 = v151;
    else
      v144 = v150 & 0xCFFFFFFF;
    v152 = *((_DWORD *)v5 + 485);
    if ((v152 & 0x10000000) != 0)
      v153 = 0x40000000;
    else
      v153 = 0x80000000;
    if ((v152 & 0x20000000) != 0)
      v145 = v153;
    else
      v145 = v152 & 0xCFFFFFFF;
    v154 = *((_DWORD *)v5 + 429);
    if ((v154 & 0x10000000) != 0)
      v146 = 0x40000000;
    else
      v146 = 0x80000000;
    if ((v154 & 0x20000000) == 0)
      v146 = v154 & 0xCFFFFFFF;
  }
  v155 = v144 >> 30;
  v424 = v142 >> 30;
  v466 = v143 >> 30;
  v156 = v146 >> 30;
  if ((v127 & 0x40000000) != 0)
  {
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E040;
    v509 = (__int128)xmmword_22468E050;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 4, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x24000001E4), xmmword_22468E050);
    if ((v109 & 0x40000000) == 0)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E060;
      v569 = (__int128)xmmword_22468E070;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 4, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x24000001E4), xmmword_22468E070);
      if (((v442 | v461) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E080;
        v564 = (__int128)xmmword_22468E090;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 4, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x24000001E4), xmmword_22468E090);
        v157 = (v427 & 1) == 0 && ((v438 | v137) & 1) == 0;
        if ((v422 & 1) == 0 && v157)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E0A0;
          v559 = (__int128)xmmword_22468E0B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 4, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A4000001E4), xmmword_22468E0B0);
        }
      }
      v158 = (v119 & 1) == 0 && ((v438 | v137) & 1) == 0;
      if (v158 && (v433 & 1) == 0)
      {
        v560 = v490;
        v561 = v491;
        v562 = v492;
        v559 = v489;
        v558 = v488;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E0C0;
        v554 = (__int128)xmmword_22468E0D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 4, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A4000001E4), xmmword_22468E0D0);
      }
    }
    if (((v461 | v466) & 1) == 0)
    {
      v555 = v490;
      v556 = v491;
      v557 = v492;
      v554 = v489;
      v553 = v488;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E0E0;
      v549 = (__int128)xmmword_22468E0F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 4, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x24000001E4), xmmword_22468E0F0);
      v159 = (v424 & 1) == 0 && ((v137 | v155) & 1) == 0;
      if ((v427 & 1) == 0 && v159)
      {
        v550 = v490;
        v551 = v491;
        v552 = v492;
        v549 = v489;
        v548 = v488;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E100;
        v544 = (__int128)xmmword_22468E110;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 4, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A4000001E4), xmmword_22468E110);
      }
    }
    v160 = (v433 & 1) == 0 && ((v137 | v155) & 1) == 0;
    if (v160 && (v156 & 1) == 0)
    {
      v545 = v490;
      v546 = v491;
      v547 = v492;
      v544 = v489;
      v543 = v488;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E120;
      v539 = xmmword_22468E130;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 4, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A4000001E4), xmmword_22468E130);
    }
  }
  v161 = *((_DWORD *)v5 + 414);
  if (**v479)
  {
    v162 = *((_DWORD *)v5 + 478);
    v163 = *((_DWORD *)v5 + 422);
    v456 = *((_DWORD *)v5 + 486);
    v164 = *((_DWORD *)v5 + 430);
  }
  else
  {
    if ((v161 & 0x10000000) != 0)
      v165 = 0x40000000;
    else
      v165 = 0x80000000;
    if ((v161 & 0x20000000) != 0)
      v161 = v165;
    else
      v161 &= 0xCFFFFFFF;
    v166 = *((_DWORD *)v5 + 478);
    if ((v166 & 0x10000000) != 0)
      v167 = 0x40000000;
    else
      v167 = 0x80000000;
    if ((v166 & 0x20000000) != 0)
      v162 = v167;
    else
      v162 = v166 & 0xCFFFFFFF;
    v168 = *((_DWORD *)v5 + 422);
    if ((v168 & 0x10000000) != 0)
      v169 = 0x40000000;
    else
      v169 = 0x80000000;
    if ((v168 & 0x20000000) != 0)
      v163 = v169;
    else
      v163 = v168 & 0xCFFFFFFF;
    v170 = *((_DWORD *)v5 + 486);
    if ((v170 & 0x10000000) != 0)
      v171 = 0x40000000;
    else
      v171 = 0x80000000;
    if ((v170 & 0x20000000) != 0)
      v172 = v171;
    else
      v172 = v170 & 0xCFFFFFFF;
    v456 = v172;
    v173 = *((_DWORD *)v5 + 430);
    if ((v173 & 0x10000000) != 0)
      v164 = 0x40000000;
    else
      v164 = 0x80000000;
    if ((v173 & 0x20000000) == 0)
      v164 = v173 & 0xCFFFFFFF;
  }
  v439 = v161 >> 30;
  v448 = v163 >> 30;
  v452 = v162 >> 30;
  v443 = v164 >> 30;
  v530 = v490;
  v531 = v491;
  v532 = v492;
  v529 = v489;
  v528 = v488;
  if ((v145 & 0x40000000) != 0)
  {
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E140;
    v509 = (__int128)xmmword_22468E150;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 5, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x25000001E5), xmmword_22468E150);
    if ((v127 & 0x40000000) == 0)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E160;
      v569 = (__int128)xmmword_22468E170;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 5, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x25000001E5), xmmword_22468E170);
      if (((v461 | v466) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E180;
        v564 = (__int128)xmmword_22468E190;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 5, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x25000001E5), xmmword_22468E190);
        v174 = (v424 & 1) == 0 && ((v137 | v155) & 1) == 0;
        if ((v427 & 1) == 0 && v174)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E1A0;
          v559 = (__int128)xmmword_22468E1B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 5, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A5000001E5), xmmword_22468E1B0);
        }
      }
      v175 = (v433 & 1) == 0 && ((v137 | v155) & 1) == 0;
      if (v175 && (v156 & 1) == 0)
      {
        v560 = v530;
        v561 = v531;
        v562 = v532;
        v559 = v529;
        v558 = v528;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E1C0;
        v554 = (__int128)xmmword_22468E1D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 5, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A5000001E5), xmmword_22468E1D0);
      }
    }
    if (((v466 | v452) & 1) == 0)
    {
      v555 = v530;
      v556 = v531;
      v557 = v532;
      v554 = v529;
      v553 = v528;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E1E0;
      v549 = (__int128)xmmword_22468E1F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 5, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x25000001E5), xmmword_22468E1F0);
      v176 = (v439 & 1) == 0 && ((v155 | v448) & 1) == 0;
      if ((v424 & 1) == 0 && v176)
      {
        v550 = v530;
        v551 = v531;
        v552 = v532;
        v549 = v529;
        v548 = v528;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E200;
        v544 = (__int128)xmmword_22468E210;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 5, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A5000001E5), xmmword_22468E210);
      }
    }
    v177 = (v156 & 1) == 0 && ((v155 | v448) & 1) == 0;
    if (v177 && (v443 & 1) == 0)
    {
      v545 = v530;
      v546 = v531;
      v547 = v532;
      v544 = v529;
      v543 = v528;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E220;
      v539 = xmmword_22468E230;
      *(_QWORD *)&v523 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 5, 4, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v523, COERCE_DOUBLE(0x1A5000001E5), xmmword_22468E230);
    }
  }
  v525 = v490;
  v526 = v491;
  v527 = v492;
  v524 = v489;
  v523 = v488;
  v178 = *((_DWORD *)v5 + 415);
  if (**v479)
  {
    v179 = *((_DWORD *)v5 + 479);
    v180 = *((_DWORD *)v5 + 423);
    v181 = *((_DWORD *)v5 + 487);
    v182 = *((_DWORD *)v5 + 431);
  }
  else
  {
    if ((v178 & 0x10000000) != 0)
      v183 = 0x40000000;
    else
      v183 = 0x80000000;
    if ((v178 & 0x20000000) != 0)
      v178 = v183;
    else
      v178 &= 0xCFFFFFFF;
    v184 = *((_DWORD *)v5 + 479);
    if ((v184 & 0x10000000) != 0)
      v185 = 0x40000000;
    else
      v185 = 0x80000000;
    if ((v184 & 0x20000000) != 0)
      v179 = v185;
    else
      v179 = v184 & 0xCFFFFFFF;
    v186 = *((_DWORD *)v5 + 423);
    if ((v186 & 0x10000000) != 0)
      v187 = 0x40000000;
    else
      v187 = 0x80000000;
    if ((v186 & 0x20000000) != 0)
      v180 = v187;
    else
      v180 = v186 & 0xCFFFFFFF;
    v188 = *((_DWORD *)v5 + 487);
    if ((v188 & 0x10000000) != 0)
      v189 = 0x40000000;
    else
      v189 = 0x80000000;
    if ((v188 & 0x20000000) != 0)
      v181 = v189;
    else
      v181 = v188 & 0xCFFFFFFF;
    v190 = *((_DWORD *)v5 + 431);
    if ((v190 & 0x10000000) != 0)
      v182 = 0x40000000;
    else
      v182 = 0x80000000;
    if ((v190 & 0x20000000) == 0)
      v182 = v190 & 0xCFFFFFFF;
  }
  v191 = v473;
  v192 = v180 >> 30;
  v481 = v178 >> 30;
  v193 = v179 >> 30;
  v194 = v182 >> 30;
  v535 = v490;
  v536 = v491;
  v537 = v492;
  v534 = v489;
  v533 = v488;
  if ((v456 & 0x40000000) != 0)
  {
    v515 = v490;
    v516 = v491;
    v517 = v492;
    v514 = v489;
    v513 = v488;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E240;
    v509 = (__int128)xmmword_22468E250;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 6, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x26000001E6), xmmword_22468E250);
    if ((v145 & 0x40000000) == 0)
    {
      v510 = v490;
      v511 = v491;
      v512 = v492;
      v509 = v489;
      v508 = v488;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E260;
      v569 = (__int128)xmmword_22468E270;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 6, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x26000001E6), xmmword_22468E270);
      if (((v466 | v452) & 1) == 0)
      {
        v570 = v490;
        v571 = v491;
        v572 = v492;
        v568 = v488;
        v569 = v489;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E280;
        v564 = (__int128)xmmword_22468E290;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 6, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x26000001E6), xmmword_22468E290);
        v195 = (v439 & 1) == 0 && ((v155 | v448) & 1) == 0;
        if ((v424 & 1) == 0 && v195)
        {
          v565 = v490;
          v566 = v491;
          v567 = v492;
          v564 = v489;
          v563 = v488;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E2A0;
          v559 = (__int128)xmmword_22468E2B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 6, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A6000001E6), xmmword_22468E2B0);
        }
      }
      v196 = (v156 & 1) == 0 && ((v155 | v448) & 1) == 0;
      if (v196 && (v443 & 1) == 0)
      {
        v560 = v535;
        v561 = v536;
        v562 = v537;
        v559 = v534;
        v558 = v533;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E2C0;
        v554 = (__int128)xmmword_22468E2D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 6, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A6000001E6), xmmword_22468E2D0);
      }
    }
    if (((v452 | v193) & 1) == 0)
    {
      v555 = v535;
      v556 = v536;
      v557 = v537;
      v554 = v534;
      v553 = v533;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E2E0;
      v549 = (__int128)xmmword_22468E2F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 6, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x26000001E6), xmmword_22468E2F0);
      v197 = (v481 & 1) == 0 && ((v448 | v192) & 1) == 0;
      if ((v439 & 1) == 0 && v197)
      {
        v550 = v535;
        v551 = v536;
        v552 = v537;
        v549 = v534;
        v548 = v533;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E300;
        v544 = (__int128)xmmword_22468E310;
        *(_QWORD *)&v518 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 6, 4, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v518, COERCE_DOUBLE(0x1A6000001E6), xmmword_22468E310);
      }
    }
    v198 = (v443 & 1) == 0 && ((v448 | v192) & 1) == 0;
    v191 = v473;
    if (v198 && (v194 & 1) == 0)
    {
      v545 = v535;
      v546 = v536;
      v547 = v537;
      v544 = v534;
      v543 = v533;
      *(_QWORD *)&v518 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E320;
      v539 = xmmword_22468E330;
      *(_QWORD *)&v574[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 6, 4, 7, (uint64_t)&v518, (uint64_t)&v538, (uint64_t)v574, COERCE_DOUBLE(0x1A6000001E6), xmmword_22468E330);
      v191 = v473;
    }
  }
  v199 = *(unsigned int *)(v477 + 88);
  if ((v199 & 0x80000000) != 0)
  {
    v202 = *v471;
    v203 = *(_DWORD *)(v191 + 1912);
    v204 = **v471;
    if (**v471)
      goto LABEL_509;
  }
  else
  {
    v200 = *(_QWORD *)(v191 + 2328);
    if (v199 >= (*(_QWORD *)(v191 + 2336) - v200) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v191 = v473;
      v200 = *(_QWORD *)(v473 + 2328);
    }
    v201 = v200 + (v199 << 11);
    v202 = *v471;
    v203 = *(_DWORD *)(v201 + 1632);
    v204 = **v471;
    if (**v471)
    {
LABEL_509:
      v205 = *(unsigned int *)(v477 + 88);
      if ((v205 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v207 = *(_DWORD *)(v191 + 2168);
      if (v204)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v203 & 0x10000000) != 0)
    v212 = 0x40000000;
  else
    v212 = 0x80000000;
  if ((v203 & 0x20000000) != 0)
    v203 = v212;
  else
    v203 &= 0xCFFFFFFF;
  v205 = *(unsigned int *)(v477 + 88);
  if ((v205 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v206 = *(_QWORD *)(v191 + 2328);
  if (v205 >= (*(_QWORD *)(v191 + 2336) - v206) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v191 = v473;
    v206 = *(_QWORD *)(v473 + 2328);
    v202 = *v471;
    v204 = **v471;
  }
  v207 = *(_DWORD *)(v206 + (v205 << 11) + 1888);
  if (v204)
  {
LABEL_514:
    v208 = *(unsigned int *)(v477 + 88);
    if ((v208 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v210 = *(_DWORD *)(v191 + 1944);
    if (v204)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v207 & 0x10000000) != 0)
    v213 = 0x40000000;
  else
    v213 = 0x80000000;
  if ((v207 & 0x20000000) != 0)
    v207 = v213;
  else
    v207 &= 0xCFFFFFFF;
  v208 = *(unsigned int *)(v477 + 88);
  if ((v208 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v209 = *(_QWORD *)(v191 + 2328);
  if (v208 >= (*(_QWORD *)(v191 + 2336) - v209) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v191 = v473;
    v209 = *(_QWORD *)(v473 + 2328);
    v202 = *v471;
    v204 = **v471;
  }
  v210 = *(_DWORD *)(v209 + (v208 << 11) + 1664);
  if (v204)
  {
LABEL_519:
    v211 = *(unsigned int *)(v477 + 88);
    if ((v211 & 0x80000000) != 0)
      goto LABEL_590;
    goto LABEL_545;
  }
LABEL_538:
  if ((v210 & 0x10000000) != 0)
    v214 = 0x40000000;
  else
    v214 = 0x80000000;
  if ((v210 & 0x20000000) != 0)
    v210 = v214;
  else
    v210 &= 0xCFFFFFFF;
  v211 = *(unsigned int *)(v477 + 88);
  if ((v211 & 0x80000000) != 0)
    goto LABEL_590;
LABEL_545:
  v215 = *(_QWORD *)(v191 + 2328);
  v216 = (*(_QWORD *)(v191 + 2336) - v215) >> 11;
  if (v216 > v211)
    goto LABEL_549;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v191 = v473;
  v202 = *v471;
  v211 = *(unsigned int *)(v477 + 88);
  if ((v211 & 0x80000000) != 0)
  {
LABEL_590:
    v217 = *(_DWORD *)(v191 + 1976);
    if (*v202)
      goto LABEL_559;
    goto LABEL_553;
  }
  v215 = *(_QWORD *)(v473 + 2328);
  v216 = (*(_QWORD *)(v473 + 2336) - v215) >> 11;
LABEL_549:
  if (v216 <= v211)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v215 = *(_QWORD *)(v473 + 2328);
    v202 = *v471;
  }
  v217 = *(_DWORD *)(v215 + (v211 << 11) + 1696);
  if (!*v202)
  {
LABEL_553:
    if ((v217 & 0x10000000) != 0)
      v218 = 0x40000000;
    else
      v218 = 0x80000000;
    if ((v217 & 0x20000000) != 0)
      v217 = v218;
    else
      v217 &= 0xCFFFFFFF;
  }
LABEL_559:
  v540 = v525;
  v541 = v526;
  v542 = v527;
  v539 = (float32x4_t)v524;
  v538 = v523;
  if ((v181 & 0x40000000) != 0)
  {
    v515 = v525;
    v516 = v526;
    v517 = v527;
    *(_QWORD *)&v568 = 0x171617160E0D0E0DLL;
    v514 = v524;
    v513 = v523;
    v508 = xmmword_22468E340;
    v509 = (__int128)xmmword_22468E350;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 7, 4, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x27000001E7), xmmword_22468E350);
    if ((v456 & 0x40000000) == 0)
    {
      v510 = v525;
      v511 = v526;
      v512 = v527;
      v509 = v524;
      v508 = v523;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E360;
      v569 = (__int128)xmmword_22468E370;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 7, 4, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x27000001E7), xmmword_22468E370);
      if (((v452 | v193) & 1) == 0)
      {
        v570 = v525;
        v571 = v526;
        v572 = v527;
        v568 = v523;
        v569 = v524;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E380;
        v564 = (__int128)xmmword_22468E390;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 7, 4, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x27000001E7), xmmword_22468E390);
        v219 = (v481 & 1) == 0 && ((v448 | v192) & 1) == 0;
        if ((v439 & 1) == 0 && v219)
        {
          v565 = v525;
          v566 = v526;
          v567 = v527;
          v564 = v524;
          v563 = v523;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E3A0;
          v559 = (__int128)xmmword_22468E3B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 7, 4, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A7000001E7), xmmword_22468E3B0);
        }
      }
      v220 = (v443 & 1) == 0 && ((v448 | v192) & 1) == 0;
      if (v220 && (v194 & 1) == 0)
      {
        v560 = v540;
        v561 = v541;
        v562 = v542;
        v559 = (__int128)v539;
        v558 = v538;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E3C0;
        v554 = (__int128)xmmword_22468E3D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 7, 4, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A7000001E7), xmmword_22468E3D0);
      }
    }
    if (!(v207 & 0x40000000 | v193 & 1))
    {
      v555 = v540;
      v556 = v541;
      v557 = v542;
      *(_QWORD *)&v543 = 0x17160E0D17160E0DLL;
      v554 = (__int128)v539;
      v553 = v538;
      v548 = xmmword_22468E3E0;
      v549 = (__int128)xmmword_22468E3F0;
      *(_QWORD *)&v518 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 7, 4, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v518, COERCE_DOUBLE(0x27000001E7), xmmword_22468E3F0);
      v221 = (v203 & 0x40000000) == 0 && (v210 & 0x40000000 | v192 & 1) == 0;
      if ((v481 & 1) == 0 && v221)
      {
        v550 = v540;
        v551 = v541;
        v552 = v542;
        *(_QWORD *)&v518 = 0x161616160D0D0D0DLL;
        v549 = (__int128)v539;
        v548 = v538;
        v543 = xmmword_22468E400;
        v544 = (__int128)xmmword_22468E410;
        *(_QWORD *)&v574[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 7, 4, 7, (uint64_t)&v518, (uint64_t)&v543, (uint64_t)v574, COERCE_DOUBLE(0x1A7000001E7), xmmword_22468E410);
      }
    }
    v222 = (v194 & 1) == 0 && (v210 & 0x40000000 | v192 & 1) == 0;
    if (v222 && (v217 & 0x40000000) == 0)
    {
      v545 = v540;
      v546 = v541;
      v547 = v542;
      *(_QWORD *)&v574[0] = 0x16160D0D16160D0DLL;
      v544 = (__int128)v539;
      v543 = v538;
      v518 = xmmword_22468E420;
      v519 = (__int128)xmmword_22468E430;
      v575[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 7, 4, 7, (uint64_t)v574, (uint64_t)&v518, (uint64_t)v575, COERCE_DOUBLE(0x1A7000001E7), xmmword_22468E430);
    }
  }
  v223 = a1[2];
  v478 = v429[1];
  v482 = *v429;
  v486 = a3[3];
  v487 = a3[4];
  v484 = a3[1];
  v485 = a3[2];
  v483 = *a3;
  v434 = *(_OWORD *)a1;
  v472 = (_BYTE **)v429[2];
  v474 = *a1;
  v224 = *((_DWORD *)v223 + 416);
  v225 = ***a1;
  if (***a1)
  {
    v226 = *((_DWORD *)v223 + 480);
    v227 = *((_DWORD *)v223 + 424);
    v228 = *((_DWORD *)v223 + 432);
    v467 = *((_DWORD *)v223 + 488);
    if ((v467 & 0x40000000) == 0)
    {
LABEL_589:
      v229 = v226;
      v230 = 0;
      v231 = 0;
      v232 = 0;
      v233 = 0;
      v234 = 0;
      goto LABEL_642;
    }
  }
  else
  {
    if ((v224 & 0x20000000) != 0)
      v224 *= 4;
    v235 = *((_DWORD *)v223 + 480);
    if ((v235 & 0x20000000) != 0)
      v226 = 4 * v235;
    else
      v226 = *((_DWORD *)v223 + 480);
    v236 = *((_DWORD *)v223 + 424);
    if ((v236 & 0x20000000) != 0)
      v227 = 4 * v236;
    else
      v227 = *((_DWORD *)v223 + 424);
    v237 = *((_DWORD *)v223 + 488);
    if ((v237 & 0x20000000) != 0)
      v238 = 4 * v237;
    else
      v238 = *((_DWORD *)v223 + 488);
    v239 = *((_DWORD *)v223 + 432);
    if ((v239 & 0x10000000) != 0)
      v240 = 0x40000000;
    else
      v240 = 0x80000000;
    if ((v239 & 0x20000000) != 0)
      v228 = v240;
    else
      v228 = v239 & 0xCFFFFFFF;
    v467 = v238;
    if ((v238 & 0x40000000) == 0)
      goto LABEL_589;
  }
  v241 = *(unsigned int *)(v478 + 16);
  if ((v241 & 0x80000000) != 0)
  {
    v243 = *(_DWORD *)(v482 + 1972);
    v244 = **v472;
    if (**v472)
      goto LABEL_615;
  }
  else
  {
    v242 = *(_QWORD *)(v482 + 2328);
    if (v241 >= (*(_QWORD *)(v482 + 2336) - v242) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v242 = *(_QWORD *)(v482 + 2328);
    }
    v243 = *(_DWORD *)(v242 + (v241 << 11) + 1692);
    v244 = **v472;
    if (**v472)
    {
LABEL_615:
      v245 = *(unsigned int *)(v478 + 16);
      if ((v245 & 0x80000000) == 0)
        goto LABEL_616;
LABEL_1149:
      v247 = *(_DWORD *)(v482 + 2228);
      if (v244)
        goto LABEL_620;
      goto LABEL_1150;
    }
  }
  if ((v243 & 0x10000000) != 0)
    v418 = 0x40000000;
  else
    v418 = 0x80000000;
  if ((v243 & 0x20000000) != 0)
    v243 = v418;
  else
    v243 &= 0xCFFFFFFF;
  v245 = *(unsigned int *)(v478 + 16);
  if ((v245 & 0x80000000) != 0)
    goto LABEL_1149;
LABEL_616:
  v246 = *(_QWORD *)(v482 + 2328);
  if (v245 >= (*(_QWORD *)(v482 + 2336) - v246) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v246 = *(_QWORD *)(v482 + 2328);
    v244 = **v472;
  }
  v247 = *(_DWORD *)(v246 + (v245 << 11) + 1948);
  if (v244)
  {
LABEL_620:
    v248 = *(unsigned int *)(v478 + 16);
    if ((v248 & 0x80000000) == 0)
      goto LABEL_621;
LABEL_1157:
    v250 = *(_DWORD *)(v482 + 2004);
    if (v244)
      goto LABEL_625;
    goto LABEL_1158;
  }
LABEL_1150:
  if ((v247 & 0x10000000) != 0)
    v419 = 0x40000000;
  else
    v419 = 0x80000000;
  if ((v247 & 0x20000000) != 0)
    v247 = v419;
  else
    v247 &= 0xCFFFFFFF;
  v248 = *(unsigned int *)(v478 + 16);
  if ((v248 & 0x80000000) != 0)
    goto LABEL_1157;
LABEL_621:
  v249 = *(_QWORD *)(v482 + 2328);
  if (v248 >= (*(_QWORD *)(v482 + 2336) - v249) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v249 = *(_QWORD *)(v482 + 2328);
    v244 = **v472;
  }
  v250 = *(_DWORD *)(v249 + (v248 << 11) + 1724);
  if (v244)
  {
LABEL_625:
    v251 = *(unsigned int *)(v478 + 16);
    if ((v251 & 0x80000000) == 0)
      goto LABEL_626;
LABEL_1165:
    v253 = *(_DWORD *)(v482 + 2260);
    if (v244)
      goto LABEL_630;
    goto LABEL_1166;
  }
LABEL_1158:
  if ((v250 & 0x10000000) != 0)
    v420 = 0x40000000;
  else
    v420 = 0x80000000;
  if ((v250 & 0x20000000) != 0)
    v250 = v420;
  else
    v250 &= 0xCFFFFFFF;
  v251 = *(unsigned int *)(v478 + 16);
  if ((v251 & 0x80000000) != 0)
    goto LABEL_1165;
LABEL_626:
  v252 = *(_QWORD *)(v482 + 2328);
  if (v251 >= (*(_QWORD *)(v482 + 2336) - v252) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v252 = *(_QWORD *)(v482 + 2328);
    v244 = **v472;
  }
  v253 = *(_DWORD *)(v252 + (v251 << 11) + 1980);
  if (v244)
  {
LABEL_630:
    v254 = *(unsigned int *)(v478 + 16);
    if ((v254 & 0x80000000) == 0)
      goto LABEL_631;
    goto LABEL_1173;
  }
LABEL_1166:
  if ((v253 & 0x10000000) != 0)
    v421 = 0x40000000;
  else
    v421 = 0x80000000;
  if ((v253 & 0x20000000) != 0)
    v253 = v421;
  else
    v253 &= 0xCFFFFFFF;
  v254 = *(unsigned int *)(v478 + 16);
  if ((v254 & 0x80000000) == 0)
  {
LABEL_631:
    v255 = *(_QWORD *)(v482 + 2328);
    if (v254 >= (*(_QWORD *)(v482 + 2336) - v255) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v255 = *(_QWORD *)(v482 + 2328);
      v244 = **v472;
    }
    v229 = v226;
    v256 = v255 + (v254 << 11);
    v234 = (v243 >> 30) & 1;
    v233 = (v247 >> 30) & 1;
    v232 = (v250 >> 30) & 1;
    v257 = *(_DWORD *)(v256 + 1756);
    v231 = (v253 >> 30) & 1;
    if (v244)
      goto LABEL_641;
    goto LABEL_635;
  }
LABEL_1173:
  v229 = v226;
  v234 = (v243 >> 30) & 1;
  v233 = (v247 >> 30) & 1;
  v232 = (v250 >> 30) & 1;
  v257 = *(_DWORD *)(v482 + 2036);
  v231 = (v253 >> 30) & 1;
  if (!v244)
  {
LABEL_635:
    if ((v257 & 0x10000000) != 0)
      v258 = 0x40000000;
    else
      v258 = 0x80000000;
    if ((v257 & 0x20000000) != 0)
      v257 = v258;
    else
      v257 &= 0xCFFFFFFF;
  }
LABEL_641:
  v230 = (v257 >> 30) & 1;
  v225 = **v474;
LABEL_642:
  v444 = v224 >> 30;
  v520 = v485;
  v521 = v486;
  v522 = v487;
  v519 = v484;
  v518 = v483;
  v259 = *((_DWORD *)v223 + 417);
  if (v225)
  {
    v260 = *((_DWORD *)v223 + 481);
    v261 = *((_DWORD *)v223 + 425);
    v462 = *((_DWORD *)v223 + 489);
    v262 = *((_DWORD *)v223 + 433);
  }
  else
  {
    if ((v259 & 0x10000000) != 0)
      v263 = 0x40000000;
    else
      v263 = 0x80000000;
    if ((v259 & 0x20000000) != 0)
      v259 = v263;
    else
      v259 &= 0xCFFFFFFF;
    v264 = *((_DWORD *)v223 + 481);
    if ((v264 & 0x10000000) != 0)
      v265 = 0x40000000;
    else
      v265 = 0x80000000;
    if ((v264 & 0x20000000) != 0)
      v260 = v265;
    else
      v260 = v264 & 0xCFFFFFFF;
    v266 = *((_DWORD *)v223 + 425);
    if ((v266 & 0x10000000) != 0)
      v267 = 0x40000000;
    else
      v267 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v261 = v267;
    else
      v261 = v266 & 0xCFFFFFFF;
    v268 = *((_DWORD *)v223 + 489);
    if ((v268 & 0x10000000) != 0)
      v269 = 0x40000000;
    else
      v269 = 0x80000000;
    if ((v268 & 0x20000000) != 0)
      v270 = v269;
    else
      v270 = v268 & 0xCFFFFFFF;
    v462 = v270;
    v271 = *((_DWORD *)v223 + 433);
    if ((v271 & 0x10000000) != 0)
      v262 = 0x40000000;
    else
      v262 = 0x80000000;
    if ((v271 & 0x20000000) == 0)
      v262 = v271 & 0xCFFFFFFF;
  }
  v272 = v227 >> 30;
  v273 = v229 >> 30;
  v274 = v228 >> 30;
  v430 = v259 >> 30;
  v453 = v261 >> 30;
  v457 = v260 >> 30;
  v275 = v262 >> 30;
  if ((v467 & 0x40000000) != 0)
  {
    v515 = v485;
    v516 = v486;
    v517 = v487;
    v514 = v484;
    v513 = v483;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E440;
    v509 = (__int128)xmmword_22468E450;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 0, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x28000001E8), xmmword_22468E450);
    if (!v231)
    {
      v510 = v485;
      v511 = v486;
      v512 = v487;
      *(_QWORD *)&v563 = 0x5040E0D05040E0DLL;
      v509 = v484;
      v508 = v483;
      v568 = xmmword_22468E460;
      v569 = (__int128)xmmword_22468E470;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 0, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x28000001E8), xmmword_22468E470);
      v276 = (v232 | v272 & 1) == 0;
      if (!(v233 | v273 & 1))
      {
        v570 = v485;
        v571 = v486;
        v572 = v487;
        *(_QWORD *)&v558 = 0x50405040E0D0E0DLL;
        v568 = v483;
        v569 = v484;
        v563 = xmmword_22468E480;
        v564 = (__int128)xmmword_22468E490;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 0, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x28000001E8), xmmword_22468E490);
        v277 = (v444 & 1) == 0 && v276;
        if (!v234 && v277)
        {
          v565 = v485;
          v566 = v486;
          v567 = v487;
          v564 = v484;
          v563 = v483;
          *(_QWORD *)&v553 = 0x4040D0D04040D0DLL;
          v558 = xmmword_22468E4A0;
          v559 = (__int128)xmmword_22468E4B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 0, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A8000001E8), xmmword_22468E4B0);
        }
      }
      if (v230)
        v278 = 0;
      else
        v278 = v276;
      if (v278 && (v274 & 1) == 0)
      {
        v560 = v485;
        v561 = v486;
        v562 = v487;
        *(_QWORD *)&v548 = 0x40404040D0D0D0DLL;
        v559 = v484;
        v558 = v483;
        v553 = xmmword_22468E4C0;
        v554 = (__int128)xmmword_22468E4D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 0, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A8000001E8), xmmword_22468E4D0);
      }
    }
    if (((v273 | v457) & 1) == 0)
    {
      v555 = v485;
      v556 = v486;
      v557 = v487;
      v554 = v484;
      v553 = v483;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E4E0;
      v549 = (__int128)xmmword_22468E4F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 0, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x28000001E8), xmmword_22468E4F0);
      v279 = (v430 & 1) == 0 && ((v272 | v453) & 1) == 0;
      if ((v444 & 1) == 0 && v279)
      {
        v550 = v485;
        v551 = v486;
        v552 = v487;
        v549 = v484;
        v548 = v483;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E500;
        v544 = (__int128)xmmword_22468E510;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 0, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A8000001E8), xmmword_22468E510);
      }
    }
    v280 = (v274 & 1) == 0 && ((v272 | v453) & 1) == 0;
    if (v280 && (v275 & 1) == 0)
    {
      v545 = v485;
      v546 = v486;
      v547 = v487;
      v544 = v484;
      v543 = v483;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E520;
      v539 = xmmword_22468E530;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 0, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A8000001E8), xmmword_22468E530);
    }
  }
  v495 = v520;
  v496 = v521;
  v497 = v522;
  v493 = v518;
  v494 = v519;
  v281 = *((_DWORD *)v223 + 418);
  if (**v474)
  {
    v282 = *((_DWORD *)v223 + 482);
    v283 = *((_DWORD *)v223 + 426);
    v284 = *((_DWORD *)v223 + 490);
    v285 = *((_DWORD *)v223 + 434);
  }
  else
  {
    if ((v281 & 0x10000000) != 0)
      v286 = 0x40000000;
    else
      v286 = 0x80000000;
    if ((v281 & 0x20000000) != 0)
      v281 = v286;
    else
      v281 &= 0xCFFFFFFF;
    v287 = *((_DWORD *)v223 + 482);
    if ((v287 & 0x10000000) != 0)
      v288 = 0x40000000;
    else
      v288 = 0x80000000;
    if ((v287 & 0x20000000) != 0)
      v282 = v288;
    else
      v282 = v287 & 0xCFFFFFFF;
    v289 = *((_DWORD *)v223 + 426);
    if ((v289 & 0x10000000) != 0)
      v290 = 0x40000000;
    else
      v290 = 0x80000000;
    if ((v289 & 0x20000000) != 0)
      v283 = v290;
    else
      v283 = v289 & 0xCFFFFFFF;
    v291 = *((_DWORD *)v223 + 490);
    if ((v291 & 0x10000000) != 0)
      v292 = 0x40000000;
    else
      v292 = 0x80000000;
    if ((v291 & 0x20000000) != 0)
      v284 = v292;
    else
      v284 = v291 & 0xCFFFFFFF;
    v293 = *((_DWORD *)v223 + 434);
    if ((v293 & 0x10000000) != 0)
      v285 = 0x40000000;
    else
      v285 = 0x80000000;
    if ((v293 & 0x20000000) == 0)
      v285 = v293 & 0xCFFFFFFF;
  }
  v294 = v283 >> 30;
  v428 = v281 >> 30;
  v449 = v282 >> 30;
  v440 = v285 >> 30;
  v505 = v520;
  v506 = v521;
  v507 = v522;
  v503 = v518;
  v504 = v519;
  if ((v462 & 0x40000000) != 0)
  {
    v515 = v520;
    v516 = v521;
    v517 = v522;
    v514 = v519;
    v513 = v518;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E540;
    v509 = (__int128)xmmword_22468E550;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 1, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x29000001E9), xmmword_22468E550);
    if ((v467 & 0x40000000) == 0)
    {
      v510 = v520;
      v511 = v521;
      v512 = v522;
      v509 = v519;
      v508 = v518;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E560;
      v569 = (__int128)xmmword_22468E570;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 1, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x29000001E9), xmmword_22468E570);
      if (((v273 | v457) & 1) == 0)
      {
        v570 = v520;
        v571 = v521;
        v572 = v522;
        v568 = v518;
        v569 = v519;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E580;
        v564 = (__int128)xmmword_22468E590;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 1, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x29000001E9), xmmword_22468E590);
        v295 = (v430 & 1) == 0 && ((v272 | v453) & 1) == 0;
        if ((v444 & 1) == 0 && v295)
        {
          v565 = v520;
          v566 = v521;
          v567 = v522;
          v564 = v519;
          v563 = v518;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E5A0;
          v559 = (__int128)xmmword_22468E5B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 1, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1A9000001E9), xmmword_22468E5B0);
        }
      }
      v296 = (v274 & 1) == 0 && ((v272 | v453) & 1) == 0;
      if (v296 && (v275 & 1) == 0)
      {
        v560 = v505;
        v561 = v506;
        v562 = v507;
        v559 = v504;
        v558 = v503;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E5C0;
        v554 = (__int128)xmmword_22468E5D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 1, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1A9000001E9), xmmword_22468E5D0);
      }
    }
    if (((v457 | v449) & 1) == 0)
    {
      v555 = v505;
      v556 = v506;
      v557 = v507;
      v554 = v504;
      v553 = v503;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E5E0;
      v549 = (__int128)xmmword_22468E5F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 1, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x29000001E9), xmmword_22468E5F0);
      v297 = (v428 & 1) == 0 && ((v453 | v294) & 1) == 0;
      if ((v430 & 1) == 0 && v297)
      {
        v550 = v505;
        v551 = v506;
        v552 = v507;
        v549 = v504;
        v548 = v503;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E600;
        v544 = (__int128)xmmword_22468E610;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 1, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1A9000001E9), xmmword_22468E610);
      }
    }
    v298 = (v275 & 1) == 0 && ((v453 | v294) & 1) == 0;
    if (v298 && (v440 & 1) == 0)
    {
      v545 = v505;
      v546 = v506;
      v547 = v507;
      v544 = v504;
      v543 = v503;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E620;
      v539 = xmmword_22468E630;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 1, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1A9000001E9), xmmword_22468E630);
    }
  }
  v299 = *((_DWORD *)v223 + 419);
  if (**v474)
  {
    v300 = *((_DWORD *)v223 + 483);
    v301 = *((_DWORD *)v223 + 427);
    v302 = *((_DWORD *)v223 + 491);
    v303 = *((_DWORD *)v223 + 435);
  }
  else
  {
    if ((v299 & 0x10000000) != 0)
      v304 = 0x40000000;
    else
      v304 = 0x80000000;
    if ((v299 & 0x20000000) != 0)
      v299 = v304;
    else
      v299 &= 0xCFFFFFFF;
    v305 = *((_DWORD *)v223 + 483);
    if ((v305 & 0x10000000) != 0)
      v306 = 0x40000000;
    else
      v306 = 0x80000000;
    if ((v305 & 0x20000000) != 0)
      v300 = v306;
    else
      v300 = v305 & 0xCFFFFFFF;
    v307 = *((_DWORD *)v223 + 427);
    if ((v307 & 0x10000000) != 0)
      v308 = 0x40000000;
    else
      v308 = 0x80000000;
    if ((v307 & 0x20000000) != 0)
      v301 = v308;
    else
      v301 = v307 & 0xCFFFFFFF;
    v309 = *((_DWORD *)v223 + 491);
    if ((v309 & 0x10000000) != 0)
      v310 = 0x40000000;
    else
      v310 = 0x80000000;
    if ((v309 & 0x20000000) != 0)
      v302 = v310;
    else
      v302 = v309 & 0xCFFFFFFF;
    v311 = *((_DWORD *)v223 + 435);
    if ((v311 & 0x10000000) != 0)
      v303 = 0x40000000;
    else
      v303 = 0x80000000;
    if ((v311 & 0x20000000) == 0)
      v303 = v311 & 0xCFFFFFFF;
  }
  v445 = v301 >> 30;
  v425 = v299 >> 30;
  v468 = v300 >> 30;
  v436 = v303 >> 30;
  if ((v284 & 0x40000000) != 0)
  {
    v515 = v495;
    v516 = v496;
    v517 = v497;
    v514 = v494;
    v513 = v493;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E640;
    v509 = (__int128)xmmword_22468E650;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 2, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2A000001EALL), xmmword_22468E650);
    if ((v462 & 0x40000000) == 0)
    {
      v510 = v495;
      v511 = v496;
      v512 = v497;
      v509 = v494;
      v508 = v493;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E660;
      v569 = (__int128)xmmword_22468E670;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 2, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2A000001EALL), xmmword_22468E670);
      if (((v457 | v449) & 1) == 0)
      {
        v570 = v495;
        v571 = v496;
        v572 = v497;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E680;
        v564 = (__int128)xmmword_22468E690;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 2, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2A000001EALL), xmmword_22468E690);
        v312 = (v428 & 1) == 0 && ((v453 | v294) & 1) == 0;
        if ((v430 & 1) == 0 && v312)
        {
          v565 = v495;
          v566 = v496;
          v567 = v497;
          v564 = v494;
          v563 = v493;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E6A0;
          v559 = (__int128)xmmword_22468E6B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 2, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AA000001EALL), xmmword_22468E6B0);
        }
      }
      v313 = (v275 & 1) == 0 && ((v453 | v294) & 1) == 0;
      if (v313 && (v440 & 1) == 0)
      {
        v560 = v495;
        v561 = v496;
        v562 = v497;
        v559 = v494;
        v558 = v493;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E6C0;
        v554 = (__int128)xmmword_22468E6D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 2, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AA000001EALL), xmmword_22468E6D0);
      }
    }
    if (((v449 | v468) & 1) == 0)
    {
      v555 = v495;
      v556 = v496;
      v557 = v497;
      v554 = v494;
      v553 = v493;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E6E0;
      v549 = (__int128)xmmword_22468E6F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 2, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x2A000001EALL), xmmword_22468E6F0);
      v314 = (v425 & 1) == 0 && ((v294 | v445) & 1) == 0;
      if ((v428 & 1) == 0 && v314)
      {
        v550 = v495;
        v551 = v496;
        v552 = v497;
        v549 = v494;
        v548 = v493;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E700;
        v544 = (__int128)xmmword_22468E710;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 2, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1AA000001EALL), xmmword_22468E710);
      }
    }
    v315 = (v440 & 1) == 0 && ((v294 | v445) & 1) == 0;
    if (v315 && (v436 & 1) == 0)
    {
      v545 = v495;
      v546 = v496;
      v547 = v497;
      v544 = v494;
      v543 = v493;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E720;
      v539 = xmmword_22468E730;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 2, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1AA000001EALL), xmmword_22468E730);
    }
  }
  v316 = *((_DWORD *)v223 + 420);
  if (**v474)
  {
    v317 = *((_DWORD *)v223 + 484);
    v318 = *((_DWORD *)v223 + 428);
    v319 = *((_DWORD *)v223 + 492);
    v320 = *((_DWORD *)v223 + 436);
  }
  else
  {
    if ((v316 & 0x10000000) != 0)
      v321 = 0x40000000;
    else
      v321 = 0x80000000;
    if ((v316 & 0x20000000) != 0)
      v316 = v321;
    else
      v316 &= 0xCFFFFFFF;
    v322 = *((_DWORD *)v223 + 484);
    if ((v322 & 0x10000000) != 0)
      v323 = 0x40000000;
    else
      v323 = 0x80000000;
    if ((v322 & 0x20000000) != 0)
      v317 = v323;
    else
      v317 = v322 & 0xCFFFFFFF;
    v324 = *((_DWORD *)v223 + 428);
    if ((v324 & 0x10000000) != 0)
      v325 = 0x40000000;
    else
      v325 = 0x80000000;
    if ((v324 & 0x20000000) != 0)
      v318 = v325;
    else
      v318 = v324 & 0xCFFFFFFF;
    v326 = *((_DWORD *)v223 + 492);
    if ((v326 & 0x10000000) != 0)
      v327 = 0x40000000;
    else
      v327 = 0x80000000;
    if ((v326 & 0x20000000) != 0)
      v319 = v327;
    else
      v319 = v326 & 0xCFFFFFFF;
    v328 = *((_DWORD *)v223 + 436);
    if ((v328 & 0x10000000) != 0)
      v320 = 0x40000000;
    else
      v320 = 0x80000000;
    if ((v328 & 0x20000000) == 0)
      v320 = v328 & 0xCFFFFFFF;
  }
  v329 = v318 >> 30;
  v431 = v316 >> 30;
  v330 = v317 >> 30;
  v458 = v320 >> 30;
  if ((v302 & 0x40000000) != 0)
  {
    v515 = v495;
    v516 = v496;
    v517 = v497;
    v514 = v494;
    v513 = v493;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E740;
    v509 = (__int128)xmmword_22468E750;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 3, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2B000001EBLL), xmmword_22468E750);
    if ((v284 & 0x40000000) == 0)
    {
      v510 = v495;
      v511 = v496;
      v512 = v497;
      v509 = v494;
      v508 = v493;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E760;
      v569 = (__int128)xmmword_22468E770;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 3, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2B000001EBLL), xmmword_22468E770);
      v331 = ((v294 | v445) & 1) == 0;
      if (((v449 | v468) & 1) == 0)
      {
        v570 = v495;
        v571 = v496;
        v572 = v497;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E780;
        v564 = (__int128)xmmword_22468E790;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 3, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2B000001EBLL), xmmword_22468E790);
        v332 = (v425 & 1) == 0 && v331;
        if ((v428 & 1) == 0 && v332)
        {
          v565 = v495;
          v566 = v496;
          v567 = v497;
          v564 = v494;
          v563 = v493;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E7A0;
          v559 = (__int128)xmmword_22468E7B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 3, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AB000001EBLL), xmmword_22468E7B0);
        }
      }
      v333 = (v440 & 1) == 0 && v331;
      if (v333 && (v436 & 1) == 0)
      {
        v560 = v495;
        v561 = v496;
        v562 = v497;
        v559 = v494;
        v558 = v493;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E7C0;
        v554 = (__int128)xmmword_22468E7D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 3, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AB000001EBLL), xmmword_22468E7D0);
      }
    }
    if (((v468 | v330) & 1) == 0)
    {
      v555 = v495;
      v556 = v496;
      v557 = v497;
      v554 = v494;
      v553 = v493;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E7E0;
      v549 = (__int128)xmmword_22468E7F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 3, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x2B000001EBLL), xmmword_22468E7F0);
      v334 = (v431 & 1) == 0 && ((v445 | v329) & 1) == 0;
      if ((v425 & 1) == 0 && v334)
      {
        v550 = v495;
        v551 = v496;
        v552 = v497;
        v549 = v494;
        v548 = v493;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E800;
        v544 = (__int128)xmmword_22468E810;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 3, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1AB000001EBLL), xmmword_22468E810);
      }
    }
    v335 = (v436 & 1) == 0 && ((v445 | v329) & 1) == 0;
    if (v335 && (v458 & 1) == 0)
    {
      v545 = v495;
      v546 = v496;
      v547 = v497;
      v544 = v494;
      v543 = v493;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E820;
      v539 = xmmword_22468E830;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 3, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1AB000001EBLL), xmmword_22468E830);
    }
  }
  v336 = *((_DWORD *)v223 + 421);
  if (**v474)
  {
    v337 = *((_DWORD *)v223 + 485);
    v338 = *((_DWORD *)v223 + 429);
    v339 = *((_DWORD *)v223 + 493);
    v340 = *((_DWORD *)v223 + 437);
  }
  else
  {
    if ((v336 & 0x10000000) != 0)
      v341 = 0x40000000;
    else
      v341 = 0x80000000;
    if ((v336 & 0x20000000) != 0)
      v336 = v341;
    else
      v336 &= 0xCFFFFFFF;
    v342 = *((_DWORD *)v223 + 485);
    if ((v342 & 0x10000000) != 0)
      v343 = 0x40000000;
    else
      v343 = 0x80000000;
    if ((v342 & 0x20000000) != 0)
      v337 = v343;
    else
      v337 = v342 & 0xCFFFFFFF;
    v344 = *((_DWORD *)v223 + 429);
    if ((v344 & 0x10000000) != 0)
      v345 = 0x40000000;
    else
      v345 = 0x80000000;
    if ((v344 & 0x20000000) != 0)
      v338 = v345;
    else
      v338 = v344 & 0xCFFFFFFF;
    v346 = *((_DWORD *)v223 + 493);
    if ((v346 & 0x10000000) != 0)
      v347 = 0x40000000;
    else
      v347 = 0x80000000;
    if ((v346 & 0x20000000) != 0)
      v339 = v347;
    else
      v339 = v346 & 0xCFFFFFFF;
    v348 = *((_DWORD *)v223 + 437);
    if ((v348 & 0x10000000) != 0)
      v340 = 0x40000000;
    else
      v340 = 0x80000000;
    if ((v348 & 0x20000000) == 0)
      v340 = v348 & 0xCFFFFFFF;
  }
  v349 = v338 >> 30;
  v450 = v336 >> 30;
  v350 = v337 >> 30;
  v351 = v340 >> 30;
  if ((v319 & 0x40000000) != 0)
  {
    v515 = v495;
    v516 = v496;
    v517 = v497;
    v514 = v494;
    v513 = v493;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E840;
    v509 = (__int128)xmmword_22468E850;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 4, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2C000001ECLL), xmmword_22468E850);
    if ((v302 & 0x40000000) == 0)
    {
      v510 = v495;
      v511 = v496;
      v512 = v497;
      v509 = v494;
      v508 = v493;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E860;
      v569 = (__int128)xmmword_22468E870;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 4, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2C000001ECLL), xmmword_22468E870);
      if (((v468 | v330) & 1) == 0)
      {
        v570 = v495;
        v571 = v496;
        v572 = v497;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E880;
        v564 = (__int128)xmmword_22468E890;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 4, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2C000001ECLL), xmmword_22468E890);
        v352 = (v431 & 1) == 0 && ((v445 | v329) & 1) == 0;
        if ((v425 & 1) == 0 && v352)
        {
          v565 = v495;
          v566 = v496;
          v567 = v497;
          v564 = v494;
          v563 = v493;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E8A0;
          v559 = (__int128)xmmword_22468E8B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 4, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AC000001ECLL), xmmword_22468E8B0);
        }
      }
      v353 = (v436 & 1) == 0 && ((v445 | v329) & 1) == 0;
      if (v353 && (v458 & 1) == 0)
      {
        v560 = v495;
        v561 = v496;
        v562 = v497;
        v559 = v494;
        v558 = v493;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E8C0;
        v554 = (__int128)xmmword_22468E8D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 4, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AC000001ECLL), xmmword_22468E8D0);
      }
    }
    if (((v330 | v350) & 1) == 0)
    {
      v555 = v495;
      v556 = v496;
      v557 = v497;
      v554 = v494;
      v553 = v493;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E8E0;
      v549 = (__int128)xmmword_22468E8F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 4, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x2C000001ECLL), xmmword_22468E8F0);
      v354 = (v450 & 1) == 0 && ((v329 | v349) & 1) == 0;
      if ((v431 & 1) == 0 && v354)
      {
        v550 = v495;
        v551 = v496;
        v552 = v497;
        v549 = v494;
        v548 = v493;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468E900;
        v544 = (__int128)xmmword_22468E910;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 4, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1AC000001ECLL), xmmword_22468E910);
      }
    }
    v355 = (v458 & 1) == 0 && ((v329 | v349) & 1) == 0;
    if (v355 && (v351 & 1) == 0)
    {
      v545 = v495;
      v546 = v496;
      v547 = v497;
      v544 = v494;
      v543 = v493;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468E920;
      v539 = xmmword_22468E930;
      *(_QWORD *)&v528 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 4, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v528, COERCE_DOUBLE(0x1AC000001ECLL), xmmword_22468E930);
    }
  }
  v356 = *((_DWORD *)v223 + 422);
  if (**v474)
  {
    v357 = *((_DWORD *)v223 + 486);
    v358 = *((_DWORD *)v223 + 430);
    v359 = *((_DWORD *)v223 + 494);
    v360 = *((_DWORD *)v223 + 438);
  }
  else
  {
    if ((v356 & 0x10000000) != 0)
      v361 = 0x40000000;
    else
      v361 = 0x80000000;
    if ((v356 & 0x20000000) != 0)
      v356 = v361;
    else
      v356 &= 0xCFFFFFFF;
    v362 = *((_DWORD *)v223 + 486);
    if ((v362 & 0x10000000) != 0)
      v363 = 0x40000000;
    else
      v363 = 0x80000000;
    if ((v362 & 0x20000000) != 0)
      v357 = v363;
    else
      v357 = v362 & 0xCFFFFFFF;
    v364 = *((_DWORD *)v223 + 430);
    if ((v364 & 0x10000000) != 0)
      v365 = 0x40000000;
    else
      v365 = 0x80000000;
    if ((v364 & 0x20000000) != 0)
      v358 = v365;
    else
      v358 = v364 & 0xCFFFFFFF;
    v366 = *((_DWORD *)v223 + 494);
    if ((v366 & 0x10000000) != 0)
      v367 = 0x40000000;
    else
      v367 = 0x80000000;
    if ((v366 & 0x20000000) != 0)
      v359 = v367;
    else
      v359 = v366 & 0xCFFFFFFF;
    v368 = *((_DWORD *)v223 + 438);
    if ((v368 & 0x10000000) != 0)
      v360 = 0x40000000;
    else
      v360 = 0x80000000;
    if ((v368 & 0x20000000) == 0)
      v360 = v368 & 0xCFFFFFFF;
  }
  v446 = v356 >> 30;
  v463 = v358 >> 30;
  v469 = v357 >> 30;
  v454 = v360 >> 30;
  v530 = v495;
  v531 = v496;
  v532 = v497;
  v529 = v494;
  v528 = v493;
  if ((v339 & 0x40000000) != 0)
  {
    v515 = v495;
    v516 = v496;
    v517 = v497;
    v514 = v494;
    v513 = v493;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468E940;
    v509 = (__int128)xmmword_22468E950;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 5, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2D000001EDLL), xmmword_22468E950);
    if ((v319 & 0x40000000) == 0)
    {
      v510 = v495;
      v511 = v496;
      v512 = v497;
      v509 = v494;
      v508 = v493;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468E960;
      v569 = (__int128)xmmword_22468E970;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 5, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2D000001EDLL), xmmword_22468E970);
      if (((v330 | v350) & 1) == 0)
      {
        v570 = v495;
        v571 = v496;
        v572 = v497;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468E980;
        v564 = (__int128)xmmword_22468E990;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 5, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2D000001EDLL), xmmword_22468E990);
        v369 = (v450 & 1) == 0 && ((v329 | v349) & 1) == 0;
        if ((v431 & 1) == 0 && v369)
        {
          v565 = v495;
          v566 = v496;
          v567 = v497;
          v564 = v494;
          v563 = v493;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468E9A0;
          v559 = (__int128)xmmword_22468E9B0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 5, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AD000001EDLL), xmmword_22468E9B0);
        }
      }
      v370 = (v458 & 1) == 0 && ((v329 | v349) & 1) == 0;
      if (v370 && (v351 & 1) == 0)
      {
        v560 = v530;
        v561 = v531;
        v562 = v532;
        v559 = v529;
        v558 = v528;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468E9C0;
        v554 = (__int128)xmmword_22468E9D0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 5, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AD000001EDLL), xmmword_22468E9D0);
      }
    }
    if (((v350 | v469) & 1) == 0)
    {
      v555 = v530;
      v556 = v531;
      v557 = v532;
      v554 = v529;
      v553 = v528;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468E9E0;
      v549 = (__int128)xmmword_22468E9F0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 5, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x2D000001EDLL), xmmword_22468E9F0);
      v371 = (v446 & 1) == 0 && ((v349 | v463) & 1) == 0;
      if ((v450 & 1) == 0 && v371)
      {
        v550 = v530;
        v551 = v531;
        v552 = v532;
        v549 = v529;
        v548 = v528;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468EA00;
        v544 = (__int128)xmmword_22468EA10;
        *(_QWORD *)&v533 = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 5, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)&v533, COERCE_DOUBLE(0x1AD000001EDLL), xmmword_22468EA10);
      }
    }
    v372 = (v351 & 1) == 0 && ((v349 | v463) & 1) == 0;
    if (v372 && (v454 & 1) == 0)
    {
      v545 = v530;
      v546 = v531;
      v547 = v532;
      v544 = v529;
      v543 = v528;
      *(_QWORD *)&v533 = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468EA20;
      v539 = xmmword_22468EA30;
      *(_QWORD *)&v523 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 5, 5, 7, (uint64_t)&v533, (uint64_t)&v538, (uint64_t)&v523, COERCE_DOUBLE(0x1AD000001EDLL), xmmword_22468EA30);
    }
  }
  v525 = v495;
  v526 = v496;
  v527 = v497;
  v524 = v494;
  v523 = v493;
  v373 = *((_DWORD *)v223 + 423);
  if (**v474)
  {
    v374 = *((_DWORD *)v223 + 487);
    v375 = *((_DWORD *)v223 + 431);
    v376 = *((_DWORD *)v223 + 495);
    v377 = *((_DWORD *)v223 + 439);
  }
  else
  {
    if ((v373 & 0x10000000) != 0)
      v378 = 0x40000000;
    else
      v378 = 0x80000000;
    if ((v373 & 0x20000000) != 0)
      v373 = v378;
    else
      v373 &= 0xCFFFFFFF;
    v379 = *((_DWORD *)v223 + 487);
    if ((v379 & 0x10000000) != 0)
      v380 = 0x40000000;
    else
      v380 = 0x80000000;
    if ((v379 & 0x20000000) != 0)
      v374 = v380;
    else
      v374 = v379 & 0xCFFFFFFF;
    v381 = *((_DWORD *)v223 + 431);
    if ((v381 & 0x10000000) != 0)
      v382 = 0x40000000;
    else
      v382 = 0x80000000;
    if ((v381 & 0x20000000) != 0)
      v375 = v382;
    else
      v375 = v381 & 0xCFFFFFFF;
    v383 = *((_DWORD *)v223 + 495);
    if ((v383 & 0x10000000) != 0)
      v384 = 0x40000000;
    else
      v384 = 0x80000000;
    if ((v383 & 0x20000000) != 0)
      v376 = v384;
    else
      v376 = v383 & 0xCFFFFFFF;
    v385 = *((_DWORD *)v223 + 439);
    if ((v385 & 0x10000000) != 0)
      v377 = 0x40000000;
    else
      v377 = 0x80000000;
    if ((v385 & 0x20000000) == 0)
      v377 = v385 & 0xCFFFFFFF;
  }
  v386 = v375 >> 30;
  v459 = v373 >> 30;
  v387 = v374 >> 30;
  v475 = v377 >> 30;
  v535 = v495;
  v536 = v496;
  v537 = v497;
  v534 = v494;
  v533 = v493;
  if ((v359 & 0x40000000) != 0)
  {
    v515 = v495;
    v516 = v496;
    v517 = v497;
    v514 = v494;
    v513 = v493;
    *(_QWORD *)&v568 = 0xE0D0E0D0E0D0E0DLL;
    v508 = xmmword_22468EA40;
    v509 = (__int128)xmmword_22468EA50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 6, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2E000001EELL), xmmword_22468EA50);
    if ((v339 & 0x40000000) == 0)
    {
      v510 = v495;
      v511 = v496;
      v512 = v497;
      v509 = v494;
      v508 = v493;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468EA60;
      v569 = (__int128)xmmword_22468EA70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 6, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2E000001EELL), xmmword_22468EA70);
      if (((v350 | v469) & 1) == 0)
      {
        v570 = v495;
        v571 = v496;
        v572 = v497;
        v568 = v493;
        v569 = v494;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v563 = xmmword_22468EA80;
        v564 = (__int128)xmmword_22468EA90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 6, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2E000001EELL), xmmword_22468EA90);
        v388 = (v446 & 1) == 0 && ((v349 | v463) & 1) == 0;
        if ((v450 & 1) == 0 && v388)
        {
          v565 = v495;
          v566 = v496;
          v567 = v497;
          v564 = v494;
          v563 = v493;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468EAA0;
          v559 = (__int128)xmmword_22468EAB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 6, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AE000001EELL), xmmword_22468EAB0);
        }
      }
      v389 = (v351 & 1) == 0 && ((v349 | v463) & 1) == 0;
      if (v389 && (v454 & 1) == 0)
      {
        v560 = v535;
        v561 = v536;
        v562 = v537;
        v559 = v534;
        v558 = v533;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v553 = xmmword_22468EAC0;
        v554 = (__int128)xmmword_22468EAD0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 6, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AE000001EELL), xmmword_22468EAD0);
      }
    }
    if (((v469 | v387) & 1) == 0)
    {
      v555 = v535;
      v556 = v536;
      v557 = v537;
      v554 = v534;
      v553 = v533;
      *(_QWORD *)&v543 = 0xE0D0E0D0E0D0E0DLL;
      v548 = xmmword_22468EAE0;
      v549 = (__int128)xmmword_22468EAF0;
      *(_QWORD *)&v538 = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 6, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)&v538, COERCE_DOUBLE(0x2E000001EELL), xmmword_22468EAF0);
      v390 = (v459 & 1) == 0 && ((v463 | v386) & 1) == 0;
      if ((v446 & 1) == 0 && v390)
      {
        v550 = v535;
        v551 = v536;
        v552 = v537;
        v549 = v534;
        v548 = v533;
        *(_QWORD *)&v538 = 0xD0D0D0D0D0D0D0DLL;
        v543 = xmmword_22468EB00;
        v544 = (__int128)xmmword_22468EB10;
        *(_QWORD *)&v574[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 6, 5, 7, (uint64_t)&v538, (uint64_t)&v543, (uint64_t)v574, COERCE_DOUBLE(0x1AE000001EELL), xmmword_22468EB10);
      }
    }
    v391 = (v454 & 1) == 0 && ((v463 | v386) & 1) == 0;
    if (v391 && (v475 & 1) == 0)
    {
      v545 = v535;
      v546 = v536;
      v547 = v537;
      v544 = v534;
      v543 = v533;
      *(_QWORD *)&v574[0] = 0xD0D0D0D0D0D0D0DLL;
      v538 = xmmword_22468EB20;
      v539 = xmmword_22468EB30;
      v575[0] = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 6, 5, 7, (uint64_t)v574, (uint64_t)&v538, (uint64_t)v575, COERCE_DOUBLE(0x1AE000001EELL), xmmword_22468EB30);
    }
  }
  v392 = *(unsigned int *)(v478 + 88);
  if ((v392 & 0x80000000) != 0)
  {
    v395 = *v472;
    v396 = *(_DWORD *)(v482 + 1944);
    v397 = **v472;
    if (**v472)
      goto LABEL_1060;
  }
  else
  {
    v393 = *(_QWORD *)(v482 + 2328);
    if (v392 >= (*(_QWORD *)(v482 + 2336) - v393) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v393 = *(_QWORD *)(v482 + 2328);
    }
    v394 = v393 + (v392 << 11);
    v395 = *v472;
    v396 = *(_DWORD *)(v394 + 1664);
    v397 = **v472;
    if (**v472)
    {
LABEL_1060:
      v398 = *(unsigned int *)(v478 + 88);
      if ((v398 & 0x80000000) == 0)
        goto LABEL_1061;
LABEL_1080:
      v400 = *(_DWORD *)(v482 + 2200);
      if (v397)
        goto LABEL_1065;
      goto LABEL_1081;
    }
  }
  if ((v396 & 0x10000000) != 0)
    v405 = 0x40000000;
  else
    v405 = 0x80000000;
  if ((v396 & 0x20000000) != 0)
    v396 = v405;
  else
    v396 &= 0xCFFFFFFF;
  v398 = *(unsigned int *)(v478 + 88);
  if ((v398 & 0x80000000) != 0)
    goto LABEL_1080;
LABEL_1061:
  v399 = *(_QWORD *)(v482 + 2328);
  if (v398 >= (*(_QWORD *)(v482 + 2336) - v399) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v399 = *(_QWORD *)(v482 + 2328);
    v395 = *v472;
    v397 = **v472;
  }
  v400 = *(_DWORD *)(v399 + (v398 << 11) + 1920);
  if (v397)
  {
LABEL_1065:
    v401 = *(unsigned int *)(v478 + 88);
    if ((v401 & 0x80000000) == 0)
      goto LABEL_1066;
LABEL_1088:
    v403 = *(_DWORD *)(v482 + 1976);
    if (v397)
      goto LABEL_1070;
    goto LABEL_1089;
  }
LABEL_1081:
  if ((v400 & 0x10000000) != 0)
    v406 = 0x40000000;
  else
    v406 = 0x80000000;
  if ((v400 & 0x20000000) != 0)
    v400 = v406;
  else
    v400 &= 0xCFFFFFFF;
  v401 = *(unsigned int *)(v478 + 88);
  if ((v401 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_1066:
  v402 = *(_QWORD *)(v482 + 2328);
  if (v401 >= (*(_QWORD *)(v482 + 2336) - v402) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v402 = *(_QWORD *)(v482 + 2328);
    v395 = *v472;
    v397 = **v472;
  }
  v403 = *(_DWORD *)(v402 + (v401 << 11) + 1696);
  if (v397)
  {
LABEL_1070:
    v404 = *(unsigned int *)(v478 + 88);
    if ((v404 & 0x80000000) != 0)
      goto LABEL_1139;
    goto LABEL_1096;
  }
LABEL_1089:
  if ((v403 & 0x10000000) != 0)
    v407 = 0x40000000;
  else
    v407 = 0x80000000;
  if ((v403 & 0x20000000) != 0)
    v403 = v407;
  else
    v403 &= 0xCFFFFFFF;
  v404 = *(unsigned int *)(v478 + 88);
  if ((v404 & 0x80000000) != 0)
    goto LABEL_1139;
LABEL_1096:
  v408 = *(_QWORD *)(v482 + 2328);
  v409 = (*(_QWORD *)(v482 + 2336) - v408) >> 11;
  if (v409 > v404)
    goto LABEL_1100;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v395 = *v472;
  v404 = *(unsigned int *)(v478 + 88);
  if ((v404 & 0x80000000) != 0)
  {
LABEL_1139:
    v410 = *(_DWORD *)(v482 + 2008);
    if (*v395)
      goto LABEL_1110;
    goto LABEL_1104;
  }
  v408 = *(_QWORD *)(v482 + 2328);
  v409 = (*(_QWORD *)(v482 + 2336) - v408) >> 11;
LABEL_1100:
  if (v409 <= v404)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v408 = *(_QWORD *)(v482 + 2328);
    v395 = *v472;
  }
  v410 = *(_DWORD *)(v408 + (v404 << 11) + 1728);
  if (!*v395)
  {
LABEL_1104:
    if ((v410 & 0x10000000) != 0)
      v411 = 0x40000000;
    else
      v411 = 0x80000000;
    if ((v410 & 0x20000000) != 0)
      v410 = v411;
    else
      v410 &= 0xCFFFFFFF;
  }
LABEL_1110:
  v540 = v525;
  v541 = v526;
  v542 = v527;
  v539 = (float32x4_t)v524;
  v538 = v523;
  if ((v376 & 0x40000000) != 0)
  {
    v515 = v525;
    v516 = v526;
    v517 = v527;
    *(_QWORD *)&v568 = 0x171617160E0D0E0DLL;
    v514 = v524;
    v513 = v523;
    v508 = xmmword_22468EB40;
    v509 = (__int128)xmmword_22468EB50;
    *(_QWORD *)&v563 = 0x1A19171611100E0DLL;
    sub_223D91438((unint64_t)&v513, 7, 5, 7, (uint64_t)&v568, (uint64_t)&v508, (uint64_t)&v563, COERCE_DOUBLE(0x2F000001EFLL), xmmword_22468EB50);
    if ((v359 & 0x40000000) == 0)
    {
      v510 = v525;
      v511 = v526;
      v512 = v527;
      v509 = v524;
      v508 = v523;
      *(_QWORD *)&v563 = 0xE0D0E0D0E0D0E0DLL;
      v568 = xmmword_22468EB60;
      v569 = (__int128)xmmword_22468EB70;
      *(_QWORD *)&v558 = 0x807111005040E0DLL;
      sub_223D91438((unint64_t)&v508, 7, 5, 7, (uint64_t)&v563, (uint64_t)&v568, (uint64_t)&v558, COERCE_DOUBLE(0x2F000001EFLL), xmmword_22468EB70);
      if (((v469 | v387) & 1) == 0)
      {
        v570 = v525;
        v571 = v526;
        v572 = v527;
        *(_QWORD *)&v558 = 0xE0D0E0D0E0D0E0DLL;
        v568 = v523;
        v569 = v524;
        v563 = xmmword_22468EB80;
        v564 = (__int128)xmmword_22468EB90;
        *(_QWORD *)&v553 = 0x20105040B0A0E0DLL;
        sub_223D91438((unint64_t)&v568, 7, 5, 7, (uint64_t)&v558, (uint64_t)&v563, (uint64_t)&v553, COERCE_DOUBLE(0x2F000001EFLL), xmmword_22468EB90);
        v412 = (v459 & 1) == 0 && ((v463 | v386) & 1) == 0;
        if ((v446 & 1) == 0 && v412)
        {
          v565 = v525;
          v566 = v526;
          v567 = v527;
          v564 = v524;
          v563 = v523;
          *(_QWORD *)&v553 = 0xD0D0D0D0D0D0D0DLL;
          v558 = xmmword_22468EBA0;
          v559 = (__int128)xmmword_22468EBB0;
          *(_QWORD *)&v548 = 0x1090A03040C0DLL;
          sub_223D91438((unint64_t)&v563, 7, 5, 7, (uint64_t)&v553, (uint64_t)&v558, (uint64_t)&v548, COERCE_DOUBLE(0x1AF000001EFLL), xmmword_22468EBB0);
        }
      }
      v413 = (v454 & 1) == 0 && ((v463 | v386) & 1) == 0;
      if (v413 && (v475 & 1) == 0)
      {
        v560 = v540;
        v561 = v541;
        v562 = v542;
        *(_QWORD *)&v548 = 0xD0D0D0D0D0D0D0DLL;
        v559 = (__int128)v539;
        v558 = v538;
        v553 = xmmword_22468EBC0;
        v554 = (__int128)xmmword_22468EBD0;
        *(_QWORD *)&v543 = 0x60703040F100C0DLL;
        sub_223D91438((unint64_t)&v558, 7, 5, 7, (uint64_t)&v548, (uint64_t)&v553, (uint64_t)&v543, COERCE_DOUBLE(0x1AF000001EFLL), xmmword_22468EBD0);
      }
    }
    v414 = (v403 & 0x40000000 | v386 & 1) == 0;
    if (!(v400 & 0x40000000 | v387 & 1))
    {
      v555 = v540;
      v556 = v541;
      v557 = v542;
      *(_QWORD *)&v543 = 0x17160E0D17160E0DLL;
      v554 = (__int128)v539;
      v553 = v538;
      v548 = xmmword_22468EBE0;
      v549 = (__int128)xmmword_22468EBF0;
      *(_QWORD *)&v574[0] = 0x14130B0A17160E0DLL;
      sub_223D91438((unint64_t)&v553, 7, 5, 7, (uint64_t)&v543, (uint64_t)&v548, (uint64_t)v574, COERCE_DOUBLE(0x2F000001EFLL), xmmword_22468EBF0);
      v415 = (v396 & 0x40000000) == 0 && v414;
      if ((v459 & 1) == 0 && v415)
      {
        v550 = v540;
        v551 = v541;
        v552 = v542;
        *(_QWORD *)&v574[0] = 0x161616160D0D0D0DLL;
        v549 = (__int128)v539;
        v548 = v538;
        v543 = xmmword_22468EC00;
        v544 = (__int128)xmmword_22468EC10;
        v575[0] = 0x12131516090A0C0DLL;
        sub_223D91438((unint64_t)&v548, 7, 5, 7, (uint64_t)v574, (uint64_t)&v543, (uint64_t)v575, COERCE_DOUBLE(0x1AF000001EFLL), xmmword_22468EC10);
      }
    }
    v416 = (v475 & 1) == 0 && v414;
    if (v416 && (v410 & 0x40000000) == 0)
    {
      v545 = v540;
      v546 = v541;
      v547 = v542;
      v575[0] = 0x16160D0D16160D0DLL;
      v544 = (__int128)v539;
      v543 = v538;
      v574[0] = xmmword_22468EC20;
      v574[1] = xmmword_22468EC30;
      v573 = 0x18190F1015160C0DLL;
      sub_223D91438((unint64_t)&v543, 7, 5, 7, (uint64_t)v575, (uint64_t)v574, (uint64_t)&v573, COERCE_DOUBLE(0x1AF000001EFLL), xmmword_22468EC30);
    }
  }
  v508 = v434;
  *(_QWORD *)&v509 = v223;
  *(_QWORD *)&v568 = v482;
  *((_QWORD *)&v568 + 1) = v478;
  *(_QWORD *)&v569 = v472;
  v517 = v487;
  v516 = v486;
  v515 = v485;
  v513 = v483;
  v514 = v484;
  return sub_223E5AA10((unsigned __int8 ***)&v508, &v568, &v513);
}

unint64_t sub_223E5AA10(unsigned __int8 ***a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t result;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BYTE **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE **v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE **v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int128 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE **v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  __int128 v87;
  __int128 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  _BOOL4 v126;
  _BOOL4 v127;
  _BOOL4 v128;
  _BOOL4 v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  _BOOL4 v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  _BOOL4 v163;
  _BOOL4 v164;
  _BOOL4 v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 v181;
  _BOOL4 v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  _BOOL4 v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  unsigned int v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  _BOOL4 v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  unsigned __int8 **v229;
  uint64_t v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  unsigned int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  _BOOL4 v279;
  _BOOL4 v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  _BOOL4 v292;
  _BOOL4 v293;
  _BOOL4 v294;
  _BOOL4 v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unint64_t v312;
  uint64_t v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  _BOOL4 v318;
  _BOOL4 v319;
  _BOOL4 v320;
  _BOOL4 v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unint64_t v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  _BOOL4 v330;
  _BOOL4 v331;
  _BOOL4 v332;
  _BOOL4 v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unint64_t v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  _BOOL4 v342;
  _BOOL4 v343;
  _BOOL4 v344;
  _BOOL4 v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  _BOOL4 v357;
  _BOOL4 v358;
  _BOOL4 v359;
  _BOOL4 v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _BYTE *v364;
  unsigned int v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unint64_t v373;
  unsigned int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  int v407;
  unsigned int v408;
  int v409;
  unsigned int v410;
  int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  int v415;
  unsigned int v416;
  int v417;
  unsigned int v418;
  int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unint64_t v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  _BOOL4 v436;
  _BOOL4 v437;
  _BOOL4 v438;
  _BOOL4 v439;
  _BOOL4 v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t *v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned __int8 **v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  uint64_t v497;
  _BYTE **v498;
  unsigned int v499;
  _BYTE **v500;
  unsigned int v501;
  unsigned int v502;
  unsigned __int8 **v503;
  uint64_t v504;
  unsigned int v505;
  unsigned int *v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  float32x4_t v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  uint64_t v597;
  _OWORD v598[2];
  _QWORD v599[3];

  v4 = a2;
  v599[1] = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v500 = *a1;
  v6 = *((_DWORD *)v5 + 424);
  v7 = ***a1;
  if (***a1)
  {
    v8 = *((_DWORD *)v5 + 488);
    v9 = *((_DWORD *)v5 + 432);
    v10 = *((_DWORD *)v5 + 496);
    v11 = *((_DWORD *)v5 + 440);
    v504 = *a2;
    v487 = v10;
    if ((v10 & 0x40000000) == 0)
    {
LABEL_3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      result = 0;
      goto LABEL_91;
    }
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      v6 *= 4;
    v17 = *((_DWORD *)v5 + 488);
    if ((v17 & 0x20000000) != 0)
      v8 = 4 * v17;
    else
      v8 = *((_DWORD *)v5 + 488);
    v18 = *((_DWORD *)v5 + 432);
    if ((v18 & 0x20000000) != 0)
      v9 = 4 * v18;
    else
      v9 = *((_DWORD *)v5 + 432);
    v19 = *((_DWORD *)v5 + 496);
    if ((v19 & 0x20000000) != 0)
      v10 = 4 * v19;
    else
      v10 = *((_DWORD *)v5 + 496);
    v20 = *((_DWORD *)v5 + 440);
    if ((v20 & 0x10000000) != 0)
      v21 = 0x40000000;
    else
      v21 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v11 = v21;
    else
      v11 = v20 & 0xCFFFFFFF;
    v504 = *a2;
    v487 = v10;
    if ((v10 & 0x40000000) == 0)
      goto LABEL_3;
  }
  v496 = v11;
  v22 = (_BYTE **)a2[2];
  v23 = *(unsigned int *)(a2[1] + 16);
  if ((v23 & 0x80000000) != 0)
  {
    v25 = v504 + 280;
  }
  else
  {
    v24 = *(_QWORD *)(v504 + 2328);
    if (v23 >= (*(_QWORD *)(v504 + 2336) - v24) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v24 = *(_QWORD *)(v504 + 2328);
      v10 = v487;
    }
    v25 = v24 + (v23 << 11);
  }
  v26 = *(_DWORD *)(v25 + 1724);
  v27 = v26 & 0xCFFFFFFF;
  if ((v26 & 0x10000000) != 0)
    v28 = 0x40000000;
  else
    v28 = 0x80000000;
  if ((v26 & 0x20000000) != 0)
    v27 = v28;
  if (**v22)
    v29 = v26;
  else
    v29 = v27;
  v30 = *v4;
  v31 = (_BYTE **)v4[2];
  v32 = *(unsigned int *)(v4[1] + 16);
  if ((v32 & 0x80000000) != 0)
  {
    v34 = v30 + 280;
  }
  else
  {
    v33 = *(_QWORD *)(v30 + 2328);
    if (v32 >= (*(_QWORD *)(v30 + 2336) - v33) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v33 = *(_QWORD *)(v30 + 2328);
      v10 = v487;
    }
    v34 = v33 + (v32 << 11);
  }
  v35 = *(_DWORD *)(v34 + 1980);
  v36 = v35 & 0xCFFFFFFF;
  if ((v35 & 0x10000000) != 0)
    v37 = 0x40000000;
  else
    v37 = 0x80000000;
  if ((v35 & 0x20000000) != 0)
    v36 = v37;
  if (**v31)
    v38 = v35;
  else
    v38 = v36;
  v39 = *v4;
  v40 = (_BYTE **)v4[2];
  v41 = *(unsigned int *)(v4[1] + 16);
  v505 = v29;
  if ((v41 & 0x80000000) != 0)
  {
    v44 = v39 + 280;
  }
  else
  {
    v42 = *(_QWORD *)(v39 + 2328);
    if (v41 >= (*(_QWORD *)(v39 + 2336) - v42) >> 11)
    {
      v43 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v42 = *(_QWORD *)(v39 + 2328);
      v10 = v487;
      v38 = v43;
    }
    v44 = v42 + (v41 << 11);
  }
  v45 = *(_DWORD *)(v44 + 1756);
  v46 = v45 & 0xCFFFFFFF;
  if ((v45 & 0x10000000) != 0)
    v47 = 0x40000000;
  else
    v47 = 0x80000000;
  if ((v45 & 0x20000000) != 0)
    v46 = v47;
  if (**v40)
    v48 = v45;
  else
    v48 = v46;
  v49 = *v4;
  v50 = (_BYTE **)v4[2];
  v51 = *(unsigned int *)(v4[1] + 16);
  if ((v51 & 0x80000000) != 0)
  {
    v54 = a3;
    v55 = v9;
    v56 = v8;
    v57 = *(_DWORD *)(v49 + 2292);
    if (**v50)
      goto LABEL_69;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + 2328);
    if (v51 >= (*(_QWORD *)(v49 + 2336) - v52) >> 11)
    {
      v53 = v38;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1240;
      }
      v52 = *(_QWORD *)(v49 + 2328);
      v10 = v487;
      v38 = v53;
    }
    v54 = a3;
    v55 = v9;
    v56 = v8;
    v57 = *(_DWORD *)(v52 + (v51 << 11) + 2012);
    if (**v50)
    {
LABEL_69:
      v58 = v4;
      v59 = *v4;
      v60 = (_BYTE **)v58[2];
      v61 = v58;
      v62 = *(unsigned int *)(v58[1] + 16);
      if ((v62 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_82:
      v65 = v59 + 280;
      goto LABEL_83;
    }
  }
  if ((v57 & 0x10000000) != 0)
    v66 = 0x40000000;
  else
    v66 = 0x80000000;
  if ((v57 & 0x20000000) != 0)
    v57 = v66;
  else
    v57 &= 0xCFFFFFFF;
  v67 = v4;
  v59 = *v4;
  v60 = (_BYTE **)v67[2];
  v61 = v67;
  v62 = *(unsigned int *)(v67[1] + 16);
  if ((v62 & 0x80000000) != 0)
    goto LABEL_82;
LABEL_70:
  v63 = *(_QWORD *)(v59 + 2328);
  if (v62 >= (*(_QWORD *)(v59 + 2336) - v63) >> 11)
  {
    v501 = v48;
    v64 = v38;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v63 = *(_QWORD *)(v59 + 2328);
      v10 = v487;
      v38 = v64;
      v48 = v501;
      goto LABEL_73;
    }
LABEL_1240:
    abort();
  }
LABEL_73:
  v65 = v63 + (v62 << 11);
LABEL_83:
  result = (v505 >> 30) & 1;
  v15 = (v38 >> 30) & 1;
  v14 = (v48 >> 30) & 1;
  v13 = (v57 >> 30) & 1;
  v68 = *(_DWORD *)(v65 + 1788);
  v4 = v61;
  if (!**v60)
  {
    if ((v68 & 0x10000000) != 0)
      v69 = 0x40000000;
    else
      v69 = 0x80000000;
    if ((v68 & 0x20000000) != 0)
      v68 = v69;
    else
      v68 &= 0xCFFFFFFF;
  }
  v12 = (v68 >> 30) & 1;
  v5 = a1[2];
  v500 = *a1;
  v504 = *v61;
  v7 = ***a1;
  v8 = v56;
  v9 = v55;
  a3 = v54;
  v11 = v496;
LABEL_91:
  v456 = v6 >> 30;
  v492 = (unsigned __int8 **)v4[2];
  v497 = v4[1];
  v514 = a3[2];
  v515 = a3[3];
  v516 = a3[4];
  v512 = *a3;
  v513 = a3[1];
  v70 = *((_DWORD *)v5 + 425);
  v447 = v4;
  if (v7)
  {
    v71 = *((_DWORD *)v5 + 489);
    v72 = *((_DWORD *)v5 + 433);
    v482 = *((_DWORD *)v5 + 497);
    v73 = *((_DWORD *)v5 + 441);
  }
  else
  {
    if ((v70 & 0x10000000) != 0)
      v74 = 0x40000000;
    else
      v74 = 0x80000000;
    if ((v70 & 0x20000000) != 0)
      v70 = v74;
    else
      v70 &= 0xCFFFFFFF;
    v75 = *((_DWORD *)v5 + 489);
    if ((v75 & 0x10000000) != 0)
      v76 = 0x40000000;
    else
      v76 = 0x80000000;
    if ((v75 & 0x20000000) != 0)
      v71 = v76;
    else
      v71 = v75 & 0xCFFFFFFF;
    v77 = *((_DWORD *)v5 + 433);
    if ((v77 & 0x10000000) != 0)
      v78 = 0x40000000;
    else
      v78 = 0x80000000;
    if ((v77 & 0x20000000) != 0)
      v72 = v78;
    else
      v72 = v77 & 0xCFFFFFFF;
    v79 = *((_DWORD *)v5 + 497);
    if ((v79 & 0x10000000) != 0)
      v80 = 0x40000000;
    else
      v80 = 0x80000000;
    if ((v79 & 0x20000000) != 0)
      v81 = v80;
    else
      v81 = v79 & 0xCFFFFFFF;
    v482 = v81;
    v82 = *((_DWORD *)v5 + 441);
    if ((v82 & 0x10000000) != 0)
      v73 = 0x40000000;
    else
      v73 = 0x80000000;
    if ((v82 & 0x20000000) == 0)
      v73 = v82 & 0xCFFFFFFF;
  }
  v83 = v9 >> 30;
  v84 = v8 >> 30;
  v462 = v11 >> 30;
  v444 = v70 >> 30;
  v472 = v72 >> 30;
  v477 = v71 >> 30;
  v524 = a3[2];
  v525 = a3[3];
  v526 = a3[4];
  v449 = v73 >> 30;
  v522 = *a3;
  v523 = a3[1];
  if ((v10 & 0x40000000) != 0)
  {
    v85 = v15;
    v86 = result;
    v87 = a3[3];
    v539 = a3[2];
    v540 = v87;
    v541 = a3[4];
    v88 = *a3;
    v538 = a3[1];
    v537 = v88;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468EC40;
    v533 = (__int128)xmmword_22468EC50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 0, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x30000001F0), xmmword_22468EC50);
    if (!v13)
    {
      v534 = v524;
      v535 = v525;
      v536 = v526;
      *(_QWORD *)&v587 = 0x5040E0D05040E0DLL;
      v533 = v523;
      v532 = v522;
      v592 = xmmword_22468EC60;
      v593 = (__int128)xmmword_22468EC70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 0, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x30000001F0), xmmword_22468EC70);
      if (!(v85 | v84 & 1))
      {
        v594 = v524;
        v595 = v525;
        v596 = v526;
        *(_QWORD *)&v582 = 0x50405040E0D0E0DLL;
        v592 = v522;
        v593 = v523;
        v587 = xmmword_22468EC80;
        v588 = (__int128)xmmword_22468EC90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 0, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x30000001F0), xmmword_22468EC90);
        v89 = (v456 & 1) == 0 && (v14 | v83 & 1) == 0;
        if (!v86 && v89)
        {
          v589 = v524;
          v590 = v525;
          v591 = v526;
          v588 = v523;
          v587 = v522;
          *(_QWORD *)&v577 = 0x4040D0D04040D0DLL;
          v582 = xmmword_22468ECA0;
          v583 = (__int128)xmmword_22468ECB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 0, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B0000001F0), xmmword_22468ECB0);
        }
      }
      if (v12)
        v90 = 0;
      else
        v90 = (v14 | v83 & 1) == 0;
      if (v90 && (v462 & 1) == 0)
      {
        v584 = v524;
        v585 = v525;
        v586 = v526;
        *(_QWORD *)&v572 = 0x40404040D0D0D0DLL;
        v583 = v523;
        v582 = v522;
        v577 = xmmword_22468ECC0;
        v578 = (__int128)xmmword_22468ECD0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 0, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B0000001F0), xmmword_22468ECD0);
      }
    }
    if (((v84 | v477) & 1) == 0)
    {
      v579 = v524;
      v580 = v525;
      v581 = v526;
      v578 = v523;
      v577 = v522;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468ECE0;
      v573 = (__int128)xmmword_22468ECF0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 0, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x30000001F0), xmmword_22468ECF0);
      v91 = (v444 & 1) == 0 && ((v83 | v472) & 1) == 0;
      if ((v456 & 1) == 0 && v91)
      {
        v574 = v524;
        v575 = v525;
        v576 = v526;
        v573 = v523;
        v572 = v522;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468ED00;
        v568 = (__int128)xmmword_22468ED10;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 0, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B0000001F0), xmmword_22468ED10);
      }
    }
    v92 = (v462 & 1) == 0 && ((v83 | v472) & 1) == 0;
    v10 = v487;
    if (v92 && (v449 & 1) == 0)
    {
      v569 = v524;
      v570 = v525;
      v571 = v526;
      v568 = v523;
      v567 = v522;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468ED20;
      v563 = xmmword_22468ED30;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 0, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B0000001F0), xmmword_22468ED30);
      v10 = v487;
    }
  }
  v93 = *((_DWORD *)v5 + 426);
  if (**v500)
  {
    v94 = *((_DWORD *)v5 + 490);
    v95 = *((_DWORD *)v5 + 434);
    v96 = *((_DWORD *)v5 + 498);
    v97 = *((_DWORD *)v5 + 442);
  }
  else
  {
    if ((v93 & 0x10000000) != 0)
      v98 = 0x40000000;
    else
      v98 = 0x80000000;
    if ((v93 & 0x20000000) != 0)
      v93 = v98;
    else
      v93 &= 0xCFFFFFFF;
    v99 = *((_DWORD *)v5 + 490);
    if ((v99 & 0x10000000) != 0)
      v100 = 0x40000000;
    else
      v100 = 0x80000000;
    if ((v99 & 0x20000000) != 0)
      v94 = v100;
    else
      v94 = v99 & 0xCFFFFFFF;
    v101 = *((_DWORD *)v5 + 434);
    if ((v101 & 0x10000000) != 0)
      v102 = 0x40000000;
    else
      v102 = 0x80000000;
    if ((v101 & 0x20000000) != 0)
      v95 = v102;
    else
      v95 = v101 & 0xCFFFFFFF;
    v103 = *((_DWORD *)v5 + 498);
    if ((v103 & 0x10000000) != 0)
      v104 = 0x40000000;
    else
      v104 = 0x80000000;
    if ((v103 & 0x20000000) != 0)
      v96 = v104;
    else
      v96 = v103 & 0xCFFFFFFF;
    v105 = *((_DWORD *)v5 + 442);
    if ((v105 & 0x10000000) != 0)
      v97 = 0x40000000;
    else
      v97 = 0x80000000;
    if ((v105 & 0x20000000) == 0)
      v97 = v105 & 0xCFFFFFFF;
  }
  v468 = v95 >> 30;
  v442 = v93 >> 30;
  v488 = v94 >> 30;
  v106 = v97 >> 30;
  if ((v482 & 0x40000000) != 0)
  {
    v107 = (v10 & 0x40000000) == 0;
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468ED40;
    v533 = (__int128)xmmword_22468ED50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 1, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x31000001F1), xmmword_22468ED50);
    if (v107)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468ED60;
      v593 = (__int128)xmmword_22468ED70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 1, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x31000001F1), xmmword_22468ED70);
      if (((v84 | v477) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468ED80;
        v588 = (__int128)xmmword_22468ED90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 1, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x31000001F1), xmmword_22468ED90);
        v108 = (v444 & 1) == 0 && ((v83 | v472) & 1) == 0;
        if ((v456 & 1) == 0 && v108)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468EDA0;
          v583 = (__int128)xmmword_22468EDB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 1, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B1000001F1), xmmword_22468EDB0);
        }
      }
      v109 = (v462 & 1) == 0 && ((v83 | v472) & 1) == 0;
      if (v109 && (v449 & 1) == 0)
      {
        v584 = v514;
        v585 = v515;
        v586 = v516;
        v583 = v513;
        v582 = v512;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468EDC0;
        v578 = (__int128)xmmword_22468EDD0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 1, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B1000001F1), xmmword_22468EDD0);
      }
    }
    if (((v477 | v488) & 1) == 0)
    {
      v579 = v514;
      v580 = v515;
      v581 = v516;
      v578 = v513;
      v577 = v512;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468EDE0;
      v573 = (__int128)xmmword_22468EDF0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 1, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x31000001F1), xmmword_22468EDF0);
      v110 = (v442 & 1) == 0 && ((v472 | v468) & 1) == 0;
      if ((v444 & 1) == 0 && v110)
      {
        v574 = v514;
        v575 = v515;
        v576 = v516;
        v573 = v513;
        v572 = v512;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468EE00;
        v568 = (__int128)xmmword_22468EE10;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 1, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B1000001F1), xmmword_22468EE10);
      }
    }
    v111 = (v449 & 1) == 0 && ((v472 | v468) & 1) == 0;
    if (v111 && (v106 & 1) == 0)
    {
      v569 = v514;
      v570 = v515;
      v571 = v516;
      v568 = v513;
      v567 = v512;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468EE20;
      v563 = xmmword_22468EE30;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 1, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B1000001F1), xmmword_22468EE30);
    }
  }
  v112 = *((_DWORD *)v5 + 427);
  if (**v500)
  {
    v113 = *((_DWORD *)v5 + 491);
    v114 = *((_DWORD *)v5 + 435);
    v115 = *((_DWORD *)v5 + 499);
    v116 = *((_DWORD *)v5 + 443);
  }
  else
  {
    if ((v112 & 0x10000000) != 0)
      v117 = 0x40000000;
    else
      v117 = 0x80000000;
    if ((v112 & 0x20000000) != 0)
      v112 = v117;
    else
      v112 &= 0xCFFFFFFF;
    v118 = *((_DWORD *)v5 + 491);
    if ((v118 & 0x10000000) != 0)
      v119 = 0x40000000;
    else
      v119 = 0x80000000;
    if ((v118 & 0x20000000) != 0)
      v113 = v119;
    else
      v113 = v118 & 0xCFFFFFFF;
    v120 = *((_DWORD *)v5 + 435);
    if ((v120 & 0x10000000) != 0)
      v121 = 0x40000000;
    else
      v121 = 0x80000000;
    if ((v120 & 0x20000000) != 0)
      v114 = v121;
    else
      v114 = v120 & 0xCFFFFFFF;
    v122 = *((_DWORD *)v5 + 499);
    if ((v122 & 0x10000000) != 0)
      v123 = 0x40000000;
    else
      v123 = 0x80000000;
    if ((v122 & 0x20000000) != 0)
      v115 = v123;
    else
      v115 = v122 & 0xCFFFFFFF;
    v124 = *((_DWORD *)v5 + 443);
    if ((v124 & 0x10000000) != 0)
      v116 = 0x40000000;
    else
      v116 = 0x80000000;
    if ((v124 & 0x20000000) == 0)
      v116 = v124 & 0xCFFFFFFF;
  }
  v441 = v112 >> 30;
  v457 = v114 >> 30;
  v463 = v113 >> 30;
  v125 = v116 >> 30;
  if ((v96 & 0x40000000) != 0)
  {
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468EE40;
    v533 = (__int128)xmmword_22468EE50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 2, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x32000001F2), xmmword_22468EE50);
    if ((v482 & 0x40000000) == 0)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468EE60;
      v593 = (__int128)xmmword_22468EE70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 2, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x32000001F2), xmmword_22468EE70);
      if (((v477 | v488) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468EE80;
        v588 = (__int128)xmmword_22468EE90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 2, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x32000001F2), xmmword_22468EE90);
        v126 = (v442 & 1) == 0 && ((v472 | v468) & 1) == 0;
        if ((v444 & 1) == 0 && v126)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468EEA0;
          v583 = (__int128)xmmword_22468EEB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 2, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B2000001F2), xmmword_22468EEB0);
        }
      }
      v127 = (v449 & 1) == 0 && ((v472 | v468) & 1) == 0;
      if (v127 && (v106 & 1) == 0)
      {
        v584 = v514;
        v585 = v515;
        v586 = v516;
        v583 = v513;
        v582 = v512;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468EEC0;
        v578 = (__int128)xmmword_22468EED0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 2, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B2000001F2), xmmword_22468EED0);
      }
    }
    if (((v488 | v463) & 1) == 0)
    {
      v579 = v514;
      v580 = v515;
      v581 = v516;
      v578 = v513;
      v577 = v512;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468EEE0;
      v573 = (__int128)xmmword_22468EEF0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 2, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x32000001F2), xmmword_22468EEF0);
      v128 = (v441 & 1) == 0 && ((v468 | v457) & 1) == 0;
      if ((v442 & 1) == 0 && v128)
      {
        v574 = v514;
        v575 = v515;
        v576 = v516;
        v573 = v513;
        v572 = v512;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468EF00;
        v568 = (__int128)xmmword_22468EF10;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 2, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B2000001F2), xmmword_22468EF10);
      }
    }
    v129 = (v106 & 1) == 0 && ((v468 | v457) & 1) == 0;
    if (v129 && (v125 & 1) == 0)
    {
      v569 = v514;
      v570 = v515;
      v571 = v516;
      v568 = v513;
      v567 = v512;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468EF20;
      v563 = xmmword_22468EF30;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 2, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B2000001F2), xmmword_22468EF30);
    }
  }
  v130 = *((_DWORD *)v5 + 428);
  if (**v500)
  {
    v131 = *((_DWORD *)v5 + 492);
    v132 = *((_DWORD *)v5 + 436);
    v133 = *((_DWORD *)v5 + 500);
    v134 = *((_DWORD *)v5 + 444);
  }
  else
  {
    if ((v130 & 0x10000000) != 0)
      v135 = 0x40000000;
    else
      v135 = 0x80000000;
    if ((v130 & 0x20000000) != 0)
      v130 = v135;
    else
      v130 &= 0xCFFFFFFF;
    v136 = *((_DWORD *)v5 + 492);
    if ((v136 & 0x10000000) != 0)
      v137 = 0x40000000;
    else
      v137 = 0x80000000;
    if ((v136 & 0x20000000) != 0)
      v131 = v137;
    else
      v131 = v136 & 0xCFFFFFFF;
    v138 = *((_DWORD *)v5 + 436);
    if ((v138 & 0x10000000) != 0)
      v139 = 0x40000000;
    else
      v139 = 0x80000000;
    if ((v138 & 0x20000000) != 0)
      v132 = v139;
    else
      v132 = v138 & 0xCFFFFFFF;
    v140 = *((_DWORD *)v5 + 500);
    if ((v140 & 0x10000000) != 0)
      v141 = 0x40000000;
    else
      v141 = 0x80000000;
    if ((v140 & 0x20000000) != 0)
      v133 = v141;
    else
      v133 = v140 & 0xCFFFFFFF;
    v142 = *((_DWORD *)v5 + 444);
    if ((v142 & 0x10000000) != 0)
      v134 = 0x40000000;
    else
      v134 = 0x80000000;
    if ((v142 & 0x20000000) == 0)
      v134 = v142 & 0xCFFFFFFF;
  }
  v445 = v130 >> 30;
  v478 = v132 >> 30;
  v483 = v131 >> 30;
  v450 = v134 >> 30;
  if ((v115 & 0x40000000) != 0)
  {
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468EF40;
    v533 = (__int128)xmmword_22468EF50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 3, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x33000001F3), xmmword_22468EF50);
    if ((v96 & 0x40000000) == 0)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468EF60;
      v593 = (__int128)xmmword_22468EF70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 3, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x33000001F3), xmmword_22468EF70);
      if (((v488 | v463) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468EF80;
        v588 = (__int128)xmmword_22468EF90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 3, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x33000001F3), xmmword_22468EF90);
        v143 = (v441 & 1) == 0 && ((v468 | v457) & 1) == 0;
        if ((v442 & 1) == 0 && v143)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468EFA0;
          v583 = (__int128)xmmword_22468EFB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 3, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B3000001F3), xmmword_22468EFB0);
        }
      }
      v144 = (v106 & 1) == 0 && ((v468 | v457) & 1) == 0;
      if (v144 && (v125 & 1) == 0)
      {
        v584 = v514;
        v585 = v515;
        v586 = v516;
        v583 = v513;
        v582 = v512;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468EFC0;
        v578 = (__int128)xmmword_22468EFD0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 3, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B3000001F3), xmmword_22468EFD0);
      }
    }
    if (((v463 | v483) & 1) == 0)
    {
      v579 = v514;
      v580 = v515;
      v581 = v516;
      v578 = v513;
      v577 = v512;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468EFE0;
      v573 = (__int128)xmmword_22468EFF0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 3, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x33000001F3), xmmword_22468EFF0);
      v145 = (v445 & 1) == 0 && ((v457 | v478) & 1) == 0;
      if ((v441 & 1) == 0 && v145)
      {
        v574 = v514;
        v575 = v515;
        v576 = v516;
        v573 = v513;
        v572 = v512;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F000;
        v568 = (__int128)xmmword_22468F010;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 3, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B3000001F3), xmmword_22468F010);
      }
    }
    v146 = (v125 & 1) == 0 && ((v457 | v478) & 1) == 0;
    if (v146 && (v450 & 1) == 0)
    {
      v569 = v514;
      v570 = v515;
      v571 = v516;
      v568 = v513;
      v567 = v512;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468F020;
      v563 = xmmword_22468F030;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 3, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B3000001F3), xmmword_22468F030);
    }
  }
  v147 = *((_DWORD *)v5 + 429);
  if (**v500)
  {
    v148 = *((_DWORD *)v5 + 493);
    v149 = *((_DWORD *)v5 + 437);
    v150 = *((_DWORD *)v5 + 501);
    v151 = *((_DWORD *)v5 + 445);
  }
  else
  {
    if ((v147 & 0x10000000) != 0)
      v152 = 0x40000000;
    else
      v152 = 0x80000000;
    if ((v147 & 0x20000000) != 0)
      v147 = v152;
    else
      v147 &= 0xCFFFFFFF;
    v153 = *((_DWORD *)v5 + 493);
    if ((v153 & 0x10000000) != 0)
      v154 = 0x40000000;
    else
      v154 = 0x80000000;
    if ((v153 & 0x20000000) != 0)
      v148 = v154;
    else
      v148 = v153 & 0xCFFFFFFF;
    v155 = *((_DWORD *)v5 + 437);
    if ((v155 & 0x10000000) != 0)
      v156 = 0x40000000;
    else
      v156 = 0x80000000;
    if ((v155 & 0x20000000) != 0)
      v149 = v156;
    else
      v149 = v155 & 0xCFFFFFFF;
    v157 = *((_DWORD *)v5 + 501);
    if ((v157 & 0x10000000) != 0)
      v158 = 0x40000000;
    else
      v158 = 0x80000000;
    if ((v157 & 0x20000000) != 0)
      v150 = v158;
    else
      v150 = v157 & 0xCFFFFFFF;
    v159 = *((_DWORD *)v5 + 445);
    if ((v159 & 0x10000000) != 0)
      v151 = 0x40000000;
    else
      v151 = 0x80000000;
    if ((v159 & 0x20000000) == 0)
      v151 = v159 & 0xCFFFFFFF;
  }
  v160 = v149 >> 30;
  v443 = v147 >> 30;
  v161 = v148 >> 30;
  v469 = v151 >> 30;
  if ((v133 & 0x40000000) != 0)
  {
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468F040;
    v533 = (__int128)xmmword_22468F050;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 4, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x34000001F4), xmmword_22468F050);
    if ((v115 & 0x40000000) == 0)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468F060;
      v593 = (__int128)xmmword_22468F070;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 4, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x34000001F4), xmmword_22468F070);
      if (((v463 | v483) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F080;
        v588 = (__int128)xmmword_22468F090;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 4, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x34000001F4), xmmword_22468F090);
        v162 = (v445 & 1) == 0 && ((v457 | v478) & 1) == 0;
        if ((v441 & 1) == 0 && v162)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F0A0;
          v583 = (__int128)xmmword_22468F0B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 4, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B4000001F4), xmmword_22468F0B0);
        }
      }
      v163 = (v125 & 1) == 0 && ((v457 | v478) & 1) == 0;
      if (v163 && (v450 & 1) == 0)
      {
        v584 = v514;
        v585 = v515;
        v586 = v516;
        v583 = v513;
        v582 = v512;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468F0C0;
        v578 = (__int128)xmmword_22468F0D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 4, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B4000001F4), xmmword_22468F0D0);
      }
    }
    if (((v483 | v161) & 1) == 0)
    {
      v579 = v514;
      v580 = v515;
      v581 = v516;
      v578 = v513;
      v577 = v512;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F0E0;
      v573 = (__int128)xmmword_22468F0F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 4, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x34000001F4), xmmword_22468F0F0);
      v164 = (v443 & 1) == 0 && ((v478 | v160) & 1) == 0;
      if ((v445 & 1) == 0 && v164)
      {
        v574 = v514;
        v575 = v515;
        v576 = v516;
        v573 = v513;
        v572 = v512;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F100;
        v568 = (__int128)xmmword_22468F110;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 4, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B4000001F4), xmmword_22468F110);
      }
    }
    v165 = (v450 & 1) == 0 && ((v478 | v160) & 1) == 0;
    if (v165 && (v469 & 1) == 0)
    {
      v569 = v514;
      v570 = v515;
      v571 = v516;
      v568 = v513;
      v567 = v512;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468F120;
      v563 = xmmword_22468F130;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 4, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B4000001F4), xmmword_22468F130);
    }
  }
  v166 = *((_DWORD *)v5 + 430);
  if (**v500)
  {
    v167 = *((_DWORD *)v5 + 494);
    v168 = *((_DWORD *)v5 + 438);
    v169 = *((_DWORD *)v5 + 502);
    v170 = *((_DWORD *)v5 + 446);
  }
  else
  {
    if ((v166 & 0x10000000) != 0)
      v171 = 0x40000000;
    else
      v171 = 0x80000000;
    if ((v166 & 0x20000000) != 0)
      v166 = v171;
    else
      v166 &= 0xCFFFFFFF;
    v172 = *((_DWORD *)v5 + 494);
    if ((v172 & 0x10000000) != 0)
      v173 = 0x40000000;
    else
      v173 = 0x80000000;
    if ((v172 & 0x20000000) != 0)
      v167 = v173;
    else
      v167 = v172 & 0xCFFFFFFF;
    v174 = *((_DWORD *)v5 + 438);
    if ((v174 & 0x10000000) != 0)
      v175 = 0x40000000;
    else
      v175 = 0x80000000;
    if ((v174 & 0x20000000) != 0)
      v168 = v175;
    else
      v168 = v174 & 0xCFFFFFFF;
    v176 = *((_DWORD *)v5 + 502);
    if ((v176 & 0x10000000) != 0)
      v177 = 0x40000000;
    else
      v177 = 0x80000000;
    if ((v176 & 0x20000000) != 0)
      v169 = v177;
    else
      v169 = v176 & 0xCFFFFFFF;
    v178 = *((_DWORD *)v5 + 446);
    if ((v178 & 0x10000000) != 0)
      v170 = 0x40000000;
    else
      v170 = 0x80000000;
    if ((v178 & 0x20000000) == 0)
      v170 = v178 & 0xCFFFFFFF;
  }
  v473 = v168 >> 30;
  v489 = v167 >> 30;
  v458 = v166 >> 30;
  v464 = v170 >> 30;
  v554 = v514;
  v555 = v515;
  v556 = v516;
  v553 = v513;
  v552 = v512;
  if ((v150 & 0x40000000) != 0)
  {
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468F140;
    v533 = (__int128)xmmword_22468F150;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 5, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x35000001F5), xmmword_22468F150);
    if ((v133 & 0x40000000) == 0)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468F160;
      v593 = (__int128)xmmword_22468F170;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 5, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x35000001F5), xmmword_22468F170);
      if (((v483 | v161) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F180;
        v588 = (__int128)xmmword_22468F190;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 5, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x35000001F5), xmmword_22468F190);
        v179 = (v443 & 1) == 0 && ((v478 | v160) & 1) == 0;
        if ((v445 & 1) == 0 && v179)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F1A0;
          v583 = (__int128)xmmword_22468F1B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 5, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B5000001F5), xmmword_22468F1B0);
        }
      }
      v180 = (v450 & 1) == 0 && ((v478 | v160) & 1) == 0;
      if (v180 && (v469 & 1) == 0)
      {
        v584 = v554;
        v585 = v555;
        v586 = v556;
        v583 = v553;
        v582 = v552;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468F1C0;
        v578 = (__int128)xmmword_22468F1D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 5, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B5000001F5), xmmword_22468F1D0);
      }
    }
    if (((v161 | v489) & 1) == 0)
    {
      v579 = v554;
      v580 = v555;
      v581 = v556;
      v578 = v553;
      v577 = v552;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F1E0;
      v573 = (__int128)xmmword_22468F1F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 5, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x35000001F5), xmmword_22468F1F0);
      v181 = (v458 & 1) == 0 && ((v160 | v473) & 1) == 0;
      if ((v443 & 1) == 0 && v181)
      {
        v574 = v554;
        v575 = v555;
        v576 = v556;
        v573 = v553;
        v572 = v552;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F200;
        v568 = (__int128)xmmword_22468F210;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 5, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B5000001F5), xmmword_22468F210);
      }
    }
    v182 = (v469 & 1) == 0 && ((v160 | v473) & 1) == 0;
    if (v182 && (v464 & 1) == 0)
    {
      v569 = v554;
      v570 = v555;
      v571 = v556;
      v568 = v553;
      v567 = v552;
      *(_QWORD *)&v557 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468F220;
      v563 = xmmword_22468F230;
      *(_QWORD *)&v547 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 5, 6, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v547, COERCE_DOUBLE(0x1B5000001F5), xmmword_22468F230);
    }
  }
  v549 = v514;
  v550 = v515;
  v551 = v516;
  v548 = v513;
  v547 = v512;
  v183 = *((_DWORD *)v5 + 431);
  if (**v500)
  {
    v184 = *((_DWORD *)v5 + 495);
    v185 = *((_DWORD *)v5 + 439);
    v186 = *((_DWORD *)v5 + 503);
    v187 = *((_DWORD *)v5 + 447);
  }
  else
  {
    if ((v183 & 0x10000000) != 0)
      v188 = 0x40000000;
    else
      v188 = 0x80000000;
    if ((v183 & 0x20000000) != 0)
      v183 = v188;
    else
      v183 &= 0xCFFFFFFF;
    v189 = *((_DWORD *)v5 + 495);
    if ((v189 & 0x10000000) != 0)
      v190 = 0x40000000;
    else
      v190 = 0x80000000;
    if ((v189 & 0x20000000) != 0)
      v184 = v190;
    else
      v184 = v189 & 0xCFFFFFFF;
    v191 = *((_DWORD *)v5 + 439);
    if ((v191 & 0x10000000) != 0)
      v192 = 0x40000000;
    else
      v192 = 0x80000000;
    if ((v191 & 0x20000000) != 0)
      v185 = v192;
    else
      v185 = v191 & 0xCFFFFFFF;
    v193 = *((_DWORD *)v5 + 503);
    if ((v193 & 0x10000000) != 0)
      v194 = 0x40000000;
    else
      v194 = 0x80000000;
    if ((v193 & 0x20000000) != 0)
      v186 = v194;
    else
      v186 = v193 & 0xCFFFFFFF;
    v195 = *((_DWORD *)v5 + 447);
    if ((v195 & 0x10000000) != 0)
      v187 = 0x40000000;
    else
      v187 = 0x80000000;
    if ((v195 & 0x20000000) == 0)
      v187 = v195 & 0xCFFFFFFF;
  }
  v196 = v185 >> 30;
  v502 = v183 >> 30;
  v197 = v184 >> 30;
  v198 = v187 >> 30;
  v559 = v514;
  v560 = v515;
  v561 = v516;
  v558 = v513;
  v557 = v512;
  if ((v169 & 0x40000000) != 0)
  {
    v539 = v514;
    v540 = v515;
    v541 = v516;
    v538 = v513;
    v537 = v512;
    *(_QWORD *)&v592 = 0xE0D0E0D0E0D0E0DLL;
    v532 = xmmword_22468F240;
    v533 = (__int128)xmmword_22468F250;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 6, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x36000001F6), xmmword_22468F250);
    if ((v150 & 0x40000000) == 0)
    {
      v534 = v514;
      v535 = v515;
      v536 = v516;
      v533 = v513;
      v532 = v512;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468F260;
      v593 = (__int128)xmmword_22468F270;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 6, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x36000001F6), xmmword_22468F270);
      if (((v161 | v489) & 1) == 0)
      {
        v594 = v514;
        v595 = v515;
        v596 = v516;
        v592 = v512;
        v593 = v513;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F280;
        v588 = (__int128)xmmword_22468F290;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 6, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x36000001F6), xmmword_22468F290);
        v199 = (v458 & 1) == 0 && ((v160 | v473) & 1) == 0;
        if ((v443 & 1) == 0 && v199)
        {
          v589 = v514;
          v590 = v515;
          v591 = v516;
          v588 = v513;
          v587 = v512;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F2A0;
          v583 = (__int128)xmmword_22468F2B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 6, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B6000001F6), xmmword_22468F2B0);
        }
      }
      v200 = (v469 & 1) == 0 && ((v160 | v473) & 1) == 0;
      if (v200 && (v464 & 1) == 0)
      {
        v584 = v559;
        v585 = v560;
        v586 = v561;
        v583 = v558;
        v582 = v557;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468F2C0;
        v578 = (__int128)xmmword_22468F2D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 6, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B6000001F6), xmmword_22468F2D0);
      }
    }
    if (((v489 | v197) & 1) == 0)
    {
      v579 = v559;
      v580 = v560;
      v581 = v561;
      v578 = v558;
      v577 = v557;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F2E0;
      v573 = (__int128)xmmword_22468F2F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 6, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x36000001F6), xmmword_22468F2F0);
      v201 = (v502 & 1) == 0 && ((v473 | v196) & 1) == 0;
      if ((v458 & 1) == 0 && v201)
      {
        v574 = v559;
        v575 = v560;
        v576 = v561;
        v573 = v558;
        v572 = v557;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F300;
        v568 = (__int128)xmmword_22468F310;
        *(_QWORD *)&v542 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 6, 6, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v542, COERCE_DOUBLE(0x1B6000001F6), xmmword_22468F310);
      }
    }
    v202 = (v464 & 1) == 0 && ((v473 | v196) & 1) == 0;
    if (v202 && (v198 & 1) == 0)
    {
      v569 = v559;
      v570 = v560;
      v571 = v561;
      v568 = v558;
      v567 = v557;
      *(_QWORD *)&v542 = 0xD0D0D0D0D0D0D0DLL;
      v562 = xmmword_22468F320;
      v563 = xmmword_22468F330;
      *(_QWORD *)&v598[0] = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 6, 6, 7, (uint64_t)&v542, (uint64_t)&v562, (uint64_t)v598, COERCE_DOUBLE(0x1B6000001F6), xmmword_22468F330);
    }
  }
  v203 = *(unsigned int *)(v497 + 88);
  if ((v203 & 0x80000000) != 0)
  {
    v206 = *v492;
    v207 = *(_DWORD *)(v504 + 1976);
    v208 = **v492;
    if (**v492)
      goto LABEL_509;
  }
  else
  {
    v204 = *(_QWORD *)(v504 + 2328);
    if (v203 >= (*(_QWORD *)(v504 + 2336) - v204) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v204 = *(_QWORD *)(v504 + 2328);
    }
    v205 = v204 + (v203 << 11);
    v206 = *v492;
    v207 = *(_DWORD *)(v205 + 1696);
    v208 = **v492;
    if (**v492)
    {
LABEL_509:
      v209 = *(unsigned int *)(v497 + 88);
      if ((v209 & 0x80000000) == 0)
        goto LABEL_510;
LABEL_529:
      v211 = *(_DWORD *)(v504 + 2232);
      if (v208)
        goto LABEL_514;
      goto LABEL_530;
    }
  }
  if ((v207 & 0x10000000) != 0)
    v216 = 0x40000000;
  else
    v216 = 0x80000000;
  if ((v207 & 0x20000000) != 0)
    v207 = v216;
  else
    v207 &= 0xCFFFFFFF;
  v209 = *(unsigned int *)(v497 + 88);
  if ((v209 & 0x80000000) != 0)
    goto LABEL_529;
LABEL_510:
  v210 = *(_QWORD *)(v504 + 2328);
  if (v209 >= (*(_QWORD *)(v504 + 2336) - v210) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v210 = *(_QWORD *)(v504 + 2328);
    v206 = *v492;
    v208 = **v492;
  }
  v211 = *(_DWORD *)(v210 + (v209 << 11) + 1952);
  if (v208)
  {
LABEL_514:
    v212 = *(unsigned int *)(v497 + 88);
    if ((v212 & 0x80000000) == 0)
      goto LABEL_515;
LABEL_537:
    v214 = *(_DWORD *)(v504 + 2008);
    if (v208)
      goto LABEL_519;
    goto LABEL_538;
  }
LABEL_530:
  if ((v211 & 0x10000000) != 0)
    v217 = 0x40000000;
  else
    v217 = 0x80000000;
  if ((v211 & 0x20000000) != 0)
    v211 = v217;
  else
    v211 &= 0xCFFFFFFF;
  v212 = *(unsigned int *)(v497 + 88);
  if ((v212 & 0x80000000) != 0)
    goto LABEL_537;
LABEL_515:
  v213 = *(_QWORD *)(v504 + 2328);
  if (v212 >= (*(_QWORD *)(v504 + 2336) - v213) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v213 = *(_QWORD *)(v504 + 2328);
    v206 = *v492;
    v208 = **v492;
  }
  v214 = *(_DWORD *)(v213 + (v212 << 11) + 1728);
  if (v208)
  {
LABEL_519:
    v215 = *(unsigned int *)(v497 + 88);
    if ((v215 & 0x80000000) != 0)
      goto LABEL_595;
    goto LABEL_545;
  }
LABEL_538:
  if ((v214 & 0x10000000) != 0)
    v218 = 0x40000000;
  else
    v218 = 0x80000000;
  if ((v214 & 0x20000000) != 0)
    v214 = v218;
  else
    v214 &= 0xCFFFFFFF;
  v215 = *(unsigned int *)(v497 + 88);
  if ((v215 & 0x80000000) != 0)
    goto LABEL_595;
LABEL_545:
  v219 = *(_QWORD *)(v504 + 2328);
  v220 = (*(_QWORD *)(v504 + 2336) - v219) >> 11;
  if (v220 > v215)
    goto LABEL_549;
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
  if ((_DWORD)result)
    abort();
  v206 = *v492;
  v215 = *(unsigned int *)(v497 + 88);
  if ((v215 & 0x80000000) != 0)
  {
LABEL_595:
    v221 = v169;
    v222 = *(_DWORD *)(v504 + 2040);
    if (*v206)
      goto LABEL_559;
    goto LABEL_553;
  }
  v219 = *(_QWORD *)(v504 + 2328);
  v220 = (*(_QWORD *)(v504 + 2336) - v219) >> 11;
LABEL_549:
  if (v220 <= v215)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v219 = *(_QWORD *)(v504 + 2328);
    v206 = *v492;
  }
  v221 = v169;
  v222 = *(_DWORD *)(v219 + (v215 << 11) + 1760);
  if (!*v206)
  {
LABEL_553:
    if ((v222 & 0x10000000) != 0)
      v223 = 0x40000000;
    else
      v223 = 0x80000000;
    if ((v222 & 0x20000000) != 0)
      v222 = v223;
    else
      v222 &= 0xCFFFFFFF;
  }
LABEL_559:
  v564 = v549;
  v565 = v550;
  v566 = v551;
  v563 = (float32x4_t)v548;
  v562 = v547;
  if ((v186 & 0x40000000) != 0)
  {
    v224 = (v221 & 0x40000000) == 0;
    v539 = v549;
    v540 = v550;
    v541 = v551;
    *(_QWORD *)&v592 = 0x171617160E0D0E0DLL;
    v538 = v548;
    v537 = v547;
    v532 = xmmword_22468F340;
    v533 = (__int128)xmmword_22468F350;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 7, 6, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x37000001F7), xmmword_22468F350);
    if (v224)
    {
      v534 = v549;
      v535 = v550;
      v536 = v551;
      v533 = v548;
      v532 = v547;
      *(_QWORD *)&v587 = 0xE0D0E0D0E0D0E0DLL;
      v592 = xmmword_22468F360;
      v593 = (__int128)xmmword_22468F370;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 7, 6, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x37000001F7), xmmword_22468F370);
      if (((v489 | v197) & 1) == 0)
      {
        v594 = v549;
        v595 = v550;
        v596 = v551;
        v592 = v547;
        v593 = v548;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F380;
        v588 = (__int128)xmmword_22468F390;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 7, 6, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x37000001F7), xmmword_22468F390);
        v225 = (v502 & 1) == 0 && ((v473 | v196) & 1) == 0;
        if ((v458 & 1) == 0 && v225)
        {
          v589 = v549;
          v590 = v550;
          v591 = v551;
          v588 = v548;
          v587 = v547;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F3A0;
          v583 = (__int128)xmmword_22468F3B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 7, 6, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B7000001F7), xmmword_22468F3B0);
        }
      }
      v226 = (v464 & 1) == 0 && ((v473 | v196) & 1) == 0;
      if (v226 && (v198 & 1) == 0)
      {
        v584 = v564;
        v585 = v565;
        v586 = v566;
        v583 = (__int128)v563;
        v582 = v562;
        *(_QWORD *)&v572 = 0xD0D0D0D0D0D0D0DLL;
        v577 = xmmword_22468F3C0;
        v578 = (__int128)xmmword_22468F3D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 7, 6, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B7000001F7), xmmword_22468F3D0);
      }
    }
    if (!(v211 & 0x40000000 | v197 & 1))
    {
      v579 = v564;
      v580 = v565;
      v581 = v566;
      *(_QWORD *)&v567 = 0x17160E0D17160E0DLL;
      v578 = (__int128)v563;
      v577 = v562;
      v572 = xmmword_22468F3E0;
      v573 = (__int128)xmmword_22468F3F0;
      *(_QWORD *)&v542 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 7, 6, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v542, COERCE_DOUBLE(0x37000001F7), xmmword_22468F3F0);
      v227 = (v207 & 0x40000000) == 0 && (v214 & 0x40000000 | v196 & 1) == 0;
      if ((v502 & 1) == 0 && v227)
      {
        v574 = v564;
        v575 = v565;
        v576 = v566;
        *(_QWORD *)&v542 = 0x161616160D0D0D0DLL;
        v573 = (__int128)v563;
        v572 = v562;
        v567 = xmmword_22468F400;
        v568 = (__int128)xmmword_22468F410;
        *(_QWORD *)&v598[0] = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 7, 6, 7, (uint64_t)&v542, (uint64_t)&v567, (uint64_t)v598, COERCE_DOUBLE(0x1B7000001F7), xmmword_22468F410);
      }
    }
    v228 = (v198 & 1) == 0 && (v214 & 0x40000000 | v196 & 1) == 0;
    if (v228 && (v222 & 0x40000000) == 0)
    {
      v569 = v564;
      v570 = v565;
      v571 = v566;
      *(_QWORD *)&v598[0] = 0x16160D0D16160D0DLL;
      v568 = (__int128)v563;
      v567 = v562;
      v542 = xmmword_22468F420;
      v543 = (__int128)xmmword_22468F430;
      v599[0] = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 7, 6, 7, (uint64_t)v598, (uint64_t)&v542, (uint64_t)v599, COERCE_DOUBLE(0x1B7000001F7), xmmword_22468F430);
    }
  }
  v229 = a1[2];
  v230 = *v447;
  v503 = (unsigned __int8 **)v447[2];
  v506 = (unsigned int *)v447[1];
  v510 = a3[3];
  v511 = a3[4];
  v508 = a3[1];
  v509 = a3[2];
  v507 = *a3;
  v498 = *a1;
  v231 = *((_DWORD *)v229 + 432);
  if (***a1)
  {
    v479 = *((_DWORD *)v229 + 440);
    v484 = *((_DWORD *)v229 + 496);
    v493 = *((_DWORD *)v229 + 504);
    v232 = v506[16];
    if ((v232 & 0x80000000) == 0)
      goto LABEL_589;
LABEL_611:
    v235 = *v503;
    v236 = *(_DWORD *)(v230 + 1816);
    v237 = **v503;
    if (**v503)
      goto LABEL_593;
LABEL_612:
    if ((v236 & 0x10000000) != 0)
      v246 = 0x40000000;
    else
      v246 = 0x80000000;
    if ((v236 & 0x20000000) != 0)
      v236 = v246;
    else
      v236 &= 0xCFFFFFFF;
    if ((v493 & 0x40000000) == 0)
      goto LABEL_594;
    goto LABEL_619;
  }
  if ((v231 & 0x20000000) != 0)
    v231 *= 4;
  v240 = *((_DWORD *)v229 + 496);
  if ((v240 & 0x20000000) != 0)
    v241 = 4 * v240;
  else
    v241 = *((_DWORD *)v229 + 496);
  v242 = *((_DWORD *)v229 + 440);
  if ((v242 & 0x20000000) != 0)
    v242 *= 4;
  v479 = v242;
  v484 = v241;
  v243 = *((_DWORD *)v229 + 504);
  if ((v243 & 0x10000000) != 0)
    v244 = 0x40000000;
  else
    v244 = 0x80000000;
  if ((v243 & 0x20000000) != 0)
    v245 = v244;
  else
    v245 = v243 & 0xCFFFFFFF;
  v493 = v245;
  v232 = v506[16];
  if ((v232 & 0x80000000) != 0)
    goto LABEL_611;
LABEL_589:
  v233 = *(_QWORD *)(v230 + 2328);
  if (v232 >= (*(_QWORD *)(v230 + 2336) - v233) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v233 = *(_QWORD *)(v230 + 2328);
  }
  v234 = v233 + (v232 << 11);
  v235 = *v503;
  v236 = *(_DWORD *)(v234 + 1536);
  v237 = **v503;
  if (!**v503)
    goto LABEL_612;
LABEL_593:
  if ((v493 & 0x40000000) == 0)
  {
LABEL_594:
    v465 = 0;
    v238 = 0;
    v239 = 0;
    v474 = 0;
    goto LABEL_685;
  }
LABEL_619:
  v247 = v506[4];
  if ((v247 & 0x80000000) != 0)
  {
    v249 = *(_DWORD *)(v230 + 2036);
    if (v237)
      goto LABEL_624;
  }
  else
  {
    v248 = *(_QWORD *)(v230 + 2328);
    if (v247 >= (*(_QWORD *)(v230 + 2336) - v248) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v248 = *(_QWORD *)(v230 + 2328);
      v235 = *v503;
      v237 = **v503;
    }
    v249 = *(_DWORD *)(v248 + (v247 << 11) + 1756);
    if (v237)
    {
LABEL_624:
      v250 = v506[4];
      if ((v250 & 0x80000000) == 0)
        goto LABEL_625;
LABEL_652:
      v252 = *(_DWORD *)(v230 + 2292);
      if (v237)
        goto LABEL_629;
      goto LABEL_653;
    }
  }
  if ((v249 & 0x10000000) != 0)
    v262 = 0x40000000;
  else
    v262 = 0x80000000;
  if ((v249 & 0x20000000) != 0)
    v249 = v262;
  else
    v249 &= 0xCFFFFFFF;
  v250 = v506[4];
  if ((v250 & 0x80000000) != 0)
    goto LABEL_652;
LABEL_625:
  v251 = *(_QWORD *)(v230 + 2328);
  if (v250 >= (*(_QWORD *)(v230 + 2336) - v251) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v251 = *(_QWORD *)(v230 + 2328);
    v235 = *v503;
    v237 = **v503;
  }
  v252 = *(_DWORD *)(v251 + (v250 << 11) + 2012);
  if (v237)
  {
LABEL_629:
    v253 = v506[4];
    if ((v253 & 0x80000000) == 0)
      goto LABEL_630;
LABEL_660:
    v255 = *(_DWORD *)(v230 + 2068);
    if (v237)
      goto LABEL_634;
    goto LABEL_661;
  }
LABEL_653:
  if ((v252 & 0x10000000) != 0)
    v263 = 0x40000000;
  else
    v263 = 0x80000000;
  if ((v252 & 0x20000000) != 0)
    v252 = v263;
  else
    v252 &= 0xCFFFFFFF;
  v253 = v506[4];
  if ((v253 & 0x80000000) != 0)
    goto LABEL_660;
LABEL_630:
  v254 = *(_QWORD *)(v230 + 2328);
  if (v253 >= (*(_QWORD *)(v230 + 2336) - v254) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v254 = *(_QWORD *)(v230 + 2328);
    v235 = *v503;
    v237 = **v503;
  }
  v255 = *(_DWORD *)(v254 + (v253 << 11) + 1788);
  if (v237)
  {
LABEL_634:
    v256 = v506[4];
    if ((v256 & 0x80000000) == 0)
      goto LABEL_635;
LABEL_668:
    v258 = *(_DWORD *)(v230 + 2324);
    if (v237)
      goto LABEL_639;
LABEL_669:
    if ((v258 & 0x10000000) != 0)
      v265 = 0x40000000;
    else
      v265 = 0x80000000;
    if ((v258 & 0x20000000) != 0)
      v258 = v265;
    else
      v258 &= 0xCFFFFFFF;
    v259 = v506[7];
    if ((v259 & 0x80000000) == 0)
      goto LABEL_640;
    goto LABEL_676;
  }
LABEL_661:
  if ((v255 & 0x10000000) != 0)
    v264 = 0x40000000;
  else
    v264 = 0x80000000;
  if ((v255 & 0x20000000) != 0)
    v255 = v264;
  else
    v255 &= 0xCFFFFFFF;
  v256 = v506[4];
  if ((v256 & 0x80000000) != 0)
    goto LABEL_668;
LABEL_635:
  v257 = *(_QWORD *)(v230 + 2328);
  if (v256 >= (*(_QWORD *)(v230 + 2336) - v257) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v257 = *(_QWORD *)(v230 + 2328);
    v235 = *v503;
    v237 = **v503;
  }
  v258 = *(_DWORD *)(v257 + (v256 << 11) + 2044);
  if (!v237)
    goto LABEL_669;
LABEL_639:
  v259 = v506[7];
  if ((v259 & 0x80000000) == 0)
  {
LABEL_640:
    v260 = *(_QWORD *)(v230 + 2328);
    if (v259 >= (*(_QWORD *)(v230 + 2336) - v260) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v260 = *(_QWORD *)(v230 + 2328);
      v235 = *v503;
      v237 = **v503;
    }
    v261 = v260 + (v259 << 11);
    goto LABEL_677;
  }
LABEL_676:
  v261 = v230 + 280;
LABEL_677:
  LODWORD(v465) = (v249 >> 30) & 1;
  v474 = (v252 >> 30) & 1;
  v239 = (v255 >> 30) & 1;
  v266 = *(_DWORD *)(v261 + 1564);
  v238 = (v258 >> 30) & 1;
  if (!v237)
  {
    if ((v266 & 0x10000000) != 0)
      v267 = 0x40000000;
    else
      v267 = 0x80000000;
    if ((v266 & 0x20000000) != 0)
      v266 = v267;
    else
      v266 &= 0xCFFFFFFF;
  }
  HIDWORD(v465) = (v266 >> 30) & 1;
LABEL_685:
  v544 = v509;
  v545 = v510;
  v546 = v511;
  v543 = v508;
  v542 = v507;
  v268 = *((_DWORD *)v229 + 433);
  if (**v498)
  {
    v269 = *((_DWORD *)v229 + 497);
    v270 = *((_DWORD *)v229 + 441);
    v490 = *((_DWORD *)v229 + 505);
    v271 = v506[16];
    if ((v271 & 0x80000000) == 0)
      goto LABEL_687;
LABEL_1007:
    v459 = v231 >> 30;
    v273 = *(_DWORD *)(v230 + 1820);
    if (*v235)
      goto LABEL_697;
    goto LABEL_691;
  }
  if ((v268 & 0x10000000) != 0)
    v374 = 0x40000000;
  else
    v374 = 0x80000000;
  if ((v268 & 0x20000000) != 0)
    v268 = v374;
  else
    v268 &= 0xCFFFFFFF;
  v375 = *((_DWORD *)v229 + 497);
  if ((v375 & 0x10000000) != 0)
    v376 = 0x40000000;
  else
    v376 = 0x80000000;
  if ((v375 & 0x20000000) != 0)
    v269 = v376;
  else
    v269 = v375 & 0xCFFFFFFF;
  v377 = *((_DWORD *)v229 + 441);
  if ((v377 & 0x10000000) != 0)
    v378 = 0x40000000;
  else
    v378 = 0x80000000;
  if ((v377 & 0x20000000) != 0)
    v270 = v378;
  else
    v270 = v377 & 0xCFFFFFFF;
  v379 = *((_DWORD *)v229 + 505);
  if ((v379 & 0x10000000) != 0)
    v380 = 0x40000000;
  else
    v380 = 0x80000000;
  if ((v379 & 0x20000000) != 0)
    v381 = v380;
  else
    v381 = v379 & 0xCFFFFFFF;
  v490 = v381;
  v271 = v506[16];
  if ((v271 & 0x80000000) != 0)
    goto LABEL_1007;
LABEL_687:
  v272 = *(_QWORD *)(v230 + 2328);
  if (v271 >= (*(_QWORD *)(v230 + 2336) - v272) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v272 = *(_QWORD *)(v230 + 2328);
    v235 = *v503;
  }
  v459 = v231 >> 30;
  v273 = *(_DWORD *)(v272 + (v271 << 11) + 1540);
  if (!*v235)
  {
LABEL_691:
    if ((v273 & 0x10000000) != 0)
      v274 = 0x40000000;
    else
      v274 = 0x80000000;
    if ((v273 & 0x20000000) != 0)
      v273 = v274;
    else
      v273 &= 0xCFFFFFFF;
  }
LABEL_697:
  v454 = v268 >> 30;
  v275 = v479 >> 30;
  v276 = v484 >> 30;
  v277 = v236 >> 30;
  v480 = v270 >> 30;
  v485 = v269 >> 30;
  v278 = v273 >> 30;
  if ((v493 & 0x40000000) != 0)
  {
    v539 = v509;
    v540 = v510;
    v541 = v511;
    v538 = v508;
    v537 = v507;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F440;
    v533 = (__int128)xmmword_22468F450;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 0, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x38000001F8), xmmword_22468F450);
    if (!v238)
    {
      v534 = v509;
      v535 = v510;
      v536 = v511;
      v533 = v508;
      v532 = v507;
      *(_QWORD *)&v587 = 0x807111005040E0DLL;
      v592 = xmmword_22468F460;
      v593 = (__int128)xmmword_22468F470;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 0, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x38000001F8), xmmword_22468F470);
      v279 = (v239 | v275 & 1) == 0;
      if (!(v474 | v276 & 1))
      {
        v594 = v509;
        v595 = v510;
        v596 = v511;
        *(_QWORD *)&v582 = 0x50405040E0D0E0DLL;
        v592 = v507;
        v593 = v508;
        v587 = xmmword_22468F480;
        v588 = (__int128)xmmword_22468F490;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 0, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x38000001F8), xmmword_22468F490);
        v280 = (v459 & 1) == 0 && v279;
        if (!(_DWORD)v465 && v280)
        {
          v589 = v509;
          v590 = v510;
          v591 = v511;
          v588 = v508;
          v587 = v507;
          *(_QWORD *)&v577 = 0x4040D0D04040D0DLL;
          v582 = xmmword_22468F4A0;
          v583 = (__int128)xmmword_22468F4B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 0, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B8000001F8), xmmword_22468F4B0);
        }
      }
      if (HIDWORD(v465))
        v281 = 0;
      else
        v281 = v279;
      if (v281 && (v277 & 1) == 0)
      {
        v584 = v509;
        v585 = v510;
        v586 = v511;
        *(_QWORD *)&v572 = 0x707040410100D0DLL;
        v583 = v508;
        v582 = v507;
        v577 = xmmword_22468F4C0;
        v578 = (__int128)xmmword_22468F4D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 0, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B8000001F8), xmmword_22468F4D0);
      }
    }
    if (((v276 | v485) & 1) == 0)
    {
      v579 = v509;
      v580 = v510;
      v581 = v511;
      v578 = v508;
      v577 = v507;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F4E0;
      v573 = (__int128)xmmword_22468F4F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 0, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x38000001F8), xmmword_22468F4F0);
      v282 = (v454 & 1) == 0 && ((v275 | v480) & 1) == 0;
      if ((v459 & 1) == 0 && v282)
      {
        v574 = v509;
        v575 = v510;
        v576 = v511;
        v573 = v508;
        v572 = v507;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F500;
        v568 = (__int128)xmmword_22468F510;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 0, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B8000001F8), xmmword_22468F510);
      }
    }
    v283 = (v277 & 1) == 0 && ((v275 | v480) & 1) == 0;
    if (v283 && (v278 & 1) == 0)
    {
      v569 = v509;
      v570 = v510;
      v571 = v511;
      v568 = v508;
      v567 = v507;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468F520;
      v563 = xmmword_22468F530;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 0, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B8000001F8), xmmword_22468F530);
    }
  }
  v519 = v544;
  v520 = v545;
  v521 = v546;
  v517 = v542;
  v518 = v543;
  v284 = *((_DWORD *)v229 + 434);
  if (**v498)
  {
    v285 = *((_DWORD *)v229 + 498);
    v286 = *((_DWORD *)v229 + 442);
    v475 = *((_DWORD *)v229 + 506);
    v287 = v506[16];
    if ((v287 & 0x80000000) == 0)
      goto LABEL_727;
LABEL_1034:
    v289 = *(_DWORD *)(v230 + 1824);
    if (**v503)
      goto LABEL_737;
    goto LABEL_731;
  }
  if ((v284 & 0x10000000) != 0)
    v382 = 0x40000000;
  else
    v382 = 0x80000000;
  if ((v284 & 0x20000000) != 0)
    v284 = v382;
  else
    v284 &= 0xCFFFFFFF;
  v383 = *((_DWORD *)v229 + 498);
  if ((v383 & 0x10000000) != 0)
    v384 = 0x40000000;
  else
    v384 = 0x80000000;
  if ((v383 & 0x20000000) != 0)
    v285 = v384;
  else
    v285 = v383 & 0xCFFFFFFF;
  v385 = *((_DWORD *)v229 + 442);
  if ((v385 & 0x10000000) != 0)
    v386 = 0x40000000;
  else
    v386 = 0x80000000;
  if ((v385 & 0x20000000) != 0)
    v286 = v386;
  else
    v286 = v385 & 0xCFFFFFFF;
  v387 = *((_DWORD *)v229 + 506);
  if ((v387 & 0x10000000) != 0)
    v388 = 0x40000000;
  else
    v388 = 0x80000000;
  if ((v387 & 0x20000000) != 0)
    v389 = v388;
  else
    v389 = v387 & 0xCFFFFFFF;
  v475 = v389;
  v287 = v506[16];
  if ((v287 & 0x80000000) != 0)
    goto LABEL_1034;
LABEL_727:
  v288 = *(_QWORD *)(v230 + 2328);
  if (v287 >= (*(_QWORD *)(v230 + 2336) - v288) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v288 = *(_QWORD *)(v230 + 2328);
  }
  v289 = *(_DWORD *)(v288 + (v287 << 11) + 1544);
  if (!**v503)
  {
LABEL_731:
    if ((v289 & 0x10000000) != 0)
      v290 = 0x40000000;
    else
      v290 = 0x80000000;
    if ((v289 & 0x20000000) != 0)
      v289 = v290;
    else
      v289 &= 0xCFFFFFFF;
  }
LABEL_737:
  v451 = v284 >> 30;
  v291 = v286 >> 30;
  v466 = v289 >> 30;
  v470 = v285 >> 30;
  v529 = v544;
  v530 = v545;
  v531 = v546;
  v527 = v542;
  v528 = v543;
  if ((v490 & 0x40000000) != 0)
  {
    v539 = v544;
    v540 = v545;
    v541 = v546;
    v538 = v543;
    v537 = v542;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F540;
    v533 = (__int128)xmmword_22468F550;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 1, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x39000001F9), xmmword_22468F550);
    if ((v493 & 0x40000000) == 0)
    {
      v534 = v544;
      v535 = v545;
      v536 = v546;
      v533 = v543;
      v532 = v542;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468F560;
      v593 = (__int128)xmmword_22468F570;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 1, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x39000001F9), xmmword_22468F570);
      if (((v276 | v485) & 1) == 0)
      {
        v594 = v544;
        v595 = v545;
        v596 = v546;
        v592 = v542;
        v593 = v543;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F580;
        v588 = (__int128)xmmword_22468F590;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 1, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x39000001F9), xmmword_22468F590);
        v292 = (v454 & 1) == 0 && ((v275 | v480) & 1) == 0;
        if ((v459 & 1) == 0 && v292)
        {
          v589 = v544;
          v590 = v545;
          v591 = v546;
          v588 = v543;
          v587 = v542;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F5A0;
          v583 = (__int128)xmmword_22468F5B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 1, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1B9000001F9), xmmword_22468F5B0);
        }
      }
      v293 = (v277 & 1) == 0 && ((v275 | v480) & 1) == 0;
      if (v293 && (v278 & 1) == 0)
      {
        v584 = v529;
        v585 = v530;
        v586 = v531;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v528;
        v582 = v527;
        v577 = xmmword_22468F5C0;
        v578 = (__int128)xmmword_22468F5D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 1, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1B9000001F9), xmmword_22468F5D0);
      }
    }
    if (((v485 | v470) & 1) == 0)
    {
      v579 = v529;
      v580 = v530;
      v581 = v531;
      v578 = v528;
      v577 = v527;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F5E0;
      v573 = (__int128)xmmword_22468F5F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 1, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x39000001F9), xmmword_22468F5F0);
      v294 = (v284 & 0x40000000) == 0 && ((v480 | v291) & 1) == 0;
      if ((v454 & 1) == 0 && v294)
      {
        v574 = v529;
        v575 = v530;
        v576 = v531;
        v573 = v528;
        v572 = v527;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F600;
        v568 = (__int128)xmmword_22468F610;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 1, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1B9000001F9), xmmword_22468F610);
      }
    }
    v295 = (v278 & 1) == 0 && ((v480 | v291) & 1) == 0;
    if (v295 && (v466 & 1) == 0)
    {
      v569 = v529;
      v570 = v530;
      v571 = v531;
      v568 = v528;
      v567 = v527;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468F620;
      v563 = xmmword_22468F630;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 1, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1B9000001F9), xmmword_22468F630);
    }
  }
  v296 = *((_DWORD *)v229 + 435);
  if (**v498)
  {
    v297 = *((_DWORD *)v229 + 499);
    v298 = *((_DWORD *)v229 + 443);
    v494 = *((_DWORD *)v229 + 507);
    v299 = v506[16];
    if ((v299 & 0x80000000) == 0)
      goto LABEL_767;
LABEL_1061:
    v301 = *(_DWORD *)(v230 + 1828);
    if (**v503)
      goto LABEL_777;
    goto LABEL_771;
  }
  if ((v296 & 0x10000000) != 0)
    v390 = 0x40000000;
  else
    v390 = 0x80000000;
  if ((v296 & 0x20000000) != 0)
    v296 = v390;
  else
    v296 &= 0xCFFFFFFF;
  v391 = *((_DWORD *)v229 + 499);
  if ((v391 & 0x10000000) != 0)
    v392 = 0x40000000;
  else
    v392 = 0x80000000;
  if ((v391 & 0x20000000) != 0)
    v297 = v392;
  else
    v297 = v391 & 0xCFFFFFFF;
  v393 = *((_DWORD *)v229 + 443);
  if ((v393 & 0x10000000) != 0)
    v394 = 0x40000000;
  else
    v394 = 0x80000000;
  if ((v393 & 0x20000000) != 0)
    v298 = v394;
  else
    v298 = v393 & 0xCFFFFFFF;
  v395 = *((_DWORD *)v229 + 507);
  if ((v395 & 0x10000000) != 0)
    v396 = 0x40000000;
  else
    v396 = 0x80000000;
  if ((v395 & 0x20000000) != 0)
    v397 = v396;
  else
    v397 = v395 & 0xCFFFFFFF;
  v494 = v397;
  v299 = v506[16];
  if ((v299 & 0x80000000) != 0)
    goto LABEL_1061;
LABEL_767:
  v300 = *(_QWORD *)(v230 + 2328);
  if (v299 >= (*(_QWORD *)(v230 + 2336) - v300) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v300 = *(_QWORD *)(v230 + 2328);
  }
  v301 = *(_DWORD *)(v300 + (v299 << 11) + 1548);
  if (!**v503)
  {
LABEL_771:
    if ((v301 & 0x10000000) != 0)
      v302 = 0x40000000;
    else
      v302 = 0x80000000;
    if ((v301 & 0x20000000) != 0)
      v301 = v302;
    else
      v301 &= 0xCFFFFFFF;
  }
LABEL_777:
  v448 = v296 >> 30;
  v303 = v297 >> 30;
  v304 = v298 >> 30;
  v460 = v301 >> 30;
  if ((v475 & 0x40000000) != 0)
  {
    v539 = v519;
    v540 = v520;
    v541 = v521;
    v538 = v518;
    v537 = v517;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F640;
    v533 = (__int128)xmmword_22468F650;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 2, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3A000001FALL), xmmword_22468F650);
    if ((v490 & 0x40000000) == 0)
    {
      v534 = v519;
      v535 = v520;
      v536 = v521;
      v533 = v518;
      v532 = v517;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468F660;
      v593 = (__int128)xmmword_22468F670;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 2, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3A000001FALL), xmmword_22468F670);
      if (((v485 | v470) & 1) == 0)
      {
        v594 = v519;
        v595 = v520;
        v596 = v521;
        v592 = v517;
        v593 = v518;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F680;
        v588 = (__int128)xmmword_22468F690;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 2, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3A000001FALL), xmmword_22468F690);
        v305 = (v451 & 1) == 0 && ((v480 | v291) & 1) == 0;
        if ((v454 & 1) == 0 && v305)
        {
          v589 = v519;
          v590 = v520;
          v591 = v521;
          v588 = v518;
          v587 = v517;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F6A0;
          v583 = (__int128)xmmword_22468F6B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 2, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BA000001FALL), xmmword_22468F6B0);
        }
      }
      v306 = (v278 & 1) == 0 && ((v480 | v291) & 1) == 0;
      if (v306 && (v466 & 1) == 0)
      {
        v584 = v519;
        v585 = v520;
        v586 = v521;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v518;
        v582 = v517;
        v577 = xmmword_22468F6C0;
        v578 = (__int128)xmmword_22468F6D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 2, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BA000001FALL), xmmword_22468F6D0);
      }
    }
    if (((v470 | v303) & 1) == 0)
    {
      v579 = v519;
      v580 = v520;
      v581 = v521;
      v578 = v518;
      v577 = v517;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F6E0;
      v573 = (__int128)xmmword_22468F6F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 2, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x3A000001FALL), xmmword_22468F6F0);
      v307 = (v448 & 1) == 0 && ((v291 | v304) & 1) == 0;
      if ((v451 & 1) == 0 && v307)
      {
        v574 = v519;
        v575 = v520;
        v576 = v521;
        v573 = v518;
        v572 = v517;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F700;
        v568 = (__int128)xmmword_22468F710;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 2, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1BA000001FALL), xmmword_22468F710);
      }
    }
    v308 = (v466 & 1) == 0 && ((v291 | v304) & 1) == 0;
    if (v308 && (v460 & 1) == 0)
    {
      v569 = v519;
      v570 = v520;
      v571 = v521;
      v568 = v518;
      v567 = v517;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468F720;
      v563 = xmmword_22468F730;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 2, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1BA000001FALL), xmmword_22468F730);
    }
  }
  v309 = *((_DWORD *)v229 + 436);
  if (**v498)
  {
    v310 = *((_DWORD *)v229 + 500);
    v311 = *((_DWORD *)v229 + 444);
    v491 = *((_DWORD *)v229 + 508);
    v312 = v506[16];
    if ((v312 & 0x80000000) == 0)
      goto LABEL_807;
LABEL_1088:
    v314 = *(_DWORD *)(v230 + 1832);
    if (**v503)
      goto LABEL_817;
    goto LABEL_811;
  }
  if ((v309 & 0x10000000) != 0)
    v398 = 0x40000000;
  else
    v398 = 0x80000000;
  if ((v309 & 0x20000000) != 0)
    v309 = v398;
  else
    v309 &= 0xCFFFFFFF;
  v399 = *((_DWORD *)v229 + 500);
  if ((v399 & 0x10000000) != 0)
    v400 = 0x40000000;
  else
    v400 = 0x80000000;
  if ((v399 & 0x20000000) != 0)
    v310 = v400;
  else
    v310 = v399 & 0xCFFFFFFF;
  v401 = *((_DWORD *)v229 + 444);
  if ((v401 & 0x10000000) != 0)
    v402 = 0x40000000;
  else
    v402 = 0x80000000;
  if ((v401 & 0x20000000) != 0)
    v311 = v402;
  else
    v311 = v401 & 0xCFFFFFFF;
  v403 = *((_DWORD *)v229 + 508);
  if ((v403 & 0x10000000) != 0)
    v404 = 0x40000000;
  else
    v404 = 0x80000000;
  if ((v403 & 0x20000000) != 0)
    v405 = v404;
  else
    v405 = v403 & 0xCFFFFFFF;
  v491 = v405;
  v312 = v506[16];
  if ((v312 & 0x80000000) != 0)
    goto LABEL_1088;
LABEL_807:
  v313 = *(_QWORD *)(v230 + 2328);
  if (v312 >= (*(_QWORD *)(v230 + 2336) - v313) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v313 = *(_QWORD *)(v230 + 2328);
  }
  v314 = *(_DWORD *)(v313 + (v312 << 11) + 1552);
  if (!**v503)
  {
LABEL_811:
    if ((v314 & 0x10000000) != 0)
      v315 = 0x40000000;
    else
      v315 = 0x80000000;
    if ((v314 & 0x20000000) != 0)
      v314 = v315;
    else
      v314 &= 0xCFFFFFFF;
  }
LABEL_817:
  v446 = v309 >> 30;
  v316 = v310 >> 30;
  v317 = v311 >> 30;
  v455 = v314 >> 30;
  if ((v494 & 0x40000000) != 0)
  {
    v539 = v519;
    v540 = v520;
    v541 = v521;
    v538 = v518;
    v537 = v517;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F740;
    v533 = (__int128)xmmword_22468F750;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 3, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3B000001FBLL), xmmword_22468F750);
    if ((v475 & 0x40000000) == 0)
    {
      v534 = v519;
      v535 = v520;
      v536 = v521;
      v533 = v518;
      v532 = v517;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468F760;
      v593 = (__int128)xmmword_22468F770;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 3, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3B000001FBLL), xmmword_22468F770);
      if (((v470 | v303) & 1) == 0)
      {
        v594 = v519;
        v595 = v520;
        v596 = v521;
        v592 = v517;
        v593 = v518;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F780;
        v588 = (__int128)xmmword_22468F790;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 3, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3B000001FBLL), xmmword_22468F790);
        v318 = (v448 & 1) == 0 && ((v291 | v304) & 1) == 0;
        if ((v451 & 1) == 0 && v318)
        {
          v589 = v519;
          v590 = v520;
          v591 = v521;
          v588 = v518;
          v587 = v517;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F7A0;
          v583 = (__int128)xmmword_22468F7B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 3, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BB000001FBLL), xmmword_22468F7B0);
        }
      }
      v319 = (v466 & 1) == 0 && ((v291 | v304) & 1) == 0;
      if (v319 && (v460 & 1) == 0)
      {
        v584 = v519;
        v585 = v520;
        v586 = v521;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v518;
        v582 = v517;
        v577 = xmmword_22468F7C0;
        v578 = (__int128)xmmword_22468F7D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 3, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BB000001FBLL), xmmword_22468F7D0);
      }
    }
    if (((v303 | v316) & 1) == 0)
    {
      v579 = v519;
      v580 = v520;
      v581 = v521;
      v578 = v518;
      v577 = v517;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F7E0;
      v573 = (__int128)xmmword_22468F7F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 3, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x3B000001FBLL), xmmword_22468F7F0);
      v320 = (v309 & 0x40000000) == 0 && ((v304 | v317) & 1) == 0;
      if ((v448 & 1) == 0 && v320)
      {
        v574 = v519;
        v575 = v520;
        v576 = v521;
        v573 = v518;
        v572 = v517;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F800;
        v568 = (__int128)xmmword_22468F810;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 3, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1BB000001FBLL), xmmword_22468F810);
      }
    }
    v321 = (v460 & 1) == 0 && ((v304 | v317) & 1) == 0;
    if (v321 && (v455 & 1) == 0)
    {
      v569 = v519;
      v570 = v520;
      v571 = v521;
      v568 = v518;
      v567 = v517;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468F820;
      v563 = xmmword_22468F830;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 3, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1BB000001FBLL), xmmword_22468F830);
    }
  }
  v322 = *((_DWORD *)v229 + 437);
  if (**v498)
  {
    v323 = *((_DWORD *)v229 + 501);
    v324 = *((_DWORD *)v229 + 445);
    v486 = *((_DWORD *)v229 + 509);
    v325 = v506[16];
    if ((v325 & 0x80000000) == 0)
      goto LABEL_847;
LABEL_1115:
    v327 = *(_DWORD *)(v230 + 1836);
    if (**v503)
      goto LABEL_857;
    goto LABEL_851;
  }
  if ((v322 & 0x10000000) != 0)
    v406 = 0x40000000;
  else
    v406 = 0x80000000;
  if ((v322 & 0x20000000) != 0)
    v322 = v406;
  else
    v322 &= 0xCFFFFFFF;
  v407 = *((_DWORD *)v229 + 501);
  if ((v407 & 0x10000000) != 0)
    v408 = 0x40000000;
  else
    v408 = 0x80000000;
  if ((v407 & 0x20000000) != 0)
    v323 = v408;
  else
    v323 = v407 & 0xCFFFFFFF;
  v409 = *((_DWORD *)v229 + 445);
  if ((v409 & 0x10000000) != 0)
    v410 = 0x40000000;
  else
    v410 = 0x80000000;
  if ((v409 & 0x20000000) != 0)
    v324 = v410;
  else
    v324 = v409 & 0xCFFFFFFF;
  v411 = *((_DWORD *)v229 + 509);
  if ((v411 & 0x10000000) != 0)
    v412 = 0x40000000;
  else
    v412 = 0x80000000;
  if ((v411 & 0x20000000) != 0)
    v413 = v412;
  else
    v413 = v411 & 0xCFFFFFFF;
  v486 = v413;
  v325 = v506[16];
  if ((v325 & 0x80000000) != 0)
    goto LABEL_1115;
LABEL_847:
  v326 = *(_QWORD *)(v230 + 2328);
  if (v325 >= (*(_QWORD *)(v230 + 2336) - v326) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v326 = *(_QWORD *)(v230 + 2328);
  }
  v327 = *(_DWORD *)(v326 + (v325 << 11) + 1556);
  if (!**v503)
  {
LABEL_851:
    if ((v327 & 0x10000000) != 0)
      v328 = 0x40000000;
    else
      v328 = 0x80000000;
    if ((v327 & 0x20000000) != 0)
      v327 = v328;
    else
      v327 &= 0xCFFFFFFF;
  }
LABEL_857:
  v452 = v322 >> 30;
  v481 = v323 >> 30;
  v329 = v324 >> 30;
  v467 = v327 >> 30;
  if ((v491 & 0x40000000) != 0)
  {
    v539 = v519;
    v540 = v520;
    v541 = v521;
    v538 = v518;
    v537 = v517;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F840;
    v533 = (__int128)xmmword_22468F850;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 4, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3C000001FCLL), xmmword_22468F850);
    if ((v494 & 0x40000000) == 0)
    {
      v534 = v519;
      v535 = v520;
      v536 = v521;
      v533 = v518;
      v532 = v517;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468F860;
      v593 = (__int128)xmmword_22468F870;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 4, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3C000001FCLL), xmmword_22468F870);
      if (((v303 | v316) & 1) == 0)
      {
        v594 = v519;
        v595 = v520;
        v596 = v521;
        v592 = v517;
        v593 = v518;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F880;
        v588 = (__int128)xmmword_22468F890;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 4, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3C000001FCLL), xmmword_22468F890);
        v330 = (v446 & 1) == 0 && ((v304 | v317) & 1) == 0;
        if ((v448 & 1) == 0 && v330)
        {
          v589 = v519;
          v590 = v520;
          v591 = v521;
          v588 = v518;
          v587 = v517;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F8A0;
          v583 = (__int128)xmmword_22468F8B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 4, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BC000001FCLL), xmmword_22468F8B0);
        }
      }
      v331 = (v460 & 1) == 0 && ((v304 | v317) & 1) == 0;
      if (v331 && (v455 & 1) == 0)
      {
        v584 = v519;
        v585 = v520;
        v586 = v521;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v518;
        v582 = v517;
        v577 = xmmword_22468F8C0;
        v578 = (__int128)xmmword_22468F8D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 4, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BC000001FCLL), xmmword_22468F8D0);
      }
    }
    if (((v316 | v481) & 1) == 0)
    {
      v579 = v519;
      v580 = v520;
      v581 = v521;
      v578 = v518;
      v577 = v517;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F8E0;
      v573 = (__int128)xmmword_22468F8F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 4, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x3C000001FCLL), xmmword_22468F8F0);
      v332 = (v322 & 0x40000000) == 0 && ((v317 | v329) & 1) == 0;
      if ((v446 & 1) == 0 && v332)
      {
        v574 = v519;
        v575 = v520;
        v576 = v521;
        v573 = v518;
        v572 = v517;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468F900;
        v568 = (__int128)xmmword_22468F910;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 4, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1BC000001FCLL), xmmword_22468F910);
      }
    }
    v333 = (v455 & 1) == 0 && ((v317 | v329) & 1) == 0;
    if (v333 && (v467 & 1) == 0)
    {
      v569 = v519;
      v570 = v520;
      v571 = v521;
      v568 = v518;
      v567 = v517;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468F920;
      v563 = xmmword_22468F930;
      *(_QWORD *)&v552 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 4, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v552, COERCE_DOUBLE(0x1BC000001FCLL), xmmword_22468F930);
    }
  }
  v334 = *((_DWORD *)v229 + 438);
  if (**v498)
  {
    v335 = *((_DWORD *)v229 + 502);
    v336 = *((_DWORD *)v229 + 446);
    v495 = *((_DWORD *)v229 + 510);
    v337 = v506[16];
    if ((v337 & 0x80000000) == 0)
      goto LABEL_887;
LABEL_1142:
    v339 = *(_DWORD *)(v230 + 1840);
    if (**v503)
      goto LABEL_897;
    goto LABEL_891;
  }
  if ((v334 & 0x10000000) != 0)
    v414 = 0x40000000;
  else
    v414 = 0x80000000;
  if ((v334 & 0x20000000) != 0)
    v334 = v414;
  else
    v334 &= 0xCFFFFFFF;
  v415 = *((_DWORD *)v229 + 502);
  if ((v415 & 0x10000000) != 0)
    v416 = 0x40000000;
  else
    v416 = 0x80000000;
  if ((v415 & 0x20000000) != 0)
    v335 = v416;
  else
    v335 = v415 & 0xCFFFFFFF;
  v417 = *((_DWORD *)v229 + 446);
  if ((v417 & 0x10000000) != 0)
    v418 = 0x40000000;
  else
    v418 = 0x80000000;
  if ((v417 & 0x20000000) != 0)
    v336 = v418;
  else
    v336 = v417 & 0xCFFFFFFF;
  v419 = *((_DWORD *)v229 + 510);
  if ((v419 & 0x10000000) != 0)
    v420 = 0x40000000;
  else
    v420 = 0x80000000;
  if ((v419 & 0x20000000) != 0)
    v421 = v420;
  else
    v421 = v419 & 0xCFFFFFFF;
  v495 = v421;
  v337 = v506[16];
  if ((v337 & 0x80000000) != 0)
    goto LABEL_1142;
LABEL_887:
  v338 = *(_QWORD *)(v230 + 2328);
  if (v337 >= (*(_QWORD *)(v230 + 2336) - v338) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v338 = *(_QWORD *)(v230 + 2328);
  }
  v339 = *(_DWORD *)(v338 + (v337 << 11) + 1560);
  if (!**v503)
  {
LABEL_891:
    if ((v339 & 0x10000000) != 0)
      v340 = 0x40000000;
    else
      v340 = 0x80000000;
    if ((v339 & 0x20000000) != 0)
      v339 = v340;
    else
      v339 &= 0xCFFFFFFF;
  }
LABEL_897:
  v461 = v334 >> 30;
  v471 = v336 >> 30;
  v476 = v335 >> 30;
  v341 = v339 >> 30;
  v554 = v519;
  v555 = v520;
  v556 = v521;
  v553 = v518;
  v552 = v517;
  if ((v486 & 0x40000000) != 0)
  {
    v539 = v519;
    v540 = v520;
    v541 = v521;
    v538 = v518;
    v537 = v517;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v532 = xmmword_22468F940;
    v533 = (__int128)xmmword_22468F950;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 5, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3D000001FDLL), xmmword_22468F950);
    if ((v491 & 0x40000000) == 0)
    {
      v534 = v519;
      v535 = v520;
      v536 = v521;
      v533 = v518;
      v532 = v517;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468F960;
      v593 = (__int128)xmmword_22468F970;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 5, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3D000001FDLL), xmmword_22468F970);
      if (((v316 | v481) & 1) == 0)
      {
        v594 = v519;
        v595 = v520;
        v596 = v521;
        v592 = v517;
        v593 = v518;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468F980;
        v588 = (__int128)xmmword_22468F990;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 5, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3D000001FDLL), xmmword_22468F990);
        v342 = (v452 & 1) == 0 && ((v317 | v329) & 1) == 0;
        if ((v446 & 1) == 0 && v342)
        {
          v589 = v519;
          v590 = v520;
          v591 = v521;
          v588 = v518;
          v587 = v517;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468F9A0;
          v583 = (__int128)xmmword_22468F9B0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 5, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BD000001FDLL), xmmword_22468F9B0);
        }
      }
      v343 = (v455 & 1) == 0 && ((v317 | v329) & 1) == 0;
      if (v343 && (v467 & 1) == 0)
      {
        v584 = v554;
        v585 = v555;
        v586 = v556;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v553;
        v582 = v552;
        v577 = xmmword_22468F9C0;
        v578 = (__int128)xmmword_22468F9D0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 5, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BD000001FDLL), xmmword_22468F9D0);
      }
    }
    if (((v481 | v476) & 1) == 0)
    {
      v579 = v554;
      v580 = v555;
      v581 = v556;
      v578 = v553;
      v577 = v552;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468F9E0;
      v573 = (__int128)xmmword_22468F9F0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 5, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x3D000001FDLL), xmmword_22468F9F0);
      v344 = (v334 & 0x40000000) == 0 && ((v329 | v471) & 1) == 0;
      if ((v452 & 1) == 0 && v344)
      {
        v574 = v554;
        v575 = v555;
        v576 = v556;
        v573 = v553;
        v572 = v552;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468FA00;
        v568 = (__int128)xmmword_22468FA10;
        *(_QWORD *)&v557 = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 5, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)&v557, COERCE_DOUBLE(0x1BD000001FDLL), xmmword_22468FA10);
      }
    }
    v345 = (v467 & 1) == 0 && ((v329 | v471) & 1) == 0;
    if (v345 && (v341 & 1) == 0)
    {
      v569 = v554;
      v570 = v555;
      v571 = v556;
      v568 = v553;
      v567 = v552;
      *(_QWORD *)&v557 = 0x101010100D0D0D0DLL;
      v562 = xmmword_22468FA20;
      v563 = xmmword_22468FA30;
      *(_QWORD *)&v547 = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 5, 7, 7, (uint64_t)&v557, (uint64_t)&v562, (uint64_t)&v547, COERCE_DOUBLE(0x1BD000001FDLL), xmmword_22468FA30);
    }
  }
  v549 = v519;
  v550 = v520;
  v551 = v521;
  v548 = v518;
  v547 = v517;
  v346 = *((_DWORD *)v229 + 439);
  if (**v498)
  {
    v347 = *((_DWORD *)v229 + 503);
    v348 = *((_DWORD *)v229 + 447);
    v349 = *((_DWORD *)v229 + 511);
    v350 = v506[16];
    if ((v350 & 0x80000000) == 0)
      goto LABEL_927;
LABEL_1169:
    v352 = *(_DWORD *)(v230 + 1844);
    if (**v503)
      goto LABEL_937;
    goto LABEL_931;
  }
  if ((v346 & 0x10000000) != 0)
    v422 = 0x40000000;
  else
    v422 = 0x80000000;
  if ((v346 & 0x20000000) != 0)
    v346 = v422;
  else
    v346 &= 0xCFFFFFFF;
  v423 = *((_DWORD *)v229 + 503);
  if ((v423 & 0x10000000) != 0)
    v424 = 0x40000000;
  else
    v424 = 0x80000000;
  if ((v423 & 0x20000000) != 0)
    v347 = v424;
  else
    v347 = v423 & 0xCFFFFFFF;
  v425 = *((_DWORD *)v229 + 447);
  if ((v425 & 0x10000000) != 0)
    v426 = 0x40000000;
  else
    v426 = 0x80000000;
  if ((v425 & 0x20000000) != 0)
    v348 = v426;
  else
    v348 = v425 & 0xCFFFFFFF;
  v427 = *((_DWORD *)v229 + 511);
  if ((v427 & 0x10000000) != 0)
    v428 = 0x40000000;
  else
    v428 = 0x80000000;
  if ((v427 & 0x20000000) != 0)
    v349 = v428;
  else
    v349 = v427 & 0xCFFFFFFF;
  v350 = v506[16];
  if ((v350 & 0x80000000) != 0)
    goto LABEL_1169;
LABEL_927:
  v351 = *(_QWORD *)(v230 + 2328);
  if (v350 >= (*(_QWORD *)(v230 + 2336) - v351) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v351 = *(_QWORD *)(v230 + 2328);
  }
  v352 = *(_DWORD *)(v351 + (v350 << 11) + 1564);
  if (!**v503)
  {
LABEL_931:
    if ((v352 & 0x10000000) != 0)
      v353 = 0x40000000;
    else
      v353 = 0x80000000;
    if ((v352 & 0x20000000) != 0)
      v352 = v353;
    else
      v352 &= 0xCFFFFFFF;
  }
LABEL_937:
  v499 = v346 >> 30;
  v354 = v347 >> 30;
  v355 = v348 >> 30;
  v356 = v352 >> 30;
  v559 = v519;
  v560 = v520;
  v561 = v521;
  v558 = v518;
  v557 = v517;
  if ((v495 & 0x40000000) != 0)
  {
    v539 = v519;
    v540 = v520;
    v541 = v521;
    *(_QWORD *)&v592 = 0x11100E0D11100E0DLL;
    v538 = v518;
    v537 = v517;
    v532 = xmmword_22468FA40;
    v533 = (__int128)xmmword_22468FA50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 6, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3E000001FELL), xmmword_22468FA50);
    if ((v486 & 0x40000000) == 0)
    {
      v534 = v519;
      v535 = v520;
      v536 = v521;
      v533 = v518;
      v532 = v517;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v592 = xmmword_22468FA60;
      v593 = (__int128)xmmword_22468FA70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 6, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3E000001FELL), xmmword_22468FA70);
      if (((v481 | v476) & 1) == 0)
      {
        v594 = v519;
        v595 = v520;
        v596 = v521;
        v592 = v517;
        v593 = v518;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v587 = xmmword_22468FA80;
        v588 = (__int128)xmmword_22468FA90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 6, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3E000001FELL), xmmword_22468FA90);
        v357 = (v461 & 1) == 0 && ((v329 | v471) & 1) == 0;
        if ((v452 & 1) == 0 && v357)
        {
          v589 = v519;
          v590 = v520;
          v591 = v521;
          v588 = v518;
          v587 = v517;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468FAA0;
          v583 = (__int128)xmmword_22468FAB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 6, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BE000001FELL), xmmword_22468FAB0);
        }
      }
      v358 = (v467 & 1) == 0 && ((v329 | v471) & 1) == 0;
      if (v358 && (v341 & 1) == 0)
      {
        v584 = v559;
        v585 = v560;
        v586 = v561;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = v558;
        v582 = v557;
        v577 = xmmword_22468FAC0;
        v578 = (__int128)xmmword_22468FAD0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 6, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BE000001FELL), xmmword_22468FAD0);
      }
    }
    if (((v476 | v354) & 1) == 0)
    {
      v579 = v559;
      v580 = v560;
      v581 = v561;
      v578 = v558;
      v577 = v557;
      *(_QWORD *)&v567 = 0xE0D0E0D0E0D0E0DLL;
      v572 = xmmword_22468FAE0;
      v573 = (__int128)xmmword_22468FAF0;
      *(_QWORD *)&v562 = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 6, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)&v562, COERCE_DOUBLE(0x3E000001FELL), xmmword_22468FAF0);
      v359 = (v346 & 0x40000000) == 0 && ((v471 | v355) & 1) == 0;
      if ((v461 & 1) == 0 && v359)
      {
        v574 = v559;
        v575 = v560;
        v576 = v561;
        v573 = v558;
        v572 = v557;
        *(_QWORD *)&v562 = 0xD0D0D0D0D0D0D0DLL;
        v567 = xmmword_22468FB00;
        v568 = (__int128)xmmword_22468FB10;
        *(_QWORD *)&v598[0] = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 6, 7, 7, (uint64_t)&v562, (uint64_t)&v567, (uint64_t)v598, COERCE_DOUBLE(0x1BE000001FELL), xmmword_22468FB10);
      }
    }
    v360 = (v341 & 1) == 0 && ((v471 | v355) & 1) == 0;
    if (v360 && (v356 & 1) == 0)
    {
      v569 = v559;
      v570 = v560;
      v571 = v561;
      *(_QWORD *)&v598[0] = 0x101010100D0D0D0DLL;
      v568 = v558;
      v567 = v557;
      v562 = xmmword_22468FB20;
      v563 = xmmword_22468FB30;
      v599[0] = 0x18190F1015160C0DLL;
      result = sub_223D91438((unint64_t)&v567, 6, 7, 7, (uint64_t)v598, (uint64_t)&v562, (uint64_t)v599, COERCE_DOUBLE(0x1BE000001FELL), xmmword_22468FB30);
    }
  }
  v361 = v506[22];
  if ((v361 & 0x80000000) != 0)
  {
    v364 = *v503;
    v365 = *(_DWORD *)(v230 + 2008);
    v366 = **v503;
    if (**v503)
      goto LABEL_970;
  }
  else
  {
    v362 = *(_QWORD *)(v230 + 2328);
    if (v361 >= (*(_QWORD *)(v230 + 2336) - v362) >> 11)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
      if ((result & 1) != 0)
        abort();
      v362 = *(_QWORD *)(v230 + 2328);
    }
    v363 = v362 + (v361 << 11);
    v364 = *v503;
    v365 = *(_DWORD *)(v363 + 1728);
    v366 = **v503;
    if (**v503)
    {
LABEL_970:
      v367 = v506[22];
      if ((v367 & 0x80000000) == 0)
        goto LABEL_971;
LABEL_1179:
      v369 = *(_DWORD *)(v230 + 2264);
      if (v366)
        goto LABEL_975;
      goto LABEL_1180;
    }
  }
  if ((v365 & 0x10000000) != 0)
    v429 = 0x40000000;
  else
    v429 = 0x80000000;
  if ((v365 & 0x20000000) != 0)
    v365 = v429;
  else
    v365 &= 0xCFFFFFFF;
  v367 = v506[22];
  if ((v367 & 0x80000000) != 0)
    goto LABEL_1179;
LABEL_971:
  v368 = *(_QWORD *)(v230 + 2328);
  if (v367 >= (*(_QWORD *)(v230 + 2336) - v368) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v368 = *(_QWORD *)(v230 + 2328);
    v364 = *v503;
    v366 = **v503;
  }
  v369 = *(_DWORD *)(v368 + (v367 << 11) + 1984);
  if (v366)
  {
LABEL_975:
    v370 = v506[22];
    if ((v370 & 0x80000000) == 0)
      goto LABEL_976;
LABEL_1187:
    v372 = *(_DWORD *)(v230 + 2040);
    if (v366)
      goto LABEL_980;
LABEL_1188:
    if ((v372 & 0x10000000) != 0)
      v431 = 0x40000000;
    else
      v431 = 0x80000000;
    if ((v372 & 0x20000000) != 0)
      v372 = v431;
    else
      v372 &= 0xCFFFFFFF;
    v373 = v506[22];
    if ((v373 & 0x80000000) != 0)
      goto LABEL_1198;
    goto LABEL_1195;
  }
LABEL_1180:
  if ((v369 & 0x10000000) != 0)
    v430 = 0x40000000;
  else
    v430 = 0x80000000;
  if ((v369 & 0x20000000) != 0)
    v369 = v430;
  else
    v369 &= 0xCFFFFFFF;
  v370 = v506[22];
  if ((v370 & 0x80000000) != 0)
    goto LABEL_1187;
LABEL_976:
  v371 = *(_QWORD *)(v230 + 2328);
  if (v370 >= (*(_QWORD *)(v230 + 2336) - v371) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v371 = *(_QWORD *)(v230 + 2328);
    v364 = *v503;
    v366 = **v503;
  }
  v372 = *(_DWORD *)(v371 + (v370 << 11) + 1760);
  if (!v366)
    goto LABEL_1188;
LABEL_980:
  v373 = v506[22];
  if ((v373 & 0x80000000) != 0)
    goto LABEL_1198;
LABEL_1195:
  if (v373 >= (uint64_t)(*(_QWORD *)(v230 + 2336) - *(_QWORD *)(v230 + 2328)) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v364 = *v503;
  }
LABEL_1198:
  v432 = v506[25];
  if ((v432 & 0x80000000) != 0)
  {
    v434 = *(_DWORD *)(v230 + 1816);
    if (*v364)
      goto LABEL_1209;
    goto LABEL_1203;
  }
  v433 = *(_QWORD *)(v230 + 2328);
  if (v432 >= (*(_QWORD *)(v230 + 2336) - v433) >> 11)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      abort();
    v433 = *(_QWORD *)(v230 + 2328);
    v364 = *v503;
  }
  v434 = *(_DWORD *)(v433 + (v432 << 11) + 1536);
  if (!*v364)
  {
LABEL_1203:
    if ((v434 & 0x10000000) != 0)
      v435 = 0x40000000;
    else
      v435 = 0x80000000;
    if ((v434 & 0x20000000) != 0)
      v434 = v435;
    else
      v434 &= 0xCFFFFFFF;
  }
LABEL_1209:
  v564 = v549;
  v565 = v550;
  v566 = v551;
  v563 = (float32x4_t)v548;
  v562 = v547;
  if ((v349 & 0x40000000) != 0)
  {
    v539 = v549;
    v540 = v550;
    v541 = v551;
    v538 = v548;
    v537 = v547;
    *(_QWORD *)&v592 = 0x1A19171611100E0DLL;
    v532 = xmmword_22468FB40;
    v533 = (__int128)xmmword_22468FB50;
    *(_QWORD *)&v587 = 0x1A19171611100E0DLL;
    result = sub_223D91438((unint64_t)&v537, 7, 7, 7, (uint64_t)&v592, (uint64_t)&v532, (uint64_t)&v587, COERCE_DOUBLE(0x3F000001FFLL), xmmword_22468FB50);
    if ((v495 & 0x40000000) == 0)
    {
      v534 = v549;
      v535 = v550;
      v536 = v551;
      *(_QWORD *)&v587 = 0x111011100E0D0E0DLL;
      v533 = v548;
      v532 = v547;
      v592 = xmmword_22468FB60;
      v593 = (__int128)xmmword_22468FB70;
      *(_QWORD *)&v582 = 0x807111005040E0DLL;
      result = sub_223D91438((unint64_t)&v532, 7, 7, 7, (uint64_t)&v587, (uint64_t)&v592, (uint64_t)&v582, COERCE_DOUBLE(0x3F000001FFLL), xmmword_22468FB70);
      if (((v476 | v354) & 1) == 0)
      {
        v594 = v549;
        v595 = v550;
        v596 = v551;
        *(_QWORD *)&v582 = 0xE0D0E0D0E0D0E0DLL;
        v592 = v547;
        v593 = v548;
        v587 = xmmword_22468FB80;
        v588 = (__int128)xmmword_22468FB90;
        *(_QWORD *)&v577 = 0x20105040B0A0E0DLL;
        result = sub_223D91438((unint64_t)&v592, 7, 7, 7, (uint64_t)&v582, (uint64_t)&v587, (uint64_t)&v577, COERCE_DOUBLE(0x3F000001FFLL), xmmword_22468FB90);
        v436 = (v499 & 1) == 0 && ((v471 | v355) & 1) == 0;
        if ((v461 & 1) == 0 && v436)
        {
          v589 = v549;
          v590 = v550;
          v591 = v551;
          v588 = v548;
          v587 = v547;
          *(_QWORD *)&v577 = 0xD0D0D0D0D0D0D0DLL;
          v582 = xmmword_22468FBA0;
          v583 = (__int128)xmmword_22468FBB0;
          *(_QWORD *)&v572 = 0x1090A03040C0DLL;
          result = sub_223D91438((unint64_t)&v587, 7, 7, 7, (uint64_t)&v577, (uint64_t)&v582, (uint64_t)&v572, COERCE_DOUBLE(0x1BF000001FFLL), xmmword_22468FBB0);
        }
      }
      v437 = (v341 & 1) == 0 && ((v471 | v355) & 1) == 0;
      if (v437 && (v356 & 1) == 0)
      {
        v584 = v564;
        v585 = v565;
        v586 = v566;
        *(_QWORD *)&v572 = 0x10100D0D10100D0DLL;
        v583 = (__int128)v563;
        v582 = v562;
        v577 = xmmword_22468FBC0;
        v578 = (__int128)xmmword_22468FBD0;
        *(_QWORD *)&v567 = 0x60703040F100C0DLL;
        result = sub_223D91438((unint64_t)&v582, 7, 7, 7, (uint64_t)&v572, (uint64_t)&v577, (uint64_t)&v567, COERCE_DOUBLE(0x1BF000001FFLL), xmmword_22468FBD0);
      }
    }
    v438 = (v372 & 0x40000000 | v355 & 1) == 0;
    if (!(v369 & 0x40000000 | v354 & 1))
    {
      v579 = v564;
      v580 = v565;
      v581 = v566;
      *(_QWORD *)&v567 = 0x17160E0D17160E0DLL;
      v578 = (__int128)v563;
      v577 = v562;
      v572 = xmmword_22468FBE0;
      v573 = (__int128)xmmword_22468FBF0;
      *(_QWORD *)&v598[0] = 0x14130B0A17160E0DLL;
      result = sub_223D91438((unint64_t)&v577, 7, 7, 7, (uint64_t)&v567, (uint64_t)&v572, (uint64_t)v598, COERCE_DOUBLE(0x3F000001FFLL), xmmword_22468FBF0);
      v439 = (v365 & 0x40000000) == 0 && v438;
      if ((v499 & 1) == 0 && v439)
      {
        v574 = v564;
        v575 = v565;
        v576 = v566;
        *(_QWORD *)&v598[0] = 0x161616160D0D0D0DLL;
        v573 = (__int128)v563;
        v572 = v562;
        v567 = xmmword_22468FC00;
        v568 = (__int128)xmmword_22468FC10;
        v599[0] = 0x12131516090A0C0DLL;
        result = sub_223D91438((unint64_t)&v572, 7, 7, 7, (uint64_t)v598, (uint64_t)&v567, (uint64_t)v599, COERCE_DOUBLE(0x1BF000001FFLL), xmmword_22468FC10);
      }
    }
    v440 = (v356 & 1) == 0 && v438;
    if (v440 && (v434 & 0x40000000) == 0)
    {
      v569 = v564;
      v570 = v565;
      v571 = v566;
      v599[0] = 0x1919101016160D0DLL;
      v568 = (__int128)v563;
      v567 = v562;
      v598[0] = xmmword_22468FC20;
      v598[1] = xmmword_22468FC30;
      v597 = 0x18190F1015160C0DLL;
      return sub_223D91438((unint64_t)&v567, 7, 7, 7, (uint64_t)v599, (uint64_t)v598, (uint64_t)&v597, COERCE_DOUBLE(0x1BF000001FFLL), xmmword_22468FC30);
    }
  }
  return result;
}

uint64_t sub_223E61440(uint64_t a1, int a2, int a3, int a4, _QWORD *a5, double a6, double a7, float32x4_t a8, double a9, float32x4_t a10)
{
  unsigned int v13;
  uint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t result;
  float32x4_t v19;
  float32x4_t v20;
  double v21;
  float32x4_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE v31[12];
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  uint64_t v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  char v73;
  uint64_t v74;
  int v75;
  char v76;
  char v77;
  uint64_t v78;
  int v79;
  char v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;
  int v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  int v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  int v99;
  char v100;
  char v101;
  int v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  char v109;
  int v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  char v117;
  int v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  int v123;
  char v124;
  char v125;
  int v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  int v131;
  char v132;
  char v133;
  int v134;
  uint64_t v135;
  char v136;
  int32x2_t v137;
  int v138;
  uint64_t v139;
  int v140;

  v13 = a3 & 0xCFFFFFFF;
  v14 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v15 = *(int32x2_t *)v14;
  v138 = *(_DWORD *)(v14 + 8);
  v137 = v15;
  v16 = *(_QWORD *)(v14 + 12);
  v140 = *(_DWORD *)(v14 + 20);
  v139 = v16;
  v31[0] = 1;
  v17.i64[0] = -1;
  v17.i64[1] = -1;
  *(_QWORD *)&v31[4] = -1;
  LODWORD(v32) = -1;
  BYTE4(v32) = 8;
  LOBYTE(v33) = 1;
  v34 = -1;
  v35 = -1;
  v36 = 8;
  v37 = 1;
  v38 = -1;
  v39 = -1;
  v40 = 8;
  v41 = 1;
  v42 = -1;
  v43 = -1;
  v44 = 8;
  v45 = 1;
  v46 = -1;
  v47 = -1;
  v48 = 8;
  v49 = 1;
  v50 = -1;
  v51 = -1;
  v52 = 8;
  v53 = 1;
  v54 = -1;
  v55 = -1;
  v56 = 8;
  v57 = 1;
  v58 = -1;
  v59 = -1;
  v60 = 8;
  v61 = 1;
  v62 = -1;
  v63 = -1;
  v64 = 8;
  v65 = 1;
  v66 = -1;
  v67 = -1;
  v68 = 8;
  v69 = 1;
  v70 = -1;
  v71 = -1;
  v72 = 8;
  v73 = 1;
  v74 = -1;
  v75 = -1;
  v76 = 8;
  v77 = 1;
  v78 = -1;
  v79 = -1;
  v80 = 8;
  v81 = 1;
  v82 = -1;
  v83 = -1;
  v84 = 8;
  v85 = 1;
  v86 = -1;
  v87 = -1;
  v88 = 8;
  v89 = 1;
  v90 = -1;
  v91 = -1;
  v92 = 8;
  v93 = 1;
  v94 = -1;
  v95 = -1;
  v96 = 8;
  v97 = 1;
  v98 = -1;
  v99 = -1;
  v100 = 8;
  v101 = 1;
  v102 = -1;
  v103 = -1;
  v104 = 8;
  v105 = 1;
  v106 = -1;
  v107 = -1;
  v108 = 8;
  v109 = 1;
  v110 = -1;
  v111 = -1;
  v112 = 8;
  v113 = 1;
  v114 = -1;
  v115 = -1;
  v116 = 8;
  v117 = 1;
  v118 = -1;
  v119 = -1;
  v120 = 8;
  v121 = 1;
  v122 = -1;
  v123 = -1;
  v124 = 8;
  v125 = 1;
  v126 = -1;
  v127 = -1;
  v128 = 8;
  v129 = 1;
  v130 = -1;
  v131 = -1;
  v132 = 8;
  v133 = 1;
  v134 = -1;
  v135 = -1;
  v136 = 8;
  result = sub_223E61960(a5, a4, a2, 0, (uint64_t)&v137, *(_DWORD *)(v14 + 64), (uint64_t)v31, v17, a7, a8, a9, a10);
  if (a2)
  {
    v23 = result;
    if ((_DWORD)result != 3)
    {
      v24 = (a2 - 1);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(a1 + 184);
        if ((*(_DWORD *)(v25 + 4488 * v13 + 24) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 28) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 32) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 36) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 40) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 44) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 48) & 0x80000000) == 0)
        {
          result = sub_223E61440(a1, v24);
          v25 = *(_QWORD *)(a1 + 184);
        }
        if ((*(_DWORD *)(v25 + 4488 * v13 + 52) & 0x80000000) == 0)
          return sub_223E61440(a1, v24);
      }
      else
      {
        for (i = 0; i != 8; ++i)
        {
          v27 = byte_22466FA9C[i];
          v28 = *(_QWORD *)(a1 + 184);
          v29 = *(_DWORD *)(v28 + 4488 * v13 + 4 * v27 + 24);
          if ((v29 & 0x80000000) == 0)
          {
            v30 = (v139 - v137.i32[0]) >> 1;
            *(int32x2_t *)v20.f32 = vdup_n_s32(v30);
            *(int32x2_t *)v31 = vmla_s32(v137, *(int32x2_t *)v20.f32, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v27), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
            *(_DWORD *)&v31[8] = v138 + v30 * (v27 & 1);
            *(int32x2_t *)v19.f32 = vadd_s32(*(int32x2_t *)v31, *(int32x2_t *)v20.f32);
            v32 = v19.i64[0];
            v33 = *(_DWORD *)&v31[8] + v30;
            result = sub_223E61960(a5, v23 == 2, 0, v29, (uint64_t)v31, v29 >> 30 == 0, v28 + 4488 * v13 + 540 * v27 + 68, v19, *(double *)v31, v20, v21, v22);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_223E61960(_QWORD *a1, int a2, int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, float32x4_t a8, double a9, float32x4_t a10, double a11, float32x4_t a12)
{
  uint64_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  int32x2_t v67;
  uint64_t *v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t *v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t *v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  BOOL v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  BOOL v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t *v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int *v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  BOOL v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unsigned int *v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t *v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  BOOL v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t *v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  BOOL v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unsigned int *v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t *v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  BOOL v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unsigned int *v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t *v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  BOOL v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unsigned int *v426;
  uint64_t v427;
  uint64_t v428;
  unsigned int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t *v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  BOOL v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unsigned int *v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t *v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  BOOL v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unsigned int *v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t *v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  uint64_t v486;
  uint64_t v487;
  BOOL v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unsigned int *v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t *v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  _OWORD v511[2];
  char *v512;
  int32x2_t v513;
  int v514;
  int32x2_t v515;
  int v516;
  __int128 v517;
  __int128 v518;
  char *v519;
  char v520;

  if (!a6)
    return 3;
  v510 = 2;
  if ((a2 & 1) != 0)
  {
    if (a3)
      goto LABEL_4;
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(*a1 + 8);
  v17 = *(float *)(*(_QWORD *)*a1 + 144);
  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a5);
  a8.f32[2] = (float)*(int *)(a5 + 8);
  v18 = vmulq_n_f32(a8, v17);
  if (*(float *)(v16 + 12) < v18.f32[0])
    return 3;
  *(float32x2_t *)a10.f32 = vcvt_f32_s32(*(int32x2_t *)(a5 + 12));
  a10.f32[2] = (float)*(int *)(a5 + 20);
  v19 = vmulq_n_f32(a10, v17);
  if (*(float *)v16 > v19.f32[0])
    return 3;
  if (*(float *)(v16 + 16) < v18.f32[1])
    return 3;
  LODWORD(a11) = v19.i32[1];
  if (*(float *)(v16 + 4) > v19.f32[1])
    return 3;
  a10.i32[0] = *(_DWORD *)(v16 + 20);
  if (a10.f32[0] < v18.f32[2] || *(float *)(v16 + 8) > v19.f32[2])
    return 3;
  v510 = 1;
  if (!a3)
  {
LABEL_15:
    v20 = (_QWORD *)a1[1];
    v520 = 1;
    v21 = *v20;
    v22 = a4;
    v23 = *(_QWORD *)(*v20 + 2328);
    if (a4 >= (unint64_t)((*(_QWORD *)(*v20 + 2336) - v23) >> 11))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v23 = *(_QWORD *)(v21 + 2328);
    }
    v24 = (unsigned int *)(v23 + (v22 << 11));
    *(_QWORD *)&v517 = v21;
    *((_QWORD *)&v517 + 1) = v24;
    v25 = v20[1];
    *(_QWORD *)&v518 = v25;
    *((_QWORD *)&v518 + 1) = a7;
    v519 = &v520;
    if (!a2)
    {
      v67 = *(int32x2_t *)a5;
      v514 = *(_DWORD *)(a5 + 8);
      v515 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x800000008);
      v516 = v514 + 8;
      v68 = (uint64_t *)v20[2];
      v69 = *v68;
      v70 = (float *)v68[1];
      v511[0] = v517;
      v511[1] = v518;
      v512 = v519;
      v513 = v67;
      sub_223E633F4(3, (uint64_t)&v513, v69, v70, v511, *(double *)&v517, *(double *)&v518, a10, a11, a12);
      return 3;
    }
    *(_QWORD *)&v511[0] = &v517;
    *((_QWORD *)&v511[0] + 1) = &v510;
    v26 = *v24;
    v27 = *(_DWORD *)(v21 + 272);
    if (v26 >> 30)
      v28 = 1;
    else
      v28 = (_DWORD)v26 == v27;
    if (v28)
    {
      v29 = v24[1];
      if (v29 >> 30)
        v30 = 1;
      else
        v30 = (_DWORD)v29 == v27;
      if (!v30)
        goto LABEL_148;
    }
    else
    {
      v71 = *(_QWORD *)(v25 + 8);
      v72 = v26 & 0xFFFFFFFFCFFFFFFFLL;
      v73 = *(_QWORD *)(*(_QWORD *)(v71 + 8) + 2448);
      v74 = (unsigned int *)(v73 + 520 * (v26 & 0xFFFFFFFFCFFFFFFFLL) + 508);
      v75 = *v74;
      if ((_DWORD)v75)
      {
        v76 = 0;
        v77 = 0;
        v78 = **(_QWORD **)(v71 + 16);
        v79 = v73 + 520 * v72;
        v80 = v79 + 364;
        v81 = v79 + 340;
        while (1)
        {
          v82 = (uint64_t *)(v80 + 12 * v76);
          v83 = *(uint64_t **)(v78 + 2512);
          if (v83)
            break;
LABEL_140:
          *(_WORD *)(v81 + 2 * v77) = *(_WORD *)(v81 + 2 * v76);
          if (v76 != v77)
          {
            v90 = *v82;
            v91 = v80 + 12 * v77;
            *(_DWORD *)(v91 + 8) = *((_DWORD *)v82 + 2);
            *(_QWORD *)v91 = v90;
          }
          ++v77;
LABEL_124:
          if (++v76 == v75)
          {
            v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
            v21 = v517;
            v27 = *(_DWORD *)(v517 + 272);
            goto LABEL_144;
          }
        }
        v84 = *(_DWORD *)v82;
        v85 = *((_DWORD *)v82 + 1);
        v86 = *((_DWORD *)v82 + 2);
        while (1)
        {
          v87 = *((_DWORD *)v83 + 7);
          if (v84 == v87)
          {
            v88 = *((_DWORD *)v83 + 8);
            if (v85 == v88)
            {
              v89 = *((_DWORD *)v83 + 9);
              if (v86 < v89)
                goto LABEL_128;
              if (v89 >= v86)
                goto LABEL_124;
            }
            else
            {
              if (v85 < v88)
                goto LABEL_128;
              if (v88 >= v85)
                goto LABEL_124;
            }
          }
          else
          {
            if (v84 < v87)
              goto LABEL_128;
            if (v87 >= v84)
              goto LABEL_124;
          }
          ++v83;
LABEL_128:
          v83 = (uint64_t *)*v83;
          if (!v83)
            goto LABEL_140;
        }
      }
      v77 = 0;
LABEL_144:
      *v74 = v77;
      v29 = v24[1];
      if (v29 >> 30)
        v92 = 1;
      else
        v92 = (_DWORD)v29 == v27;
      if (!v92)
      {
LABEL_148:
        v93 = *(_QWORD *)(v518 + 8);
        v94 = v29 & 0xFFFFFFFFCFFFFFFFLL;
        v95 = *(_QWORD *)(*(_QWORD *)(v93 + 8) + 2448);
        v96 = (unsigned int *)(v95 + 520 * (v29 & 0xFFFFFFFFCFFFFFFFLL) + 508);
        v97 = *v96;
        if ((_DWORD)v97)
        {
          v98 = 0;
          v99 = 0;
          v100 = **(_QWORD **)(v93 + 16);
          v101 = v95 + 520 * v94;
          v102 = v101 + 364;
          v103 = v101 + 340;
          while (1)
          {
            v104 = (uint64_t *)(v102 + 12 * v98);
            v105 = *(uint64_t **)(v100 + 2512);
            if (v105)
              break;
LABEL_167:
            *(_WORD *)(v103 + 2 * v99) = *(_WORD *)(v103 + 2 * v98);
            if (v98 != v99)
            {
              v112 = *v104;
              v113 = v102 + 12 * v99;
              *(_DWORD *)(v113 + 8) = *((_DWORD *)v104 + 2);
              *(_QWORD *)v113 = v112;
            }
            ++v99;
LABEL_151:
            if (++v98 == v97)
            {
              v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
              v21 = v517;
              goto LABEL_171;
            }
          }
          v106 = *(_DWORD *)v104;
          v107 = *((_DWORD *)v104 + 1);
          v108 = *((_DWORD *)v104 + 2);
          while (1)
          {
            v109 = *((_DWORD *)v105 + 7);
            if (v106 == v109)
            {
              v110 = *((_DWORD *)v105 + 8);
              if (v107 == v110)
              {
                v111 = *((_DWORD *)v105 + 9);
                if (v108 < v111)
                  goto LABEL_155;
                if (v111 >= v108)
                  goto LABEL_151;
              }
              else
              {
                if (v107 < v110)
                  goto LABEL_155;
                if (v110 >= v107)
                  goto LABEL_151;
              }
            }
            else
            {
              if (v106 < v109)
                goto LABEL_155;
              if (v109 >= v106)
                goto LABEL_151;
            }
            ++v105;
LABEL_155:
            v105 = (uint64_t *)*v105;
            if (!v105)
              goto LABEL_167;
          }
        }
        v99 = 0;
LABEL_171:
        *v96 = v99;
        v27 = *(_DWORD *)(v21 + 272);
        v31 = v24[2];
        if (v31 >> 30)
          v114 = 1;
        else
          v114 = (_DWORD)v31 == v27;
        if (!v114)
        {
LABEL_175:
          v115 = *(_QWORD *)(v518 + 8);
          v116 = v31 & 0xFFFFFFFFCFFFFFFFLL;
          v117 = *(_QWORD *)(*(_QWORD *)(v115 + 8) + 2448);
          v118 = (unsigned int *)(v117 + 520 * (v31 & 0xFFFFFFFFCFFFFFFFLL) + 508);
          v119 = *v118;
          if ((_DWORD)v119)
          {
            v120 = 0;
            v121 = 0;
            v122 = **(_QWORD **)(v115 + 16);
            v123 = v117 + 520 * v116;
            v124 = v123 + 364;
            v125 = v123 + 340;
            while (1)
            {
              v126 = (uint64_t *)(v124 + 12 * v120);
              v127 = *(uint64_t **)(v122 + 2512);
              if (v127)
                break;
LABEL_194:
              *(_WORD *)(v125 + 2 * v121) = *(_WORD *)(v125 + 2 * v120);
              if (v120 != v121)
              {
                v134 = *v126;
                v135 = v124 + 12 * v121;
                *(_DWORD *)(v135 + 8) = *((_DWORD *)v126 + 2);
                *(_QWORD *)v135 = v134;
              }
              ++v121;
LABEL_178:
              if (++v120 == v119)
              {
                v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                v21 = v517;
                goto LABEL_198;
              }
            }
            v128 = *(_DWORD *)v126;
            v129 = *((_DWORD *)v126 + 1);
            v130 = *((_DWORD *)v126 + 2);
            while (1)
            {
              v131 = *((_DWORD *)v127 + 7);
              if (v128 == v131)
              {
                v132 = *((_DWORD *)v127 + 8);
                if (v129 == v132)
                {
                  v133 = *((_DWORD *)v127 + 9);
                  if (v130 < v133)
                    goto LABEL_182;
                  if (v133 >= v130)
                    goto LABEL_178;
                }
                else
                {
                  if (v129 < v132)
                    goto LABEL_182;
                  if (v132 >= v129)
                    goto LABEL_178;
                }
              }
              else
              {
                if (v128 < v131)
                  goto LABEL_182;
                if (v131 >= v128)
                  goto LABEL_178;
              }
              ++v127;
LABEL_182:
              v127 = (uint64_t *)*v127;
              if (!v127)
                goto LABEL_194;
            }
          }
          v121 = 0;
LABEL_198:
          *v118 = v121;
          v27 = *(_DWORD *)(v21 + 272);
          v33 = v24[3];
          if (v33 >> 30)
            v136 = 1;
          else
            v136 = (_DWORD)v33 == v27;
          if (!v136)
          {
LABEL_202:
            v137 = *(_QWORD *)(v518 + 8);
            v138 = v33 & 0xFFFFFFFFCFFFFFFFLL;
            v139 = *(_QWORD *)(*(_QWORD *)(v137 + 8) + 2448);
            v140 = (unsigned int *)(v139 + 520 * (v33 & 0xFFFFFFFFCFFFFFFFLL) + 508);
            v141 = *v140;
            if ((_DWORD)v141)
            {
              v142 = 0;
              v143 = 0;
              v144 = **(_QWORD **)(v137 + 16);
              v145 = v139 + 520 * v138;
              v146 = v145 + 364;
              v147 = v145 + 340;
              while (1)
              {
                v148 = (uint64_t *)(v146 + 12 * v142);
                v149 = *(uint64_t **)(v144 + 2512);
                if (v149)
                  break;
LABEL_221:
                *(_WORD *)(v147 + 2 * v143) = *(_WORD *)(v147 + 2 * v142);
                if (v142 != v143)
                {
                  v156 = *v148;
                  v157 = v146 + 12 * v143;
                  *(_DWORD *)(v157 + 8) = *((_DWORD *)v148 + 2);
                  *(_QWORD *)v157 = v156;
                }
                ++v143;
LABEL_205:
                if (++v142 == v141)
                {
                  v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                  v21 = v517;
                  goto LABEL_225;
                }
              }
              v150 = *(_DWORD *)v148;
              v151 = *((_DWORD *)v148 + 1);
              v152 = *((_DWORD *)v148 + 2);
              while (1)
              {
                v153 = *((_DWORD *)v149 + 7);
                if (v150 == v153)
                {
                  v154 = *((_DWORD *)v149 + 8);
                  if (v151 == v154)
                  {
                    v155 = *((_DWORD *)v149 + 9);
                    if (v152 < v155)
                      goto LABEL_209;
                    if (v155 >= v152)
                      goto LABEL_205;
                  }
                  else
                  {
                    if (v151 < v154)
                      goto LABEL_209;
                    if (v154 >= v151)
                      goto LABEL_205;
                  }
                }
                else
                {
                  if (v150 < v153)
                    goto LABEL_209;
                  if (v153 >= v150)
                    goto LABEL_205;
                }
                ++v149;
LABEL_209:
                v149 = (uint64_t *)*v149;
                if (!v149)
                  goto LABEL_221;
              }
            }
            v143 = 0;
LABEL_225:
            *v140 = v143;
            v27 = *(_DWORD *)(v21 + 272);
            v35 = v24[4];
            if (v35 >> 30)
              v158 = 1;
            else
              v158 = (_DWORD)v35 == v27;
            if (!v158)
            {
LABEL_229:
              v159 = *(_QWORD *)(v518 + 8);
              v160 = v35 & 0xFFFFFFFFCFFFFFFFLL;
              v161 = *(_QWORD *)(*(_QWORD *)(v159 + 8) + 2448);
              v162 = (unsigned int *)(v161 + 520 * (v35 & 0xFFFFFFFFCFFFFFFFLL) + 508);
              v163 = *v162;
              if ((_DWORD)v163)
              {
                v164 = 0;
                v165 = 0;
                v166 = **(_QWORD **)(v159 + 16);
                v167 = v161 + 520 * v160;
                v168 = v167 + 364;
                v169 = v167 + 340;
                while (1)
                {
                  v170 = (uint64_t *)(v168 + 12 * v164);
                  v171 = *(uint64_t **)(v166 + 2512);
                  if (v171)
                    break;
LABEL_248:
                  *(_WORD *)(v169 + 2 * v165) = *(_WORD *)(v169 + 2 * v164);
                  if (v164 != v165)
                  {
                    v178 = *v170;
                    v179 = v168 + 12 * v165;
                    *(_DWORD *)(v179 + 8) = *((_DWORD *)v170 + 2);
                    *(_QWORD *)v179 = v178;
                  }
                  ++v165;
LABEL_232:
                  if (++v164 == v163)
                  {
                    v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                    v21 = v517;
                    goto LABEL_252;
                  }
                }
                v172 = *(_DWORD *)v170;
                v173 = *((_DWORD *)v170 + 1);
                v174 = *((_DWORD *)v170 + 2);
                while (1)
                {
                  v175 = *((_DWORD *)v171 + 7);
                  if (v172 == v175)
                  {
                    v176 = *((_DWORD *)v171 + 8);
                    if (v173 == v176)
                    {
                      v177 = *((_DWORD *)v171 + 9);
                      if (v174 < v177)
                        goto LABEL_236;
                      if (v177 >= v174)
                        goto LABEL_232;
                    }
                    else
                    {
                      if (v173 < v176)
                        goto LABEL_236;
                      if (v176 >= v173)
                        goto LABEL_232;
                    }
                  }
                  else
                  {
                    if (v172 < v175)
                      goto LABEL_236;
                    if (v175 >= v172)
                      goto LABEL_232;
                  }
                  ++v171;
LABEL_236:
                  v171 = (uint64_t *)*v171;
                  if (!v171)
                    goto LABEL_248;
                }
              }
              v165 = 0;
LABEL_252:
              *v162 = v165;
              v27 = *(_DWORD *)(v21 + 272);
              v37 = v24[5];
              if (v37 >> 30)
                v180 = 1;
              else
                v180 = (_DWORD)v37 == v27;
              if (!v180)
              {
LABEL_256:
                v181 = *(_QWORD *)(v518 + 8);
                v182 = v37 & 0xFFFFFFFFCFFFFFFFLL;
                v183 = *(_QWORD *)(*(_QWORD *)(v181 + 8) + 2448);
                v184 = (unsigned int *)(v183 + 520 * (v37 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                v185 = *v184;
                if ((_DWORD)v185)
                {
                  v186 = 0;
                  v187 = 0;
                  v188 = **(_QWORD **)(v181 + 16);
                  v189 = v183 + 520 * v182;
                  v190 = v189 + 364;
                  v191 = v189 + 340;
                  while (1)
                  {
                    v192 = (uint64_t *)(v190 + 12 * v186);
                    v193 = *(uint64_t **)(v188 + 2512);
                    if (v193)
                      break;
LABEL_275:
                    *(_WORD *)(v191 + 2 * v187) = *(_WORD *)(v191 + 2 * v186);
                    if (v186 != v187)
                    {
                      v200 = *v192;
                      v201 = v190 + 12 * v187;
                      *(_DWORD *)(v201 + 8) = *((_DWORD *)v192 + 2);
                      *(_QWORD *)v201 = v200;
                    }
                    ++v187;
LABEL_259:
                    if (++v186 == v185)
                    {
                      v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                      v21 = v517;
                      goto LABEL_279;
                    }
                  }
                  v194 = *(_DWORD *)v192;
                  v195 = *((_DWORD *)v192 + 1);
                  v196 = *((_DWORD *)v192 + 2);
                  while (1)
                  {
                    v197 = *((_DWORD *)v193 + 7);
                    if (v194 == v197)
                    {
                      v198 = *((_DWORD *)v193 + 8);
                      if (v195 == v198)
                      {
                        v199 = *((_DWORD *)v193 + 9);
                        if (v196 < v199)
                          goto LABEL_263;
                        if (v199 >= v196)
                          goto LABEL_259;
                      }
                      else
                      {
                        if (v195 < v198)
                          goto LABEL_263;
                        if (v198 >= v195)
                          goto LABEL_259;
                      }
                    }
                    else
                    {
                      if (v194 < v197)
                        goto LABEL_263;
                      if (v197 >= v194)
                        goto LABEL_259;
                    }
                    ++v193;
LABEL_263:
                    v193 = (uint64_t *)*v193;
                    if (!v193)
                      goto LABEL_275;
                  }
                }
                v187 = 0;
LABEL_279:
                *v184 = v187;
                v27 = *(_DWORD *)(v21 + 272);
                v39 = v24[6];
                if (v39 >> 30)
                  v202 = 1;
                else
                  v202 = (_DWORD)v39 == v27;
                if (!v202)
                {
LABEL_283:
                  v203 = *(_QWORD *)(v518 + 8);
                  v204 = v39 & 0xFFFFFFFFCFFFFFFFLL;
                  v205 = *(_QWORD *)(*(_QWORD *)(v203 + 8) + 2448);
                  v206 = (unsigned int *)(v205 + 520 * (v39 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                  v207 = *v206;
                  if ((_DWORD)v207)
                  {
                    v208 = 0;
                    v209 = 0;
                    v210 = **(_QWORD **)(v203 + 16);
                    v211 = v205 + 520 * v204;
                    v212 = v211 + 364;
                    v213 = v211 + 340;
                    while (1)
                    {
                      v214 = (uint64_t *)(v212 + 12 * v208);
                      v215 = *(uint64_t **)(v210 + 2512);
                      if (v215)
                        break;
LABEL_302:
                      *(_WORD *)(v213 + 2 * v209) = *(_WORD *)(v213 + 2 * v208);
                      if (v208 != v209)
                      {
                        v222 = *v214;
                        v223 = v212 + 12 * v209;
                        *(_DWORD *)(v223 + 8) = *((_DWORD *)v214 + 2);
                        *(_QWORD *)v223 = v222;
                      }
                      ++v209;
LABEL_286:
                      if (++v208 == v207)
                      {
                        v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                        v21 = v517;
                        goto LABEL_306;
                      }
                    }
                    v216 = *(_DWORD *)v214;
                    v217 = *((_DWORD *)v214 + 1);
                    v218 = *((_DWORD *)v214 + 2);
                    while (1)
                    {
                      v219 = *((_DWORD *)v215 + 7);
                      if (v216 == v219)
                      {
                        v220 = *((_DWORD *)v215 + 8);
                        if (v217 == v220)
                        {
                          v221 = *((_DWORD *)v215 + 9);
                          if (v218 < v221)
                            goto LABEL_290;
                          if (v221 >= v218)
                            goto LABEL_286;
                        }
                        else
                        {
                          if (v217 < v220)
                            goto LABEL_290;
                          if (v220 >= v217)
                            goto LABEL_286;
                        }
                      }
                      else
                      {
                        if (v216 < v219)
                          goto LABEL_290;
                        if (v219 >= v216)
                          goto LABEL_286;
                      }
                      ++v215;
LABEL_290:
                      v215 = (uint64_t *)*v215;
                      if (!v215)
                        goto LABEL_302;
                    }
                  }
                  v209 = 0;
LABEL_306:
                  *v206 = v209;
                  v27 = *(_DWORD *)(v21 + 272);
                  v41 = v24[7];
                  if (v41 >> 30)
                    v224 = 1;
                  else
                    v224 = (_DWORD)v41 == v27;
                  if (!v224)
                  {
LABEL_310:
                    v225 = *(_QWORD *)(v518 + 8);
                    v226 = v41 & 0xFFFFFFFFCFFFFFFFLL;
                    v227 = *(_QWORD *)(*(_QWORD *)(v225 + 8) + 2448);
                    v228 = (unsigned int *)(v227 + 520 * (v41 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                    v229 = *v228;
                    if ((_DWORD)v229)
                    {
                      v230 = 0;
                      v231 = 0;
                      v232 = **(_QWORD **)(v225 + 16);
                      v233 = v227 + 520 * v226;
                      v234 = v233 + 364;
                      v235 = v233 + 340;
                      while (1)
                      {
                        v236 = (uint64_t *)(v234 + 12 * v230);
                        v237 = *(uint64_t **)(v232 + 2512);
                        if (v237)
                          break;
LABEL_329:
                        *(_WORD *)(v235 + 2 * v231) = *(_WORD *)(v235 + 2 * v230);
                        if (v230 != v231)
                        {
                          v244 = *v236;
                          v245 = v234 + 12 * v231;
                          *(_DWORD *)(v245 + 8) = *((_DWORD *)v236 + 2);
                          *(_QWORD *)v245 = v244;
                        }
                        ++v231;
LABEL_313:
                        if (++v230 == v229)
                        {
                          v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                          v21 = v517;
                          goto LABEL_333;
                        }
                      }
                      v238 = *(_DWORD *)v236;
                      v239 = *((_DWORD *)v236 + 1);
                      v240 = *((_DWORD *)v236 + 2);
                      while (1)
                      {
                        v241 = *((_DWORD *)v237 + 7);
                        if (v238 == v241)
                        {
                          v242 = *((_DWORD *)v237 + 8);
                          if (v239 == v242)
                          {
                            v243 = *((_DWORD *)v237 + 9);
                            if (v240 < v243)
                              goto LABEL_317;
                            if (v243 >= v240)
                              goto LABEL_313;
                          }
                          else
                          {
                            if (v239 < v242)
                              goto LABEL_317;
                            if (v242 >= v239)
                              goto LABEL_313;
                          }
                        }
                        else
                        {
                          if (v238 < v241)
                            goto LABEL_317;
                          if (v241 >= v238)
                            goto LABEL_313;
                        }
                        ++v237;
LABEL_317:
                        v237 = (uint64_t *)*v237;
                        if (!v237)
                          goto LABEL_329;
                      }
                    }
                    v231 = 0;
LABEL_333:
                    *v228 = v231;
                    v27 = *(_DWORD *)(v21 + 272);
                    v43 = v24[8];
                    if (v43 >> 30)
                      v246 = 1;
                    else
                      v246 = (_DWORD)v43 == v27;
                    if (!v246)
                    {
LABEL_337:
                      v247 = *(_QWORD *)(v518 + 8);
                      v248 = v43 & 0xFFFFFFFFCFFFFFFFLL;
                      v249 = *(_QWORD *)(*(_QWORD *)(v247 + 8) + 2448);
                      v250 = (unsigned int *)(v249 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                      v251 = *v250;
                      if ((_DWORD)v251)
                      {
                        v252 = 0;
                        v253 = 0;
                        v254 = **(_QWORD **)(v247 + 16);
                        v255 = v249 + 520 * v248;
                        v256 = v255 + 364;
                        v257 = v255 + 340;
                        while (1)
                        {
                          v258 = (uint64_t *)(v256 + 12 * v252);
                          v259 = *(uint64_t **)(v254 + 2512);
                          if (v259)
                            break;
LABEL_356:
                          *(_WORD *)(v257 + 2 * v253) = *(_WORD *)(v257 + 2 * v252);
                          if (v252 != v253)
                          {
                            v266 = *v258;
                            v267 = v256 + 12 * v253;
                            *(_DWORD *)(v267 + 8) = *((_DWORD *)v258 + 2);
                            *(_QWORD *)v267 = v266;
                          }
                          ++v253;
LABEL_340:
                          if (++v252 == v251)
                          {
                            v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                            v21 = v517;
                            goto LABEL_360;
                          }
                        }
                        v260 = *(_DWORD *)v258;
                        v261 = *((_DWORD *)v258 + 1);
                        v262 = *((_DWORD *)v258 + 2);
                        while (1)
                        {
                          v263 = *((_DWORD *)v259 + 7);
                          if (v260 == v263)
                          {
                            v264 = *((_DWORD *)v259 + 8);
                            if (v261 == v264)
                            {
                              v265 = *((_DWORD *)v259 + 9);
                              if (v262 < v265)
                                goto LABEL_344;
                              if (v265 >= v262)
                                goto LABEL_340;
                            }
                            else
                            {
                              if (v261 < v264)
                                goto LABEL_344;
                              if (v264 >= v261)
                                goto LABEL_340;
                            }
                          }
                          else
                          {
                            if (v260 < v263)
                              goto LABEL_344;
                            if (v263 >= v260)
                              goto LABEL_340;
                          }
                          ++v259;
LABEL_344:
                          v259 = (uint64_t *)*v259;
                          if (!v259)
                            goto LABEL_356;
                        }
                      }
                      v253 = 0;
LABEL_360:
                      *v250 = v253;
                      v27 = *(_DWORD *)(v21 + 272);
                      v45 = v24[9];
                      if (v45 >> 30)
                        v268 = 1;
                      else
                        v268 = (_DWORD)v45 == v27;
                      if (!v268)
                      {
LABEL_364:
                        v269 = *(_QWORD *)(v518 + 8);
                        v270 = v45 & 0xFFFFFFFFCFFFFFFFLL;
                        v271 = *(_QWORD *)(*(_QWORD *)(v269 + 8) + 2448);
                        v272 = (unsigned int *)(v271 + 520 * (v45 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                        v273 = *v272;
                        if ((_DWORD)v273)
                        {
                          v274 = 0;
                          v275 = 0;
                          v276 = **(_QWORD **)(v269 + 16);
                          v277 = v271 + 520 * v270;
                          v278 = v277 + 364;
                          v279 = v277 + 340;
                          while (1)
                          {
                            v280 = (uint64_t *)(v278 + 12 * v274);
                            v281 = *(uint64_t **)(v276 + 2512);
                            if (v281)
                              break;
LABEL_383:
                            *(_WORD *)(v279 + 2 * v275) = *(_WORD *)(v279 + 2 * v274);
                            if (v274 != v275)
                            {
                              v288 = *v280;
                              v289 = v278 + 12 * v275;
                              *(_DWORD *)(v289 + 8) = *((_DWORD *)v280 + 2);
                              *(_QWORD *)v289 = v288;
                            }
                            ++v275;
LABEL_367:
                            if (++v274 == v273)
                            {
                              v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                              v21 = v517;
                              goto LABEL_387;
                            }
                          }
                          v282 = *(_DWORD *)v280;
                          v283 = *((_DWORD *)v280 + 1);
                          v284 = *((_DWORD *)v280 + 2);
                          while (1)
                          {
                            v285 = *((_DWORD *)v281 + 7);
                            if (v282 == v285)
                            {
                              v286 = *((_DWORD *)v281 + 8);
                              if (v283 == v286)
                              {
                                v287 = *((_DWORD *)v281 + 9);
                                if (v284 < v287)
                                  goto LABEL_371;
                                if (v287 >= v284)
                                  goto LABEL_367;
                              }
                              else
                              {
                                if (v283 < v286)
                                  goto LABEL_371;
                                if (v286 >= v283)
                                  goto LABEL_367;
                              }
                            }
                            else
                            {
                              if (v282 < v285)
                                goto LABEL_371;
                              if (v285 >= v282)
                                goto LABEL_367;
                            }
                            ++v281;
LABEL_371:
                            v281 = (uint64_t *)*v281;
                            if (!v281)
                              goto LABEL_383;
                          }
                        }
                        v275 = 0;
LABEL_387:
                        *v272 = v275;
                        v27 = *(_DWORD *)(v21 + 272);
                        v47 = v24[10];
                        if (v47 >> 30)
                          v290 = 1;
                        else
                          v290 = (_DWORD)v47 == v27;
                        if (!v290)
                        {
LABEL_391:
                          v291 = *(_QWORD *)(v518 + 8);
                          v292 = v47 & 0xFFFFFFFFCFFFFFFFLL;
                          v293 = *(_QWORD *)(*(_QWORD *)(v291 + 8) + 2448);
                          v294 = (unsigned int *)(v293 + 520 * (v47 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                          v295 = *v294;
                          if ((_DWORD)v295)
                          {
                            v296 = 0;
                            v297 = 0;
                            v298 = **(_QWORD **)(v291 + 16);
                            v299 = v293 + 520 * v292;
                            v300 = v299 + 364;
                            v301 = v299 + 340;
                            while (1)
                            {
                              v302 = (uint64_t *)(v300 + 12 * v296);
                              v303 = *(uint64_t **)(v298 + 2512);
                              if (v303)
                                break;
LABEL_410:
                              *(_WORD *)(v301 + 2 * v297) = *(_WORD *)(v301 + 2 * v296);
                              if (v296 != v297)
                              {
                                v310 = *v302;
                                v311 = v300 + 12 * v297;
                                *(_DWORD *)(v311 + 8) = *((_DWORD *)v302 + 2);
                                *(_QWORD *)v311 = v310;
                              }
                              ++v297;
LABEL_394:
                              if (++v296 == v295)
                              {
                                v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                v21 = v517;
                                goto LABEL_414;
                              }
                            }
                            v304 = *(_DWORD *)v302;
                            v305 = *((_DWORD *)v302 + 1);
                            v306 = *((_DWORD *)v302 + 2);
                            while (1)
                            {
                              v307 = *((_DWORD *)v303 + 7);
                              if (v304 == v307)
                              {
                                v308 = *((_DWORD *)v303 + 8);
                                if (v305 == v308)
                                {
                                  v309 = *((_DWORD *)v303 + 9);
                                  if (v306 < v309)
                                    goto LABEL_398;
                                  if (v309 >= v306)
                                    goto LABEL_394;
                                }
                                else
                                {
                                  if (v305 < v308)
                                    goto LABEL_398;
                                  if (v308 >= v305)
                                    goto LABEL_394;
                                }
                              }
                              else
                              {
                                if (v304 < v307)
                                  goto LABEL_398;
                                if (v307 >= v304)
                                  goto LABEL_394;
                              }
                              ++v303;
LABEL_398:
                              v303 = (uint64_t *)*v303;
                              if (!v303)
                                goto LABEL_410;
                            }
                          }
                          v297 = 0;
LABEL_414:
                          *v294 = v297;
                          v27 = *(_DWORD *)(v21 + 272);
                          v49 = v24[11];
                          if (v49 >> 30)
                            v312 = 1;
                          else
                            v312 = (_DWORD)v49 == v27;
                          if (!v312)
                          {
LABEL_418:
                            v313 = *(_QWORD *)(v518 + 8);
                            v314 = v49 & 0xFFFFFFFFCFFFFFFFLL;
                            v315 = *(_QWORD *)(*(_QWORD *)(v313 + 8) + 2448);
                            v316 = (unsigned int *)(v315 + 520 * (v49 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                            v317 = *v316;
                            if ((_DWORD)v317)
                            {
                              v318 = 0;
                              v319 = 0;
                              v320 = **(_QWORD **)(v313 + 16);
                              v321 = v315 + 520 * v314;
                              v322 = v321 + 364;
                              v323 = v321 + 340;
                              while (1)
                              {
                                v324 = (uint64_t *)(v322 + 12 * v318);
                                v325 = *(uint64_t **)(v320 + 2512);
                                if (v325)
                                  break;
LABEL_437:
                                *(_WORD *)(v323 + 2 * v319) = *(_WORD *)(v323 + 2 * v318);
                                if (v318 != v319)
                                {
                                  v332 = *v324;
                                  v333 = v322 + 12 * v319;
                                  *(_DWORD *)(v333 + 8) = *((_DWORD *)v324 + 2);
                                  *(_QWORD *)v333 = v332;
                                }
                                ++v319;
LABEL_421:
                                if (++v318 == v317)
                                {
                                  v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                  v21 = v517;
                                  goto LABEL_441;
                                }
                              }
                              v326 = *(_DWORD *)v324;
                              v327 = *((_DWORD *)v324 + 1);
                              v328 = *((_DWORD *)v324 + 2);
                              while (1)
                              {
                                v329 = *((_DWORD *)v325 + 7);
                                if (v326 == v329)
                                {
                                  v330 = *((_DWORD *)v325 + 8);
                                  if (v327 == v330)
                                  {
                                    v331 = *((_DWORD *)v325 + 9);
                                    if (v328 < v331)
                                      goto LABEL_425;
                                    if (v331 >= v328)
                                      goto LABEL_421;
                                  }
                                  else
                                  {
                                    if (v327 < v330)
                                      goto LABEL_425;
                                    if (v330 >= v327)
                                      goto LABEL_421;
                                  }
                                }
                                else
                                {
                                  if (v326 < v329)
                                    goto LABEL_425;
                                  if (v329 >= v326)
                                    goto LABEL_421;
                                }
                                ++v325;
LABEL_425:
                                v325 = (uint64_t *)*v325;
                                if (!v325)
                                  goto LABEL_437;
                              }
                            }
                            v319 = 0;
LABEL_441:
                            *v316 = v319;
                            v27 = *(_DWORD *)(v21 + 272);
                            v51 = v24[12];
                            if (v51 >> 30)
                              v334 = 1;
                            else
                              v334 = (_DWORD)v51 == v27;
                            if (!v334)
                            {
LABEL_445:
                              v335 = *(_QWORD *)(v518 + 8);
                              v336 = v51 & 0xFFFFFFFFCFFFFFFFLL;
                              v337 = *(_QWORD *)(*(_QWORD *)(v335 + 8) + 2448);
                              v338 = (unsigned int *)(v337 + 520 * (v51 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                              v339 = *v338;
                              if ((_DWORD)v339)
                              {
                                v340 = 0;
                                v341 = 0;
                                v342 = **(_QWORD **)(v335 + 16);
                                v343 = v337 + 520 * v336;
                                v344 = v343 + 364;
                                v345 = v343 + 340;
                                while (1)
                                {
                                  v346 = (uint64_t *)(v344 + 12 * v340);
                                  v347 = *(uint64_t **)(v342 + 2512);
                                  if (v347)
                                    break;
LABEL_464:
                                  *(_WORD *)(v345 + 2 * v341) = *(_WORD *)(v345 + 2 * v340);
                                  if (v340 != v341)
                                  {
                                    v354 = *v346;
                                    v355 = v344 + 12 * v341;
                                    *(_DWORD *)(v355 + 8) = *((_DWORD *)v346 + 2);
                                    *(_QWORD *)v355 = v354;
                                  }
                                  ++v341;
LABEL_448:
                                  if (++v340 == v339)
                                  {
                                    v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                    v21 = v517;
                                    goto LABEL_468;
                                  }
                                }
                                v348 = *(_DWORD *)v346;
                                v349 = *((_DWORD *)v346 + 1);
                                v350 = *((_DWORD *)v346 + 2);
                                while (1)
                                {
                                  v351 = *((_DWORD *)v347 + 7);
                                  if (v348 == v351)
                                  {
                                    v352 = *((_DWORD *)v347 + 8);
                                    if (v349 == v352)
                                    {
                                      v353 = *((_DWORD *)v347 + 9);
                                      if (v350 < v353)
                                        goto LABEL_452;
                                      if (v353 >= v350)
                                        goto LABEL_448;
                                    }
                                    else
                                    {
                                      if (v349 < v352)
                                        goto LABEL_452;
                                      if (v352 >= v349)
                                        goto LABEL_448;
                                    }
                                  }
                                  else
                                  {
                                    if (v348 < v351)
                                      goto LABEL_452;
                                    if (v351 >= v348)
                                      goto LABEL_448;
                                  }
                                  ++v347;
LABEL_452:
                                  v347 = (uint64_t *)*v347;
                                  if (!v347)
                                    goto LABEL_464;
                                }
                              }
                              v341 = 0;
LABEL_468:
                              *v338 = v341;
                              v27 = *(_DWORD *)(v21 + 272);
                              v53 = v24[13];
                              if (v53 >> 30)
                                v356 = 1;
                              else
                                v356 = (_DWORD)v53 == v27;
                              if (!v356)
                              {
LABEL_472:
                                v357 = *(_QWORD *)(v518 + 8);
                                v358 = v53 & 0xFFFFFFFFCFFFFFFFLL;
                                v359 = *(_QWORD *)(*(_QWORD *)(v357 + 8) + 2448);
                                v360 = (unsigned int *)(v359 + 520 * (v53 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                v361 = *v360;
                                if ((_DWORD)v361)
                                {
                                  v362 = 0;
                                  v363 = 0;
                                  v364 = **(_QWORD **)(v357 + 16);
                                  v365 = v359 + 520 * v358;
                                  v366 = v365 + 364;
                                  v367 = v365 + 340;
                                  while (1)
                                  {
                                    v368 = (uint64_t *)(v366 + 12 * v362);
                                    v369 = *(uint64_t **)(v364 + 2512);
                                    if (v369)
                                      break;
LABEL_491:
                                    *(_WORD *)(v367 + 2 * v363) = *(_WORD *)(v367 + 2 * v362);
                                    if (v362 != v363)
                                    {
                                      v376 = *v368;
                                      v377 = v366 + 12 * v363;
                                      *(_DWORD *)(v377 + 8) = *((_DWORD *)v368 + 2);
                                      *(_QWORD *)v377 = v376;
                                    }
                                    ++v363;
LABEL_475:
                                    if (++v362 == v361)
                                    {
                                      v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                      v21 = v517;
                                      goto LABEL_495;
                                    }
                                  }
                                  v370 = *(_DWORD *)v368;
                                  v371 = *((_DWORD *)v368 + 1);
                                  v372 = *((_DWORD *)v368 + 2);
                                  while (1)
                                  {
                                    v373 = *((_DWORD *)v369 + 7);
                                    if (v370 == v373)
                                    {
                                      v374 = *((_DWORD *)v369 + 8);
                                      if (v371 == v374)
                                      {
                                        v375 = *((_DWORD *)v369 + 9);
                                        if (v372 < v375)
                                          goto LABEL_479;
                                        if (v375 >= v372)
                                          goto LABEL_475;
                                      }
                                      else
                                      {
                                        if (v371 < v374)
                                          goto LABEL_479;
                                        if (v374 >= v371)
                                          goto LABEL_475;
                                      }
                                    }
                                    else
                                    {
                                      if (v370 < v373)
                                        goto LABEL_479;
                                      if (v373 >= v370)
                                        goto LABEL_475;
                                    }
                                    ++v369;
LABEL_479:
                                    v369 = (uint64_t *)*v369;
                                    if (!v369)
                                      goto LABEL_491;
                                  }
                                }
                                v363 = 0;
LABEL_495:
                                *v360 = v363;
                                v27 = *(_DWORD *)(v21 + 272);
                                v55 = v24[14];
                                if (v55 >> 30)
                                  v378 = 1;
                                else
                                  v378 = (_DWORD)v55 == v27;
                                if (!v378)
                                {
LABEL_499:
                                  v379 = *(_QWORD *)(v518 + 8);
                                  v380 = v55 & 0xFFFFFFFFCFFFFFFFLL;
                                  v381 = *(_QWORD *)(*(_QWORD *)(v379 + 8) + 2448);
                                  v382 = (unsigned int *)(v381 + 520 * (v55 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                  v383 = *v382;
                                  if ((_DWORD)v383)
                                  {
                                    v384 = 0;
                                    v385 = 0;
                                    v386 = **(_QWORD **)(v379 + 16);
                                    v387 = v381 + 520 * v380;
                                    v388 = v387 + 364;
                                    v389 = v387 + 340;
                                    while (1)
                                    {
                                      v390 = (uint64_t *)(v388 + 12 * v384);
                                      v391 = *(uint64_t **)(v386 + 2512);
                                      if (v391)
                                        break;
LABEL_518:
                                      *(_WORD *)(v389 + 2 * v385) = *(_WORD *)(v389 + 2 * v384);
                                      if (v384 != v385)
                                      {
                                        v398 = *v390;
                                        v399 = v388 + 12 * v385;
                                        *(_DWORD *)(v399 + 8) = *((_DWORD *)v390 + 2);
                                        *(_QWORD *)v399 = v398;
                                      }
                                      ++v385;
LABEL_502:
                                      if (++v384 == v383)
                                      {
                                        v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                        v21 = v517;
                                        goto LABEL_522;
                                      }
                                    }
                                    v392 = *(_DWORD *)v390;
                                    v393 = *((_DWORD *)v390 + 1);
                                    v394 = *((_DWORD *)v390 + 2);
                                    while (1)
                                    {
                                      v395 = *((_DWORD *)v391 + 7);
                                      if (v392 == v395)
                                      {
                                        v396 = *((_DWORD *)v391 + 8);
                                        if (v393 == v396)
                                        {
                                          v397 = *((_DWORD *)v391 + 9);
                                          if (v394 < v397)
                                            goto LABEL_506;
                                          if (v397 >= v394)
                                            goto LABEL_502;
                                        }
                                        else
                                        {
                                          if (v393 < v396)
                                            goto LABEL_506;
                                          if (v396 >= v393)
                                            goto LABEL_502;
                                        }
                                      }
                                      else
                                      {
                                        if (v392 < v395)
                                          goto LABEL_506;
                                        if (v395 >= v392)
                                          goto LABEL_502;
                                      }
                                      ++v391;
LABEL_506:
                                      v391 = (uint64_t *)*v391;
                                      if (!v391)
                                        goto LABEL_518;
                                    }
                                  }
                                  v385 = 0;
LABEL_522:
                                  *v382 = v385;
                                  v27 = *(_DWORD *)(v21 + 272);
                                  v57 = v24[15];
                                  if (v57 >> 30)
                                    v400 = 1;
                                  else
                                    v400 = (_DWORD)v57 == v27;
                                  if (!v400)
                                  {
LABEL_526:
                                    v401 = *(_QWORD *)(v518 + 8);
                                    v402 = v57 & 0xFFFFFFFFCFFFFFFFLL;
                                    v403 = *(_QWORD *)(*(_QWORD *)(v401 + 8) + 2448);
                                    v404 = (unsigned int *)(v403 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                    v405 = *v404;
                                    if ((_DWORD)v405)
                                    {
                                      v406 = 0;
                                      v407 = 0;
                                      v408 = **(_QWORD **)(v401 + 16);
                                      v409 = v403 + 520 * v402;
                                      v410 = v409 + 364;
                                      v411 = v409 + 340;
                                      while (1)
                                      {
                                        v412 = (uint64_t *)(v410 + 12 * v406);
                                        v413 = *(uint64_t **)(v408 + 2512);
                                        if (v413)
                                          break;
LABEL_545:
                                        *(_WORD *)(v411 + 2 * v407) = *(_WORD *)(v411 + 2 * v406);
                                        if (v406 != v407)
                                        {
                                          v420 = *v412;
                                          v421 = v410 + 12 * v407;
                                          *(_DWORD *)(v421 + 8) = *((_DWORD *)v412 + 2);
                                          *(_QWORD *)v421 = v420;
                                        }
                                        ++v407;
LABEL_529:
                                        if (++v406 == v405)
                                        {
                                          v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                          v21 = v517;
                                          goto LABEL_549;
                                        }
                                      }
                                      v414 = *(_DWORD *)v412;
                                      v415 = *((_DWORD *)v412 + 1);
                                      v416 = *((_DWORD *)v412 + 2);
                                      while (1)
                                      {
                                        v417 = *((_DWORD *)v413 + 7);
                                        if (v414 == v417)
                                        {
                                          v418 = *((_DWORD *)v413 + 8);
                                          if (v415 == v418)
                                          {
                                            v419 = *((_DWORD *)v413 + 9);
                                            if (v416 < v419)
                                              goto LABEL_533;
                                            if (v419 >= v416)
                                              goto LABEL_529;
                                          }
                                          else
                                          {
                                            if (v415 < v418)
                                              goto LABEL_533;
                                            if (v418 >= v415)
                                              goto LABEL_529;
                                          }
                                        }
                                        else
                                        {
                                          if (v414 < v417)
                                            goto LABEL_533;
                                          if (v417 >= v414)
                                            goto LABEL_529;
                                        }
                                        ++v413;
LABEL_533:
                                        v413 = (uint64_t *)*v413;
                                        if (!v413)
                                          goto LABEL_545;
                                      }
                                    }
                                    v407 = 0;
LABEL_549:
                                    *v404 = v407;
                                    v27 = *(_DWORD *)(v21 + 272);
                                    v59 = v24[16];
                                    if (v59 >> 30)
                                      v422 = 1;
                                    else
                                      v422 = (_DWORD)v59 == v27;
                                    if (!v422)
                                    {
LABEL_553:
                                      v423 = *(_QWORD *)(v518 + 8);
                                      v424 = v59 & 0xFFFFFFFFCFFFFFFFLL;
                                      v425 = *(_QWORD *)(*(_QWORD *)(v423 + 8) + 2448);
                                      v426 = (unsigned int *)(v425 + 520 * (v59 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                      v427 = *v426;
                                      if ((_DWORD)v427)
                                      {
                                        v428 = 0;
                                        v429 = 0;
                                        v430 = **(_QWORD **)(v423 + 16);
                                        v431 = v425 + 520 * v424;
                                        v432 = v431 + 364;
                                        v433 = v431 + 340;
                                        while (1)
                                        {
                                          v434 = (uint64_t *)(v432 + 12 * v428);
                                          v435 = *(uint64_t **)(v430 + 2512);
                                          if (v435)
                                            break;
LABEL_572:
                                          *(_WORD *)(v433 + 2 * v429) = *(_WORD *)(v433 + 2 * v428);
                                          if (v428 != v429)
                                          {
                                            v442 = *v434;
                                            v443 = v432 + 12 * v429;
                                            *(_DWORD *)(v443 + 8) = *((_DWORD *)v434 + 2);
                                            *(_QWORD *)v443 = v442;
                                          }
                                          ++v429;
LABEL_556:
                                          if (++v428 == v427)
                                          {
                                            v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                            v21 = v517;
                                            goto LABEL_576;
                                          }
                                        }
                                        v436 = *(_DWORD *)v434;
                                        v437 = *((_DWORD *)v434 + 1);
                                        v438 = *((_DWORD *)v434 + 2);
                                        while (1)
                                        {
                                          v439 = *((_DWORD *)v435 + 7);
                                          if (v436 == v439)
                                          {
                                            v440 = *((_DWORD *)v435 + 8);
                                            if (v437 == v440)
                                            {
                                              v441 = *((_DWORD *)v435 + 9);
                                              if (v438 < v441)
                                                goto LABEL_560;
                                              if (v441 >= v438)
                                                goto LABEL_556;
                                            }
                                            else
                                            {
                                              if (v437 < v440)
                                                goto LABEL_560;
                                              if (v440 >= v437)
                                                goto LABEL_556;
                                            }
                                          }
                                          else
                                          {
                                            if (v436 < v439)
                                              goto LABEL_560;
                                            if (v439 >= v436)
                                              goto LABEL_556;
                                          }
                                          ++v435;
LABEL_560:
                                          v435 = (uint64_t *)*v435;
                                          if (!v435)
                                            goto LABEL_572;
                                        }
                                      }
                                      v429 = 0;
LABEL_576:
                                      *v426 = v429;
                                      v27 = *(_DWORD *)(v21 + 272);
                                      v61 = v24[17];
                                      if (v61 >> 30)
                                        v444 = 1;
                                      else
                                        v444 = (_DWORD)v61 == v27;
                                      if (!v444)
                                      {
LABEL_580:
                                        v445 = *(_QWORD *)(v518 + 8);
                                        v446 = v61 & 0xFFFFFFFFCFFFFFFFLL;
                                        v447 = *(_QWORD *)(*(_QWORD *)(v445 + 8) + 2448);
                                        v448 = (unsigned int *)(v447 + 520 * (v61 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                        v449 = *v448;
                                        if ((_DWORD)v449)
                                        {
                                          v450 = 0;
                                          v451 = 0;
                                          v452 = **(_QWORD **)(v445 + 16);
                                          v453 = v447 + 520 * v446;
                                          v454 = v453 + 364;
                                          v455 = v453 + 340;
                                          while (1)
                                          {
                                            v456 = (uint64_t *)(v454 + 12 * v450);
                                            v457 = *(uint64_t **)(v452 + 2512);
                                            if (v457)
                                              break;
LABEL_599:
                                            *(_WORD *)(v455 + 2 * v451) = *(_WORD *)(v455 + 2 * v450);
                                            if (v450 != v451)
                                            {
                                              v464 = *v456;
                                              v465 = v454 + 12 * v451;
                                              *(_DWORD *)(v465 + 8) = *((_DWORD *)v456 + 2);
                                              *(_QWORD *)v465 = v464;
                                            }
                                            ++v451;
LABEL_583:
                                            if (++v450 == v449)
                                            {
                                              v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                              v21 = v517;
                                              goto LABEL_603;
                                            }
                                          }
                                          v458 = *(_DWORD *)v456;
                                          v459 = *((_DWORD *)v456 + 1);
                                          v460 = *((_DWORD *)v456 + 2);
                                          while (1)
                                          {
                                            v461 = *((_DWORD *)v457 + 7);
                                            if (v458 == v461)
                                            {
                                              v462 = *((_DWORD *)v457 + 8);
                                              if (v459 == v462)
                                              {
                                                v463 = *((_DWORD *)v457 + 9);
                                                if (v460 < v463)
                                                  goto LABEL_587;
                                                if (v463 >= v460)
                                                  goto LABEL_583;
                                              }
                                              else
                                              {
                                                if (v459 < v462)
                                                  goto LABEL_587;
                                                if (v462 >= v459)
                                                  goto LABEL_583;
                                              }
                                            }
                                            else
                                            {
                                              if (v458 < v461)
                                                goto LABEL_587;
                                              if (v461 >= v458)
                                                goto LABEL_583;
                                            }
                                            ++v457;
LABEL_587:
                                            v457 = (uint64_t *)*v457;
                                            if (!v457)
                                              goto LABEL_599;
                                          }
                                        }
                                        v451 = 0;
LABEL_603:
                                        *v448 = v451;
                                        v27 = *(_DWORD *)(v21 + 272);
                                        v63 = v24[18];
                                        if (v63 >> 30)
                                          v466 = 1;
                                        else
                                          v466 = (_DWORD)v63 == v27;
                                        if (!v466)
                                        {
LABEL_607:
                                          v467 = *(_QWORD *)(v518 + 8);
                                          v468 = v63 & 0xFFFFFFFFCFFFFFFFLL;
                                          v469 = *(_QWORD *)(*(_QWORD *)(v467 + 8) + 2448);
                                          v470 = (unsigned int *)(v469 + 520 * (v63 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                          v471 = *v470;
                                          if ((_DWORD)v471)
                                          {
                                            v472 = 0;
                                            v473 = 0;
                                            v474 = **(_QWORD **)(v467 + 16);
                                            v475 = v469 + 520 * v468;
                                            v476 = v475 + 364;
                                            v477 = v475 + 340;
                                            while (1)
                                            {
                                              v478 = (uint64_t *)(v476 + 12 * v472);
                                              v479 = *(uint64_t **)(v474 + 2512);
                                              if (v479)
                                                break;
LABEL_626:
                                              *(_WORD *)(v477 + 2 * v473) = *(_WORD *)(v477 + 2 * v472);
                                              if (v472 != v473)
                                              {
                                                v486 = *v478;
                                                v487 = v476 + 12 * v473;
                                                *(_DWORD *)(v487 + 8) = *((_DWORD *)v478 + 2);
                                                *(_QWORD *)v487 = v486;
                                              }
                                              ++v473;
LABEL_610:
                                              if (++v472 == v471)
                                              {
                                                v24 = (unsigned int *)*((_QWORD *)&v517 + 1);
                                                v21 = v517;
                                                goto LABEL_630;
                                              }
                                            }
                                            v480 = *(_DWORD *)v478;
                                            v481 = *((_DWORD *)v478 + 1);
                                            v482 = *((_DWORD *)v478 + 2);
                                            while (1)
                                            {
                                              v483 = *((_DWORD *)v479 + 7);
                                              if (v480 == v483)
                                              {
                                                v484 = *((_DWORD *)v479 + 8);
                                                if (v481 == v484)
                                                {
                                                  v485 = *((_DWORD *)v479 + 9);
                                                  if (v482 < v485)
                                                    goto LABEL_614;
                                                  if (v485 >= v482)
                                                    goto LABEL_610;
                                                }
                                                else
                                                {
                                                  if (v481 < v484)
                                                    goto LABEL_614;
                                                  if (v484 >= v481)
                                                    goto LABEL_610;
                                                }
                                              }
                                              else
                                              {
                                                if (v480 < v483)
                                                  goto LABEL_614;
                                                if (v483 >= v480)
                                                  goto LABEL_610;
                                              }
                                              ++v479;
LABEL_614:
                                              v479 = (uint64_t *)*v479;
                                              if (!v479)
                                                goto LABEL_626;
                                            }
                                          }
                                          v473 = 0;
LABEL_630:
                                          *v470 = v473;
                                          v65 = v24[19];
                                          if (v65 >> 30)
                                            v488 = 1;
                                          else
                                            v488 = (_DWORD)v65 == *(_DWORD *)(v21 + 272);
                                          if (!v488)
                                            goto LABEL_634;
                                          goto LABEL_657;
                                        }
LABEL_114:
                                        v65 = v24[19];
                                        if (v65 >> 30)
                                          v66 = 1;
                                        else
                                          v66 = (_DWORD)v65 == v27;
                                        if (!v66)
                                        {
LABEL_634:
                                          v489 = *(_QWORD *)(v518 + 8);
                                          v490 = v65 & 0xFFFFFFFFCFFFFFFFLL;
                                          v491 = *(_QWORD *)(*(_QWORD *)(v489 + 8) + 2448);
                                          v492 = (unsigned int *)(v491 + 520 * (v65 & 0xFFFFFFFFCFFFFFFFLL) + 508);
                                          v493 = *v492;
                                          if ((_DWORD)v493)
                                          {
                                            v494 = 0;
                                            v495 = 0;
                                            v496 = **(_QWORD **)(v489 + 16);
                                            v497 = v491 + 520 * v490;
                                            v498 = v497 + 364;
                                            v499 = v497 + 340;
                                            while (1)
                                            {
                                              v500 = (uint64_t *)(v498 + 12 * v494);
                                              v501 = *(uint64_t **)(v496 + 2512);
                                              if (v501)
                                                break;
LABEL_653:
                                              *(_WORD *)(v499 + 2 * v495) = *(_WORD *)(v499 + 2 * v494);
                                              if (v494 != v495)
                                              {
                                                v508 = *v500;
                                                v509 = v498 + 12 * v495;
                                                *(_DWORD *)(v509 + 8) = *((_DWORD *)v500 + 2);
                                                *(_QWORD *)v509 = v508;
                                              }
                                              ++v495;
LABEL_637:
                                              if (++v494 == v493)
                                                goto LABEL_656;
                                            }
                                            v502 = *(_DWORD *)v500;
                                            v503 = *((_DWORD *)v500 + 1);
                                            v504 = *((_DWORD *)v500 + 2);
                                            while (1)
                                            {
                                              v505 = *((_DWORD *)v501 + 7);
                                              if (v502 == v505)
                                              {
                                                v506 = *((_DWORD *)v501 + 8);
                                                if (v503 == v506)
                                                {
                                                  v507 = *((_DWORD *)v501 + 9);
                                                  if (v504 < v507)
                                                    goto LABEL_641;
                                                  if (v507 >= v504)
                                                    goto LABEL_637;
                                                }
                                                else
                                                {
                                                  if (v503 < v506)
                                                    goto LABEL_641;
                                                  if (v506 >= v503)
                                                    goto LABEL_637;
                                                }
                                              }
                                              else
                                              {
                                                if (v502 < v505)
                                                  goto LABEL_641;
                                                if (v505 >= v502)
                                                  goto LABEL_637;
                                              }
                                              ++v501;
LABEL_641:
                                              v501 = (uint64_t *)*v501;
                                              if (!v501)
                                                goto LABEL_653;
                                            }
                                          }
                                          v495 = 0;
LABEL_656:
                                          *v492 = v495;
                                        }
LABEL_657:
                                        sub_223E638C8((uint64_t **)v511);
                                        return 3;
                                      }
LABEL_109:
                                      v63 = v24[18];
                                      if (v63 >> 30)
                                        v64 = 1;
                                      else
                                        v64 = (_DWORD)v63 == v27;
                                      if (!v64)
                                        goto LABEL_607;
                                      goto LABEL_114;
                                    }
LABEL_104:
                                    v61 = v24[17];
                                    if (v61 >> 30)
                                      v62 = 1;
                                    else
                                      v62 = (_DWORD)v61 == v27;
                                    if (!v62)
                                      goto LABEL_580;
                                    goto LABEL_109;
                                  }
LABEL_99:
                                  v59 = v24[16];
                                  if (v59 >> 30)
                                    v60 = 1;
                                  else
                                    v60 = (_DWORD)v59 == v27;
                                  if (!v60)
                                    goto LABEL_553;
                                  goto LABEL_104;
                                }
LABEL_94:
                                v57 = v24[15];
                                if (v57 >> 30)
                                  v58 = 1;
                                else
                                  v58 = (_DWORD)v57 == v27;
                                if (!v58)
                                  goto LABEL_526;
                                goto LABEL_99;
                              }
LABEL_89:
                              v55 = v24[14];
                              if (v55 >> 30)
                                v56 = 1;
                              else
                                v56 = (_DWORD)v55 == v27;
                              if (!v56)
                                goto LABEL_499;
                              goto LABEL_94;
                            }
LABEL_84:
                            v53 = v24[13];
                            if (v53 >> 30)
                              v54 = 1;
                            else
                              v54 = (_DWORD)v53 == v27;
                            if (!v54)
                              goto LABEL_472;
                            goto LABEL_89;
                          }
LABEL_79:
                          v51 = v24[12];
                          if (v51 >> 30)
                            v52 = 1;
                          else
                            v52 = (_DWORD)v51 == v27;
                          if (!v52)
                            goto LABEL_445;
                          goto LABEL_84;
                        }
LABEL_74:
                        v49 = v24[11];
                        if (v49 >> 30)
                          v50 = 1;
                        else
                          v50 = (_DWORD)v49 == v27;
                        if (!v50)
                          goto LABEL_418;
                        goto LABEL_79;
                      }
LABEL_69:
                      v47 = v24[10];
                      if (v47 >> 30)
                        v48 = 1;
                      else
                        v48 = (_DWORD)v47 == v27;
                      if (!v48)
                        goto LABEL_391;
                      goto LABEL_74;
                    }
LABEL_64:
                    v45 = v24[9];
                    if (v45 >> 30)
                      v46 = 1;
                    else
                      v46 = (_DWORD)v45 == v27;
                    if (!v46)
                      goto LABEL_364;
                    goto LABEL_69;
                  }
LABEL_59:
                  v43 = v24[8];
                  if (v43 >> 30)
                    v44 = 1;
                  else
                    v44 = (_DWORD)v43 == v27;
                  if (!v44)
                    goto LABEL_337;
                  goto LABEL_64;
                }
LABEL_54:
                v41 = v24[7];
                if (v41 >> 30)
                  v42 = 1;
                else
                  v42 = (_DWORD)v41 == v27;
                if (!v42)
                  goto LABEL_310;
                goto LABEL_59;
              }
LABEL_49:
              v39 = v24[6];
              if (v39 >> 30)
                v40 = 1;
              else
                v40 = (_DWORD)v39 == v27;
              if (!v40)
                goto LABEL_283;
              goto LABEL_54;
            }
LABEL_44:
            v37 = v24[5];
            if (v37 >> 30)
              v38 = 1;
            else
              v38 = (_DWORD)v37 == v27;
            if (!v38)
              goto LABEL_256;
            goto LABEL_49;
          }
LABEL_39:
          v35 = v24[4];
          if (v35 >> 30)
            v36 = 1;
          else
            v36 = (_DWORD)v35 == v27;
          if (!v36)
            goto LABEL_229;
          goto LABEL_44;
        }
LABEL_34:
        v33 = v24[3];
        if (v33 >> 30)
          v34 = 1;
        else
          v34 = (_DWORD)v33 == v27;
        if (!v34)
          goto LABEL_202;
        goto LABEL_39;
      }
    }
    v31 = v24[2];
    if (v31 >> 30)
      v32 = 1;
    else
      v32 = (_DWORD)v31 == v27;
    if (!v32)
      goto LABEL_175;
    goto LABEL_34;
  }
LABEL_4:
  if (a2)
    return 2;
  else
    return 1;
}

uint64_t sub_223E633F4(uint64_t result, uint64_t a2, uint64_t a3, float *a4, _QWORD *a5, double a6, double a7, float32x4_t a8, double a9, float32x4_t a10)
{
  float v10;
  int32x2_t v11;
  int v12;
  float32x4_t v13;
  int32x2_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned __int32 v18;
  __int32 v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  __int32 v28;
  int v29;
  unsigned int v30;
  __int32 v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t *v54;
  signed int v55;
  signed int v56;
  int v57;
  signed int v58;
  signed int v59;
  uint64_t v60;
  int32x2_t v61;
  int v62;
  unsigned __int32 v63;
  unsigned __int32 v64;
  unsigned __int32 v65;

  v10 = *(float *)(a3 + 144);
  v11 = *(int32x2_t *)a2;
  v12 = *(_DWORD *)(a2 + 8);
  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a2);
  a8.f32[2] = (float)v12;
  v13 = vmulq_n_f32(a8, v10);
  if (a4[3] >= v13.f32[0])
  {
    v15 = *(int32x2_t *)(a2 + 12);
    *(float32x2_t *)a10.f32 = vcvt_f32_s32(v15);
    a10.f32[2] = (float)*(int *)(a2 + 20);
    v16 = vmulq_n_f32(a10, v10);
    if (*a4 <= v16.f32[0] && a4[4] >= v13.f32[1] && a4[1] <= v16.f32[1] && a4[5] >= v13.f32[2] && a4[2] <= v16.f32[2])
    {
      if ((_DWORD)result)
      {
        v17 = (result - 1);
        v61 = *(int32x2_t *)a2;
        v18 = vsub_s32(v15, v11).u32[0] >> 1;
        v62 = v12;
        v63 = v18 + v61.i32[0];
        v64 = v18 + v11.i32[1];
        v65 = v18 + v12;
        sub_223E633F4(v17, &v61);
        v19 = *(_DWORD *)(a2 + 4);
        v20 = *(_DWORD *)(a2 + 8);
        v21 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v61.i32[0] = *(_DWORD *)a2;
        v61.i32[1] = v19;
        v62 = v20 + v21;
        v63 = v21 + v61.i32[0];
        v64 = v19 + v21;
        v65 = v20 + v21 + v21;
        sub_223E633F4(v17, &v61);
        v22 = *(_DWORD *)(a2 + 8);
        v23 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v24 = v23 + *(_DWORD *)(a2 + 4);
        v61.i32[0] = *(_DWORD *)a2;
        v61.i32[1] = v24;
        v62 = v22;
        v63 = v23 + v61.i32[0];
        v64 = v24 + v23;
        v65 = v22 + v23;
        sub_223E633F4(v17, &v61);
        v25 = *(_DWORD *)(a2 + 8);
        v26 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v27 = v26 + *(_DWORD *)(a2 + 4);
        v61.i32[0] = *(_DWORD *)a2;
        v61.i32[1] = v27;
        v62 = v25 + v26;
        v63 = v26 + v61.i32[0];
        v64 = v27 + v26;
        v65 = v25 + v26 + v26;
        sub_223E633F4(v17, &v61);
        v28 = *(_DWORD *)(a2 + 4);
        v29 = *(_DWORD *)(a2 + 8);
        v30 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v61.i32[0] = v30 + *(_DWORD *)a2;
        v61.i32[1] = v28;
        v62 = v29;
        v63 = v61.i32[0] + v30;
        v64 = v28 + v30;
        v65 = v29 + v30;
        sub_223E633F4(v17, &v61);
        v31 = *(_DWORD *)(a2 + 4);
        v32 = *(_DWORD *)(a2 + 8);
        v33 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v61.i32[0] = v33 + *(_DWORD *)a2;
        v61.i32[1] = v31;
        v62 = v32 + v33;
        v63 = v61.i32[0] + v33;
        v64 = v31 + v33;
        v65 = v32 + v33 + v33;
        sub_223E633F4(v17, &v61);
        v34 = *(_DWORD *)(a2 + 8);
        v35 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v36 = v35 + *(_DWORD *)(a2 + 4);
        v61.i32[0] = v35 + *(_DWORD *)a2;
        v61.i32[1] = v36;
        v62 = v34;
        v63 = v61.i32[0] + v35;
        v64 = v36 + v35;
        v65 = v34 + v35;
        sub_223E633F4(v17, &v61);
        v37 = *(_DWORD *)(a2 + 8);
        v38 = (*(_DWORD *)(a2 + 12) - *(_DWORD *)a2) >> 1;
        v39 = v38 + *(_DWORD *)(a2 + 4);
        v61.i32[0] = v38 + *(_DWORD *)a2;
        v61.i32[1] = v39;
        v62 = v37 + v38;
        v63 = v61.i32[0] + v38;
        v64 = v39 + v38;
        v65 = v37 + v38 + v38;
        return sub_223E633F4(v17, &v61);
      }
      v40 = *(unsigned int *)(a5[1]
                            + 4
                            * (*(_QWORD *)a2 & 7 | (8 * (HIDWORD(*(_QWORD *)a2) & 7)) & 0xFFFFFE3F | ((*(_DWORD *)(a2 + 8) & 7u) << 6)));
      if (!(v40 >> 30) && (_DWORD)v40 != *(_DWORD *)(*a5 + 272))
      {
        v42 = *(_QWORD *)(a5[2] + 8);
        v43 = v40 & 0xFFFFFFFFCFFFFFFFLL;
        v44 = *(_QWORD *)(*(_QWORD *)(v42 + 8) + 2448);
        v45 = (unsigned int *)(v44 + 520 * (v40 & 0xFFFFFFFFCFFFFFFFLL) + 508);
        v46 = *v45;
        if ((_DWORD)v46)
        {
          v47 = 0;
          v48 = 0;
          v49 = **(_QWORD **)(v42 + 16);
          v50 = v44 + 520 * v43;
          v51 = v50 + 364;
          v52 = v50 + 340;
          while (1)
          {
            v53 = (unsigned int *)(v51 + 12 * v47);
            v54 = *(uint64_t **)(v49 + 2512);
            if (v54)
              break;
LABEL_32:
            result = *(unsigned __int16 *)(v52 + 2 * v47);
            *(_WORD *)(v52 + 2 * v48) = result;
            if (v47 != v48)
            {
              result = *(_QWORD *)v53;
              v60 = v51 + 12 * v48;
              *(_DWORD *)(v60 + 8) = v53[2];
              *(_QWORD *)v60 = result;
            }
            ++v48;
LABEL_16:
            if (++v47 == v46)
              goto LABEL_35;
          }
          result = *v53;
          v55 = v53[1];
          v56 = v53[2];
          while (1)
          {
            v57 = *((_DWORD *)v54 + 7);
            if ((_DWORD)result == v57)
            {
              v58 = *((_DWORD *)v54 + 8);
              if (v55 == v58)
              {
                v59 = *((_DWORD *)v54 + 9);
                if (v56 < v59)
                  goto LABEL_20;
                if (v59 >= v56)
                  goto LABEL_16;
              }
              else
              {
                if (v55 < v58)
                  goto LABEL_20;
                if (v58 >= v55)
                  goto LABEL_16;
              }
            }
            else
            {
              if ((int)result < v57)
                goto LABEL_20;
              if (v57 >= (int)result)
                goto LABEL_16;
            }
            ++v54;
LABEL_20:
            v54 = (uint64_t *)*v54;
            if (!v54)
              goto LABEL_32;
          }
        }
        v48 = 0;
LABEL_35:
        *v45 = v48;
      }
    }
  }
  return result;
}

uint64_t **sub_223E638C8(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  BOOL v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  BOOL v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unsigned int *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  BOOL v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int *v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t *v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  BOOL v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t *v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  BOOL v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  BOOL v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t *v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  BOOL v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t *v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  BOOL v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unsigned int *v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t *v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  BOOL v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unsigned int *v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t *v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  BOOL v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unsigned int *v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t *v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  BOOL v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t *v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  BOOL v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unsigned int *v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t *v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  BOOL v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int *v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t *v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unsigned int *v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t *v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  BOOL v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unsigned int *v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t *v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  BOOL v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unsigned int *v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t *v726;
  int v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  BOOL v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unsigned int *v739;
  uint64_t v740;
  uint64_t v741;
  unsigned int v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t *v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  BOOL v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unsigned int *v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t *v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  BOOL v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  unsigned int *v783;
  uint64_t v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t *v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  BOOL v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  unsigned int *v805;
  uint64_t v806;
  uint64_t v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t *v813;
  uint64_t *v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  BOOL v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unsigned int *v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t *v835;
  uint64_t *v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  BOOL v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  unsigned int *v849;
  uint64_t v850;
  uint64_t v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t *v857;
  uint64_t *v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  BOOL v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unsigned int *v871;
  uint64_t v872;
  uint64_t v873;
  unsigned int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t *v879;
  uint64_t *v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  BOOL v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unsigned int *v893;
  uint64_t v894;
  uint64_t v895;
  unsigned int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  uint64_t *v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  BOOL v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unsigned int *v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t *v923;
  uint64_t *v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  BOOL v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unsigned int *v937;
  uint64_t v938;
  uint64_t v939;
  unsigned int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t *v945;
  uint64_t *v946;
  int v947;
  int v948;
  int v949;
  int v950;
  int v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  BOOL v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unsigned int *v959;
  uint64_t v960;
  uint64_t v961;
  unsigned int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t *v967;
  uint64_t *v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  BOOL v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unsigned int *v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t *v989;
  uint64_t *v990;
  int v991;
  int v992;
  int v993;
  int v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  BOOL v999;
  uint64_t v1000;
  unint64_t v1001;
  uint64_t v1002;
  unsigned int *v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  int v1013;
  int v1014;
  int v1015;
  int v1016;
  int v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  BOOL v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  unsigned int *v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t *v1033;
  uint64_t *v1034;
  int v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  BOOL v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  unsigned int *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unsigned int v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t *v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  int v1062;
  uint64_t v1063;
  uint64_t v1064;
  BOOL v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  unsigned int *v1069;
  uint64_t v1070;
  uint64_t v1071;
  unsigned int v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t *v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  int v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  BOOL v1087;
  uint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unsigned int *v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t *v1099;
  uint64_t *v1100;
  int v1101;
  int v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  BOOL v1109;
  uint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unsigned int *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unsigned int v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t *v1121;
  uint64_t *v1122;
  int v1123;
  int v1124;
  int v1125;
  int v1126;
  int v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  BOOL v1131;
  uint64_t v1132;
  unint64_t v1133;
  uint64_t v1134;
  unsigned int *v1135;
  uint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  uint64_t *v1144;
  int v1145;
  int v1146;
  int v1147;
  int v1148;
  int v1149;
  int v1150;
  uint64_t v1151;
  uint64_t v1152;
  BOOL v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  unsigned int *v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t *v1166;
  int v1167;
  int v1168;
  int v1169;
  int v1170;
  int v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  BOOL v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unsigned int *v1179;
  uint64_t v1180;
  uint64_t v1181;
  unsigned int v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t *v1187;
  uint64_t *v1188;
  int v1189;
  int v1190;
  int v1191;
  int v1192;
  int v1193;
  int v1194;
  uint64_t v1195;
  uint64_t v1196;
  BOOL v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  unsigned int *v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t *v1209;
  uint64_t *v1210;
  int v1211;
  int v1212;
  int v1213;
  int v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  uint64_t v1218;
  BOOL v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  unsigned int *v1223;
  uint64_t v1224;
  uint64_t v1225;
  unsigned int v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t *v1231;
  uint64_t *v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  uint64_t v1239;
  uint64_t v1240;
  BOOL v1241;
  uint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  unsigned int *v1245;
  uint64_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t *v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  uint64_t v1261;
  uint64_t v1262;
  BOOL v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  unsigned int *v1267;
  uint64_t v1268;
  uint64_t v1269;
  unsigned int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t *v1275;
  uint64_t *v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  int v1282;
  uint64_t v1283;
  uint64_t v1284;
  BOOL v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  unsigned int *v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t *v1297;
  uint64_t *v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  int v1303;
  int v1304;
  uint64_t v1305;
  uint64_t v1306;
  BOOL v1307;
  uint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  unsigned int v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t *v1319;
  uint64_t *v1320;
  int v1321;
  int v1322;
  int v1323;
  int v1324;
  int v1325;
  int v1326;
  uint64_t v1327;
  uint64_t v1328;
  BOOL v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unsigned int *v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t *v1341;
  uint64_t *v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  BOOL v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  unsigned int *v1355;
  uint64_t v1356;
  uint64_t v1357;
  unsigned int v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t *v1363;
  uint64_t *v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int v1370;
  uint64_t v1371;
  uint64_t v1372;
  BOOL v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  unsigned int *v1377;
  uint64_t v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t *v1385;
  uint64_t *v1386;
  int v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  int v1392;
  uint64_t v1393;
  uint64_t v1394;
  BOOL v1395;
  uint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unsigned int *v1399;
  uint64_t v1400;
  uint64_t v1401;
  unsigned int v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t *v1407;
  uint64_t *v1408;
  int v1409;
  int v1410;
  int v1411;
  int v1412;
  int v1413;
  int v1414;
  uint64_t v1415;
  uint64_t v1416;
  BOOL v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  unsigned int *v1421;
  uint64_t v1422;
  uint64_t v1423;
  unsigned int v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t *v1429;
  uint64_t *v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  uint64_t v1437;
  uint64_t v1438;
  BOOL v1439;
  uint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  unsigned int *v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t *v1451;
  uint64_t *v1452;
  int v1453;
  int v1454;
  int v1455;
  int v1456;
  int v1457;
  int v1458;
  uint64_t v1459;
  uint64_t v1460;
  BOOL v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unsigned int *v1465;
  uint64_t v1466;
  uint64_t v1467;
  unsigned int v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t *v1473;
  uint64_t *v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  BOOL v1483;
  uint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  unsigned int *v1487;
  uint64_t v1488;
  uint64_t v1489;
  unsigned int v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t *v1495;
  uint64_t *v1496;
  int v1497;
  int v1498;
  int v1499;
  int v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  BOOL v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unsigned int *v1509;
  uint64_t v1510;
  uint64_t v1511;
  unsigned int v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t *v1517;
  uint64_t *v1518;
  int v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  uint64_t v1525;
  uint64_t v1526;
  BOOL v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  unsigned int *v1531;
  uint64_t v1532;
  uint64_t v1533;
  unsigned int v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t *v1539;
  uint64_t *v1540;
  int v1541;
  int v1542;
  int v1543;
  int v1544;
  int v1545;
  int v1546;
  uint64_t v1547;
  uint64_t v1548;
  BOOL v1549;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  unsigned int *v1553;
  uint64_t v1554;
  uint64_t v1555;
  unsigned int v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t *v1561;
  uint64_t *v1562;
  int v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  int v1568;
  uint64_t v1569;
  uint64_t v1570;
  BOOL v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  unsigned int *v1575;
  uint64_t v1576;
  uint64_t v1577;
  unsigned int v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t *v1583;
  uint64_t *v1584;
  int v1585;
  int v1586;
  int v1587;
  int v1588;
  int v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  BOOL v1593;
  uint64_t v1594;
  unint64_t v1595;
  uint64_t v1596;
  unsigned int *v1597;
  uint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t *v1605;
  uint64_t *v1606;
  int v1607;
  int v1608;
  int v1609;
  int v1610;
  int v1611;
  int v1612;
  uint64_t v1613;
  uint64_t v1614;
  BOOL v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unsigned int *v1619;
  uint64_t v1620;
  uint64_t v1621;
  unsigned int v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t *v1627;
  uint64_t *v1628;
  int v1629;
  int v1630;
  int v1631;
  int v1632;
  int v1633;
  int v1634;
  uint64_t v1635;
  uint64_t v1636;
  BOOL v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unsigned int *v1641;
  uint64_t v1642;
  uint64_t v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t *v1649;
  uint64_t *v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  uint64_t v1657;
  uint64_t v1658;
  BOOL v1659;
  uint64_t v1660;
  unint64_t v1661;
  uint64_t v1662;
  unsigned int *v1663;
  uint64_t v1664;
  uint64_t v1665;
  unsigned int v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t *v1671;
  uint64_t *v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  uint64_t v1679;
  uint64_t v1680;
  BOOL v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  unsigned int *v1685;
  uint64_t v1686;
  uint64_t v1687;
  unsigned int v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t *v1693;
  uint64_t *v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  int v1699;
  int v1700;
  uint64_t v1701;
  uint64_t v1702;
  BOOL v1703;
  uint64_t v1704;
  unint64_t v1705;
  uint64_t v1706;
  unsigned int *v1707;
  uint64_t v1708;
  uint64_t v1709;
  unsigned int v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t *v1715;
  uint64_t *v1716;
  int v1717;
  int v1718;
  int v1719;
  int v1720;
  int v1721;
  int v1722;
  uint64_t v1723;
  uint64_t v1724;
  BOOL v1725;
  uint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  unsigned int *v1729;
  uint64_t v1730;
  uint64_t v1731;
  unsigned int v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  int v1739;
  int v1740;
  int v1741;
  int v1742;
  int v1743;
  int v1744;
  uint64_t v1745;
  uint64_t v1746;
  BOOL v1747;
  uint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unsigned int *v1751;
  uint64_t v1752;
  uint64_t v1753;
  unsigned int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t *v1759;
  uint64_t *v1760;
  int v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  int v1766;
  uint64_t v1767;
  uint64_t v1768;
  BOOL v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  unsigned int *v1773;
  uint64_t v1774;
  uint64_t v1775;
  unsigned int v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t *v1781;
  uint64_t *v1782;
  int v1783;
  int v1784;
  int v1785;
  int v1786;
  int v1787;
  int v1788;
  uint64_t v1789;
  uint64_t v1790;
  BOOL v1791;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  unsigned int *v1795;
  uint64_t v1796;
  uint64_t v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t *v1803;
  uint64_t *v1804;
  int v1805;
  int v1806;
  int v1807;
  int v1808;
  int v1809;
  int v1810;
  uint64_t v1811;
  uint64_t v1812;
  BOOL v1813;
  uint64_t v1814;
  unint64_t v1815;
  uint64_t v1816;
  unsigned int *v1817;
  uint64_t v1818;
  uint64_t v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t *v1825;
  uint64_t *v1826;
  int v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  int v1832;
  uint64_t v1833;
  uint64_t v1834;
  BOOL v1835;
  uint64_t v1836;
  unint64_t v1837;
  uint64_t v1838;
  unsigned int *v1839;
  uint64_t v1840;
  uint64_t v1841;
  unsigned int v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t *v1847;
  uint64_t *v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  uint64_t v1855;
  uint64_t v1856;
  BOOL v1857;
  uint64_t v1858;
  unint64_t v1859;
  uint64_t v1860;
  unsigned int *v1861;
  uint64_t v1862;
  uint64_t v1863;
  unsigned int v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  uint64_t *v1870;
  int v1871;
  int v1872;
  int v1873;
  int v1874;
  int v1875;
  int v1876;
  uint64_t v1877;
  uint64_t v1878;
  BOOL v1879;
  uint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  unsigned int *v1883;
  uint64_t v1884;
  uint64_t v1885;
  unsigned int v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t *v1891;
  uint64_t *v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  int v1897;
  int v1898;
  uint64_t v1899;
  uint64_t v1900;
  BOOL v1901;
  uint64_t v1902;
  unint64_t v1903;
  uint64_t v1904;
  unsigned int *v1905;
  uint64_t v1906;
  uint64_t v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t *v1913;
  uint64_t *v1914;
  int v1915;
  int v1916;
  int v1917;
  int v1918;
  int v1919;
  int v1920;
  uint64_t v1921;
  uint64_t v1922;
  BOOL v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unsigned int *v1927;
  uint64_t v1928;
  uint64_t v1929;
  unsigned int v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t *v1935;
  uint64_t *v1936;
  int v1937;
  int v1938;
  int v1939;
  int v1940;
  int v1941;
  int v1942;
  uint64_t v1943;
  uint64_t v1944;
  BOOL v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  unsigned int *v1949;
  uint64_t v1950;
  uint64_t v1951;
  unsigned int v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t *v1957;
  uint64_t *v1958;
  int v1959;
  int v1960;
  int v1961;
  int v1962;
  int v1963;
  int v1964;
  uint64_t v1965;
  uint64_t v1966;
  BOOL v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  unsigned int *v1971;
  uint64_t v1972;
  uint64_t v1973;
  unsigned int v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t *v1979;
  uint64_t *v1980;
  int v1981;
  int v1982;
  int v1983;
  int v1984;
  int v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  BOOL v1989;
  uint64_t v1990;
  unint64_t v1991;
  uint64_t v1992;
  unsigned int *v1993;
  uint64_t v1994;
  uint64_t v1995;
  unsigned int v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t *v2001;
  uint64_t *v2002;
  int v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  int v2008;
  uint64_t v2009;
  uint64_t v2010;
  BOOL v2011;
  uint64_t v2012;
  unint64_t v2013;
  uint64_t v2014;
  unsigned int *v2015;
  uint64_t v2016;
  uint64_t v2017;
  unsigned int v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t *v2023;
  uint64_t *v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  int v2030;
  uint64_t v2031;
  uint64_t v2032;
  BOOL v2033;
  uint64_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  unsigned int *v2037;
  uint64_t v2038;
  uint64_t v2039;
  unsigned int v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t *v2045;
  uint64_t *v2046;
  int v2047;
  int v2048;
  int v2049;
  int v2050;
  int v2051;
  int v2052;
  uint64_t v2053;
  uint64_t v2054;
  BOOL v2055;
  uint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  unsigned int *v2059;
  uint64_t v2060;
  uint64_t v2061;
  unsigned int v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t *v2067;
  uint64_t *v2068;
  int v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  int v2074;
  uint64_t v2075;
  uint64_t v2076;
  BOOL v2077;
  uint64_t v2078;
  unint64_t v2079;
  uint64_t v2080;
  unsigned int *v2081;
  uint64_t v2082;
  uint64_t v2083;
  unsigned int v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t *v2089;
  uint64_t *v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  int v2096;
  uint64_t v2097;
  uint64_t v2098;
  BOOL v2099;
  uint64_t v2100;
  unint64_t v2101;
  uint64_t v2102;
  unsigned int *v2103;
  uint64_t v2104;
  uint64_t v2105;
  unsigned int v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t *v2111;
  uint64_t *v2112;
  int v2113;
  int v2114;
  int v2115;
  int v2116;
  int v2117;
  int v2118;
  uint64_t v2119;
  uint64_t v2120;
  BOOL v2121;
  uint64_t v2122;
  unint64_t v2123;
  uint64_t v2124;
  unsigned int *v2125;
  uint64_t v2126;
  uint64_t v2127;
  unsigned int v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t *v2133;
  uint64_t *v2134;
  int v2135;
  int v2136;
  int v2137;
  int v2138;
  int v2139;
  int v2140;
  uint64_t v2141;
  uint64_t v2142;
  BOOL v2143;
  uint64_t v2144;
  unint64_t v2145;
  uint64_t v2146;
  unsigned int *v2147;
  uint64_t v2148;
  uint64_t v2149;
  unsigned int v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t *v2155;
  uint64_t *v2156;
  int v2157;
  int v2158;
  int v2159;
  int v2160;
  int v2161;
  int v2162;
  uint64_t v2163;
  uint64_t v2164;
  BOOL v2165;
  uint64_t v2166;
  unint64_t v2167;
  uint64_t v2168;
  unsigned int *v2169;
  uint64_t v2170;
  uint64_t v2171;
  unsigned int v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t *v2177;
  uint64_t *v2178;
  int v2179;
  int v2180;
  int v2181;
  int v2182;
  int v2183;
  int v2184;
  uint64_t v2185;
  uint64_t v2186;
  BOOL v2187;
  uint64_t v2188;
  unint64_t v2189;
  uint64_t v2190;
  unsigned int *v2191;
  uint64_t v2192;
  uint64_t v2193;
  unsigned int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t *v2199;
  uint64_t *v2200;
  int v2201;
  int v2202;
  int v2203;
  int v2204;
  int v2205;
  int v2206;
  uint64_t v2207;
  uint64_t v2208;
  BOOL v2209;
  uint64_t v2210;
  unint64_t v2211;
  uint64_t v2212;
  unsigned int *v2213;
  uint64_t v2214;
  uint64_t v2215;
  unsigned int v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t *v2221;
  uint64_t *v2222;
  int v2223;
  int v2224;
  int v2225;
  int v2226;
  int v2227;
  int v2228;
  uint64_t v2229;
  uint64_t v2230;
  BOOL v2231;
  uint64_t v2232;
  unint64_t v2233;
  uint64_t v2234;
  unsigned int *v2235;
  uint64_t v2236;
  uint64_t v2237;
  unsigned int v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t *v2243;
  uint64_t *v2244;
  int v2245;
  int v2246;
  int v2247;
  int v2248;
  int v2249;
  int v2250;
  uint64_t v2251;
  uint64_t v2252;
  BOOL v2253;
  uint64_t v2254;
  unint64_t v2255;
  uint64_t v2256;
  unsigned int *v2257;
  uint64_t v2258;
  uint64_t v2259;
  unsigned int v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t *v2265;
  uint64_t *v2266;
  int v2267;
  int v2268;
  int v2269;
  int v2270;
  int v2271;
  int v2272;
  uint64_t v2273;
  uint64_t v2274;
  BOOL v2275;
  uint64_t v2276;
  unint64_t v2277;
  uint64_t v2278;
  unsigned int *v2279;
  uint64_t v2280;
  uint64_t v2281;
  unsigned int v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t *v2287;
  uint64_t *v2288;
  int v2289;
  int v2290;
  int v2291;
  int v2292;
  int v2293;
  int v2294;
  uint64_t v2295;
  uint64_t v2296;
  BOOL v2297;
  uint64_t v2298;
  unint64_t v2299;
  uint64_t v2300;
  unsigned int *v2301;
  uint64_t v2302;
  uint64_t v2303;
  unsigned int v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t *v2309;
  uint64_t *v2310;
  int v2311;
  int v2312;
  int v2313;
  int v2314;
  int v2315;
  int v2316;
  uint64_t v2317;
  uint64_t v2318;
  BOOL v2319;
  uint64_t v2320;
  unint64_t v2321;
  uint64_t v2322;
  unsigned int *v2323;
  uint64_t v2324;
  uint64_t v2325;
  unsigned int v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t *v2331;
  uint64_t *v2332;
  int v2333;
  int v2334;
  int v2335;
  int v2336;
  int v2337;
  int v2338;
  uint64_t v2339;
  uint64_t v2340;
  BOOL v2341;
  uint64_t v2342;
  unint64_t v2343;
  uint64_t v2344;
  unsigned int *v2345;
  uint64_t v2346;
  uint64_t v2347;
  unsigned int v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t *v2353;
  uint64_t *v2354;
  int v2355;
  int v2356;
  int v2357;
  int v2358;
  int v2359;
  int v2360;
  uint64_t v2361;
  uint64_t v2362;
  BOOL v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  unsigned int *v2367;
  uint64_t v2368;
  uint64_t v2369;
  unsigned int v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t *v2375;
  uint64_t *v2376;
  int v2377;
  int v2378;
  int v2379;
  int v2380;
  int v2381;
  int v2382;
  uint64_t v2383;
  uint64_t v2384;
  BOOL v2385;
  uint64_t v2386;
  unint64_t v2387;
  uint64_t v2388;
  unsigned int *v2389;
  uint64_t v2390;
  uint64_t v2391;
  unsigned int v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t *v2397;
  uint64_t *v2398;
  int v2399;
  int v2400;
  int v2401;
  int v2402;
  int v2403;
  int v2404;
  uint64_t v2405;
  uint64_t v2406;
  BOOL v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  unsigned int *v2411;
  uint64_t v2412;
  uint64_t v2413;
  unsigned int v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t *v2419;
  uint64_t *v2420;
  int v2421;
  int v2422;
  int v2423;
  int v2424;
  int v2425;
  int v2426;
  uint64_t v2427;
  uint64_t v2428;
  BOOL v2429;
  uint64_t v2430;
  unint64_t v2431;
  uint64_t v2432;
  unsigned int *v2433;
  uint64_t v2434;
  uint64_t v2435;
  unsigned int v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t *v2441;
  uint64_t *v2442;
  int v2443;
  int v2444;
  int v2445;
  int v2446;
  int v2447;
  int v2448;
  uint64_t v2449;
  uint64_t v2450;
  BOOL v2451;
  uint64_t v2452;
  unint64_t v2453;
  uint64_t v2454;
  unsigned int *v2455;
  uint64_t v2456;
  uint64_t v2457;
  unsigned int v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t *v2463;
  uint64_t *v2464;
  int v2465;
  int v2466;
  int v2467;
  int v2468;
  int v2469;
  int v2470;
  uint64_t v2471;
  uint64_t v2472;
  BOOL v2473;
  uint64_t v2474;
  unint64_t v2475;
  uint64_t v2476;
  unsigned int *v2477;
  uint64_t v2478;
  uint64_t v2479;
  unsigned int v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t *v2485;
  uint64_t *v2486;
  int v2487;
  int v2488;
  int v2489;
  int v2490;
  int v2491;
  int v2492;
  uint64_t v2493;
  uint64_t v2494;
  BOOL v2495;
  uint64_t v2496;
  unint64_t v2497;
  uint64_t v2498;
  unsigned int *v2499;
  uint64_t v2500;
  uint64_t v2501;
  unsigned int v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t *v2507;
  uint64_t *v2508;
  int v2509;
  int v2510;
  int v2511;
  int v2512;
  int v2513;
  int v2514;
  uint64_t v2515;
  uint64_t v2516;
  BOOL v2517;
  uint64_t v2518;
  unint64_t v2519;
  uint64_t v2520;
  unsigned int *v2521;
  uint64_t v2522;
  uint64_t v2523;
  unsigned int v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t *v2529;
  uint64_t *v2530;
  int v2531;
  int v2532;
  int v2533;
  int v2534;
  int v2535;
  int v2536;
  uint64_t v2537;
  uint64_t v2538;
  BOOL v2539;
  uint64_t v2540;
  unint64_t v2541;
  uint64_t v2542;
  unsigned int *v2543;
  uint64_t v2544;
  uint64_t v2545;
  unsigned int v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t *v2551;
  uint64_t *v2552;
  int v2553;
  int v2554;
  int v2555;
  int v2556;
  int v2557;
  int v2558;
  uint64_t v2559;
  uint64_t v2560;
  BOOL v2561;
  uint64_t v2562;
  unint64_t v2563;
  uint64_t v2564;
  unsigned int *v2565;
  uint64_t v2566;
  uint64_t v2567;
  unsigned int v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t *v2573;
  uint64_t *v2574;
  int v2575;
  int v2576;
  int v2577;
  int v2578;
  int v2579;
  int v2580;
  uint64_t v2581;
  uint64_t v2582;
  BOOL v2583;
  uint64_t v2584;
  unint64_t v2585;
  uint64_t v2586;
  unsigned int *v2587;
  uint64_t v2588;
  uint64_t v2589;
  unsigned int v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  int v2597;
  int v2598;
  int v2599;
  int v2600;
  int v2601;
  int v2602;
  uint64_t v2603;
  uint64_t v2604;
  BOOL v2605;
  uint64_t v2606;
  unint64_t v2607;
  uint64_t v2608;
  unsigned int *v2609;
  uint64_t v2610;
  uint64_t v2611;
  unsigned int v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t *v2617;
  uint64_t *v2618;
  int v2619;
  int v2620;
  int v2621;
  int v2622;
  int v2623;
  int v2624;
  uint64_t v2625;
  uint64_t v2626;
  BOOL v2627;
  uint64_t v2628;
  unint64_t v2629;
  uint64_t v2630;
  unsigned int *v2631;
  uint64_t v2632;
  uint64_t v2633;
  unsigned int v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t *v2639;
  uint64_t *v2640;
  int v2641;
  int v2642;
  int v2643;
  int v2644;
  int v2645;
  int v2646;
  uint64_t v2647;
  uint64_t v2648;
  BOOL v2649;
  uint64_t v2650;
  unint64_t v2651;
  uint64_t v2652;
  unsigned int *v2653;
  uint64_t v2654;
  uint64_t v2655;
  unsigned int v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t *v2661;
  uint64_t *v2662;
  int v2663;
  int v2664;
  int v2665;
  int v2666;
  int v2667;
  int v2668;
  uint64_t v2669;
  uint64_t v2670;
  BOOL v2671;
  uint64_t v2672;
  unint64_t v2673;
  uint64_t v2674;
  unsigned int *v2675;
  uint64_t v2676;
  uint64_t v2677;
  unsigned int v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2682;
  uint64_t *v2683;
  uint64_t *v2684;
  int v2685;
  int v2686;
  int v2687;
  int v2688;
  int v2689;
  int v2690;
  uint64_t v2691;
  uint64_t v2692;
  BOOL v2693;
  uint64_t v2694;
  unint64_t v2695;
  uint64_t v2696;
  unsigned int *v2697;
  uint64_t v2698;
  uint64_t v2699;
  unsigned int v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t *v2705;
  uint64_t *v2706;
  int v2707;
  int v2708;
  int v2709;
  int v2710;
  int v2711;
  int v2712;
  uint64_t v2713;
  uint64_t v2714;
  BOOL v2715;
  uint64_t v2716;
  unint64_t v2717;
  uint64_t v2718;
  unsigned int *v2719;
  uint64_t v2720;
  uint64_t v2721;
  unsigned int v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t *v2727;
  uint64_t *v2728;
  int v2729;
  int v2730;
  int v2731;
  int v2732;
  int v2733;
  int v2734;
  uint64_t v2735;
  uint64_t v2736;
  BOOL v2737;
  uint64_t v2738;
  unint64_t v2739;
  uint64_t v2740;
  unsigned int *v2741;
  uint64_t v2742;
  uint64_t v2743;
  unsigned int v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t *v2749;
  uint64_t *v2750;
  int v2751;
  int v2752;
  int v2753;
  int v2754;
  int v2755;
  int v2756;
  uint64_t v2757;
  uint64_t v2758;
  BOOL v2759;
  uint64_t v2760;
  unint64_t v2761;
  uint64_t v2762;
  unsigned int *v2763;
  uint64_t v2764;
  uint64_t v2765;
  unsigned int v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t *v2771;
  uint64_t *v2772;
  int v2773;
  int v2774;
  int v2775;
  int v2776;
  int v2777;
  int v2778;
  uint64_t v2779;
  uint64_t v2780;
  BOOL v2781;
  uint64_t v2782;
  unint64_t v2783;
  uint64_t v2784;
  unsigned int *v2785;
  uint64_t v2786;
  uint64_t v2787;
  unsigned int v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t *v2793;
  uint64_t *v2794;
  int v2795;
  int v2796;
  int v2797;
  int v2798;
  int v2799;
  int v2800;
  uint64_t v2801;
  uint64_t v2802;
  BOOL v2803;
  uint64_t v2804;
  unint64_t v2805;
  uint64_t v2806;
  unsigned int *v2807;
  uint64_t v2808;
  uint64_t v2809;
  unsigned int v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  uint64_t v2814;
  uint64_t *v2815;
  uint64_t *v2816;
  int v2817;
  int v2818;
  int v2819;
  int v2820;
  int v2821;
  int v2822;
  uint64_t v2823;
  uint64_t v2824;
  BOOL v2825;
  uint64_t v2826;
  unint64_t v2827;
  uint64_t v2828;
  unsigned int *v2829;
  uint64_t v2830;
  uint64_t v2831;
  unsigned int v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t *v2837;
  uint64_t *v2838;
  int v2839;
  int v2840;
  int v2841;
  int v2842;
  int v2843;
  int v2844;
  uint64_t v2845;
  uint64_t v2846;
  BOOL v2847;
  uint64_t v2848;
  unint64_t v2849;
  uint64_t v2850;
  unsigned int *v2851;
  uint64_t v2852;
  uint64_t v2853;
  unsigned int v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t *v2859;
  uint64_t *v2860;
  int v2861;
  int v2862;
  int v2863;
  int v2864;
  int v2865;
  int v2866;
  uint64_t v2867;
  uint64_t v2868;
  BOOL v2869;
  uint64_t v2870;
  unint64_t v2871;
  uint64_t v2872;
  unsigned int *v2873;
  uint64_t v2874;
  uint64_t v2875;
  unsigned int v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t *v2881;
  uint64_t *v2882;
  int v2883;
  int v2884;
  int v2885;
  int v2886;
  int v2887;
  int v2888;
  uint64_t v2889;
  uint64_t v2890;
  BOOL v2891;
  uint64_t v2892;
  unint64_t v2893;
  uint64_t v2894;
  unsigned int *v2895;
  uint64_t v2896;
  uint64_t v2897;
  unsigned int v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t *v2903;
  uint64_t *v2904;
  int v2905;
  int v2906;
  int v2907;
  int v2908;
  int v2909;
  int v2910;
  uint64_t v2911;
  uint64_t v2912;
  BOOL v2913;
  uint64_t v2914;
  unint64_t v2915;
  uint64_t v2916;
  unsigned int *v2917;
  uint64_t v2918;
  uint64_t v2919;
  unsigned int v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t *v2925;
  uint64_t *v2926;
  int v2927;
  int v2928;
  int v2929;
  int v2930;
  int v2931;
  int v2932;
  uint64_t v2933;
  uint64_t v2934;
  BOOL v2935;
  uint64_t v2936;
  unint64_t v2937;
  uint64_t v2938;
  unsigned int *v2939;
  uint64_t v2940;
  uint64_t v2941;
  unsigned int v2942;
  uint64_t v2943;
  uint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  uint64_t *v2947;
  uint64_t *v2948;
  int v2949;
  int v2950;
  int v2951;
  int v2952;
  int v2953;
  int v2954;
  uint64_t v2955;
  uint64_t v2956;

  v1 = *result;
  v2 = **result;
  v3 = (unsigned int *)(*result)[1];
  v4 = v3[20];
  v5 = *(_DWORD *)(v2 + 272);
  if (v4 >> 30)
    v6 = 1;
  else
    v6 = (_DWORD)v4 == v5;
  if (v6)
  {
    v7 = v3[21];
    if (v7 >> 30)
      v8 = 1;
    else
      v8 = (_DWORD)v7 == v5;
    if (!v8)
      goto LABEL_644;
LABEL_11:
    v9 = v3[22];
    if (v9 >> 30)
      v10 = 1;
    else
      v10 = (_DWORD)v9 == v5;
    if (!v10)
      goto LABEL_671;
LABEL_16:
    v11 = v3[23];
    if (v11 >> 30)
      v12 = 1;
    else
      v12 = (_DWORD)v11 == v5;
    if (!v12)
      goto LABEL_698;
LABEL_21:
    v13 = v3[24];
    if (v13 >> 30)
      v14 = 1;
    else
      v14 = (_DWORD)v13 == v5;
    if (!v14)
      goto LABEL_725;
LABEL_26:
    v15 = v3[25];
    if (v15 >> 30)
      v16 = 1;
    else
      v16 = (_DWORD)v15 == v5;
    if (!v16)
      goto LABEL_752;
LABEL_31:
    v17 = v3[26];
    if (v17 >> 30)
      v18 = 1;
    else
      v18 = (_DWORD)v17 == v5;
    if (!v18)
      goto LABEL_779;
LABEL_36:
    v19 = v3[27];
    if (v19 >> 30)
      v20 = 1;
    else
      v20 = (_DWORD)v19 == v5;
    if (!v20)
      goto LABEL_806;
LABEL_41:
    v21 = v3[28];
    if (v21 >> 30)
      v22 = 1;
    else
      v22 = (_DWORD)v21 == v5;
    if (!v22)
      goto LABEL_833;
LABEL_46:
    v23 = v3[29];
    if (v23 >> 30)
      v24 = 1;
    else
      v24 = (_DWORD)v23 == v5;
    if (!v24)
      goto LABEL_860;
LABEL_51:
    v25 = v3[30];
    if (v25 >> 30)
      v26 = 1;
    else
      v26 = (_DWORD)v25 == v5;
    if (!v26)
      goto LABEL_887;
LABEL_56:
    v27 = v3[31];
    if (v27 >> 30)
      v28 = 1;
    else
      v28 = (_DWORD)v27 == v5;
    if (!v28)
      goto LABEL_914;
LABEL_61:
    v29 = v3[32];
    if (v29 >> 30)
      v30 = 1;
    else
      v30 = (_DWORD)v29 == v5;
    if (!v30)
      goto LABEL_941;
LABEL_66:
    v31 = v3[33];
    if (v31 >> 30)
      v32 = 1;
    else
      v32 = (_DWORD)v31 == v5;
    if (!v32)
      goto LABEL_968;
LABEL_71:
    v33 = v3[34];
    if (v33 >> 30)
      v34 = 1;
    else
      v34 = (_DWORD)v33 == v5;
    if (!v34)
      goto LABEL_995;
LABEL_76:
    v35 = v3[35];
    if (v35 >> 30)
      v36 = 1;
    else
      v36 = (_DWORD)v35 == v5;
    if (!v36)
      goto LABEL_1022;
LABEL_81:
    v37 = v3[36];
    if (v37 >> 30)
      v38 = 1;
    else
      v38 = (_DWORD)v37 == v5;
    if (!v38)
      goto LABEL_1049;
LABEL_86:
    v39 = v3[37];
    if (v39 >> 30)
      v40 = 1;
    else
      v40 = (_DWORD)v39 == v5;
    if (!v40)
      goto LABEL_1076;
LABEL_91:
    v41 = v3[38];
    if (v41 >> 30)
      v42 = 1;
    else
      v42 = (_DWORD)v41 == v5;
    if (!v42)
      goto LABEL_1103;
LABEL_96:
    v43 = v3[39];
    if (v43 >> 30)
      v44 = 1;
    else
      v44 = (_DWORD)v43 == v5;
    if (!v44)
      goto LABEL_1130;
LABEL_101:
    v45 = v3[40];
    if (v45 >> 30)
      v46 = 1;
    else
      v46 = (_DWORD)v45 == v5;
    if (!v46)
      goto LABEL_1157;
LABEL_106:
    v47 = v3[41];
    if (v47 >> 30)
      v48 = 1;
    else
      v48 = (_DWORD)v47 == v5;
    if (!v48)
      goto LABEL_1184;
LABEL_111:
    v49 = v3[42];
    if (v49 >> 30)
      v50 = 1;
    else
      v50 = (_DWORD)v49 == v5;
    if (!v50)
      goto LABEL_1211;
LABEL_116:
    v51 = v3[43];
    if (v51 >> 30)
      v52 = 1;
    else
      v52 = (_DWORD)v51 == v5;
    if (!v52)
      goto LABEL_1238;
LABEL_121:
    v53 = v3[44];
    if (v53 >> 30)
      v54 = 1;
    else
      v54 = (_DWORD)v53 == v5;
    if (!v54)
      goto LABEL_1265;
LABEL_126:
    v55 = v3[45];
    if (v55 >> 30)
      v56 = 1;
    else
      v56 = (_DWORD)v55 == v5;
    if (!v56)
      goto LABEL_1292;
LABEL_131:
    v57 = v3[46];
    if (v57 >> 30)
      v58 = 1;
    else
      v58 = (_DWORD)v57 == v5;
    if (!v58)
      goto LABEL_1319;
LABEL_136:
    v59 = v3[47];
    if (v59 >> 30)
      v60 = 1;
    else
      v60 = (_DWORD)v59 == v5;
    if (!v60)
      goto LABEL_1346;
LABEL_141:
    v61 = v3[48];
    if (v61 >> 30)
      v62 = 1;
    else
      v62 = (_DWORD)v61 == v5;
    if (!v62)
      goto LABEL_1373;
LABEL_146:
    v63 = v3[49];
    if (v63 >> 30)
      v64 = 1;
    else
      v64 = (_DWORD)v63 == v5;
    if (!v64)
      goto LABEL_1400;
LABEL_151:
    v65 = v3[50];
    if (v65 >> 30)
      v66 = 1;
    else
      v66 = (_DWORD)v65 == v5;
    if (!v66)
      goto LABEL_1427;
LABEL_156:
    v67 = v3[51];
    if (v67 >> 30)
      v68 = 1;
    else
      v68 = (_DWORD)v67 == v5;
    if (!v68)
      goto LABEL_1454;
LABEL_161:
    v69 = v3[52];
    if (v69 >> 30)
      v70 = 1;
    else
      v70 = (_DWORD)v69 == v5;
    if (!v70)
      goto LABEL_1481;
LABEL_166:
    v71 = v3[53];
    if (v71 >> 30)
      v72 = 1;
    else
      v72 = (_DWORD)v71 == v5;
    if (!v72)
      goto LABEL_1508;
LABEL_171:
    v73 = v3[54];
    if (v73 >> 30)
      v74 = 1;
    else
      v74 = (_DWORD)v73 == v5;
    if (!v74)
      goto LABEL_1535;
LABEL_176:
    v75 = v3[55];
    if (v75 >> 30)
      v76 = 1;
    else
      v76 = (_DWORD)v75 == v5;
    if (!v76)
      goto LABEL_1562;
LABEL_181:
    v77 = v3[56];
    if (v77 >> 30)
      v78 = 1;
    else
      v78 = (_DWORD)v77 == v5;
    if (!v78)
      goto LABEL_1589;
LABEL_186:
    v79 = v3[57];
    if (v79 >> 30)
      v80 = 1;
    else
      v80 = (_DWORD)v79 == v5;
    if (!v80)
      goto LABEL_1616;
LABEL_191:
    v81 = v3[58];
    if (v81 >> 30)
      v82 = 1;
    else
      v82 = (_DWORD)v81 == v5;
    if (!v82)
      goto LABEL_1643;
LABEL_196:
    v83 = v3[59];
    if (v83 >> 30)
      v84 = 1;
    else
      v84 = (_DWORD)v83 == v5;
    if (!v84)
      goto LABEL_1670;
LABEL_201:
    v85 = v3[60];
    if (v85 >> 30)
      v86 = 1;
    else
      v86 = (_DWORD)v85 == v5;
    if (!v86)
      goto LABEL_1697;
LABEL_206:
    v87 = v3[61];
    if (v87 >> 30)
      v88 = 1;
    else
      v88 = (_DWORD)v87 == v5;
    if (!v88)
      goto LABEL_1724;
LABEL_211:
    v89 = v3[62];
    if (v89 >> 30)
      v90 = 1;
    else
      v90 = (_DWORD)v89 == v5;
    if (!v90)
      goto LABEL_1751;
LABEL_216:
    v91 = v3[63];
    if (v91 >> 30)
      v92 = 1;
    else
      v92 = (_DWORD)v91 == v5;
    if (!v92)
      goto LABEL_1778;
LABEL_221:
    v93 = v3[64];
    if (v93 >> 30)
      v94 = 1;
    else
      v94 = (_DWORD)v93 == v5;
    if (!v94)
      goto LABEL_1805;
LABEL_226:
    v95 = v3[65];
    if (v95 >> 30)
      v96 = 1;
    else
      v96 = (_DWORD)v95 == v5;
    if (!v96)
      goto LABEL_1832;
LABEL_231:
    v97 = v3[66];
    if (v97 >> 30)
      v98 = 1;
    else
      v98 = (_DWORD)v97 == v5;
    if (!v98)
      goto LABEL_1859;
LABEL_236:
    v99 = v3[67];
    if (v99 >> 30)
      v100 = 1;
    else
      v100 = (_DWORD)v99 == v5;
    if (!v100)
      goto LABEL_1886;
LABEL_241:
    v101 = v3[68];
    if (v101 >> 30)
      v102 = 1;
    else
      v102 = (_DWORD)v101 == v5;
    if (!v102)
      goto LABEL_1913;
LABEL_246:
    v103 = v3[69];
    if (v103 >> 30)
      v104 = 1;
    else
      v104 = (_DWORD)v103 == v5;
    if (!v104)
      goto LABEL_1940;
LABEL_251:
    v105 = v3[70];
    if (v105 >> 30)
      v106 = 1;
    else
      v106 = (_DWORD)v105 == v5;
    if (!v106)
      goto LABEL_1967;
LABEL_256:
    v107 = v3[71];
    if (v107 >> 30)
      v108 = 1;
    else
      v108 = (_DWORD)v107 == v5;
    if (!v108)
      goto LABEL_1993;
LABEL_261:
    v109 = v3[72];
    if (v109 >> 30)
      v110 = 1;
    else
      v110 = (_DWORD)v109 == v5;
    if (!v110)
      goto LABEL_2019;
LABEL_266:
    v111 = v3[73];
    if (v111 >> 30)
      v112 = 1;
    else
      v112 = (_DWORD)v111 == v5;
    if (!v112)
      goto LABEL_2045;
LABEL_271:
    v113 = v3[74];
    if (v113 >> 30)
      v114 = 1;
    else
      v114 = (_DWORD)v113 == v5;
    if (!v114)
      goto LABEL_2071;
LABEL_276:
    v115 = v3[75];
    if (v115 >> 30)
      v116 = 1;
    else
      v116 = (_DWORD)v115 == v5;
    if (!v116)
      goto LABEL_2097;
LABEL_281:
    v117 = v3[76];
    if (v117 >> 30)
      v118 = 1;
    else
      v118 = (_DWORD)v117 == v5;
    if (!v118)
      goto LABEL_2123;
LABEL_286:
    v119 = v3[77];
    if (v119 >> 30)
      v120 = 1;
    else
      v120 = (_DWORD)v119 == v5;
    if (!v120)
      goto LABEL_2149;
LABEL_291:
    v121 = v3[78];
    if (v121 >> 30)
      v122 = 1;
    else
      v122 = (_DWORD)v121 == v5;
    if (!v122)
      goto LABEL_2175;
LABEL_296:
    v123 = v3[79];
    if (v123 >> 30)
      v124 = 1;
    else
      v124 = (_DWORD)v123 == v5;
    if (!v124)
      goto LABEL_2201;
LABEL_301:
    v125 = v3[80];
    if (v125 >> 30)
      v126 = 1;
    else
      v126 = (_DWORD)v125 == v5;
    if (!v126)
      goto LABEL_2227;
LABEL_306:
    v127 = v3[81];
    if (v127 >> 30)
      v128 = 1;
    else
      v128 = (_DWORD)v127 == v5;
    if (!v128)
      goto LABEL_2253;
LABEL_311:
    v129 = v3[82];
    if (v129 >> 30)
      v130 = 1;
    else
      v130 = (_DWORD)v129 == v5;
    if (!v130)
      goto LABEL_2279;
LABEL_316:
    v131 = v3[83];
    if (v131 >> 30)
      v132 = 1;
    else
      v132 = (_DWORD)v131 == v5;
    if (!v132)
      goto LABEL_2305;
LABEL_321:
    v133 = v3[84];
    if (v133 >> 30)
      v134 = 1;
    else
      v134 = (_DWORD)v133 == v5;
    if (!v134)
      goto LABEL_2331;
LABEL_326:
    v135 = v3[85];
    if (v135 >> 30)
      v136 = 1;
    else
      v136 = (_DWORD)v135 == v5;
    if (!v136)
      goto LABEL_2357;
LABEL_331:
    v137 = v3[86];
    if (v137 >> 30)
      v138 = 1;
    else
      v138 = (_DWORD)v137 == v5;
    if (!v138)
      goto LABEL_2383;
LABEL_336:
    v139 = v3[87];
    if (v139 >> 30)
      v140 = 1;
    else
      v140 = (_DWORD)v139 == v5;
    if (!v140)
      goto LABEL_2409;
LABEL_341:
    v141 = v3[88];
    if (v141 >> 30)
      v142 = 1;
    else
      v142 = (_DWORD)v141 == v5;
    if (!v142)
      goto LABEL_2435;
LABEL_346:
    v143 = v3[89];
    if (v143 >> 30)
      v144 = 1;
    else
      v144 = (_DWORD)v143 == v5;
    if (!v144)
      goto LABEL_2461;
LABEL_351:
    v145 = v3[90];
    if (v145 >> 30)
      v146 = 1;
    else
      v146 = (_DWORD)v145 == v5;
    if (!v146)
      goto LABEL_2487;
LABEL_356:
    v147 = v3[91];
    if (v147 >> 30)
      v148 = 1;
    else
      v148 = (_DWORD)v147 == v5;
    if (!v148)
      goto LABEL_2513;
LABEL_361:
    v149 = v3[92];
    if (v149 >> 30)
      v150 = 1;
    else
      v150 = (_DWORD)v149 == v5;
    if (!v150)
      goto LABEL_2539;
LABEL_366:
    v151 = v3[93];
    if (v151 >> 30)
      v152 = 1;
    else
      v152 = (_DWORD)v151 == v5;
    if (!v152)
      goto LABEL_2565;
LABEL_371:
    v153 = v3[94];
    if (v153 >> 30)
      v154 = 1;
    else
      v154 = (_DWORD)v153 == v5;
    if (!v154)
      goto LABEL_2591;
LABEL_376:
    v155 = v3[95];
    if (v155 >> 30)
      v156 = 1;
    else
      v156 = (_DWORD)v155 == v5;
    if (!v156)
      goto LABEL_2617;
LABEL_381:
    v157 = v3[96];
    if (v157 >> 30)
      v158 = 1;
    else
      v158 = (_DWORD)v157 == v5;
    if (!v158)
      goto LABEL_2643;
LABEL_386:
    v159 = v3[97];
    if (v159 >> 30)
      v160 = 1;
    else
      v160 = (_DWORD)v159 == v5;
    if (!v160)
      goto LABEL_2669;
LABEL_391:
    v161 = v3[98];
    if (v161 >> 30)
      v162 = 1;
    else
      v162 = (_DWORD)v161 == v5;
    if (!v162)
      goto LABEL_2695;
LABEL_396:
    v163 = v3[99];
    if (v163 >> 30)
      v164 = 1;
    else
      v164 = (_DWORD)v163 == v5;
    if (!v164)
      goto LABEL_2721;
LABEL_401:
    v165 = v3[100];
    if (v165 >> 30)
      v166 = 1;
    else
      v166 = (_DWORD)v165 == v5;
    if (!v166)
      goto LABEL_2747;
LABEL_406:
    v167 = v3[101];
    if (v167 >> 30)
      v168 = 1;
    else
      v168 = (_DWORD)v167 == v5;
    if (!v168)
      goto LABEL_2773;
LABEL_411:
    v169 = v3[102];
    if (v169 >> 30)
      v170 = 1;
    else
      v170 = (_DWORD)v169 == v5;
    if (!v170)
      goto LABEL_2799;
LABEL_416:
    v171 = v3[103];
    if (v171 >> 30)
      v172 = 1;
    else
      v172 = (_DWORD)v171 == v5;
    if (!v172)
      goto LABEL_2825;
LABEL_421:
    v173 = v3[104];
    if (v173 >> 30)
      v174 = 1;
    else
      v174 = (_DWORD)v173 == v5;
    if (!v174)
      goto LABEL_2851;
LABEL_426:
    v175 = v3[105];
    if (v175 >> 30)
      v176 = 1;
    else
      v176 = (_DWORD)v175 == v5;
    if (!v176)
      goto LABEL_2877;
LABEL_431:
    v177 = v3[106];
    if (v177 >> 30)
      v178 = 1;
    else
      v178 = (_DWORD)v177 == v5;
    if (!v178)
      goto LABEL_2903;
LABEL_436:
    v179 = v3[107];
    if (v179 >> 30)
      v180 = 1;
    else
      v180 = (_DWORD)v179 == v5;
    if (!v180)
      goto LABEL_2929;
LABEL_441:
    v181 = v3[108];
    if (v181 >> 30)
      v182 = 1;
    else
      v182 = (_DWORD)v181 == v5;
    if (!v182)
      goto LABEL_2955;
LABEL_446:
    v183 = v3[109];
    if (v183 >> 30)
      v184 = 1;
    else
      v184 = (_DWORD)v183 == v5;
    if (!v184)
      goto LABEL_2981;
LABEL_451:
    v185 = v3[110];
    if (v185 >> 30)
      v186 = 1;
    else
      v186 = (_DWORD)v185 == v5;
    if (!v186)
      goto LABEL_3007;
LABEL_456:
    v187 = v3[111];
    if (v187 >> 30)
      v188 = 1;
    else
      v188 = (_DWORD)v187 == v5;
    if (!v188)
      goto LABEL_3033;
LABEL_461:
    v189 = v3[112];
    if (v189 >> 30)
      v190 = 1;
    else
      v190 = (_DWORD)v189 == v5;
    if (!v190)
      goto LABEL_3059;
LABEL_466:
    v191 = v3[113];
    if (v191 >> 30)
      v192 = 1;
    else
      v192 = (_DWORD)v191 == v5;
    if (!v192)
      goto LABEL_3085;
LABEL_471:
    v193 = v3[114];
    if (v193 >> 30)
      v194 = 1;
    else
      v194 = (_DWORD)v193 == v5;
    if (!v194)
      goto LABEL_3111;
LABEL_476:
    v195 = v3[115];
    if (v195 >> 30)
      v196 = 1;
    else
      v196 = (_DWORD)v195 == v5;
    if (!v196)
      goto LABEL_3137;
LABEL_481:
    v197 = v3[116];
    if (v197 >> 30)
      v198 = 1;
    else
      v198 = (_DWORD)v197 == v5;
    if (!v198)
      goto LABEL_3163;
LABEL_486:
    v199 = v3[117];
    if (v199 >> 30)
      v200 = 1;
    else
      v200 = (_DWORD)v199 == v5;
    if (!v200)
      goto LABEL_3189;
LABEL_491:
    v201 = v3[118];
    if (v201 >> 30)
      v202 = 1;
    else
      v202 = (_DWORD)v201 == v5;
    if (!v202)
      goto LABEL_3215;
LABEL_496:
    v203 = v3[119];
    if (v203 >> 30)
      v204 = 1;
    else
      v204 = (_DWORD)v203 == v5;
    if (!v204)
      goto LABEL_3241;
LABEL_501:
    v205 = v3[120];
    if (v205 >> 30)
      v206 = 1;
    else
      v206 = (_DWORD)v205 == v5;
    if (!v206)
      goto LABEL_3267;
LABEL_506:
    v207 = v3[121];
    if (v207 >> 30)
      v208 = 1;
    else
      v208 = (_DWORD)v207 == v5;
    if (!v208)
      goto LABEL_3293;
LABEL_511:
    v209 = v3[122];
    if (v209 >> 30)
      v210 = 1;
    else
      v210 = (_DWORD)v209 == v5;
    if (!v210)
      goto LABEL_3319;
LABEL_516:
    v211 = v3[123];
    if (v211 >> 30)
      v212 = 1;
    else
      v212 = (_DWORD)v211 == v5;
    if (!v212)
      goto LABEL_3345;
LABEL_521:
    v213 = v3[124];
    if (v213 >> 30)
      v214 = 1;
    else
      v214 = (_DWORD)v213 == v5;
    if (!v214)
      goto LABEL_3371;
LABEL_526:
    v215 = v3[125];
    if (v215 >> 30)
      v216 = 1;
    else
      v216 = (_DWORD)v215 == v5;
    if (!v216)
      goto LABEL_3397;
LABEL_531:
    v217 = v3[126];
    if (v217 >> 30)
      v218 = 1;
    else
      v218 = (_DWORD)v217 == v5;
    if (!v218)
      goto LABEL_3423;
LABEL_536:
    v219 = v3[127];
    if (v219 >> 30)
      v220 = 1;
    else
      v220 = (_DWORD)v219 == v5;
    if (!v220)
      goto LABEL_3449;
LABEL_541:
    v221 = v3[128];
    if (v221 >> 30)
      v222 = 1;
    else
      v222 = (_DWORD)v221 == v5;
    if (!v222)
      goto LABEL_3475;
LABEL_546:
    v223 = v3[129];
    if (v223 >> 30)
      v224 = 1;
    else
      v224 = (_DWORD)v223 == v5;
    if (!v224)
      goto LABEL_3501;
LABEL_551:
    v225 = v3[130];
    if (v225 >> 30)
      v226 = 1;
    else
      v226 = (_DWORD)v225 == v5;
    if (!v226)
      goto LABEL_3527;
LABEL_556:
    v227 = v3[131];
    if (v227 >> 30)
      v228 = 1;
    else
      v228 = (_DWORD)v227 == v5;
    if (!v228)
      goto LABEL_3553;
LABEL_561:
    v229 = v3[132];
    if (v229 >> 30)
      v230 = 1;
    else
      v230 = (_DWORD)v229 == v5;
    if (!v230)
      goto LABEL_3579;
LABEL_566:
    v231 = v3[133];
    if (v231 >> 30)
      v232 = 1;
    else
      v232 = (_DWORD)v231 == v5;
    if (!v232)
      goto LABEL_3605;
LABEL_571:
    v233 = v3[134];
    if (v233 >> 30)
      v234 = 1;
    else
      v234 = (_DWORD)v233 == v5;
    if (!v234)
      goto LABEL_3631;
LABEL_576:
    v235 = v3[135];
    if (v235 >> 30)
      v236 = 1;
    else
      v236 = (_DWORD)v235 == v5;
    if (!v236)
      goto LABEL_3657;
LABEL_581:
    v237 = v3[136];
    if (v237 >> 30)
      v238 = 1;
    else
      v238 = (_DWORD)v237 == v5;
    if (!v238)
      goto LABEL_3683;
LABEL_586:
    v239 = v3[137];
    if (v239 >> 30)
      v240 = 1;
    else
      v240 = (_DWORD)v239 == v5;
    if (!v240)
      goto LABEL_3709;
LABEL_591:
    v241 = v3[138];
    if (v241 >> 30)
      v242 = 1;
    else
      v242 = (_DWORD)v241 == v5;
    if (!v242)
      goto LABEL_3735;
LABEL_596:
    v243 = v3[139];
    if (v243 >> 30)
      v244 = 1;
    else
      v244 = (_DWORD)v243 == v5;
    if (!v244)
      goto LABEL_3761;
LABEL_601:
    v245 = v3[140];
    if (v245 >> 30)
      v246 = 1;
    else
      v246 = (_DWORD)v245 == v5;
    if (!v246)
      goto LABEL_3787;
LABEL_606:
    v247 = v3[141];
    if (v247 >> 30)
      v248 = 1;
    else
      v248 = (_DWORD)v247 == v5;
    if (!v248)
      goto LABEL_3813;
    goto LABEL_611;
  }
  v252 = *(_QWORD *)(v1[2] + 8);
  v253 = v4 & 0xFFFFFFFFCFFFFFFFLL;
  v254 = *(_QWORD *)(*(_QWORD *)(v252 + 8) + 2448);
  v255 = (unsigned int *)(v254 + 520 * (v4 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v256 = *v255;
  if ((_DWORD)v256)
  {
    v257 = 0;
    v258 = 0;
    v259 = **(_QWORD **)(v252 + 16);
    v260 = v254 + 520 * v253;
    v261 = v260 + 364;
    v262 = v260 + 340;
    while (1)
    {
      v263 = (uint64_t *)(v261 + 12 * v257);
      v264 = *(uint64_t **)(v259 + 2512);
      if (v264)
        break;
LABEL_636:
      *(_WORD *)(v262 + 2 * v258) = *(_WORD *)(v262 + 2 * v257);
      if (v257 != v258)
      {
        v271 = *v263;
        v272 = v261 + 12 * v258;
        *(_DWORD *)(v272 + 8) = *((_DWORD *)v263 + 2);
        *(_QWORD *)v272 = v271;
      }
      ++v258;
LABEL_620:
      if (++v257 == v256)
      {
        v1 = *result;
        v2 = **result;
        v3 = (unsigned int *)(*result)[1];
        v5 = *(_DWORD *)(v2 + 272);
        goto LABEL_640;
      }
    }
    v265 = *(_DWORD *)v263;
    v266 = *((_DWORD *)v263 + 1);
    v267 = *((_DWORD *)v263 + 2);
    while (1)
    {
      v268 = *((_DWORD *)v264 + 7);
      if (v265 == v268)
      {
        v269 = *((_DWORD *)v264 + 8);
        if (v266 == v269)
        {
          v270 = *((_DWORD *)v264 + 9);
          if (v267 < v270)
            goto LABEL_624;
          if (v270 >= v267)
            goto LABEL_620;
        }
        else
        {
          if (v266 < v269)
            goto LABEL_624;
          if (v269 >= v266)
            goto LABEL_620;
        }
      }
      else
      {
        if (v265 < v268)
          goto LABEL_624;
        if (v268 >= v265)
          goto LABEL_620;
      }
      ++v264;
LABEL_624:
      v264 = (uint64_t *)*v264;
      if (!v264)
        goto LABEL_636;
    }
  }
  v258 = 0;
LABEL_640:
  *v255 = v258;
  v7 = v3[21];
  if (v7 >> 30)
    v273 = 1;
  else
    v273 = (_DWORD)v7 == v5;
  if (v273)
    goto LABEL_11;
LABEL_644:
  v274 = *(_QWORD *)(v1[2] + 8);
  v275 = v7 & 0xFFFFFFFFCFFFFFFFLL;
  v276 = *(_QWORD *)(*(_QWORD *)(v274 + 8) + 2448);
  v277 = (unsigned int *)(v276 + 520 * (v7 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v278 = *v277;
  if ((_DWORD)v278)
  {
    v279 = 0;
    v280 = 0;
    v281 = **(_QWORD **)(v274 + 16);
    v282 = v276 + 520 * v275;
    v283 = v282 + 364;
    v284 = v282 + 340;
    while (1)
    {
      v285 = (uint64_t *)(v283 + 12 * v279);
      v286 = *(uint64_t **)(v281 + 2512);
      if (v286)
        break;
LABEL_663:
      *(_WORD *)(v284 + 2 * v280) = *(_WORD *)(v284 + 2 * v279);
      if (v279 != v280)
      {
        v293 = *v285;
        v294 = v283 + 12 * v280;
        *(_DWORD *)(v294 + 8) = *((_DWORD *)v285 + 2);
        *(_QWORD *)v294 = v293;
      }
      ++v280;
LABEL_647:
      if (++v279 == v278)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_667;
      }
    }
    v287 = *(_DWORD *)v285;
    v288 = *((_DWORD *)v285 + 1);
    v289 = *((_DWORD *)v285 + 2);
    while (1)
    {
      v290 = *((_DWORD *)v286 + 7);
      if (v287 == v290)
      {
        v291 = *((_DWORD *)v286 + 8);
        if (v288 == v291)
        {
          v292 = *((_DWORD *)v286 + 9);
          if (v289 < v292)
            goto LABEL_651;
          if (v292 >= v289)
            goto LABEL_647;
        }
        else
        {
          if (v288 < v291)
            goto LABEL_651;
          if (v291 >= v288)
            goto LABEL_647;
        }
      }
      else
      {
        if (v287 < v290)
          goto LABEL_651;
        if (v290 >= v287)
          goto LABEL_647;
      }
      ++v286;
LABEL_651:
      v286 = (uint64_t *)*v286;
      if (!v286)
        goto LABEL_663;
    }
  }
  v280 = 0;
LABEL_667:
  *v277 = v280;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v9 = v3[22];
  if (v9 >> 30)
    v295 = 1;
  else
    v295 = (_DWORD)v9 == v5;
  if (v295)
    goto LABEL_16;
LABEL_671:
  v296 = *(_QWORD *)(v1[2] + 8);
  v297 = v9 & 0xFFFFFFFFCFFFFFFFLL;
  v298 = *(_QWORD *)(*(_QWORD *)(v296 + 8) + 2448);
  v299 = (unsigned int *)(v298 + 520 * (v9 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v300 = *v299;
  if ((_DWORD)v300)
  {
    v301 = 0;
    v302 = 0;
    v303 = **(_QWORD **)(v296 + 16);
    v304 = v298 + 520 * v297;
    v305 = v304 + 364;
    v306 = v304 + 340;
    while (1)
    {
      v307 = (uint64_t *)(v305 + 12 * v301);
      v308 = *(uint64_t **)(v303 + 2512);
      if (v308)
        break;
LABEL_690:
      *(_WORD *)(v306 + 2 * v302) = *(_WORD *)(v306 + 2 * v301);
      if (v301 != v302)
      {
        v315 = *v307;
        v316 = v305 + 12 * v302;
        *(_DWORD *)(v316 + 8) = *((_DWORD *)v307 + 2);
        *(_QWORD *)v316 = v315;
      }
      ++v302;
LABEL_674:
      if (++v301 == v300)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_694;
      }
    }
    v309 = *(_DWORD *)v307;
    v310 = *((_DWORD *)v307 + 1);
    v311 = *((_DWORD *)v307 + 2);
    while (1)
    {
      v312 = *((_DWORD *)v308 + 7);
      if (v309 == v312)
      {
        v313 = *((_DWORD *)v308 + 8);
        if (v310 == v313)
        {
          v314 = *((_DWORD *)v308 + 9);
          if (v311 < v314)
            goto LABEL_678;
          if (v314 >= v311)
            goto LABEL_674;
        }
        else
        {
          if (v310 < v313)
            goto LABEL_678;
          if (v313 >= v310)
            goto LABEL_674;
        }
      }
      else
      {
        if (v309 < v312)
          goto LABEL_678;
        if (v312 >= v309)
          goto LABEL_674;
      }
      ++v308;
LABEL_678:
      v308 = (uint64_t *)*v308;
      if (!v308)
        goto LABEL_690;
    }
  }
  v302 = 0;
LABEL_694:
  *v299 = v302;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v11 = v3[23];
  if (v11 >> 30)
    v317 = 1;
  else
    v317 = (_DWORD)v11 == v5;
  if (v317)
    goto LABEL_21;
LABEL_698:
  v318 = *(_QWORD *)(v1[2] + 8);
  v319 = v11 & 0xFFFFFFFFCFFFFFFFLL;
  v320 = *(_QWORD *)(*(_QWORD *)(v318 + 8) + 2448);
  v321 = (unsigned int *)(v320 + 520 * (v11 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v322 = *v321;
  if ((_DWORD)v322)
  {
    v323 = 0;
    v324 = 0;
    v325 = **(_QWORD **)(v318 + 16);
    v326 = v320 + 520 * v319;
    v327 = v326 + 364;
    v328 = v326 + 340;
    while (1)
    {
      v329 = (uint64_t *)(v327 + 12 * v323);
      v330 = *(uint64_t **)(v325 + 2512);
      if (v330)
        break;
LABEL_717:
      *(_WORD *)(v328 + 2 * v324) = *(_WORD *)(v328 + 2 * v323);
      if (v323 != v324)
      {
        v337 = *v329;
        v338 = v327 + 12 * v324;
        *(_DWORD *)(v338 + 8) = *((_DWORD *)v329 + 2);
        *(_QWORD *)v338 = v337;
      }
      ++v324;
LABEL_701:
      if (++v323 == v322)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_721;
      }
    }
    v331 = *(_DWORD *)v329;
    v332 = *((_DWORD *)v329 + 1);
    v333 = *((_DWORD *)v329 + 2);
    while (1)
    {
      v334 = *((_DWORD *)v330 + 7);
      if (v331 == v334)
      {
        v335 = *((_DWORD *)v330 + 8);
        if (v332 == v335)
        {
          v336 = *((_DWORD *)v330 + 9);
          if (v333 < v336)
            goto LABEL_705;
          if (v336 >= v333)
            goto LABEL_701;
        }
        else
        {
          if (v332 < v335)
            goto LABEL_705;
          if (v335 >= v332)
            goto LABEL_701;
        }
      }
      else
      {
        if (v331 < v334)
          goto LABEL_705;
        if (v334 >= v331)
          goto LABEL_701;
      }
      ++v330;
LABEL_705:
      v330 = (uint64_t *)*v330;
      if (!v330)
        goto LABEL_717;
    }
  }
  v324 = 0;
LABEL_721:
  *v321 = v324;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v13 = v3[24];
  if (v13 >> 30)
    v339 = 1;
  else
    v339 = (_DWORD)v13 == v5;
  if (v339)
    goto LABEL_26;
LABEL_725:
  v340 = *(_QWORD *)(v1[2] + 8);
  v341 = v13 & 0xFFFFFFFFCFFFFFFFLL;
  v342 = *(_QWORD *)(*(_QWORD *)(v340 + 8) + 2448);
  v343 = (unsigned int *)(v342 + 520 * (v13 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v344 = *v343;
  if ((_DWORD)v344)
  {
    v345 = 0;
    v346 = 0;
    v347 = **(_QWORD **)(v340 + 16);
    v348 = v342 + 520 * v341;
    v349 = v348 + 364;
    v350 = v348 + 340;
    while (1)
    {
      v351 = (uint64_t *)(v349 + 12 * v345);
      v352 = *(uint64_t **)(v347 + 2512);
      if (v352)
        break;
LABEL_744:
      *(_WORD *)(v350 + 2 * v346) = *(_WORD *)(v350 + 2 * v345);
      if (v345 != v346)
      {
        v359 = *v351;
        v360 = v349 + 12 * v346;
        *(_DWORD *)(v360 + 8) = *((_DWORD *)v351 + 2);
        *(_QWORD *)v360 = v359;
      }
      ++v346;
LABEL_728:
      if (++v345 == v344)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_748;
      }
    }
    v353 = *(_DWORD *)v351;
    v354 = *((_DWORD *)v351 + 1);
    v355 = *((_DWORD *)v351 + 2);
    while (1)
    {
      v356 = *((_DWORD *)v352 + 7);
      if (v353 == v356)
      {
        v357 = *((_DWORD *)v352 + 8);
        if (v354 == v357)
        {
          v358 = *((_DWORD *)v352 + 9);
          if (v355 < v358)
            goto LABEL_732;
          if (v358 >= v355)
            goto LABEL_728;
        }
        else
        {
          if (v354 < v357)
            goto LABEL_732;
          if (v357 >= v354)
            goto LABEL_728;
        }
      }
      else
      {
        if (v353 < v356)
          goto LABEL_732;
        if (v356 >= v353)
          goto LABEL_728;
      }
      ++v352;
LABEL_732:
      v352 = (uint64_t *)*v352;
      if (!v352)
        goto LABEL_744;
    }
  }
  v346 = 0;
LABEL_748:
  *v343 = v346;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v15 = v3[25];
  if (v15 >> 30)
    v361 = 1;
  else
    v361 = (_DWORD)v15 == v5;
  if (v361)
    goto LABEL_31;
LABEL_752:
  v362 = *(_QWORD *)(v1[2] + 8);
  v363 = v15 & 0xFFFFFFFFCFFFFFFFLL;
  v364 = *(_QWORD *)(*(_QWORD *)(v362 + 8) + 2448);
  v365 = (unsigned int *)(v364 + 520 * (v15 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v366 = *v365;
  if ((_DWORD)v366)
  {
    v367 = 0;
    v368 = 0;
    v369 = **(_QWORD **)(v362 + 16);
    v370 = v364 + 520 * v363;
    v371 = v370 + 364;
    v372 = v370 + 340;
    while (1)
    {
      v373 = (uint64_t *)(v371 + 12 * v367);
      v374 = *(uint64_t **)(v369 + 2512);
      if (v374)
        break;
LABEL_771:
      *(_WORD *)(v372 + 2 * v368) = *(_WORD *)(v372 + 2 * v367);
      if (v367 != v368)
      {
        v381 = *v373;
        v382 = v371 + 12 * v368;
        *(_DWORD *)(v382 + 8) = *((_DWORD *)v373 + 2);
        *(_QWORD *)v382 = v381;
      }
      ++v368;
LABEL_755:
      if (++v367 == v366)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_775;
      }
    }
    v375 = *(_DWORD *)v373;
    v376 = *((_DWORD *)v373 + 1);
    v377 = *((_DWORD *)v373 + 2);
    while (1)
    {
      v378 = *((_DWORD *)v374 + 7);
      if (v375 == v378)
      {
        v379 = *((_DWORD *)v374 + 8);
        if (v376 == v379)
        {
          v380 = *((_DWORD *)v374 + 9);
          if (v377 < v380)
            goto LABEL_759;
          if (v380 >= v377)
            goto LABEL_755;
        }
        else
        {
          if (v376 < v379)
            goto LABEL_759;
          if (v379 >= v376)
            goto LABEL_755;
        }
      }
      else
      {
        if (v375 < v378)
          goto LABEL_759;
        if (v378 >= v375)
          goto LABEL_755;
      }
      ++v374;
LABEL_759:
      v374 = (uint64_t *)*v374;
      if (!v374)
        goto LABEL_771;
    }
  }
  v368 = 0;
LABEL_775:
  *v365 = v368;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v17 = v3[26];
  if (v17 >> 30)
    v383 = 1;
  else
    v383 = (_DWORD)v17 == v5;
  if (v383)
    goto LABEL_36;
LABEL_779:
  v384 = *(_QWORD *)(v1[2] + 8);
  v385 = v17 & 0xFFFFFFFFCFFFFFFFLL;
  v386 = *(_QWORD *)(*(_QWORD *)(v384 + 8) + 2448);
  v387 = (unsigned int *)(v386 + 520 * (v17 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v388 = *v387;
  if ((_DWORD)v388)
  {
    v389 = 0;
    v390 = 0;
    v391 = **(_QWORD **)(v384 + 16);
    v392 = v386 + 520 * v385;
    v393 = v392 + 364;
    v394 = v392 + 340;
    while (1)
    {
      v395 = (uint64_t *)(v393 + 12 * v389);
      v396 = *(uint64_t **)(v391 + 2512);
      if (v396)
        break;
LABEL_798:
      *(_WORD *)(v394 + 2 * v390) = *(_WORD *)(v394 + 2 * v389);
      if (v389 != v390)
      {
        v403 = *v395;
        v404 = v393 + 12 * v390;
        *(_DWORD *)(v404 + 8) = *((_DWORD *)v395 + 2);
        *(_QWORD *)v404 = v403;
      }
      ++v390;
LABEL_782:
      if (++v389 == v388)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_802;
      }
    }
    v397 = *(_DWORD *)v395;
    v398 = *((_DWORD *)v395 + 1);
    v399 = *((_DWORD *)v395 + 2);
    while (1)
    {
      v400 = *((_DWORD *)v396 + 7);
      if (v397 == v400)
      {
        v401 = *((_DWORD *)v396 + 8);
        if (v398 == v401)
        {
          v402 = *((_DWORD *)v396 + 9);
          if (v399 < v402)
            goto LABEL_786;
          if (v402 >= v399)
            goto LABEL_782;
        }
        else
        {
          if (v398 < v401)
            goto LABEL_786;
          if (v401 >= v398)
            goto LABEL_782;
        }
      }
      else
      {
        if (v397 < v400)
          goto LABEL_786;
        if (v400 >= v397)
          goto LABEL_782;
      }
      ++v396;
LABEL_786:
      v396 = (uint64_t *)*v396;
      if (!v396)
        goto LABEL_798;
    }
  }
  v390 = 0;
LABEL_802:
  *v387 = v390;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v19 = v3[27];
  if (v19 >> 30)
    v405 = 1;
  else
    v405 = (_DWORD)v19 == v5;
  if (v405)
    goto LABEL_41;
LABEL_806:
  v406 = *(_QWORD *)(v1[2] + 8);
  v407 = v19 & 0xFFFFFFFFCFFFFFFFLL;
  v408 = *(_QWORD *)(*(_QWORD *)(v406 + 8) + 2448);
  v409 = (unsigned int *)(v408 + 520 * (v19 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v410 = *v409;
  if ((_DWORD)v410)
  {
    v411 = 0;
    v412 = 0;
    v413 = **(_QWORD **)(v406 + 16);
    v414 = v408 + 520 * v407;
    v415 = v414 + 364;
    v416 = v414 + 340;
    while (1)
    {
      v417 = (uint64_t *)(v415 + 12 * v411);
      v418 = *(uint64_t **)(v413 + 2512);
      if (v418)
        break;
LABEL_825:
      *(_WORD *)(v416 + 2 * v412) = *(_WORD *)(v416 + 2 * v411);
      if (v411 != v412)
      {
        v425 = *v417;
        v426 = v415 + 12 * v412;
        *(_DWORD *)(v426 + 8) = *((_DWORD *)v417 + 2);
        *(_QWORD *)v426 = v425;
      }
      ++v412;
LABEL_809:
      if (++v411 == v410)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_829;
      }
    }
    v419 = *(_DWORD *)v417;
    v420 = *((_DWORD *)v417 + 1);
    v421 = *((_DWORD *)v417 + 2);
    while (1)
    {
      v422 = *((_DWORD *)v418 + 7);
      if (v419 == v422)
      {
        v423 = *((_DWORD *)v418 + 8);
        if (v420 == v423)
        {
          v424 = *((_DWORD *)v418 + 9);
          if (v421 < v424)
            goto LABEL_813;
          if (v424 >= v421)
            goto LABEL_809;
        }
        else
        {
          if (v420 < v423)
            goto LABEL_813;
          if (v423 >= v420)
            goto LABEL_809;
        }
      }
      else
      {
        if (v419 < v422)
          goto LABEL_813;
        if (v422 >= v419)
          goto LABEL_809;
      }
      ++v418;
LABEL_813:
      v418 = (uint64_t *)*v418;
      if (!v418)
        goto LABEL_825;
    }
  }
  v412 = 0;
LABEL_829:
  *v409 = v412;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v21 = v3[28];
  if (v21 >> 30)
    v427 = 1;
  else
    v427 = (_DWORD)v21 == v5;
  if (v427)
    goto LABEL_46;
LABEL_833:
  v428 = *(_QWORD *)(v1[2] + 8);
  v429 = v21 & 0xFFFFFFFFCFFFFFFFLL;
  v430 = *(_QWORD *)(*(_QWORD *)(v428 + 8) + 2448);
  v431 = (unsigned int *)(v430 + 520 * (v21 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v432 = *v431;
  if ((_DWORD)v432)
  {
    v433 = 0;
    v434 = 0;
    v435 = **(_QWORD **)(v428 + 16);
    v436 = v430 + 520 * v429;
    v437 = v436 + 364;
    v438 = v436 + 340;
    while (1)
    {
      v439 = (uint64_t *)(v437 + 12 * v433);
      v440 = *(uint64_t **)(v435 + 2512);
      if (v440)
        break;
LABEL_852:
      *(_WORD *)(v438 + 2 * v434) = *(_WORD *)(v438 + 2 * v433);
      if (v433 != v434)
      {
        v447 = *v439;
        v448 = v437 + 12 * v434;
        *(_DWORD *)(v448 + 8) = *((_DWORD *)v439 + 2);
        *(_QWORD *)v448 = v447;
      }
      ++v434;
LABEL_836:
      if (++v433 == v432)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_856;
      }
    }
    v441 = *(_DWORD *)v439;
    v442 = *((_DWORD *)v439 + 1);
    v443 = *((_DWORD *)v439 + 2);
    while (1)
    {
      v444 = *((_DWORD *)v440 + 7);
      if (v441 == v444)
      {
        v445 = *((_DWORD *)v440 + 8);
        if (v442 == v445)
        {
          v446 = *((_DWORD *)v440 + 9);
          if (v443 < v446)
            goto LABEL_840;
          if (v446 >= v443)
            goto LABEL_836;
        }
        else
        {
          if (v442 < v445)
            goto LABEL_840;
          if (v445 >= v442)
            goto LABEL_836;
        }
      }
      else
      {
        if (v441 < v444)
          goto LABEL_840;
        if (v444 >= v441)
          goto LABEL_836;
      }
      ++v440;
LABEL_840:
      v440 = (uint64_t *)*v440;
      if (!v440)
        goto LABEL_852;
    }
  }
  v434 = 0;
LABEL_856:
  *v431 = v434;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v23 = v3[29];
  if (v23 >> 30)
    v449 = 1;
  else
    v449 = (_DWORD)v23 == v5;
  if (v449)
    goto LABEL_51;
LABEL_860:
  v450 = *(_QWORD *)(v1[2] + 8);
  v451 = v23 & 0xFFFFFFFFCFFFFFFFLL;
  v452 = *(_QWORD *)(*(_QWORD *)(v450 + 8) + 2448);
  v453 = (unsigned int *)(v452 + 520 * (v23 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v454 = *v453;
  if ((_DWORD)v454)
  {
    v455 = 0;
    v456 = 0;
    v457 = **(_QWORD **)(v450 + 16);
    v458 = v452 + 520 * v451;
    v459 = v458 + 364;
    v460 = v458 + 340;
    while (1)
    {
      v461 = (uint64_t *)(v459 + 12 * v455);
      v462 = *(uint64_t **)(v457 + 2512);
      if (v462)
        break;
LABEL_879:
      *(_WORD *)(v460 + 2 * v456) = *(_WORD *)(v460 + 2 * v455);
      if (v455 != v456)
      {
        v469 = *v461;
        v470 = v459 + 12 * v456;
        *(_DWORD *)(v470 + 8) = *((_DWORD *)v461 + 2);
        *(_QWORD *)v470 = v469;
      }
      ++v456;
LABEL_863:
      if (++v455 == v454)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_883;
      }
    }
    v463 = *(_DWORD *)v461;
    v464 = *((_DWORD *)v461 + 1);
    v465 = *((_DWORD *)v461 + 2);
    while (1)
    {
      v466 = *((_DWORD *)v462 + 7);
      if (v463 == v466)
      {
        v467 = *((_DWORD *)v462 + 8);
        if (v464 == v467)
        {
          v468 = *((_DWORD *)v462 + 9);
          if (v465 < v468)
            goto LABEL_867;
          if (v468 >= v465)
            goto LABEL_863;
        }
        else
        {
          if (v464 < v467)
            goto LABEL_867;
          if (v467 >= v464)
            goto LABEL_863;
        }
      }
      else
      {
        if (v463 < v466)
          goto LABEL_867;
        if (v466 >= v463)
          goto LABEL_863;
      }
      ++v462;
LABEL_867:
      v462 = (uint64_t *)*v462;
      if (!v462)
        goto LABEL_879;
    }
  }
  v456 = 0;
LABEL_883:
  *v453 = v456;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v25 = v3[30];
  if (v25 >> 30)
    v471 = 1;
  else
    v471 = (_DWORD)v25 == v5;
  if (v471)
    goto LABEL_56;
LABEL_887:
  v472 = *(_QWORD *)(v1[2] + 8);
  v473 = v25 & 0xFFFFFFFFCFFFFFFFLL;
  v474 = *(_QWORD *)(*(_QWORD *)(v472 + 8) + 2448);
  v475 = (unsigned int *)(v474 + 520 * (v25 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v476 = *v475;
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = 0;
    v479 = **(_QWORD **)(v472 + 16);
    v480 = v474 + 520 * v473;
    v481 = v480 + 364;
    v482 = v480 + 340;
    while (1)
    {
      v483 = (uint64_t *)(v481 + 12 * v477);
      v484 = *(uint64_t **)(v479 + 2512);
      if (v484)
        break;
LABEL_906:
      *(_WORD *)(v482 + 2 * v478) = *(_WORD *)(v482 + 2 * v477);
      if (v477 != v478)
      {
        v491 = *v483;
        v492 = v481 + 12 * v478;
        *(_DWORD *)(v492 + 8) = *((_DWORD *)v483 + 2);
        *(_QWORD *)v492 = v491;
      }
      ++v478;
LABEL_890:
      if (++v477 == v476)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_910;
      }
    }
    v485 = *(_DWORD *)v483;
    v486 = *((_DWORD *)v483 + 1);
    v487 = *((_DWORD *)v483 + 2);
    while (1)
    {
      v488 = *((_DWORD *)v484 + 7);
      if (v485 == v488)
      {
        v489 = *((_DWORD *)v484 + 8);
        if (v486 == v489)
        {
          v490 = *((_DWORD *)v484 + 9);
          if (v487 < v490)
            goto LABEL_894;
          if (v490 >= v487)
            goto LABEL_890;
        }
        else
        {
          if (v486 < v489)
            goto LABEL_894;
          if (v489 >= v486)
            goto LABEL_890;
        }
      }
      else
      {
        if (v485 < v488)
          goto LABEL_894;
        if (v488 >= v485)
          goto LABEL_890;
      }
      ++v484;
LABEL_894:
      v484 = (uint64_t *)*v484;
      if (!v484)
        goto LABEL_906;
    }
  }
  v478 = 0;
LABEL_910:
  *v475 = v478;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v27 = v3[31];
  if (v27 >> 30)
    v493 = 1;
  else
    v493 = (_DWORD)v27 == v5;
  if (v493)
    goto LABEL_61;
LABEL_914:
  v494 = *(_QWORD *)(v1[2] + 8);
  v495 = v27 & 0xFFFFFFFFCFFFFFFFLL;
  v496 = *(_QWORD *)(*(_QWORD *)(v494 + 8) + 2448);
  v497 = (unsigned int *)(v496 + 520 * (v27 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v498 = *v497;
  if ((_DWORD)v498)
  {
    v499 = 0;
    v500 = 0;
    v501 = **(_QWORD **)(v494 + 16);
    v502 = v496 + 520 * v495;
    v503 = v502 + 364;
    v504 = v502 + 340;
    while (1)
    {
      v505 = (uint64_t *)(v503 + 12 * v499);
      v506 = *(uint64_t **)(v501 + 2512);
      if (v506)
        break;
LABEL_933:
      *(_WORD *)(v504 + 2 * v500) = *(_WORD *)(v504 + 2 * v499);
      if (v499 != v500)
      {
        v513 = *v505;
        v514 = v503 + 12 * v500;
        *(_DWORD *)(v514 + 8) = *((_DWORD *)v505 + 2);
        *(_QWORD *)v514 = v513;
      }
      ++v500;
LABEL_917:
      if (++v499 == v498)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_937;
      }
    }
    v507 = *(_DWORD *)v505;
    v508 = *((_DWORD *)v505 + 1);
    v509 = *((_DWORD *)v505 + 2);
    while (1)
    {
      v510 = *((_DWORD *)v506 + 7);
      if (v507 == v510)
      {
        v511 = *((_DWORD *)v506 + 8);
        if (v508 == v511)
        {
          v512 = *((_DWORD *)v506 + 9);
          if (v509 < v512)
            goto LABEL_921;
          if (v512 >= v509)
            goto LABEL_917;
        }
        else
        {
          if (v508 < v511)
            goto LABEL_921;
          if (v511 >= v508)
            goto LABEL_917;
        }
      }
      else
      {
        if (v507 < v510)
          goto LABEL_921;
        if (v510 >= v507)
          goto LABEL_917;
      }
      ++v506;
LABEL_921:
      v506 = (uint64_t *)*v506;
      if (!v506)
        goto LABEL_933;
    }
  }
  v500 = 0;
LABEL_937:
  *v497 = v500;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v29 = v3[32];
  if (v29 >> 30)
    v515 = 1;
  else
    v515 = (_DWORD)v29 == v5;
  if (v515)
    goto LABEL_66;
LABEL_941:
  v516 = *(_QWORD *)(v1[2] + 8);
  v517 = v29 & 0xFFFFFFFFCFFFFFFFLL;
  v518 = *(_QWORD *)(*(_QWORD *)(v516 + 8) + 2448);
  v519 = (unsigned int *)(v518 + 520 * (v29 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v520 = *v519;
  if ((_DWORD)v520)
  {
    v521 = 0;
    v522 = 0;
    v523 = **(_QWORD **)(v516 + 16);
    v524 = v518 + 520 * v517;
    v525 = v524 + 364;
    v526 = v524 + 340;
    while (1)
    {
      v527 = (uint64_t *)(v525 + 12 * v521);
      v528 = *(uint64_t **)(v523 + 2512);
      if (v528)
        break;
LABEL_960:
      *(_WORD *)(v526 + 2 * v522) = *(_WORD *)(v526 + 2 * v521);
      if (v521 != v522)
      {
        v535 = *v527;
        v536 = v525 + 12 * v522;
        *(_DWORD *)(v536 + 8) = *((_DWORD *)v527 + 2);
        *(_QWORD *)v536 = v535;
      }
      ++v522;
LABEL_944:
      if (++v521 == v520)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_964;
      }
    }
    v529 = *(_DWORD *)v527;
    v530 = *((_DWORD *)v527 + 1);
    v531 = *((_DWORD *)v527 + 2);
    while (1)
    {
      v532 = *((_DWORD *)v528 + 7);
      if (v529 == v532)
      {
        v533 = *((_DWORD *)v528 + 8);
        if (v530 == v533)
        {
          v534 = *((_DWORD *)v528 + 9);
          if (v531 < v534)
            goto LABEL_948;
          if (v534 >= v531)
            goto LABEL_944;
        }
        else
        {
          if (v530 < v533)
            goto LABEL_948;
          if (v533 >= v530)
            goto LABEL_944;
        }
      }
      else
      {
        if (v529 < v532)
          goto LABEL_948;
        if (v532 >= v529)
          goto LABEL_944;
      }
      ++v528;
LABEL_948:
      v528 = (uint64_t *)*v528;
      if (!v528)
        goto LABEL_960;
    }
  }
  v522 = 0;
LABEL_964:
  *v519 = v522;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v31 = v3[33];
  if (v31 >> 30)
    v537 = 1;
  else
    v537 = (_DWORD)v31 == v5;
  if (v537)
    goto LABEL_71;
LABEL_968:
  v538 = *(_QWORD *)(v1[2] + 8);
  v539 = v31 & 0xFFFFFFFFCFFFFFFFLL;
  v540 = *(_QWORD *)(*(_QWORD *)(v538 + 8) + 2448);
  v541 = (unsigned int *)(v540 + 520 * (v31 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v542 = *v541;
  if ((_DWORD)v542)
  {
    v543 = 0;
    v544 = 0;
    v545 = **(_QWORD **)(v538 + 16);
    v546 = v540 + 520 * v539;
    v547 = v546 + 364;
    v548 = v546 + 340;
    while (1)
    {
      v549 = (uint64_t *)(v547 + 12 * v543);
      v550 = *(uint64_t **)(v545 + 2512);
      if (v550)
        break;
LABEL_987:
      *(_WORD *)(v548 + 2 * v544) = *(_WORD *)(v548 + 2 * v543);
      if (v543 != v544)
      {
        v557 = *v549;
        v558 = v547 + 12 * v544;
        *(_DWORD *)(v558 + 8) = *((_DWORD *)v549 + 2);
        *(_QWORD *)v558 = v557;
      }
      ++v544;
LABEL_971:
      if (++v543 == v542)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_991;
      }
    }
    v551 = *(_DWORD *)v549;
    v552 = *((_DWORD *)v549 + 1);
    v553 = *((_DWORD *)v549 + 2);
    while (1)
    {
      v554 = *((_DWORD *)v550 + 7);
      if (v551 == v554)
      {
        v555 = *((_DWORD *)v550 + 8);
        if (v552 == v555)
        {
          v556 = *((_DWORD *)v550 + 9);
          if (v553 < v556)
            goto LABEL_975;
          if (v556 >= v553)
            goto LABEL_971;
        }
        else
        {
          if (v552 < v555)
            goto LABEL_975;
          if (v555 >= v552)
            goto LABEL_971;
        }
      }
      else
      {
        if (v551 < v554)
          goto LABEL_975;
        if (v554 >= v551)
          goto LABEL_971;
      }
      ++v550;
LABEL_975:
      v550 = (uint64_t *)*v550;
      if (!v550)
        goto LABEL_987;
    }
  }
  v544 = 0;
LABEL_991:
  *v541 = v544;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v33 = v3[34];
  if (v33 >> 30)
    v559 = 1;
  else
    v559 = (_DWORD)v33 == v5;
  if (v559)
    goto LABEL_76;
LABEL_995:
  v560 = *(_QWORD *)(v1[2] + 8);
  v561 = v33 & 0xFFFFFFFFCFFFFFFFLL;
  v562 = *(_QWORD *)(*(_QWORD *)(v560 + 8) + 2448);
  v563 = (unsigned int *)(v562 + 520 * (v33 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v564 = *v563;
  if ((_DWORD)v564)
  {
    v565 = 0;
    v566 = 0;
    v567 = **(_QWORD **)(v560 + 16);
    v568 = v562 + 520 * v561;
    v569 = v568 + 364;
    v570 = v568 + 340;
    while (1)
    {
      v571 = (uint64_t *)(v569 + 12 * v565);
      v572 = *(uint64_t **)(v567 + 2512);
      if (v572)
        break;
LABEL_1014:
      *(_WORD *)(v570 + 2 * v566) = *(_WORD *)(v570 + 2 * v565);
      if (v565 != v566)
      {
        v579 = *v571;
        v580 = v569 + 12 * v566;
        *(_DWORD *)(v580 + 8) = *((_DWORD *)v571 + 2);
        *(_QWORD *)v580 = v579;
      }
      ++v566;
LABEL_998:
      if (++v565 == v564)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1018;
      }
    }
    v573 = *(_DWORD *)v571;
    v574 = *((_DWORD *)v571 + 1);
    v575 = *((_DWORD *)v571 + 2);
    while (1)
    {
      v576 = *((_DWORD *)v572 + 7);
      if (v573 == v576)
      {
        v577 = *((_DWORD *)v572 + 8);
        if (v574 == v577)
        {
          v578 = *((_DWORD *)v572 + 9);
          if (v575 < v578)
            goto LABEL_1002;
          if (v578 >= v575)
            goto LABEL_998;
        }
        else
        {
          if (v574 < v577)
            goto LABEL_1002;
          if (v577 >= v574)
            goto LABEL_998;
        }
      }
      else
      {
        if (v573 < v576)
          goto LABEL_1002;
        if (v576 >= v573)
          goto LABEL_998;
      }
      ++v572;
LABEL_1002:
      v572 = (uint64_t *)*v572;
      if (!v572)
        goto LABEL_1014;
    }
  }
  v566 = 0;
LABEL_1018:
  *v563 = v566;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v35 = v3[35];
  if (v35 >> 30)
    v581 = 1;
  else
    v581 = (_DWORD)v35 == v5;
  if (v581)
    goto LABEL_81;
LABEL_1022:
  v582 = *(_QWORD *)(v1[2] + 8);
  v583 = v35 & 0xFFFFFFFFCFFFFFFFLL;
  v584 = *(_QWORD *)(*(_QWORD *)(v582 + 8) + 2448);
  v585 = (unsigned int *)(v584 + 520 * (v35 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v586 = *v585;
  if ((_DWORD)v586)
  {
    v587 = 0;
    v588 = 0;
    v589 = **(_QWORD **)(v582 + 16);
    v590 = v584 + 520 * v583;
    v591 = v590 + 364;
    v592 = v590 + 340;
    while (1)
    {
      v593 = (uint64_t *)(v591 + 12 * v587);
      v594 = *(uint64_t **)(v589 + 2512);
      if (v594)
        break;
LABEL_1041:
      *(_WORD *)(v592 + 2 * v588) = *(_WORD *)(v592 + 2 * v587);
      if (v587 != v588)
      {
        v601 = *v593;
        v602 = v591 + 12 * v588;
        *(_DWORD *)(v602 + 8) = *((_DWORD *)v593 + 2);
        *(_QWORD *)v602 = v601;
      }
      ++v588;
LABEL_1025:
      if (++v587 == v586)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1045;
      }
    }
    v595 = *(_DWORD *)v593;
    v596 = *((_DWORD *)v593 + 1);
    v597 = *((_DWORD *)v593 + 2);
    while (1)
    {
      v598 = *((_DWORD *)v594 + 7);
      if (v595 == v598)
      {
        v599 = *((_DWORD *)v594 + 8);
        if (v596 == v599)
        {
          v600 = *((_DWORD *)v594 + 9);
          if (v597 < v600)
            goto LABEL_1029;
          if (v600 >= v597)
            goto LABEL_1025;
        }
        else
        {
          if (v596 < v599)
            goto LABEL_1029;
          if (v599 >= v596)
            goto LABEL_1025;
        }
      }
      else
      {
        if (v595 < v598)
          goto LABEL_1029;
        if (v598 >= v595)
          goto LABEL_1025;
      }
      ++v594;
LABEL_1029:
      v594 = (uint64_t *)*v594;
      if (!v594)
        goto LABEL_1041;
    }
  }
  v588 = 0;
LABEL_1045:
  *v585 = v588;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v37 = v3[36];
  if (v37 >> 30)
    v603 = 1;
  else
    v603 = (_DWORD)v37 == v5;
  if (v603)
    goto LABEL_86;
LABEL_1049:
  v604 = *(_QWORD *)(v1[2] + 8);
  v605 = v37 & 0xFFFFFFFFCFFFFFFFLL;
  v606 = *(_QWORD *)(*(_QWORD *)(v604 + 8) + 2448);
  v607 = (unsigned int *)(v606 + 520 * (v37 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v608 = *v607;
  if ((_DWORD)v608)
  {
    v609 = 0;
    v610 = 0;
    v611 = **(_QWORD **)(v604 + 16);
    v612 = v606 + 520 * v605;
    v613 = v612 + 364;
    v614 = v612 + 340;
    while (1)
    {
      v615 = (uint64_t *)(v613 + 12 * v609);
      v616 = *(uint64_t **)(v611 + 2512);
      if (v616)
        break;
LABEL_1068:
      *(_WORD *)(v614 + 2 * v610) = *(_WORD *)(v614 + 2 * v609);
      if (v609 != v610)
      {
        v623 = *v615;
        v624 = v613 + 12 * v610;
        *(_DWORD *)(v624 + 8) = *((_DWORD *)v615 + 2);
        *(_QWORD *)v624 = v623;
      }
      ++v610;
LABEL_1052:
      if (++v609 == v608)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1072;
      }
    }
    v617 = *(_DWORD *)v615;
    v618 = *((_DWORD *)v615 + 1);
    v619 = *((_DWORD *)v615 + 2);
    while (1)
    {
      v620 = *((_DWORD *)v616 + 7);
      if (v617 == v620)
      {
        v621 = *((_DWORD *)v616 + 8);
        if (v618 == v621)
        {
          v622 = *((_DWORD *)v616 + 9);
          if (v619 < v622)
            goto LABEL_1056;
          if (v622 >= v619)
            goto LABEL_1052;
        }
        else
        {
          if (v618 < v621)
            goto LABEL_1056;
          if (v621 >= v618)
            goto LABEL_1052;
        }
      }
      else
      {
        if (v617 < v620)
          goto LABEL_1056;
        if (v620 >= v617)
          goto LABEL_1052;
      }
      ++v616;
LABEL_1056:
      v616 = (uint64_t *)*v616;
      if (!v616)
        goto LABEL_1068;
    }
  }
  v610 = 0;
LABEL_1072:
  *v607 = v610;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v39 = v3[37];
  if (v39 >> 30)
    v625 = 1;
  else
    v625 = (_DWORD)v39 == v5;
  if (v625)
    goto LABEL_91;
LABEL_1076:
  v626 = *(_QWORD *)(v1[2] + 8);
  v627 = v39 & 0xFFFFFFFFCFFFFFFFLL;
  v628 = *(_QWORD *)(*(_QWORD *)(v626 + 8) + 2448);
  v629 = (unsigned int *)(v628 + 520 * (v39 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v630 = *v629;
  if ((_DWORD)v630)
  {
    v631 = 0;
    v632 = 0;
    v633 = **(_QWORD **)(v626 + 16);
    v634 = v628 + 520 * v627;
    v635 = v634 + 364;
    v636 = v634 + 340;
    while (1)
    {
      v637 = (uint64_t *)(v635 + 12 * v631);
      v638 = *(uint64_t **)(v633 + 2512);
      if (v638)
        break;
LABEL_1095:
      *(_WORD *)(v636 + 2 * v632) = *(_WORD *)(v636 + 2 * v631);
      if (v631 != v632)
      {
        v645 = *v637;
        v646 = v635 + 12 * v632;
        *(_DWORD *)(v646 + 8) = *((_DWORD *)v637 + 2);
        *(_QWORD *)v646 = v645;
      }
      ++v632;
LABEL_1079:
      if (++v631 == v630)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1099;
      }
    }
    v639 = *(_DWORD *)v637;
    v640 = *((_DWORD *)v637 + 1);
    v641 = *((_DWORD *)v637 + 2);
    while (1)
    {
      v642 = *((_DWORD *)v638 + 7);
      if (v639 == v642)
      {
        v643 = *((_DWORD *)v638 + 8);
        if (v640 == v643)
        {
          v644 = *((_DWORD *)v638 + 9);
          if (v641 < v644)
            goto LABEL_1083;
          if (v644 >= v641)
            goto LABEL_1079;
        }
        else
        {
          if (v640 < v643)
            goto LABEL_1083;
          if (v643 >= v640)
            goto LABEL_1079;
        }
      }
      else
      {
        if (v639 < v642)
          goto LABEL_1083;
        if (v642 >= v639)
          goto LABEL_1079;
      }
      ++v638;
LABEL_1083:
      v638 = (uint64_t *)*v638;
      if (!v638)
        goto LABEL_1095;
    }
  }
  v632 = 0;
LABEL_1099:
  *v629 = v632;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v41 = v3[38];
  if (v41 >> 30)
    v647 = 1;
  else
    v647 = (_DWORD)v41 == v5;
  if (v647)
    goto LABEL_96;
LABEL_1103:
  v648 = *(_QWORD *)(v1[2] + 8);
  v649 = v41 & 0xFFFFFFFFCFFFFFFFLL;
  v650 = *(_QWORD *)(*(_QWORD *)(v648 + 8) + 2448);
  v651 = (unsigned int *)(v650 + 520 * (v41 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v652 = *v651;
  if ((_DWORD)v652)
  {
    v653 = 0;
    v654 = 0;
    v655 = **(_QWORD **)(v648 + 16);
    v656 = v650 + 520 * v649;
    v657 = v656 + 364;
    v658 = v656 + 340;
    while (1)
    {
      v659 = (uint64_t *)(v657 + 12 * v653);
      v660 = *(uint64_t **)(v655 + 2512);
      if (v660)
        break;
LABEL_1122:
      *(_WORD *)(v658 + 2 * v654) = *(_WORD *)(v658 + 2 * v653);
      if (v653 != v654)
      {
        v667 = *v659;
        v668 = v657 + 12 * v654;
        *(_DWORD *)(v668 + 8) = *((_DWORD *)v659 + 2);
        *(_QWORD *)v668 = v667;
      }
      ++v654;
LABEL_1106:
      if (++v653 == v652)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1126;
      }
    }
    v661 = *(_DWORD *)v659;
    v662 = *((_DWORD *)v659 + 1);
    v663 = *((_DWORD *)v659 + 2);
    while (1)
    {
      v664 = *((_DWORD *)v660 + 7);
      if (v661 == v664)
      {
        v665 = *((_DWORD *)v660 + 8);
        if (v662 == v665)
        {
          v666 = *((_DWORD *)v660 + 9);
          if (v663 < v666)
            goto LABEL_1110;
          if (v666 >= v663)
            goto LABEL_1106;
        }
        else
        {
          if (v662 < v665)
            goto LABEL_1110;
          if (v665 >= v662)
            goto LABEL_1106;
        }
      }
      else
      {
        if (v661 < v664)
          goto LABEL_1110;
        if (v664 >= v661)
          goto LABEL_1106;
      }
      ++v660;
LABEL_1110:
      v660 = (uint64_t *)*v660;
      if (!v660)
        goto LABEL_1122;
    }
  }
  v654 = 0;
LABEL_1126:
  *v651 = v654;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v43 = v3[39];
  if (v43 >> 30)
    v669 = 1;
  else
    v669 = (_DWORD)v43 == v5;
  if (v669)
    goto LABEL_101;
LABEL_1130:
  v670 = *(_QWORD *)(v1[2] + 8);
  v671 = v43 & 0xFFFFFFFFCFFFFFFFLL;
  v672 = *(_QWORD *)(*(_QWORD *)(v670 + 8) + 2448);
  v673 = (unsigned int *)(v672 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v674 = *v673;
  if ((_DWORD)v674)
  {
    v675 = 0;
    v676 = 0;
    v677 = **(_QWORD **)(v670 + 16);
    v678 = v672 + 520 * v671;
    v679 = v678 + 364;
    v680 = v678 + 340;
    while (1)
    {
      v681 = (uint64_t *)(v679 + 12 * v675);
      v682 = *(uint64_t **)(v677 + 2512);
      if (v682)
        break;
LABEL_1149:
      *(_WORD *)(v680 + 2 * v676) = *(_WORD *)(v680 + 2 * v675);
      if (v675 != v676)
      {
        v689 = *v681;
        v690 = v679 + 12 * v676;
        *(_DWORD *)(v690 + 8) = *((_DWORD *)v681 + 2);
        *(_QWORD *)v690 = v689;
      }
      ++v676;
LABEL_1133:
      if (++v675 == v674)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1153;
      }
    }
    v683 = *(_DWORD *)v681;
    v684 = *((_DWORD *)v681 + 1);
    v685 = *((_DWORD *)v681 + 2);
    while (1)
    {
      v686 = *((_DWORD *)v682 + 7);
      if (v683 == v686)
      {
        v687 = *((_DWORD *)v682 + 8);
        if (v684 == v687)
        {
          v688 = *((_DWORD *)v682 + 9);
          if (v685 < v688)
            goto LABEL_1137;
          if (v688 >= v685)
            goto LABEL_1133;
        }
        else
        {
          if (v684 < v687)
            goto LABEL_1137;
          if (v687 >= v684)
            goto LABEL_1133;
        }
      }
      else
      {
        if (v683 < v686)
          goto LABEL_1137;
        if (v686 >= v683)
          goto LABEL_1133;
      }
      ++v682;
LABEL_1137:
      v682 = (uint64_t *)*v682;
      if (!v682)
        goto LABEL_1149;
    }
  }
  v676 = 0;
LABEL_1153:
  *v673 = v676;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v45 = v3[40];
  if (v45 >> 30)
    v691 = 1;
  else
    v691 = (_DWORD)v45 == v5;
  if (v691)
    goto LABEL_106;
LABEL_1157:
  v692 = *(_QWORD *)(v1[2] + 8);
  v693 = v45 & 0xFFFFFFFFCFFFFFFFLL;
  v694 = *(_QWORD *)(*(_QWORD *)(v692 + 8) + 2448);
  v695 = (unsigned int *)(v694 + 520 * (v45 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v696 = *v695;
  if ((_DWORD)v696)
  {
    v697 = 0;
    v698 = 0;
    v699 = **(_QWORD **)(v692 + 16);
    v700 = v694 + 520 * v693;
    v701 = v700 + 364;
    v702 = v700 + 340;
    while (1)
    {
      v703 = (uint64_t *)(v701 + 12 * v697);
      v704 = *(uint64_t **)(v699 + 2512);
      if (v704)
        break;
LABEL_1176:
      *(_WORD *)(v702 + 2 * v698) = *(_WORD *)(v702 + 2 * v697);
      if (v697 != v698)
      {
        v711 = *v703;
        v712 = v701 + 12 * v698;
        *(_DWORD *)(v712 + 8) = *((_DWORD *)v703 + 2);
        *(_QWORD *)v712 = v711;
      }
      ++v698;
LABEL_1160:
      if (++v697 == v696)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1180;
      }
    }
    v705 = *(_DWORD *)v703;
    v706 = *((_DWORD *)v703 + 1);
    v707 = *((_DWORD *)v703 + 2);
    while (1)
    {
      v708 = *((_DWORD *)v704 + 7);
      if (v705 == v708)
      {
        v709 = *((_DWORD *)v704 + 8);
        if (v706 == v709)
        {
          v710 = *((_DWORD *)v704 + 9);
          if (v707 < v710)
            goto LABEL_1164;
          if (v710 >= v707)
            goto LABEL_1160;
        }
        else
        {
          if (v706 < v709)
            goto LABEL_1164;
          if (v709 >= v706)
            goto LABEL_1160;
        }
      }
      else
      {
        if (v705 < v708)
          goto LABEL_1164;
        if (v708 >= v705)
          goto LABEL_1160;
      }
      ++v704;
LABEL_1164:
      v704 = (uint64_t *)*v704;
      if (!v704)
        goto LABEL_1176;
    }
  }
  v698 = 0;
LABEL_1180:
  *v695 = v698;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v47 = v3[41];
  if (v47 >> 30)
    v713 = 1;
  else
    v713 = (_DWORD)v47 == v5;
  if (v713)
    goto LABEL_111;
LABEL_1184:
  v714 = *(_QWORD *)(v1[2] + 8);
  v715 = v47 & 0xFFFFFFFFCFFFFFFFLL;
  v716 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 2448);
  v717 = (unsigned int *)(v716 + 520 * (v47 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v718 = *v717;
  if ((_DWORD)v718)
  {
    v719 = 0;
    v720 = 0;
    v721 = **(_QWORD **)(v714 + 16);
    v722 = v716 + 520 * v715;
    v723 = v722 + 364;
    v724 = v722 + 340;
    while (1)
    {
      v725 = (uint64_t *)(v723 + 12 * v719);
      v726 = *(uint64_t **)(v721 + 2512);
      if (v726)
        break;
LABEL_1203:
      *(_WORD *)(v724 + 2 * v720) = *(_WORD *)(v724 + 2 * v719);
      if (v719 != v720)
      {
        v733 = *v725;
        v734 = v723 + 12 * v720;
        *(_DWORD *)(v734 + 8) = *((_DWORD *)v725 + 2);
        *(_QWORD *)v734 = v733;
      }
      ++v720;
LABEL_1187:
      if (++v719 == v718)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1207;
      }
    }
    v727 = *(_DWORD *)v725;
    v728 = *((_DWORD *)v725 + 1);
    v729 = *((_DWORD *)v725 + 2);
    while (1)
    {
      v730 = *((_DWORD *)v726 + 7);
      if (v727 == v730)
      {
        v731 = *((_DWORD *)v726 + 8);
        if (v728 == v731)
        {
          v732 = *((_DWORD *)v726 + 9);
          if (v729 < v732)
            goto LABEL_1191;
          if (v732 >= v729)
            goto LABEL_1187;
        }
        else
        {
          if (v728 < v731)
            goto LABEL_1191;
          if (v731 >= v728)
            goto LABEL_1187;
        }
      }
      else
      {
        if (v727 < v730)
          goto LABEL_1191;
        if (v730 >= v727)
          goto LABEL_1187;
      }
      ++v726;
LABEL_1191:
      v726 = (uint64_t *)*v726;
      if (!v726)
        goto LABEL_1203;
    }
  }
  v720 = 0;
LABEL_1207:
  *v717 = v720;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v49 = v3[42];
  if (v49 >> 30)
    v735 = 1;
  else
    v735 = (_DWORD)v49 == v5;
  if (v735)
    goto LABEL_116;
LABEL_1211:
  v736 = *(_QWORD *)(v1[2] + 8);
  v737 = v49 & 0xFFFFFFFFCFFFFFFFLL;
  v738 = *(_QWORD *)(*(_QWORD *)(v736 + 8) + 2448);
  v739 = (unsigned int *)(v738 + 520 * (v49 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v740 = *v739;
  if ((_DWORD)v740)
  {
    v741 = 0;
    v742 = 0;
    v743 = **(_QWORD **)(v736 + 16);
    v744 = v738 + 520 * v737;
    v745 = v744 + 364;
    v746 = v744 + 340;
    while (1)
    {
      v747 = (uint64_t *)(v745 + 12 * v741);
      v748 = *(uint64_t **)(v743 + 2512);
      if (v748)
        break;
LABEL_1230:
      *(_WORD *)(v746 + 2 * v742) = *(_WORD *)(v746 + 2 * v741);
      if (v741 != v742)
      {
        v755 = *v747;
        v756 = v745 + 12 * v742;
        *(_DWORD *)(v756 + 8) = *((_DWORD *)v747 + 2);
        *(_QWORD *)v756 = v755;
      }
      ++v742;
LABEL_1214:
      if (++v741 == v740)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1234;
      }
    }
    v749 = *(_DWORD *)v747;
    v750 = *((_DWORD *)v747 + 1);
    v751 = *((_DWORD *)v747 + 2);
    while (1)
    {
      v752 = *((_DWORD *)v748 + 7);
      if (v749 == v752)
      {
        v753 = *((_DWORD *)v748 + 8);
        if (v750 == v753)
        {
          v754 = *((_DWORD *)v748 + 9);
          if (v751 < v754)
            goto LABEL_1218;
          if (v754 >= v751)
            goto LABEL_1214;
        }
        else
        {
          if (v750 < v753)
            goto LABEL_1218;
          if (v753 >= v750)
            goto LABEL_1214;
        }
      }
      else
      {
        if (v749 < v752)
          goto LABEL_1218;
        if (v752 >= v749)
          goto LABEL_1214;
      }
      ++v748;
LABEL_1218:
      v748 = (uint64_t *)*v748;
      if (!v748)
        goto LABEL_1230;
    }
  }
  v742 = 0;
LABEL_1234:
  *v739 = v742;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v51 = v3[43];
  if (v51 >> 30)
    v757 = 1;
  else
    v757 = (_DWORD)v51 == v5;
  if (v757)
    goto LABEL_121;
LABEL_1238:
  v758 = *(_QWORD *)(v1[2] + 8);
  v759 = v51 & 0xFFFFFFFFCFFFFFFFLL;
  v760 = *(_QWORD *)(*(_QWORD *)(v758 + 8) + 2448);
  v761 = (unsigned int *)(v760 + 520 * (v51 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v762 = *v761;
  if ((_DWORD)v762)
  {
    v763 = 0;
    v764 = 0;
    v765 = **(_QWORD **)(v758 + 16);
    v766 = v760 + 520 * v759;
    v767 = v766 + 364;
    v768 = v766 + 340;
    while (1)
    {
      v769 = (uint64_t *)(v767 + 12 * v763);
      v770 = *(uint64_t **)(v765 + 2512);
      if (v770)
        break;
LABEL_1257:
      *(_WORD *)(v768 + 2 * v764) = *(_WORD *)(v768 + 2 * v763);
      if (v763 != v764)
      {
        v777 = *v769;
        v778 = v767 + 12 * v764;
        *(_DWORD *)(v778 + 8) = *((_DWORD *)v769 + 2);
        *(_QWORD *)v778 = v777;
      }
      ++v764;
LABEL_1241:
      if (++v763 == v762)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1261;
      }
    }
    v771 = *(_DWORD *)v769;
    v772 = *((_DWORD *)v769 + 1);
    v773 = *((_DWORD *)v769 + 2);
    while (1)
    {
      v774 = *((_DWORD *)v770 + 7);
      if (v771 == v774)
      {
        v775 = *((_DWORD *)v770 + 8);
        if (v772 == v775)
        {
          v776 = *((_DWORD *)v770 + 9);
          if (v773 < v776)
            goto LABEL_1245;
          if (v776 >= v773)
            goto LABEL_1241;
        }
        else
        {
          if (v772 < v775)
            goto LABEL_1245;
          if (v775 >= v772)
            goto LABEL_1241;
        }
      }
      else
      {
        if (v771 < v774)
          goto LABEL_1245;
        if (v774 >= v771)
          goto LABEL_1241;
      }
      ++v770;
LABEL_1245:
      v770 = (uint64_t *)*v770;
      if (!v770)
        goto LABEL_1257;
    }
  }
  v764 = 0;
LABEL_1261:
  *v761 = v764;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v53 = v3[44];
  if (v53 >> 30)
    v779 = 1;
  else
    v779 = (_DWORD)v53 == v5;
  if (v779)
    goto LABEL_126;
LABEL_1265:
  v780 = *(_QWORD *)(v1[2] + 8);
  v781 = v53 & 0xFFFFFFFFCFFFFFFFLL;
  v782 = *(_QWORD *)(*(_QWORD *)(v780 + 8) + 2448);
  v783 = (unsigned int *)(v782 + 520 * (v53 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v784 = *v783;
  if ((_DWORD)v784)
  {
    v785 = 0;
    v786 = 0;
    v787 = **(_QWORD **)(v780 + 16);
    v788 = v782 + 520 * v781;
    v789 = v788 + 364;
    v790 = v788 + 340;
    while (1)
    {
      v791 = (uint64_t *)(v789 + 12 * v785);
      v792 = *(uint64_t **)(v787 + 2512);
      if (v792)
        break;
LABEL_1284:
      *(_WORD *)(v790 + 2 * v786) = *(_WORD *)(v790 + 2 * v785);
      if (v785 != v786)
      {
        v799 = *v791;
        v800 = v789 + 12 * v786;
        *(_DWORD *)(v800 + 8) = *((_DWORD *)v791 + 2);
        *(_QWORD *)v800 = v799;
      }
      ++v786;
LABEL_1268:
      if (++v785 == v784)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1288;
      }
    }
    v793 = *(_DWORD *)v791;
    v794 = *((_DWORD *)v791 + 1);
    v795 = *((_DWORD *)v791 + 2);
    while (1)
    {
      v796 = *((_DWORD *)v792 + 7);
      if (v793 == v796)
      {
        v797 = *((_DWORD *)v792 + 8);
        if (v794 == v797)
        {
          v798 = *((_DWORD *)v792 + 9);
          if (v795 < v798)
            goto LABEL_1272;
          if (v798 >= v795)
            goto LABEL_1268;
        }
        else
        {
          if (v794 < v797)
            goto LABEL_1272;
          if (v797 >= v794)
            goto LABEL_1268;
        }
      }
      else
      {
        if (v793 < v796)
          goto LABEL_1272;
        if (v796 >= v793)
          goto LABEL_1268;
      }
      ++v792;
LABEL_1272:
      v792 = (uint64_t *)*v792;
      if (!v792)
        goto LABEL_1284;
    }
  }
  v786 = 0;
LABEL_1288:
  *v783 = v786;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v55 = v3[45];
  if (v55 >> 30)
    v801 = 1;
  else
    v801 = (_DWORD)v55 == v5;
  if (v801)
    goto LABEL_131;
LABEL_1292:
  v802 = *(_QWORD *)(v1[2] + 8);
  v803 = v55 & 0xFFFFFFFFCFFFFFFFLL;
  v804 = *(_QWORD *)(*(_QWORD *)(v802 + 8) + 2448);
  v805 = (unsigned int *)(v804 + 520 * (v55 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v806 = *v805;
  if ((_DWORD)v806)
  {
    v807 = 0;
    v808 = 0;
    v809 = **(_QWORD **)(v802 + 16);
    v810 = v804 + 520 * v803;
    v811 = v810 + 364;
    v812 = v810 + 340;
    while (1)
    {
      v813 = (uint64_t *)(v811 + 12 * v807);
      v814 = *(uint64_t **)(v809 + 2512);
      if (v814)
        break;
LABEL_1311:
      *(_WORD *)(v812 + 2 * v808) = *(_WORD *)(v812 + 2 * v807);
      if (v807 != v808)
      {
        v821 = *v813;
        v822 = v811 + 12 * v808;
        *(_DWORD *)(v822 + 8) = *((_DWORD *)v813 + 2);
        *(_QWORD *)v822 = v821;
      }
      ++v808;
LABEL_1295:
      if (++v807 == v806)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1315;
      }
    }
    v815 = *(_DWORD *)v813;
    v816 = *((_DWORD *)v813 + 1);
    v817 = *((_DWORD *)v813 + 2);
    while (1)
    {
      v818 = *((_DWORD *)v814 + 7);
      if (v815 == v818)
      {
        v819 = *((_DWORD *)v814 + 8);
        if (v816 == v819)
        {
          v820 = *((_DWORD *)v814 + 9);
          if (v817 < v820)
            goto LABEL_1299;
          if (v820 >= v817)
            goto LABEL_1295;
        }
        else
        {
          if (v816 < v819)
            goto LABEL_1299;
          if (v819 >= v816)
            goto LABEL_1295;
        }
      }
      else
      {
        if (v815 < v818)
          goto LABEL_1299;
        if (v818 >= v815)
          goto LABEL_1295;
      }
      ++v814;
LABEL_1299:
      v814 = (uint64_t *)*v814;
      if (!v814)
        goto LABEL_1311;
    }
  }
  v808 = 0;
LABEL_1315:
  *v805 = v808;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v57 = v3[46];
  if (v57 >> 30)
    v823 = 1;
  else
    v823 = (_DWORD)v57 == v5;
  if (v823)
    goto LABEL_136;
LABEL_1319:
  v824 = *(_QWORD *)(v1[2] + 8);
  v825 = v57 & 0xFFFFFFFFCFFFFFFFLL;
  v826 = *(_QWORD *)(*(_QWORD *)(v824 + 8) + 2448);
  v827 = (unsigned int *)(v826 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v828 = *v827;
  if ((_DWORD)v828)
  {
    v829 = 0;
    v830 = 0;
    v831 = **(_QWORD **)(v824 + 16);
    v832 = v826 + 520 * v825;
    v833 = v832 + 364;
    v834 = v832 + 340;
    while (1)
    {
      v835 = (uint64_t *)(v833 + 12 * v829);
      v836 = *(uint64_t **)(v831 + 2512);
      if (v836)
        break;
LABEL_1338:
      *(_WORD *)(v834 + 2 * v830) = *(_WORD *)(v834 + 2 * v829);
      if (v829 != v830)
      {
        v843 = *v835;
        v844 = v833 + 12 * v830;
        *(_DWORD *)(v844 + 8) = *((_DWORD *)v835 + 2);
        *(_QWORD *)v844 = v843;
      }
      ++v830;
LABEL_1322:
      if (++v829 == v828)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1342;
      }
    }
    v837 = *(_DWORD *)v835;
    v838 = *((_DWORD *)v835 + 1);
    v839 = *((_DWORD *)v835 + 2);
    while (1)
    {
      v840 = *((_DWORD *)v836 + 7);
      if (v837 == v840)
      {
        v841 = *((_DWORD *)v836 + 8);
        if (v838 == v841)
        {
          v842 = *((_DWORD *)v836 + 9);
          if (v839 < v842)
            goto LABEL_1326;
          if (v842 >= v839)
            goto LABEL_1322;
        }
        else
        {
          if (v838 < v841)
            goto LABEL_1326;
          if (v841 >= v838)
            goto LABEL_1322;
        }
      }
      else
      {
        if (v837 < v840)
          goto LABEL_1326;
        if (v840 >= v837)
          goto LABEL_1322;
      }
      ++v836;
LABEL_1326:
      v836 = (uint64_t *)*v836;
      if (!v836)
        goto LABEL_1338;
    }
  }
  v830 = 0;
LABEL_1342:
  *v827 = v830;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v59 = v3[47];
  if (v59 >> 30)
    v845 = 1;
  else
    v845 = (_DWORD)v59 == v5;
  if (v845)
    goto LABEL_141;
LABEL_1346:
  v846 = *(_QWORD *)(v1[2] + 8);
  v847 = v59 & 0xFFFFFFFFCFFFFFFFLL;
  v848 = *(_QWORD *)(*(_QWORD *)(v846 + 8) + 2448);
  v849 = (unsigned int *)(v848 + 520 * (v59 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v850 = *v849;
  if ((_DWORD)v850)
  {
    v851 = 0;
    v852 = 0;
    v853 = **(_QWORD **)(v846 + 16);
    v854 = v848 + 520 * v847;
    v855 = v854 + 364;
    v856 = v854 + 340;
    while (1)
    {
      v857 = (uint64_t *)(v855 + 12 * v851);
      v858 = *(uint64_t **)(v853 + 2512);
      if (v858)
        break;
LABEL_1365:
      *(_WORD *)(v856 + 2 * v852) = *(_WORD *)(v856 + 2 * v851);
      if (v851 != v852)
      {
        v865 = *v857;
        v866 = v855 + 12 * v852;
        *(_DWORD *)(v866 + 8) = *((_DWORD *)v857 + 2);
        *(_QWORD *)v866 = v865;
      }
      ++v852;
LABEL_1349:
      if (++v851 == v850)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1369;
      }
    }
    v859 = *(_DWORD *)v857;
    v860 = *((_DWORD *)v857 + 1);
    v861 = *((_DWORD *)v857 + 2);
    while (1)
    {
      v862 = *((_DWORD *)v858 + 7);
      if (v859 == v862)
      {
        v863 = *((_DWORD *)v858 + 8);
        if (v860 == v863)
        {
          v864 = *((_DWORD *)v858 + 9);
          if (v861 < v864)
            goto LABEL_1353;
          if (v864 >= v861)
            goto LABEL_1349;
        }
        else
        {
          if (v860 < v863)
            goto LABEL_1353;
          if (v863 >= v860)
            goto LABEL_1349;
        }
      }
      else
      {
        if (v859 < v862)
          goto LABEL_1353;
        if (v862 >= v859)
          goto LABEL_1349;
      }
      ++v858;
LABEL_1353:
      v858 = (uint64_t *)*v858;
      if (!v858)
        goto LABEL_1365;
    }
  }
  v852 = 0;
LABEL_1369:
  *v849 = v852;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v61 = v3[48];
  if (v61 >> 30)
    v867 = 1;
  else
    v867 = (_DWORD)v61 == v5;
  if (v867)
    goto LABEL_146;
LABEL_1373:
  v868 = *(_QWORD *)(v1[2] + 8);
  v869 = v61 & 0xFFFFFFFFCFFFFFFFLL;
  v870 = *(_QWORD *)(*(_QWORD *)(v868 + 8) + 2448);
  v871 = (unsigned int *)(v870 + 520 * (v61 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v872 = *v871;
  if ((_DWORD)v872)
  {
    v873 = 0;
    v874 = 0;
    v875 = **(_QWORD **)(v868 + 16);
    v876 = v870 + 520 * v869;
    v877 = v876 + 364;
    v878 = v876 + 340;
    while (1)
    {
      v879 = (uint64_t *)(v877 + 12 * v873);
      v880 = *(uint64_t **)(v875 + 2512);
      if (v880)
        break;
LABEL_1392:
      *(_WORD *)(v878 + 2 * v874) = *(_WORD *)(v878 + 2 * v873);
      if (v873 != v874)
      {
        v887 = *v879;
        v888 = v877 + 12 * v874;
        *(_DWORD *)(v888 + 8) = *((_DWORD *)v879 + 2);
        *(_QWORD *)v888 = v887;
      }
      ++v874;
LABEL_1376:
      if (++v873 == v872)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1396;
      }
    }
    v881 = *(_DWORD *)v879;
    v882 = *((_DWORD *)v879 + 1);
    v883 = *((_DWORD *)v879 + 2);
    while (1)
    {
      v884 = *((_DWORD *)v880 + 7);
      if (v881 == v884)
      {
        v885 = *((_DWORD *)v880 + 8);
        if (v882 == v885)
        {
          v886 = *((_DWORD *)v880 + 9);
          if (v883 < v886)
            goto LABEL_1380;
          if (v886 >= v883)
            goto LABEL_1376;
        }
        else
        {
          if (v882 < v885)
            goto LABEL_1380;
          if (v885 >= v882)
            goto LABEL_1376;
        }
      }
      else
      {
        if (v881 < v884)
          goto LABEL_1380;
        if (v884 >= v881)
          goto LABEL_1376;
      }
      ++v880;
LABEL_1380:
      v880 = (uint64_t *)*v880;
      if (!v880)
        goto LABEL_1392;
    }
  }
  v874 = 0;
LABEL_1396:
  *v871 = v874;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v63 = v3[49];
  if (v63 >> 30)
    v889 = 1;
  else
    v889 = (_DWORD)v63 == v5;
  if (v889)
    goto LABEL_151;
LABEL_1400:
  v890 = *(_QWORD *)(v1[2] + 8);
  v891 = v63 & 0xFFFFFFFFCFFFFFFFLL;
  v892 = *(_QWORD *)(*(_QWORD *)(v890 + 8) + 2448);
  v893 = (unsigned int *)(v892 + 520 * (v63 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v894 = *v893;
  if ((_DWORD)v894)
  {
    v895 = 0;
    v896 = 0;
    v897 = **(_QWORD **)(v890 + 16);
    v898 = v892 + 520 * v891;
    v899 = v898 + 364;
    v900 = v898 + 340;
    while (1)
    {
      v901 = (uint64_t *)(v899 + 12 * v895);
      v902 = *(uint64_t **)(v897 + 2512);
      if (v902)
        break;
LABEL_1419:
      *(_WORD *)(v900 + 2 * v896) = *(_WORD *)(v900 + 2 * v895);
      if (v895 != v896)
      {
        v909 = *v901;
        v910 = v899 + 12 * v896;
        *(_DWORD *)(v910 + 8) = *((_DWORD *)v901 + 2);
        *(_QWORD *)v910 = v909;
      }
      ++v896;
LABEL_1403:
      if (++v895 == v894)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1423;
      }
    }
    v903 = *(_DWORD *)v901;
    v904 = *((_DWORD *)v901 + 1);
    v905 = *((_DWORD *)v901 + 2);
    while (1)
    {
      v906 = *((_DWORD *)v902 + 7);
      if (v903 == v906)
      {
        v907 = *((_DWORD *)v902 + 8);
        if (v904 == v907)
        {
          v908 = *((_DWORD *)v902 + 9);
          if (v905 < v908)
            goto LABEL_1407;
          if (v908 >= v905)
            goto LABEL_1403;
        }
        else
        {
          if (v904 < v907)
            goto LABEL_1407;
          if (v907 >= v904)
            goto LABEL_1403;
        }
      }
      else
      {
        if (v903 < v906)
          goto LABEL_1407;
        if (v906 >= v903)
          goto LABEL_1403;
      }
      ++v902;
LABEL_1407:
      v902 = (uint64_t *)*v902;
      if (!v902)
        goto LABEL_1419;
    }
  }
  v896 = 0;
LABEL_1423:
  *v893 = v896;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v65 = v3[50];
  if (v65 >> 30)
    v911 = 1;
  else
    v911 = (_DWORD)v65 == v5;
  if (v911)
    goto LABEL_156;
LABEL_1427:
  v912 = *(_QWORD *)(v1[2] + 8);
  v913 = v65 & 0xFFFFFFFFCFFFFFFFLL;
  v914 = *(_QWORD *)(*(_QWORD *)(v912 + 8) + 2448);
  v915 = (unsigned int *)(v914 + 520 * (v65 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v916 = *v915;
  if ((_DWORD)v916)
  {
    v917 = 0;
    v918 = 0;
    v919 = **(_QWORD **)(v912 + 16);
    v920 = v914 + 520 * v913;
    v921 = v920 + 364;
    v922 = v920 + 340;
    while (1)
    {
      v923 = (uint64_t *)(v921 + 12 * v917);
      v924 = *(uint64_t **)(v919 + 2512);
      if (v924)
        break;
LABEL_1446:
      *(_WORD *)(v922 + 2 * v918) = *(_WORD *)(v922 + 2 * v917);
      if (v917 != v918)
      {
        v931 = *v923;
        v932 = v921 + 12 * v918;
        *(_DWORD *)(v932 + 8) = *((_DWORD *)v923 + 2);
        *(_QWORD *)v932 = v931;
      }
      ++v918;
LABEL_1430:
      if (++v917 == v916)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1450;
      }
    }
    v925 = *(_DWORD *)v923;
    v926 = *((_DWORD *)v923 + 1);
    v927 = *((_DWORD *)v923 + 2);
    while (1)
    {
      v928 = *((_DWORD *)v924 + 7);
      if (v925 == v928)
      {
        v929 = *((_DWORD *)v924 + 8);
        if (v926 == v929)
        {
          v930 = *((_DWORD *)v924 + 9);
          if (v927 < v930)
            goto LABEL_1434;
          if (v930 >= v927)
            goto LABEL_1430;
        }
        else
        {
          if (v926 < v929)
            goto LABEL_1434;
          if (v929 >= v926)
            goto LABEL_1430;
        }
      }
      else
      {
        if (v925 < v928)
          goto LABEL_1434;
        if (v928 >= v925)
          goto LABEL_1430;
      }
      ++v924;
LABEL_1434:
      v924 = (uint64_t *)*v924;
      if (!v924)
        goto LABEL_1446;
    }
  }
  v918 = 0;
LABEL_1450:
  *v915 = v918;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v67 = v3[51];
  if (v67 >> 30)
    v933 = 1;
  else
    v933 = (_DWORD)v67 == v5;
  if (v933)
    goto LABEL_161;
LABEL_1454:
  v934 = *(_QWORD *)(v1[2] + 8);
  v935 = v67 & 0xFFFFFFFFCFFFFFFFLL;
  v936 = *(_QWORD *)(*(_QWORD *)(v934 + 8) + 2448);
  v937 = (unsigned int *)(v936 + 520 * (v67 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v938 = *v937;
  if ((_DWORD)v938)
  {
    v939 = 0;
    v940 = 0;
    v941 = **(_QWORD **)(v934 + 16);
    v942 = v936 + 520 * v935;
    v943 = v942 + 364;
    v944 = v942 + 340;
    while (1)
    {
      v945 = (uint64_t *)(v943 + 12 * v939);
      v946 = *(uint64_t **)(v941 + 2512);
      if (v946)
        break;
LABEL_1473:
      *(_WORD *)(v944 + 2 * v940) = *(_WORD *)(v944 + 2 * v939);
      if (v939 != v940)
      {
        v953 = *v945;
        v954 = v943 + 12 * v940;
        *(_DWORD *)(v954 + 8) = *((_DWORD *)v945 + 2);
        *(_QWORD *)v954 = v953;
      }
      ++v940;
LABEL_1457:
      if (++v939 == v938)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1477;
      }
    }
    v947 = *(_DWORD *)v945;
    v948 = *((_DWORD *)v945 + 1);
    v949 = *((_DWORD *)v945 + 2);
    while (1)
    {
      v950 = *((_DWORD *)v946 + 7);
      if (v947 == v950)
      {
        v951 = *((_DWORD *)v946 + 8);
        if (v948 == v951)
        {
          v952 = *((_DWORD *)v946 + 9);
          if (v949 < v952)
            goto LABEL_1461;
          if (v952 >= v949)
            goto LABEL_1457;
        }
        else
        {
          if (v948 < v951)
            goto LABEL_1461;
          if (v951 >= v948)
            goto LABEL_1457;
        }
      }
      else
      {
        if (v947 < v950)
          goto LABEL_1461;
        if (v950 >= v947)
          goto LABEL_1457;
      }
      ++v946;
LABEL_1461:
      v946 = (uint64_t *)*v946;
      if (!v946)
        goto LABEL_1473;
    }
  }
  v940 = 0;
LABEL_1477:
  *v937 = v940;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v69 = v3[52];
  if (v69 >> 30)
    v955 = 1;
  else
    v955 = (_DWORD)v69 == v5;
  if (v955)
    goto LABEL_166;
LABEL_1481:
  v956 = *(_QWORD *)(v1[2] + 8);
  v957 = v69 & 0xFFFFFFFFCFFFFFFFLL;
  v958 = *(_QWORD *)(*(_QWORD *)(v956 + 8) + 2448);
  v959 = (unsigned int *)(v958 + 520 * (v69 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v960 = *v959;
  if ((_DWORD)v960)
  {
    v961 = 0;
    v962 = 0;
    v963 = **(_QWORD **)(v956 + 16);
    v964 = v958 + 520 * v957;
    v965 = v964 + 364;
    v966 = v964 + 340;
    while (1)
    {
      v967 = (uint64_t *)(v965 + 12 * v961);
      v968 = *(uint64_t **)(v963 + 2512);
      if (v968)
        break;
LABEL_1500:
      *(_WORD *)(v966 + 2 * v962) = *(_WORD *)(v966 + 2 * v961);
      if (v961 != v962)
      {
        v975 = *v967;
        v976 = v965 + 12 * v962;
        *(_DWORD *)(v976 + 8) = *((_DWORD *)v967 + 2);
        *(_QWORD *)v976 = v975;
      }
      ++v962;
LABEL_1484:
      if (++v961 == v960)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1504;
      }
    }
    v969 = *(_DWORD *)v967;
    v970 = *((_DWORD *)v967 + 1);
    v971 = *((_DWORD *)v967 + 2);
    while (1)
    {
      v972 = *((_DWORD *)v968 + 7);
      if (v969 == v972)
      {
        v973 = *((_DWORD *)v968 + 8);
        if (v970 == v973)
        {
          v974 = *((_DWORD *)v968 + 9);
          if (v971 < v974)
            goto LABEL_1488;
          if (v974 >= v971)
            goto LABEL_1484;
        }
        else
        {
          if (v970 < v973)
            goto LABEL_1488;
          if (v973 >= v970)
            goto LABEL_1484;
        }
      }
      else
      {
        if (v969 < v972)
          goto LABEL_1488;
        if (v972 >= v969)
          goto LABEL_1484;
      }
      ++v968;
LABEL_1488:
      v968 = (uint64_t *)*v968;
      if (!v968)
        goto LABEL_1500;
    }
  }
  v962 = 0;
LABEL_1504:
  *v959 = v962;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v71 = v3[53];
  if (v71 >> 30)
    v977 = 1;
  else
    v977 = (_DWORD)v71 == v5;
  if (v977)
    goto LABEL_171;
LABEL_1508:
  v978 = *(_QWORD *)(v1[2] + 8);
  v979 = v71 & 0xFFFFFFFFCFFFFFFFLL;
  v980 = *(_QWORD *)(*(_QWORD *)(v978 + 8) + 2448);
  v981 = (unsigned int *)(v980 + 520 * (v71 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v982 = *v981;
  if ((_DWORD)v982)
  {
    v983 = 0;
    v984 = 0;
    v985 = **(_QWORD **)(v978 + 16);
    v986 = v980 + 520 * v979;
    v987 = v986 + 364;
    v988 = v986 + 340;
    while (1)
    {
      v989 = (uint64_t *)(v987 + 12 * v983);
      v990 = *(uint64_t **)(v985 + 2512);
      if (v990)
        break;
LABEL_1527:
      *(_WORD *)(v988 + 2 * v984) = *(_WORD *)(v988 + 2 * v983);
      if (v983 != v984)
      {
        v997 = *v989;
        v998 = v987 + 12 * v984;
        *(_DWORD *)(v998 + 8) = *((_DWORD *)v989 + 2);
        *(_QWORD *)v998 = v997;
      }
      ++v984;
LABEL_1511:
      if (++v983 == v982)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1531;
      }
    }
    v991 = *(_DWORD *)v989;
    v992 = *((_DWORD *)v989 + 1);
    v993 = *((_DWORD *)v989 + 2);
    while (1)
    {
      v994 = *((_DWORD *)v990 + 7);
      if (v991 == v994)
      {
        v995 = *((_DWORD *)v990 + 8);
        if (v992 == v995)
        {
          v996 = *((_DWORD *)v990 + 9);
          if (v993 < v996)
            goto LABEL_1515;
          if (v996 >= v993)
            goto LABEL_1511;
        }
        else
        {
          if (v992 < v995)
            goto LABEL_1515;
          if (v995 >= v992)
            goto LABEL_1511;
        }
      }
      else
      {
        if (v991 < v994)
          goto LABEL_1515;
        if (v994 >= v991)
          goto LABEL_1511;
      }
      ++v990;
LABEL_1515:
      v990 = (uint64_t *)*v990;
      if (!v990)
        goto LABEL_1527;
    }
  }
  v984 = 0;
LABEL_1531:
  *v981 = v984;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v73 = v3[54];
  if (v73 >> 30)
    v999 = 1;
  else
    v999 = (_DWORD)v73 == v5;
  if (v999)
    goto LABEL_176;
LABEL_1535:
  v1000 = *(_QWORD *)(v1[2] + 8);
  v1001 = v73 & 0xFFFFFFFFCFFFFFFFLL;
  v1002 = *(_QWORD *)(*(_QWORD *)(v1000 + 8) + 2448);
  v1003 = (unsigned int *)(v1002 + 520 * (v73 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1004 = *v1003;
  if ((_DWORD)v1004)
  {
    v1005 = 0;
    v1006 = 0;
    v1007 = **(_QWORD **)(v1000 + 16);
    v1008 = v1002 + 520 * v1001;
    v1009 = v1008 + 364;
    v1010 = v1008 + 340;
    while (1)
    {
      v1011 = (uint64_t *)(v1009 + 12 * v1005);
      v1012 = *(uint64_t **)(v1007 + 2512);
      if (v1012)
        break;
LABEL_1554:
      *(_WORD *)(v1010 + 2 * v1006) = *(_WORD *)(v1010 + 2 * v1005);
      if (v1005 != v1006)
      {
        v1019 = *v1011;
        v1020 = v1009 + 12 * v1006;
        *(_DWORD *)(v1020 + 8) = *((_DWORD *)v1011 + 2);
        *(_QWORD *)v1020 = v1019;
      }
      ++v1006;
LABEL_1538:
      if (++v1005 == v1004)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1558;
      }
    }
    v1013 = *(_DWORD *)v1011;
    v1014 = *((_DWORD *)v1011 + 1);
    v1015 = *((_DWORD *)v1011 + 2);
    while (1)
    {
      v1016 = *((_DWORD *)v1012 + 7);
      if (v1013 == v1016)
      {
        v1017 = *((_DWORD *)v1012 + 8);
        if (v1014 == v1017)
        {
          v1018 = *((_DWORD *)v1012 + 9);
          if (v1015 < v1018)
            goto LABEL_1542;
          if (v1018 >= v1015)
            goto LABEL_1538;
        }
        else
        {
          if (v1014 < v1017)
            goto LABEL_1542;
          if (v1017 >= v1014)
            goto LABEL_1538;
        }
      }
      else
      {
        if (v1013 < v1016)
          goto LABEL_1542;
        if (v1016 >= v1013)
          goto LABEL_1538;
      }
      ++v1012;
LABEL_1542:
      v1012 = (uint64_t *)*v1012;
      if (!v1012)
        goto LABEL_1554;
    }
  }
  v1006 = 0;
LABEL_1558:
  *v1003 = v1006;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v75 = v3[55];
  if (v75 >> 30)
    v1021 = 1;
  else
    v1021 = (_DWORD)v75 == v5;
  if (v1021)
    goto LABEL_181;
LABEL_1562:
  v1022 = *(_QWORD *)(v1[2] + 8);
  v1023 = v75 & 0xFFFFFFFFCFFFFFFFLL;
  v1024 = *(_QWORD *)(*(_QWORD *)(v1022 + 8) + 2448);
  v1025 = (unsigned int *)(v1024 + 520 * (v75 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1026 = *v1025;
  if ((_DWORD)v1026)
  {
    v1027 = 0;
    v1028 = 0;
    v1029 = **(_QWORD **)(v1022 + 16);
    v1030 = v1024 + 520 * v1023;
    v1031 = v1030 + 364;
    v1032 = v1030 + 340;
    while (1)
    {
      v1033 = (uint64_t *)(v1031 + 12 * v1027);
      v1034 = *(uint64_t **)(v1029 + 2512);
      if (v1034)
        break;
LABEL_1581:
      *(_WORD *)(v1032 + 2 * v1028) = *(_WORD *)(v1032 + 2 * v1027);
      if (v1027 != v1028)
      {
        v1041 = *v1033;
        v1042 = v1031 + 12 * v1028;
        *(_DWORD *)(v1042 + 8) = *((_DWORD *)v1033 + 2);
        *(_QWORD *)v1042 = v1041;
      }
      ++v1028;
LABEL_1565:
      if (++v1027 == v1026)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1585;
      }
    }
    v1035 = *(_DWORD *)v1033;
    v1036 = *((_DWORD *)v1033 + 1);
    v1037 = *((_DWORD *)v1033 + 2);
    while (1)
    {
      v1038 = *((_DWORD *)v1034 + 7);
      if (v1035 == v1038)
      {
        v1039 = *((_DWORD *)v1034 + 8);
        if (v1036 == v1039)
        {
          v1040 = *((_DWORD *)v1034 + 9);
          if (v1037 < v1040)
            goto LABEL_1569;
          if (v1040 >= v1037)
            goto LABEL_1565;
        }
        else
        {
          if (v1036 < v1039)
            goto LABEL_1569;
          if (v1039 >= v1036)
            goto LABEL_1565;
        }
      }
      else
      {
        if (v1035 < v1038)
          goto LABEL_1569;
        if (v1038 >= v1035)
          goto LABEL_1565;
      }
      ++v1034;
LABEL_1569:
      v1034 = (uint64_t *)*v1034;
      if (!v1034)
        goto LABEL_1581;
    }
  }
  v1028 = 0;
LABEL_1585:
  *v1025 = v1028;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v77 = v3[56];
  if (v77 >> 30)
    v1043 = 1;
  else
    v1043 = (_DWORD)v77 == v5;
  if (v1043)
    goto LABEL_186;
LABEL_1589:
  v1044 = *(_QWORD *)(v1[2] + 8);
  v1045 = v77 & 0xFFFFFFFFCFFFFFFFLL;
  v1046 = *(_QWORD *)(*(_QWORD *)(v1044 + 8) + 2448);
  v1047 = (unsigned int *)(v1046 + 520 * (v77 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1048 = *v1047;
  if ((_DWORD)v1048)
  {
    v1049 = 0;
    v1050 = 0;
    v1051 = **(_QWORD **)(v1044 + 16);
    v1052 = v1046 + 520 * v1045;
    v1053 = v1052 + 364;
    v1054 = v1052 + 340;
    while (1)
    {
      v1055 = (uint64_t *)(v1053 + 12 * v1049);
      v1056 = *(uint64_t **)(v1051 + 2512);
      if (v1056)
        break;
LABEL_1608:
      *(_WORD *)(v1054 + 2 * v1050) = *(_WORD *)(v1054 + 2 * v1049);
      if (v1049 != v1050)
      {
        v1063 = *v1055;
        v1064 = v1053 + 12 * v1050;
        *(_DWORD *)(v1064 + 8) = *((_DWORD *)v1055 + 2);
        *(_QWORD *)v1064 = v1063;
      }
      ++v1050;
LABEL_1592:
      if (++v1049 == v1048)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1612;
      }
    }
    v1057 = *(_DWORD *)v1055;
    v1058 = *((_DWORD *)v1055 + 1);
    v1059 = *((_DWORD *)v1055 + 2);
    while (1)
    {
      v1060 = *((_DWORD *)v1056 + 7);
      if (v1057 == v1060)
      {
        v1061 = *((_DWORD *)v1056 + 8);
        if (v1058 == v1061)
        {
          v1062 = *((_DWORD *)v1056 + 9);
          if (v1059 < v1062)
            goto LABEL_1596;
          if (v1062 >= v1059)
            goto LABEL_1592;
        }
        else
        {
          if (v1058 < v1061)
            goto LABEL_1596;
          if (v1061 >= v1058)
            goto LABEL_1592;
        }
      }
      else
      {
        if (v1057 < v1060)
          goto LABEL_1596;
        if (v1060 >= v1057)
          goto LABEL_1592;
      }
      ++v1056;
LABEL_1596:
      v1056 = (uint64_t *)*v1056;
      if (!v1056)
        goto LABEL_1608;
    }
  }
  v1050 = 0;
LABEL_1612:
  *v1047 = v1050;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v79 = v3[57];
  if (v79 >> 30)
    v1065 = 1;
  else
    v1065 = (_DWORD)v79 == v5;
  if (v1065)
    goto LABEL_191;
LABEL_1616:
  v1066 = *(_QWORD *)(v1[2] + 8);
  v1067 = v79 & 0xFFFFFFFFCFFFFFFFLL;
  v1068 = *(_QWORD *)(*(_QWORD *)(v1066 + 8) + 2448);
  v1069 = (unsigned int *)(v1068 + 520 * (v79 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1070 = *v1069;
  if ((_DWORD)v1070)
  {
    v1071 = 0;
    v1072 = 0;
    v1073 = **(_QWORD **)(v1066 + 16);
    v1074 = v1068 + 520 * v1067;
    v1075 = v1074 + 364;
    v1076 = v1074 + 340;
    while (1)
    {
      v1077 = (uint64_t *)(v1075 + 12 * v1071);
      v1078 = *(uint64_t **)(v1073 + 2512);
      if (v1078)
        break;
LABEL_1635:
      *(_WORD *)(v1076 + 2 * v1072) = *(_WORD *)(v1076 + 2 * v1071);
      if (v1071 != v1072)
      {
        v1085 = *v1077;
        v1086 = v1075 + 12 * v1072;
        *(_DWORD *)(v1086 + 8) = *((_DWORD *)v1077 + 2);
        *(_QWORD *)v1086 = v1085;
      }
      ++v1072;
LABEL_1619:
      if (++v1071 == v1070)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1639;
      }
    }
    v1079 = *(_DWORD *)v1077;
    v1080 = *((_DWORD *)v1077 + 1);
    v1081 = *((_DWORD *)v1077 + 2);
    while (1)
    {
      v1082 = *((_DWORD *)v1078 + 7);
      if (v1079 == v1082)
      {
        v1083 = *((_DWORD *)v1078 + 8);
        if (v1080 == v1083)
        {
          v1084 = *((_DWORD *)v1078 + 9);
          if (v1081 < v1084)
            goto LABEL_1623;
          if (v1084 >= v1081)
            goto LABEL_1619;
        }
        else
        {
          if (v1080 < v1083)
            goto LABEL_1623;
          if (v1083 >= v1080)
            goto LABEL_1619;
        }
      }
      else
      {
        if (v1079 < v1082)
          goto LABEL_1623;
        if (v1082 >= v1079)
          goto LABEL_1619;
      }
      ++v1078;
LABEL_1623:
      v1078 = (uint64_t *)*v1078;
      if (!v1078)
        goto LABEL_1635;
    }
  }
  v1072 = 0;
LABEL_1639:
  *v1069 = v1072;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v81 = v3[58];
  if (v81 >> 30)
    v1087 = 1;
  else
    v1087 = (_DWORD)v81 == v5;
  if (v1087)
    goto LABEL_196;
LABEL_1643:
  v1088 = *(_QWORD *)(v1[2] + 8);
  v1089 = v81 & 0xFFFFFFFFCFFFFFFFLL;
  v1090 = *(_QWORD *)(*(_QWORD *)(v1088 + 8) + 2448);
  v1091 = (unsigned int *)(v1090 + 520 * (v81 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1092 = *v1091;
  if ((_DWORD)v1092)
  {
    v1093 = 0;
    v1094 = 0;
    v1095 = **(_QWORD **)(v1088 + 16);
    v1096 = v1090 + 520 * v1089;
    v1097 = v1096 + 364;
    v1098 = v1096 + 340;
    while (1)
    {
      v1099 = (uint64_t *)(v1097 + 12 * v1093);
      v1100 = *(uint64_t **)(v1095 + 2512);
      if (v1100)
        break;
LABEL_1662:
      *(_WORD *)(v1098 + 2 * v1094) = *(_WORD *)(v1098 + 2 * v1093);
      if (v1093 != v1094)
      {
        v1107 = *v1099;
        v1108 = v1097 + 12 * v1094;
        *(_DWORD *)(v1108 + 8) = *((_DWORD *)v1099 + 2);
        *(_QWORD *)v1108 = v1107;
      }
      ++v1094;
LABEL_1646:
      if (++v1093 == v1092)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1666;
      }
    }
    v1101 = *(_DWORD *)v1099;
    v1102 = *((_DWORD *)v1099 + 1);
    v1103 = *((_DWORD *)v1099 + 2);
    while (1)
    {
      v1104 = *((_DWORD *)v1100 + 7);
      if (v1101 == v1104)
      {
        v1105 = *((_DWORD *)v1100 + 8);
        if (v1102 == v1105)
        {
          v1106 = *((_DWORD *)v1100 + 9);
          if (v1103 < v1106)
            goto LABEL_1650;
          if (v1106 >= v1103)
            goto LABEL_1646;
        }
        else
        {
          if (v1102 < v1105)
            goto LABEL_1650;
          if (v1105 >= v1102)
            goto LABEL_1646;
        }
      }
      else
      {
        if (v1101 < v1104)
          goto LABEL_1650;
        if (v1104 >= v1101)
          goto LABEL_1646;
      }
      ++v1100;
LABEL_1650:
      v1100 = (uint64_t *)*v1100;
      if (!v1100)
        goto LABEL_1662;
    }
  }
  v1094 = 0;
LABEL_1666:
  *v1091 = v1094;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v83 = v3[59];
  if (v83 >> 30)
    v1109 = 1;
  else
    v1109 = (_DWORD)v83 == v5;
  if (v1109)
    goto LABEL_201;
LABEL_1670:
  v1110 = *(_QWORD *)(v1[2] + 8);
  v1111 = v83 & 0xFFFFFFFFCFFFFFFFLL;
  v1112 = *(_QWORD *)(*(_QWORD *)(v1110 + 8) + 2448);
  v1113 = (unsigned int *)(v1112 + 520 * (v83 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1114 = *v1113;
  if ((_DWORD)v1114)
  {
    v1115 = 0;
    v1116 = 0;
    v1117 = **(_QWORD **)(v1110 + 16);
    v1118 = v1112 + 520 * v1111;
    v1119 = v1118 + 364;
    v1120 = v1118 + 340;
    while (1)
    {
      v1121 = (uint64_t *)(v1119 + 12 * v1115);
      v1122 = *(uint64_t **)(v1117 + 2512);
      if (v1122)
        break;
LABEL_1689:
      *(_WORD *)(v1120 + 2 * v1116) = *(_WORD *)(v1120 + 2 * v1115);
      if (v1115 != v1116)
      {
        v1129 = *v1121;
        v1130 = v1119 + 12 * v1116;
        *(_DWORD *)(v1130 + 8) = *((_DWORD *)v1121 + 2);
        *(_QWORD *)v1130 = v1129;
      }
      ++v1116;
LABEL_1673:
      if (++v1115 == v1114)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1693;
      }
    }
    v1123 = *(_DWORD *)v1121;
    v1124 = *((_DWORD *)v1121 + 1);
    v1125 = *((_DWORD *)v1121 + 2);
    while (1)
    {
      v1126 = *((_DWORD *)v1122 + 7);
      if (v1123 == v1126)
      {
        v1127 = *((_DWORD *)v1122 + 8);
        if (v1124 == v1127)
        {
          v1128 = *((_DWORD *)v1122 + 9);
          if (v1125 < v1128)
            goto LABEL_1677;
          if (v1128 >= v1125)
            goto LABEL_1673;
        }
        else
        {
          if (v1124 < v1127)
            goto LABEL_1677;
          if (v1127 >= v1124)
            goto LABEL_1673;
        }
      }
      else
      {
        if (v1123 < v1126)
          goto LABEL_1677;
        if (v1126 >= v1123)
          goto LABEL_1673;
      }
      ++v1122;
LABEL_1677:
      v1122 = (uint64_t *)*v1122;
      if (!v1122)
        goto LABEL_1689;
    }
  }
  v1116 = 0;
LABEL_1693:
  *v1113 = v1116;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v85 = v3[60];
  if (v85 >> 30)
    v1131 = 1;
  else
    v1131 = (_DWORD)v85 == v5;
  if (v1131)
    goto LABEL_206;
LABEL_1697:
  v1132 = *(_QWORD *)(v1[2] + 8);
  v1133 = v85 & 0xFFFFFFFFCFFFFFFFLL;
  v1134 = *(_QWORD *)(*(_QWORD *)(v1132 + 8) + 2448);
  v1135 = (unsigned int *)(v1134 + 520 * (v85 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1136 = *v1135;
  if ((_DWORD)v1136)
  {
    v1137 = 0;
    v1138 = 0;
    v1139 = **(_QWORD **)(v1132 + 16);
    v1140 = v1134 + 520 * v1133;
    v1141 = v1140 + 364;
    v1142 = v1140 + 340;
    while (1)
    {
      v1143 = (uint64_t *)(v1141 + 12 * v1137);
      v1144 = *(uint64_t **)(v1139 + 2512);
      if (v1144)
        break;
LABEL_1716:
      *(_WORD *)(v1142 + 2 * v1138) = *(_WORD *)(v1142 + 2 * v1137);
      if (v1137 != v1138)
      {
        v1151 = *v1143;
        v1152 = v1141 + 12 * v1138;
        *(_DWORD *)(v1152 + 8) = *((_DWORD *)v1143 + 2);
        *(_QWORD *)v1152 = v1151;
      }
      ++v1138;
LABEL_1700:
      if (++v1137 == v1136)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1720;
      }
    }
    v1145 = *(_DWORD *)v1143;
    v1146 = *((_DWORD *)v1143 + 1);
    v1147 = *((_DWORD *)v1143 + 2);
    while (1)
    {
      v1148 = *((_DWORD *)v1144 + 7);
      if (v1145 == v1148)
      {
        v1149 = *((_DWORD *)v1144 + 8);
        if (v1146 == v1149)
        {
          v1150 = *((_DWORD *)v1144 + 9);
          if (v1147 < v1150)
            goto LABEL_1704;
          if (v1150 >= v1147)
            goto LABEL_1700;
        }
        else
        {
          if (v1146 < v1149)
            goto LABEL_1704;
          if (v1149 >= v1146)
            goto LABEL_1700;
        }
      }
      else
      {
        if (v1145 < v1148)
          goto LABEL_1704;
        if (v1148 >= v1145)
          goto LABEL_1700;
      }
      ++v1144;
LABEL_1704:
      v1144 = (uint64_t *)*v1144;
      if (!v1144)
        goto LABEL_1716;
    }
  }
  v1138 = 0;
LABEL_1720:
  *v1135 = v1138;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v87 = v3[61];
  if (v87 >> 30)
    v1153 = 1;
  else
    v1153 = (_DWORD)v87 == v5;
  if (v1153)
    goto LABEL_211;
LABEL_1724:
  v1154 = *(_QWORD *)(v1[2] + 8);
  v1155 = v87 & 0xFFFFFFFFCFFFFFFFLL;
  v1156 = *(_QWORD *)(*(_QWORD *)(v1154 + 8) + 2448);
  v1157 = (unsigned int *)(v1156 + 520 * (v87 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1158 = *v1157;
  if ((_DWORD)v1158)
  {
    v1159 = 0;
    v1160 = 0;
    v1161 = **(_QWORD **)(v1154 + 16);
    v1162 = v1156 + 520 * v1155;
    v1163 = v1162 + 364;
    v1164 = v1162 + 340;
    while (1)
    {
      v1165 = (uint64_t *)(v1163 + 12 * v1159);
      v1166 = *(uint64_t **)(v1161 + 2512);
      if (v1166)
        break;
LABEL_1743:
      *(_WORD *)(v1164 + 2 * v1160) = *(_WORD *)(v1164 + 2 * v1159);
      if (v1159 != v1160)
      {
        v1173 = *v1165;
        v1174 = v1163 + 12 * v1160;
        *(_DWORD *)(v1174 + 8) = *((_DWORD *)v1165 + 2);
        *(_QWORD *)v1174 = v1173;
      }
      ++v1160;
LABEL_1727:
      if (++v1159 == v1158)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1747;
      }
    }
    v1167 = *(_DWORD *)v1165;
    v1168 = *((_DWORD *)v1165 + 1);
    v1169 = *((_DWORD *)v1165 + 2);
    while (1)
    {
      v1170 = *((_DWORD *)v1166 + 7);
      if (v1167 == v1170)
      {
        v1171 = *((_DWORD *)v1166 + 8);
        if (v1168 == v1171)
        {
          v1172 = *((_DWORD *)v1166 + 9);
          if (v1169 < v1172)
            goto LABEL_1731;
          if (v1172 >= v1169)
            goto LABEL_1727;
        }
        else
        {
          if (v1168 < v1171)
            goto LABEL_1731;
          if (v1171 >= v1168)
            goto LABEL_1727;
        }
      }
      else
      {
        if (v1167 < v1170)
          goto LABEL_1731;
        if (v1170 >= v1167)
          goto LABEL_1727;
      }
      ++v1166;
LABEL_1731:
      v1166 = (uint64_t *)*v1166;
      if (!v1166)
        goto LABEL_1743;
    }
  }
  v1160 = 0;
LABEL_1747:
  *v1157 = v1160;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v89 = v3[62];
  if (v89 >> 30)
    v1175 = 1;
  else
    v1175 = (_DWORD)v89 == v5;
  if (v1175)
    goto LABEL_216;
LABEL_1751:
  v1176 = *(_QWORD *)(v1[2] + 8);
  v1177 = v89 & 0xFFFFFFFFCFFFFFFFLL;
  v1178 = *(_QWORD *)(*(_QWORD *)(v1176 + 8) + 2448);
  v1179 = (unsigned int *)(v1178 + 520 * (v89 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1180 = *v1179;
  if ((_DWORD)v1180)
  {
    v1181 = 0;
    v1182 = 0;
    v1183 = **(_QWORD **)(v1176 + 16);
    v1184 = v1178 + 520 * v1177;
    v1185 = v1184 + 364;
    v1186 = v1184 + 340;
    while (1)
    {
      v1187 = (uint64_t *)(v1185 + 12 * v1181);
      v1188 = *(uint64_t **)(v1183 + 2512);
      if (v1188)
        break;
LABEL_1770:
      *(_WORD *)(v1186 + 2 * v1182) = *(_WORD *)(v1186 + 2 * v1181);
      if (v1181 != v1182)
      {
        v1195 = *v1187;
        v1196 = v1185 + 12 * v1182;
        *(_DWORD *)(v1196 + 8) = *((_DWORD *)v1187 + 2);
        *(_QWORD *)v1196 = v1195;
      }
      ++v1182;
LABEL_1754:
      if (++v1181 == v1180)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1774;
      }
    }
    v1189 = *(_DWORD *)v1187;
    v1190 = *((_DWORD *)v1187 + 1);
    v1191 = *((_DWORD *)v1187 + 2);
    while (1)
    {
      v1192 = *((_DWORD *)v1188 + 7);
      if (v1189 == v1192)
      {
        v1193 = *((_DWORD *)v1188 + 8);
        if (v1190 == v1193)
        {
          v1194 = *((_DWORD *)v1188 + 9);
          if (v1191 < v1194)
            goto LABEL_1758;
          if (v1194 >= v1191)
            goto LABEL_1754;
        }
        else
        {
          if (v1190 < v1193)
            goto LABEL_1758;
          if (v1193 >= v1190)
            goto LABEL_1754;
        }
      }
      else
      {
        if (v1189 < v1192)
          goto LABEL_1758;
        if (v1192 >= v1189)
          goto LABEL_1754;
      }
      ++v1188;
LABEL_1758:
      v1188 = (uint64_t *)*v1188;
      if (!v1188)
        goto LABEL_1770;
    }
  }
  v1182 = 0;
LABEL_1774:
  *v1179 = v1182;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v91 = v3[63];
  if (v91 >> 30)
    v1197 = 1;
  else
    v1197 = (_DWORD)v91 == v5;
  if (v1197)
    goto LABEL_221;
LABEL_1778:
  v1198 = *(_QWORD *)(v1[2] + 8);
  v1199 = v91 & 0xFFFFFFFFCFFFFFFFLL;
  v1200 = *(_QWORD *)(*(_QWORD *)(v1198 + 8) + 2448);
  v1201 = (unsigned int *)(v1200 + 520 * (v91 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1202 = *v1201;
  if ((_DWORD)v1202)
  {
    v1203 = 0;
    v1204 = 0;
    v1205 = **(_QWORD **)(v1198 + 16);
    v1206 = v1200 + 520 * v1199;
    v1207 = v1206 + 364;
    v1208 = v1206 + 340;
    while (1)
    {
      v1209 = (uint64_t *)(v1207 + 12 * v1203);
      v1210 = *(uint64_t **)(v1205 + 2512);
      if (v1210)
        break;
LABEL_1797:
      *(_WORD *)(v1208 + 2 * v1204) = *(_WORD *)(v1208 + 2 * v1203);
      if (v1203 != v1204)
      {
        v1217 = *v1209;
        v1218 = v1207 + 12 * v1204;
        *(_DWORD *)(v1218 + 8) = *((_DWORD *)v1209 + 2);
        *(_QWORD *)v1218 = v1217;
      }
      ++v1204;
LABEL_1781:
      if (++v1203 == v1202)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1801;
      }
    }
    v1211 = *(_DWORD *)v1209;
    v1212 = *((_DWORD *)v1209 + 1);
    v1213 = *((_DWORD *)v1209 + 2);
    while (1)
    {
      v1214 = *((_DWORD *)v1210 + 7);
      if (v1211 == v1214)
      {
        v1215 = *((_DWORD *)v1210 + 8);
        if (v1212 == v1215)
        {
          v1216 = *((_DWORD *)v1210 + 9);
          if (v1213 < v1216)
            goto LABEL_1785;
          if (v1216 >= v1213)
            goto LABEL_1781;
        }
        else
        {
          if (v1212 < v1215)
            goto LABEL_1785;
          if (v1215 >= v1212)
            goto LABEL_1781;
        }
      }
      else
      {
        if (v1211 < v1214)
          goto LABEL_1785;
        if (v1214 >= v1211)
          goto LABEL_1781;
      }
      ++v1210;
LABEL_1785:
      v1210 = (uint64_t *)*v1210;
      if (!v1210)
        goto LABEL_1797;
    }
  }
  v1204 = 0;
LABEL_1801:
  *v1201 = v1204;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v93 = v3[64];
  if (v93 >> 30)
    v1219 = 1;
  else
    v1219 = (_DWORD)v93 == v5;
  if (v1219)
    goto LABEL_226;
LABEL_1805:
  v1220 = *(_QWORD *)(v1[2] + 8);
  v1221 = v93 & 0xFFFFFFFFCFFFFFFFLL;
  v1222 = *(_QWORD *)(*(_QWORD *)(v1220 + 8) + 2448);
  v1223 = (unsigned int *)(v1222 + 520 * (v93 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1224 = *v1223;
  if ((_DWORD)v1224)
  {
    v1225 = 0;
    v1226 = 0;
    v1227 = **(_QWORD **)(v1220 + 16);
    v1228 = v1222 + 520 * v1221;
    v1229 = v1228 + 364;
    v1230 = v1228 + 340;
    while (1)
    {
      v1231 = (uint64_t *)(v1229 + 12 * v1225);
      v1232 = *(uint64_t **)(v1227 + 2512);
      if (v1232)
        break;
LABEL_1824:
      *(_WORD *)(v1230 + 2 * v1226) = *(_WORD *)(v1230 + 2 * v1225);
      if (v1225 != v1226)
      {
        v1239 = *v1231;
        v1240 = v1229 + 12 * v1226;
        *(_DWORD *)(v1240 + 8) = *((_DWORD *)v1231 + 2);
        *(_QWORD *)v1240 = v1239;
      }
      ++v1226;
LABEL_1808:
      if (++v1225 == v1224)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1828;
      }
    }
    v1233 = *(_DWORD *)v1231;
    v1234 = *((_DWORD *)v1231 + 1);
    v1235 = *((_DWORD *)v1231 + 2);
    while (1)
    {
      v1236 = *((_DWORD *)v1232 + 7);
      if (v1233 == v1236)
      {
        v1237 = *((_DWORD *)v1232 + 8);
        if (v1234 == v1237)
        {
          v1238 = *((_DWORD *)v1232 + 9);
          if (v1235 < v1238)
            goto LABEL_1812;
          if (v1238 >= v1235)
            goto LABEL_1808;
        }
        else
        {
          if (v1234 < v1237)
            goto LABEL_1812;
          if (v1237 >= v1234)
            goto LABEL_1808;
        }
      }
      else
      {
        if (v1233 < v1236)
          goto LABEL_1812;
        if (v1236 >= v1233)
          goto LABEL_1808;
      }
      ++v1232;
LABEL_1812:
      v1232 = (uint64_t *)*v1232;
      if (!v1232)
        goto LABEL_1824;
    }
  }
  v1226 = 0;
LABEL_1828:
  *v1223 = v1226;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v95 = v3[65];
  if (v95 >> 30)
    v1241 = 1;
  else
    v1241 = (_DWORD)v95 == v5;
  if (v1241)
    goto LABEL_231;
LABEL_1832:
  v1242 = *(_QWORD *)(v1[2] + 8);
  v1243 = v95 & 0xFFFFFFFFCFFFFFFFLL;
  v1244 = *(_QWORD *)(*(_QWORD *)(v1242 + 8) + 2448);
  v1245 = (unsigned int *)(v1244 + 520 * (v95 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1246 = *v1245;
  if ((_DWORD)v1246)
  {
    v1247 = 0;
    v1248 = 0;
    v1249 = **(_QWORD **)(v1242 + 16);
    v1250 = v1244 + 520 * v1243;
    v1251 = v1250 + 364;
    v1252 = v1250 + 340;
    while (1)
    {
      v1253 = (uint64_t *)(v1251 + 12 * v1247);
      v1254 = *(uint64_t **)(v1249 + 2512);
      if (v1254)
        break;
LABEL_1851:
      *(_WORD *)(v1252 + 2 * v1248) = *(_WORD *)(v1252 + 2 * v1247);
      if (v1247 != v1248)
      {
        v1261 = *v1253;
        v1262 = v1251 + 12 * v1248;
        *(_DWORD *)(v1262 + 8) = *((_DWORD *)v1253 + 2);
        *(_QWORD *)v1262 = v1261;
      }
      ++v1248;
LABEL_1835:
      if (++v1247 == v1246)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1855;
      }
    }
    v1255 = *(_DWORD *)v1253;
    v1256 = *((_DWORD *)v1253 + 1);
    v1257 = *((_DWORD *)v1253 + 2);
    while (1)
    {
      v1258 = *((_DWORD *)v1254 + 7);
      if (v1255 == v1258)
      {
        v1259 = *((_DWORD *)v1254 + 8);
        if (v1256 == v1259)
        {
          v1260 = *((_DWORD *)v1254 + 9);
          if (v1257 < v1260)
            goto LABEL_1839;
          if (v1260 >= v1257)
            goto LABEL_1835;
        }
        else
        {
          if (v1256 < v1259)
            goto LABEL_1839;
          if (v1259 >= v1256)
            goto LABEL_1835;
        }
      }
      else
      {
        if (v1255 < v1258)
          goto LABEL_1839;
        if (v1258 >= v1255)
          goto LABEL_1835;
      }
      ++v1254;
LABEL_1839:
      v1254 = (uint64_t *)*v1254;
      if (!v1254)
        goto LABEL_1851;
    }
  }
  v1248 = 0;
LABEL_1855:
  *v1245 = v1248;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v97 = v3[66];
  if (v97 >> 30)
    v1263 = 1;
  else
    v1263 = (_DWORD)v97 == v5;
  if (v1263)
    goto LABEL_236;
LABEL_1859:
  v1264 = *(_QWORD *)(v1[2] + 8);
  v1265 = v97 & 0xFFFFFFFFCFFFFFFFLL;
  v1266 = *(_QWORD *)(*(_QWORD *)(v1264 + 8) + 2448);
  v1267 = (unsigned int *)(v1266 + 520 * (v97 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1268 = *v1267;
  if ((_DWORD)v1268)
  {
    v1269 = 0;
    v1270 = 0;
    v1271 = **(_QWORD **)(v1264 + 16);
    v1272 = v1266 + 520 * v1265;
    v1273 = v1272 + 364;
    v1274 = v1272 + 340;
    while (1)
    {
      v1275 = (uint64_t *)(v1273 + 12 * v1269);
      v1276 = *(uint64_t **)(v1271 + 2512);
      if (v1276)
        break;
LABEL_1878:
      *(_WORD *)(v1274 + 2 * v1270) = *(_WORD *)(v1274 + 2 * v1269);
      if (v1269 != v1270)
      {
        v1283 = *v1275;
        v1284 = v1273 + 12 * v1270;
        *(_DWORD *)(v1284 + 8) = *((_DWORD *)v1275 + 2);
        *(_QWORD *)v1284 = v1283;
      }
      ++v1270;
LABEL_1862:
      if (++v1269 == v1268)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1882;
      }
    }
    v1277 = *(_DWORD *)v1275;
    v1278 = *((_DWORD *)v1275 + 1);
    v1279 = *((_DWORD *)v1275 + 2);
    while (1)
    {
      v1280 = *((_DWORD *)v1276 + 7);
      if (v1277 == v1280)
      {
        v1281 = *((_DWORD *)v1276 + 8);
        if (v1278 == v1281)
        {
          v1282 = *((_DWORD *)v1276 + 9);
          if (v1279 < v1282)
            goto LABEL_1866;
          if (v1282 >= v1279)
            goto LABEL_1862;
        }
        else
        {
          if (v1278 < v1281)
            goto LABEL_1866;
          if (v1281 >= v1278)
            goto LABEL_1862;
        }
      }
      else
      {
        if (v1277 < v1280)
          goto LABEL_1866;
        if (v1280 >= v1277)
          goto LABEL_1862;
      }
      ++v1276;
LABEL_1866:
      v1276 = (uint64_t *)*v1276;
      if (!v1276)
        goto LABEL_1878;
    }
  }
  v1270 = 0;
LABEL_1882:
  *v1267 = v1270;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v99 = v3[67];
  if (v99 >> 30)
    v1285 = 1;
  else
    v1285 = (_DWORD)v99 == v5;
  if (v1285)
    goto LABEL_241;
LABEL_1886:
  v1286 = *(_QWORD *)(v1[2] + 8);
  v1287 = v99 & 0xFFFFFFFFCFFFFFFFLL;
  v1288 = *(_QWORD *)(*(_QWORD *)(v1286 + 8) + 2448);
  v1289 = (unsigned int *)(v1288 + 520 * (v99 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1290 = *v1289;
  if ((_DWORD)v1290)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = **(_QWORD **)(v1286 + 16);
    v1294 = v1288 + 520 * v1287;
    v1295 = v1294 + 364;
    v1296 = v1294 + 340;
    while (1)
    {
      v1297 = (uint64_t *)(v1295 + 12 * v1291);
      v1298 = *(uint64_t **)(v1293 + 2512);
      if (v1298)
        break;
LABEL_1905:
      *(_WORD *)(v1296 + 2 * v1292) = *(_WORD *)(v1296 + 2 * v1291);
      if (v1291 != v1292)
      {
        v1305 = *v1297;
        v1306 = v1295 + 12 * v1292;
        *(_DWORD *)(v1306 + 8) = *((_DWORD *)v1297 + 2);
        *(_QWORD *)v1306 = v1305;
      }
      ++v1292;
LABEL_1889:
      if (++v1291 == v1290)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1909;
      }
    }
    v1299 = *(_DWORD *)v1297;
    v1300 = *((_DWORD *)v1297 + 1);
    v1301 = *((_DWORD *)v1297 + 2);
    while (1)
    {
      v1302 = *((_DWORD *)v1298 + 7);
      if (v1299 == v1302)
      {
        v1303 = *((_DWORD *)v1298 + 8);
        if (v1300 == v1303)
        {
          v1304 = *((_DWORD *)v1298 + 9);
          if (v1301 < v1304)
            goto LABEL_1893;
          if (v1304 >= v1301)
            goto LABEL_1889;
        }
        else
        {
          if (v1300 < v1303)
            goto LABEL_1893;
          if (v1303 >= v1300)
            goto LABEL_1889;
        }
      }
      else
      {
        if (v1299 < v1302)
          goto LABEL_1893;
        if (v1302 >= v1299)
          goto LABEL_1889;
      }
      ++v1298;
LABEL_1893:
      v1298 = (uint64_t *)*v1298;
      if (!v1298)
        goto LABEL_1905;
    }
  }
  v1292 = 0;
LABEL_1909:
  *v1289 = v1292;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v101 = v3[68];
  if (v101 >> 30)
    v1307 = 1;
  else
    v1307 = (_DWORD)v101 == v5;
  if (v1307)
    goto LABEL_246;
LABEL_1913:
  v1308 = *(_QWORD *)(v1[2] + 8);
  v1309 = v101 & 0xFFFFFFFFCFFFFFFFLL;
  v1310 = *(_QWORD *)(*(_QWORD *)(v1308 + 8) + 2448);
  v1311 = (unsigned int *)(v1310 + 520 * (v101 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1312 = *v1311;
  if ((_DWORD)v1312)
  {
    v1313 = 0;
    v1314 = 0;
    v1315 = **(_QWORD **)(v1308 + 16);
    v1316 = v1310 + 520 * v1309;
    v1317 = v1316 + 364;
    v1318 = v1316 + 340;
    while (1)
    {
      v1319 = (uint64_t *)(v1317 + 12 * v1313);
      v1320 = *(uint64_t **)(v1315 + 2512);
      if (v1320)
        break;
LABEL_1932:
      *(_WORD *)(v1318 + 2 * v1314) = *(_WORD *)(v1318 + 2 * v1313);
      if (v1313 != v1314)
      {
        v1327 = *v1319;
        v1328 = v1317 + 12 * v1314;
        *(_DWORD *)(v1328 + 8) = *((_DWORD *)v1319 + 2);
        *(_QWORD *)v1328 = v1327;
      }
      ++v1314;
LABEL_1916:
      if (++v1313 == v1312)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1936;
      }
    }
    v1321 = *(_DWORD *)v1319;
    v1322 = *((_DWORD *)v1319 + 1);
    v1323 = *((_DWORD *)v1319 + 2);
    while (1)
    {
      v1324 = *((_DWORD *)v1320 + 7);
      if (v1321 == v1324)
      {
        v1325 = *((_DWORD *)v1320 + 8);
        if (v1322 == v1325)
        {
          v1326 = *((_DWORD *)v1320 + 9);
          if (v1323 < v1326)
            goto LABEL_1920;
          if (v1326 >= v1323)
            goto LABEL_1916;
        }
        else
        {
          if (v1322 < v1325)
            goto LABEL_1920;
          if (v1325 >= v1322)
            goto LABEL_1916;
        }
      }
      else
      {
        if (v1321 < v1324)
          goto LABEL_1920;
        if (v1324 >= v1321)
          goto LABEL_1916;
      }
      ++v1320;
LABEL_1920:
      v1320 = (uint64_t *)*v1320;
      if (!v1320)
        goto LABEL_1932;
    }
  }
  v1314 = 0;
LABEL_1936:
  *v1311 = v1314;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v103 = v3[69];
  if (v103 >> 30)
    v1329 = 1;
  else
    v1329 = (_DWORD)v103 == v5;
  if (v1329)
    goto LABEL_251;
LABEL_1940:
  v1330 = *(_QWORD *)(v1[2] + 8);
  v1331 = v103 & 0xFFFFFFFFCFFFFFFFLL;
  v1332 = *(_QWORD *)(*(_QWORD *)(v1330 + 8) + 2448);
  v1333 = (unsigned int *)(v1332 + 520 * (v103 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1334 = *v1333;
  if ((_DWORD)v1334)
  {
    v1335 = 0;
    v1336 = 0;
    v1337 = **(_QWORD **)(v1330 + 16);
    v1338 = v1332 + 520 * v1331;
    v1339 = v1338 + 364;
    v1340 = v1338 + 340;
    while (1)
    {
      v1341 = (uint64_t *)(v1339 + 12 * v1335);
      v1342 = *(uint64_t **)(v1337 + 2512);
      if (v1342)
        break;
LABEL_1959:
      *(_WORD *)(v1340 + 2 * v1336) = *(_WORD *)(v1340 + 2 * v1335);
      if (v1335 != v1336)
      {
        v1349 = *v1341;
        v1350 = v1339 + 12 * v1336;
        *(_DWORD *)(v1350 + 8) = *((_DWORD *)v1341 + 2);
        *(_QWORD *)v1350 = v1349;
      }
      ++v1336;
LABEL_1943:
      if (++v1335 == v1334)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1963;
      }
    }
    v1343 = *(_DWORD *)v1341;
    v1344 = *((_DWORD *)v1341 + 1);
    v1345 = *((_DWORD *)v1341 + 2);
    while (1)
    {
      v1346 = *((_DWORD *)v1342 + 7);
      if (v1343 == v1346)
      {
        v1347 = *((_DWORD *)v1342 + 8);
        if (v1344 == v1347)
        {
          v1348 = *((_DWORD *)v1342 + 9);
          if (v1345 < v1348)
            goto LABEL_1947;
          if (v1348 >= v1345)
            goto LABEL_1943;
        }
        else
        {
          if (v1344 < v1347)
            goto LABEL_1947;
          if (v1347 >= v1344)
            goto LABEL_1943;
        }
      }
      else
      {
        if (v1343 < v1346)
          goto LABEL_1947;
        if (v1346 >= v1343)
          goto LABEL_1943;
      }
      ++v1342;
LABEL_1947:
      v1342 = (uint64_t *)*v1342;
      if (!v1342)
        goto LABEL_1959;
    }
  }
  v1336 = 0;
LABEL_1963:
  *v1333 = v1336;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v105 = v3[70];
  if (v105 >> 30)
    v1351 = 1;
  else
    v1351 = (_DWORD)v105 == v5;
  if (v1351)
    goto LABEL_256;
LABEL_1967:
  v1352 = *(_QWORD *)(v1[2] + 8);
  v1353 = v105 & 0xFFFFFFFFCFFFFFFFLL;
  v1354 = *(_QWORD *)(*(_QWORD *)(v1352 + 8) + 2448);
  v1355 = (unsigned int *)(v1354 + 520 * (v105 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1356 = *v1355;
  if ((_DWORD)v1356)
  {
    v1357 = 0;
    v1358 = 0;
    v1359 = **(_QWORD **)(v1352 + 16);
    v1360 = v1354 + 520 * v1353;
    v1361 = v1360 + 364;
    v1362 = v1360 + 340;
    while (1)
    {
      v1363 = (uint64_t *)(v1361 + 12 * v1357);
      v1364 = *(uint64_t **)(v1359 + 2512);
      if (v1364)
        break;
LABEL_1986:
      *(_WORD *)(v1362 + 2 * v1358) = *(_WORD *)(v1362 + 2 * v1357);
      if (v1357 != v1358)
      {
        v1371 = *v1363;
        v1372 = v1361 + 12 * v1358;
        *(_DWORD *)(v1372 + 8) = *((_DWORD *)v1363 + 2);
        *(_QWORD *)v1372 = v1371;
      }
      ++v1358;
LABEL_1970:
      if (++v1357 == v1356)
        goto LABEL_1989;
    }
    v1365 = *(_DWORD *)v1363;
    v1366 = *((_DWORD *)v1363 + 1);
    v1367 = *((_DWORD *)v1363 + 2);
    while (1)
    {
      v1368 = *((_DWORD *)v1364 + 7);
      if (v1365 == v1368)
      {
        v1369 = *((_DWORD *)v1364 + 8);
        if (v1366 == v1369)
        {
          v1370 = *((_DWORD *)v1364 + 9);
          if (v1367 < v1370)
            goto LABEL_1974;
          if (v1370 >= v1367)
            goto LABEL_1970;
        }
        else
        {
          if (v1366 < v1369)
            goto LABEL_1974;
          if (v1369 >= v1366)
            goto LABEL_1970;
        }
      }
      else
      {
        if (v1365 < v1368)
          goto LABEL_1974;
        if (v1368 >= v1365)
          goto LABEL_1970;
      }
      ++v1364;
LABEL_1974:
      v1364 = (uint64_t *)*v1364;
      if (!v1364)
        goto LABEL_1986;
    }
  }
  v1358 = 0;
LABEL_1989:
  *v1355 = v1358;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v107 = v3[71];
  if (v107 >> 30)
    v1373 = 1;
  else
    v1373 = (_DWORD)v107 == v5;
  if (v1373)
    goto LABEL_261;
LABEL_1993:
  v1374 = *(_QWORD *)(v1[2] + 8);
  v1375 = v107 & 0xFFFFFFFFCFFFFFFFLL;
  v1376 = *(_QWORD *)(*(_QWORD *)(v1374 + 8) + 2448);
  v1377 = (unsigned int *)(v1376 + 520 * (v107 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1378 = *v1377;
  if ((_DWORD)v1378)
  {
    v1379 = 0;
    v1380 = 0;
    v1381 = **(_QWORD **)(v1374 + 16);
    v1382 = v1376 + 520 * v1375;
    v1383 = v1382 + 364;
    v1384 = v1382 + 340;
    while (1)
    {
      v1385 = (uint64_t *)(v1383 + 12 * v1379);
      v1386 = *(uint64_t **)(v1381 + 2512);
      if (v1386)
        break;
LABEL_2012:
      *(_WORD *)(v1384 + 2 * v1380) = *(_WORD *)(v1384 + 2 * v1379);
      if (v1379 != v1380)
      {
        v1393 = *v1385;
        v1394 = v1383 + 12 * v1380;
        *(_DWORD *)(v1394 + 8) = *((_DWORD *)v1385 + 2);
        *(_QWORD *)v1394 = v1393;
      }
      ++v1380;
LABEL_1996:
      if (++v1379 == v1378)
        goto LABEL_2015;
    }
    v1387 = *(_DWORD *)v1385;
    v1388 = *((_DWORD *)v1385 + 1);
    v1389 = *((_DWORD *)v1385 + 2);
    while (1)
    {
      v1390 = *((_DWORD *)v1386 + 7);
      if (v1387 == v1390)
      {
        v1391 = *((_DWORD *)v1386 + 8);
        if (v1388 == v1391)
        {
          v1392 = *((_DWORD *)v1386 + 9);
          if (v1389 < v1392)
            goto LABEL_2000;
          if (v1392 >= v1389)
            goto LABEL_1996;
        }
        else
        {
          if (v1388 < v1391)
            goto LABEL_2000;
          if (v1391 >= v1388)
            goto LABEL_1996;
        }
      }
      else
      {
        if (v1387 < v1390)
          goto LABEL_2000;
        if (v1390 >= v1387)
          goto LABEL_1996;
      }
      ++v1386;
LABEL_2000:
      v1386 = (uint64_t *)*v1386;
      if (!v1386)
        goto LABEL_2012;
    }
  }
  v1380 = 0;
LABEL_2015:
  *v1377 = v1380;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v109 = v3[72];
  if (v109 >> 30)
    v1395 = 1;
  else
    v1395 = (_DWORD)v109 == v5;
  if (v1395)
    goto LABEL_266;
LABEL_2019:
  v1396 = *(_QWORD *)(v1[2] + 8);
  v1397 = v109 & 0xFFFFFFFFCFFFFFFFLL;
  v1398 = *(_QWORD *)(*(_QWORD *)(v1396 + 8) + 2448);
  v1399 = (unsigned int *)(v1398 + 520 * (v109 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1400 = *v1399;
  if ((_DWORD)v1400)
  {
    v1401 = 0;
    v1402 = 0;
    v1403 = **(_QWORD **)(v1396 + 16);
    v1404 = v1398 + 520 * v1397;
    v1405 = v1404 + 364;
    v1406 = v1404 + 340;
    while (1)
    {
      v1407 = (uint64_t *)(v1405 + 12 * v1401);
      v1408 = *(uint64_t **)(v1403 + 2512);
      if (v1408)
        break;
LABEL_2038:
      *(_WORD *)(v1406 + 2 * v1402) = *(_WORD *)(v1406 + 2 * v1401);
      if (v1401 != v1402)
      {
        v1415 = *v1407;
        v1416 = v1405 + 12 * v1402;
        *(_DWORD *)(v1416 + 8) = *((_DWORD *)v1407 + 2);
        *(_QWORD *)v1416 = v1415;
      }
      ++v1402;
LABEL_2022:
      if (++v1401 == v1400)
        goto LABEL_2041;
    }
    v1409 = *(_DWORD *)v1407;
    v1410 = *((_DWORD *)v1407 + 1);
    v1411 = *((_DWORD *)v1407 + 2);
    while (1)
    {
      v1412 = *((_DWORD *)v1408 + 7);
      if (v1409 == v1412)
      {
        v1413 = *((_DWORD *)v1408 + 8);
        if (v1410 == v1413)
        {
          v1414 = *((_DWORD *)v1408 + 9);
          if (v1411 < v1414)
            goto LABEL_2026;
          if (v1414 >= v1411)
            goto LABEL_2022;
        }
        else
        {
          if (v1410 < v1413)
            goto LABEL_2026;
          if (v1413 >= v1410)
            goto LABEL_2022;
        }
      }
      else
      {
        if (v1409 < v1412)
          goto LABEL_2026;
        if (v1412 >= v1409)
          goto LABEL_2022;
      }
      ++v1408;
LABEL_2026:
      v1408 = (uint64_t *)*v1408;
      if (!v1408)
        goto LABEL_2038;
    }
  }
  v1402 = 0;
LABEL_2041:
  *v1399 = v1402;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v111 = v3[73];
  if (v111 >> 30)
    v1417 = 1;
  else
    v1417 = (_DWORD)v111 == v5;
  if (v1417)
    goto LABEL_271;
LABEL_2045:
  v1418 = *(_QWORD *)(v1[2] + 8);
  v1419 = v111 & 0xFFFFFFFFCFFFFFFFLL;
  v1420 = *(_QWORD *)(*(_QWORD *)(v1418 + 8) + 2448);
  v1421 = (unsigned int *)(v1420 + 520 * (v111 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1422 = *v1421;
  if ((_DWORD)v1422)
  {
    v1423 = 0;
    v1424 = 0;
    v1425 = **(_QWORD **)(v1418 + 16);
    v1426 = v1420 + 520 * v1419;
    v1427 = v1426 + 364;
    v1428 = v1426 + 340;
    while (1)
    {
      v1429 = (uint64_t *)(v1427 + 12 * v1423);
      v1430 = *(uint64_t **)(v1425 + 2512);
      if (v1430)
        break;
LABEL_2064:
      *(_WORD *)(v1428 + 2 * v1424) = *(_WORD *)(v1428 + 2 * v1423);
      if (v1423 != v1424)
      {
        v1437 = *v1429;
        v1438 = v1427 + 12 * v1424;
        *(_DWORD *)(v1438 + 8) = *((_DWORD *)v1429 + 2);
        *(_QWORD *)v1438 = v1437;
      }
      ++v1424;
LABEL_2048:
      if (++v1423 == v1422)
        goto LABEL_2067;
    }
    v1431 = *(_DWORD *)v1429;
    v1432 = *((_DWORD *)v1429 + 1);
    v1433 = *((_DWORD *)v1429 + 2);
    while (1)
    {
      v1434 = *((_DWORD *)v1430 + 7);
      if (v1431 == v1434)
      {
        v1435 = *((_DWORD *)v1430 + 8);
        if (v1432 == v1435)
        {
          v1436 = *((_DWORD *)v1430 + 9);
          if (v1433 < v1436)
            goto LABEL_2052;
          if (v1436 >= v1433)
            goto LABEL_2048;
        }
        else
        {
          if (v1432 < v1435)
            goto LABEL_2052;
          if (v1435 >= v1432)
            goto LABEL_2048;
        }
      }
      else
      {
        if (v1431 < v1434)
          goto LABEL_2052;
        if (v1434 >= v1431)
          goto LABEL_2048;
      }
      ++v1430;
LABEL_2052:
      v1430 = (uint64_t *)*v1430;
      if (!v1430)
        goto LABEL_2064;
    }
  }
  v1424 = 0;
LABEL_2067:
  *v1421 = v1424;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v113 = v3[74];
  if (v113 >> 30)
    v1439 = 1;
  else
    v1439 = (_DWORD)v113 == v5;
  if (v1439)
    goto LABEL_276;
LABEL_2071:
  v1440 = *(_QWORD *)(v1[2] + 8);
  v1441 = v113 & 0xFFFFFFFFCFFFFFFFLL;
  v1442 = *(_QWORD *)(*(_QWORD *)(v1440 + 8) + 2448);
  v1443 = (unsigned int *)(v1442 + 520 * (v113 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1444 = *v1443;
  if ((_DWORD)v1444)
  {
    v1445 = 0;
    v1446 = 0;
    v1447 = **(_QWORD **)(v1440 + 16);
    v1448 = v1442 + 520 * v1441;
    v1449 = v1448 + 364;
    v1450 = v1448 + 340;
    while (1)
    {
      v1451 = (uint64_t *)(v1449 + 12 * v1445);
      v1452 = *(uint64_t **)(v1447 + 2512);
      if (v1452)
        break;
LABEL_2090:
      *(_WORD *)(v1450 + 2 * v1446) = *(_WORD *)(v1450 + 2 * v1445);
      if (v1445 != v1446)
      {
        v1459 = *v1451;
        v1460 = v1449 + 12 * v1446;
        *(_DWORD *)(v1460 + 8) = *((_DWORD *)v1451 + 2);
        *(_QWORD *)v1460 = v1459;
      }
      ++v1446;
LABEL_2074:
      if (++v1445 == v1444)
        goto LABEL_2093;
    }
    v1453 = *(_DWORD *)v1451;
    v1454 = *((_DWORD *)v1451 + 1);
    v1455 = *((_DWORD *)v1451 + 2);
    while (1)
    {
      v1456 = *((_DWORD *)v1452 + 7);
      if (v1453 == v1456)
      {
        v1457 = *((_DWORD *)v1452 + 8);
        if (v1454 == v1457)
        {
          v1458 = *((_DWORD *)v1452 + 9);
          if (v1455 < v1458)
            goto LABEL_2078;
          if (v1458 >= v1455)
            goto LABEL_2074;
        }
        else
        {
          if (v1454 < v1457)
            goto LABEL_2078;
          if (v1457 >= v1454)
            goto LABEL_2074;
        }
      }
      else
      {
        if (v1453 < v1456)
          goto LABEL_2078;
        if (v1456 >= v1453)
          goto LABEL_2074;
      }
      ++v1452;
LABEL_2078:
      v1452 = (uint64_t *)*v1452;
      if (!v1452)
        goto LABEL_2090;
    }
  }
  v1446 = 0;
LABEL_2093:
  *v1443 = v1446;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v115 = v3[75];
  if (v115 >> 30)
    v1461 = 1;
  else
    v1461 = (_DWORD)v115 == v5;
  if (v1461)
    goto LABEL_281;
LABEL_2097:
  v1462 = *(_QWORD *)(v1[2] + 8);
  v1463 = v115 & 0xFFFFFFFFCFFFFFFFLL;
  v1464 = *(_QWORD *)(*(_QWORD *)(v1462 + 8) + 2448);
  v1465 = (unsigned int *)(v1464 + 520 * (v115 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1466 = *v1465;
  if ((_DWORD)v1466)
  {
    v1467 = 0;
    v1468 = 0;
    v1469 = **(_QWORD **)(v1462 + 16);
    v1470 = v1464 + 520 * v1463;
    v1471 = v1470 + 364;
    v1472 = v1470 + 340;
    while (1)
    {
      v1473 = (uint64_t *)(v1471 + 12 * v1467);
      v1474 = *(uint64_t **)(v1469 + 2512);
      if (v1474)
        break;
LABEL_2116:
      *(_WORD *)(v1472 + 2 * v1468) = *(_WORD *)(v1472 + 2 * v1467);
      if (v1467 != v1468)
      {
        v1481 = *v1473;
        v1482 = v1471 + 12 * v1468;
        *(_DWORD *)(v1482 + 8) = *((_DWORD *)v1473 + 2);
        *(_QWORD *)v1482 = v1481;
      }
      ++v1468;
LABEL_2100:
      if (++v1467 == v1466)
        goto LABEL_2119;
    }
    v1475 = *(_DWORD *)v1473;
    v1476 = *((_DWORD *)v1473 + 1);
    v1477 = *((_DWORD *)v1473 + 2);
    while (1)
    {
      v1478 = *((_DWORD *)v1474 + 7);
      if (v1475 == v1478)
      {
        v1479 = *((_DWORD *)v1474 + 8);
        if (v1476 == v1479)
        {
          v1480 = *((_DWORD *)v1474 + 9);
          if (v1477 < v1480)
            goto LABEL_2104;
          if (v1480 >= v1477)
            goto LABEL_2100;
        }
        else
        {
          if (v1476 < v1479)
            goto LABEL_2104;
          if (v1479 >= v1476)
            goto LABEL_2100;
        }
      }
      else
      {
        if (v1475 < v1478)
          goto LABEL_2104;
        if (v1478 >= v1475)
          goto LABEL_2100;
      }
      ++v1474;
LABEL_2104:
      v1474 = (uint64_t *)*v1474;
      if (!v1474)
        goto LABEL_2116;
    }
  }
  v1468 = 0;
LABEL_2119:
  *v1465 = v1468;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v117 = v3[76];
  if (v117 >> 30)
    v1483 = 1;
  else
    v1483 = (_DWORD)v117 == v5;
  if (v1483)
    goto LABEL_286;
LABEL_2123:
  v1484 = *(_QWORD *)(v1[2] + 8);
  v1485 = v117 & 0xFFFFFFFFCFFFFFFFLL;
  v1486 = *(_QWORD *)(*(_QWORD *)(v1484 + 8) + 2448);
  v1487 = (unsigned int *)(v1486 + 520 * (v117 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1488 = *v1487;
  if ((_DWORD)v1488)
  {
    v1489 = 0;
    v1490 = 0;
    v1491 = **(_QWORD **)(v1484 + 16);
    v1492 = v1486 + 520 * v1485;
    v1493 = v1492 + 364;
    v1494 = v1492 + 340;
    while (1)
    {
      v1495 = (uint64_t *)(v1493 + 12 * v1489);
      v1496 = *(uint64_t **)(v1491 + 2512);
      if (v1496)
        break;
LABEL_2142:
      *(_WORD *)(v1494 + 2 * v1490) = *(_WORD *)(v1494 + 2 * v1489);
      if (v1489 != v1490)
      {
        v1503 = *v1495;
        v1504 = v1493 + 12 * v1490;
        *(_DWORD *)(v1504 + 8) = *((_DWORD *)v1495 + 2);
        *(_QWORD *)v1504 = v1503;
      }
      ++v1490;
LABEL_2126:
      if (++v1489 == v1488)
        goto LABEL_2145;
    }
    v1497 = *(_DWORD *)v1495;
    v1498 = *((_DWORD *)v1495 + 1);
    v1499 = *((_DWORD *)v1495 + 2);
    while (1)
    {
      v1500 = *((_DWORD *)v1496 + 7);
      if (v1497 == v1500)
      {
        v1501 = *((_DWORD *)v1496 + 8);
        if (v1498 == v1501)
        {
          v1502 = *((_DWORD *)v1496 + 9);
          if (v1499 < v1502)
            goto LABEL_2130;
          if (v1502 >= v1499)
            goto LABEL_2126;
        }
        else
        {
          if (v1498 < v1501)
            goto LABEL_2130;
          if (v1501 >= v1498)
            goto LABEL_2126;
        }
      }
      else
      {
        if (v1497 < v1500)
          goto LABEL_2130;
        if (v1500 >= v1497)
          goto LABEL_2126;
      }
      ++v1496;
LABEL_2130:
      v1496 = (uint64_t *)*v1496;
      if (!v1496)
        goto LABEL_2142;
    }
  }
  v1490 = 0;
LABEL_2145:
  *v1487 = v1490;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v119 = v3[77];
  if (v119 >> 30)
    v1505 = 1;
  else
    v1505 = (_DWORD)v119 == v5;
  if (v1505)
    goto LABEL_291;
LABEL_2149:
  v1506 = *(_QWORD *)(v1[2] + 8);
  v1507 = v119 & 0xFFFFFFFFCFFFFFFFLL;
  v1508 = *(_QWORD *)(*(_QWORD *)(v1506 + 8) + 2448);
  v1509 = (unsigned int *)(v1508 + 520 * (v119 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1510 = *v1509;
  if ((_DWORD)v1510)
  {
    v1511 = 0;
    v1512 = 0;
    v1513 = **(_QWORD **)(v1506 + 16);
    v1514 = v1508 + 520 * v1507;
    v1515 = v1514 + 364;
    v1516 = v1514 + 340;
    while (1)
    {
      v1517 = (uint64_t *)(v1515 + 12 * v1511);
      v1518 = *(uint64_t **)(v1513 + 2512);
      if (v1518)
        break;
LABEL_2168:
      *(_WORD *)(v1516 + 2 * v1512) = *(_WORD *)(v1516 + 2 * v1511);
      if (v1511 != v1512)
      {
        v1525 = *v1517;
        v1526 = v1515 + 12 * v1512;
        *(_DWORD *)(v1526 + 8) = *((_DWORD *)v1517 + 2);
        *(_QWORD *)v1526 = v1525;
      }
      ++v1512;
LABEL_2152:
      if (++v1511 == v1510)
        goto LABEL_2171;
    }
    v1519 = *(_DWORD *)v1517;
    v1520 = *((_DWORD *)v1517 + 1);
    v1521 = *((_DWORD *)v1517 + 2);
    while (1)
    {
      v1522 = *((_DWORD *)v1518 + 7);
      if (v1519 == v1522)
      {
        v1523 = *((_DWORD *)v1518 + 8);
        if (v1520 == v1523)
        {
          v1524 = *((_DWORD *)v1518 + 9);
          if (v1521 < v1524)
            goto LABEL_2156;
          if (v1524 >= v1521)
            goto LABEL_2152;
        }
        else
        {
          if (v1520 < v1523)
            goto LABEL_2156;
          if (v1523 >= v1520)
            goto LABEL_2152;
        }
      }
      else
      {
        if (v1519 < v1522)
          goto LABEL_2156;
        if (v1522 >= v1519)
          goto LABEL_2152;
      }
      ++v1518;
LABEL_2156:
      v1518 = (uint64_t *)*v1518;
      if (!v1518)
        goto LABEL_2168;
    }
  }
  v1512 = 0;
LABEL_2171:
  *v1509 = v1512;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v121 = v3[78];
  if (v121 >> 30)
    v1527 = 1;
  else
    v1527 = (_DWORD)v121 == v5;
  if (v1527)
    goto LABEL_296;
LABEL_2175:
  v1528 = *(_QWORD *)(v1[2] + 8);
  v1529 = v121 & 0xFFFFFFFFCFFFFFFFLL;
  v1530 = *(_QWORD *)(*(_QWORD *)(v1528 + 8) + 2448);
  v1531 = (unsigned int *)(v1530 + 520 * (v121 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1532 = *v1531;
  if ((_DWORD)v1532)
  {
    v1533 = 0;
    v1534 = 0;
    v1535 = **(_QWORD **)(v1528 + 16);
    v1536 = v1530 + 520 * v1529;
    v1537 = v1536 + 364;
    v1538 = v1536 + 340;
    while (1)
    {
      v1539 = (uint64_t *)(v1537 + 12 * v1533);
      v1540 = *(uint64_t **)(v1535 + 2512);
      if (v1540)
        break;
LABEL_2194:
      *(_WORD *)(v1538 + 2 * v1534) = *(_WORD *)(v1538 + 2 * v1533);
      if (v1533 != v1534)
      {
        v1547 = *v1539;
        v1548 = v1537 + 12 * v1534;
        *(_DWORD *)(v1548 + 8) = *((_DWORD *)v1539 + 2);
        *(_QWORD *)v1548 = v1547;
      }
      ++v1534;
LABEL_2178:
      if (++v1533 == v1532)
        goto LABEL_2197;
    }
    v1541 = *(_DWORD *)v1539;
    v1542 = *((_DWORD *)v1539 + 1);
    v1543 = *((_DWORD *)v1539 + 2);
    while (1)
    {
      v1544 = *((_DWORD *)v1540 + 7);
      if (v1541 == v1544)
      {
        v1545 = *((_DWORD *)v1540 + 8);
        if (v1542 == v1545)
        {
          v1546 = *((_DWORD *)v1540 + 9);
          if (v1543 < v1546)
            goto LABEL_2182;
          if (v1546 >= v1543)
            goto LABEL_2178;
        }
        else
        {
          if (v1542 < v1545)
            goto LABEL_2182;
          if (v1545 >= v1542)
            goto LABEL_2178;
        }
      }
      else
      {
        if (v1541 < v1544)
          goto LABEL_2182;
        if (v1544 >= v1541)
          goto LABEL_2178;
      }
      ++v1540;
LABEL_2182:
      v1540 = (uint64_t *)*v1540;
      if (!v1540)
        goto LABEL_2194;
    }
  }
  v1534 = 0;
LABEL_2197:
  *v1531 = v1534;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v123 = v3[79];
  if (v123 >> 30)
    v1549 = 1;
  else
    v1549 = (_DWORD)v123 == v5;
  if (v1549)
    goto LABEL_301;
LABEL_2201:
  v1550 = *(_QWORD *)(v1[2] + 8);
  v1551 = v123 & 0xFFFFFFFFCFFFFFFFLL;
  v1552 = *(_QWORD *)(*(_QWORD *)(v1550 + 8) + 2448);
  v1553 = (unsigned int *)(v1552 + 520 * (v123 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1554 = *v1553;
  if ((_DWORD)v1554)
  {
    v1555 = 0;
    v1556 = 0;
    v1557 = **(_QWORD **)(v1550 + 16);
    v1558 = v1552 + 520 * v1551;
    v1559 = v1558 + 364;
    v1560 = v1558 + 340;
    while (1)
    {
      v1561 = (uint64_t *)(v1559 + 12 * v1555);
      v1562 = *(uint64_t **)(v1557 + 2512);
      if (v1562)
        break;
LABEL_2220:
      *(_WORD *)(v1560 + 2 * v1556) = *(_WORD *)(v1560 + 2 * v1555);
      if (v1555 != v1556)
      {
        v1569 = *v1561;
        v1570 = v1559 + 12 * v1556;
        *(_DWORD *)(v1570 + 8) = *((_DWORD *)v1561 + 2);
        *(_QWORD *)v1570 = v1569;
      }
      ++v1556;
LABEL_2204:
      if (++v1555 == v1554)
        goto LABEL_2223;
    }
    v1563 = *(_DWORD *)v1561;
    v1564 = *((_DWORD *)v1561 + 1);
    v1565 = *((_DWORD *)v1561 + 2);
    while (1)
    {
      v1566 = *((_DWORD *)v1562 + 7);
      if (v1563 == v1566)
      {
        v1567 = *((_DWORD *)v1562 + 8);
        if (v1564 == v1567)
        {
          v1568 = *((_DWORD *)v1562 + 9);
          if (v1565 < v1568)
            goto LABEL_2208;
          if (v1568 >= v1565)
            goto LABEL_2204;
        }
        else
        {
          if (v1564 < v1567)
            goto LABEL_2208;
          if (v1567 >= v1564)
            goto LABEL_2204;
        }
      }
      else
      {
        if (v1563 < v1566)
          goto LABEL_2208;
        if (v1566 >= v1563)
          goto LABEL_2204;
      }
      ++v1562;
LABEL_2208:
      v1562 = (uint64_t *)*v1562;
      if (!v1562)
        goto LABEL_2220;
    }
  }
  v1556 = 0;
LABEL_2223:
  *v1553 = v1556;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v125 = v3[80];
  if (v125 >> 30)
    v1571 = 1;
  else
    v1571 = (_DWORD)v125 == v5;
  if (v1571)
    goto LABEL_306;
LABEL_2227:
  v1572 = *(_QWORD *)(v1[2] + 8);
  v1573 = v125 & 0xFFFFFFFFCFFFFFFFLL;
  v1574 = *(_QWORD *)(*(_QWORD *)(v1572 + 8) + 2448);
  v1575 = (unsigned int *)(v1574 + 520 * (v125 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1576 = *v1575;
  if ((_DWORD)v1576)
  {
    v1577 = 0;
    v1578 = 0;
    v1579 = **(_QWORD **)(v1572 + 16);
    v1580 = v1574 + 520 * v1573;
    v1581 = v1580 + 364;
    v1582 = v1580 + 340;
    while (1)
    {
      v1583 = (uint64_t *)(v1581 + 12 * v1577);
      v1584 = *(uint64_t **)(v1579 + 2512);
      if (v1584)
        break;
LABEL_2246:
      *(_WORD *)(v1582 + 2 * v1578) = *(_WORD *)(v1582 + 2 * v1577);
      if (v1577 != v1578)
      {
        v1591 = *v1583;
        v1592 = v1581 + 12 * v1578;
        *(_DWORD *)(v1592 + 8) = *((_DWORD *)v1583 + 2);
        *(_QWORD *)v1592 = v1591;
      }
      ++v1578;
LABEL_2230:
      if (++v1577 == v1576)
        goto LABEL_2249;
    }
    v1585 = *(_DWORD *)v1583;
    v1586 = *((_DWORD *)v1583 + 1);
    v1587 = *((_DWORD *)v1583 + 2);
    while (1)
    {
      v1588 = *((_DWORD *)v1584 + 7);
      if (v1585 == v1588)
      {
        v1589 = *((_DWORD *)v1584 + 8);
        if (v1586 == v1589)
        {
          v1590 = *((_DWORD *)v1584 + 9);
          if (v1587 < v1590)
            goto LABEL_2234;
          if (v1590 >= v1587)
            goto LABEL_2230;
        }
        else
        {
          if (v1586 < v1589)
            goto LABEL_2234;
          if (v1589 >= v1586)
            goto LABEL_2230;
        }
      }
      else
      {
        if (v1585 < v1588)
          goto LABEL_2234;
        if (v1588 >= v1585)
          goto LABEL_2230;
      }
      ++v1584;
LABEL_2234:
      v1584 = (uint64_t *)*v1584;
      if (!v1584)
        goto LABEL_2246;
    }
  }
  v1578 = 0;
LABEL_2249:
  *v1575 = v1578;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v127 = v3[81];
  if (v127 >> 30)
    v1593 = 1;
  else
    v1593 = (_DWORD)v127 == v5;
  if (v1593)
    goto LABEL_311;
LABEL_2253:
  v1594 = *(_QWORD *)(v1[2] + 8);
  v1595 = v127 & 0xFFFFFFFFCFFFFFFFLL;
  v1596 = *(_QWORD *)(*(_QWORD *)(v1594 + 8) + 2448);
  v1597 = (unsigned int *)(v1596 + 520 * (v127 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1598 = *v1597;
  if ((_DWORD)v1598)
  {
    v1599 = 0;
    v1600 = 0;
    v1601 = **(_QWORD **)(v1594 + 16);
    v1602 = v1596 + 520 * v1595;
    v1603 = v1602 + 364;
    v1604 = v1602 + 340;
    while (1)
    {
      v1605 = (uint64_t *)(v1603 + 12 * v1599);
      v1606 = *(uint64_t **)(v1601 + 2512);
      if (v1606)
        break;
LABEL_2272:
      *(_WORD *)(v1604 + 2 * v1600) = *(_WORD *)(v1604 + 2 * v1599);
      if (v1599 != v1600)
      {
        v1613 = *v1605;
        v1614 = v1603 + 12 * v1600;
        *(_DWORD *)(v1614 + 8) = *((_DWORD *)v1605 + 2);
        *(_QWORD *)v1614 = v1613;
      }
      ++v1600;
LABEL_2256:
      if (++v1599 == v1598)
        goto LABEL_2275;
    }
    v1607 = *(_DWORD *)v1605;
    v1608 = *((_DWORD *)v1605 + 1);
    v1609 = *((_DWORD *)v1605 + 2);
    while (1)
    {
      v1610 = *((_DWORD *)v1606 + 7);
      if (v1607 == v1610)
      {
        v1611 = *((_DWORD *)v1606 + 8);
        if (v1608 == v1611)
        {
          v1612 = *((_DWORD *)v1606 + 9);
          if (v1609 < v1612)
            goto LABEL_2260;
          if (v1612 >= v1609)
            goto LABEL_2256;
        }
        else
        {
          if (v1608 < v1611)
            goto LABEL_2260;
          if (v1611 >= v1608)
            goto LABEL_2256;
        }
      }
      else
      {
        if (v1607 < v1610)
          goto LABEL_2260;
        if (v1610 >= v1607)
          goto LABEL_2256;
      }
      ++v1606;
LABEL_2260:
      v1606 = (uint64_t *)*v1606;
      if (!v1606)
        goto LABEL_2272;
    }
  }
  v1600 = 0;
LABEL_2275:
  *v1597 = v1600;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v129 = v3[82];
  if (v129 >> 30)
    v1615 = 1;
  else
    v1615 = (_DWORD)v129 == v5;
  if (v1615)
    goto LABEL_316;
LABEL_2279:
  v1616 = *(_QWORD *)(v1[2] + 8);
  v1617 = v129 & 0xFFFFFFFFCFFFFFFFLL;
  v1618 = *(_QWORD *)(*(_QWORD *)(v1616 + 8) + 2448);
  v1619 = (unsigned int *)(v1618 + 520 * (v129 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1620 = *v1619;
  if ((_DWORD)v1620)
  {
    v1621 = 0;
    v1622 = 0;
    v1623 = **(_QWORD **)(v1616 + 16);
    v1624 = v1618 + 520 * v1617;
    v1625 = v1624 + 364;
    v1626 = v1624 + 340;
    while (1)
    {
      v1627 = (uint64_t *)(v1625 + 12 * v1621);
      v1628 = *(uint64_t **)(v1623 + 2512);
      if (v1628)
        break;
LABEL_2298:
      *(_WORD *)(v1626 + 2 * v1622) = *(_WORD *)(v1626 + 2 * v1621);
      if (v1621 != v1622)
      {
        v1635 = *v1627;
        v1636 = v1625 + 12 * v1622;
        *(_DWORD *)(v1636 + 8) = *((_DWORD *)v1627 + 2);
        *(_QWORD *)v1636 = v1635;
      }
      ++v1622;
LABEL_2282:
      if (++v1621 == v1620)
        goto LABEL_2301;
    }
    v1629 = *(_DWORD *)v1627;
    v1630 = *((_DWORD *)v1627 + 1);
    v1631 = *((_DWORD *)v1627 + 2);
    while (1)
    {
      v1632 = *((_DWORD *)v1628 + 7);
      if (v1629 == v1632)
      {
        v1633 = *((_DWORD *)v1628 + 8);
        if (v1630 == v1633)
        {
          v1634 = *((_DWORD *)v1628 + 9);
          if (v1631 < v1634)
            goto LABEL_2286;
          if (v1634 >= v1631)
            goto LABEL_2282;
        }
        else
        {
          if (v1630 < v1633)
            goto LABEL_2286;
          if (v1633 >= v1630)
            goto LABEL_2282;
        }
      }
      else
      {
        if (v1629 < v1632)
          goto LABEL_2286;
        if (v1632 >= v1629)
          goto LABEL_2282;
      }
      ++v1628;
LABEL_2286:
      v1628 = (uint64_t *)*v1628;
      if (!v1628)
        goto LABEL_2298;
    }
  }
  v1622 = 0;
LABEL_2301:
  *v1619 = v1622;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v131 = v3[83];
  if (v131 >> 30)
    v1637 = 1;
  else
    v1637 = (_DWORD)v131 == v5;
  if (v1637)
    goto LABEL_321;
LABEL_2305:
  v1638 = *(_QWORD *)(v1[2] + 8);
  v1639 = v131 & 0xFFFFFFFFCFFFFFFFLL;
  v1640 = *(_QWORD *)(*(_QWORD *)(v1638 + 8) + 2448);
  v1641 = (unsigned int *)(v1640 + 520 * (v131 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1642 = *v1641;
  if ((_DWORD)v1642)
  {
    v1643 = 0;
    v1644 = 0;
    v1645 = **(_QWORD **)(v1638 + 16);
    v1646 = v1640 + 520 * v1639;
    v1647 = v1646 + 364;
    v1648 = v1646 + 340;
    while (1)
    {
      v1649 = (uint64_t *)(v1647 + 12 * v1643);
      v1650 = *(uint64_t **)(v1645 + 2512);
      if (v1650)
        break;
LABEL_2324:
      *(_WORD *)(v1648 + 2 * v1644) = *(_WORD *)(v1648 + 2 * v1643);
      if (v1643 != v1644)
      {
        v1657 = *v1649;
        v1658 = v1647 + 12 * v1644;
        *(_DWORD *)(v1658 + 8) = *((_DWORD *)v1649 + 2);
        *(_QWORD *)v1658 = v1657;
      }
      ++v1644;
LABEL_2308:
      if (++v1643 == v1642)
        goto LABEL_2327;
    }
    v1651 = *(_DWORD *)v1649;
    v1652 = *((_DWORD *)v1649 + 1);
    v1653 = *((_DWORD *)v1649 + 2);
    while (1)
    {
      v1654 = *((_DWORD *)v1650 + 7);
      if (v1651 == v1654)
      {
        v1655 = *((_DWORD *)v1650 + 8);
        if (v1652 == v1655)
        {
          v1656 = *((_DWORD *)v1650 + 9);
          if (v1653 < v1656)
            goto LABEL_2312;
          if (v1656 >= v1653)
            goto LABEL_2308;
        }
        else
        {
          if (v1652 < v1655)
            goto LABEL_2312;
          if (v1655 >= v1652)
            goto LABEL_2308;
        }
      }
      else
      {
        if (v1651 < v1654)
          goto LABEL_2312;
        if (v1654 >= v1651)
          goto LABEL_2308;
      }
      ++v1650;
LABEL_2312:
      v1650 = (uint64_t *)*v1650;
      if (!v1650)
        goto LABEL_2324;
    }
  }
  v1644 = 0;
LABEL_2327:
  *v1641 = v1644;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v133 = v3[84];
  if (v133 >> 30)
    v1659 = 1;
  else
    v1659 = (_DWORD)v133 == v5;
  if (v1659)
    goto LABEL_326;
LABEL_2331:
  v1660 = *(_QWORD *)(v1[2] + 8);
  v1661 = v133 & 0xFFFFFFFFCFFFFFFFLL;
  v1662 = *(_QWORD *)(*(_QWORD *)(v1660 + 8) + 2448);
  v1663 = (unsigned int *)(v1662 + 520 * (v133 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1664 = *v1663;
  if ((_DWORD)v1664)
  {
    v1665 = 0;
    v1666 = 0;
    v1667 = **(_QWORD **)(v1660 + 16);
    v1668 = v1662 + 520 * v1661;
    v1669 = v1668 + 364;
    v1670 = v1668 + 340;
    while (1)
    {
      v1671 = (uint64_t *)(v1669 + 12 * v1665);
      v1672 = *(uint64_t **)(v1667 + 2512);
      if (v1672)
        break;
LABEL_2350:
      *(_WORD *)(v1670 + 2 * v1666) = *(_WORD *)(v1670 + 2 * v1665);
      if (v1665 != v1666)
      {
        v1679 = *v1671;
        v1680 = v1669 + 12 * v1666;
        *(_DWORD *)(v1680 + 8) = *((_DWORD *)v1671 + 2);
        *(_QWORD *)v1680 = v1679;
      }
      ++v1666;
LABEL_2334:
      if (++v1665 == v1664)
        goto LABEL_2353;
    }
    v1673 = *(_DWORD *)v1671;
    v1674 = *((_DWORD *)v1671 + 1);
    v1675 = *((_DWORD *)v1671 + 2);
    while (1)
    {
      v1676 = *((_DWORD *)v1672 + 7);
      if (v1673 == v1676)
      {
        v1677 = *((_DWORD *)v1672 + 8);
        if (v1674 == v1677)
        {
          v1678 = *((_DWORD *)v1672 + 9);
          if (v1675 < v1678)
            goto LABEL_2338;
          if (v1678 >= v1675)
            goto LABEL_2334;
        }
        else
        {
          if (v1674 < v1677)
            goto LABEL_2338;
          if (v1677 >= v1674)
            goto LABEL_2334;
        }
      }
      else
      {
        if (v1673 < v1676)
          goto LABEL_2338;
        if (v1676 >= v1673)
          goto LABEL_2334;
      }
      ++v1672;
LABEL_2338:
      v1672 = (uint64_t *)*v1672;
      if (!v1672)
        goto LABEL_2350;
    }
  }
  v1666 = 0;
LABEL_2353:
  *v1663 = v1666;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v135 = v3[85];
  if (v135 >> 30)
    v1681 = 1;
  else
    v1681 = (_DWORD)v135 == v5;
  if (v1681)
    goto LABEL_331;
LABEL_2357:
  v1682 = *(_QWORD *)(v1[2] + 8);
  v1683 = v135 & 0xFFFFFFFFCFFFFFFFLL;
  v1684 = *(_QWORD *)(*(_QWORD *)(v1682 + 8) + 2448);
  v1685 = (unsigned int *)(v1684 + 520 * (v135 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1686 = *v1685;
  if ((_DWORD)v1686)
  {
    v1687 = 0;
    v1688 = 0;
    v1689 = **(_QWORD **)(v1682 + 16);
    v1690 = v1684 + 520 * v1683;
    v1691 = v1690 + 364;
    v1692 = v1690 + 340;
    while (1)
    {
      v1693 = (uint64_t *)(v1691 + 12 * v1687);
      v1694 = *(uint64_t **)(v1689 + 2512);
      if (v1694)
        break;
LABEL_2376:
      *(_WORD *)(v1692 + 2 * v1688) = *(_WORD *)(v1692 + 2 * v1687);
      if (v1687 != v1688)
      {
        v1701 = *v1693;
        v1702 = v1691 + 12 * v1688;
        *(_DWORD *)(v1702 + 8) = *((_DWORD *)v1693 + 2);
        *(_QWORD *)v1702 = v1701;
      }
      ++v1688;
LABEL_2360:
      if (++v1687 == v1686)
        goto LABEL_2379;
    }
    v1695 = *(_DWORD *)v1693;
    v1696 = *((_DWORD *)v1693 + 1);
    v1697 = *((_DWORD *)v1693 + 2);
    while (1)
    {
      v1698 = *((_DWORD *)v1694 + 7);
      if (v1695 == v1698)
      {
        v1699 = *((_DWORD *)v1694 + 8);
        if (v1696 == v1699)
        {
          v1700 = *((_DWORD *)v1694 + 9);
          if (v1697 < v1700)
            goto LABEL_2364;
          if (v1700 >= v1697)
            goto LABEL_2360;
        }
        else
        {
          if (v1696 < v1699)
            goto LABEL_2364;
          if (v1699 >= v1696)
            goto LABEL_2360;
        }
      }
      else
      {
        if (v1695 < v1698)
          goto LABEL_2364;
        if (v1698 >= v1695)
          goto LABEL_2360;
      }
      ++v1694;
LABEL_2364:
      v1694 = (uint64_t *)*v1694;
      if (!v1694)
        goto LABEL_2376;
    }
  }
  v1688 = 0;
LABEL_2379:
  *v1685 = v1688;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v137 = v3[86];
  if (v137 >> 30)
    v1703 = 1;
  else
    v1703 = (_DWORD)v137 == v5;
  if (v1703)
    goto LABEL_336;
LABEL_2383:
  v1704 = *(_QWORD *)(v1[2] + 8);
  v1705 = v137 & 0xFFFFFFFFCFFFFFFFLL;
  v1706 = *(_QWORD *)(*(_QWORD *)(v1704 + 8) + 2448);
  v1707 = (unsigned int *)(v1706 + 520 * (v137 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1708 = *v1707;
  if ((_DWORD)v1708)
  {
    v1709 = 0;
    v1710 = 0;
    v1711 = **(_QWORD **)(v1704 + 16);
    v1712 = v1706 + 520 * v1705;
    v1713 = v1712 + 364;
    v1714 = v1712 + 340;
    while (1)
    {
      v1715 = (uint64_t *)(v1713 + 12 * v1709);
      v1716 = *(uint64_t **)(v1711 + 2512);
      if (v1716)
        break;
LABEL_2402:
      *(_WORD *)(v1714 + 2 * v1710) = *(_WORD *)(v1714 + 2 * v1709);
      if (v1709 != v1710)
      {
        v1723 = *v1715;
        v1724 = v1713 + 12 * v1710;
        *(_DWORD *)(v1724 + 8) = *((_DWORD *)v1715 + 2);
        *(_QWORD *)v1724 = v1723;
      }
      ++v1710;
LABEL_2386:
      if (++v1709 == v1708)
        goto LABEL_2405;
    }
    v1717 = *(_DWORD *)v1715;
    v1718 = *((_DWORD *)v1715 + 1);
    v1719 = *((_DWORD *)v1715 + 2);
    while (1)
    {
      v1720 = *((_DWORD *)v1716 + 7);
      if (v1717 == v1720)
      {
        v1721 = *((_DWORD *)v1716 + 8);
        if (v1718 == v1721)
        {
          v1722 = *((_DWORD *)v1716 + 9);
          if (v1719 < v1722)
            goto LABEL_2390;
          if (v1722 >= v1719)
            goto LABEL_2386;
        }
        else
        {
          if (v1718 < v1721)
            goto LABEL_2390;
          if (v1721 >= v1718)
            goto LABEL_2386;
        }
      }
      else
      {
        if (v1717 < v1720)
          goto LABEL_2390;
        if (v1720 >= v1717)
          goto LABEL_2386;
      }
      ++v1716;
LABEL_2390:
      v1716 = (uint64_t *)*v1716;
      if (!v1716)
        goto LABEL_2402;
    }
  }
  v1710 = 0;
LABEL_2405:
  *v1707 = v1710;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v139 = v3[87];
  if (v139 >> 30)
    v1725 = 1;
  else
    v1725 = (_DWORD)v139 == v5;
  if (v1725)
    goto LABEL_341;
LABEL_2409:
  v1726 = *(_QWORD *)(v1[2] + 8);
  v1727 = v139 & 0xFFFFFFFFCFFFFFFFLL;
  v1728 = *(_QWORD *)(*(_QWORD *)(v1726 + 8) + 2448);
  v1729 = (unsigned int *)(v1728 + 520 * (v139 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1730 = *v1729;
  if ((_DWORD)v1730)
  {
    v1731 = 0;
    v1732 = 0;
    v1733 = **(_QWORD **)(v1726 + 16);
    v1734 = v1728 + 520 * v1727;
    v1735 = v1734 + 364;
    v1736 = v1734 + 340;
    while (1)
    {
      v1737 = (uint64_t *)(v1735 + 12 * v1731);
      v1738 = *(uint64_t **)(v1733 + 2512);
      if (v1738)
        break;
LABEL_2428:
      *(_WORD *)(v1736 + 2 * v1732) = *(_WORD *)(v1736 + 2 * v1731);
      if (v1731 != v1732)
      {
        v1745 = *v1737;
        v1746 = v1735 + 12 * v1732;
        *(_DWORD *)(v1746 + 8) = *((_DWORD *)v1737 + 2);
        *(_QWORD *)v1746 = v1745;
      }
      ++v1732;
LABEL_2412:
      if (++v1731 == v1730)
        goto LABEL_2431;
    }
    v1739 = *(_DWORD *)v1737;
    v1740 = *((_DWORD *)v1737 + 1);
    v1741 = *((_DWORD *)v1737 + 2);
    while (1)
    {
      v1742 = *((_DWORD *)v1738 + 7);
      if (v1739 == v1742)
      {
        v1743 = *((_DWORD *)v1738 + 8);
        if (v1740 == v1743)
        {
          v1744 = *((_DWORD *)v1738 + 9);
          if (v1741 < v1744)
            goto LABEL_2416;
          if (v1744 >= v1741)
            goto LABEL_2412;
        }
        else
        {
          if (v1740 < v1743)
            goto LABEL_2416;
          if (v1743 >= v1740)
            goto LABEL_2412;
        }
      }
      else
      {
        if (v1739 < v1742)
          goto LABEL_2416;
        if (v1742 >= v1739)
          goto LABEL_2412;
      }
      ++v1738;
LABEL_2416:
      v1738 = (uint64_t *)*v1738;
      if (!v1738)
        goto LABEL_2428;
    }
  }
  v1732 = 0;
LABEL_2431:
  *v1729 = v1732;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v141 = v3[88];
  if (v141 >> 30)
    v1747 = 1;
  else
    v1747 = (_DWORD)v141 == v5;
  if (v1747)
    goto LABEL_346;
LABEL_2435:
  v1748 = *(_QWORD *)(v1[2] + 8);
  v1749 = v141 & 0xFFFFFFFFCFFFFFFFLL;
  v1750 = *(_QWORD *)(*(_QWORD *)(v1748 + 8) + 2448);
  v1751 = (unsigned int *)(v1750 + 520 * (v141 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1752 = *v1751;
  if ((_DWORD)v1752)
  {
    v1753 = 0;
    v1754 = 0;
    v1755 = **(_QWORD **)(v1748 + 16);
    v1756 = v1750 + 520 * v1749;
    v1757 = v1756 + 364;
    v1758 = v1756 + 340;
    while (1)
    {
      v1759 = (uint64_t *)(v1757 + 12 * v1753);
      v1760 = *(uint64_t **)(v1755 + 2512);
      if (v1760)
        break;
LABEL_2454:
      *(_WORD *)(v1758 + 2 * v1754) = *(_WORD *)(v1758 + 2 * v1753);
      if (v1753 != v1754)
      {
        v1767 = *v1759;
        v1768 = v1757 + 12 * v1754;
        *(_DWORD *)(v1768 + 8) = *((_DWORD *)v1759 + 2);
        *(_QWORD *)v1768 = v1767;
      }
      ++v1754;
LABEL_2438:
      if (++v1753 == v1752)
        goto LABEL_2457;
    }
    v1761 = *(_DWORD *)v1759;
    v1762 = *((_DWORD *)v1759 + 1);
    v1763 = *((_DWORD *)v1759 + 2);
    while (1)
    {
      v1764 = *((_DWORD *)v1760 + 7);
      if (v1761 == v1764)
      {
        v1765 = *((_DWORD *)v1760 + 8);
        if (v1762 == v1765)
        {
          v1766 = *((_DWORD *)v1760 + 9);
          if (v1763 < v1766)
            goto LABEL_2442;
          if (v1766 >= v1763)
            goto LABEL_2438;
        }
        else
        {
          if (v1762 < v1765)
            goto LABEL_2442;
          if (v1765 >= v1762)
            goto LABEL_2438;
        }
      }
      else
      {
        if (v1761 < v1764)
          goto LABEL_2442;
        if (v1764 >= v1761)
          goto LABEL_2438;
      }
      ++v1760;
LABEL_2442:
      v1760 = (uint64_t *)*v1760;
      if (!v1760)
        goto LABEL_2454;
    }
  }
  v1754 = 0;
LABEL_2457:
  *v1751 = v1754;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v143 = v3[89];
  if (v143 >> 30)
    v1769 = 1;
  else
    v1769 = (_DWORD)v143 == v5;
  if (v1769)
    goto LABEL_351;
LABEL_2461:
  v1770 = *(_QWORD *)(v1[2] + 8);
  v1771 = v143 & 0xFFFFFFFFCFFFFFFFLL;
  v1772 = *(_QWORD *)(*(_QWORD *)(v1770 + 8) + 2448);
  v1773 = (unsigned int *)(v1772 + 520 * (v143 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1774 = *v1773;
  if ((_DWORD)v1774)
  {
    v1775 = 0;
    v1776 = 0;
    v1777 = **(_QWORD **)(v1770 + 16);
    v1778 = v1772 + 520 * v1771;
    v1779 = v1778 + 364;
    v1780 = v1778 + 340;
    while (1)
    {
      v1781 = (uint64_t *)(v1779 + 12 * v1775);
      v1782 = *(uint64_t **)(v1777 + 2512);
      if (v1782)
        break;
LABEL_2480:
      *(_WORD *)(v1780 + 2 * v1776) = *(_WORD *)(v1780 + 2 * v1775);
      if (v1775 != v1776)
      {
        v1789 = *v1781;
        v1790 = v1779 + 12 * v1776;
        *(_DWORD *)(v1790 + 8) = *((_DWORD *)v1781 + 2);
        *(_QWORD *)v1790 = v1789;
      }
      ++v1776;
LABEL_2464:
      if (++v1775 == v1774)
        goto LABEL_2483;
    }
    v1783 = *(_DWORD *)v1781;
    v1784 = *((_DWORD *)v1781 + 1);
    v1785 = *((_DWORD *)v1781 + 2);
    while (1)
    {
      v1786 = *((_DWORD *)v1782 + 7);
      if (v1783 == v1786)
      {
        v1787 = *((_DWORD *)v1782 + 8);
        if (v1784 == v1787)
        {
          v1788 = *((_DWORD *)v1782 + 9);
          if (v1785 < v1788)
            goto LABEL_2468;
          if (v1788 >= v1785)
            goto LABEL_2464;
        }
        else
        {
          if (v1784 < v1787)
            goto LABEL_2468;
          if (v1787 >= v1784)
            goto LABEL_2464;
        }
      }
      else
      {
        if (v1783 < v1786)
          goto LABEL_2468;
        if (v1786 >= v1783)
          goto LABEL_2464;
      }
      ++v1782;
LABEL_2468:
      v1782 = (uint64_t *)*v1782;
      if (!v1782)
        goto LABEL_2480;
    }
  }
  v1776 = 0;
LABEL_2483:
  *v1773 = v1776;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v145 = v3[90];
  if (v145 >> 30)
    v1791 = 1;
  else
    v1791 = (_DWORD)v145 == v5;
  if (v1791)
    goto LABEL_356;
LABEL_2487:
  v1792 = *(_QWORD *)(v1[2] + 8);
  v1793 = v145 & 0xFFFFFFFFCFFFFFFFLL;
  v1794 = *(_QWORD *)(*(_QWORD *)(v1792 + 8) + 2448);
  v1795 = (unsigned int *)(v1794 + 520 * (v145 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1796 = *v1795;
  if ((_DWORD)v1796)
  {
    v1797 = 0;
    v1798 = 0;
    v1799 = **(_QWORD **)(v1792 + 16);
    v1800 = v1794 + 520 * v1793;
    v1801 = v1800 + 364;
    v1802 = v1800 + 340;
    while (1)
    {
      v1803 = (uint64_t *)(v1801 + 12 * v1797);
      v1804 = *(uint64_t **)(v1799 + 2512);
      if (v1804)
        break;
LABEL_2506:
      *(_WORD *)(v1802 + 2 * v1798) = *(_WORD *)(v1802 + 2 * v1797);
      if (v1797 != v1798)
      {
        v1811 = *v1803;
        v1812 = v1801 + 12 * v1798;
        *(_DWORD *)(v1812 + 8) = *((_DWORD *)v1803 + 2);
        *(_QWORD *)v1812 = v1811;
      }
      ++v1798;
LABEL_2490:
      if (++v1797 == v1796)
        goto LABEL_2509;
    }
    v1805 = *(_DWORD *)v1803;
    v1806 = *((_DWORD *)v1803 + 1);
    v1807 = *((_DWORD *)v1803 + 2);
    while (1)
    {
      v1808 = *((_DWORD *)v1804 + 7);
      if (v1805 == v1808)
      {
        v1809 = *((_DWORD *)v1804 + 8);
        if (v1806 == v1809)
        {
          v1810 = *((_DWORD *)v1804 + 9);
          if (v1807 < v1810)
            goto LABEL_2494;
          if (v1810 >= v1807)
            goto LABEL_2490;
        }
        else
        {
          if (v1806 < v1809)
            goto LABEL_2494;
          if (v1809 >= v1806)
            goto LABEL_2490;
        }
      }
      else
      {
        if (v1805 < v1808)
          goto LABEL_2494;
        if (v1808 >= v1805)
          goto LABEL_2490;
      }
      ++v1804;
LABEL_2494:
      v1804 = (uint64_t *)*v1804;
      if (!v1804)
        goto LABEL_2506;
    }
  }
  v1798 = 0;
LABEL_2509:
  *v1795 = v1798;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v147 = v3[91];
  if (v147 >> 30)
    v1813 = 1;
  else
    v1813 = (_DWORD)v147 == v5;
  if (v1813)
    goto LABEL_361;
LABEL_2513:
  v1814 = *(_QWORD *)(v1[2] + 8);
  v1815 = v147 & 0xFFFFFFFFCFFFFFFFLL;
  v1816 = *(_QWORD *)(*(_QWORD *)(v1814 + 8) + 2448);
  v1817 = (unsigned int *)(v1816 + 520 * (v147 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1818 = *v1817;
  if ((_DWORD)v1818)
  {
    v1819 = 0;
    v1820 = 0;
    v1821 = **(_QWORD **)(v1814 + 16);
    v1822 = v1816 + 520 * v1815;
    v1823 = v1822 + 364;
    v1824 = v1822 + 340;
    while (1)
    {
      v1825 = (uint64_t *)(v1823 + 12 * v1819);
      v1826 = *(uint64_t **)(v1821 + 2512);
      if (v1826)
        break;
LABEL_2532:
      *(_WORD *)(v1824 + 2 * v1820) = *(_WORD *)(v1824 + 2 * v1819);
      if (v1819 != v1820)
      {
        v1833 = *v1825;
        v1834 = v1823 + 12 * v1820;
        *(_DWORD *)(v1834 + 8) = *((_DWORD *)v1825 + 2);
        *(_QWORD *)v1834 = v1833;
      }
      ++v1820;
LABEL_2516:
      if (++v1819 == v1818)
        goto LABEL_2535;
    }
    v1827 = *(_DWORD *)v1825;
    v1828 = *((_DWORD *)v1825 + 1);
    v1829 = *((_DWORD *)v1825 + 2);
    while (1)
    {
      v1830 = *((_DWORD *)v1826 + 7);
      if (v1827 == v1830)
      {
        v1831 = *((_DWORD *)v1826 + 8);
        if (v1828 == v1831)
        {
          v1832 = *((_DWORD *)v1826 + 9);
          if (v1829 < v1832)
            goto LABEL_2520;
          if (v1832 >= v1829)
            goto LABEL_2516;
        }
        else
        {
          if (v1828 < v1831)
            goto LABEL_2520;
          if (v1831 >= v1828)
            goto LABEL_2516;
        }
      }
      else
      {
        if (v1827 < v1830)
          goto LABEL_2520;
        if (v1830 >= v1827)
          goto LABEL_2516;
      }
      ++v1826;
LABEL_2520:
      v1826 = (uint64_t *)*v1826;
      if (!v1826)
        goto LABEL_2532;
    }
  }
  v1820 = 0;
LABEL_2535:
  *v1817 = v1820;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v149 = v3[92];
  if (v149 >> 30)
    v1835 = 1;
  else
    v1835 = (_DWORD)v149 == v5;
  if (v1835)
    goto LABEL_366;
LABEL_2539:
  v1836 = *(_QWORD *)(v1[2] + 8);
  v1837 = v149 & 0xFFFFFFFFCFFFFFFFLL;
  v1838 = *(_QWORD *)(*(_QWORD *)(v1836 + 8) + 2448);
  v1839 = (unsigned int *)(v1838 + 520 * (v149 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1840 = *v1839;
  if ((_DWORD)v1840)
  {
    v1841 = 0;
    v1842 = 0;
    v1843 = **(_QWORD **)(v1836 + 16);
    v1844 = v1838 + 520 * v1837;
    v1845 = v1844 + 364;
    v1846 = v1844 + 340;
    while (1)
    {
      v1847 = (uint64_t *)(v1845 + 12 * v1841);
      v1848 = *(uint64_t **)(v1843 + 2512);
      if (v1848)
        break;
LABEL_2558:
      *(_WORD *)(v1846 + 2 * v1842) = *(_WORD *)(v1846 + 2 * v1841);
      if (v1841 != v1842)
      {
        v1855 = *v1847;
        v1856 = v1845 + 12 * v1842;
        *(_DWORD *)(v1856 + 8) = *((_DWORD *)v1847 + 2);
        *(_QWORD *)v1856 = v1855;
      }
      ++v1842;
LABEL_2542:
      if (++v1841 == v1840)
        goto LABEL_2561;
    }
    v1849 = *(_DWORD *)v1847;
    v1850 = *((_DWORD *)v1847 + 1);
    v1851 = *((_DWORD *)v1847 + 2);
    while (1)
    {
      v1852 = *((_DWORD *)v1848 + 7);
      if (v1849 == v1852)
      {
        v1853 = *((_DWORD *)v1848 + 8);
        if (v1850 == v1853)
        {
          v1854 = *((_DWORD *)v1848 + 9);
          if (v1851 < v1854)
            goto LABEL_2546;
          if (v1854 >= v1851)
            goto LABEL_2542;
        }
        else
        {
          if (v1850 < v1853)
            goto LABEL_2546;
          if (v1853 >= v1850)
            goto LABEL_2542;
        }
      }
      else
      {
        if (v1849 < v1852)
          goto LABEL_2546;
        if (v1852 >= v1849)
          goto LABEL_2542;
      }
      ++v1848;
LABEL_2546:
      v1848 = (uint64_t *)*v1848;
      if (!v1848)
        goto LABEL_2558;
    }
  }
  v1842 = 0;
LABEL_2561:
  *v1839 = v1842;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v151 = v3[93];
  if (v151 >> 30)
    v1857 = 1;
  else
    v1857 = (_DWORD)v151 == v5;
  if (v1857)
    goto LABEL_371;
LABEL_2565:
  v1858 = *(_QWORD *)(v1[2] + 8);
  v1859 = v151 & 0xFFFFFFFFCFFFFFFFLL;
  v1860 = *(_QWORD *)(*(_QWORD *)(v1858 + 8) + 2448);
  v1861 = (unsigned int *)(v1860 + 520 * (v151 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1862 = *v1861;
  if ((_DWORD)v1862)
  {
    v1863 = 0;
    v1864 = 0;
    v1865 = **(_QWORD **)(v1858 + 16);
    v1866 = v1860 + 520 * v1859;
    v1867 = v1866 + 364;
    v1868 = v1866 + 340;
    while (1)
    {
      v1869 = (uint64_t *)(v1867 + 12 * v1863);
      v1870 = *(uint64_t **)(v1865 + 2512);
      if (v1870)
        break;
LABEL_2584:
      *(_WORD *)(v1868 + 2 * v1864) = *(_WORD *)(v1868 + 2 * v1863);
      if (v1863 != v1864)
      {
        v1877 = *v1869;
        v1878 = v1867 + 12 * v1864;
        *(_DWORD *)(v1878 + 8) = *((_DWORD *)v1869 + 2);
        *(_QWORD *)v1878 = v1877;
      }
      ++v1864;
LABEL_2568:
      if (++v1863 == v1862)
        goto LABEL_2587;
    }
    v1871 = *(_DWORD *)v1869;
    v1872 = *((_DWORD *)v1869 + 1);
    v1873 = *((_DWORD *)v1869 + 2);
    while (1)
    {
      v1874 = *((_DWORD *)v1870 + 7);
      if (v1871 == v1874)
      {
        v1875 = *((_DWORD *)v1870 + 8);
        if (v1872 == v1875)
        {
          v1876 = *((_DWORD *)v1870 + 9);
          if (v1873 < v1876)
            goto LABEL_2572;
          if (v1876 >= v1873)
            goto LABEL_2568;
        }
        else
        {
          if (v1872 < v1875)
            goto LABEL_2572;
          if (v1875 >= v1872)
            goto LABEL_2568;
        }
      }
      else
      {
        if (v1871 < v1874)
          goto LABEL_2572;
        if (v1874 >= v1871)
          goto LABEL_2568;
      }
      ++v1870;
LABEL_2572:
      v1870 = (uint64_t *)*v1870;
      if (!v1870)
        goto LABEL_2584;
    }
  }
  v1864 = 0;
LABEL_2587:
  *v1861 = v1864;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v153 = v3[94];
  if (v153 >> 30)
    v1879 = 1;
  else
    v1879 = (_DWORD)v153 == v5;
  if (v1879)
    goto LABEL_376;
LABEL_2591:
  v1880 = *(_QWORD *)(v1[2] + 8);
  v1881 = v153 & 0xFFFFFFFFCFFFFFFFLL;
  v1882 = *(_QWORD *)(*(_QWORD *)(v1880 + 8) + 2448);
  v1883 = (unsigned int *)(v1882 + 520 * (v153 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1884 = *v1883;
  if ((_DWORD)v1884)
  {
    v1885 = 0;
    v1886 = 0;
    v1887 = **(_QWORD **)(v1880 + 16);
    v1888 = v1882 + 520 * v1881;
    v1889 = v1888 + 364;
    v1890 = v1888 + 340;
    while (1)
    {
      v1891 = (uint64_t *)(v1889 + 12 * v1885);
      v1892 = *(uint64_t **)(v1887 + 2512);
      if (v1892)
        break;
LABEL_2610:
      *(_WORD *)(v1890 + 2 * v1886) = *(_WORD *)(v1890 + 2 * v1885);
      if (v1885 != v1886)
      {
        v1899 = *v1891;
        v1900 = v1889 + 12 * v1886;
        *(_DWORD *)(v1900 + 8) = *((_DWORD *)v1891 + 2);
        *(_QWORD *)v1900 = v1899;
      }
      ++v1886;
LABEL_2594:
      if (++v1885 == v1884)
        goto LABEL_2613;
    }
    v1893 = *(_DWORD *)v1891;
    v1894 = *((_DWORD *)v1891 + 1);
    v1895 = *((_DWORD *)v1891 + 2);
    while (1)
    {
      v1896 = *((_DWORD *)v1892 + 7);
      if (v1893 == v1896)
      {
        v1897 = *((_DWORD *)v1892 + 8);
        if (v1894 == v1897)
        {
          v1898 = *((_DWORD *)v1892 + 9);
          if (v1895 < v1898)
            goto LABEL_2598;
          if (v1898 >= v1895)
            goto LABEL_2594;
        }
        else
        {
          if (v1894 < v1897)
            goto LABEL_2598;
          if (v1897 >= v1894)
            goto LABEL_2594;
        }
      }
      else
      {
        if (v1893 < v1896)
          goto LABEL_2598;
        if (v1896 >= v1893)
          goto LABEL_2594;
      }
      ++v1892;
LABEL_2598:
      v1892 = (uint64_t *)*v1892;
      if (!v1892)
        goto LABEL_2610;
    }
  }
  v1886 = 0;
LABEL_2613:
  *v1883 = v1886;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v155 = v3[95];
  if (v155 >> 30)
    v1901 = 1;
  else
    v1901 = (_DWORD)v155 == v5;
  if (v1901)
    goto LABEL_381;
LABEL_2617:
  v1902 = *(_QWORD *)(v1[2] + 8);
  v1903 = v155 & 0xFFFFFFFFCFFFFFFFLL;
  v1904 = *(_QWORD *)(*(_QWORD *)(v1902 + 8) + 2448);
  v1905 = (unsigned int *)(v1904 + 520 * (v155 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1906 = *v1905;
  if ((_DWORD)v1906)
  {
    v1907 = 0;
    v1908 = 0;
    v1909 = **(_QWORD **)(v1902 + 16);
    v1910 = v1904 + 520 * v1903;
    v1911 = v1910 + 364;
    v1912 = v1910 + 340;
    while (1)
    {
      v1913 = (uint64_t *)(v1911 + 12 * v1907);
      v1914 = *(uint64_t **)(v1909 + 2512);
      if (v1914)
        break;
LABEL_2636:
      *(_WORD *)(v1912 + 2 * v1908) = *(_WORD *)(v1912 + 2 * v1907);
      if (v1907 != v1908)
      {
        v1921 = *v1913;
        v1922 = v1911 + 12 * v1908;
        *(_DWORD *)(v1922 + 8) = *((_DWORD *)v1913 + 2);
        *(_QWORD *)v1922 = v1921;
      }
      ++v1908;
LABEL_2620:
      if (++v1907 == v1906)
        goto LABEL_2639;
    }
    v1915 = *(_DWORD *)v1913;
    v1916 = *((_DWORD *)v1913 + 1);
    v1917 = *((_DWORD *)v1913 + 2);
    while (1)
    {
      v1918 = *((_DWORD *)v1914 + 7);
      if (v1915 == v1918)
      {
        v1919 = *((_DWORD *)v1914 + 8);
        if (v1916 == v1919)
        {
          v1920 = *((_DWORD *)v1914 + 9);
          if (v1917 < v1920)
            goto LABEL_2624;
          if (v1920 >= v1917)
            goto LABEL_2620;
        }
        else
        {
          if (v1916 < v1919)
            goto LABEL_2624;
          if (v1919 >= v1916)
            goto LABEL_2620;
        }
      }
      else
      {
        if (v1915 < v1918)
          goto LABEL_2624;
        if (v1918 >= v1915)
          goto LABEL_2620;
      }
      ++v1914;
LABEL_2624:
      v1914 = (uint64_t *)*v1914;
      if (!v1914)
        goto LABEL_2636;
    }
  }
  v1908 = 0;
LABEL_2639:
  *v1905 = v1908;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v157 = v3[96];
  if (v157 >> 30)
    v1923 = 1;
  else
    v1923 = (_DWORD)v157 == v5;
  if (v1923)
    goto LABEL_386;
LABEL_2643:
  v1924 = *(_QWORD *)(v1[2] + 8);
  v1925 = v157 & 0xFFFFFFFFCFFFFFFFLL;
  v1926 = *(_QWORD *)(*(_QWORD *)(v1924 + 8) + 2448);
  v1927 = (unsigned int *)(v1926 + 520 * (v157 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1928 = *v1927;
  if ((_DWORD)v1928)
  {
    v1929 = 0;
    v1930 = 0;
    v1931 = **(_QWORD **)(v1924 + 16);
    v1932 = v1926 + 520 * v1925;
    v1933 = v1932 + 364;
    v1934 = v1932 + 340;
    while (1)
    {
      v1935 = (uint64_t *)(v1933 + 12 * v1929);
      v1936 = *(uint64_t **)(v1931 + 2512);
      if (v1936)
        break;
LABEL_2662:
      *(_WORD *)(v1934 + 2 * v1930) = *(_WORD *)(v1934 + 2 * v1929);
      if (v1929 != v1930)
      {
        v1943 = *v1935;
        v1944 = v1933 + 12 * v1930;
        *(_DWORD *)(v1944 + 8) = *((_DWORD *)v1935 + 2);
        *(_QWORD *)v1944 = v1943;
      }
      ++v1930;
LABEL_2646:
      if (++v1929 == v1928)
        goto LABEL_2665;
    }
    v1937 = *(_DWORD *)v1935;
    v1938 = *((_DWORD *)v1935 + 1);
    v1939 = *((_DWORD *)v1935 + 2);
    while (1)
    {
      v1940 = *((_DWORD *)v1936 + 7);
      if (v1937 == v1940)
      {
        v1941 = *((_DWORD *)v1936 + 8);
        if (v1938 == v1941)
        {
          v1942 = *((_DWORD *)v1936 + 9);
          if (v1939 < v1942)
            goto LABEL_2650;
          if (v1942 >= v1939)
            goto LABEL_2646;
        }
        else
        {
          if (v1938 < v1941)
            goto LABEL_2650;
          if (v1941 >= v1938)
            goto LABEL_2646;
        }
      }
      else
      {
        if (v1937 < v1940)
          goto LABEL_2650;
        if (v1940 >= v1937)
          goto LABEL_2646;
      }
      ++v1936;
LABEL_2650:
      v1936 = (uint64_t *)*v1936;
      if (!v1936)
        goto LABEL_2662;
    }
  }
  v1930 = 0;
LABEL_2665:
  *v1927 = v1930;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v159 = v3[97];
  if (v159 >> 30)
    v1945 = 1;
  else
    v1945 = (_DWORD)v159 == v5;
  if (v1945)
    goto LABEL_391;
LABEL_2669:
  v1946 = *(_QWORD *)(v1[2] + 8);
  v1947 = v159 & 0xFFFFFFFFCFFFFFFFLL;
  v1948 = *(_QWORD *)(*(_QWORD *)(v1946 + 8) + 2448);
  v1949 = (unsigned int *)(v1948 + 520 * (v159 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1950 = *v1949;
  if ((_DWORD)v1950)
  {
    v1951 = 0;
    v1952 = 0;
    v1953 = **(_QWORD **)(v1946 + 16);
    v1954 = v1948 + 520 * v1947;
    v1955 = v1954 + 364;
    v1956 = v1954 + 340;
    while (1)
    {
      v1957 = (uint64_t *)(v1955 + 12 * v1951);
      v1958 = *(uint64_t **)(v1953 + 2512);
      if (v1958)
        break;
LABEL_2688:
      *(_WORD *)(v1956 + 2 * v1952) = *(_WORD *)(v1956 + 2 * v1951);
      if (v1951 != v1952)
      {
        v1965 = *v1957;
        v1966 = v1955 + 12 * v1952;
        *(_DWORD *)(v1966 + 8) = *((_DWORD *)v1957 + 2);
        *(_QWORD *)v1966 = v1965;
      }
      ++v1952;
LABEL_2672:
      if (++v1951 == v1950)
        goto LABEL_2691;
    }
    v1959 = *(_DWORD *)v1957;
    v1960 = *((_DWORD *)v1957 + 1);
    v1961 = *((_DWORD *)v1957 + 2);
    while (1)
    {
      v1962 = *((_DWORD *)v1958 + 7);
      if (v1959 == v1962)
      {
        v1963 = *((_DWORD *)v1958 + 8);
        if (v1960 == v1963)
        {
          v1964 = *((_DWORD *)v1958 + 9);
          if (v1961 < v1964)
            goto LABEL_2676;
          if (v1964 >= v1961)
            goto LABEL_2672;
        }
        else
        {
          if (v1960 < v1963)
            goto LABEL_2676;
          if (v1963 >= v1960)
            goto LABEL_2672;
        }
      }
      else
      {
        if (v1959 < v1962)
          goto LABEL_2676;
        if (v1962 >= v1959)
          goto LABEL_2672;
      }
      ++v1958;
LABEL_2676:
      v1958 = (uint64_t *)*v1958;
      if (!v1958)
        goto LABEL_2688;
    }
  }
  v1952 = 0;
LABEL_2691:
  *v1949 = v1952;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v161 = v3[98];
  if (v161 >> 30)
    v1967 = 1;
  else
    v1967 = (_DWORD)v161 == v5;
  if (v1967)
    goto LABEL_396;
LABEL_2695:
  v1968 = *(_QWORD *)(v1[2] + 8);
  v1969 = v161 & 0xFFFFFFFFCFFFFFFFLL;
  v1970 = *(_QWORD *)(*(_QWORD *)(v1968 + 8) + 2448);
  v1971 = (unsigned int *)(v1970 + 520 * (v161 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1972 = *v1971;
  if ((_DWORD)v1972)
  {
    v1973 = 0;
    v1974 = 0;
    v1975 = **(_QWORD **)(v1968 + 16);
    v1976 = v1970 + 520 * v1969;
    v1977 = v1976 + 364;
    v1978 = v1976 + 340;
    while (1)
    {
      v1979 = (uint64_t *)(v1977 + 12 * v1973);
      v1980 = *(uint64_t **)(v1975 + 2512);
      if (v1980)
        break;
LABEL_2714:
      *(_WORD *)(v1978 + 2 * v1974) = *(_WORD *)(v1978 + 2 * v1973);
      if (v1973 != v1974)
      {
        v1987 = *v1979;
        v1988 = v1977 + 12 * v1974;
        *(_DWORD *)(v1988 + 8) = *((_DWORD *)v1979 + 2);
        *(_QWORD *)v1988 = v1987;
      }
      ++v1974;
LABEL_2698:
      if (++v1973 == v1972)
        goto LABEL_2717;
    }
    v1981 = *(_DWORD *)v1979;
    v1982 = *((_DWORD *)v1979 + 1);
    v1983 = *((_DWORD *)v1979 + 2);
    while (1)
    {
      v1984 = *((_DWORD *)v1980 + 7);
      if (v1981 == v1984)
      {
        v1985 = *((_DWORD *)v1980 + 8);
        if (v1982 == v1985)
        {
          v1986 = *((_DWORD *)v1980 + 9);
          if (v1983 < v1986)
            goto LABEL_2702;
          if (v1986 >= v1983)
            goto LABEL_2698;
        }
        else
        {
          if (v1982 < v1985)
            goto LABEL_2702;
          if (v1985 >= v1982)
            goto LABEL_2698;
        }
      }
      else
      {
        if (v1981 < v1984)
          goto LABEL_2702;
        if (v1984 >= v1981)
          goto LABEL_2698;
      }
      ++v1980;
LABEL_2702:
      v1980 = (uint64_t *)*v1980;
      if (!v1980)
        goto LABEL_2714;
    }
  }
  v1974 = 0;
LABEL_2717:
  *v1971 = v1974;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v163 = v3[99];
  if (v163 >> 30)
    v1989 = 1;
  else
    v1989 = (_DWORD)v163 == v5;
  if (v1989)
    goto LABEL_401;
LABEL_2721:
  v1990 = *(_QWORD *)(v1[2] + 8);
  v1991 = v163 & 0xFFFFFFFFCFFFFFFFLL;
  v1992 = *(_QWORD *)(*(_QWORD *)(v1990 + 8) + 2448);
  v1993 = (unsigned int *)(v1992 + 520 * (v163 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1994 = *v1993;
  if ((_DWORD)v1994)
  {
    v1995 = 0;
    v1996 = 0;
    v1997 = **(_QWORD **)(v1990 + 16);
    v1998 = v1992 + 520 * v1991;
    v1999 = v1998 + 364;
    v2000 = v1998 + 340;
    while (1)
    {
      v2001 = (uint64_t *)(v1999 + 12 * v1995);
      v2002 = *(uint64_t **)(v1997 + 2512);
      if (v2002)
        break;
LABEL_2740:
      *(_WORD *)(v2000 + 2 * v1996) = *(_WORD *)(v2000 + 2 * v1995);
      if (v1995 != v1996)
      {
        v2009 = *v2001;
        v2010 = v1999 + 12 * v1996;
        *(_DWORD *)(v2010 + 8) = *((_DWORD *)v2001 + 2);
        *(_QWORD *)v2010 = v2009;
      }
      ++v1996;
LABEL_2724:
      if (++v1995 == v1994)
        goto LABEL_2743;
    }
    v2003 = *(_DWORD *)v2001;
    v2004 = *((_DWORD *)v2001 + 1);
    v2005 = *((_DWORD *)v2001 + 2);
    while (1)
    {
      v2006 = *((_DWORD *)v2002 + 7);
      if (v2003 == v2006)
      {
        v2007 = *((_DWORD *)v2002 + 8);
        if (v2004 == v2007)
        {
          v2008 = *((_DWORD *)v2002 + 9);
          if (v2005 < v2008)
            goto LABEL_2728;
          if (v2008 >= v2005)
            goto LABEL_2724;
        }
        else
        {
          if (v2004 < v2007)
            goto LABEL_2728;
          if (v2007 >= v2004)
            goto LABEL_2724;
        }
      }
      else
      {
        if (v2003 < v2006)
          goto LABEL_2728;
        if (v2006 >= v2003)
          goto LABEL_2724;
      }
      ++v2002;
LABEL_2728:
      v2002 = (uint64_t *)*v2002;
      if (!v2002)
        goto LABEL_2740;
    }
  }
  v1996 = 0;
LABEL_2743:
  *v1993 = v1996;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v165 = v3[100];
  if (v165 >> 30)
    v2011 = 1;
  else
    v2011 = (_DWORD)v165 == v5;
  if (v2011)
    goto LABEL_406;
LABEL_2747:
  v2012 = *(_QWORD *)(v1[2] + 8);
  v2013 = v165 & 0xFFFFFFFFCFFFFFFFLL;
  v2014 = *(_QWORD *)(*(_QWORD *)(v2012 + 8) + 2448);
  v2015 = (unsigned int *)(v2014 + 520 * (v165 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2016 = *v2015;
  if ((_DWORD)v2016)
  {
    v2017 = 0;
    v2018 = 0;
    v2019 = **(_QWORD **)(v2012 + 16);
    v2020 = v2014 + 520 * v2013;
    v2021 = v2020 + 364;
    v2022 = v2020 + 340;
    while (1)
    {
      v2023 = (uint64_t *)(v2021 + 12 * v2017);
      v2024 = *(uint64_t **)(v2019 + 2512);
      if (v2024)
        break;
LABEL_2766:
      *(_WORD *)(v2022 + 2 * v2018) = *(_WORD *)(v2022 + 2 * v2017);
      if (v2017 != v2018)
      {
        v2031 = *v2023;
        v2032 = v2021 + 12 * v2018;
        *(_DWORD *)(v2032 + 8) = *((_DWORD *)v2023 + 2);
        *(_QWORD *)v2032 = v2031;
      }
      ++v2018;
LABEL_2750:
      if (++v2017 == v2016)
        goto LABEL_2769;
    }
    v2025 = *(_DWORD *)v2023;
    v2026 = *((_DWORD *)v2023 + 1);
    v2027 = *((_DWORD *)v2023 + 2);
    while (1)
    {
      v2028 = *((_DWORD *)v2024 + 7);
      if (v2025 == v2028)
      {
        v2029 = *((_DWORD *)v2024 + 8);
        if (v2026 == v2029)
        {
          v2030 = *((_DWORD *)v2024 + 9);
          if (v2027 < v2030)
            goto LABEL_2754;
          if (v2030 >= v2027)
            goto LABEL_2750;
        }
        else
        {
          if (v2026 < v2029)
            goto LABEL_2754;
          if (v2029 >= v2026)
            goto LABEL_2750;
        }
      }
      else
      {
        if (v2025 < v2028)
          goto LABEL_2754;
        if (v2028 >= v2025)
          goto LABEL_2750;
      }
      ++v2024;
LABEL_2754:
      v2024 = (uint64_t *)*v2024;
      if (!v2024)
        goto LABEL_2766;
    }
  }
  v2018 = 0;
LABEL_2769:
  *v2015 = v2018;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v167 = v3[101];
  if (v167 >> 30)
    v2033 = 1;
  else
    v2033 = (_DWORD)v167 == v5;
  if (v2033)
    goto LABEL_411;
LABEL_2773:
  v2034 = *(_QWORD *)(v1[2] + 8);
  v2035 = v167 & 0xFFFFFFFFCFFFFFFFLL;
  v2036 = *(_QWORD *)(*(_QWORD *)(v2034 + 8) + 2448);
  v2037 = (unsigned int *)(v2036 + 520 * (v167 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2038 = *v2037;
  if ((_DWORD)v2038)
  {
    v2039 = 0;
    v2040 = 0;
    v2041 = **(_QWORD **)(v2034 + 16);
    v2042 = v2036 + 520 * v2035;
    v2043 = v2042 + 364;
    v2044 = v2042 + 340;
    while (1)
    {
      v2045 = (uint64_t *)(v2043 + 12 * v2039);
      v2046 = *(uint64_t **)(v2041 + 2512);
      if (v2046)
        break;
LABEL_2792:
      *(_WORD *)(v2044 + 2 * v2040) = *(_WORD *)(v2044 + 2 * v2039);
      if (v2039 != v2040)
      {
        v2053 = *v2045;
        v2054 = v2043 + 12 * v2040;
        *(_DWORD *)(v2054 + 8) = *((_DWORD *)v2045 + 2);
        *(_QWORD *)v2054 = v2053;
      }
      ++v2040;
LABEL_2776:
      if (++v2039 == v2038)
        goto LABEL_2795;
    }
    v2047 = *(_DWORD *)v2045;
    v2048 = *((_DWORD *)v2045 + 1);
    v2049 = *((_DWORD *)v2045 + 2);
    while (1)
    {
      v2050 = *((_DWORD *)v2046 + 7);
      if (v2047 == v2050)
      {
        v2051 = *((_DWORD *)v2046 + 8);
        if (v2048 == v2051)
        {
          v2052 = *((_DWORD *)v2046 + 9);
          if (v2049 < v2052)
            goto LABEL_2780;
          if (v2052 >= v2049)
            goto LABEL_2776;
        }
        else
        {
          if (v2048 < v2051)
            goto LABEL_2780;
          if (v2051 >= v2048)
            goto LABEL_2776;
        }
      }
      else
      {
        if (v2047 < v2050)
          goto LABEL_2780;
        if (v2050 >= v2047)
          goto LABEL_2776;
      }
      ++v2046;
LABEL_2780:
      v2046 = (uint64_t *)*v2046;
      if (!v2046)
        goto LABEL_2792;
    }
  }
  v2040 = 0;
LABEL_2795:
  *v2037 = v2040;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v169 = v3[102];
  if (v169 >> 30)
    v2055 = 1;
  else
    v2055 = (_DWORD)v169 == v5;
  if (v2055)
    goto LABEL_416;
LABEL_2799:
  v2056 = *(_QWORD *)(v1[2] + 8);
  v2057 = v169 & 0xFFFFFFFFCFFFFFFFLL;
  v2058 = *(_QWORD *)(*(_QWORD *)(v2056 + 8) + 2448);
  v2059 = (unsigned int *)(v2058 + 520 * (v169 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2060 = *v2059;
  if ((_DWORD)v2060)
  {
    v2061 = 0;
    v2062 = 0;
    v2063 = **(_QWORD **)(v2056 + 16);
    v2064 = v2058 + 520 * v2057;
    v2065 = v2064 + 364;
    v2066 = v2064 + 340;
    while (1)
    {
      v2067 = (uint64_t *)(v2065 + 12 * v2061);
      v2068 = *(uint64_t **)(v2063 + 2512);
      if (v2068)
        break;
LABEL_2818:
      *(_WORD *)(v2066 + 2 * v2062) = *(_WORD *)(v2066 + 2 * v2061);
      if (v2061 != v2062)
      {
        v2075 = *v2067;
        v2076 = v2065 + 12 * v2062;
        *(_DWORD *)(v2076 + 8) = *((_DWORD *)v2067 + 2);
        *(_QWORD *)v2076 = v2075;
      }
      ++v2062;
LABEL_2802:
      if (++v2061 == v2060)
        goto LABEL_2821;
    }
    v2069 = *(_DWORD *)v2067;
    v2070 = *((_DWORD *)v2067 + 1);
    v2071 = *((_DWORD *)v2067 + 2);
    while (1)
    {
      v2072 = *((_DWORD *)v2068 + 7);
      if (v2069 == v2072)
      {
        v2073 = *((_DWORD *)v2068 + 8);
        if (v2070 == v2073)
        {
          v2074 = *((_DWORD *)v2068 + 9);
          if (v2071 < v2074)
            goto LABEL_2806;
          if (v2074 >= v2071)
            goto LABEL_2802;
        }
        else
        {
          if (v2070 < v2073)
            goto LABEL_2806;
          if (v2073 >= v2070)
            goto LABEL_2802;
        }
      }
      else
      {
        if (v2069 < v2072)
          goto LABEL_2806;
        if (v2072 >= v2069)
          goto LABEL_2802;
      }
      ++v2068;
LABEL_2806:
      v2068 = (uint64_t *)*v2068;
      if (!v2068)
        goto LABEL_2818;
    }
  }
  v2062 = 0;
LABEL_2821:
  *v2059 = v2062;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v171 = v3[103];
  if (v171 >> 30)
    v2077 = 1;
  else
    v2077 = (_DWORD)v171 == v5;
  if (v2077)
    goto LABEL_421;
LABEL_2825:
  v2078 = *(_QWORD *)(v1[2] + 8);
  v2079 = v171 & 0xFFFFFFFFCFFFFFFFLL;
  v2080 = *(_QWORD *)(*(_QWORD *)(v2078 + 8) + 2448);
  v2081 = (unsigned int *)(v2080 + 520 * (v171 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2082 = *v2081;
  if ((_DWORD)v2082)
  {
    v2083 = 0;
    v2084 = 0;
    v2085 = **(_QWORD **)(v2078 + 16);
    v2086 = v2080 + 520 * v2079;
    v2087 = v2086 + 364;
    v2088 = v2086 + 340;
    while (1)
    {
      v2089 = (uint64_t *)(v2087 + 12 * v2083);
      v2090 = *(uint64_t **)(v2085 + 2512);
      if (v2090)
        break;
LABEL_2844:
      *(_WORD *)(v2088 + 2 * v2084) = *(_WORD *)(v2088 + 2 * v2083);
      if (v2083 != v2084)
      {
        v2097 = *v2089;
        v2098 = v2087 + 12 * v2084;
        *(_DWORD *)(v2098 + 8) = *((_DWORD *)v2089 + 2);
        *(_QWORD *)v2098 = v2097;
      }
      ++v2084;
LABEL_2828:
      if (++v2083 == v2082)
        goto LABEL_2847;
    }
    v2091 = *(_DWORD *)v2089;
    v2092 = *((_DWORD *)v2089 + 1);
    v2093 = *((_DWORD *)v2089 + 2);
    while (1)
    {
      v2094 = *((_DWORD *)v2090 + 7);
      if (v2091 == v2094)
      {
        v2095 = *((_DWORD *)v2090 + 8);
        if (v2092 == v2095)
        {
          v2096 = *((_DWORD *)v2090 + 9);
          if (v2093 < v2096)
            goto LABEL_2832;
          if (v2096 >= v2093)
            goto LABEL_2828;
        }
        else
        {
          if (v2092 < v2095)
            goto LABEL_2832;
          if (v2095 >= v2092)
            goto LABEL_2828;
        }
      }
      else
      {
        if (v2091 < v2094)
          goto LABEL_2832;
        if (v2094 >= v2091)
          goto LABEL_2828;
      }
      ++v2090;
LABEL_2832:
      v2090 = (uint64_t *)*v2090;
      if (!v2090)
        goto LABEL_2844;
    }
  }
  v2084 = 0;
LABEL_2847:
  *v2081 = v2084;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v173 = v3[104];
  if (v173 >> 30)
    v2099 = 1;
  else
    v2099 = (_DWORD)v173 == v5;
  if (v2099)
    goto LABEL_426;
LABEL_2851:
  v2100 = *(_QWORD *)(v1[2] + 8);
  v2101 = v173 & 0xFFFFFFFFCFFFFFFFLL;
  v2102 = *(_QWORD *)(*(_QWORD *)(v2100 + 8) + 2448);
  v2103 = (unsigned int *)(v2102 + 520 * (v173 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2104 = *v2103;
  if ((_DWORD)v2104)
  {
    v2105 = 0;
    v2106 = 0;
    v2107 = **(_QWORD **)(v2100 + 16);
    v2108 = v2102 + 520 * v2101;
    v2109 = v2108 + 364;
    v2110 = v2108 + 340;
    while (1)
    {
      v2111 = (uint64_t *)(v2109 + 12 * v2105);
      v2112 = *(uint64_t **)(v2107 + 2512);
      if (v2112)
        break;
LABEL_2870:
      *(_WORD *)(v2110 + 2 * v2106) = *(_WORD *)(v2110 + 2 * v2105);
      if (v2105 != v2106)
      {
        v2119 = *v2111;
        v2120 = v2109 + 12 * v2106;
        *(_DWORD *)(v2120 + 8) = *((_DWORD *)v2111 + 2);
        *(_QWORD *)v2120 = v2119;
      }
      ++v2106;
LABEL_2854:
      if (++v2105 == v2104)
        goto LABEL_2873;
    }
    v2113 = *(_DWORD *)v2111;
    v2114 = *((_DWORD *)v2111 + 1);
    v2115 = *((_DWORD *)v2111 + 2);
    while (1)
    {
      v2116 = *((_DWORD *)v2112 + 7);
      if (v2113 == v2116)
      {
        v2117 = *((_DWORD *)v2112 + 8);
        if (v2114 == v2117)
        {
          v2118 = *((_DWORD *)v2112 + 9);
          if (v2115 < v2118)
            goto LABEL_2858;
          if (v2118 >= v2115)
            goto LABEL_2854;
        }
        else
        {
          if (v2114 < v2117)
            goto LABEL_2858;
          if (v2117 >= v2114)
            goto LABEL_2854;
        }
      }
      else
      {
        if (v2113 < v2116)
          goto LABEL_2858;
        if (v2116 >= v2113)
          goto LABEL_2854;
      }
      ++v2112;
LABEL_2858:
      v2112 = (uint64_t *)*v2112;
      if (!v2112)
        goto LABEL_2870;
    }
  }
  v2106 = 0;
LABEL_2873:
  *v2103 = v2106;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v175 = v3[105];
  if (v175 >> 30)
    v2121 = 1;
  else
    v2121 = (_DWORD)v175 == v5;
  if (v2121)
    goto LABEL_431;
LABEL_2877:
  v2122 = *(_QWORD *)(v1[2] + 8);
  v2123 = v175 & 0xFFFFFFFFCFFFFFFFLL;
  v2124 = *(_QWORD *)(*(_QWORD *)(v2122 + 8) + 2448);
  v2125 = (unsigned int *)(v2124 + 520 * (v175 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2126 = *v2125;
  if ((_DWORD)v2126)
  {
    v2127 = 0;
    v2128 = 0;
    v2129 = **(_QWORD **)(v2122 + 16);
    v2130 = v2124 + 520 * v2123;
    v2131 = v2130 + 364;
    v2132 = v2130 + 340;
    while (1)
    {
      v2133 = (uint64_t *)(v2131 + 12 * v2127);
      v2134 = *(uint64_t **)(v2129 + 2512);
      if (v2134)
        break;
LABEL_2896:
      *(_WORD *)(v2132 + 2 * v2128) = *(_WORD *)(v2132 + 2 * v2127);
      if (v2127 != v2128)
      {
        v2141 = *v2133;
        v2142 = v2131 + 12 * v2128;
        *(_DWORD *)(v2142 + 8) = *((_DWORD *)v2133 + 2);
        *(_QWORD *)v2142 = v2141;
      }
      ++v2128;
LABEL_2880:
      if (++v2127 == v2126)
        goto LABEL_2899;
    }
    v2135 = *(_DWORD *)v2133;
    v2136 = *((_DWORD *)v2133 + 1);
    v2137 = *((_DWORD *)v2133 + 2);
    while (1)
    {
      v2138 = *((_DWORD *)v2134 + 7);
      if (v2135 == v2138)
      {
        v2139 = *((_DWORD *)v2134 + 8);
        if (v2136 == v2139)
        {
          v2140 = *((_DWORD *)v2134 + 9);
          if (v2137 < v2140)
            goto LABEL_2884;
          if (v2140 >= v2137)
            goto LABEL_2880;
        }
        else
        {
          if (v2136 < v2139)
            goto LABEL_2884;
          if (v2139 >= v2136)
            goto LABEL_2880;
        }
      }
      else
      {
        if (v2135 < v2138)
          goto LABEL_2884;
        if (v2138 >= v2135)
          goto LABEL_2880;
      }
      ++v2134;
LABEL_2884:
      v2134 = (uint64_t *)*v2134;
      if (!v2134)
        goto LABEL_2896;
    }
  }
  v2128 = 0;
LABEL_2899:
  *v2125 = v2128;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v177 = v3[106];
  if (v177 >> 30)
    v2143 = 1;
  else
    v2143 = (_DWORD)v177 == v5;
  if (v2143)
    goto LABEL_436;
LABEL_2903:
  v2144 = *(_QWORD *)(v1[2] + 8);
  v2145 = v177 & 0xFFFFFFFFCFFFFFFFLL;
  v2146 = *(_QWORD *)(*(_QWORD *)(v2144 + 8) + 2448);
  v2147 = (unsigned int *)(v2146 + 520 * (v177 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2148 = *v2147;
  if ((_DWORD)v2148)
  {
    v2149 = 0;
    v2150 = 0;
    v2151 = **(_QWORD **)(v2144 + 16);
    v2152 = v2146 + 520 * v2145;
    v2153 = v2152 + 364;
    v2154 = v2152 + 340;
    while (1)
    {
      v2155 = (uint64_t *)(v2153 + 12 * v2149);
      v2156 = *(uint64_t **)(v2151 + 2512);
      if (v2156)
        break;
LABEL_2922:
      *(_WORD *)(v2154 + 2 * v2150) = *(_WORD *)(v2154 + 2 * v2149);
      if (v2149 != v2150)
      {
        v2163 = *v2155;
        v2164 = v2153 + 12 * v2150;
        *(_DWORD *)(v2164 + 8) = *((_DWORD *)v2155 + 2);
        *(_QWORD *)v2164 = v2163;
      }
      ++v2150;
LABEL_2906:
      if (++v2149 == v2148)
        goto LABEL_2925;
    }
    v2157 = *(_DWORD *)v2155;
    v2158 = *((_DWORD *)v2155 + 1);
    v2159 = *((_DWORD *)v2155 + 2);
    while (1)
    {
      v2160 = *((_DWORD *)v2156 + 7);
      if (v2157 == v2160)
      {
        v2161 = *((_DWORD *)v2156 + 8);
        if (v2158 == v2161)
        {
          v2162 = *((_DWORD *)v2156 + 9);
          if (v2159 < v2162)
            goto LABEL_2910;
          if (v2162 >= v2159)
            goto LABEL_2906;
        }
        else
        {
          if (v2158 < v2161)
            goto LABEL_2910;
          if (v2161 >= v2158)
            goto LABEL_2906;
        }
      }
      else
      {
        if (v2157 < v2160)
          goto LABEL_2910;
        if (v2160 >= v2157)
          goto LABEL_2906;
      }
      ++v2156;
LABEL_2910:
      v2156 = (uint64_t *)*v2156;
      if (!v2156)
        goto LABEL_2922;
    }
  }
  v2150 = 0;
LABEL_2925:
  *v2147 = v2150;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v179 = v3[107];
  if (v179 >> 30)
    v2165 = 1;
  else
    v2165 = (_DWORD)v179 == v5;
  if (v2165)
    goto LABEL_441;
LABEL_2929:
  v2166 = *(_QWORD *)(v1[2] + 8);
  v2167 = v179 & 0xFFFFFFFFCFFFFFFFLL;
  v2168 = *(_QWORD *)(*(_QWORD *)(v2166 + 8) + 2448);
  v2169 = (unsigned int *)(v2168 + 520 * (v179 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2170 = *v2169;
  if ((_DWORD)v2170)
  {
    v2171 = 0;
    v2172 = 0;
    v2173 = **(_QWORD **)(v2166 + 16);
    v2174 = v2168 + 520 * v2167;
    v2175 = v2174 + 364;
    v2176 = v2174 + 340;
    while (1)
    {
      v2177 = (uint64_t *)(v2175 + 12 * v2171);
      v2178 = *(uint64_t **)(v2173 + 2512);
      if (v2178)
        break;
LABEL_2948:
      *(_WORD *)(v2176 + 2 * v2172) = *(_WORD *)(v2176 + 2 * v2171);
      if (v2171 != v2172)
      {
        v2185 = *v2177;
        v2186 = v2175 + 12 * v2172;
        *(_DWORD *)(v2186 + 8) = *((_DWORD *)v2177 + 2);
        *(_QWORD *)v2186 = v2185;
      }
      ++v2172;
LABEL_2932:
      if (++v2171 == v2170)
        goto LABEL_2951;
    }
    v2179 = *(_DWORD *)v2177;
    v2180 = *((_DWORD *)v2177 + 1);
    v2181 = *((_DWORD *)v2177 + 2);
    while (1)
    {
      v2182 = *((_DWORD *)v2178 + 7);
      if (v2179 == v2182)
      {
        v2183 = *((_DWORD *)v2178 + 8);
        if (v2180 == v2183)
        {
          v2184 = *((_DWORD *)v2178 + 9);
          if (v2181 < v2184)
            goto LABEL_2936;
          if (v2184 >= v2181)
            goto LABEL_2932;
        }
        else
        {
          if (v2180 < v2183)
            goto LABEL_2936;
          if (v2183 >= v2180)
            goto LABEL_2932;
        }
      }
      else
      {
        if (v2179 < v2182)
          goto LABEL_2936;
        if (v2182 >= v2179)
          goto LABEL_2932;
      }
      ++v2178;
LABEL_2936:
      v2178 = (uint64_t *)*v2178;
      if (!v2178)
        goto LABEL_2948;
    }
  }
  v2172 = 0;
LABEL_2951:
  *v2169 = v2172;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v181 = v3[108];
  if (v181 >> 30)
    v2187 = 1;
  else
    v2187 = (_DWORD)v181 == v5;
  if (v2187)
    goto LABEL_446;
LABEL_2955:
  v2188 = *(_QWORD *)(v1[2] + 8);
  v2189 = v181 & 0xFFFFFFFFCFFFFFFFLL;
  v2190 = *(_QWORD *)(*(_QWORD *)(v2188 + 8) + 2448);
  v2191 = (unsigned int *)(v2190 + 520 * (v181 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2192 = *v2191;
  if ((_DWORD)v2192)
  {
    v2193 = 0;
    v2194 = 0;
    v2195 = **(_QWORD **)(v2188 + 16);
    v2196 = v2190 + 520 * v2189;
    v2197 = v2196 + 364;
    v2198 = v2196 + 340;
    while (1)
    {
      v2199 = (uint64_t *)(v2197 + 12 * v2193);
      v2200 = *(uint64_t **)(v2195 + 2512);
      if (v2200)
        break;
LABEL_2974:
      *(_WORD *)(v2198 + 2 * v2194) = *(_WORD *)(v2198 + 2 * v2193);
      if (v2193 != v2194)
      {
        v2207 = *v2199;
        v2208 = v2197 + 12 * v2194;
        *(_DWORD *)(v2208 + 8) = *((_DWORD *)v2199 + 2);
        *(_QWORD *)v2208 = v2207;
      }
      ++v2194;
LABEL_2958:
      if (++v2193 == v2192)
        goto LABEL_2977;
    }
    v2201 = *(_DWORD *)v2199;
    v2202 = *((_DWORD *)v2199 + 1);
    v2203 = *((_DWORD *)v2199 + 2);
    while (1)
    {
      v2204 = *((_DWORD *)v2200 + 7);
      if (v2201 == v2204)
      {
        v2205 = *((_DWORD *)v2200 + 8);
        if (v2202 == v2205)
        {
          v2206 = *((_DWORD *)v2200 + 9);
          if (v2203 < v2206)
            goto LABEL_2962;
          if (v2206 >= v2203)
            goto LABEL_2958;
        }
        else
        {
          if (v2202 < v2205)
            goto LABEL_2962;
          if (v2205 >= v2202)
            goto LABEL_2958;
        }
      }
      else
      {
        if (v2201 < v2204)
          goto LABEL_2962;
        if (v2204 >= v2201)
          goto LABEL_2958;
      }
      ++v2200;
LABEL_2962:
      v2200 = (uint64_t *)*v2200;
      if (!v2200)
        goto LABEL_2974;
    }
  }
  v2194 = 0;
LABEL_2977:
  *v2191 = v2194;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v183 = v3[109];
  if (v183 >> 30)
    v2209 = 1;
  else
    v2209 = (_DWORD)v183 == v5;
  if (v2209)
    goto LABEL_451;
LABEL_2981:
  v2210 = *(_QWORD *)(v1[2] + 8);
  v2211 = v183 & 0xFFFFFFFFCFFFFFFFLL;
  v2212 = *(_QWORD *)(*(_QWORD *)(v2210 + 8) + 2448);
  v2213 = (unsigned int *)(v2212 + 520 * (v183 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2214 = *v2213;
  if ((_DWORD)v2214)
  {
    v2215 = 0;
    v2216 = 0;
    v2217 = **(_QWORD **)(v2210 + 16);
    v2218 = v2212 + 520 * v2211;
    v2219 = v2218 + 364;
    v2220 = v2218 + 340;
    while (1)
    {
      v2221 = (uint64_t *)(v2219 + 12 * v2215);
      v2222 = *(uint64_t **)(v2217 + 2512);
      if (v2222)
        break;
LABEL_3000:
      *(_WORD *)(v2220 + 2 * v2216) = *(_WORD *)(v2220 + 2 * v2215);
      if (v2215 != v2216)
      {
        v2229 = *v2221;
        v2230 = v2219 + 12 * v2216;
        *(_DWORD *)(v2230 + 8) = *((_DWORD *)v2221 + 2);
        *(_QWORD *)v2230 = v2229;
      }
      ++v2216;
LABEL_2984:
      if (++v2215 == v2214)
        goto LABEL_3003;
    }
    v2223 = *(_DWORD *)v2221;
    v2224 = *((_DWORD *)v2221 + 1);
    v2225 = *((_DWORD *)v2221 + 2);
    while (1)
    {
      v2226 = *((_DWORD *)v2222 + 7);
      if (v2223 == v2226)
      {
        v2227 = *((_DWORD *)v2222 + 8);
        if (v2224 == v2227)
        {
          v2228 = *((_DWORD *)v2222 + 9);
          if (v2225 < v2228)
            goto LABEL_2988;
          if (v2228 >= v2225)
            goto LABEL_2984;
        }
        else
        {
          if (v2224 < v2227)
            goto LABEL_2988;
          if (v2227 >= v2224)
            goto LABEL_2984;
        }
      }
      else
      {
        if (v2223 < v2226)
          goto LABEL_2988;
        if (v2226 >= v2223)
          goto LABEL_2984;
      }
      ++v2222;
LABEL_2988:
      v2222 = (uint64_t *)*v2222;
      if (!v2222)
        goto LABEL_3000;
    }
  }
  v2216 = 0;
LABEL_3003:
  *v2213 = v2216;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v185 = v3[110];
  if (v185 >> 30)
    v2231 = 1;
  else
    v2231 = (_DWORD)v185 == v5;
  if (v2231)
    goto LABEL_456;
LABEL_3007:
  v2232 = *(_QWORD *)(v1[2] + 8);
  v2233 = v185 & 0xFFFFFFFFCFFFFFFFLL;
  v2234 = *(_QWORD *)(*(_QWORD *)(v2232 + 8) + 2448);
  v2235 = (unsigned int *)(v2234 + 520 * (v185 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2236 = *v2235;
  if ((_DWORD)v2236)
  {
    v2237 = 0;
    v2238 = 0;
    v2239 = **(_QWORD **)(v2232 + 16);
    v2240 = v2234 + 520 * v2233;
    v2241 = v2240 + 364;
    v2242 = v2240 + 340;
    while (1)
    {
      v2243 = (uint64_t *)(v2241 + 12 * v2237);
      v2244 = *(uint64_t **)(v2239 + 2512);
      if (v2244)
        break;
LABEL_3026:
      *(_WORD *)(v2242 + 2 * v2238) = *(_WORD *)(v2242 + 2 * v2237);
      if (v2237 != v2238)
      {
        v2251 = *v2243;
        v2252 = v2241 + 12 * v2238;
        *(_DWORD *)(v2252 + 8) = *((_DWORD *)v2243 + 2);
        *(_QWORD *)v2252 = v2251;
      }
      ++v2238;
LABEL_3010:
      if (++v2237 == v2236)
        goto LABEL_3029;
    }
    v2245 = *(_DWORD *)v2243;
    v2246 = *((_DWORD *)v2243 + 1);
    v2247 = *((_DWORD *)v2243 + 2);
    while (1)
    {
      v2248 = *((_DWORD *)v2244 + 7);
      if (v2245 == v2248)
      {
        v2249 = *((_DWORD *)v2244 + 8);
        if (v2246 == v2249)
        {
          v2250 = *((_DWORD *)v2244 + 9);
          if (v2247 < v2250)
            goto LABEL_3014;
          if (v2250 >= v2247)
            goto LABEL_3010;
        }
        else
        {
          if (v2246 < v2249)
            goto LABEL_3014;
          if (v2249 >= v2246)
            goto LABEL_3010;
        }
      }
      else
      {
        if (v2245 < v2248)
          goto LABEL_3014;
        if (v2248 >= v2245)
          goto LABEL_3010;
      }
      ++v2244;
LABEL_3014:
      v2244 = (uint64_t *)*v2244;
      if (!v2244)
        goto LABEL_3026;
    }
  }
  v2238 = 0;
LABEL_3029:
  *v2235 = v2238;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v187 = v3[111];
  if (v187 >> 30)
    v2253 = 1;
  else
    v2253 = (_DWORD)v187 == v5;
  if (v2253)
    goto LABEL_461;
LABEL_3033:
  v2254 = *(_QWORD *)(v1[2] + 8);
  v2255 = v187 & 0xFFFFFFFFCFFFFFFFLL;
  v2256 = *(_QWORD *)(*(_QWORD *)(v2254 + 8) + 2448);
  v2257 = (unsigned int *)(v2256 + 520 * (v187 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2258 = *v2257;
  if ((_DWORD)v2258)
  {
    v2259 = 0;
    v2260 = 0;
    v2261 = **(_QWORD **)(v2254 + 16);
    v2262 = v2256 + 520 * v2255;
    v2263 = v2262 + 364;
    v2264 = v2262 + 340;
    while (1)
    {
      v2265 = (uint64_t *)(v2263 + 12 * v2259);
      v2266 = *(uint64_t **)(v2261 + 2512);
      if (v2266)
        break;
LABEL_3052:
      *(_WORD *)(v2264 + 2 * v2260) = *(_WORD *)(v2264 + 2 * v2259);
      if (v2259 != v2260)
      {
        v2273 = *v2265;
        v2274 = v2263 + 12 * v2260;
        *(_DWORD *)(v2274 + 8) = *((_DWORD *)v2265 + 2);
        *(_QWORD *)v2274 = v2273;
      }
      ++v2260;
LABEL_3036:
      if (++v2259 == v2258)
        goto LABEL_3055;
    }
    v2267 = *(_DWORD *)v2265;
    v2268 = *((_DWORD *)v2265 + 1);
    v2269 = *((_DWORD *)v2265 + 2);
    while (1)
    {
      v2270 = *((_DWORD *)v2266 + 7);
      if (v2267 == v2270)
      {
        v2271 = *((_DWORD *)v2266 + 8);
        if (v2268 == v2271)
        {
          v2272 = *((_DWORD *)v2266 + 9);
          if (v2269 < v2272)
            goto LABEL_3040;
          if (v2272 >= v2269)
            goto LABEL_3036;
        }
        else
        {
          if (v2268 < v2271)
            goto LABEL_3040;
          if (v2271 >= v2268)
            goto LABEL_3036;
        }
      }
      else
      {
        if (v2267 < v2270)
          goto LABEL_3040;
        if (v2270 >= v2267)
          goto LABEL_3036;
      }
      ++v2266;
LABEL_3040:
      v2266 = (uint64_t *)*v2266;
      if (!v2266)
        goto LABEL_3052;
    }
  }
  v2260 = 0;
LABEL_3055:
  *v2257 = v2260;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v189 = v3[112];
  if (v189 >> 30)
    v2275 = 1;
  else
    v2275 = (_DWORD)v189 == v5;
  if (v2275)
    goto LABEL_466;
LABEL_3059:
  v2276 = *(_QWORD *)(v1[2] + 8);
  v2277 = v189 & 0xFFFFFFFFCFFFFFFFLL;
  v2278 = *(_QWORD *)(*(_QWORD *)(v2276 + 8) + 2448);
  v2279 = (unsigned int *)(v2278 + 520 * (v189 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2280 = *v2279;
  if ((_DWORD)v2280)
  {
    v2281 = 0;
    v2282 = 0;
    v2283 = **(_QWORD **)(v2276 + 16);
    v2284 = v2278 + 520 * v2277;
    v2285 = v2284 + 364;
    v2286 = v2284 + 340;
    while (1)
    {
      v2287 = (uint64_t *)(v2285 + 12 * v2281);
      v2288 = *(uint64_t **)(v2283 + 2512);
      if (v2288)
        break;
LABEL_3078:
      *(_WORD *)(v2286 + 2 * v2282) = *(_WORD *)(v2286 + 2 * v2281);
      if (v2281 != v2282)
      {
        v2295 = *v2287;
        v2296 = v2285 + 12 * v2282;
        *(_DWORD *)(v2296 + 8) = *((_DWORD *)v2287 + 2);
        *(_QWORD *)v2296 = v2295;
      }
      ++v2282;
LABEL_3062:
      if (++v2281 == v2280)
        goto LABEL_3081;
    }
    v2289 = *(_DWORD *)v2287;
    v2290 = *((_DWORD *)v2287 + 1);
    v2291 = *((_DWORD *)v2287 + 2);
    while (1)
    {
      v2292 = *((_DWORD *)v2288 + 7);
      if (v2289 == v2292)
      {
        v2293 = *((_DWORD *)v2288 + 8);
        if (v2290 == v2293)
        {
          v2294 = *((_DWORD *)v2288 + 9);
          if (v2291 < v2294)
            goto LABEL_3066;
          if (v2294 >= v2291)
            goto LABEL_3062;
        }
        else
        {
          if (v2290 < v2293)
            goto LABEL_3066;
          if (v2293 >= v2290)
            goto LABEL_3062;
        }
      }
      else
      {
        if (v2289 < v2292)
          goto LABEL_3066;
        if (v2292 >= v2289)
          goto LABEL_3062;
      }
      ++v2288;
LABEL_3066:
      v2288 = (uint64_t *)*v2288;
      if (!v2288)
        goto LABEL_3078;
    }
  }
  v2282 = 0;
LABEL_3081:
  *v2279 = v2282;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v191 = v3[113];
  if (v191 >> 30)
    v2297 = 1;
  else
    v2297 = (_DWORD)v191 == v5;
  if (v2297)
    goto LABEL_471;
LABEL_3085:
  v2298 = *(_QWORD *)(v1[2] + 8);
  v2299 = v191 & 0xFFFFFFFFCFFFFFFFLL;
  v2300 = *(_QWORD *)(*(_QWORD *)(v2298 + 8) + 2448);
  v2301 = (unsigned int *)(v2300 + 520 * (v191 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2302 = *v2301;
  if ((_DWORD)v2302)
  {
    v2303 = 0;
    v2304 = 0;
    v2305 = **(_QWORD **)(v2298 + 16);
    v2306 = v2300 + 520 * v2299;
    v2307 = v2306 + 364;
    v2308 = v2306 + 340;
    while (1)
    {
      v2309 = (uint64_t *)(v2307 + 12 * v2303);
      v2310 = *(uint64_t **)(v2305 + 2512);
      if (v2310)
        break;
LABEL_3104:
      *(_WORD *)(v2308 + 2 * v2304) = *(_WORD *)(v2308 + 2 * v2303);
      if (v2303 != v2304)
      {
        v2317 = *v2309;
        v2318 = v2307 + 12 * v2304;
        *(_DWORD *)(v2318 + 8) = *((_DWORD *)v2309 + 2);
        *(_QWORD *)v2318 = v2317;
      }
      ++v2304;
LABEL_3088:
      if (++v2303 == v2302)
        goto LABEL_3107;
    }
    v2311 = *(_DWORD *)v2309;
    v2312 = *((_DWORD *)v2309 + 1);
    v2313 = *((_DWORD *)v2309 + 2);
    while (1)
    {
      v2314 = *((_DWORD *)v2310 + 7);
      if (v2311 == v2314)
      {
        v2315 = *((_DWORD *)v2310 + 8);
        if (v2312 == v2315)
        {
          v2316 = *((_DWORD *)v2310 + 9);
          if (v2313 < v2316)
            goto LABEL_3092;
          if (v2316 >= v2313)
            goto LABEL_3088;
        }
        else
        {
          if (v2312 < v2315)
            goto LABEL_3092;
          if (v2315 >= v2312)
            goto LABEL_3088;
        }
      }
      else
      {
        if (v2311 < v2314)
          goto LABEL_3092;
        if (v2314 >= v2311)
          goto LABEL_3088;
      }
      ++v2310;
LABEL_3092:
      v2310 = (uint64_t *)*v2310;
      if (!v2310)
        goto LABEL_3104;
    }
  }
  v2304 = 0;
LABEL_3107:
  *v2301 = v2304;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v193 = v3[114];
  if (v193 >> 30)
    v2319 = 1;
  else
    v2319 = (_DWORD)v193 == v5;
  if (v2319)
    goto LABEL_476;
LABEL_3111:
  v2320 = *(_QWORD *)(v1[2] + 8);
  v2321 = v193 & 0xFFFFFFFFCFFFFFFFLL;
  v2322 = *(_QWORD *)(*(_QWORD *)(v2320 + 8) + 2448);
  v2323 = (unsigned int *)(v2322 + 520 * (v193 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2324 = *v2323;
  if ((_DWORD)v2324)
  {
    v2325 = 0;
    v2326 = 0;
    v2327 = **(_QWORD **)(v2320 + 16);
    v2328 = v2322 + 520 * v2321;
    v2329 = v2328 + 364;
    v2330 = v2328 + 340;
    while (1)
    {
      v2331 = (uint64_t *)(v2329 + 12 * v2325);
      v2332 = *(uint64_t **)(v2327 + 2512);
      if (v2332)
        break;
LABEL_3130:
      *(_WORD *)(v2330 + 2 * v2326) = *(_WORD *)(v2330 + 2 * v2325);
      if (v2325 != v2326)
      {
        v2339 = *v2331;
        v2340 = v2329 + 12 * v2326;
        *(_DWORD *)(v2340 + 8) = *((_DWORD *)v2331 + 2);
        *(_QWORD *)v2340 = v2339;
      }
      ++v2326;
LABEL_3114:
      if (++v2325 == v2324)
        goto LABEL_3133;
    }
    v2333 = *(_DWORD *)v2331;
    v2334 = *((_DWORD *)v2331 + 1);
    v2335 = *((_DWORD *)v2331 + 2);
    while (1)
    {
      v2336 = *((_DWORD *)v2332 + 7);
      if (v2333 == v2336)
      {
        v2337 = *((_DWORD *)v2332 + 8);
        if (v2334 == v2337)
        {
          v2338 = *((_DWORD *)v2332 + 9);
          if (v2335 < v2338)
            goto LABEL_3118;
          if (v2338 >= v2335)
            goto LABEL_3114;
        }
        else
        {
          if (v2334 < v2337)
            goto LABEL_3118;
          if (v2337 >= v2334)
            goto LABEL_3114;
        }
      }
      else
      {
        if (v2333 < v2336)
          goto LABEL_3118;
        if (v2336 >= v2333)
          goto LABEL_3114;
      }
      ++v2332;
LABEL_3118:
      v2332 = (uint64_t *)*v2332;
      if (!v2332)
        goto LABEL_3130;
    }
  }
  v2326 = 0;
LABEL_3133:
  *v2323 = v2326;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v195 = v3[115];
  if (v195 >> 30)
    v2341 = 1;
  else
    v2341 = (_DWORD)v195 == v5;
  if (v2341)
    goto LABEL_481;
LABEL_3137:
  v2342 = *(_QWORD *)(v1[2] + 8);
  v2343 = v195 & 0xFFFFFFFFCFFFFFFFLL;
  v2344 = *(_QWORD *)(*(_QWORD *)(v2342 + 8) + 2448);
  v2345 = (unsigned int *)(v2344 + 520 * (v195 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2346 = *v2345;
  if ((_DWORD)v2346)
  {
    v2347 = 0;
    v2348 = 0;
    v2349 = **(_QWORD **)(v2342 + 16);
    v2350 = v2344 + 520 * v2343;
    v2351 = v2350 + 364;
    v2352 = v2350 + 340;
    while (1)
    {
      v2353 = (uint64_t *)(v2351 + 12 * v2347);
      v2354 = *(uint64_t **)(v2349 + 2512);
      if (v2354)
        break;
LABEL_3156:
      *(_WORD *)(v2352 + 2 * v2348) = *(_WORD *)(v2352 + 2 * v2347);
      if (v2347 != v2348)
      {
        v2361 = *v2353;
        v2362 = v2351 + 12 * v2348;
        *(_DWORD *)(v2362 + 8) = *((_DWORD *)v2353 + 2);
        *(_QWORD *)v2362 = v2361;
      }
      ++v2348;
LABEL_3140:
      if (++v2347 == v2346)
        goto LABEL_3159;
    }
    v2355 = *(_DWORD *)v2353;
    v2356 = *((_DWORD *)v2353 + 1);
    v2357 = *((_DWORD *)v2353 + 2);
    while (1)
    {
      v2358 = *((_DWORD *)v2354 + 7);
      if (v2355 == v2358)
      {
        v2359 = *((_DWORD *)v2354 + 8);
        if (v2356 == v2359)
        {
          v2360 = *((_DWORD *)v2354 + 9);
          if (v2357 < v2360)
            goto LABEL_3144;
          if (v2360 >= v2357)
            goto LABEL_3140;
        }
        else
        {
          if (v2356 < v2359)
            goto LABEL_3144;
          if (v2359 >= v2356)
            goto LABEL_3140;
        }
      }
      else
      {
        if (v2355 < v2358)
          goto LABEL_3144;
        if (v2358 >= v2355)
          goto LABEL_3140;
      }
      ++v2354;
LABEL_3144:
      v2354 = (uint64_t *)*v2354;
      if (!v2354)
        goto LABEL_3156;
    }
  }
  v2348 = 0;
LABEL_3159:
  *v2345 = v2348;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v197 = v3[116];
  if (v197 >> 30)
    v2363 = 1;
  else
    v2363 = (_DWORD)v197 == v5;
  if (v2363)
    goto LABEL_486;
LABEL_3163:
  v2364 = *(_QWORD *)(v1[2] + 8);
  v2365 = v197 & 0xFFFFFFFFCFFFFFFFLL;
  v2366 = *(_QWORD *)(*(_QWORD *)(v2364 + 8) + 2448);
  v2367 = (unsigned int *)(v2366 + 520 * (v197 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2368 = *v2367;
  if ((_DWORD)v2368)
  {
    v2369 = 0;
    v2370 = 0;
    v2371 = **(_QWORD **)(v2364 + 16);
    v2372 = v2366 + 520 * v2365;
    v2373 = v2372 + 364;
    v2374 = v2372 + 340;
    while (1)
    {
      v2375 = (uint64_t *)(v2373 + 12 * v2369);
      v2376 = *(uint64_t **)(v2371 + 2512);
      if (v2376)
        break;
LABEL_3182:
      *(_WORD *)(v2374 + 2 * v2370) = *(_WORD *)(v2374 + 2 * v2369);
      if (v2369 != v2370)
      {
        v2383 = *v2375;
        v2384 = v2373 + 12 * v2370;
        *(_DWORD *)(v2384 + 8) = *((_DWORD *)v2375 + 2);
        *(_QWORD *)v2384 = v2383;
      }
      ++v2370;
LABEL_3166:
      if (++v2369 == v2368)
        goto LABEL_3185;
    }
    v2377 = *(_DWORD *)v2375;
    v2378 = *((_DWORD *)v2375 + 1);
    v2379 = *((_DWORD *)v2375 + 2);
    while (1)
    {
      v2380 = *((_DWORD *)v2376 + 7);
      if (v2377 == v2380)
      {
        v2381 = *((_DWORD *)v2376 + 8);
        if (v2378 == v2381)
        {
          v2382 = *((_DWORD *)v2376 + 9);
          if (v2379 < v2382)
            goto LABEL_3170;
          if (v2382 >= v2379)
            goto LABEL_3166;
        }
        else
        {
          if (v2378 < v2381)
            goto LABEL_3170;
          if (v2381 >= v2378)
            goto LABEL_3166;
        }
      }
      else
      {
        if (v2377 < v2380)
          goto LABEL_3170;
        if (v2380 >= v2377)
          goto LABEL_3166;
      }
      ++v2376;
LABEL_3170:
      v2376 = (uint64_t *)*v2376;
      if (!v2376)
        goto LABEL_3182;
    }
  }
  v2370 = 0;
LABEL_3185:
  *v2367 = v2370;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v199 = v3[117];
  if (v199 >> 30)
    v2385 = 1;
  else
    v2385 = (_DWORD)v199 == v5;
  if (v2385)
    goto LABEL_491;
LABEL_3189:
  v2386 = *(_QWORD *)(v1[2] + 8);
  v2387 = v199 & 0xFFFFFFFFCFFFFFFFLL;
  v2388 = *(_QWORD *)(*(_QWORD *)(v2386 + 8) + 2448);
  v2389 = (unsigned int *)(v2388 + 520 * (v199 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2390 = *v2389;
  if ((_DWORD)v2390)
  {
    v2391 = 0;
    v2392 = 0;
    v2393 = **(_QWORD **)(v2386 + 16);
    v2394 = v2388 + 520 * v2387;
    v2395 = v2394 + 364;
    v2396 = v2394 + 340;
    while (1)
    {
      v2397 = (uint64_t *)(v2395 + 12 * v2391);
      v2398 = *(uint64_t **)(v2393 + 2512);
      if (v2398)
        break;
LABEL_3208:
      *(_WORD *)(v2396 + 2 * v2392) = *(_WORD *)(v2396 + 2 * v2391);
      if (v2391 != v2392)
      {
        v2405 = *v2397;
        v2406 = v2395 + 12 * v2392;
        *(_DWORD *)(v2406 + 8) = *((_DWORD *)v2397 + 2);
        *(_QWORD *)v2406 = v2405;
      }
      ++v2392;
LABEL_3192:
      if (++v2391 == v2390)
        goto LABEL_3211;
    }
    v2399 = *(_DWORD *)v2397;
    v2400 = *((_DWORD *)v2397 + 1);
    v2401 = *((_DWORD *)v2397 + 2);
    while (1)
    {
      v2402 = *((_DWORD *)v2398 + 7);
      if (v2399 == v2402)
      {
        v2403 = *((_DWORD *)v2398 + 8);
        if (v2400 == v2403)
        {
          v2404 = *((_DWORD *)v2398 + 9);
          if (v2401 < v2404)
            goto LABEL_3196;
          if (v2404 >= v2401)
            goto LABEL_3192;
        }
        else
        {
          if (v2400 < v2403)
            goto LABEL_3196;
          if (v2403 >= v2400)
            goto LABEL_3192;
        }
      }
      else
      {
        if (v2399 < v2402)
          goto LABEL_3196;
        if (v2402 >= v2399)
          goto LABEL_3192;
      }
      ++v2398;
LABEL_3196:
      v2398 = (uint64_t *)*v2398;
      if (!v2398)
        goto LABEL_3208;
    }
  }
  v2392 = 0;
LABEL_3211:
  *v2389 = v2392;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v201 = v3[118];
  if (v201 >> 30)
    v2407 = 1;
  else
    v2407 = (_DWORD)v201 == v5;
  if (v2407)
    goto LABEL_496;
LABEL_3215:
  v2408 = *(_QWORD *)(v1[2] + 8);
  v2409 = v201 & 0xFFFFFFFFCFFFFFFFLL;
  v2410 = *(_QWORD *)(*(_QWORD *)(v2408 + 8) + 2448);
  v2411 = (unsigned int *)(v2410 + 520 * (v201 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2412 = *v2411;
  if ((_DWORD)v2412)
  {
    v2413 = 0;
    v2414 = 0;
    v2415 = **(_QWORD **)(v2408 + 16);
    v2416 = v2410 + 520 * v2409;
    v2417 = v2416 + 364;
    v2418 = v2416 + 340;
    while (1)
    {
      v2419 = (uint64_t *)(v2417 + 12 * v2413);
      v2420 = *(uint64_t **)(v2415 + 2512);
      if (v2420)
        break;
LABEL_3234:
      *(_WORD *)(v2418 + 2 * v2414) = *(_WORD *)(v2418 + 2 * v2413);
      if (v2413 != v2414)
      {
        v2427 = *v2419;
        v2428 = v2417 + 12 * v2414;
        *(_DWORD *)(v2428 + 8) = *((_DWORD *)v2419 + 2);
        *(_QWORD *)v2428 = v2427;
      }
      ++v2414;
LABEL_3218:
      if (++v2413 == v2412)
        goto LABEL_3237;
    }
    v2421 = *(_DWORD *)v2419;
    v2422 = *((_DWORD *)v2419 + 1);
    v2423 = *((_DWORD *)v2419 + 2);
    while (1)
    {
      v2424 = *((_DWORD *)v2420 + 7);
      if (v2421 == v2424)
      {
        v2425 = *((_DWORD *)v2420 + 8);
        if (v2422 == v2425)
        {
          v2426 = *((_DWORD *)v2420 + 9);
          if (v2423 < v2426)
            goto LABEL_3222;
          if (v2426 >= v2423)
            goto LABEL_3218;
        }
        else
        {
          if (v2422 < v2425)
            goto LABEL_3222;
          if (v2425 >= v2422)
            goto LABEL_3218;
        }
      }
      else
      {
        if (v2421 < v2424)
          goto LABEL_3222;
        if (v2424 >= v2421)
          goto LABEL_3218;
      }
      ++v2420;
LABEL_3222:
      v2420 = (uint64_t *)*v2420;
      if (!v2420)
        goto LABEL_3234;
    }
  }
  v2414 = 0;
LABEL_3237:
  *v2411 = v2414;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v203 = v3[119];
  if (v203 >> 30)
    v2429 = 1;
  else
    v2429 = (_DWORD)v203 == v5;
  if (v2429)
    goto LABEL_501;
LABEL_3241:
  v2430 = *(_QWORD *)(v1[2] + 8);
  v2431 = v203 & 0xFFFFFFFFCFFFFFFFLL;
  v2432 = *(_QWORD *)(*(_QWORD *)(v2430 + 8) + 2448);
  v2433 = (unsigned int *)(v2432 + 520 * (v203 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2434 = *v2433;
  if ((_DWORD)v2434)
  {
    v2435 = 0;
    v2436 = 0;
    v2437 = **(_QWORD **)(v2430 + 16);
    v2438 = v2432 + 520 * v2431;
    v2439 = v2438 + 364;
    v2440 = v2438 + 340;
    while (1)
    {
      v2441 = (uint64_t *)(v2439 + 12 * v2435);
      v2442 = *(uint64_t **)(v2437 + 2512);
      if (v2442)
        break;
LABEL_3260:
      *(_WORD *)(v2440 + 2 * v2436) = *(_WORD *)(v2440 + 2 * v2435);
      if (v2435 != v2436)
      {
        v2449 = *v2441;
        v2450 = v2439 + 12 * v2436;
        *(_DWORD *)(v2450 + 8) = *((_DWORD *)v2441 + 2);
        *(_QWORD *)v2450 = v2449;
      }
      ++v2436;
LABEL_3244:
      if (++v2435 == v2434)
        goto LABEL_3263;
    }
    v2443 = *(_DWORD *)v2441;
    v2444 = *((_DWORD *)v2441 + 1);
    v2445 = *((_DWORD *)v2441 + 2);
    while (1)
    {
      v2446 = *((_DWORD *)v2442 + 7);
      if (v2443 == v2446)
      {
        v2447 = *((_DWORD *)v2442 + 8);
        if (v2444 == v2447)
        {
          v2448 = *((_DWORD *)v2442 + 9);
          if (v2445 < v2448)
            goto LABEL_3248;
          if (v2448 >= v2445)
            goto LABEL_3244;
        }
        else
        {
          if (v2444 < v2447)
            goto LABEL_3248;
          if (v2447 >= v2444)
            goto LABEL_3244;
        }
      }
      else
      {
        if (v2443 < v2446)
          goto LABEL_3248;
        if (v2446 >= v2443)
          goto LABEL_3244;
      }
      ++v2442;
LABEL_3248:
      v2442 = (uint64_t *)*v2442;
      if (!v2442)
        goto LABEL_3260;
    }
  }
  v2436 = 0;
LABEL_3263:
  *v2433 = v2436;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v205 = v3[120];
  if (v205 >> 30)
    v2451 = 1;
  else
    v2451 = (_DWORD)v205 == v5;
  if (v2451)
    goto LABEL_506;
LABEL_3267:
  v2452 = *(_QWORD *)(v1[2] + 8);
  v2453 = v205 & 0xFFFFFFFFCFFFFFFFLL;
  v2454 = *(_QWORD *)(*(_QWORD *)(v2452 + 8) + 2448);
  v2455 = (unsigned int *)(v2454 + 520 * (v205 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2456 = *v2455;
  if ((_DWORD)v2456)
  {
    v2457 = 0;
    v2458 = 0;
    v2459 = **(_QWORD **)(v2452 + 16);
    v2460 = v2454 + 520 * v2453;
    v2461 = v2460 + 364;
    v2462 = v2460 + 340;
    while (1)
    {
      v2463 = (uint64_t *)(v2461 + 12 * v2457);
      v2464 = *(uint64_t **)(v2459 + 2512);
      if (v2464)
        break;
LABEL_3286:
      *(_WORD *)(v2462 + 2 * v2458) = *(_WORD *)(v2462 + 2 * v2457);
      if (v2457 != v2458)
      {
        v2471 = *v2463;
        v2472 = v2461 + 12 * v2458;
        *(_DWORD *)(v2472 + 8) = *((_DWORD *)v2463 + 2);
        *(_QWORD *)v2472 = v2471;
      }
      ++v2458;
LABEL_3270:
      if (++v2457 == v2456)
        goto LABEL_3289;
    }
    v2465 = *(_DWORD *)v2463;
    v2466 = *((_DWORD *)v2463 + 1);
    v2467 = *((_DWORD *)v2463 + 2);
    while (1)
    {
      v2468 = *((_DWORD *)v2464 + 7);
      if (v2465 == v2468)
      {
        v2469 = *((_DWORD *)v2464 + 8);
        if (v2466 == v2469)
        {
          v2470 = *((_DWORD *)v2464 + 9);
          if (v2467 < v2470)
            goto LABEL_3274;
          if (v2470 >= v2467)
            goto LABEL_3270;
        }
        else
        {
          if (v2466 < v2469)
            goto LABEL_3274;
          if (v2469 >= v2466)
            goto LABEL_3270;
        }
      }
      else
      {
        if (v2465 < v2468)
          goto LABEL_3274;
        if (v2468 >= v2465)
          goto LABEL_3270;
      }
      ++v2464;
LABEL_3274:
      v2464 = (uint64_t *)*v2464;
      if (!v2464)
        goto LABEL_3286;
    }
  }
  v2458 = 0;
LABEL_3289:
  *v2455 = v2458;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v207 = v3[121];
  if (v207 >> 30)
    v2473 = 1;
  else
    v2473 = (_DWORD)v207 == v5;
  if (v2473)
    goto LABEL_511;
LABEL_3293:
  v2474 = *(_QWORD *)(v1[2] + 8);
  v2475 = v207 & 0xFFFFFFFFCFFFFFFFLL;
  v2476 = *(_QWORD *)(*(_QWORD *)(v2474 + 8) + 2448);
  v2477 = (unsigned int *)(v2476 + 520 * (v207 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2478 = *v2477;
  if ((_DWORD)v2478)
  {
    v2479 = 0;
    v2480 = 0;
    v2481 = **(_QWORD **)(v2474 + 16);
    v2482 = v2476 + 520 * v2475;
    v2483 = v2482 + 364;
    v2484 = v2482 + 340;
    while (1)
    {
      v2485 = (uint64_t *)(v2483 + 12 * v2479);
      v2486 = *(uint64_t **)(v2481 + 2512);
      if (v2486)
        break;
LABEL_3312:
      *(_WORD *)(v2484 + 2 * v2480) = *(_WORD *)(v2484 + 2 * v2479);
      if (v2479 != v2480)
      {
        v2493 = *v2485;
        v2494 = v2483 + 12 * v2480;
        *(_DWORD *)(v2494 + 8) = *((_DWORD *)v2485 + 2);
        *(_QWORD *)v2494 = v2493;
      }
      ++v2480;
LABEL_3296:
      if (++v2479 == v2478)
        goto LABEL_3315;
    }
    v2487 = *(_DWORD *)v2485;
    v2488 = *((_DWORD *)v2485 + 1);
    v2489 = *((_DWORD *)v2485 + 2);
    while (1)
    {
      v2490 = *((_DWORD *)v2486 + 7);
      if (v2487 == v2490)
      {
        v2491 = *((_DWORD *)v2486 + 8);
        if (v2488 == v2491)
        {
          v2492 = *((_DWORD *)v2486 + 9);
          if (v2489 < v2492)
            goto LABEL_3300;
          if (v2492 >= v2489)
            goto LABEL_3296;
        }
        else
        {
          if (v2488 < v2491)
            goto LABEL_3300;
          if (v2491 >= v2488)
            goto LABEL_3296;
        }
      }
      else
      {
        if (v2487 < v2490)
          goto LABEL_3300;
        if (v2490 >= v2487)
          goto LABEL_3296;
      }
      ++v2486;
LABEL_3300:
      v2486 = (uint64_t *)*v2486;
      if (!v2486)
        goto LABEL_3312;
    }
  }
  v2480 = 0;
LABEL_3315:
  *v2477 = v2480;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v209 = v3[122];
  if (v209 >> 30)
    v2495 = 1;
  else
    v2495 = (_DWORD)v209 == v5;
  if (v2495)
    goto LABEL_516;
LABEL_3319:
  v2496 = *(_QWORD *)(v1[2] + 8);
  v2497 = v209 & 0xFFFFFFFFCFFFFFFFLL;
  v2498 = *(_QWORD *)(*(_QWORD *)(v2496 + 8) + 2448);
  v2499 = (unsigned int *)(v2498 + 520 * (v209 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2500 = *v2499;
  if ((_DWORD)v2500)
  {
    v2501 = 0;
    v2502 = 0;
    v2503 = **(_QWORD **)(v2496 + 16);
    v2504 = v2498 + 520 * v2497;
    v2505 = v2504 + 364;
    v2506 = v2504 + 340;
    while (1)
    {
      v2507 = (uint64_t *)(v2505 + 12 * v2501);
      v2508 = *(uint64_t **)(v2503 + 2512);
      if (v2508)
        break;
LABEL_3338:
      *(_WORD *)(v2506 + 2 * v2502) = *(_WORD *)(v2506 + 2 * v2501);
      if (v2501 != v2502)
      {
        v2515 = *v2507;
        v2516 = v2505 + 12 * v2502;
        *(_DWORD *)(v2516 + 8) = *((_DWORD *)v2507 + 2);
        *(_QWORD *)v2516 = v2515;
      }
      ++v2502;
LABEL_3322:
      if (++v2501 == v2500)
        goto LABEL_3341;
    }
    v2509 = *(_DWORD *)v2507;
    v2510 = *((_DWORD *)v2507 + 1);
    v2511 = *((_DWORD *)v2507 + 2);
    while (1)
    {
      v2512 = *((_DWORD *)v2508 + 7);
      if (v2509 == v2512)
      {
        v2513 = *((_DWORD *)v2508 + 8);
        if (v2510 == v2513)
        {
          v2514 = *((_DWORD *)v2508 + 9);
          if (v2511 < v2514)
            goto LABEL_3326;
          if (v2514 >= v2511)
            goto LABEL_3322;
        }
        else
        {
          if (v2510 < v2513)
            goto LABEL_3326;
          if (v2513 >= v2510)
            goto LABEL_3322;
        }
      }
      else
      {
        if (v2509 < v2512)
          goto LABEL_3326;
        if (v2512 >= v2509)
          goto LABEL_3322;
      }
      ++v2508;
LABEL_3326:
      v2508 = (uint64_t *)*v2508;
      if (!v2508)
        goto LABEL_3338;
    }
  }
  v2502 = 0;
LABEL_3341:
  *v2499 = v2502;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v211 = v3[123];
  if (v211 >> 30)
    v2517 = 1;
  else
    v2517 = (_DWORD)v211 == v5;
  if (v2517)
    goto LABEL_521;
LABEL_3345:
  v2518 = *(_QWORD *)(v1[2] + 8);
  v2519 = v211 & 0xFFFFFFFFCFFFFFFFLL;
  v2520 = *(_QWORD *)(*(_QWORD *)(v2518 + 8) + 2448);
  v2521 = (unsigned int *)(v2520 + 520 * (v211 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2522 = *v2521;
  if ((_DWORD)v2522)
  {
    v2523 = 0;
    v2524 = 0;
    v2525 = **(_QWORD **)(v2518 + 16);
    v2526 = v2520 + 520 * v2519;
    v2527 = v2526 + 364;
    v2528 = v2526 + 340;
    while (1)
    {
      v2529 = (uint64_t *)(v2527 + 12 * v2523);
      v2530 = *(uint64_t **)(v2525 + 2512);
      if (v2530)
        break;
LABEL_3364:
      *(_WORD *)(v2528 + 2 * v2524) = *(_WORD *)(v2528 + 2 * v2523);
      if (v2523 != v2524)
      {
        v2537 = *v2529;
        v2538 = v2527 + 12 * v2524;
        *(_DWORD *)(v2538 + 8) = *((_DWORD *)v2529 + 2);
        *(_QWORD *)v2538 = v2537;
      }
      ++v2524;
LABEL_3348:
      if (++v2523 == v2522)
        goto LABEL_3367;
    }
    v2531 = *(_DWORD *)v2529;
    v2532 = *((_DWORD *)v2529 + 1);
    v2533 = *((_DWORD *)v2529 + 2);
    while (1)
    {
      v2534 = *((_DWORD *)v2530 + 7);
      if (v2531 == v2534)
      {
        v2535 = *((_DWORD *)v2530 + 8);
        if (v2532 == v2535)
        {
          v2536 = *((_DWORD *)v2530 + 9);
          if (v2533 < v2536)
            goto LABEL_3352;
          if (v2536 >= v2533)
            goto LABEL_3348;
        }
        else
        {
          if (v2532 < v2535)
            goto LABEL_3352;
          if (v2535 >= v2532)
            goto LABEL_3348;
        }
      }
      else
      {
        if (v2531 < v2534)
          goto LABEL_3352;
        if (v2534 >= v2531)
          goto LABEL_3348;
      }
      ++v2530;
LABEL_3352:
      v2530 = (uint64_t *)*v2530;
      if (!v2530)
        goto LABEL_3364;
    }
  }
  v2524 = 0;
LABEL_3367:
  *v2521 = v2524;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v213 = v3[124];
  if (v213 >> 30)
    v2539 = 1;
  else
    v2539 = (_DWORD)v213 == v5;
  if (v2539)
    goto LABEL_526;
LABEL_3371:
  v2540 = *(_QWORD *)(v1[2] + 8);
  v2541 = v213 & 0xFFFFFFFFCFFFFFFFLL;
  v2542 = *(_QWORD *)(*(_QWORD *)(v2540 + 8) + 2448);
  v2543 = (unsigned int *)(v2542 + 520 * (v213 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2544 = *v2543;
  if ((_DWORD)v2544)
  {
    v2545 = 0;
    v2546 = 0;
    v2547 = **(_QWORD **)(v2540 + 16);
    v2548 = v2542 + 520 * v2541;
    v2549 = v2548 + 364;
    v2550 = v2548 + 340;
    while (1)
    {
      v2551 = (uint64_t *)(v2549 + 12 * v2545);
      v2552 = *(uint64_t **)(v2547 + 2512);
      if (v2552)
        break;
LABEL_3390:
      *(_WORD *)(v2550 + 2 * v2546) = *(_WORD *)(v2550 + 2 * v2545);
      if (v2545 != v2546)
      {
        v2559 = *v2551;
        v2560 = v2549 + 12 * v2546;
        *(_DWORD *)(v2560 + 8) = *((_DWORD *)v2551 + 2);
        *(_QWORD *)v2560 = v2559;
      }
      ++v2546;
LABEL_3374:
      if (++v2545 == v2544)
        goto LABEL_3393;
    }
    v2553 = *(_DWORD *)v2551;
    v2554 = *((_DWORD *)v2551 + 1);
    v2555 = *((_DWORD *)v2551 + 2);
    while (1)
    {
      v2556 = *((_DWORD *)v2552 + 7);
      if (v2553 == v2556)
      {
        v2557 = *((_DWORD *)v2552 + 8);
        if (v2554 == v2557)
        {
          v2558 = *((_DWORD *)v2552 + 9);
          if (v2555 < v2558)
            goto LABEL_3378;
          if (v2558 >= v2555)
            goto LABEL_3374;
        }
        else
        {
          if (v2554 < v2557)
            goto LABEL_3378;
          if (v2557 >= v2554)
            goto LABEL_3374;
        }
      }
      else
      {
        if (v2553 < v2556)
          goto LABEL_3378;
        if (v2556 >= v2553)
          goto LABEL_3374;
      }
      ++v2552;
LABEL_3378:
      v2552 = (uint64_t *)*v2552;
      if (!v2552)
        goto LABEL_3390;
    }
  }
  v2546 = 0;
LABEL_3393:
  *v2543 = v2546;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v215 = v3[125];
  if (v215 >> 30)
    v2561 = 1;
  else
    v2561 = (_DWORD)v215 == v5;
  if (v2561)
    goto LABEL_531;
LABEL_3397:
  v2562 = *(_QWORD *)(v1[2] + 8);
  v2563 = v215 & 0xFFFFFFFFCFFFFFFFLL;
  v2564 = *(_QWORD *)(*(_QWORD *)(v2562 + 8) + 2448);
  v2565 = (unsigned int *)(v2564 + 520 * (v215 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2566 = *v2565;
  if ((_DWORD)v2566)
  {
    v2567 = 0;
    v2568 = 0;
    v2569 = **(_QWORD **)(v2562 + 16);
    v2570 = v2564 + 520 * v2563;
    v2571 = v2570 + 364;
    v2572 = v2570 + 340;
    while (1)
    {
      v2573 = (uint64_t *)(v2571 + 12 * v2567);
      v2574 = *(uint64_t **)(v2569 + 2512);
      if (v2574)
        break;
LABEL_3416:
      *(_WORD *)(v2572 + 2 * v2568) = *(_WORD *)(v2572 + 2 * v2567);
      if (v2567 != v2568)
      {
        v2581 = *v2573;
        v2582 = v2571 + 12 * v2568;
        *(_DWORD *)(v2582 + 8) = *((_DWORD *)v2573 + 2);
        *(_QWORD *)v2582 = v2581;
      }
      ++v2568;
LABEL_3400:
      if (++v2567 == v2566)
        goto LABEL_3419;
    }
    v2575 = *(_DWORD *)v2573;
    v2576 = *((_DWORD *)v2573 + 1);
    v2577 = *((_DWORD *)v2573 + 2);
    while (1)
    {
      v2578 = *((_DWORD *)v2574 + 7);
      if (v2575 == v2578)
      {
        v2579 = *((_DWORD *)v2574 + 8);
        if (v2576 == v2579)
        {
          v2580 = *((_DWORD *)v2574 + 9);
          if (v2577 < v2580)
            goto LABEL_3404;
          if (v2580 >= v2577)
            goto LABEL_3400;
        }
        else
        {
          if (v2576 < v2579)
            goto LABEL_3404;
          if (v2579 >= v2576)
            goto LABEL_3400;
        }
      }
      else
      {
        if (v2575 < v2578)
          goto LABEL_3404;
        if (v2578 >= v2575)
          goto LABEL_3400;
      }
      ++v2574;
LABEL_3404:
      v2574 = (uint64_t *)*v2574;
      if (!v2574)
        goto LABEL_3416;
    }
  }
  v2568 = 0;
LABEL_3419:
  *v2565 = v2568;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v217 = v3[126];
  if (v217 >> 30)
    v2583 = 1;
  else
    v2583 = (_DWORD)v217 == v5;
  if (v2583)
    goto LABEL_536;
LABEL_3423:
  v2584 = *(_QWORD *)(v1[2] + 8);
  v2585 = v217 & 0xFFFFFFFFCFFFFFFFLL;
  v2586 = *(_QWORD *)(*(_QWORD *)(v2584 + 8) + 2448);
  v2587 = (unsigned int *)(v2586 + 520 * (v217 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2588 = *v2587;
  if ((_DWORD)v2588)
  {
    v2589 = 0;
    v2590 = 0;
    v2591 = **(_QWORD **)(v2584 + 16);
    v2592 = v2586 + 520 * v2585;
    v2593 = v2592 + 364;
    v2594 = v2592 + 340;
    while (1)
    {
      v2595 = (uint64_t *)(v2593 + 12 * v2589);
      v2596 = *(uint64_t **)(v2591 + 2512);
      if (v2596)
        break;
LABEL_3442:
      *(_WORD *)(v2594 + 2 * v2590) = *(_WORD *)(v2594 + 2 * v2589);
      if (v2589 != v2590)
      {
        v2603 = *v2595;
        v2604 = v2593 + 12 * v2590;
        *(_DWORD *)(v2604 + 8) = *((_DWORD *)v2595 + 2);
        *(_QWORD *)v2604 = v2603;
      }
      ++v2590;
LABEL_3426:
      if (++v2589 == v2588)
        goto LABEL_3445;
    }
    v2597 = *(_DWORD *)v2595;
    v2598 = *((_DWORD *)v2595 + 1);
    v2599 = *((_DWORD *)v2595 + 2);
    while (1)
    {
      v2600 = *((_DWORD *)v2596 + 7);
      if (v2597 == v2600)
      {
        v2601 = *((_DWORD *)v2596 + 8);
        if (v2598 == v2601)
        {
          v2602 = *((_DWORD *)v2596 + 9);
          if (v2599 < v2602)
            goto LABEL_3430;
          if (v2602 >= v2599)
            goto LABEL_3426;
        }
        else
        {
          if (v2598 < v2601)
            goto LABEL_3430;
          if (v2601 >= v2598)
            goto LABEL_3426;
        }
      }
      else
      {
        if (v2597 < v2600)
          goto LABEL_3430;
        if (v2600 >= v2597)
          goto LABEL_3426;
      }
      ++v2596;
LABEL_3430:
      v2596 = (uint64_t *)*v2596;
      if (!v2596)
        goto LABEL_3442;
    }
  }
  v2590 = 0;
LABEL_3445:
  *v2587 = v2590;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v219 = v3[127];
  if (v219 >> 30)
    v2605 = 1;
  else
    v2605 = (_DWORD)v219 == v5;
  if (v2605)
    goto LABEL_541;
LABEL_3449:
  v2606 = *(_QWORD *)(v1[2] + 8);
  v2607 = v219 & 0xFFFFFFFFCFFFFFFFLL;
  v2608 = *(_QWORD *)(*(_QWORD *)(v2606 + 8) + 2448);
  v2609 = (unsigned int *)(v2608 + 520 * (v219 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2610 = *v2609;
  if ((_DWORD)v2610)
  {
    v2611 = 0;
    v2612 = 0;
    v2613 = **(_QWORD **)(v2606 + 16);
    v2614 = v2608 + 520 * v2607;
    v2615 = v2614 + 364;
    v2616 = v2614 + 340;
    while (1)
    {
      v2617 = (uint64_t *)(v2615 + 12 * v2611);
      v2618 = *(uint64_t **)(v2613 + 2512);
      if (v2618)
        break;
LABEL_3468:
      *(_WORD *)(v2616 + 2 * v2612) = *(_WORD *)(v2616 + 2 * v2611);
      if (v2611 != v2612)
      {
        v2625 = *v2617;
        v2626 = v2615 + 12 * v2612;
        *(_DWORD *)(v2626 + 8) = *((_DWORD *)v2617 + 2);
        *(_QWORD *)v2626 = v2625;
      }
      ++v2612;
LABEL_3452:
      if (++v2611 == v2610)
        goto LABEL_3471;
    }
    v2619 = *(_DWORD *)v2617;
    v2620 = *((_DWORD *)v2617 + 1);
    v2621 = *((_DWORD *)v2617 + 2);
    while (1)
    {
      v2622 = *((_DWORD *)v2618 + 7);
      if (v2619 == v2622)
      {
        v2623 = *((_DWORD *)v2618 + 8);
        if (v2620 == v2623)
        {
          v2624 = *((_DWORD *)v2618 + 9);
          if (v2621 < v2624)
            goto LABEL_3456;
          if (v2624 >= v2621)
            goto LABEL_3452;
        }
        else
        {
          if (v2620 < v2623)
            goto LABEL_3456;
          if (v2623 >= v2620)
            goto LABEL_3452;
        }
      }
      else
      {
        if (v2619 < v2622)
          goto LABEL_3456;
        if (v2622 >= v2619)
          goto LABEL_3452;
      }
      ++v2618;
LABEL_3456:
      v2618 = (uint64_t *)*v2618;
      if (!v2618)
        goto LABEL_3468;
    }
  }
  v2612 = 0;
LABEL_3471:
  *v2609 = v2612;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v221 = v3[128];
  if (v221 >> 30)
    v2627 = 1;
  else
    v2627 = (_DWORD)v221 == v5;
  if (v2627)
    goto LABEL_546;
LABEL_3475:
  v2628 = *(_QWORD *)(v1[2] + 8);
  v2629 = v221 & 0xFFFFFFFFCFFFFFFFLL;
  v2630 = *(_QWORD *)(*(_QWORD *)(v2628 + 8) + 2448);
  v2631 = (unsigned int *)(v2630 + 520 * (v221 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2632 = *v2631;
  if ((_DWORD)v2632)
  {
    v2633 = 0;
    v2634 = 0;
    v2635 = **(_QWORD **)(v2628 + 16);
    v2636 = v2630 + 520 * v2629;
    v2637 = v2636 + 364;
    v2638 = v2636 + 340;
    while (1)
    {
      v2639 = (uint64_t *)(v2637 + 12 * v2633);
      v2640 = *(uint64_t **)(v2635 + 2512);
      if (v2640)
        break;
LABEL_3494:
      *(_WORD *)(v2638 + 2 * v2634) = *(_WORD *)(v2638 + 2 * v2633);
      if (v2633 != v2634)
      {
        v2647 = *v2639;
        v2648 = v2637 + 12 * v2634;
        *(_DWORD *)(v2648 + 8) = *((_DWORD *)v2639 + 2);
        *(_QWORD *)v2648 = v2647;
      }
      ++v2634;
LABEL_3478:
      if (++v2633 == v2632)
        goto LABEL_3497;
    }
    v2641 = *(_DWORD *)v2639;
    v2642 = *((_DWORD *)v2639 + 1);
    v2643 = *((_DWORD *)v2639 + 2);
    while (1)
    {
      v2644 = *((_DWORD *)v2640 + 7);
      if (v2641 == v2644)
      {
        v2645 = *((_DWORD *)v2640 + 8);
        if (v2642 == v2645)
        {
          v2646 = *((_DWORD *)v2640 + 9);
          if (v2643 < v2646)
            goto LABEL_3482;
          if (v2646 >= v2643)
            goto LABEL_3478;
        }
        else
        {
          if (v2642 < v2645)
            goto LABEL_3482;
          if (v2645 >= v2642)
            goto LABEL_3478;
        }
      }
      else
      {
        if (v2641 < v2644)
          goto LABEL_3482;
        if (v2644 >= v2641)
          goto LABEL_3478;
      }
      ++v2640;
LABEL_3482:
      v2640 = (uint64_t *)*v2640;
      if (!v2640)
        goto LABEL_3494;
    }
  }
  v2634 = 0;
LABEL_3497:
  *v2631 = v2634;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v223 = v3[129];
  if (v223 >> 30)
    v2649 = 1;
  else
    v2649 = (_DWORD)v223 == v5;
  if (v2649)
    goto LABEL_551;
LABEL_3501:
  v2650 = *(_QWORD *)(v1[2] + 8);
  v2651 = v223 & 0xFFFFFFFFCFFFFFFFLL;
  v2652 = *(_QWORD *)(*(_QWORD *)(v2650 + 8) + 2448);
  v2653 = (unsigned int *)(v2652 + 520 * (v223 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2654 = *v2653;
  if ((_DWORD)v2654)
  {
    v2655 = 0;
    v2656 = 0;
    v2657 = **(_QWORD **)(v2650 + 16);
    v2658 = v2652 + 520 * v2651;
    v2659 = v2658 + 364;
    v2660 = v2658 + 340;
    while (1)
    {
      v2661 = (uint64_t *)(v2659 + 12 * v2655);
      v2662 = *(uint64_t **)(v2657 + 2512);
      if (v2662)
        break;
LABEL_3520:
      *(_WORD *)(v2660 + 2 * v2656) = *(_WORD *)(v2660 + 2 * v2655);
      if (v2655 != v2656)
      {
        v2669 = *v2661;
        v2670 = v2659 + 12 * v2656;
        *(_DWORD *)(v2670 + 8) = *((_DWORD *)v2661 + 2);
        *(_QWORD *)v2670 = v2669;
      }
      ++v2656;
LABEL_3504:
      if (++v2655 == v2654)
        goto LABEL_3523;
    }
    v2663 = *(_DWORD *)v2661;
    v2664 = *((_DWORD *)v2661 + 1);
    v2665 = *((_DWORD *)v2661 + 2);
    while (1)
    {
      v2666 = *((_DWORD *)v2662 + 7);
      if (v2663 == v2666)
      {
        v2667 = *((_DWORD *)v2662 + 8);
        if (v2664 == v2667)
        {
          v2668 = *((_DWORD *)v2662 + 9);
          if (v2665 < v2668)
            goto LABEL_3508;
          if (v2668 >= v2665)
            goto LABEL_3504;
        }
        else
        {
          if (v2664 < v2667)
            goto LABEL_3508;
          if (v2667 >= v2664)
            goto LABEL_3504;
        }
      }
      else
      {
        if (v2663 < v2666)
          goto LABEL_3508;
        if (v2666 >= v2663)
          goto LABEL_3504;
      }
      ++v2662;
LABEL_3508:
      v2662 = (uint64_t *)*v2662;
      if (!v2662)
        goto LABEL_3520;
    }
  }
  v2656 = 0;
LABEL_3523:
  *v2653 = v2656;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v225 = v3[130];
  if (v225 >> 30)
    v2671 = 1;
  else
    v2671 = (_DWORD)v225 == v5;
  if (v2671)
    goto LABEL_556;
LABEL_3527:
  v2672 = *(_QWORD *)(v1[2] + 8);
  v2673 = v225 & 0xFFFFFFFFCFFFFFFFLL;
  v2674 = *(_QWORD *)(*(_QWORD *)(v2672 + 8) + 2448);
  v2675 = (unsigned int *)(v2674 + 520 * (v225 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2676 = *v2675;
  if ((_DWORD)v2676)
  {
    v2677 = 0;
    v2678 = 0;
    v2679 = **(_QWORD **)(v2672 + 16);
    v2680 = v2674 + 520 * v2673;
    v2681 = v2680 + 364;
    v2682 = v2680 + 340;
    while (1)
    {
      v2683 = (uint64_t *)(v2681 + 12 * v2677);
      v2684 = *(uint64_t **)(v2679 + 2512);
      if (v2684)
        break;
LABEL_3546:
      *(_WORD *)(v2682 + 2 * v2678) = *(_WORD *)(v2682 + 2 * v2677);
      if (v2677 != v2678)
      {
        v2691 = *v2683;
        v2692 = v2681 + 12 * v2678;
        *(_DWORD *)(v2692 + 8) = *((_DWORD *)v2683 + 2);
        *(_QWORD *)v2692 = v2691;
      }
      ++v2678;
LABEL_3530:
      if (++v2677 == v2676)
        goto LABEL_3549;
    }
    v2685 = *(_DWORD *)v2683;
    v2686 = *((_DWORD *)v2683 + 1);
    v2687 = *((_DWORD *)v2683 + 2);
    while (1)
    {
      v2688 = *((_DWORD *)v2684 + 7);
      if (v2685 == v2688)
      {
        v2689 = *((_DWORD *)v2684 + 8);
        if (v2686 == v2689)
        {
          v2690 = *((_DWORD *)v2684 + 9);
          if (v2687 < v2690)
            goto LABEL_3534;
          if (v2690 >= v2687)
            goto LABEL_3530;
        }
        else
        {
          if (v2686 < v2689)
            goto LABEL_3534;
          if (v2689 >= v2686)
            goto LABEL_3530;
        }
      }
      else
      {
        if (v2685 < v2688)
          goto LABEL_3534;
        if (v2688 >= v2685)
          goto LABEL_3530;
      }
      ++v2684;
LABEL_3534:
      v2684 = (uint64_t *)*v2684;
      if (!v2684)
        goto LABEL_3546;
    }
  }
  v2678 = 0;
LABEL_3549:
  *v2675 = v2678;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v227 = v3[131];
  if (v227 >> 30)
    v2693 = 1;
  else
    v2693 = (_DWORD)v227 == v5;
  if (v2693)
    goto LABEL_561;
LABEL_3553:
  v2694 = *(_QWORD *)(v1[2] + 8);
  v2695 = v227 & 0xFFFFFFFFCFFFFFFFLL;
  v2696 = *(_QWORD *)(*(_QWORD *)(v2694 + 8) + 2448);
  v2697 = (unsigned int *)(v2696 + 520 * (v227 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2698 = *v2697;
  if ((_DWORD)v2698)
  {
    v2699 = 0;
    v2700 = 0;
    v2701 = **(_QWORD **)(v2694 + 16);
    v2702 = v2696 + 520 * v2695;
    v2703 = v2702 + 364;
    v2704 = v2702 + 340;
    while (1)
    {
      v2705 = (uint64_t *)(v2703 + 12 * v2699);
      v2706 = *(uint64_t **)(v2701 + 2512);
      if (v2706)
        break;
LABEL_3572:
      *(_WORD *)(v2704 + 2 * v2700) = *(_WORD *)(v2704 + 2 * v2699);
      if (v2699 != v2700)
      {
        v2713 = *v2705;
        v2714 = v2703 + 12 * v2700;
        *(_DWORD *)(v2714 + 8) = *((_DWORD *)v2705 + 2);
        *(_QWORD *)v2714 = v2713;
      }
      ++v2700;
LABEL_3556:
      if (++v2699 == v2698)
        goto LABEL_3575;
    }
    v2707 = *(_DWORD *)v2705;
    v2708 = *((_DWORD *)v2705 + 1);
    v2709 = *((_DWORD *)v2705 + 2);
    while (1)
    {
      v2710 = *((_DWORD *)v2706 + 7);
      if (v2707 == v2710)
      {
        v2711 = *((_DWORD *)v2706 + 8);
        if (v2708 == v2711)
        {
          v2712 = *((_DWORD *)v2706 + 9);
          if (v2709 < v2712)
            goto LABEL_3560;
          if (v2712 >= v2709)
            goto LABEL_3556;
        }
        else
        {
          if (v2708 < v2711)
            goto LABEL_3560;
          if (v2711 >= v2708)
            goto LABEL_3556;
        }
      }
      else
      {
        if (v2707 < v2710)
          goto LABEL_3560;
        if (v2710 >= v2707)
          goto LABEL_3556;
      }
      ++v2706;
LABEL_3560:
      v2706 = (uint64_t *)*v2706;
      if (!v2706)
        goto LABEL_3572;
    }
  }
  v2700 = 0;
LABEL_3575:
  *v2697 = v2700;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v229 = v3[132];
  if (v229 >> 30)
    v2715 = 1;
  else
    v2715 = (_DWORD)v229 == v5;
  if (v2715)
    goto LABEL_566;
LABEL_3579:
  v2716 = *(_QWORD *)(v1[2] + 8);
  v2717 = v229 & 0xFFFFFFFFCFFFFFFFLL;
  v2718 = *(_QWORD *)(*(_QWORD *)(v2716 + 8) + 2448);
  v2719 = (unsigned int *)(v2718 + 520 * (v229 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2720 = *v2719;
  if ((_DWORD)v2720)
  {
    v2721 = 0;
    v2722 = 0;
    v2723 = **(_QWORD **)(v2716 + 16);
    v2724 = v2718 + 520 * v2717;
    v2725 = v2724 + 364;
    v2726 = v2724 + 340;
    while (1)
    {
      v2727 = (uint64_t *)(v2725 + 12 * v2721);
      v2728 = *(uint64_t **)(v2723 + 2512);
      if (v2728)
        break;
LABEL_3598:
      *(_WORD *)(v2726 + 2 * v2722) = *(_WORD *)(v2726 + 2 * v2721);
      if (v2721 != v2722)
      {
        v2735 = *v2727;
        v2736 = v2725 + 12 * v2722;
        *(_DWORD *)(v2736 + 8) = *((_DWORD *)v2727 + 2);
        *(_QWORD *)v2736 = v2735;
      }
      ++v2722;
LABEL_3582:
      if (++v2721 == v2720)
        goto LABEL_3601;
    }
    v2729 = *(_DWORD *)v2727;
    v2730 = *((_DWORD *)v2727 + 1);
    v2731 = *((_DWORD *)v2727 + 2);
    while (1)
    {
      v2732 = *((_DWORD *)v2728 + 7);
      if (v2729 == v2732)
      {
        v2733 = *((_DWORD *)v2728 + 8);
        if (v2730 == v2733)
        {
          v2734 = *((_DWORD *)v2728 + 9);
          if (v2731 < v2734)
            goto LABEL_3586;
          if (v2734 >= v2731)
            goto LABEL_3582;
        }
        else
        {
          if (v2730 < v2733)
            goto LABEL_3586;
          if (v2733 >= v2730)
            goto LABEL_3582;
        }
      }
      else
      {
        if (v2729 < v2732)
          goto LABEL_3586;
        if (v2732 >= v2729)
          goto LABEL_3582;
      }
      ++v2728;
LABEL_3586:
      v2728 = (uint64_t *)*v2728;
      if (!v2728)
        goto LABEL_3598;
    }
  }
  v2722 = 0;
LABEL_3601:
  *v2719 = v2722;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v231 = v3[133];
  if (v231 >> 30)
    v2737 = 1;
  else
    v2737 = (_DWORD)v231 == v5;
  if (v2737)
    goto LABEL_571;
LABEL_3605:
  v2738 = *(_QWORD *)(v1[2] + 8);
  v2739 = v231 & 0xFFFFFFFFCFFFFFFFLL;
  v2740 = *(_QWORD *)(*(_QWORD *)(v2738 + 8) + 2448);
  v2741 = (unsigned int *)(v2740 + 520 * (v231 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2742 = *v2741;
  if ((_DWORD)v2742)
  {
    v2743 = 0;
    v2744 = 0;
    v2745 = **(_QWORD **)(v2738 + 16);
    v2746 = v2740 + 520 * v2739;
    v2747 = v2746 + 364;
    v2748 = v2746 + 340;
    while (1)
    {
      v2749 = (uint64_t *)(v2747 + 12 * v2743);
      v2750 = *(uint64_t **)(v2745 + 2512);
      if (v2750)
        break;
LABEL_3624:
      *(_WORD *)(v2748 + 2 * v2744) = *(_WORD *)(v2748 + 2 * v2743);
      if (v2743 != v2744)
      {
        v2757 = *v2749;
        v2758 = v2747 + 12 * v2744;
        *(_DWORD *)(v2758 + 8) = *((_DWORD *)v2749 + 2);
        *(_QWORD *)v2758 = v2757;
      }
      ++v2744;
LABEL_3608:
      if (++v2743 == v2742)
        goto LABEL_3627;
    }
    v2751 = *(_DWORD *)v2749;
    v2752 = *((_DWORD *)v2749 + 1);
    v2753 = *((_DWORD *)v2749 + 2);
    while (1)
    {
      v2754 = *((_DWORD *)v2750 + 7);
      if (v2751 == v2754)
      {
        v2755 = *((_DWORD *)v2750 + 8);
        if (v2752 == v2755)
        {
          v2756 = *((_DWORD *)v2750 + 9);
          if (v2753 < v2756)
            goto LABEL_3612;
          if (v2756 >= v2753)
            goto LABEL_3608;
        }
        else
        {
          if (v2752 < v2755)
            goto LABEL_3612;
          if (v2755 >= v2752)
            goto LABEL_3608;
        }
      }
      else
      {
        if (v2751 < v2754)
          goto LABEL_3612;
        if (v2754 >= v2751)
          goto LABEL_3608;
      }
      ++v2750;
LABEL_3612:
      v2750 = (uint64_t *)*v2750;
      if (!v2750)
        goto LABEL_3624;
    }
  }
  v2744 = 0;
LABEL_3627:
  *v2741 = v2744;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v233 = v3[134];
  if (v233 >> 30)
    v2759 = 1;
  else
    v2759 = (_DWORD)v233 == v5;
  if (v2759)
    goto LABEL_576;
LABEL_3631:
  v2760 = *(_QWORD *)(v1[2] + 8);
  v2761 = v233 & 0xFFFFFFFFCFFFFFFFLL;
  v2762 = *(_QWORD *)(*(_QWORD *)(v2760 + 8) + 2448);
  v2763 = (unsigned int *)(v2762 + 520 * (v233 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2764 = *v2763;
  if ((_DWORD)v2764)
  {
    v2765 = 0;
    v2766 = 0;
    v2767 = **(_QWORD **)(v2760 + 16);
    v2768 = v2762 + 520 * v2761;
    v2769 = v2768 + 364;
    v2770 = v2768 + 340;
    while (1)
    {
      v2771 = (uint64_t *)(v2769 + 12 * v2765);
      v2772 = *(uint64_t **)(v2767 + 2512);
      if (v2772)
        break;
LABEL_3650:
      *(_WORD *)(v2770 + 2 * v2766) = *(_WORD *)(v2770 + 2 * v2765);
      if (v2765 != v2766)
      {
        v2779 = *v2771;
        v2780 = v2769 + 12 * v2766;
        *(_DWORD *)(v2780 + 8) = *((_DWORD *)v2771 + 2);
        *(_QWORD *)v2780 = v2779;
      }
      ++v2766;
LABEL_3634:
      if (++v2765 == v2764)
        goto LABEL_3653;
    }
    v2773 = *(_DWORD *)v2771;
    v2774 = *((_DWORD *)v2771 + 1);
    v2775 = *((_DWORD *)v2771 + 2);
    while (1)
    {
      v2776 = *((_DWORD *)v2772 + 7);
      if (v2773 == v2776)
      {
        v2777 = *((_DWORD *)v2772 + 8);
        if (v2774 == v2777)
        {
          v2778 = *((_DWORD *)v2772 + 9);
          if (v2775 < v2778)
            goto LABEL_3638;
          if (v2778 >= v2775)
            goto LABEL_3634;
        }
        else
        {
          if (v2774 < v2777)
            goto LABEL_3638;
          if (v2777 >= v2774)
            goto LABEL_3634;
        }
      }
      else
      {
        if (v2773 < v2776)
          goto LABEL_3638;
        if (v2776 >= v2773)
          goto LABEL_3634;
      }
      ++v2772;
LABEL_3638:
      v2772 = (uint64_t *)*v2772;
      if (!v2772)
        goto LABEL_3650;
    }
  }
  v2766 = 0;
LABEL_3653:
  *v2763 = v2766;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v235 = v3[135];
  if (v235 >> 30)
    v2781 = 1;
  else
    v2781 = (_DWORD)v235 == v5;
  if (v2781)
    goto LABEL_581;
LABEL_3657:
  v2782 = *(_QWORD *)(v1[2] + 8);
  v2783 = v235 & 0xFFFFFFFFCFFFFFFFLL;
  v2784 = *(_QWORD *)(*(_QWORD *)(v2782 + 8) + 2448);
  v2785 = (unsigned int *)(v2784 + 520 * (v235 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2786 = *v2785;
  if ((_DWORD)v2786)
  {
    v2787 = 0;
    v2788 = 0;
    v2789 = **(_QWORD **)(v2782 + 16);
    v2790 = v2784 + 520 * v2783;
    v2791 = v2790 + 364;
    v2792 = v2790 + 340;
    while (1)
    {
      v2793 = (uint64_t *)(v2791 + 12 * v2787);
      v2794 = *(uint64_t **)(v2789 + 2512);
      if (v2794)
        break;
LABEL_3676:
      *(_WORD *)(v2792 + 2 * v2788) = *(_WORD *)(v2792 + 2 * v2787);
      if (v2787 != v2788)
      {
        v2801 = *v2793;
        v2802 = v2791 + 12 * v2788;
        *(_DWORD *)(v2802 + 8) = *((_DWORD *)v2793 + 2);
        *(_QWORD *)v2802 = v2801;
      }
      ++v2788;
LABEL_3660:
      if (++v2787 == v2786)
        goto LABEL_3679;
    }
    v2795 = *(_DWORD *)v2793;
    v2796 = *((_DWORD *)v2793 + 1);
    v2797 = *((_DWORD *)v2793 + 2);
    while (1)
    {
      v2798 = *((_DWORD *)v2794 + 7);
      if (v2795 == v2798)
      {
        v2799 = *((_DWORD *)v2794 + 8);
        if (v2796 == v2799)
        {
          v2800 = *((_DWORD *)v2794 + 9);
          if (v2797 < v2800)
            goto LABEL_3664;
          if (v2800 >= v2797)
            goto LABEL_3660;
        }
        else
        {
          if (v2796 < v2799)
            goto LABEL_3664;
          if (v2799 >= v2796)
            goto LABEL_3660;
        }
      }
      else
      {
        if (v2795 < v2798)
          goto LABEL_3664;
        if (v2798 >= v2795)
          goto LABEL_3660;
      }
      ++v2794;
LABEL_3664:
      v2794 = (uint64_t *)*v2794;
      if (!v2794)
        goto LABEL_3676;
    }
  }
  v2788 = 0;
LABEL_3679:
  *v2785 = v2788;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v237 = v3[136];
  if (v237 >> 30)
    v2803 = 1;
  else
    v2803 = (_DWORD)v237 == v5;
  if (v2803)
    goto LABEL_586;
LABEL_3683:
  v2804 = *(_QWORD *)(v1[2] + 8);
  v2805 = v237 & 0xFFFFFFFFCFFFFFFFLL;
  v2806 = *(_QWORD *)(*(_QWORD *)(v2804 + 8) + 2448);
  v2807 = (unsigned int *)(v2806 + 520 * (v237 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2808 = *v2807;
  if ((_DWORD)v2808)
  {
    v2809 = 0;
    v2810 = 0;
    v2811 = **(_QWORD **)(v2804 + 16);
    v2812 = v2806 + 520 * v2805;
    v2813 = v2812 + 364;
    v2814 = v2812 + 340;
    while (1)
    {
      v2815 = (uint64_t *)(v2813 + 12 * v2809);
      v2816 = *(uint64_t **)(v2811 + 2512);
      if (v2816)
        break;
LABEL_3702:
      *(_WORD *)(v2814 + 2 * v2810) = *(_WORD *)(v2814 + 2 * v2809);
      if (v2809 != v2810)
      {
        v2823 = *v2815;
        v2824 = v2813 + 12 * v2810;
        *(_DWORD *)(v2824 + 8) = *((_DWORD *)v2815 + 2);
        *(_QWORD *)v2824 = v2823;
      }
      ++v2810;
LABEL_3686:
      if (++v2809 == v2808)
        goto LABEL_3705;
    }
    v2817 = *(_DWORD *)v2815;
    v2818 = *((_DWORD *)v2815 + 1);
    v2819 = *((_DWORD *)v2815 + 2);
    while (1)
    {
      v2820 = *((_DWORD *)v2816 + 7);
      if (v2817 == v2820)
      {
        v2821 = *((_DWORD *)v2816 + 8);
        if (v2818 == v2821)
        {
          v2822 = *((_DWORD *)v2816 + 9);
          if (v2819 < v2822)
            goto LABEL_3690;
          if (v2822 >= v2819)
            goto LABEL_3686;
        }
        else
        {
          if (v2818 < v2821)
            goto LABEL_3690;
          if (v2821 >= v2818)
            goto LABEL_3686;
        }
      }
      else
      {
        if (v2817 < v2820)
          goto LABEL_3690;
        if (v2820 >= v2817)
          goto LABEL_3686;
      }
      ++v2816;
LABEL_3690:
      v2816 = (uint64_t *)*v2816;
      if (!v2816)
        goto LABEL_3702;
    }
  }
  v2810 = 0;
LABEL_3705:
  *v2807 = v2810;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v239 = v3[137];
  if (v239 >> 30)
    v2825 = 1;
  else
    v2825 = (_DWORD)v239 == v5;
  if (v2825)
    goto LABEL_591;
LABEL_3709:
  v2826 = *(_QWORD *)(v1[2] + 8);
  v2827 = v239 & 0xFFFFFFFFCFFFFFFFLL;
  v2828 = *(_QWORD *)(*(_QWORD *)(v2826 + 8) + 2448);
  v2829 = (unsigned int *)(v2828 + 520 * (v239 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2830 = *v2829;
  if ((_DWORD)v2830)
  {
    v2831 = 0;
    v2832 = 0;
    v2833 = **(_QWORD **)(v2826 + 16);
    v2834 = v2828 + 520 * v2827;
    v2835 = v2834 + 364;
    v2836 = v2834 + 340;
    while (1)
    {
      v2837 = (uint64_t *)(v2835 + 12 * v2831);
      v2838 = *(uint64_t **)(v2833 + 2512);
      if (v2838)
        break;
LABEL_3728:
      *(_WORD *)(v2836 + 2 * v2832) = *(_WORD *)(v2836 + 2 * v2831);
      if (v2831 != v2832)
      {
        v2845 = *v2837;
        v2846 = v2835 + 12 * v2832;
        *(_DWORD *)(v2846 + 8) = *((_DWORD *)v2837 + 2);
        *(_QWORD *)v2846 = v2845;
      }
      ++v2832;
LABEL_3712:
      if (++v2831 == v2830)
        goto LABEL_3731;
    }
    v2839 = *(_DWORD *)v2837;
    v2840 = *((_DWORD *)v2837 + 1);
    v2841 = *((_DWORD *)v2837 + 2);
    while (1)
    {
      v2842 = *((_DWORD *)v2838 + 7);
      if (v2839 == v2842)
      {
        v2843 = *((_DWORD *)v2838 + 8);
        if (v2840 == v2843)
        {
          v2844 = *((_DWORD *)v2838 + 9);
          if (v2841 < v2844)
            goto LABEL_3716;
          if (v2844 >= v2841)
            goto LABEL_3712;
        }
        else
        {
          if (v2840 < v2843)
            goto LABEL_3716;
          if (v2843 >= v2840)
            goto LABEL_3712;
        }
      }
      else
      {
        if (v2839 < v2842)
          goto LABEL_3716;
        if (v2842 >= v2839)
          goto LABEL_3712;
      }
      ++v2838;
LABEL_3716:
      v2838 = (uint64_t *)*v2838;
      if (!v2838)
        goto LABEL_3728;
    }
  }
  v2832 = 0;
LABEL_3731:
  *v2829 = v2832;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v241 = v3[138];
  if (v241 >> 30)
    v2847 = 1;
  else
    v2847 = (_DWORD)v241 == v5;
  if (v2847)
    goto LABEL_596;
LABEL_3735:
  v2848 = *(_QWORD *)(v1[2] + 8);
  v2849 = v241 & 0xFFFFFFFFCFFFFFFFLL;
  v2850 = *(_QWORD *)(*(_QWORD *)(v2848 + 8) + 2448);
  v2851 = (unsigned int *)(v2850 + 520 * (v241 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2852 = *v2851;
  if ((_DWORD)v2852)
  {
    v2853 = 0;
    v2854 = 0;
    v2855 = **(_QWORD **)(v2848 + 16);
    v2856 = v2850 + 520 * v2849;
    v2857 = v2856 + 364;
    v2858 = v2856 + 340;
    while (1)
    {
      v2859 = (uint64_t *)(v2857 + 12 * v2853);
      v2860 = *(uint64_t **)(v2855 + 2512);
      if (v2860)
        break;
LABEL_3754:
      *(_WORD *)(v2858 + 2 * v2854) = *(_WORD *)(v2858 + 2 * v2853);
      if (v2853 != v2854)
      {
        v2867 = *v2859;
        v2868 = v2857 + 12 * v2854;
        *(_DWORD *)(v2868 + 8) = *((_DWORD *)v2859 + 2);
        *(_QWORD *)v2868 = v2867;
      }
      ++v2854;
LABEL_3738:
      if (++v2853 == v2852)
        goto LABEL_3757;
    }
    v2861 = *(_DWORD *)v2859;
    v2862 = *((_DWORD *)v2859 + 1);
    v2863 = *((_DWORD *)v2859 + 2);
    while (1)
    {
      v2864 = *((_DWORD *)v2860 + 7);
      if (v2861 == v2864)
      {
        v2865 = *((_DWORD *)v2860 + 8);
        if (v2862 == v2865)
        {
          v2866 = *((_DWORD *)v2860 + 9);
          if (v2863 < v2866)
            goto LABEL_3742;
          if (v2866 >= v2863)
            goto LABEL_3738;
        }
        else
        {
          if (v2862 < v2865)
            goto LABEL_3742;
          if (v2865 >= v2862)
            goto LABEL_3738;
        }
      }
      else
      {
        if (v2861 < v2864)
          goto LABEL_3742;
        if (v2864 >= v2861)
          goto LABEL_3738;
      }
      ++v2860;
LABEL_3742:
      v2860 = (uint64_t *)*v2860;
      if (!v2860)
        goto LABEL_3754;
    }
  }
  v2854 = 0;
LABEL_3757:
  *v2851 = v2854;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v243 = v3[139];
  if (v243 >> 30)
    v2869 = 1;
  else
    v2869 = (_DWORD)v243 == v5;
  if (v2869)
    goto LABEL_601;
LABEL_3761:
  v2870 = *(_QWORD *)(v1[2] + 8);
  v2871 = v243 & 0xFFFFFFFFCFFFFFFFLL;
  v2872 = *(_QWORD *)(*(_QWORD *)(v2870 + 8) + 2448);
  v2873 = (unsigned int *)(v2872 + 520 * (v243 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2874 = *v2873;
  if ((_DWORD)v2874)
  {
    v2875 = 0;
    v2876 = 0;
    v2877 = **(_QWORD **)(v2870 + 16);
    v2878 = v2872 + 520 * v2871;
    v2879 = v2878 + 364;
    v2880 = v2878 + 340;
    while (1)
    {
      v2881 = (uint64_t *)(v2879 + 12 * v2875);
      v2882 = *(uint64_t **)(v2877 + 2512);
      if (v2882)
        break;
LABEL_3780:
      *(_WORD *)(v2880 + 2 * v2876) = *(_WORD *)(v2880 + 2 * v2875);
      if (v2875 != v2876)
      {
        v2889 = *v2881;
        v2890 = v2879 + 12 * v2876;
        *(_DWORD *)(v2890 + 8) = *((_DWORD *)v2881 + 2);
        *(_QWORD *)v2890 = v2889;
      }
      ++v2876;
LABEL_3764:
      if (++v2875 == v2874)
        goto LABEL_3783;
    }
    v2883 = *(_DWORD *)v2881;
    v2884 = *((_DWORD *)v2881 + 1);
    v2885 = *((_DWORD *)v2881 + 2);
    while (1)
    {
      v2886 = *((_DWORD *)v2882 + 7);
      if (v2883 == v2886)
      {
        v2887 = *((_DWORD *)v2882 + 8);
        if (v2884 == v2887)
        {
          v2888 = *((_DWORD *)v2882 + 9);
          if (v2885 < v2888)
            goto LABEL_3768;
          if (v2888 >= v2885)
            goto LABEL_3764;
        }
        else
        {
          if (v2884 < v2887)
            goto LABEL_3768;
          if (v2887 >= v2884)
            goto LABEL_3764;
        }
      }
      else
      {
        if (v2883 < v2886)
          goto LABEL_3768;
        if (v2886 >= v2883)
          goto LABEL_3764;
      }
      ++v2882;
LABEL_3768:
      v2882 = (uint64_t *)*v2882;
      if (!v2882)
        goto LABEL_3780;
    }
  }
  v2876 = 0;
LABEL_3783:
  *v2873 = v2876;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v245 = v3[140];
  if (v245 >> 30)
    v2891 = 1;
  else
    v2891 = (_DWORD)v245 == v5;
  if (v2891)
    goto LABEL_606;
LABEL_3787:
  v2892 = *(_QWORD *)(v1[2] + 8);
  v2893 = v245 & 0xFFFFFFFFCFFFFFFFLL;
  v2894 = *(_QWORD *)(*(_QWORD *)(v2892 + 8) + 2448);
  v2895 = (unsigned int *)(v2894 + 520 * (v245 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2896 = *v2895;
  if ((_DWORD)v2896)
  {
    v2897 = 0;
    v2898 = 0;
    v2899 = **(_QWORD **)(v2892 + 16);
    v2900 = v2894 + 520 * v2893;
    v2901 = v2900 + 364;
    v2902 = v2900 + 340;
    while (1)
    {
      v2903 = (uint64_t *)(v2901 + 12 * v2897);
      v2904 = *(uint64_t **)(v2899 + 2512);
      if (v2904)
        break;
LABEL_3806:
      *(_WORD *)(v2902 + 2 * v2898) = *(_WORD *)(v2902 + 2 * v2897);
      if (v2897 != v2898)
      {
        v2911 = *v2903;
        v2912 = v2901 + 12 * v2898;
        *(_DWORD *)(v2912 + 8) = *((_DWORD *)v2903 + 2);
        *(_QWORD *)v2912 = v2911;
      }
      ++v2898;
LABEL_3790:
      if (++v2897 == v2896)
        goto LABEL_3809;
    }
    v2905 = *(_DWORD *)v2903;
    v2906 = *((_DWORD *)v2903 + 1);
    v2907 = *((_DWORD *)v2903 + 2);
    while (1)
    {
      v2908 = *((_DWORD *)v2904 + 7);
      if (v2905 == v2908)
      {
        v2909 = *((_DWORD *)v2904 + 8);
        if (v2906 == v2909)
        {
          v2910 = *((_DWORD *)v2904 + 9);
          if (v2907 < v2910)
            goto LABEL_3794;
          if (v2910 >= v2907)
            goto LABEL_3790;
        }
        else
        {
          if (v2906 < v2909)
            goto LABEL_3794;
          if (v2909 >= v2906)
            goto LABEL_3790;
        }
      }
      else
      {
        if (v2905 < v2908)
          goto LABEL_3794;
        if (v2908 >= v2905)
          goto LABEL_3790;
      }
      ++v2904;
LABEL_3794:
      v2904 = (uint64_t *)*v2904;
      if (!v2904)
        goto LABEL_3806;
    }
  }
  v2898 = 0;
LABEL_3809:
  *v2895 = v2898;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v247 = v3[141];
  if (v247 >> 30)
    v2913 = 1;
  else
    v2913 = (_DWORD)v247 == v5;
  if (!v2913)
  {
LABEL_3813:
    v2914 = *(_QWORD *)(v1[2] + 8);
    v2915 = v247 & 0xFFFFFFFFCFFFFFFFLL;
    v2916 = *(_QWORD *)(*(_QWORD *)(v2914 + 8) + 2448);
    v2917 = (unsigned int *)(v2916 + 520 * (v247 & 0xFFFFFFFFCFFFFFFFLL) + 508);
    v2918 = *v2917;
    if ((_DWORD)v2918)
    {
      v2919 = 0;
      v2920 = 0;
      v2921 = **(_QWORD **)(v2914 + 16);
      v2922 = v2916 + 520 * v2915;
      v2923 = v2922 + 364;
      v2924 = v2922 + 340;
      while (1)
      {
        v2925 = (uint64_t *)(v2923 + 12 * v2919);
        v2926 = *(uint64_t **)(v2921 + 2512);
        if (v2926)
          break;
LABEL_3832:
        *(_WORD *)(v2924 + 2 * v2920) = *(_WORD *)(v2924 + 2 * v2919);
        if (v2919 != v2920)
        {
          v2933 = *v2925;
          v2934 = v2923 + 12 * v2920;
          *(_DWORD *)(v2934 + 8) = *((_DWORD *)v2925 + 2);
          *(_QWORD *)v2934 = v2933;
        }
        ++v2920;
LABEL_3816:
        if (++v2919 == v2918)
          goto LABEL_3835;
      }
      v2927 = *(_DWORD *)v2925;
      v2928 = *((_DWORD *)v2925 + 1);
      v2929 = *((_DWORD *)v2925 + 2);
      while (1)
      {
        v2930 = *((_DWORD *)v2926 + 7);
        if (v2927 == v2930)
        {
          v2931 = *((_DWORD *)v2926 + 8);
          if (v2928 == v2931)
          {
            v2932 = *((_DWORD *)v2926 + 9);
            if (v2929 < v2932)
              goto LABEL_3820;
            if (v2932 >= v2929)
              goto LABEL_3816;
          }
          else
          {
            if (v2928 < v2931)
              goto LABEL_3820;
            if (v2931 >= v2928)
              goto LABEL_3816;
          }
        }
        else
        {
          if (v2927 < v2930)
            goto LABEL_3820;
          if (v2930 >= v2927)
            goto LABEL_3816;
        }
        ++v2926;
LABEL_3820:
        v2926 = (uint64_t *)*v2926;
        if (!v2926)
          goto LABEL_3832;
      }
    }
    v2920 = 0;
LABEL_3835:
    *v2917 = v2920;
    v1 = *result;
    v249 = *(unsigned int *)((*result)[1] + 568);
    if (v249 >> 30)
      v2935 = 1;
    else
      v2935 = (_DWORD)v249 == *(_DWORD *)(**result + 272);
    if (v2935)
      return sub_223E6D21C(result);
    goto LABEL_3839;
  }
LABEL_611:
  v249 = v3[142];
  if (v249 >> 30)
    v250 = 1;
  else
    v250 = (_DWORD)v249 == v5;
  if (v250)
    return sub_223E6D21C(result);
LABEL_3839:
  v2936 = *(_QWORD *)(v1[2] + 8);
  v2937 = v249 & 0xFFFFFFFFCFFFFFFFLL;
  v2938 = *(_QWORD *)(*(_QWORD *)(v2936 + 8) + 2448);
  v2939 = (unsigned int *)(v2938 + 520 * (v249 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2940 = *v2939;
  if ((_DWORD)v2940)
  {
    v2941 = 0;
    v2942 = 0;
    v2943 = **(_QWORD **)(v2936 + 16);
    v2944 = v2938 + 520 * v2937;
    v2945 = v2944 + 364;
    v2946 = v2944 + 340;
    while (1)
    {
      v2947 = (uint64_t *)(v2945 + 12 * v2941);
      v2948 = *(uint64_t **)(v2943 + 2512);
      if (v2948)
        break;
LABEL_3858:
      *(_WORD *)(v2946 + 2 * v2942) = *(_WORD *)(v2946 + 2 * v2941);
      if (v2941 != v2942)
      {
        v2955 = *v2947;
        v2956 = v2945 + 12 * v2942;
        *(_DWORD *)(v2956 + 8) = *((_DWORD *)v2947 + 2);
        *(_QWORD *)v2956 = v2955;
      }
      ++v2942;
LABEL_3842:
      if (++v2941 == v2940)
        goto LABEL_3861;
    }
    v2949 = *(_DWORD *)v2947;
    v2950 = *((_DWORD *)v2947 + 1);
    v2951 = *((_DWORD *)v2947 + 2);
    while (1)
    {
      v2952 = *((_DWORD *)v2948 + 7);
      if (v2949 == v2952)
      {
        v2953 = *((_DWORD *)v2948 + 8);
        if (v2950 == v2953)
        {
          v2954 = *((_DWORD *)v2948 + 9);
          if (v2951 < v2954)
            goto LABEL_3846;
          if (v2954 >= v2951)
            goto LABEL_3842;
        }
        else
        {
          if (v2950 < v2953)
            goto LABEL_3846;
          if (v2953 >= v2950)
            goto LABEL_3842;
        }
      }
      else
      {
        if (v2949 < v2952)
          goto LABEL_3846;
        if (v2952 >= v2949)
          goto LABEL_3842;
      }
      ++v2948;
LABEL_3846:
      v2948 = (uint64_t *)*v2948;
      if (!v2948)
        goto LABEL_3858;
    }
  }
  v2942 = 0;
LABEL_3861:
  *v2939 = v2942;
  return sub_223E6D21C(result);
}

uint64_t **sub_223E6D21C(uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  BOOL v204;
  uint64_t v205;
  BOOL v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  BOOL v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  BOOL v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  BOOL v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  BOOL v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  BOOL v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  BOOL v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unsigned int *v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  BOOL v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int *v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t *v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  BOOL v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t *v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  BOOL v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  BOOL v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t *v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  BOOL v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t *v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  BOOL v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unsigned int *v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t *v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  uint64_t v557;
  uint64_t v558;
  BOOL v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unsigned int *v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t *v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  BOOL v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unsigned int *v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t *v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  BOOL v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t *v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  BOOL v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unsigned int *v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t *v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  BOOL v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int *v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t *v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  BOOL v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unsigned int *v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t *v682;
  int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  uint64_t v689;
  uint64_t v690;
  BOOL v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  unsigned int *v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t *v704;
  int v705;
  int v706;
  int v707;
  int v708;
  int v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  BOOL v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unsigned int *v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t *v726;
  int v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  BOOL v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unsigned int *v739;
  uint64_t v740;
  uint64_t v741;
  unsigned int v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t *v748;
  int v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  BOOL v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unsigned int *v761;
  uint64_t v762;
  uint64_t v763;
  unsigned int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  uint64_t *v770;
  int v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  uint64_t v777;
  uint64_t v778;
  BOOL v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  unsigned int *v783;
  uint64_t v784;
  uint64_t v785;
  unsigned int v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t *v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  int v798;
  uint64_t v799;
  uint64_t v800;
  BOOL v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  unsigned int *v805;
  uint64_t v806;
  uint64_t v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t *v813;
  uint64_t *v814;
  int v815;
  int v816;
  int v817;
  int v818;
  int v819;
  int v820;
  uint64_t v821;
  uint64_t v822;
  BOOL v823;
  uint64_t v824;
  unint64_t v825;
  uint64_t v826;
  unsigned int *v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t *v835;
  uint64_t *v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  BOOL v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  unsigned int *v849;
  uint64_t v850;
  uint64_t v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t *v857;
  uint64_t *v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  BOOL v867;
  uint64_t v868;
  unint64_t v869;
  uint64_t v870;
  unsigned int *v871;
  uint64_t v872;
  uint64_t v873;
  unsigned int v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t *v879;
  uint64_t *v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  BOOL v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unsigned int *v893;
  uint64_t v894;
  uint64_t v895;
  unsigned int v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  uint64_t *v902;
  int v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  BOOL v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unsigned int *v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t *v923;
  uint64_t *v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  BOOL v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unsigned int *v937;
  uint64_t v938;
  uint64_t v939;
  unsigned int v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t *v945;
  uint64_t *v946;
  int v947;
  int v948;
  int v949;
  int v950;
  int v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  BOOL v955;
  uint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unsigned int *v959;
  uint64_t v960;
  uint64_t v961;
  unsigned int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t *v967;
  uint64_t *v968;
  int v969;
  int v970;
  int v971;
  int v972;
  int v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  BOOL v977;
  uint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unsigned int *v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t *v989;
  uint64_t *v990;
  int v991;
  int v992;
  int v993;
  int v994;
  int v995;
  int v996;
  uint64_t v997;
  uint64_t v998;
  BOOL v999;
  uint64_t v1000;
  unint64_t v1001;
  uint64_t v1002;
  unsigned int *v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  int v1013;
  int v1014;
  int v1015;
  int v1016;
  int v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  BOOL v1021;
  uint64_t v1022;
  unint64_t v1023;
  uint64_t v1024;
  unsigned int *v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t *v1033;
  uint64_t *v1034;
  int v1035;
  int v1036;
  int v1037;
  int v1038;
  int v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  BOOL v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  unsigned int *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unsigned int v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t *v1056;
  int v1057;
  int v1058;
  int v1059;
  int v1060;
  int v1061;
  int v1062;
  uint64_t v1063;
  uint64_t v1064;
  BOOL v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  unsigned int *v1069;
  uint64_t v1070;
  uint64_t v1071;
  unsigned int v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t *v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  int v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  BOOL v1087;
  uint64_t v1088;
  unint64_t v1089;
  uint64_t v1090;
  unsigned int *v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t *v1099;
  uint64_t *v1100;
  int v1101;
  int v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  uint64_t v1107;
  uint64_t v1108;
  BOOL v1109;
  uint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unsigned int *v1113;
  uint64_t v1114;
  uint64_t v1115;
  unsigned int v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t *v1121;
  uint64_t *v1122;
  int v1123;
  int v1124;
  int v1125;
  int v1126;
  int v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  BOOL v1131;
  uint64_t v1132;
  unint64_t v1133;
  uint64_t v1134;
  unsigned int *v1135;
  uint64_t v1136;
  uint64_t v1137;
  unsigned int v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t *v1143;
  uint64_t *v1144;
  int v1145;
  int v1146;
  int v1147;
  int v1148;
  int v1149;
  int v1150;
  uint64_t v1151;
  uint64_t v1152;
  BOOL v1153;
  uint64_t v1154;
  unint64_t v1155;
  uint64_t v1156;
  unsigned int *v1157;
  uint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t *v1165;
  uint64_t *v1166;
  int v1167;
  int v1168;
  int v1169;
  int v1170;
  int v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  BOOL v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  unsigned int *v1179;
  uint64_t v1180;
  uint64_t v1181;
  unsigned int v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t *v1187;
  uint64_t *v1188;
  int v1189;
  int v1190;
  int v1191;
  int v1192;
  int v1193;
  int v1194;
  uint64_t v1195;
  uint64_t v1196;
  BOOL v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  unsigned int *v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t *v1209;
  uint64_t *v1210;
  int v1211;
  int v1212;
  int v1213;
  int v1214;
  int v1215;
  int v1216;
  uint64_t v1217;
  uint64_t v1218;
  BOOL v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  unsigned int *v1223;
  uint64_t v1224;
  uint64_t v1225;
  unsigned int v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t *v1231;
  uint64_t *v1232;
  int v1233;
  int v1234;
  int v1235;
  int v1236;
  int v1237;
  int v1238;
  uint64_t v1239;
  uint64_t v1240;
  BOOL v1241;
  uint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  unsigned int *v1245;
  uint64_t v1246;
  uint64_t v1247;
  unsigned int v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t *v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  uint64_t v1261;
  uint64_t v1262;
  BOOL v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  unsigned int *v1267;
  uint64_t v1268;
  uint64_t v1269;
  unsigned int v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t *v1275;
  uint64_t *v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  int v1282;
  uint64_t v1283;
  uint64_t v1284;
  BOOL v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  unsigned int *v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t *v1297;
  uint64_t *v1298;
  int v1299;
  int v1300;
  int v1301;
  int v1302;
  int v1303;
  int v1304;
  uint64_t v1305;
  uint64_t v1306;
  BOOL v1307;
  uint64_t v1308;
  unint64_t v1309;
  uint64_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  unsigned int v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t *v1319;
  uint64_t *v1320;
  int v1321;
  int v1322;
  int v1323;
  int v1324;
  int v1325;
  int v1326;
  uint64_t v1327;
  uint64_t v1328;
  BOOL v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unsigned int *v1333;
  uint64_t v1334;
  uint64_t v1335;
  unsigned int v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t *v1341;
  uint64_t *v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  int v1348;
  uint64_t v1349;
  uint64_t v1350;
  BOOL v1351;
  uint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  unsigned int *v1355;
  uint64_t v1356;
  uint64_t v1357;
  unsigned int v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t *v1363;
  uint64_t *v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int v1370;
  uint64_t v1371;
  uint64_t v1372;
  BOOL v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  unsigned int *v1377;
  uint64_t v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t *v1385;
  uint64_t *v1386;
  int v1387;
  int v1388;
  int v1389;
  int v1390;
  int v1391;
  int v1392;
  uint64_t v1393;
  uint64_t v1394;
  BOOL v1395;
  uint64_t v1396;
  unint64_t v1397;
  uint64_t v1398;
  unsigned int *v1399;
  uint64_t v1400;
  uint64_t v1401;
  unsigned int v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t *v1407;
  uint64_t *v1408;
  int v1409;
  int v1410;
  int v1411;
  int v1412;
  int v1413;
  int v1414;
  uint64_t v1415;
  uint64_t v1416;
  BOOL v1417;
  uint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  unsigned int *v1421;
  uint64_t v1422;
  uint64_t v1423;
  unsigned int v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t *v1429;
  uint64_t *v1430;
  int v1431;
  int v1432;
  int v1433;
  int v1434;
  int v1435;
  int v1436;
  uint64_t v1437;
  uint64_t v1438;
  BOOL v1439;
  uint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  unsigned int *v1443;
  uint64_t v1444;
  uint64_t v1445;
  unsigned int v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t *v1451;
  uint64_t *v1452;
  int v1453;
  int v1454;
  int v1455;
  int v1456;
  int v1457;
  int v1458;
  uint64_t v1459;
  uint64_t v1460;
  BOOL v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unsigned int *v1465;
  uint64_t v1466;
  uint64_t v1467;
  unsigned int v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t *v1473;
  uint64_t *v1474;
  int v1475;
  int v1476;
  int v1477;
  int v1478;
  int v1479;
  int v1480;
  uint64_t v1481;
  uint64_t v1482;
  BOOL v1483;
  uint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  unsigned int *v1487;
  uint64_t v1488;
  uint64_t v1489;
  unsigned int v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t *v1495;
  uint64_t *v1496;
  int v1497;
  int v1498;
  int v1499;
  int v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  BOOL v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unsigned int *v1509;
  uint64_t v1510;
  uint64_t v1511;
  unsigned int v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t *v1517;
  uint64_t *v1518;
  int v1519;
  int v1520;
  int v1521;
  int v1522;
  int v1523;
  int v1524;
  uint64_t v1525;
  uint64_t v1526;
  BOOL v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  unsigned int *v1531;
  uint64_t v1532;
  uint64_t v1533;
  unsigned int v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t *v1539;
  uint64_t *v1540;
  int v1541;
  int v1542;
  int v1543;
  int v1544;
  int v1545;
  int v1546;
  uint64_t v1547;
  uint64_t v1548;
  BOOL v1549;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  unsigned int *v1553;
  uint64_t v1554;
  uint64_t v1555;
  unsigned int v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t *v1561;
  uint64_t *v1562;
  int v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  int v1568;
  uint64_t v1569;
  uint64_t v1570;
  BOOL v1571;
  uint64_t v1572;
  unint64_t v1573;
  uint64_t v1574;
  unsigned int *v1575;
  uint64_t v1576;
  uint64_t v1577;
  unsigned int v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t *v1583;
  uint64_t *v1584;
  int v1585;
  int v1586;
  int v1587;
  int v1588;
  int v1589;
  int v1590;
  uint64_t v1591;
  uint64_t v1592;
  BOOL v1593;
  uint64_t v1594;
  unint64_t v1595;
  uint64_t v1596;
  unsigned int *v1597;
  uint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t *v1605;
  uint64_t *v1606;
  int v1607;
  int v1608;
  int v1609;
  int v1610;
  int v1611;
  int v1612;
  uint64_t v1613;
  uint64_t v1614;
  BOOL v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unsigned int *v1619;
  uint64_t v1620;
  uint64_t v1621;
  unsigned int v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t *v1627;
  uint64_t *v1628;
  int v1629;
  int v1630;
  int v1631;
  int v1632;
  int v1633;
  int v1634;
  uint64_t v1635;
  uint64_t v1636;
  BOOL v1637;
  uint64_t v1638;
  unint64_t v1639;
  uint64_t v1640;
  unsigned int *v1641;
  uint64_t v1642;
  uint64_t v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t *v1649;
  uint64_t *v1650;
  int v1651;
  int v1652;
  int v1653;
  int v1654;
  int v1655;
  int v1656;
  uint64_t v1657;
  uint64_t v1658;
  BOOL v1659;
  uint64_t v1660;
  unint64_t v1661;
  uint64_t v1662;
  unsigned int *v1663;
  uint64_t v1664;
  uint64_t v1665;
  unsigned int v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t *v1671;
  uint64_t *v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  uint64_t v1679;
  uint64_t v1680;
  BOOL v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  unsigned int *v1685;
  uint64_t v1686;
  uint64_t v1687;
  unsigned int v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t *v1693;
  uint64_t *v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  int v1699;
  int v1700;
  uint64_t v1701;
  uint64_t v1702;
  BOOL v1703;
  uint64_t v1704;
  unint64_t v1705;
  uint64_t v1706;
  unsigned int *v1707;
  uint64_t v1708;
  uint64_t v1709;
  unsigned int v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t *v1715;
  uint64_t *v1716;
  int v1717;
  int v1718;
  int v1719;
  int v1720;
  int v1721;
  int v1722;
  uint64_t v1723;
  uint64_t v1724;
  BOOL v1725;
  uint64_t v1726;
  unint64_t v1727;
  uint64_t v1728;
  unsigned int *v1729;
  uint64_t v1730;
  uint64_t v1731;
  unsigned int v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t *v1737;
  uint64_t *v1738;
  int v1739;
  int v1740;
  int v1741;
  int v1742;
  int v1743;
  int v1744;
  uint64_t v1745;
  uint64_t v1746;
  BOOL v1747;
  uint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unsigned int *v1751;
  uint64_t v1752;
  uint64_t v1753;
  unsigned int v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t *v1759;
  uint64_t *v1760;
  int v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  int v1766;
  uint64_t v1767;
  uint64_t v1768;
  BOOL v1769;
  uint64_t v1770;
  unint64_t v1771;
  uint64_t v1772;
  unsigned int *v1773;
  uint64_t v1774;
  uint64_t v1775;
  unsigned int v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t *v1781;
  uint64_t *v1782;
  int v1783;
  int v1784;
  int v1785;
  int v1786;
  int v1787;
  int v1788;
  uint64_t v1789;
  uint64_t v1790;
  BOOL v1791;
  uint64_t v1792;
  unint64_t v1793;
  uint64_t v1794;
  unsigned int *v1795;
  uint64_t v1796;
  uint64_t v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t *v1803;
  uint64_t *v1804;
  int v1805;
  int v1806;
  int v1807;
  int v1808;
  int v1809;
  int v1810;
  uint64_t v1811;
  uint64_t v1812;
  BOOL v1813;
  uint64_t v1814;
  unint64_t v1815;
  uint64_t v1816;
  unsigned int *v1817;
  uint64_t v1818;
  uint64_t v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t *v1825;
  uint64_t *v1826;
  int v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  int v1832;
  uint64_t v1833;
  uint64_t v1834;
  BOOL v1835;
  uint64_t v1836;
  unint64_t v1837;
  uint64_t v1838;
  unsigned int *v1839;
  uint64_t v1840;
  uint64_t v1841;
  unsigned int v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t *v1847;
  uint64_t *v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  uint64_t v1855;
  uint64_t v1856;
  BOOL v1857;
  uint64_t v1858;
  unint64_t v1859;
  uint64_t v1860;
  unsigned int *v1861;
  uint64_t v1862;
  uint64_t v1863;
  unsigned int v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t *v1869;
  uint64_t *v1870;
  int v1871;
  int v1872;
  int v1873;
  int v1874;
  int v1875;
  int v1876;
  uint64_t v1877;
  uint64_t v1878;
  BOOL v1879;
  uint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  unsigned int *v1883;
  uint64_t v1884;
  uint64_t v1885;
  unsigned int v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t *v1891;
  uint64_t *v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  int v1897;
  int v1898;
  uint64_t v1899;
  uint64_t v1900;
  BOOL v1901;
  uint64_t v1902;
  unint64_t v1903;
  uint64_t v1904;
  unsigned int *v1905;
  uint64_t v1906;
  uint64_t v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t *v1913;
  uint64_t *v1914;
  int v1915;
  int v1916;
  int v1917;
  int v1918;
  int v1919;
  int v1920;
  uint64_t v1921;
  uint64_t v1922;
  BOOL v1923;
  uint64_t v1924;
  unint64_t v1925;
  uint64_t v1926;
  unsigned int *v1927;
  uint64_t v1928;
  uint64_t v1929;
  unsigned int v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  uint64_t *v1935;
  uint64_t *v1936;
  int v1937;
  int v1938;
  int v1939;
  int v1940;
  int v1941;
  int v1942;
  uint64_t v1943;
  uint64_t v1944;
  BOOL v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  unsigned int *v1949;
  uint64_t v1950;
  uint64_t v1951;
  unsigned int v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t *v1957;
  uint64_t *v1958;
  int v1959;
  int v1960;
  int v1961;
  int v1962;
  int v1963;
  int v1964;
  uint64_t v1965;
  uint64_t v1966;
  BOOL v1967;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  unsigned int *v1971;
  uint64_t v1972;
  uint64_t v1973;
  unsigned int v1974;
  uint64_t v1975;
  uint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  uint64_t *v1979;
  uint64_t *v1980;
  int v1981;
  int v1982;
  int v1983;
  int v1984;
  int v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  BOOL v1989;
  uint64_t v1990;
  unint64_t v1991;
  uint64_t v1992;
  unsigned int *v1993;
  uint64_t v1994;
  uint64_t v1995;
  unsigned int v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t *v2001;
  uint64_t *v2002;
  int v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  int v2008;
  uint64_t v2009;
  uint64_t v2010;
  BOOL v2011;
  uint64_t v2012;
  unint64_t v2013;
  uint64_t v2014;
  unsigned int *v2015;
  uint64_t v2016;
  uint64_t v2017;
  unsigned int v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t *v2023;
  uint64_t *v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  int v2030;
  uint64_t v2031;
  uint64_t v2032;
  BOOL v2033;
  uint64_t v2034;
  unint64_t v2035;
  uint64_t v2036;
  unsigned int *v2037;
  uint64_t v2038;
  uint64_t v2039;
  unsigned int v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t *v2045;
  uint64_t *v2046;
  int v2047;
  int v2048;
  int v2049;
  int v2050;
  int v2051;
  int v2052;
  uint64_t v2053;
  uint64_t v2054;
  BOOL v2055;
  uint64_t v2056;
  unint64_t v2057;
  uint64_t v2058;
  unsigned int *v2059;
  uint64_t v2060;
  uint64_t v2061;
  unsigned int v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t *v2067;
  uint64_t *v2068;
  int v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  int v2074;
  uint64_t v2075;
  uint64_t v2076;
  BOOL v2077;
  uint64_t v2078;
  unint64_t v2079;
  uint64_t v2080;
  unsigned int *v2081;
  uint64_t v2082;
  uint64_t v2083;
  unsigned int v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  uint64_t v2088;
  uint64_t *v2089;
  uint64_t *v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  int v2096;
  uint64_t v2097;
  uint64_t v2098;
  BOOL v2099;
  uint64_t v2100;
  unint64_t v2101;
  uint64_t v2102;
  unsigned int *v2103;
  uint64_t v2104;
  uint64_t v2105;
  unsigned int v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  uint64_t *v2111;
  uint64_t *v2112;
  int v2113;
  int v2114;
  int v2115;
  int v2116;
  int v2117;
  int v2118;
  uint64_t v2119;
  uint64_t v2120;
  BOOL v2121;
  uint64_t v2122;
  unint64_t v2123;
  uint64_t v2124;
  unsigned int *v2125;
  uint64_t v2126;
  uint64_t v2127;
  unsigned int v2128;
  uint64_t v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t *v2133;
  uint64_t *v2134;
  int v2135;
  int v2136;
  int v2137;
  int v2138;
  int v2139;
  int v2140;
  uint64_t v2141;
  uint64_t v2142;
  BOOL v2143;
  uint64_t v2144;
  unint64_t v2145;
  uint64_t v2146;
  unsigned int *v2147;
  uint64_t v2148;
  uint64_t v2149;
  unsigned int v2150;
  uint64_t v2151;
  uint64_t v2152;
  uint64_t v2153;
  uint64_t v2154;
  uint64_t *v2155;
  uint64_t *v2156;
  int v2157;
  int v2158;
  int v2159;
  int v2160;
  int v2161;
  int v2162;
  uint64_t v2163;
  uint64_t v2164;
  BOOL v2165;
  uint64_t v2166;
  unint64_t v2167;
  uint64_t v2168;
  unsigned int *v2169;
  uint64_t v2170;
  uint64_t v2171;
  unsigned int v2172;
  uint64_t v2173;
  uint64_t v2174;
  uint64_t v2175;
  uint64_t v2176;
  uint64_t *v2177;
  uint64_t *v2178;
  int v2179;
  int v2180;
  int v2181;
  int v2182;
  int v2183;
  int v2184;
  uint64_t v2185;
  uint64_t v2186;
  BOOL v2187;
  uint64_t v2188;
  unint64_t v2189;
  uint64_t v2190;
  unsigned int *v2191;
  uint64_t v2192;
  uint64_t v2193;
  unsigned int v2194;
  uint64_t v2195;
  uint64_t v2196;
  uint64_t v2197;
  uint64_t v2198;
  uint64_t *v2199;
  uint64_t *v2200;
  int v2201;
  int v2202;
  int v2203;
  int v2204;
  int v2205;
  int v2206;
  uint64_t v2207;
  uint64_t v2208;
  BOOL v2209;
  uint64_t v2210;
  unint64_t v2211;
  uint64_t v2212;
  unsigned int *v2213;
  uint64_t v2214;
  uint64_t v2215;
  unsigned int v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  uint64_t *v2221;
  uint64_t *v2222;
  int v2223;
  int v2224;
  int v2225;
  int v2226;
  int v2227;
  int v2228;
  uint64_t v2229;
  uint64_t v2230;
  BOOL v2231;
  uint64_t v2232;
  unint64_t v2233;
  uint64_t v2234;
  unsigned int *v2235;
  uint64_t v2236;
  uint64_t v2237;
  unsigned int v2238;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t *v2243;
  uint64_t *v2244;
  int v2245;
  int v2246;
  int v2247;
  int v2248;
  int v2249;
  int v2250;
  uint64_t v2251;
  uint64_t v2252;
  BOOL v2253;
  uint64_t v2254;
  unint64_t v2255;
  uint64_t v2256;
  unsigned int *v2257;
  uint64_t v2258;
  uint64_t v2259;
  unsigned int v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t *v2265;
  uint64_t *v2266;
  int v2267;
  int v2268;
  int v2269;
  int v2270;
  int v2271;
  int v2272;
  uint64_t v2273;
  uint64_t v2274;
  BOOL v2275;
  uint64_t v2276;
  unint64_t v2277;
  uint64_t v2278;
  unsigned int *v2279;
  uint64_t v2280;
  uint64_t v2281;
  unsigned int v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  uint64_t *v2287;
  uint64_t *v2288;
  int v2289;
  int v2290;
  int v2291;
  int v2292;
  int v2293;
  int v2294;
  uint64_t v2295;
  uint64_t v2296;
  BOOL v2297;
  uint64_t v2298;
  unint64_t v2299;
  uint64_t v2300;
  unsigned int *v2301;
  uint64_t v2302;
  uint64_t v2303;
  unsigned int v2304;
  uint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t *v2309;
  uint64_t *v2310;
  int v2311;
  int v2312;
  int v2313;
  int v2314;
  int v2315;
  int v2316;
  uint64_t v2317;
  uint64_t v2318;
  BOOL v2319;
  uint64_t v2320;
  unint64_t v2321;
  uint64_t v2322;
  unsigned int *v2323;
  uint64_t v2324;
  uint64_t v2325;
  unsigned int v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t *v2331;
  uint64_t *v2332;
  int v2333;
  int v2334;
  int v2335;
  int v2336;
  int v2337;
  int v2338;
  uint64_t v2339;
  uint64_t v2340;
  BOOL v2341;
  uint64_t v2342;
  unint64_t v2343;
  uint64_t v2344;
  unsigned int *v2345;
  uint64_t v2346;
  uint64_t v2347;
  unsigned int v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t *v2353;
  uint64_t *v2354;
  int v2355;
  int v2356;
  int v2357;
  int v2358;
  int v2359;
  int v2360;
  uint64_t v2361;
  uint64_t v2362;
  BOOL v2363;
  uint64_t v2364;
  unint64_t v2365;
  uint64_t v2366;
  unsigned int *v2367;
  uint64_t v2368;
  uint64_t v2369;
  unsigned int v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t *v2375;
  uint64_t *v2376;
  int v2377;
  int v2378;
  int v2379;
  int v2380;
  int v2381;
  int v2382;
  uint64_t v2383;
  uint64_t v2384;
  BOOL v2385;
  uint64_t v2386;
  unint64_t v2387;
  uint64_t v2388;
  unsigned int *v2389;
  uint64_t v2390;
  uint64_t v2391;
  unsigned int v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t *v2397;
  uint64_t *v2398;
  int v2399;
  int v2400;
  int v2401;
  int v2402;
  int v2403;
  int v2404;
  uint64_t v2405;
  uint64_t v2406;
  BOOL v2407;
  uint64_t v2408;
  unint64_t v2409;
  uint64_t v2410;
  unsigned int *v2411;
  uint64_t v2412;
  uint64_t v2413;
  unsigned int v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t *v2419;
  uint64_t *v2420;
  int v2421;
  int v2422;
  int v2423;
  int v2424;
  int v2425;
  int v2426;
  uint64_t v2427;
  uint64_t v2428;
  BOOL v2429;
  uint64_t v2430;
  unint64_t v2431;
  uint64_t v2432;
  unsigned int *v2433;
  uint64_t v2434;
  uint64_t v2435;
  unsigned int v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t *v2441;
  uint64_t *v2442;
  int v2443;
  int v2444;
  int v2445;
  int v2446;
  int v2447;
  int v2448;
  uint64_t v2449;
  uint64_t v2450;
  BOOL v2451;
  uint64_t v2452;
  unint64_t v2453;
  uint64_t v2454;
  unsigned int *v2455;
  uint64_t v2456;
  uint64_t v2457;
  unsigned int v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t *v2463;
  uint64_t *v2464;
  int v2465;
  int v2466;
  int v2467;
  int v2468;
  int v2469;
  int v2470;
  uint64_t v2471;
  uint64_t v2472;
  BOOL v2473;
  uint64_t v2474;
  unint64_t v2475;
  uint64_t v2476;
  unsigned int *v2477;
  uint64_t v2478;
  uint64_t v2479;
  unsigned int v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t *v2485;
  uint64_t *v2486;
  int v2487;
  int v2488;
  int v2489;
  int v2490;
  int v2491;
  int v2492;
  uint64_t v2493;
  uint64_t v2494;
  BOOL v2495;
  uint64_t v2496;
  unint64_t v2497;
  uint64_t v2498;
  unsigned int *v2499;
  uint64_t v2500;
  uint64_t v2501;
  unsigned int v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t *v2507;
  uint64_t *v2508;
  int v2509;
  int v2510;
  int v2511;
  int v2512;
  int v2513;
  int v2514;
  uint64_t v2515;
  uint64_t v2516;
  BOOL v2517;
  uint64_t v2518;
  unint64_t v2519;
  uint64_t v2520;
  unsigned int *v2521;
  uint64_t v2522;
  uint64_t v2523;
  unsigned int v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t *v2529;
  uint64_t *v2530;
  int v2531;
  int v2532;
  int v2533;
  int v2534;
  int v2535;
  int v2536;
  uint64_t v2537;
  uint64_t v2538;
  BOOL v2539;
  uint64_t v2540;
  unint64_t v2541;
  uint64_t v2542;
  unsigned int *v2543;
  uint64_t v2544;
  uint64_t v2545;
  unsigned int v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t *v2551;
  uint64_t *v2552;
  int v2553;
  int v2554;
  int v2555;
  int v2556;
  int v2557;
  int v2558;
  uint64_t v2559;
  uint64_t v2560;
  BOOL v2561;
  uint64_t v2562;
  unint64_t v2563;
  uint64_t v2564;
  unsigned int *v2565;
  uint64_t v2566;
  uint64_t v2567;
  unsigned int v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t *v2573;
  uint64_t *v2574;
  int v2575;
  int v2576;
  int v2577;
  int v2578;
  int v2579;
  int v2580;
  uint64_t v2581;
  uint64_t v2582;
  BOOL v2583;
  uint64_t v2584;
  unint64_t v2585;
  uint64_t v2586;
  unsigned int *v2587;
  uint64_t v2588;
  uint64_t v2589;
  unsigned int v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t *v2595;
  uint64_t *v2596;
  int v2597;
  int v2598;
  int v2599;
  int v2600;
  int v2601;
  int v2602;
  uint64_t v2603;
  uint64_t v2604;
  BOOL v2605;
  uint64_t v2606;
  unint64_t v2607;
  uint64_t v2608;
  unsigned int *v2609;
  uint64_t v2610;
  uint64_t v2611;
  unsigned int v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t *v2617;
  uint64_t *v2618;
  int v2619;
  int v2620;
  int v2621;
  int v2622;
  int v2623;
  int v2624;
  uint64_t v2625;
  uint64_t v2626;
  BOOL v2627;
  uint64_t v2628;
  unint64_t v2629;
  uint64_t v2630;
  unsigned int *v2631;
  uint64_t v2632;
  uint64_t v2633;
  unsigned int v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t *v2639;
  uint64_t *v2640;
  int v2641;
  int v2642;
  int v2643;
  int v2644;
  int v2645;
  int v2646;
  uint64_t v2647;
  uint64_t v2648;
  BOOL v2649;
  uint64_t v2650;
  unint64_t v2651;
  uint64_t v2652;
  unsigned int *v2653;
  uint64_t v2654;
  uint64_t v2655;
  unsigned int v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t *v2661;
  uint64_t *v2662;
  int v2663;
  int v2664;
  int v2665;
  int v2666;
  int v2667;
  int v2668;
  uint64_t v2669;
  uint64_t v2670;
  BOOL v2671;
  uint64_t v2672;
  unint64_t v2673;
  uint64_t v2674;
  unsigned int *v2675;
  uint64_t v2676;
  uint64_t v2677;
  unsigned int v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2682;
  uint64_t *v2683;
  uint64_t *v2684;
  int v2685;
  int v2686;
  int v2687;
  int v2688;
  int v2689;
  int v2690;
  uint64_t v2691;
  uint64_t v2692;
  BOOL v2693;
  uint64_t v2694;
  unint64_t v2695;
  uint64_t v2696;
  unsigned int *v2697;
  uint64_t v2698;
  uint64_t v2699;
  unsigned int v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t *v2705;
  uint64_t *v2706;
  int v2707;
  int v2708;
  int v2709;
  int v2710;
  int v2711;
  int v2712;
  uint64_t v2713;
  uint64_t v2714;
  BOOL v2715;
  uint64_t v2716;
  unint64_t v2717;
  uint64_t v2718;
  unsigned int *v2719;
  uint64_t v2720;
  uint64_t v2721;
  unsigned int v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t *v2727;
  uint64_t *v2728;
  int v2729;
  int v2730;
  int v2731;
  int v2732;
  int v2733;
  int v2734;
  uint64_t v2735;
  uint64_t v2736;
  BOOL v2737;
  uint64_t v2738;
  unint64_t v2739;
  uint64_t v2740;
  unsigned int *v2741;
  uint64_t v2742;
  uint64_t v2743;
  unsigned int v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t *v2749;
  uint64_t *v2750;
  int v2751;
  int v2752;
  int v2753;
  int v2754;
  int v2755;
  int v2756;
  uint64_t v2757;
  uint64_t v2758;
  BOOL v2759;
  uint64_t v2760;
  unint64_t v2761;
  uint64_t v2762;
  unsigned int *v2763;
  uint64_t v2764;
  uint64_t v2765;
  unsigned int v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  uint64_t v2770;
  uint64_t *v2771;
  uint64_t *v2772;
  int v2773;
  int v2774;
  int v2775;
  int v2776;
  int v2777;
  int v2778;
  uint64_t v2779;
  uint64_t v2780;
  BOOL v2781;
  uint64_t v2782;
  unint64_t v2783;
  uint64_t v2784;
  unsigned int *v2785;
  uint64_t v2786;
  uint64_t v2787;
  unsigned int v2788;
  uint64_t v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t *v2793;
  uint64_t *v2794;
  int v2795;
  int v2796;
  int v2797;
  int v2798;
  int v2799;
  int v2800;
  uint64_t v2801;
  uint64_t v2802;
  BOOL v2803;
  uint64_t v2804;
  unint64_t v2805;
  uint64_t v2806;
  unsigned int *v2807;
  uint64_t v2808;
  uint64_t v2809;
  unsigned int v2810;
  uint64_t v2811;
  uint64_t v2812;
  uint64_t v2813;
  uint64_t v2814;
  uint64_t *v2815;
  uint64_t *v2816;
  int v2817;
  int v2818;
  int v2819;
  int v2820;
  int v2821;
  int v2822;
  uint64_t v2823;
  uint64_t v2824;
  BOOL v2825;
  uint64_t v2826;
  unint64_t v2827;
  uint64_t v2828;
  unsigned int *v2829;
  uint64_t v2830;
  uint64_t v2831;
  unsigned int v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  uint64_t v2836;
  uint64_t *v2837;
  uint64_t *v2838;
  int v2839;
  int v2840;
  int v2841;
  int v2842;
  int v2843;
  int v2844;
  uint64_t v2845;
  uint64_t v2846;
  BOOL v2847;
  uint64_t v2848;
  unint64_t v2849;
  uint64_t v2850;
  unsigned int *v2851;
  uint64_t v2852;
  uint64_t v2853;
  unsigned int v2854;
  uint64_t v2855;
  uint64_t v2856;
  uint64_t v2857;
  uint64_t v2858;
  uint64_t *v2859;
  uint64_t *v2860;
  int v2861;
  int v2862;
  int v2863;
  int v2864;
  int v2865;
  int v2866;
  uint64_t v2867;
  uint64_t v2868;
  BOOL v2869;
  uint64_t v2870;
  unint64_t v2871;
  uint64_t v2872;
  unsigned int *v2873;
  uint64_t v2874;
  uint64_t v2875;
  unsigned int v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t *v2881;
  uint64_t *v2882;
  int v2883;
  int v2884;
  int v2885;
  int v2886;
  int v2887;
  int v2888;
  uint64_t v2889;
  uint64_t v2890;
  BOOL v2891;
  uint64_t v2892;
  unint64_t v2893;
  uint64_t v2894;
  unsigned int *v2895;
  uint64_t v2896;
  uint64_t v2897;
  unsigned int v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t *v2903;
  uint64_t *v2904;
  int v2905;
  int v2906;
  int v2907;
  int v2908;
  int v2909;
  int v2910;
  uint64_t v2911;
  uint64_t v2912;
  BOOL v2913;
  uint64_t v2914;
  unint64_t v2915;
  uint64_t v2916;
  unsigned int *v2917;
  uint64_t v2918;
  uint64_t v2919;
  unsigned int v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t *v2925;
  uint64_t *v2926;
  int v2927;
  int v2928;
  int v2929;
  int v2930;
  int v2931;
  int v2932;
  uint64_t v2933;
  uint64_t v2934;
  BOOL v2935;
  uint64_t v2936;
  unint64_t v2937;
  uint64_t v2938;
  unsigned int *v2939;
  uint64_t v2940;
  uint64_t v2941;
  unsigned int v2942;
  uint64_t v2943;
  uint64_t v2944;
  uint64_t v2945;
  uint64_t v2946;
  uint64_t *v2947;
  uint64_t *v2948;
  int v2949;
  int v2950;
  int v2951;
  int v2952;
  int v2953;
  int v2954;
  uint64_t v2955;
  uint64_t v2956;

  v1 = *result;
  v2 = **result;
  v3 = (unsigned int *)(*result)[1];
  v4 = v3[143];
  v5 = *(_DWORD *)(v2 + 272);
  if (v4 >> 30)
    v6 = 1;
  else
    v6 = (_DWORD)v4 == v5;
  if (v6)
  {
    v7 = v3[144];
    if (v7 >> 30)
      v8 = 1;
    else
      v8 = (_DWORD)v7 == v5;
    if (!v8)
      goto LABEL_644;
LABEL_11:
    v9 = v3[145];
    if (v9 >> 30)
      v10 = 1;
    else
      v10 = (_DWORD)v9 == v5;
    if (!v10)
      goto LABEL_671;
LABEL_16:
    v11 = v3[146];
    if (v11 >> 30)
      v12 = 1;
    else
      v12 = (_DWORD)v11 == v5;
    if (!v12)
      goto LABEL_698;
LABEL_21:
    v13 = v3[147];
    if (v13 >> 30)
      v14 = 1;
    else
      v14 = (_DWORD)v13 == v5;
    if (!v14)
      goto LABEL_725;
LABEL_26:
    v15 = v3[148];
    if (v15 >> 30)
      v16 = 1;
    else
      v16 = (_DWORD)v15 == v5;
    if (!v16)
      goto LABEL_752;
LABEL_31:
    v17 = v3[149];
    if (v17 >> 30)
      v18 = 1;
    else
      v18 = (_DWORD)v17 == v5;
    if (!v18)
      goto LABEL_779;
LABEL_36:
    v19 = v3[150];
    if (v19 >> 30)
      v20 = 1;
    else
      v20 = (_DWORD)v19 == v5;
    if (!v20)
      goto LABEL_806;
LABEL_41:
    v21 = v3[151];
    if (v21 >> 30)
      v22 = 1;
    else
      v22 = (_DWORD)v21 == v5;
    if (!v22)
      goto LABEL_833;
LABEL_46:
    v23 = v3[152];
    if (v23 >> 30)
      v24 = 1;
    else
      v24 = (_DWORD)v23 == v5;
    if (!v24)
      goto LABEL_860;
LABEL_51:
    v25 = v3[153];
    if (v25 >> 30)
      v26 = 1;
    else
      v26 = (_DWORD)v25 == v5;
    if (!v26)
      goto LABEL_887;
LABEL_56:
    v27 = v3[154];
    if (v27 >> 30)
      v28 = 1;
    else
      v28 = (_DWORD)v27 == v5;
    if (!v28)
      goto LABEL_914;
LABEL_61:
    v29 = v3[155];
    if (v29 >> 30)
      v30 = 1;
    else
      v30 = (_DWORD)v29 == v5;
    if (!v30)
      goto LABEL_941;
LABEL_66:
    v31 = v3[156];
    if (v31 >> 30)
      v32 = 1;
    else
      v32 = (_DWORD)v31 == v5;
    if (!v32)
      goto LABEL_968;
LABEL_71:
    v33 = v3[157];
    if (v33 >> 30)
      v34 = 1;
    else
      v34 = (_DWORD)v33 == v5;
    if (!v34)
      goto LABEL_995;
LABEL_76:
    v35 = v3[158];
    if (v35 >> 30)
      v36 = 1;
    else
      v36 = (_DWORD)v35 == v5;
    if (!v36)
      goto LABEL_1022;
LABEL_81:
    v37 = v3[159];
    if (v37 >> 30)
      v38 = 1;
    else
      v38 = (_DWORD)v37 == v5;
    if (!v38)
      goto LABEL_1049;
LABEL_86:
    v39 = v3[160];
    if (v39 >> 30)
      v40 = 1;
    else
      v40 = (_DWORD)v39 == v5;
    if (!v40)
      goto LABEL_1076;
LABEL_91:
    v41 = v3[161];
    if (v41 >> 30)
      v42 = 1;
    else
      v42 = (_DWORD)v41 == v5;
    if (!v42)
      goto LABEL_1103;
LABEL_96:
    v43 = v3[162];
    if (v43 >> 30)
      v44 = 1;
    else
      v44 = (_DWORD)v43 == v5;
    if (!v44)
      goto LABEL_1130;
LABEL_101:
    v45 = v3[163];
    if (v45 >> 30)
      v46 = 1;
    else
      v46 = (_DWORD)v45 == v5;
    if (!v46)
      goto LABEL_1157;
LABEL_106:
    v47 = v3[164];
    if (v47 >> 30)
      v48 = 1;
    else
      v48 = (_DWORD)v47 == v5;
    if (!v48)
      goto LABEL_1184;
LABEL_111:
    v49 = v3[165];
    if (v49 >> 30)
      v50 = 1;
    else
      v50 = (_DWORD)v49 == v5;
    if (!v50)
      goto LABEL_1211;
LABEL_116:
    v51 = v3[166];
    if (v51 >> 30)
      v52 = 1;
    else
      v52 = (_DWORD)v51 == v5;
    if (!v52)
      goto LABEL_1238;
LABEL_121:
    v53 = v3[167];
    if (v53 >> 30)
      v54 = 1;
    else
      v54 = (_DWORD)v53 == v5;
    if (!v54)
      goto LABEL_1265;
LABEL_126:
    v55 = v3[168];
    if (v55 >> 30)
      v56 = 1;
    else
      v56 = (_DWORD)v55 == v5;
    if (!v56)
      goto LABEL_1292;
LABEL_131:
    v57 = v3[169];
    if (v57 >> 30)
      v58 = 1;
    else
      v58 = (_DWORD)v57 == v5;
    if (!v58)
      goto LABEL_1319;
LABEL_136:
    v59 = v3[170];
    if (v59 >> 30)
      v60 = 1;
    else
      v60 = (_DWORD)v59 == v5;
    if (!v60)
      goto LABEL_1346;
LABEL_141:
    v61 = v3[171];
    if (v61 >> 30)
      v62 = 1;
    else
      v62 = (_DWORD)v61 == v5;
    if (!v62)
      goto LABEL_1373;
LABEL_146:
    v63 = v3[172];
    if (v63 >> 30)
      v64 = 1;
    else
      v64 = (_DWORD)v63 == v5;
    if (!v64)
      goto LABEL_1400;
LABEL_151:
    v65 = v3[173];
    if (v65 >> 30)
      v66 = 1;
    else
      v66 = (_DWORD)v65 == v5;
    if (!v66)
      goto LABEL_1427;
LABEL_156:
    v67 = v3[174];
    if (v67 >> 30)
      v68 = 1;
    else
      v68 = (_DWORD)v67 == v5;
    if (!v68)
      goto LABEL_1454;
LABEL_161:
    v69 = v3[175];
    if (v69 >> 30)
      v70 = 1;
    else
      v70 = (_DWORD)v69 == v5;
    if (!v70)
      goto LABEL_1481;
LABEL_166:
    v71 = v3[176];
    if (v71 >> 30)
      v72 = 1;
    else
      v72 = (_DWORD)v71 == v5;
    if (!v72)
      goto LABEL_1508;
LABEL_171:
    v73 = v3[177];
    if (v73 >> 30)
      v74 = 1;
    else
      v74 = (_DWORD)v73 == v5;
    if (!v74)
      goto LABEL_1535;
LABEL_176:
    v75 = v3[178];
    if (v75 >> 30)
      v76 = 1;
    else
      v76 = (_DWORD)v75 == v5;
    if (!v76)
      goto LABEL_1562;
LABEL_181:
    v77 = v3[179];
    if (v77 >> 30)
      v78 = 1;
    else
      v78 = (_DWORD)v77 == v5;
    if (!v78)
      goto LABEL_1589;
LABEL_186:
    v79 = v3[180];
    if (v79 >> 30)
      v80 = 1;
    else
      v80 = (_DWORD)v79 == v5;
    if (!v80)
      goto LABEL_1616;
LABEL_191:
    v81 = v3[181];
    if (v81 >> 30)
      v82 = 1;
    else
      v82 = (_DWORD)v81 == v5;
    if (!v82)
      goto LABEL_1643;
LABEL_196:
    v83 = v3[182];
    if (v83 >> 30)
      v84 = 1;
    else
      v84 = (_DWORD)v83 == v5;
    if (!v84)
      goto LABEL_1670;
LABEL_201:
    v85 = v3[183];
    if (v85 >> 30)
      v86 = 1;
    else
      v86 = (_DWORD)v85 == v5;
    if (!v86)
      goto LABEL_1697;
LABEL_206:
    v87 = v3[184];
    if (v87 >> 30)
      v88 = 1;
    else
      v88 = (_DWORD)v87 == v5;
    if (!v88)
      goto LABEL_1724;
LABEL_211:
    v89 = v3[185];
    if (v89 >> 30)
      v90 = 1;
    else
      v90 = (_DWORD)v89 == v5;
    if (!v90)
      goto LABEL_1751;
LABEL_216:
    v91 = v3[186];
    if (v91 >> 30)
      v92 = 1;
    else
      v92 = (_DWORD)v91 == v5;
    if (!v92)
      goto LABEL_1778;
LABEL_221:
    v93 = v3[187];
    if (v93 >> 30)
      v94 = 1;
    else
      v94 = (_DWORD)v93 == v5;
    if (!v94)
      goto LABEL_1805;
LABEL_226:
    v95 = v3[188];
    if (v95 >> 30)
      v96 = 1;
    else
      v96 = (_DWORD)v95 == v5;
    if (!v96)
      goto LABEL_1832;
LABEL_231:
    v97 = v3[189];
    if (v97 >> 30)
      v98 = 1;
    else
      v98 = (_DWORD)v97 == v5;
    if (!v98)
      goto LABEL_1859;
LABEL_236:
    v99 = v3[190];
    if (v99 >> 30)
      v100 = 1;
    else
      v100 = (_DWORD)v99 == v5;
    if (!v100)
      goto LABEL_1886;
LABEL_241:
    v101 = v3[191];
    if (v101 >> 30)
      v102 = 1;
    else
      v102 = (_DWORD)v101 == v5;
    if (!v102)
      goto LABEL_1913;
LABEL_246:
    v103 = v3[192];
    if (v103 >> 30)
      v104 = 1;
    else
      v104 = (_DWORD)v103 == v5;
    if (!v104)
      goto LABEL_1940;
LABEL_251:
    v105 = v3[193];
    if (v105 >> 30)
      v106 = 1;
    else
      v106 = (_DWORD)v105 == v5;
    if (!v106)
      goto LABEL_1967;
LABEL_256:
    v107 = v3[194];
    if (v107 >> 30)
      v108 = 1;
    else
      v108 = (_DWORD)v107 == v5;
    if (!v108)
      goto LABEL_1993;
LABEL_261:
    v109 = v3[195];
    if (v109 >> 30)
      v110 = 1;
    else
      v110 = (_DWORD)v109 == v5;
    if (!v110)
      goto LABEL_2019;
LABEL_266:
    v111 = v3[196];
    if (v111 >> 30)
      v112 = 1;
    else
      v112 = (_DWORD)v111 == v5;
    if (!v112)
      goto LABEL_2045;
LABEL_271:
    v113 = v3[197];
    if (v113 >> 30)
      v114 = 1;
    else
      v114 = (_DWORD)v113 == v5;
    if (!v114)
      goto LABEL_2071;
LABEL_276:
    v115 = v3[198];
    if (v115 >> 30)
      v116 = 1;
    else
      v116 = (_DWORD)v115 == v5;
    if (!v116)
      goto LABEL_2097;
LABEL_281:
    v117 = v3[199];
    if (v117 >> 30)
      v118 = 1;
    else
      v118 = (_DWORD)v117 == v5;
    if (!v118)
      goto LABEL_2123;
LABEL_286:
    v119 = v3[200];
    if (v119 >> 30)
      v120 = 1;
    else
      v120 = (_DWORD)v119 == v5;
    if (!v120)
      goto LABEL_2149;
LABEL_291:
    v121 = v3[201];
    if (v121 >> 30)
      v122 = 1;
    else
      v122 = (_DWORD)v121 == v5;
    if (!v122)
      goto LABEL_2175;
LABEL_296:
    v123 = v3[202];
    if (v123 >> 30)
      v124 = 1;
    else
      v124 = (_DWORD)v123 == v5;
    if (!v124)
      goto LABEL_2201;
LABEL_301:
    v125 = v3[203];
    if (v125 >> 30)
      v126 = 1;
    else
      v126 = (_DWORD)v125 == v5;
    if (!v126)
      goto LABEL_2227;
LABEL_306:
    v127 = v3[204];
    if (v127 >> 30)
      v128 = 1;
    else
      v128 = (_DWORD)v127 == v5;
    if (!v128)
      goto LABEL_2253;
LABEL_311:
    v129 = v3[205];
    if (v129 >> 30)
      v130 = 1;
    else
      v130 = (_DWORD)v129 == v5;
    if (!v130)
      goto LABEL_2279;
LABEL_316:
    v131 = v3[206];
    if (v131 >> 30)
      v132 = 1;
    else
      v132 = (_DWORD)v131 == v5;
    if (!v132)
      goto LABEL_2305;
LABEL_321:
    v133 = v3[207];
    if (v133 >> 30)
      v134 = 1;
    else
      v134 = (_DWORD)v133 == v5;
    if (!v134)
      goto LABEL_2331;
LABEL_326:
    v135 = v3[208];
    if (v135 >> 30)
      v136 = 1;
    else
      v136 = (_DWORD)v135 == v5;
    if (!v136)
      goto LABEL_2357;
LABEL_331:
    v137 = v3[209];
    if (v137 >> 30)
      v138 = 1;
    else
      v138 = (_DWORD)v137 == v5;
    if (!v138)
      goto LABEL_2383;
LABEL_336:
    v139 = v3[210];
    if (v139 >> 30)
      v140 = 1;
    else
      v140 = (_DWORD)v139 == v5;
    if (!v140)
      goto LABEL_2409;
LABEL_341:
    v141 = v3[211];
    if (v141 >> 30)
      v142 = 1;
    else
      v142 = (_DWORD)v141 == v5;
    if (!v142)
      goto LABEL_2435;
LABEL_346:
    v143 = v3[212];
    if (v143 >> 30)
      v144 = 1;
    else
      v144 = (_DWORD)v143 == v5;
    if (!v144)
      goto LABEL_2461;
LABEL_351:
    v145 = v3[213];
    if (v145 >> 30)
      v146 = 1;
    else
      v146 = (_DWORD)v145 == v5;
    if (!v146)
      goto LABEL_2487;
LABEL_356:
    v147 = v3[214];
    if (v147 >> 30)
      v148 = 1;
    else
      v148 = (_DWORD)v147 == v5;
    if (!v148)
      goto LABEL_2513;
LABEL_361:
    v149 = v3[215];
    if (v149 >> 30)
      v150 = 1;
    else
      v150 = (_DWORD)v149 == v5;
    if (!v150)
      goto LABEL_2539;
LABEL_366:
    v151 = v3[216];
    if (v151 >> 30)
      v152 = 1;
    else
      v152 = (_DWORD)v151 == v5;
    if (!v152)
      goto LABEL_2565;
LABEL_371:
    v153 = v3[217];
    if (v153 >> 30)
      v154 = 1;
    else
      v154 = (_DWORD)v153 == v5;
    if (!v154)
      goto LABEL_2591;
LABEL_376:
    v155 = v3[218];
    if (v155 >> 30)
      v156 = 1;
    else
      v156 = (_DWORD)v155 == v5;
    if (!v156)
      goto LABEL_2617;
LABEL_381:
    v157 = v3[219];
    if (v157 >> 30)
      v158 = 1;
    else
      v158 = (_DWORD)v157 == v5;
    if (!v158)
      goto LABEL_2643;
LABEL_386:
    v159 = v3[220];
    if (v159 >> 30)
      v160 = 1;
    else
      v160 = (_DWORD)v159 == v5;
    if (!v160)
      goto LABEL_2669;
LABEL_391:
    v161 = v3[221];
    if (v161 >> 30)
      v162 = 1;
    else
      v162 = (_DWORD)v161 == v5;
    if (!v162)
      goto LABEL_2695;
LABEL_396:
    v163 = v3[222];
    if (v163 >> 30)
      v164 = 1;
    else
      v164 = (_DWORD)v163 == v5;
    if (!v164)
      goto LABEL_2721;
LABEL_401:
    v165 = v3[223];
    if (v165 >> 30)
      v166 = 1;
    else
      v166 = (_DWORD)v165 == v5;
    if (!v166)
      goto LABEL_2747;
LABEL_406:
    v167 = v3[224];
    if (v167 >> 30)
      v168 = 1;
    else
      v168 = (_DWORD)v167 == v5;
    if (!v168)
      goto LABEL_2773;
LABEL_411:
    v169 = v3[225];
    if (v169 >> 30)
      v170 = 1;
    else
      v170 = (_DWORD)v169 == v5;
    if (!v170)
      goto LABEL_2799;
LABEL_416:
    v171 = v3[226];
    if (v171 >> 30)
      v172 = 1;
    else
      v172 = (_DWORD)v171 == v5;
    if (!v172)
      goto LABEL_2825;
LABEL_421:
    v173 = v3[227];
    if (v173 >> 30)
      v174 = 1;
    else
      v174 = (_DWORD)v173 == v5;
    if (!v174)
      goto LABEL_2851;
LABEL_426:
    v175 = v3[228];
    if (v175 >> 30)
      v176 = 1;
    else
      v176 = (_DWORD)v175 == v5;
    if (!v176)
      goto LABEL_2877;
LABEL_431:
    v177 = v3[229];
    if (v177 >> 30)
      v178 = 1;
    else
      v178 = (_DWORD)v177 == v5;
    if (!v178)
      goto LABEL_2903;
LABEL_436:
    v179 = v3[230];
    if (v179 >> 30)
      v180 = 1;
    else
      v180 = (_DWORD)v179 == v5;
    if (!v180)
      goto LABEL_2929;
LABEL_441:
    v181 = v3[231];
    if (v181 >> 30)
      v182 = 1;
    else
      v182 = (_DWORD)v181 == v5;
    if (!v182)
      goto LABEL_2955;
LABEL_446:
    v183 = v3[232];
    if (v183 >> 30)
      v184 = 1;
    else
      v184 = (_DWORD)v183 == v5;
    if (!v184)
      goto LABEL_2981;
LABEL_451:
    v185 = v3[233];
    if (v185 >> 30)
      v186 = 1;
    else
      v186 = (_DWORD)v185 == v5;
    if (!v186)
      goto LABEL_3007;
LABEL_456:
    v187 = v3[234];
    if (v187 >> 30)
      v188 = 1;
    else
      v188 = (_DWORD)v187 == v5;
    if (!v188)
      goto LABEL_3033;
LABEL_461:
    v189 = v3[235];
    if (v189 >> 30)
      v190 = 1;
    else
      v190 = (_DWORD)v189 == v5;
    if (!v190)
      goto LABEL_3059;
LABEL_466:
    v191 = v3[236];
    if (v191 >> 30)
      v192 = 1;
    else
      v192 = (_DWORD)v191 == v5;
    if (!v192)
      goto LABEL_3085;
LABEL_471:
    v193 = v3[237];
    if (v193 >> 30)
      v194 = 1;
    else
      v194 = (_DWORD)v193 == v5;
    if (!v194)
      goto LABEL_3111;
LABEL_476:
    v195 = v3[238];
    if (v195 >> 30)
      v196 = 1;
    else
      v196 = (_DWORD)v195 == v5;
    if (!v196)
      goto LABEL_3137;
LABEL_481:
    v197 = v3[239];
    if (v197 >> 30)
      v198 = 1;
    else
      v198 = (_DWORD)v197 == v5;
    if (!v198)
      goto LABEL_3163;
LABEL_486:
    v199 = v3[240];
    if (v199 >> 30)
      v200 = 1;
    else
      v200 = (_DWORD)v199 == v5;
    if (!v200)
      goto LABEL_3189;
LABEL_491:
    v201 = v3[241];
    if (v201 >> 30)
      v202 = 1;
    else
      v202 = (_DWORD)v201 == v5;
    if (!v202)
      goto LABEL_3215;
LABEL_496:
    v203 = v3[242];
    if (v203 >> 30)
      v204 = 1;
    else
      v204 = (_DWORD)v203 == v5;
    if (!v204)
      goto LABEL_3241;
LABEL_501:
    v205 = v3[243];
    if (v205 >> 30)
      v206 = 1;
    else
      v206 = (_DWORD)v205 == v5;
    if (!v206)
      goto LABEL_3267;
LABEL_506:
    v207 = v3[244];
    if (v207 >> 30)
      v208 = 1;
    else
      v208 = (_DWORD)v207 == v5;
    if (!v208)
      goto LABEL_3293;
LABEL_511:
    v209 = v3[245];
    if (v209 >> 30)
      v210 = 1;
    else
      v210 = (_DWORD)v209 == v5;
    if (!v210)
      goto LABEL_3319;
LABEL_516:
    v211 = v3[246];
    if (v211 >> 30)
      v212 = 1;
    else
      v212 = (_DWORD)v211 == v5;
    if (!v212)
      goto LABEL_3345;
LABEL_521:
    v213 = v3[247];
    if (v213 >> 30)
      v214 = 1;
    else
      v214 = (_DWORD)v213 == v5;
    if (!v214)
      goto LABEL_3371;
LABEL_526:
    v215 = v3[248];
    if (v215 >> 30)
      v216 = 1;
    else
      v216 = (_DWORD)v215 == v5;
    if (!v216)
      goto LABEL_3397;
LABEL_531:
    v217 = v3[249];
    if (v217 >> 30)
      v218 = 1;
    else
      v218 = (_DWORD)v217 == v5;
    if (!v218)
      goto LABEL_3423;
LABEL_536:
    v219 = v3[250];
    if (v219 >> 30)
      v220 = 1;
    else
      v220 = (_DWORD)v219 == v5;
    if (!v220)
      goto LABEL_3449;
LABEL_541:
    v221 = v3[251];
    if (v221 >> 30)
      v222 = 1;
    else
      v222 = (_DWORD)v221 == v5;
    if (!v222)
      goto LABEL_3475;
LABEL_546:
    v223 = v3[252];
    if (v223 >> 30)
      v224 = 1;
    else
      v224 = (_DWORD)v223 == v5;
    if (!v224)
      goto LABEL_3501;
LABEL_551:
    v225 = v3[253];
    if (v225 >> 30)
      v226 = 1;
    else
      v226 = (_DWORD)v225 == v5;
    if (!v226)
      goto LABEL_3527;
LABEL_556:
    v227 = v3[254];
    if (v227 >> 30)
      v228 = 1;
    else
      v228 = (_DWORD)v227 == v5;
    if (!v228)
      goto LABEL_3553;
LABEL_561:
    v229 = v3[255];
    if (v229 >> 30)
      v230 = 1;
    else
      v230 = (_DWORD)v229 == v5;
    if (!v230)
      goto LABEL_3579;
LABEL_566:
    v231 = v3[256];
    if (v231 >> 30)
      v232 = 1;
    else
      v232 = (_DWORD)v231 == v5;
    if (!v232)
      goto LABEL_3605;
LABEL_571:
    v233 = v3[257];
    if (v233 >> 30)
      v234 = 1;
    else
      v234 = (_DWORD)v233 == v5;
    if (!v234)
      goto LABEL_3631;
LABEL_576:
    v235 = v3[258];
    if (v235 >> 30)
      v236 = 1;
    else
      v236 = (_DWORD)v235 == v5;
    if (!v236)
      goto LABEL_3657;
LABEL_581:
    v237 = v3[259];
    if (v237 >> 30)
      v238 = 1;
    else
      v238 = (_DWORD)v237 == v5;
    if (!v238)
      goto LABEL_3683;
LABEL_586:
    v239 = v3[260];
    if (v239 >> 30)
      v240 = 1;
    else
      v240 = (_DWORD)v239 == v5;
    if (!v240)
      goto LABEL_3709;
LABEL_591:
    v241 = v3[261];
    if (v241 >> 30)
      v242 = 1;
    else
      v242 = (_DWORD)v241 == v5;
    if (!v242)
      goto LABEL_3735;
LABEL_596:
    v243 = v3[262];
    if (v243 >> 30)
      v244 = 1;
    else
      v244 = (_DWORD)v243 == v5;
    if (!v244)
      goto LABEL_3761;
LABEL_601:
    v245 = v3[263];
    if (v245 >> 30)
      v246 = 1;
    else
      v246 = (_DWORD)v245 == v5;
    if (!v246)
      goto LABEL_3787;
LABEL_606:
    v247 = v3[264];
    if (v247 >> 30)
      v248 = 1;
    else
      v248 = (_DWORD)v247 == v5;
    if (!v248)
      goto LABEL_3813;
    goto LABEL_611;
  }
  v252 = *(_QWORD *)(v1[2] + 8);
  v253 = v4 & 0xFFFFFFFFCFFFFFFFLL;
  v254 = *(_QWORD *)(*(_QWORD *)(v252 + 8) + 2448);
  v255 = (unsigned int *)(v254 + 520 * (v4 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v256 = *v255;
  if ((_DWORD)v256)
  {
    v257 = 0;
    v258 = 0;
    v259 = **(_QWORD **)(v252 + 16);
    v260 = v254 + 520 * v253;
    v261 = v260 + 364;
    v262 = v260 + 340;
    while (1)
    {
      v263 = (uint64_t *)(v261 + 12 * v257);
      v264 = *(uint64_t **)(v259 + 2512);
      if (v264)
        break;
LABEL_636:
      *(_WORD *)(v262 + 2 * v258) = *(_WORD *)(v262 + 2 * v257);
      if (v257 != v258)
      {
        v271 = *v263;
        v272 = v261 + 12 * v258;
        *(_DWORD *)(v272 + 8) = *((_DWORD *)v263 + 2);
        *(_QWORD *)v272 = v271;
      }
      ++v258;
LABEL_620:
      if (++v257 == v256)
      {
        v1 = *result;
        v2 = **result;
        v3 = (unsigned int *)(*result)[1];
        v5 = *(_DWORD *)(v2 + 272);
        goto LABEL_640;
      }
    }
    v265 = *(_DWORD *)v263;
    v266 = *((_DWORD *)v263 + 1);
    v267 = *((_DWORD *)v263 + 2);
    while (1)
    {
      v268 = *((_DWORD *)v264 + 7);
      if (v265 == v268)
      {
        v269 = *((_DWORD *)v264 + 8);
        if (v266 == v269)
        {
          v270 = *((_DWORD *)v264 + 9);
          if (v267 < v270)
            goto LABEL_624;
          if (v270 >= v267)
            goto LABEL_620;
        }
        else
        {
          if (v266 < v269)
            goto LABEL_624;
          if (v269 >= v266)
            goto LABEL_620;
        }
      }
      else
      {
        if (v265 < v268)
          goto LABEL_624;
        if (v268 >= v265)
          goto LABEL_620;
      }
      ++v264;
LABEL_624:
      v264 = (uint64_t *)*v264;
      if (!v264)
        goto LABEL_636;
    }
  }
  v258 = 0;
LABEL_640:
  *v255 = v258;
  v7 = v3[144];
  if (v7 >> 30)
    v273 = 1;
  else
    v273 = (_DWORD)v7 == v5;
  if (v273)
    goto LABEL_11;
LABEL_644:
  v274 = *(_QWORD *)(v1[2] + 8);
  v275 = v7 & 0xFFFFFFFFCFFFFFFFLL;
  v276 = *(_QWORD *)(*(_QWORD *)(v274 + 8) + 2448);
  v277 = (unsigned int *)(v276 + 520 * (v7 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v278 = *v277;
  if ((_DWORD)v278)
  {
    v279 = 0;
    v280 = 0;
    v281 = **(_QWORD **)(v274 + 16);
    v282 = v276 + 520 * v275;
    v283 = v282 + 364;
    v284 = v282 + 340;
    while (1)
    {
      v285 = (uint64_t *)(v283 + 12 * v279);
      v286 = *(uint64_t **)(v281 + 2512);
      if (v286)
        break;
LABEL_663:
      *(_WORD *)(v284 + 2 * v280) = *(_WORD *)(v284 + 2 * v279);
      if (v279 != v280)
      {
        v293 = *v285;
        v294 = v283 + 12 * v280;
        *(_DWORD *)(v294 + 8) = *((_DWORD *)v285 + 2);
        *(_QWORD *)v294 = v293;
      }
      ++v280;
LABEL_647:
      if (++v279 == v278)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_667;
      }
    }
    v287 = *(_DWORD *)v285;
    v288 = *((_DWORD *)v285 + 1);
    v289 = *((_DWORD *)v285 + 2);
    while (1)
    {
      v290 = *((_DWORD *)v286 + 7);
      if (v287 == v290)
      {
        v291 = *((_DWORD *)v286 + 8);
        if (v288 == v291)
        {
          v292 = *((_DWORD *)v286 + 9);
          if (v289 < v292)
            goto LABEL_651;
          if (v292 >= v289)
            goto LABEL_647;
        }
        else
        {
          if (v288 < v291)
            goto LABEL_651;
          if (v291 >= v288)
            goto LABEL_647;
        }
      }
      else
      {
        if (v287 < v290)
          goto LABEL_651;
        if (v290 >= v287)
          goto LABEL_647;
      }
      ++v286;
LABEL_651:
      v286 = (uint64_t *)*v286;
      if (!v286)
        goto LABEL_663;
    }
  }
  v280 = 0;
LABEL_667:
  *v277 = v280;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v9 = v3[145];
  if (v9 >> 30)
    v295 = 1;
  else
    v295 = (_DWORD)v9 == v5;
  if (v295)
    goto LABEL_16;
LABEL_671:
  v296 = *(_QWORD *)(v1[2] + 8);
  v297 = v9 & 0xFFFFFFFFCFFFFFFFLL;
  v298 = *(_QWORD *)(*(_QWORD *)(v296 + 8) + 2448);
  v299 = (unsigned int *)(v298 + 520 * (v9 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v300 = *v299;
  if ((_DWORD)v300)
  {
    v301 = 0;
    v302 = 0;
    v303 = **(_QWORD **)(v296 + 16);
    v304 = v298 + 520 * v297;
    v305 = v304 + 364;
    v306 = v304 + 340;
    while (1)
    {
      v307 = (uint64_t *)(v305 + 12 * v301);
      v308 = *(uint64_t **)(v303 + 2512);
      if (v308)
        break;
LABEL_690:
      *(_WORD *)(v306 + 2 * v302) = *(_WORD *)(v306 + 2 * v301);
      if (v301 != v302)
      {
        v315 = *v307;
        v316 = v305 + 12 * v302;
        *(_DWORD *)(v316 + 8) = *((_DWORD *)v307 + 2);
        *(_QWORD *)v316 = v315;
      }
      ++v302;
LABEL_674:
      if (++v301 == v300)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_694;
      }
    }
    v309 = *(_DWORD *)v307;
    v310 = *((_DWORD *)v307 + 1);
    v311 = *((_DWORD *)v307 + 2);
    while (1)
    {
      v312 = *((_DWORD *)v308 + 7);
      if (v309 == v312)
      {
        v313 = *((_DWORD *)v308 + 8);
        if (v310 == v313)
        {
          v314 = *((_DWORD *)v308 + 9);
          if (v311 < v314)
            goto LABEL_678;
          if (v314 >= v311)
            goto LABEL_674;
        }
        else
        {
          if (v310 < v313)
            goto LABEL_678;
          if (v313 >= v310)
            goto LABEL_674;
        }
      }
      else
      {
        if (v309 < v312)
          goto LABEL_678;
        if (v312 >= v309)
          goto LABEL_674;
      }
      ++v308;
LABEL_678:
      v308 = (uint64_t *)*v308;
      if (!v308)
        goto LABEL_690;
    }
  }
  v302 = 0;
LABEL_694:
  *v299 = v302;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v11 = v3[146];
  if (v11 >> 30)
    v317 = 1;
  else
    v317 = (_DWORD)v11 == v5;
  if (v317)
    goto LABEL_21;
LABEL_698:
  v318 = *(_QWORD *)(v1[2] + 8);
  v319 = v11 & 0xFFFFFFFFCFFFFFFFLL;
  v320 = *(_QWORD *)(*(_QWORD *)(v318 + 8) + 2448);
  v321 = (unsigned int *)(v320 + 520 * (v11 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v322 = *v321;
  if ((_DWORD)v322)
  {
    v323 = 0;
    v324 = 0;
    v325 = **(_QWORD **)(v318 + 16);
    v326 = v320 + 520 * v319;
    v327 = v326 + 364;
    v328 = v326 + 340;
    while (1)
    {
      v329 = (uint64_t *)(v327 + 12 * v323);
      v330 = *(uint64_t **)(v325 + 2512);
      if (v330)
        break;
LABEL_717:
      *(_WORD *)(v328 + 2 * v324) = *(_WORD *)(v328 + 2 * v323);
      if (v323 != v324)
      {
        v337 = *v329;
        v338 = v327 + 12 * v324;
        *(_DWORD *)(v338 + 8) = *((_DWORD *)v329 + 2);
        *(_QWORD *)v338 = v337;
      }
      ++v324;
LABEL_701:
      if (++v323 == v322)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_721;
      }
    }
    v331 = *(_DWORD *)v329;
    v332 = *((_DWORD *)v329 + 1);
    v333 = *((_DWORD *)v329 + 2);
    while (1)
    {
      v334 = *((_DWORD *)v330 + 7);
      if (v331 == v334)
      {
        v335 = *((_DWORD *)v330 + 8);
        if (v332 == v335)
        {
          v336 = *((_DWORD *)v330 + 9);
          if (v333 < v336)
            goto LABEL_705;
          if (v336 >= v333)
            goto LABEL_701;
        }
        else
        {
          if (v332 < v335)
            goto LABEL_705;
          if (v335 >= v332)
            goto LABEL_701;
        }
      }
      else
      {
        if (v331 < v334)
          goto LABEL_705;
        if (v334 >= v331)
          goto LABEL_701;
      }
      ++v330;
LABEL_705:
      v330 = (uint64_t *)*v330;
      if (!v330)
        goto LABEL_717;
    }
  }
  v324 = 0;
LABEL_721:
  *v321 = v324;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v13 = v3[147];
  if (v13 >> 30)
    v339 = 1;
  else
    v339 = (_DWORD)v13 == v5;
  if (v339)
    goto LABEL_26;
LABEL_725:
  v340 = *(_QWORD *)(v1[2] + 8);
  v341 = v13 & 0xFFFFFFFFCFFFFFFFLL;
  v342 = *(_QWORD *)(*(_QWORD *)(v340 + 8) + 2448);
  v343 = (unsigned int *)(v342 + 520 * (v13 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v344 = *v343;
  if ((_DWORD)v344)
  {
    v345 = 0;
    v346 = 0;
    v347 = **(_QWORD **)(v340 + 16);
    v348 = v342 + 520 * v341;
    v349 = v348 + 364;
    v350 = v348 + 340;
    while (1)
    {
      v351 = (uint64_t *)(v349 + 12 * v345);
      v352 = *(uint64_t **)(v347 + 2512);
      if (v352)
        break;
LABEL_744:
      *(_WORD *)(v350 + 2 * v346) = *(_WORD *)(v350 + 2 * v345);
      if (v345 != v346)
      {
        v359 = *v351;
        v360 = v349 + 12 * v346;
        *(_DWORD *)(v360 + 8) = *((_DWORD *)v351 + 2);
        *(_QWORD *)v360 = v359;
      }
      ++v346;
LABEL_728:
      if (++v345 == v344)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_748;
      }
    }
    v353 = *(_DWORD *)v351;
    v354 = *((_DWORD *)v351 + 1);
    v355 = *((_DWORD *)v351 + 2);
    while (1)
    {
      v356 = *((_DWORD *)v352 + 7);
      if (v353 == v356)
      {
        v357 = *((_DWORD *)v352 + 8);
        if (v354 == v357)
        {
          v358 = *((_DWORD *)v352 + 9);
          if (v355 < v358)
            goto LABEL_732;
          if (v358 >= v355)
            goto LABEL_728;
        }
        else
        {
          if (v354 < v357)
            goto LABEL_732;
          if (v357 >= v354)
            goto LABEL_728;
        }
      }
      else
      {
        if (v353 < v356)
          goto LABEL_732;
        if (v356 >= v353)
          goto LABEL_728;
      }
      ++v352;
LABEL_732:
      v352 = (uint64_t *)*v352;
      if (!v352)
        goto LABEL_744;
    }
  }
  v346 = 0;
LABEL_748:
  *v343 = v346;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v15 = v3[148];
  if (v15 >> 30)
    v361 = 1;
  else
    v361 = (_DWORD)v15 == v5;
  if (v361)
    goto LABEL_31;
LABEL_752:
  v362 = *(_QWORD *)(v1[2] + 8);
  v363 = v15 & 0xFFFFFFFFCFFFFFFFLL;
  v364 = *(_QWORD *)(*(_QWORD *)(v362 + 8) + 2448);
  v365 = (unsigned int *)(v364 + 520 * (v15 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v366 = *v365;
  if ((_DWORD)v366)
  {
    v367 = 0;
    v368 = 0;
    v369 = **(_QWORD **)(v362 + 16);
    v370 = v364 + 520 * v363;
    v371 = v370 + 364;
    v372 = v370 + 340;
    while (1)
    {
      v373 = (uint64_t *)(v371 + 12 * v367);
      v374 = *(uint64_t **)(v369 + 2512);
      if (v374)
        break;
LABEL_771:
      *(_WORD *)(v372 + 2 * v368) = *(_WORD *)(v372 + 2 * v367);
      if (v367 != v368)
      {
        v381 = *v373;
        v382 = v371 + 12 * v368;
        *(_DWORD *)(v382 + 8) = *((_DWORD *)v373 + 2);
        *(_QWORD *)v382 = v381;
      }
      ++v368;
LABEL_755:
      if (++v367 == v366)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_775;
      }
    }
    v375 = *(_DWORD *)v373;
    v376 = *((_DWORD *)v373 + 1);
    v377 = *((_DWORD *)v373 + 2);
    while (1)
    {
      v378 = *((_DWORD *)v374 + 7);
      if (v375 == v378)
      {
        v379 = *((_DWORD *)v374 + 8);
        if (v376 == v379)
        {
          v380 = *((_DWORD *)v374 + 9);
          if (v377 < v380)
            goto LABEL_759;
          if (v380 >= v377)
            goto LABEL_755;
        }
        else
        {
          if (v376 < v379)
            goto LABEL_759;
          if (v379 >= v376)
            goto LABEL_755;
        }
      }
      else
      {
        if (v375 < v378)
          goto LABEL_759;
        if (v378 >= v375)
          goto LABEL_755;
      }
      ++v374;
LABEL_759:
      v374 = (uint64_t *)*v374;
      if (!v374)
        goto LABEL_771;
    }
  }
  v368 = 0;
LABEL_775:
  *v365 = v368;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v17 = v3[149];
  if (v17 >> 30)
    v383 = 1;
  else
    v383 = (_DWORD)v17 == v5;
  if (v383)
    goto LABEL_36;
LABEL_779:
  v384 = *(_QWORD *)(v1[2] + 8);
  v385 = v17 & 0xFFFFFFFFCFFFFFFFLL;
  v386 = *(_QWORD *)(*(_QWORD *)(v384 + 8) + 2448);
  v387 = (unsigned int *)(v386 + 520 * (v17 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v388 = *v387;
  if ((_DWORD)v388)
  {
    v389 = 0;
    v390 = 0;
    v391 = **(_QWORD **)(v384 + 16);
    v392 = v386 + 520 * v385;
    v393 = v392 + 364;
    v394 = v392 + 340;
    while (1)
    {
      v395 = (uint64_t *)(v393 + 12 * v389);
      v396 = *(uint64_t **)(v391 + 2512);
      if (v396)
        break;
LABEL_798:
      *(_WORD *)(v394 + 2 * v390) = *(_WORD *)(v394 + 2 * v389);
      if (v389 != v390)
      {
        v403 = *v395;
        v404 = v393 + 12 * v390;
        *(_DWORD *)(v404 + 8) = *((_DWORD *)v395 + 2);
        *(_QWORD *)v404 = v403;
      }
      ++v390;
LABEL_782:
      if (++v389 == v388)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_802;
      }
    }
    v397 = *(_DWORD *)v395;
    v398 = *((_DWORD *)v395 + 1);
    v399 = *((_DWORD *)v395 + 2);
    while (1)
    {
      v400 = *((_DWORD *)v396 + 7);
      if (v397 == v400)
      {
        v401 = *((_DWORD *)v396 + 8);
        if (v398 == v401)
        {
          v402 = *((_DWORD *)v396 + 9);
          if (v399 < v402)
            goto LABEL_786;
          if (v402 >= v399)
            goto LABEL_782;
        }
        else
        {
          if (v398 < v401)
            goto LABEL_786;
          if (v401 >= v398)
            goto LABEL_782;
        }
      }
      else
      {
        if (v397 < v400)
          goto LABEL_786;
        if (v400 >= v397)
          goto LABEL_782;
      }
      ++v396;
LABEL_786:
      v396 = (uint64_t *)*v396;
      if (!v396)
        goto LABEL_798;
    }
  }
  v390 = 0;
LABEL_802:
  *v387 = v390;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v19 = v3[150];
  if (v19 >> 30)
    v405 = 1;
  else
    v405 = (_DWORD)v19 == v5;
  if (v405)
    goto LABEL_41;
LABEL_806:
  v406 = *(_QWORD *)(v1[2] + 8);
  v407 = v19 & 0xFFFFFFFFCFFFFFFFLL;
  v408 = *(_QWORD *)(*(_QWORD *)(v406 + 8) + 2448);
  v409 = (unsigned int *)(v408 + 520 * (v19 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v410 = *v409;
  if ((_DWORD)v410)
  {
    v411 = 0;
    v412 = 0;
    v413 = **(_QWORD **)(v406 + 16);
    v414 = v408 + 520 * v407;
    v415 = v414 + 364;
    v416 = v414 + 340;
    while (1)
    {
      v417 = (uint64_t *)(v415 + 12 * v411);
      v418 = *(uint64_t **)(v413 + 2512);
      if (v418)
        break;
LABEL_825:
      *(_WORD *)(v416 + 2 * v412) = *(_WORD *)(v416 + 2 * v411);
      if (v411 != v412)
      {
        v425 = *v417;
        v426 = v415 + 12 * v412;
        *(_DWORD *)(v426 + 8) = *((_DWORD *)v417 + 2);
        *(_QWORD *)v426 = v425;
      }
      ++v412;
LABEL_809:
      if (++v411 == v410)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_829;
      }
    }
    v419 = *(_DWORD *)v417;
    v420 = *((_DWORD *)v417 + 1);
    v421 = *((_DWORD *)v417 + 2);
    while (1)
    {
      v422 = *((_DWORD *)v418 + 7);
      if (v419 == v422)
      {
        v423 = *((_DWORD *)v418 + 8);
        if (v420 == v423)
        {
          v424 = *((_DWORD *)v418 + 9);
          if (v421 < v424)
            goto LABEL_813;
          if (v424 >= v421)
            goto LABEL_809;
        }
        else
        {
          if (v420 < v423)
            goto LABEL_813;
          if (v423 >= v420)
            goto LABEL_809;
        }
      }
      else
      {
        if (v419 < v422)
          goto LABEL_813;
        if (v422 >= v419)
          goto LABEL_809;
      }
      ++v418;
LABEL_813:
      v418 = (uint64_t *)*v418;
      if (!v418)
        goto LABEL_825;
    }
  }
  v412 = 0;
LABEL_829:
  *v409 = v412;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v21 = v3[151];
  if (v21 >> 30)
    v427 = 1;
  else
    v427 = (_DWORD)v21 == v5;
  if (v427)
    goto LABEL_46;
LABEL_833:
  v428 = *(_QWORD *)(v1[2] + 8);
  v429 = v21 & 0xFFFFFFFFCFFFFFFFLL;
  v430 = *(_QWORD *)(*(_QWORD *)(v428 + 8) + 2448);
  v431 = (unsigned int *)(v430 + 520 * (v21 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v432 = *v431;
  if ((_DWORD)v432)
  {
    v433 = 0;
    v434 = 0;
    v435 = **(_QWORD **)(v428 + 16);
    v436 = v430 + 520 * v429;
    v437 = v436 + 364;
    v438 = v436 + 340;
    while (1)
    {
      v439 = (uint64_t *)(v437 + 12 * v433);
      v440 = *(uint64_t **)(v435 + 2512);
      if (v440)
        break;
LABEL_852:
      *(_WORD *)(v438 + 2 * v434) = *(_WORD *)(v438 + 2 * v433);
      if (v433 != v434)
      {
        v447 = *v439;
        v448 = v437 + 12 * v434;
        *(_DWORD *)(v448 + 8) = *((_DWORD *)v439 + 2);
        *(_QWORD *)v448 = v447;
      }
      ++v434;
LABEL_836:
      if (++v433 == v432)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_856;
      }
    }
    v441 = *(_DWORD *)v439;
    v442 = *((_DWORD *)v439 + 1);
    v443 = *((_DWORD *)v439 + 2);
    while (1)
    {
      v444 = *((_DWORD *)v440 + 7);
      if (v441 == v444)
      {
        v445 = *((_DWORD *)v440 + 8);
        if (v442 == v445)
        {
          v446 = *((_DWORD *)v440 + 9);
          if (v443 < v446)
            goto LABEL_840;
          if (v446 >= v443)
            goto LABEL_836;
        }
        else
        {
          if (v442 < v445)
            goto LABEL_840;
          if (v445 >= v442)
            goto LABEL_836;
        }
      }
      else
      {
        if (v441 < v444)
          goto LABEL_840;
        if (v444 >= v441)
          goto LABEL_836;
      }
      ++v440;
LABEL_840:
      v440 = (uint64_t *)*v440;
      if (!v440)
        goto LABEL_852;
    }
  }
  v434 = 0;
LABEL_856:
  *v431 = v434;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v23 = v3[152];
  if (v23 >> 30)
    v449 = 1;
  else
    v449 = (_DWORD)v23 == v5;
  if (v449)
    goto LABEL_51;
LABEL_860:
  v450 = *(_QWORD *)(v1[2] + 8);
  v451 = v23 & 0xFFFFFFFFCFFFFFFFLL;
  v452 = *(_QWORD *)(*(_QWORD *)(v450 + 8) + 2448);
  v453 = (unsigned int *)(v452 + 520 * (v23 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v454 = *v453;
  if ((_DWORD)v454)
  {
    v455 = 0;
    v456 = 0;
    v457 = **(_QWORD **)(v450 + 16);
    v458 = v452 + 520 * v451;
    v459 = v458 + 364;
    v460 = v458 + 340;
    while (1)
    {
      v461 = (uint64_t *)(v459 + 12 * v455);
      v462 = *(uint64_t **)(v457 + 2512);
      if (v462)
        break;
LABEL_879:
      *(_WORD *)(v460 + 2 * v456) = *(_WORD *)(v460 + 2 * v455);
      if (v455 != v456)
      {
        v469 = *v461;
        v470 = v459 + 12 * v456;
        *(_DWORD *)(v470 + 8) = *((_DWORD *)v461 + 2);
        *(_QWORD *)v470 = v469;
      }
      ++v456;
LABEL_863:
      if (++v455 == v454)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_883;
      }
    }
    v463 = *(_DWORD *)v461;
    v464 = *((_DWORD *)v461 + 1);
    v465 = *((_DWORD *)v461 + 2);
    while (1)
    {
      v466 = *((_DWORD *)v462 + 7);
      if (v463 == v466)
      {
        v467 = *((_DWORD *)v462 + 8);
        if (v464 == v467)
        {
          v468 = *((_DWORD *)v462 + 9);
          if (v465 < v468)
            goto LABEL_867;
          if (v468 >= v465)
            goto LABEL_863;
        }
        else
        {
          if (v464 < v467)
            goto LABEL_867;
          if (v467 >= v464)
            goto LABEL_863;
        }
      }
      else
      {
        if (v463 < v466)
          goto LABEL_867;
        if (v466 >= v463)
          goto LABEL_863;
      }
      ++v462;
LABEL_867:
      v462 = (uint64_t *)*v462;
      if (!v462)
        goto LABEL_879;
    }
  }
  v456 = 0;
LABEL_883:
  *v453 = v456;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v25 = v3[153];
  if (v25 >> 30)
    v471 = 1;
  else
    v471 = (_DWORD)v25 == v5;
  if (v471)
    goto LABEL_56;
LABEL_887:
  v472 = *(_QWORD *)(v1[2] + 8);
  v473 = v25 & 0xFFFFFFFFCFFFFFFFLL;
  v474 = *(_QWORD *)(*(_QWORD *)(v472 + 8) + 2448);
  v475 = (unsigned int *)(v474 + 520 * (v25 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v476 = *v475;
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = 0;
    v479 = **(_QWORD **)(v472 + 16);
    v480 = v474 + 520 * v473;
    v481 = v480 + 364;
    v482 = v480 + 340;
    while (1)
    {
      v483 = (uint64_t *)(v481 + 12 * v477);
      v484 = *(uint64_t **)(v479 + 2512);
      if (v484)
        break;
LABEL_906:
      *(_WORD *)(v482 + 2 * v478) = *(_WORD *)(v482 + 2 * v477);
      if (v477 != v478)
      {
        v491 = *v483;
        v492 = v481 + 12 * v478;
        *(_DWORD *)(v492 + 8) = *((_DWORD *)v483 + 2);
        *(_QWORD *)v492 = v491;
      }
      ++v478;
LABEL_890:
      if (++v477 == v476)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_910;
      }
    }
    v485 = *(_DWORD *)v483;
    v486 = *((_DWORD *)v483 + 1);
    v487 = *((_DWORD *)v483 + 2);
    while (1)
    {
      v488 = *((_DWORD *)v484 + 7);
      if (v485 == v488)
      {
        v489 = *((_DWORD *)v484 + 8);
        if (v486 == v489)
        {
          v490 = *((_DWORD *)v484 + 9);
          if (v487 < v490)
            goto LABEL_894;
          if (v490 >= v487)
            goto LABEL_890;
        }
        else
        {
          if (v486 < v489)
            goto LABEL_894;
          if (v489 >= v486)
            goto LABEL_890;
        }
      }
      else
      {
        if (v485 < v488)
          goto LABEL_894;
        if (v488 >= v485)
          goto LABEL_890;
      }
      ++v484;
LABEL_894:
      v484 = (uint64_t *)*v484;
      if (!v484)
        goto LABEL_906;
    }
  }
  v478 = 0;
LABEL_910:
  *v475 = v478;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v27 = v3[154];
  if (v27 >> 30)
    v493 = 1;
  else
    v493 = (_DWORD)v27 == v5;
  if (v493)
    goto LABEL_61;
LABEL_914:
  v494 = *(_QWORD *)(v1[2] + 8);
  v495 = v27 & 0xFFFFFFFFCFFFFFFFLL;
  v496 = *(_QWORD *)(*(_QWORD *)(v494 + 8) + 2448);
  v497 = (unsigned int *)(v496 + 520 * (v27 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v498 = *v497;
  if ((_DWORD)v498)
  {
    v499 = 0;
    v500 = 0;
    v501 = **(_QWORD **)(v494 + 16);
    v502 = v496 + 520 * v495;
    v503 = v502 + 364;
    v504 = v502 + 340;
    while (1)
    {
      v505 = (uint64_t *)(v503 + 12 * v499);
      v506 = *(uint64_t **)(v501 + 2512);
      if (v506)
        break;
LABEL_933:
      *(_WORD *)(v504 + 2 * v500) = *(_WORD *)(v504 + 2 * v499);
      if (v499 != v500)
      {
        v513 = *v505;
        v514 = v503 + 12 * v500;
        *(_DWORD *)(v514 + 8) = *((_DWORD *)v505 + 2);
        *(_QWORD *)v514 = v513;
      }
      ++v500;
LABEL_917:
      if (++v499 == v498)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_937;
      }
    }
    v507 = *(_DWORD *)v505;
    v508 = *((_DWORD *)v505 + 1);
    v509 = *((_DWORD *)v505 + 2);
    while (1)
    {
      v510 = *((_DWORD *)v506 + 7);
      if (v507 == v510)
      {
        v511 = *((_DWORD *)v506 + 8);
        if (v508 == v511)
        {
          v512 = *((_DWORD *)v506 + 9);
          if (v509 < v512)
            goto LABEL_921;
          if (v512 >= v509)
            goto LABEL_917;
        }
        else
        {
          if (v508 < v511)
            goto LABEL_921;
          if (v511 >= v508)
            goto LABEL_917;
        }
      }
      else
      {
        if (v507 < v510)
          goto LABEL_921;
        if (v510 >= v507)
          goto LABEL_917;
      }
      ++v506;
LABEL_921:
      v506 = (uint64_t *)*v506;
      if (!v506)
        goto LABEL_933;
    }
  }
  v500 = 0;
LABEL_937:
  *v497 = v500;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v29 = v3[155];
  if (v29 >> 30)
    v515 = 1;
  else
    v515 = (_DWORD)v29 == v5;
  if (v515)
    goto LABEL_66;
LABEL_941:
  v516 = *(_QWORD *)(v1[2] + 8);
  v517 = v29 & 0xFFFFFFFFCFFFFFFFLL;
  v518 = *(_QWORD *)(*(_QWORD *)(v516 + 8) + 2448);
  v519 = (unsigned int *)(v518 + 520 * (v29 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v520 = *v519;
  if ((_DWORD)v520)
  {
    v521 = 0;
    v522 = 0;
    v523 = **(_QWORD **)(v516 + 16);
    v524 = v518 + 520 * v517;
    v525 = v524 + 364;
    v526 = v524 + 340;
    while (1)
    {
      v527 = (uint64_t *)(v525 + 12 * v521);
      v528 = *(uint64_t **)(v523 + 2512);
      if (v528)
        break;
LABEL_960:
      *(_WORD *)(v526 + 2 * v522) = *(_WORD *)(v526 + 2 * v521);
      if (v521 != v522)
      {
        v535 = *v527;
        v536 = v525 + 12 * v522;
        *(_DWORD *)(v536 + 8) = *((_DWORD *)v527 + 2);
        *(_QWORD *)v536 = v535;
      }
      ++v522;
LABEL_944:
      if (++v521 == v520)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_964;
      }
    }
    v529 = *(_DWORD *)v527;
    v530 = *((_DWORD *)v527 + 1);
    v531 = *((_DWORD *)v527 + 2);
    while (1)
    {
      v532 = *((_DWORD *)v528 + 7);
      if (v529 == v532)
      {
        v533 = *((_DWORD *)v528 + 8);
        if (v530 == v533)
        {
          v534 = *((_DWORD *)v528 + 9);
          if (v531 < v534)
            goto LABEL_948;
          if (v534 >= v531)
            goto LABEL_944;
        }
        else
        {
          if (v530 < v533)
            goto LABEL_948;
          if (v533 >= v530)
            goto LABEL_944;
        }
      }
      else
      {
        if (v529 < v532)
          goto LABEL_948;
        if (v532 >= v529)
          goto LABEL_944;
      }
      ++v528;
LABEL_948:
      v528 = (uint64_t *)*v528;
      if (!v528)
        goto LABEL_960;
    }
  }
  v522 = 0;
LABEL_964:
  *v519 = v522;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v31 = v3[156];
  if (v31 >> 30)
    v537 = 1;
  else
    v537 = (_DWORD)v31 == v5;
  if (v537)
    goto LABEL_71;
LABEL_968:
  v538 = *(_QWORD *)(v1[2] + 8);
  v539 = v31 & 0xFFFFFFFFCFFFFFFFLL;
  v540 = *(_QWORD *)(*(_QWORD *)(v538 + 8) + 2448);
  v541 = (unsigned int *)(v540 + 520 * (v31 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v542 = *v541;
  if ((_DWORD)v542)
  {
    v543 = 0;
    v544 = 0;
    v545 = **(_QWORD **)(v538 + 16);
    v546 = v540 + 520 * v539;
    v547 = v546 + 364;
    v548 = v546 + 340;
    while (1)
    {
      v549 = (uint64_t *)(v547 + 12 * v543);
      v550 = *(uint64_t **)(v545 + 2512);
      if (v550)
        break;
LABEL_987:
      *(_WORD *)(v548 + 2 * v544) = *(_WORD *)(v548 + 2 * v543);
      if (v543 != v544)
      {
        v557 = *v549;
        v558 = v547 + 12 * v544;
        *(_DWORD *)(v558 + 8) = *((_DWORD *)v549 + 2);
        *(_QWORD *)v558 = v557;
      }
      ++v544;
LABEL_971:
      if (++v543 == v542)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_991;
      }
    }
    v551 = *(_DWORD *)v549;
    v552 = *((_DWORD *)v549 + 1);
    v553 = *((_DWORD *)v549 + 2);
    while (1)
    {
      v554 = *((_DWORD *)v550 + 7);
      if (v551 == v554)
      {
        v555 = *((_DWORD *)v550 + 8);
        if (v552 == v555)
        {
          v556 = *((_DWORD *)v550 + 9);
          if (v553 < v556)
            goto LABEL_975;
          if (v556 >= v553)
            goto LABEL_971;
        }
        else
        {
          if (v552 < v555)
            goto LABEL_975;
          if (v555 >= v552)
            goto LABEL_971;
        }
      }
      else
      {
        if (v551 < v554)
          goto LABEL_975;
        if (v554 >= v551)
          goto LABEL_971;
      }
      ++v550;
LABEL_975:
      v550 = (uint64_t *)*v550;
      if (!v550)
        goto LABEL_987;
    }
  }
  v544 = 0;
LABEL_991:
  *v541 = v544;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v33 = v3[157];
  if (v33 >> 30)
    v559 = 1;
  else
    v559 = (_DWORD)v33 == v5;
  if (v559)
    goto LABEL_76;
LABEL_995:
  v560 = *(_QWORD *)(v1[2] + 8);
  v561 = v33 & 0xFFFFFFFFCFFFFFFFLL;
  v562 = *(_QWORD *)(*(_QWORD *)(v560 + 8) + 2448);
  v563 = (unsigned int *)(v562 + 520 * (v33 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v564 = *v563;
  if ((_DWORD)v564)
  {
    v565 = 0;
    v566 = 0;
    v567 = **(_QWORD **)(v560 + 16);
    v568 = v562 + 520 * v561;
    v569 = v568 + 364;
    v570 = v568 + 340;
    while (1)
    {
      v571 = (uint64_t *)(v569 + 12 * v565);
      v572 = *(uint64_t **)(v567 + 2512);
      if (v572)
        break;
LABEL_1014:
      *(_WORD *)(v570 + 2 * v566) = *(_WORD *)(v570 + 2 * v565);
      if (v565 != v566)
      {
        v579 = *v571;
        v580 = v569 + 12 * v566;
        *(_DWORD *)(v580 + 8) = *((_DWORD *)v571 + 2);
        *(_QWORD *)v580 = v579;
      }
      ++v566;
LABEL_998:
      if (++v565 == v564)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1018;
      }
    }
    v573 = *(_DWORD *)v571;
    v574 = *((_DWORD *)v571 + 1);
    v575 = *((_DWORD *)v571 + 2);
    while (1)
    {
      v576 = *((_DWORD *)v572 + 7);
      if (v573 == v576)
      {
        v577 = *((_DWORD *)v572 + 8);
        if (v574 == v577)
        {
          v578 = *((_DWORD *)v572 + 9);
          if (v575 < v578)
            goto LABEL_1002;
          if (v578 >= v575)
            goto LABEL_998;
        }
        else
        {
          if (v574 < v577)
            goto LABEL_1002;
          if (v577 >= v574)
            goto LABEL_998;
        }
      }
      else
      {
        if (v573 < v576)
          goto LABEL_1002;
        if (v576 >= v573)
          goto LABEL_998;
      }
      ++v572;
LABEL_1002:
      v572 = (uint64_t *)*v572;
      if (!v572)
        goto LABEL_1014;
    }
  }
  v566 = 0;
LABEL_1018:
  *v563 = v566;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v35 = v3[158];
  if (v35 >> 30)
    v581 = 1;
  else
    v581 = (_DWORD)v35 == v5;
  if (v581)
    goto LABEL_81;
LABEL_1022:
  v582 = *(_QWORD *)(v1[2] + 8);
  v583 = v35 & 0xFFFFFFFFCFFFFFFFLL;
  v584 = *(_QWORD *)(*(_QWORD *)(v582 + 8) + 2448);
  v585 = (unsigned int *)(v584 + 520 * (v35 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v586 = *v585;
  if ((_DWORD)v586)
  {
    v587 = 0;
    v588 = 0;
    v589 = **(_QWORD **)(v582 + 16);
    v590 = v584 + 520 * v583;
    v591 = v590 + 364;
    v592 = v590 + 340;
    while (1)
    {
      v593 = (uint64_t *)(v591 + 12 * v587);
      v594 = *(uint64_t **)(v589 + 2512);
      if (v594)
        break;
LABEL_1041:
      *(_WORD *)(v592 + 2 * v588) = *(_WORD *)(v592 + 2 * v587);
      if (v587 != v588)
      {
        v601 = *v593;
        v602 = v591 + 12 * v588;
        *(_DWORD *)(v602 + 8) = *((_DWORD *)v593 + 2);
        *(_QWORD *)v602 = v601;
      }
      ++v588;
LABEL_1025:
      if (++v587 == v586)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1045;
      }
    }
    v595 = *(_DWORD *)v593;
    v596 = *((_DWORD *)v593 + 1);
    v597 = *((_DWORD *)v593 + 2);
    while (1)
    {
      v598 = *((_DWORD *)v594 + 7);
      if (v595 == v598)
      {
        v599 = *((_DWORD *)v594 + 8);
        if (v596 == v599)
        {
          v600 = *((_DWORD *)v594 + 9);
          if (v597 < v600)
            goto LABEL_1029;
          if (v600 >= v597)
            goto LABEL_1025;
        }
        else
        {
          if (v596 < v599)
            goto LABEL_1029;
          if (v599 >= v596)
            goto LABEL_1025;
        }
      }
      else
      {
        if (v595 < v598)
          goto LABEL_1029;
        if (v598 >= v595)
          goto LABEL_1025;
      }
      ++v594;
LABEL_1029:
      v594 = (uint64_t *)*v594;
      if (!v594)
        goto LABEL_1041;
    }
  }
  v588 = 0;
LABEL_1045:
  *v585 = v588;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v37 = v3[159];
  if (v37 >> 30)
    v603 = 1;
  else
    v603 = (_DWORD)v37 == v5;
  if (v603)
    goto LABEL_86;
LABEL_1049:
  v604 = *(_QWORD *)(v1[2] + 8);
  v605 = v37 & 0xFFFFFFFFCFFFFFFFLL;
  v606 = *(_QWORD *)(*(_QWORD *)(v604 + 8) + 2448);
  v607 = (unsigned int *)(v606 + 520 * (v37 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v608 = *v607;
  if ((_DWORD)v608)
  {
    v609 = 0;
    v610 = 0;
    v611 = **(_QWORD **)(v604 + 16);
    v612 = v606 + 520 * v605;
    v613 = v612 + 364;
    v614 = v612 + 340;
    while (1)
    {
      v615 = (uint64_t *)(v613 + 12 * v609);
      v616 = *(uint64_t **)(v611 + 2512);
      if (v616)
        break;
LABEL_1068:
      *(_WORD *)(v614 + 2 * v610) = *(_WORD *)(v614 + 2 * v609);
      if (v609 != v610)
      {
        v623 = *v615;
        v624 = v613 + 12 * v610;
        *(_DWORD *)(v624 + 8) = *((_DWORD *)v615 + 2);
        *(_QWORD *)v624 = v623;
      }
      ++v610;
LABEL_1052:
      if (++v609 == v608)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1072;
      }
    }
    v617 = *(_DWORD *)v615;
    v618 = *((_DWORD *)v615 + 1);
    v619 = *((_DWORD *)v615 + 2);
    while (1)
    {
      v620 = *((_DWORD *)v616 + 7);
      if (v617 == v620)
      {
        v621 = *((_DWORD *)v616 + 8);
        if (v618 == v621)
        {
          v622 = *((_DWORD *)v616 + 9);
          if (v619 < v622)
            goto LABEL_1056;
          if (v622 >= v619)
            goto LABEL_1052;
        }
        else
        {
          if (v618 < v621)
            goto LABEL_1056;
          if (v621 >= v618)
            goto LABEL_1052;
        }
      }
      else
      {
        if (v617 < v620)
          goto LABEL_1056;
        if (v620 >= v617)
          goto LABEL_1052;
      }
      ++v616;
LABEL_1056:
      v616 = (uint64_t *)*v616;
      if (!v616)
        goto LABEL_1068;
    }
  }
  v610 = 0;
LABEL_1072:
  *v607 = v610;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v39 = v3[160];
  if (v39 >> 30)
    v625 = 1;
  else
    v625 = (_DWORD)v39 == v5;
  if (v625)
    goto LABEL_91;
LABEL_1076:
  v626 = *(_QWORD *)(v1[2] + 8);
  v627 = v39 & 0xFFFFFFFFCFFFFFFFLL;
  v628 = *(_QWORD *)(*(_QWORD *)(v626 + 8) + 2448);
  v629 = (unsigned int *)(v628 + 520 * (v39 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v630 = *v629;
  if ((_DWORD)v630)
  {
    v631 = 0;
    v632 = 0;
    v633 = **(_QWORD **)(v626 + 16);
    v634 = v628 + 520 * v627;
    v635 = v634 + 364;
    v636 = v634 + 340;
    while (1)
    {
      v637 = (uint64_t *)(v635 + 12 * v631);
      v638 = *(uint64_t **)(v633 + 2512);
      if (v638)
        break;
LABEL_1095:
      *(_WORD *)(v636 + 2 * v632) = *(_WORD *)(v636 + 2 * v631);
      if (v631 != v632)
      {
        v645 = *v637;
        v646 = v635 + 12 * v632;
        *(_DWORD *)(v646 + 8) = *((_DWORD *)v637 + 2);
        *(_QWORD *)v646 = v645;
      }
      ++v632;
LABEL_1079:
      if (++v631 == v630)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1099;
      }
    }
    v639 = *(_DWORD *)v637;
    v640 = *((_DWORD *)v637 + 1);
    v641 = *((_DWORD *)v637 + 2);
    while (1)
    {
      v642 = *((_DWORD *)v638 + 7);
      if (v639 == v642)
      {
        v643 = *((_DWORD *)v638 + 8);
        if (v640 == v643)
        {
          v644 = *((_DWORD *)v638 + 9);
          if (v641 < v644)
            goto LABEL_1083;
          if (v644 >= v641)
            goto LABEL_1079;
        }
        else
        {
          if (v640 < v643)
            goto LABEL_1083;
          if (v643 >= v640)
            goto LABEL_1079;
        }
      }
      else
      {
        if (v639 < v642)
          goto LABEL_1083;
        if (v642 >= v639)
          goto LABEL_1079;
      }
      ++v638;
LABEL_1083:
      v638 = (uint64_t *)*v638;
      if (!v638)
        goto LABEL_1095;
    }
  }
  v632 = 0;
LABEL_1099:
  *v629 = v632;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v41 = v3[161];
  if (v41 >> 30)
    v647 = 1;
  else
    v647 = (_DWORD)v41 == v5;
  if (v647)
    goto LABEL_96;
LABEL_1103:
  v648 = *(_QWORD *)(v1[2] + 8);
  v649 = v41 & 0xFFFFFFFFCFFFFFFFLL;
  v650 = *(_QWORD *)(*(_QWORD *)(v648 + 8) + 2448);
  v651 = (unsigned int *)(v650 + 520 * (v41 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v652 = *v651;
  if ((_DWORD)v652)
  {
    v653 = 0;
    v654 = 0;
    v655 = **(_QWORD **)(v648 + 16);
    v656 = v650 + 520 * v649;
    v657 = v656 + 364;
    v658 = v656 + 340;
    while (1)
    {
      v659 = (uint64_t *)(v657 + 12 * v653);
      v660 = *(uint64_t **)(v655 + 2512);
      if (v660)
        break;
LABEL_1122:
      *(_WORD *)(v658 + 2 * v654) = *(_WORD *)(v658 + 2 * v653);
      if (v653 != v654)
      {
        v667 = *v659;
        v668 = v657 + 12 * v654;
        *(_DWORD *)(v668 + 8) = *((_DWORD *)v659 + 2);
        *(_QWORD *)v668 = v667;
      }
      ++v654;
LABEL_1106:
      if (++v653 == v652)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1126;
      }
    }
    v661 = *(_DWORD *)v659;
    v662 = *((_DWORD *)v659 + 1);
    v663 = *((_DWORD *)v659 + 2);
    while (1)
    {
      v664 = *((_DWORD *)v660 + 7);
      if (v661 == v664)
      {
        v665 = *((_DWORD *)v660 + 8);
        if (v662 == v665)
        {
          v666 = *((_DWORD *)v660 + 9);
          if (v663 < v666)
            goto LABEL_1110;
          if (v666 >= v663)
            goto LABEL_1106;
        }
        else
        {
          if (v662 < v665)
            goto LABEL_1110;
          if (v665 >= v662)
            goto LABEL_1106;
        }
      }
      else
      {
        if (v661 < v664)
          goto LABEL_1110;
        if (v664 >= v661)
          goto LABEL_1106;
      }
      ++v660;
LABEL_1110:
      v660 = (uint64_t *)*v660;
      if (!v660)
        goto LABEL_1122;
    }
  }
  v654 = 0;
LABEL_1126:
  *v651 = v654;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v43 = v3[162];
  if (v43 >> 30)
    v669 = 1;
  else
    v669 = (_DWORD)v43 == v5;
  if (v669)
    goto LABEL_101;
LABEL_1130:
  v670 = *(_QWORD *)(v1[2] + 8);
  v671 = v43 & 0xFFFFFFFFCFFFFFFFLL;
  v672 = *(_QWORD *)(*(_QWORD *)(v670 + 8) + 2448);
  v673 = (unsigned int *)(v672 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v674 = *v673;
  if ((_DWORD)v674)
  {
    v675 = 0;
    v676 = 0;
    v677 = **(_QWORD **)(v670 + 16);
    v678 = v672 + 520 * v671;
    v679 = v678 + 364;
    v680 = v678 + 340;
    while (1)
    {
      v681 = (uint64_t *)(v679 + 12 * v675);
      v682 = *(uint64_t **)(v677 + 2512);
      if (v682)
        break;
LABEL_1149:
      *(_WORD *)(v680 + 2 * v676) = *(_WORD *)(v680 + 2 * v675);
      if (v675 != v676)
      {
        v689 = *v681;
        v690 = v679 + 12 * v676;
        *(_DWORD *)(v690 + 8) = *((_DWORD *)v681 + 2);
        *(_QWORD *)v690 = v689;
      }
      ++v676;
LABEL_1133:
      if (++v675 == v674)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1153;
      }
    }
    v683 = *(_DWORD *)v681;
    v684 = *((_DWORD *)v681 + 1);
    v685 = *((_DWORD *)v681 + 2);
    while (1)
    {
      v686 = *((_DWORD *)v682 + 7);
      if (v683 == v686)
      {
        v687 = *((_DWORD *)v682 + 8);
        if (v684 == v687)
        {
          v688 = *((_DWORD *)v682 + 9);
          if (v685 < v688)
            goto LABEL_1137;
          if (v688 >= v685)
            goto LABEL_1133;
        }
        else
        {
          if (v684 < v687)
            goto LABEL_1137;
          if (v687 >= v684)
            goto LABEL_1133;
        }
      }
      else
      {
        if (v683 < v686)
          goto LABEL_1137;
        if (v686 >= v683)
          goto LABEL_1133;
      }
      ++v682;
LABEL_1137:
      v682 = (uint64_t *)*v682;
      if (!v682)
        goto LABEL_1149;
    }
  }
  v676 = 0;
LABEL_1153:
  *v673 = v676;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v45 = v3[163];
  if (v45 >> 30)
    v691 = 1;
  else
    v691 = (_DWORD)v45 == v5;
  if (v691)
    goto LABEL_106;
LABEL_1157:
  v692 = *(_QWORD *)(v1[2] + 8);
  v693 = v45 & 0xFFFFFFFFCFFFFFFFLL;
  v694 = *(_QWORD *)(*(_QWORD *)(v692 + 8) + 2448);
  v695 = (unsigned int *)(v694 + 520 * (v45 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v696 = *v695;
  if ((_DWORD)v696)
  {
    v697 = 0;
    v698 = 0;
    v699 = **(_QWORD **)(v692 + 16);
    v700 = v694 + 520 * v693;
    v701 = v700 + 364;
    v702 = v700 + 340;
    while (1)
    {
      v703 = (uint64_t *)(v701 + 12 * v697);
      v704 = *(uint64_t **)(v699 + 2512);
      if (v704)
        break;
LABEL_1176:
      *(_WORD *)(v702 + 2 * v698) = *(_WORD *)(v702 + 2 * v697);
      if (v697 != v698)
      {
        v711 = *v703;
        v712 = v701 + 12 * v698;
        *(_DWORD *)(v712 + 8) = *((_DWORD *)v703 + 2);
        *(_QWORD *)v712 = v711;
      }
      ++v698;
LABEL_1160:
      if (++v697 == v696)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1180;
      }
    }
    v705 = *(_DWORD *)v703;
    v706 = *((_DWORD *)v703 + 1);
    v707 = *((_DWORD *)v703 + 2);
    while (1)
    {
      v708 = *((_DWORD *)v704 + 7);
      if (v705 == v708)
      {
        v709 = *((_DWORD *)v704 + 8);
        if (v706 == v709)
        {
          v710 = *((_DWORD *)v704 + 9);
          if (v707 < v710)
            goto LABEL_1164;
          if (v710 >= v707)
            goto LABEL_1160;
        }
        else
        {
          if (v706 < v709)
            goto LABEL_1164;
          if (v709 >= v706)
            goto LABEL_1160;
        }
      }
      else
      {
        if (v705 < v708)
          goto LABEL_1164;
        if (v708 >= v705)
          goto LABEL_1160;
      }
      ++v704;
LABEL_1164:
      v704 = (uint64_t *)*v704;
      if (!v704)
        goto LABEL_1176;
    }
  }
  v698 = 0;
LABEL_1180:
  *v695 = v698;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v47 = v3[164];
  if (v47 >> 30)
    v713 = 1;
  else
    v713 = (_DWORD)v47 == v5;
  if (v713)
    goto LABEL_111;
LABEL_1184:
  v714 = *(_QWORD *)(v1[2] + 8);
  v715 = v47 & 0xFFFFFFFFCFFFFFFFLL;
  v716 = *(_QWORD *)(*(_QWORD *)(v714 + 8) + 2448);
  v717 = (unsigned int *)(v716 + 520 * (v47 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v718 = *v717;
  if ((_DWORD)v718)
  {
    v719 = 0;
    v720 = 0;
    v721 = **(_QWORD **)(v714 + 16);
    v722 = v716 + 520 * v715;
    v723 = v722 + 364;
    v724 = v722 + 340;
    while (1)
    {
      v725 = (uint64_t *)(v723 + 12 * v719);
      v726 = *(uint64_t **)(v721 + 2512);
      if (v726)
        break;
LABEL_1203:
      *(_WORD *)(v724 + 2 * v720) = *(_WORD *)(v724 + 2 * v719);
      if (v719 != v720)
      {
        v733 = *v725;
        v734 = v723 + 12 * v720;
        *(_DWORD *)(v734 + 8) = *((_DWORD *)v725 + 2);
        *(_QWORD *)v734 = v733;
      }
      ++v720;
LABEL_1187:
      if (++v719 == v718)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1207;
      }
    }
    v727 = *(_DWORD *)v725;
    v728 = *((_DWORD *)v725 + 1);
    v729 = *((_DWORD *)v725 + 2);
    while (1)
    {
      v730 = *((_DWORD *)v726 + 7);
      if (v727 == v730)
      {
        v731 = *((_DWORD *)v726 + 8);
        if (v728 == v731)
        {
          v732 = *((_DWORD *)v726 + 9);
          if (v729 < v732)
            goto LABEL_1191;
          if (v732 >= v729)
            goto LABEL_1187;
        }
        else
        {
          if (v728 < v731)
            goto LABEL_1191;
          if (v731 >= v728)
            goto LABEL_1187;
        }
      }
      else
      {
        if (v727 < v730)
          goto LABEL_1191;
        if (v730 >= v727)
          goto LABEL_1187;
      }
      ++v726;
LABEL_1191:
      v726 = (uint64_t *)*v726;
      if (!v726)
        goto LABEL_1203;
    }
  }
  v720 = 0;
LABEL_1207:
  *v717 = v720;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v49 = v3[165];
  if (v49 >> 30)
    v735 = 1;
  else
    v735 = (_DWORD)v49 == v5;
  if (v735)
    goto LABEL_116;
LABEL_1211:
  v736 = *(_QWORD *)(v1[2] + 8);
  v737 = v49 & 0xFFFFFFFFCFFFFFFFLL;
  v738 = *(_QWORD *)(*(_QWORD *)(v736 + 8) + 2448);
  v739 = (unsigned int *)(v738 + 520 * (v49 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v740 = *v739;
  if ((_DWORD)v740)
  {
    v741 = 0;
    v742 = 0;
    v743 = **(_QWORD **)(v736 + 16);
    v744 = v738 + 520 * v737;
    v745 = v744 + 364;
    v746 = v744 + 340;
    while (1)
    {
      v747 = (uint64_t *)(v745 + 12 * v741);
      v748 = *(uint64_t **)(v743 + 2512);
      if (v748)
        break;
LABEL_1230:
      *(_WORD *)(v746 + 2 * v742) = *(_WORD *)(v746 + 2 * v741);
      if (v741 != v742)
      {
        v755 = *v747;
        v756 = v745 + 12 * v742;
        *(_DWORD *)(v756 + 8) = *((_DWORD *)v747 + 2);
        *(_QWORD *)v756 = v755;
      }
      ++v742;
LABEL_1214:
      if (++v741 == v740)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1234;
      }
    }
    v749 = *(_DWORD *)v747;
    v750 = *((_DWORD *)v747 + 1);
    v751 = *((_DWORD *)v747 + 2);
    while (1)
    {
      v752 = *((_DWORD *)v748 + 7);
      if (v749 == v752)
      {
        v753 = *((_DWORD *)v748 + 8);
        if (v750 == v753)
        {
          v754 = *((_DWORD *)v748 + 9);
          if (v751 < v754)
            goto LABEL_1218;
          if (v754 >= v751)
            goto LABEL_1214;
        }
        else
        {
          if (v750 < v753)
            goto LABEL_1218;
          if (v753 >= v750)
            goto LABEL_1214;
        }
      }
      else
      {
        if (v749 < v752)
          goto LABEL_1218;
        if (v752 >= v749)
          goto LABEL_1214;
      }
      ++v748;
LABEL_1218:
      v748 = (uint64_t *)*v748;
      if (!v748)
        goto LABEL_1230;
    }
  }
  v742 = 0;
LABEL_1234:
  *v739 = v742;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v51 = v3[166];
  if (v51 >> 30)
    v757 = 1;
  else
    v757 = (_DWORD)v51 == v5;
  if (v757)
    goto LABEL_121;
LABEL_1238:
  v758 = *(_QWORD *)(v1[2] + 8);
  v759 = v51 & 0xFFFFFFFFCFFFFFFFLL;
  v760 = *(_QWORD *)(*(_QWORD *)(v758 + 8) + 2448);
  v761 = (unsigned int *)(v760 + 520 * (v51 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v762 = *v761;
  if ((_DWORD)v762)
  {
    v763 = 0;
    v764 = 0;
    v765 = **(_QWORD **)(v758 + 16);
    v766 = v760 + 520 * v759;
    v767 = v766 + 364;
    v768 = v766 + 340;
    while (1)
    {
      v769 = (uint64_t *)(v767 + 12 * v763);
      v770 = *(uint64_t **)(v765 + 2512);
      if (v770)
        break;
LABEL_1257:
      *(_WORD *)(v768 + 2 * v764) = *(_WORD *)(v768 + 2 * v763);
      if (v763 != v764)
      {
        v777 = *v769;
        v778 = v767 + 12 * v764;
        *(_DWORD *)(v778 + 8) = *((_DWORD *)v769 + 2);
        *(_QWORD *)v778 = v777;
      }
      ++v764;
LABEL_1241:
      if (++v763 == v762)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1261;
      }
    }
    v771 = *(_DWORD *)v769;
    v772 = *((_DWORD *)v769 + 1);
    v773 = *((_DWORD *)v769 + 2);
    while (1)
    {
      v774 = *((_DWORD *)v770 + 7);
      if (v771 == v774)
      {
        v775 = *((_DWORD *)v770 + 8);
        if (v772 == v775)
        {
          v776 = *((_DWORD *)v770 + 9);
          if (v773 < v776)
            goto LABEL_1245;
          if (v776 >= v773)
            goto LABEL_1241;
        }
        else
        {
          if (v772 < v775)
            goto LABEL_1245;
          if (v775 >= v772)
            goto LABEL_1241;
        }
      }
      else
      {
        if (v771 < v774)
          goto LABEL_1245;
        if (v774 >= v771)
          goto LABEL_1241;
      }
      ++v770;
LABEL_1245:
      v770 = (uint64_t *)*v770;
      if (!v770)
        goto LABEL_1257;
    }
  }
  v764 = 0;
LABEL_1261:
  *v761 = v764;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v53 = v3[167];
  if (v53 >> 30)
    v779 = 1;
  else
    v779 = (_DWORD)v53 == v5;
  if (v779)
    goto LABEL_126;
LABEL_1265:
  v780 = *(_QWORD *)(v1[2] + 8);
  v781 = v53 & 0xFFFFFFFFCFFFFFFFLL;
  v782 = *(_QWORD *)(*(_QWORD *)(v780 + 8) + 2448);
  v783 = (unsigned int *)(v782 + 520 * (v53 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v784 = *v783;
  if ((_DWORD)v784)
  {
    v785 = 0;
    v786 = 0;
    v787 = **(_QWORD **)(v780 + 16);
    v788 = v782 + 520 * v781;
    v789 = v788 + 364;
    v790 = v788 + 340;
    while (1)
    {
      v791 = (uint64_t *)(v789 + 12 * v785);
      v792 = *(uint64_t **)(v787 + 2512);
      if (v792)
        break;
LABEL_1284:
      *(_WORD *)(v790 + 2 * v786) = *(_WORD *)(v790 + 2 * v785);
      if (v785 != v786)
      {
        v799 = *v791;
        v800 = v789 + 12 * v786;
        *(_DWORD *)(v800 + 8) = *((_DWORD *)v791 + 2);
        *(_QWORD *)v800 = v799;
      }
      ++v786;
LABEL_1268:
      if (++v785 == v784)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1288;
      }
    }
    v793 = *(_DWORD *)v791;
    v794 = *((_DWORD *)v791 + 1);
    v795 = *((_DWORD *)v791 + 2);
    while (1)
    {
      v796 = *((_DWORD *)v792 + 7);
      if (v793 == v796)
      {
        v797 = *((_DWORD *)v792 + 8);
        if (v794 == v797)
        {
          v798 = *((_DWORD *)v792 + 9);
          if (v795 < v798)
            goto LABEL_1272;
          if (v798 >= v795)
            goto LABEL_1268;
        }
        else
        {
          if (v794 < v797)
            goto LABEL_1272;
          if (v797 >= v794)
            goto LABEL_1268;
        }
      }
      else
      {
        if (v793 < v796)
          goto LABEL_1272;
        if (v796 >= v793)
          goto LABEL_1268;
      }
      ++v792;
LABEL_1272:
      v792 = (uint64_t *)*v792;
      if (!v792)
        goto LABEL_1284;
    }
  }
  v786 = 0;
LABEL_1288:
  *v783 = v786;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v55 = v3[168];
  if (v55 >> 30)
    v801 = 1;
  else
    v801 = (_DWORD)v55 == v5;
  if (v801)
    goto LABEL_131;
LABEL_1292:
  v802 = *(_QWORD *)(v1[2] + 8);
  v803 = v55 & 0xFFFFFFFFCFFFFFFFLL;
  v804 = *(_QWORD *)(*(_QWORD *)(v802 + 8) + 2448);
  v805 = (unsigned int *)(v804 + 520 * (v55 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v806 = *v805;
  if ((_DWORD)v806)
  {
    v807 = 0;
    v808 = 0;
    v809 = **(_QWORD **)(v802 + 16);
    v810 = v804 + 520 * v803;
    v811 = v810 + 364;
    v812 = v810 + 340;
    while (1)
    {
      v813 = (uint64_t *)(v811 + 12 * v807);
      v814 = *(uint64_t **)(v809 + 2512);
      if (v814)
        break;
LABEL_1311:
      *(_WORD *)(v812 + 2 * v808) = *(_WORD *)(v812 + 2 * v807);
      if (v807 != v808)
      {
        v821 = *v813;
        v822 = v811 + 12 * v808;
        *(_DWORD *)(v822 + 8) = *((_DWORD *)v813 + 2);
        *(_QWORD *)v822 = v821;
      }
      ++v808;
LABEL_1295:
      if (++v807 == v806)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1315;
      }
    }
    v815 = *(_DWORD *)v813;
    v816 = *((_DWORD *)v813 + 1);
    v817 = *((_DWORD *)v813 + 2);
    while (1)
    {
      v818 = *((_DWORD *)v814 + 7);
      if (v815 == v818)
      {
        v819 = *((_DWORD *)v814 + 8);
        if (v816 == v819)
        {
          v820 = *((_DWORD *)v814 + 9);
          if (v817 < v820)
            goto LABEL_1299;
          if (v820 >= v817)
            goto LABEL_1295;
        }
        else
        {
          if (v816 < v819)
            goto LABEL_1299;
          if (v819 >= v816)
            goto LABEL_1295;
        }
      }
      else
      {
        if (v815 < v818)
          goto LABEL_1299;
        if (v818 >= v815)
          goto LABEL_1295;
      }
      ++v814;
LABEL_1299:
      v814 = (uint64_t *)*v814;
      if (!v814)
        goto LABEL_1311;
    }
  }
  v808 = 0;
LABEL_1315:
  *v805 = v808;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v57 = v3[169];
  if (v57 >> 30)
    v823 = 1;
  else
    v823 = (_DWORD)v57 == v5;
  if (v823)
    goto LABEL_136;
LABEL_1319:
  v824 = *(_QWORD *)(v1[2] + 8);
  v825 = v57 & 0xFFFFFFFFCFFFFFFFLL;
  v826 = *(_QWORD *)(*(_QWORD *)(v824 + 8) + 2448);
  v827 = (unsigned int *)(v826 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v828 = *v827;
  if ((_DWORD)v828)
  {
    v829 = 0;
    v830 = 0;
    v831 = **(_QWORD **)(v824 + 16);
    v832 = v826 + 520 * v825;
    v833 = v832 + 364;
    v834 = v832 + 340;
    while (1)
    {
      v835 = (uint64_t *)(v833 + 12 * v829);
      v836 = *(uint64_t **)(v831 + 2512);
      if (v836)
        break;
LABEL_1338:
      *(_WORD *)(v834 + 2 * v830) = *(_WORD *)(v834 + 2 * v829);
      if (v829 != v830)
      {
        v843 = *v835;
        v844 = v833 + 12 * v830;
        *(_DWORD *)(v844 + 8) = *((_DWORD *)v835 + 2);
        *(_QWORD *)v844 = v843;
      }
      ++v830;
LABEL_1322:
      if (++v829 == v828)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1342;
      }
    }
    v837 = *(_DWORD *)v835;
    v838 = *((_DWORD *)v835 + 1);
    v839 = *((_DWORD *)v835 + 2);
    while (1)
    {
      v840 = *((_DWORD *)v836 + 7);
      if (v837 == v840)
      {
        v841 = *((_DWORD *)v836 + 8);
        if (v838 == v841)
        {
          v842 = *((_DWORD *)v836 + 9);
          if (v839 < v842)
            goto LABEL_1326;
          if (v842 >= v839)
            goto LABEL_1322;
        }
        else
        {
          if (v838 < v841)
            goto LABEL_1326;
          if (v841 >= v838)
            goto LABEL_1322;
        }
      }
      else
      {
        if (v837 < v840)
          goto LABEL_1326;
        if (v840 >= v837)
          goto LABEL_1322;
      }
      ++v836;
LABEL_1326:
      v836 = (uint64_t *)*v836;
      if (!v836)
        goto LABEL_1338;
    }
  }
  v830 = 0;
LABEL_1342:
  *v827 = v830;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v59 = v3[170];
  if (v59 >> 30)
    v845 = 1;
  else
    v845 = (_DWORD)v59 == v5;
  if (v845)
    goto LABEL_141;
LABEL_1346:
  v846 = *(_QWORD *)(v1[2] + 8);
  v847 = v59 & 0xFFFFFFFFCFFFFFFFLL;
  v848 = *(_QWORD *)(*(_QWORD *)(v846 + 8) + 2448);
  v849 = (unsigned int *)(v848 + 520 * (v59 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v850 = *v849;
  if ((_DWORD)v850)
  {
    v851 = 0;
    v852 = 0;
    v853 = **(_QWORD **)(v846 + 16);
    v854 = v848 + 520 * v847;
    v855 = v854 + 364;
    v856 = v854 + 340;
    while (1)
    {
      v857 = (uint64_t *)(v855 + 12 * v851);
      v858 = *(uint64_t **)(v853 + 2512);
      if (v858)
        break;
LABEL_1365:
      *(_WORD *)(v856 + 2 * v852) = *(_WORD *)(v856 + 2 * v851);
      if (v851 != v852)
      {
        v865 = *v857;
        v866 = v855 + 12 * v852;
        *(_DWORD *)(v866 + 8) = *((_DWORD *)v857 + 2);
        *(_QWORD *)v866 = v865;
      }
      ++v852;
LABEL_1349:
      if (++v851 == v850)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1369;
      }
    }
    v859 = *(_DWORD *)v857;
    v860 = *((_DWORD *)v857 + 1);
    v861 = *((_DWORD *)v857 + 2);
    while (1)
    {
      v862 = *((_DWORD *)v858 + 7);
      if (v859 == v862)
      {
        v863 = *((_DWORD *)v858 + 8);
        if (v860 == v863)
        {
          v864 = *((_DWORD *)v858 + 9);
          if (v861 < v864)
            goto LABEL_1353;
          if (v864 >= v861)
            goto LABEL_1349;
        }
        else
        {
          if (v860 < v863)
            goto LABEL_1353;
          if (v863 >= v860)
            goto LABEL_1349;
        }
      }
      else
      {
        if (v859 < v862)
          goto LABEL_1353;
        if (v862 >= v859)
          goto LABEL_1349;
      }
      ++v858;
LABEL_1353:
      v858 = (uint64_t *)*v858;
      if (!v858)
        goto LABEL_1365;
    }
  }
  v852 = 0;
LABEL_1369:
  *v849 = v852;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v61 = v3[171];
  if (v61 >> 30)
    v867 = 1;
  else
    v867 = (_DWORD)v61 == v5;
  if (v867)
    goto LABEL_146;
LABEL_1373:
  v868 = *(_QWORD *)(v1[2] + 8);
  v869 = v61 & 0xFFFFFFFFCFFFFFFFLL;
  v870 = *(_QWORD *)(*(_QWORD *)(v868 + 8) + 2448);
  v871 = (unsigned int *)(v870 + 520 * (v61 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v872 = *v871;
  if ((_DWORD)v872)
  {
    v873 = 0;
    v874 = 0;
    v875 = **(_QWORD **)(v868 + 16);
    v876 = v870 + 520 * v869;
    v877 = v876 + 364;
    v878 = v876 + 340;
    while (1)
    {
      v879 = (uint64_t *)(v877 + 12 * v873);
      v880 = *(uint64_t **)(v875 + 2512);
      if (v880)
        break;
LABEL_1392:
      *(_WORD *)(v878 + 2 * v874) = *(_WORD *)(v878 + 2 * v873);
      if (v873 != v874)
      {
        v887 = *v879;
        v888 = v877 + 12 * v874;
        *(_DWORD *)(v888 + 8) = *((_DWORD *)v879 + 2);
        *(_QWORD *)v888 = v887;
      }
      ++v874;
LABEL_1376:
      if (++v873 == v872)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1396;
      }
    }
    v881 = *(_DWORD *)v879;
    v882 = *((_DWORD *)v879 + 1);
    v883 = *((_DWORD *)v879 + 2);
    while (1)
    {
      v884 = *((_DWORD *)v880 + 7);
      if (v881 == v884)
      {
        v885 = *((_DWORD *)v880 + 8);
        if (v882 == v885)
        {
          v886 = *((_DWORD *)v880 + 9);
          if (v883 < v886)
            goto LABEL_1380;
          if (v886 >= v883)
            goto LABEL_1376;
        }
        else
        {
          if (v882 < v885)
            goto LABEL_1380;
          if (v885 >= v882)
            goto LABEL_1376;
        }
      }
      else
      {
        if (v881 < v884)
          goto LABEL_1380;
        if (v884 >= v881)
          goto LABEL_1376;
      }
      ++v880;
LABEL_1380:
      v880 = (uint64_t *)*v880;
      if (!v880)
        goto LABEL_1392;
    }
  }
  v874 = 0;
LABEL_1396:
  *v871 = v874;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v63 = v3[172];
  if (v63 >> 30)
    v889 = 1;
  else
    v889 = (_DWORD)v63 == v5;
  if (v889)
    goto LABEL_151;
LABEL_1400:
  v890 = *(_QWORD *)(v1[2] + 8);
  v891 = v63 & 0xFFFFFFFFCFFFFFFFLL;
  v892 = *(_QWORD *)(*(_QWORD *)(v890 + 8) + 2448);
  v893 = (unsigned int *)(v892 + 520 * (v63 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v894 = *v893;
  if ((_DWORD)v894)
  {
    v895 = 0;
    v896 = 0;
    v897 = **(_QWORD **)(v890 + 16);
    v898 = v892 + 520 * v891;
    v899 = v898 + 364;
    v900 = v898 + 340;
    while (1)
    {
      v901 = (uint64_t *)(v899 + 12 * v895);
      v902 = *(uint64_t **)(v897 + 2512);
      if (v902)
        break;
LABEL_1419:
      *(_WORD *)(v900 + 2 * v896) = *(_WORD *)(v900 + 2 * v895);
      if (v895 != v896)
      {
        v909 = *v901;
        v910 = v899 + 12 * v896;
        *(_DWORD *)(v910 + 8) = *((_DWORD *)v901 + 2);
        *(_QWORD *)v910 = v909;
      }
      ++v896;
LABEL_1403:
      if (++v895 == v894)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1423;
      }
    }
    v903 = *(_DWORD *)v901;
    v904 = *((_DWORD *)v901 + 1);
    v905 = *((_DWORD *)v901 + 2);
    while (1)
    {
      v906 = *((_DWORD *)v902 + 7);
      if (v903 == v906)
      {
        v907 = *((_DWORD *)v902 + 8);
        if (v904 == v907)
        {
          v908 = *((_DWORD *)v902 + 9);
          if (v905 < v908)
            goto LABEL_1407;
          if (v908 >= v905)
            goto LABEL_1403;
        }
        else
        {
          if (v904 < v907)
            goto LABEL_1407;
          if (v907 >= v904)
            goto LABEL_1403;
        }
      }
      else
      {
        if (v903 < v906)
          goto LABEL_1407;
        if (v906 >= v903)
          goto LABEL_1403;
      }
      ++v902;
LABEL_1407:
      v902 = (uint64_t *)*v902;
      if (!v902)
        goto LABEL_1419;
    }
  }
  v896 = 0;
LABEL_1423:
  *v893 = v896;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v65 = v3[173];
  if (v65 >> 30)
    v911 = 1;
  else
    v911 = (_DWORD)v65 == v5;
  if (v911)
    goto LABEL_156;
LABEL_1427:
  v912 = *(_QWORD *)(v1[2] + 8);
  v913 = v65 & 0xFFFFFFFFCFFFFFFFLL;
  v914 = *(_QWORD *)(*(_QWORD *)(v912 + 8) + 2448);
  v915 = (unsigned int *)(v914 + 520 * (v65 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v916 = *v915;
  if ((_DWORD)v916)
  {
    v917 = 0;
    v918 = 0;
    v919 = **(_QWORD **)(v912 + 16);
    v920 = v914 + 520 * v913;
    v921 = v920 + 364;
    v922 = v920 + 340;
    while (1)
    {
      v923 = (uint64_t *)(v921 + 12 * v917);
      v924 = *(uint64_t **)(v919 + 2512);
      if (v924)
        break;
LABEL_1446:
      *(_WORD *)(v922 + 2 * v918) = *(_WORD *)(v922 + 2 * v917);
      if (v917 != v918)
      {
        v931 = *v923;
        v932 = v921 + 12 * v918;
        *(_DWORD *)(v932 + 8) = *((_DWORD *)v923 + 2);
        *(_QWORD *)v932 = v931;
      }
      ++v918;
LABEL_1430:
      if (++v917 == v916)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1450;
      }
    }
    v925 = *(_DWORD *)v923;
    v926 = *((_DWORD *)v923 + 1);
    v927 = *((_DWORD *)v923 + 2);
    while (1)
    {
      v928 = *((_DWORD *)v924 + 7);
      if (v925 == v928)
      {
        v929 = *((_DWORD *)v924 + 8);
        if (v926 == v929)
        {
          v930 = *((_DWORD *)v924 + 9);
          if (v927 < v930)
            goto LABEL_1434;
          if (v930 >= v927)
            goto LABEL_1430;
        }
        else
        {
          if (v926 < v929)
            goto LABEL_1434;
          if (v929 >= v926)
            goto LABEL_1430;
        }
      }
      else
      {
        if (v925 < v928)
          goto LABEL_1434;
        if (v928 >= v925)
          goto LABEL_1430;
      }
      ++v924;
LABEL_1434:
      v924 = (uint64_t *)*v924;
      if (!v924)
        goto LABEL_1446;
    }
  }
  v918 = 0;
LABEL_1450:
  *v915 = v918;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v67 = v3[174];
  if (v67 >> 30)
    v933 = 1;
  else
    v933 = (_DWORD)v67 == v5;
  if (v933)
    goto LABEL_161;
LABEL_1454:
  v934 = *(_QWORD *)(v1[2] + 8);
  v935 = v67 & 0xFFFFFFFFCFFFFFFFLL;
  v936 = *(_QWORD *)(*(_QWORD *)(v934 + 8) + 2448);
  v937 = (unsigned int *)(v936 + 520 * (v67 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v938 = *v937;
  if ((_DWORD)v938)
  {
    v939 = 0;
    v940 = 0;
    v941 = **(_QWORD **)(v934 + 16);
    v942 = v936 + 520 * v935;
    v943 = v942 + 364;
    v944 = v942 + 340;
    while (1)
    {
      v945 = (uint64_t *)(v943 + 12 * v939);
      v946 = *(uint64_t **)(v941 + 2512);
      if (v946)
        break;
LABEL_1473:
      *(_WORD *)(v944 + 2 * v940) = *(_WORD *)(v944 + 2 * v939);
      if (v939 != v940)
      {
        v953 = *v945;
        v954 = v943 + 12 * v940;
        *(_DWORD *)(v954 + 8) = *((_DWORD *)v945 + 2);
        *(_QWORD *)v954 = v953;
      }
      ++v940;
LABEL_1457:
      if (++v939 == v938)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1477;
      }
    }
    v947 = *(_DWORD *)v945;
    v948 = *((_DWORD *)v945 + 1);
    v949 = *((_DWORD *)v945 + 2);
    while (1)
    {
      v950 = *((_DWORD *)v946 + 7);
      if (v947 == v950)
      {
        v951 = *((_DWORD *)v946 + 8);
        if (v948 == v951)
        {
          v952 = *((_DWORD *)v946 + 9);
          if (v949 < v952)
            goto LABEL_1461;
          if (v952 >= v949)
            goto LABEL_1457;
        }
        else
        {
          if (v948 < v951)
            goto LABEL_1461;
          if (v951 >= v948)
            goto LABEL_1457;
        }
      }
      else
      {
        if (v947 < v950)
          goto LABEL_1461;
        if (v950 >= v947)
          goto LABEL_1457;
      }
      ++v946;
LABEL_1461:
      v946 = (uint64_t *)*v946;
      if (!v946)
        goto LABEL_1473;
    }
  }
  v940 = 0;
LABEL_1477:
  *v937 = v940;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v69 = v3[175];
  if (v69 >> 30)
    v955 = 1;
  else
    v955 = (_DWORD)v69 == v5;
  if (v955)
    goto LABEL_166;
LABEL_1481:
  v956 = *(_QWORD *)(v1[2] + 8);
  v957 = v69 & 0xFFFFFFFFCFFFFFFFLL;
  v958 = *(_QWORD *)(*(_QWORD *)(v956 + 8) + 2448);
  v959 = (unsigned int *)(v958 + 520 * (v69 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v960 = *v959;
  if ((_DWORD)v960)
  {
    v961 = 0;
    v962 = 0;
    v963 = **(_QWORD **)(v956 + 16);
    v964 = v958 + 520 * v957;
    v965 = v964 + 364;
    v966 = v964 + 340;
    while (1)
    {
      v967 = (uint64_t *)(v965 + 12 * v961);
      v968 = *(uint64_t **)(v963 + 2512);
      if (v968)
        break;
LABEL_1500:
      *(_WORD *)(v966 + 2 * v962) = *(_WORD *)(v966 + 2 * v961);
      if (v961 != v962)
      {
        v975 = *v967;
        v976 = v965 + 12 * v962;
        *(_DWORD *)(v976 + 8) = *((_DWORD *)v967 + 2);
        *(_QWORD *)v976 = v975;
      }
      ++v962;
LABEL_1484:
      if (++v961 == v960)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1504;
      }
    }
    v969 = *(_DWORD *)v967;
    v970 = *((_DWORD *)v967 + 1);
    v971 = *((_DWORD *)v967 + 2);
    while (1)
    {
      v972 = *((_DWORD *)v968 + 7);
      if (v969 == v972)
      {
        v973 = *((_DWORD *)v968 + 8);
        if (v970 == v973)
        {
          v974 = *((_DWORD *)v968 + 9);
          if (v971 < v974)
            goto LABEL_1488;
          if (v974 >= v971)
            goto LABEL_1484;
        }
        else
        {
          if (v970 < v973)
            goto LABEL_1488;
          if (v973 >= v970)
            goto LABEL_1484;
        }
      }
      else
      {
        if (v969 < v972)
          goto LABEL_1488;
        if (v972 >= v969)
          goto LABEL_1484;
      }
      ++v968;
LABEL_1488:
      v968 = (uint64_t *)*v968;
      if (!v968)
        goto LABEL_1500;
    }
  }
  v962 = 0;
LABEL_1504:
  *v959 = v962;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v71 = v3[176];
  if (v71 >> 30)
    v977 = 1;
  else
    v977 = (_DWORD)v71 == v5;
  if (v977)
    goto LABEL_171;
LABEL_1508:
  v978 = *(_QWORD *)(v1[2] + 8);
  v979 = v71 & 0xFFFFFFFFCFFFFFFFLL;
  v980 = *(_QWORD *)(*(_QWORD *)(v978 + 8) + 2448);
  v981 = (unsigned int *)(v980 + 520 * (v71 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v982 = *v981;
  if ((_DWORD)v982)
  {
    v983 = 0;
    v984 = 0;
    v985 = **(_QWORD **)(v978 + 16);
    v986 = v980 + 520 * v979;
    v987 = v986 + 364;
    v988 = v986 + 340;
    while (1)
    {
      v989 = (uint64_t *)(v987 + 12 * v983);
      v990 = *(uint64_t **)(v985 + 2512);
      if (v990)
        break;
LABEL_1527:
      *(_WORD *)(v988 + 2 * v984) = *(_WORD *)(v988 + 2 * v983);
      if (v983 != v984)
      {
        v997 = *v989;
        v998 = v987 + 12 * v984;
        *(_DWORD *)(v998 + 8) = *((_DWORD *)v989 + 2);
        *(_QWORD *)v998 = v997;
      }
      ++v984;
LABEL_1511:
      if (++v983 == v982)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1531;
      }
    }
    v991 = *(_DWORD *)v989;
    v992 = *((_DWORD *)v989 + 1);
    v993 = *((_DWORD *)v989 + 2);
    while (1)
    {
      v994 = *((_DWORD *)v990 + 7);
      if (v991 == v994)
      {
        v995 = *((_DWORD *)v990 + 8);
        if (v992 == v995)
        {
          v996 = *((_DWORD *)v990 + 9);
          if (v993 < v996)
            goto LABEL_1515;
          if (v996 >= v993)
            goto LABEL_1511;
        }
        else
        {
          if (v992 < v995)
            goto LABEL_1515;
          if (v995 >= v992)
            goto LABEL_1511;
        }
      }
      else
      {
        if (v991 < v994)
          goto LABEL_1515;
        if (v994 >= v991)
          goto LABEL_1511;
      }
      ++v990;
LABEL_1515:
      v990 = (uint64_t *)*v990;
      if (!v990)
        goto LABEL_1527;
    }
  }
  v984 = 0;
LABEL_1531:
  *v981 = v984;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v73 = v3[177];
  if (v73 >> 30)
    v999 = 1;
  else
    v999 = (_DWORD)v73 == v5;
  if (v999)
    goto LABEL_176;
LABEL_1535:
  v1000 = *(_QWORD *)(v1[2] + 8);
  v1001 = v73 & 0xFFFFFFFFCFFFFFFFLL;
  v1002 = *(_QWORD *)(*(_QWORD *)(v1000 + 8) + 2448);
  v1003 = (unsigned int *)(v1002 + 520 * (v73 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1004 = *v1003;
  if ((_DWORD)v1004)
  {
    v1005 = 0;
    v1006 = 0;
    v1007 = **(_QWORD **)(v1000 + 16);
    v1008 = v1002 + 520 * v1001;
    v1009 = v1008 + 364;
    v1010 = v1008 + 340;
    while (1)
    {
      v1011 = (uint64_t *)(v1009 + 12 * v1005);
      v1012 = *(uint64_t **)(v1007 + 2512);
      if (v1012)
        break;
LABEL_1554:
      *(_WORD *)(v1010 + 2 * v1006) = *(_WORD *)(v1010 + 2 * v1005);
      if (v1005 != v1006)
      {
        v1019 = *v1011;
        v1020 = v1009 + 12 * v1006;
        *(_DWORD *)(v1020 + 8) = *((_DWORD *)v1011 + 2);
        *(_QWORD *)v1020 = v1019;
      }
      ++v1006;
LABEL_1538:
      if (++v1005 == v1004)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1558;
      }
    }
    v1013 = *(_DWORD *)v1011;
    v1014 = *((_DWORD *)v1011 + 1);
    v1015 = *((_DWORD *)v1011 + 2);
    while (1)
    {
      v1016 = *((_DWORD *)v1012 + 7);
      if (v1013 == v1016)
      {
        v1017 = *((_DWORD *)v1012 + 8);
        if (v1014 == v1017)
        {
          v1018 = *((_DWORD *)v1012 + 9);
          if (v1015 < v1018)
            goto LABEL_1542;
          if (v1018 >= v1015)
            goto LABEL_1538;
        }
        else
        {
          if (v1014 < v1017)
            goto LABEL_1542;
          if (v1017 >= v1014)
            goto LABEL_1538;
        }
      }
      else
      {
        if (v1013 < v1016)
          goto LABEL_1542;
        if (v1016 >= v1013)
          goto LABEL_1538;
      }
      ++v1012;
LABEL_1542:
      v1012 = (uint64_t *)*v1012;
      if (!v1012)
        goto LABEL_1554;
    }
  }
  v1006 = 0;
LABEL_1558:
  *v1003 = v1006;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v75 = v3[178];
  if (v75 >> 30)
    v1021 = 1;
  else
    v1021 = (_DWORD)v75 == v5;
  if (v1021)
    goto LABEL_181;
LABEL_1562:
  v1022 = *(_QWORD *)(v1[2] + 8);
  v1023 = v75 & 0xFFFFFFFFCFFFFFFFLL;
  v1024 = *(_QWORD *)(*(_QWORD *)(v1022 + 8) + 2448);
  v1025 = (unsigned int *)(v1024 + 520 * (v75 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1026 = *v1025;
  if ((_DWORD)v1026)
  {
    v1027 = 0;
    v1028 = 0;
    v1029 = **(_QWORD **)(v1022 + 16);
    v1030 = v1024 + 520 * v1023;
    v1031 = v1030 + 364;
    v1032 = v1030 + 340;
    while (1)
    {
      v1033 = (uint64_t *)(v1031 + 12 * v1027);
      v1034 = *(uint64_t **)(v1029 + 2512);
      if (v1034)
        break;
LABEL_1581:
      *(_WORD *)(v1032 + 2 * v1028) = *(_WORD *)(v1032 + 2 * v1027);
      if (v1027 != v1028)
      {
        v1041 = *v1033;
        v1042 = v1031 + 12 * v1028;
        *(_DWORD *)(v1042 + 8) = *((_DWORD *)v1033 + 2);
        *(_QWORD *)v1042 = v1041;
      }
      ++v1028;
LABEL_1565:
      if (++v1027 == v1026)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1585;
      }
    }
    v1035 = *(_DWORD *)v1033;
    v1036 = *((_DWORD *)v1033 + 1);
    v1037 = *((_DWORD *)v1033 + 2);
    while (1)
    {
      v1038 = *((_DWORD *)v1034 + 7);
      if (v1035 == v1038)
      {
        v1039 = *((_DWORD *)v1034 + 8);
        if (v1036 == v1039)
        {
          v1040 = *((_DWORD *)v1034 + 9);
          if (v1037 < v1040)
            goto LABEL_1569;
          if (v1040 >= v1037)
            goto LABEL_1565;
        }
        else
        {
          if (v1036 < v1039)
            goto LABEL_1569;
          if (v1039 >= v1036)
            goto LABEL_1565;
        }
      }
      else
      {
        if (v1035 < v1038)
          goto LABEL_1569;
        if (v1038 >= v1035)
          goto LABEL_1565;
      }
      ++v1034;
LABEL_1569:
      v1034 = (uint64_t *)*v1034;
      if (!v1034)
        goto LABEL_1581;
    }
  }
  v1028 = 0;
LABEL_1585:
  *v1025 = v1028;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v77 = v3[179];
  if (v77 >> 30)
    v1043 = 1;
  else
    v1043 = (_DWORD)v77 == v5;
  if (v1043)
    goto LABEL_186;
LABEL_1589:
  v1044 = *(_QWORD *)(v1[2] + 8);
  v1045 = v77 & 0xFFFFFFFFCFFFFFFFLL;
  v1046 = *(_QWORD *)(*(_QWORD *)(v1044 + 8) + 2448);
  v1047 = (unsigned int *)(v1046 + 520 * (v77 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1048 = *v1047;
  if ((_DWORD)v1048)
  {
    v1049 = 0;
    v1050 = 0;
    v1051 = **(_QWORD **)(v1044 + 16);
    v1052 = v1046 + 520 * v1045;
    v1053 = v1052 + 364;
    v1054 = v1052 + 340;
    while (1)
    {
      v1055 = (uint64_t *)(v1053 + 12 * v1049);
      v1056 = *(uint64_t **)(v1051 + 2512);
      if (v1056)
        break;
LABEL_1608:
      *(_WORD *)(v1054 + 2 * v1050) = *(_WORD *)(v1054 + 2 * v1049);
      if (v1049 != v1050)
      {
        v1063 = *v1055;
        v1064 = v1053 + 12 * v1050;
        *(_DWORD *)(v1064 + 8) = *((_DWORD *)v1055 + 2);
        *(_QWORD *)v1064 = v1063;
      }
      ++v1050;
LABEL_1592:
      if (++v1049 == v1048)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1612;
      }
    }
    v1057 = *(_DWORD *)v1055;
    v1058 = *((_DWORD *)v1055 + 1);
    v1059 = *((_DWORD *)v1055 + 2);
    while (1)
    {
      v1060 = *((_DWORD *)v1056 + 7);
      if (v1057 == v1060)
      {
        v1061 = *((_DWORD *)v1056 + 8);
        if (v1058 == v1061)
        {
          v1062 = *((_DWORD *)v1056 + 9);
          if (v1059 < v1062)
            goto LABEL_1596;
          if (v1062 >= v1059)
            goto LABEL_1592;
        }
        else
        {
          if (v1058 < v1061)
            goto LABEL_1596;
          if (v1061 >= v1058)
            goto LABEL_1592;
        }
      }
      else
      {
        if (v1057 < v1060)
          goto LABEL_1596;
        if (v1060 >= v1057)
          goto LABEL_1592;
      }
      ++v1056;
LABEL_1596:
      v1056 = (uint64_t *)*v1056;
      if (!v1056)
        goto LABEL_1608;
    }
  }
  v1050 = 0;
LABEL_1612:
  *v1047 = v1050;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v79 = v3[180];
  if (v79 >> 30)
    v1065 = 1;
  else
    v1065 = (_DWORD)v79 == v5;
  if (v1065)
    goto LABEL_191;
LABEL_1616:
  v1066 = *(_QWORD *)(v1[2] + 8);
  v1067 = v79 & 0xFFFFFFFFCFFFFFFFLL;
  v1068 = *(_QWORD *)(*(_QWORD *)(v1066 + 8) + 2448);
  v1069 = (unsigned int *)(v1068 + 520 * (v79 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1070 = *v1069;
  if ((_DWORD)v1070)
  {
    v1071 = 0;
    v1072 = 0;
    v1073 = **(_QWORD **)(v1066 + 16);
    v1074 = v1068 + 520 * v1067;
    v1075 = v1074 + 364;
    v1076 = v1074 + 340;
    while (1)
    {
      v1077 = (uint64_t *)(v1075 + 12 * v1071);
      v1078 = *(uint64_t **)(v1073 + 2512);
      if (v1078)
        break;
LABEL_1635:
      *(_WORD *)(v1076 + 2 * v1072) = *(_WORD *)(v1076 + 2 * v1071);
      if (v1071 != v1072)
      {
        v1085 = *v1077;
        v1086 = v1075 + 12 * v1072;
        *(_DWORD *)(v1086 + 8) = *((_DWORD *)v1077 + 2);
        *(_QWORD *)v1086 = v1085;
      }
      ++v1072;
LABEL_1619:
      if (++v1071 == v1070)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1639;
      }
    }
    v1079 = *(_DWORD *)v1077;
    v1080 = *((_DWORD *)v1077 + 1);
    v1081 = *((_DWORD *)v1077 + 2);
    while (1)
    {
      v1082 = *((_DWORD *)v1078 + 7);
      if (v1079 == v1082)
      {
        v1083 = *((_DWORD *)v1078 + 8);
        if (v1080 == v1083)
        {
          v1084 = *((_DWORD *)v1078 + 9);
          if (v1081 < v1084)
            goto LABEL_1623;
          if (v1084 >= v1081)
            goto LABEL_1619;
        }
        else
        {
          if (v1080 < v1083)
            goto LABEL_1623;
          if (v1083 >= v1080)
            goto LABEL_1619;
        }
      }
      else
      {
        if (v1079 < v1082)
          goto LABEL_1623;
        if (v1082 >= v1079)
          goto LABEL_1619;
      }
      ++v1078;
LABEL_1623:
      v1078 = (uint64_t *)*v1078;
      if (!v1078)
        goto LABEL_1635;
    }
  }
  v1072 = 0;
LABEL_1639:
  *v1069 = v1072;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v81 = v3[181];
  if (v81 >> 30)
    v1087 = 1;
  else
    v1087 = (_DWORD)v81 == v5;
  if (v1087)
    goto LABEL_196;
LABEL_1643:
  v1088 = *(_QWORD *)(v1[2] + 8);
  v1089 = v81 & 0xFFFFFFFFCFFFFFFFLL;
  v1090 = *(_QWORD *)(*(_QWORD *)(v1088 + 8) + 2448);
  v1091 = (unsigned int *)(v1090 + 520 * (v81 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1092 = *v1091;
  if ((_DWORD)v1092)
  {
    v1093 = 0;
    v1094 = 0;
    v1095 = **(_QWORD **)(v1088 + 16);
    v1096 = v1090 + 520 * v1089;
    v1097 = v1096 + 364;
    v1098 = v1096 + 340;
    while (1)
    {
      v1099 = (uint64_t *)(v1097 + 12 * v1093);
      v1100 = *(uint64_t **)(v1095 + 2512);
      if (v1100)
        break;
LABEL_1662:
      *(_WORD *)(v1098 + 2 * v1094) = *(_WORD *)(v1098 + 2 * v1093);
      if (v1093 != v1094)
      {
        v1107 = *v1099;
        v1108 = v1097 + 12 * v1094;
        *(_DWORD *)(v1108 + 8) = *((_DWORD *)v1099 + 2);
        *(_QWORD *)v1108 = v1107;
      }
      ++v1094;
LABEL_1646:
      if (++v1093 == v1092)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1666;
      }
    }
    v1101 = *(_DWORD *)v1099;
    v1102 = *((_DWORD *)v1099 + 1);
    v1103 = *((_DWORD *)v1099 + 2);
    while (1)
    {
      v1104 = *((_DWORD *)v1100 + 7);
      if (v1101 == v1104)
      {
        v1105 = *((_DWORD *)v1100 + 8);
        if (v1102 == v1105)
        {
          v1106 = *((_DWORD *)v1100 + 9);
          if (v1103 < v1106)
            goto LABEL_1650;
          if (v1106 >= v1103)
            goto LABEL_1646;
        }
        else
        {
          if (v1102 < v1105)
            goto LABEL_1650;
          if (v1105 >= v1102)
            goto LABEL_1646;
        }
      }
      else
      {
        if (v1101 < v1104)
          goto LABEL_1650;
        if (v1104 >= v1101)
          goto LABEL_1646;
      }
      ++v1100;
LABEL_1650:
      v1100 = (uint64_t *)*v1100;
      if (!v1100)
        goto LABEL_1662;
    }
  }
  v1094 = 0;
LABEL_1666:
  *v1091 = v1094;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v83 = v3[182];
  if (v83 >> 30)
    v1109 = 1;
  else
    v1109 = (_DWORD)v83 == v5;
  if (v1109)
    goto LABEL_201;
LABEL_1670:
  v1110 = *(_QWORD *)(v1[2] + 8);
  v1111 = v83 & 0xFFFFFFFFCFFFFFFFLL;
  v1112 = *(_QWORD *)(*(_QWORD *)(v1110 + 8) + 2448);
  v1113 = (unsigned int *)(v1112 + 520 * (v83 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1114 = *v1113;
  if ((_DWORD)v1114)
  {
    v1115 = 0;
    v1116 = 0;
    v1117 = **(_QWORD **)(v1110 + 16);
    v1118 = v1112 + 520 * v1111;
    v1119 = v1118 + 364;
    v1120 = v1118 + 340;
    while (1)
    {
      v1121 = (uint64_t *)(v1119 + 12 * v1115);
      v1122 = *(uint64_t **)(v1117 + 2512);
      if (v1122)
        break;
LABEL_1689:
      *(_WORD *)(v1120 + 2 * v1116) = *(_WORD *)(v1120 + 2 * v1115);
      if (v1115 != v1116)
      {
        v1129 = *v1121;
        v1130 = v1119 + 12 * v1116;
        *(_DWORD *)(v1130 + 8) = *((_DWORD *)v1121 + 2);
        *(_QWORD *)v1130 = v1129;
      }
      ++v1116;
LABEL_1673:
      if (++v1115 == v1114)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1693;
      }
    }
    v1123 = *(_DWORD *)v1121;
    v1124 = *((_DWORD *)v1121 + 1);
    v1125 = *((_DWORD *)v1121 + 2);
    while (1)
    {
      v1126 = *((_DWORD *)v1122 + 7);
      if (v1123 == v1126)
      {
        v1127 = *((_DWORD *)v1122 + 8);
        if (v1124 == v1127)
        {
          v1128 = *((_DWORD *)v1122 + 9);
          if (v1125 < v1128)
            goto LABEL_1677;
          if (v1128 >= v1125)
            goto LABEL_1673;
        }
        else
        {
          if (v1124 < v1127)
            goto LABEL_1677;
          if (v1127 >= v1124)
            goto LABEL_1673;
        }
      }
      else
      {
        if (v1123 < v1126)
          goto LABEL_1677;
        if (v1126 >= v1123)
          goto LABEL_1673;
      }
      ++v1122;
LABEL_1677:
      v1122 = (uint64_t *)*v1122;
      if (!v1122)
        goto LABEL_1689;
    }
  }
  v1116 = 0;
LABEL_1693:
  *v1113 = v1116;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v85 = v3[183];
  if (v85 >> 30)
    v1131 = 1;
  else
    v1131 = (_DWORD)v85 == v5;
  if (v1131)
    goto LABEL_206;
LABEL_1697:
  v1132 = *(_QWORD *)(v1[2] + 8);
  v1133 = v85 & 0xFFFFFFFFCFFFFFFFLL;
  v1134 = *(_QWORD *)(*(_QWORD *)(v1132 + 8) + 2448);
  v1135 = (unsigned int *)(v1134 + 520 * (v85 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1136 = *v1135;
  if ((_DWORD)v1136)
  {
    v1137 = 0;
    v1138 = 0;
    v1139 = **(_QWORD **)(v1132 + 16);
    v1140 = v1134 + 520 * v1133;
    v1141 = v1140 + 364;
    v1142 = v1140 + 340;
    while (1)
    {
      v1143 = (uint64_t *)(v1141 + 12 * v1137);
      v1144 = *(uint64_t **)(v1139 + 2512);
      if (v1144)
        break;
LABEL_1716:
      *(_WORD *)(v1142 + 2 * v1138) = *(_WORD *)(v1142 + 2 * v1137);
      if (v1137 != v1138)
      {
        v1151 = *v1143;
        v1152 = v1141 + 12 * v1138;
        *(_DWORD *)(v1152 + 8) = *((_DWORD *)v1143 + 2);
        *(_QWORD *)v1152 = v1151;
      }
      ++v1138;
LABEL_1700:
      if (++v1137 == v1136)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1720;
      }
    }
    v1145 = *(_DWORD *)v1143;
    v1146 = *((_DWORD *)v1143 + 1);
    v1147 = *((_DWORD *)v1143 + 2);
    while (1)
    {
      v1148 = *((_DWORD *)v1144 + 7);
      if (v1145 == v1148)
      {
        v1149 = *((_DWORD *)v1144 + 8);
        if (v1146 == v1149)
        {
          v1150 = *((_DWORD *)v1144 + 9);
          if (v1147 < v1150)
            goto LABEL_1704;
          if (v1150 >= v1147)
            goto LABEL_1700;
        }
        else
        {
          if (v1146 < v1149)
            goto LABEL_1704;
          if (v1149 >= v1146)
            goto LABEL_1700;
        }
      }
      else
      {
        if (v1145 < v1148)
          goto LABEL_1704;
        if (v1148 >= v1145)
          goto LABEL_1700;
      }
      ++v1144;
LABEL_1704:
      v1144 = (uint64_t *)*v1144;
      if (!v1144)
        goto LABEL_1716;
    }
  }
  v1138 = 0;
LABEL_1720:
  *v1135 = v1138;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v87 = v3[184];
  if (v87 >> 30)
    v1153 = 1;
  else
    v1153 = (_DWORD)v87 == v5;
  if (v1153)
    goto LABEL_211;
LABEL_1724:
  v1154 = *(_QWORD *)(v1[2] + 8);
  v1155 = v87 & 0xFFFFFFFFCFFFFFFFLL;
  v1156 = *(_QWORD *)(*(_QWORD *)(v1154 + 8) + 2448);
  v1157 = (unsigned int *)(v1156 + 520 * (v87 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1158 = *v1157;
  if ((_DWORD)v1158)
  {
    v1159 = 0;
    v1160 = 0;
    v1161 = **(_QWORD **)(v1154 + 16);
    v1162 = v1156 + 520 * v1155;
    v1163 = v1162 + 364;
    v1164 = v1162 + 340;
    while (1)
    {
      v1165 = (uint64_t *)(v1163 + 12 * v1159);
      v1166 = *(uint64_t **)(v1161 + 2512);
      if (v1166)
        break;
LABEL_1743:
      *(_WORD *)(v1164 + 2 * v1160) = *(_WORD *)(v1164 + 2 * v1159);
      if (v1159 != v1160)
      {
        v1173 = *v1165;
        v1174 = v1163 + 12 * v1160;
        *(_DWORD *)(v1174 + 8) = *((_DWORD *)v1165 + 2);
        *(_QWORD *)v1174 = v1173;
      }
      ++v1160;
LABEL_1727:
      if (++v1159 == v1158)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1747;
      }
    }
    v1167 = *(_DWORD *)v1165;
    v1168 = *((_DWORD *)v1165 + 1);
    v1169 = *((_DWORD *)v1165 + 2);
    while (1)
    {
      v1170 = *((_DWORD *)v1166 + 7);
      if (v1167 == v1170)
      {
        v1171 = *((_DWORD *)v1166 + 8);
        if (v1168 == v1171)
        {
          v1172 = *((_DWORD *)v1166 + 9);
          if (v1169 < v1172)
            goto LABEL_1731;
          if (v1172 >= v1169)
            goto LABEL_1727;
        }
        else
        {
          if (v1168 < v1171)
            goto LABEL_1731;
          if (v1171 >= v1168)
            goto LABEL_1727;
        }
      }
      else
      {
        if (v1167 < v1170)
          goto LABEL_1731;
        if (v1170 >= v1167)
          goto LABEL_1727;
      }
      ++v1166;
LABEL_1731:
      v1166 = (uint64_t *)*v1166;
      if (!v1166)
        goto LABEL_1743;
    }
  }
  v1160 = 0;
LABEL_1747:
  *v1157 = v1160;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v89 = v3[185];
  if (v89 >> 30)
    v1175 = 1;
  else
    v1175 = (_DWORD)v89 == v5;
  if (v1175)
    goto LABEL_216;
LABEL_1751:
  v1176 = *(_QWORD *)(v1[2] + 8);
  v1177 = v89 & 0xFFFFFFFFCFFFFFFFLL;
  v1178 = *(_QWORD *)(*(_QWORD *)(v1176 + 8) + 2448);
  v1179 = (unsigned int *)(v1178 + 520 * (v89 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1180 = *v1179;
  if ((_DWORD)v1180)
  {
    v1181 = 0;
    v1182 = 0;
    v1183 = **(_QWORD **)(v1176 + 16);
    v1184 = v1178 + 520 * v1177;
    v1185 = v1184 + 364;
    v1186 = v1184 + 340;
    while (1)
    {
      v1187 = (uint64_t *)(v1185 + 12 * v1181);
      v1188 = *(uint64_t **)(v1183 + 2512);
      if (v1188)
        break;
LABEL_1770:
      *(_WORD *)(v1186 + 2 * v1182) = *(_WORD *)(v1186 + 2 * v1181);
      if (v1181 != v1182)
      {
        v1195 = *v1187;
        v1196 = v1185 + 12 * v1182;
        *(_DWORD *)(v1196 + 8) = *((_DWORD *)v1187 + 2);
        *(_QWORD *)v1196 = v1195;
      }
      ++v1182;
LABEL_1754:
      if (++v1181 == v1180)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1774;
      }
    }
    v1189 = *(_DWORD *)v1187;
    v1190 = *((_DWORD *)v1187 + 1);
    v1191 = *((_DWORD *)v1187 + 2);
    while (1)
    {
      v1192 = *((_DWORD *)v1188 + 7);
      if (v1189 == v1192)
      {
        v1193 = *((_DWORD *)v1188 + 8);
        if (v1190 == v1193)
        {
          v1194 = *((_DWORD *)v1188 + 9);
          if (v1191 < v1194)
            goto LABEL_1758;
          if (v1194 >= v1191)
            goto LABEL_1754;
        }
        else
        {
          if (v1190 < v1193)
            goto LABEL_1758;
          if (v1193 >= v1190)
            goto LABEL_1754;
        }
      }
      else
      {
        if (v1189 < v1192)
          goto LABEL_1758;
        if (v1192 >= v1189)
          goto LABEL_1754;
      }
      ++v1188;
LABEL_1758:
      v1188 = (uint64_t *)*v1188;
      if (!v1188)
        goto LABEL_1770;
    }
  }
  v1182 = 0;
LABEL_1774:
  *v1179 = v1182;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v91 = v3[186];
  if (v91 >> 30)
    v1197 = 1;
  else
    v1197 = (_DWORD)v91 == v5;
  if (v1197)
    goto LABEL_221;
LABEL_1778:
  v1198 = *(_QWORD *)(v1[2] + 8);
  v1199 = v91 & 0xFFFFFFFFCFFFFFFFLL;
  v1200 = *(_QWORD *)(*(_QWORD *)(v1198 + 8) + 2448);
  v1201 = (unsigned int *)(v1200 + 520 * (v91 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1202 = *v1201;
  if ((_DWORD)v1202)
  {
    v1203 = 0;
    v1204 = 0;
    v1205 = **(_QWORD **)(v1198 + 16);
    v1206 = v1200 + 520 * v1199;
    v1207 = v1206 + 364;
    v1208 = v1206 + 340;
    while (1)
    {
      v1209 = (uint64_t *)(v1207 + 12 * v1203);
      v1210 = *(uint64_t **)(v1205 + 2512);
      if (v1210)
        break;
LABEL_1797:
      *(_WORD *)(v1208 + 2 * v1204) = *(_WORD *)(v1208 + 2 * v1203);
      if (v1203 != v1204)
      {
        v1217 = *v1209;
        v1218 = v1207 + 12 * v1204;
        *(_DWORD *)(v1218 + 8) = *((_DWORD *)v1209 + 2);
        *(_QWORD *)v1218 = v1217;
      }
      ++v1204;
LABEL_1781:
      if (++v1203 == v1202)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1801;
      }
    }
    v1211 = *(_DWORD *)v1209;
    v1212 = *((_DWORD *)v1209 + 1);
    v1213 = *((_DWORD *)v1209 + 2);
    while (1)
    {
      v1214 = *((_DWORD *)v1210 + 7);
      if (v1211 == v1214)
      {
        v1215 = *((_DWORD *)v1210 + 8);
        if (v1212 == v1215)
        {
          v1216 = *((_DWORD *)v1210 + 9);
          if (v1213 < v1216)
            goto LABEL_1785;
          if (v1216 >= v1213)
            goto LABEL_1781;
        }
        else
        {
          if (v1212 < v1215)
            goto LABEL_1785;
          if (v1215 >= v1212)
            goto LABEL_1781;
        }
      }
      else
      {
        if (v1211 < v1214)
          goto LABEL_1785;
        if (v1214 >= v1211)
          goto LABEL_1781;
      }
      ++v1210;
LABEL_1785:
      v1210 = (uint64_t *)*v1210;
      if (!v1210)
        goto LABEL_1797;
    }
  }
  v1204 = 0;
LABEL_1801:
  *v1201 = v1204;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v93 = v3[187];
  if (v93 >> 30)
    v1219 = 1;
  else
    v1219 = (_DWORD)v93 == v5;
  if (v1219)
    goto LABEL_226;
LABEL_1805:
  v1220 = *(_QWORD *)(v1[2] + 8);
  v1221 = v93 & 0xFFFFFFFFCFFFFFFFLL;
  v1222 = *(_QWORD *)(*(_QWORD *)(v1220 + 8) + 2448);
  v1223 = (unsigned int *)(v1222 + 520 * (v93 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1224 = *v1223;
  if ((_DWORD)v1224)
  {
    v1225 = 0;
    v1226 = 0;
    v1227 = **(_QWORD **)(v1220 + 16);
    v1228 = v1222 + 520 * v1221;
    v1229 = v1228 + 364;
    v1230 = v1228 + 340;
    while (1)
    {
      v1231 = (uint64_t *)(v1229 + 12 * v1225);
      v1232 = *(uint64_t **)(v1227 + 2512);
      if (v1232)
        break;
LABEL_1824:
      *(_WORD *)(v1230 + 2 * v1226) = *(_WORD *)(v1230 + 2 * v1225);
      if (v1225 != v1226)
      {
        v1239 = *v1231;
        v1240 = v1229 + 12 * v1226;
        *(_DWORD *)(v1240 + 8) = *((_DWORD *)v1231 + 2);
        *(_QWORD *)v1240 = v1239;
      }
      ++v1226;
LABEL_1808:
      if (++v1225 == v1224)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1828;
      }
    }
    v1233 = *(_DWORD *)v1231;
    v1234 = *((_DWORD *)v1231 + 1);
    v1235 = *((_DWORD *)v1231 + 2);
    while (1)
    {
      v1236 = *((_DWORD *)v1232 + 7);
      if (v1233 == v1236)
      {
        v1237 = *((_DWORD *)v1232 + 8);
        if (v1234 == v1237)
        {
          v1238 = *((_DWORD *)v1232 + 9);
          if (v1235 < v1238)
            goto LABEL_1812;
          if (v1238 >= v1235)
            goto LABEL_1808;
        }
        else
        {
          if (v1234 < v1237)
            goto LABEL_1812;
          if (v1237 >= v1234)
            goto LABEL_1808;
        }
      }
      else
      {
        if (v1233 < v1236)
          goto LABEL_1812;
        if (v1236 >= v1233)
          goto LABEL_1808;
      }
      ++v1232;
LABEL_1812:
      v1232 = (uint64_t *)*v1232;
      if (!v1232)
        goto LABEL_1824;
    }
  }
  v1226 = 0;
LABEL_1828:
  *v1223 = v1226;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v95 = v3[188];
  if (v95 >> 30)
    v1241 = 1;
  else
    v1241 = (_DWORD)v95 == v5;
  if (v1241)
    goto LABEL_231;
LABEL_1832:
  v1242 = *(_QWORD *)(v1[2] + 8);
  v1243 = v95 & 0xFFFFFFFFCFFFFFFFLL;
  v1244 = *(_QWORD *)(*(_QWORD *)(v1242 + 8) + 2448);
  v1245 = (unsigned int *)(v1244 + 520 * (v95 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1246 = *v1245;
  if ((_DWORD)v1246)
  {
    v1247 = 0;
    v1248 = 0;
    v1249 = **(_QWORD **)(v1242 + 16);
    v1250 = v1244 + 520 * v1243;
    v1251 = v1250 + 364;
    v1252 = v1250 + 340;
    while (1)
    {
      v1253 = (uint64_t *)(v1251 + 12 * v1247);
      v1254 = *(uint64_t **)(v1249 + 2512);
      if (v1254)
        break;
LABEL_1851:
      *(_WORD *)(v1252 + 2 * v1248) = *(_WORD *)(v1252 + 2 * v1247);
      if (v1247 != v1248)
      {
        v1261 = *v1253;
        v1262 = v1251 + 12 * v1248;
        *(_DWORD *)(v1262 + 8) = *((_DWORD *)v1253 + 2);
        *(_QWORD *)v1262 = v1261;
      }
      ++v1248;
LABEL_1835:
      if (++v1247 == v1246)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1855;
      }
    }
    v1255 = *(_DWORD *)v1253;
    v1256 = *((_DWORD *)v1253 + 1);
    v1257 = *((_DWORD *)v1253 + 2);
    while (1)
    {
      v1258 = *((_DWORD *)v1254 + 7);
      if (v1255 == v1258)
      {
        v1259 = *((_DWORD *)v1254 + 8);
        if (v1256 == v1259)
        {
          v1260 = *((_DWORD *)v1254 + 9);
          if (v1257 < v1260)
            goto LABEL_1839;
          if (v1260 >= v1257)
            goto LABEL_1835;
        }
        else
        {
          if (v1256 < v1259)
            goto LABEL_1839;
          if (v1259 >= v1256)
            goto LABEL_1835;
        }
      }
      else
      {
        if (v1255 < v1258)
          goto LABEL_1839;
        if (v1258 >= v1255)
          goto LABEL_1835;
      }
      ++v1254;
LABEL_1839:
      v1254 = (uint64_t *)*v1254;
      if (!v1254)
        goto LABEL_1851;
    }
  }
  v1248 = 0;
LABEL_1855:
  *v1245 = v1248;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v97 = v3[189];
  if (v97 >> 30)
    v1263 = 1;
  else
    v1263 = (_DWORD)v97 == v5;
  if (v1263)
    goto LABEL_236;
LABEL_1859:
  v1264 = *(_QWORD *)(v1[2] + 8);
  v1265 = v97 & 0xFFFFFFFFCFFFFFFFLL;
  v1266 = *(_QWORD *)(*(_QWORD *)(v1264 + 8) + 2448);
  v1267 = (unsigned int *)(v1266 + 520 * (v97 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1268 = *v1267;
  if ((_DWORD)v1268)
  {
    v1269 = 0;
    v1270 = 0;
    v1271 = **(_QWORD **)(v1264 + 16);
    v1272 = v1266 + 520 * v1265;
    v1273 = v1272 + 364;
    v1274 = v1272 + 340;
    while (1)
    {
      v1275 = (uint64_t *)(v1273 + 12 * v1269);
      v1276 = *(uint64_t **)(v1271 + 2512);
      if (v1276)
        break;
LABEL_1878:
      *(_WORD *)(v1274 + 2 * v1270) = *(_WORD *)(v1274 + 2 * v1269);
      if (v1269 != v1270)
      {
        v1283 = *v1275;
        v1284 = v1273 + 12 * v1270;
        *(_DWORD *)(v1284 + 8) = *((_DWORD *)v1275 + 2);
        *(_QWORD *)v1284 = v1283;
      }
      ++v1270;
LABEL_1862:
      if (++v1269 == v1268)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1882;
      }
    }
    v1277 = *(_DWORD *)v1275;
    v1278 = *((_DWORD *)v1275 + 1);
    v1279 = *((_DWORD *)v1275 + 2);
    while (1)
    {
      v1280 = *((_DWORD *)v1276 + 7);
      if (v1277 == v1280)
      {
        v1281 = *((_DWORD *)v1276 + 8);
        if (v1278 == v1281)
        {
          v1282 = *((_DWORD *)v1276 + 9);
          if (v1279 < v1282)
            goto LABEL_1866;
          if (v1282 >= v1279)
            goto LABEL_1862;
        }
        else
        {
          if (v1278 < v1281)
            goto LABEL_1866;
          if (v1281 >= v1278)
            goto LABEL_1862;
        }
      }
      else
      {
        if (v1277 < v1280)
          goto LABEL_1866;
        if (v1280 >= v1277)
          goto LABEL_1862;
      }
      ++v1276;
LABEL_1866:
      v1276 = (uint64_t *)*v1276;
      if (!v1276)
        goto LABEL_1878;
    }
  }
  v1270 = 0;
LABEL_1882:
  *v1267 = v1270;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v99 = v3[190];
  if (v99 >> 30)
    v1285 = 1;
  else
    v1285 = (_DWORD)v99 == v5;
  if (v1285)
    goto LABEL_241;
LABEL_1886:
  v1286 = *(_QWORD *)(v1[2] + 8);
  v1287 = v99 & 0xFFFFFFFFCFFFFFFFLL;
  v1288 = *(_QWORD *)(*(_QWORD *)(v1286 + 8) + 2448);
  v1289 = (unsigned int *)(v1288 + 520 * (v99 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1290 = *v1289;
  if ((_DWORD)v1290)
  {
    v1291 = 0;
    v1292 = 0;
    v1293 = **(_QWORD **)(v1286 + 16);
    v1294 = v1288 + 520 * v1287;
    v1295 = v1294 + 364;
    v1296 = v1294 + 340;
    while (1)
    {
      v1297 = (uint64_t *)(v1295 + 12 * v1291);
      v1298 = *(uint64_t **)(v1293 + 2512);
      if (v1298)
        break;
LABEL_1905:
      *(_WORD *)(v1296 + 2 * v1292) = *(_WORD *)(v1296 + 2 * v1291);
      if (v1291 != v1292)
      {
        v1305 = *v1297;
        v1306 = v1295 + 12 * v1292;
        *(_DWORD *)(v1306 + 8) = *((_DWORD *)v1297 + 2);
        *(_QWORD *)v1306 = v1305;
      }
      ++v1292;
LABEL_1889:
      if (++v1291 == v1290)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1909;
      }
    }
    v1299 = *(_DWORD *)v1297;
    v1300 = *((_DWORD *)v1297 + 1);
    v1301 = *((_DWORD *)v1297 + 2);
    while (1)
    {
      v1302 = *((_DWORD *)v1298 + 7);
      if (v1299 == v1302)
      {
        v1303 = *((_DWORD *)v1298 + 8);
        if (v1300 == v1303)
        {
          v1304 = *((_DWORD *)v1298 + 9);
          if (v1301 < v1304)
            goto LABEL_1893;
          if (v1304 >= v1301)
            goto LABEL_1889;
        }
        else
        {
          if (v1300 < v1303)
            goto LABEL_1893;
          if (v1303 >= v1300)
            goto LABEL_1889;
        }
      }
      else
      {
        if (v1299 < v1302)
          goto LABEL_1893;
        if (v1302 >= v1299)
          goto LABEL_1889;
      }
      ++v1298;
LABEL_1893:
      v1298 = (uint64_t *)*v1298;
      if (!v1298)
        goto LABEL_1905;
    }
  }
  v1292 = 0;
LABEL_1909:
  *v1289 = v1292;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v101 = v3[191];
  if (v101 >> 30)
    v1307 = 1;
  else
    v1307 = (_DWORD)v101 == v5;
  if (v1307)
    goto LABEL_246;
LABEL_1913:
  v1308 = *(_QWORD *)(v1[2] + 8);
  v1309 = v101 & 0xFFFFFFFFCFFFFFFFLL;
  v1310 = *(_QWORD *)(*(_QWORD *)(v1308 + 8) + 2448);
  v1311 = (unsigned int *)(v1310 + 520 * (v101 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1312 = *v1311;
  if ((_DWORD)v1312)
  {
    v1313 = 0;
    v1314 = 0;
    v1315 = **(_QWORD **)(v1308 + 16);
    v1316 = v1310 + 520 * v1309;
    v1317 = v1316 + 364;
    v1318 = v1316 + 340;
    while (1)
    {
      v1319 = (uint64_t *)(v1317 + 12 * v1313);
      v1320 = *(uint64_t **)(v1315 + 2512);
      if (v1320)
        break;
LABEL_1932:
      *(_WORD *)(v1318 + 2 * v1314) = *(_WORD *)(v1318 + 2 * v1313);
      if (v1313 != v1314)
      {
        v1327 = *v1319;
        v1328 = v1317 + 12 * v1314;
        *(_DWORD *)(v1328 + 8) = *((_DWORD *)v1319 + 2);
        *(_QWORD *)v1328 = v1327;
      }
      ++v1314;
LABEL_1916:
      if (++v1313 == v1312)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1936;
      }
    }
    v1321 = *(_DWORD *)v1319;
    v1322 = *((_DWORD *)v1319 + 1);
    v1323 = *((_DWORD *)v1319 + 2);
    while (1)
    {
      v1324 = *((_DWORD *)v1320 + 7);
      if (v1321 == v1324)
      {
        v1325 = *((_DWORD *)v1320 + 8);
        if (v1322 == v1325)
        {
          v1326 = *((_DWORD *)v1320 + 9);
          if (v1323 < v1326)
            goto LABEL_1920;
          if (v1326 >= v1323)
            goto LABEL_1916;
        }
        else
        {
          if (v1322 < v1325)
            goto LABEL_1920;
          if (v1325 >= v1322)
            goto LABEL_1916;
        }
      }
      else
      {
        if (v1321 < v1324)
          goto LABEL_1920;
        if (v1324 >= v1321)
          goto LABEL_1916;
      }
      ++v1320;
LABEL_1920:
      v1320 = (uint64_t *)*v1320;
      if (!v1320)
        goto LABEL_1932;
    }
  }
  v1314 = 0;
LABEL_1936:
  *v1311 = v1314;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v103 = v3[192];
  if (v103 >> 30)
    v1329 = 1;
  else
    v1329 = (_DWORD)v103 == v5;
  if (v1329)
    goto LABEL_251;
LABEL_1940:
  v1330 = *(_QWORD *)(v1[2] + 8);
  v1331 = v103 & 0xFFFFFFFFCFFFFFFFLL;
  v1332 = *(_QWORD *)(*(_QWORD *)(v1330 + 8) + 2448);
  v1333 = (unsigned int *)(v1332 + 520 * (v103 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1334 = *v1333;
  if ((_DWORD)v1334)
  {
    v1335 = 0;
    v1336 = 0;
    v1337 = **(_QWORD **)(v1330 + 16);
    v1338 = v1332 + 520 * v1331;
    v1339 = v1338 + 364;
    v1340 = v1338 + 340;
    while (1)
    {
      v1341 = (uint64_t *)(v1339 + 12 * v1335);
      v1342 = *(uint64_t **)(v1337 + 2512);
      if (v1342)
        break;
LABEL_1959:
      *(_WORD *)(v1340 + 2 * v1336) = *(_WORD *)(v1340 + 2 * v1335);
      if (v1335 != v1336)
      {
        v1349 = *v1341;
        v1350 = v1339 + 12 * v1336;
        *(_DWORD *)(v1350 + 8) = *((_DWORD *)v1341 + 2);
        *(_QWORD *)v1350 = v1349;
      }
      ++v1336;
LABEL_1943:
      if (++v1335 == v1334)
      {
        v1 = *result;
        v2 = **result;
        goto LABEL_1963;
      }
    }
    v1343 = *(_DWORD *)v1341;
    v1344 = *((_DWORD *)v1341 + 1);
    v1345 = *((_DWORD *)v1341 + 2);
    while (1)
    {
      v1346 = *((_DWORD *)v1342 + 7);
      if (v1343 == v1346)
      {
        v1347 = *((_DWORD *)v1342 + 8);
        if (v1344 == v1347)
        {
          v1348 = *((_DWORD *)v1342 + 9);
          if (v1345 < v1348)
            goto LABEL_1947;
          if (v1348 >= v1345)
            goto LABEL_1943;
        }
        else
        {
          if (v1344 < v1347)
            goto LABEL_1947;
          if (v1347 >= v1344)
            goto LABEL_1943;
        }
      }
      else
      {
        if (v1343 < v1346)
          goto LABEL_1947;
        if (v1346 >= v1343)
          goto LABEL_1943;
      }
      ++v1342;
LABEL_1947:
      v1342 = (uint64_t *)*v1342;
      if (!v1342)
        goto LABEL_1959;
    }
  }
  v1336 = 0;
LABEL_1963:
  *v1333 = v1336;
  v3 = (unsigned int *)v1[1];
  v5 = *(_DWORD *)(v2 + 272);
  v105 = v3[193];
  if (v105 >> 30)
    v1351 = 1;
  else
    v1351 = (_DWORD)v105 == v5;
  if (v1351)
    goto LABEL_256;
LABEL_1967:
  v1352 = *(_QWORD *)(v1[2] + 8);
  v1353 = v105 & 0xFFFFFFFFCFFFFFFFLL;
  v1354 = *(_QWORD *)(*(_QWORD *)(v1352 + 8) + 2448);
  v1355 = (unsigned int *)(v1354 + 520 * (v105 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1356 = *v1355;
  if ((_DWORD)v1356)
  {
    v1357 = 0;
    v1358 = 0;
    v1359 = **(_QWORD **)(v1352 + 16);
    v1360 = v1354 + 520 * v1353;
    v1361 = v1360 + 364;
    v1362 = v1360 + 340;
    while (1)
    {
      v1363 = (uint64_t *)(v1361 + 12 * v1357);
      v1364 = *(uint64_t **)(v1359 + 2512);
      if (v1364)
        break;
LABEL_1986:
      *(_WORD *)(v1362 + 2 * v1358) = *(_WORD *)(v1362 + 2 * v1357);
      if (v1357 != v1358)
      {
        v1371 = *v1363;
        v1372 = v1361 + 12 * v1358;
        *(_DWORD *)(v1372 + 8) = *((_DWORD *)v1363 + 2);
        *(_QWORD *)v1372 = v1371;
      }
      ++v1358;
LABEL_1970:
      if (++v1357 == v1356)
        goto LABEL_1989;
    }
    v1365 = *(_DWORD *)v1363;
    v1366 = *((_DWORD *)v1363 + 1);
    v1367 = *((_DWORD *)v1363 + 2);
    while (1)
    {
      v1368 = *((_DWORD *)v1364 + 7);
      if (v1365 == v1368)
      {
        v1369 = *((_DWORD *)v1364 + 8);
        if (v1366 == v1369)
        {
          v1370 = *((_DWORD *)v1364 + 9);
          if (v1367 < v1370)
            goto LABEL_1974;
          if (v1370 >= v1367)
            goto LABEL_1970;
        }
        else
        {
          if (v1366 < v1369)
            goto LABEL_1974;
          if (v1369 >= v1366)
            goto LABEL_1970;
        }
      }
      else
      {
        if (v1365 < v1368)
          goto LABEL_1974;
        if (v1368 >= v1365)
          goto LABEL_1970;
      }
      ++v1364;
LABEL_1974:
      v1364 = (uint64_t *)*v1364;
      if (!v1364)
        goto LABEL_1986;
    }
  }
  v1358 = 0;
LABEL_1989:
  *v1355 = v1358;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v107 = v3[194];
  if (v107 >> 30)
    v1373 = 1;
  else
    v1373 = (_DWORD)v107 == v5;
  if (v1373)
    goto LABEL_261;
LABEL_1993:
  v1374 = *(_QWORD *)(v1[2] + 8);
  v1375 = v107 & 0xFFFFFFFFCFFFFFFFLL;
  v1376 = *(_QWORD *)(*(_QWORD *)(v1374 + 8) + 2448);
  v1377 = (unsigned int *)(v1376 + 520 * (v107 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1378 = *v1377;
  if ((_DWORD)v1378)
  {
    v1379 = 0;
    v1380 = 0;
    v1381 = **(_QWORD **)(v1374 + 16);
    v1382 = v1376 + 520 * v1375;
    v1383 = v1382 + 364;
    v1384 = v1382 + 340;
    while (1)
    {
      v1385 = (uint64_t *)(v1383 + 12 * v1379);
      v1386 = *(uint64_t **)(v1381 + 2512);
      if (v1386)
        break;
LABEL_2012:
      *(_WORD *)(v1384 + 2 * v1380) = *(_WORD *)(v1384 + 2 * v1379);
      if (v1379 != v1380)
      {
        v1393 = *v1385;
        v1394 = v1383 + 12 * v1380;
        *(_DWORD *)(v1394 + 8) = *((_DWORD *)v1385 + 2);
        *(_QWORD *)v1394 = v1393;
      }
      ++v1380;
LABEL_1996:
      if (++v1379 == v1378)
        goto LABEL_2015;
    }
    v1387 = *(_DWORD *)v1385;
    v1388 = *((_DWORD *)v1385 + 1);
    v1389 = *((_DWORD *)v1385 + 2);
    while (1)
    {
      v1390 = *((_DWORD *)v1386 + 7);
      if (v1387 == v1390)
      {
        v1391 = *((_DWORD *)v1386 + 8);
        if (v1388 == v1391)
        {
          v1392 = *((_DWORD *)v1386 + 9);
          if (v1389 < v1392)
            goto LABEL_2000;
          if (v1392 >= v1389)
            goto LABEL_1996;
        }
        else
        {
          if (v1388 < v1391)
            goto LABEL_2000;
          if (v1391 >= v1388)
            goto LABEL_1996;
        }
      }
      else
      {
        if (v1387 < v1390)
          goto LABEL_2000;
        if (v1390 >= v1387)
          goto LABEL_1996;
      }
      ++v1386;
LABEL_2000:
      v1386 = (uint64_t *)*v1386;
      if (!v1386)
        goto LABEL_2012;
    }
  }
  v1380 = 0;
LABEL_2015:
  *v1377 = v1380;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v109 = v3[195];
  if (v109 >> 30)
    v1395 = 1;
  else
    v1395 = (_DWORD)v109 == v5;
  if (v1395)
    goto LABEL_266;
LABEL_2019:
  v1396 = *(_QWORD *)(v1[2] + 8);
  v1397 = v109 & 0xFFFFFFFFCFFFFFFFLL;
  v1398 = *(_QWORD *)(*(_QWORD *)(v1396 + 8) + 2448);
  v1399 = (unsigned int *)(v1398 + 520 * (v109 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1400 = *v1399;
  if ((_DWORD)v1400)
  {
    v1401 = 0;
    v1402 = 0;
    v1403 = **(_QWORD **)(v1396 + 16);
    v1404 = v1398 + 520 * v1397;
    v1405 = v1404 + 364;
    v1406 = v1404 + 340;
    while (1)
    {
      v1407 = (uint64_t *)(v1405 + 12 * v1401);
      v1408 = *(uint64_t **)(v1403 + 2512);
      if (v1408)
        break;
LABEL_2038:
      *(_WORD *)(v1406 + 2 * v1402) = *(_WORD *)(v1406 + 2 * v1401);
      if (v1401 != v1402)
      {
        v1415 = *v1407;
        v1416 = v1405 + 12 * v1402;
        *(_DWORD *)(v1416 + 8) = *((_DWORD *)v1407 + 2);
        *(_QWORD *)v1416 = v1415;
      }
      ++v1402;
LABEL_2022:
      if (++v1401 == v1400)
        goto LABEL_2041;
    }
    v1409 = *(_DWORD *)v1407;
    v1410 = *((_DWORD *)v1407 + 1);
    v1411 = *((_DWORD *)v1407 + 2);
    while (1)
    {
      v1412 = *((_DWORD *)v1408 + 7);
      if (v1409 == v1412)
      {
        v1413 = *((_DWORD *)v1408 + 8);
        if (v1410 == v1413)
        {
          v1414 = *((_DWORD *)v1408 + 9);
          if (v1411 < v1414)
            goto LABEL_2026;
          if (v1414 >= v1411)
            goto LABEL_2022;
        }
        else
        {
          if (v1410 < v1413)
            goto LABEL_2026;
          if (v1413 >= v1410)
            goto LABEL_2022;
        }
      }
      else
      {
        if (v1409 < v1412)
          goto LABEL_2026;
        if (v1412 >= v1409)
          goto LABEL_2022;
      }
      ++v1408;
LABEL_2026:
      v1408 = (uint64_t *)*v1408;
      if (!v1408)
        goto LABEL_2038;
    }
  }
  v1402 = 0;
LABEL_2041:
  *v1399 = v1402;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v111 = v3[196];
  if (v111 >> 30)
    v1417 = 1;
  else
    v1417 = (_DWORD)v111 == v5;
  if (v1417)
    goto LABEL_271;
LABEL_2045:
  v1418 = *(_QWORD *)(v1[2] + 8);
  v1419 = v111 & 0xFFFFFFFFCFFFFFFFLL;
  v1420 = *(_QWORD *)(*(_QWORD *)(v1418 + 8) + 2448);
  v1421 = (unsigned int *)(v1420 + 520 * (v111 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1422 = *v1421;
  if ((_DWORD)v1422)
  {
    v1423 = 0;
    v1424 = 0;
    v1425 = **(_QWORD **)(v1418 + 16);
    v1426 = v1420 + 520 * v1419;
    v1427 = v1426 + 364;
    v1428 = v1426 + 340;
    while (1)
    {
      v1429 = (uint64_t *)(v1427 + 12 * v1423);
      v1430 = *(uint64_t **)(v1425 + 2512);
      if (v1430)
        break;
LABEL_2064:
      *(_WORD *)(v1428 + 2 * v1424) = *(_WORD *)(v1428 + 2 * v1423);
      if (v1423 != v1424)
      {
        v1437 = *v1429;
        v1438 = v1427 + 12 * v1424;
        *(_DWORD *)(v1438 + 8) = *((_DWORD *)v1429 + 2);
        *(_QWORD *)v1438 = v1437;
      }
      ++v1424;
LABEL_2048:
      if (++v1423 == v1422)
        goto LABEL_2067;
    }
    v1431 = *(_DWORD *)v1429;
    v1432 = *((_DWORD *)v1429 + 1);
    v1433 = *((_DWORD *)v1429 + 2);
    while (1)
    {
      v1434 = *((_DWORD *)v1430 + 7);
      if (v1431 == v1434)
      {
        v1435 = *((_DWORD *)v1430 + 8);
        if (v1432 == v1435)
        {
          v1436 = *((_DWORD *)v1430 + 9);
          if (v1433 < v1436)
            goto LABEL_2052;
          if (v1436 >= v1433)
            goto LABEL_2048;
        }
        else
        {
          if (v1432 < v1435)
            goto LABEL_2052;
          if (v1435 >= v1432)
            goto LABEL_2048;
        }
      }
      else
      {
        if (v1431 < v1434)
          goto LABEL_2052;
        if (v1434 >= v1431)
          goto LABEL_2048;
      }
      ++v1430;
LABEL_2052:
      v1430 = (uint64_t *)*v1430;
      if (!v1430)
        goto LABEL_2064;
    }
  }
  v1424 = 0;
LABEL_2067:
  *v1421 = v1424;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v113 = v3[197];
  if (v113 >> 30)
    v1439 = 1;
  else
    v1439 = (_DWORD)v113 == v5;
  if (v1439)
    goto LABEL_276;
LABEL_2071:
  v1440 = *(_QWORD *)(v1[2] + 8);
  v1441 = v113 & 0xFFFFFFFFCFFFFFFFLL;
  v1442 = *(_QWORD *)(*(_QWORD *)(v1440 + 8) + 2448);
  v1443 = (unsigned int *)(v1442 + 520 * (v113 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1444 = *v1443;
  if ((_DWORD)v1444)
  {
    v1445 = 0;
    v1446 = 0;
    v1447 = **(_QWORD **)(v1440 + 16);
    v1448 = v1442 + 520 * v1441;
    v1449 = v1448 + 364;
    v1450 = v1448 + 340;
    while (1)
    {
      v1451 = (uint64_t *)(v1449 + 12 * v1445);
      v1452 = *(uint64_t **)(v1447 + 2512);
      if (v1452)
        break;
LABEL_2090:
      *(_WORD *)(v1450 + 2 * v1446) = *(_WORD *)(v1450 + 2 * v1445);
      if (v1445 != v1446)
      {
        v1459 = *v1451;
        v1460 = v1449 + 12 * v1446;
        *(_DWORD *)(v1460 + 8) = *((_DWORD *)v1451 + 2);
        *(_QWORD *)v1460 = v1459;
      }
      ++v1446;
LABEL_2074:
      if (++v1445 == v1444)
        goto LABEL_2093;
    }
    v1453 = *(_DWORD *)v1451;
    v1454 = *((_DWORD *)v1451 + 1);
    v1455 = *((_DWORD *)v1451 + 2);
    while (1)
    {
      v1456 = *((_DWORD *)v1452 + 7);
      if (v1453 == v1456)
      {
        v1457 = *((_DWORD *)v1452 + 8);
        if (v1454 == v1457)
        {
          v1458 = *((_DWORD *)v1452 + 9);
          if (v1455 < v1458)
            goto LABEL_2078;
          if (v1458 >= v1455)
            goto LABEL_2074;
        }
        else
        {
          if (v1454 < v1457)
            goto LABEL_2078;
          if (v1457 >= v1454)
            goto LABEL_2074;
        }
      }
      else
      {
        if (v1453 < v1456)
          goto LABEL_2078;
        if (v1456 >= v1453)
          goto LABEL_2074;
      }
      ++v1452;
LABEL_2078:
      v1452 = (uint64_t *)*v1452;
      if (!v1452)
        goto LABEL_2090;
    }
  }
  v1446 = 0;
LABEL_2093:
  *v1443 = v1446;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v115 = v3[198];
  if (v115 >> 30)
    v1461 = 1;
  else
    v1461 = (_DWORD)v115 == v5;
  if (v1461)
    goto LABEL_281;
LABEL_2097:
  v1462 = *(_QWORD *)(v1[2] + 8);
  v1463 = v115 & 0xFFFFFFFFCFFFFFFFLL;
  v1464 = *(_QWORD *)(*(_QWORD *)(v1462 + 8) + 2448);
  v1465 = (unsigned int *)(v1464 + 520 * (v115 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1466 = *v1465;
  if ((_DWORD)v1466)
  {
    v1467 = 0;
    v1468 = 0;
    v1469 = **(_QWORD **)(v1462 + 16);
    v1470 = v1464 + 520 * v1463;
    v1471 = v1470 + 364;
    v1472 = v1470 + 340;
    while (1)
    {
      v1473 = (uint64_t *)(v1471 + 12 * v1467);
      v1474 = *(uint64_t **)(v1469 + 2512);
      if (v1474)
        break;
LABEL_2116:
      *(_WORD *)(v1472 + 2 * v1468) = *(_WORD *)(v1472 + 2 * v1467);
      if (v1467 != v1468)
      {
        v1481 = *v1473;
        v1482 = v1471 + 12 * v1468;
        *(_DWORD *)(v1482 + 8) = *((_DWORD *)v1473 + 2);
        *(_QWORD *)v1482 = v1481;
      }
      ++v1468;
LABEL_2100:
      if (++v1467 == v1466)
        goto LABEL_2119;
    }
    v1475 = *(_DWORD *)v1473;
    v1476 = *((_DWORD *)v1473 + 1);
    v1477 = *((_DWORD *)v1473 + 2);
    while (1)
    {
      v1478 = *((_DWORD *)v1474 + 7);
      if (v1475 == v1478)
      {
        v1479 = *((_DWORD *)v1474 + 8);
        if (v1476 == v1479)
        {
          v1480 = *((_DWORD *)v1474 + 9);
          if (v1477 < v1480)
            goto LABEL_2104;
          if (v1480 >= v1477)
            goto LABEL_2100;
        }
        else
        {
          if (v1476 < v1479)
            goto LABEL_2104;
          if (v1479 >= v1476)
            goto LABEL_2100;
        }
      }
      else
      {
        if (v1475 < v1478)
          goto LABEL_2104;
        if (v1478 >= v1475)
          goto LABEL_2100;
      }
      ++v1474;
LABEL_2104:
      v1474 = (uint64_t *)*v1474;
      if (!v1474)
        goto LABEL_2116;
    }
  }
  v1468 = 0;
LABEL_2119:
  *v1465 = v1468;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v117 = v3[199];
  if (v117 >> 30)
    v1483 = 1;
  else
    v1483 = (_DWORD)v117 == v5;
  if (v1483)
    goto LABEL_286;
LABEL_2123:
  v1484 = *(_QWORD *)(v1[2] + 8);
  v1485 = v117 & 0xFFFFFFFFCFFFFFFFLL;
  v1486 = *(_QWORD *)(*(_QWORD *)(v1484 + 8) + 2448);
  v1487 = (unsigned int *)(v1486 + 520 * (v117 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1488 = *v1487;
  if ((_DWORD)v1488)
  {
    v1489 = 0;
    v1490 = 0;
    v1491 = **(_QWORD **)(v1484 + 16);
    v1492 = v1486 + 520 * v1485;
    v1493 = v1492 + 364;
    v1494 = v1492 + 340;
    while (1)
    {
      v1495 = (uint64_t *)(v1493 + 12 * v1489);
      v1496 = *(uint64_t **)(v1491 + 2512);
      if (v1496)
        break;
LABEL_2142:
      *(_WORD *)(v1494 + 2 * v1490) = *(_WORD *)(v1494 + 2 * v1489);
      if (v1489 != v1490)
      {
        v1503 = *v1495;
        v1504 = v1493 + 12 * v1490;
        *(_DWORD *)(v1504 + 8) = *((_DWORD *)v1495 + 2);
        *(_QWORD *)v1504 = v1503;
      }
      ++v1490;
LABEL_2126:
      if (++v1489 == v1488)
        goto LABEL_2145;
    }
    v1497 = *(_DWORD *)v1495;
    v1498 = *((_DWORD *)v1495 + 1);
    v1499 = *((_DWORD *)v1495 + 2);
    while (1)
    {
      v1500 = *((_DWORD *)v1496 + 7);
      if (v1497 == v1500)
      {
        v1501 = *((_DWORD *)v1496 + 8);
        if (v1498 == v1501)
        {
          v1502 = *((_DWORD *)v1496 + 9);
          if (v1499 < v1502)
            goto LABEL_2130;
          if (v1502 >= v1499)
            goto LABEL_2126;
        }
        else
        {
          if (v1498 < v1501)
            goto LABEL_2130;
          if (v1501 >= v1498)
            goto LABEL_2126;
        }
      }
      else
      {
        if (v1497 < v1500)
          goto LABEL_2130;
        if (v1500 >= v1497)
          goto LABEL_2126;
      }
      ++v1496;
LABEL_2130:
      v1496 = (uint64_t *)*v1496;
      if (!v1496)
        goto LABEL_2142;
    }
  }
  v1490 = 0;
LABEL_2145:
  *v1487 = v1490;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v119 = v3[200];
  if (v119 >> 30)
    v1505 = 1;
  else
    v1505 = (_DWORD)v119 == v5;
  if (v1505)
    goto LABEL_291;
LABEL_2149:
  v1506 = *(_QWORD *)(v1[2] + 8);
  v1507 = v119 & 0xFFFFFFFFCFFFFFFFLL;
  v1508 = *(_QWORD *)(*(_QWORD *)(v1506 + 8) + 2448);
  v1509 = (unsigned int *)(v1508 + 520 * (v119 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1510 = *v1509;
  if ((_DWORD)v1510)
  {
    v1511 = 0;
    v1512 = 0;
    v1513 = **(_QWORD **)(v1506 + 16);
    v1514 = v1508 + 520 * v1507;
    v1515 = v1514 + 364;
    v1516 = v1514 + 340;
    while (1)
    {
      v1517 = (uint64_t *)(v1515 + 12 * v1511);
      v1518 = *(uint64_t **)(v1513 + 2512);
      if (v1518)
        break;
LABEL_2168:
      *(_WORD *)(v1516 + 2 * v1512) = *(_WORD *)(v1516 + 2 * v1511);
      if (v1511 != v1512)
      {
        v1525 = *v1517;
        v1526 = v1515 + 12 * v1512;
        *(_DWORD *)(v1526 + 8) = *((_DWORD *)v1517 + 2);
        *(_QWORD *)v1526 = v1525;
      }
      ++v1512;
LABEL_2152:
      if (++v1511 == v1510)
        goto LABEL_2171;
    }
    v1519 = *(_DWORD *)v1517;
    v1520 = *((_DWORD *)v1517 + 1);
    v1521 = *((_DWORD *)v1517 + 2);
    while (1)
    {
      v1522 = *((_DWORD *)v1518 + 7);
      if (v1519 == v1522)
      {
        v1523 = *((_DWORD *)v1518 + 8);
        if (v1520 == v1523)
        {
          v1524 = *((_DWORD *)v1518 + 9);
          if (v1521 < v1524)
            goto LABEL_2156;
          if (v1524 >= v1521)
            goto LABEL_2152;
        }
        else
        {
          if (v1520 < v1523)
            goto LABEL_2156;
          if (v1523 >= v1520)
            goto LABEL_2152;
        }
      }
      else
      {
        if (v1519 < v1522)
          goto LABEL_2156;
        if (v1522 >= v1519)
          goto LABEL_2152;
      }
      ++v1518;
LABEL_2156:
      v1518 = (uint64_t *)*v1518;
      if (!v1518)
        goto LABEL_2168;
    }
  }
  v1512 = 0;
LABEL_2171:
  *v1509 = v1512;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v121 = v3[201];
  if (v121 >> 30)
    v1527 = 1;
  else
    v1527 = (_DWORD)v121 == v5;
  if (v1527)
    goto LABEL_296;
LABEL_2175:
  v1528 = *(_QWORD *)(v1[2] + 8);
  v1529 = v121 & 0xFFFFFFFFCFFFFFFFLL;
  v1530 = *(_QWORD *)(*(_QWORD *)(v1528 + 8) + 2448);
  v1531 = (unsigned int *)(v1530 + 520 * (v121 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1532 = *v1531;
  if ((_DWORD)v1532)
  {
    v1533 = 0;
    v1534 = 0;
    v1535 = **(_QWORD **)(v1528 + 16);
    v1536 = v1530 + 520 * v1529;
    v1537 = v1536 + 364;
    v1538 = v1536 + 340;
    while (1)
    {
      v1539 = (uint64_t *)(v1537 + 12 * v1533);
      v1540 = *(uint64_t **)(v1535 + 2512);
      if (v1540)
        break;
LABEL_2194:
      *(_WORD *)(v1538 + 2 * v1534) = *(_WORD *)(v1538 + 2 * v1533);
      if (v1533 != v1534)
      {
        v1547 = *v1539;
        v1548 = v1537 + 12 * v1534;
        *(_DWORD *)(v1548 + 8) = *((_DWORD *)v1539 + 2);
        *(_QWORD *)v1548 = v1547;
      }
      ++v1534;
LABEL_2178:
      if (++v1533 == v1532)
        goto LABEL_2197;
    }
    v1541 = *(_DWORD *)v1539;
    v1542 = *((_DWORD *)v1539 + 1);
    v1543 = *((_DWORD *)v1539 + 2);
    while (1)
    {
      v1544 = *((_DWORD *)v1540 + 7);
      if (v1541 == v1544)
      {
        v1545 = *((_DWORD *)v1540 + 8);
        if (v1542 == v1545)
        {
          v1546 = *((_DWORD *)v1540 + 9);
          if (v1543 < v1546)
            goto LABEL_2182;
          if (v1546 >= v1543)
            goto LABEL_2178;
        }
        else
        {
          if (v1542 < v1545)
            goto LABEL_2182;
          if (v1545 >= v1542)
            goto LABEL_2178;
        }
      }
      else
      {
        if (v1541 < v1544)
          goto LABEL_2182;
        if (v1544 >= v1541)
          goto LABEL_2178;
      }
      ++v1540;
LABEL_2182:
      v1540 = (uint64_t *)*v1540;
      if (!v1540)
        goto LABEL_2194;
    }
  }
  v1534 = 0;
LABEL_2197:
  *v1531 = v1534;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v123 = v3[202];
  if (v123 >> 30)
    v1549 = 1;
  else
    v1549 = (_DWORD)v123 == v5;
  if (v1549)
    goto LABEL_301;
LABEL_2201:
  v1550 = *(_QWORD *)(v1[2] + 8);
  v1551 = v123 & 0xFFFFFFFFCFFFFFFFLL;
  v1552 = *(_QWORD *)(*(_QWORD *)(v1550 + 8) + 2448);
  v1553 = (unsigned int *)(v1552 + 520 * (v123 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1554 = *v1553;
  if ((_DWORD)v1554)
  {
    v1555 = 0;
    v1556 = 0;
    v1557 = **(_QWORD **)(v1550 + 16);
    v1558 = v1552 + 520 * v1551;
    v1559 = v1558 + 364;
    v1560 = v1558 + 340;
    while (1)
    {
      v1561 = (uint64_t *)(v1559 + 12 * v1555);
      v1562 = *(uint64_t **)(v1557 + 2512);
      if (v1562)
        break;
LABEL_2220:
      *(_WORD *)(v1560 + 2 * v1556) = *(_WORD *)(v1560 + 2 * v1555);
      if (v1555 != v1556)
      {
        v1569 = *v1561;
        v1570 = v1559 + 12 * v1556;
        *(_DWORD *)(v1570 + 8) = *((_DWORD *)v1561 + 2);
        *(_QWORD *)v1570 = v1569;
      }
      ++v1556;
LABEL_2204:
      if (++v1555 == v1554)
        goto LABEL_2223;
    }
    v1563 = *(_DWORD *)v1561;
    v1564 = *((_DWORD *)v1561 + 1);
    v1565 = *((_DWORD *)v1561 + 2);
    while (1)
    {
      v1566 = *((_DWORD *)v1562 + 7);
      if (v1563 == v1566)
      {
        v1567 = *((_DWORD *)v1562 + 8);
        if (v1564 == v1567)
        {
          v1568 = *((_DWORD *)v1562 + 9);
          if (v1565 < v1568)
            goto LABEL_2208;
          if (v1568 >= v1565)
            goto LABEL_2204;
        }
        else
        {
          if (v1564 < v1567)
            goto LABEL_2208;
          if (v1567 >= v1564)
            goto LABEL_2204;
        }
      }
      else
      {
        if (v1563 < v1566)
          goto LABEL_2208;
        if (v1566 >= v1563)
          goto LABEL_2204;
      }
      ++v1562;
LABEL_2208:
      v1562 = (uint64_t *)*v1562;
      if (!v1562)
        goto LABEL_2220;
    }
  }
  v1556 = 0;
LABEL_2223:
  *v1553 = v1556;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v125 = v3[203];
  if (v125 >> 30)
    v1571 = 1;
  else
    v1571 = (_DWORD)v125 == v5;
  if (v1571)
    goto LABEL_306;
LABEL_2227:
  v1572 = *(_QWORD *)(v1[2] + 8);
  v1573 = v125 & 0xFFFFFFFFCFFFFFFFLL;
  v1574 = *(_QWORD *)(*(_QWORD *)(v1572 + 8) + 2448);
  v1575 = (unsigned int *)(v1574 + 520 * (v125 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1576 = *v1575;
  if ((_DWORD)v1576)
  {
    v1577 = 0;
    v1578 = 0;
    v1579 = **(_QWORD **)(v1572 + 16);
    v1580 = v1574 + 520 * v1573;
    v1581 = v1580 + 364;
    v1582 = v1580 + 340;
    while (1)
    {
      v1583 = (uint64_t *)(v1581 + 12 * v1577);
      v1584 = *(uint64_t **)(v1579 + 2512);
      if (v1584)
        break;
LABEL_2246:
      *(_WORD *)(v1582 + 2 * v1578) = *(_WORD *)(v1582 + 2 * v1577);
      if (v1577 != v1578)
      {
        v1591 = *v1583;
        v1592 = v1581 + 12 * v1578;
        *(_DWORD *)(v1592 + 8) = *((_DWORD *)v1583 + 2);
        *(_QWORD *)v1592 = v1591;
      }
      ++v1578;
LABEL_2230:
      if (++v1577 == v1576)
        goto LABEL_2249;
    }
    v1585 = *(_DWORD *)v1583;
    v1586 = *((_DWORD *)v1583 + 1);
    v1587 = *((_DWORD *)v1583 + 2);
    while (1)
    {
      v1588 = *((_DWORD *)v1584 + 7);
      if (v1585 == v1588)
      {
        v1589 = *((_DWORD *)v1584 + 8);
        if (v1586 == v1589)
        {
          v1590 = *((_DWORD *)v1584 + 9);
          if (v1587 < v1590)
            goto LABEL_2234;
          if (v1590 >= v1587)
            goto LABEL_2230;
        }
        else
        {
          if (v1586 < v1589)
            goto LABEL_2234;
          if (v1589 >= v1586)
            goto LABEL_2230;
        }
      }
      else
      {
        if (v1585 < v1588)
          goto LABEL_2234;
        if (v1588 >= v1585)
          goto LABEL_2230;
      }
      ++v1584;
LABEL_2234:
      v1584 = (uint64_t *)*v1584;
      if (!v1584)
        goto LABEL_2246;
    }
  }
  v1578 = 0;
LABEL_2249:
  *v1575 = v1578;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v127 = v3[204];
  if (v127 >> 30)
    v1593 = 1;
  else
    v1593 = (_DWORD)v127 == v5;
  if (v1593)
    goto LABEL_311;
LABEL_2253:
  v1594 = *(_QWORD *)(v1[2] + 8);
  v1595 = v127 & 0xFFFFFFFFCFFFFFFFLL;
  v1596 = *(_QWORD *)(*(_QWORD *)(v1594 + 8) + 2448);
  v1597 = (unsigned int *)(v1596 + 520 * (v127 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1598 = *v1597;
  if ((_DWORD)v1598)
  {
    v1599 = 0;
    v1600 = 0;
    v1601 = **(_QWORD **)(v1594 + 16);
    v1602 = v1596 + 520 * v1595;
    v1603 = v1602 + 364;
    v1604 = v1602 + 340;
    while (1)
    {
      v1605 = (uint64_t *)(v1603 + 12 * v1599);
      v1606 = *(uint64_t **)(v1601 + 2512);
      if (v1606)
        break;
LABEL_2272:
      *(_WORD *)(v1604 + 2 * v1600) = *(_WORD *)(v1604 + 2 * v1599);
      if (v1599 != v1600)
      {
        v1613 = *v1605;
        v1614 = v1603 + 12 * v1600;
        *(_DWORD *)(v1614 + 8) = *((_DWORD *)v1605 + 2);
        *(_QWORD *)v1614 = v1613;
      }
      ++v1600;
LABEL_2256:
      if (++v1599 == v1598)
        goto LABEL_2275;
    }
    v1607 = *(_DWORD *)v1605;
    v1608 = *((_DWORD *)v1605 + 1);
    v1609 = *((_DWORD *)v1605 + 2);
    while (1)
    {
      v1610 = *((_DWORD *)v1606 + 7);
      if (v1607 == v1610)
      {
        v1611 = *((_DWORD *)v1606 + 8);
        if (v1608 == v1611)
        {
          v1612 = *((_DWORD *)v1606 + 9);
          if (v1609 < v1612)
            goto LABEL_2260;
          if (v1612 >= v1609)
            goto LABEL_2256;
        }
        else
        {
          if (v1608 < v1611)
            goto LABEL_2260;
          if (v1611 >= v1608)
            goto LABEL_2256;
        }
      }
      else
      {
        if (v1607 < v1610)
          goto LABEL_2260;
        if (v1610 >= v1607)
          goto LABEL_2256;
      }
      ++v1606;
LABEL_2260:
      v1606 = (uint64_t *)*v1606;
      if (!v1606)
        goto LABEL_2272;
    }
  }
  v1600 = 0;
LABEL_2275:
  *v1597 = v1600;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v129 = v3[205];
  if (v129 >> 30)
    v1615 = 1;
  else
    v1615 = (_DWORD)v129 == v5;
  if (v1615)
    goto LABEL_316;
LABEL_2279:
  v1616 = *(_QWORD *)(v1[2] + 8);
  v1617 = v129 & 0xFFFFFFFFCFFFFFFFLL;
  v1618 = *(_QWORD *)(*(_QWORD *)(v1616 + 8) + 2448);
  v1619 = (unsigned int *)(v1618 + 520 * (v129 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1620 = *v1619;
  if ((_DWORD)v1620)
  {
    v1621 = 0;
    v1622 = 0;
    v1623 = **(_QWORD **)(v1616 + 16);
    v1624 = v1618 + 520 * v1617;
    v1625 = v1624 + 364;
    v1626 = v1624 + 340;
    while (1)
    {
      v1627 = (uint64_t *)(v1625 + 12 * v1621);
      v1628 = *(uint64_t **)(v1623 + 2512);
      if (v1628)
        break;
LABEL_2298:
      *(_WORD *)(v1626 + 2 * v1622) = *(_WORD *)(v1626 + 2 * v1621);
      if (v1621 != v1622)
      {
        v1635 = *v1627;
        v1636 = v1625 + 12 * v1622;
        *(_DWORD *)(v1636 + 8) = *((_DWORD *)v1627 + 2);
        *(_QWORD *)v1636 = v1635;
      }
      ++v1622;
LABEL_2282:
      if (++v1621 == v1620)
        goto LABEL_2301;
    }
    v1629 = *(_DWORD *)v1627;
    v1630 = *((_DWORD *)v1627 + 1);
    v1631 = *((_DWORD *)v1627 + 2);
    while (1)
    {
      v1632 = *((_DWORD *)v1628 + 7);
      if (v1629 == v1632)
      {
        v1633 = *((_DWORD *)v1628 + 8);
        if (v1630 == v1633)
        {
          v1634 = *((_DWORD *)v1628 + 9);
          if (v1631 < v1634)
            goto LABEL_2286;
          if (v1634 >= v1631)
            goto LABEL_2282;
        }
        else
        {
          if (v1630 < v1633)
            goto LABEL_2286;
          if (v1633 >= v1630)
            goto LABEL_2282;
        }
      }
      else
      {
        if (v1629 < v1632)
          goto LABEL_2286;
        if (v1632 >= v1629)
          goto LABEL_2282;
      }
      ++v1628;
LABEL_2286:
      v1628 = (uint64_t *)*v1628;
      if (!v1628)
        goto LABEL_2298;
    }
  }
  v1622 = 0;
LABEL_2301:
  *v1619 = v1622;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v131 = v3[206];
  if (v131 >> 30)
    v1637 = 1;
  else
    v1637 = (_DWORD)v131 == v5;
  if (v1637)
    goto LABEL_321;
LABEL_2305:
  v1638 = *(_QWORD *)(v1[2] + 8);
  v1639 = v131 & 0xFFFFFFFFCFFFFFFFLL;
  v1640 = *(_QWORD *)(*(_QWORD *)(v1638 + 8) + 2448);
  v1641 = (unsigned int *)(v1640 + 520 * (v131 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1642 = *v1641;
  if ((_DWORD)v1642)
  {
    v1643 = 0;
    v1644 = 0;
    v1645 = **(_QWORD **)(v1638 + 16);
    v1646 = v1640 + 520 * v1639;
    v1647 = v1646 + 364;
    v1648 = v1646 + 340;
    while (1)
    {
      v1649 = (uint64_t *)(v1647 + 12 * v1643);
      v1650 = *(uint64_t **)(v1645 + 2512);
      if (v1650)
        break;
LABEL_2324:
      *(_WORD *)(v1648 + 2 * v1644) = *(_WORD *)(v1648 + 2 * v1643);
      if (v1643 != v1644)
      {
        v1657 = *v1649;
        v1658 = v1647 + 12 * v1644;
        *(_DWORD *)(v1658 + 8) = *((_DWORD *)v1649 + 2);
        *(_QWORD *)v1658 = v1657;
      }
      ++v1644;
LABEL_2308:
      if (++v1643 == v1642)
        goto LABEL_2327;
    }
    v1651 = *(_DWORD *)v1649;
    v1652 = *((_DWORD *)v1649 + 1);
    v1653 = *((_DWORD *)v1649 + 2);
    while (1)
    {
      v1654 = *((_DWORD *)v1650 + 7);
      if (v1651 == v1654)
      {
        v1655 = *((_DWORD *)v1650 + 8);
        if (v1652 == v1655)
        {
          v1656 = *((_DWORD *)v1650 + 9);
          if (v1653 < v1656)
            goto LABEL_2312;
          if (v1656 >= v1653)
            goto LABEL_2308;
        }
        else
        {
          if (v1652 < v1655)
            goto LABEL_2312;
          if (v1655 >= v1652)
            goto LABEL_2308;
        }
      }
      else
      {
        if (v1651 < v1654)
          goto LABEL_2312;
        if (v1654 >= v1651)
          goto LABEL_2308;
      }
      ++v1650;
LABEL_2312:
      v1650 = (uint64_t *)*v1650;
      if (!v1650)
        goto LABEL_2324;
    }
  }
  v1644 = 0;
LABEL_2327:
  *v1641 = v1644;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v133 = v3[207];
  if (v133 >> 30)
    v1659 = 1;
  else
    v1659 = (_DWORD)v133 == v5;
  if (v1659)
    goto LABEL_326;
LABEL_2331:
  v1660 = *(_QWORD *)(v1[2] + 8);
  v1661 = v133 & 0xFFFFFFFFCFFFFFFFLL;
  v1662 = *(_QWORD *)(*(_QWORD *)(v1660 + 8) + 2448);
  v1663 = (unsigned int *)(v1662 + 520 * (v133 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1664 = *v1663;
  if ((_DWORD)v1664)
  {
    v1665 = 0;
    v1666 = 0;
    v1667 = **(_QWORD **)(v1660 + 16);
    v1668 = v1662 + 520 * v1661;
    v1669 = v1668 + 364;
    v1670 = v1668 + 340;
    while (1)
    {
      v1671 = (uint64_t *)(v1669 + 12 * v1665);
      v1672 = *(uint64_t **)(v1667 + 2512);
      if (v1672)
        break;
LABEL_2350:
      *(_WORD *)(v1670 + 2 * v1666) = *(_WORD *)(v1670 + 2 * v1665);
      if (v1665 != v1666)
      {
        v1679 = *v1671;
        v1680 = v1669 + 12 * v1666;
        *(_DWORD *)(v1680 + 8) = *((_DWORD *)v1671 + 2);
        *(_QWORD *)v1680 = v1679;
      }
      ++v1666;
LABEL_2334:
      if (++v1665 == v1664)
        goto LABEL_2353;
    }
    v1673 = *(_DWORD *)v1671;
    v1674 = *((_DWORD *)v1671 + 1);
    v1675 = *((_DWORD *)v1671 + 2);
    while (1)
    {
      v1676 = *((_DWORD *)v1672 + 7);
      if (v1673 == v1676)
      {
        v1677 = *((_DWORD *)v1672 + 8);
        if (v1674 == v1677)
        {
          v1678 = *((_DWORD *)v1672 + 9);
          if (v1675 < v1678)
            goto LABEL_2338;
          if (v1678 >= v1675)
            goto LABEL_2334;
        }
        else
        {
          if (v1674 < v1677)
            goto LABEL_2338;
          if (v1677 >= v1674)
            goto LABEL_2334;
        }
      }
      else
      {
        if (v1673 < v1676)
          goto LABEL_2338;
        if (v1676 >= v1673)
          goto LABEL_2334;
      }
      ++v1672;
LABEL_2338:
      v1672 = (uint64_t *)*v1672;
      if (!v1672)
        goto LABEL_2350;
    }
  }
  v1666 = 0;
LABEL_2353:
  *v1663 = v1666;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v135 = v3[208];
  if (v135 >> 30)
    v1681 = 1;
  else
    v1681 = (_DWORD)v135 == v5;
  if (v1681)
    goto LABEL_331;
LABEL_2357:
  v1682 = *(_QWORD *)(v1[2] + 8);
  v1683 = v135 & 0xFFFFFFFFCFFFFFFFLL;
  v1684 = *(_QWORD *)(*(_QWORD *)(v1682 + 8) + 2448);
  v1685 = (unsigned int *)(v1684 + 520 * (v135 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1686 = *v1685;
  if ((_DWORD)v1686)
  {
    v1687 = 0;
    v1688 = 0;
    v1689 = **(_QWORD **)(v1682 + 16);
    v1690 = v1684 + 520 * v1683;
    v1691 = v1690 + 364;
    v1692 = v1690 + 340;
    while (1)
    {
      v1693 = (uint64_t *)(v1691 + 12 * v1687);
      v1694 = *(uint64_t **)(v1689 + 2512);
      if (v1694)
        break;
LABEL_2376:
      *(_WORD *)(v1692 + 2 * v1688) = *(_WORD *)(v1692 + 2 * v1687);
      if (v1687 != v1688)
      {
        v1701 = *v1693;
        v1702 = v1691 + 12 * v1688;
        *(_DWORD *)(v1702 + 8) = *((_DWORD *)v1693 + 2);
        *(_QWORD *)v1702 = v1701;
      }
      ++v1688;
LABEL_2360:
      if (++v1687 == v1686)
        goto LABEL_2379;
    }
    v1695 = *(_DWORD *)v1693;
    v1696 = *((_DWORD *)v1693 + 1);
    v1697 = *((_DWORD *)v1693 + 2);
    while (1)
    {
      v1698 = *((_DWORD *)v1694 + 7);
      if (v1695 == v1698)
      {
        v1699 = *((_DWORD *)v1694 + 8);
        if (v1696 == v1699)
        {
          v1700 = *((_DWORD *)v1694 + 9);
          if (v1697 < v1700)
            goto LABEL_2364;
          if (v1700 >= v1697)
            goto LABEL_2360;
        }
        else
        {
          if (v1696 < v1699)
            goto LABEL_2364;
          if (v1699 >= v1696)
            goto LABEL_2360;
        }
      }
      else
      {
        if (v1695 < v1698)
          goto LABEL_2364;
        if (v1698 >= v1695)
          goto LABEL_2360;
      }
      ++v1694;
LABEL_2364:
      v1694 = (uint64_t *)*v1694;
      if (!v1694)
        goto LABEL_2376;
    }
  }
  v1688 = 0;
LABEL_2379:
  *v1685 = v1688;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v137 = v3[209];
  if (v137 >> 30)
    v1703 = 1;
  else
    v1703 = (_DWORD)v137 == v5;
  if (v1703)
    goto LABEL_336;
LABEL_2383:
  v1704 = *(_QWORD *)(v1[2] + 8);
  v1705 = v137 & 0xFFFFFFFFCFFFFFFFLL;
  v1706 = *(_QWORD *)(*(_QWORD *)(v1704 + 8) + 2448);
  v1707 = (unsigned int *)(v1706 + 520 * (v137 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1708 = *v1707;
  if ((_DWORD)v1708)
  {
    v1709 = 0;
    v1710 = 0;
    v1711 = **(_QWORD **)(v1704 + 16);
    v1712 = v1706 + 520 * v1705;
    v1713 = v1712 + 364;
    v1714 = v1712 + 340;
    while (1)
    {
      v1715 = (uint64_t *)(v1713 + 12 * v1709);
      v1716 = *(uint64_t **)(v1711 + 2512);
      if (v1716)
        break;
LABEL_2402:
      *(_WORD *)(v1714 + 2 * v1710) = *(_WORD *)(v1714 + 2 * v1709);
      if (v1709 != v1710)
      {
        v1723 = *v1715;
        v1724 = v1713 + 12 * v1710;
        *(_DWORD *)(v1724 + 8) = *((_DWORD *)v1715 + 2);
        *(_QWORD *)v1724 = v1723;
      }
      ++v1710;
LABEL_2386:
      if (++v1709 == v1708)
        goto LABEL_2405;
    }
    v1717 = *(_DWORD *)v1715;
    v1718 = *((_DWORD *)v1715 + 1);
    v1719 = *((_DWORD *)v1715 + 2);
    while (1)
    {
      v1720 = *((_DWORD *)v1716 + 7);
      if (v1717 == v1720)
      {
        v1721 = *((_DWORD *)v1716 + 8);
        if (v1718 == v1721)
        {
          v1722 = *((_DWORD *)v1716 + 9);
          if (v1719 < v1722)
            goto LABEL_2390;
          if (v1722 >= v1719)
            goto LABEL_2386;
        }
        else
        {
          if (v1718 < v1721)
            goto LABEL_2390;
          if (v1721 >= v1718)
            goto LABEL_2386;
        }
      }
      else
      {
        if (v1717 < v1720)
          goto LABEL_2390;
        if (v1720 >= v1717)
          goto LABEL_2386;
      }
      ++v1716;
LABEL_2390:
      v1716 = (uint64_t *)*v1716;
      if (!v1716)
        goto LABEL_2402;
    }
  }
  v1710 = 0;
LABEL_2405:
  *v1707 = v1710;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v139 = v3[210];
  if (v139 >> 30)
    v1725 = 1;
  else
    v1725 = (_DWORD)v139 == v5;
  if (v1725)
    goto LABEL_341;
LABEL_2409:
  v1726 = *(_QWORD *)(v1[2] + 8);
  v1727 = v139 & 0xFFFFFFFFCFFFFFFFLL;
  v1728 = *(_QWORD *)(*(_QWORD *)(v1726 + 8) + 2448);
  v1729 = (unsigned int *)(v1728 + 520 * (v139 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1730 = *v1729;
  if ((_DWORD)v1730)
  {
    v1731 = 0;
    v1732 = 0;
    v1733 = **(_QWORD **)(v1726 + 16);
    v1734 = v1728 + 520 * v1727;
    v1735 = v1734 + 364;
    v1736 = v1734 + 340;
    while (1)
    {
      v1737 = (uint64_t *)(v1735 + 12 * v1731);
      v1738 = *(uint64_t **)(v1733 + 2512);
      if (v1738)
        break;
LABEL_2428:
      *(_WORD *)(v1736 + 2 * v1732) = *(_WORD *)(v1736 + 2 * v1731);
      if (v1731 != v1732)
      {
        v1745 = *v1737;
        v1746 = v1735 + 12 * v1732;
        *(_DWORD *)(v1746 + 8) = *((_DWORD *)v1737 + 2);
        *(_QWORD *)v1746 = v1745;
      }
      ++v1732;
LABEL_2412:
      if (++v1731 == v1730)
        goto LABEL_2431;
    }
    v1739 = *(_DWORD *)v1737;
    v1740 = *((_DWORD *)v1737 + 1);
    v1741 = *((_DWORD *)v1737 + 2);
    while (1)
    {
      v1742 = *((_DWORD *)v1738 + 7);
      if (v1739 == v1742)
      {
        v1743 = *((_DWORD *)v1738 + 8);
        if (v1740 == v1743)
        {
          v1744 = *((_DWORD *)v1738 + 9);
          if (v1741 < v1744)
            goto LABEL_2416;
          if (v1744 >= v1741)
            goto LABEL_2412;
        }
        else
        {
          if (v1740 < v1743)
            goto LABEL_2416;
          if (v1743 >= v1740)
            goto LABEL_2412;
        }
      }
      else
      {
        if (v1739 < v1742)
          goto LABEL_2416;
        if (v1742 >= v1739)
          goto LABEL_2412;
      }
      ++v1738;
LABEL_2416:
      v1738 = (uint64_t *)*v1738;
      if (!v1738)
        goto LABEL_2428;
    }
  }
  v1732 = 0;
LABEL_2431:
  *v1729 = v1732;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v141 = v3[211];
  if (v141 >> 30)
    v1747 = 1;
  else
    v1747 = (_DWORD)v141 == v5;
  if (v1747)
    goto LABEL_346;
LABEL_2435:
  v1748 = *(_QWORD *)(v1[2] + 8);
  v1749 = v141 & 0xFFFFFFFFCFFFFFFFLL;
  v1750 = *(_QWORD *)(*(_QWORD *)(v1748 + 8) + 2448);
  v1751 = (unsigned int *)(v1750 + 520 * (v141 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1752 = *v1751;
  if ((_DWORD)v1752)
  {
    v1753 = 0;
    v1754 = 0;
    v1755 = **(_QWORD **)(v1748 + 16);
    v1756 = v1750 + 520 * v1749;
    v1757 = v1756 + 364;
    v1758 = v1756 + 340;
    while (1)
    {
      v1759 = (uint64_t *)(v1757 + 12 * v1753);
      v1760 = *(uint64_t **)(v1755 + 2512);
      if (v1760)
        break;
LABEL_2454:
      *(_WORD *)(v1758 + 2 * v1754) = *(_WORD *)(v1758 + 2 * v1753);
      if (v1753 != v1754)
      {
        v1767 = *v1759;
        v1768 = v1757 + 12 * v1754;
        *(_DWORD *)(v1768 + 8) = *((_DWORD *)v1759 + 2);
        *(_QWORD *)v1768 = v1767;
      }
      ++v1754;
LABEL_2438:
      if (++v1753 == v1752)
        goto LABEL_2457;
    }
    v1761 = *(_DWORD *)v1759;
    v1762 = *((_DWORD *)v1759 + 1);
    v1763 = *((_DWORD *)v1759 + 2);
    while (1)
    {
      v1764 = *((_DWORD *)v1760 + 7);
      if (v1761 == v1764)
      {
        v1765 = *((_DWORD *)v1760 + 8);
        if (v1762 == v1765)
        {
          v1766 = *((_DWORD *)v1760 + 9);
          if (v1763 < v1766)
            goto LABEL_2442;
          if (v1766 >= v1763)
            goto LABEL_2438;
        }
        else
        {
          if (v1762 < v1765)
            goto LABEL_2442;
          if (v1765 >= v1762)
            goto LABEL_2438;
        }
      }
      else
      {
        if (v1761 < v1764)
          goto LABEL_2442;
        if (v1764 >= v1761)
          goto LABEL_2438;
      }
      ++v1760;
LABEL_2442:
      v1760 = (uint64_t *)*v1760;
      if (!v1760)
        goto LABEL_2454;
    }
  }
  v1754 = 0;
LABEL_2457:
  *v1751 = v1754;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v143 = v3[212];
  if (v143 >> 30)
    v1769 = 1;
  else
    v1769 = (_DWORD)v143 == v5;
  if (v1769)
    goto LABEL_351;
LABEL_2461:
  v1770 = *(_QWORD *)(v1[2] + 8);
  v1771 = v143 & 0xFFFFFFFFCFFFFFFFLL;
  v1772 = *(_QWORD *)(*(_QWORD *)(v1770 + 8) + 2448);
  v1773 = (unsigned int *)(v1772 + 520 * (v143 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1774 = *v1773;
  if ((_DWORD)v1774)
  {
    v1775 = 0;
    v1776 = 0;
    v1777 = **(_QWORD **)(v1770 + 16);
    v1778 = v1772 + 520 * v1771;
    v1779 = v1778 + 364;
    v1780 = v1778 + 340;
    while (1)
    {
      v1781 = (uint64_t *)(v1779 + 12 * v1775);
      v1782 = *(uint64_t **)(v1777 + 2512);
      if (v1782)
        break;
LABEL_2480:
      *(_WORD *)(v1780 + 2 * v1776) = *(_WORD *)(v1780 + 2 * v1775);
      if (v1775 != v1776)
      {
        v1789 = *v1781;
        v1790 = v1779 + 12 * v1776;
        *(_DWORD *)(v1790 + 8) = *((_DWORD *)v1781 + 2);
        *(_QWORD *)v1790 = v1789;
      }
      ++v1776;
LABEL_2464:
      if (++v1775 == v1774)
        goto LABEL_2483;
    }
    v1783 = *(_DWORD *)v1781;
    v1784 = *((_DWORD *)v1781 + 1);
    v1785 = *((_DWORD *)v1781 + 2);
    while (1)
    {
      v1786 = *((_DWORD *)v1782 + 7);
      if (v1783 == v1786)
      {
        v1787 = *((_DWORD *)v1782 + 8);
        if (v1784 == v1787)
        {
          v1788 = *((_DWORD *)v1782 + 9);
          if (v1785 < v1788)
            goto LABEL_2468;
          if (v1788 >= v1785)
            goto LABEL_2464;
        }
        else
        {
          if (v1784 < v1787)
            goto LABEL_2468;
          if (v1787 >= v1784)
            goto LABEL_2464;
        }
      }
      else
      {
        if (v1783 < v1786)
          goto LABEL_2468;
        if (v1786 >= v1783)
          goto LABEL_2464;
      }
      ++v1782;
LABEL_2468:
      v1782 = (uint64_t *)*v1782;
      if (!v1782)
        goto LABEL_2480;
    }
  }
  v1776 = 0;
LABEL_2483:
  *v1773 = v1776;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v145 = v3[213];
  if (v145 >> 30)
    v1791 = 1;
  else
    v1791 = (_DWORD)v145 == v5;
  if (v1791)
    goto LABEL_356;
LABEL_2487:
  v1792 = *(_QWORD *)(v1[2] + 8);
  v1793 = v145 & 0xFFFFFFFFCFFFFFFFLL;
  v1794 = *(_QWORD *)(*(_QWORD *)(v1792 + 8) + 2448);
  v1795 = (unsigned int *)(v1794 + 520 * (v145 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1796 = *v1795;
  if ((_DWORD)v1796)
  {
    v1797 = 0;
    v1798 = 0;
    v1799 = **(_QWORD **)(v1792 + 16);
    v1800 = v1794 + 520 * v1793;
    v1801 = v1800 + 364;
    v1802 = v1800 + 340;
    while (1)
    {
      v1803 = (uint64_t *)(v1801 + 12 * v1797);
      v1804 = *(uint64_t **)(v1799 + 2512);
      if (v1804)
        break;
LABEL_2506:
      *(_WORD *)(v1802 + 2 * v1798) = *(_WORD *)(v1802 + 2 * v1797);
      if (v1797 != v1798)
      {
        v1811 = *v1803;
        v1812 = v1801 + 12 * v1798;
        *(_DWORD *)(v1812 + 8) = *((_DWORD *)v1803 + 2);
        *(_QWORD *)v1812 = v1811;
      }
      ++v1798;
LABEL_2490:
      if (++v1797 == v1796)
        goto LABEL_2509;
    }
    v1805 = *(_DWORD *)v1803;
    v1806 = *((_DWORD *)v1803 + 1);
    v1807 = *((_DWORD *)v1803 + 2);
    while (1)
    {
      v1808 = *((_DWORD *)v1804 + 7);
      if (v1805 == v1808)
      {
        v1809 = *((_DWORD *)v1804 + 8);
        if (v1806 == v1809)
        {
          v1810 = *((_DWORD *)v1804 + 9);
          if (v1807 < v1810)
            goto LABEL_2494;
          if (v1810 >= v1807)
            goto LABEL_2490;
        }
        else
        {
          if (v1806 < v1809)
            goto LABEL_2494;
          if (v1809 >= v1806)
            goto LABEL_2490;
        }
      }
      else
      {
        if (v1805 < v1808)
          goto LABEL_2494;
        if (v1808 >= v1805)
          goto LABEL_2490;
      }
      ++v1804;
LABEL_2494:
      v1804 = (uint64_t *)*v1804;
      if (!v1804)
        goto LABEL_2506;
    }
  }
  v1798 = 0;
LABEL_2509:
  *v1795 = v1798;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v147 = v3[214];
  if (v147 >> 30)
    v1813 = 1;
  else
    v1813 = (_DWORD)v147 == v5;
  if (v1813)
    goto LABEL_361;
LABEL_2513:
  v1814 = *(_QWORD *)(v1[2] + 8);
  v1815 = v147 & 0xFFFFFFFFCFFFFFFFLL;
  v1816 = *(_QWORD *)(*(_QWORD *)(v1814 + 8) + 2448);
  v1817 = (unsigned int *)(v1816 + 520 * (v147 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1818 = *v1817;
  if ((_DWORD)v1818)
  {
    v1819 = 0;
    v1820 = 0;
    v1821 = **(_QWORD **)(v1814 + 16);
    v1822 = v1816 + 520 * v1815;
    v1823 = v1822 + 364;
    v1824 = v1822 + 340;
    while (1)
    {
      v1825 = (uint64_t *)(v1823 + 12 * v1819);
      v1826 = *(uint64_t **)(v1821 + 2512);
      if (v1826)
        break;
LABEL_2532:
      *(_WORD *)(v1824 + 2 * v1820) = *(_WORD *)(v1824 + 2 * v1819);
      if (v1819 != v1820)
      {
        v1833 = *v1825;
        v1834 = v1823 + 12 * v1820;
        *(_DWORD *)(v1834 + 8) = *((_DWORD *)v1825 + 2);
        *(_QWORD *)v1834 = v1833;
      }
      ++v1820;
LABEL_2516:
      if (++v1819 == v1818)
        goto LABEL_2535;
    }
    v1827 = *(_DWORD *)v1825;
    v1828 = *((_DWORD *)v1825 + 1);
    v1829 = *((_DWORD *)v1825 + 2);
    while (1)
    {
      v1830 = *((_DWORD *)v1826 + 7);
      if (v1827 == v1830)
      {
        v1831 = *((_DWORD *)v1826 + 8);
        if (v1828 == v1831)
        {
          v1832 = *((_DWORD *)v1826 + 9);
          if (v1829 < v1832)
            goto LABEL_2520;
          if (v1832 >= v1829)
            goto LABEL_2516;
        }
        else
        {
          if (v1828 < v1831)
            goto LABEL_2520;
          if (v1831 >= v1828)
            goto LABEL_2516;
        }
      }
      else
      {
        if (v1827 < v1830)
          goto LABEL_2520;
        if (v1830 >= v1827)
          goto LABEL_2516;
      }
      ++v1826;
LABEL_2520:
      v1826 = (uint64_t *)*v1826;
      if (!v1826)
        goto LABEL_2532;
    }
  }
  v1820 = 0;
LABEL_2535:
  *v1817 = v1820;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v149 = v3[215];
  if (v149 >> 30)
    v1835 = 1;
  else
    v1835 = (_DWORD)v149 == v5;
  if (v1835)
    goto LABEL_366;
LABEL_2539:
  v1836 = *(_QWORD *)(v1[2] + 8);
  v1837 = v149 & 0xFFFFFFFFCFFFFFFFLL;
  v1838 = *(_QWORD *)(*(_QWORD *)(v1836 + 8) + 2448);
  v1839 = (unsigned int *)(v1838 + 520 * (v149 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1840 = *v1839;
  if ((_DWORD)v1840)
  {
    v1841 = 0;
    v1842 = 0;
    v1843 = **(_QWORD **)(v1836 + 16);
    v1844 = v1838 + 520 * v1837;
    v1845 = v1844 + 364;
    v1846 = v1844 + 340;
    while (1)
    {
      v1847 = (uint64_t *)(v1845 + 12 * v1841);
      v1848 = *(uint64_t **)(v1843 + 2512);
      if (v1848)
        break;
LABEL_2558:
      *(_WORD *)(v1846 + 2 * v1842) = *(_WORD *)(v1846 + 2 * v1841);
      if (v1841 != v1842)
      {
        v1855 = *v1847;
        v1856 = v1845 + 12 * v1842;
        *(_DWORD *)(v1856 + 8) = *((_DWORD *)v1847 + 2);
        *(_QWORD *)v1856 = v1855;
      }
      ++v1842;
LABEL_2542:
      if (++v1841 == v1840)
        goto LABEL_2561;
    }
    v1849 = *(_DWORD *)v1847;
    v1850 = *((_DWORD *)v1847 + 1);
    v1851 = *((_DWORD *)v1847 + 2);
    while (1)
    {
      v1852 = *((_DWORD *)v1848 + 7);
      if (v1849 == v1852)
      {
        v1853 = *((_DWORD *)v1848 + 8);
        if (v1850 == v1853)
        {
          v1854 = *((_DWORD *)v1848 + 9);
          if (v1851 < v1854)
            goto LABEL_2546;
          if (v1854 >= v1851)
            goto LABEL_2542;
        }
        else
        {
          if (v1850 < v1853)
            goto LABEL_2546;
          if (v1853 >= v1850)
            goto LABEL_2542;
        }
      }
      else
      {
        if (v1849 < v1852)
          goto LABEL_2546;
        if (v1852 >= v1849)
          goto LABEL_2542;
      }
      ++v1848;
LABEL_2546:
      v1848 = (uint64_t *)*v1848;
      if (!v1848)
        goto LABEL_2558;
    }
  }
  v1842 = 0;
LABEL_2561:
  *v1839 = v1842;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v151 = v3[216];
  if (v151 >> 30)
    v1857 = 1;
  else
    v1857 = (_DWORD)v151 == v5;
  if (v1857)
    goto LABEL_371;
LABEL_2565:
  v1858 = *(_QWORD *)(v1[2] + 8);
  v1859 = v151 & 0xFFFFFFFFCFFFFFFFLL;
  v1860 = *(_QWORD *)(*(_QWORD *)(v1858 + 8) + 2448);
  v1861 = (unsigned int *)(v1860 + 520 * (v151 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1862 = *v1861;
  if ((_DWORD)v1862)
  {
    v1863 = 0;
    v1864 = 0;
    v1865 = **(_QWORD **)(v1858 + 16);
    v1866 = v1860 + 520 * v1859;
    v1867 = v1866 + 364;
    v1868 = v1866 + 340;
    while (1)
    {
      v1869 = (uint64_t *)(v1867 + 12 * v1863);
      v1870 = *(uint64_t **)(v1865 + 2512);
      if (v1870)
        break;
LABEL_2584:
      *(_WORD *)(v1868 + 2 * v1864) = *(_WORD *)(v1868 + 2 * v1863);
      if (v1863 != v1864)
      {
        v1877 = *v1869;
        v1878 = v1867 + 12 * v1864;
        *(_DWORD *)(v1878 + 8) = *((_DWORD *)v1869 + 2);
        *(_QWORD *)v1878 = v1877;
      }
      ++v1864;
LABEL_2568:
      if (++v1863 == v1862)
        goto LABEL_2587;
    }
    v1871 = *(_DWORD *)v1869;
    v1872 = *((_DWORD *)v1869 + 1);
    v1873 = *((_DWORD *)v1869 + 2);
    while (1)
    {
      v1874 = *((_DWORD *)v1870 + 7);
      if (v1871 == v1874)
      {
        v1875 = *((_DWORD *)v1870 + 8);
        if (v1872 == v1875)
        {
          v1876 = *((_DWORD *)v1870 + 9);
          if (v1873 < v1876)
            goto LABEL_2572;
          if (v1876 >= v1873)
            goto LABEL_2568;
        }
        else
        {
          if (v1872 < v1875)
            goto LABEL_2572;
          if (v1875 >= v1872)
            goto LABEL_2568;
        }
      }
      else
      {
        if (v1871 < v1874)
          goto LABEL_2572;
        if (v1874 >= v1871)
          goto LABEL_2568;
      }
      ++v1870;
LABEL_2572:
      v1870 = (uint64_t *)*v1870;
      if (!v1870)
        goto LABEL_2584;
    }
  }
  v1864 = 0;
LABEL_2587:
  *v1861 = v1864;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v153 = v3[217];
  if (v153 >> 30)
    v1879 = 1;
  else
    v1879 = (_DWORD)v153 == v5;
  if (v1879)
    goto LABEL_376;
LABEL_2591:
  v1880 = *(_QWORD *)(v1[2] + 8);
  v1881 = v153 & 0xFFFFFFFFCFFFFFFFLL;
  v1882 = *(_QWORD *)(*(_QWORD *)(v1880 + 8) + 2448);
  v1883 = (unsigned int *)(v1882 + 520 * (v153 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1884 = *v1883;
  if ((_DWORD)v1884)
  {
    v1885 = 0;
    v1886 = 0;
    v1887 = **(_QWORD **)(v1880 + 16);
    v1888 = v1882 + 520 * v1881;
    v1889 = v1888 + 364;
    v1890 = v1888 + 340;
    while (1)
    {
      v1891 = (uint64_t *)(v1889 + 12 * v1885);
      v1892 = *(uint64_t **)(v1887 + 2512);
      if (v1892)
        break;
LABEL_2610:
      *(_WORD *)(v1890 + 2 * v1886) = *(_WORD *)(v1890 + 2 * v1885);
      if (v1885 != v1886)
      {
        v1899 = *v1891;
        v1900 = v1889 + 12 * v1886;
        *(_DWORD *)(v1900 + 8) = *((_DWORD *)v1891 + 2);
        *(_QWORD *)v1900 = v1899;
      }
      ++v1886;
LABEL_2594:
      if (++v1885 == v1884)
        goto LABEL_2613;
    }
    v1893 = *(_DWORD *)v1891;
    v1894 = *((_DWORD *)v1891 + 1);
    v1895 = *((_DWORD *)v1891 + 2);
    while (1)
    {
      v1896 = *((_DWORD *)v1892 + 7);
      if (v1893 == v1896)
      {
        v1897 = *((_DWORD *)v1892 + 8);
        if (v1894 == v1897)
        {
          v1898 = *((_DWORD *)v1892 + 9);
          if (v1895 < v1898)
            goto LABEL_2598;
          if (v1898 >= v1895)
            goto LABEL_2594;
        }
        else
        {
          if (v1894 < v1897)
            goto LABEL_2598;
          if (v1897 >= v1894)
            goto LABEL_2594;
        }
      }
      else
      {
        if (v1893 < v1896)
          goto LABEL_2598;
        if (v1896 >= v1893)
          goto LABEL_2594;
      }
      ++v1892;
LABEL_2598:
      v1892 = (uint64_t *)*v1892;
      if (!v1892)
        goto LABEL_2610;
    }
  }
  v1886 = 0;
LABEL_2613:
  *v1883 = v1886;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v155 = v3[218];
  if (v155 >> 30)
    v1901 = 1;
  else
    v1901 = (_DWORD)v155 == v5;
  if (v1901)
    goto LABEL_381;
LABEL_2617:
  v1902 = *(_QWORD *)(v1[2] + 8);
  v1903 = v155 & 0xFFFFFFFFCFFFFFFFLL;
  v1904 = *(_QWORD *)(*(_QWORD *)(v1902 + 8) + 2448);
  v1905 = (unsigned int *)(v1904 + 520 * (v155 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1906 = *v1905;
  if ((_DWORD)v1906)
  {
    v1907 = 0;
    v1908 = 0;
    v1909 = **(_QWORD **)(v1902 + 16);
    v1910 = v1904 + 520 * v1903;
    v1911 = v1910 + 364;
    v1912 = v1910 + 340;
    while (1)
    {
      v1913 = (uint64_t *)(v1911 + 12 * v1907);
      v1914 = *(uint64_t **)(v1909 + 2512);
      if (v1914)
        break;
LABEL_2636:
      *(_WORD *)(v1912 + 2 * v1908) = *(_WORD *)(v1912 + 2 * v1907);
      if (v1907 != v1908)
      {
        v1921 = *v1913;
        v1922 = v1911 + 12 * v1908;
        *(_DWORD *)(v1922 + 8) = *((_DWORD *)v1913 + 2);
        *(_QWORD *)v1922 = v1921;
      }
      ++v1908;
LABEL_2620:
      if (++v1907 == v1906)
        goto LABEL_2639;
    }
    v1915 = *(_DWORD *)v1913;
    v1916 = *((_DWORD *)v1913 + 1);
    v1917 = *((_DWORD *)v1913 + 2);
    while (1)
    {
      v1918 = *((_DWORD *)v1914 + 7);
      if (v1915 == v1918)
      {
        v1919 = *((_DWORD *)v1914 + 8);
        if (v1916 == v1919)
        {
          v1920 = *((_DWORD *)v1914 + 9);
          if (v1917 < v1920)
            goto LABEL_2624;
          if (v1920 >= v1917)
            goto LABEL_2620;
        }
        else
        {
          if (v1916 < v1919)
            goto LABEL_2624;
          if (v1919 >= v1916)
            goto LABEL_2620;
        }
      }
      else
      {
        if (v1915 < v1918)
          goto LABEL_2624;
        if (v1918 >= v1915)
          goto LABEL_2620;
      }
      ++v1914;
LABEL_2624:
      v1914 = (uint64_t *)*v1914;
      if (!v1914)
        goto LABEL_2636;
    }
  }
  v1908 = 0;
LABEL_2639:
  *v1905 = v1908;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v157 = v3[219];
  if (v157 >> 30)
    v1923 = 1;
  else
    v1923 = (_DWORD)v157 == v5;
  if (v1923)
    goto LABEL_386;
LABEL_2643:
  v1924 = *(_QWORD *)(v1[2] + 8);
  v1925 = v157 & 0xFFFFFFFFCFFFFFFFLL;
  v1926 = *(_QWORD *)(*(_QWORD *)(v1924 + 8) + 2448);
  v1927 = (unsigned int *)(v1926 + 520 * (v157 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1928 = *v1927;
  if ((_DWORD)v1928)
  {
    v1929 = 0;
    v1930 = 0;
    v1931 = **(_QWORD **)(v1924 + 16);
    v1932 = v1926 + 520 * v1925;
    v1933 = v1932 + 364;
    v1934 = v1932 + 340;
    while (1)
    {
      v1935 = (uint64_t *)(v1933 + 12 * v1929);
      v1936 = *(uint64_t **)(v1931 + 2512);
      if (v1936)
        break;
LABEL_2662:
      *(_WORD *)(v1934 + 2 * v1930) = *(_WORD *)(v1934 + 2 * v1929);
      if (v1929 != v1930)
      {
        v1943 = *v1935;
        v1944 = v1933 + 12 * v1930;
        *(_DWORD *)(v1944 + 8) = *((_DWORD *)v1935 + 2);
        *(_QWORD *)v1944 = v1943;
      }
      ++v1930;
LABEL_2646:
      if (++v1929 == v1928)
        goto LABEL_2665;
    }
    v1937 = *(_DWORD *)v1935;
    v1938 = *((_DWORD *)v1935 + 1);
    v1939 = *((_DWORD *)v1935 + 2);
    while (1)
    {
      v1940 = *((_DWORD *)v1936 + 7);
      if (v1937 == v1940)
      {
        v1941 = *((_DWORD *)v1936 + 8);
        if (v1938 == v1941)
        {
          v1942 = *((_DWORD *)v1936 + 9);
          if (v1939 < v1942)
            goto LABEL_2650;
          if (v1942 >= v1939)
            goto LABEL_2646;
        }
        else
        {
          if (v1938 < v1941)
            goto LABEL_2650;
          if (v1941 >= v1938)
            goto LABEL_2646;
        }
      }
      else
      {
        if (v1937 < v1940)
          goto LABEL_2650;
        if (v1940 >= v1937)
          goto LABEL_2646;
      }
      ++v1936;
LABEL_2650:
      v1936 = (uint64_t *)*v1936;
      if (!v1936)
        goto LABEL_2662;
    }
  }
  v1930 = 0;
LABEL_2665:
  *v1927 = v1930;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v159 = v3[220];
  if (v159 >> 30)
    v1945 = 1;
  else
    v1945 = (_DWORD)v159 == v5;
  if (v1945)
    goto LABEL_391;
LABEL_2669:
  v1946 = *(_QWORD *)(v1[2] + 8);
  v1947 = v159 & 0xFFFFFFFFCFFFFFFFLL;
  v1948 = *(_QWORD *)(*(_QWORD *)(v1946 + 8) + 2448);
  v1949 = (unsigned int *)(v1948 + 520 * (v159 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1950 = *v1949;
  if ((_DWORD)v1950)
  {
    v1951 = 0;
    v1952 = 0;
    v1953 = **(_QWORD **)(v1946 + 16);
    v1954 = v1948 + 520 * v1947;
    v1955 = v1954 + 364;
    v1956 = v1954 + 340;
    while (1)
    {
      v1957 = (uint64_t *)(v1955 + 12 * v1951);
      v1958 = *(uint64_t **)(v1953 + 2512);
      if (v1958)
        break;
LABEL_2688:
      *(_WORD *)(v1956 + 2 * v1952) = *(_WORD *)(v1956 + 2 * v1951);
      if (v1951 != v1952)
      {
        v1965 = *v1957;
        v1966 = v1955 + 12 * v1952;
        *(_DWORD *)(v1966 + 8) = *((_DWORD *)v1957 + 2);
        *(_QWORD *)v1966 = v1965;
      }
      ++v1952;
LABEL_2672:
      if (++v1951 == v1950)
        goto LABEL_2691;
    }
    v1959 = *(_DWORD *)v1957;
    v1960 = *((_DWORD *)v1957 + 1);
    v1961 = *((_DWORD *)v1957 + 2);
    while (1)
    {
      v1962 = *((_DWORD *)v1958 + 7);
      if (v1959 == v1962)
      {
        v1963 = *((_DWORD *)v1958 + 8);
        if (v1960 == v1963)
        {
          v1964 = *((_DWORD *)v1958 + 9);
          if (v1961 < v1964)
            goto LABEL_2676;
          if (v1964 >= v1961)
            goto LABEL_2672;
        }
        else
        {
          if (v1960 < v1963)
            goto LABEL_2676;
          if (v1963 >= v1960)
            goto LABEL_2672;
        }
      }
      else
      {
        if (v1959 < v1962)
          goto LABEL_2676;
        if (v1962 >= v1959)
          goto LABEL_2672;
      }
      ++v1958;
LABEL_2676:
      v1958 = (uint64_t *)*v1958;
      if (!v1958)
        goto LABEL_2688;
    }
  }
  v1952 = 0;
LABEL_2691:
  *v1949 = v1952;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v161 = v3[221];
  if (v161 >> 30)
    v1967 = 1;
  else
    v1967 = (_DWORD)v161 == v5;
  if (v1967)
    goto LABEL_396;
LABEL_2695:
  v1968 = *(_QWORD *)(v1[2] + 8);
  v1969 = v161 & 0xFFFFFFFFCFFFFFFFLL;
  v1970 = *(_QWORD *)(*(_QWORD *)(v1968 + 8) + 2448);
  v1971 = (unsigned int *)(v1970 + 520 * (v161 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1972 = *v1971;
  if ((_DWORD)v1972)
  {
    v1973 = 0;
    v1974 = 0;
    v1975 = **(_QWORD **)(v1968 + 16);
    v1976 = v1970 + 520 * v1969;
    v1977 = v1976 + 364;
    v1978 = v1976 + 340;
    while (1)
    {
      v1979 = (uint64_t *)(v1977 + 12 * v1973);
      v1980 = *(uint64_t **)(v1975 + 2512);
      if (v1980)
        break;
LABEL_2714:
      *(_WORD *)(v1978 + 2 * v1974) = *(_WORD *)(v1978 + 2 * v1973);
      if (v1973 != v1974)
      {
        v1987 = *v1979;
        v1988 = v1977 + 12 * v1974;
        *(_DWORD *)(v1988 + 8) = *((_DWORD *)v1979 + 2);
        *(_QWORD *)v1988 = v1987;
      }
      ++v1974;
LABEL_2698:
      if (++v1973 == v1972)
        goto LABEL_2717;
    }
    v1981 = *(_DWORD *)v1979;
    v1982 = *((_DWORD *)v1979 + 1);
    v1983 = *((_DWORD *)v1979 + 2);
    while (1)
    {
      v1984 = *((_DWORD *)v1980 + 7);
      if (v1981 == v1984)
      {
        v1985 = *((_DWORD *)v1980 + 8);
        if (v1982 == v1985)
        {
          v1986 = *((_DWORD *)v1980 + 9);
          if (v1983 < v1986)
            goto LABEL_2702;
          if (v1986 >= v1983)
            goto LABEL_2698;
        }
        else
        {
          if (v1982 < v1985)
            goto LABEL_2702;
          if (v1985 >= v1982)
            goto LABEL_2698;
        }
      }
      else
      {
        if (v1981 < v1984)
          goto LABEL_2702;
        if (v1984 >= v1981)
          goto LABEL_2698;
      }
      ++v1980;
LABEL_2702:
      v1980 = (uint64_t *)*v1980;
      if (!v1980)
        goto LABEL_2714;
    }
  }
  v1974 = 0;
LABEL_2717:
  *v1971 = v1974;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v163 = v3[222];
  if (v163 >> 30)
    v1989 = 1;
  else
    v1989 = (_DWORD)v163 == v5;
  if (v1989)
    goto LABEL_401;
LABEL_2721:
  v1990 = *(_QWORD *)(v1[2] + 8);
  v1991 = v163 & 0xFFFFFFFFCFFFFFFFLL;
  v1992 = *(_QWORD *)(*(_QWORD *)(v1990 + 8) + 2448);
  v1993 = (unsigned int *)(v1992 + 520 * (v163 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v1994 = *v1993;
  if ((_DWORD)v1994)
  {
    v1995 = 0;
    v1996 = 0;
    v1997 = **(_QWORD **)(v1990 + 16);
    v1998 = v1992 + 520 * v1991;
    v1999 = v1998 + 364;
    v2000 = v1998 + 340;
    while (1)
    {
      v2001 = (uint64_t *)(v1999 + 12 * v1995);
      v2002 = *(uint64_t **)(v1997 + 2512);
      if (v2002)
        break;
LABEL_2740:
      *(_WORD *)(v2000 + 2 * v1996) = *(_WORD *)(v2000 + 2 * v1995);
      if (v1995 != v1996)
      {
        v2009 = *v2001;
        v2010 = v1999 + 12 * v1996;
        *(_DWORD *)(v2010 + 8) = *((_DWORD *)v2001 + 2);
        *(_QWORD *)v2010 = v2009;
      }
      ++v1996;
LABEL_2724:
      if (++v1995 == v1994)
        goto LABEL_2743;
    }
    v2003 = *(_DWORD *)v2001;
    v2004 = *((_DWORD *)v2001 + 1);
    v2005 = *((_DWORD *)v2001 + 2);
    while (1)
    {
      v2006 = *((_DWORD *)v2002 + 7);
      if (v2003 == v2006)
      {
        v2007 = *((_DWORD *)v2002 + 8);
        if (v2004 == v2007)
        {
          v2008 = *((_DWORD *)v2002 + 9);
          if (v2005 < v2008)
            goto LABEL_2728;
          if (v2008 >= v2005)
            goto LABEL_2724;
        }
        else
        {
          if (v2004 < v2007)
            goto LABEL_2728;
          if (v2007 >= v2004)
            goto LABEL_2724;
        }
      }
      else
      {
        if (v2003 < v2006)
          goto LABEL_2728;
        if (v2006 >= v2003)
          goto LABEL_2724;
      }
      ++v2002;
LABEL_2728:
      v2002 = (uint64_t *)*v2002;
      if (!v2002)
        goto LABEL_2740;
    }
  }
  v1996 = 0;
LABEL_2743:
  *v1993 = v1996;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v165 = v3[223];
  if (v165 >> 30)
    v2011 = 1;
  else
    v2011 = (_DWORD)v165 == v5;
  if (v2011)
    goto LABEL_406;
LABEL_2747:
  v2012 = *(_QWORD *)(v1[2] + 8);
  v2013 = v165 & 0xFFFFFFFFCFFFFFFFLL;
  v2014 = *(_QWORD *)(*(_QWORD *)(v2012 + 8) + 2448);
  v2015 = (unsigned int *)(v2014 + 520 * (v165 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2016 = *v2015;
  if ((_DWORD)v2016)
  {
    v2017 = 0;
    v2018 = 0;
    v2019 = **(_QWORD **)(v2012 + 16);
    v2020 = v2014 + 520 * v2013;
    v2021 = v2020 + 364;
    v2022 = v2020 + 340;
    while (1)
    {
      v2023 = (uint64_t *)(v2021 + 12 * v2017);
      v2024 = *(uint64_t **)(v2019 + 2512);
      if (v2024)
        break;
LABEL_2766:
      *(_WORD *)(v2022 + 2 * v2018) = *(_WORD *)(v2022 + 2 * v2017);
      if (v2017 != v2018)
      {
        v2031 = *v2023;
        v2032 = v2021 + 12 * v2018;
        *(_DWORD *)(v2032 + 8) = *((_DWORD *)v2023 + 2);
        *(_QWORD *)v2032 = v2031;
      }
      ++v2018;
LABEL_2750:
      if (++v2017 == v2016)
        goto LABEL_2769;
    }
    v2025 = *(_DWORD *)v2023;
    v2026 = *((_DWORD *)v2023 + 1);
    v2027 = *((_DWORD *)v2023 + 2);
    while (1)
    {
      v2028 = *((_DWORD *)v2024 + 7);
      if (v2025 == v2028)
      {
        v2029 = *((_DWORD *)v2024 + 8);
        if (v2026 == v2029)
        {
          v2030 = *((_DWORD *)v2024 + 9);
          if (v2027 < v2030)
            goto LABEL_2754;
          if (v2030 >= v2027)
            goto LABEL_2750;
        }
        else
        {
          if (v2026 < v2029)
            goto LABEL_2754;
          if (v2029 >= v2026)
            goto LABEL_2750;
        }
      }
      else
      {
        if (v2025 < v2028)
          goto LABEL_2754;
        if (v2028 >= v2025)
          goto LABEL_2750;
      }
      ++v2024;
LABEL_2754:
      v2024 = (uint64_t *)*v2024;
      if (!v2024)
        goto LABEL_2766;
    }
  }
  v2018 = 0;
LABEL_2769:
  *v2015 = v2018;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v167 = v3[224];
  if (v167 >> 30)
    v2033 = 1;
  else
    v2033 = (_DWORD)v167 == v5;
  if (v2033)
    goto LABEL_411;
LABEL_2773:
  v2034 = *(_QWORD *)(v1[2] + 8);
  v2035 = v167 & 0xFFFFFFFFCFFFFFFFLL;
  v2036 = *(_QWORD *)(*(_QWORD *)(v2034 + 8) + 2448);
  v2037 = (unsigned int *)(v2036 + 520 * (v167 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2038 = *v2037;
  if ((_DWORD)v2038)
  {
    v2039 = 0;
    v2040 = 0;
    v2041 = **(_QWORD **)(v2034 + 16);
    v2042 = v2036 + 520 * v2035;
    v2043 = v2042 + 364;
    v2044 = v2042 + 340;
    while (1)
    {
      v2045 = (uint64_t *)(v2043 + 12 * v2039);
      v2046 = *(uint64_t **)(v2041 + 2512);
      if (v2046)
        break;
LABEL_2792:
      *(_WORD *)(v2044 + 2 * v2040) = *(_WORD *)(v2044 + 2 * v2039);
      if (v2039 != v2040)
      {
        v2053 = *v2045;
        v2054 = v2043 + 12 * v2040;
        *(_DWORD *)(v2054 + 8) = *((_DWORD *)v2045 + 2);
        *(_QWORD *)v2054 = v2053;
      }
      ++v2040;
LABEL_2776:
      if (++v2039 == v2038)
        goto LABEL_2795;
    }
    v2047 = *(_DWORD *)v2045;
    v2048 = *((_DWORD *)v2045 + 1);
    v2049 = *((_DWORD *)v2045 + 2);
    while (1)
    {
      v2050 = *((_DWORD *)v2046 + 7);
      if (v2047 == v2050)
      {
        v2051 = *((_DWORD *)v2046 + 8);
        if (v2048 == v2051)
        {
          v2052 = *((_DWORD *)v2046 + 9);
          if (v2049 < v2052)
            goto LABEL_2780;
          if (v2052 >= v2049)
            goto LABEL_2776;
        }
        else
        {
          if (v2048 < v2051)
            goto LABEL_2780;
          if (v2051 >= v2048)
            goto LABEL_2776;
        }
      }
      else
      {
        if (v2047 < v2050)
          goto LABEL_2780;
        if (v2050 >= v2047)
          goto LABEL_2776;
      }
      ++v2046;
LABEL_2780:
      v2046 = (uint64_t *)*v2046;
      if (!v2046)
        goto LABEL_2792;
    }
  }
  v2040 = 0;
LABEL_2795:
  *v2037 = v2040;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v169 = v3[225];
  if (v169 >> 30)
    v2055 = 1;
  else
    v2055 = (_DWORD)v169 == v5;
  if (v2055)
    goto LABEL_416;
LABEL_2799:
  v2056 = *(_QWORD *)(v1[2] + 8);
  v2057 = v169 & 0xFFFFFFFFCFFFFFFFLL;
  v2058 = *(_QWORD *)(*(_QWORD *)(v2056 + 8) + 2448);
  v2059 = (unsigned int *)(v2058 + 520 * (v169 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2060 = *v2059;
  if ((_DWORD)v2060)
  {
    v2061 = 0;
    v2062 = 0;
    v2063 = **(_QWORD **)(v2056 + 16);
    v2064 = v2058 + 520 * v2057;
    v2065 = v2064 + 364;
    v2066 = v2064 + 340;
    while (1)
    {
      v2067 = (uint64_t *)(v2065 + 12 * v2061);
      v2068 = *(uint64_t **)(v2063 + 2512);
      if (v2068)
        break;
LABEL_2818:
      *(_WORD *)(v2066 + 2 * v2062) = *(_WORD *)(v2066 + 2 * v2061);
      if (v2061 != v2062)
      {
        v2075 = *v2067;
        v2076 = v2065 + 12 * v2062;
        *(_DWORD *)(v2076 + 8) = *((_DWORD *)v2067 + 2);
        *(_QWORD *)v2076 = v2075;
      }
      ++v2062;
LABEL_2802:
      if (++v2061 == v2060)
        goto LABEL_2821;
    }
    v2069 = *(_DWORD *)v2067;
    v2070 = *((_DWORD *)v2067 + 1);
    v2071 = *((_DWORD *)v2067 + 2);
    while (1)
    {
      v2072 = *((_DWORD *)v2068 + 7);
      if (v2069 == v2072)
      {
        v2073 = *((_DWORD *)v2068 + 8);
        if (v2070 == v2073)
        {
          v2074 = *((_DWORD *)v2068 + 9);
          if (v2071 < v2074)
            goto LABEL_2806;
          if (v2074 >= v2071)
            goto LABEL_2802;
        }
        else
        {
          if (v2070 < v2073)
            goto LABEL_2806;
          if (v2073 >= v2070)
            goto LABEL_2802;
        }
      }
      else
      {
        if (v2069 < v2072)
          goto LABEL_2806;
        if (v2072 >= v2069)
          goto LABEL_2802;
      }
      ++v2068;
LABEL_2806:
      v2068 = (uint64_t *)*v2068;
      if (!v2068)
        goto LABEL_2818;
    }
  }
  v2062 = 0;
LABEL_2821:
  *v2059 = v2062;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v171 = v3[226];
  if (v171 >> 30)
    v2077 = 1;
  else
    v2077 = (_DWORD)v171 == v5;
  if (v2077)
    goto LABEL_421;
LABEL_2825:
  v2078 = *(_QWORD *)(v1[2] + 8);
  v2079 = v171 & 0xFFFFFFFFCFFFFFFFLL;
  v2080 = *(_QWORD *)(*(_QWORD *)(v2078 + 8) + 2448);
  v2081 = (unsigned int *)(v2080 + 520 * (v171 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2082 = *v2081;
  if ((_DWORD)v2082)
  {
    v2083 = 0;
    v2084 = 0;
    v2085 = **(_QWORD **)(v2078 + 16);
    v2086 = v2080 + 520 * v2079;
    v2087 = v2086 + 364;
    v2088 = v2086 + 340;
    while (1)
    {
      v2089 = (uint64_t *)(v2087 + 12 * v2083);
      v2090 = *(uint64_t **)(v2085 + 2512);
      if (v2090)
        break;
LABEL_2844:
      *(_WORD *)(v2088 + 2 * v2084) = *(_WORD *)(v2088 + 2 * v2083);
      if (v2083 != v2084)
      {
        v2097 = *v2089;
        v2098 = v2087 + 12 * v2084;
        *(_DWORD *)(v2098 + 8) = *((_DWORD *)v2089 + 2);
        *(_QWORD *)v2098 = v2097;
      }
      ++v2084;
LABEL_2828:
      if (++v2083 == v2082)
        goto LABEL_2847;
    }
    v2091 = *(_DWORD *)v2089;
    v2092 = *((_DWORD *)v2089 + 1);
    v2093 = *((_DWORD *)v2089 + 2);
    while (1)
    {
      v2094 = *((_DWORD *)v2090 + 7);
      if (v2091 == v2094)
      {
        v2095 = *((_DWORD *)v2090 + 8);
        if (v2092 == v2095)
        {
          v2096 = *((_DWORD *)v2090 + 9);
          if (v2093 < v2096)
            goto LABEL_2832;
          if (v2096 >= v2093)
            goto LABEL_2828;
        }
        else
        {
          if (v2092 < v2095)
            goto LABEL_2832;
          if (v2095 >= v2092)
            goto LABEL_2828;
        }
      }
      else
      {
        if (v2091 < v2094)
          goto LABEL_2832;
        if (v2094 >= v2091)
          goto LABEL_2828;
      }
      ++v2090;
LABEL_2832:
      v2090 = (uint64_t *)*v2090;
      if (!v2090)
        goto LABEL_2844;
    }
  }
  v2084 = 0;
LABEL_2847:
  *v2081 = v2084;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v173 = v3[227];
  if (v173 >> 30)
    v2099 = 1;
  else
    v2099 = (_DWORD)v173 == v5;
  if (v2099)
    goto LABEL_426;
LABEL_2851:
  v2100 = *(_QWORD *)(v1[2] + 8);
  v2101 = v173 & 0xFFFFFFFFCFFFFFFFLL;
  v2102 = *(_QWORD *)(*(_QWORD *)(v2100 + 8) + 2448);
  v2103 = (unsigned int *)(v2102 + 520 * (v173 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2104 = *v2103;
  if ((_DWORD)v2104)
  {
    v2105 = 0;
    v2106 = 0;
    v2107 = **(_QWORD **)(v2100 + 16);
    v2108 = v2102 + 520 * v2101;
    v2109 = v2108 + 364;
    v2110 = v2108 + 340;
    while (1)
    {
      v2111 = (uint64_t *)(v2109 + 12 * v2105);
      v2112 = *(uint64_t **)(v2107 + 2512);
      if (v2112)
        break;
LABEL_2870:
      *(_WORD *)(v2110 + 2 * v2106) = *(_WORD *)(v2110 + 2 * v2105);
      if (v2105 != v2106)
      {
        v2119 = *v2111;
        v2120 = v2109 + 12 * v2106;
        *(_DWORD *)(v2120 + 8) = *((_DWORD *)v2111 + 2);
        *(_QWORD *)v2120 = v2119;
      }
      ++v2106;
LABEL_2854:
      if (++v2105 == v2104)
        goto LABEL_2873;
    }
    v2113 = *(_DWORD *)v2111;
    v2114 = *((_DWORD *)v2111 + 1);
    v2115 = *((_DWORD *)v2111 + 2);
    while (1)
    {
      v2116 = *((_DWORD *)v2112 + 7);
      if (v2113 == v2116)
      {
        v2117 = *((_DWORD *)v2112 + 8);
        if (v2114 == v2117)
        {
          v2118 = *((_DWORD *)v2112 + 9);
          if (v2115 < v2118)
            goto LABEL_2858;
          if (v2118 >= v2115)
            goto LABEL_2854;
        }
        else
        {
          if (v2114 < v2117)
            goto LABEL_2858;
          if (v2117 >= v2114)
            goto LABEL_2854;
        }
      }
      else
      {
        if (v2113 < v2116)
          goto LABEL_2858;
        if (v2116 >= v2113)
          goto LABEL_2854;
      }
      ++v2112;
LABEL_2858:
      v2112 = (uint64_t *)*v2112;
      if (!v2112)
        goto LABEL_2870;
    }
  }
  v2106 = 0;
LABEL_2873:
  *v2103 = v2106;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v175 = v3[228];
  if (v175 >> 30)
    v2121 = 1;
  else
    v2121 = (_DWORD)v175 == v5;
  if (v2121)
    goto LABEL_431;
LABEL_2877:
  v2122 = *(_QWORD *)(v1[2] + 8);
  v2123 = v175 & 0xFFFFFFFFCFFFFFFFLL;
  v2124 = *(_QWORD *)(*(_QWORD *)(v2122 + 8) + 2448);
  v2125 = (unsigned int *)(v2124 + 520 * (v175 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2126 = *v2125;
  if ((_DWORD)v2126)
  {
    v2127 = 0;
    v2128 = 0;
    v2129 = **(_QWORD **)(v2122 + 16);
    v2130 = v2124 + 520 * v2123;
    v2131 = v2130 + 364;
    v2132 = v2130 + 340;
    while (1)
    {
      v2133 = (uint64_t *)(v2131 + 12 * v2127);
      v2134 = *(uint64_t **)(v2129 + 2512);
      if (v2134)
        break;
LABEL_2896:
      *(_WORD *)(v2132 + 2 * v2128) = *(_WORD *)(v2132 + 2 * v2127);
      if (v2127 != v2128)
      {
        v2141 = *v2133;
        v2142 = v2131 + 12 * v2128;
        *(_DWORD *)(v2142 + 8) = *((_DWORD *)v2133 + 2);
        *(_QWORD *)v2142 = v2141;
      }
      ++v2128;
LABEL_2880:
      if (++v2127 == v2126)
        goto LABEL_2899;
    }
    v2135 = *(_DWORD *)v2133;
    v2136 = *((_DWORD *)v2133 + 1);
    v2137 = *((_DWORD *)v2133 + 2);
    while (1)
    {
      v2138 = *((_DWORD *)v2134 + 7);
      if (v2135 == v2138)
      {
        v2139 = *((_DWORD *)v2134 + 8);
        if (v2136 == v2139)
        {
          v2140 = *((_DWORD *)v2134 + 9);
          if (v2137 < v2140)
            goto LABEL_2884;
          if (v2140 >= v2137)
            goto LABEL_2880;
        }
        else
        {
          if (v2136 < v2139)
            goto LABEL_2884;
          if (v2139 >= v2136)
            goto LABEL_2880;
        }
      }
      else
      {
        if (v2135 < v2138)
          goto LABEL_2884;
        if (v2138 >= v2135)
          goto LABEL_2880;
      }
      ++v2134;
LABEL_2884:
      v2134 = (uint64_t *)*v2134;
      if (!v2134)
        goto LABEL_2896;
    }
  }
  v2128 = 0;
LABEL_2899:
  *v2125 = v2128;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v177 = v3[229];
  if (v177 >> 30)
    v2143 = 1;
  else
    v2143 = (_DWORD)v177 == v5;
  if (v2143)
    goto LABEL_436;
LABEL_2903:
  v2144 = *(_QWORD *)(v1[2] + 8);
  v2145 = v177 & 0xFFFFFFFFCFFFFFFFLL;
  v2146 = *(_QWORD *)(*(_QWORD *)(v2144 + 8) + 2448);
  v2147 = (unsigned int *)(v2146 + 520 * (v177 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2148 = *v2147;
  if ((_DWORD)v2148)
  {
    v2149 = 0;
    v2150 = 0;
    v2151 = **(_QWORD **)(v2144 + 16);
    v2152 = v2146 + 520 * v2145;
    v2153 = v2152 + 364;
    v2154 = v2152 + 340;
    while (1)
    {
      v2155 = (uint64_t *)(v2153 + 12 * v2149);
      v2156 = *(uint64_t **)(v2151 + 2512);
      if (v2156)
        break;
LABEL_2922:
      *(_WORD *)(v2154 + 2 * v2150) = *(_WORD *)(v2154 + 2 * v2149);
      if (v2149 != v2150)
      {
        v2163 = *v2155;
        v2164 = v2153 + 12 * v2150;
        *(_DWORD *)(v2164 + 8) = *((_DWORD *)v2155 + 2);
        *(_QWORD *)v2164 = v2163;
      }
      ++v2150;
LABEL_2906:
      if (++v2149 == v2148)
        goto LABEL_2925;
    }
    v2157 = *(_DWORD *)v2155;
    v2158 = *((_DWORD *)v2155 + 1);
    v2159 = *((_DWORD *)v2155 + 2);
    while (1)
    {
      v2160 = *((_DWORD *)v2156 + 7);
      if (v2157 == v2160)
      {
        v2161 = *((_DWORD *)v2156 + 8);
        if (v2158 == v2161)
        {
          v2162 = *((_DWORD *)v2156 + 9);
          if (v2159 < v2162)
            goto LABEL_2910;
          if (v2162 >= v2159)
            goto LABEL_2906;
        }
        else
        {
          if (v2158 < v2161)
            goto LABEL_2910;
          if (v2161 >= v2158)
            goto LABEL_2906;
        }
      }
      else
      {
        if (v2157 < v2160)
          goto LABEL_2910;
        if (v2160 >= v2157)
          goto LABEL_2906;
      }
      ++v2156;
LABEL_2910:
      v2156 = (uint64_t *)*v2156;
      if (!v2156)
        goto LABEL_2922;
    }
  }
  v2150 = 0;
LABEL_2925:
  *v2147 = v2150;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v179 = v3[230];
  if (v179 >> 30)
    v2165 = 1;
  else
    v2165 = (_DWORD)v179 == v5;
  if (v2165)
    goto LABEL_441;
LABEL_2929:
  v2166 = *(_QWORD *)(v1[2] + 8);
  v2167 = v179 & 0xFFFFFFFFCFFFFFFFLL;
  v2168 = *(_QWORD *)(*(_QWORD *)(v2166 + 8) + 2448);
  v2169 = (unsigned int *)(v2168 + 520 * (v179 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2170 = *v2169;
  if ((_DWORD)v2170)
  {
    v2171 = 0;
    v2172 = 0;
    v2173 = **(_QWORD **)(v2166 + 16);
    v2174 = v2168 + 520 * v2167;
    v2175 = v2174 + 364;
    v2176 = v2174 + 340;
    while (1)
    {
      v2177 = (uint64_t *)(v2175 + 12 * v2171);
      v2178 = *(uint64_t **)(v2173 + 2512);
      if (v2178)
        break;
LABEL_2948:
      *(_WORD *)(v2176 + 2 * v2172) = *(_WORD *)(v2176 + 2 * v2171);
      if (v2171 != v2172)
      {
        v2185 = *v2177;
        v2186 = v2175 + 12 * v2172;
        *(_DWORD *)(v2186 + 8) = *((_DWORD *)v2177 + 2);
        *(_QWORD *)v2186 = v2185;
      }
      ++v2172;
LABEL_2932:
      if (++v2171 == v2170)
        goto LABEL_2951;
    }
    v2179 = *(_DWORD *)v2177;
    v2180 = *((_DWORD *)v2177 + 1);
    v2181 = *((_DWORD *)v2177 + 2);
    while (1)
    {
      v2182 = *((_DWORD *)v2178 + 7);
      if (v2179 == v2182)
      {
        v2183 = *((_DWORD *)v2178 + 8);
        if (v2180 == v2183)
        {
          v2184 = *((_DWORD *)v2178 + 9);
          if (v2181 < v2184)
            goto LABEL_2936;
          if (v2184 >= v2181)
            goto LABEL_2932;
        }
        else
        {
          if (v2180 < v2183)
            goto LABEL_2936;
          if (v2183 >= v2180)
            goto LABEL_2932;
        }
      }
      else
      {
        if (v2179 < v2182)
          goto LABEL_2936;
        if (v2182 >= v2179)
          goto LABEL_2932;
      }
      ++v2178;
LABEL_2936:
      v2178 = (uint64_t *)*v2178;
      if (!v2178)
        goto LABEL_2948;
    }
  }
  v2172 = 0;
LABEL_2951:
  *v2169 = v2172;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v181 = v3[231];
  if (v181 >> 30)
    v2187 = 1;
  else
    v2187 = (_DWORD)v181 == v5;
  if (v2187)
    goto LABEL_446;
LABEL_2955:
  v2188 = *(_QWORD *)(v1[2] + 8);
  v2189 = v181 & 0xFFFFFFFFCFFFFFFFLL;
  v2190 = *(_QWORD *)(*(_QWORD *)(v2188 + 8) + 2448);
  v2191 = (unsigned int *)(v2190 + 520 * (v181 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2192 = *v2191;
  if ((_DWORD)v2192)
  {
    v2193 = 0;
    v2194 = 0;
    v2195 = **(_QWORD **)(v2188 + 16);
    v2196 = v2190 + 520 * v2189;
    v2197 = v2196 + 364;
    v2198 = v2196 + 340;
    while (1)
    {
      v2199 = (uint64_t *)(v2197 + 12 * v2193);
      v2200 = *(uint64_t **)(v2195 + 2512);
      if (v2200)
        break;
LABEL_2974:
      *(_WORD *)(v2198 + 2 * v2194) = *(_WORD *)(v2198 + 2 * v2193);
      if (v2193 != v2194)
      {
        v2207 = *v2199;
        v2208 = v2197 + 12 * v2194;
        *(_DWORD *)(v2208 + 8) = *((_DWORD *)v2199 + 2);
        *(_QWORD *)v2208 = v2207;
      }
      ++v2194;
LABEL_2958:
      if (++v2193 == v2192)
        goto LABEL_2977;
    }
    v2201 = *(_DWORD *)v2199;
    v2202 = *((_DWORD *)v2199 + 1);
    v2203 = *((_DWORD *)v2199 + 2);
    while (1)
    {
      v2204 = *((_DWORD *)v2200 + 7);
      if (v2201 == v2204)
      {
        v2205 = *((_DWORD *)v2200 + 8);
        if (v2202 == v2205)
        {
          v2206 = *((_DWORD *)v2200 + 9);
          if (v2203 < v2206)
            goto LABEL_2962;
          if (v2206 >= v2203)
            goto LABEL_2958;
        }
        else
        {
          if (v2202 < v2205)
            goto LABEL_2962;
          if (v2205 >= v2202)
            goto LABEL_2958;
        }
      }
      else
      {
        if (v2201 < v2204)
          goto LABEL_2962;
        if (v2204 >= v2201)
          goto LABEL_2958;
      }
      ++v2200;
LABEL_2962:
      v2200 = (uint64_t *)*v2200;
      if (!v2200)
        goto LABEL_2974;
    }
  }
  v2194 = 0;
LABEL_2977:
  *v2191 = v2194;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v183 = v3[232];
  if (v183 >> 30)
    v2209 = 1;
  else
    v2209 = (_DWORD)v183 == v5;
  if (v2209)
    goto LABEL_451;
LABEL_2981:
  v2210 = *(_QWORD *)(v1[2] + 8);
  v2211 = v183 & 0xFFFFFFFFCFFFFFFFLL;
  v2212 = *(_QWORD *)(*(_QWORD *)(v2210 + 8) + 2448);
  v2213 = (unsigned int *)(v2212 + 520 * (v183 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2214 = *v2213;
  if ((_DWORD)v2214)
  {
    v2215 = 0;
    v2216 = 0;
    v2217 = **(_QWORD **)(v2210 + 16);
    v2218 = v2212 + 520 * v2211;
    v2219 = v2218 + 364;
    v2220 = v2218 + 340;
    while (1)
    {
      v2221 = (uint64_t *)(v2219 + 12 * v2215);
      v2222 = *(uint64_t **)(v2217 + 2512);
      if (v2222)
        break;
LABEL_3000:
      *(_WORD *)(v2220 + 2 * v2216) = *(_WORD *)(v2220 + 2 * v2215);
      if (v2215 != v2216)
      {
        v2229 = *v2221;
        v2230 = v2219 + 12 * v2216;
        *(_DWORD *)(v2230 + 8) = *((_DWORD *)v2221 + 2);
        *(_QWORD *)v2230 = v2229;
      }
      ++v2216;
LABEL_2984:
      if (++v2215 == v2214)
        goto LABEL_3003;
    }
    v2223 = *(_DWORD *)v2221;
    v2224 = *((_DWORD *)v2221 + 1);
    v2225 = *((_DWORD *)v2221 + 2);
    while (1)
    {
      v2226 = *((_DWORD *)v2222 + 7);
      if (v2223 == v2226)
      {
        v2227 = *((_DWORD *)v2222 + 8);
        if (v2224 == v2227)
        {
          v2228 = *((_DWORD *)v2222 + 9);
          if (v2225 < v2228)
            goto LABEL_2988;
          if (v2228 >= v2225)
            goto LABEL_2984;
        }
        else
        {
          if (v2224 < v2227)
            goto LABEL_2988;
          if (v2227 >= v2224)
            goto LABEL_2984;
        }
      }
      else
      {
        if (v2223 < v2226)
          goto LABEL_2988;
        if (v2226 >= v2223)
          goto LABEL_2984;
      }
      ++v2222;
LABEL_2988:
      v2222 = (uint64_t *)*v2222;
      if (!v2222)
        goto LABEL_3000;
    }
  }
  v2216 = 0;
LABEL_3003:
  *v2213 = v2216;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v185 = v3[233];
  if (v185 >> 30)
    v2231 = 1;
  else
    v2231 = (_DWORD)v185 == v5;
  if (v2231)
    goto LABEL_456;
LABEL_3007:
  v2232 = *(_QWORD *)(v1[2] + 8);
  v2233 = v185 & 0xFFFFFFFFCFFFFFFFLL;
  v2234 = *(_QWORD *)(*(_QWORD *)(v2232 + 8) + 2448);
  v2235 = (unsigned int *)(v2234 + 520 * (v185 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2236 = *v2235;
  if ((_DWORD)v2236)
  {
    v2237 = 0;
    v2238 = 0;
    v2239 = **(_QWORD **)(v2232 + 16);
    v2240 = v2234 + 520 * v2233;
    v2241 = v2240 + 364;
    v2242 = v2240 + 340;
    while (1)
    {
      v2243 = (uint64_t *)(v2241 + 12 * v2237);
      v2244 = *(uint64_t **)(v2239 + 2512);
      if (v2244)
        break;
LABEL_3026:
      *(_WORD *)(v2242 + 2 * v2238) = *(_WORD *)(v2242 + 2 * v2237);
      if (v2237 != v2238)
      {
        v2251 = *v2243;
        v2252 = v2241 + 12 * v2238;
        *(_DWORD *)(v2252 + 8) = *((_DWORD *)v2243 + 2);
        *(_QWORD *)v2252 = v2251;
      }
      ++v2238;
LABEL_3010:
      if (++v2237 == v2236)
        goto LABEL_3029;
    }
    v2245 = *(_DWORD *)v2243;
    v2246 = *((_DWORD *)v2243 + 1);
    v2247 = *((_DWORD *)v2243 + 2);
    while (1)
    {
      v2248 = *((_DWORD *)v2244 + 7);
      if (v2245 == v2248)
      {
        v2249 = *((_DWORD *)v2244 + 8);
        if (v2246 == v2249)
        {
          v2250 = *((_DWORD *)v2244 + 9);
          if (v2247 < v2250)
            goto LABEL_3014;
          if (v2250 >= v2247)
            goto LABEL_3010;
        }
        else
        {
          if (v2246 < v2249)
            goto LABEL_3014;
          if (v2249 >= v2246)
            goto LABEL_3010;
        }
      }
      else
      {
        if (v2245 < v2248)
          goto LABEL_3014;
        if (v2248 >= v2245)
          goto LABEL_3010;
      }
      ++v2244;
LABEL_3014:
      v2244 = (uint64_t *)*v2244;
      if (!v2244)
        goto LABEL_3026;
    }
  }
  v2238 = 0;
LABEL_3029:
  *v2235 = v2238;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v187 = v3[234];
  if (v187 >> 30)
    v2253 = 1;
  else
    v2253 = (_DWORD)v187 == v5;
  if (v2253)
    goto LABEL_461;
LABEL_3033:
  v2254 = *(_QWORD *)(v1[2] + 8);
  v2255 = v187 & 0xFFFFFFFFCFFFFFFFLL;
  v2256 = *(_QWORD *)(*(_QWORD *)(v2254 + 8) + 2448);
  v2257 = (unsigned int *)(v2256 + 520 * (v187 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2258 = *v2257;
  if ((_DWORD)v2258)
  {
    v2259 = 0;
    v2260 = 0;
    v2261 = **(_QWORD **)(v2254 + 16);
    v2262 = v2256 + 520 * v2255;
    v2263 = v2262 + 364;
    v2264 = v2262 + 340;
    while (1)
    {
      v2265 = (uint64_t *)(v2263 + 12 * v2259);
      v2266 = *(uint64_t **)(v2261 + 2512);
      if (v2266)
        break;
LABEL_3052:
      *(_WORD *)(v2264 + 2 * v2260) = *(_WORD *)(v2264 + 2 * v2259);
      if (v2259 != v2260)
      {
        v2273 = *v2265;
        v2274 = v2263 + 12 * v2260;
        *(_DWORD *)(v2274 + 8) = *((_DWORD *)v2265 + 2);
        *(_QWORD *)v2274 = v2273;
      }
      ++v2260;
LABEL_3036:
      if (++v2259 == v2258)
        goto LABEL_3055;
    }
    v2267 = *(_DWORD *)v2265;
    v2268 = *((_DWORD *)v2265 + 1);
    v2269 = *((_DWORD *)v2265 + 2);
    while (1)
    {
      v2270 = *((_DWORD *)v2266 + 7);
      if (v2267 == v2270)
      {
        v2271 = *((_DWORD *)v2266 + 8);
        if (v2268 == v2271)
        {
          v2272 = *((_DWORD *)v2266 + 9);
          if (v2269 < v2272)
            goto LABEL_3040;
          if (v2272 >= v2269)
            goto LABEL_3036;
        }
        else
        {
          if (v2268 < v2271)
            goto LABEL_3040;
          if (v2271 >= v2268)
            goto LABEL_3036;
        }
      }
      else
      {
        if (v2267 < v2270)
          goto LABEL_3040;
        if (v2270 >= v2267)
          goto LABEL_3036;
      }
      ++v2266;
LABEL_3040:
      v2266 = (uint64_t *)*v2266;
      if (!v2266)
        goto LABEL_3052;
    }
  }
  v2260 = 0;
LABEL_3055:
  *v2257 = v2260;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v189 = v3[235];
  if (v189 >> 30)
    v2275 = 1;
  else
    v2275 = (_DWORD)v189 == v5;
  if (v2275)
    goto LABEL_466;
LABEL_3059:
  v2276 = *(_QWORD *)(v1[2] + 8);
  v2277 = v189 & 0xFFFFFFFFCFFFFFFFLL;
  v2278 = *(_QWORD *)(*(_QWORD *)(v2276 + 8) + 2448);
  v2279 = (unsigned int *)(v2278 + 520 * (v189 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2280 = *v2279;
  if ((_DWORD)v2280)
  {
    v2281 = 0;
    v2282 = 0;
    v2283 = **(_QWORD **)(v2276 + 16);
    v2284 = v2278 + 520 * v2277;
    v2285 = v2284 + 364;
    v2286 = v2284 + 340;
    while (1)
    {
      v2287 = (uint64_t *)(v2285 + 12 * v2281);
      v2288 = *(uint64_t **)(v2283 + 2512);
      if (v2288)
        break;
LABEL_3078:
      *(_WORD *)(v2286 + 2 * v2282) = *(_WORD *)(v2286 + 2 * v2281);
      if (v2281 != v2282)
      {
        v2295 = *v2287;
        v2296 = v2285 + 12 * v2282;
        *(_DWORD *)(v2296 + 8) = *((_DWORD *)v2287 + 2);
        *(_QWORD *)v2296 = v2295;
      }
      ++v2282;
LABEL_3062:
      if (++v2281 == v2280)
        goto LABEL_3081;
    }
    v2289 = *(_DWORD *)v2287;
    v2290 = *((_DWORD *)v2287 + 1);
    v2291 = *((_DWORD *)v2287 + 2);
    while (1)
    {
      v2292 = *((_DWORD *)v2288 + 7);
      if (v2289 == v2292)
      {
        v2293 = *((_DWORD *)v2288 + 8);
        if (v2290 == v2293)
        {
          v2294 = *((_DWORD *)v2288 + 9);
          if (v2291 < v2294)
            goto LABEL_3066;
          if (v2294 >= v2291)
            goto LABEL_3062;
        }
        else
        {
          if (v2290 < v2293)
            goto LABEL_3066;
          if (v2293 >= v2290)
            goto LABEL_3062;
        }
      }
      else
      {
        if (v2289 < v2292)
          goto LABEL_3066;
        if (v2292 >= v2289)
          goto LABEL_3062;
      }
      ++v2288;
LABEL_3066:
      v2288 = (uint64_t *)*v2288;
      if (!v2288)
        goto LABEL_3078;
    }
  }
  v2282 = 0;
LABEL_3081:
  *v2279 = v2282;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v191 = v3[236];
  if (v191 >> 30)
    v2297 = 1;
  else
    v2297 = (_DWORD)v191 == v5;
  if (v2297)
    goto LABEL_471;
LABEL_3085:
  v2298 = *(_QWORD *)(v1[2] + 8);
  v2299 = v191 & 0xFFFFFFFFCFFFFFFFLL;
  v2300 = *(_QWORD *)(*(_QWORD *)(v2298 + 8) + 2448);
  v2301 = (unsigned int *)(v2300 + 520 * (v191 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2302 = *v2301;
  if ((_DWORD)v2302)
  {
    v2303 = 0;
    v2304 = 0;
    v2305 = **(_QWORD **)(v2298 + 16);
    v2306 = v2300 + 520 * v2299;
    v2307 = v2306 + 364;
    v2308 = v2306 + 340;
    while (1)
    {
      v2309 = (uint64_t *)(v2307 + 12 * v2303);
      v2310 = *(uint64_t **)(v2305 + 2512);
      if (v2310)
        break;
LABEL_3104:
      *(_WORD *)(v2308 + 2 * v2304) = *(_WORD *)(v2308 + 2 * v2303);
      if (v2303 != v2304)
      {
        v2317 = *v2309;
        v2318 = v2307 + 12 * v2304;
        *(_DWORD *)(v2318 + 8) = *((_DWORD *)v2309 + 2);
        *(_QWORD *)v2318 = v2317;
      }
      ++v2304;
LABEL_3088:
      if (++v2303 == v2302)
        goto LABEL_3107;
    }
    v2311 = *(_DWORD *)v2309;
    v2312 = *((_DWORD *)v2309 + 1);
    v2313 = *((_DWORD *)v2309 + 2);
    while (1)
    {
      v2314 = *((_DWORD *)v2310 + 7);
      if (v2311 == v2314)
      {
        v2315 = *((_DWORD *)v2310 + 8);
        if (v2312 == v2315)
        {
          v2316 = *((_DWORD *)v2310 + 9);
          if (v2313 < v2316)
            goto LABEL_3092;
          if (v2316 >= v2313)
            goto LABEL_3088;
        }
        else
        {
          if (v2312 < v2315)
            goto LABEL_3092;
          if (v2315 >= v2312)
            goto LABEL_3088;
        }
      }
      else
      {
        if (v2311 < v2314)
          goto LABEL_3092;
        if (v2314 >= v2311)
          goto LABEL_3088;
      }
      ++v2310;
LABEL_3092:
      v2310 = (uint64_t *)*v2310;
      if (!v2310)
        goto LABEL_3104;
    }
  }
  v2304 = 0;
LABEL_3107:
  *v2301 = v2304;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v193 = v3[237];
  if (v193 >> 30)
    v2319 = 1;
  else
    v2319 = (_DWORD)v193 == v5;
  if (v2319)
    goto LABEL_476;
LABEL_3111:
  v2320 = *(_QWORD *)(v1[2] + 8);
  v2321 = v193 & 0xFFFFFFFFCFFFFFFFLL;
  v2322 = *(_QWORD *)(*(_QWORD *)(v2320 + 8) + 2448);
  v2323 = (unsigned int *)(v2322 + 520 * (v193 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2324 = *v2323;
  if ((_DWORD)v2324)
  {
    v2325 = 0;
    v2326 = 0;
    v2327 = **(_QWORD **)(v2320 + 16);
    v2328 = v2322 + 520 * v2321;
    v2329 = v2328 + 364;
    v2330 = v2328 + 340;
    while (1)
    {
      v2331 = (uint64_t *)(v2329 + 12 * v2325);
      v2332 = *(uint64_t **)(v2327 + 2512);
      if (v2332)
        break;
LABEL_3130:
      *(_WORD *)(v2330 + 2 * v2326) = *(_WORD *)(v2330 + 2 * v2325);
      if (v2325 != v2326)
      {
        v2339 = *v2331;
        v2340 = v2329 + 12 * v2326;
        *(_DWORD *)(v2340 + 8) = *((_DWORD *)v2331 + 2);
        *(_QWORD *)v2340 = v2339;
      }
      ++v2326;
LABEL_3114:
      if (++v2325 == v2324)
        goto LABEL_3133;
    }
    v2333 = *(_DWORD *)v2331;
    v2334 = *((_DWORD *)v2331 + 1);
    v2335 = *((_DWORD *)v2331 + 2);
    while (1)
    {
      v2336 = *((_DWORD *)v2332 + 7);
      if (v2333 == v2336)
      {
        v2337 = *((_DWORD *)v2332 + 8);
        if (v2334 == v2337)
        {
          v2338 = *((_DWORD *)v2332 + 9);
          if (v2335 < v2338)
            goto LABEL_3118;
          if (v2338 >= v2335)
            goto LABEL_3114;
        }
        else
        {
          if (v2334 < v2337)
            goto LABEL_3118;
          if (v2337 >= v2334)
            goto LABEL_3114;
        }
      }
      else
      {
        if (v2333 < v2336)
          goto LABEL_3118;
        if (v2336 >= v2333)
          goto LABEL_3114;
      }
      ++v2332;
LABEL_3118:
      v2332 = (uint64_t *)*v2332;
      if (!v2332)
        goto LABEL_3130;
    }
  }
  v2326 = 0;
LABEL_3133:
  *v2323 = v2326;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v195 = v3[238];
  if (v195 >> 30)
    v2341 = 1;
  else
    v2341 = (_DWORD)v195 == v5;
  if (v2341)
    goto LABEL_481;
LABEL_3137:
  v2342 = *(_QWORD *)(v1[2] + 8);
  v2343 = v195 & 0xFFFFFFFFCFFFFFFFLL;
  v2344 = *(_QWORD *)(*(_QWORD *)(v2342 + 8) + 2448);
  v2345 = (unsigned int *)(v2344 + 520 * (v195 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2346 = *v2345;
  if ((_DWORD)v2346)
  {
    v2347 = 0;
    v2348 = 0;
    v2349 = **(_QWORD **)(v2342 + 16);
    v2350 = v2344 + 520 * v2343;
    v2351 = v2350 + 364;
    v2352 = v2350 + 340;
    while (1)
    {
      v2353 = (uint64_t *)(v2351 + 12 * v2347);
      v2354 = *(uint64_t **)(v2349 + 2512);
      if (v2354)
        break;
LABEL_3156:
      *(_WORD *)(v2352 + 2 * v2348) = *(_WORD *)(v2352 + 2 * v2347);
      if (v2347 != v2348)
      {
        v2361 = *v2353;
        v2362 = v2351 + 12 * v2348;
        *(_DWORD *)(v2362 + 8) = *((_DWORD *)v2353 + 2);
        *(_QWORD *)v2362 = v2361;
      }
      ++v2348;
LABEL_3140:
      if (++v2347 == v2346)
        goto LABEL_3159;
    }
    v2355 = *(_DWORD *)v2353;
    v2356 = *((_DWORD *)v2353 + 1);
    v2357 = *((_DWORD *)v2353 + 2);
    while (1)
    {
      v2358 = *((_DWORD *)v2354 + 7);
      if (v2355 == v2358)
      {
        v2359 = *((_DWORD *)v2354 + 8);
        if (v2356 == v2359)
        {
          v2360 = *((_DWORD *)v2354 + 9);
          if (v2357 < v2360)
            goto LABEL_3144;
          if (v2360 >= v2357)
            goto LABEL_3140;
        }
        else
        {
          if (v2356 < v2359)
            goto LABEL_3144;
          if (v2359 >= v2356)
            goto LABEL_3140;
        }
      }
      else
      {
        if (v2355 < v2358)
          goto LABEL_3144;
        if (v2358 >= v2355)
          goto LABEL_3140;
      }
      ++v2354;
LABEL_3144:
      v2354 = (uint64_t *)*v2354;
      if (!v2354)
        goto LABEL_3156;
    }
  }
  v2348 = 0;
LABEL_3159:
  *v2345 = v2348;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v197 = v3[239];
  if (v197 >> 30)
    v2363 = 1;
  else
    v2363 = (_DWORD)v197 == v5;
  if (v2363)
    goto LABEL_486;
LABEL_3163:
  v2364 = *(_QWORD *)(v1[2] + 8);
  v2365 = v197 & 0xFFFFFFFFCFFFFFFFLL;
  v2366 = *(_QWORD *)(*(_QWORD *)(v2364 + 8) + 2448);
  v2367 = (unsigned int *)(v2366 + 520 * (v197 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2368 = *v2367;
  if ((_DWORD)v2368)
  {
    v2369 = 0;
    v2370 = 0;
    v2371 = **(_QWORD **)(v2364 + 16);
    v2372 = v2366 + 520 * v2365;
    v2373 = v2372 + 364;
    v2374 = v2372 + 340;
    while (1)
    {
      v2375 = (uint64_t *)(v2373 + 12 * v2369);
      v2376 = *(uint64_t **)(v2371 + 2512);
      if (v2376)
        break;
LABEL_3182:
      *(_WORD *)(v2374 + 2 * v2370) = *(_WORD *)(v2374 + 2 * v2369);
      if (v2369 != v2370)
      {
        v2383 = *v2375;
        v2384 = v2373 + 12 * v2370;
        *(_DWORD *)(v2384 + 8) = *((_DWORD *)v2375 + 2);
        *(_QWORD *)v2384 = v2383;
      }
      ++v2370;
LABEL_3166:
      if (++v2369 == v2368)
        goto LABEL_3185;
    }
    v2377 = *(_DWORD *)v2375;
    v2378 = *((_DWORD *)v2375 + 1);
    v2379 = *((_DWORD *)v2375 + 2);
    while (1)
    {
      v2380 = *((_DWORD *)v2376 + 7);
      if (v2377 == v2380)
      {
        v2381 = *((_DWORD *)v2376 + 8);
        if (v2378 == v2381)
        {
          v2382 = *((_DWORD *)v2376 + 9);
          if (v2379 < v2382)
            goto LABEL_3170;
          if (v2382 >= v2379)
            goto LABEL_3166;
        }
        else
        {
          if (v2378 < v2381)
            goto LABEL_3170;
          if (v2381 >= v2378)
            goto LABEL_3166;
        }
      }
      else
      {
        if (v2377 < v2380)
          goto LABEL_3170;
        if (v2380 >= v2377)
          goto LABEL_3166;
      }
      ++v2376;
LABEL_3170:
      v2376 = (uint64_t *)*v2376;
      if (!v2376)
        goto LABEL_3182;
    }
  }
  v2370 = 0;
LABEL_3185:
  *v2367 = v2370;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v199 = v3[240];
  if (v199 >> 30)
    v2385 = 1;
  else
    v2385 = (_DWORD)v199 == v5;
  if (v2385)
    goto LABEL_491;
LABEL_3189:
  v2386 = *(_QWORD *)(v1[2] + 8);
  v2387 = v199 & 0xFFFFFFFFCFFFFFFFLL;
  v2388 = *(_QWORD *)(*(_QWORD *)(v2386 + 8) + 2448);
  v2389 = (unsigned int *)(v2388 + 520 * (v199 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2390 = *v2389;
  if ((_DWORD)v2390)
  {
    v2391 = 0;
    v2392 = 0;
    v2393 = **(_QWORD **)(v2386 + 16);
    v2394 = v2388 + 520 * v2387;
    v2395 = v2394 + 364;
    v2396 = v2394 + 340;
    while (1)
    {
      v2397 = (uint64_t *)(v2395 + 12 * v2391);
      v2398 = *(uint64_t **)(v2393 + 2512);
      if (v2398)
        break;
LABEL_3208:
      *(_WORD *)(v2396 + 2 * v2392) = *(_WORD *)(v2396 + 2 * v2391);
      if (v2391 != v2392)
      {
        v2405 = *v2397;
        v2406 = v2395 + 12 * v2392;
        *(_DWORD *)(v2406 + 8) = *((_DWORD *)v2397 + 2);
        *(_QWORD *)v2406 = v2405;
      }
      ++v2392;
LABEL_3192:
      if (++v2391 == v2390)
        goto LABEL_3211;
    }
    v2399 = *(_DWORD *)v2397;
    v2400 = *((_DWORD *)v2397 + 1);
    v2401 = *((_DWORD *)v2397 + 2);
    while (1)
    {
      v2402 = *((_DWORD *)v2398 + 7);
      if (v2399 == v2402)
      {
        v2403 = *((_DWORD *)v2398 + 8);
        if (v2400 == v2403)
        {
          v2404 = *((_DWORD *)v2398 + 9);
          if (v2401 < v2404)
            goto LABEL_3196;
          if (v2404 >= v2401)
            goto LABEL_3192;
        }
        else
        {
          if (v2400 < v2403)
            goto LABEL_3196;
          if (v2403 >= v2400)
            goto LABEL_3192;
        }
      }
      else
      {
        if (v2399 < v2402)
          goto LABEL_3196;
        if (v2402 >= v2399)
          goto LABEL_3192;
      }
      ++v2398;
LABEL_3196:
      v2398 = (uint64_t *)*v2398;
      if (!v2398)
        goto LABEL_3208;
    }
  }
  v2392 = 0;
LABEL_3211:
  *v2389 = v2392;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v201 = v3[241];
  if (v201 >> 30)
    v2407 = 1;
  else
    v2407 = (_DWORD)v201 == v5;
  if (v2407)
    goto LABEL_496;
LABEL_3215:
  v2408 = *(_QWORD *)(v1[2] + 8);
  v2409 = v201 & 0xFFFFFFFFCFFFFFFFLL;
  v2410 = *(_QWORD *)(*(_QWORD *)(v2408 + 8) + 2448);
  v2411 = (unsigned int *)(v2410 + 520 * (v201 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2412 = *v2411;
  if ((_DWORD)v2412)
  {
    v2413 = 0;
    v2414 = 0;
    v2415 = **(_QWORD **)(v2408 + 16);
    v2416 = v2410 + 520 * v2409;
    v2417 = v2416 + 364;
    v2418 = v2416 + 340;
    while (1)
    {
      v2419 = (uint64_t *)(v2417 + 12 * v2413);
      v2420 = *(uint64_t **)(v2415 + 2512);
      if (v2420)
        break;
LABEL_3234:
      *(_WORD *)(v2418 + 2 * v2414) = *(_WORD *)(v2418 + 2 * v2413);
      if (v2413 != v2414)
      {
        v2427 = *v2419;
        v2428 = v2417 + 12 * v2414;
        *(_DWORD *)(v2428 + 8) = *((_DWORD *)v2419 + 2);
        *(_QWORD *)v2428 = v2427;
      }
      ++v2414;
LABEL_3218:
      if (++v2413 == v2412)
        goto LABEL_3237;
    }
    v2421 = *(_DWORD *)v2419;
    v2422 = *((_DWORD *)v2419 + 1);
    v2423 = *((_DWORD *)v2419 + 2);
    while (1)
    {
      v2424 = *((_DWORD *)v2420 + 7);
      if (v2421 == v2424)
      {
        v2425 = *((_DWORD *)v2420 + 8);
        if (v2422 == v2425)
        {
          v2426 = *((_DWORD *)v2420 + 9);
          if (v2423 < v2426)
            goto LABEL_3222;
          if (v2426 >= v2423)
            goto LABEL_3218;
        }
        else
        {
          if (v2422 < v2425)
            goto LABEL_3222;
          if (v2425 >= v2422)
            goto LABEL_3218;
        }
      }
      else
      {
        if (v2421 < v2424)
          goto LABEL_3222;
        if (v2424 >= v2421)
          goto LABEL_3218;
      }
      ++v2420;
LABEL_3222:
      v2420 = (uint64_t *)*v2420;
      if (!v2420)
        goto LABEL_3234;
    }
  }
  v2414 = 0;
LABEL_3237:
  *v2411 = v2414;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v203 = v3[242];
  if (v203 >> 30)
    v2429 = 1;
  else
    v2429 = (_DWORD)v203 == v5;
  if (v2429)
    goto LABEL_501;
LABEL_3241:
  v2430 = *(_QWORD *)(v1[2] + 8);
  v2431 = v203 & 0xFFFFFFFFCFFFFFFFLL;
  v2432 = *(_QWORD *)(*(_QWORD *)(v2430 + 8) + 2448);
  v2433 = (unsigned int *)(v2432 + 520 * (v203 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2434 = *v2433;
  if ((_DWORD)v2434)
  {
    v2435 = 0;
    v2436 = 0;
    v2437 = **(_QWORD **)(v2430 + 16);
    v2438 = v2432 + 520 * v2431;
    v2439 = v2438 + 364;
    v2440 = v2438 + 340;
    while (1)
    {
      v2441 = (uint64_t *)(v2439 + 12 * v2435);
      v2442 = *(uint64_t **)(v2437 + 2512);
      if (v2442)
        break;
LABEL_3260:
      *(_WORD *)(v2440 + 2 * v2436) = *(_WORD *)(v2440 + 2 * v2435);
      if (v2435 != v2436)
      {
        v2449 = *v2441;
        v2450 = v2439 + 12 * v2436;
        *(_DWORD *)(v2450 + 8) = *((_DWORD *)v2441 + 2);
        *(_QWORD *)v2450 = v2449;
      }
      ++v2436;
LABEL_3244:
      if (++v2435 == v2434)
        goto LABEL_3263;
    }
    v2443 = *(_DWORD *)v2441;
    v2444 = *((_DWORD *)v2441 + 1);
    v2445 = *((_DWORD *)v2441 + 2);
    while (1)
    {
      v2446 = *((_DWORD *)v2442 + 7);
      if (v2443 == v2446)
      {
        v2447 = *((_DWORD *)v2442 + 8);
        if (v2444 == v2447)
        {
          v2448 = *((_DWORD *)v2442 + 9);
          if (v2445 < v2448)
            goto LABEL_3248;
          if (v2448 >= v2445)
            goto LABEL_3244;
        }
        else
        {
          if (v2444 < v2447)
            goto LABEL_3248;
          if (v2447 >= v2444)
            goto LABEL_3244;
        }
      }
      else
      {
        if (v2443 < v2446)
          goto LABEL_3248;
        if (v2446 >= v2443)
          goto LABEL_3244;
      }
      ++v2442;
LABEL_3248:
      v2442 = (uint64_t *)*v2442;
      if (!v2442)
        goto LABEL_3260;
    }
  }
  v2436 = 0;
LABEL_3263:
  *v2433 = v2436;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v205 = v3[243];
  if (v205 >> 30)
    v2451 = 1;
  else
    v2451 = (_DWORD)v205 == v5;
  if (v2451)
    goto LABEL_506;
LABEL_3267:
  v2452 = *(_QWORD *)(v1[2] + 8);
  v2453 = v205 & 0xFFFFFFFFCFFFFFFFLL;
  v2454 = *(_QWORD *)(*(_QWORD *)(v2452 + 8) + 2448);
  v2455 = (unsigned int *)(v2454 + 520 * (v205 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2456 = *v2455;
  if ((_DWORD)v2456)
  {
    v2457 = 0;
    v2458 = 0;
    v2459 = **(_QWORD **)(v2452 + 16);
    v2460 = v2454 + 520 * v2453;
    v2461 = v2460 + 364;
    v2462 = v2460 + 340;
    while (1)
    {
      v2463 = (uint64_t *)(v2461 + 12 * v2457);
      v2464 = *(uint64_t **)(v2459 + 2512);
      if (v2464)
        break;
LABEL_3286:
      *(_WORD *)(v2462 + 2 * v2458) = *(_WORD *)(v2462 + 2 * v2457);
      if (v2457 != v2458)
      {
        v2471 = *v2463;
        v2472 = v2461 + 12 * v2458;
        *(_DWORD *)(v2472 + 8) = *((_DWORD *)v2463 + 2);
        *(_QWORD *)v2472 = v2471;
      }
      ++v2458;
LABEL_3270:
      if (++v2457 == v2456)
        goto LABEL_3289;
    }
    v2465 = *(_DWORD *)v2463;
    v2466 = *((_DWORD *)v2463 + 1);
    v2467 = *((_DWORD *)v2463 + 2);
    while (1)
    {
      v2468 = *((_DWORD *)v2464 + 7);
      if (v2465 == v2468)
      {
        v2469 = *((_DWORD *)v2464 + 8);
        if (v2466 == v2469)
        {
          v2470 = *((_DWORD *)v2464 + 9);
          if (v2467 < v2470)
            goto LABEL_3274;
          if (v2470 >= v2467)
            goto LABEL_3270;
        }
        else
        {
          if (v2466 < v2469)
            goto LABEL_3274;
          if (v2469 >= v2466)
            goto LABEL_3270;
        }
      }
      else
      {
        if (v2465 < v2468)
          goto LABEL_3274;
        if (v2468 >= v2465)
          goto LABEL_3270;
      }
      ++v2464;
LABEL_3274:
      v2464 = (uint64_t *)*v2464;
      if (!v2464)
        goto LABEL_3286;
    }
  }
  v2458 = 0;
LABEL_3289:
  *v2455 = v2458;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v207 = v3[244];
  if (v207 >> 30)
    v2473 = 1;
  else
    v2473 = (_DWORD)v207 == v5;
  if (v2473)
    goto LABEL_511;
LABEL_3293:
  v2474 = *(_QWORD *)(v1[2] + 8);
  v2475 = v207 & 0xFFFFFFFFCFFFFFFFLL;
  v2476 = *(_QWORD *)(*(_QWORD *)(v2474 + 8) + 2448);
  v2477 = (unsigned int *)(v2476 + 520 * (v207 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2478 = *v2477;
  if ((_DWORD)v2478)
  {
    v2479 = 0;
    v2480 = 0;
    v2481 = **(_QWORD **)(v2474 + 16);
    v2482 = v2476 + 520 * v2475;
    v2483 = v2482 + 364;
    v2484 = v2482 + 340;
    while (1)
    {
      v2485 = (uint64_t *)(v2483 + 12 * v2479);
      v2486 = *(uint64_t **)(v2481 + 2512);
      if (v2486)
        break;
LABEL_3312:
      *(_WORD *)(v2484 + 2 * v2480) = *(_WORD *)(v2484 + 2 * v2479);
      if (v2479 != v2480)
      {
        v2493 = *v2485;
        v2494 = v2483 + 12 * v2480;
        *(_DWORD *)(v2494 + 8) = *((_DWORD *)v2485 + 2);
        *(_QWORD *)v2494 = v2493;
      }
      ++v2480;
LABEL_3296:
      if (++v2479 == v2478)
        goto LABEL_3315;
    }
    v2487 = *(_DWORD *)v2485;
    v2488 = *((_DWORD *)v2485 + 1);
    v2489 = *((_DWORD *)v2485 + 2);
    while (1)
    {
      v2490 = *((_DWORD *)v2486 + 7);
      if (v2487 == v2490)
      {
        v2491 = *((_DWORD *)v2486 + 8);
        if (v2488 == v2491)
        {
          v2492 = *((_DWORD *)v2486 + 9);
          if (v2489 < v2492)
            goto LABEL_3300;
          if (v2492 >= v2489)
            goto LABEL_3296;
        }
        else
        {
          if (v2488 < v2491)
            goto LABEL_3300;
          if (v2491 >= v2488)
            goto LABEL_3296;
        }
      }
      else
      {
        if (v2487 < v2490)
          goto LABEL_3300;
        if (v2490 >= v2487)
          goto LABEL_3296;
      }
      ++v2486;
LABEL_3300:
      v2486 = (uint64_t *)*v2486;
      if (!v2486)
        goto LABEL_3312;
    }
  }
  v2480 = 0;
LABEL_3315:
  *v2477 = v2480;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v209 = v3[245];
  if (v209 >> 30)
    v2495 = 1;
  else
    v2495 = (_DWORD)v209 == v5;
  if (v2495)
    goto LABEL_516;
LABEL_3319:
  v2496 = *(_QWORD *)(v1[2] + 8);
  v2497 = v209 & 0xFFFFFFFFCFFFFFFFLL;
  v2498 = *(_QWORD *)(*(_QWORD *)(v2496 + 8) + 2448);
  v2499 = (unsigned int *)(v2498 + 520 * (v209 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2500 = *v2499;
  if ((_DWORD)v2500)
  {
    v2501 = 0;
    v2502 = 0;
    v2503 = **(_QWORD **)(v2496 + 16);
    v2504 = v2498 + 520 * v2497;
    v2505 = v2504 + 364;
    v2506 = v2504 + 340;
    while (1)
    {
      v2507 = (uint64_t *)(v2505 + 12 * v2501);
      v2508 = *(uint64_t **)(v2503 + 2512);
      if (v2508)
        break;
LABEL_3338:
      *(_WORD *)(v2506 + 2 * v2502) = *(_WORD *)(v2506 + 2 * v2501);
      if (v2501 != v2502)
      {
        v2515 = *v2507;
        v2516 = v2505 + 12 * v2502;
        *(_DWORD *)(v2516 + 8) = *((_DWORD *)v2507 + 2);
        *(_QWORD *)v2516 = v2515;
      }
      ++v2502;
LABEL_3322:
      if (++v2501 == v2500)
        goto LABEL_3341;
    }
    v2509 = *(_DWORD *)v2507;
    v2510 = *((_DWORD *)v2507 + 1);
    v2511 = *((_DWORD *)v2507 + 2);
    while (1)
    {
      v2512 = *((_DWORD *)v2508 + 7);
      if (v2509 == v2512)
      {
        v2513 = *((_DWORD *)v2508 + 8);
        if (v2510 == v2513)
        {
          v2514 = *((_DWORD *)v2508 + 9);
          if (v2511 < v2514)
            goto LABEL_3326;
          if (v2514 >= v2511)
            goto LABEL_3322;
        }
        else
        {
          if (v2510 < v2513)
            goto LABEL_3326;
          if (v2513 >= v2510)
            goto LABEL_3322;
        }
      }
      else
      {
        if (v2509 < v2512)
          goto LABEL_3326;
        if (v2512 >= v2509)
          goto LABEL_3322;
      }
      ++v2508;
LABEL_3326:
      v2508 = (uint64_t *)*v2508;
      if (!v2508)
        goto LABEL_3338;
    }
  }
  v2502 = 0;
LABEL_3341:
  *v2499 = v2502;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v211 = v3[246];
  if (v211 >> 30)
    v2517 = 1;
  else
    v2517 = (_DWORD)v211 == v5;
  if (v2517)
    goto LABEL_521;
LABEL_3345:
  v2518 = *(_QWORD *)(v1[2] + 8);
  v2519 = v211 & 0xFFFFFFFFCFFFFFFFLL;
  v2520 = *(_QWORD *)(*(_QWORD *)(v2518 + 8) + 2448);
  v2521 = (unsigned int *)(v2520 + 520 * (v211 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2522 = *v2521;
  if ((_DWORD)v2522)
  {
    v2523 = 0;
    v2524 = 0;
    v2525 = **(_QWORD **)(v2518 + 16);
    v2526 = v2520 + 520 * v2519;
    v2527 = v2526 + 364;
    v2528 = v2526 + 340;
    while (1)
    {
      v2529 = (uint64_t *)(v2527 + 12 * v2523);
      v2530 = *(uint64_t **)(v2525 + 2512);
      if (v2530)
        break;
LABEL_3364:
      *(_WORD *)(v2528 + 2 * v2524) = *(_WORD *)(v2528 + 2 * v2523);
      if (v2523 != v2524)
      {
        v2537 = *v2529;
        v2538 = v2527 + 12 * v2524;
        *(_DWORD *)(v2538 + 8) = *((_DWORD *)v2529 + 2);
        *(_QWORD *)v2538 = v2537;
      }
      ++v2524;
LABEL_3348:
      if (++v2523 == v2522)
        goto LABEL_3367;
    }
    v2531 = *(_DWORD *)v2529;
    v2532 = *((_DWORD *)v2529 + 1);
    v2533 = *((_DWORD *)v2529 + 2);
    while (1)
    {
      v2534 = *((_DWORD *)v2530 + 7);
      if (v2531 == v2534)
      {
        v2535 = *((_DWORD *)v2530 + 8);
        if (v2532 == v2535)
        {
          v2536 = *((_DWORD *)v2530 + 9);
          if (v2533 < v2536)
            goto LABEL_3352;
          if (v2536 >= v2533)
            goto LABEL_3348;
        }
        else
        {
          if (v2532 < v2535)
            goto LABEL_3352;
          if (v2535 >= v2532)
            goto LABEL_3348;
        }
      }
      else
      {
        if (v2531 < v2534)
          goto LABEL_3352;
        if (v2534 >= v2531)
          goto LABEL_3348;
      }
      ++v2530;
LABEL_3352:
      v2530 = (uint64_t *)*v2530;
      if (!v2530)
        goto LABEL_3364;
    }
  }
  v2524 = 0;
LABEL_3367:
  *v2521 = v2524;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v213 = v3[247];
  if (v213 >> 30)
    v2539 = 1;
  else
    v2539 = (_DWORD)v213 == v5;
  if (v2539)
    goto LABEL_526;
LABEL_3371:
  v2540 = *(_QWORD *)(v1[2] + 8);
  v2541 = v213 & 0xFFFFFFFFCFFFFFFFLL;
  v2542 = *(_QWORD *)(*(_QWORD *)(v2540 + 8) + 2448);
  v2543 = (unsigned int *)(v2542 + 520 * (v213 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2544 = *v2543;
  if ((_DWORD)v2544)
  {
    v2545 = 0;
    v2546 = 0;
    v2547 = **(_QWORD **)(v2540 + 16);
    v2548 = v2542 + 520 * v2541;
    v2549 = v2548 + 364;
    v2550 = v2548 + 340;
    while (1)
    {
      v2551 = (uint64_t *)(v2549 + 12 * v2545);
      v2552 = *(uint64_t **)(v2547 + 2512);
      if (v2552)
        break;
LABEL_3390:
      *(_WORD *)(v2550 + 2 * v2546) = *(_WORD *)(v2550 + 2 * v2545);
      if (v2545 != v2546)
      {
        v2559 = *v2551;
        v2560 = v2549 + 12 * v2546;
        *(_DWORD *)(v2560 + 8) = *((_DWORD *)v2551 + 2);
        *(_QWORD *)v2560 = v2559;
      }
      ++v2546;
LABEL_3374:
      if (++v2545 == v2544)
        goto LABEL_3393;
    }
    v2553 = *(_DWORD *)v2551;
    v2554 = *((_DWORD *)v2551 + 1);
    v2555 = *((_DWORD *)v2551 + 2);
    while (1)
    {
      v2556 = *((_DWORD *)v2552 + 7);
      if (v2553 == v2556)
      {
        v2557 = *((_DWORD *)v2552 + 8);
        if (v2554 == v2557)
        {
          v2558 = *((_DWORD *)v2552 + 9);
          if (v2555 < v2558)
            goto LABEL_3378;
          if (v2558 >= v2555)
            goto LABEL_3374;
        }
        else
        {
          if (v2554 < v2557)
            goto LABEL_3378;
          if (v2557 >= v2554)
            goto LABEL_3374;
        }
      }
      else
      {
        if (v2553 < v2556)
          goto LABEL_3378;
        if (v2556 >= v2553)
          goto LABEL_3374;
      }
      ++v2552;
LABEL_3378:
      v2552 = (uint64_t *)*v2552;
      if (!v2552)
        goto LABEL_3390;
    }
  }
  v2546 = 0;
LABEL_3393:
  *v2543 = v2546;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v215 = v3[248];
  if (v215 >> 30)
    v2561 = 1;
  else
    v2561 = (_DWORD)v215 == v5;
  if (v2561)
    goto LABEL_531;
LABEL_3397:
  v2562 = *(_QWORD *)(v1[2] + 8);
  v2563 = v215 & 0xFFFFFFFFCFFFFFFFLL;
  v2564 = *(_QWORD *)(*(_QWORD *)(v2562 + 8) + 2448);
  v2565 = (unsigned int *)(v2564 + 520 * (v215 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2566 = *v2565;
  if ((_DWORD)v2566)
  {
    v2567 = 0;
    v2568 = 0;
    v2569 = **(_QWORD **)(v2562 + 16);
    v2570 = v2564 + 520 * v2563;
    v2571 = v2570 + 364;
    v2572 = v2570 + 340;
    while (1)
    {
      v2573 = (uint64_t *)(v2571 + 12 * v2567);
      v2574 = *(uint64_t **)(v2569 + 2512);
      if (v2574)
        break;
LABEL_3416:
      *(_WORD *)(v2572 + 2 * v2568) = *(_WORD *)(v2572 + 2 * v2567);
      if (v2567 != v2568)
      {
        v2581 = *v2573;
        v2582 = v2571 + 12 * v2568;
        *(_DWORD *)(v2582 + 8) = *((_DWORD *)v2573 + 2);
        *(_QWORD *)v2582 = v2581;
      }
      ++v2568;
LABEL_3400:
      if (++v2567 == v2566)
        goto LABEL_3419;
    }
    v2575 = *(_DWORD *)v2573;
    v2576 = *((_DWORD *)v2573 + 1);
    v2577 = *((_DWORD *)v2573 + 2);
    while (1)
    {
      v2578 = *((_DWORD *)v2574 + 7);
      if (v2575 == v2578)
      {
        v2579 = *((_DWORD *)v2574 + 8);
        if (v2576 == v2579)
        {
          v2580 = *((_DWORD *)v2574 + 9);
          if (v2577 < v2580)
            goto LABEL_3404;
          if (v2580 >= v2577)
            goto LABEL_3400;
        }
        else
        {
          if (v2576 < v2579)
            goto LABEL_3404;
          if (v2579 >= v2576)
            goto LABEL_3400;
        }
      }
      else
      {
        if (v2575 < v2578)
          goto LABEL_3404;
        if (v2578 >= v2575)
          goto LABEL_3400;
      }
      ++v2574;
LABEL_3404:
      v2574 = (uint64_t *)*v2574;
      if (!v2574)
        goto LABEL_3416;
    }
  }
  v2568 = 0;
LABEL_3419:
  *v2565 = v2568;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v217 = v3[249];
  if (v217 >> 30)
    v2583 = 1;
  else
    v2583 = (_DWORD)v217 == v5;
  if (v2583)
    goto LABEL_536;
LABEL_3423:
  v2584 = *(_QWORD *)(v1[2] + 8);
  v2585 = v217 & 0xFFFFFFFFCFFFFFFFLL;
  v2586 = *(_QWORD *)(*(_QWORD *)(v2584 + 8) + 2448);
  v2587 = (unsigned int *)(v2586 + 520 * (v217 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2588 = *v2587;
  if ((_DWORD)v2588)
  {
    v2589 = 0;
    v2590 = 0;
    v2591 = **(_QWORD **)(v2584 + 16);
    v2592 = v2586 + 520 * v2585;
    v2593 = v2592 + 364;
    v2594 = v2592 + 340;
    while (1)
    {
      v2595 = (uint64_t *)(v2593 + 12 * v2589);
      v2596 = *(uint64_t **)(v2591 + 2512);
      if (v2596)
        break;
LABEL_3442:
      *(_WORD *)(v2594 + 2 * v2590) = *(_WORD *)(v2594 + 2 * v2589);
      if (v2589 != v2590)
      {
        v2603 = *v2595;
        v2604 = v2593 + 12 * v2590;
        *(_DWORD *)(v2604 + 8) = *((_DWORD *)v2595 + 2);
        *(_QWORD *)v2604 = v2603;
      }
      ++v2590;
LABEL_3426:
      if (++v2589 == v2588)
        goto LABEL_3445;
    }
    v2597 = *(_DWORD *)v2595;
    v2598 = *((_DWORD *)v2595 + 1);
    v2599 = *((_DWORD *)v2595 + 2);
    while (1)
    {
      v2600 = *((_DWORD *)v2596 + 7);
      if (v2597 == v2600)
      {
        v2601 = *((_DWORD *)v2596 + 8);
        if (v2598 == v2601)
        {
          v2602 = *((_DWORD *)v2596 + 9);
          if (v2599 < v2602)
            goto LABEL_3430;
          if (v2602 >= v2599)
            goto LABEL_3426;
        }
        else
        {
          if (v2598 < v2601)
            goto LABEL_3430;
          if (v2601 >= v2598)
            goto LABEL_3426;
        }
      }
      else
      {
        if (v2597 < v2600)
          goto LABEL_3430;
        if (v2600 >= v2597)
          goto LABEL_3426;
      }
      ++v2596;
LABEL_3430:
      v2596 = (uint64_t *)*v2596;
      if (!v2596)
        goto LABEL_3442;
    }
  }
  v2590 = 0;
LABEL_3445:
  *v2587 = v2590;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v219 = v3[250];
  if (v219 >> 30)
    v2605 = 1;
  else
    v2605 = (_DWORD)v219 == v5;
  if (v2605)
    goto LABEL_541;
LABEL_3449:
  v2606 = *(_QWORD *)(v1[2] + 8);
  v2607 = v219 & 0xFFFFFFFFCFFFFFFFLL;
  v2608 = *(_QWORD *)(*(_QWORD *)(v2606 + 8) + 2448);
  v2609 = (unsigned int *)(v2608 + 520 * (v219 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2610 = *v2609;
  if ((_DWORD)v2610)
  {
    v2611 = 0;
    v2612 = 0;
    v2613 = **(_QWORD **)(v2606 + 16);
    v2614 = v2608 + 520 * v2607;
    v2615 = v2614 + 364;
    v2616 = v2614 + 340;
    while (1)
    {
      v2617 = (uint64_t *)(v2615 + 12 * v2611);
      v2618 = *(uint64_t **)(v2613 + 2512);
      if (v2618)
        break;
LABEL_3468:
      *(_WORD *)(v2616 + 2 * v2612) = *(_WORD *)(v2616 + 2 * v2611);
      if (v2611 != v2612)
      {
        v2625 = *v2617;
        v2626 = v2615 + 12 * v2612;
        *(_DWORD *)(v2626 + 8) = *((_DWORD *)v2617 + 2);
        *(_QWORD *)v2626 = v2625;
      }
      ++v2612;
LABEL_3452:
      if (++v2611 == v2610)
        goto LABEL_3471;
    }
    v2619 = *(_DWORD *)v2617;
    v2620 = *((_DWORD *)v2617 + 1);
    v2621 = *((_DWORD *)v2617 + 2);
    while (1)
    {
      v2622 = *((_DWORD *)v2618 + 7);
      if (v2619 == v2622)
      {
        v2623 = *((_DWORD *)v2618 + 8);
        if (v2620 == v2623)
        {
          v2624 = *((_DWORD *)v2618 + 9);
          if (v2621 < v2624)
            goto LABEL_3456;
          if (v2624 >= v2621)
            goto LABEL_3452;
        }
        else
        {
          if (v2620 < v2623)
            goto LABEL_3456;
          if (v2623 >= v2620)
            goto LABEL_3452;
        }
      }
      else
      {
        if (v2619 < v2622)
          goto LABEL_3456;
        if (v2622 >= v2619)
          goto LABEL_3452;
      }
      ++v2618;
LABEL_3456:
      v2618 = (uint64_t *)*v2618;
      if (!v2618)
        goto LABEL_3468;
    }
  }
  v2612 = 0;
LABEL_3471:
  *v2609 = v2612;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v221 = v3[251];
  if (v221 >> 30)
    v2627 = 1;
  else
    v2627 = (_DWORD)v221 == v5;
  if (v2627)
    goto LABEL_546;
LABEL_3475:
  v2628 = *(_QWORD *)(v1[2] + 8);
  v2629 = v221 & 0xFFFFFFFFCFFFFFFFLL;
  v2630 = *(_QWORD *)(*(_QWORD *)(v2628 + 8) + 2448);
  v2631 = (unsigned int *)(v2630 + 520 * (v221 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2632 = *v2631;
  if ((_DWORD)v2632)
  {
    v2633 = 0;
    v2634 = 0;
    v2635 = **(_QWORD **)(v2628 + 16);
    v2636 = v2630 + 520 * v2629;
    v2637 = v2636 + 364;
    v2638 = v2636 + 340;
    while (1)
    {
      v2639 = (uint64_t *)(v2637 + 12 * v2633);
      v2640 = *(uint64_t **)(v2635 + 2512);
      if (v2640)
        break;
LABEL_3494:
      *(_WORD *)(v2638 + 2 * v2634) = *(_WORD *)(v2638 + 2 * v2633);
      if (v2633 != v2634)
      {
        v2647 = *v2639;
        v2648 = v2637 + 12 * v2634;
        *(_DWORD *)(v2648 + 8) = *((_DWORD *)v2639 + 2);
        *(_QWORD *)v2648 = v2647;
      }
      ++v2634;
LABEL_3478:
      if (++v2633 == v2632)
        goto LABEL_3497;
    }
    v2641 = *(_DWORD *)v2639;
    v2642 = *((_DWORD *)v2639 + 1);
    v2643 = *((_DWORD *)v2639 + 2);
    while (1)
    {
      v2644 = *((_DWORD *)v2640 + 7);
      if (v2641 == v2644)
      {
        v2645 = *((_DWORD *)v2640 + 8);
        if (v2642 == v2645)
        {
          v2646 = *((_DWORD *)v2640 + 9);
          if (v2643 < v2646)
            goto LABEL_3482;
          if (v2646 >= v2643)
            goto LABEL_3478;
        }
        else
        {
          if (v2642 < v2645)
            goto LABEL_3482;
          if (v2645 >= v2642)
            goto LABEL_3478;
        }
      }
      else
      {
        if (v2641 < v2644)
          goto LABEL_3482;
        if (v2644 >= v2641)
          goto LABEL_3478;
      }
      ++v2640;
LABEL_3482:
      v2640 = (uint64_t *)*v2640;
      if (!v2640)
        goto LABEL_3494;
    }
  }
  v2634 = 0;
LABEL_3497:
  *v2631 = v2634;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v223 = v3[252];
  if (v223 >> 30)
    v2649 = 1;
  else
    v2649 = (_DWORD)v223 == v5;
  if (v2649)
    goto LABEL_551;
LABEL_3501:
  v2650 = *(_QWORD *)(v1[2] + 8);
  v2651 = v223 & 0xFFFFFFFFCFFFFFFFLL;
  v2652 = *(_QWORD *)(*(_QWORD *)(v2650 + 8) + 2448);
  v2653 = (unsigned int *)(v2652 + 520 * (v223 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2654 = *v2653;
  if ((_DWORD)v2654)
  {
    v2655 = 0;
    v2656 = 0;
    v2657 = **(_QWORD **)(v2650 + 16);
    v2658 = v2652 + 520 * v2651;
    v2659 = v2658 + 364;
    v2660 = v2658 + 340;
    while (1)
    {
      v2661 = (uint64_t *)(v2659 + 12 * v2655);
      v2662 = *(uint64_t **)(v2657 + 2512);
      if (v2662)
        break;
LABEL_3520:
      *(_WORD *)(v2660 + 2 * v2656) = *(_WORD *)(v2660 + 2 * v2655);
      if (v2655 != v2656)
      {
        v2669 = *v2661;
        v2670 = v2659 + 12 * v2656;
        *(_DWORD *)(v2670 + 8) = *((_DWORD *)v2661 + 2);
        *(_QWORD *)v2670 = v2669;
      }
      ++v2656;
LABEL_3504:
      if (++v2655 == v2654)
        goto LABEL_3523;
    }
    v2663 = *(_DWORD *)v2661;
    v2664 = *((_DWORD *)v2661 + 1);
    v2665 = *((_DWORD *)v2661 + 2);
    while (1)
    {
      v2666 = *((_DWORD *)v2662 + 7);
      if (v2663 == v2666)
      {
        v2667 = *((_DWORD *)v2662 + 8);
        if (v2664 == v2667)
        {
          v2668 = *((_DWORD *)v2662 + 9);
          if (v2665 < v2668)
            goto LABEL_3508;
          if (v2668 >= v2665)
            goto LABEL_3504;
        }
        else
        {
          if (v2664 < v2667)
            goto LABEL_3508;
          if (v2667 >= v2664)
            goto LABEL_3504;
        }
      }
      else
      {
        if (v2663 < v2666)
          goto LABEL_3508;
        if (v2666 >= v2663)
          goto LABEL_3504;
      }
      ++v2662;
LABEL_3508:
      v2662 = (uint64_t *)*v2662;
      if (!v2662)
        goto LABEL_3520;
    }
  }
  v2656 = 0;
LABEL_3523:
  *v2653 = v2656;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v225 = v3[253];
  if (v225 >> 30)
    v2671 = 1;
  else
    v2671 = (_DWORD)v225 == v5;
  if (v2671)
    goto LABEL_556;
LABEL_3527:
  v2672 = *(_QWORD *)(v1[2] + 8);
  v2673 = v225 & 0xFFFFFFFFCFFFFFFFLL;
  v2674 = *(_QWORD *)(*(_QWORD *)(v2672 + 8) + 2448);
  v2675 = (unsigned int *)(v2674 + 520 * (v225 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2676 = *v2675;
  if ((_DWORD)v2676)
  {
    v2677 = 0;
    v2678 = 0;
    v2679 = **(_QWORD **)(v2672 + 16);
    v2680 = v2674 + 520 * v2673;
    v2681 = v2680 + 364;
    v2682 = v2680 + 340;
    while (1)
    {
      v2683 = (uint64_t *)(v2681 + 12 * v2677);
      v2684 = *(uint64_t **)(v2679 + 2512);
      if (v2684)
        break;
LABEL_3546:
      *(_WORD *)(v2682 + 2 * v2678) = *(_WORD *)(v2682 + 2 * v2677);
      if (v2677 != v2678)
      {
        v2691 = *v2683;
        v2692 = v2681 + 12 * v2678;
        *(_DWORD *)(v2692 + 8) = *((_DWORD *)v2683 + 2);
        *(_QWORD *)v2692 = v2691;
      }
      ++v2678;
LABEL_3530:
      if (++v2677 == v2676)
        goto LABEL_3549;
    }
    v2685 = *(_DWORD *)v2683;
    v2686 = *((_DWORD *)v2683 + 1);
    v2687 = *((_DWORD *)v2683 + 2);
    while (1)
    {
      v2688 = *((_DWORD *)v2684 + 7);
      if (v2685 == v2688)
      {
        v2689 = *((_DWORD *)v2684 + 8);
        if (v2686 == v2689)
        {
          v2690 = *((_DWORD *)v2684 + 9);
          if (v2687 < v2690)
            goto LABEL_3534;
          if (v2690 >= v2687)
            goto LABEL_3530;
        }
        else
        {
          if (v2686 < v2689)
            goto LABEL_3534;
          if (v2689 >= v2686)
            goto LABEL_3530;
        }
      }
      else
      {
        if (v2685 < v2688)
          goto LABEL_3534;
        if (v2688 >= v2685)
          goto LABEL_3530;
      }
      ++v2684;
LABEL_3534:
      v2684 = (uint64_t *)*v2684;
      if (!v2684)
        goto LABEL_3546;
    }
  }
  v2678 = 0;
LABEL_3549:
  *v2675 = v2678;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v227 = v3[254];
  if (v227 >> 30)
    v2693 = 1;
  else
    v2693 = (_DWORD)v227 == v5;
  if (v2693)
    goto LABEL_561;
LABEL_3553:
  v2694 = *(_QWORD *)(v1[2] + 8);
  v2695 = v227 & 0xFFFFFFFFCFFFFFFFLL;
  v2696 = *(_QWORD *)(*(_QWORD *)(v2694 + 8) + 2448);
  v2697 = (unsigned int *)(v2696 + 520 * (v227 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2698 = *v2697;
  if ((_DWORD)v2698)
  {
    v2699 = 0;
    v2700 = 0;
    v2701 = **(_QWORD **)(v2694 + 16);
    v2702 = v2696 + 520 * v2695;
    v2703 = v2702 + 364;
    v2704 = v2702 + 340;
    while (1)
    {
      v2705 = (uint64_t *)(v2703 + 12 * v2699);
      v2706 = *(uint64_t **)(v2701 + 2512);
      if (v2706)
        break;
LABEL_3572:
      *(_WORD *)(v2704 + 2 * v2700) = *(_WORD *)(v2704 + 2 * v2699);
      if (v2699 != v2700)
      {
        v2713 = *v2705;
        v2714 = v2703 + 12 * v2700;
        *(_DWORD *)(v2714 + 8) = *((_DWORD *)v2705 + 2);
        *(_QWORD *)v2714 = v2713;
      }
      ++v2700;
LABEL_3556:
      if (++v2699 == v2698)
        goto LABEL_3575;
    }
    v2707 = *(_DWORD *)v2705;
    v2708 = *((_DWORD *)v2705 + 1);
    v2709 = *((_DWORD *)v2705 + 2);
    while (1)
    {
      v2710 = *((_DWORD *)v2706 + 7);
      if (v2707 == v2710)
      {
        v2711 = *((_DWORD *)v2706 + 8);
        if (v2708 == v2711)
        {
          v2712 = *((_DWORD *)v2706 + 9);
          if (v2709 < v2712)
            goto LABEL_3560;
          if (v2712 >= v2709)
            goto LABEL_3556;
        }
        else
        {
          if (v2708 < v2711)
            goto LABEL_3560;
          if (v2711 >= v2708)
            goto LABEL_3556;
        }
      }
      else
      {
        if (v2707 < v2710)
          goto LABEL_3560;
        if (v2710 >= v2707)
          goto LABEL_3556;
      }
      ++v2706;
LABEL_3560:
      v2706 = (uint64_t *)*v2706;
      if (!v2706)
        goto LABEL_3572;
    }
  }
  v2700 = 0;
LABEL_3575:
  *v2697 = v2700;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v229 = v3[255];
  if (v229 >> 30)
    v2715 = 1;
  else
    v2715 = (_DWORD)v229 == v5;
  if (v2715)
    goto LABEL_566;
LABEL_3579:
  v2716 = *(_QWORD *)(v1[2] + 8);
  v2717 = v229 & 0xFFFFFFFFCFFFFFFFLL;
  v2718 = *(_QWORD *)(*(_QWORD *)(v2716 + 8) + 2448);
  v2719 = (unsigned int *)(v2718 + 520 * (v229 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2720 = *v2719;
  if ((_DWORD)v2720)
  {
    v2721 = 0;
    v2722 = 0;
    v2723 = **(_QWORD **)(v2716 + 16);
    v2724 = v2718 + 520 * v2717;
    v2725 = v2724 + 364;
    v2726 = v2724 + 340;
    while (1)
    {
      v2727 = (uint64_t *)(v2725 + 12 * v2721);
      v2728 = *(uint64_t **)(v2723 + 2512);
      if (v2728)
        break;
LABEL_3598:
      *(_WORD *)(v2726 + 2 * v2722) = *(_WORD *)(v2726 + 2 * v2721);
      if (v2721 != v2722)
      {
        v2735 = *v2727;
        v2736 = v2725 + 12 * v2722;
        *(_DWORD *)(v2736 + 8) = *((_DWORD *)v2727 + 2);
        *(_QWORD *)v2736 = v2735;
      }
      ++v2722;
LABEL_3582:
      if (++v2721 == v2720)
        goto LABEL_3601;
    }
    v2729 = *(_DWORD *)v2727;
    v2730 = *((_DWORD *)v2727 + 1);
    v2731 = *((_DWORD *)v2727 + 2);
    while (1)
    {
      v2732 = *((_DWORD *)v2728 + 7);
      if (v2729 == v2732)
      {
        v2733 = *((_DWORD *)v2728 + 8);
        if (v2730 == v2733)
        {
          v2734 = *((_DWORD *)v2728 + 9);
          if (v2731 < v2734)
            goto LABEL_3586;
          if (v2734 >= v2731)
            goto LABEL_3582;
        }
        else
        {
          if (v2730 < v2733)
            goto LABEL_3586;
          if (v2733 >= v2730)
            goto LABEL_3582;
        }
      }
      else
      {
        if (v2729 < v2732)
          goto LABEL_3586;
        if (v2732 >= v2729)
          goto LABEL_3582;
      }
      ++v2728;
LABEL_3586:
      v2728 = (uint64_t *)*v2728;
      if (!v2728)
        goto LABEL_3598;
    }
  }
  v2722 = 0;
LABEL_3601:
  *v2719 = v2722;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v231 = v3[256];
  if (v231 >> 30)
    v2737 = 1;
  else
    v2737 = (_DWORD)v231 == v5;
  if (v2737)
    goto LABEL_571;
LABEL_3605:
  v2738 = *(_QWORD *)(v1[2] + 8);
  v2739 = v231 & 0xFFFFFFFFCFFFFFFFLL;
  v2740 = *(_QWORD *)(*(_QWORD *)(v2738 + 8) + 2448);
  v2741 = (unsigned int *)(v2740 + 520 * (v231 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2742 = *v2741;
  if ((_DWORD)v2742)
  {
    v2743 = 0;
    v2744 = 0;
    v2745 = **(_QWORD **)(v2738 + 16);
    v2746 = v2740 + 520 * v2739;
    v2747 = v2746 + 364;
    v2748 = v2746 + 340;
    while (1)
    {
      v2749 = (uint64_t *)(v2747 + 12 * v2743);
      v2750 = *(uint64_t **)(v2745 + 2512);
      if (v2750)
        break;
LABEL_3624:
      *(_WORD *)(v2748 + 2 * v2744) = *(_WORD *)(v2748 + 2 * v2743);
      if (v2743 != v2744)
      {
        v2757 = *v2749;
        v2758 = v2747 + 12 * v2744;
        *(_DWORD *)(v2758 + 8) = *((_DWORD *)v2749 + 2);
        *(_QWORD *)v2758 = v2757;
      }
      ++v2744;
LABEL_3608:
      if (++v2743 == v2742)
        goto LABEL_3627;
    }
    v2751 = *(_DWORD *)v2749;
    v2752 = *((_DWORD *)v2749 + 1);
    v2753 = *((_DWORD *)v2749 + 2);
    while (1)
    {
      v2754 = *((_DWORD *)v2750 + 7);
      if (v2751 == v2754)
      {
        v2755 = *((_DWORD *)v2750 + 8);
        if (v2752 == v2755)
        {
          v2756 = *((_DWORD *)v2750 + 9);
          if (v2753 < v2756)
            goto LABEL_3612;
          if (v2756 >= v2753)
            goto LABEL_3608;
        }
        else
        {
          if (v2752 < v2755)
            goto LABEL_3612;
          if (v2755 >= v2752)
            goto LABEL_3608;
        }
      }
      else
      {
        if (v2751 < v2754)
          goto LABEL_3612;
        if (v2754 >= v2751)
          goto LABEL_3608;
      }
      ++v2750;
LABEL_3612:
      v2750 = (uint64_t *)*v2750;
      if (!v2750)
        goto LABEL_3624;
    }
  }
  v2744 = 0;
LABEL_3627:
  *v2741 = v2744;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v233 = v3[257];
  if (v233 >> 30)
    v2759 = 1;
  else
    v2759 = (_DWORD)v233 == v5;
  if (v2759)
    goto LABEL_576;
LABEL_3631:
  v2760 = *(_QWORD *)(v1[2] + 8);
  v2761 = v233 & 0xFFFFFFFFCFFFFFFFLL;
  v2762 = *(_QWORD *)(*(_QWORD *)(v2760 + 8) + 2448);
  v2763 = (unsigned int *)(v2762 + 520 * (v233 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2764 = *v2763;
  if ((_DWORD)v2764)
  {
    v2765 = 0;
    v2766 = 0;
    v2767 = **(_QWORD **)(v2760 + 16);
    v2768 = v2762 + 520 * v2761;
    v2769 = v2768 + 364;
    v2770 = v2768 + 340;
    while (1)
    {
      v2771 = (uint64_t *)(v2769 + 12 * v2765);
      v2772 = *(uint64_t **)(v2767 + 2512);
      if (v2772)
        break;
LABEL_3650:
      *(_WORD *)(v2770 + 2 * v2766) = *(_WORD *)(v2770 + 2 * v2765);
      if (v2765 != v2766)
      {
        v2779 = *v2771;
        v2780 = v2769 + 12 * v2766;
        *(_DWORD *)(v2780 + 8) = *((_DWORD *)v2771 + 2);
        *(_QWORD *)v2780 = v2779;
      }
      ++v2766;
LABEL_3634:
      if (++v2765 == v2764)
        goto LABEL_3653;
    }
    v2773 = *(_DWORD *)v2771;
    v2774 = *((_DWORD *)v2771 + 1);
    v2775 = *((_DWORD *)v2771 + 2);
    while (1)
    {
      v2776 = *((_DWORD *)v2772 + 7);
      if (v2773 == v2776)
      {
        v2777 = *((_DWORD *)v2772 + 8);
        if (v2774 == v2777)
        {
          v2778 = *((_DWORD *)v2772 + 9);
          if (v2775 < v2778)
            goto LABEL_3638;
          if (v2778 >= v2775)
            goto LABEL_3634;
        }
        else
        {
          if (v2774 < v2777)
            goto LABEL_3638;
          if (v2777 >= v2774)
            goto LABEL_3634;
        }
      }
      else
      {
        if (v2773 < v2776)
          goto LABEL_3638;
        if (v2776 >= v2773)
          goto LABEL_3634;
      }
      ++v2772;
LABEL_3638:
      v2772 = (uint64_t *)*v2772;
      if (!v2772)
        goto LABEL_3650;
    }
  }
  v2766 = 0;
LABEL_3653:
  *v2763 = v2766;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v235 = v3[258];
  if (v235 >> 30)
    v2781 = 1;
  else
    v2781 = (_DWORD)v235 == v5;
  if (v2781)
    goto LABEL_581;
LABEL_3657:
  v2782 = *(_QWORD *)(v1[2] + 8);
  v2783 = v235 & 0xFFFFFFFFCFFFFFFFLL;
  v2784 = *(_QWORD *)(*(_QWORD *)(v2782 + 8) + 2448);
  v2785 = (unsigned int *)(v2784 + 520 * (v235 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2786 = *v2785;
  if ((_DWORD)v2786)
  {
    v2787 = 0;
    v2788 = 0;
    v2789 = **(_QWORD **)(v2782 + 16);
    v2790 = v2784 + 520 * v2783;
    v2791 = v2790 + 364;
    v2792 = v2790 + 340;
    while (1)
    {
      v2793 = (uint64_t *)(v2791 + 12 * v2787);
      v2794 = *(uint64_t **)(v2789 + 2512);
      if (v2794)
        break;
LABEL_3676:
      *(_WORD *)(v2792 + 2 * v2788) = *(_WORD *)(v2792 + 2 * v2787);
      if (v2787 != v2788)
      {
        v2801 = *v2793;
        v2802 = v2791 + 12 * v2788;
        *(_DWORD *)(v2802 + 8) = *((_DWORD *)v2793 + 2);
        *(_QWORD *)v2802 = v2801;
      }
      ++v2788;
LABEL_3660:
      if (++v2787 == v2786)
        goto LABEL_3679;
    }
    v2795 = *(_DWORD *)v2793;
    v2796 = *((_DWORD *)v2793 + 1);
    v2797 = *((_DWORD *)v2793 + 2);
    while (1)
    {
      v2798 = *((_DWORD *)v2794 + 7);
      if (v2795 == v2798)
      {
        v2799 = *((_DWORD *)v2794 + 8);
        if (v2796 == v2799)
        {
          v2800 = *((_DWORD *)v2794 + 9);
          if (v2797 < v2800)
            goto LABEL_3664;
          if (v2800 >= v2797)
            goto LABEL_3660;
        }
        else
        {
          if (v2796 < v2799)
            goto LABEL_3664;
          if (v2799 >= v2796)
            goto LABEL_3660;
        }
      }
      else
      {
        if (v2795 < v2798)
          goto LABEL_3664;
        if (v2798 >= v2795)
          goto LABEL_3660;
      }
      ++v2794;
LABEL_3664:
      v2794 = (uint64_t *)*v2794;
      if (!v2794)
        goto LABEL_3676;
    }
  }
  v2788 = 0;
LABEL_3679:
  *v2785 = v2788;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v237 = v3[259];
  if (v237 >> 30)
    v2803 = 1;
  else
    v2803 = (_DWORD)v237 == v5;
  if (v2803)
    goto LABEL_586;
LABEL_3683:
  v2804 = *(_QWORD *)(v1[2] + 8);
  v2805 = v237 & 0xFFFFFFFFCFFFFFFFLL;
  v2806 = *(_QWORD *)(*(_QWORD *)(v2804 + 8) + 2448);
  v2807 = (unsigned int *)(v2806 + 520 * (v237 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2808 = *v2807;
  if ((_DWORD)v2808)
  {
    v2809 = 0;
    v2810 = 0;
    v2811 = **(_QWORD **)(v2804 + 16);
    v2812 = v2806 + 520 * v2805;
    v2813 = v2812 + 364;
    v2814 = v2812 + 340;
    while (1)
    {
      v2815 = (uint64_t *)(v2813 + 12 * v2809);
      v2816 = *(uint64_t **)(v2811 + 2512);
      if (v2816)
        break;
LABEL_3702:
      *(_WORD *)(v2814 + 2 * v2810) = *(_WORD *)(v2814 + 2 * v2809);
      if (v2809 != v2810)
      {
        v2823 = *v2815;
        v2824 = v2813 + 12 * v2810;
        *(_DWORD *)(v2824 + 8) = *((_DWORD *)v2815 + 2);
        *(_QWORD *)v2824 = v2823;
      }
      ++v2810;
LABEL_3686:
      if (++v2809 == v2808)
        goto LABEL_3705;
    }
    v2817 = *(_DWORD *)v2815;
    v2818 = *((_DWORD *)v2815 + 1);
    v2819 = *((_DWORD *)v2815 + 2);
    while (1)
    {
      v2820 = *((_DWORD *)v2816 + 7);
      if (v2817 == v2820)
      {
        v2821 = *((_DWORD *)v2816 + 8);
        if (v2818 == v2821)
        {
          v2822 = *((_DWORD *)v2816 + 9);
          if (v2819 < v2822)
            goto LABEL_3690;
          if (v2822 >= v2819)
            goto LABEL_3686;
        }
        else
        {
          if (v2818 < v2821)
            goto LABEL_3690;
          if (v2821 >= v2818)
            goto LABEL_3686;
        }
      }
      else
      {
        if (v2817 < v2820)
          goto LABEL_3690;
        if (v2820 >= v2817)
          goto LABEL_3686;
      }
      ++v2816;
LABEL_3690:
      v2816 = (uint64_t *)*v2816;
      if (!v2816)
        goto LABEL_3702;
    }
  }
  v2810 = 0;
LABEL_3705:
  *v2807 = v2810;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v239 = v3[260];
  if (v239 >> 30)
    v2825 = 1;
  else
    v2825 = (_DWORD)v239 == v5;
  if (v2825)
    goto LABEL_591;
LABEL_3709:
  v2826 = *(_QWORD *)(v1[2] + 8);
  v2827 = v239 & 0xFFFFFFFFCFFFFFFFLL;
  v2828 = *(_QWORD *)(*(_QWORD *)(v2826 + 8) + 2448);
  v2829 = (unsigned int *)(v2828 + 520 * (v239 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2830 = *v2829;
  if ((_DWORD)v2830)
  {
    v2831 = 0;
    v2832 = 0;
    v2833 = **(_QWORD **)(v2826 + 16);
    v2834 = v2828 + 520 * v2827;
    v2835 = v2834 + 364;
    v2836 = v2834 + 340;
    while (1)
    {
      v2837 = (uint64_t *)(v2835 + 12 * v2831);
      v2838 = *(uint64_t **)(v2833 + 2512);
      if (v2838)
        break;
LABEL_3728:
      *(_WORD *)(v2836 + 2 * v2832) = *(_WORD *)(v2836 + 2 * v2831);
      if (v2831 != v2832)
      {
        v2845 = *v2837;
        v2846 = v2835 + 12 * v2832;
        *(_DWORD *)(v2846 + 8) = *((_DWORD *)v2837 + 2);
        *(_QWORD *)v2846 = v2845;
      }
      ++v2832;
LABEL_3712:
      if (++v2831 == v2830)
        goto LABEL_3731;
    }
    v2839 = *(_DWORD *)v2837;
    v2840 = *((_DWORD *)v2837 + 1);
    v2841 = *((_DWORD *)v2837 + 2);
    while (1)
    {
      v2842 = *((_DWORD *)v2838 + 7);
      if (v2839 == v2842)
      {
        v2843 = *((_DWORD *)v2838 + 8);
        if (v2840 == v2843)
        {
          v2844 = *((_DWORD *)v2838 + 9);
          if (v2841 < v2844)
            goto LABEL_3716;
          if (v2844 >= v2841)
            goto LABEL_3712;
        }
        else
        {
          if (v2840 < v2843)
            goto LABEL_3716;
          if (v2843 >= v2840)
            goto LABEL_3712;
        }
      }
      else
      {
        if (v2839 < v2842)
          goto LABEL_3716;
        if (v2842 >= v2839)
          goto LABEL_3712;
      }
      ++v2838;
LABEL_3716:
      v2838 = (uint64_t *)*v2838;
      if (!v2838)
        goto LABEL_3728;
    }
  }
  v2832 = 0;
LABEL_3731:
  *v2829 = v2832;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v241 = v3[261];
  if (v241 >> 30)
    v2847 = 1;
  else
    v2847 = (_DWORD)v241 == v5;
  if (v2847)
    goto LABEL_596;
LABEL_3735:
  v2848 = *(_QWORD *)(v1[2] + 8);
  v2849 = v241 & 0xFFFFFFFFCFFFFFFFLL;
  v2850 = *(_QWORD *)(*(_QWORD *)(v2848 + 8) + 2448);
  v2851 = (unsigned int *)(v2850 + 520 * (v241 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2852 = *v2851;
  if ((_DWORD)v2852)
  {
    v2853 = 0;
    v2854 = 0;
    v2855 = **(_QWORD **)(v2848 + 16);
    v2856 = v2850 + 520 * v2849;
    v2857 = v2856 + 364;
    v2858 = v2856 + 340;
    while (1)
    {
      v2859 = (uint64_t *)(v2857 + 12 * v2853);
      v2860 = *(uint64_t **)(v2855 + 2512);
      if (v2860)
        break;
LABEL_3754:
      *(_WORD *)(v2858 + 2 * v2854) = *(_WORD *)(v2858 + 2 * v2853);
      if (v2853 != v2854)
      {
        v2867 = *v2859;
        v2868 = v2857 + 12 * v2854;
        *(_DWORD *)(v2868 + 8) = *((_DWORD *)v2859 + 2);
        *(_QWORD *)v2868 = v2867;
      }
      ++v2854;
LABEL_3738:
      if (++v2853 == v2852)
        goto LABEL_3757;
    }
    v2861 = *(_DWORD *)v2859;
    v2862 = *((_DWORD *)v2859 + 1);
    v2863 = *((_DWORD *)v2859 + 2);
    while (1)
    {
      v2864 = *((_DWORD *)v2860 + 7);
      if (v2861 == v2864)
      {
        v2865 = *((_DWORD *)v2860 + 8);
        if (v2862 == v2865)
        {
          v2866 = *((_DWORD *)v2860 + 9);
          if (v2863 < v2866)
            goto LABEL_3742;
          if (v2866 >= v2863)
            goto LABEL_3738;
        }
        else
        {
          if (v2862 < v2865)
            goto LABEL_3742;
          if (v2865 >= v2862)
            goto LABEL_3738;
        }
      }
      else
      {
        if (v2861 < v2864)
          goto LABEL_3742;
        if (v2864 >= v2861)
          goto LABEL_3738;
      }
      ++v2860;
LABEL_3742:
      v2860 = (uint64_t *)*v2860;
      if (!v2860)
        goto LABEL_3754;
    }
  }
  v2854 = 0;
LABEL_3757:
  *v2851 = v2854;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v243 = v3[262];
  if (v243 >> 30)
    v2869 = 1;
  else
    v2869 = (_DWORD)v243 == v5;
  if (v2869)
    goto LABEL_601;
LABEL_3761:
  v2870 = *(_QWORD *)(v1[2] + 8);
  v2871 = v243 & 0xFFFFFFFFCFFFFFFFLL;
  v2872 = *(_QWORD *)(*(_QWORD *)(v2870 + 8) + 2448);
  v2873 = (unsigned int *)(v2872 + 520 * (v243 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2874 = *v2873;
  if ((_DWORD)v2874)
  {
    v2875 = 0;
    v2876 = 0;
    v2877 = **(_QWORD **)(v2870 + 16);
    v2878 = v2872 + 520 * v2871;
    v2879 = v2878 + 364;
    v2880 = v2878 + 340;
    while (1)
    {
      v2881 = (uint64_t *)(v2879 + 12 * v2875);
      v2882 = *(uint64_t **)(v2877 + 2512);
      if (v2882)
        break;
LABEL_3780:
      *(_WORD *)(v2880 + 2 * v2876) = *(_WORD *)(v2880 + 2 * v2875);
      if (v2875 != v2876)
      {
        v2889 = *v2881;
        v2890 = v2879 + 12 * v2876;
        *(_DWORD *)(v2890 + 8) = *((_DWORD *)v2881 + 2);
        *(_QWORD *)v2890 = v2889;
      }
      ++v2876;
LABEL_3764:
      if (++v2875 == v2874)
        goto LABEL_3783;
    }
    v2883 = *(_DWORD *)v2881;
    v2884 = *((_DWORD *)v2881 + 1);
    v2885 = *((_DWORD *)v2881 + 2);
    while (1)
    {
      v2886 = *((_DWORD *)v2882 + 7);
      if (v2883 == v2886)
      {
        v2887 = *((_DWORD *)v2882 + 8);
        if (v2884 == v2887)
        {
          v2888 = *((_DWORD *)v2882 + 9);
          if (v2885 < v2888)
            goto LABEL_3768;
          if (v2888 >= v2885)
            goto LABEL_3764;
        }
        else
        {
          if (v2884 < v2887)
            goto LABEL_3768;
          if (v2887 >= v2884)
            goto LABEL_3764;
        }
      }
      else
      {
        if (v2883 < v2886)
          goto LABEL_3768;
        if (v2886 >= v2883)
          goto LABEL_3764;
      }
      ++v2882;
LABEL_3768:
      v2882 = (uint64_t *)*v2882;
      if (!v2882)
        goto LABEL_3780;
    }
  }
  v2876 = 0;
LABEL_3783:
  *v2873 = v2876;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v245 = v3[263];
  if (v245 >> 30)
    v2891 = 1;
  else
    v2891 = (_DWORD)v245 == v5;
  if (v2891)
    goto LABEL_606;
LABEL_3787:
  v2892 = *(_QWORD *)(v1[2] + 8);
  v2893 = v245 & 0xFFFFFFFFCFFFFFFFLL;
  v2894 = *(_QWORD *)(*(_QWORD *)(v2892 + 8) + 2448);
  v2895 = (unsigned int *)(v2894 + 520 * (v245 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2896 = *v2895;
  if ((_DWORD)v2896)
  {
    v2897 = 0;
    v2898 = 0;
    v2899 = **(_QWORD **)(v2892 + 16);
    v2900 = v2894 + 520 * v2893;
    v2901 = v2900 + 364;
    v2902 = v2900 + 340;
    while (1)
    {
      v2903 = (uint64_t *)(v2901 + 12 * v2897);
      v2904 = *(uint64_t **)(v2899 + 2512);
      if (v2904)
        break;
LABEL_3806:
      *(_WORD *)(v2902 + 2 * v2898) = *(_WORD *)(v2902 + 2 * v2897);
      if (v2897 != v2898)
      {
        v2911 = *v2903;
        v2912 = v2901 + 12 * v2898;
        *(_DWORD *)(v2912 + 8) = *((_DWORD *)v2903 + 2);
        *(_QWORD *)v2912 = v2911;
      }
      ++v2898;
LABEL_3790:
      if (++v2897 == v2896)
        goto LABEL_3809;
    }
    v2905 = *(_DWORD *)v2903;
    v2906 = *((_DWORD *)v2903 + 1);
    v2907 = *((_DWORD *)v2903 + 2);
    while (1)
    {
      v2908 = *((_DWORD *)v2904 + 7);
      if (v2905 == v2908)
      {
        v2909 = *((_DWORD *)v2904 + 8);
        if (v2906 == v2909)
        {
          v2910 = *((_DWORD *)v2904 + 9);
          if (v2907 < v2910)
            goto LABEL_3794;
          if (v2910 >= v2907)
            goto LABEL_3790;
        }
        else
        {
          if (v2906 < v2909)
            goto LABEL_3794;
          if (v2909 >= v2906)
            goto LABEL_3790;
        }
      }
      else
      {
        if (v2905 < v2908)
          goto LABEL_3794;
        if (v2908 >= v2905)
          goto LABEL_3790;
      }
      ++v2904;
LABEL_3794:
      v2904 = (uint64_t *)*v2904;
      if (!v2904)
        goto LABEL_3806;
    }
  }
  v2898 = 0;
LABEL_3809:
  *v2895 = v2898;
  v1 = *result;
  v3 = (unsigned int *)(*result)[1];
  v5 = *(_DWORD *)(**result + 272);
  v247 = v3[264];
  if (v247 >> 30)
    v2913 = 1;
  else
    v2913 = (_DWORD)v247 == v5;
  if (!v2913)
  {
LABEL_3813:
    v2914 = *(_QWORD *)(v1[2] + 8);
    v2915 = v247 & 0xFFFFFFFFCFFFFFFFLL;
    v2916 = *(_QWORD *)(*(_QWORD *)(v2914 + 8) + 2448);
    v2917 = (unsigned int *)(v2916 + 520 * (v247 & 0xFFFFFFFFCFFFFFFFLL) + 508);
    v2918 = *v2917;
    if ((_DWORD)v2918)
    {
      v2919 = 0;
      v2920 = 0;
      v2921 = **(_QWORD **)(v2914 + 16);
      v2922 = v2916 + 520 * v2915;
      v2923 = v2922 + 364;
      v2924 = v2922 + 340;
      while (1)
      {
        v2925 = (uint64_t *)(v2923 + 12 * v2919);
        v2926 = *(uint64_t **)(v2921 + 2512);
        if (v2926)
          break;
LABEL_3832:
        *(_WORD *)(v2924 + 2 * v2920) = *(_WORD *)(v2924 + 2 * v2919);
        if (v2919 != v2920)
        {
          v2933 = *v2925;
          v2934 = v2923 + 12 * v2920;
          *(_DWORD *)(v2934 + 8) = *((_DWORD *)v2925 + 2);
          *(_QWORD *)v2934 = v2933;
        }
        ++v2920;
LABEL_3816:
        if (++v2919 == v2918)
          goto LABEL_3835;
      }
      v2927 = *(_DWORD *)v2925;
      v2928 = *((_DWORD *)v2925 + 1);
      v2929 = *((_DWORD *)v2925 + 2);
      while (1)
      {
        v2930 = *((_DWORD *)v2926 + 7);
        if (v2927 == v2930)
        {
          v2931 = *((_DWORD *)v2926 + 8);
          if (v2928 == v2931)
          {
            v2932 = *((_DWORD *)v2926 + 9);
            if (v2929 < v2932)
              goto LABEL_3820;
            if (v2932 >= v2929)
              goto LABEL_3816;
          }
          else
          {
            if (v2928 < v2931)
              goto LABEL_3820;
            if (v2931 >= v2928)
              goto LABEL_3816;
          }
        }
        else
        {
          if (v2927 < v2930)
            goto LABEL_3820;
          if (v2930 >= v2927)
            goto LABEL_3816;
        }
        ++v2926;
LABEL_3820:
        v2926 = (uint64_t *)*v2926;
        if (!v2926)
          goto LABEL_3832;
      }
    }
    v2920 = 0;
LABEL_3835:
    *v2917 = v2920;
    v1 = *result;
    v249 = *(unsigned int *)((*result)[1] + 1060);
    if (v249 >> 30)
      v2935 = 1;
    else
      v2935 = (_DWORD)v249 == *(_DWORD *)(**result + 272);
    if (v2935)
      return sub_223E76B70(result);
    goto LABEL_3839;
  }
LABEL_611:
  v249 = v3[265];
  if (v249 >> 30)
    v250 = 1;
  else
    v250 = (_DWORD)v249 == v5;
  if (v250)
    return sub_223E76B70(result);
LABEL_3839:
  v2936 = *(_QWORD *)(v1[2] + 8);
  v2937 = v249 & 0xFFFFFFFFCFFFFFFFLL;
  v2938 = *(_QWORD *)(*(_QWORD *)(v2936 + 8) + 2448);
  v2939 = (unsigned int *)(v2938 + 520 * (v249 & 0xFFFFFFFFCFFFFFFFLL) + 508);
  v2940 = *v2939;
  if ((_DWORD)v2940)
  {
    v2941 = 0;
    v2942 = 0;
    v2943 = **(_QWORD **)(v2936 + 16);
    v2944 = v2938 + 520 * v2937;
    v2945 = v2944 + 364;
    v2946 = v2944 + 340;
    while (1)
    {
      v2947 = (uint64_t *)(v2945 + 12 * v2941);
      v2948 = *(uint64_t **)(v2943 + 2512);
      if (v2948)
        break;
LABEL_3858:
      *(_WORD *)(v2946 + 2 * v2942) = *(_WORD *)(v2946 + 2 * v2941);
      if (v2941 != v2942)
      {
        v2955 = *v2947;
        v2956 = v2945 + 12 * v2942;
        *(_DWORD *)(v2956 + 8) = *((_DWORD *)v2947 + 2);
        *(_QWORD *)v2956 = v2955;
      }
      ++v2942;
LABEL_3842:
      if (++v2941 == v2940)
        goto LABEL_3861;
    }
    v2949 = *(_DWORD *)v2947;
    v2950 = *((_DWORD *)v2947 + 1);
    v2951 = *((_DWORD *)v2947 + 2);
    while (1)
    {
      v2952 = *((_DWORD *)v2948 + 7);
      if (v2949 == v2952)
      {
        v2953 = *((_DWORD *)v2948 + 8);
        if (v2950 == v2953)
        {
          v2954 = *((_DWORD *)v2948 + 9);
          if (v2951 < v2954)
            goto LABEL_3846;
          if (v2954 >= v2951)
            goto LABEL_3842;
        }
        else
        {
          if (v2950 < v2953)
            goto LABEL_3846;
          if (v2953 >= v2950)
            goto LABEL_3842;
        }
      }
      else
      {
        if (v2949 < v2952)
          goto LABEL_3846;
        if (v2952 >= v2949)
          goto LABEL_3842;
      }
      ++v2948;
LABEL_3846:
      v2948 = (uint64_t *)*v2948;
      if (!v2948)
        goto LABEL_3858;
    }
  }
  v2942 = 0;
LABEL_3861:
  *v2939 = v2942;
  return sub_223E76B70(result);
}

