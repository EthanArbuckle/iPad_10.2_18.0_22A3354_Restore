void sub_223BE5324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BE53FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v17;
  uint64_t v18[27];
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v18);
    sub_223B87C9C((uint64_t)&v19, v18);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)&v19);
        if (!v34)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v17, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v20;
    *(_BYTE *)(a1 + 64) = 0;
    if (v23)
    {
      *(_OWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 56) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 88) = v25;
    *(_BYTE *)(a1 + 120) = 0;
    if (v28)
    {
      *(_OWORD *)(a1 + 96) = v26;
      *(_QWORD *)(a1 + 112) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 128) = v29;
      *(_QWORD *)(a1 + 144) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v34;
    if (v34)
    {
      *(_OWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v32;
    if (!(_QWORD)v32)
      goto LABEL_46;
    v10 = *((_QWORD *)&v32 + 1);
    v11 = (void *)v32;
    if (*((_QWORD *)&v32 + 1) == (_QWORD)v32)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v32;
LABEL_45:
    *((_QWORD *)&v32 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v18);
  sub_223B87C9C((uint64_t)&v19, v18);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v17, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v20;
    *(_BYTE *)(a1 + 64) = 0;
    if (v23)
    {
      *(_OWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 56) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 88) = v25;
    *(_BYTE *)(a1 + 120) = 0;
    if (v28)
    {
      *(_OWORD *)(a1 + 96) = v26;
      *(_QWORD *)(a1 + 112) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 128) = v29;
      *(_QWORD *)(a1 + 144) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v34;
    if (v34)
    {
      *(_OWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)&v19);
  if (v34)
  {
LABEL_38:
    v9 = v32;
    if (!(_QWORD)v32)
      goto LABEL_46;
    v13 = *((_QWORD *)&v32 + 1);
    v11 = (void *)v32;
    if (*((_QWORD *)&v32 + 1) == (_QWORD)v32)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (v28 && SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  if (v23 && SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  sub_2231AD66C((uint64_t)v18);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  v14 = *a2;
  v18[0] = a2[1];
  v15 = v18[0];
  v19 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v14 + 104))(a2, &v19);
  if (v15 < 1)
  {
    if (v19 < 3)
      sub_223BD7864((uint64_t)&v19, (uint64_t)a2, v4, v19);
    else
      sub_223BD7AD8((uint64_t)a2, v4, v19);
  }
  else
  {
    sub_223BD7174((int *)v18, (uint64_t)a2, v4, v19);
  }
  LODWORD(v18[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v18);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 200);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 201);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 202);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 203);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 204);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 205);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 206);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 207);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 208);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 209);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 210);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 211);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 212);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 213);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 214);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 215);
  v18[0] = 0;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 72))(a2, v18);
  *(_QWORD *)(a1 + 216) = v18[0];
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 224);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 232);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 240);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 248);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 256);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 264);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 272);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 280);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 288);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 296);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 304);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 312);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 320);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 328);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 336);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 136))(a2, a1 + 344);
}

void sub_223BE5B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_223BE5B7C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  std::logic_error *exception;
  std::logic_error *v36;
  std::logic_error *v37;
  std::logic_error *v38;
  char v39;
  uint64_t v40[27];
  _BYTE v41[8];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v40);
    sub_223B87C9C((uint64_t)v41, v40);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v41);
        if (!v56)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v39, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v42;
    *(_BYTE *)(a1 + 64) = 0;
    if (v45)
    {
      *(_OWORD *)(a1 + 40) = v43;
      *(_QWORD *)(a1 + 56) = v44;
      v44 = 0;
      v43 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v46;
    *(_QWORD *)(a1 + 88) = v47;
    *(_BYTE *)(a1 + 120) = 0;
    if (v50)
    {
      *(_OWORD *)(a1 + 96) = v48;
      *(_QWORD *)(a1 + 112) = v49;
      v49 = 0;
      v48 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v53)
    {
      *(_OWORD *)(a1 + 128) = v51;
      *(_QWORD *)(a1 + 144) = v52;
      v52 = 0;
      v51 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v56;
    if (v56)
    {
      *(_OWORD *)(a1 + 160) = v54;
      *(_QWORD *)(a1 + 176) = v55;
      v55 = 0;
      v54 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v54;
    if (!(_QWORD)v54)
      goto LABEL_46;
    v10 = *((_QWORD *)&v54 + 1);
    v11 = (void *)v54;
    if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v54;
LABEL_45:
    *((_QWORD *)&v54 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v40);
  sub_223B87C9C((uint64_t)v41, v40);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v39, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v42;
    *(_BYTE *)(a1 + 64) = 0;
    if (v45)
    {
      *(_OWORD *)(a1 + 40) = v43;
      *(_QWORD *)(a1 + 56) = v44;
      v44 = 0;
      v43 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v46;
    *(_QWORD *)(a1 + 88) = v47;
    *(_BYTE *)(a1 + 120) = 0;
    if (v50)
    {
      *(_OWORD *)(a1 + 96) = v48;
      *(_QWORD *)(a1 + 112) = v49;
      v49 = 0;
      v48 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v53)
    {
      *(_OWORD *)(a1 + 128) = v51;
      *(_QWORD *)(a1 + 144) = v52;
      v52 = 0;
      v51 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v56;
    if (v56)
    {
      *(_OWORD *)(a1 + 160) = v54;
      *(_QWORD *)(a1 + 176) = v55;
      v55 = 0;
      v54 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v41);
  if (v56)
  {
LABEL_38:
    v9 = v54;
    if (!(_QWORD)v54)
      goto LABEL_46;
    v13 = *((_QWORD *)&v54 + 1);
    v11 = (void *)v54;
    if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v53 && SHIBYTE(v52) < 0)
    operator delete((void *)v51);
  if (v50 && SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  sub_2231AD66C((uint64_t)v40);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  sub_223BCDEF0((uint64_t)v40, a2, v4);
  v15 = a2[6];
  v14 = a2[7];
  v16 = v14 - v15;
  if (v14 < v15)
    v16 = 0;
  if (v16 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v17 = a2[3];
  v18 = v15 + 4;
  a2[6] = v18;
  v19 = v14 >= v18;
  v20 = v14 - v18;
  if (!v19)
    v20 = 0;
  if (v20 <= 0xF)
  {
    v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v36, "Not enough data to read span");
    __cxa_throw(v36, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v17 + v18);
  v21 = a2[6];
  v22 = a2[7];
  a2[6] = v21 + 16;
  v23 = v22 - (v21 + 16);
  if (v22 < v21 + 16)
    v23 = 0;
  if (v23 <= 7)
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v37, "Not enough data to read");
    __cxa_throw(v37, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v24 = a2[3];
  v25 = *(_QWORD *)(v24 + v21 + 16);
  v26 = v21 + 24;
  a2[6] = v26;
  *(_QWORD *)(a1 + 216) = v25;
  v19 = v22 >= v26;
  v27 = v22 - v26;
  if (!v19)
    v27 = 0;
  if (v27 <= 0x7F)
  {
    v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v38, "Not enough data to read span");
    __cxa_throw(v38, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v28 = (__int128 *)(v24 + v26);
  v29 = *v28;
  v30 = v28[1];
  v31 = v28[3];
  *(_OWORD *)(a1 + 256) = v28[2];
  *(_OWORD *)(a1 + 272) = v31;
  *(_OWORD *)(a1 + 224) = v29;
  *(_OWORD *)(a1 + 240) = v30;
  result = (__n128)v28[4];
  v33 = v28[5];
  v34 = v28[7];
  *(_OWORD *)(a1 + 320) = v28[6];
  *(_OWORD *)(a1 + 336) = v34;
  *(__n128 *)(a1 + 288) = result;
  *(_OWORD *)(a1 + 304) = v33;
  a2[6] += 128;
  return result;
}

void sub_223BE6114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223BE61AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223BE61BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223BE61EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_223BE61FC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC601E8;
  *(_QWORD *)(a1 + 8) = &unk_24EC60248;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_223BE6264(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC601E8;
  *(_QWORD *)(a1 + 8) = &unk_24EC60248;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C408A8AF2ABLL);
}

uint64_t sub_223BE62E0()
{
  return 1;
}

uint64_t sub_223BE62E8()
{
  return 0;
}

uint64_t sub_223BE62F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_223BE62FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_223BE6308@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int128 v8;
  _QWORD *v9;
  __int128 v11;
  _BYTE v12[208];
  uint64_t (**v13)();
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD *)(a1 + 200);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v12);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v12);
  }
  v13 = &off_24EC2B9D0;
  v14 = v11;
  sub_2231AB0FC((uint64_t)&v15, (uint64_t)v12);
  v13 = &off_24EC2B950;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = &off_24EC2B9D0;
  *(_OWORD *)(v6 + 8) = v14;
  *(_OWORD *)(v6 + 32) = v15;
  *(_BYTE *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 72) = 0;
  if (v18)
  {
    *(_OWORD *)(v6 + 48) = v16;
    *(_QWORD *)(v6 + 64) = v17;
    v17 = 0;
    v16 = 0uLL;
    *(_BYTE *)(v6 + 72) = 1;
  }
  *(_BYTE *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  if (v21)
  {
    *(_OWORD *)(v6 + 80) = v19;
    *(_QWORD *)(v6 + 96) = v20;
    v20 = 0;
    v19 = 0uLL;
    *(_BYTE *)(v6 + 104) = 1;
  }
  *(_BYTE *)(v6 + 144) = 0;
  *(_OWORD *)(v6 + 112) = v22;
  *(_QWORD *)(v6 + 128) = v23;
  *(_BYTE *)(v6 + 192) = 0;
  if (v27)
  {
    *(_OWORD *)(v6 + 144) = v24;
    *(_QWORD *)(v6 + 160) = v25;
    v25 = 0;
    v24 = 0uLL;
    do
      v8 = __ldaxp(&v26);
    while (__stlxp(v8, &v26));
    *(_OWORD *)(v6 + 176) = v8;
    *(_BYTE *)(v6 + 192) = 1;
  }
  *(_BYTE *)(v6 + 208) = 0;
  *(_BYTE *)(v6 + 232) = 0;
  if (v30)
  {
    *(_OWORD *)(v6 + 208) = v28;
    *(_QWORD *)(v6 + 224) = v29;
    v29 = 0;
    v28 = 0uLL;
    *(_BYTE *)(v6 + 232) = 1;
  }
  *(_QWORD *)v6 = &off_24EC2B950;
  *a2 = &off_24EC6A3B8;
  a2[1] = v6;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24EC6A4B0;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  a2[2] = v9;
  v13 = &off_24EC2B9D0;
  sub_2231AD66C((uint64_t)&v15);
  return sub_2231AD66C((uint64_t)v12);
}

void sub_223BE6568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_2231AD66C(v3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BE65A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_223BE65B8(uint64_t a1, void *lpsrc)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _QWORD v15[5];
  unsigned __int8 **v16;
  _QWORD v17[5];
  unsigned __int8 **v18;
  char v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v31[5] = *MEMORY[0x24BDAC8D0];
  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC602B8, 0);
  if (v3)
  {
    v4 = v3;
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 192);
    if (v6 == 2)
    {
      sub_223B8944C(v5, (uint64_t)v26);
    }
    else if (v6 == 1)
    {
      sub_223B89234(v5, (uint64_t)v26);
    }
    else
    {
      if (v6)
        sub_22316DD70();
      sub_223B8901C(v5, (uint64_t)v26);
    }
    v8 = (uint64_t)(v4 + 4);
    v9 = v4[48];
    if (v9 == 2)
    {
      sub_223B8944C(v8, (uint64_t)v20);
    }
    else if (v9 == 1)
    {
      sub_223B89234(v8, (uint64_t)v20);
    }
    else
    {
      if (v9)
        sub_22316DD70();
      sub_223B8901C(v8, (uint64_t)v20);
    }
    v17[0] = v26;
    v17[1] = &v27;
    v17[2] = &v28;
    v17[3] = &v29;
    v17[4] = &v30;
    v18 = (unsigned __int8 **)v31;
    v15[0] = v20;
    v15[1] = &v21;
    v15[2] = &v22;
    v15[3] = &v23;
    v15[4] = &v24;
    v16 = (unsigned __int8 **)&v25;
    if (sub_224123BEC((uint64_t)&v19, v17, v15))
    {
      if (*((_BYTE *)v18 + 24) && *((_BYTE *)v16 + 24))
      {
        v10 = *v18;
        v11 = v18[1];
        v12 = *v16;
        if (v11 - *v18 == v16[1] - *v16)
        {
          if (v10 != v11)
          {
            while (sub_224122C08(v10, v12))
            {
              v10 += 96;
              v12 += 96;
              if (v10 == v11)
                goto LABEL_25;
            }
            goto LABEL_24;
          }
LABEL_25:
          v7 = *(_QWORD *)(a1 + 200) == *((_QWORD *)v4 + 25) && *(_QWORD *)(a1 + 208) == *((_QWORD *)v4 + 26);
          goto LABEL_31;
        }
      }
      else if ((*((_BYTE *)v18 + 24) != 0) == (*((_BYTE *)v16 + 24) != 0))
      {
        goto LABEL_25;
      }
    }
LABEL_24:
    v7 = 0;
LABEL_31:
    sub_2231AD66C((uint64_t)v20);
    sub_2231AD66C((uint64_t)v26);
    return v7;
  }
  return 0;
}

void sub_223BE67CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a23);
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BE67EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BE6800(uint64_t a1, uint64_t (***a2)())
{
  sub_223BE692C(a2, a1);
}

double sub_223BE6810(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BE7CB4(a2, a1);
}

uint64_t sub_223BE6820(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24EC601E8;
  *(_QWORD *)result = &unk_24EC60248;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_223BE6888(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC601E8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC60248;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C408A8AF2ABLL);
}

void sub_223BE690C(uint64_t a1, uint64_t (***a2)())
{
  sub_223BE692C(a2, a1 - 8);
}

double sub_223BE691C(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BE7CB4(a2, a1 - 8);
}

void sub_223BE692C(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  unsigned int v55[4];
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 2:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v13 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v13)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v14 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v14)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v55);
        sub_223B8F208(v5, a2 + 16, v55[0]);
        goto LABEL_32;
      case 1:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v15 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v15)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v16 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v16)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v55);
        sub_223B8E898(v5, a2 + 16, v55[0]);
        goto LABEL_32;
      case 0:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v7 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v7)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v8 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v8)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v55);
        sub_223B8D388(v5, a2 + 16, v55[0]);
LABEL_32:
        v17 = *(_QWORD *)(v5 + 56);
        v18 = *(unsigned __int8 **)(v17 - 8);
        *(_QWORD *)(v5 + 40) = v18;
        *(_QWORD *)(v5 + 56) = v17 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        if (*v18 <= 1u)
        {
          *(_QWORD *)(v5 + 72) = "value";
          *(_QWORD *)(v5 + 80) = 5;
          *(_BYTE *)(v5 + 88) = 1;
        }
        sub_22454024C(v5);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 1;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v19 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v19)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v55);
        v56 = *(_OWORD *)(a2 + 200);
        *(_QWORD *)&v54 = 16;
        *((_QWORD *)&v54 + 1) = &v56;
        sub_2245403C8(v5, (size_t *)&v54);
LABEL_40:
        v20 = *(_QWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v20 - 8);
        *(_QWORD *)(v5 + 56) = v20 - 8;
        if (*(_BYTE *)(v5 + 88))
          *(_BYTE *)(v5 + 88) = 0;
        return;
    }
LABEL_122:
    sub_22316DD70();
  }
  v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
  if (v9)
  {
    v10 = (uint64_t)v9;
    v11 = *(_DWORD *)(a2 + 192);
    if (v11 == 2)
    {
      v25 = v9[3];
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)&v54 = v25 + 16;
        sub_22455A7EC((uint64_t **)&v54, 4u);
      }
      else
      {
        LOBYTE(v54) = 4;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B979A0(v10, a2 + 16, 4u);
    }
    else if (v11 == 1)
    {
      v26 = v9[3];
      if (*(_BYTE *)(v26 + 40))
      {
        *(_QWORD *)&v54 = v26 + 16;
        sub_22455A7EC((uint64_t **)&v54, 5u);
      }
      else
      {
        LOBYTE(v54) = 5;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B97884(v10, a2 + 16, 5u);
    }
    else
    {
      if (v11)
        goto LABEL_122;
      v12 = v9[3];
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)&v54 = v12 + 16;
        sub_22455A7EC((uint64_t **)&v54, 6u);
      }
      else
      {
        LOBYTE(v54) = 6;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v10 + 24));
      sub_223B970F8(v10, a2 + 16, 6u);
    }
    v38 = *(_QWORD *)(v10 + 24);
    v39 = *(_QWORD *)(*(_QWORD *)(v38 + 88) - 8);
    sub_224554D6C((uint64_t *)(v38 + 48), *(_QWORD *)(v38 + 16) - v39 - 9);
    v40 = *(_QWORD *)(v38 + 48);
    if (v40)
      memmove((void *)(*(_QWORD *)(v38 + 24) + v39), *(const void **)(v38 + 56), v40);
    *(_QWORD *)(v38 + 48) = 0;
    v41 = *(_QWORD *)(v38 + 80);
    v42 = *(_QWORD *)(v38 + 88) - 8;
    *(_QWORD *)(v38 + 88) = v42;
    if (v41 == v42)
    {
      std::ostream::write();
      if (*(_BYTE *)(v38 + 40))
      {
        free(*(void **)(v38 + 24));
        *(_BYTE *)(v38 + 40) = 0;
      }
    }
    v43 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v43 + 40))
    {
      *(_QWORD *)&v54 = v43 + 16;
      sub_22455A7EC((uint64_t **)&v54, 1u);
    }
    else
    {
      LOBYTE(v54) = 1;
      std::ostream::write();
    }
    v54 = *(_OWORD *)(a2 + 200);
    v44 = *(_QWORD *)(v10 + 24);
    if (*(_BYTE *)(v44 + 40))
    {
      *(_QWORD *)&v56 = v44 + 16;
      sub_224559C04((uint64_t **)&v56, v54);
      sub_224559C04((uint64_t **)&v56, SBYTE1(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE2(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE3(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE4(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE5(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE6(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE7(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE8(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE9(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE10(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE11(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE12(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE13(v54));
      sub_224559C04((uint64_t **)&v56, SBYTE14(v54));
      sub_224559C04((uint64_t **)&v56, SHIBYTE(v54));
    }
    else
    {
      for (i = 0; i != 16; ++i)
      {
        v46 = *((char *)&v55[-4] + i);
        if (v46 < 0)
        {
          LOBYTE(v56) = -52;
          BYTE1(v56) = v46;
        }
        else
        {
          LOBYTE(v56) = *((_BYTE *)&v55[-4] + i);
        }
        std::ostream::write();
      }
    }
  }
  else
  {
    v21 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
    if (v21)
    {
      v5 = (uint64_t)v21;
      v22 = *(_DWORD *)(a2 + 192);
      if (v22 == 2)
      {
        if (*(unsigned __int8 *)v21[5] <= 1u)
        {
          v31 = *((unsigned __int8 *)v21 + 88);
          v21[9] = "info";
          v21[10] = 4;
          if (!v31)
            *((_BYTE *)v21 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v21);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v32 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v32)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v55);
        sub_223B9970C(v5, a2 + 16, v55[0]);
      }
      else if (v22 == 1)
      {
        if (*(unsigned __int8 *)v21[5] <= 1u)
        {
          v33 = *((unsigned __int8 *)v21 + 88);
          v21[9] = "info";
          v21[10] = 4;
          if (!v33)
            *((_BYTE *)v21 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v21);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v34 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v34)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v55);
        sub_223B98FC8(v5, a2 + 16, v55[0]);
      }
      else
      {
        if (v22)
          goto LABEL_122;
        if (*(unsigned __int8 *)v21[5] <= 1u)
        {
          v23 = *((unsigned __int8 *)v21 + 88);
          v21[9] = "info";
          v21[10] = 4;
          if (!v23)
            *((_BYTE *)v21 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v21);
        *(_QWORD *)&v54 = "version";
        *((_QWORD *)&v54 + 1) = 7;
        v55[0] = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v24 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v24)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v55);
        sub_223B98294(v5, a2 + 16, v55[0]);
      }
      v35 = *(_QWORD *)(v5 + 56);
      v36 = *(unsigned __int8 **)(v35 - 8);
      *(_QWORD *)(v5 + 40) = v36;
      *(_QWORD *)(v5 + 56) = v35 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      if (*v36 <= 1u)
      {
        *(_QWORD *)(v5 + 72) = "value";
        *(_QWORD *)(v5 + 80) = 5;
        *(_BYTE *)(v5 + 88) = 1;
      }
      sub_22453FAE0(v5);
      *(_QWORD *)&v54 = "version";
      *((_QWORD *)&v54 + 1) = 7;
      v55[0] = 1;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v37 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v37)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, v55);
      v56 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)&v54 = 16;
      *((_QWORD *)&v54 + 1) = &v56;
      sub_22453FC5C(v5, (size_t *)&v54);
      goto LABEL_40;
    }
    v27 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
    if (v27)
    {
      v28 = (uint64_t)v27;
      v29 = *(_DWORD *)(a2 + 192);
      if (v29 == 2)
      {
        if (v27[5])
        {
          v47 = (_QWORD *)v27[3];
          LOBYTE(v54) = *(_BYTE *)(v28 + 32);
          sub_2231813E8(v47, (uint64_t)&v54, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v28 + 40);
        sub_223BA081C(v28, a2 + 16, 4u);
      }
      else if (v29 == 1)
      {
        if (v27[5])
        {
          v48 = (_QWORD *)v27[3];
          LOBYTE(v54) = *(_BYTE *)(v28 + 32);
          sub_2231813E8(v48, (uint64_t)&v54, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v28 + 40);
        sub_223BA0278(v28, a2 + 16, 5u);
      }
      else
      {
        if (v29)
          goto LABEL_122;
        if (v27[5])
        {
          v30 = (_QWORD *)v27[3];
          LOBYTE(v54) = *(_BYTE *)(v28 + 32);
          sub_2231813E8(v30, (uint64_t)&v54, 1);
        }
        std::ostream::operator<<();
        ++*(_QWORD *)(v28 + 40);
        sub_223B9FBAC(v28, a2 + 16, 6u);
      }
      v49 = *(_BYTE *)(v28 + 34);
      if (*(_QWORD *)(v28 + 40))
      {
        v50 = *(_QWORD **)(v28 + 24);
        LOBYTE(v54) = *(_BYTE *)(v28 + 32);
        sub_2231813E8(v50, (uint64_t)&v54, 1);
      }
      v51 = *(_QWORD **)(v28 + 24);
      LOBYTE(v54) = v49;
      sub_2231813E8(v51, (uint64_t)&v54, 1);
      v52 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v28 + 40) = v52 + 1;
      if (v52 != -1)
      {
        v53 = *(_QWORD **)(v28 + 24);
        LOBYTE(v54) = *(_BYTE *)(v28 + 32);
        sub_2231813E8(v53, (uint64_t)&v54, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v28 + 40);
      v54 = *(_OWORD *)(a2 + 200);
      sub_22454F564(v28, (unsigned __int8 *)&v54);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 1);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 2);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 3);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 4);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 5);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 6);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 7);
      sub_22454F564(v28, (unsigned __int8 *)&v54 + 8);
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 9));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xA));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xB));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xC));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xD));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xE));
      sub_22454F564(v28, (unsigned __int8 *)((unint64_t)&v54 | 0xF));
    }
    else if (*a1 == &off_24EC776C0)
    {
      sub_223BE7AF4(a2, (uint64_t)a1);
    }
    else
    {
      sub_223BE7580(a2, a1);
    }
  }
}

uint64_t sub_223BE7580(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 < 1)
    {
      sub_223BACE24((uint64_t)a2, v4, v13);
    }
    else
    {
      if (v8 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BACE24((uint64_t)a2, v4, v9);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 < 1)
    {
      sub_223BAC79C((uint64_t)a2, v4, v13);
    }
    else
    {
      if (v10 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BAC79C((uint64_t)a2, v4, v11);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  else
  {
    if (v5)
      sub_22316DD70();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 < 1)
    {
      sub_223BABEC8((uint64_t)a2, v4, v13);
    }
    else
    {
      if (v6 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BABEC8((uint64_t)a2, v4, v7);
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  LODWORD(v13) = 1;
  (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 104))(a2, &v13);
  v13 = *(_OWORD *)(a1 + 200);
  (*(void (**)(_DWORD *, __int128 *))(*(_QWORD *)a2 + 80))(a2, &v13);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 1);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 2);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 3);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 4);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 5);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 6);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 7);
  (*(void (**)(_DWORD *, char *))(*(_QWORD *)a2 + 80))(a2, (char *)&v13 + 8);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 9);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xA);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xB);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xC);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xD);
  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xE);
  return (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 80))(a2, (unint64_t)&v13 | 0xF);
}

char *sub_223BE7AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  char v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v12) = 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v12, (char *)&v12 + 4, 4);
    v7 = v12;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA6918(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v12) = 5;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v12, (char *)&v12 + 4, 4);
    v8 = v12;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA67FC(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    LODWORD(v12) = 6;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v12, (char *)&v12 + 4, 4);
    v6 = v12;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA5FAC(a2, v4, v6);
  }
  v10 = *(_QWORD *)(a2 + 24);
  v9 = a2 + 24;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) - 8) + v10 + 10) = *(_QWORD *)(v9 + 8)
                                                                  - (*(_QWORD *)(*(_QWORD *)(v9 + 32) - 8)
                                                                   + v10)
                                                                  - 18;
  *(_QWORD *)(v9 + 32) -= 8;
  LODWORD(v12) = 1;
  sub_224501B60(v9, *(char **)(v9 + 8), (char *)&v12, (char *)&v12 + 4, 4);
  v12 = *(_OWORD *)(a1 + 200);
  return sub_224501B60(v9, *(char **)(v9 + 8), (char *)&v12, v13, 16);
}

double sub_223BE7CB4(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  double result;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  char v105;
  _QWORD *exception;
  _QWORD *v107;
  char v108;
  void *__p;
  uint64_t v110;
  char v111;
  _BYTE v112[8];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  __int128 v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60740, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 0:
LABEL_73:
        v36 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "info";
        *(_QWORD *)(v5 + 96) = 4;
        if (!v36)
          *(_BYTE *)(v5 + 104) = 1;
        sub_223BB4B40(v5, a2 + 16);
        v37 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "value";
        *(_QWORD *)(v5 + 96) = 5;
        if (!v37)
          *(_BYTE *)(v5 + 104) = 1;
        sub_224544628(v5);
        v38 = *(unsigned __int8 *)(v5 + 104);
        *(_QWORD *)(v5 + 88) = "version";
        *(_QWORD *)(v5 + 96) = 7;
        if (!v38)
          *(_BYTE *)(v5 + 104) = 1;
        v39 = (char *)sub_2245448E0((uint64_t *)v5);
        ++*(_QWORD *)(v5 + 112);
        __p = 0;
        sub_22451CAD4(v39, &__p);
        if (HIDWORD(__p))
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24EC7AC38;
          __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
        }
        __p = (void *)16;
        v110 = a2 + 200;
        v40 = (char *)sub_2245448E0((uint64_t *)v5);
        v41 = (_QWORD *)(v5 + 112);
        ++*(_QWORD *)(v5 + 112);
        sub_2245449F8(v40, (uint64_t)&__p);
LABEL_81:
        v43 = *(_QWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 32) = *(_QWORD *)(v43 - 8);
        v44 = *(_QWORD *)(v5 + 72);
        *v41 = *(_QWORD *)(v44 - 8);
        *(_QWORD *)(v5 + 48) = v43 - 8;
        *(_QWORD *)(v5 + 72) = v44 - 8;
        return result;
      case 1:
        sub_223B89234(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
        v7 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v7 != -1)
        {
          if (!(_DWORD)v7)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v112);
            if (!v127)
              goto LABEL_63;
            goto LABEL_39;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v108, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v113;
        *(_BYTE *)(a2 + 64) = 0;
        if (v116)
        {
          v20 = v115;
          *(_OWORD *)(a2 + 40) = v114;
          *(_QWORD *)(a2 + 56) = v20;
          v114 = 0uLL;
          v115 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v21 = v118;
        v22 = v117;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v22;
        *(_QWORD *)(a2 + 88) = v21;
        *(_BYTE *)(a2 + 120) = 0;
        if (v121)
        {
          v23 = v120;
          *(_OWORD *)(a2 + 96) = v119;
          *(_QWORD *)(a2 + 112) = v23;
          v119 = 0uLL;
          v120 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v124)
        {
          v24 = v123;
          *(_OWORD *)(a2 + 128) = v122;
          *(_QWORD *)(a2 + 144) = v24;
          v122 = 0uLL;
          v123 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v25 = v127;
        if (v127)
        {
          *(_OWORD *)(a2 + 160) = v125;
          *(_QWORD *)(a2 + 176) = v126;
          v125 = 0uLL;
          v126 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v25)
          goto LABEL_63;
LABEL_39:
        v26 = v125;
        if (!(_QWORD)v125)
          goto LABEL_63;
        v27 = *((_QWORD *)&v125 + 1);
        v28 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          goto LABEL_62;
        do
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
        while (v27 != v26);
LABEL_61:
        v28 = (void *)v125;
LABEL_62:
        *((_QWORD *)&v125 + 1) = v26;
        operator delete(v28);
        goto LABEL_63;
      case 2:
        sub_223B8944C(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
        v13 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v13 != -1)
        {
          if (!(_DWORD)v13)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)v112);
            if (!v127)
            {
LABEL_63:
              if (v124 && SHIBYTE(v123) < 0)
                operator delete((void *)v122);
              if (v121 && SHIBYTE(v120) < 0)
                operator delete((void *)v119);
              if (v116 && SHIBYTE(v115) < 0)
                operator delete((void *)v114);
              sub_2231AD66C((uint64_t)&__p);
              if (*(_DWORD *)(a2 + 192))
                sub_22316DD70();
              goto LABEL_73;
            }
            goto LABEL_55;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v13])(&v108, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v113;
        *(_BYTE *)(a2 + 64) = 0;
        if (v116)
        {
          v29 = v115;
          *(_OWORD *)(a2 + 40) = v114;
          *(_QWORD *)(a2 + 56) = v29;
          v114 = 0uLL;
          v115 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v30 = v118;
        v31 = v117;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v31;
        *(_QWORD *)(a2 + 88) = v30;
        *(_BYTE *)(a2 + 120) = 0;
        if (v121)
        {
          v32 = v120;
          *(_OWORD *)(a2 + 96) = v119;
          *(_QWORD *)(a2 + 112) = v32;
          v119 = 0uLL;
          v120 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v124)
        {
          v33 = v123;
          *(_OWORD *)(a2 + 128) = v122;
          *(_QWORD *)(a2 + 144) = v33;
          v122 = 0uLL;
          v123 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v34 = v127;
        if (v127)
        {
          *(_OWORD *)(a2 + 160) = v125;
          *(_QWORD *)(a2 + 176) = v126;
          v125 = 0uLL;
          v126 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v34)
          goto LABEL_63;
LABEL_55:
        v26 = v125;
        if (!(_QWORD)v125)
          goto LABEL_63;
        v35 = *((_QWORD *)&v125 + 1);
        v28 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          goto LABEL_62;
        do
        {
          if (*(char *)(v35 - 1) < 0)
            operator delete(*(void **)(v35 - 24));
          v35 -= 24;
        }
        while (v35 != v26);
        goto LABEL_61;
    }
LABEL_272:
    sub_22316DD70();
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = *(_DWORD *)(a2 + 192);
    if (!v10)
    {
LABEL_138:
      sub_223BBD12C((uint64_t)&__p, v9, a2 + 16);
      LODWORD(__p) = 1;
      sub_224554038(v9[6], &__p);
      v66 = v9[6];
      sub_224553CF0(v66, (_BYTE *)(a2 + 200));
      sub_224553CF0(v66, (_BYTE *)(a2 + 201));
      sub_224553CF0(v66, (_BYTE *)(a2 + 202));
      sub_224553CF0(v66, (_BYTE *)(a2 + 203));
      sub_224553CF0(v66, (_BYTE *)(a2 + 204));
      sub_224553CF0(v66, (_BYTE *)(a2 + 205));
      sub_224553CF0(v66, (_BYTE *)(a2 + 206));
      sub_224553CF0(v66, (_BYTE *)(a2 + 207));
      sub_224553CF0(v66, (_BYTE *)(a2 + 208));
      sub_224553CF0(v66, (_BYTE *)(a2 + 209));
      sub_224553CF0(v66, (_BYTE *)(a2 + 210));
      sub_224553CF0(v66, (_BYTE *)(a2 + 211));
      sub_224553CF0(v66, (_BYTE *)(a2 + 212));
      sub_224553CF0(v66, (_BYTE *)(a2 + 213));
      sub_224553CF0(v66, (_BYTE *)(a2 + 214));
      sub_224553CF0(v66, (_BYTE *)(a2 + 215));
      return result;
    }
    if (v10 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
      v11 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v11 != -1)
      {
        if (!(_DWORD)v11)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v112);
          v12 = v127;
LABEL_102:
          if (!v12)
            goto LABEL_128;
          v57 = v125;
          if (!(_QWORD)v125)
            goto LABEL_128;
          v58 = *((_QWORD *)&v125 + 1);
          v59 = (void *)v125;
          if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          {
LABEL_127:
            *((_QWORD *)&v125 + 1) = v57;
            operator delete(v59);
LABEL_128:
            if (v124 && SHIBYTE(v123) < 0)
              operator delete((void *)v122);
            if (v121 && SHIBYTE(v120) < 0)
              operator delete((void *)v119);
            if (v116 && SHIBYTE(v115) < 0)
              operator delete((void *)v114);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_138;
          }
          do
          {
            if (*(char *)(v58 - 1) < 0)
              operator delete(*(void **)(v58 - 24));
            v58 -= 24;
          }
          while (v58 != v57);
LABEL_126:
          v59 = (void *)v125;
          goto LABEL_127;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v11])(&v108, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v113;
      *(_BYTE *)(a2 + 64) = 0;
      if (v116)
      {
        v52 = v115;
        *(_OWORD *)(a2 + 40) = v114;
        *(_QWORD *)(a2 + 56) = v52;
        v114 = 0uLL;
        v115 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v53 = v118;
      v54 = v117;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v54;
      *(_QWORD *)(a2 + 88) = v53;
      *(_BYTE *)(a2 + 120) = 0;
      if (v121)
      {
        v55 = v120;
        *(_OWORD *)(a2 + 96) = v119;
        *(_QWORD *)(a2 + 112) = v55;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v124)
      {
        v56 = v123;
        *(_OWORD *)(a2 + 128) = v122;
        *(_QWORD *)(a2 + 144) = v56;
        v122 = 0uLL;
        v123 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v12 = v127;
      if (v127)
      {
        *(_OWORD *)(a2 + 160) = v125;
        *(_QWORD *)(a2 + 176) = v126;
        v125 = 0uLL;
        v126 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_102;
    }
    if (v10 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
    v18 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v18 != -1)
    {
      if (!(_DWORD)v18)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v112);
        v19 = v127;
LABEL_119:
        if (!v19)
          goto LABEL_128;
        v57 = v125;
        if (!(_QWORD)v125)
          goto LABEL_128;
        v65 = *((_QWORD *)&v125 + 1);
        v59 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          goto LABEL_127;
        do
        {
          if (*(char *)(v65 - 1) < 0)
            operator delete(*(void **)(v65 - 24));
          v65 -= 24;
        }
        while (v65 != v57);
        goto LABEL_126;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v18])(&v108, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v113;
    *(_BYTE *)(a2 + 64) = 0;
    if (v116)
    {
      v60 = v115;
      *(_OWORD *)(a2 + 40) = v114;
      *(_QWORD *)(a2 + 56) = v60;
      v114 = 0uLL;
      v115 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v61 = v118;
    v62 = v117;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v62;
    *(_QWORD *)(a2 + 88) = v61;
    *(_BYTE *)(a2 + 120) = 0;
    if (v121)
    {
      v63 = v120;
      *(_OWORD *)(a2 + 96) = v119;
      *(_QWORD *)(a2 + 112) = v63;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v124)
    {
      v64 = v123;
      *(_OWORD *)(a2 + 128) = v122;
      *(_QWORD *)(a2 + 144) = v64;
      v122 = 0uLL;
      v123 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v19 = v127;
    if (v127)
    {
      *(_OWORD *)(a2 + 160) = v125;
      *(_QWORD *)(a2 + 176) = v126;
      v125 = 0uLL;
      v126 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_119;
  }
  v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC607C8, 0);
  if (v14)
  {
    v5 = (uint64_t)v14;
    v15 = *(_DWORD *)(a2 + 192);
    if (!v15)
    {
LABEL_191:
      v83 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "info";
      *(_QWORD *)(v5 + 96) = 4;
      if (!v83)
        *(_BYTE *)(v5 + 104) = 1;
      sub_223BBD758(v5, a2 + 16);
      v84 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "value";
      *(_QWORD *)(v5 + 96) = 5;
      if (!v84)
        *(_BYTE *)(v5 + 104) = 1;
      sub_224544138(v5);
      v85 = *(unsigned __int8 *)(v5 + 104);
      *(_QWORD *)(v5 + 88) = "version";
      *(_QWORD *)(v5 + 96) = 7;
      if (!v85)
        *(_BYTE *)(v5 + 104) = 1;
      v86 = (char *)sub_2245443F0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      __p = 0;
      sub_22451C444(v86, &__p);
      if (HIDWORD(__p))
      {
        v107 = __cxa_allocate_exception(8uLL);
        *v107 = &off_24EC7AC38;
        __cxa_throw(v107, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
      }
      __p = (void *)16;
      v110 = a2 + 200;
      v87 = (char *)sub_2245443F0((uint64_t *)v5);
      v41 = (_QWORD *)(v5 + 112);
      ++*(_QWORD *)(v5 + 112);
      sub_224544508(v87, (uint64_t)&__p);
      goto LABEL_81;
    }
    if (v15 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
      v16 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v16 != -1)
      {
        if (!(_DWORD)v16)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v112);
          v17 = v127;
LABEL_155:
          if (!v17)
            goto LABEL_181;
          v74 = v125;
          if (!(_QWORD)v125)
            goto LABEL_181;
          v75 = *((_QWORD *)&v125 + 1);
          v76 = (void *)v125;
          if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          {
LABEL_180:
            *((_QWORD *)&v125 + 1) = v74;
            operator delete(v76);
LABEL_181:
            if (v124 && SHIBYTE(v123) < 0)
              operator delete((void *)v122);
            if (v121 && SHIBYTE(v120) < 0)
              operator delete((void *)v119);
            if (v116 && SHIBYTE(v115) < 0)
              operator delete((void *)v114);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
            goto LABEL_191;
          }
          do
          {
            if (*(char *)(v75 - 1) < 0)
              operator delete(*(void **)(v75 - 24));
            v75 -= 24;
          }
          while (v75 != v74);
LABEL_179:
          v76 = (void *)v125;
          goto LABEL_180;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&v108, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v113;
      *(_BYTE *)(a2 + 64) = 0;
      if (v116)
      {
        v69 = v115;
        *(_OWORD *)(a2 + 40) = v114;
        *(_QWORD *)(a2 + 56) = v69;
        v114 = 0uLL;
        v115 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v70 = v118;
      v71 = v117;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v71;
      *(_QWORD *)(a2 + 88) = v70;
      *(_BYTE *)(a2 + 120) = 0;
      if (v121)
      {
        v72 = v120;
        *(_OWORD *)(a2 + 96) = v119;
        *(_QWORD *)(a2 + 112) = v72;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v124)
      {
        v73 = v123;
        *(_OWORD *)(a2 + 128) = v122;
        *(_QWORD *)(a2 + 144) = v73;
        v122 = 0uLL;
        v123 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v17 = v127;
      if (v127)
      {
        *(_OWORD *)(a2 + 160) = v125;
        *(_QWORD *)(a2 + 176) = v126;
        v125 = 0uLL;
        v126 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_155;
    }
    if (v15 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
    v50 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v50 != -1)
    {
      if (!(_DWORD)v50)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v112);
        v51 = v127;
LABEL_172:
        if (!v51)
          goto LABEL_181;
        v74 = v125;
        if (!(_QWORD)v125)
          goto LABEL_181;
        v82 = *((_QWORD *)&v125 + 1);
        v76 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          goto LABEL_180;
        do
        {
          if (*(char *)(v82 - 1) < 0)
            operator delete(*(void **)(v82 - 24));
          v82 -= 24;
        }
        while (v82 != v74);
        goto LABEL_179;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v50])(&v108, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v113;
    *(_BYTE *)(a2 + 64) = 0;
    if (v116)
    {
      v77 = v115;
      *(_OWORD *)(a2 + 40) = v114;
      *(_QWORD *)(a2 + 56) = v77;
      v114 = 0uLL;
      v115 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v78 = v118;
    v79 = v117;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v79;
    *(_QWORD *)(a2 + 88) = v78;
    *(_BYTE *)(a2 + 120) = 0;
    if (v121)
    {
      v80 = v120;
      *(_OWORD *)(a2 + 96) = v119;
      *(_QWORD *)(a2 + 112) = v80;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v124)
    {
      v81 = v123;
      *(_OWORD *)(a2 + 128) = v122;
      *(_QWORD *)(a2 + 144) = v81;
      v122 = 0uLL;
      v123 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v51 = v127;
    if (v127)
    {
      *(_OWORD *)(a2 + 160) = v125;
      *(_QWORD *)(a2 + 176) = v126;
      v125 = 0uLL;
      v126 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_172;
  }
  v45 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
  if (v45)
  {
    v46 = (uint64_t)v45;
    v47 = *(_DWORD *)(a2 + 192);
    if (!v47)
      goto LABEL_246;
    if (v47 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
      v48 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v48 != -1)
      {
        if (!(_DWORD)v48)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)v112);
          v49 = v127;
LABEL_210:
          if (!v49)
            goto LABEL_236;
          v93 = v125;
          if (!(_QWORD)v125)
            goto LABEL_236;
          v94 = *((_QWORD *)&v125 + 1);
          v95 = (void *)v125;
          if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          {
LABEL_235:
            *((_QWORD *)&v125 + 1) = v93;
            operator delete(v95);
LABEL_236:
            if (v124 && SHIBYTE(v123) < 0)
              operator delete((void *)v122);
            if (v121 && SHIBYTE(v120) < 0)
              operator delete((void *)v119);
            if (v116 && SHIBYTE(v115) < 0)
              operator delete((void *)v114);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
LABEL_246:
            LODWORD(__p) = 6;
            sub_2245508F0(v46, &__p);
            v102 = __p;
            if (__p >= 6)
              v103 = 6;
            else
              v103 = __p;
            if (v103 < 3)
              sub_223BC4F50((uint64_t)&__p, v46, a2 + 16, v103);
            else
              sub_223BC5140(v46, a2 + 16, v103);
            if (v102 < 3 || *(_BYTE *)(v46 + 131))
            {
LABEL_254:
              LODWORD(__p) = 1;
              sub_2245508F0(v46, &__p);
              sub_22454FFAC(v46, (_BYTE *)(a2 + 200));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 201));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 202));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 203));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 204));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 205));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 206));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 207));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 208));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 209));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 210));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 211));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 212));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 213));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 214));
              sub_22454FFAC(v46, (_BYTE *)(a2 + 215));
              return result;
            }
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + *(_QWORD *)(**(_QWORD **)(v46 + 16) - 24) + 32) & 2) != 0)
                goto LABEL_254;
              sub_2245523C0(v46, (uint64_t)&__p);
              if (v111 < 0)
              {
                if (v110 != 1 || *(unsigned __int8 *)(v46 + 72) != *(unsigned __int8 *)__p)
                {
LABEL_267:
                  v105 = 1;
                  goto LABEL_268;
                }
              }
              else if (v111 != 1 || *(unsigned __int8 *)(v46 + 72) != __p)
              {
                goto LABEL_267;
              }
              v105 = 0;
LABEL_268:
              if (v111 < 0)
                operator delete(__p);
              if (*(_BYTE *)(v46 + 131))
                v104 = 0;
              else
                v104 = v105;
              if ((v104 & 1) == 0)
                goto LABEL_254;
            }
          }
          do
          {
            if (*(char *)(v94 - 1) < 0)
              operator delete(*(void **)(v94 - 24));
            v94 -= 24;
          }
          while (v94 != v93);
LABEL_234:
          v95 = (void *)v125;
          goto LABEL_235;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v48])(&v108, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v113;
      *(_BYTE *)(a2 + 64) = 0;
      if (v116)
      {
        v88 = v115;
        *(_OWORD *)(a2 + 40) = v114;
        *(_QWORD *)(a2 + 56) = v88;
        v114 = 0uLL;
        v115 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v89 = v118;
      v90 = v117;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v90;
      *(_QWORD *)(a2 + 88) = v89;
      *(_BYTE *)(a2 + 120) = 0;
      if (v121)
      {
        v91 = v120;
        *(_OWORD *)(a2 + 96) = v119;
        *(_QWORD *)(a2 + 112) = v91;
        v119 = 0uLL;
        v120 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v124)
      {
        v92 = v123;
        *(_OWORD *)(a2 + 128) = v122;
        *(_QWORD *)(a2 + 144) = v92;
        v122 = 0uLL;
        v123 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v49 = v127;
      if (v127)
      {
        *(_OWORD *)(a2 + 160) = v125;
        *(_QWORD *)(a2 + 176) = v126;
        v125 = 0uLL;
        v126 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_210;
    }
    if (v47 != 2)
      goto LABEL_272;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)v112, (uint64_t *)&__p);
    v67 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v67 != -1)
    {
      if (!(_DWORD)v67)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)v112);
        v68 = v127;
LABEL_227:
        if (!v68)
          goto LABEL_236;
        v93 = v125;
        if (!(_QWORD)v125)
          goto LABEL_236;
        v101 = *((_QWORD *)&v125 + 1);
        v95 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
          goto LABEL_235;
        do
        {
          if (*(char *)(v101 - 1) < 0)
            operator delete(*(void **)(v101 - 24));
          v101 -= 24;
        }
        while (v101 != v93);
        goto LABEL_234;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v67])(&v108, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v113;
    *(_BYTE *)(a2 + 64) = 0;
    if (v116)
    {
      v96 = v115;
      *(_OWORD *)(a2 + 40) = v114;
      *(_QWORD *)(a2 + 56) = v96;
      v114 = 0uLL;
      v115 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v97 = v118;
    v98 = v117;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v98;
    *(_QWORD *)(a2 + 88) = v97;
    *(_BYTE *)(a2 + 120) = 0;
    if (v121)
    {
      v99 = v120;
      *(_OWORD *)(a2 + 96) = v119;
      *(_QWORD *)(a2 + 112) = v99;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v124)
    {
      v100 = v123;
      *(_OWORD *)(a2 + 128) = v122;
      *(_QWORD *)(a2 + 144) = v100;
      v122 = 0uLL;
      v123 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v68 = v127;
    if (v127)
    {
      *(_OWORD *)(a2 + 160) = v125;
      *(_QWORD *)(a2 + 176) = v126;
      v125 = 0uLL;
      v126 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_227;
  }
  if (*a1 == &off_24EC77900)
    *(_QWORD *)&result = sub_223BE9840(a2, a1).n128_u64[0];
  else
    sub_223BE9224(a2, a1);
  return result;
}

void sub_223BE914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BE9224(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v17;
  uint64_t v18[27];
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v18);
    sub_223B87C9C((uint64_t)&v19, v18);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)&v19);
        if (!v34)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v17, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v20;
    *(_BYTE *)(a1 + 64) = 0;
    if (v23)
    {
      *(_OWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 56) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 88) = v25;
    *(_BYTE *)(a1 + 120) = 0;
    if (v28)
    {
      *(_OWORD *)(a1 + 96) = v26;
      *(_QWORD *)(a1 + 112) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 128) = v29;
      *(_QWORD *)(a1 + 144) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v34;
    if (v34)
    {
      *(_OWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v32;
    if (!(_QWORD)v32)
      goto LABEL_46;
    v10 = *((_QWORD *)&v32 + 1);
    v11 = (void *)v32;
    if (*((_QWORD *)&v32 + 1) == (_QWORD)v32)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v32;
LABEL_45:
    *((_QWORD *)&v32 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v18);
  sub_223B87C9C((uint64_t)&v19, v18);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v17, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v20;
    *(_BYTE *)(a1 + 64) = 0;
    if (v23)
    {
      *(_OWORD *)(a1 + 40) = v21;
      *(_QWORD *)(a1 + 56) = v22;
      v22 = 0;
      v21 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v24;
    *(_QWORD *)(a1 + 88) = v25;
    *(_BYTE *)(a1 + 120) = 0;
    if (v28)
    {
      *(_OWORD *)(a1 + 96) = v26;
      *(_QWORD *)(a1 + 112) = v27;
      v27 = 0;
      v26 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v31)
    {
      *(_OWORD *)(a1 + 128) = v29;
      *(_QWORD *)(a1 + 144) = v30;
      v30 = 0;
      v29 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v34;
    if (v34)
    {
      *(_OWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)&v19);
  if (v34)
  {
LABEL_38:
    v9 = v32;
    if (!(_QWORD)v32)
      goto LABEL_46;
    v13 = *((_QWORD *)&v32 + 1);
    v11 = (void *)v32;
    if (*((_QWORD *)&v32 + 1) == (_QWORD)v32)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (v28 && SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  if (v23 && SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  sub_2231AD66C((uint64_t)v18);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  v14 = *a2;
  v18[0] = a2[1];
  v15 = v18[0];
  v19 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v14 + 104))(a2, &v19);
  if (v15 < 1)
  {
    if (v19 < 3)
      sub_223BD7864((uint64_t)&v19, (uint64_t)a2, v4, v19);
    else
      sub_223BD7AD8((uint64_t)a2, v4, v19);
  }
  else
  {
    sub_223BD7174((int *)v18, (uint64_t)a2, v4, v19);
  }
  LODWORD(v18[0]) = 1;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v18);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 200);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 201);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 202);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 203);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 204);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 205);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 206);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 207);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 208);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 209);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 210);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 211);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 212);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 213);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 214);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, a1 + 215);
}

void sub_223BE97F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_223BE9840(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  __n128 result;
  std::logic_error *exception;
  std::logic_error *v22;
  char v23;
  uint64_t v24[27];
  _BYTE v25[8];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v24);
    sub_223B87C9C((uint64_t)v25, v24);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v25);
        if (!v40)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v23, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v26;
    *(_BYTE *)(a1 + 64) = 0;
    if (v29)
    {
      *(_OWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      v28 = 0;
      v27 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v30;
    *(_QWORD *)(a1 + 88) = v31;
    *(_BYTE *)(a1 + 120) = 0;
    if (v34)
    {
      *(_OWORD *)(a1 + 96) = v32;
      *(_QWORD *)(a1 + 112) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v37)
    {
      *(_OWORD *)(a1 + 128) = v35;
      *(_QWORD *)(a1 + 144) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v40;
    if (v40)
    {
      *(_OWORD *)(a1 + 160) = v38;
      *(_QWORD *)(a1 + 176) = v39;
      v39 = 0;
      v38 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v38;
    if (!(_QWORD)v38)
      goto LABEL_46;
    v10 = *((_QWORD *)&v38 + 1);
    v11 = (void *)v38;
    if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v38;
LABEL_45:
    *((_QWORD *)&v38 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v24);
  sub_223B87C9C((uint64_t)v25, v24);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v23, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v26;
    *(_BYTE *)(a1 + 64) = 0;
    if (v29)
    {
      *(_OWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 56) = v28;
      v28 = 0;
      v27 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v30;
    *(_QWORD *)(a1 + 88) = v31;
    *(_BYTE *)(a1 + 120) = 0;
    if (v34)
    {
      *(_OWORD *)(a1 + 96) = v32;
      *(_QWORD *)(a1 + 112) = v33;
      v33 = 0;
      v32 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v37)
    {
      *(_OWORD *)(a1 + 128) = v35;
      *(_QWORD *)(a1 + 144) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v40;
    if (v40)
    {
      *(_OWORD *)(a1 + 160) = v38;
      *(_QWORD *)(a1 + 176) = v39;
      v39 = 0;
      v38 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v25);
  if (v40)
  {
LABEL_38:
    v9 = v38;
    if (!(_QWORD)v38)
      goto LABEL_46;
    v13 = *((_QWORD *)&v38 + 1);
    v11 = (void *)v38;
    if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  if (v29 && SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  sub_2231AD66C((uint64_t)v24);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  sub_223BCDEF0((uint64_t)v24, a2, v4);
  v15 = a2[6];
  v14 = a2[7];
  v16 = v14 - v15;
  if (v14 < v15)
    v16 = 0;
  if (v16 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v17 = v15 + 4;
  a2[6] = v17;
  v18 = v14 >= v17;
  v19 = v14 - v17;
  if (!v18)
    v19 = 0;
  if (v19 <= 0xF)
  {
    v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v22, "Not enough data to read span");
    __cxa_throw(v22, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  result = *(__n128 *)(a2[3] + v17);
  *(__n128 *)(a1 + 200) = result;
  a2[6] += 16;
  return result;
}

void sub_223BE9D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223BE9D78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC602E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223BE9D88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC602E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223BE9DB8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_223BE9DC8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC60330;
  *(_QWORD *)(a1 + 8) = &unk_24EC60390;
  sub_223BEA9A4((_QWORD *)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_223BE9E34(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24EC60330;
  *(_QWORD *)(a1 + 8) = &unk_24EC60390;
  sub_223BEA9A4((_QWORD *)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x227684CE8](a1, 0x10B3C40FC9AC1B3);
}

uint64_t sub_223BE9EB4()
{
  return 1;
}

uint64_t sub_223BE9EBC()
{
  return 0;
}

uint64_t sub_223BE9EC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_223BE9ED0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_223BE9EDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  _BYTE v31[208];
  uint64_t (**v32)();
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 __p;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unsigned __int128 v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  sub_223FD39C4((char ***)(a1 + 200), (uint64_t)&v15);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_223B8944C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_223B89234(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    sub_223B8901C(v4, (uint64_t)v31);
  }
  v32 = &off_24EC604A8;
  v33 = v15;
  v34 = *(_OWORD *)v16;
  v16[0] = 0;
  v16[1] = 0;
  v36 = *(_OWORD *)v18;
  v35 = v17;
  v37 = v19;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v38 = *(_OWORD *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v40 = *(_OWORD *)v22;
  v39 = v21;
  v41 = v23;
  v21 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v42 = *(_OWORD *)v24;
  v24[0] = 0;
  v24[1] = 0;
  v44 = *(_OWORD *)v26;
  v43 = v25;
  v45 = v27;
  v25 = 0;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  __p = *(_OWORD *)v28;
  v47 = v29;
  v28[0] = 0;
  v28[1] = 0;
  v48 = v30;
  v29 = 0;
  sub_2231AB0FC((uint64_t)&v49, (uint64_t)v31);
  v32 = &off_24EC60428;
  v6 = operator new();
  v7 = v6;
  v8 = v33;
  v9 = v35;
  *(_QWORD *)v6 = &off_24EC604A8;
  *(_QWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 16) = v34;
  *(_QWORD *)(v6 + 32) = v9;
  v35 = 0;
  v34 = 0uLL;
  *(_OWORD *)(v6 + 40) = v36;
  v10 = v39;
  *(_QWORD *)(v6 + 56) = v37;
  v37 = 0;
  v36 = 0uLL;
  *(_OWORD *)(v6 + 64) = v38;
  *(_QWORD *)(v6 + 80) = v10;
  v38 = 0uLL;
  v39 = 0;
  *(_OWORD *)(v6 + 88) = v40;
  v11 = v43;
  *(_QWORD *)(v6 + 104) = v41;
  v40 = 0uLL;
  v41 = 0;
  *(_OWORD *)(v6 + 112) = v42;
  *(_QWORD *)(v6 + 128) = v11;
  v42 = 0uLL;
  v43 = 0;
  *(_OWORD *)(v6 + 136) = v44;
  v12 = v47;
  *(_QWORD *)(v6 + 152) = v45;
  v44 = 0uLL;
  v45 = 0;
  *(_OWORD *)(v6 + 160) = __p;
  *(_QWORD *)(v6 + 176) = v12;
  __p = 0uLL;
  v47 = 0;
  *(_BYTE *)(v6 + 184) = v48;
  *(_OWORD *)(v6 + 192) = v49;
  *(_BYTE *)(v6 + 208) = 0;
  *(_BYTE *)(v6 + 232) = 0;
  if (v52)
  {
    *(_OWORD *)(v6 + 208) = v50;
    *(_QWORD *)(v6 + 224) = v51;
    v51 = 0;
    v50 = 0uLL;
    *(_BYTE *)(v6 + 232) = 1;
  }
  *(_BYTE *)(v6 + 240) = 0;
  *(_BYTE *)(v6 + 264) = 0;
  if (v55)
  {
    *(_OWORD *)(v6 + 240) = v53;
    *(_QWORD *)(v6 + 256) = v54;
    v54 = 0;
    v53 = 0uLL;
    *(_BYTE *)(v6 + 264) = 1;
  }
  *(_OWORD *)(v6 + 272) = v56;
  *(_QWORD *)(v6 + 288) = v57;
  *(_BYTE *)(v6 + 304) = 0;
  *(_BYTE *)(v6 + 352) = 0;
  if (v61)
  {
    *(_OWORD *)(v6 + 304) = v58;
    *(_QWORD *)(v6 + 320) = v59;
    v59 = 0;
    v58 = 0uLL;
    do
      v13 = __ldaxp(&v60);
    while (__stlxp(v13, &v60));
    *(_OWORD *)(v6 + 336) = v13;
    *(_BYTE *)(v6 + 352) = 1;
  }
  *(_BYTE *)(v6 + 368) = 0;
  *(_BYTE *)(v6 + 392) = 0;
  if (v64)
  {
    *(_OWORD *)(v6 + 368) = v62;
    *(_QWORD *)(v6 + 384) = v63;
    v63 = 0;
    v62 = 0uLL;
    *(_BYTE *)(v6 + 392) = 1;
  }
  *(_QWORD *)v6 = &off_24EC60428;
  *a2 = &off_24EC6A3B8;
  a2[1] = v6;
  v14 = (_QWORD *)operator new();
  *v14 = &off_24EC6A4B0;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v7;
  a2[2] = v14;
  v32 = &off_24EC604A8;
  sub_2231AD66C((uint64_t)&v49);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v44)
  {
    *((_QWORD *)&v44 + 1) = v44;
    operator delete((void *)v44);
  }
  if ((_QWORD)v42)
  {
    *((_QWORD *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
  if ((_QWORD)v40)
  {
    *((_QWORD *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
  if ((_QWORD)v36)
  {
    *((_QWORD *)&v36 + 1) = v36;
    operator delete((void *)v36);
  }
  if ((_QWORD)v34)
  {
    *((_QWORD *)&v34 + 1) = v34;
    operator delete((void *)v34);
  }
  sub_2231AD66C((uint64_t)v31);
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
}

void sub_223BEA39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_2231AD66C(v33);
  sub_22388993C((_QWORD *)(v35 | 8));
  sub_2231AD66C((uint64_t)&a33);
  sub_22388993C(&a10);
  _Unwind_Resume(a1);
}

void sub_223BEA3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22388993C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_223BEA404(uint64_t a1, void *lpsrc)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD v51[5];
  unsigned __int8 **v52;
  _QWORD v53[5];
  unsigned __int8 **v54;
  char v55;
  _BYTE v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[6];

  v67[5] = *MEMORY[0x24BDAC8D0];
  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A430, (const struct __class_type_info *)&unk_24EC60400, 0);
  if (v3)
  {
    v4 = v3;
    v5 = a1 + 16;
    v6 = *(_DWORD *)(a1 + 192);
    if (v6 == 2)
    {
      sub_223B8944C(v5, (uint64_t)v62);
    }
    else if (v6 == 1)
    {
      sub_223B89234(v5, (uint64_t)v62);
    }
    else
    {
      if (v6)
        sub_22316DD70();
      sub_223B8901C(v5, (uint64_t)v62);
    }
    v8 = (uint64_t)(v4 + 4);
    v9 = v4[48];
    if (v9 == 2)
    {
      sub_223B8944C(v8, (uint64_t)v56);
    }
    else if (v9 == 1)
    {
      sub_223B89234(v8, (uint64_t)v56);
    }
    else
    {
      if (v9)
        sub_22316DD70();
      sub_223B8901C(v8, (uint64_t)v56);
    }
    v53[0] = v62;
    v53[1] = &v63;
    v53[2] = &v64;
    v53[3] = &v65;
    v53[4] = &v66;
    v54 = (unsigned __int8 **)v67;
    v51[0] = v56;
    v51[1] = &v57;
    v51[2] = &v58;
    v51[3] = &v59;
    v51[4] = &v60;
    v52 = (unsigned __int8 **)&v61;
    if (!sub_224123BEC((uint64_t)&v55, v53, v51))
      goto LABEL_82;
    if (*((_BYTE *)v54 + 24) && *((_BYTE *)v52 + 24))
    {
      v10 = *v54;
      v11 = v54[1];
      v12 = *v52;
      if (v11 - *v54 != v52[1] - *v52)
        goto LABEL_82;
      if (v10 != v11)
      {
        while (sub_224122C08(v10, v12))
        {
          v10 += 96;
          v12 += 96;
          if (v10 == v11)
            goto LABEL_24;
        }
        goto LABEL_82;
      }
    }
    else if ((*((_BYTE *)v54 + 24) != 0) != (*((_BYTE *)v52 + 24) != 0))
    {
      goto LABEL_82;
    }
LABEL_24:
    if (*(_QWORD *)(a1 + 200) == *((_QWORD *)v4 + 25))
    {
      v14 = *(char **)(a1 + 208);
      v13 = *(char **)(a1 + 216);
      v15 = (_QWORD *)*((_QWORD *)v4 + 26);
      if (v13 - v14 == *((_QWORD *)v4 + 27) - (_QWORD)v15)
      {
        if (v14 == v13)
        {
LABEL_33:
          v18 = *(_QWORD *)(a1 + 232);
          v17 = *(_QWORD *)(a1 + 240);
          v19 = *((_QWORD *)v4 + 29);
          if (v17 - v18 == *((_QWORD *)v4 + 30) - v19)
          {
            if (v18 == v17)
            {
LABEL_41:
              v24 = *(char **)(a1 + 256);
              v23 = *(char **)(a1 + 264);
              v25 = (_QWORD *)*((_QWORD *)v4 + 32);
              if (v23 - v24 == *((_QWORD *)v4 + 33) - (_QWORD)v25)
              {
                if (v24 == v23)
                {
LABEL_49:
                  v28 = *(char **)(a1 + 280);
                  v27 = *(char **)(a1 + 288);
                  v29 = (_QWORD *)*((_QWORD *)v4 + 35);
                  if (v27 - v28 == *((_QWORD *)v4 + 36) - (_QWORD)v29)
                  {
                    if (v28 == v27)
                    {
LABEL_57:
                      if (*(unsigned __int8 *)(a1 + 304) == *((unsigned __int8 *)v4 + 304))
                      {
                        v32 = *(char **)(a1 + 312);
                        v31 = *(char **)(a1 + 320);
                        v33 = (_QWORD *)*((_QWORD *)v4 + 39);
                        if (v31 - v32 == *((_QWORD *)v4 + 40) - (_QWORD)v33)
                        {
                          if (v32 == v31)
                          {
LABEL_66:
                            v36 = *(_QWORD *)(a1 + 336);
                            v35 = *(_QWORD *)(a1 + 344);
                            v37 = *((_QWORD *)v4 + 42);
                            if (v35 - v36 == *((_QWORD *)v4 + 43) - v37)
                            {
                              if (v36 == v35)
                              {
LABEL_74:
                                v42 = *(char **)(a1 + 360);
                                v41 = *(char **)(a1 + 368);
                                v43 = (uint64_t *)*((_QWORD *)v4 + 45);
                                if (v41 - v42 == *((_QWORD *)v4 + 46) - (_QWORD)v43)
                                {
                                  if (v42 == v41)
                                  {
                                    v7 = 1;
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v44 = *(_QWORD *)v42;
                                      v45 = *((_QWORD *)v42 + 1);
                                      v42 += 16;
                                      v46 = *v43;
                                      v47 = v43[1];
                                      v43 += 2;
                                      v48 = v44 ^ v46 | v45 ^ v47;
                                      v7 = v48 == 0;
                                      if (v48)
                                        v49 = 1;
                                      else
                                        v49 = v42 == v41;
                                    }
                                    while (!v49);
                                  }
                                  goto LABEL_83;
                                }
                              }
                              else
                              {
                                while (1)
                                {
                                  v38 = 0;
                                  do
                                  {
                                    v39 = *(float *)(v36 + v38);
                                    v40 = *(float *)(v37 + v38);
                                    if (v39 != v40)
                                      break;
                                    v16 = v38 == 60;
                                    v38 += 4;
                                  }
                                  while (!v16);
                                  if (v39 != v40)
                                    break;
                                  v36 += 64;
                                  v37 += 64;
                                  if (v36 == v35)
                                    goto LABEL_74;
                                }
                              }
                            }
                          }
                          else
                          {
                            while (*(_QWORD *)v32 == *v33 && *((_QWORD *)v32 + 1) == v33[1])
                            {
                              v32 += 16;
                              v33 += 2;
                              if (v32 == v31)
                                goto LABEL_66;
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      while (*(_QWORD *)v28 == *v29 && *((_QWORD *)v28 + 1) == v29[1])
                      {
                        v28 += 16;
                        v29 += 2;
                        if (v28 == v27)
                          goto LABEL_57;
                      }
                    }
                  }
                }
                else
                {
                  while (*(_QWORD *)v24 == *v25 && *((_QWORD *)v24 + 1) == v25[1])
                  {
                    v24 += 16;
                    v25 += 2;
                    if (v24 == v23)
                      goto LABEL_49;
                  }
                }
              }
            }
            else
            {
              while (1)
              {
                v20 = 0;
                do
                {
                  v21 = *(float *)(v18 + v20);
                  v22 = *(float *)(v19 + v20);
                  if (v21 != v22)
                    break;
                  v16 = v20 == 60;
                  v20 += 4;
                }
                while (!v16);
                if (v21 != v22)
                  break;
                v18 += 64;
                v19 += 64;
                if (v18 == v17)
                  goto LABEL_41;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            v16 = *(_QWORD *)v14 == *v15 && *((_QWORD *)v14 + 1) == v15[1];
            if (!v16)
              break;
            v14 += 16;
            v15 += 2;
            if (v14 == v13)
              goto LABEL_33;
          }
        }
      }
    }
LABEL_82:
    v7 = 0;
LABEL_83:
    sub_2231AD66C((uint64_t)v56);
    sub_2231AD66C((uint64_t)v62);
    return v7;
  }
  return 0;
}

void sub_223BEA83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a23);
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BEA85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2231AD66C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_223BEA870(uint64_t a1, uint64_t (***a2)())
{
  sub_223BED454(a2, a1);
}

double sub_223BEA880(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BF087C(a2, a1);
}

_QWORD *sub_223BEA890(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24EC60330;
  *(_QWORD *)a1 = &unk_24EC60390;
  result = sub_223BEA9A4((_QWORD *)(a1 + 192));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_223BEA8FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24EC60330;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24EC60390;
  sub_223BEA9A4((_QWORD *)(a1 + 192));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x227684CE8](v2, 0x10B3C40FC9AC1B3);
}

void sub_223BEA984(uint64_t a1, uint64_t (***a2)())
{
  sub_223BED454(a2, a1 - 8);
}

double sub_223BEA994(uint64_t a1, uint64_t (***a2)())
{
  return sub_223BF087C(a2, a1 - 8);
}

_QWORD *sub_223BEA9A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

_QWORD *sub_223BEAA34(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24EC604A8;
  v2 = a1 + 1;
  sub_2231AD66C((uint64_t)(a1 + 24));
  sub_22388993C(v2);
  return a1;
}

void sub_223BEAA74(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_24EC604A8;
  v1 = a1 + 1;
  sub_2231AD66C((uint64_t)(a1 + 24));
  sub_22388993C(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223BEAAC4(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_223BEAACC(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  float *v10;
  float *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  float *v17;
  float *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  char *v24;
  char *v25;
  _QWORD *v26;
  char *v28;
  char *v29;
  _QWORD *v30;
  float *v32;
  uint64_t v33;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC60468, 0);
  if (!result)
    return result;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = result;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(result + 8))
    return 0;
  v7 = *(char **)(a1 + 16);
  v6 = *(char **)(a1 + 24);
  v8 = *(_QWORD **)(result + 16);
  if (v6 - v7 != *(_QWORD *)(result + 24) - (_QWORD)v8)
    return 0;
  if (v7 != v6)
  {
    while (*(_QWORD *)v7 == *v8 && *((_QWORD *)v7 + 1) == v8[1])
    {
      v7 += 16;
      v8 += 2;
      if (v7 == v6)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  v11 = *(float **)(a1 + 40);
  v10 = *(float **)(a1 + 48);
  v12 = *(_QWORD *)(result + 40);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(result + 48) - v12)
    return 0;
  for (; v11 != v10; v12 += 64)
  {
    v32 = v11;
    v33 = v12;
    result = sub_2231F73E4(&v32);
    if (!(_DWORD)result)
      return result;
    v11 += 16;
  }
  v14 = *(char **)(a1 + 64);
  v13 = *(char **)(a1 + 72);
  v15 = *(_QWORD **)(v5 + 64);
  if (v13 - v14 != *(_QWORD *)(v5 + 72) - (_QWORD)v15)
    return 0;
  if (v14 != v13)
  {
    while (*(_QWORD *)v14 == *v15 && *((_QWORD *)v14 + 1) == v15[1])
    {
      v14 += 16;
      v15 += 2;
      if (v14 == v13)
        goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v18 = *(float **)(a1 + 88);
  v17 = *(float **)(a1 + 96);
  v19 = *(_QWORD *)(v5 + 88);
  if ((char *)v17 - (char *)v18 != *(_QWORD *)(v5 + 96) - v19)
    return 0;
  if (v18 == v17)
  {
LABEL_28:
    v21 = *(char **)(a1 + 112);
    v20 = *(char **)(a1 + 120);
    v22 = *(_QWORD **)(v5 + 112);
    if (v20 - v21 == *(_QWORD *)(v5 + 120) - (_QWORD)v22)
    {
      if (v21 == v20)
      {
LABEL_36:
        v25 = *(char **)(a1 + 136);
        v24 = *(char **)(a1 + 144);
        v26 = *(_QWORD **)(v5 + 136);
        if (v24 - v25 == *(_QWORD *)(v5 + 144) - (_QWORD)v26)
        {
          if (v25 == v24)
          {
LABEL_44:
            v29 = *(char **)(a1 + 160);
            v28 = *(char **)(a1 + 168);
            v30 = *(_QWORD **)(v5 + 160);
            if (v28 - v29 == *(_QWORD *)(v5 + 168) - (_QWORD)v30)
            {
              if (v29 == v28)
                return *(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(v5 + 184);
              while (*(_QWORD *)v29 == *v30 && *((_QWORD *)v29 + 1) == v30[1])
              {
                v29 += 16;
                v30 += 2;
                if (v29 == v28)
                  return *(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(v5 + 184);
              }
            }
          }
          else
          {
            while (*(_QWORD *)v25 == *v26 && *((_QWORD *)v25 + 1) == v26[1])
            {
              v25 += 16;
              v26 += 2;
              if (v25 == v24)
                goto LABEL_44;
            }
          }
        }
      }
      else
      {
        while (*(_QWORD *)v21 == *v22 && *((_QWORD *)v21 + 1) == v22[1])
        {
          v21 += 16;
          v22 += 2;
          if (v21 == v20)
            goto LABEL_36;
        }
      }
    }
    return 0;
  }
  while (1)
  {
    v32 = v18;
    v33 = v19;
    result = sub_2231F73E4(&v32);
    if (!(_DWORD)result)
      return result;
    v18 += 16;
    v19 += 64;
    if (v18 == v17)
      goto LABEL_28;
  }
}

void sub_223BEAD5C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int64x2_t v7;
  int8x16_t v8;
  void *v9[3];
  void *v10[2];
  char v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CCE60);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CCE60))
    goto LABEL_2;
  sub_223174DE4(v10, "viz::PackageData");
  sub_223BED1A4();
  if (byte_2540CCEB7 < 0)
  {
    sub_223197FA4(__p, (void *)xmmword_2540CCEA0, *((unint64_t *)&xmmword_2540CCEA0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_2540CCEA0;
    v13 = unk_2540CCEB0;
  }
  v3 = sub_2233032C8();
  if (*((char *)v3 + 23) < 0)
  {
    sub_223197FA4(&v14, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v15 = *((_QWORD *)v3 + 2);
    v14 = v4;
  }
  v5 = sub_223BED35C();
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    v16 = v6;
  }
  *(_OWORD *)v18 = *(_OWORD *)"void";
  v19 = 0x400000000000000;
  sub_22319BD1C(v9, (uint64_t)__p, 4uLL);
  sub_2245730F4((char *)v10, (uint64_t *)v9, &stru_2540CCF30, v7, v8);
  sub_22319BB48(v9);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v16);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_24:
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_20;
LABEL_25:
    operator delete(v10[0]);
    goto LABEL_20;
  }
LABEL_23:
  operator delete((void *)v14);
  if (SHIBYTE(v13) < 0)
    goto LABEL_24;
LABEL_19:
  if (v11 < 0)
    goto LABEL_25;
LABEL_20:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2540CCF30, &dword_22314D000);
  __cxa_guard_release(&qword_2540CCE60);
LABEL_2:
  sub_223BEB0C4(a1);
  sub_2231AC984((__int128 *)&stru_2540CCF30, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 192, (uint64_t)"}");
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_223BEAFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_2540CCE60);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_223BEB074()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x223BEB050);
  }
}

void sub_223BEB09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BEB0C4(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  void **v12;
  void **v13;
  const char *v14;
  __int128 *v15;
  const char *v16;
  const char *v17;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCE68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE68))
  {
    sub_223BED1A4();
    if (byte_2540CCEB7 >= 0)
      v4 = byte_2540CCEB7;
    else
      v4 = *((_QWORD *)&xmmword_2540CCEA0 + 1);
    if (byte_2540CCEB7 >= 0)
      v5 = (char *)&xmmword_2540CCEA0;
    else
      v5 = (char *)xmmword_2540CCEA0;
    sub_2231AD150(v5, v4, "::", 2, 0, (uint64_t)&v13);
    if (*(v14 - 1) < 0)
    {
      sub_223197FA4(&xmmword_2540CCF48, *((void **)v14 - 3), *((_QWORD *)v14 - 2));
    }
    else
    {
      v6 = *(_OWORD *)(v14 - 24);
      unk_2540CCF58 = *((_QWORD *)v14 - 1);
      xmmword_2540CCF48 = v6;
    }
    sub_22319BB48((void **)&v13);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CCF48, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCE68);
  }
  v9 = -1;
  if (byte_2540CCF5F < 0)
  {
    sub_223197FA4(&v7, (void *)xmmword_2540CCF48, *((unint64_t *)&xmmword_2540CCF48 + 1));
  }
  else
  {
    v7 = xmmword_2540CCF48;
    v8 = unk_2540CCF58;
  }
  v9 = 1;
  v13 = (void **)&v7;
  v14 = "{";
  v15 = &v7;
  v16 = "{";
  v17 = "{";
  sub_2231ABB0C((uint64_t *)&v15, (uint64_t)&v7);
  sub_223BEBFA0(__p, a1 + 8);
  v13 = (void **)&v7;
  v14 = (const char *)__p;
  v15 = &v7;
  v16 = (const char *)__p;
  v17 = (const char *)__p;
  if (v9 == -1)
    sub_22316DD70();
  v12 = (void **)&v13;
  ((void (*)(void ***, __int128 *))off_24EC5FF70[v9])(&v12, &v7);
  if (v11 < 0)
    operator delete(__p[0]);
  v13 = (void **)&v7;
  v14 = "}";
  v15 = &v7;
  v16 = "}";
  v17 = "}";
  if (v9 == -1)
    sub_22316DD70();
  __p[0] = &v13;
  ((void (*)(void **, __int128 *))off_24EC5FFE0[v9])(__p, &v7);
  if (v9 == -1)
    sub_22316DD70();
  v13 = __p;
  result = ((uint64_t (*)(void ***, __int128 *))off_24EC5FFA0[v9])(&v13, &v7);
  if (v9 != -1)
    return ((uint64_t (*)(void ***, __int128 *))off_24EC5FF88[v9])(&v13, &v7);
  return result;
}

void sub_223BEB328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_22319BB48((void **)va);
  __cxa_guard_abort(&qword_2540CCE68);
  _Unwind_Resume(a1);
}

void sub_223BEB348(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CCE68);
  _Unwind_Resume(a1);
}

void sub_223BEB360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BEB388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223BEB378);
}

void sub_223BEB3AC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 10;
  strcpy((char *)a1, "cv3d.recon");
  *(_DWORD *)(a1 + 24) = 4;
}

uint64_t sub_223BEB3DC@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC60480, 0);
  if (v3)
  {
    v4 = (uint64_t)v3 + 8;
    v5 = (uint64_t)v3 + 192;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/include/Kit/Visualization/DataIO.h", 1045, (uint64_t)"ptr != nullptr", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = 8;
    v5 = 192;
  }
  v6 = operator new(0x198uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24EC602E0;
  v6[3] = off_24EC60330;
  v6[4] = &unk_24EC60390;
  sub_223B866E4(v5, (uint64_t)(v6 + 5));
  result = sub_223FD3470((uint64_t)(v6 + 28), v4);
  *a2 = v6 + 3;
  a2[1] = v6;
  return result;
}

void sub_223BEB4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v16 = *(unsigned int *)(v13 + 216);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 216) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v13);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_223BEB514(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BEB52C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24EC604A8;
  v2 = a1 + 1;
  sub_2231AD66C((uint64_t)(a1 + 24));
  sub_22388993C(v2);
  return a1;
}

void sub_223BEB56C(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_24EC604A8;
  v1 = a1 + 1;
  sub_2231AD66C((uint64_t)(a1 + 24));
  sub_22388993C(v1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223BEB5BC(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  __int128 *v8;
  __int128 v9;
  int64x2_t v10;
  int8x16_t v11;
  void **v12;
  void **v13;
  void *v14;
  size_t v15;
  uint64_t *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t *v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  uint64_t v26;
  int v27;
  std::string *p_s;
  void *__p[2];
  uint64_t v30;
  std::string __s;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2540CCE20);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CCE20))
    goto LABEL_2;
  v4 = atomic_load((unsigned __int8 *)&qword_2540CCE28);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE28))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_2540CCE48);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE48))
    {
      sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::recon::slam::AnchorsUpdateEvent>]", &qword_2540CCEE8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CCEE8, &dword_22314D000);
      __cxa_guard_release(&qword_2540CCE48);
    }
    v6 = atomic_load((unsigned __int8 *)&qword_2540CCE50);
    if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CCE50))
    {
LABEL_27:
      v7 = atomic_load((unsigned __int8 *)&qword_2540CCE58);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE58))
      {
        if (byte_2540CCF00[23] < 0)
          sub_223197FA4(&__s, *(void **)byte_2540CCF00, *(unint64_t *)&byte_2540CCF00[8]);
        else
          __s = *(std::string *)byte_2540CCF00;
        sub_22456D060(&__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2540CCF18);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CCF18, &dword_22314D000);
        __cxa_guard_release(&qword_2540CCE58);
      }
      if (byte_2540CCF2F < 0)
      {
        sub_223197FA4(__p, (void *)xmmword_2540CCF18, *((unint64_t *)&xmmword_2540CCF18 + 1));
      }
      else
      {
        *(_OWORD *)__p = xmmword_2540CCF18;
        v30 = unk_2540CCF28;
      }
      sub_223BED1A4();
      if (byte_2540CCEA0[23] < 0)
        sub_223197FA4(&__s, *(void **)byte_2540CCEA0, *(unint64_t *)&byte_2540CCEA0[8]);
      else
        __s = *(std::string *)byte_2540CCEA0;
      v8 = sub_2231AC788();
      if (*((char *)v8 + 23) < 0)
      {
        sub_223197FA4(&v32, *(void **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v33 = *((_QWORD *)v8 + 2);
        v32 = v9;
      }
      sub_22319BD1C(v25, (uint64_t)&__s, 2uLL);
      sub_2245730F4((char *)__p, (uint64_t *)v25, (std::string *)&qword_2540CCE88, v10, v11);
      v12 = (void **)v25[0];
      if (v25[0])
      {
        v13 = (void **)v25[1];
        v14 = v25[0];
        if (v25[1] != v25[0])
        {
          do
          {
            if (*((char *)v13 - 1) < 0)
              operator delete(*(v13 - 3));
            v13 -= 3;
          }
          while (v13 != v12);
          v14 = v25[0];
        }
        v25[1] = v12;
        operator delete(v14);
      }
      if (SHIBYTE(v33) < 0)
      {
        operator delete((void *)v32);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_47:
          if ((SHIBYTE(v30) & 0x80000000) == 0)
          {
LABEL_48:
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CCE88, &dword_22314D000);
            __cxa_guard_release(&qword_2540CCE28);
            goto LABEL_16;
          }
LABEL_51:
          operator delete(__p[0]);
          goto LABEL_48;
        }
      }
      else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(__s.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30) & 0x80000000) == 0)
        goto LABEL_48;
      goto LABEL_51;
    }
    if (byte_2540CCEFF >= 0)
      v15 = byte_2540CCEFF;
    else
      v15 = unk_2540CCEF0;
    if (byte_2540CCEFF >= 0)
      v16 = &qword_2540CCEE8;
    else
      v16 = (uint64_t *)qword_2540CCEE8;
    v17 = (char *)v16 + v15;
    if ((uint64_t)v15 >= 1)
    {
      v18 = v15;
      v19 = v16;
      do
      {
        v20 = memchr(v19, 60, v18);
        if (!v20)
          break;
        if (*v20 == 60)
          goto LABEL_67;
        v19 = (uint64_t *)(v20 + 1);
        v18 = v17 - (_BYTE *)v19;
      }
      while (v17 - (_BYTE *)v19 > 0);
    }
    v20 = (char *)v16 + v15;
LABEL_67:
    v21 = v20 - (_BYTE *)v16;
    if (v20 == v17)
      v21 = -1;
    if (v15 >= v21)
      v15 = v21;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    if (v15 >= 0x17)
    {
      v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v23 = v15 | 7;
      v24 = v23 + 1;
      v22 = (char *)operator new(v23 + 1);
      *(_QWORD *)&byte_2540CCF00[8] = v15;
      *(_QWORD *)&byte_2540CCF00[16] = v24 | 0x8000000000000000;
      *(_QWORD *)byte_2540CCF00 = v22;
    }
    else
    {
      v22 = byte_2540CCF00;
      byte_2540CCF00[23] = v15;
      if (!v15)
        goto LABEL_87;
    }
    memmove(v22, v16, v15);
LABEL_87:
    v22[v15] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_2540CCF00, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCE50);
    goto LABEL_27;
  }
LABEL_16:
  if (byte_2540CCE9F < 0)
  {
    sub_223197FA4(&xmmword_2540CCE70, (void *)qword_2540CCE88, unk_2540CCE90);
  }
  else
  {
    xmmword_2540CCE70 = *(_OWORD *)&qword_2540CCE88;
    unk_2540CCE80 = unk_2540CCE98;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CCE70, &dword_22314D000);
  __cxa_guard_release(&qword_2540CCE20);
LABEL_2:
  v27 = -1;
  if (byte_2540CCE87 < 0)
  {
    sub_223197FA4(v25, (void *)xmmword_2540CCE70, *((unint64_t *)&xmmword_2540CCE70 + 1));
  }
  else
  {
    *(_OWORD *)v25 = xmmword_2540CCE70;
    v26 = unk_2540CCE80;
  }
  v27 = 1;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  *(_QWORD *)&v32 = "{";
  *((_QWORD *)&v32 + 1) = "{";
  sub_2231ABB0C((uint64_t *)&__s.__r_.__value_.__r.__words[2], (uint64_t)v25);
  sub_223BEBFA0(__p, a1 + 8);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  *(_QWORD *)&v32 = __p;
  *((_QWORD *)&v32 + 1) = __p;
  if (v27 == -1)
    sub_22316DD70();
  p_s = &__s;
  ((void (*)(std::string **, void **))off_24EC5FF70[v27])(&p_s, v25);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)",";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  *(_QWORD *)&v32 = ",";
  *((_QWORD *)&v32 + 1) = ",";
  if (v27 == -1)
    sub_22316DD70();
  __p[0] = &__s;
  ((void (*)(void **, void **))off_24EC5FFE0[v27])(__p, v25);
  sub_2231AB90C((uint64_t)&p_s, (uint64_t)v25, a1 + 192);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  *(_QWORD *)&v32 = "}";
  *((_QWORD *)&v32 + 1) = "}";
  if (v27 == -1)
    sub_22316DD70();
  __p[0] = &__s;
  ((void (*)(void **, void **))off_24EC5FFE0[v27])(__p, v25);
  if (v27 == -1)
    sub_22316DD70();
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  result = ((uint64_t (*)(std::string *, void **))off_24EC5FFA0[v27])(&__s, v25);
  if (v27 != -1)
    return ((uint64_t (*)(std::string *, void **))off_24EC5FF88[v27])(&__s, v25);
  return result;
}

void sub_223BEBC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_2540CCE58);
  __cxa_guard_abort(&qword_2540CCE28);
  __cxa_guard_abort(&qword_2540CCE20);
  _Unwind_Resume(a1);
}

void sub_223BEBDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a12 != -1)
    ((void (*)(char *, uint64_t *))off_24EC5FF88[a12])(&a24, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BEBE38(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  void *__p[2];
  char v5;
  _QWORD v6[5];
  _QWORD *v7;

  v3 = 0;
  sub_223BEBFA0(__p, a1 + 8);
  v6[0] = v2;
  v6[1] = __p;
  v6[2] = v2;
  v6[3] = __p;
  v6[4] = __p;
  v7 = v6;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v7, v2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v3 == -1)
    sub_22316DD70();
  v6[0] = __p;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5FFA0[v3])(v6, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5FF88[v3])(v6, v2);
  return result;
}

void sub_223BEBF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC5FF88[a12])(v18 - 17, &a9);
  _Unwind_Resume(exception_object);
}

void sub_223BEBF74(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_223BEBFA0(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[3];
  void *v22[3];
  void *v23[3];
  void *v24[3];
  char v25;
  void *v26[3];
  void *v27[3];
  void *v28[3];
  _QWORD *v29;
  void *__p[2];
  unsigned __int8 v31;
  _DWORD v32[6];
  int v33;
  std::string v34;
  std::string *v35;
  std::string *v36;
  _DWORD *v37;
  std::string *v38;
  std::string *v39;
  _QWORD *v40;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v29 = (_QWORD *)v4;
  sub_223FD3470((uint64_t)&v20, a2);
  v33 = 0;
  sub_2231ABA1C(v32, "{");
  sub_2233025E8(&v20, &v34);
  v35 = (std::string *)v32;
  v36 = &v34;
  v37 = v32;
  v38 = &v34;
  v39 = &v34;
  if (v33 == -1)
    sub_22316DD70();
  v40 = &v35;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5FF70[v33])(&v40, v32);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC634((uint64_t)v32, (unsigned __int8 **)v21);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC79C((uint64_t)v32, (float **)v22);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC634((uint64_t)v32, (unsigned __int8 **)v23);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC634((uint64_t)v32, (unsigned __int8 **)v24);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  v5 = v25 ? "true" : "false";
  v35 = (std::string *)v32;
  v36 = (std::string *)&v40;
  v37 = v32;
  v38 = (std::string *)&v40;
  v39 = (std::string *)&v40;
  v40 = v5;
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC604E8[v33])(&v34, v32);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC634((uint64_t)v32, (unsigned __int8 **)v26);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC79C((uint64_t)v32, (float **)v27);
  v35 = (std::string *)v32;
  v36 = (std::string *)",";
  v37 = v32;
  v38 = (std::string *)",";
  v39 = (std::string *)",";
  if (v33 == -1)
    goto LABEL_62;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  sub_223BEC634((uint64_t)v32, (unsigned __int8 **)v28);
  v35 = (std::string *)v32;
  v36 = (std::string *)"}";
  v37 = v32;
  v38 = (std::string *)"}";
  v39 = (std::string *)"}";
  if (v33 == -1)
LABEL_62:
    sub_22316DD70();
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _DWORD *))off_24EC5FFE0[v33])(&v34, v32);
  if (v33 == -1)
    sub_22316DD70();
  v35 = &v34;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24EC5FFA0[v33])(__p, &v35, v32);
  if (v33 != -1)
    ((void (*)(std::string **, _DWORD *))off_24EC5FF88[v33])(&v35, v32);
  if ((v31 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v7 = v31;
  else
    v7 = (uint64_t)__p[1];
  sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v6, v7);
  if ((char)v31 < 0)
    operator delete(__p[0]);
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v9 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_61;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      a1[23] = 0;
      goto LABEL_55;
    }
    v12 = *(const void **)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_61:
      sub_22316DBC0();
  }
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v15 = operator new(v13 + 1);
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a1 = v15;
    a1 = v15;
    goto LABEL_54;
  }
  a1[23] = v9;
  if (v9)
LABEL_54:
    memmove(a1, v12, v9);
LABEL_55:
  a1[v9] = 0;
  v16 = v29;
  if (v29)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v29 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v16 + 16);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
}

void sub_223BEC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
  {
    operator delete(__p);
    sub_223BEA9A4(&a9);
    sub_22456E764(&a32);
    _Unwind_Resume(a1);
  }
  sub_223BEA9A4(&a9);
  sub_22456E764(&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_223BEC634(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  if (a2[1] - *a2 <= 15)
  {
    v12 = a1;
    v13 = "{}";
    v14 = a1;
    v15 = "{}";
    v16 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v17 = &v12;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC60170[v3])(&v17, a1);
    }
LABEL_11:
    sub_22316DD70();
  }
  v12 = a1;
  v13 = "{";
  v14 = a1;
  v15 = "{";
  v16 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v5])(&v17, a1);
  v7 = *a2;
  sub_223BE2000(a1, *a2);
  v8 = a2[1];
  for (i = v7 + 16; i != v8; i += 16)
  {
    v12 = a1;
    v13 = ",";
    v14 = a1;
    v15 = ",";
    v16 = ",";
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    v17 = &v12;
    ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v10])(&v17, a1);
    sub_223BE2000(a1, i);
  }
  v12 = a1;
  v13 = "}";
  v14 = a1;
  v15 = "}";
  v16 = "}";
  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_11;
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC5FFE0[v11])(&v17, a1);
}

uint64_t sub_223BEC79C(uint64_t a1, float **a2)
{
  uint64_t v3;
  uint64_t v5;
  float *v7;
  float *v8;
  float *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  if ((char *)a2[1] - (char *)*a2 <= 63)
  {
    v12 = a1;
    v13 = "{}";
    v14 = a1;
    v15 = "{}";
    v16 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v17 = &v12;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC60170[v3])(&v17, a1);
    }
LABEL_11:
    sub_22316DD70();
  }
  v12 = a1;
  v13 = "{";
  v14 = a1;
  v15 = "{";
  v16 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v5])(&v17, a1);
  v7 = *a2;
  sub_223BEC910((uint64_t)&v12, a1, *a2);
  v8 = a2[1];
  for (i = v7 + 16; i != v8; i += 16)
  {
    v12 = a1;
    v13 = ",";
    v14 = a1;
    v15 = ",";
    v16 = ",";
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    v17 = &v12;
    ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v10])(&v17, a1);
    sub_223BEC910((uint64_t)&v12, a1, i);
  }
  v12 = a1;
  v13 = "}";
  v14 = a1;
  v15 = "}";
  v16 = "}";
  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_11;
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC5FFE0[v11])(&v17, a1);
}

void sub_223BEC910(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_223BECBB4((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC5FF70[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_223BECB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223BECB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BECBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223BECBB4(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_223BECCE0((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_22316DD70();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5FFA0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24EC5FF88[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_2231813E8(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_223BECC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223BECCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223BECCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223BECCE0(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t *v28;

  v23 = a2;
  v24 = "{";
  v25 = a2;
  v26 = "{";
  v27 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **))off_24EC5FFE0[v3])(&v28);
  sub_223208764((uint64_t)&v23, a2, a3);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v6])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 1);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v7])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 2);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v8])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 3);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v9])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 4);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v10])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 5);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v11])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 6);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v12 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v12 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v12])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 7);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v13 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v13 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v13])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 8);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v14])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 9);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v15 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v15])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 10);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v16 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v16 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v16])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 11);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v17 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v17 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v17])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 12);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v18])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 13);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v19])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 14);
  v23 = a2;
  v24 = ",";
  v25 = a2;
  v26 = ",";
  v27 = ",";
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    goto LABEL_19;
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24EC5FFE0[v20])(&v28, a2);
  sub_223208764((uint64_t)&v23, a2, a3 + 15);
  v23 = a2;
  v24 = "}";
  v25 = a2;
  v26 = "}";
  v27 = "}";
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
LABEL_19:
    sub_22316DD70();
  v28 = &v23;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24EC5FFE0[v21])(&v28, a2);
}

void sub_223BED1A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CCE30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE30))
  {
    sub_223BED25C();
    if (byte_2540CCEE7 < 0)
    {
      sub_223197FA4(&xmmword_2540CCEA0, (void *)xmmword_2540CCED0, *((unint64_t *)&xmmword_2540CCED0 + 1));
    }
    else
    {
      xmmword_2540CCEA0 = xmmword_2540CCED0;
      unk_2540CCEB0 = unk_2540CCEE0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CCEA0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCE30);
  }
}

void sub_223BED244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CCE30);
  _Unwind_Resume(a1);
}

void sub_223BED25C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540CCE38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCE38))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::slam::AnchorsUpdateEvent]", qword_2540CCEB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2540CCEB8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCE38);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2540CCE40);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2540CCE40))
    {
      sub_224573040((uint64_t)qword_2540CCEB8, (uint64_t)&xmmword_2540CCED0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2540CCED0, &dword_22314D000);
      __cxa_guard_release(&qword_2540CCE40);
    }
  }
}

void sub_223BED32C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CCE40);
  _Unwind_Resume(a1);
}

void sub_223BED344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CCE38);
  _Unwind_Resume(a1);
}

std::string *sub_223BED35C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578EC58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578EC58))
    return &stru_25578EC40;
  sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 4U]", __p);
  sub_22457326C((uint64_t)__p, &stru_25578EC40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578EC40, &dword_22314D000);
  __cxa_guard_release(&qword_25578EC58);
  return &stru_25578EC40;
}

void sub_223BED414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578EC58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578EC58);
  _Unwind_Resume(a1);
}

void sub_223BED454(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  int *v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  int v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t *v78;
  int v79;
  unsigned int v80;
  int *v81;
  int v82;
  int v83;
  BOOL v84;
  unsigned __int8 *v85;
  int v86;
  void *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 *v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  void *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  __int128 *v109;
  __int128 *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t i;
  int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unsigned int v139;
  uint64_t v140;
  size_t v141;
  size_t v142;
  BOOL v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t j;
  int v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t k;
  int v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t m;
  int v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  unsigned int v187;
  uint64_t v188;
  size_t v189;
  size_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t n;
  int v212;
  _QWORD *v213;
  _QWORD *v214;
  char v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  uint64_t ii;
  _QWORD *v228;
  _QWORD *v229;
  void **v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t jj;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  uint64_t kk;
  _QWORD *v243;
  _QWORD *v244;
  void **v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  uint64_t mm;
  _QWORD *v252;
  _QWORD *v253;
  void **v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  uint64_t nn;
  _QWORD *v263;
  _QWORD *v264;
  void **v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t i1;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  char *v275;
  uint64_t i2;
  _QWORD *v277;
  _QWORD *v278;
  void **v279;
  uint64_t v280;
  std::bad_alloc *exception;
  std::bad_alloc *v282;
  void *v283[2];
  __int128 v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  void **v288;
  const char *v289;
  void *v290;
  _QWORD v291[2];
  void *v292;
  __int128 *v293;
  void *v294;
  char *v295;
  void *v296;
  char *v297;
  char v298[8];
  void *v299;
  char *v300;
  void *v301;
  __int128 *v302;
  void *__p;
  char *v304;

  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC605E8, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 2:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v59 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v59)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v60 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v60)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v291);
        sub_223B8F208(v5, a2 + 16, v291[0]);
        v61 = *(_QWORD *)(v5 + 56);
        v10 = *(unsigned __int8 **)(v61 - 8);
        *(_QWORD *)(v5 + 40) = v10;
        *(_QWORD *)(v5 + 56) = v61 - 8;
        if (!*(_BYTE *)(v5 + 88))
          goto LABEL_27;
        break;
      case 1:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v15 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v15)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v16 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v16)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v291);
        sub_223B8E898(v5, a2 + 16, v291[0]);
        v17 = *(_QWORD *)(v5 + 56);
        v10 = *(unsigned __int8 **)(v17 - 8);
        *(_QWORD *)(v5 + 40) = v10;
        *(_QWORD *)(v5 + 56) = v17 - 8;
        if (!*(_BYTE *)(v5 + 88))
          goto LABEL_27;
        break;
      case 0:
        if (*(unsigned __int8 *)v4[5] <= 1u)
        {
          v7 = *((unsigned __int8 *)v4 + 88);
          v4[9] = "info";
          v4[10] = 4;
          if (!v7)
            *((_BYTE *)v4 + 88) = 1;
        }
        sub_22454024C((uint64_t)v4);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v8 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v8)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224542048(v5, v291);
        sub_223B8D388(v5, a2 + 16, v291[0]);
        v9 = *(_QWORD *)(v5 + 56);
        v10 = *(unsigned __int8 **)(v9 - 8);
        *(_QWORD *)(v5 + 40) = v10;
        *(_QWORD *)(v5 + 56) = v9 - 8;
        if (!*(_BYTE *)(v5 + 88))
          goto LABEL_27;
        break;
      default:
LABEL_437:
        sub_22316DD70();
    }
    *(_BYTE *)(v5 + 88) = 0;
LABEL_27:
    v18 = (uint64_t *)(a2 + 200);
    if (*v10 <= 1u)
    {
      *(_QWORD *)(v5 + 72) = "value";
      *(_QWORD *)(v5 + 80) = 5;
      *(_BYTE *)(v5 + 88) = 1;
    }
    sub_22454024C(v5);
    v289 = "version";
    v290 = (void *)7;
    LODWORD(v291[0]) = 2;
    if (**(unsigned __int8 **)(v5 + 40) <= 1u)
    {
      v19 = *(unsigned __int8 *)(v5 + 88);
      *(_QWORD *)(v5 + 72) = "version";
      *(_QWORD *)(v5 + 80) = 7;
      if (!v19)
        *(_BYTE *)(v5 + 88) = 1;
    }
    sub_224542048(v5, v291);
    v20 = v291[0];
    sub_223BEFF3C((uint64_t)&v289, v18);
    if (!*(_BYTE *)(v5 + 88)
      || *(_QWORD *)(v5 + 80) != 7
      || ((v21 = *(int **)(v5 + 72), v22 = *v21, v23 = *(int *)((char *)v21 + 3), v22 == *(_DWORD *)"version")
        ? (v24 = v23 == *(_DWORD *)"sion")
        : (v24 = 0),
          !v24))
    {
      LOBYTE(v283[0]) = 5;
      v283[1] = (void *)v289;
      v25 = (unsigned __int8 *)sub_22453FEA0(v5);
      v26 = *v25;
      *v25 = 5;
      LOBYTE(v283[0]) = v26;
      v27 = (void *)*((_QWORD *)v25 + 1);
      *((void **)v25 + 1) = v283[1];
      v283[1] = v27;
      sub_22345337C((void ***)&v283[1], v26);
    }
    sub_22454024C(v5);
    v28 = (char *)v290;
    v29 = (char *)v291[0];
    if (v290 != (void *)v291[0])
    {
      do
      {
        v283[0] = (void *)16;
        v283[1] = v28;
        sub_2245403C8(v5, (size_t *)v283);
        v28 += 16;
      }
      while (v28 != v29);
    }
    v30 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v30 - 8);
    *(_QWORD *)(v5 + 56) = v30 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    sub_22454024C(v5);
    v31 = (__int128 *)v292;
    v32 = v293;
    if (v292 != v293)
    {
      do
      {
        v33 = *v31;
        v34 = v31[1];
        v35 = v31[3];
        v285 = v31[2];
        v286 = v35;
        *(_OWORD *)v283 = v33;
        v284 = v34;
        v287 = 16;
        v288 = v283;
        sub_2245436F8(v5, (float **)&v287);
        v31 += 4;
      }
      while (v31 != v32);
    }
    v36 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v36 - 8);
    *(_QWORD *)(v5 + 56) = v36 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    sub_22454024C(v5);
    v37 = (char *)v294;
    v38 = v295;
    if (v294 != v295)
    {
      do
      {
        v283[0] = (void *)16;
        v283[1] = v37;
        sub_2245403C8(v5, (size_t *)v283);
        v37 += 16;
      }
      while (v37 != v38);
    }
    v39 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v39 - 8);
    *(_QWORD *)(v5 + 56) = v39 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    sub_22454024C(v5);
    v40 = (char *)v296;
    v41 = v297;
    if (v296 != v297)
    {
      do
      {
        v283[0] = (void *)16;
        v283[1] = v40;
        sub_2245403C8(v5, (size_t *)v283);
        v40 += 16;
      }
      while (v40 != v41);
    }
    v42 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v42 - 8);
    *(_QWORD *)(v5 + 56) = v42 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    LOBYTE(v283[0]) = 4;
    v283[1] = (void *)v298[0];
    v43 = (unsigned __int8 *)sub_22453FEA0(v5);
    v44 = *v43;
    *v43 = v283[0];
    LOBYTE(v283[0]) = v44;
    v45 = (void *)*((_QWORD *)v43 + 1);
    *((void **)v43 + 1) = v283[1];
    v283[1] = v45;
    sub_22345337C((void ***)&v283[1], v44);
    if (v20 < 2)
      goto LABEL_68;
    sub_22454024C(v5);
    v46 = (char *)v299;
    v47 = v300;
    if (v299 != v300)
    {
      do
      {
        v283[0] = (void *)16;
        v283[1] = v46;
        sub_2245403C8(v5, (size_t *)v283);
        v46 += 16;
      }
      while (v46 != v47);
    }
    v48 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v48 - 8);
    *(_QWORD *)(v5 + 56) = v48 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    sub_22454024C(v5);
    v49 = (__int128 *)v301;
    v50 = v302;
    if (v301 != v302)
    {
      do
      {
        v51 = *v49;
        v52 = v49[1];
        v53 = v49[3];
        v285 = v49[2];
        v286 = v53;
        *(_OWORD *)v283 = v51;
        v284 = v52;
        v287 = 16;
        v288 = v283;
        sub_2245436F8(v5, (float **)&v287);
        v49 += 4;
      }
      while (v49 != v50);
    }
    v54 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v54 - 8);
    *(_QWORD *)(v5 + 56) = v54 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    sub_22454024C(v5);
    v55 = (char *)__p;
    v56 = v304;
    if (__p != v304)
    {
      do
      {
        v283[0] = (void *)16;
        v283[1] = v55;
        sub_2245403C8(v5, (size_t *)v283);
        v55 += 16;
      }
      while (v55 != v56);
    }
LABEL_66:
    v57 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v57 - 8);
    *(_QWORD *)(v5 + 56) = v57 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
LABEL_68:
    if (__p)
    {
      v304 = (char *)__p;
      operator delete(__p);
    }
    if (v301)
    {
      v302 = (__int128 *)v301;
      operator delete(v301);
    }
    if (v299)
    {
      v300 = (char *)v299;
      operator delete(v299);
    }
    if (v296)
    {
      v297 = (char *)v296;
      operator delete(v296);
    }
    if (v294)
    {
      v295 = (char *)v294;
      operator delete(v294);
    }
    if (v292)
    {
      v293 = (__int128 *)v292;
      operator delete(v292);
    }
    if (v290)
    {
      v291[0] = v290;
      operator delete(v290);
    }
    v58 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 40) = *(_QWORD *)(v58 - 8);
    *(_QWORD *)(v5 + 56) = v58 - 8;
    if (*(_BYTE *)(v5 + 88))
      *(_BYTE *)(v5 + 88) = 0;
    return;
  }
  v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC1FC00, 0);
  if (v11)
  {
    v12 = (uint64_t)v11;
    v13 = *(_DWORD *)(a2 + 192);
    if (v13 == 2)
    {
      v67 = v11[3];
      if (*(_BYTE *)(v67 + 40))
      {
        v289 = (const char *)(v67 + 16);
        sub_22455A7EC((uint64_t **)&v289, 4u);
      }
      else
      {
        LOBYTE(v289) = 4;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v12 + 24));
      sub_223B979A0(v12, a2 + 16, 4u);
    }
    else if (v13 == 1)
    {
      v66 = v11[3];
      if (*(_BYTE *)(v66 + 40))
      {
        v289 = (const char *)(v66 + 16);
        sub_22455A7EC((uint64_t **)&v289, 5u);
      }
      else
      {
        LOBYTE(v289) = 5;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v12 + 24));
      sub_223B97884(v12, a2 + 16, 5u);
    }
    else
    {
      if (v13)
        goto LABEL_437;
      v14 = v11[3];
      if (*(_BYTE *)(v14 + 40))
      {
        v289 = (const char *)(v14 + 16);
        sub_22455A7EC((uint64_t **)&v289, 6u);
      }
      else
      {
        LOBYTE(v289) = 6;
        std::ostream::write();
      }
      sub_224555278(*(_QWORD *)(v12 + 24));
      sub_223B970F8(v12, a2 + 16, 6u);
    }
    v117 = *(_QWORD *)(v12 + 24);
    v118 = *(_QWORD *)(*(_QWORD *)(v117 + 88) - 8);
    sub_224554D6C((uint64_t *)(v117 + 48), *(_QWORD *)(v117 + 16) - v118 - 9);
    v119 = *(_QWORD *)(v117 + 48);
    if (v119)
      memmove((void *)(*(_QWORD *)(v117 + 24) + v118), *(const void **)(v117 + 56), v119);
    *(_QWORD *)(v117 + 48) = 0;
    v120 = *(_QWORD *)(v117 + 80);
    v121 = *(_QWORD *)(v117 + 88) - 8;
    *(_QWORD *)(v117 + 88) = v121;
    if (v120 == v121)
    {
      std::ostream::write();
      if (*(_BYTE *)(v117 + 40))
      {
        free(*(void **)(v117 + 24));
        *(_BYTE *)(v117 + 40) = 0;
      }
    }
    v122 = (uint64_t *)(a2 + 200);
    v123 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v123 + 40))
    {
      v289 = (const char *)(v123 + 16);
      sub_22455A7EC((uint64_t **)&v289, 2u);
    }
    else
    {
      LOBYTE(v289) = 2;
      std::ostream::write();
    }
    sub_223BEFF3C((uint64_t)&v289, v122);
    v124 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v124 + 40))
    {
      v283[0] = (void *)(v124 + 16);
      sub_22455AB50((uint64_t **)v283, (unint64_t)v289);
    }
    else
    {
      sub_22455B08C();
    }
    v125 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v125 + 40))
    {
      v283[0] = (void *)(v125 + 16);
      sub_22455B1CC((uint64_t **)v283, (uint64_t)(v291[0] - (_QWORD)v290) >> 4);
    }
    else
    {
      sub_22455B4D4();
    }
    v126 = (char *)v290;
    v127 = (char *)v291[0];
    if ((void *)v291[0] != v290)
    {
      do
      {
        v128 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v128 + 40))
        {
          v283[0] = (void *)(v128 + 16);
          sub_224559C04((uint64_t **)v283, *v126);
          sub_224559C04((uint64_t **)v283, v126[1]);
          sub_224559C04((uint64_t **)v283, v126[2]);
          sub_224559C04((uint64_t **)v283, v126[3]);
          sub_224559C04((uint64_t **)v283, v126[4]);
          sub_224559C04((uint64_t **)v283, v126[5]);
          sub_224559C04((uint64_t **)v283, v126[6]);
          sub_224559C04((uint64_t **)v283, v126[7]);
          sub_224559C04((uint64_t **)v283, v126[8]);
          sub_224559C04((uint64_t **)v283, v126[9]);
          sub_224559C04((uint64_t **)v283, v126[10]);
          sub_224559C04((uint64_t **)v283, v126[11]);
          sub_224559C04((uint64_t **)v283, v126[12]);
          sub_224559C04((uint64_t **)v283, v126[13]);
          sub_224559C04((uint64_t **)v283, v126[14]);
          sub_224559C04((uint64_t **)v283, v126[15]);
        }
        else
        {
          for (i = 0; i != 16; ++i)
          {
            v130 = v126[i];
            if (v130 < 0)
            {
              LOBYTE(v283[0]) = -52;
              BYTE1(v283[0]) = v130;
            }
            else
            {
              LOBYTE(v283[0]) = v126[i];
            }
            std::ostream::write();
          }
        }
        v126 += 16;
      }
      while (v126 != v127);
    }
    v131 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v131 + 40))
    {
      v283[0] = (void *)(v131 + 16);
      sub_22455B1CC((uint64_t **)v283, ((char *)v293 - (_BYTE *)v292) >> 6);
    }
    else
    {
      sub_22455B4D4();
    }
    v132 = (unsigned int *)v292;
    v133 = (unsigned int *)v293;
    if (v293 != v292)
    {
      do
      {
        v134 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v134 + 40))
        {
          v135 = 0;
          v136 = *(_QWORD *)(v134 + 16);
          do
          {
            v139 = v132[v135];
            v140 = *(_QWORD *)(v134 + 32);
            if ((unint64_t)(v140 - v136) >= 5)
            {
              v137 = *(char **)(v134 + 24);
            }
            else
            {
              if (v140)
                v141 = 2 * v140;
              else
                v141 = 0x2000;
              v142 = v136 + 5;
              while (v141 < v142)
              {
                v143 = (uint64_t)v141 <= 0;
                v141 *= 2;
                if (v143)
                {
                  v141 = v142;
                  break;
                }
              }
              v137 = (char *)malloc_type_realloc(*(void **)(v134 + 24), v141, 0xAD6A59EEuLL);
              if (!v137)
              {
LABEL_436:
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v282 = std::bad_alloc::bad_alloc(exception);
                __cxa_throw(v282, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v134 + 24) = v137;
              *(_QWORD *)(v134 + 32) = v141;
              v136 = *(_QWORD *)(v134 + 16);
            }
            v138 = &v137[v136];
            *v138 = -54;
            *(_DWORD *)(v138 + 1) = bswap32(v139);
            v136 = *(_QWORD *)(v134 + 16) + 5;
            *(_QWORD *)(v134 + 16) = v136;
            ++v135;
          }
          while (v135 != 16);
        }
        else
        {
          v144 = *v132;
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v144);
          std::ostream::write();
          v145 = v132[1];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v145);
          std::ostream::write();
          v146 = v132[2];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v146);
          std::ostream::write();
          v147 = v132[3];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v147);
          std::ostream::write();
          v148 = v132[4];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v148);
          std::ostream::write();
          v149 = v132[5];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v149);
          std::ostream::write();
          v150 = v132[6];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v150);
          std::ostream::write();
          v151 = v132[7];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v151);
          std::ostream::write();
          v152 = v132[8];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v152);
          std::ostream::write();
          v153 = v132[9];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v153);
          std::ostream::write();
          v154 = v132[10];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v154);
          std::ostream::write();
          v155 = v132[11];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v155);
          std::ostream::write();
          v156 = v132[12];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v156);
          std::ostream::write();
          v157 = v132[13];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v157);
          std::ostream::write();
          v158 = v132[14];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v158);
          std::ostream::write();
          v159 = v132[15];
          LOBYTE(v283[0]) = -54;
          *(_DWORD *)((char *)v283 + 1) = bswap32(v159);
          std::ostream::write();
        }
        v132 += 16;
      }
      while (v132 != v133);
    }
    v160 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v160 + 40))
    {
      v283[0] = (void *)(v160 + 16);
      sub_22455B1CC((uint64_t **)v283, (v295 - (_BYTE *)v294) >> 4);
    }
    else
    {
      sub_22455B4D4();
    }
    v161 = (char *)v294;
    v162 = v295;
    if (v295 != v294)
    {
      do
      {
        v163 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v163 + 40))
        {
          v283[0] = (void *)(v163 + 16);
          sub_224559C04((uint64_t **)v283, *v161);
          sub_224559C04((uint64_t **)v283, v161[1]);
          sub_224559C04((uint64_t **)v283, v161[2]);
          sub_224559C04((uint64_t **)v283, v161[3]);
          sub_224559C04((uint64_t **)v283, v161[4]);
          sub_224559C04((uint64_t **)v283, v161[5]);
          sub_224559C04((uint64_t **)v283, v161[6]);
          sub_224559C04((uint64_t **)v283, v161[7]);
          sub_224559C04((uint64_t **)v283, v161[8]);
          sub_224559C04((uint64_t **)v283, v161[9]);
          sub_224559C04((uint64_t **)v283, v161[10]);
          sub_224559C04((uint64_t **)v283, v161[11]);
          sub_224559C04((uint64_t **)v283, v161[12]);
          sub_224559C04((uint64_t **)v283, v161[13]);
          sub_224559C04((uint64_t **)v283, v161[14]);
          sub_224559C04((uint64_t **)v283, v161[15]);
        }
        else
        {
          for (j = 0; j != 16; ++j)
          {
            v165 = v161[j];
            if (v165 < 0)
            {
              LOBYTE(v283[0]) = -52;
              BYTE1(v283[0]) = v165;
            }
            else
            {
              LOBYTE(v283[0]) = v161[j];
            }
            std::ostream::write();
          }
        }
        v161 += 16;
      }
      while (v161 != v162);
    }
    v166 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v166 + 40))
    {
      v283[0] = (void *)(v166 + 16);
      sub_22455B1CC((uint64_t **)v283, (v297 - (_BYTE *)v296) >> 4);
    }
    else
    {
      sub_22455B4D4();
    }
    v167 = (char *)v296;
    v168 = v297;
    if (v297 != v296)
    {
      do
      {
        v169 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v169 + 40))
        {
          v283[0] = (void *)(v169 + 16);
          sub_224559C04((uint64_t **)v283, *v167);
          sub_224559C04((uint64_t **)v283, v167[1]);
          sub_224559C04((uint64_t **)v283, v167[2]);
          sub_224559C04((uint64_t **)v283, v167[3]);
          sub_224559C04((uint64_t **)v283, v167[4]);
          sub_224559C04((uint64_t **)v283, v167[5]);
          sub_224559C04((uint64_t **)v283, v167[6]);
          sub_224559C04((uint64_t **)v283, v167[7]);
          sub_224559C04((uint64_t **)v283, v167[8]);
          sub_224559C04((uint64_t **)v283, v167[9]);
          sub_224559C04((uint64_t **)v283, v167[10]);
          sub_224559C04((uint64_t **)v283, v167[11]);
          sub_224559C04((uint64_t **)v283, v167[12]);
          sub_224559C04((uint64_t **)v283, v167[13]);
          sub_224559C04((uint64_t **)v283, v167[14]);
          sub_224559C04((uint64_t **)v283, v167[15]);
        }
        else
        {
          for (k = 0; k != 16; ++k)
          {
            v171 = v167[k];
            if (v171 < 0)
            {
              LOBYTE(v283[0]) = -52;
              BYTE1(v283[0]) = v171;
            }
            else
            {
              LOBYTE(v283[0]) = v167[k];
            }
            std::ostream::write();
          }
        }
        v167 += 16;
      }
      while (v167 != v168);
    }
    v172 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v172 + 40))
    {
      v283[0] = (void *)(v172 + 16);
      sub_22455B784((uint64_t)&v287, (uint64_t **)v283, v298);
    }
    else
    {
      if (v298[0])
        LOBYTE(v283[0]) = -61;
      else
        LOBYTE(v283[0]) = -62;
      std::ostream::write();
    }
    v173 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v173 + 40))
    {
      v283[0] = (void *)(v173 + 16);
      sub_22455B1CC((uint64_t **)v283, (v300 - (_BYTE *)v299) >> 4);
    }
    else
    {
      sub_22455B4D4();
    }
    v174 = (char *)v299;
    v175 = v300;
    if (v300 != v299)
    {
      do
      {
        v176 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v176 + 40))
        {
          v283[0] = (void *)(v176 + 16);
          sub_224559C04((uint64_t **)v283, *v174);
          sub_224559C04((uint64_t **)v283, v174[1]);
          sub_224559C04((uint64_t **)v283, v174[2]);
          sub_224559C04((uint64_t **)v283, v174[3]);
          sub_224559C04((uint64_t **)v283, v174[4]);
          sub_224559C04((uint64_t **)v283, v174[5]);
          sub_224559C04((uint64_t **)v283, v174[6]);
          sub_224559C04((uint64_t **)v283, v174[7]);
          sub_224559C04((uint64_t **)v283, v174[8]);
          sub_224559C04((uint64_t **)v283, v174[9]);
          sub_224559C04((uint64_t **)v283, v174[10]);
          sub_224559C04((uint64_t **)v283, v174[11]);
          sub_224559C04((uint64_t **)v283, v174[12]);
          sub_224559C04((uint64_t **)v283, v174[13]);
          sub_224559C04((uint64_t **)v283, v174[14]);
          sub_224559C04((uint64_t **)v283, v174[15]);
        }
        else
        {
          for (m = 0; m != 16; ++m)
          {
            v178 = v174[m];
            if (v178 < 0)
            {
              LOBYTE(v283[0]) = -52;
              BYTE1(v283[0]) = v178;
            }
            else
            {
              LOBYTE(v283[0]) = v174[m];
            }
            std::ostream::write();
          }
        }
        v174 += 16;
      }
      while (v174 != v175);
    }
    v179 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v179 + 40))
    {
      v283[0] = (void *)(v179 + 16);
      sub_22455B1CC((uint64_t **)v283, ((char *)v302 - (_BYTE *)v301) >> 6);
    }
    else
    {
      sub_22455B4D4();
    }
    v180 = (unsigned int *)v301;
    v181 = (unsigned int *)v302;
    if (v302 != v301)
    {
      do
      {
        v182 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v182 + 40))
        {
          v183 = 0;
          v184 = *(_QWORD *)(v182 + 16);
          while (1)
          {
            v187 = v180[v183];
            v188 = *(_QWORD *)(v182 + 32);
            if ((unint64_t)(v188 - v184) >= 5)
            {
              v185 = *(char **)(v182 + 24);
            }
            else
            {
              if (v188)
                v189 = 2 * v188;
              else
                v189 = 0x2000;
              v190 = v184 + 5;
              while (v189 < v190)
              {
                v143 = (uint64_t)v189 <= 0;
                v189 *= 2;
                if (v143)
                {
                  v189 = v190;
                  break;
                }
              }
              v185 = (char *)malloc_type_realloc(*(void **)(v182 + 24), v189, 0xAD6A59EEuLL);
              if (!v185)
                goto LABEL_436;
              *(_QWORD *)(v182 + 24) = v185;
              *(_QWORD *)(v182 + 32) = v189;
              v184 = *(_QWORD *)(v182 + 16);
            }
            v186 = &v185[v184];
            *v186 = -54;
            *(_DWORD *)(v186 + 1) = bswap32(v187);
            v184 = *(_QWORD *)(v182 + 16) + 5;
            *(_QWORD *)(v182 + 16) = v184;
            if (++v183 == 16)
              goto LABEL_272;
          }
        }
        v191 = *v180;
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v191);
        std::ostream::write();
        v192 = v180[1];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v192);
        std::ostream::write();
        v193 = v180[2];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v193);
        std::ostream::write();
        v194 = v180[3];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v194);
        std::ostream::write();
        v195 = v180[4];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v195);
        std::ostream::write();
        v196 = v180[5];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v196);
        std::ostream::write();
        v197 = v180[6];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v197);
        std::ostream::write();
        v198 = v180[7];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v198);
        std::ostream::write();
        v199 = v180[8];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v199);
        std::ostream::write();
        v200 = v180[9];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v200);
        std::ostream::write();
        v201 = v180[10];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v201);
        std::ostream::write();
        v202 = v180[11];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v202);
        std::ostream::write();
        v203 = v180[12];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v203);
        std::ostream::write();
        v204 = v180[13];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v204);
        std::ostream::write();
        v205 = v180[14];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v205);
        std::ostream::write();
        v206 = v180[15];
        LOBYTE(v283[0]) = -54;
        *(_DWORD *)((char *)v283 + 1) = bswap32(v206);
        std::ostream::write();
LABEL_272:
        v180 += 16;
      }
      while (v180 != v181);
    }
    v207 = *(_QWORD *)(v12 + 24);
    if (*(_BYTE *)(v207 + 40))
    {
      v283[0] = (void *)(v207 + 16);
      sub_22455B1CC((uint64_t **)v283, (v304 - (_BYTE *)__p) >> 4);
    }
    else
    {
      sub_22455B4D4();
    }
    v208 = (char *)__p;
    v209 = v304;
    if (v304 != __p)
    {
      do
      {
        v210 = *(_QWORD *)(v12 + 24);
        if (*(_BYTE *)(v210 + 40))
        {
          v283[0] = (void *)(v210 + 16);
          sub_224559C04((uint64_t **)v283, *v208);
          sub_224559C04((uint64_t **)v283, v208[1]);
          sub_224559C04((uint64_t **)v283, v208[2]);
          sub_224559C04((uint64_t **)v283, v208[3]);
          sub_224559C04((uint64_t **)v283, v208[4]);
          sub_224559C04((uint64_t **)v283, v208[5]);
          sub_224559C04((uint64_t **)v283, v208[6]);
          sub_224559C04((uint64_t **)v283, v208[7]);
          sub_224559C04((uint64_t **)v283, v208[8]);
          sub_224559C04((uint64_t **)v283, v208[9]);
          sub_224559C04((uint64_t **)v283, v208[10]);
          sub_224559C04((uint64_t **)v283, v208[11]);
          sub_224559C04((uint64_t **)v283, v208[12]);
          sub_224559C04((uint64_t **)v283, v208[13]);
          sub_224559C04((uint64_t **)v283, v208[14]);
          sub_224559C04((uint64_t **)v283, v208[15]);
        }
        else
        {
          for (n = 0; n != 16; ++n)
          {
            v212 = v208[n];
            if (v212 < 0)
            {
              LOBYTE(v283[0]) = -52;
              BYTE1(v283[0]) = v212;
            }
            else
            {
              LOBYTE(v283[0]) = v208[n];
            }
            std::ostream::write();
          }
        }
        v208 += 16;
      }
      while (v208 != v209);
LABEL_419:
      v208 = (char *)__p;
    }
  }
  else
  {
    v62 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC60670, 0);
    if (v62)
    {
      v5 = (uint64_t)v62;
      v63 = *(_DWORD *)(a2 + 192);
      if (v63 == 2)
      {
        if (*(unsigned __int8 *)v62[5] <= 1u)
        {
          v74 = *((unsigned __int8 *)v62 + 88);
          v62[9] = "info";
          v62[10] = 4;
          if (!v74)
            *((_BYTE *)v62 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v62);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 4;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v75 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v75)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v291);
        sub_223B9970C(v5, a2 + 16, v291[0]);
      }
      else if (v63 == 1)
      {
        if (*(unsigned __int8 *)v62[5] <= 1u)
        {
          v72 = *((unsigned __int8 *)v62 + 88);
          v62[9] = "info";
          v62[10] = 4;
          if (!v72)
            *((_BYTE *)v62 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v62);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 5;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v73 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v73)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v291);
        sub_223B98FC8(v5, a2 + 16, v291[0]);
      }
      else
      {
        if (v63)
          goto LABEL_437;
        if (*(unsigned __int8 *)v62[5] <= 1u)
        {
          v64 = *((unsigned __int8 *)v62 + 88);
          v62[9] = "info";
          v62[10] = 4;
          if (!v64)
            *((_BYTE *)v62 + 88) = 1;
        }
        sub_22453FAE0((uint64_t)v62);
        v289 = "version";
        v290 = (void *)7;
        LODWORD(v291[0]) = 6;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "version";
          *(_QWORD *)(v5 + 80) = 7;
          if (!v65)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_224540500(v5, v291);
        sub_223B98294(v5, a2 + 16, v291[0]);
      }
      v76 = *(_QWORD *)(v5 + 56);
      v77 = *(unsigned __int8 **)(v76 - 8);
      *(_QWORD *)(v5 + 40) = v77;
      *(_QWORD *)(v5 + 56) = v76 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      v78 = (uint64_t *)(a2 + 200);
      if (*v77 <= 1u)
      {
        *(_QWORD *)(v5 + 72) = "value";
        *(_QWORD *)(v5 + 80) = 5;
        *(_BYTE *)(v5 + 88) = 1;
      }
      sub_22453FAE0(v5);
      v289 = "version";
      v290 = (void *)7;
      LODWORD(v291[0]) = 2;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v79 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v79)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_224540500(v5, v291);
      v80 = v291[0];
      sub_223BEFF3C((uint64_t)&v289, v78);
      if (!*(_BYTE *)(v5 + 88)
        || *(_QWORD *)(v5 + 80) != 7
        || ((v81 = *(int **)(v5 + 72), v82 = *v81, v83 = *(int *)((char *)v81 + 3), v82 == *(_DWORD *)"version")
          ? (v84 = v83 == *(_DWORD *)"sion")
          : (v84 = 0),
            !v84))
      {
        LOBYTE(v283[0]) = 5;
        v283[1] = (void *)v289;
        v85 = (unsigned __int8 *)sub_22453F8B8(v5);
        v86 = *v85;
        *v85 = 5;
        LOBYTE(v283[0]) = v86;
        v87 = (void *)*((_QWORD *)v85 + 1);
        *((void **)v85 + 1) = v283[1];
        v283[1] = v87;
        sub_223454278((uint64_t *)&v283[1], v86);
      }
      sub_22453FAE0(v5);
      v88 = (char *)v290;
      v89 = (char *)v291[0];
      if (v290 != (void *)v291[0])
      {
        do
        {
          v283[0] = (void *)16;
          v283[1] = v88;
          sub_22453FC5C(v5, (size_t *)v283);
          v88 += 16;
        }
        while (v88 != v89);
      }
      v90 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v90 - 8);
      *(_QWORD *)(v5 + 56) = v90 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      sub_22453FAE0(v5);
      v91 = (__int128 *)v292;
      v92 = v293;
      if (v292 != v293)
      {
        do
        {
          v93 = *v91;
          v94 = v91[1];
          v95 = v91[3];
          v285 = v91[2];
          v286 = v95;
          *(_OWORD *)v283 = v93;
          v284 = v94;
          v287 = 16;
          v288 = v283;
          sub_224541808(v5, &v287);
          v91 += 4;
        }
        while (v91 != v92);
      }
      v96 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v96 - 8);
      *(_QWORD *)(v5 + 56) = v96 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      sub_22453FAE0(v5);
      v97 = (char *)v294;
      v98 = v295;
      if (v294 != v295)
      {
        do
        {
          v283[0] = (void *)16;
          v283[1] = v97;
          sub_22453FC5C(v5, (size_t *)v283);
          v97 += 16;
        }
        while (v97 != v98);
      }
      v99 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v99 - 8);
      *(_QWORD *)(v5 + 56) = v99 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      sub_22453FAE0(v5);
      v100 = (char *)v296;
      v101 = v297;
      if (v296 != v297)
      {
        do
        {
          v283[0] = (void *)16;
          v283[1] = v100;
          sub_22453FC5C(v5, (size_t *)v283);
          v100 += 16;
        }
        while (v100 != v101);
      }
      v102 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v102 - 8);
      *(_QWORD *)(v5 + 56) = v102 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      LOBYTE(v283[0]) = 4;
      v283[1] = (void *)v298[0];
      v103 = (unsigned __int8 *)sub_22453F8B8(v5);
      v104 = *v103;
      *v103 = v283[0];
      LOBYTE(v283[0]) = v104;
      v105 = (void *)*((_QWORD *)v103 + 1);
      *((void **)v103 + 1) = v283[1];
      v283[1] = v105;
      sub_223454278((uint64_t *)&v283[1], v104);
      if (v80 < 2)
        goto LABEL_68;
      sub_22453FAE0(v5);
      v106 = (char *)v299;
      v107 = v300;
      if (v299 != v300)
      {
        do
        {
          v283[0] = (void *)16;
          v283[1] = v106;
          sub_22453FC5C(v5, (size_t *)v283);
          v106 += 16;
        }
        while (v106 != v107);
      }
      v108 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v108 - 8);
      *(_QWORD *)(v5 + 56) = v108 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      sub_22453FAE0(v5);
      v109 = (__int128 *)v301;
      v110 = v302;
      if (v301 != v302)
      {
        do
        {
          v111 = *v109;
          v112 = v109[1];
          v113 = v109[3];
          v285 = v109[2];
          v286 = v113;
          *(_OWORD *)v283 = v111;
          v284 = v112;
          v287 = 16;
          v288 = v283;
          sub_224541808(v5, &v287);
          v109 += 4;
        }
        while (v109 != v110);
      }
      v114 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v114 - 8);
      *(_QWORD *)(v5 + 56) = v114 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      sub_22453FAE0(v5);
      v115 = (char *)__p;
      v116 = v304;
      if (__p != v304)
      {
        do
        {
          v283[0] = (void *)16;
          v283[1] = v115;
          sub_22453FC5C(v5, (size_t *)v283);
          v115 += 16;
        }
        while (v115 != v116);
      }
      goto LABEL_66;
    }
    v68 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79080, (const struct __class_type_info *)&unk_24EC606B8, 0);
    if (!v68)
    {
      if (*a1 == &off_24EC776C0)
        sub_223BF02E4(a2, (uint64_t)a1);
      else
        sub_223BEFAC8(a2, a1);
      return;
    }
    v69 = (uint64_t)v68;
    v70 = *(_DWORD *)(a2 + 192);
    if (v70 == 2)
    {
      if (v68[5])
      {
        v214 = (_QWORD *)v68[3];
        LOBYTE(v289) = *(_BYTE *)(v69 + 32);
        sub_2231813E8(v214, (uint64_t)&v289, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v69 + 40);
      sub_223BA081C(v69, a2 + 16, 4u);
    }
    else if (v70 == 1)
    {
      if (v68[5])
      {
        v213 = (_QWORD *)v68[3];
        LOBYTE(v289) = *(_BYTE *)(v69 + 32);
        sub_2231813E8(v213, (uint64_t)&v289, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v69 + 40);
      sub_223BA0278(v69, a2 + 16, 5u);
    }
    else
    {
      if (v70)
        goto LABEL_437;
      if (v68[5])
      {
        v71 = (_QWORD *)v68[3];
        LOBYTE(v289) = *(_BYTE *)(v69 + 32);
        sub_2231813E8(v71, (uint64_t)&v289, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(v69 + 40);
      sub_223B9FBAC(v69, a2 + 16, 6u);
    }
    v215 = *(_BYTE *)(v69 + 34);
    if (*(_QWORD *)(v69 + 40))
    {
      v216 = *(_QWORD **)(v69 + 24);
      LOBYTE(v289) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v216, (uint64_t)&v289, 1);
    }
    v217 = *(_QWORD **)(v69 + 24);
    LOBYTE(v289) = v215;
    sub_2231813E8(v217, (uint64_t)&v289, 1);
    v218 = *(_QWORD *)(v69 + 40);
    v219 = (uint64_t *)(a2 + 200);
    *(_QWORD *)(v69 + 40) = v218 + 1;
    if (v218 != -1)
    {
      v220 = *(_QWORD **)(v69 + 24);
      LOBYTE(v289) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v220, (uint64_t)&v289, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v69 + 40);
    sub_223BEFF3C((uint64_t)&v289, v219);
    if (*(_QWORD *)(v69 + 40))
    {
      v221 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v221, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v222 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = v222 + 1;
    if (v222 != -1)
    {
      v223 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v223, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v224 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v224;
    v225 = (unsigned __int8 *)v290;
    v226 = (unsigned __int8 *)v291[0];
    if ((void *)v291[0] != v290)
    {
      do
      {
        for (ii = 0; ii != 16; ++ii)
        {
          if (v224)
          {
            v228 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v228, (uint64_t)v283, 1);
          }
          v229 = *(_QWORD **)(v69 + 24);
          sub_223FC497C(&v225[ii]);
          if ((SBYTE7(v284) & 0x80u) == 0)
            v230 = v283;
          else
            v230 = (void **)v283[0];
          if ((SBYTE7(v284) & 0x80u) == 0)
            v231 = BYTE7(v284);
          else
            v231 = (uint64_t)v283[1];
          sub_2231813E8(v229, (uint64_t)v230, v231);
          if (SBYTE7(v284) < 0)
            operator delete(v283[0]);
          v224 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v224;
        }
        v225 += 16;
      }
      while (v225 != v226);
    }
    if (v224)
    {
      v232 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v232, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v233 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v233;
    v234 = (char *)v292;
    v235 = (char *)v293;
    if (v293 != v292)
    {
      do
      {
        for (jj = 0; jj != 64; jj += 4)
        {
          if (v233)
          {
            v237 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v237, (uint64_t)v283, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v69 + 24) + *(_QWORD *)(**(_QWORD **)(v69 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v233 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v233;
        }
        v234 += 64;
      }
      while (v234 != v235);
    }
    if (v233)
    {
      v238 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v238, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v239 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v239;
    v240 = (unsigned __int8 *)v294;
    v241 = (unsigned __int8 *)v295;
    if (v295 != v294)
    {
      do
      {
        for (kk = 0; kk != 16; ++kk)
        {
          if (v239)
          {
            v243 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v243, (uint64_t)v283, 1);
          }
          v244 = *(_QWORD **)(v69 + 24);
          sub_223FC497C(&v240[kk]);
          if ((SBYTE7(v284) & 0x80u) == 0)
            v245 = v283;
          else
            v245 = (void **)v283[0];
          if ((SBYTE7(v284) & 0x80u) == 0)
            v246 = BYTE7(v284);
          else
            v246 = (uint64_t)v283[1];
          sub_2231813E8(v244, (uint64_t)v245, v246);
          if (SBYTE7(v284) < 0)
            operator delete(v283[0]);
          v239 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v239;
        }
        v240 += 16;
      }
      while (v240 != v241);
    }
    if (v239)
    {
      v247 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v247, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v248 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v248;
    v249 = (unsigned __int8 *)v296;
    v250 = (unsigned __int8 *)v297;
    if (v297 != v296)
    {
      do
      {
        for (mm = 0; mm != 16; ++mm)
        {
          if (v248)
          {
            v252 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v252, (uint64_t)v283, 1);
          }
          v253 = *(_QWORD **)(v69 + 24);
          sub_223FC497C(&v249[mm]);
          if ((SBYTE7(v284) & 0x80u) == 0)
            v254 = v283;
          else
            v254 = (void **)v283[0];
          if ((SBYTE7(v284) & 0x80u) == 0)
            v255 = BYTE7(v284);
          else
            v255 = (uint64_t)v283[1];
          sub_2231813E8(v253, (uint64_t)v254, v255);
          if (SBYTE7(v284) < 0)
            operator delete(v283[0]);
          v248 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v248;
        }
        v249 += 16;
      }
      while (v249 != v250);
    }
    if (v248)
    {
      v256 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v256, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v257 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v69 + 40) = v257 + 1;
    if (v257 != -1)
    {
      v258 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v258, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v259 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v259;
    v260 = (unsigned __int8 *)v299;
    v261 = (unsigned __int8 *)v300;
    if (v300 != v299)
    {
      do
      {
        for (nn = 0; nn != 16; ++nn)
        {
          if (v259)
          {
            v263 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v263, (uint64_t)v283, 1);
          }
          v264 = *(_QWORD **)(v69 + 24);
          sub_223FC497C(&v260[nn]);
          if ((SBYTE7(v284) & 0x80u) == 0)
            v265 = v283;
          else
            v265 = (void **)v283[0];
          if ((SBYTE7(v284) & 0x80u) == 0)
            v266 = BYTE7(v284);
          else
            v266 = (uint64_t)v283[1];
          sub_2231813E8(v264, (uint64_t)v265, v266);
          if (SBYTE7(v284) < 0)
            operator delete(v283[0]);
          v259 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v259;
        }
        v260 += 16;
      }
      while (v260 != v261);
    }
    if (v259)
    {
      v267 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v267, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v268 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v268;
    v269 = (char *)v301;
    v270 = (char *)v302;
    if (v302 != v301)
    {
      do
      {
        for (i1 = 0; i1 != 64; i1 += 4)
        {
          if (v268)
          {
            v272 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v272, (uint64_t)v283, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v69 + 24) + *(_QWORD *)(**(_QWORD **)(v69 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v268 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v268;
        }
        v269 += 64;
      }
      while (v269 != v270);
    }
    if (v268)
    {
      v273 = *(_QWORD **)(v69 + 24);
      LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
      sub_2231813E8(v273, (uint64_t)v283, 1);
    }
    std::ostream::operator<<();
    v274 = *(_QWORD *)(v69 + 40) + 1;
    *(_QWORD *)(v69 + 40) = v274;
    v208 = (char *)__p;
    v275 = v304;
    if (v304 != __p)
    {
      do
      {
        for (i2 = 0; i2 != 16; ++i2)
        {
          if (v274)
          {
            v277 = *(_QWORD **)(v69 + 24);
            LOBYTE(v283[0]) = *(_BYTE *)(v69 + 32);
            sub_2231813E8(v277, (uint64_t)v283, 1);
          }
          v278 = *(_QWORD **)(v69 + 24);
          sub_223FC497C((unsigned __int8 *)&v208[i2]);
          if ((SBYTE7(v284) & 0x80u) == 0)
            v279 = v283;
          else
            v279 = (void **)v283[0];
          if ((SBYTE7(v284) & 0x80u) == 0)
            v280 = BYTE7(v284);
          else
            v280 = (uint64_t)v283[1];
          sub_2231813E8(v278, (uint64_t)v279, v280);
          if (SBYTE7(v284) < 0)
            operator delete(v283[0]);
          v274 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v274;
        }
        v208 += 16;
      }
      while (v208 != v275);
      goto LABEL_419;
    }
  }
  if (v208)
  {
    v304 = v208;
    operator delete(v208);
  }
  if (v301)
  {
    v302 = (__int128 *)v301;
    operator delete(v301);
  }
  if (v299)
  {
    v300 = (char *)v299;
    operator delete(v299);
  }
  if (v296)
  {
    v297 = (char *)v296;
    operator delete(v296);
  }
  if (v294)
  {
    v295 = (char *)v294;
    operator delete(v294);
  }
  if (v292)
  {
    v293 = (__int128 *)v292;
    operator delete(v292);
  }
  if (v290)
  {
    v291[0] = v290;
    operator delete(v290);
  }
}

void sub_223BEF9A0(_Unwind_Exception *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t *v12;
  va_list va;

  va_start(va, a12);
  sub_223454278(v12, a2);
  sub_223BEA9A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223BEF9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_223BEA9A4(&a23);
  _Unwind_Resume(a1);
}

void sub_223BEFAC8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;

  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v13) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v9 = v13;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BACE24((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_223BACE24((uint64_t)a2, v4, v13);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v13) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v11 = v13;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BAC79C((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_223BAC79C((uint64_t)a2, v4, v13);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    v6 = a2[2];
    LODWORD(v13) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
    v7 = v13;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        LODWORD(v13) = 3;
        (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_223BABEC8((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_223BABEC8((uint64_t)a2, v4, v13);
  }
LABEL_17:
  LODWORD(v13) = 2;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v13);
  v12 = v13;
  sub_223BEFF3C((uint64_t)&v13, (uint64_t *)(a1 + 200));
  v29 = v13;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v29);
  v29 = (v15 - (_BYTE *)v14) >> 4;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
  sub_223BB26EC((uint64_t)a2, (v15 - (_BYTE *)v14) >> 4, (uint64_t)v14);
  v29 = (v17 - (_BYTE *)v16) >> 6;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
  sub_223BB2868((uint64_t)a2, (v17 - (_BYTE *)v16) >> 6, (uint64_t)v16);
  v29 = (v19 - (_BYTE *)v18) >> 4;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
  sub_223BB26EC((uint64_t)a2, (v19 - (_BYTE *)v18) >> 4, (uint64_t)v18);
  v29 = (v21 - (_BYTE *)v20) >> 4;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
  sub_223BB26EC((uint64_t)a2, (v21 - (_BYTE *)v20) >> 4, (uint64_t)v20);
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 32))(a2, &v22);
  if (v12 >= 2)
  {
    v29 = (v24 - (_BYTE *)v23) >> 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
    sub_223BB26EC((uint64_t)a2, (v24 - (_BYTE *)v23) >> 4, (uint64_t)v23);
    v29 = (v26 - (_BYTE *)v25) >> 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
    sub_223BB2868((uint64_t)a2, (v26 - (_BYTE *)v25) >> 6, (uint64_t)v25);
    v29 = (v28 - (_BYTE *)__p) >> 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v29);
    sub_223BB26EC((uint64_t)a2, (v28 - (_BYTE *)__p) >> 4, (uint64_t)__p);
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
}

void sub_223BEFF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223BEFF3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)a2[4];
  v10 = (_BYTE *)a2[5];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_22316E078();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[64 * (v12 >> 6)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)a2[7];
  v15 = (_BYTE *)a2[8];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_22316E078();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[16 * (v17 >> 4)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v21 = (_BYTE *)a2[10];
  v20 = (_BYTE *)a2[11];
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0)
      sub_22316E078();
    v23 = (char *)operator new(v20 - v21);
    *(_QWORD *)(a1 + 80) = v23;
    *(_QWORD *)(a1 + 88) = v23;
    v24 = &v23[16 * (v22 >> 4)];
    *(_QWORD *)(a1 + 96) = v24;
    memcpy(v23, v21, v22);
    *(_QWORD *)(a1 + 88) = v24;
  }
  v25 = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 104) = v25;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v27 = (_BYTE *)a2[14];
  v26 = (_BYTE *)a2[15];
  v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0)
      sub_22316E078();
    v29 = (char *)operator new(v26 - v27);
    *(_QWORD *)(a1 + 112) = v29;
    *(_QWORD *)(a1 + 120) = v29;
    v30 = &v29[16 * (v28 >> 4)];
    *(_QWORD *)(a1 + 128) = v30;
    memcpy(v29, v27, v28);
    *(_QWORD *)(a1 + 120) = v30;
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v32 = (_BYTE *)a2[17];
  v31 = (_BYTE *)a2[18];
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      sub_22316E078();
    v34 = (char *)operator new(v31 - v32);
    *(_QWORD *)(a1 + 136) = v34;
    *(_QWORD *)(a1 + 144) = v34;
    v35 = &v34[64 * (v33 >> 6)];
    *(_QWORD *)(a1 + 152) = v35;
    memcpy(v34, v32, v33);
    *(_QWORD *)(a1 + 144) = v35;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v37 = (_BYTE *)a2[20];
  v36 = (_BYTE *)a2[21];
  v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0)
      sub_22316E078();
    v39 = (char *)operator new(v36 - v37);
    *(_QWORD *)(a1 + 160) = v39;
    *(_QWORD *)(a1 + 168) = v39;
    v40 = &v39[16 * (v38 >> 4)];
    *(_QWORD *)(a1 + 176) = v40;
    memcpy(v39, v37, v38);
    *(_QWORD *)(a1 + 168) = v40;
  }
  return a1;
}

void sub_223BF01CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v18 = *v16;
  if (*v16)
  {
    v10[21] = v18;
    operator delete(v18);
    v19 = *v15;
    if (!*v15)
    {
LABEL_3:
      v20 = *v14;
      if (!*v14)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v19 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  v10[18] = v19;
  operator delete(v19);
  v20 = *v14;
  if (!*v14)
  {
LABEL_4:
    v21 = *v13;
    if (!*v13)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v10[15] = v20;
  operator delete(v20);
  v21 = *v13;
  if (!*v13)
  {
LABEL_5:
    v22 = *v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v10[11] = v21;
  operator delete(v21);
  v22 = *v12;
  if (!*v12)
  {
LABEL_6:
    v23 = *v11;
    if (!*v11)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v10[8] = v22;
  operator delete(v22);
  v23 = *v11;
  if (!*v11)
  {
LABEL_7:
    v24 = *a10;
    if (!*a10)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  v10[5] = v23;
  operator delete(v23);
  v24 = *a10;
  if (!*a10)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_8:
  v10[2] = v24;
  operator delete(v24);
  goto LABEL_9;
}

void sub_223BF02D4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x223BF0214);
  JUMPOUT(0x223BF020CLL);
}

void sub_223BF02E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  _BYTE *v36;
  void *v37;
  _BYTE *v38;
  void *v39;
  _BYTE *v40;
  char v41;
  char v42[7];
  void *v43;
  _BYTE *v44;
  void *v45;
  _BYTE *v46;
  void *__p;
  _BYTE *v48;
  uint64_t __src;
  uint64_t v50;

  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v32) = 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v32, (char *)&v32 + 4, 4);
    v7 = v32;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA6918(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v32) = 5;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v32, (char *)&v32 + 4, 4);
    v8 = v32;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA67FC(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_22316DD70();
    LODWORD(v32) = 6;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v32, (char *)&v32 + 4, 4);
    v6 = v32;
    sub_2244FF590((_QWORD *)a2);
    sub_223BA5FAC(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  LODWORD(v32) = 2;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&v32, (char *)&v32 + 4, 4);
  v10 = v32;
  sub_223BEFF3C((uint64_t)&v32, (uint64_t *)(a1 + 200));
  __src = v32;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
  __src = (v34 - (_BYTE *)v33) >> 4;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
  v11 = (char *)v33;
  if (v34 != v33)
  {
    v12 = 16 * ((v34 - (_BYTE *)v33) >> 4);
    do
    {
      v13 = v11 + 16;
      sub_224501B60(a2 + 24, *(char **)(a2 + 32), v11, v11 + 16, 16);
      v11 = v13;
      v12 -= 16;
    }
    while (v12);
  }
  __src = (v36 - (_BYTE *)v35) >> 6;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
  v14 = (char *)v35;
  if (v36 != v35)
  {
    v15 = (v36 - (_BYTE *)v35) >> 6 << 6;
    do
    {
      v16 = v14 + 64;
      sub_224501B60(a2 + 24, *(char **)(a2 + 32), v14, v14 + 64, 64);
      v14 = v16;
      v15 -= 64;
    }
    while (v15);
  }
  __src = (v38 - (_BYTE *)v37) >> 4;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
  v17 = (char *)v37;
  if (v38 != v37)
  {
    v18 = 16 * ((v38 - (_BYTE *)v37) >> 4);
    do
    {
      v19 = v17 + 16;
      sub_224501B60(a2 + 24, *(char **)(a2 + 32), v17, v17 + 16, 16);
      v17 = v19;
      v18 -= 16;
    }
    while (v18);
  }
  __src = (v40 - (_BYTE *)v39) >> 4;
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
  v20 = (char *)v39;
  if (v40 != v39)
  {
    v21 = 16 * ((v40 - (_BYTE *)v39) >> 4);
    do
    {
      v22 = v20 + 16;
      sub_224501B60(a2 + 24, *(char **)(a2 + 32), v20, v20 + 16, 16);
      v20 = v22;
      v21 -= 16;
    }
    while (v21);
  }
  sub_224501B60(a2 + 24, *(char **)(a2 + 32), &v41, v42, 1);
  if (v10 >= 2)
  {
    __src = (v44 - (_BYTE *)v43) >> 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
    v23 = (char *)v43;
    if (v44 != v43)
    {
      v24 = 16 * ((v44 - (_BYTE *)v43) >> 4);
      do
      {
        v25 = v23 + 16;
        sub_224501B60(a2 + 24, *(char **)(a2 + 32), v23, v23 + 16, 16);
        v23 = v25;
        v24 -= 16;
      }
      while (v24);
    }
    __src = (v46 - (_BYTE *)v45) >> 6;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
    v26 = (char *)v45;
    if (v46 != v45)
    {
      v27 = (v46 - (_BYTE *)v45) >> 6 << 6;
      do
      {
        v28 = v26 + 64;
        sub_224501B60(a2 + 24, *(char **)(a2 + 32), v26, v26 + 64, 64);
        v26 = v28;
        v27 -= 64;
      }
      while (v27);
    }
    __src = (v48 - (_BYTE *)__p) >> 4;
    sub_224501B60(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v50, 8);
    v29 = (char *)__p;
    if (v48 != __p)
    {
      v30 = 16 * ((v48 - (_BYTE *)__p) >> 4);
      do
      {
        v31 = v29 + 16;
        sub_224501B60(a2 + 24, *(char **)(a2 + 32), v29, v29 + 16, 16);
        v29 = v31;
        v30 -= 16;
      }
      while (v30);
    }
  }
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_223BF07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF07F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF0804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF0818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF082C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF0840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF0854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

void sub_223BF0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223BEA9A4(&a9);
  _Unwind_Resume(a1);
}

double sub_223BF087C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  unint64_t v54;
  float *v55;
  float **v56;
  float *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  double result;
  unsigned __int8 *v86;
  int v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  int v98;
  unint64_t v99;
  float **v100;
  float *v101;
  float *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  unint64_t v110;
  char **v111;
  char *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  char **v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *i;
  uint64_t v154;
  void (*v155)(uint64_t);
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float v164;
  _QWORD *v165;
  char *j;
  uint64_t v167;
  void (*v168)(uint64_t);
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char *k;
  uint64_t v179;
  void (*v180)(uint64_t);
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char *m;
  uint64_t v191;
  void (*v192)(uint64_t);
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char *n;
  uint64_t v203;
  void (*v204)(uint64_t);
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  float v213;
  _QWORD *v214;
  char *ii;
  uint64_t v216;
  void (*v217)(uint64_t);
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  char *jj;
  uint64_t v228;
  void (*v229)(uint64_t);
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  char *v251;
  int v252;
  char *v253;
  unsigned __int8 *v254;
  int v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 *v264;
  int v265;
  unint64_t v266;
  float *v267;
  float **v268;
  float *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned __int8 *v274;
  int v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 *v285;
  int v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  unsigned __int8 *v297;
  int v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unsigned __int8 *v307;
  int v308;
  unint64_t v309;
  float **v310;
  float *v311;
  float *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int8 *v317;
  int v318;
  unint64_t v319;
  char **v320;
  char *v321;
  char *v322;
  unint64_t v323;
  char **v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  _BYTE *v343;
  _BYTE *v344;
  unint64_t v345;
  char v346;
  char v347;
  _BYTE *v348;
  _BYTE *v349;
  char *v350;
  char *v351;
  unint64_t v352;
  char *v353;
  _DWORD *v354;
  _BYTE *v355;
  _BYTE *v356;
  unint64_t v357;
  _BYTE *v358;
  _BYTE *v359;
  _BYTE *v360;
  _BYTE *v361;
  unint64_t v362;
  _BYTE *v363;
  _BYTE *v364;
  _BYTE *v365;
  _BYTE *v366;
  unint64_t v367;
  _BYTE *v368;
  _BYTE *v369;
  char *v370;
  char *v371;
  unint64_t v372;
  char *v373;
  _DWORD *v374;
  _BYTE *v375;
  _BYTE *v376;
  unint64_t v377;
  _BYTE *v378;
  _BYTE *v379;
  std::bad_cast *v380;
  std::bad_cast *v381;
  std::bad_cast *v382;
  std::bad_cast *v383;
  std::bad_cast *v384;
  std::bad_cast *v385;
  std::bad_cast *v386;
  std::bad_cast *v387;
  std::bad_cast *v388;
  std::bad_cast *v389;
  std::bad_cast *v390;
  std::bad_cast *v391;
  std::bad_cast *v392;
  std::bad_cast *v393;
  _QWORD *exception;
  _QWORD *v395;
  char v396;
  void *__p;
  unint64_t v398;
  char v399;
  _QWORD *v400;
  unint64_t v401;
  __int128 v402;
  __int128 v403;
  uint64_t v404;
  char v405;
  __int128 v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  char v410;
  __int128 v411;
  uint64_t v412;
  char v413;
  __int128 v414;
  uint64_t v415;
  unsigned __int8 v416;
  uint64_t v417;

  v417 = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60740, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *(_DWORD *)(a2 + 192);
    switch(v6)
    {
      case 0:
        goto LABEL_73;
      case 1:
        sub_223B89234(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
        v7 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v7 != -1)
        {
          if (!(_DWORD)v7)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)&v401);
            if (!v416)
              goto LABEL_63;
            goto LABEL_39;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v396, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v402;
        *(_BYTE *)(a2 + 64) = 0;
        if (v405)
        {
          v20 = v404;
          *(_OWORD *)(a2 + 40) = v403;
          *(_QWORD *)(a2 + 56) = v20;
          v403 = 0uLL;
          v404 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v21 = v407;
        v22 = v406;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v22;
        *(_QWORD *)(a2 + 88) = v21;
        *(_BYTE *)(a2 + 120) = 0;
        if (v410)
        {
          v23 = v409;
          *(_OWORD *)(a2 + 96) = v408;
          *(_QWORD *)(a2 + 112) = v23;
          v408 = 0uLL;
          v409 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v413)
        {
          v24 = v412;
          *(_OWORD *)(a2 + 128) = v411;
          *(_QWORD *)(a2 + 144) = v24;
          v411 = 0uLL;
          v412 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v25 = v416;
        if (v416)
        {
          *(_OWORD *)(a2 + 160) = v414;
          *(_QWORD *)(a2 + 176) = v415;
          v414 = 0uLL;
          v415 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v25)
          goto LABEL_63;
LABEL_39:
        v26 = v414;
        if (!(_QWORD)v414)
          goto LABEL_63;
        v27 = *((_QWORD *)&v414 + 1);
        v28 = (void *)v414;
        if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
          goto LABEL_62;
        do
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
        while (v27 != v26);
LABEL_61:
        v28 = (void *)v414;
LABEL_62:
        *((_QWORD *)&v414 + 1) = v26;
        operator delete(v28);
        goto LABEL_63;
      case 2:
        sub_223B8944C(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
        v13 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v13 != -1)
        {
          if (!(_DWORD)v13)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)&v401);
            if (!v416)
            {
LABEL_63:
              if (v413 && SHIBYTE(v412) < 0)
                operator delete((void *)v411);
              if (v410 && SHIBYTE(v409) < 0)
                operator delete((void *)v408);
              if (v405 && SHIBYTE(v404) < 0)
                operator delete((void *)v403);
              sub_2231AD66C((uint64_t)&__p);
              if (*(_DWORD *)(a2 + 192))
                sub_22316DD70();
LABEL_73:
              v36 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "info";
              *(_QWORD *)(v5 + 96) = 4;
              if (!v36)
                *(_BYTE *)(v5 + 104) = 1;
              sub_223BB4B40(v5, a2 + 16);
              v37 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "value";
              *(_QWORD *)(v5 + 96) = 5;
              if (!v37)
                *(_BYTE *)(v5 + 104) = 1;
              sub_224544628(v5);
              v38 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "version";
              *(_QWORD *)(v5 + 96) = 7;
              if (!v38)
                *(_BYTE *)(v5 + 104) = 1;
              v39 = (char *)sub_2245448E0((uint64_t *)v5);
              ++*(_QWORD *)(v5 + 112);
              __p = 0;
              sub_22451CAD4(v39, &__p);
              v40 = (int)__p;
              if ((unint64_t)__p >> 32)
              {
                exception = __cxa_allocate_exception(8uLL);
                *exception = &off_24EC7AC38;
                __cxa_throw(exception, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
              }
              v41 = (char *)sub_2245448E0((uint64_t *)v5);
              ++*(_QWORD *)(v5 + 112);
              __p = 0;
              sub_22451CC1C(v41, &__p);
              *(_QWORD *)(a2 + 200) = __p;
              sub_224544628(v5);
              v42 = *(unsigned __int8 **)(v5 + 32);
              v43 = *v42;
              if (v43 == 2)
              {
                v44 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v42 + 1) + 8) - **((_QWORD **)v42 + 1)) >> 4;
              }
              else if (v43 == 1)
              {
                v44 = 0xCCCCCCCCCCCCCCCDLL
                    * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v42 + 1) + 8) - **((_QWORD **)v42 + 1)) >> 3);
              }
              else
              {
                if (!*v42)
                {
                  v44 = 0;
                  v46 = (unint64_t *)(a2 + 216);
                  v45 = *(_QWORD *)(a2 + 216);
                  v47 = *(_QWORD *)(a2 + 208);
                  v48 = (uint64_t)(v45 - v47) >> 4;
                  goto LABEL_89;
                }
                v44 = 1;
              }
              v46 = (unint64_t *)(a2 + 216);
              v45 = *(_QWORD *)(a2 + 216);
              v47 = *(_QWORD *)(a2 + 208);
              v48 = (uint64_t)(v45 - v47) >> 4;
              if (v44 > v48)
              {
                sub_2232C68D0((char **)(a2 + 208), v44 - v48);
                v47 = *(_QWORD *)(a2 + 208);
                v45 = *v46;
                goto LABEL_91;
              }
LABEL_89:
              if (v48 > v44)
              {
                v45 = v47 + 16 * v44;
                *v46 = v45;
              }
LABEL_91:
              while (v47 != v45)
              {
                __p = (void *)16;
                v398 = v47;
                v49 = (char *)sub_2245448E0((uint64_t *)v5);
                ++*(_QWORD *)(v5 + 112);
                sub_2245449F8(v49, (uint64_t)&__p);
                v47 += 16;
              }
              v50 = *(_QWORD *)(v5 + 48);
              *(_QWORD *)(v5 + 32) = *(_QWORD *)(v50 - 8);
              v51 = *(_QWORD *)(v5 + 72);
              *(_QWORD *)(v5 + 112) = *(_QWORD *)(v51 - 8);
              *(_QWORD *)(v5 + 48) = v50 - 8;
              *(_QWORD *)(v5 + 72) = v51 - 8;
              sub_224544628(v5);
              v52 = *(unsigned __int8 **)(v5 + 32);
              v53 = *v52;
              if (v53 == 2)
              {
                v54 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v52 + 1) + 8) - **((_QWORD **)v52 + 1)) >> 4;
              }
              else if (v53 == 1)
              {
                v54 = 0xCCCCCCCCCCCCCCCDLL
                    * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v52 + 1) + 8) - **((_QWORD **)v52 + 1)) >> 3);
              }
              else
              {
                if (!**(_BYTE **)(v5 + 32))
                {
                  v54 = 0;
                  v56 = (float **)(a2 + 240);
                  v55 = *(float **)(a2 + 240);
                  v57 = *(float **)(a2 + 232);
                  v58 = ((char *)v55 - (char *)v57) >> 6;
                  goto LABEL_102;
                }
                v54 = 1;
              }
              v56 = (float **)(a2 + 240);
              v55 = *(float **)(a2 + 240);
              v57 = *(float **)(a2 + 232);
              v58 = ((char *)v55 - (char *)v57) >> 6;
              if (v54 > v58)
              {
                sub_2232C69F8((char **)(a2 + 232), v54 - v58);
                v57 = *(float **)(a2 + 232);
                v55 = *v56;
                goto LABEL_105;
              }
LABEL_102:
              if (v58 > v54)
              {
                v55 = &v57[16 * v54];
                *v56 = v55;
              }
LABEL_105:
              while (v57 != v55)
              {
                v59 = sub_2245448E0((uint64_t *)v5);
                ++*(_QWORD *)(v5 + 112);
                sub_224545EA4(v59, v57);
                v57 += 16;
              }
              v60 = *(_QWORD *)(v5 + 48);
              *(_QWORD *)(v5 + 32) = *(_QWORD *)(v60 - 8);
              v61 = *(_QWORD *)(v5 + 72);
              *(_QWORD *)(v5 + 112) = *(_QWORD *)(v61 - 8);
              *(_QWORD *)(v5 + 48) = v60 - 8;
              *(_QWORD *)(v5 + 72) = v61 - 8;
              sub_224544628(v5);
              v62 = *(unsigned __int8 **)(v5 + 32);
              v63 = *v62;
              if (v63 == 2)
              {
                v64 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v62 + 1) + 8) - **((_QWORD **)v62 + 1)) >> 4;
                v65 = (unint64_t *)(a2 + 264);
                v66 = *(_QWORD *)(a2 + 256);
                v67 = *(_QWORD *)(a2 + 264);
                v68 = (uint64_t)(v67 - v66) >> 4;
                v69 = v64 - v68;
                if (v64 <= v68)
                  goto LABEL_115;
              }
              else if (v63 == 1)
              {
                v64 = 0xCCCCCCCCCCCCCCCDLL
                    * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v62 + 1) + 8) - **((_QWORD **)v62 + 1)) >> 3);
                v65 = (unint64_t *)(a2 + 264);
                v66 = *(_QWORD *)(a2 + 256);
                v67 = *(_QWORD *)(a2 + 264);
                v68 = (uint64_t)(v67 - v66) >> 4;
                v69 = v64 - v68;
                if (v64 <= v68)
                  goto LABEL_115;
              }
              else
              {
                if (!**(_BYTE **)(v5 + 32))
                {
                  v64 = 0;
                  v65 = (unint64_t *)(a2 + 264);
                  v66 = *(_QWORD *)(a2 + 256);
                  v67 = *(_QWORD *)(a2 + 264);
                  v68 = (uint64_t)(v67 - v66) >> 4;
                  goto LABEL_115;
                }
                v64 = 1;
                v65 = (unint64_t *)(a2 + 264);
                v66 = *(_QWORD *)(a2 + 256);
                v67 = *(_QWORD *)(a2 + 264);
                v68 = (uint64_t)(v67 - v66) >> 4;
                v69 = 1 - v68;
                if (v68)
                {
LABEL_115:
                  if (v68 > v64)
                  {
                    v67 = v66 + 16 * v64;
                    *v65 = v67;
                  }
LABEL_117:
                  while (v66 != v67)
                  {
                    __p = (void *)16;
                    v398 = v66;
                    v70 = (char *)sub_2245448E0((uint64_t *)v5);
                    ++*(_QWORD *)(v5 + 112);
                    sub_2245449F8(v70, (uint64_t)&__p);
                    v66 += 16;
                  }
                  v71 = *(_QWORD *)(v5 + 48);
                  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v71 - 8);
                  v72 = *(_QWORD *)(v5 + 72);
                  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v72 - 8);
                  *(_QWORD *)(v5 + 48) = v71 - 8;
                  *(_QWORD *)(v5 + 72) = v72 - 8;
                  sub_224544628(v5);
                  v73 = *(unsigned __int8 **)(v5 + 32);
                  v74 = *v73;
                  if (v74 == 2)
                  {
                    v75 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v73 + 1) + 8) - **((_QWORD **)v73 + 1)) >> 4;
                    v76 = (unint64_t *)(a2 + 288);
                    v77 = *(_QWORD *)(a2 + 280);
                    v78 = *(_QWORD *)(a2 + 288);
                    v79 = (uint64_t)(v78 - v77) >> 4;
                    v80 = v75 - v79;
                    if (v75 <= v79)
                      goto LABEL_128;
                  }
                  else if (v74 == 1)
                  {
                    v75 = 0xCCCCCCCCCCCCCCCDLL
                        * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v73 + 1) + 8) - **((_QWORD **)v73 + 1)) >> 3);
                    v76 = (unint64_t *)(a2 + 288);
                    v77 = *(_QWORD *)(a2 + 280);
                    v78 = *(_QWORD *)(a2 + 288);
                    v79 = (uint64_t)(v78 - v77) >> 4;
                    v80 = v75 - v79;
                    if (v75 <= v79)
                      goto LABEL_128;
                  }
                  else
                  {
                    if (!**(_BYTE **)(v5 + 32))
                    {
                      v75 = 0;
                      v76 = (unint64_t *)(a2 + 288);
                      v77 = *(_QWORD *)(a2 + 280);
                      v78 = *(_QWORD *)(a2 + 288);
                      v79 = (uint64_t)(v78 - v77) >> 4;
                      goto LABEL_128;
                    }
                    v75 = 1;
                    v76 = (unint64_t *)(a2 + 288);
                    v77 = *(_QWORD *)(a2 + 280);
                    v78 = *(_QWORD *)(a2 + 288);
                    v79 = (uint64_t)(v78 - v77) >> 4;
                    v80 = 1 - v79;
                    if (v79)
                    {
LABEL_128:
                      if (v79 > v75)
                      {
                        v78 = v77 + 16 * v75;
                        *v76 = v78;
                      }
LABEL_130:
                      while (v77 != v78)
                      {
                        __p = (void *)16;
                        v398 = v77;
                        v81 = (char *)sub_2245448E0((uint64_t *)v5);
                        ++*(_QWORD *)(v5 + 112);
                        sub_2245449F8(v81, (uint64_t)&__p);
                        v77 += 16;
                      }
                      v82 = *(_QWORD *)(v5 + 48);
                      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v82 - 8);
                      v83 = *(_QWORD *)(v5 + 72);
                      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v83 - 8);
                      *(_QWORD *)(v5 + 48) = v82 - 8;
                      *(_QWORD *)(v5 + 72) = v83 - 8;
                      v84 = (char *)sub_2245448E0((uint64_t *)v5);
                      ++*(_QWORD *)(v5 + 112);
                      LOBYTE(__p) = 0;
                      sub_22451CECC(v84, &__p);
                      *(_BYTE *)(a2 + 304) = (_BYTE)__p;
                      if ((v40 & 0xFFFFFFFE) != 0)
                      {
                        sub_224544628(v5);
                        v86 = *(unsigned __int8 **)(v5 + 32);
                        v87 = *v86;
                        if (v87 == 2)
                        {
                          v88 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v86 + 1) + 8) - **((_QWORD **)v86 + 1)) >> 4;
                          v89 = (unint64_t *)(a2 + 320);
                          v90 = *(_QWORD *)(a2 + 312);
                          v91 = *(_QWORD *)(a2 + 320);
                          v92 = (uint64_t)(v91 - v90) >> 4;
                          v93 = v88 - v92;
                          if (v88 <= v92)
                            goto LABEL_142;
                        }
                        else if (v87 == 1)
                        {
                          v88 = 0xCCCCCCCCCCCCCCCDLL
                              * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v86 + 1) + 8) - **((_QWORD **)v86 + 1)) >> 3);
                          v89 = (unint64_t *)(a2 + 320);
                          v90 = *(_QWORD *)(a2 + 312);
                          v91 = *(_QWORD *)(a2 + 320);
                          v92 = (uint64_t)(v91 - v90) >> 4;
                          v93 = v88 - v92;
                          if (v88 <= v92)
                            goto LABEL_142;
                        }
                        else
                        {
                          if (!*v86)
                          {
                            v88 = 0;
                            v89 = (unint64_t *)(a2 + 320);
                            v90 = *(_QWORD *)(a2 + 312);
                            v91 = *(_QWORD *)(a2 + 320);
                            v92 = (uint64_t)(v91 - v90) >> 4;
                            goto LABEL_142;
                          }
                          v88 = 1;
                          v89 = (unint64_t *)(a2 + 320);
                          v90 = *(_QWORD *)(a2 + 312);
                          v91 = *(_QWORD *)(a2 + 320);
                          v92 = (uint64_t)(v91 - v90) >> 4;
                          v93 = 1 - v92;
                          if (v92)
                          {
LABEL_142:
                            if (v92 > v88)
                            {
                              v91 = v90 + 16 * v88;
                              *v89 = v91;
                            }
LABEL_144:
                            while (v90 != v91)
                            {
                              __p = (void *)16;
                              v398 = v90;
                              v94 = (char *)sub_2245448E0((uint64_t *)v5);
                              ++*(_QWORD *)(v5 + 112);
                              sub_2245449F8(v94, (uint64_t)&__p);
                              v90 += 16;
                            }
                            v95 = *(_QWORD *)(v5 + 48);
                            *(_QWORD *)(v5 + 32) = *(_QWORD *)(v95 - 8);
                            v96 = *(_QWORD *)(v5 + 72);
                            *(_QWORD *)(v5 + 112) = *(_QWORD *)(v96 - 8);
                            *(_QWORD *)(v5 + 48) = v95 - 8;
                            *(_QWORD *)(v5 + 72) = v96 - 8;
                            sub_224544628(v5);
                            v97 = *(unsigned __int8 **)(v5 + 32);
                            v98 = *v97;
                            if (v98 == 2)
                            {
                              v99 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v97 + 1) + 8) - **((_QWORD **)v97 + 1)) >> 4;
                              v100 = (float **)(a2 + 344);
                              v101 = *(float **)(a2 + 336);
                              v102 = *(float **)(a2 + 344);
                              v103 = ((char *)v102 - (char *)v101) >> 6;
                              v104 = v99 - v103;
                              if (v99 <= v103)
                                goto LABEL_155;
                            }
                            else if (v98 == 1)
                            {
                              v99 = 0xCCCCCCCCCCCCCCCDLL
                                  * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v97 + 1) + 8) - **((_QWORD **)v97 + 1)) >> 3);
                              v100 = (float **)(a2 + 344);
                              v101 = *(float **)(a2 + 336);
                              v102 = *(float **)(a2 + 344);
                              v103 = ((char *)v102 - (char *)v101) >> 6;
                              v104 = v99 - v103;
                              if (v99 <= v103)
                                goto LABEL_155;
                            }
                            else
                            {
                              if (!**(_BYTE **)(v5 + 32))
                              {
                                v99 = 0;
                                v100 = (float **)(a2 + 344);
                                v101 = *(float **)(a2 + 336);
                                v102 = *(float **)(a2 + 344);
                                v103 = ((char *)v102 - (char *)v101) >> 6;
                                goto LABEL_155;
                              }
                              v99 = 1;
                              v100 = (float **)(a2 + 344);
                              v101 = *(float **)(a2 + 336);
                              v102 = *(float **)(a2 + 344);
                              v103 = ((char *)v102 - (char *)v101) >> 6;
                              v104 = 1 - v103;
                              if (v103)
                              {
LABEL_155:
                                if (v103 > v99)
                                {
                                  v102 = &v101[16 * v99];
                                  *v100 = v102;
                                }
LABEL_158:
                                while (v101 != v102)
                                {
                                  v105 = sub_2245448E0((uint64_t *)v5);
                                  ++*(_QWORD *)(v5 + 112);
                                  sub_224545EA4(v105, v101);
                                  v101 += 16;
                                }
                                v106 = *(_QWORD *)(v5 + 48);
                                *(_QWORD *)(v5 + 32) = *(_QWORD *)(v106 - 8);
                                v107 = *(_QWORD *)(v5 + 72);
                                *(_QWORD *)(v5 + 112) = *(_QWORD *)(v107 - 8);
                                *(_QWORD *)(v5 + 48) = v106 - 8;
                                *(_QWORD *)(v5 + 72) = v107 - 8;
                                sub_224544628(v5);
                                v108 = *(unsigned __int8 **)(v5 + 32);
                                v109 = *v108;
                                if (v109 == 2)
                                {
                                  v110 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v108 + 1) + 8) - **((_QWORD **)v108 + 1)) >> 4;
                                  v111 = (char **)(a2 + 368);
                                  v112 = *(char **)(a2 + 360);
                                  v113 = *(char **)(a2 + 368);
                                  v114 = (v113 - v112) >> 4;
                                  v115 = v110 - v114;
                                  if (v110 <= v114)
                                    goto LABEL_168;
                                }
                                else if (v109 == 1)
                                {
                                  v110 = 0xCCCCCCCCCCCCCCCDLL
                                       * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v108 + 1) + 8) - **((_QWORD **)v108 + 1)) >> 3);
                                  v111 = (char **)(a2 + 368);
                                  v112 = *(char **)(a2 + 360);
                                  v113 = *(char **)(a2 + 368);
                                  v114 = (v113 - v112) >> 4;
                                  v115 = v110 - v114;
                                  if (v110 <= v114)
                                    goto LABEL_168;
                                }
                                else
                                {
                                  if (!**(_BYTE **)(v5 + 32))
                                  {
                                    v110 = 0;
                                    v111 = (char **)(a2 + 368);
                                    v112 = *(char **)(a2 + 360);
                                    v113 = *(char **)(a2 + 368);
                                    v114 = (v113 - v112) >> 4;
                                    goto LABEL_168;
                                  }
                                  v110 = 1;
                                  v111 = (char **)(a2 + 368);
                                  v112 = *(char **)(a2 + 360);
                                  v113 = *(char **)(a2 + 368);
                                  v114 = (v113 - v112) >> 4;
                                  v115 = 1 - v114;
                                  if (v114)
                                  {
LABEL_168:
                                    if (v114 > v110)
                                    {
                                      v113 = &v112[16 * v110];
                                      *v111 = v113;
                                    }
                                    goto LABEL_170;
                                  }
                                }
                                v116 = (char **)(a2 + 360);
                                sub_2232C68D0(v116, v115);
                                v112 = *v116;
                                v113 = *v111;
LABEL_170:
                                while (v112 != v113)
                                {
                                  __p = (void *)16;
                                  v398 = (unint64_t)v112;
                                  v117 = (char *)sub_2245448E0((uint64_t *)v5);
                                  ++*(_QWORD *)(v5 + 112);
                                  sub_2245449F8(v117, (uint64_t)&__p);
                                  v112 += 16;
                                }
LABEL_172:
                                v118 = *(_QWORD *)(v5 + 48);
                                v120 = *(_QWORD *)(v118 - 8);
                                v119 = v118 - 8;
                                *(_QWORD *)(v5 + 32) = v120;
                                v121 = *(_QWORD *)(v5 + 72);
                                v123 = *(_QWORD *)(v121 - 8);
                                v122 = v121 - 8;
                                *(_QWORD *)(v5 + 112) = v123;
                                *(_QWORD *)(v5 + 48) = v119;
                                *(_QWORD *)(v5 + 72) = v122;
LABEL_490:
                                *(_QWORD *)(v5 + 32) = *(_QWORD *)(v119 - 8);
                                *(_QWORD *)(v5 + 112) = *(_QWORD *)(v122 - 8);
                                *(_QWORD *)(v5 + 48) = v119 - 8;
                                *(_QWORD *)(v5 + 72) = v122 - 8;
                                return result;
                              }
                            }
                            sub_2232C69F8((char **)(a2 + 336), v104);
                            v101 = *(float **)(a2 + 336);
                            v102 = *v100;
                            goto LABEL_158;
                          }
                        }
                        sub_2232C68D0((char **)(a2 + 312), v93);
                        v90 = *(_QWORD *)(a2 + 312);
                        v91 = *v89;
                        goto LABEL_144;
                      }
LABEL_489:
                      v119 = *(_QWORD *)(v5 + 48);
                      v122 = *(_QWORD *)(v5 + 72);
                      goto LABEL_490;
                    }
                  }
                  sub_2232C68D0((char **)(a2 + 280), v80);
                  v77 = *(_QWORD *)(a2 + 280);
                  v78 = *v76;
                  goto LABEL_130;
                }
              }
              sub_2232C68D0((char **)(a2 + 256), v69);
              v66 = *(_QWORD *)(a2 + 256);
              v67 = *v65;
              goto LABEL_117;
            }
            goto LABEL_55;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v13])(&v396, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v402;
        *(_BYTE *)(a2 + 64) = 0;
        if (v405)
        {
          v29 = v404;
          *(_OWORD *)(a2 + 40) = v403;
          *(_QWORD *)(a2 + 56) = v29;
          v403 = 0uLL;
          v404 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v30 = v407;
        v31 = v406;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v31;
        *(_QWORD *)(a2 + 88) = v30;
        *(_BYTE *)(a2 + 120) = 0;
        if (v410)
        {
          v32 = v409;
          *(_OWORD *)(a2 + 96) = v408;
          *(_QWORD *)(a2 + 112) = v32;
          v408 = 0uLL;
          v409 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v413)
        {
          v33 = v412;
          *(_OWORD *)(a2 + 128) = v411;
          *(_QWORD *)(a2 + 144) = v33;
          v411 = 0uLL;
          v412 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v34 = v416;
        if (v416)
        {
          *(_OWORD *)(a2 + 160) = v414;
          *(_QWORD *)(a2 + 176) = v415;
          v414 = 0uLL;
          v415 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        if (!v34)
          goto LABEL_63;
LABEL_55:
        v26 = v414;
        if (!(_QWORD)v414)
          goto LABEL_63;
        v35 = *((_QWORD *)&v414 + 1);
        v28 = (void *)v414;
        if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
          goto LABEL_62;
        do
        {
          if (*(char *)(v35 - 1) < 0)
            operator delete(*(void **)(v35 - 24));
          v35 -= 24;
        }
        while (v35 != v26);
        goto LABEL_61;
    }
LABEL_658:
    sub_22316DD70();
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC20CC0, 0);
  if (!v8)
  {
    v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC607C8, 0);
    if (v14)
    {
      v5 = (uint64_t)v14;
      v15 = *(_DWORD *)(a2 + 192);
      if (!v15)
        goto LABEL_425;
      if (v15 == 1)
      {
        sub_223B89234(a2 + 16, (uint64_t)&__p);
        sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
        v16 = *(unsigned int *)(a2 + 192);
        if ((_DWORD)v16 != -1)
        {
          if (!(_DWORD)v16)
          {
            sub_223BB47F0(a2 + 16, (uint64_t)&v401);
            v17 = v416;
LABEL_389:
            if (!v17)
              goto LABEL_415;
            v239 = v414;
            if (!(_QWORD)v414)
              goto LABEL_415;
            v240 = *((_QWORD *)&v414 + 1);
            v241 = (void *)v414;
            if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
            {
LABEL_414:
              *((_QWORD *)&v414 + 1) = v239;
              operator delete(v241);
LABEL_415:
              if (v413 && SHIBYTE(v412) < 0)
                operator delete((void *)v411);
              if (v410 && SHIBYTE(v409) < 0)
                operator delete((void *)v408);
              if (v405 && SHIBYTE(v404) < 0)
                operator delete((void *)v403);
              sub_2231AD66C((uint64_t)&__p);
              if (*(_DWORD *)(a2 + 192))
                sub_22316DD70();
LABEL_425:
              v248 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "info";
              *(_QWORD *)(v5 + 96) = 4;
              if (!v248)
                *(_BYTE *)(v5 + 104) = 1;
              sub_223BBD758(v5, a2 + 16);
              v249 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "value";
              *(_QWORD *)(v5 + 96) = 5;
              if (!v249)
                *(_BYTE *)(v5 + 104) = 1;
              sub_224544138(v5);
              v250 = *(unsigned __int8 *)(v5 + 104);
              *(_QWORD *)(v5 + 88) = "version";
              *(_QWORD *)(v5 + 96) = 7;
              if (!v250)
                *(_BYTE *)(v5 + 104) = 1;
              v251 = (char *)sub_2245443F0((uint64_t *)v5);
              ++*(_QWORD *)(v5 + 112);
              __p = 0;
              sub_22451C444(v251, &__p);
              v252 = (int)__p;
              if ((unint64_t)__p >> 32)
              {
                v395 = __cxa_allocate_exception(8uLL);
                *v395 = &off_24EC7AC38;
                __cxa_throw(v395, (struct type_info *)&unk_24EC7AC50, (void (*)(void *))std::exception::~exception);
              }
              v253 = (char *)sub_2245443F0((uint64_t *)v5);
              ++*(_QWORD *)(v5 + 112);
              __p = 0;
              sub_22451C58C(v253, &__p);
              *(_QWORD *)(a2 + 200) = __p;
              sub_224544138(v5);
              v254 = *(unsigned __int8 **)(v5 + 32);
              v255 = *v254;
              if (v255 == 2)
              {
                v256 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v254 + 1) + 8) - **((_QWORD **)v254 + 1)) >> 4;
              }
              else if (v255 == 1)
              {
                v256 = *(_QWORD *)(*((_QWORD *)v254 + 1) + 16);
              }
              else
              {
                if (!*v254)
                {
                  v256 = 0;
                  v258 = (unint64_t *)(a2 + 216);
                  v257 = *(_QWORD *)(a2 + 216);
                  v259 = *(_QWORD *)(a2 + 208);
                  v260 = (uint64_t)(v257 - v259) >> 4;
                  goto LABEL_441;
                }
                v256 = 1;
              }
              v258 = (unint64_t *)(a2 + 216);
              v257 = *(_QWORD *)(a2 + 216);
              v259 = *(_QWORD *)(a2 + 208);
              v260 = (uint64_t)(v257 - v259) >> 4;
              if (v256 > v260)
              {
                sub_2232C68D0((char **)(a2 + 208), v256 - v260);
                v259 = *(_QWORD *)(a2 + 208);
                v257 = *v258;
                goto LABEL_443;
              }
LABEL_441:
              if (v260 > v256)
              {
                v257 = v259 + 16 * v256;
                *v258 = v257;
              }
LABEL_443:
              while (v259 != v257)
              {
                __p = (void *)16;
                v398 = v259;
                v261 = (char *)sub_2245443F0((uint64_t *)v5);
                ++*(_QWORD *)(v5 + 112);
                sub_224544508(v261, (uint64_t)&__p);
                v259 += 16;
              }
              v262 = *(_QWORD *)(v5 + 48);
              *(_QWORD *)(v5 + 32) = *(_QWORD *)(v262 - 8);
              v263 = *(_QWORD *)(v5 + 72);
              *(_QWORD *)(v5 + 112) = *(_QWORD *)(v263 - 8);
              *(_QWORD *)(v5 + 48) = v262 - 8;
              *(_QWORD *)(v5 + 72) = v263 - 8;
              sub_224544138(v5);
              v264 = *(unsigned __int8 **)(v5 + 32);
              v265 = *v264;
              if (v265 == 2)
              {
                v266 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v264 + 1) + 8) - **((_QWORD **)v264 + 1)) >> 4;
              }
              else if (v265 == 1)
              {
                v266 = *(_QWORD *)(*((_QWORD *)v264 + 1) + 16);
              }
              else
              {
                if (!**(_BYTE **)(v5 + 32))
                {
                  v266 = 0;
                  v268 = (float **)(a2 + 240);
                  v267 = *(float **)(a2 + 240);
                  v269 = *(float **)(a2 + 232);
                  v270 = ((char *)v267 - (char *)v269) >> 6;
                  goto LABEL_454;
                }
                v266 = 1;
              }
              v268 = (float **)(a2 + 240);
              v267 = *(float **)(a2 + 240);
              v269 = *(float **)(a2 + 232);
              v270 = ((char *)v267 - (char *)v269) >> 6;
              if (v266 > v270)
              {
                sub_2232C69F8((char **)(a2 + 232), v266 - v270);
                v269 = *(float **)(a2 + 232);
                v267 = *v268;
                goto LABEL_457;
              }
LABEL_454:
              if (v270 > v266)
              {
                v267 = &v269[16 * v266];
                *v268 = v267;
              }
LABEL_457:
              while (v269 != v267)
              {
                v271 = sub_2245443F0((uint64_t *)v5);
                ++*(_QWORD *)(v5 + 112);
                sub_224545240(v271, v269);
                v269 += 16;
              }
              v272 = *(_QWORD *)(v5 + 48);
              *(_QWORD *)(v5 + 32) = *(_QWORD *)(v272 - 8);
              v273 = *(_QWORD *)(v5 + 72);
              *(_QWORD *)(v5 + 112) = *(_QWORD *)(v273 - 8);
              *(_QWORD *)(v5 + 48) = v272 - 8;
              *(_QWORD *)(v5 + 72) = v273 - 8;
              sub_224544138(v5);
              v274 = *(unsigned __int8 **)(v5 + 32);
              v275 = *v274;
              if (v275 == 2)
              {
                v276 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v274 + 1) + 8) - **((_QWORD **)v274 + 1)) >> 4;
                v277 = (unint64_t *)(a2 + 264);
                v278 = *(_QWORD *)(a2 + 256);
                v279 = *(_QWORD *)(a2 + 264);
                v280 = (uint64_t)(v279 - v278) >> 4;
                v281 = v276 - v280;
                if (v276 <= v280)
                  goto LABEL_467;
              }
              else if (v275 == 1)
              {
                v276 = *(_QWORD *)(*((_QWORD *)v274 + 1) + 16);
                v277 = (unint64_t *)(a2 + 264);
                v278 = *(_QWORD *)(a2 + 256);
                v279 = *(_QWORD *)(a2 + 264);
                v280 = (uint64_t)(v279 - v278) >> 4;
                v281 = v276 - v280;
                if (v276 <= v280)
                  goto LABEL_467;
              }
              else
              {
                if (!**(_BYTE **)(v5 + 32))
                {
                  v276 = 0;
                  v277 = (unint64_t *)(a2 + 264);
                  v278 = *(_QWORD *)(a2 + 256);
                  v279 = *(_QWORD *)(a2 + 264);
                  v280 = (uint64_t)(v279 - v278) >> 4;
                  goto LABEL_467;
                }
                v276 = 1;
                v277 = (unint64_t *)(a2 + 264);
                v278 = *(_QWORD *)(a2 + 256);
                v279 = *(_QWORD *)(a2 + 264);
                v280 = (uint64_t)(v279 - v278) >> 4;
                v281 = 1 - v280;
                if (v280)
                {
LABEL_467:
                  if (v280 > v276)
                  {
                    v279 = v278 + 16 * v276;
                    *v277 = v279;
                  }
LABEL_469:
                  while (v278 != v279)
                  {
                    __p = (void *)16;
                    v398 = v278;
                    v282 = (char *)sub_2245443F0((uint64_t *)v5);
                    ++*(_QWORD *)(v5 + 112);
                    sub_224544508(v282, (uint64_t)&__p);
                    v278 += 16;
                  }
                  v283 = *(_QWORD *)(v5 + 48);
                  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v283 - 8);
                  v284 = *(_QWORD *)(v5 + 72);
                  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v284 - 8);
                  *(_QWORD *)(v5 + 48) = v283 - 8;
                  *(_QWORD *)(v5 + 72) = v284 - 8;
                  sub_224544138(v5);
                  v285 = *(unsigned __int8 **)(v5 + 32);
                  v286 = *v285;
                  if (v286 == 2)
                  {
                    v287 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v285 + 1) + 8) - **((_QWORD **)v285 + 1)) >> 4;
                    v288 = (unint64_t *)(a2 + 288);
                    v289 = *(_QWORD *)(a2 + 280);
                    v290 = *(_QWORD *)(a2 + 288);
                    v291 = (uint64_t)(v290 - v289) >> 4;
                    v292 = v287 - v291;
                    if (v287 <= v291)
                      goto LABEL_480;
                  }
                  else if (v286 == 1)
                  {
                    v287 = *(_QWORD *)(*((_QWORD *)v285 + 1) + 16);
                    v288 = (unint64_t *)(a2 + 288);
                    v289 = *(_QWORD *)(a2 + 280);
                    v290 = *(_QWORD *)(a2 + 288);
                    v291 = (uint64_t)(v290 - v289) >> 4;
                    v292 = v287 - v291;
                    if (v287 <= v291)
                      goto LABEL_480;
                  }
                  else
                  {
                    if (!**(_BYTE **)(v5 + 32))
                    {
                      v287 = 0;
                      v288 = (unint64_t *)(a2 + 288);
                      v289 = *(_QWORD *)(a2 + 280);
                      v290 = *(_QWORD *)(a2 + 288);
                      v291 = (uint64_t)(v290 - v289) >> 4;
                      goto LABEL_480;
                    }
                    v287 = 1;
                    v288 = (unint64_t *)(a2 + 288);
                    v289 = *(_QWORD *)(a2 + 280);
                    v290 = *(_QWORD *)(a2 + 288);
                    v291 = (uint64_t)(v290 - v289) >> 4;
                    v292 = 1 - v291;
                    if (v291)
                    {
LABEL_480:
                      if (v291 > v287)
                      {
                        v290 = v289 + 16 * v287;
                        *v288 = v290;
                      }
LABEL_482:
                      while (v289 != v290)
                      {
                        __p = (void *)16;
                        v398 = v289;
                        v293 = (char *)sub_2245443F0((uint64_t *)v5);
                        ++*(_QWORD *)(v5 + 112);
                        sub_224544508(v293, (uint64_t)&__p);
                        v289 += 16;
                      }
                      v294 = *(_QWORD *)(v5 + 48);
                      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v294 - 8);
                      v295 = *(_QWORD *)(v5 + 72);
                      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v295 - 8);
                      *(_QWORD *)(v5 + 48) = v294 - 8;
                      *(_QWORD *)(v5 + 72) = v295 - 8;
                      v296 = (char *)sub_2245443F0((uint64_t *)v5);
                      ++*(_QWORD *)(v5 + 112);
                      LOBYTE(__p) = 0;
                      sub_223996FF0(v296, &__p);
                      *(_BYTE *)(a2 + 304) = (_BYTE)__p;
                      if ((v252 & 0xFFFFFFFE) == 0)
                        goto LABEL_489;
                      sub_224544138(v5);
                      v297 = *(unsigned __int8 **)(v5 + 32);
                      v298 = *v297;
                      if (v298 == 2)
                      {
                        v299 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v297 + 1) + 8) - **((_QWORD **)v297 + 1)) >> 4;
                      }
                      else if (v298 == 1)
                      {
                        v299 = *(_QWORD *)(*((_QWORD *)v297 + 1) + 16);
                      }
                      else
                      {
                        if (!*v297)
                        {
                          v299 = 0;
                          v300 = (unint64_t *)(a2 + 320);
                          v301 = *(_QWORD *)(a2 + 312);
                          v302 = *(_QWORD *)(a2 + 320);
                          v303 = (uint64_t)(v302 - v301) >> 4;
                          goto LABEL_497;
                        }
                        v299 = 1;
                      }
                      v300 = (unint64_t *)(a2 + 320);
                      v301 = *(_QWORD *)(a2 + 312);
                      v302 = *(_QWORD *)(a2 + 320);
                      v303 = (uint64_t)(v302 - v301) >> 4;
                      if (v299 > v303)
                      {
                        sub_2232C68D0((char **)(a2 + 312), v299 - v303);
                        v301 = *(_QWORD *)(a2 + 312);
                        v302 = *v300;
                        goto LABEL_499;
                      }
LABEL_497:
                      if (v303 > v299)
                      {
                        v302 = v301 + 16 * v299;
                        *v300 = v302;
                      }
LABEL_499:
                      while (v301 != v302)
                      {
                        __p = (void *)16;
                        v398 = v301;
                        v304 = (char *)sub_2245443F0((uint64_t *)v5);
                        ++*(_QWORD *)(v5 + 112);
                        sub_224544508(v304, (uint64_t)&__p);
                        v301 += 16;
                      }
                      v305 = *(_QWORD *)(v5 + 48);
                      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v305 - 8);
                      v306 = *(_QWORD *)(v5 + 72);
                      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v306 - 8);
                      *(_QWORD *)(v5 + 48) = v305 - 8;
                      *(_QWORD *)(v5 + 72) = v306 - 8;
                      sub_224544138(v5);
                      v307 = *(unsigned __int8 **)(v5 + 32);
                      v308 = *v307;
                      if (v308 == 2)
                      {
                        v309 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v307 + 1) + 8) - **((_QWORD **)v307 + 1)) >> 4;
                      }
                      else if (v308 == 1)
                      {
                        v309 = *(_QWORD *)(*((_QWORD *)v307 + 1) + 16);
                      }
                      else
                      {
                        if (!**(_BYTE **)(v5 + 32))
                        {
                          v309 = 0;
                          v310 = (float **)(a2 + 344);
                          v311 = *(float **)(a2 + 336);
                          v312 = *(float **)(a2 + 344);
                          v313 = ((char *)v312 - (char *)v311) >> 6;
                          goto LABEL_510;
                        }
                        v309 = 1;
                      }
                      v310 = (float **)(a2 + 344);
                      v311 = *(float **)(a2 + 336);
                      v312 = *(float **)(a2 + 344);
                      v313 = ((char *)v312 - (char *)v311) >> 6;
                      if (v309 > v313)
                      {
                        sub_2232C69F8((char **)(a2 + 336), v309 - v313);
                        v311 = *(float **)(a2 + 336);
                        v312 = *v310;
                        goto LABEL_513;
                      }
LABEL_510:
                      if (v313 > v309)
                      {
                        v312 = &v311[16 * v309];
                        *v310 = v312;
                      }
LABEL_513:
                      while (v311 != v312)
                      {
                        v314 = sub_2245443F0((uint64_t *)v5);
                        ++*(_QWORD *)(v5 + 112);
                        sub_224545240(v314, v311);
                        v311 += 16;
                      }
                      v315 = *(_QWORD *)(v5 + 48);
                      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v315 - 8);
                      v316 = *(_QWORD *)(v5 + 72);
                      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v316 - 8);
                      *(_QWORD *)(v5 + 48) = v315 - 8;
                      *(_QWORD *)(v5 + 72) = v316 - 8;
                      sub_224544138(v5);
                      v317 = *(unsigned __int8 **)(v5 + 32);
                      v318 = *v317;
                      if (v318 == 2)
                      {
                        v319 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v317 + 1) + 8) - **((_QWORD **)v317 + 1)) >> 4;
                      }
                      else if (v318 == 1)
                      {
                        v319 = *(_QWORD *)(*((_QWORD *)v317 + 1) + 16);
                      }
                      else
                      {
                        if (!**(_BYTE **)(v5 + 32))
                        {
                          v319 = 0;
                          v320 = (char **)(a2 + 368);
                          v321 = *(char **)(a2 + 360);
                          v322 = *(char **)(a2 + 368);
                          v323 = (v322 - v321) >> 4;
                          goto LABEL_523;
                        }
                        v319 = 1;
                      }
                      v320 = (char **)(a2 + 368);
                      v321 = *(char **)(a2 + 360);
                      v322 = *(char **)(a2 + 368);
                      v323 = (v322 - v321) >> 4;
                      if (v319 > v323)
                      {
                        v324 = (char **)(a2 + 360);
                        sub_2232C68D0(v324, v319 - v323);
                        v321 = *v324;
                        v322 = *v320;
LABEL_525:
                        while (v321 != v322)
                        {
                          __p = (void *)16;
                          v398 = (unint64_t)v321;
                          v325 = (char *)sub_2245443F0((uint64_t *)v5);
                          ++*(_QWORD *)(v5 + 112);
                          sub_224544508(v325, (uint64_t)&__p);
                          v321 += 16;
                        }
                        goto LABEL_172;
                      }
LABEL_523:
                      if (v323 > v319)
                      {
                        v322 = &v321[16 * v319];
                        *v320 = v322;
                      }
                      goto LABEL_525;
                    }
                  }
                  sub_2232C68D0((char **)(a2 + 280), v292);
                  v289 = *(_QWORD *)(a2 + 280);
                  v290 = *v288;
                  goto LABEL_482;
                }
              }
              sub_2232C68D0((char **)(a2 + 256), v281);
              v278 = *(_QWORD *)(a2 + 256);
              v279 = *v277;
              goto LABEL_469;
            }
            do
            {
              if (*(char *)(v240 - 1) < 0)
                operator delete(*(void **)(v240 - 24));
              v240 -= 24;
            }
            while (v240 != v239);
LABEL_413:
            v241 = (void *)v414;
            goto LABEL_414;
          }
          ((void (*)(char *, uint64_t))off_24EC5FFB8[v16])(&v396, a2 + 16);
        }
        *(_BYTE *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 192) = -1;
        *(_OWORD *)(a2 + 24) = v402;
        *(_BYTE *)(a2 + 64) = 0;
        if (v405)
        {
          v234 = v404;
          *(_OWORD *)(a2 + 40) = v403;
          *(_QWORD *)(a2 + 56) = v234;
          v403 = 0uLL;
          v404 = 0;
          *(_BYTE *)(a2 + 64) = 1;
        }
        v235 = v407;
        v236 = v406;
        *(_BYTE *)(a2 + 96) = 0;
        *(_OWORD *)(a2 + 72) = v236;
        *(_QWORD *)(a2 + 88) = v235;
        *(_BYTE *)(a2 + 120) = 0;
        if (v410)
        {
          v237 = v409;
          *(_OWORD *)(a2 + 96) = v408;
          *(_QWORD *)(a2 + 112) = v237;
          v408 = 0uLL;
          v409 = 0;
          *(_BYTE *)(a2 + 120) = 1;
        }
        *(_BYTE *)(a2 + 128) = 0;
        *(_BYTE *)(a2 + 152) = 0;
        if (v413)
        {
          v238 = v412;
          *(_OWORD *)(a2 + 128) = v411;
          *(_QWORD *)(a2 + 144) = v238;
          v411 = 0uLL;
          v412 = 0;
          *(_BYTE *)(a2 + 152) = 1;
        }
        *(_BYTE *)(a2 + 160) = 0;
        *(_BYTE *)(a2 + 184) = 0;
        v17 = v416;
        if (v416)
        {
          *(_OWORD *)(a2 + 160) = v414;
          *(_QWORD *)(a2 + 176) = v415;
          v414 = 0uLL;
          v415 = 0;
          *(_BYTE *)(a2 + 184) = 1;
        }
        *(_DWORD *)(a2 + 192) = 0;
        goto LABEL_389;
      }
      if (v15 != 2)
        goto LABEL_658;
      sub_223B8944C(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
      v129 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v129 != -1)
      {
        if (!(_DWORD)v129)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)&v401);
          v130 = v416;
LABEL_406:
          if (!v130)
            goto LABEL_415;
          v239 = v414;
          if (!(_QWORD)v414)
            goto LABEL_415;
          v247 = *((_QWORD *)&v414 + 1);
          v241 = (void *)v414;
          if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
            goto LABEL_414;
          do
          {
            if (*(char *)(v247 - 1) < 0)
              operator delete(*(void **)(v247 - 24));
            v247 -= 24;
          }
          while (v247 != v239);
          goto LABEL_413;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v129])(&v396, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v402;
      *(_BYTE *)(a2 + 64) = 0;
      if (v405)
      {
        v242 = v404;
        *(_OWORD *)(a2 + 40) = v403;
        *(_QWORD *)(a2 + 56) = v242;
        v403 = 0uLL;
        v404 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v243 = v407;
      v244 = v406;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v244;
      *(_QWORD *)(a2 + 88) = v243;
      *(_BYTE *)(a2 + 120) = 0;
      if (v410)
      {
        v245 = v409;
        *(_OWORD *)(a2 + 96) = v408;
        *(_QWORD *)(a2 + 112) = v245;
        v408 = 0uLL;
        v409 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v413)
      {
        v246 = v412;
        *(_OWORD *)(a2 + 128) = v411;
        *(_QWORD *)(a2 + 144) = v246;
        v411 = 0uLL;
        v412 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v130 = v416;
      if (v416)
      {
        *(_OWORD *)(a2 + 160) = v414;
        *(_QWORD *)(a2 + 176) = v415;
        v414 = 0uLL;
        v415 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_406;
    }
    v124 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24EC79068, (const struct __class_type_info *)&unk_24EC60800, 0);
    if (!v124)
    {
      if (*a1 == &off_24EC77900)
        return sub_223BF48F4(a2, a1);
      sub_223BF40B4(a2, a1);
      return result;
    }
    v125 = (uint64_t)v124;
    v126 = *(_DWORD *)(a2 + 192);
    if (!v126)
      goto LABEL_575;
    if (v126 == 1)
    {
      sub_223B89234(a2 + 16, (uint64_t)&__p);
      sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
      v127 = *(unsigned int *)(a2 + 192);
      if ((_DWORD)v127 != -1)
      {
        if (!(_DWORD)v127)
        {
          sub_223BB47F0(a2 + 16, (uint64_t)&v401);
          v128 = v416;
LABEL_539:
          if (!v128)
            goto LABEL_565;
          v331 = v414;
          if (!(_QWORD)v414)
            goto LABEL_565;
          v332 = *((_QWORD *)&v414 + 1);
          v333 = (void *)v414;
          if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
          {
LABEL_564:
            *((_QWORD *)&v414 + 1) = v331;
            operator delete(v333);
LABEL_565:
            if (v413 && SHIBYTE(v412) < 0)
              operator delete((void *)v411);
            if (v410 && SHIBYTE(v409) < 0)
              operator delete((void *)v408);
            if (v405 && SHIBYTE(v404) < 0)
              operator delete((void *)v403);
            sub_2231AD66C((uint64_t)&__p);
            if (*(_DWORD *)(a2 + 192))
              sub_22316DD70();
LABEL_575:
            LODWORD(__p) = 6;
            sub_2245508F0(v125, &__p);
            v340 = __p;
            if (__p >= 6)
              v341 = 6;
            else
              v341 = __p;
            if (v341 < 3)
              sub_223BC4F50((uint64_t)&__p, v125, a2 + 16, v341);
            else
              sub_223BC5140(v125, a2 + 16, v341);
            if (v340 < 3 || *(_BYTE *)(v125 + 131))
            {
LABEL_583:
              LODWORD(__p) = 2;
              sub_2245508F0(v125, &__p);
              v342 = __p;
              __p = 0;
              sub_224550B44(v125, &__p);
              *(_QWORD *)(a2 + 200) = __p;
              __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4);
              sub_224550D98(v125, &__p);
              v343 = *(_BYTE **)(a2 + 216);
              v344 = *(_BYTE **)(a2 + 208);
              v345 = (v343 - v344) >> 4;
              if ((unint64_t)__p <= v345)
              {
                if ((unint64_t)__p < v345)
                {
                  v343 = &v344[16 * (_QWORD)__p];
                  *(_QWORD *)(a2 + 216) = v343;
                }
              }
              else
              {
                sub_2232C68D0((char **)(a2 + 208), (unint64_t)__p - v345);
                v344 = *(_BYTE **)(a2 + 208);
                v343 = *(_BYTE **)(a2 + 216);
              }
              if (v343 != v344)
              {
                v348 = v343;
                do
                {
                  sub_22454FFAC(v125, v344);
                  v349 = v344 + 1;
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349++);
                  sub_22454FFAC(v125, v349);
                  v344 = v349 + 1;
                }
                while (v344 != v348);
              }
              __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 6);
              sub_224550D98(v125, &__p);
              v350 = *(char **)(a2 + 240);
              v351 = *(char **)(a2 + 232);
              v352 = (v350 - v351) >> 6;
              if ((unint64_t)__p <= v352)
              {
                if ((unint64_t)__p < v352)
                {
                  v350 = &v351[64 * (_QWORD)__p];
                  *(_QWORD *)(a2 + 240) = v350;
                }
              }
              else
              {
                sub_2232C69F8((char **)(a2 + 232), (unint64_t)__p - v352);
                v351 = *(char **)(a2 + 232);
                v350 = *(char **)(a2 + 240);
              }
              if (v350 != v351)
              {
                v353 = v350;
                do
                {
                  sub_224551268(v125, v351);
                  v354 = v351 + 4;
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354++);
                  sub_224551268(v125, v354);
                  v351 = (char *)(v354 + 1);
                }
                while (v351 != v353);
              }
              __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 4);
              sub_224550D98(v125, &__p);
              v355 = *(_BYTE **)(a2 + 264);
              v356 = *(_BYTE **)(a2 + 256);
              v357 = (v355 - v356) >> 4;
              if ((unint64_t)__p <= v357)
              {
                if ((unint64_t)__p < v357)
                {
                  v355 = &v356[16 * (_QWORD)__p];
                  *(_QWORD *)(a2 + 264) = v355;
                }
              }
              else
              {
                sub_2232C68D0((char **)(a2 + 256), (unint64_t)__p - v357);
                v356 = *(_BYTE **)(a2 + 256);
                v355 = *(_BYTE **)(a2 + 264);
              }
              if (v355 != v356)
              {
                v358 = v355;
                do
                {
                  sub_22454FFAC(v125, v356);
                  v359 = v356 + 1;
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359++);
                  sub_22454FFAC(v125, v359);
                  v356 = v359 + 1;
                }
                while (v356 != v358);
              }
              __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4);
              sub_224550D98(v125, &__p);
              v360 = *(_BYTE **)(a2 + 288);
              v361 = *(_BYTE **)(a2 + 280);
              v362 = (v360 - v361) >> 4;
              if ((unint64_t)__p <= v362)
              {
                if ((unint64_t)__p < v362)
                {
                  v360 = &v361[16 * (_QWORD)__p];
                  *(_QWORD *)(a2 + 288) = v360;
                }
              }
              else
              {
                sub_2232C68D0((char **)(a2 + 280), (unint64_t)__p - v362);
                v361 = *(_BYTE **)(a2 + 280);
                v360 = *(_BYTE **)(a2 + 288);
              }
              if (v360 != v361)
              {
                v363 = v360;
                do
                {
                  sub_22454FFAC(v125, v361);
                  v364 = v361 + 1;
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364++);
                  sub_22454FFAC(v125, v364);
                  v361 = v364 + 1;
                }
                while (v361 != v363);
              }
              sub_224551710(v125, (_BYTE *)(a2 + 304));
              if (v342 >= 2)
              {
                __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 4);
                sub_224550D98(v125, &__p);
                v365 = *(_BYTE **)(a2 + 320);
                v366 = *(_BYTE **)(a2 + 312);
                v367 = (v365 - v366) >> 4;
                if ((unint64_t)__p <= v367)
                {
                  if ((unint64_t)__p < v367)
                  {
                    v365 = &v366[16 * (_QWORD)__p];
                    *(_QWORD *)(a2 + 320) = v365;
                  }
                }
                else
                {
                  sub_2232C68D0((char **)(a2 + 312), (unint64_t)__p - v367);
                  v366 = *(_BYTE **)(a2 + 312);
                  v365 = *(_BYTE **)(a2 + 320);
                }
                if (v365 != v366)
                {
                  v368 = v365;
                  do
                  {
                    sub_22454FFAC(v125, v366);
                    v369 = v366 + 1;
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369++);
                    sub_22454FFAC(v125, v369);
                    v366 = v369 + 1;
                  }
                  while (v366 != v368);
                }
                __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 6);
                sub_224550D98(v125, &__p);
                v370 = *(char **)(a2 + 344);
                v371 = *(char **)(a2 + 336);
                v372 = (v370 - v371) >> 6;
                if ((unint64_t)__p <= v372)
                {
                  if ((unint64_t)__p < v372)
                  {
                    v370 = &v371[64 * (_QWORD)__p];
                    *(_QWORD *)(a2 + 344) = v370;
                  }
                }
                else
                {
                  sub_2232C69F8((char **)(a2 + 336), (unint64_t)__p - v372);
                  v371 = *(char **)(a2 + 336);
                  v370 = *(char **)(a2 + 344);
                }
                if (v370 != v371)
                {
                  v373 = v370;
                  do
                  {
                    sub_224551268(v125, v371);
                    v374 = v371 + 4;
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374++);
                    sub_224551268(v125, v374);
                    v371 = (char *)(v374 + 1);
                  }
                  while (v371 != v373);
                }
                __p = (void *)((uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 4);
                sub_224550D98(v125, &__p);
                v375 = *(_BYTE **)(a2 + 368);
                v376 = *(_BYTE **)(a2 + 360);
                v377 = (v375 - v376) >> 4;
                if ((unint64_t)__p <= v377)
                {
                  if ((unint64_t)__p < v377)
                  {
                    v375 = &v376[16 * (_QWORD)__p];
                    *(_QWORD *)(a2 + 368) = v375;
                  }
                }
                else
                {
                  sub_2232C68D0((char **)(a2 + 360), (unint64_t)__p - v377);
                  v376 = *(_BYTE **)(a2 + 360);
                  v375 = *(_BYTE **)(a2 + 368);
                }
                if (v375 != v376)
                {
                  v378 = v375;
                  do
                  {
                    sub_22454FFAC(v125, v376);
                    sub_22454FFAC(v125, v376 + 1);
                    sub_22454FFAC(v125, v376 + 2);
                    sub_22454FFAC(v125, v376 + 3);
                    sub_22454FFAC(v125, v376 + 4);
                    sub_22454FFAC(v125, v376 + 5);
                    sub_22454FFAC(v125, v376 + 6);
                    sub_22454FFAC(v125, v376 + 7);
                    sub_22454FFAC(v125, v376 + 8);
                    sub_22454FFAC(v125, v376 + 9);
                    sub_22454FFAC(v125, v376 + 10);
                    sub_22454FFAC(v125, v376 + 11);
                    sub_22454FFAC(v125, v376 + 12);
                    sub_22454FFAC(v125, v376 + 13);
                    sub_22454FFAC(v125, v376 + 14);
                    v379 = v376 + 15;
                    sub_22454FFAC(v125, v376 + 15);
                    v376 += 16;
                  }
                  while (v379 + 1 != v378);
                }
              }
              return result;
            }
            while (1)
            {
              if ((*(_BYTE *)(*(_QWORD *)(v125 + 16) + *(_QWORD *)(**(_QWORD **)(v125 + 16) - 24) + 32) & 2) != 0)
                goto LABEL_583;
              sub_2245523C0(v125, (uint64_t)&__p);
              if (v399 < 0)
              {
                if (v398 != 1 || *(unsigned __int8 *)(v125 + 72) != *(unsigned __int8 *)__p)
                {
LABEL_597:
                  v347 = 1;
                  goto LABEL_598;
                }
              }
              else if (v399 != 1 || *(unsigned __int8 *)(v125 + 72) != __p)
              {
                goto LABEL_597;
              }
              v347 = 0;
LABEL_598:
              if (v399 < 0)
                operator delete(__p);
              if (*(_BYTE *)(v125 + 131))
                v346 = 0;
              else
                v346 = v347;
              if ((v346 & 1) == 0)
                goto LABEL_583;
            }
          }
          do
          {
            if (*(char *)(v332 - 1) < 0)
              operator delete(*(void **)(v332 - 24));
            v332 -= 24;
          }
          while (v332 != v331);
LABEL_563:
          v333 = (void *)v414;
          goto LABEL_564;
        }
        ((void (*)(char *, uint64_t))off_24EC5FFB8[v127])(&v396, a2 + 16);
      }
      *(_BYTE *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 192) = -1;
      *(_OWORD *)(a2 + 24) = v402;
      *(_BYTE *)(a2 + 64) = 0;
      if (v405)
      {
        v326 = v404;
        *(_OWORD *)(a2 + 40) = v403;
        *(_QWORD *)(a2 + 56) = v326;
        v403 = 0uLL;
        v404 = 0;
        *(_BYTE *)(a2 + 64) = 1;
      }
      v327 = v407;
      v328 = v406;
      *(_BYTE *)(a2 + 96) = 0;
      *(_OWORD *)(a2 + 72) = v328;
      *(_QWORD *)(a2 + 88) = v327;
      *(_BYTE *)(a2 + 120) = 0;
      if (v410)
      {
        v329 = v409;
        *(_OWORD *)(a2 + 96) = v408;
        *(_QWORD *)(a2 + 112) = v329;
        v408 = 0uLL;
        v409 = 0;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (v413)
      {
        v330 = v412;
        *(_OWORD *)(a2 + 128) = v411;
        *(_QWORD *)(a2 + 144) = v330;
        v411 = 0uLL;
        v412 = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      *(_BYTE *)(a2 + 160) = 0;
      *(_BYTE *)(a2 + 184) = 0;
      v128 = v416;
      if (v416)
      {
        *(_OWORD *)(a2 + 160) = v414;
        *(_QWORD *)(a2 + 176) = v415;
        v414 = 0uLL;
        v415 = 0;
        *(_BYTE *)(a2 + 184) = 1;
      }
      *(_DWORD *)(a2 + 192) = 0;
      goto LABEL_539;
    }
    if (v126 != 2)
      goto LABEL_658;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
    v232 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v232 != -1)
    {
      if (!(_DWORD)v232)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)&v401);
        v233 = v416;
LABEL_556:
        if (!v233)
          goto LABEL_565;
        v331 = v414;
        if (!(_QWORD)v414)
          goto LABEL_565;
        v339 = *((_QWORD *)&v414 + 1);
        v333 = (void *)v414;
        if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
          goto LABEL_564;
        do
        {
          if (*(char *)(v339 - 1) < 0)
            operator delete(*(void **)(v339 - 24));
          v339 -= 24;
        }
        while (v339 != v331);
        goto LABEL_563;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v232])(&v396, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v402;
    *(_BYTE *)(a2 + 64) = 0;
    if (v405)
    {
      v334 = v404;
      *(_OWORD *)(a2 + 40) = v403;
      *(_QWORD *)(a2 + 56) = v334;
      v403 = 0uLL;
      v404 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v335 = v407;
    v336 = v406;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v336;
    *(_QWORD *)(a2 + 88) = v335;
    *(_BYTE *)(a2 + 120) = 0;
    if (v410)
    {
      v337 = v409;
      *(_OWORD *)(a2 + 96) = v408;
      *(_QWORD *)(a2 + 112) = v337;
      v408 = 0uLL;
      v409 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v413)
    {
      v338 = v412;
      *(_OWORD *)(a2 + 128) = v411;
      *(_QWORD *)(a2 + 144) = v338;
      v411 = 0uLL;
      v412 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v233 = v416;
    if (v416)
    {
      *(_OWORD *)(a2 + 160) = v414;
      *(_QWORD *)(a2 + 176) = v415;
      v414 = 0uLL;
      v415 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_556;
  }
  v9 = v8;
  v10 = *(_DWORD *)(a2 + 192);
  if (!v10)
    goto LABEL_229;
  if (v10 != 1)
  {
    if (v10 != 2)
      goto LABEL_658;
    sub_223B8944C(a2 + 16, (uint64_t)&__p);
    sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
    v18 = *(unsigned int *)(a2 + 192);
    if ((_DWORD)v18 != -1)
    {
      if (!(_DWORD)v18)
      {
        sub_223BB47F0(a2 + 16, (uint64_t)&v401);
        v19 = v416;
LABEL_210:
        if (!v19)
          goto LABEL_219;
        v136 = v414;
        if (!(_QWORD)v414)
          goto LABEL_219;
        v144 = *((_QWORD *)&v414 + 1);
        v138 = (void *)v414;
        if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
          goto LABEL_218;
        do
        {
          if (*(char *)(v144 - 1) < 0)
            operator delete(*(void **)(v144 - 24));
          v144 -= 24;
        }
        while (v144 != v136);
        goto LABEL_217;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v18])(&v396, a2 + 16);
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 192) = -1;
    *(_OWORD *)(a2 + 24) = v402;
    *(_BYTE *)(a2 + 64) = 0;
    if (v405)
    {
      v139 = v404;
      *(_OWORD *)(a2 + 40) = v403;
      *(_QWORD *)(a2 + 56) = v139;
      v403 = 0uLL;
      v404 = 0;
      *(_BYTE *)(a2 + 64) = 1;
    }
    v140 = v407;
    v141 = v406;
    *(_BYTE *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 72) = v141;
    *(_QWORD *)(a2 + 88) = v140;
    *(_BYTE *)(a2 + 120) = 0;
    if (v410)
    {
      v142 = v409;
      *(_OWORD *)(a2 + 96) = v408;
      *(_QWORD *)(a2 + 112) = v142;
      v408 = 0uLL;
      v409 = 0;
      *(_BYTE *)(a2 + 120) = 1;
    }
    *(_BYTE *)(a2 + 128) = 0;
    *(_BYTE *)(a2 + 152) = 0;
    if (v413)
    {
      v143 = v412;
      *(_OWORD *)(a2 + 128) = v411;
      *(_QWORD *)(a2 + 144) = v143;
      v411 = 0uLL;
      v412 = 0;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 184) = 0;
    v19 = v416;
    if (v416)
    {
      *(_OWORD *)(a2 + 160) = v414;
      *(_QWORD *)(a2 + 176) = v415;
      v414 = 0uLL;
      v415 = 0;
      *(_BYTE *)(a2 + 184) = 1;
    }
    *(_DWORD *)(a2 + 192) = 0;
    goto LABEL_210;
  }
  sub_223B89234(a2 + 16, (uint64_t)&__p);
  sub_223B87C9C((uint64_t)&v401, (uint64_t *)&__p);
  v11 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v11 != -1)
  {
    if (!(_DWORD)v11)
    {
      sub_223BB47F0(a2 + 16, (uint64_t)&v401);
      v12 = v416;
      goto LABEL_193;
    }
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v11])(&v396, a2 + 16);
  }
  *(_BYTE *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 192) = -1;
  *(_OWORD *)(a2 + 24) = v402;
  *(_BYTE *)(a2 + 64) = 0;
  if (v405)
  {
    v131 = v404;
    *(_OWORD *)(a2 + 40) = v403;
    *(_QWORD *)(a2 + 56) = v131;
    v403 = 0uLL;
    v404 = 0;
    *(_BYTE *)(a2 + 64) = 1;
  }
  v132 = v407;
  v133 = v406;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 72) = v133;
  *(_QWORD *)(a2 + 88) = v132;
  *(_BYTE *)(a2 + 120) = 0;
  if (v410)
  {
    v134 = v409;
    *(_OWORD *)(a2 + 96) = v408;
    *(_QWORD *)(a2 + 112) = v134;
    v408 = 0uLL;
    v409 = 0;
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  if (v413)
  {
    v135 = v412;
    *(_OWORD *)(a2 + 128) = v411;
    *(_QWORD *)(a2 + 144) = v135;
    v411 = 0uLL;
    v412 = 0;
    *(_BYTE *)(a2 + 152) = 1;
  }
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  v12 = v416;
  if (v416)
  {
    *(_OWORD *)(a2 + 160) = v414;
    *(_QWORD *)(a2 + 176) = v415;
    v414 = 0uLL;
    v415 = 0;
    *(_BYTE *)(a2 + 184) = 1;
  }
  *(_DWORD *)(a2 + 192) = 0;
LABEL_193:
  if (!v12)
    goto LABEL_219;
  v136 = v414;
  if (!(_QWORD)v414)
    goto LABEL_219;
  v137 = *((_QWORD *)&v414 + 1);
  v138 = (void *)v414;
  if (*((_QWORD *)&v414 + 1) != (_QWORD)v414)
  {
    do
    {
      if (*(char *)(v137 - 1) < 0)
        operator delete(*(void **)(v137 - 24));
      v137 -= 24;
    }
    while (v137 != v136);
LABEL_217:
    v138 = (void *)v414;
  }
LABEL_218:
  *((_QWORD *)&v414 + 1) = v136;
  operator delete(v138);
LABEL_219:
  if (v413 && SHIBYTE(v412) < 0)
    operator delete((void *)v411);
  if (v410 && SHIBYTE(v409) < 0)
    operator delete((void *)v408);
  if (v405 && SHIBYTE(v404) < 0)
    operator delete((void *)v403);
  sub_2231AD66C((uint64_t)&__p);
  if (*(_DWORD *)(a2 + 192))
    sub_22316DD70();
LABEL_229:
  sub_223BBD12C((uint64_t)&__p, v9, a2 + 16);
  LODWORD(__p) = 2;
  sub_224554038(v9[6], &__p);
  v145 = __p;
  __p = 0;
  sub_2245542F8(v9[6], &__p);
  *(_QWORD *)(a2 + 200) = __p;
  v401 = (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4;
  sub_2245543E8(v9[6], &v401);
  v146 = *(_QWORD *)(a2 + 216);
  v147 = *(_QWORD *)(a2 + 208);
  v148 = (v146 - v147) >> 4;
  if (v401 <= v148)
  {
    if (v401 < v148)
    {
      v146 = v147 + 16 * v401;
      *(_QWORD *)(a2 + 216) = v146;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 208), v401 - v148);
    v147 = *(_QWORD *)(a2 + 208);
    v146 = *(_QWORD *)(a2 + 216);
  }
  if (v146 != v147)
  {
    v149 = v146;
    do
    {
      v150 = 0;
      v151 = v9[6];
      do
      {
        sub_2245564B0(v151, (uint64_t)&__p);
        if ((_DWORD)__p != 2 || v398 >= 0x100)
        {
          v380 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v380->__vftable = 0;
          v381 = std::bad_cast::bad_cast(v380);
          v381->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v381, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v147 + v150) = v398;
        v152 = v400;
        v400 = 0;
        if (v152)
        {
          for (i = (char *)v152[4]; i != (char *)v152[6]; i -= 16)
          {
            v155 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v154 = *((_QWORD *)i - 1);
            v155(v154);
          }
          free(i);
          v156 = (_QWORD *)v152[3];
          if (v156)
          {
            do
            {
              v157 = (_QWORD *)*v156;
              free(v156);
              v156 = v157;
            }
            while (v157);
          }
          free(v152);
        }
        ++v150;
      }
      while (v150 != 16);
      v147 += 16;
    }
    while (v147 != v149);
  }
  v401 = (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 6;
  sub_2245543E8(v9[6], &v401);
  v158 = *(_QWORD *)(a2 + 240);
  v159 = *(_QWORD *)(a2 + 232);
  v160 = (v158 - v159) >> 6;
  if (v401 <= v160)
  {
    if (v401 < v160)
    {
      v158 = v159 + (v401 << 6);
      *(_QWORD *)(a2 + 240) = v158;
    }
  }
  else
  {
    sub_2232C69F8((char **)(a2 + 232), v401 - v160);
    v159 = *(_QWORD *)(a2 + 232);
    v158 = *(_QWORD *)(a2 + 240);
  }
  if (v158 != v159)
  {
    v161 = v158;
    do
    {
      v162 = 0;
      v163 = v9[6];
      do
      {
        sub_2245564B0(v163, (uint64_t)&__p);
        if ((_DWORD)__p == 2)
        {
          *(float *)(v159 + 4 * v162) = (float)v398;
          v165 = v400;
          v400 = 0;
          if (!v165)
            goto LABEL_257;
LABEL_266:
          for (j = (char *)v165[4]; j != (char *)v165[6]; j -= 16)
          {
            v168 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v167 = *((_QWORD *)j - 1);
            v168(v167);
          }
          free(j);
          v169 = (_QWORD *)v165[3];
          if (v169)
          {
            do
            {
              v170 = (_QWORD *)*v169;
              free(v169);
              v169 = v170;
            }
            while (v170);
          }
          free(v165);
          goto LABEL_257;
        }
        if ((_DWORD)__p == 3)
        {
          *(float *)(v159 + 4 * v162) = (float)(uint64_t)v398;
          v165 = v400;
          v400 = 0;
          if (!v165)
            goto LABEL_257;
          goto LABEL_266;
        }
        if ((_DWORD)__p != 4)
        {
          v390 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v390->__vftable = 0;
          v391 = std::bad_cast::bad_cast(v390);
          v391->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v391, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        v164 = *(double *)&v398;
        *(float *)(v159 + 4 * v162) = v164;
        v165 = v400;
        v400 = 0;
        if (v165)
          goto LABEL_266;
LABEL_257:
        ++v162;
      }
      while (v162 != 16);
      v159 += 64;
    }
    while (v159 != v161);
  }
  v401 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 4;
  sub_2245543E8(v9[6], &v401);
  v171 = *(_QWORD *)(a2 + 264);
  v172 = *(_QWORD *)(a2 + 256);
  v173 = (v171 - v172) >> 4;
  if (v401 <= v173)
  {
    if (v401 < v173)
    {
      v171 = v172 + 16 * v401;
      *(_QWORD *)(a2 + 264) = v171;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 256), v401 - v173);
    v172 = *(_QWORD *)(a2 + 256);
    v171 = *(_QWORD *)(a2 + 264);
  }
  if (v171 != v172)
  {
    v174 = v171;
    do
    {
      v175 = 0;
      v176 = v9[6];
      do
      {
        sub_2245564B0(v176, (uint64_t)&__p);
        if ((_DWORD)__p != 2 || v398 >= 0x100)
        {
          v382 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v382->__vftable = 0;
          v383 = std::bad_cast::bad_cast(v382);
          v383->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v383, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v172 + v175) = v398;
        v177 = v400;
        v400 = 0;
        if (v177)
        {
          for (k = (char *)v177[4]; k != (char *)v177[6]; k -= 16)
          {
            v180 = (void (*)(uint64_t))*((_QWORD *)k - 2);
            v179 = *((_QWORD *)k - 1);
            v180(v179);
          }
          free(k);
          v181 = (_QWORD *)v177[3];
          if (v181)
          {
            do
            {
              v182 = (_QWORD *)*v181;
              free(v181);
              v181 = v182;
            }
            while (v182);
          }
          free(v177);
        }
        ++v175;
      }
      while (v175 != 16);
      v172 += 16;
    }
    while (v172 != v174);
  }
  v401 = (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4;
  sub_2245543E8(v9[6], &v401);
  v183 = *(_QWORD *)(a2 + 288);
  v184 = *(_QWORD *)(a2 + 280);
  v185 = (v183 - v184) >> 4;
  if (v401 <= v185)
  {
    if (v401 < v185)
    {
      v183 = v184 + 16 * v401;
      *(_QWORD *)(a2 + 288) = v183;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a2 + 280), v401 - v185);
    v184 = *(_QWORD *)(a2 + 280);
    v183 = *(_QWORD *)(a2 + 288);
  }
  if (v183 != v184)
  {
    v186 = v183;
    do
    {
      v187 = 0;
      v188 = v9[6];
      do
      {
        sub_2245564B0(v188, (uint64_t)&__p);
        if ((_DWORD)__p != 2 || v398 >= 0x100)
        {
          v384 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v384->__vftable = 0;
          v385 = std::bad_cast::bad_cast(v384);
          v385->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v385, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        *(_BYTE *)(v184 + v187) = v398;
        v189 = v400;
        v400 = 0;
        if (v189)
        {
          for (m = (char *)v189[4]; m != (char *)v189[6]; m -= 16)
          {
            v192 = (void (*)(uint64_t))*((_QWORD *)m - 2);
            v191 = *((_QWORD *)m - 1);
            v192(v191);
          }
          free(m);
          v193 = (_QWORD *)v189[3];
          if (v193)
          {
            do
            {
              v194 = (_QWORD *)*v193;
              free(v193);
              v193 = v194;
            }
            while (v194);
          }
          free(v189);
        }
        ++v187;
      }
      while (v187 != 16);
      v184 += 16;
    }
    while (v184 != v186);
  }
  sub_224554738(v9[6], (_BYTE *)(a2 + 304));
  if (v145 >= 2)
  {
    v401 = (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 4;
    sub_2245543E8(v9[6], &v401);
    v195 = *(_QWORD *)(a2 + 320);
    v196 = *(_QWORD *)(a2 + 312);
    v197 = (v195 - v196) >> 4;
    if (v401 <= v197)
    {
      if (v401 < v197)
      {
        v195 = v196 + 16 * v401;
        *(_QWORD *)(a2 + 320) = v195;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 312), v401 - v197);
      v196 = *(_QWORD *)(a2 + 312);
      v195 = *(_QWORD *)(a2 + 320);
    }
    if (v195 != v196)
    {
      v198 = v195;
      do
      {
        v199 = 0;
        v200 = v9[6];
        do
        {
          sub_2245564B0(v200, (uint64_t)&__p);
          if ((_DWORD)__p != 2 || v398 >= 0x100)
          {
            v386 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v386->__vftable = 0;
            v387 = std::bad_cast::bad_cast(v386);
            v387->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v387, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)(v196 + v199) = v398;
          v201 = v400;
          v400 = 0;
          if (v201)
          {
            for (n = (char *)v201[4]; n != (char *)v201[6]; n -= 16)
            {
              v204 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v203 = *((_QWORD *)n - 1);
              v204(v203);
            }
            free(n);
            v205 = (_QWORD *)v201[3];
            if (v205)
            {
              do
              {
                v206 = (_QWORD *)*v205;
                free(v205);
                v205 = v206;
              }
              while (v206);
            }
            free(v201);
          }
          ++v199;
        }
        while (v199 != 16);
        v196 += 16;
      }
      while (v196 != v198);
    }
    v401 = (uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 6;
    sub_2245543E8(v9[6], &v401);
    v207 = *(_QWORD *)(a2 + 344);
    v208 = *(_QWORD *)(a2 + 336);
    v209 = (v207 - v208) >> 6;
    if (v401 <= v209)
    {
      if (v401 < v209)
      {
        v207 = v208 + (v401 << 6);
        *(_QWORD *)(a2 + 344) = v207;
      }
    }
    else
    {
      sub_2232C69F8((char **)(a2 + 336), v401 - v209);
      v208 = *(_QWORD *)(a2 + 336);
      v207 = *(_QWORD *)(a2 + 344);
    }
    if (v207 != v208)
    {
      v210 = v207;
      do
      {
        v211 = 0;
        v212 = v9[6];
        do
        {
          sub_2245564B0(v212, (uint64_t)&__p);
          if ((_DWORD)__p == 2)
          {
            *(float *)(v208 + 4 * v211) = (float)v398;
            v214 = v400;
            v400 = 0;
            if (!v214)
              goto LABEL_339;
LABEL_348:
            for (ii = (char *)v214[4]; ii != (char *)v214[6]; ii -= 16)
            {
              v217 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
              v216 = *((_QWORD *)ii - 1);
              v217(v216);
            }
            free(ii);
            v218 = (_QWORD *)v214[3];
            if (v218)
            {
              do
              {
                v219 = (_QWORD *)*v218;
                free(v218);
                v218 = v219;
              }
              while (v219);
            }
            free(v214);
            goto LABEL_339;
          }
          if ((_DWORD)__p == 3)
          {
            *(float *)(v208 + 4 * v211) = (float)(uint64_t)v398;
            v214 = v400;
            v400 = 0;
            if (!v214)
              goto LABEL_339;
            goto LABEL_348;
          }
          if ((_DWORD)__p != 4)
          {
            v392 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v392->__vftable = 0;
            v393 = std::bad_cast::bad_cast(v392);
            v393->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v393, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          v213 = *(double *)&v398;
          *(float *)(v208 + 4 * v211) = v213;
          v214 = v400;
          v400 = 0;
          if (v214)
            goto LABEL_348;
LABEL_339:
          ++v211;
        }
        while (v211 != 16);
        v208 += 64;
      }
      while (v208 != v210);
    }
    v401 = (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 4;
    sub_2245543E8(v9[6], &v401);
    v220 = *(_QWORD *)(a2 + 368);
    v221 = *(_QWORD *)(a2 + 360);
    v222 = (v220 - v221) >> 4;
    if (v401 <= v222)
    {
      if (v401 < v222)
      {
        v220 = v221 + 16 * v401;
        *(_QWORD *)(a2 + 368) = v220;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a2 + 360), v401 - v222);
      v221 = *(_QWORD *)(a2 + 360);
      v220 = *(_QWORD *)(a2 + 368);
    }
    if (v220 != v221)
    {
      v223 = v220;
      do
      {
        v224 = 0;
        v225 = v9[6];
        do
        {
          sub_2245564B0(v225, (uint64_t)&__p);
          if ((_DWORD)__p != 2 || v398 >= 0x100)
          {
            v388 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v388->__vftable = 0;
            v389 = std::bad_cast::bad_cast(v388);
            v389->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v389, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)(v221 + v224) = v398;
          v226 = v400;
          v400 = 0;
          if (v226)
          {
            for (jj = (char *)v226[4]; jj != (char *)v226[6]; jj -= 16)
            {
              v229 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
              v228 = *((_QWORD *)jj - 1);
              v229(v228);
            }
            free(jj);
            v230 = (_QWORD *)v226[3];
            if (v230)
            {
              do
              {
                v231 = (_QWORD *)*v230;
                free(v230);
                v230 = v231;
              }
              while (v231);
            }
            free(v226);
          }
          ++v224;
        }
        while (v224 != 16);
        v221 += 16;
      }
      while (v221 != v223);
    }
  }
  return result;
}

void sub_223BF3F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

uint64_t sub_223BF40B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42[27];
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v42);
    sub_223B87C9C((uint64_t)&v43, v42);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)&v43);
        if (!v58)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v41, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v44;
    *(_BYTE *)(a1 + 64) = 0;
    if (v47)
    {
      *(_OWORD *)(a1 + 40) = v45;
      *(_QWORD *)(a1 + 56) = v46;
      v46 = 0;
      v45 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v48;
    *(_QWORD *)(a1 + 88) = v49;
    *(_BYTE *)(a1 + 120) = 0;
    if (v52)
    {
      *(_OWORD *)(a1 + 96) = v50;
      *(_QWORD *)(a1 + 112) = v51;
      v51 = 0;
      v50 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v55)
    {
      *(_OWORD *)(a1 + 128) = v53;
      *(_QWORD *)(a1 + 144) = v54;
      v54 = 0;
      v53 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v58;
    if (v58)
    {
      *(_OWORD *)(a1 + 160) = v56;
      *(_QWORD *)(a1 + 176) = v57;
      v57 = 0;
      v56 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v56;
    if (!(_QWORD)v56)
      goto LABEL_46;
    v10 = *((_QWORD *)&v56 + 1);
    v11 = (void *)v56;
    if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v56;
LABEL_45:
    *((_QWORD *)&v56 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v42);
  sub_223B87C9C((uint64_t)&v43, v42);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v41, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v44;
    *(_BYTE *)(a1 + 64) = 0;
    if (v47)
    {
      *(_OWORD *)(a1 + 40) = v45;
      *(_QWORD *)(a1 + 56) = v46;
      v46 = 0;
      v45 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v48;
    *(_QWORD *)(a1 + 88) = v49;
    *(_BYTE *)(a1 + 120) = 0;
    if (v52)
    {
      *(_OWORD *)(a1 + 96) = v50;
      *(_QWORD *)(a1 + 112) = v51;
      v51 = 0;
      v50 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v55)
    {
      *(_OWORD *)(a1 + 128) = v53;
      *(_QWORD *)(a1 + 144) = v54;
      v54 = 0;
      v53 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v58;
    if (v58)
    {
      *(_OWORD *)(a1 + 160) = v56;
      *(_QWORD *)(a1 + 176) = v57;
      v57 = 0;
      v56 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)&v43);
  if (v58)
  {
LABEL_38:
    v9 = v56;
    if (!(_QWORD)v56)
      goto LABEL_46;
    v13 = *((_QWORD *)&v56 + 1);
    v11 = (void *)v56;
    if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v55 && SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (v52 && SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  sub_2231AD66C((uint64_t)v42);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  v14 = *a2;
  v42[0] = a2[1];
  v15 = v42[0];
  v43 = 6;
  (*(void (**)(_QWORD *, unsigned int *))(v14 + 104))(a2, &v43);
  if (v15 < 1)
  {
    if (v43 < 3)
      sub_223BD7864((uint64_t)&v43, (uint64_t)a2, v4, v43);
    else
      sub_223BD7AD8((uint64_t)a2, v4, v43);
  }
  else
  {
    sub_223BD7174((int *)v42, (uint64_t)a2, v4, v43);
  }
  LODWORD(v42[0]) = 2;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 104))(a2, v42);
  v16 = v42[0];
  v42[0] = 0;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 72))(a2, v42);
  v17 = *(_QWORD *)(a1 + 216);
  v18 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v42[0];
  v42[0] = (v17 - v18) >> 4;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
  v19 = *(_QWORD *)(a1 + 216);
  v20 = *(_QWORD *)(a1 + 208);
  v21 = (v19 - v20) >> 4;
  if (v42[0] <= v21)
  {
    if (v42[0] < v21)
    {
      v19 = v20 + 16 * v42[0];
      *(_QWORD *)(a1 + 216) = v19;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a1 + 208), v42[0] - v21);
    v20 = *(_QWORD *)(a1 + 208);
    v19 = *(_QWORD *)(a1 + 216);
  }
  sub_223BB26EC((uint64_t)a2, (v19 - v20) >> 4, v20);
  v42[0] = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 6;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
  v22 = *(_QWORD *)(a1 + 240);
  v23 = *(_QWORD *)(a1 + 232);
  v24 = (v22 - v23) >> 6;
  if (v42[0] <= v24)
  {
    if (v42[0] < v24)
    {
      v22 = v23 + (v42[0] << 6);
      *(_QWORD *)(a1 + 240) = v22;
    }
  }
  else
  {
    sub_2232C69F8((char **)(a1 + 232), v42[0] - v24);
    v23 = *(_QWORD *)(a1 + 232);
    v22 = *(_QWORD *)(a1 + 240);
  }
  sub_223BB2868((uint64_t)a2, (v22 - v23) >> 6, v23);
  v42[0] = (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 4;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
  v25 = *(_QWORD *)(a1 + 264);
  v26 = *(_QWORD *)(a1 + 256);
  v27 = (v25 - v26) >> 4;
  if (v42[0] <= v27)
  {
    if (v42[0] < v27)
    {
      v25 = v26 + 16 * v42[0];
      *(_QWORD *)(a1 + 264) = v25;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a1 + 256), v42[0] - v27);
    v26 = *(_QWORD *)(a1 + 256);
    v25 = *(_QWORD *)(a1 + 264);
  }
  sub_223BB26EC((uint64_t)a2, (v25 - v26) >> 4, v26);
  v42[0] = (uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 4;
  (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
  v28 = *(_QWORD *)(a1 + 288);
  v29 = *(_QWORD *)(a1 + 280);
  v30 = (v28 - v29) >> 4;
  if (v42[0] <= v30)
  {
    if (v42[0] < v30)
    {
      v28 = v29 + 16 * v42[0];
      *(_QWORD *)(a1 + 288) = v28;
    }
  }
  else
  {
    sub_2232C68D0((char **)(a1 + 280), v42[0] - v30);
    v29 = *(_QWORD *)(a1 + 280);
    v28 = *(_QWORD *)(a1 + 288);
  }
  sub_223BB26EC((uint64_t)a2, (v28 - v29) >> 4, v29);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 32))(a2, a1 + 304);
  if (v16 >= 2)
  {
    v42[0] = (uint64_t)(*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 4;
    (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
    v32 = *(_QWORD *)(a1 + 320);
    v33 = *(_QWORD *)(a1 + 312);
    v34 = (v32 - v33) >> 4;
    if (v42[0] <= v34)
    {
      if (v42[0] < v34)
      {
        v32 = v33 + 16 * v42[0];
        *(_QWORD *)(a1 + 320) = v32;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a1 + 312), v42[0] - v34);
      v33 = *(_QWORD *)(a1 + 312);
      v32 = *(_QWORD *)(a1 + 320);
    }
    sub_223BB26EC((uint64_t)a2, (v32 - v33) >> 4, v33);
    v42[0] = (uint64_t)(*(_QWORD *)(a1 + 344) - *(_QWORD *)(a1 + 336)) >> 6;
    (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
    v35 = *(_QWORD *)(a1 + 344);
    v36 = *(_QWORD *)(a1 + 336);
    v37 = (v35 - v36) >> 6;
    if (v42[0] <= v37)
    {
      if (v42[0] < v37)
      {
        v35 = v36 + (v42[0] << 6);
        *(_QWORD *)(a1 + 344) = v35;
      }
    }
    else
    {
      sub_2232C69F8((char **)(a1 + 336), v42[0] - v37);
      v36 = *(_QWORD *)(a1 + 336);
      v35 = *(_QWORD *)(a1 + 344);
    }
    sub_223BB2868((uint64_t)a2, (v35 - v36) >> 6, v36);
    v42[0] = (uint64_t)(*(_QWORD *)(a1 + 368) - *(_QWORD *)(a1 + 360)) >> 4;
    (*(void (**)(_QWORD *, uint64_t *))(*a2 + 120))(a2, v42);
    v38 = *(_QWORD *)(a1 + 368);
    v39 = *(_QWORD *)(a1 + 360);
    v40 = (v38 - v39) >> 4;
    if (v42[0] <= v40)
    {
      if (v42[0] < v40)
      {
        v38 = v39 + 16 * v42[0];
        *(_QWORD *)(a1 + 368) = v38;
      }
    }
    else
    {
      sub_2232C68D0((char **)(a1 + 360), v42[0] - v40);
      v39 = *(_QWORD *)(a1 + 360);
      v38 = *(_QWORD *)(a1 + 368);
    }
    return sub_223BB26EC((uint64_t)a2, (v38 - v39) >> 4, v39);
  }
  return result;
}

void sub_223BF48AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_223BF48F4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  double result;
  std::logic_error *exception;
  std::logic_error *v24;
  std::logic_error *v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_223B89234(a1 + 16, (uint64_t)v27);
    sub_223B87C9C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_223BB47F0(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24EC5FFB8[v6])(&v26, v4);
    }
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v29;
    *(_BYTE *)(a1 + 64) = 0;
    if (v32)
    {
      *(_OWORD *)(a1 + 40) = v30;
      *(_QWORD *)(a1 + 56) = v31;
      v31 = 0;
      v30 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v33;
    *(_QWORD *)(a1 + 88) = v34;
    *(_BYTE *)(a1 + 120) = 0;
    if (v37)
    {
      *(_OWORD *)(a1 + 96) = v35;
      *(_QWORD *)(a1 + 112) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v40)
    {
      *(_OWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 144) = v39;
      v39 = 0;
      v38 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v8 = v43;
    if (v43)
    {
      *(_OWORD *)(a1 + 160) = v41;
      *(_QWORD *)(a1 + 176) = v42;
      v42 = 0;
      v41 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v8)
      goto LABEL_46;
LABEL_22:
    v9 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v10 = *((_QWORD *)&v41 + 1);
    v11 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v10 - 1) < 0)
        operator delete(*(void **)(v10 - 24));
      v10 -= 24;
    }
    while (v10 != v9);
LABEL_44:
    v11 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v9;
    operator delete(v11);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_22316DD70();
  sub_223B8944C(a1 + 16, (uint64_t)v27);
  sub_223B87C9C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24EC5FFB8[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 192) = -1;
    *(_OWORD *)(a1 + 24) = v29;
    *(_BYTE *)(a1 + 64) = 0;
    if (v32)
    {
      *(_OWORD *)(a1 + 40) = v30;
      *(_QWORD *)(a1 + 56) = v31;
      v31 = 0;
      v30 = 0uLL;
      *(_BYTE *)(a1 + 64) = 1;
    }
    *(_BYTE *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 72) = v33;
    *(_QWORD *)(a1 + 88) = v34;
    *(_BYTE *)(a1 + 120) = 0;
    if (v37)
    {
      *(_OWORD *)(a1 + 96) = v35;
      *(_QWORD *)(a1 + 112) = v36;
      v36 = 0;
      v35 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_BYTE *)(a1 + 152) = 0;
    if (v40)
    {
      *(_OWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 144) = v39;
      v39 = 0;
      v38 = 0uLL;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    v12 = v43;
    if (v43)
    {
      *(_OWORD *)(a1 + 160) = v41;
      *(_QWORD *)(a1 + 176) = v42;
      v42 = 0;
      v41 = 0uLL;
      *(_BYTE *)(a1 + 184) = 1;
    }
    *(_DWORD *)(a1 + 192) = 0;
    if (!v12)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_223BB47F0(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v9 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v13 = *((_QWORD *)&v41 + 1);
    v11 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v13 - 1) < 0)
        operator delete(*(void **)(v13 - 24));
      v13 -= 24;
    }
    while (v13 != v9);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_2231AD66C((uint64_t)v27);
  if (*(_DWORD *)(a1 + 192))
    sub_22316DD70();
LABEL_56:
  sub_223BCDEF0((uint64_t)v27, a2, v4);
  v14 = a2[6];
  v15 = a2[7];
  v16 = v15 - v14;
  if (v15 < v14)
    v16 = 0;
  if (v16 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v17 = a2[3];
  v18 = *(_DWORD *)(v17 + v14);
  a2[6] = v14 + 4;
  v19 = v15 >= v14 + 4;
  v20 = v15 - (v14 + 4);
  if (!v19)
    v20 = 0;
  if (v20 <= 7)
  {
    v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v24, "Not enough data to read");
    __cxa_throw(v24, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  v21 = *(_QWORD *)(v17 + v14 + 4);
  a2[6] = v14 + 12;
  *(_QWORD *)(a1 + 200) = v21;
  sub_223BD64E8(a2, (__n128 **)(a1 + 208));
  sub_223BD661C(a2, (char **)(a1 + 232));
  sub_223BD64E8(a2, (__n128 **)(a1 + 256));
  *(_QWORD *)&result = sub_223BD64E8(a2, (__n128 **)(a1 + 280)).n128_u64[0];
  if (a2[7] <= a2[6])
  {
    v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223198268(v25, "Not enough data to read");
    __cxa_throw(v25, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2[3] + a2[6]++);
  if (v18 >= 2)
  {
    sub_223BD64E8(a2, (__n128 **)(a1 + 312));
    sub_223BD661C(a2, (char **)(a1 + 336));
    *(_QWORD *)&result = sub_223BD64E8(a2, (__n128 **)(a1 + 360)).n128_u64[0];
  }
  return result;
}

void sub_223BF4E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BF4EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  float32x2_t v6;
  float64x2_t v7;
  float32x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float32x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float32x2_t v14;
  float64x2_t v15;

  *(_QWORD *)a1 = &off_24EC60038;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = off_24EC60088;
  *(_QWORD *)(a1 + 32) = &unk_24EC600E8;
  sub_223B866E4(a3, a1 + 40);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(float32x2_t *)(a2 + 32);
  *(float64x2_t *)(a1 + 248) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 24));
  v7 = vcvtq_f64_f32(v6);
  v8 = *(float32x2_t *)(a2 + 48);
  v9 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 40));
  *(float64x2_t *)(a1 + 264) = v7;
  *(float64x2_t *)(a1 + 280) = v9;
  v10 = vcvtq_f64_f32(v8);
  v11 = *(float32x2_t *)(a2 + 64);
  v12 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 56));
  *(float64x2_t *)(a1 + 296) = v10;
  *(float64x2_t *)(a1 + 312) = v12;
  v13 = vcvtq_f64_f32(v11);
  v14 = *(float32x2_t *)(a2 + 80);
  v15 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 72));
  *(float64x2_t *)(a1 + 328) = v13;
  *(float64x2_t *)(a1 + 344) = v15;
  *(_QWORD *)(a1 + 240) = v5;
  *(float64x2_t *)(a1 + 360) = vcvtq_f64_f32(v14);
  return a1;
}

void sub_223BF4FA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_223BF4FB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void *__p;
  char *v53;
  std::__shared_weak_count *v54;
  _QWORD v55[2];
  void (**v56)();
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  char *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  char v68[8];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unsigned int v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v64 = 1;
  sub_224555660(v55, &v64, a1, 0x2800uLL);
  v55[0] = &off_24EC20B48;
  v56 = (void (**)())&unk_24EC20C90;
  v3 = operator new(0x28uLL);
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = &off_24EC6B598;
  *v3 = &off_24EC608C8;
  *((_DWORD *)v3 + 8) = 0;
  v64 = (uint64_t)(v3 + 3);
  v65 = (std::__shared_weak_count *)v3;
  v62 = 0;
  v63 = 0;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60858;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5FD88;
  v66 = &v4[1].__vftable;
  v67 = v4;
  v60 = 0;
  v61 = 0;
  sub_223BF5A0C(&__p, &v64, 2uLL);
  v5 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v65;
  if (v65)
  {
    v9 = (unint64_t *)&v65->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v61;
  if (v61)
  {
    v12 = (unint64_t *)&v61->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v63;
  if (v63)
  {
    v15 = (unint64_t *)&v63->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0;
  sub_223BF6664(&v73, (uint64_t)&__p);
  v17 = (char *)__p;
  if (__p)
  {
    v18 = v53;
    v19 = __p;
    if (v53 != __p)
    {
      do
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = __p;
    }
    v53 = v17;
    operator delete(v19);
  }
  sub_223BF5734(v55, (uint64_t)&v68);
  if (v72 > 1)
LABEL_91:
    sub_22316DD70();
  v23 = v71;
  if (!*((_QWORD *)&v71 + 1))
    goto LABEL_38;
  v24 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_38:
    if ((_QWORD)v23)
      goto LABEL_39;
LABEL_47:
    v53 = 0;
    v54 = 0;
    __p = &off_24EC6A3B8;
    goto LABEL_60;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
  if (!(_QWORD)v23)
    goto LABEL_47;
LABEL_39:
  if (v72)
    goto LABEL_91;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v71 + 48))(&__p);
  v27 = v53;
  v28 = v54;
  if (v54)
  {
    v29 = (unint64_t *)&v54->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = v28;
    if (v27)
    {
LABEL_44:
      v32 = __dynamic_cast(v27, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC55AD8, 0) != 0;
      if (!v28)
        goto LABEL_54;
      goto LABEL_51;
    }
  }
  else
  {
    v31 = 0;
    if (v53)
      goto LABEL_44;
  }
  if (!v28)
    goto LABEL_60;
  v32 = 0;
LABEL_51:
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v32)
      goto LABEL_55;
LABEL_60:
    v35 = 0;
    v62 = 0;
    v63 = 0;
    goto LABEL_61;
  }
LABEL_54:
  if (!v32)
    goto LABEL_60;
LABEL_55:
  v35 = v53;
  v36 = v54;
  if (v54)
  {
    v37 = (unint64_t *)&v54->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v62 = v35;
  v63 = v36;
LABEL_61:
  sub_223257000((uint64_t)&v64, (uint64_t)(v35 + 8));
  sub_2232568B4(a2, (uint64_t)&v64);
  *(_BYTE *)(a2 + 1824) = 1;
  sub_2232555B8((uint64_t)&v64);
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v54;
  if (v54)
  {
    v43 = (unint64_t *)&v54->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v73;
  if (v73)
  {
    v46 = v74;
    v47 = v73;
    if (v74 != v73)
    {
      do
      {
        v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v46 -= 16;
      }
      while (v46 != v45);
      v47 = v73;
    }
    v74 = v45;
    operator delete(v47);
  }
  if (v72 != -1)
    ((void (*)(uint64_t *, __int128 *))off_24EC60838[v72])(&v64, &v71);
  v72 = -1;
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  v55[0] = &off_24EC798B8;
  v56 = (void (**)())&unk_24EC79A00;
  v51 = v59;
  v59 = 0;
  if (v51)
  {
    sub_22455612C((_QWORD *)(v51 + 8));
    MEMORY[0x227684CE8](v51, 0x10F2C40853B94B7);
  }
  v56 = off_24EC79B20;
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_223BF5554(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223BF556C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void **v29;
  uint64_t v30;
  __int128 v32;

  if (a2)
  {
    sub_223167354((uint64_t)&a26);
    sub_2241231D8((uint64_t)&a12);
    sub_223BF580C(v30 - 160);
    sub_2245557DC(&__p);
    __cxa_begin_catch(a1);
    a11 = 22;
    sub_223174DE4((_QWORD *)(v30 - 160), "Could not deserialize visual logger data into FrameBundle.");
    sub_223174DE4(&__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Visualization/src/VisualizationDataIO.cpp");
    sub_2232B84FC((unsigned int *)&a11, v30 - 160, (CFErrorRef *)&a25);
    v32 = a25;
    a25 = 0uLL;
    *(_OWORD *)v28 = v32;
    a12 = 0;
    a13 = 0;
    *(_BYTE *)(v28 + 1824) = 0;
    sub_223167354((uint64_t)&a12);
    sub_223167354((uint64_t)&a25);
    if (a20 < 0)
      operator delete(__p);
    if (*(char *)(v30 - 137) < 0)
      operator delete(*v29);
    __cxa_end_catch();
    JUMPOUT(0x223BF5514);
  }
  JUMPOUT(0x223BF555CLL);
}

void sub_223BF56F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void **v19;
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 137) < 0)
    operator delete(*v19);
  __cxa_end_catch();
  JUMPOUT(0x223BF555CLL);
}

_QWORD *sub_223BF5734(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_224554038(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_223BF5BC4((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_2231B1308(a1 + 2);
    sub_223BF5E90(a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

uint64_t sub_223BF580C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24EC60838[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_223BF5904(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC60838[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void sub_223BF595C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_223BF59B4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_223BF5A0C(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_22316E078();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_223BF5AB8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BF5B34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC608C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223BF5B44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC608C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223BF5B7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223BF5B8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223BF5BC4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unsigned int v19;
  void *v20;
  char v21;
  uint64_t v22;
  int v23;
  void *__p;
  char *v25;
  char v26[8];
  void *v27[2];
  __int128 v28;
  __int128 v29;
  int v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v29 = 0u;
  v28 = 0u;
  *(_OWORD *)v27 = 0u;
  sub_223BF6664(&v31, a3 + 64);
  sub_223BF5F64((uint64_t)&v19, a2, (uint64_t)v27);
  sub_224017A30((uint64_t)&v26);
  if (v30)
    sub_22316DD70();
  v5 = v29;
  v19 = 1;
  sub_224554038(a2[6], &v19);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, a2, v19);
  sub_223BF6130((uint64_t)&v19, (uint64_t)&v26);
  sub_223BF6298(a3, (uint64_t)&v19);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v25;
    v8 = __p;
    if (v25 != __p)
    {
      do
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v25 = v6;
    operator delete(v8);
  }
  if (v23 != -1)
    ((void (*)(char *, uint64_t *))off_24EC60838[v23])(&v18, &v22);
  v23 = -1;
  if (v21 < 0)
    operator delete(v20);
  v12 = v31;
  if (v31)
  {
    v13 = v32;
    v14 = v31;
    if (v32 != v31)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = v31;
    }
    v32 = v12;
    operator delete(v14);
  }
  if (v30 != -1)
    ((void (*)(unsigned int *, __int128 *))off_24EC60838[v30])(&v19, &v29);
  v30 = -1;
  if (SBYTE7(v28) < 0)
    operator delete(v27[0]);
}

void sub_223BF5E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BF5E90(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  unsigned int v10;

  sub_223BF5F64((uint64_t)&v9, a1, a2 + 8);
  sub_224017E94(a2);
  if (*(_DWORD *)(a2 + 56))
    sub_22316DD70();
  v4 = *(_QWORD *)(a2 + 40);
  v10 = 2;
  sub_224554038(a1[6], &v10);
  v5 = v10;
  sub_2231B1308(a1 + 2);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1, v5);
  v6 = a1[4];
  result = (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2);
  v8 = *(_QWORD *)(v6 - 16) - result + *(_QWORD *)(v6 - 8);
  if (v8)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v8);
  a1[4] -= 16;
  return result;
}

void sub_223BF5F64(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_224554038(a2[6], &v7);
  if (v7 < 2)
  {
    sub_223BF603C((uint64_t)&v8, (uint64_t)a2, a3);
  }
  else
  {
    sub_2231B1308(a2 + 2);
    sub_22455481C(a2[6], (void **)a3);
    sub_224554038(a2[6], (_DWORD *)(a3 + 24));
    v5 = a2[4];
    v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    a2[4] -= 16;
  }
}

void sub_223BF603C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  void *__p[2];
  uint64_t v10;
  int v11;

  HIBYTE(v10) = 0;
  LOBYTE(__p[0]) = 0;
  v11 = 0;
  sub_22455481C(*(_QWORD *)(a2 + 48), __p);
  sub_224554038(*(_QWORD *)(a2 + 48), &v11);
  if (SHIBYTE(v10) < 0)
  {
    sub_223197FA4(&v6, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    v7 = v10;
  }
  v5 = v11;
  v8 = v11;
  if (*(char *)(a3 + 23) < 0)
  {
    operator delete(*(void **)a3);
    v5 = v8;
  }
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 24) = v5;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_223BF6110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BF6130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  int v7;
  void *__p[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_223197FA4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  v10 = *(_DWORD *)(a2 + 32);
  v6[0] = 0;
  v7 = -1;
  v4 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24EC60898[v4])(&v11, v6, a2 + 40);
    v7 = v4;
  }
  sub_223BF6548(a1, (__int128 *)__p, (uint64_t)v6, a2 + 64);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_24EC60838[v7])(&v12, v6);
  v7 = -1;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_223BF623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_24EC60838[a12])(v18 - 33, &a10);
  a12 = -1;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223BF6298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  char v18;

  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 == -1)
  {
    if ((_DWORD)v8 == -1)
      goto LABEL_8;
  }
  else if ((_DWORD)v8 == -1)
  {
    ((void (*)(char *, uint64_t))off_24EC60838[v7])(&v18, a1 + 40);
    *(_DWORD *)(a1 + 56) = -1;
    goto LABEL_8;
  }
  v17 = a1 + 40;
  ((void (*)(uint64_t *))off_24EC608A8[v8])(&v17);
LABEL_8:
  v9 = (void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(void **)(a1 + 64);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 72) = v10;
    operator delete(v12);
    *v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

uint64_t sub_223BF6408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24EC60838[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223BF6500(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_223BF6524(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

uint64_t sub_223BF6548(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  int v9;
  uint64_t v10;
  _BYTE v12[2];

  if (*((char *)a2 + 23) < 0)
  {
    sub_223197FA4((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  v9 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC60898[v10])(v12, a1 + 40, a3);
    *(_DWORD *)(a1 + 56) = v10;
  }
  sub_223BF6664((_QWORD *)(a1 + 64), a4);
  return a1;
}

void sub_223BF6608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24EC60838[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223BF6664(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_22316E078();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_223BF670C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223BF6788(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24EC60838[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223BF684C(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24EC60838[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 1;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223BF6918(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;

  v4 = (const void **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v26 = (uint64_t *)(v5 + 16);
    sub_22455A7EC(&v26, 2u);
    sub_224555278(*(_QWORD *)(a1 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 40))
      goto LABEL_3;
LABEL_6:
    sub_22455BCF4((uint64_t)&v26, v6 + 8, (uint64_t)v4);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_22455AA60((uint64_t)&v26, v5 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_6;
LABEL_3:
  v26 = (uint64_t *)(v6 + 16);
  sub_22455B8BC((uint64_t)&v25, &v26, v4);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
LABEL_4:
    v26 = (uint64_t *)(v7 + 16);
    sub_22455A7EC(&v26, *(_DWORD *)(a2 + 32));
    goto LABEL_8;
  }
LABEL_7:
  sub_22455AA60((uint64_t)&v26, v7 + 8);
LABEL_8:
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_224554D6C((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  if (*(_DWORD *)(a2 + 56) > 1u)
    sub_22316DD70();
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(std::__shared_weak_count **)(a2 + 48);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v26 = (uint64_t *)(v19 + 16);
    sub_22455A7EC(&v26, v18);
  }
  else
  {
    sub_22455AA60((uint64_t)&v26, v19 + 8);
  }
  sub_224555278(*(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1, v18);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 88) - 8);
  sub_224554D6C((uint64_t *)(v20 + 48), *(_QWORD *)(v20 + 16) - v21 - 9);
  v22 = *(_QWORD *)(v20 + 48);
  if (v22)
    memmove((void *)(*(_QWORD *)(v20 + 24) + v21), *(const void **)(v20 + 56), v22);
  *(_QWORD *)(v20 + 48) = 0;
  v23 = *(_QWORD *)(v20 + 80);
  v24 = *(_QWORD *)(v20 + 88) - 8;
  *(_QWORD *)(v20 + 88) = v24;
  if (v23 == v24)
  {
    std::ostream::write();
    if (*(_BYTE *)(v20 + 40))
    {
      free(*(void **)(v20 + 24));
      *(_BYTE *)(v20 + 40) = 0;
    }
  }
}

void sub_223BF6BC4(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float *v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x2_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  __int128 v27;
  __int128 v28;
  int8x16_t v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  __int128 v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  int v47;
  int32x4_t v48;
  double v49;
  double v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x2_t v55;
  double v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t i;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  float *v75;
  float v76;
  float *v77;
  float **v78;
  float **v79;
  float v80;
  float *v81;
  float *v82;
  float *v83;
  _BYTE *v84;
  _OWORD *size;
  _OWORD *v86;
  std::string::size_type v87;
  uint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  std::string::size_type v94;
  void *v95;
  _QWORD *v96;
  _BYTE *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  int v110;
  void *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  _BYTE *v130;
  int v131;
  char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  int j;
  uint64_t v139;
  std::string::size_type v140;
  uint64_t v141;
  float32x2_t v142;
  unsigned __int8 *k;
  uint64_t *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  float **v151;
  char v152;
  int32x2_t v153;
  float *v154;
  float *v155;
  float *v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float32x2_t v163;
  int32x2_t v164;
  int v165;
  float *v166;
  float *v167;
  float *v168;
  float *v169;
  float *v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  float *v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float v179;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  float *v184;
  _BYTE *v185;
  float *v186;
  int64_t v187;
  unint64_t v188;
  float *v189;
  int v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  float *v196;
  uint64_t v197;
  __int128 v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  const float *v202;
  float32x2_t v203;
  int32x2_t v204;
  int32x2_t v205;
  __int32 v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  unint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t ii;
  _QWORD *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  unsigned int v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  uint64_t v247;
  void **v248;
  char **v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  BOOL v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  _BYTE *v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  std::mutex *v276;
  uint64_t v277;
  uint64_t v278;
  float *v279;
  uint64_t v280;
  float v281;
  unint64_t v282;
  _BYTE *v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  __n128 *v289;
  _BYTE *v290;
  size_t v291;
  float v292;
  _OWORD *v293;
  __int128 v294;
  __int128 v295;
  char *v296;
  char *v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  void *v305;
  __int128 v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  __int128 v313;
  __int128 v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  int32x4_t v327;
  int32x4_t v328;
  float32x2_t v329;
  float32x4_t v330;
  __int128 v331;
  int8x16_t v332;
  int8x16_t v333;
  int8x16_t v334;
  float32x2_t v335;
  float32x2_t v336;
  __int128 v337;
  float v338;
  uint64_t v339;
  unsigned __int8 *v340;
  float32x2_t *v341;
  float32x2_t *v342;
  float32x2_t v343;
  int8x16_t v344;
  float32x4_t v345;
  float32x2_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  unint64_t v350;
  signed int v351;
  char **v352;
  _BYTE *v353;
  uint64_t v354;
  int v355;
  int v356;
  signed int v357;
  char *v358;
  _BYTE *v359;
  unint64_t v360;
  _BYTE *v361;
  unint64_t v362;
  _QWORD *v363;
  _BYTE *v364;
  _DWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  _BYTE *v368;
  int *v369;
  int *m;
  uint64_t v371;
  _BYTE *v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  int v379;
  uint64_t v380;
  char *v381;
  char **n;
  char **v383;
  int v384;
  char **v385;
  char **v386;
  char *v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  _BYTE *v392;
  int v393;
  uint64_t v394;
  int v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  char **v400;
  char *v401;
  char **v402;
  char *v403;
  char *v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  char *v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  _BYTE *v418;
  int v419;
  uint64_t v420;
  int v421;
  uint64_t *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  char *v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  _BYTE *v431;
  _OWORD *v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t **v438;
  char *v439;
  unint64_t v440;
  unint64_t v441;
  unsigned int v442;
  unsigned int v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t *v446;
  uint64_t *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t **v454;
  uint64_t **v455;
  int v456;
  int v457;
  char *v458;
  uint64_t *v459;
  _QWORD *v460;
  _QWORD *v461;
  _QWORD *v462;
  uint64_t v463;
  _QWORD *v464;
  _OWORD *v465;
  _QWORD *v466;
  std::__shared_weak_count *v467;
  _QWORD *v468;
  uint64_t v469;
  float32x2_t v470;
  float32x2_t v471;
  float32x2_t v472;
  float32x2_t v473;
  float32x4_t v474;
  uint64_t v475;
  uint64_t v476;
  unsigned __int8 *v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x2_t v480;
  float32x2_t **v481;
  float32x2_t *v482;
  float32x2_t *v483;
  float32x2_t v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  __int16 v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  __int16 v496;
  int32x4_t *v497;
  std::string::size_type v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  __int16 v502;
  unint64_t v503;
  uint64_t v504;
  int32x4_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  __int16 v509;
  uint64_t v510;
  float v511;
  float v512;
  int v513;
  void *v514;
  BOOL v515;
  int v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t v519;
  std::mutex *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t *v524;
  unint64_t v525;
  __int128 *v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v532;
  void *v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  std::mutex *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  _BYTE *v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v548;
  void *v549;
  uint64_t *v550;
  uint64_t v551;
  uint64_t v552;
  std::mutex *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  unint64_t v558;
  __int128 *v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  __int32 v565;
  __int32 v566;
  unint64_t v567;
  char *v568;
  char *v569;
  float v570;
  int v571;
  int8x16_t v572;
  float32x2_t v573;
  float32x2_t v574;
  float32x4_t v575;
  float32x2_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  float32x2_t v580;
  char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  __int32 v587;
  uint64_t v588;
  float v589;
  float v593;
  int8x16_t v598;
  float32x4_t v599;
  char *v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  uint64_t v609;
  int v610;
  uint64_t *v611;
  float32x4_t v612;
  float32x2_t v613;
  float32x2_t v614;
  float32x2_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  std::mutex *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v625;
  unint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  unint64_t v629;
  _QWORD *v630;
  uint64_t *v631;
  uint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  void *v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  float32x2_t *v663;
  float32x2_t *v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  _BYTE *v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  float32x2_t v675;
  float32x4_t v676;
  float32x2_t v677;
  uint32x2_t v680;
  _QWORD *v681;
  _QWORD *v682;
  _QWORD *v683;
  _QWORD *v684;
  uint64_t *v685;
  uint64_t **v686;
  uint64_t **v687;
  unsigned int v688;
  unsigned int v689;
  BOOL v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  char *v694;
  uint64_t *v695;
  _QWORD *v696;
  _QWORD *v697;
  _BYTE *v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  unsigned int v705;
  _BOOL4 v707;
  uint64_t **v708;
  _QWORD *v709;
  _BYTE *v710;
  float32x4_t v711;
  __int32 v712;
  char *v713;
  int v714;
  uint64_t v715;
  uint64_t **v716;
  std::chrono::steady_clock::time_point v717;
  int32x4_t v718;
  float32x2_t v719;
  unsigned __int8 *v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t **v724;
  float **v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int32x4_t v729;
  float32x2_t v730;
  void *v731;
  float32x2_t v732;
  void *v733[2];
  float32x2_t v734;
  uint64_t v735;
  float32x2_t v736;
  float32x2_t v737;
  float32x4_t v738;
  unsigned __int8 *v739;
  uint64_t v740;
  float32x4_t v741;
  float32x2_t v742;
  uint64_t v743;
  float *v745;
  std::string::size_type v746;
  int v747;
  int8x16_t v748;
  int32x4_t v749;
  int8x16_t v750;
  unsigned int v751;
  float32x2_t v752;
  int8x16_t v753;
  __int32 v754;
  unsigned __int8 *v755;
  float32x2_t v756;
  int v757;
  float **v758;
  int v759;
  unint64_t v760;
  uint64_t v761;
  void *v762[2];
  char *v763;
  uint64_t v764;
  std::string __p;
  uint64_t v766;
  int32x4_t v767;
  __int16 v768;
  __int128 v769;
  char *v770;
  _BYTE v771[50];
  __int128 v772;
  __int128 v773;
  int v774;
  _BYTE v775[32];
  int v776;
  std::string v777;
  void *v778;
  __int128 v779;
  __int128 v780;
  uint64_t (**v781)();
  uint64_t v782;
  std::__shared_weak_count *v783;
  __int128 v784;
  _BYTE v785[9];
  __int128 v786;
  std::__shared_weak_count *v787;
  _BYTE v788[50];
  _BYTE v789[64];
  int v790;
  uint64_t v791;

  v791 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v735 = a7;
  v727 = a6;
  if (!*(_BYTE *)(a1 + 2508)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 392, (uint64_t)"config_.enable_cluster_recon", 28, (uint64_t)"Cluster meshing is disabled", 27, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if ((a4 & 0x40) == 0)
  {
    v743 = a1 + 2088;
    v764 = a1;
    if (a1 != a2)
    {
      sub_2239361BC((uint64_t *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      sub_2239361BC((uint64_t *)(a1 + 24), *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    }
    v726 = a1 + 2352;
    v13 = *(_OWORD *)(a2 + 48);
    v14 = *(_OWORD *)(a2 + 64);
    v15 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v15;
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = v14;
    v16 = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v16;
    v728 = a1 + 136;
    sub_223481BB8(a1 + 136, (uint64_t)a3);
    *(_QWORD *)(a1 + 2184) = *(_QWORD *)(a1 + 2176);
    v17 = (float *)(a1 + 2208);
    v725 = (float **)(a1 + 2200);
    sub_22352532C(a1 + 2200, *(_QWORD **)(a1 + 2208));
    *(_QWORD *)(a1 + 2200) = a1 + 2208;
    *(_QWORD *)(a1 + 2216) = 0;
    *(_QWORD *)(a1 + 2208) = 0;
    *(float32x2_t *)v18.i8 = a3[167];
    v18.i32[2] = a3[168].i32[0];
    *(float32x2_t *)v19.i8 = a3[169];
    v19.i32[2] = a3[170].i32[0];
    *(float32x2_t *)v20.f32 = a3[173];
    v20.i32[2] = a3[174].i32[0];
    v21.i64[0] = vzip1q_s32(v18, v19).u64[0];
    v22 = (int8x16_t)vnegq_f32(v20);
    v23.i32[0] = a3[172].i32[0];
    v24 = (int8x16_t)vtrn2q_s32(v18, v19);
    v24.i32[2] = HIDWORD(*(_QWORD *)&a3[171]);
    v25 = vzip2q_s32(v18, v19);
    v26 = (int8x16_t)v25;
    v26.i32[2] = v23.i32[0];
    *(float32x2_t *)&v27 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v21.i8, *(float *)v22.i32), *(float32x2_t *)v24.i8, *(float32x2_t *)v20.f32, 1), *(float32x2_t *)v25.i8, v20, 2);
    *((_QWORD *)&v27 + 1) = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(a3[171], *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a3[171], 1), *(float32x2_t *)v20.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v23).u32[0]);
    HIDWORD(v28) = 0;
    LODWORD(v28) = v24.i32[0];
    v29 = vextq_s8(vextq_s8(v24, v24, 0xCuLL), v26, 8uLL);
    v20.i64[0] = v29.i64[1];
    *(_QWORD *)((char *)&v28 + 4) = v29.i64[0];
    v20.i64[1] = vdupq_laneq_s32((int32x4_t)v26, 2).u32[0];
    v21.i64[1] = *(_QWORD *)&a3[171];
    *(int32x4_t *)(a1 + 2224) = v21;
    *(float32x4_t *)(a1 + 2256) = v20;
    v20.i64[0] = *(_QWORD *)(a1 + 48);
    v20.i32[2] = *(_DWORD *)(a1 + 56);
    v21.i64[0] = *(_QWORD *)(a1 + 64);
    v21.i32[2] = *(_DWORD *)(a1 + 72);
    v22.i64[0] = *(_QWORD *)(a1 + 80);
    v23.i32[0] = *(_DWORD *)(a1 + 88);
    v24.i64[0] = *(_QWORD *)(a1 + 96);
    v24.i32[2] = *(_DWORD *)(a1 + 104);
    *(_QWORD *)&v30 = vzip1q_s32((int32x4_t)v20, v21).u64[0];
    v31 = (int8x16_t)vnegq_f32((float32x4_t)v24);
    DWORD2(v30) = v22.i32[0];
    v32 = (int8x16_t)vtrn2q_s32((int32x4_t)v20, v21);
    v32.i32[2] = v22.i32[1];
    v33 = (int8x16_t)vzip2q_s32((int32x4_t)v20, v21);
    *(float32x2_t *)&v34 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v30, *(float *)v31.i32), *(float32x2_t *)v32.i8, *(float32x2_t *)v24.i8, 1), *(float32x2_t *)v33.i8, (float32x4_t)v24, 2);
    v33.i32[2] = v23.i32[0];
    *(_OWORD *)(a1 + 2240) = v28;
    *(float32x2_t *)v21.i8 = vmls_lane_f32(vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v24.i8, 1);
    v22.i32[0] = vdupq_laneq_s32((int32x4_t)v33, 2).u32[0];
    *((_QWORD *)&v34 + 1) = __PAIR64__(HIDWORD(v27), vmla_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), v23).u32[0]);
    v35 = vextq_s8(vextq_s8(v32, v32, 0xCuLL), v33, 8uLL);
    v33.i64[0] = __PAIR64__(v35.u32[0], v32.u32[0]);
    v33.i64[1] = v35.u32[1];
    v25.i64[0] = v35.i64[1];
    v25.i64[1] = v22.u32[0];
    *(_OWORD *)(a1 + 2272) = v27;
    *((_QWORD *)&v30 + 1) = DWORD2(v30);
    *(_OWORD *)(a1 + 2288) = v30;
    *(int32x4_t *)(a1 + 2320) = v25;
    *(int8x16_t *)(a1 + 2304) = v33;
    *(_OWORD *)(a1 + 2336) = v34;
    v36 = *(_QWORD *)(a1 + 2144);
    v37 = *(_QWORD *)(a1 + 2136);
    if (v36 != v37)
    {
      do
      {
        v38 = v36 - 24;
        sub_223198030(v36 - 24, *(_QWORD **)(v36 - 16));
        v36 = v38;
      }
      while (v38 != v37);
    }
    *(_QWORD *)(a1 + 2144) = v37;
    v724 = (uint64_t **)(a1 + 2416);
    sub_223198030(a1 + 2416, *(_QWORD **)(a1 + 2424));
    v723 = a1 + 2424;
    *(_QWORD *)(a1 + 2416) = a1 + 2424;
    *(_QWORD *)(a1 + 2432) = 0;
    *(_QWORD *)(a1 + 2424) = 0;
    sub_223198030(a1 + 2440, *(_QWORD **)(a1 + 2448));
    *(_QWORD *)(a1 + 2440) = a1 + 2448;
    *(_QWORD *)(a1 + 2456) = 0;
    *(_QWORD *)(a1 + 2448) = 0;
    v721 = (uint64_t *)(a1 + 2392);
    sub_223475E64(a1 + 2392, *(_QWORD **)(a1 + 2400));
    v722 = a1 + 2400;
    *(_QWORD *)(a1 + 2392) = a1 + 2400;
    *(_QWORD *)(a1 + 2408) = 0;
    *(_QWORD *)(a1 + 2400) = 0;
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 2464);
    v44 = *(__int128 **)a2;
    v45 = *(__int128 **)(a2 + 8);
    if (*(__int128 **)a2 != v45)
    {
      while (1)
      {
        v46 = *((_QWORD *)v44 + 9);
        if (v46)
          break;
        v44 = (__int128 *)((char *)v44 + 360);
        if (v44 == v45)
          goto LABEL_13;
      }
      v47 = *(_DWORD *)(v46 + 140);
      v40 = *(int32x4_t *)(v46 + 124);
      v48 = *(int32x4_t *)(v46 + 108);
      v41 = (float32x2_t)vtrn2q_s32(v48, vzip1q_s32(v48, v40)).u64[0];
      *(_DWORD *)(a1 + 2360) = v40.i32[2];
      *(_DWORD *)(a1 + 2372) = v40.i32[3];
      v48.i32[1] = v48.i32[3];
      v40.i32[0] = v48.i32[2];
      *(_QWORD *)v726 = v48.i64[0];
      *(float32x2_t *)(a1 + 2364) = v41;
      *(_DWORD *)(a1 + 2384) = v47;
      *(_QWORD *)(a1 + 2376) = v40.i64[0];
    }
LABEL_13:
    v39.i64[0] = *(_QWORD *)(a1 + 2272);
    v40.i32[0] = *(_DWORD *)(a1 + 2280);
    v41.i32[0] = *(_DWORD *)(a1 + 2296);
    v49 = *(double *)(a1 + 2304);
    v42.i32[0] = *(_DWORD *)(a1 + 2312);
    v50 = *(double *)(a1 + 2320);
    v43.i32[0] = *(_DWORD *)(a1 + 2328);
    *(float32x2_t *)v51.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2288), v39.f32[0]), *(float32x2_t *)&v49, *(float32x2_t *)v39.f32, 1), *(float32x2_t *)&v50, *(float *)v40.i32);
    *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v41, *(float32x2_t *)v39.f32), v42, *(float32x2_t *)v39.f32, 1), *(float32x2_t *)v40.i8, v43);
    v39.i64[0] = *(_QWORD *)(a1 + 2336);
    v39.i32[2] = *(_DWORD *)(a1 + 2344);
    v54 = vaddq_f32(v51, v39);
    v52 = *(float32x2_t *)(a1 + 2376);
    v53 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2352), v54.f32[0]), *(float32x2_t *)(a1 + 2364), *(float32x2_t *)v54.f32, 1), v52, v54, 2);
    *(float32x2_t *)v54.f32 = vadd_f32(v53, (float32x2_t)vdup_n_s32(0xC0E66667));
    v55 = (float32x2_t)vdup_n_s32(0x40E66667u);
    v56 = COERCE_DOUBLE(vadd_f32(v53, v55));
    *(_QWORD *)(a1 + 2160) = v54.i64[0];
    *(double *)(a1 + 2168) = v56;
    v58 = *(__int128 **)a2;
    v57 = *(__int128 **)(a2 + 8);
    if (*(__int128 **)a2 != v57)
    {
      do
      {
        sub_223BFC568(a1, (uint64_t)v58, v54, v56, v55, v52, v49, v42, v50, v43);
        v58 = (__int128 *)((char *)v58 + 360);
      }
      while (v58 != v57);
    }
    v60 = *(_QWORD *)(a2 + 24);
    for (i = *(_QWORD *)(a2 + 32); v60 != i; v60 += 360)
      sub_223BFC568(a1, v60, v54, v56, v55, v52, v49, v42, v50, v43);
    if (*(_DWORD *)(a1 + 2112) && *(_DWORD *)(a1 + 2116))
      goto LABEL_40;
    __p.__r_.__value_.__r.__words[0] = 0x9000000090;
    v775[0] = -1;
    *(_QWORD *)v789 = &off_24EC29028;
    sub_2236B4758(&__p, (void **)v775, (uint64_t *)v771);
    *(_QWORD *)v788 = *(_QWORD *)v771;
    if (*(_QWORD *)v771)
    {
      v61 = (_QWORD *)operator new();
      v62 = *(_QWORD *)v771;
      *v61 = &off_24EC24880;
      v61[1] = 0;
      v61[2] = 0;
      v61[3] = v62;
    }
    else
    {
      v61 = 0;
    }
    *(_QWORD *)&v788[8] = v61;
    *(_QWORD *)v771 = 0;
    sub_2232C54C4((uint64_t *)&v789[8], (uint64_t *)v788);
    v63 = *(std::__shared_weak_count **)&v788[8];
    if (*(_QWORD *)&v788[8])
    {
      v64 = (unint64_t *)(*(_QWORD *)&v788[8] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(_QWORD *)v771;
    *(_QWORD *)v771 = 0;
    if (v66)
    {
      v67 = *(void **)(v66 + 48);
      if (v67)
        free(v67);
      *(_QWORD *)(v66 + 48) = 0;
      MEMORY[0x227684CE8](v66, 0x1091C406A8758A4);
    }
    v68 = *(_OWORD *)&v789[8];
    *(_QWORD *)&v789[8] = 0;
    *(_QWORD *)&v789[16] = 0;
    v69 = *(std::__shared_weak_count **)(a1 + 2096);
    *(_OWORD *)v743 = v68;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    *(_OWORD *)(a1 + 2104) = *(_OWORD *)&v789[24];
    *(_OWORD *)(a1 + 2114) = *(_OWORD *)&v789[34];
    *(_QWORD *)v789 = &off_24EC29028;
    v72 = *(std::__shared_weak_count **)&v789[16];
    if (!*(_QWORD *)&v789[16])
      goto LABEL_40;
    v73 = (unint64_t *)(*(_QWORD *)&v789[16] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (v74)
    {
LABEL_40:
      if ((a4 & 4) == 0)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      if ((a4 & 4) == 0)
        return;
    }
    v716 = (uint64_t **)(a1 + 2440);
    memset(v788, 0, 32);
    *(_DWORD *)&v788[32] = 728333892;
    kdebug_trace();
    v717.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)&v775[16] = 0;
    *(_QWORD *)&v775[8] = 0;
    *(_QWORD *)v775 = &v775[8];
    v75 = *v725;
    if (*v725 != v17)
    {
      do
      {
        if (*((_QWORD *)v75 + 7))
        {
          v76 = -v75[13];
          v77 = *(float **)&v775[8];
          v78 = (float **)&v775[8];
          v79 = (float **)&v775[8];
          if (*(_QWORD *)&v775[8])
          {
            while (1)
            {
              while (1)
              {
                v79 = (float **)v77;
                v80 = v77[7];
                if (v80 <= v76)
                  break;
                v77 = *(float **)v77;
                v78 = v79;
                if (!*v79)
                  goto LABEL_52;
              }
              if (v80 >= v76)
                break;
              v77 = (float *)*((_QWORD *)v77 + 1);
              if (!v77)
              {
                v78 = v79 + 1;
                goto LABEL_52;
              }
            }
          }
          else
          {
LABEL_52:
            v81 = (float *)operator new(0x30uLL);
            v81[7] = v76;
            *((_OWORD *)v81 + 2) = *((_OWORD *)v75 + 2);
            *(_QWORD *)v81 = 0;
            *((_QWORD *)v81 + 1) = 0;
            *((_QWORD *)v81 + 2) = v79;
            *v78 = v81;
            if (**(_QWORD **)v775)
            {
              *(_QWORD *)v775 = **(_QWORD **)v775;
              v81 = *v78;
            }
            sub_2231A9A8C(*(uint64_t **)&v775[8], (uint64_t *)v81);
            ++*(_QWORD *)&v775[16];
          }
        }
        v82 = (float *)*((_QWORD *)v75 + 1);
        if (v82)
        {
          do
          {
            v83 = v82;
            v82 = *(float **)v82;
          }
          while (v82);
        }
        else
        {
          do
          {
            v83 = (float *)*((_QWORD *)v75 + 2);
            _ZF = *(_QWORD *)v83 == (_QWORD)v75;
            v75 = v83;
          }
          while (!_ZF);
        }
        v75 = v83;
      }
      while (v83 != v17);
      v84 = *(_BYTE **)v775;
      if (*(_BYTE **)v775 != &v775[8])
      {
        size = (_OWORD *)__p.__r_.__value_.__l.__size_;
        do
        {
          v86 = v84 + 32;
          if ((unint64_t)size >= __p.__r_.__value_.__r.__words[2])
          {
            v87 = __p.__r_.__value_.__r.__words[0];
            v88 = (uint64_t)((uint64_t)size - __p.__r_.__value_.__r.__words[0]) >> 4;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 60)
              sub_22316E078();
            v90 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v89)
              v89 = v90 >> 3;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
              v91 = 0xFFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              if (v91 >> 60)
                sub_223174E94();
              v92 = (char *)operator new(16 * v91);
              v93 = &v92[16 * v88];
              *(_OWORD *)v93 = *v86;
              if (size == (_OWORD *)v87)
              {
LABEL_86:
                v95 = size;
                size = v93 + 16;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 16);
                __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92[16 * v91];
                if (!v95)
                  goto LABEL_79;
LABEL_78:
                operator delete(v95);
                goto LABEL_79;
              }
            }
            else
            {
              v92 = 0;
              v93 = (char *)(16 * v88);
              *(_OWORD *)(16 * v88) = *v86;
              if (size == (_OWORD *)v87)
                goto LABEL_86;
            }
            v94 = (std::string::size_type)v93;
            do
            {
              *(_OWORD *)(v94 - 16) = *(size - 1);
              v94 -= 16;
              --size;
            }
            while (size != (_OWORD *)v87);
            v95 = (void *)__p.__r_.__value_.__r.__words[0];
            size = v93 + 16;
            __p.__r_.__value_.__r.__words[0] = v94;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v93 + 16);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92[16 * v91];
            if (v95)
              goto LABEL_78;
          }
          else
          {
            *size++ = *v86;
          }
LABEL_79:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)size;
          v96 = (_QWORD *)*((_QWORD *)v84 + 1);
          if (v96)
          {
            do
            {
              v97 = v96;
              v96 = (_QWORD *)*v96;
            }
            while (v96);
          }
          else
          {
            do
            {
              v97 = (_BYTE *)*((_QWORD *)v84 + 2);
              _ZF = *(_QWORD *)v97 == (_QWORD)v84;
              v84 = v97;
            }
            while (!_ZF);
          }
          v84 = v97;
        }
        while (v97 != &v775[8]);
      }
    }
    v98 = *(_QWORD *)(v764 + 2088);
    v99 = *(std::__shared_weak_count **)(v764 + 2096);
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
      do
        v102 = __ldaxr(v100);
      while (__stlxr(v102 - 1, v100));
      if (v102)
      {
        if (!v98)
          goto LABEL_119;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        if (!v98)
          goto LABEL_119;
      }
      v103 = *(std::__shared_weak_count **)(v764 + 2096);
      v98 = *(_QWORD *)(v764 + 2088);
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        do
          v106 = __ldaxr(v104);
        while (__stlxr(v106 - 1, v104));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    else if (!v98)
    {
      goto LABEL_119;
    }
    if (*(_BYTE *)(v764 + 2129))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v98 + 96))(v789, v98, 1);
      v107 = *(unsigned int *)(v764 + 2120);
      if ((_DWORD)v107 != 1)
      {
LABEL_120:
        v117 = *(_DWORD *)(v764 + 2112);
        if (v117)
        {
          v118 = *(_DWORD *)(v764 + 2116);
          if (v118)
          {
            v119 = *(unsigned int *)(v764 + 2124);
            v120 = *(_BYTE **)(v764 + 2104);
            if (*(_BYTE *)(v764 + 2128) && v120)
            {
              v121 = *(_QWORD *)(v764 + 2088);
              v122 = *(std::__shared_weak_count **)(v764 + 2096);
              if (v122)
              {
                v123 = (unint64_t *)&v122->__shared_owners_;
                do
                  v124 = __ldxr(v123);
                while (__stxr(v124 + 1, v123));
                do
                  v125 = __ldaxr(v123);
                while (__stlxr(v125 - 1, v123));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v121 + 88))(v121, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
              v120 = *(_BYTE **)(v764 + 2104);
            }
            v126 = v117 - 1;
            v127 = v118 - 1;
            if (v118 != 1)
            {
              if (v117 == 1)
              {
                do
                {
                  *v120 = -1;
                  v120 += v119;
                  --v127;
                }
                while (v127);
              }
              else
              {
                v128 = 0;
                do
                {
                  v129 = v117 - 1;
                  v130 = v120;
                  do
                  {
                    *v130 = -1;
                    v130 += v107;
                    --v129;
                  }
                  while (v129);
                  *v130 = -1;
                  v120 += v119;
                  ++v128;
                }
                while (v128 != v127);
              }
            }
            if (v117 != 1)
            {
              do
              {
                *v120 = -1;
                v120 += v107;
                --v126;
              }
              while (v126);
            }
            *v120 = -1;
          }
        }
        goto LABEL_156;
      }
LABEL_108:
      v108 = *(unsigned int *)(v764 + 2124);
      v109 = *(unsigned int *)(v764 + 2112);
      if ((_DWORD)v108 == (_DWORD)v109)
      {
        v110 = *(_DWORD *)(v764 + 2116);
        v111 = *(void **)(v764 + 2104);
        if (*(_BYTE *)(v764 + 2128) && v111)
        {
          v112 = *(_QWORD *)(v764 + 2088);
          v113 = *(std::__shared_weak_count **)(v764 + 2096);
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
            do
              v116 = __ldaxr(v114);
            while (__stlxr(v116 - 1, v114));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v112 + 88))(v112, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
          v111 = *(void **)(v764 + 2104);
        }
        memset(v111, 255, (v110 * v108));
      }
      else if ((_DWORD)v109)
      {
        v131 = *(_DWORD *)(v764 + 2116);
        if (v131)
        {
          v132 = *(char **)(v764 + 2104);
          if (*(_BYTE *)(v764 + 2128) && v132)
          {
            v133 = *(_QWORD *)(v764 + 2088);
            v134 = *(std::__shared_weak_count **)(v764 + 2096);
            if (v134)
            {
              v135 = (unint64_t *)&v134->__shared_owners_;
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
              do
                v137 = __ldaxr(v135);
              while (__stlxr(v137 - 1, v135));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v133 + 88))(v133, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
            v132 = *(char **)(v764 + 2104);
          }
          for (j = v131 - 1; j; --j)
          {
            memset(v132, 255, v109);
            v132 += v108;
          }
          memset(v132, 255, v109);
        }
      }
LABEL_156:
      v139 = *(_QWORD *)v789;
      *(_QWORD *)v789 = 0;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      v140 = __p.__r_.__value_.__l.__size_;
      v731 = (void *)__p.__r_.__value_.__r.__words[0];
      v141 = v764;
      v745 = v17;
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        v142 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
        for (k = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0]; k != (unsigned __int8 *)v140; k += 16)
        {
          v144 = *(uint64_t **)v17;
          if (!*(_QWORD *)v17)
LABEL_1114:
            sub_223198218("map::at:  key not found");
          v145 = *k;
          while (1)
          {
            v146 = *((unsigned __int8 *)v144 + 32);
            _CF = v145 >= v146;
            if (v145 == v146)
              break;
            v148 = *k;
LABEL_193:
            if (_CF)
            {
LABEL_195:
              if (v146 >= v148)
                goto LABEL_198;
              v144 = (uint64_t *)v144[1];
              if (!v144)
                goto LABEL_1114;
            }
            else
            {
LABEL_163:
              v144 = (uint64_t *)*v144;
              if (!v144)
                goto LABEL_1114;
            }
          }
          v148 = k[1];
          v146 = *((unsigned __int8 *)v144 + 33);
          _CF = v148 >= v146;
          if (v148 != v146)
            goto LABEL_193;
          v148 = k[2];
          v146 = *((unsigned __int8 *)v144 + 34);
          _CF = v148 >= v146;
          if (v148 != v146)
            goto LABEL_193;
          v148 = k[3];
          v146 = *((unsigned __int8 *)v144 + 35);
          _CF = v148 >= v146;
          if (v148 != v146)
            goto LABEL_193;
          v148 = k[4];
          v146 = *((unsigned __int8 *)v144 + 36);
          _CF = v148 >= v146;
          if (v148 != v146)
            goto LABEL_193;
          v148 = k[5];
          v146 = *((unsigned __int8 *)v144 + 37);
          _CF = v148 >= v146;
          if (v148 != v146)
            goto LABEL_193;
          v149 = k[6];
          v150 = *((unsigned __int8 *)v144 + 38);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[7];
          v150 = *((unsigned __int8 *)v144 + 39);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[8];
          v150 = *((unsigned __int8 *)v144 + 40);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[9];
          v150 = *((unsigned __int8 *)v144 + 41);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[10];
          v150 = *((unsigned __int8 *)v144 + 42);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[11];
          v150 = *((unsigned __int8 *)v144 + 43);
          if (v149 != v150)
            goto LABEL_180;
          v149 = k[12];
          v150 = *((unsigned __int8 *)v144 + 44);
          if (v149 != v150
            || (v149 = k[13], v150 = *((unsigned __int8 *)v144 + 45), v149 != v150)
            || (v149 = k[14], v150 = *((unsigned __int8 *)v144 + 46), v149 != v150)
            || (v149 = k[15], v150 = *((unsigned __int8 *)v144 + 47), v149 != v150))
          {
LABEL_180:
            if (v149 < v150)
              goto LABEL_163;
          }
          v146 = *((unsigned __int8 *)v144 + 38);
          v148 = k[6];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 39);
          v148 = k[7];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 40);
          v148 = k[8];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 41);
          v148 = k[9];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 42);
          v148 = k[10];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 43);
          v148 = k[11];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 44);
          v148 = k[12];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 45);
          v148 = k[13];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 46);
          v148 = k[14];
          if (v146 != v148)
            goto LABEL_195;
          v146 = *((unsigned __int8 *)v144 + 47);
          v148 = k[15];
          if (v146 != v148)
            goto LABEL_195;
LABEL_198:
          v151 = (float **)v144[7];
          if (!v151)
            continue;
          v152 = *((_BYTE *)v144 + 48);
          v153.i32[1] = 2139095039;
          *(_OWORD *)v771 = xmmword_2245F53F0;
          v155 = *v151;
          v154 = v151[1];
          if (*v151 == v154)
          {
            sub_2233DC1C4(v151 + 3, (int32x2_t *)v771);
            v159 = *(float *)&v771[8];
LABEL_213:
            if (v159 < *(float *)(v141 + 2160))
              continue;
          }
          else
          {
            v157 = *v155;
            v158 = v155[1];
            v156 = v155 + 2;
            *(_QWORD *)v771 = __PAIR64__(LODWORD(v158), LODWORD(v157));
            *(_QWORD *)&v771[8] = __PAIR64__(LODWORD(v158), LODWORD(v157));
            if (v156 != v154)
            {
              v159 = v157;
              v160 = v158;
              while (1)
              {
                v161 = *v156;
                if (*v156 >= v157)
                {
                  if (v161 <= v159)
                  {
LABEL_205:
                    v162 = v156[1];
                    if (v162 < v158)
                      goto LABEL_206;
                    goto LABEL_210;
                  }
                }
                else
                {
                  *(float *)v771 = *v156;
                  v157 = v161;
                  if (v161 <= v159)
                    goto LABEL_205;
                }
                *(float *)&v771[8] = v161;
                v159 = v161;
                v162 = v156[1];
                if (v162 < v158)
                {
LABEL_206:
                  *(float *)&v771[4] = v162;
                  v158 = v162;
                  if (v162 > v160)
                    goto LABEL_211;
                  goto LABEL_202;
                }
LABEL_210:
                if (v162 > v160)
                {
LABEL_211:
                  *(float *)&v771[12] = v162;
                  v160 = v162;
                }
LABEL_202:
                v156 += 2;
                if (v156 == v154)
                  goto LABEL_213;
              }
            }
            if (v157 < *(float *)(v141 + 2160))
              continue;
          }
          if (*(float *)v771 > *(float *)(v141 + 2168))
            continue;
          v153.i32[0] = *(_DWORD *)(v141 + 2164);
          if (*(float *)&v771[12] < *(float *)v153.i32)
            continue;
          v163.i32[0] = *(_DWORD *)&v771[4];
          if (*(float *)&v771[4] > *(float *)(v141 + 2172))
            continue;
          v163.i32[1] = *(_DWORD *)&v771[12];
          v164 = vmax_s32(vmin_s32(vcvt_s32_f32(vrnda_f32(vdiv_f32(vsub_f32(v163, (float32x2_t)vdup_lane_s32(v153, 0)), v142))), (int32x2_t)0x8F0000008FLL), 0);
          v165 = v164.i32[0];
          v754 = v164.i32[1];
          if (v164.i32[0] > (unsigned __int32)v164.i32[1])
            continue;
          v746 = v140;
          v739 = k;
          v758 = v151;
          while (2)
          {
            memset(v789, 0, 24);
            v167 = *v151;
            v166 = v151[1];
            if (v166 == *v151)
              goto LABEL_253;
            v168 = 0;
            v169 = 0;
            v170 = 0;
            v171 = 0;
            v172 = (float)((float)v165 * 0.1) + *(float *)(v141 + 2164);
            v173 = (((char *)v166 - (char *)*v151) >> 3) - 1;
            while (2)
            {
              v175 = &v167[2 * v173];
              v173 = v171;
              v176 = &v167[2 * v171];
              v177 = v176[1];
              v178 = v175[1];
              if (v177 >= v172 == v178 < v172)
              {
                v179 = *v176 + (float)((float)((float)(v172 - v177) / (float)(v178 - v177)) * (float)(*v175 - *v176));
                if (v170 < v169)
                {
                  *v170 = v179;
                  v174 = v170 + 1;
                }
                else
                {
                  v180 = (char *)v170 - (char *)v168;
                  v181 = v170 - v168;
                  v182 = v181 + 1;
                  if ((unint64_t)(v181 + 1) >> 62)
                    sub_22316E078();
                  if (((char *)v169 - (char *)v168) >> 1 > v182)
                    v182 = ((char *)v169 - (char *)v168) >> 1;
                  if ((unint64_t)((char *)v169 - (char *)v168) >= 0x7FFFFFFFFFFFFFFCLL)
                    v183 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v183 = v182;
                  if (v183)
                  {
                    if (v183 >> 62)
                      sub_223174E94();
                    v184 = v166;
                    v185 = operator new(4 * v183);
                    v166 = v184;
                    v186 = (float *)&v185[4 * v181];
                    *v186 = v179;
                    v174 = v186 + 1;
                    v187 = (char *)v170 - (char *)v168;
                    if (v170 != v168)
                    {
LABEL_236:
                      v188 = v187 - 4;
                      if (v188 < 0xBC
                        || (v192 = ((char *)(v170 - 1) - (char *)v168) & 0xFFFFFFFFFFFFFFFCLL,
                            &v185[v180 - 4 - v192] > &v185[v180 - 4])
                        || (float *)((char *)v170 - v192 - 4) > v170 - 1
                        || (unint64_t)((char *)v168 - v185) < 0x20)
                      {
                        v189 = v170;
                        v141 = v764;
                      }
                      else
                      {
                        v193 = (v188 >> 2) + 1;
                        v194 = 4 * (v193 & 0x7FFFFFFFFFFFFFF8);
                        v189 = &v170[v194 / 0xFFFFFFFFFFFFFFFCLL];
                        v186 = (float *)((char *)v186 - v194);
                        v195 = &v185[v180 - 16];
                        v196 = v170 - 4;
                        v197 = v193 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v198 = *(_OWORD *)v196;
                          *(v195 - 1) = *((_OWORD *)v196 - 1);
                          *v195 = v198;
                          v195 -= 2;
                          v196 -= 8;
                          v197 -= 8;
                        }
                        while (v197);
                        v141 = v764;
                        if (v193 == (v193 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_239:
                          v169 = (float *)&v185[4 * v183];
                          *(_QWORD *)v789 = v186;
                          *(_QWORD *)&v789[8] = v174;
                          *(_QWORD *)&v789[16] = v169;
                          if (v168)
                            goto LABEL_240;
                          goto LABEL_241;
                        }
                      }
                      do
                      {
                        v190 = *((_DWORD *)v189-- - 1);
                        *((_DWORD *)v186-- - 1) = v190;
                      }
                      while (v189 != v168);
                      goto LABEL_239;
                    }
                  }
                  else
                  {
                    v185 = 0;
                    v186 = (float *)(4 * v181);
                    v191 = (float *)(4 * v181);
                    *v191 = v179;
                    v174 = v191 + 1;
                    v187 = (char *)v170 - (char *)v168;
                    if (v170 != v168)
                      goto LABEL_236;
                  }
                  v141 = v764;
                  v169 = (float *)&v185[4 * v183];
                  *(_QWORD *)v789 = v186;
                  *(_QWORD *)&v789[8] = v174;
                  *(_QWORD *)&v789[16] = v169;
                  if (v168)
                  {
LABEL_240:
                    operator delete(v168);
                    v167 = *v758;
                    v166 = v758[1];
                  }
LABEL_241:
                  v168 = v186;
                }
                *(_QWORD *)&v789[8] = v174;
                v170 = v174;
              }
              v171 = v173 + 1;
              if (v173 + 1 < (unint64_t)(((char *)v166 - (char *)v167) >> 3))
                continue;
              break;
            }
            v140 = v746;
            k = v739;
            v151 = v758;
LABEL_253:
            std::__sort<std::__less<float,float> &,float *>();
            v17 = v745;
            v199 = *(char **)v789;
            if (*(_QWORD *)&v789[8] - *(_QWORD *)v789 >= 5uLL)
            {
              v200 = 0;
              v201 = (uint64_t)(*(_QWORD *)&v789[8] - *(_QWORD *)v789) >> 2;
              do
              {
                v202 = (const float *)(v141 + 2160);
                v203 = vld1_dup_f32(v202);
                v204 = vmin_s32(vcvt_s32_f32(vrnda_f32(vdiv_f32(vsub_f32(*(float32x2_t *)&v199[4 * v200], v203), v142))), (int32x2_t)0x8F0000008FLL);
                if (v204.i32[1] >= 1)
                {
                  v205 = vmax_s32(v204, 0);
                  v206 = v205.i32[0];
                  if (v205.i32[0] != 143 && v205.i32[0] <= (unsigned __int32)v205.i32[1])
                  {
                    do
                      *(_BYTE *)(*(_QWORD *)(v141 + 2104)
                               + (*(_DWORD *)(v141 + 2120) * v206++ + *(_DWORD *)(v141 + 2124) * v165)) = v152;
                    while (v205.i32[1] + 1 != v206);
                  }
                }
                v200 += 2;
              }
              while ((v200 | 1uLL) < v201);
            }
            if (v199)
              operator delete(v199);
            _ZF = v165++ == v754;
            if (!_ZF)
              continue;
            break;
          }
        }
      }
      if ((*(_DWORD *)(v141 + 2112) != 144 || *(_DWORD *)(v141 + 2116) != 144)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 141, (uint64_t)"segmentation_map.Width() == CMM::kWindowSize && segmentation_map.Height() == CMM::kWindowSize", 93, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v208 = *(_QWORD *)(v141 + 2144);
      v209 = *(_QWORD *)(v141 + 2136);
      if (v208 != v209)
      {
        do
        {
          v210 = v208 - 24;
          sub_223198030(v208 - 24, *(_QWORD **)(v208 - 16));
          v208 = v210;
        }
        while (v210 != v209);
        v208 = *(_QWORD *)(v141 + 2136);
      }
      *(_QWORD *)(v141 + 2144) = v209;
      *(_OWORD *)&v771[8] = 0uLL;
      *(_QWORD *)v771 = &v771[8];
      v211 = v209 - v208;
      v212 = 0xAAAAAAAAAAAAAAABLL * ((v209 - v208) >> 3);
      if (v212 > 0x50F)
      {
        if (v211 == 31104)
        {
LABEL_302:
          sub_223198030((uint64_t)v771, *(_QWORD **)&v771[8]);
          v237 = (unsigned __int8 *)operator new(0x510uLL);
          v740 = v141 + 1472;
          v720 = (unsigned __int8 *)(v141 + 112);
          v715 = v141 + 2464;
          memset(v237, 255, 0x510uLL);
          v238 = 0;
          v239 = *(_DWORD *)(v141 + 2120);
          v747 = *(_DWORD *)(v141 + 2124);
          v755 = v237;
          do
          {
            v240 = 0;
            v241 = v238 * v747;
            v751 = v238;
            v242 = 36 * (v238 >> 2);
            v759 = v242;
            do
            {
              v243 = *(unsigned __int8 *)(*(_QWORD *)(v141 + 2104) + (v241 + v239 * v240));
              if ((_DWORD)v243 != 255)
              {
                v244 = v242 + (v240 >> 2);
                if ((_DWORD)v243 != v237[v244])
                {
                  v245 = *(_QWORD *)(v141 + 2136) + 24 * v244;
                  v246 = (unsigned __int8 *)(*(_QWORD *)(v141 + 2176) + 16 * v243);
                  v248 = (void **)(v245 + 8);
                  v247 = *(_QWORD *)(v245 + 8);
                  v249 = (char **)(v245 + 8);
                  v250 = v245 + 8;
                  if (v247)
                  {
                    v251 = *v246;
                    while (1)
                    {
                      v250 = v247;
                      v252 = *(unsigned __int8 *)(v247 + 25);
                      v253 = v251 >= v252;
                      if (v251 != v252)
                        break;
                      v254 = v246[1];
                      v252 = *(unsigned __int8 *)(v250 + 26);
                      v253 = v254 >= v252;
                      if (v254 != v252)
                        goto LABEL_343;
                      v254 = v246[2];
                      v252 = *(unsigned __int8 *)(v250 + 27);
                      v253 = v254 >= v252;
                      if (v254 != v252)
                        goto LABEL_343;
                      v254 = v246[3];
                      v252 = *(unsigned __int8 *)(v250 + 28);
                      v253 = v254 >= v252;
                      if (v254 != v252)
                        goto LABEL_343;
                      v254 = v246[4];
                      v252 = *(unsigned __int8 *)(v250 + 29);
                      v253 = v254 >= v252;
                      if (v254 != v252)
                        goto LABEL_343;
                      v254 = v246[5];
                      v252 = *(unsigned __int8 *)(v250 + 30);
                      v253 = v254 >= v252;
                      if (v254 != v252)
                        goto LABEL_343;
                      v254 = v246[6];
                      v252 = *(unsigned __int8 *)(v250 + 31);
                      v253 = v254 >= v252;
                      if (v254 == v252
                        && (v254 = v246[7], v252 = *(unsigned __int8 *)(v250 + 32), v253 = v254 >= v252, v254 == v252))
                      {
                        v255 = v246[8];
                        v256 = *(unsigned __int8 *)(v250 + 33);
                        if (v255 == v256)
                        {
                          v255 = v246[9];
                          v256 = *(unsigned __int8 *)(v250 + 34);
                          if (v255 == v256)
                          {
                            v255 = v246[10];
                            v256 = *(unsigned __int8 *)(v250 + 35);
                            if (v255 == v256)
                            {
                              v255 = v246[11];
                              v256 = *(unsigned __int8 *)(v250 + 36);
                              if (v255 == v256)
                              {
                                v255 = v246[12];
                                v256 = *(unsigned __int8 *)(v250 + 37);
                                if (v255 == v256)
                                {
                                  v255 = v246[13];
                                  v256 = *(unsigned __int8 *)(v250 + 38);
                                  if (v255 == v256)
                                  {
                                    v255 = v246[14];
                                    v256 = *(unsigned __int8 *)(v250 + 39);
                                    if (v255 == v256)
                                    {
                                      v255 = v246[15];
                                      v256 = *(unsigned __int8 *)(v250 + 40);
                                      if (v255 == v256)
                                        goto LABEL_333;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        if (v255 >= v256)
                        {
LABEL_333:
                          v252 = *(unsigned __int8 *)(v250 + 33);
                          v254 = v246[8];
                          if (v252 == v254)
                          {
                            v252 = *(unsigned __int8 *)(v250 + 34);
                            v254 = v246[9];
                            if (v252 == v254)
                            {
                              v252 = *(unsigned __int8 *)(v250 + 35);
                              v254 = v246[10];
                              if (v252 == v254)
                              {
                                v252 = *(unsigned __int8 *)(v250 + 36);
                                v254 = v246[11];
                                if (v252 == v254)
                                {
                                  v252 = *(unsigned __int8 *)(v250 + 37);
                                  v254 = v246[12];
                                  if (v252 == v254)
                                  {
                                    v252 = *(unsigned __int8 *)(v250 + 38);
                                    v254 = v246[13];
                                    if (v252 == v254)
                                    {
                                      v252 = *(unsigned __int8 *)(v250 + 39);
                                      v254 = v246[14];
                                      if (v252 == v254)
                                      {
                                        v252 = *(unsigned __int8 *)(v250 + 40);
                                        v254 = v246[15];
                                        if (v252 == v254)
                                          goto LABEL_309;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_345;
                        }
LABEL_315:
                        v247 = *(_QWORD *)v250;
                        v249 = (char **)v250;
                        if (!*(_QWORD *)v250)
                          goto LABEL_348;
                      }
                      else
                      {
LABEL_343:
                        if (!v253)
                          goto LABEL_315;
LABEL_345:
                        if (v252 >= v254)
                          goto LABEL_309;
                        v247 = *(_QWORD *)(v250 + 8);
                        if (!v247)
                        {
                          v249 = (char **)(v250 + 8);
                          goto LABEL_348;
                        }
                      }
                    }
                    v254 = *v246;
                    goto LABEL_343;
                  }
LABEL_348:
                  v257 = (char *)operator new(0x30uLL);
                  *(_OWORD *)(v257 + 25) = *(_OWORD *)v246;
                  *(_QWORD *)v257 = 0;
                  *((_QWORD *)v257 + 1) = 0;
                  *((_QWORD *)v257 + 2) = v250;
                  *v249 = v257;
                  v258 = **(_QWORD **)v245;
                  if (v258)
                  {
                    *(_QWORD *)v245 = v258;
                    v257 = *v249;
                  }
                  v259 = (char *)*v248;
                  _ZF = v257 == *v248;
                  v257[24] = _ZF;
                  if (!_ZF)
                  {
                    do
                    {
                      v260 = *((_QWORD *)v257 + 2);
                      if (*(_BYTE *)(v260 + 24))
                        break;
                      v261 = *(char **)(v260 + 16);
                      v262 = *(_QWORD *)v261;
                      if (*(_QWORD *)v261 == v260)
                      {
                        v265 = *((_QWORD *)v261 + 1);
                        if (!v265 || (v266 = *(unsigned __int8 *)(v265 + 24), v263 = (_BYTE *)(v265 + 24), v266))
                        {
                          if (*(char **)v260 == v257)
                          {
                            *(_BYTE *)(v260 + 24) = 1;
                            v261[24] = 0;
                            v269 = *(_QWORD *)(v260 + 8);
                            *(_QWORD *)v261 = v269;
                            if (v269)
                              goto LABEL_365;
                          }
                          else
                          {
                            v267 = *(uint64_t **)(v260 + 8);
                            v268 = *v267;
                            *(_QWORD *)(v260 + 8) = *v267;
                            if (v268)
                            {
                              *(_QWORD *)(v268 + 16) = v260;
                              v261 = *(char **)(v260 + 16);
                            }
                            v267[2] = (uint64_t)v261;
                            *(_QWORD *)(*(_QWORD *)(v260 + 16) + 8 * (**(_QWORD **)(v260 + 16) != v260)) = v267;
                            *v267 = v260;
                            *(_QWORD *)(v260 + 16) = v267;
                            v261 = (char *)v267[2];
                            v260 = *(_QWORD *)v261;
                            *((_BYTE *)v267 + 24) = 1;
                            v261[24] = 0;
                            v269 = *(_QWORD *)(v260 + 8);
                            *(_QWORD *)v261 = v269;
                            if (v269)
LABEL_365:
                              *(_QWORD *)(v269 + 16) = v261;
                          }
                          *(_QWORD *)(v260 + 16) = *((_QWORD *)v261 + 2);
                          *(_QWORD *)(*((_QWORD *)v261 + 2) + 8 * (**((_QWORD **)v261 + 2) != (_QWORD)v261)) = v260;
                          *(_QWORD *)(v260 + 8) = v261;
LABEL_307:
                          *((_QWORD *)v261 + 2) = v260;
                          break;
                        }
                      }
                      else if (!v262 || (v264 = *(unsigned __int8 *)(v262 + 24), v263 = (_BYTE *)(v262 + 24), v264))
                      {
                        if (*(char **)v260 == v257)
                        {
                          v271 = *((_QWORD *)v257 + 1);
                          *(_QWORD *)v260 = v271;
                          if (v271)
                          {
                            *(_QWORD *)(v271 + 16) = v260;
                            v261 = *(char **)(v260 + 16);
                          }
                          *((_QWORD *)v257 + 2) = v261;
                          *(_QWORD *)(*(_QWORD *)(v260 + 16) + 8 * (**(_QWORD **)(v260 + 16) != v260)) = v257;
                          *((_QWORD *)v257 + 1) = v260;
                          *(_QWORD *)(v260 + 16) = v257;
                          v261 = (char *)*((_QWORD *)v257 + 2);
                          v257[24] = 1;
                          v261[24] = 0;
                          v260 = *((_QWORD *)v261 + 1);
                          v270 = *(char **)v260;
                          *((_QWORD *)v261 + 1) = *(_QWORD *)v260;
                          if (!v270)
                            goto LABEL_306;
                        }
                        else
                        {
                          *(_BYTE *)(v260 + 24) = 1;
                          v261[24] = 0;
                          v260 = *((_QWORD *)v261 + 1);
                          v270 = *(char **)v260;
                          *((_QWORD *)v261 + 1) = *(_QWORD *)v260;
                          if (!v270)
                            goto LABEL_306;
                        }
                        *((_QWORD *)v270 + 2) = v261;
LABEL_306:
                        *(_QWORD *)(v260 + 16) = *((_QWORD *)v261 + 2);
                        *(_QWORD *)(*((_QWORD *)v261 + 2) + 8 * (**((_QWORD **)v261 + 2) != (_QWORD)v261)) = v260;
                        *(_QWORD *)v260 = v261;
                        goto LABEL_307;
                      }
                      *(_BYTE *)(v260 + 24) = 1;
                      v257 = v261;
                      v261[24] = v261 == v259;
                      *v263 = 1;
                    }
                    while (v261 != v259);
                  }
                  ++*(_QWORD *)(v245 + 16);
LABEL_309:
                  v237 = v755;
                  v755[v244] = v243;
                  v141 = v764;
                  v242 = v759;
                }
              }
              ++v240;
            }
            while (v240 != 144);
            v238 = v751 + 1;
          }
          while (v751 != 143);
          operator delete(v237);
          *(_QWORD *)v789 = "cv3d.recon.";
          *(_QWORD *)&v789[8] = 11;
          *(_QWORD *)&v789[16] = "Stats.KFCluster.Times.RoomMapping";
          *(_QWORD *)&v789[24] = 33;
          sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v771);
          sub_224569D7C();
          v272 = v727;
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v273 = sub_2241471F8();
            v274 = v273[2];
            if (!v274)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v274 = v273[2];
            }
            v275 = *(_QWORD *)(v274 + 64);
            v276 = (std::mutex *)(v275 + 32);
            std::mutex::lock((std::mutex *)(v275 + 32));
            v278 = *(_QWORD *)(v275 + 96);
            v277 = *(_QWORD *)(v275 + 104);
            std::mutex::unlock(v276);
            if (v278 != v277)
            {
              sub_2241471F8();
              v279 = v745;
              v280 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              v141 = v764;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v280 + 24))(v280))
              {
                memset(v789, 0, 32);
                *(_DWORD *)&v789[32] = 728325608;
                kdebug_trace();
                v281 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v717.__d_.__rep_) / 1000000.0;
                v717.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                *(float *)&v772 = v281;
                sub_2238B03DC((double *)&qword_255788F20, v280, (float *)&v772, "room_mapping");
                kdebug_trace();
              }
LABEL_385:
              memset(v789, 0, 32);
              *(_DWORD *)&v789[32] = 728325624;
              kdebug_trace();
              v282 = v771[23];
              if (v771[23] < 0)
                v282 = *(_QWORD *)&v771[8];
              if (v282 >= 0x11)
              {
                v283 = v771;
                if (v771[23] < 0)
                  v283 = *(_BYTE **)v771;
                v284 = *(_QWORD *)v283;
                v285 = *((_QWORD *)v283 + 1);
                v286 = v283[16];
                _ZF = v284 == 0x6365722E64337663 && v285 == 0x73746174532E6E6FLL;
                if (_ZF && v286 == 46)
                {
                  v289 = sub_223187510();
                  if (v771[23] >= 0)
                    v290 = v771;
                  else
                    v290 = *(_BYTE **)v771;
                  if (v771[23] >= 0)
                    v291 = v771[23];
                  else
                    v291 = *(_QWORD *)&v771[8];
                  v292 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v717.__d_.__rep_) / 1000000.0;
                  std::chrono::steady_clock::now();
                  *(float *)&v772 = v292;
                  sub_2231897A8((uint64_t *)v289, v290, v291, (float *)&v772, (uint64_t)"room_mapping", 12);
                  v279 = v745;
                  v272 = v727;
                }
              }
              kdebug_trace();
              if ((v771[23] & 0x80000000) != 0)
                operator delete(*(void **)v771);
              sub_2233FADDC(*(_QWORD **)&v775[8]);
              if (v731)
                operator delete(v731);
              kdebug_trace();
              memset(v788, 0, 32);
              *(_DWORD *)&v788[32] = 728333916;
              kdebug_trace();
              *(_QWORD *)v775 = *(_QWORD *)(v141 + 1368);
              v293 = operator new(0x40uLL);
              *(_QWORD *)&v789[16] = v293 + 4;
              v294 = *(_OWORD *)(v740 + 16);
              *v293 = *(_OWORD *)v740;
              v293[1] = v294;
              v295 = *(_OWORD *)(v740 + 48);
              v293[2] = *(_OWORD *)(v740 + 32);
              v293[3] = v295;
              *(_QWORD *)v789 = v293;
              *(_QWORD *)&v789[8] = v293 + 4;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
              strcpy((char *)&__p, "ClusterMappingManager");
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *, _BYTE *, uint64_t, std::string *))(*(_QWORD *)v735 + 24))(v771, v735, v775, v789, v141 + 1376, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(_QWORD *)v789)
              {
                *(_QWORD *)&v789[8] = *(_QWORD *)v789;
                operator delete(*(void **)v789);
              }
              v297 = *(char **)&v771[8];
              v296 = *(char **)v771;
              if (*(_QWORD *)v771 != *(_QWORD *)&v771[8])
              {
                v298 = **(_QWORD **)v771;
                if (!**(_QWORD **)v771)
                  goto LABEL_443;
                if (!*(_DWORD *)(v141 + 1992) || !*(_DWORD *)(v141 + 1996))
                {
                  LODWORD(v772) = -947920896;
                  *(_QWORD *)v789 = &off_24EC28BC8;
                  sub_22321B174((_DWORD *)(v298 + 64), &v772, (uint64_t *)v775);
                  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v775;
                  if (*(_QWORD *)v775)
                  {
                    v299 = (_QWORD *)operator new();
                    v300 = *(_QWORD *)v775;
                    *v299 = &off_24EC21890;
                    v299[1] = 0;
                    v299[2] = 0;
                    v299[3] = v300;
                  }
                  else
                  {
                    v299 = 0;
                  }
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v299;
                  *(_QWORD *)v775 = 0;
                  sub_2232C24E8((uint64_t *)&v789[8], (uint64_t *)&__p);
                  v301 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_)
                  {
                    v302 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                    do
                      v303 = __ldaxr(v302);
                    while (__stlxr(v303 - 1, v302));
                    if (!v303)
                    {
                      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                      std::__shared_weak_count::__release_weak(v301);
                    }
                  }
                  v304 = *(_QWORD *)v775;
                  *(_QWORD *)v775 = 0;
                  if (v304)
                  {
                    v305 = *(void **)(v304 + 48);
                    if (v305)
                      free(v305);
                    *(_QWORD *)(v304 + 48) = 0;
                    MEMORY[0x227684CE8](v304, 0x1091C406A8758A4);
                  }
                  v306 = *(_OWORD *)&v789[8];
                  *(_QWORD *)&v789[8] = 0;
                  *(_QWORD *)&v789[16] = 0;
                  v307 = *(std::__shared_weak_count **)(v141 + 1976);
                  *(_OWORD *)(v141 + 1968) = v306;
                  if (v307)
                  {
                    v308 = (unint64_t *)&v307->__shared_owners_;
                    do
                      v309 = __ldaxr(v308);
                    while (__stlxr(v309 - 1, v308));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                      std::__shared_weak_count::__release_weak(v307);
                    }
                  }
                  *(_OWORD *)(v141 + 1984) = *(_OWORD *)&v789[24];
                  *(_OWORD *)(v141 + 1994) = *(_OWORD *)&v789[34];
                  *(_QWORD *)v789 = &off_24EC28BC8;
                  v310 = *(std::__shared_weak_count **)&v789[16];
                  if (*(_QWORD *)&v789[16])
                  {
                    v311 = (unint64_t *)(*(_QWORD *)&v789[16] + 8);
                    do
                      v312 = __ldaxr(v311);
                    while (__stlxr(v312 - 1, v311));
                    if (!v312)
                    {
                      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                      std::__shared_weak_count::__release_weak(v310);
                    }
                  }
                  v298 = **(_QWORD **)v771;
                }
                sub_223523778(v298, v141 + 1960);
                v313 = *(_OWORD *)(v740 + 16);
                *(_OWORD *)(v141 + 2016) = *(_OWORD *)v740;
                *(_OWORD *)(v141 + 2032) = v313;
                v314 = *(_OWORD *)(v740 + 48);
                *(_OWORD *)(v141 + 2048) = *(_OWORD *)(v740 + 32);
                *(_OWORD *)(v141 + 2064) = v314;
                v296 = *(char **)v771;
              }
              if (!v296)
                goto LABEL_463;
              v297 = *(char **)&v771[8];
LABEL_443:
              if (v297 == v296)
              {
LABEL_462:
                *(_QWORD *)&v771[8] = v296;
                operator delete(v297);
LABEL_463:
                kdebug_trace();
                v772 = 0u;
                v773 = 0u;
                v774 = 728333908;
                kdebug_trace();
                *(_DWORD *)v788 = 897988541;
                *(_QWORD *)v789 = v788;
                if ((sub_22370CDB4((float *)v740, (float *)(v141 + 2016), (float **)v789) & 1) == 0
                  || !*(_BYTE *)(v141 + 760)
                  || !*(_DWORD *)(v141 + 1992)
                  || !*(_DWORD *)(v141 + 1996)
                  || !*(_BYTE *)(v141 + 128))
                {
                  goto LABEL_475;
                }
                sub_223C3BCBC(v728, (uint64_t)v789);
                if (v789[56])
                {
                  sub_223C3BCBC(v728, (uint64_t)v788);
                  *(_QWORD *)v771 = &off_24EC21230;
                  *(_OWORD *)&v771[8] = *(_OWORD *)&v788[8];
                  *(_OWORD *)&v771[24] = *(_OWORD *)&v788[24];
                  *(_OWORD *)&v771[34] = *(_OWORD *)&v788[34];
                  if (v789[56])
                  {
                    v324 = *(std::__shared_weak_count **)&v789[16];
                    if (*(_QWORD *)&v789[16])
                    {
                      v325 = (unint64_t *)(*(_QWORD *)&v789[16] + 8);
                      do
                        v326 = __ldaxr(v325);
                      while (__stlxr(v326 - 1, v325));
                      if (!v326)
                      {
                        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                        std::__shared_weak_count::__release_weak(v324);
                      }
                    }
                  }
                }
                else
                {
                  *(_QWORD *)v771 = &off_24EC21230;
                  memset(&v771[8], 0, 42);
                }
                if (!*(_BYTE *)(v141 + 760))
                  sub_22324A974();
                *(_QWORD *)v788 = &off_24EC200A8;
                v487 = *(_QWORD *)(v141 + 712);
                v488 = *(std::__shared_weak_count **)(v141 + 720);
                if (v488)
                {
                  v489 = (unint64_t *)&v488->__shared_owners_;
                  do
                    v490 = __ldxr(v489);
                  while (__stxr(v490 + 1, v489));
                  v491 = *(_WORD *)(v764 + 752);
                  do
                    v492 = __ldxr(v489);
                  while (__stxr(v492 + 1, v489));
                  *(_OWORD *)&v788[24] = *(_OWORD *)(v764 + 728);
                  *(_QWORD *)&v788[40] = *(_QWORD *)(v764 + 744);
                  do
                    v493 = __ldxr(v489);
                  while (__stxr(v493 + 1, v489));
                  *(_QWORD *)&v788[8] = v487;
                  *(_QWORD *)&v788[16] = v488;
                  *(_WORD *)&v788[48] = v491;
                  do
                    v494 = __ldaxr(v489);
                  while (__stlxr(v494 - 1, v489));
                  if (!v494)
                  {
                    ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
                    std::__shared_weak_count::__release_weak(v488);
                  }
                  do
                    v495 = __ldaxr(v489);
                  while (__stlxr(v495 - 1, v489));
                  v141 = v764;
                  if (!v495)
                  {
                    ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
                    std::__shared_weak_count::__release_weak(v488);
                  }
                }
                else
                {
                  v496 = *(_WORD *)(v141 + 752);
                  *(_QWORD *)&v788[8] = *(_QWORD *)(v141 + 712);
                  *(_QWORD *)&v788[16] = 0;
                  *(_QWORD *)&v788[40] = *(_QWORD *)(v141 + 744);
                  *(_OWORD *)&v788[24] = *(_OWORD *)(v141 + 728);
                  *(_WORD *)&v788[48] = v496;
                }
                v497 = (int32x4_t *)(v141 + 1992);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21230;
                v498 = *(_QWORD *)(v141 + 1968);
                v499 = *(std::__shared_weak_count **)(v141 + 1976);
                if (v499)
                {
                  v500 = (unint64_t *)&v499->__shared_owners_;
                  do
                    v501 = __ldxr(v500);
                  while (__stxr(v501 + 1, v500));
                  v502 = *(_WORD *)(v141 + 2008);
                  do
                    v503 = __ldxr(v500);
                  while (__stxr(v503 + 1, v500));
                  v504 = *(_QWORD *)(v141 + 1984);
                  v505 = *v497;
                  v767 = *v497;
                  do
                    v506 = __ldxr(v500);
                  while (__stxr(v506 + 1, v500));
                  __p.__r_.__value_.__l.__size_ = v498;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v499;
                  v766 = v504;
                  v768 = v502;
                  do
                    v507 = __ldaxr(v500);
                  while (__stlxr(v507 - 1, v500));
                  if (!v507)
                  {
                    ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                    std::__shared_weak_count::__release_weak(v499);
                  }
                  do
                    v508 = __ldaxr(v500);
                  while (__stlxr(v508 - 1, v500));
                  if (!v508)
                  {
                    ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                    std::__shared_weak_count::__release_weak(v499);
                  }
                }
                else
                {
                  v509 = *(_WORD *)(v141 + 2008);
                  v510 = *(_QWORD *)(v141 + 1984);
                  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(unint64_t *)(v141 + 1968);
                  v766 = v510;
                  v505 = *v497;
                  v767 = *v497;
                  v768 = v509;
                }
                v505.i64[0] = *(_QWORD *)v740;
                *(int32x4_t *)v762 = v505;
                v505.i32[2] = *(_DWORD *)(v740 + 8);
                v729 = v505;
                v505.i64[0] = *(_QWORD *)(v740 + 16);
                v749 = v505;
                v505.i32[2] = *(_DWORD *)(v740 + 24);
                v718 = v505;
                v505.i32[0] = *(_DWORD *)(v740 + 40);
                v737 = *(float32x2_t *)v505.i8;
                v505.i64[0] = *(_QWORD *)(v740 + 32);
                v753 = (int8x16_t)v505;
                v505.i64[0] = *(_QWORD *)(v740 + 48);
                v505.i32[2] = *(_DWORD *)(v740 + 56);
                *(int32x4_t *)v733 = v505;
                v511 = *(float *)(v141 + 2496);
                v512 = *(float *)(v141 + 2500);
                v513 = *(unsigned __int8 *)(v141 + 2509);
                v514 = operator new(0x20uLL);
                v778 = v514;
                v779 = xmmword_2245C6440;
                strcpy((char *)v514, "MeshingEngine.ClusterMapping");
                if (*(_DWORD *)&v771[32])
                  v515 = *(_DWORD *)&v771[36] == 0;
                else
                  v515 = 1;
                v516 = v515;
                v757 = v516;
                *(_QWORD *)v789 = "cv3d.recon.";
                *(_QWORD *)&v789[8] = 11;
                *(_QWORD *)&v789[16] = v514;
                *(_QWORD *)&v789[24] = 28;
                sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)&v784);
                sub_224569D7C();
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v517 = sub_2241471F8();
                  v518 = v517[2];
                  if (!v518)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v518 = v517[2];
                  }
                  v519 = *(_QWORD *)(v518 + 64);
                  v520 = (std::mutex *)(v519 + 32);
                  std::mutex::lock((std::mutex *)(v519 + 32));
                  v522 = *(_QWORD *)(v519 + 96);
                  v521 = *(_QWORD *)(v519 + 104);
                  std::mutex::unlock(v520);
                  if (v522 != v521)
                  {
                    sub_2241471F8();
                    v523 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v523 + 24))(v523))
                    {
                      memset(v789, 0, 32);
                      *(_DWORD *)&v789[32] = 728325608;
                      kdebug_trace();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v523 + 24))(v523))
                      {
                        v775[23] = 14;
                        strcpy(v775, "mesh_depth_new");
                        *(_QWORD *)&v786 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                        *((_QWORD *)&v786 + 1) = 2;
                        v524 = sub_2241471F8();
                        sub_22390BF54((uint64_t)v524, v523, (uint64_t)v788, (uint64_t)v775, &v786);
                        if ((v775[23] & 0x80000000) != 0)
                          operator delete(*(void **)v775);
                      }
                      kdebug_trace();
                    }
                  }
                }
                memset(v789, 0, 32);
                *(_DWORD *)&v789[32] = 728325624;
                kdebug_trace();
                v525 = v785[7];
                if (v785[7] < 0)
                  v525 = *((_QWORD *)&v784 + 1);
                if (v525 >= 0x11)
                {
                  v526 = &v784;
                  if (v785[7] < 0)
                    v526 = (__int128 *)v784;
                  v527 = *(_QWORD *)v526;
                  v528 = *((_QWORD *)v526 + 1);
                  v529 = *((unsigned __int8 *)v526 + 16);
                  if (v527 == 0x6365722E64337663 && v528 == 0x73746174532E6E6FLL && v529 == 46)
                    sub_223187510();
                }
                kdebug_trace();
                if ((v785[7] & 0x80000000) != 0)
                  operator delete((void *)v784);
                *(_QWORD *)v789 = "cv3d.recon.";
                *(_QWORD *)&v789[8] = 11;
                v532 = HIBYTE(v779);
                v533 = &v778;
                if (v779 < 0)
                {
                  v533 = v778;
                  v532 = v779;
                }
                *(_QWORD *)&v789[16] = v533;
                *(_QWORD *)&v789[24] = v532;
                sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v775);
                sub_224569D7C();
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v534 = sub_2241471F8();
                  v535 = v534[2];
                  if (!v535)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v535 = v534[2];
                  }
                  v536 = *(_QWORD *)(v535 + 64);
                  v537 = (std::mutex *)(v536 + 32);
                  std::mutex::lock((std::mutex *)(v536 + 32));
                  v539 = *(_QWORD *)(v536 + 96);
                  v538 = *(_QWORD *)(v536 + 104);
                  std::mutex::unlock(v537);
                  if (v539 != v538)
                  {
                    sub_2241471F8();
                    v540 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v540 + 24))(v540))
                    {
                      memset(v789, 0, 32);
                      *(_DWORD *)&v789[32] = 728325608;
                      kdebug_trace();
                      sub_223AB5C4C((double *)&qword_255788F20, v540, (uint64_t)&__p, "depth_baseline");
                      kdebug_trace();
                    }
                  }
                }
                memset(v789, 0, 32);
                *(_DWORD *)&v789[32] = 728325624;
                kdebug_trace();
                v541 = v775[23];
                if (v775[23] < 0)
                  v541 = *(_QWORD *)&v775[8];
                if (v541 >= 0x11)
                {
                  v542 = v775;
                  if (v775[23] < 0)
                    v542 = *(_BYTE **)v775;
                  v543 = *(_QWORD *)v542;
                  v544 = *((_QWORD *)v542 + 1);
                  v545 = v542[16];
                  if (v543 == 0x6365722E64337663 && v544 == 0x73746174532E6E6FLL && v545 == 46)
                    sub_223187510();
                }
                kdebug_trace();
                if ((v775[23] & 0x80000000) != 0)
                  operator delete(*(void **)v775);
                if ((v757 & 1) == 0)
                {
                  *(_QWORD *)v789 = "cv3d.recon.";
                  *(_QWORD *)&v789[8] = 11;
                  v548 = HIBYTE(v779);
                  v549 = &v778;
                  if (v779 < 0)
                  {
                    v549 = v778;
                    v548 = v779;
                  }
                  *(_QWORD *)&v789[16] = v549;
                  *(_QWORD *)&v789[24] = v548;
                  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)&v784);
                  sub_224569D7C();
                  sub_224569A80();
                  if (os_variant_has_internal_diagnostics())
                  {
                    v550 = sub_2241471F8();
                    v551 = v550[2];
                    if (!v551)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v551 = v550[2];
                    }
                    v552 = *(_QWORD *)(v551 + 64);
                    v553 = (std::mutex *)(v552 + 32);
                    std::mutex::lock((std::mutex *)(v552 + 32));
                    v555 = *(_QWORD *)(v552 + 96);
                    v554 = *(_QWORD *)(v552 + 104);
                    std::mutex::unlock(v553);
                    if (v555 != v554)
                    {
                      sub_2241471F8();
                      v556 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v556 + 24))(v556))
                      {
                        memset(v789, 0, 32);
                        *(_DWORD *)&v789[32] = 728325608;
                        kdebug_trace();
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v556 + 24))(v556))
                        {
                          v775[23] = 17;
                          strcpy(v775, "active depth mask");
                          *(_QWORD *)&v786 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                          *((_QWORD *)&v786 + 1) = 2;
                          v557 = sub_2241471F8();
                          sub_22390B564((uint64_t)v557, v556, (uint64_t)v771, (uint64_t)v775, &v786);
                          if ((v775[23] & 0x80000000) != 0)
                            operator delete(*(void **)v775);
                        }
                        kdebug_trace();
                      }
                    }
                  }
                  memset(v789, 0, 32);
                  *(_DWORD *)&v789[32] = 728325624;
                  kdebug_trace();
                  v558 = v785[7];
                  if (v785[7] < 0)
                    v558 = *((_QWORD *)&v784 + 1);
                  if (v558 >= 0x11)
                  {
                    v559 = &v784;
                    if (v785[7] < 0)
                      v559 = (__int128 *)v784;
                    v560 = *(_QWORD *)v559;
                    v561 = *((_QWORD *)v559 + 1);
                    v562 = *((unsigned __int8 *)v559 + 16);
                    if (v560 == 0x6365722E64337663 && v561 == 0x73746174532E6E6FLL && v562 == 46)
                      sub_223187510();
                  }
                  kdebug_trace();
                  if ((v785[7] & 0x80000000) != 0)
                    operator delete((void *)v784);
                }
                v769 = 0uLL;
                v770 = 0;
                v565 = v767.i32[0];
                v566 = v767.i32[1];
                v567 = vcvtps_u32_f32((float)(v767.i32[1] * v767.i32[0]) * 0.03125);
                v712 = v767.i32[1];
                if (v567)
                {
                  if (v567 > 0x1555555555555555)
                    sub_22316E078();
                  v568 = (char *)operator new(12 * v567);
                  v569 = &v568[12 * v567];
                  *(_QWORD *)&v769 = v568;
                  *((_QWORD *)&v769 + 1) = v568;
                  v770 = v569;
                  v566 = v712;
                }
                else
                {
                  v569 = 0;
                  v568 = 0;
                }
                if (!v566 || (v513 ? (v570 = 0.8) : (v570 = 0.4), !v565))
                {
                  v611 = (uint64_t *)v568;
                  goto LABEL_926;
                }
                v571 = 0;
                v572 = (int8x16_t)vnegq_f32(*(float32x4_t *)v733);
                v573 = (float32x2_t)vtrn2q_s32(v729, v718).u64[0];
                v574 = (float32x2_t)vzip2q_s32(v729, v718).u64[0];
                v579 = v753;
                *(float32x2_t *)v575.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v762[0], *(int32x2_t *)v749.i8), *(float *)v572.i32), v573, (float32x2_t)v733[0], 1), v574, *(float32x4_t *)v733, 2);
                v576 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v753.i8, *(float32x2_t *)v572.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v753.i8, 1), (float32x2_t)v733[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v572, v572, 8uLL), v737);
                v577 = (int8x16_t)vdupq_lane_s32((int32x2_t)v573, 1);
                v578 = (int8x16_t)vdupq_lane_s32((int32x2_t)v573, 0);
                v579.i32[2] = v737.i32[0];
                v730 = (float32x2_t)vextq_s8(v578, v577, 0xCuLL).u64[0];
                v734 = (float32x2_t)vzip1q_s32(*(int32x4_t *)v762, v749).u64[0];
                *(float32x2_t *)&v575.u32[2] = v576;
                v738 = v575;
                v742 = v574;
                v580 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v753.i8, 1);
                v719 = (float32x2_t)vextq_s8(v579, v579, 8uLL).u64[0];
                v581 = v568;
                do
                {
                  if (v757)
                    v582 = 0;
                  else
                    v582 = *(_QWORD *)&v771[24] + 4 * (*(_DWORD *)&v771[44] * v571);
                  v583 = v767.u32[0];
                  if (v767.i32[0])
                  {
                    v584 = 0;
                    v585 = *(_DWORD *)&v788[40];
                    v586 = *(_QWORD *)&v788[24] + 2 * (*(_DWORD *)&v788[44] * v571);
                    v587 = v767.i32[2];
                    v588 = v766 + 4 * (v767.i32[3] * v571);
                    *(float *)v579.i32 = (float)v571;
                    do
                    {
                      if (v582)
                        v589 = *(float *)(v582 + 4 * v584);
                      else
                        v589 = 3.4028e38;
                      _H0 = *(_WORD *)(v586 + 2 * (v585 * v584));
                      __asm { FCVT            S1, H0 }
                      v593 = *(float *)(v588 + 4 * (v587 * v584));
                      if (_S1 == -65504.0 || v593 == -65504.0 || v589 > 10.0 || v593 < v511 || v593 > v512)
                        goto LABEL_894;
                      if (v593 <= 3.5)
                      {
                        if (vabds_f32(_S1, v593) <= 0.16)
                          goto LABEL_894;
                      }
                      else if (v593 <= 4.5)
                      {
                        if (vabds_f32(_S1, v593) <= (float)((float)((float)(v593 + -3.5)
                                                                   * (float)((float)(v570 * 0.5) * (float)(v593 + -3.5)))
                                                           + 0.16))
                          goto LABEL_894;
                      }
                      else if (vabds_f32(_S1, v593) <= (float)((float)((float)((float)(v570 * 0.5)
                                                                              + (float)(v570 * -4.5))
                                                                      + 0.16)
                                                              + (float)(v570 * v593)))
                      {
                        goto LABEL_894;
                      }
                      *(float *)v578.i32 = (float)(int)v584;
                      v578.i32[1] = v579.i32[0];
                      *(float32x2_t *)v578.i8 = vadd_f32(vmul_f32(*(float32x2_t *)(v764 + 1408), *(float32x2_t *)v578.i8), *(float32x2_t *)(v764 + 1416));
                      v578.i32[2] = 1.0;
                      v598 = (int8x16_t)vmulq_n_f32((float32x4_t)v578, v593);
                      *(float32x2_t *)v578.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v734, *(float *)v598.i32), v730, *(float32x2_t *)v598.i8, 1), v742, (float32x4_t)v598, 2);
                      v578.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v753.i8, *(float32x2_t *)v598.i8), v580, *(float32x2_t *)v598.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v598, v598, 8uLL), v719);
                      v599 = vaddq_f32(v738, (float32x4_t)v578);
                      if (v568 >= v569)
                      {
                        v600 = v581;
                        v601 = 0xAAAAAAAAAAAAAAABLL * ((v568 - v581) >> 2);
                        v602 = v601 + 1;
                        if (v601 + 1 > 0x1555555555555555)
                        {
                          *((_QWORD *)&v769 + 1) = v568;
                          v770 = v569;
                          *(_QWORD *)&v769 = v600;
                          sub_22316E078();
                        }
                        v763 = v600;
                        v603 = 0xAAAAAAAAAAAAAAABLL * ((v569 - v600) >> 2);
                        if (2 * v603 > v602)
                          v602 = 2 * v603;
                        if (v603 >= 0xAAAAAAAAAAAAAAALL)
                          v604 = 0x1555555555555555;
                        else
                          v604 = v602;
                        v714 = v571;
                        v750 = v579;
                        if (v604)
                        {
                          v711 = v599;
                          if (v604 > 0x1555555555555555)
                          {
                            *((_QWORD *)&v769 + 1) = v568;
                            v770 = v569;
                            *(_QWORD *)&v769 = v763;
                            sub_223174E94();
                          }
                          v605 = v604;
                          v606 = (char *)operator new(12 * v604);
                          v579 = v750;
                          v604 = v605;
                          v599 = v711;
                        }
                        else
                        {
                          v606 = 0;
                        }
                        v607 = &v606[12 * v601];
                        *(_QWORD *)v607 = v599.i64[0];
                        *((_DWORD *)v607 + 2) = v599.i32[2];
                        v581 = v607;
                        if (v568 == v763)
                        {
                          v608 = v763;
                          v569 = &v606[12 * v604];
                          v568 = v607 + 12;
                          if (v763)
                            goto LABEL_920;
                        }
                        else
                        {
                          v608 = v763;
                          do
                          {
                            v609 = *(_QWORD *)(v568 - 12);
                            v568 -= 12;
                            v610 = *((_DWORD *)v568 + 2);
                            *(_QWORD *)(v581 - 12) = v609;
                            v581 -= 12;
                            *((_DWORD *)v581 + 2) = v610;
                          }
                          while (v568 != v763);
                          v569 = &v606[12 * v604];
                          v568 = v607 + 12;
                          if (v763)
                          {
LABEL_920:
                            v713 = v569;
                            operator delete(v608);
                            v579 = v750;
                            v569 = v713;
                          }
                        }
                        v566 = v712;
                        v571 = v714;
                        goto LABEL_894;
                      }
                      *((_DWORD *)v568 + 2) = v599.i32[2];
                      *(_QWORD *)v568 = v599.i64[0];
                      v568 += 12;
LABEL_894:
                      ++v584;
                    }
                    while (v584 != v583);
                  }
                  ++v571;
                }
                while (v571 != v566);
                *((_QWORD *)&v769 + 1) = v568;
                v770 = v569;
                v611 = (uint64_t *)v581;
                *(_QWORD *)&v769 = v581;
                v279 = v745;
                v272 = v727;
LABEL_926:
                sub_224569D7C();
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v616 = sub_2241471F8();
                  v617 = v616[2];
                  if (!v617)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v617 = v616[2];
                  }
                  v618 = *(_QWORD *)(v617 + 64);
                  v619 = (std::mutex *)(v618 + 32);
                  std::mutex::lock((std::mutex *)(v618 + 32));
                  v621 = *(_QWORD *)(v618 + 96);
                  v620 = *(_QWORD *)(v618 + 104);
                  std::mutex::unlock(v619);
                  if (v621 != v620)
                  {
                    *(_QWORD *)v789 = "cv3d.recon.";
                    *(_QWORD *)&v789[8] = 11;
                    *(_QWORD *)&v789[16] = "MeshingEngine.KFCluster.Points";
                    *(_QWORD *)&v789[24] = 30;
                    sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &v777);
                    sub_2241471F8();
                    v622 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v622 + 24))(v622))
                    {
                      memset(v775, 0, sizeof(v775));
                      v776 = 728325616;
                      kdebug_trace();
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v622 + 24))(v622))
                      {
                        *(_QWORD *)&v780 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                        *((_QWORD *)&v780 + 1) = 2;
                        v623 = sub_2241471F8();
                        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v622 + 24))(v622))
                        {
                          sub_2241498F4((uint64_t)v789, 0);
                          sub_22339E3C8((uint64_t)v789, 0xAAAAAAAAAAAAAAABLL * ((v568 - (char *)v611) >> 2));
                          sub_22339E3C8((uint64_t)&v789[32], 0xAAAAAAAAAAAAAAABLL * ((v568 - (char *)v611) >> 2));
                          v790 = 1;
                          if (v611 != (uint64_t *)v568)
                          {
                            __asm { FMOV            V8.2S, #1.0 }
                            do
                            {
                              v627 = *(uint64_t **)&v789[8];
                              if (*(_QWORD *)&v789[8] >= *(_QWORD *)&v789[16])
                              {
                                v629 = sub_2233B2B48((unint64_t *)v789, v611);
                              }
                              else
                              {
                                v628 = *v611;
                                *(_DWORD *)(*(_QWORD *)&v789[8] + 8) = *((_DWORD *)v611 + 2);
                                *v627 = v628;
                                v629 = (unint64_t)v627 + 12;
                              }
                              *(_QWORD *)&v789[8] = v629;
                              *(_QWORD *)&v784 = _D8;
                              DWORD2(v784) = 1065353216;
                              v630 = *(_QWORD **)&v789[40];
                              if (*(_QWORD *)&v789[40] < *(_QWORD *)&v789[48])
                              {
                                v625 = v784;
                                *(_DWORD *)(*(_QWORD *)&v789[40] + 8) = DWORD2(v784);
                                *v630 = v625;
                                v626 = (unint64_t)v630 + 12;
                              }
                              else
                              {
                                v626 = sub_2233B2838((unint64_t *)&v789[32], (uint64_t *)&v784);
                              }
                              *(_QWORD *)&v789[40] = v626;
                              v611 = (uint64_t *)((char *)v611 + 12);
                            }
                            while (v611 != (uint64_t *)v568);
                          }
                          strcpy((char *)&v784, "space_carved_pc");
                          *(_WORD *)&v785[7] = 271;
                          sub_22329F414((uint64_t)v789, &v784, &v780, &v786);
                          v279 = v745;
                          v272 = v727;
                          if (v785[8] && (v785[7] & 0x80000000) != 0)
                            operator delete((void *)v784);
                          sub_22316F8F4((uint64_t *)v789);
                          v631 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v622 + 56))(v622);
                          v632 = *v631;
                          v633 = (std::__shared_weak_count *)v631[1];
                          if (v633)
                          {
                            v634 = (unint64_t *)&v633->__shared_owners_;
                            do
                              v635 = __ldxr(v634);
                            while (__stxr(v635 + 1, v634));
                          }
                          v636 = *((_QWORD *)&v786 + 1);
                          v637 = v787;
                          v781 = &off_24EC6A3B8;
                          v782 = *((_QWORD *)&v786 + 1);
                          v783 = v787;
                          v787 = 0;
                          *((_QWORD *)&v786 + 1) = 0;
                          *(_QWORD *)v789 = v632;
                          *(_QWORD *)&v789[8] = v633;
                          if (v633)
                          {
                            v638 = (unint64_t *)&v633->__shared_owners_;
                            do
                              v639 = __ldxr(v638);
                            while (__stxr(v639 + 1, v638));
                          }
                          *(_QWORD *)&v789[16] = &off_24EC6A3B8;
                          *(_QWORD *)&v789[24] = v636;
                          *(_QWORD *)&v789[32] = v637;
                          if (v637)
                          {
                            v640 = (unint64_t *)&v637->__shared_owners_;
                            do
                              v641 = __ldxr(v640);
                            while (__stxr(v641 + 1, v640));
                          }
                          (*(void (**)(uint64_t *, _BYTE *))(*v623 + 16))(v623, v789);
                          v642 = *(std::__shared_weak_count **)&v789[32];
                          if (*(_QWORD *)&v789[32])
                          {
                            v643 = (unint64_t *)(*(_QWORD *)&v789[32] + 8);
                            do
                              v644 = __ldaxr(v643);
                            while (__stlxr(v644 - 1, v643));
                            if (!v644)
                            {
                              ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                              std::__shared_weak_count::__release_weak(v642);
                            }
                          }
                          v645 = *(std::__shared_weak_count **)&v789[8];
                          if (*(_QWORD *)&v789[8])
                          {
                            v646 = (unint64_t *)(*(_QWORD *)&v789[8] + 8);
                            do
                              v647 = __ldaxr(v646);
                            while (__stlxr(v647 - 1, v646));
                            if (!v647)
                            {
                              ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                              std::__shared_weak_count::__release_weak(v645);
                            }
                          }
                          v648 = v783;
                          if (v783)
                          {
                            v649 = (unint64_t *)&v783->__shared_owners_;
                            do
                              v650 = __ldaxr(v649);
                            while (__stlxr(v650 - 1, v649));
                            if (!v650)
                            {
                              ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                              std::__shared_weak_count::__release_weak(v648);
                            }
                          }
                          if (v633)
                          {
                            v651 = (unint64_t *)&v633->__shared_owners_;
                            do
                              v652 = __ldaxr(v651);
                            while (__stlxr(v652 - 1, v651));
                            if (!v652)
                            {
                              ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
                              std::__shared_weak_count::__release_weak(v633);
                            }
                          }
                          v653 = v787;
                          if (v787)
                          {
                            v654 = (unint64_t *)&v787->__shared_owners_;
                            do
                              v655 = __ldaxr(v654);
                            while (__stlxr(v655 - 1, v654));
                            if (!v655)
                            {
                              ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                              std::__shared_weak_count::__release_weak(v653);
                            }
                          }
                        }
                      }
                      kdebug_trace();
                    }
                    if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v777.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(v779) < 0)
                  operator delete(v778);
                v656 = *(void **)v715;
                v141 = v764;
                if (*(_QWORD *)v715)
                {
                  *(_QWORD *)(v764 + 2472) = v656;
                  operator delete(v656);
                  *(_QWORD *)v715 = 0;
                  *(_QWORD *)(v715 + 8) = 0;
                  *(_QWORD *)(v715 + 16) = 0;
                }
                *(_OWORD *)(v764 + 2464) = v769;
                *(_QWORD *)(v764 + 2480) = v770;
                v770 = 0;
                v769 = 0uLL;
                v657 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v658 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v659 = __ldaxr(v658);
                  while (__stlxr(v659 - 1, v658));
                  if (!v659)
                  {
                    ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
                    std::__shared_weak_count::__release_weak(v657);
                  }
                }
                v660 = *(std::__shared_weak_count **)&v788[16];
                if (*(_QWORD *)&v788[16])
                {
                  v661 = (unint64_t *)(*(_QWORD *)&v788[16] + 8);
                  do
                    v662 = __ldaxr(v661);
                  while (__stlxr(v662 - 1, v661));
                  if (!v662)
                  {
                    ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
                    std::__shared_weak_count::__release_weak(v660);
                  }
                }
                v663 = *(float32x2_t **)(v764 + 2472);
                v664 = *(float32x2_t **)(v764 + 2464);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v663 - (char *)v664) >> 2) <= 0x1F3)
                {
                  *(_QWORD *)v789 = "cv3d.recon.";
                  *(_QWORD *)&v789[8] = 11;
                  *(_QWORD *)&v789[16] = "Stats.KFCluster.ClusterMapping.SpaceCarveRoom";
                  *(_QWORD *)&v789[24] = 45;
                  sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, (std::string *)v788);
                  sub_224569D7C();
                  sub_224569A80();
                  if (os_variant_has_internal_diagnostics())
                  {
                    v665 = sub_2241471F8();
                    v666 = sub_2241486EC((uint64_t)v665);
                    if (!sub_2241053B4(v666))
                    {
                      sub_2241471F8();
                      v667 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                      v141 = v764;
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v667 + 24))(v667))
                      {
                        memset(v789, 0, 32);
                        *(_DWORD *)&v789[32] = 728325608;
                        kdebug_trace();
                        sub_22452C3CC(&__p);
                        sub_223C00274(v667, (uint64_t)&__p);
                        sub_223167354((uint64_t)&__p);
                        sub_2231874DC((uint64_t)v789);
                      }
                    }
                  }
                  memset(v789, 0, 32);
                  *(_DWORD *)&v789[32] = 728325624;
                  kdebug_trace();
                  v668 = v788[23];
                  if (v788[23] < 0)
                    v668 = *(_QWORD *)&v788[8];
                  if (v668 >= 0x11)
                  {
                    v669 = v788;
                    if (v788[23] < 0)
                      v669 = *(_BYTE **)v788;
                    v670 = *(_QWORD *)v669;
                    v671 = *((_QWORD *)v669 + 1);
                    v672 = v669[16];
                    if (v670 == 0x6365722E64337663 && v671 == 0x73746174532E6E6FLL && v672 == 46)
                    {
                      sub_223187510();
                      sub_22452C3CC(&__p);
                      sub_223167354((uint64_t)&__p);
                    }
                  }
                  kdebug_trace();
                  if ((v788[23] & 0x80000000) != 0)
                    operator delete(*(void **)v788);
                  goto LABEL_1089;
                }
                *(_QWORD *)&v788[16] = 0;
                *(_QWORD *)&v788[8] = 0;
                *(_QWORD *)v788 = &v788[8];
                if (v664 != v663)
                {
                  v675 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
                  while (1)
                  {
                    v612.i32[0] = *(_DWORD *)(v743 + 208);
                    v613.i32[0] = *(_DWORD *)(v743 + 224);
                    v614.i32[0] = *(_DWORD *)(v743 + 240);
                    v615.i32[0] = v664[1].i32[0];
                    *(float32x2_t *)v676.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v743 + 200), COERCE_FLOAT(*v664)), *(float32x2_t *)(v743 + 216), *v664, 1), *(float32x2_t *)(v743 + 232), v615.f32[0]);
                    *(float32x2_t *)&v676.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v612.f32, *v664), v613, *v664, 1), v615, v614);
                    v612.i64[0] = *(_QWORD *)(v743 + 248);
                    v612.i32[2] = *(_DWORD *)(v743 + 256);
                    v612 = vaddq_f32(v676, v612);
                    v677 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v726, v612.f32[0]), *(float32x2_t *)(v726 + 12), *(float32x2_t *)v612.f32, 1), *(float32x2_t *)(v726 + 24), v612, 2);
                    if (v677.f32[0] >= *(float *)(v764 + 2160)
                      && v677.f32[0] <= *(float *)(v764 + 2168)
                      && v677.f32[1] >= *(float *)(v764 + 2164)
                      && v677.f32[1] <= *(float *)(v764 + 2172))
                    {
                      v612.i64[0] = *(_QWORD *)(v764 + 2160);
                      v680 = vshr_n_u32(vmin_u32(vcvt_u32_f32(vrndm_f32(vdiv_f32(vsub_f32(v677, *(float32x2_t *)v612.f32), v675))), (uint32x2_t)0x8F0000008FLL), 2uLL);
                      v681 = (_QWORD *)(*(_QWORD *)(v764 + 2136) + 24 * (v680.i32[0] + 36 * v680.i32[1]));
                      v684 = (_QWORD *)*v681;
                      v682 = v681 + 1;
                      v683 = v684;
                      if (v684 != v682)
                        break;
                    }
LABEL_1021:
                    v664 = (float32x2_t *)((char *)v664 + 12);
                    if (v664 == v663)
                    {
                      v698 = *(_BYTE **)v788;
                      v279 = v745;
                      v272 = v727;
                      if (*(_BYTE **)v788 == &v788[8])
                        goto LABEL_1082;
                      while (2)
                      {
                        *(_OWORD *)v789 = *(_OWORD *)(v698 + 28);
                        v705 = *((_DWORD *)v698 + 11);
                        *(_DWORD *)&v789[16] = v705;
                        if (*(_BYTE *)(v764 + 128))
                        {
                          v707 = *(_QWORD *)v789 != *(_QWORD *)v720 || *(_QWORD *)&v789[8] != *((_QWORD *)v720 + 1);
                          v708 = v716;
                          if (!v707)
                            goto LABEL_1108;
                        }
                        else
                        {
                          v708 = v716;
                        }
                        if (v705 >= 0xFA)
                          sub_2231A9984(v708, v789, v789);
LABEL_1108:
                        v709 = (_QWORD *)*((_QWORD *)v698 + 1);
                        if (v709)
                        {
                          do
                          {
                            v710 = v709;
                            v709 = (_QWORD *)*v709;
                          }
                          while (v709);
                        }
                        else
                        {
                          do
                          {
                            v710 = (_BYTE *)*((_QWORD *)v698 + 2);
                            _ZF = *(_QWORD *)v710 == (_QWORD)v698;
                            v698 = v710;
                          }
                          while (!_ZF);
                        }
                        v698 = v710;
                        if (v710 == &v788[8])
                          goto LABEL_1082;
                        continue;
                      }
                    }
                  }
                  while (1)
                  {
                    v685 = *(uint64_t **)&v788[8];
                    v686 = (uint64_t **)&v788[8];
                    v687 = (uint64_t **)&v788[8];
                    if (*(_QWORD *)&v788[8])
                      break;
LABEL_1070:
                    v694 = (char *)operator new(0x30uLL);
                    *(_OWORD *)(v694 + 28) = *(_OWORD *)((char *)v683 + 25);
                    *((_DWORD *)v694 + 11) = 0;
                    *(_QWORD *)v694 = 0;
                    *((_QWORD *)v694 + 1) = 0;
                    *((_QWORD *)v694 + 2) = v687;
                    *v686 = (uint64_t *)v694;
                    v695 = (uint64_t *)v694;
                    if (**(_QWORD **)v788)
                    {
                      *(_QWORD *)v788 = **(_QWORD **)v788;
                      v695 = *v686;
                    }
                    sub_2231A9A8C(*(uint64_t **)&v788[8], v695);
                    ++*(_QWORD *)&v788[16];
                    ++*((_DWORD *)v694 + 11);
                    v696 = (_QWORD *)v683[1];
                    if (!v696)
                      goto LABEL_1078;
                    do
                    {
LABEL_1075:
                      v697 = v696;
                      v696 = (_QWORD *)*v696;
                    }
                    while (v696);
LABEL_1032:
                    v683 = v697;
                    if (v697 == v682)
                      goto LABEL_1021;
                  }
                  v688 = *((unsigned __int8 *)v683 + 25);
                  while (2)
                  {
                    while (2)
                    {
                      v687 = (uint64_t **)v685;
                      v689 = *((unsigned __int8 *)v685 + 28);
                      v690 = v688 >= v689;
                      if (v688 == v689)
                      {
                        v691 = *((unsigned __int8 *)v683 + 26);
                        v689 = *((unsigned __int8 *)v687 + 29);
                        v690 = v691 >= v689;
                        if (v691 == v689)
                        {
                          v691 = *((unsigned __int8 *)v683 + 27);
                          v689 = *((unsigned __int8 *)v687 + 30);
                          v690 = v691 >= v689;
                          if (v691 == v689)
                          {
                            v691 = *((unsigned __int8 *)v683 + 28);
                            v689 = *((unsigned __int8 *)v687 + 31);
                            v690 = v691 >= v689;
                            if (v691 == v689)
                            {
                              v691 = *((unsigned __int8 *)v683 + 29);
                              v689 = *((unsigned __int8 *)v687 + 32);
                              v690 = v691 >= v689;
                              if (v691 == v689)
                              {
                                v691 = *((unsigned __int8 *)v683 + 30);
                                v689 = *((unsigned __int8 *)v687 + 33);
                                v690 = v691 >= v689;
                                if (v691 == v689)
                                {
                                  v692 = *((unsigned __int8 *)v683 + 31);
                                  v693 = *((unsigned __int8 *)v687 + 34);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 32);
                                  v693 = *((unsigned __int8 *)v687 + 35);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 33);
                                  v693 = *((unsigned __int8 *)v687 + 36);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 34);
                                  v693 = *((unsigned __int8 *)v687 + 37);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 35);
                                  v693 = *((unsigned __int8 *)v687 + 38);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 36);
                                  v693 = *((unsigned __int8 *)v687 + 39);
                                  if (v692 != v693)
                                    goto LABEL_1052;
                                  v692 = *((unsigned __int8 *)v683 + 37);
                                  v693 = *((unsigned __int8 *)v687 + 40);
                                  if (v692 != v693
                                    || (v692 = *((unsigned __int8 *)v683 + 38),
                                        v693 = *((unsigned __int8 *)v687 + 41),
                                        v692 != v693)
                                    || (v692 = *((unsigned __int8 *)v683 + 39),
                                        v693 = *((unsigned __int8 *)v687 + 42),
                                        v692 != v693)
                                    || (v692 = *((unsigned __int8 *)v683 + 40),
                                        v693 = *((unsigned __int8 *)v687 + 43),
                                        v692 != v693))
                                  {
LABEL_1052:
                                    if (v692 < v693)
                                    {
LABEL_1035:
                                      v685 = *v687;
                                      v686 = v687;
                                      if (!*v687)
                                        goto LABEL_1070;
                                      continue;
                                    }
                                  }
                                  v689 = *((unsigned __int8 *)v687 + 34);
                                  v691 = *((unsigned __int8 *)v683 + 31);
                                  if (v689 == v691)
                                  {
                                    v689 = *((unsigned __int8 *)v687 + 35);
                                    v691 = *((unsigned __int8 *)v683 + 32);
                                    if (v689 == v691)
                                    {
                                      v689 = *((unsigned __int8 *)v687 + 36);
                                      v691 = *((unsigned __int8 *)v683 + 33);
                                      if (v689 == v691)
                                      {
                                        v689 = *((unsigned __int8 *)v687 + 37);
                                        v691 = *((unsigned __int8 *)v683 + 34);
                                        if (v689 == v691)
                                        {
                                          v689 = *((unsigned __int8 *)v687 + 38);
                                          v691 = *((unsigned __int8 *)v683 + 35);
                                          if (v689 == v691)
                                          {
                                            v689 = *((unsigned __int8 *)v687 + 39);
                                            v691 = *((unsigned __int8 *)v683 + 36);
                                            if (v689 == v691)
                                            {
                                              v689 = *((unsigned __int8 *)v687 + 40);
                                              v691 = *((unsigned __int8 *)v683 + 37);
                                              if (v689 == v691)
                                              {
                                                v689 = *((unsigned __int8 *)v687 + 41);
                                                v691 = *((unsigned __int8 *)v683 + 38);
                                                if (v689 == v691)
                                                {
                                                  v689 = *((unsigned __int8 *)v687 + 42);
                                                  v691 = *((unsigned __int8 *)v683 + 39);
                                                  if (v689 == v691)
                                                  {
                                                    v689 = *((unsigned __int8 *)v687 + 43);
                                                    v691 = *((unsigned __int8 *)v683 + 40);
                                                    if (v689 == v691)
                                                    {
                                                      ++*((_DWORD *)v687 + 11);
                                                      v696 = (_QWORD *)v683[1];
                                                      if (v696)
                                                        goto LABEL_1075;
                                                      do
                                                      {
LABEL_1078:
                                                        v697 = (_QWORD *)v683[2];
                                                        _ZF = *v697 == (_QWORD)v683;
                                                        v683 = v697;
                                                      }
                                                      while (!_ZF);
                                                      goto LABEL_1032;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  goto LABEL_1067;
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v691 = *((unsigned __int8 *)v683 + 25);
                      }
                      break;
                    }
                    if (!v690)
                      goto LABEL_1035;
LABEL_1067:
                    if (v689 >= v691)
                    {
                      ++*((_DWORD *)v687 + 11);
                      v696 = (_QWORD *)v683[1];
                      if (!v696)
                        goto LABEL_1078;
                      goto LABEL_1075;
                    }
                    v685 = v687[1];
                    if (!v685)
                    {
                      v686 = v687 + 1;
                      goto LABEL_1070;
                    }
                    continue;
                  }
                }
LABEL_1082:
                sub_224569D7C();
                v141 = v764;
                sub_224569A80();
                if (os_variant_has_internal_diagnostics())
                {
                  v699 = sub_2241471F8();
                  v700 = sub_2241486EC((uint64_t)v699);
                  if (!sub_2241053B4(v700))
                  {
                    *(_QWORD *)v789 = "cv3d.recon.";
                    *(_QWORD *)&v789[8] = 11;
                    *(_QWORD *)&v789[16] = "Stats.KFCluster.ClusterMapping.SpaceCarveRoom";
                    *(_QWORD *)&v789[24] = 45;
                    sub_2231A9820((uint64_t)v789, (uint64_t)&v789[32], 0, 0, &__p);
                    sub_2241471F8();
                    v701 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                    v141 = v764;
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v701 + 24))(v701))
                    {
                      memset(v789, 0, 32);
                      *(_DWORD *)&v789[32] = 728325616;
                      kdebug_trace();
                      sub_223C002EC(v701, v764, v788);
                      sub_2231874DC((uint64_t)v789);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
                sub_223198030((uint64_t)v788, *(_QWORD **)&v788[8]);
LABEL_1089:
                v702 = *(std::__shared_weak_count **)&v771[16];
                if (*(_QWORD *)&v771[16])
                {
                  v703 = (unint64_t *)(*(_QWORD *)&v771[16] + 8);
                  do
                    v704 = __ldaxr(v703);
                  while (__stlxr(v704 - 1, v703));
                  if (!v704)
                  {
                    ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
                    std::__shared_weak_count::__release_weak(v702);
                  }
                }
LABEL_475:
                kdebug_trace();
                if (*(_QWORD *)(v141 + 2216) && *(_BYTE *)(v141 + 128))
                {
                  v327.i64[0] = *(_QWORD *)(v743 + 200);
                  v327.i32[2] = *(_DWORD *)(v743 + 208);
                  v328.i64[0] = *(_QWORD *)(v743 + 216);
                  v328.i32[2] = *(_DWORD *)(v743 + 224);
                  v329.i32[0] = *(_DWORD *)(v743 + 240);
                  *(_QWORD *)&v331 = vzip1q_s32(v327, v328).u64[0];
                  v330.i64[0] = *(_QWORD *)(v743 + 248);
                  v330.i32[2] = *(_DWORD *)(v743 + 256);
                  v332 = (int8x16_t)vnegq_f32(v330);
                  v333 = (int8x16_t)vtrn2q_s32(v327, v328);
                  v333.i32[2] = HIDWORD(*(_QWORD *)(v743 + 232));
                  v334 = (int8x16_t)vzip2q_s32(v327, v328);
                  v335 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v331, *(float *)v332.i32), *(float32x2_t *)v333.i8, *(float32x2_t *)v330.f32, 1), *(float32x2_t *)v334.i8, v330, 2);
                  v334.i32[2] = v329.i32[0];
                  v336 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(v743 + 232), *(float32x2_t *)v332.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v743 + 232), 1), *(float32x2_t *)v330.f32, 1);
                  *((_QWORD *)&v331 + 1) = *(_QWORD *)(v743 + 232);
                  HIDWORD(v337) = 0;
                  LODWORD(v337) = vdupq_lane_s32(*(int32x2_t *)&v333, 0).i32[3];
                  *(_QWORD *)((char *)&v337 + 4) = vextq_s8(v333, v334, 4uLL).u64[0];
                  v334.i64[1] = vdupq_laneq_s32((int32x4_t)v334, 2).u32[0];
                  *(_OWORD *)&v789[16] = v337;
                  *(int8x16_t *)&v789[32] = v334;
                  *(_OWORD *)v789 = v331;
                  *(float32x2_t *)&v789[48] = v335;
                  *(_DWORD *)&v789[56] = vmla_f32(v336, (float32x2_t)*(_OWORD *)&vextq_s8(v332, v332, 8uLL), v329).u32[0];
                  *(_DWORD *)&v789[60] = 1065353216;
                  v338 = *(float *)(v141 + 2504);
                  v339 = *(_QWORD *)(v141 + 2536);
                  if (v339)
                  {
                    v340 = v720;
                    if (v339 == v141 + 2512)
                    {
                      *(_QWORD *)&v788[24] = v788;
                      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v339 + 24))(v339, v788);
                    }
                    else
                    {
                      *(_QWORD *)&v788[24] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v339 + 16))(v339);
                    }
                    v272 = v727;
                  }
                  else
                  {
                    *(_QWORD *)&v788[24] = 0;
                    v340 = v720;
                  }
                  v341 = *(float32x2_t **)(v141 + 2464);
                  v342 = *(float32x2_t **)(v141 + 2472);
                  *(_OWORD *)&v771[8] = 0uLL;
                  *(_QWORD *)v771 = &v771[8];
                  if (v341 == v342)
                  {
                    memset(&__p, 0, sizeof(__p));
                    goto LABEL_524;
                  }
                  v756 = (float32x2_t)vzip1q_s32(*(int32x4_t *)v789, *(int32x4_t *)&v789[16]).u64[0];
                  v343 = (float32x2_t)vtrn2q_s32(*(int32x4_t *)v789, *(int32x4_t *)&v789[16]).u64[0];
                  v344 = (int8x16_t)vnegq_f32(*(float32x4_t *)&v789[48]);
                  v748 = *(int8x16_t *)&v789[32];
                  v752 = (float32x2_t)vzip2q_s32(*(int32x4_t *)v789, *(int32x4_t *)&v789[16]).u64[0];
                  *(float32x2_t *)v345.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v789, *(int32x2_t *)&v789[16]), *(float *)v344.i32), v343, *(float32x2_t *)&v789[48], 1), v752, *(float32x4_t *)&v789[48], 2);
                  v346 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v789[32], 1);
                  v347.i64[0] = vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v343, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v343, 1), 0xCuLL).u64[0];
                  v732 = *(float32x2_t *)v347.f32;
                  v736 = (float32x2_t)vextq_s8(v748, v748, 8uLL).u64[0];
                  *(float32x2_t *)&v345.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)&v789[32], *(float32x2_t *)v344.i8), v346, *(float32x2_t *)&v789[48], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v344, v344, 8uLL), v736);
                  v741 = v345;
                  while (2)
                  {
                    v347.i32[0] = v341[1].i32[0];
                    *(float32x2_t *)v348.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v756, COERCE_FLOAT(*v341)), v732, *v341, 1), v752, v347.f32[0]);
                    *(float32x2_t *)&v348.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v748.i8, *v341), v346, *v341, 1), *(float32x2_t *)v347.f32, v736);
                    v349.i64[0] = 0x3F0000003F000000;
                    v349.i64[1] = 0x3F0000003F000000;
                    v347 = vmlaq_n_f32(v349, vaddq_f32(v348, v741), 1.0 / v338);
                    v350 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v347.f32)) & 0xFFFFFFF8FFFFFFF8;
                    v760 = v350;
                    v351 = vcvtms_s32_f32(v347.f32[2]) & 0xFFFFFFF8;
                    v352 = (char **)&v771[8];
                    v353 = &v771[8];
                    if (*(_QWORD *)&v771[8])
                    {
                      v354 = *(_QWORD *)&v771[8];
                      while (1)
                      {
                        while (1)
                        {
                          v353 = (_BYTE *)v354;
                          v355 = *(_DWORD *)(v354 + 28);
                          if ((_DWORD)v350 == v355)
                            break;
                          if ((int)v350 >= v355)
                          {
                            if (v355 >= (int)v350)
                              goto LABEL_486;
                            goto LABEL_500;
                          }
LABEL_489:
                          v354 = *(_QWORD *)v353;
                          v352 = (char **)v353;
                          if (!*(_QWORD *)v353)
                            goto LABEL_502;
                        }
                        v356 = *((_DWORD *)v353 + 8);
                        if (HIDWORD(v350) != v356)
                        {
                          if (SHIDWORD(v350) >= v356)
                          {
                            if (v356 >= SHIDWORD(v350))
                              goto LABEL_486;
                            goto LABEL_500;
                          }
                          goto LABEL_489;
                        }
                        v357 = *((_DWORD *)v353 + 9);
                        if (v351 < v357)
                          goto LABEL_489;
                        if (v357 >= v351)
                          goto LABEL_486;
LABEL_500:
                        v354 = *((_QWORD *)v353 + 1);
                        if (!v354)
                        {
                          v352 = (char **)(v353 + 8);
                          break;
                        }
                      }
                    }
LABEL_502:
                    v358 = (char *)operator new(0x28uLL);
                    *(_QWORD *)(v358 + 28) = v760;
                    *((_DWORD *)v358 + 9) = v351;
                    *(_QWORD *)v358 = 0;
                    *((_QWORD *)v358 + 1) = 0;
                    *((_QWORD *)v358 + 2) = v353;
                    *v352 = v358;
                    if (**(_QWORD **)v771)
                    {
                      *(_QWORD *)v771 = **(_QWORD **)v771;
                      v358 = *v352;
                    }
                    sub_2231A9A8C(*(uint64_t **)&v771[8], (uint64_t *)v358);
                    ++*(_QWORD *)&v771[16];
LABEL_486:
                    v341 = (float32x2_t *)((char *)v341 + 12);
                    if (v341 != v342)
                      continue;
                    break;
                  }
                  v359 = *(_BYTE **)v771;
                  memset(&__p, 0, sizeof(__p));
                  if (*(_BYTE **)v771 != &v771[8])
                  {
                    v360 = 0;
                    v361 = *(_BYTE **)v771;
                    do
                    {
                      v362 = v360;
                      v363 = (_QWORD *)*((_QWORD *)v361 + 1);
                      if (v363)
                      {
                        do
                        {
                          v364 = v363;
                          v363 = (_QWORD *)*v363;
                        }
                        while (v363);
                      }
                      else
                      {
                        do
                        {
                          v364 = (_BYTE *)*((_QWORD *)v361 + 2);
                          _ZF = *(_QWORD *)v364 == (_QWORD)v361;
                          v361 = v364;
                        }
                        while (!_ZF);
                      }
                      ++v360;
                      v361 = v364;
                    }
                    while (v364 != &v771[8]);
                    if (v362 > 0x1555555555555554)
                      sub_22316E078();
                    v365 = operator new(12 * v360);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v365;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v365[3 * v360];
                    do
                    {
                      v366 = *(_QWORD *)(v359 + 28);
                      v365[2] = *((_DWORD *)v359 + 9);
                      *(_QWORD *)v365 = v366;
                      v367 = (_QWORD *)*((_QWORD *)v359 + 1);
                      if (v367)
                      {
                        do
                        {
                          v368 = v367;
                          v367 = (_QWORD *)*v367;
                        }
                        while (v367);
                      }
                      else
                      {
                        do
                        {
                          v368 = (_BYTE *)*((_QWORD *)v359 + 2);
                          _ZF = *(_QWORD *)v368 == (_QWORD)v359;
                          v359 = v368;
                        }
                        while (!_ZF);
                      }
                      v365 += 3;
                      v359 = v368;
                    }
                    while (v368 != &v771[8]);
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v365;
                  }
LABEL_524:
                  *(float *)&v772 = v338;
                  if (!*(_QWORD *)&v788[24])
                    sub_223198474();
                  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)&v788[24] + 48))(v775);
                  v369 = *(int **)v775;
                  for (m = *(int **)&v775[8]; v369 != m; v369 += 3)
                    sub_223C033D8(v771, v369);
                  *(_QWORD *)&v773 = 0;
                  *((_QWORD *)&v772 + 1) = 0;
                  *(_QWORD *)&v772 = (char *)&v772 + 8;
                  v371 = sub_223C05798(v272, v340);
                  v372 = *(_BYTE **)v771;
                  if (*(_BYTE **)v771 != &v771[8])
                  {
                    v373 = v371;
                    while (1)
                    {
                      v781 = *(uint64_t (***)())(v372 + 28);
                      LODWORD(v782) = *((_DWORD *)v372 + 9);
                      v374 = -*(unsigned __int16 *)(a5 + 80);
                      *(int8x8_t *)&v784 = vand_s8((int8x8_t)v781, (int8x8_t)vdup_n_s32(v374));
                      DWORD2(v784) = v782 & v374;
                      v375 = sub_2239942A0((_QWORD *)a5, (int *)&v784);
                      if (v375)
                      {
                        v376 = sub_2239942A0(v375 + 4, (int *)&v781);
                        if (v376)
                        {
                          v377 = (uint64_t *)v376[4];
                          v378 = v376 + 5;
                          if (v377 != v376 + 5)
                            break;
                        }
                      }
LABEL_629:
                      v430 = (_QWORD *)*((_QWORD *)v372 + 1);
                      if (v430)
                      {
                        do
                        {
                          v431 = v430;
                          v430 = (_QWORD *)*v430;
                        }
                        while (v430);
                      }
                      else
                      {
                        do
                        {
                          v431 = (_BYTE *)*((_QWORD *)v372 + 2);
                          _ZF = *(_QWORD *)v431 == (_QWORD)v372;
                          v372 = v431;
                        }
                        while (!_ZF);
                      }
                      v372 = v431;
                      if (v431 == &v771[8])
                        goto LABEL_635;
                    }
                    v761 = v773;
LABEL_535:
                    v379 = *((_DWORD *)v377 + 7);
                    if (v379 == (_DWORD)v373)
                      goto LABEL_604;
                    v380 = v373;
                    v381 = (char *)*((_QWORD *)&v772 + 1);
                    for (n = (char **)&v772 + 1; ; v381 = *n)
                    {
                      v383 = n;
                      if (!v381)
                        goto LABEL_543;
                      while (1)
                      {
                        n = (char **)v381;
                        v384 = *((_DWORD *)v381 + 8);
                        if (v379 < v384)
                          break;
                        if (v384 >= v379)
                        {
                          v386 = n;
                          v401 = n[6];
                          v400 = n + 6;
                          v399 = v401;
                          v402 = v400;
                          v403 = (char *)v400;
                          if (v401)
                            goto LABEL_570;
LABEL_584:
                          v411 = (char *)operator new(0x28uLL);
                          v412 = *(_QWORD *)(v372 + 28);
                          *((_DWORD *)v411 + 9) = *((_DWORD *)v372 + 9);
                          *(_QWORD *)(v411 + 28) = v412;
                          *(_QWORD *)v411 = 0;
                          *((_QWORD *)v411 + 1) = 0;
                          *((_QWORD *)v411 + 2) = v403;
                          *v402 = v411;
                          v413 = *(char **)v386[5];
                          if (v413)
                          {
                            v386[5] = v413;
                            v411 = *v402;
                          }
                          v414 = *v400;
                          _ZF = v411 == *v400;
                          v411[24] = _ZF;
                          v373 = v380;
                          if (!_ZF)
                          {
                            do
                            {
                              v415 = *((_QWORD *)v411 + 2);
                              if (*(_BYTE *)(v415 + 24))
                                break;
                              v416 = *(char **)(v415 + 16);
                              v417 = *(_QWORD *)v416;
                              if (*(_QWORD *)v416 == v415)
                              {
                                v420 = *((_QWORD *)v416 + 1);
                                if (!v420
                                  || (v421 = *(unsigned __int8 *)(v420 + 24), v418 = (_BYTE *)(v420 + 24), v421))
                                {
                                  if (*(char **)v415 == v411)
                                  {
                                    *(_BYTE *)(v415 + 24) = 1;
                                    v416[24] = 0;
                                    v424 = *(_QWORD *)(v415 + 8);
                                    *(_QWORD *)v416 = v424;
                                    if (v424)
                                      goto LABEL_601;
                                  }
                                  else
                                  {
                                    v422 = *(uint64_t **)(v415 + 8);
                                    v423 = *v422;
                                    *(_QWORD *)(v415 + 8) = *v422;
                                    if (v423)
                                    {
                                      *(_QWORD *)(v423 + 16) = v415;
                                      v416 = *(char **)(v415 + 16);
                                    }
                                    v422[2] = (uint64_t)v416;
                                    *(_QWORD *)(*(_QWORD *)(v415 + 16) + 8 * (**(_QWORD **)(v415 + 16) != v415)) = v422;
                                    *v422 = v415;
                                    *(_QWORD *)(v415 + 16) = v422;
                                    v416 = (char *)v422[2];
                                    v415 = *(_QWORD *)v416;
                                    *((_BYTE *)v422 + 24) = 1;
                                    v416[24] = 0;
                                    v424 = *(_QWORD *)(v415 + 8);
                                    *(_QWORD *)v416 = v424;
                                    if (v424)
LABEL_601:
                                      *(_QWORD *)(v424 + 16) = v416;
                                  }
                                  *(_QWORD *)(v415 + 16) = *((_QWORD *)v416 + 2);
                                  *(_QWORD *)(*((_QWORD *)v416 + 2) + 8 * (**((_QWORD **)v416 + 2) != (_QWORD)v416)) = v415;
                                  *(_QWORD *)(v415 + 8) = v416;
LABEL_610:
                                  *((_QWORD *)v416 + 2) = v415;
                                  break;
                                }
                              }
                              else if (!v417
                                     || (v419 = *(unsigned __int8 *)(v417 + 24), v418 = (_BYTE *)(v417 + 24), v419))
                              {
                                if (*(char **)v415 == v411)
                                {
                                  v429 = *((_QWORD *)v411 + 1);
                                  *(_QWORD *)v415 = v429;
                                  if (v429)
                                  {
                                    *(_QWORD *)(v429 + 16) = v415;
                                    v416 = *(char **)(v415 + 16);
                                  }
                                  *((_QWORD *)v411 + 2) = v416;
                                  *(_QWORD *)(*(_QWORD *)(v415 + 16) + 8 * (**(_QWORD **)(v415 + 16) != v415)) = v411;
                                  *((_QWORD *)v411 + 1) = v415;
                                  *(_QWORD *)(v415 + 16) = v411;
                                  v416 = (char *)*((_QWORD *)v411 + 2);
                                  v411[24] = 1;
                                  v416[24] = 0;
                                  v415 = *((_QWORD *)v416 + 1);
                                  v426 = *(char **)v415;
                                  *((_QWORD *)v416 + 1) = *(_QWORD *)v415;
                                  if (v426)
LABEL_608:
                                    *((_QWORD *)v426 + 2) = v416;
                                }
                                else
                                {
                                  *(_BYTE *)(v415 + 24) = 1;
                                  v416[24] = 0;
                                  v415 = *((_QWORD *)v416 + 1);
                                  v426 = *(char **)v415;
                                  *((_QWORD *)v416 + 1) = *(_QWORD *)v415;
                                  if (v426)
                                    goto LABEL_608;
                                }
                                *(_QWORD *)(v415 + 16) = *((_QWORD *)v416 + 2);
                                *(_QWORD *)(*((_QWORD *)v416 + 2) + 8 * (**((_QWORD **)v416 + 2) != (_QWORD)v416)) = v415;
                                *(_QWORD *)v415 = v416;
                                goto LABEL_610;
                              }
                              *(_BYTE *)(v415 + 24) = 1;
                              v411 = v416;
                              v416[24] = v416 == v414;
                              *v418 = 1;
                            }
                            while (v416 != v414);
                          }
                          ++v386[7];
                          v425 = (uint64_t *)v377[1];
                          if (!v425)
                            goto LABEL_614;
                          goto LABEL_612;
                        }
                        v381 = n[1];
                        if (!v381)
                        {
                          v383 = n + 1;
LABEL_543:
                          v385 = (char **)operator new(0x40uLL);
                          v386 = v385;
                          *((_DWORD *)v385 + 8) = v379;
                          v385[7] = 0;
                          v385[6] = 0;
                          v385[5] = (char *)(v385 + 6);
                          *v385 = 0;
                          v385[1] = 0;
                          v385[2] = (char *)n;
                          *v383 = (char *)v385;
                          v387 = (char *)v385;
                          if (*(_QWORD *)v772)
                          {
                            *(_QWORD *)&v772 = *(_QWORD *)v772;
                            v387 = *v383;
                          }
                          v388 = (char *)*((_QWORD *)&v772 + 1);
                          _ZF = v387 == *((char **)&v772 + 1);
                          v387[24] = v387 == *((char **)&v772 + 1);
                          if (!_ZF)
                          {
                            do
                            {
                              v389 = *((_QWORD *)v387 + 2);
                              if (*(_BYTE *)(v389 + 24))
                                break;
                              v390 = *(char **)(v389 + 16);
                              v391 = *(_QWORD *)v390;
                              if (*(_QWORD *)v390 == v389)
                              {
                                v394 = *((_QWORD *)v390 + 1);
                                if (!v394
                                  || (v395 = *(unsigned __int8 *)(v394 + 24), v392 = (_BYTE *)(v394 + 24), v395))
                                {
                                  if (*(char **)v389 == v387)
                                  {
                                    *(_BYTE *)(v389 + 24) = 1;
                                    v390[24] = 0;
                                    v398 = *(_QWORD *)(v389 + 8);
                                    *(_QWORD *)v390 = v398;
                                    if (v398)
                                      goto LABEL_560;
                                  }
                                  else
                                  {
                                    v396 = *(uint64_t **)(v389 + 8);
                                    v397 = *v396;
                                    *(_QWORD *)(v389 + 8) = *v396;
                                    if (v397)
                                    {
                                      *(_QWORD *)(v397 + 16) = v389;
                                      v390 = *(char **)(v389 + 16);
                                    }
                                    v396[2] = (uint64_t)v390;
                                    *(_QWORD *)(*(_QWORD *)(v389 + 16) + 8 * (**(_QWORD **)(v389 + 16) != v389)) = v396;
                                    *v396 = v389;
                                    *(_QWORD *)(v389 + 16) = v396;
                                    v390 = (char *)v396[2];
                                    v389 = *(_QWORD *)v390;
                                    *((_BYTE *)v396 + 24) = 1;
                                    v390[24] = 0;
                                    v398 = *(_QWORD *)(v389 + 8);
                                    *(_QWORD *)v390 = v398;
                                    if (v398)
LABEL_560:
                                      *(_QWORD *)(v398 + 16) = v390;
                                  }
                                  *(_QWORD *)(v389 + 16) = *((_QWORD *)v390 + 2);
                                  *(_QWORD *)(*((_QWORD *)v390 + 2) + 8 * (**((_QWORD **)v390 + 2) != (_QWORD)v390)) = v389;
                                  *(_QWORD *)(v389 + 8) = v390;
LABEL_568:
                                  *((_QWORD *)v390 + 2) = v389;
                                  break;
                                }
                              }
                              else if (!v391
                                     || (v393 = *(unsigned __int8 *)(v391 + 24), v392 = (_BYTE *)(v391 + 24), v393))
                              {
                                if (*(char **)v389 == v387)
                                {
                                  v428 = *((_QWORD *)v387 + 1);
                                  *(_QWORD *)v389 = v428;
                                  if (v428)
                                  {
                                    *(_QWORD *)(v428 + 16) = v389;
                                    v390 = *(char **)(v389 + 16);
                                  }
                                  *((_QWORD *)v387 + 2) = v390;
                                  *(_QWORD *)(*(_QWORD *)(v389 + 16) + 8 * (**(_QWORD **)(v389 + 16) != v389)) = v387;
                                  *((_QWORD *)v387 + 1) = v389;
                                  *(_QWORD *)(v389 + 16) = v387;
                                  v390 = (char *)*((_QWORD *)v387 + 2);
                                  v387[24] = 1;
                                  v390[24] = 0;
                                  v389 = *((_QWORD *)v390 + 1);
                                  v404 = *(char **)v389;
                                  *((_QWORD *)v390 + 1) = *(_QWORD *)v389;
                                  if (v404)
LABEL_566:
                                    *((_QWORD *)v404 + 2) = v390;
                                }
                                else
                                {
                                  *(_BYTE *)(v389 + 24) = 1;
                                  v390[24] = 0;
                                  v389 = *((_QWORD *)v390 + 1);
                                  v404 = *(char **)v389;
                                  *((_QWORD *)v390 + 1) = *(_QWORD *)v389;
                                  if (v404)
                                    goto LABEL_566;
                                }
                                *(_QWORD *)(v389 + 16) = *((_QWORD *)v390 + 2);
                                *(_QWORD *)(*((_QWORD *)v390 + 2) + 8 * (**((_QWORD **)v390 + 2) != (_QWORD)v390)) = v389;
                                *(_QWORD *)v389 = v390;
                                goto LABEL_568;
                              }
                              *(_BYTE *)(v389 + 24) = 1;
                              v387 = v390;
                              v390[24] = v390 == v388;
                              *v392 = 1;
                            }
                            while (v390 != v388);
                          }
                          *(_QWORD *)&v773 = ++v761;
                          v400 = v385 + 6;
                          v399 = v385[6];
                          v402 = v385 + 6;
                          v403 = (char *)(v385 + 6);
                          if (!v399)
                            goto LABEL_584;
LABEL_570:
                          v405 = *((_DWORD *)v372 + 7);
                          v406 = *((_DWORD *)v372 + 8);
                          v407 = *((_DWORD *)v372 + 9);
                          while (2)
                          {
                            while (2)
                            {
                              v403 = v399;
                              v408 = *((_DWORD *)v399 + 7);
                              if (v405 != v408)
                              {
                                if (v405 < v408)
                                  goto LABEL_571;
                                if (v408 >= v405)
                                  goto LABEL_603;
                                goto LABEL_582;
                              }
                              v409 = *((_DWORD *)v403 + 8);
                              if (v406 == v409)
                              {
                                v410 = *((_DWORD *)v403 + 9);
                                if (v407 < v410)
                                  goto LABEL_571;
                                if (v410 >= v407)
                                  goto LABEL_603;
LABEL_582:
                                v399 = (char *)*((_QWORD *)v403 + 1);
                                if (!v399)
                                {
                                  v402 = (char **)(v403 + 8);
                                  goto LABEL_584;
                                }
                                continue;
                              }
                              break;
                            }
                            if (v406 < v409)
                            {
LABEL_571:
                              v399 = *(char **)v403;
                              v402 = (char **)v403;
                              if (!*(_QWORD *)v403)
                                goto LABEL_584;
                              continue;
                            }
                            break;
                          }
                          if (v409 < v406)
                            goto LABEL_582;
LABEL_603:
                          v373 = v380;
LABEL_604:
                          v425 = (uint64_t *)v377[1];
                          if (!v425)
                          {
                            do
                            {
LABEL_614:
                              v427 = (uint64_t *)v377[2];
                              _ZF = *v427 == (_QWORD)v377;
                              v377 = v427;
                            }
                            while (!_ZF);
                            goto LABEL_534;
                          }
                          do
                          {
LABEL_612:
                            v427 = v425;
                            v425 = (uint64_t *)*v425;
                          }
                          while (v425);
LABEL_534:
                          v377 = v427;
                          if (v427 == v378)
                            goto LABEL_629;
                          goto LABEL_535;
                        }
                      }
                    }
                  }
LABEL_635:
                  v787 = 0;
                  *((_QWORD *)&v786 + 1) = 0;
                  *(_QWORD *)&v786 = (char *)&v786 + 8;
                  v432 = (_OWORD *)v772;
                  v279 = v745;
                  if ((__int128 *)v772 != (__int128 *)((char *)&v772 + 8))
                  {
                    while (2)
                    {
                      v433 = sub_223C05980(v727, *((_DWORD *)v432 + 8));
                      v435 = v433;
                      v436 = v434;
                      v437 = (char *)*((_QWORD *)&v786 + 1);
                      v438 = (uint64_t **)&v786 + 1;
                      v439 = (char *)&v786 + 8;
                      if (*((_QWORD *)&v786 + 1))
                      {
                        v440 = HIBYTE(v433);
                        v441 = HIBYTE(v434);
                        while (1)
                        {
                          v439 = v437;
                          v442 = v437[32];
                          if (v442 != v433)
                          {
                            LODWORD(v445) = v433;
                            if (v442 <= v433)
                              goto LABEL_680;
                            goto LABEL_640;
                          }
                          v442 = v439[33];
                          if (v442 != BYTE1(v433))
                          {
                            LODWORD(v445) = BYTE1(v433);
                            if (v442 <= BYTE1(v433))
                              goto LABEL_680;
                            goto LABEL_640;
                          }
                          v442 = v439[34];
                          if (v442 != BYTE2(v433))
                          {
                            LODWORD(v445) = BYTE2(v433);
                            if (v442 <= BYTE2(v433))
                              goto LABEL_680;
                            goto LABEL_640;
                          }
                          v442 = v439[35];
                          if (v442 != BYTE3(v433))
                            break;
                          v442 = v439[36];
                          if (v442 == BYTE4(v433))
                          {
                            v442 = v439[37];
                            if (v442 != BYTE5(v433))
                            {
                              LODWORD(v445) = BYTE5(v433);
                              if (v442 <= BYTE5(v433))
                                goto LABEL_680;
                              goto LABEL_640;
                            }
                            v443 = v439[38];
                            LODWORD(v444) = BYTE6(v433);
                            if (v443 != BYTE6(v433))
                              goto LABEL_657;
                            v443 = v439[39];
                            v444 = HIBYTE(v433);
                            if (v443 != (_DWORD)v440)
                              goto LABEL_657;
                            v443 = v439[40];
                            LODWORD(v444) = v434;
                            if (v443 != v434)
                              goto LABEL_657;
                            v443 = v439[41];
                            LODWORD(v444) = BYTE1(v434);
                            if (v443 != BYTE1(v434))
                              goto LABEL_657;
                            v443 = v439[42];
                            LODWORD(v444) = BYTE2(v434);
                            if (v443 != BYTE2(v434))
                              goto LABEL_657;
                            v443 = v439[43];
                            LODWORD(v444) = BYTE3(v434);
                            if (v443 != BYTE3(v434))
                              goto LABEL_657;
                            v443 = v439[44];
                            LODWORD(v444) = BYTE4(v434);
                            if (v443 != BYTE4(v434)
                              || (v443 = v439[45], LODWORD(v444) = BYTE5(v434), v443 != BYTE5(v434))
                              || (v443 = v439[46], LODWORD(v444) = BYTE6(v434), v443 != BYTE6(v434))
                              || (v443 = v439[47], v444 = HIBYTE(v434), v443 != (_DWORD)v441))
                            {
LABEL_657:
                              if (v444 < v443)
                                goto LABEL_640;
                            }
                            v442 = v439[38];
                            LODWORD(v445) = BYTE6(v433);
                            if (v442 == BYTE6(v433))
                            {
                              v442 = v439[39];
                              v445 = HIBYTE(v433);
                              if (v442 == (_DWORD)v440)
                              {
                                v442 = v439[40];
                                LODWORD(v445) = v434;
                                if (v442 == v434)
                                {
                                  v442 = v439[41];
                                  LODWORD(v445) = BYTE1(v434);
                                  if (v442 == BYTE1(v434))
                                  {
                                    v442 = v439[42];
                                    LODWORD(v445) = BYTE2(v434);
                                    if (v442 == BYTE2(v434))
                                    {
                                      v442 = v439[43];
                                      LODWORD(v445) = BYTE3(v434);
                                      if (v442 == BYTE3(v434))
                                      {
                                        v442 = v439[44];
                                        LODWORD(v445) = BYTE4(v434);
                                        if (v442 == BYTE4(v434))
                                        {
                                          v442 = v439[45];
                                          LODWORD(v445) = BYTE5(v434);
                                          if (v442 == BYTE5(v434))
                                          {
                                            v442 = v439[46];
                                            LODWORD(v445) = BYTE6(v434);
                                            if (v442 == BYTE6(v434))
                                            {
                                              v442 = v439[47];
                                              v445 = HIBYTE(v434);
                                              if (v442 == (_DWORD)v441)
                                              {
LABEL_686:
                                                v446 = (uint64_t *)v439;
                                                goto LABEL_687;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_680:
                            if (v442 >= v445)
                              goto LABEL_686;
                            v437 = (char *)*((_QWORD *)v439 + 1);
                            if (!v437)
                            {
                              v438 = (uint64_t **)(v439 + 8);
                              goto LABEL_683;
                            }
                          }
                          else
                          {
                            LODWORD(v445) = BYTE4(v433);
                            if (v442 <= BYTE4(v433))
                              goto LABEL_680;
LABEL_640:
                            v437 = *(char **)v439;
                            v438 = (uint64_t **)v439;
                            if (!*(_QWORD *)v439)
                              goto LABEL_683;
                          }
                        }
                        LODWORD(v445) = BYTE3(v433);
                        if (v442 <= BYTE3(v433))
                          goto LABEL_680;
                        goto LABEL_640;
                      }
LABEL_683:
                      v446 = (uint64_t *)operator new(0x48uLL);
                      v446[4] = v435;
                      v446[5] = v436;
                      v446[8] = 0;
                      v446[7] = 0;
                      v446[6] = (uint64_t)(v446 + 7);
                      *v446 = 0;
                      v446[1] = 0;
                      v446[2] = (uint64_t)v439;
                      *v438 = v446;
                      v447 = v446;
                      if (*(_QWORD *)v786)
                      {
                        *(_QWORD *)&v786 = *(_QWORD *)v786;
                        v447 = *v438;
                      }
                      sub_2231A9A8C(*((uint64_t **)&v786 + 1), v447);
                      v787 = (std::__shared_weak_count *)((char *)v787 + 1);
LABEL_687:
                      v449 = (_QWORD *)v446[7];
                      v448 = v446 + 7;
                      sub_223198030((uint64_t)(v448 - 1), v449);
                      *(v448 - 1) = *((_QWORD *)v432 + 5);
                      v450 = v432 + 3;
                      v451 = *((_QWORD *)v432 + 6);
                      *v448 = v451;
                      v452 = *((_QWORD *)v432 + 7);
                      v448[1] = v452;
                      if (v452)
                      {
                        *(_QWORD *)(v451 + 16) = v448;
                        *((_QWORD *)v432 + 5) = v450;
                        *v450 = 0;
                        *((_QWORD *)v432 + 7) = 0;
                      }
                      else
                      {
                        *(v448 - 1) = v448;
                      }
                      *((_QWORD *)&v784 + 1) = 0;
                      *(_QWORD *)v785 = 0;
                      *(_QWORD *)&v784 = (char *)&v784 + 8;
                      v453 = (uint64_t *)*((_QWORD *)&v772 + 1);
                      v454 = (uint64_t **)&v772 + 1;
                      v455 = (uint64_t **)&v772 + 1;
                      v456 = *((_DWORD *)v432 + 8);
                      if (*((_QWORD *)&v772 + 1))
                      {
                        while (1)
                        {
                          while (1)
                          {
                            v454 = (uint64_t **)v453;
                            v457 = *((_DWORD *)v453 + 8);
                            if (v456 >= v457)
                              break;
                            v453 = *v454;
                            v455 = v454;
                            if (!*v454)
                              goto LABEL_697;
                          }
                          if (v457 >= v456)
                            break;
                          v453 = v454[1];
                          if (!v453)
                          {
                            v455 = v454 + 1;
                            goto LABEL_697;
                          }
                        }
                        v458 = (char *)v454;
                      }
                      else
                      {
LABEL_697:
                        v458 = (char *)operator new(0x40uLL);
                        *((_DWORD *)v458 + 8) = v456;
                        *((_QWORD *)v458 + 7) = 0;
                        *((_QWORD *)v458 + 6) = 0;
                        *((_QWORD *)v458 + 5) = v458 + 48;
                        *(_QWORD *)v458 = 0;
                        *((_QWORD *)v458 + 1) = 0;
                        *((_QWORD *)v458 + 2) = v454;
                        *v455 = (uint64_t *)v458;
                        v459 = (uint64_t *)v458;
                        if (*(_QWORD *)v772)
                        {
                          *(_QWORD *)&v772 = *(_QWORD *)v772;
                          v459 = *v455;
                        }
                        sub_2231A9A8C(*((uint64_t **)&v772 + 1), v459);
                        *(_QWORD *)&v773 = v773 + 1;
                      }
                      v461 = (_QWORD *)*((_QWORD *)v458 + 6);
                      v460 = v458 + 48;
                      sub_223198030((uint64_t)(v460 - 1), v461);
                      v462 = (_QWORD *)*((_QWORD *)&v784 + 1);
                      *(v460 - 1) = v784;
                      *v460 = v462;
                      v463 = *(_QWORD *)v785;
                      v460[1] = *(_QWORD *)v785;
                      if (v463)
                      {
                        v462[2] = v460;
                        *(_QWORD *)&v784 = (char *)&v784 + 8;
                        *((_QWORD *)&v784 + 1) = 0;
                        *(_QWORD *)v785 = 0;
                        sub_223198030((uint64_t)&v784, 0);
                        v464 = (_QWORD *)*((_QWORD *)v432 + 1);
                        if (!v464)
                        {
                          do
                          {
LABEL_707:
                            v465 = (_OWORD *)*((_QWORD *)v432 + 2);
                            _ZF = *(_QWORD *)v465 == (_QWORD)v432;
                            v432 = v465;
                          }
                          while (!_ZF);
                          goto LABEL_637;
                        }
                      }
                      else
                      {
                        *(v460 - 1) = v460;
                        sub_223198030((uint64_t)&v784, v462);
                        v464 = (_QWORD *)*((_QWORD *)v432 + 1);
                        if (!v464)
                          goto LABEL_707;
                      }
                      do
                      {
                        v465 = v464;
                        v464 = (_QWORD *)*v464;
                      }
                      while (v464);
LABEL_637:
                      v432 = v465;
                      if (v465 == (__int128 *)((char *)&v772 + 8))
                        break;
                      continue;
                    }
                  }
                  sub_223C03504(*((_QWORD **)&v772 + 1));
                  if (*(_QWORD *)v775)
                  {
                    *(_QWORD *)&v775[8] = *(_QWORD *)v775;
                    operator delete(*(void **)v775);
                  }
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  sub_223198030((uint64_t)v771, *(_QWORD **)&v771[8]);
                  sub_223475E64((uint64_t)v721, *(_QWORD **)(v764 + 2400));
                  v466 = (_QWORD *)*((_QWORD *)&v786 + 1);
                  *(_QWORD *)(v764 + 2392) = v786;
                  *(_QWORD *)(v764 + 2400) = v466;
                  v467 = v787;
                  *(_QWORD *)(v764 + 2408) = v787;
                  if (v467)
                  {
                    v466[2] = v722;
                    *(_QWORD *)&v786 = (char *)&v786 + 8;
                    *((_QWORD *)&v786 + 1) = 0;
                    v787 = 0;
                    v466 = 0;
                  }
                  else
                  {
                    *v721 = v722;
                  }
                  sub_223475E64((uint64_t)&v786, v466);
                  v468 = *(_QWORD **)&v788[24];
                  v141 = v764;
                  if (*(_BYTE **)&v788[24] == v788)
                  {
                    v469 = 4;
                    v468 = v788;
                  }
                  else
                  {
                    if (!*(_QWORD *)&v788[24])
                      goto LABEL_722;
                    v469 = 5;
                  }
                  (*(void (**)(void))(*v468 + 8 * v469))();
                }
LABEL_722:
                memset(v789, 0, 32);
                *(_DWORD *)&v789[32] = 728333900;
                kdebug_trace();
                sub_223198030((uint64_t)v724, *(_QWORD **)(v141 + 2424));
                *(_QWORD *)(v141 + 2416) = v723;
                v474.i32[3] = 0;
                *(_OWORD *)(v141 + 2424) = 0u;
                v475 = *(_QWORD *)(v141 + 2488);
                v476 = *(_QWORD *)(v141 + 1368);
                if (v475)
                {
                  if (v476 - v475 < 3500000000)
                  {
LABEL_742:
                    kdebug_trace();
                    sub_223BFC920(v141);
                    if (*(_QWORD *)(v141 + 2136) == *(_QWORD *)(v141 + 2144)
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 473, (uint64_t)"!room_summary_.empty() && \"Room summary should be set\"", 54, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    kdebug_trace();
                    return;
                  }
                  v477 = (unsigned __int8 *)*v725;
                  if (*v725 != v279)
                  {
                    v474.i64[0] = *(_QWORD *)(v743 + 184);
                    v470.i32[0] = *(_DWORD *)(v743 + 192);
                    v471.i32[0] = *(_DWORD *)(v743 + 208);
                    v472.i32[0] = *(_DWORD *)(v743 + 224);
                    v473.i32[0] = *(_DWORD *)(v743 + 240);
                    *(float32x2_t *)v478.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v743 + 200), v474.f32[0]), *(float32x2_t *)(v743 + 216), *(float32x2_t *)v474.f32, 1), *(float32x2_t *)(v743 + 232), v470.f32[0]);
                    *(float32x2_t *)&v478.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v471, *(float32x2_t *)v474.f32), v472, *(float32x2_t *)v474.f32, 1), v470, v473);
                    v474.i64[0] = *(_QWORD *)(v743 + 248);
                    v474.i32[2] = *(_DWORD *)(v743 + 256);
                    v479 = vaddq_f32(v478, v474);
                    v480 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v726, v479.f32[0]), *(float32x2_t *)(v726 + 12), *(float32x2_t *)v479.f32, 1), *(float32x2_t *)(v726 + 24), v479, 2);
                    do
                    {
                      v481 = (float32x2_t **)*((_QWORD *)v477 + 7);
                      if (v481)
                      {
                        v482 = *v481;
                        v483 = v481[1];
                        if (v482 != v483)
                        {
                          while (1)
                          {
                            v484 = vsub_f32(*v482, v480);
                            if (vmla_lane_f32(vmul_f32(v484, v484), (float32x2_t)vdup_lane_s32((int32x2_t)v484, 1), v484, 1).f32[0] < 16.0)break;
                            if (++v482 == v483)
                              goto LABEL_733;
                          }
                          sub_2231A9984(v724, v477 + 32, (_OWORD *)v477 + 2);
                        }
                      }
LABEL_733:
                      v485 = (unsigned __int8 *)*((_QWORD *)v477 + 1);
                      if (v485)
                      {
                        do
                        {
                          v486 = v485;
                          v485 = *(unsigned __int8 **)v485;
                        }
                        while (v485);
                      }
                      else
                      {
                        do
                        {
                          v486 = (unsigned __int8 *)*((_QWORD *)v477 + 2);
                          _ZF = *(_QWORD *)v486 == (_QWORD)v477;
                          v477 = v486;
                        }
                        while (!_ZF);
                      }
                      v477 = v486;
                    }
                    while (v486 != (unsigned __int8 *)v279);
                    v476 = *(_QWORD *)(v141 + 1368);
                  }
                }
                *(_QWORD *)(v141 + 2488) = v476;
                goto LABEL_742;
              }
              while (1)
              {
                v315 = (std::__shared_weak_count *)*((_QWORD *)v297 - 1);
                if (!v315)
                  goto LABEL_450;
                v316 = (unint64_t *)&v315->__shared_owners_;
                do
                  v317 = __ldaxr(v316);
                while (__stlxr(v317 - 1, v316));
                if (!v317)
                {
                  ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                  std::__shared_weak_count::__release_weak(v315);
                  v318 = (std::__shared_weak_count *)*((_QWORD *)v297 - 3);
                  if (v318)
                  {
LABEL_451:
                    v319 = (unint64_t *)&v318->__shared_owners_;
                    do
                      v320 = __ldaxr(v319);
                    while (__stlxr(v320 - 1, v319));
                    if (!v320)
                    {
                      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                      std::__shared_weak_count::__release_weak(v318);
                    }
                  }
                }
                else
                {
LABEL_450:
                  v318 = (std::__shared_weak_count *)*((_QWORD *)v297 - 3);
                  if (v318)
                    goto LABEL_451;
                }
                v321 = (std::__shared_weak_count *)*((_QWORD *)v297 - 5);
                if (v321)
                {
                  v322 = (unint64_t *)&v321->__shared_owners_;
                  do
                    v323 = __ldaxr(v322);
                  while (__stlxr(v323 - 1, v322));
                  if (!v323)
                  {
                    ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                    std::__shared_weak_count::__release_weak(v321);
                  }
                }
                v297 -= 48;
                if (v297 == v296)
                {
                  v297 = *(char **)v771;
                  goto LABEL_462;
                }
              }
            }
            v141 = v764;
          }
          v279 = v745;
          goto LABEL_385;
        }
        for (ii = v208 + 31104; v209 != ii; v209 -= 24)
          sub_223198030(v209 - 24, *(_QWORD **)(v209 - 16));
      }
      else
      {
        v213 = *(_QWORD *)(v141 + 2152);
        if (0xAAAAAAAAAAAAAAABLL * ((v213 - v209) >> 3) < 1296 - v212)
        {
          v214 = v141 + 2152;
          v215 = 0xAAAAAAAAAAAAAAABLL * ((v213 - v208) >> 3);
          v216 = 2 * v215;
          if (2 * v215 <= 0x510)
            v216 = 1296;
          if (v215 >= 0x555555555555555)
            v217 = 0xAAAAAAAAAAAAAAALL;
          else
            v217 = v216;
          *(_QWORD *)&v789[32] = v214;
          if (v217 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v218 = (char *)operator new(24 * v217);
          v219 = &v218[24 * v212];
          *(_QWORD *)v789 = v218;
          *(_QWORD *)&v789[8] = v219;
          v220 = &v218[24 * v217];
          *(_QWORD *)&v789[16] = v219;
          *(_QWORD *)&v789[24] = v220;
          v221 = v218 + 31104;
          v222 = v212 - 1296;
          v223 = &v218[v211 + 8];
          do
          {
            *(_QWORD *)v223 = 0;
            *((_QWORD *)v223 + 1) = 0;
            *((_QWORD *)v223 - 1) = v223;
            sub_223475C18((_QWORD *)v223 - 1, *(unsigned __int8 **)v771, &v771[8]);
            v223 += 24;
            _CF = __CFADD__(v222++, 1);
          }
          while (!_CF);
          v224 = *(char **)(v764 + 2144);
          v225 = *(char **)(v764 + 2136);
          if (v224 == v225)
          {
            *(_QWORD *)(v764 + 2136) = v219;
            *(_QWORD *)(v764 + 2144) = v221;
            *(_QWORD *)(v764 + 2152) = v220;
            v141 = v764;
          }
          else
          {
            v226 = 0;
            do
            {
              while (1)
              {
                v227 = &v219[v226];
                *((_QWORD *)v227 - 3) = *(_QWORD *)&v224[v226 - 24];
                v228 = &v224[v226 - 16];
                v229 = *(_QWORD *)v228;
                *(_QWORD *)&v219[v226 - 16] = *(_QWORD *)v228;
                v230 = (uint64_t)&v219[v226 - 16];
                v231 = *(_QWORD *)&v224[v226 - 8];
                *((_QWORD *)v227 - 1) = v231;
                if (v231)
                  break;
                *((_QWORD *)v227 - 3) = v230;
                v226 -= 24;
                if (&v224[v226] == v225)
                  goto LABEL_289;
              }
              *(_QWORD *)(v229 + 16) = v230;
              *(_QWORD *)&v224[v226 - 24] = v228;
              *(_QWORD *)v228 = 0;
              *(_QWORD *)&v224[v226 - 8] = 0;
              v226 -= 24;
            }
            while (&v224[v226] != v225);
LABEL_289:
            v224 = *(char **)(v764 + 2136);
            v232 = *(char **)(v764 + 2144);
            *(_QWORD *)(v764 + 2136) = &v219[v226];
            *(_QWORD *)(v764 + 2144) = v221;
            *(_QWORD *)(v764 + 2152) = v220;
            v141 = v764;
            if (v232 != v224)
            {
              do
              {
                v233 = v232 - 24;
                sub_223198030((uint64_t)(v232 - 24), *((_QWORD **)v232 - 2));
                v232 = v233;
              }
              while (v233 != v224);
            }
          }
          if (v224)
            operator delete(v224);
          goto LABEL_302;
        }
        ii = v209 + 24 * (1296 - v212);
        v235 = (_QWORD *)(v209 + 8);
        v236 = 31104 - v211;
        do
        {
          *v235 = 0;
          v235[1] = 0;
          *(v235 - 1) = v235;
          sub_223475C18(v235 - 1, *(unsigned __int8 **)v771, &v771[8]);
          v235 += 3;
          v236 -= 24;
        }
        while (v236);
      }
      *(_QWORD *)(v764 + 2144) = ii;
      v141 = v764;
      goto LABEL_302;
    }
LABEL_119:
    *(_QWORD *)v789 = 0;
    v107 = *(unsigned int *)(v764 + 2120);
    if ((_DWORD)v107 != 1)
      goto LABEL_120;
    goto LABEL_108;
  }
}

void sub_223BFBEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;

  sub_2241231D8(v66);
  v68 = (std::__shared_weak_count *)STACK[0x338];
  if (STACK[0x338])
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x2A0]);
  if (v65)
  {
    v71 = (unint64_t *)&v65->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x2D8]);
  sub_2231874DC((uint64_t)&STACK[0x230]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a61)
  {
    a62 = a61;
    operator delete((void *)a61);
  }
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  sub_2231BD9DC((uint64_t)&a53);
  sub_22319EF60((uint64_t)&STACK[0x2F0]);
  sub_2231BD9DC((uint64_t)&a65);
  sub_2231874DC((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223BFC2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_2231F9050(&a65);
  _Unwind_Resume(a1);
}

void sub_223BFC2F0()
{
  JUMPOUT(0x223BFC4A8);
}

void sub_223BFC30C(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_223BFC328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  if (STACK[0x330])
  {
    STACK[0x338] = STACK[0x330];
    JUMPOUT(0x223BFC554);
  }
  JUMPOUT(0x223BFC558);
}

void sub_223BFC34C(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223BFC378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_223167354((uint64_t)&STACK[0x2F0]);
  sub_2231F9050(&a65);
  _Unwind_Resume(a1);
}

void sub_223BFC394(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_223BFC3DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223BFC404()
{
  sub_223475E64((uint64_t)&STACK[0x2D8], (_QWORD *)STACK[0x2E0]);
  JUMPOUT(0x223BFC490);
}

void sub_223BFC428()
{
  JUMPOUT(0x223BFC498);
}

void sub_223BFC430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  _QWORD *a66;
  _QWORD **v66;
  uint64_t v67;
  _QWORD *v68;

  v68 = *v66;
  v67 = (uint64_t)(v66 - 1);
  sub_223198030(v67, v68);
  STACK[0x340] = v67;
  sub_223C0325C((uint64_t)&STACK[0x330]);
  sub_223198030((uint64_t)&a65, a66);
  JUMPOUT(0x223BFC540);
}

void sub_223BFC450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  _QWORD **v52;
  uint64_t v53;
  _QWORD *v54;

  v54 = *v52;
  v53 = (uint64_t)(v52 - 1);
  sub_223198030(v53, v54);
  *(_QWORD *)(a52 + 2144) = v53;
  JUMPOUT(0x223BFC468);
}

void sub_223BFC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t a66;
  void *v67;
  unint64_t v68;

  sub_223C03504((_QWORD *)STACK[0x208]);
  v67 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v67;
    operator delete(v67);
  }
  if (a53)
    operator delete(a53);
  sub_223198030((uint64_t)&a65, (_QWORD *)a66);
  v68 = STACK[0x308];
  if ((unint64_t *)STACK[0x308] == &STACK[0x2F0])
  {
    (*(void (**)(unint64_t *))(STACK[0x2F0] + 32))(&STACK[0x2F0]);
    _Unwind_Resume(a1);
  }
  if (!v68)
    JUMPOUT(0x223BFC4F8);
  (*(void (**)(unint64_t))(*(_QWORD *)v68 + 40))(v68);
  _Unwind_Resume(a1);
}

void sub_223BFC518()
{
  void *v0;

  v0 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x223BFC540);
}

void sub_223BFC52C()
{
  JUMPOUT(0x223BFC534);
}

void sub_223BFC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  sub_2233FADDC((_QWORD *)STACK[0x238]);
  if (__p)
    operator delete(__p);
  sub_2231874DC((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_223BFC568(uint64_t a1, uint64_t a2, float32x4_t a3, double a4, float32x2_t a5, float32x2_t a6, double a7, float32x2_t a8, double a9, float32x2_t a10)
{
  float32x2_t v10;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  _OWORD *v27;
  unint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;

  v13 = *(_QWORD *)(a2 + 72);
  if (v13)
  {
    a3.i64[0] = *(_QWORD *)(a1 + 2272);
    LODWORD(a4) = *(_DWORD *)(a1 + 2280);
    a5.i32[0] = *(_DWORD *)(a1 + 2360);
    a6.i32[0] = *(_DWORD *)(a1 + 2372);
    a8.i32[0] = *(_DWORD *)(a1 + 2296);
    a10.i32[0] = *(_DWORD *)(a1 + 2312);
    v10.i32[0] = *(_DWORD *)(a1 + 2328);
    *(float32x2_t *)v14.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2288), a3.f32[0]), *(float32x2_t *)(a1 + 2304), *(float32x2_t *)a3.f32, 1), *(float32x2_t *)(a1 + 2320), *(float *)&a4);
    *(float32x2_t *)&v14.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a8, *(float32x2_t *)a3.f32), a10, *(float32x2_t *)a3.f32, 1), *(float32x2_t *)&a4, v10);
    LODWORD(a4) = *(_DWORD *)(a1 + 2384);
    a3.i64[0] = *(_QWORD *)(a1 + 2336);
    a3.i32[2] = *(_DWORD *)(a1 + 2344);
    v15 = (int8x16_t)vaddq_f32(v14, a3);
    v16 = vmla_f32(vmla_lane_f32(vmul_f32(a5, *(float32x2_t *)v15.i8), a6, *(float32x2_t *)v15.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), *(float32x2_t *)&a4).f32[0];
    v17 = *(float *)(v13 + 96);
    if (v16 < v17 || v16 > (float)(v17 + *(float *)(v13 + 100)))
      return;
  }
  else if (*(_BYTE *)(a2 + 16) != 2)
  {
    return;
  }
  v18 = *(_QWORD *)(a1 + 2184) - *(_QWORD *)(a1 + 2176);
  if (v18 >= 0xFF0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 429, (uint64_t)"rooms_.size() < 255u && \"Too many rooms created\"", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *(_QWORD *)(a2 + 72);
    v18 = *(_QWORD *)(a1 + 2184) - *(_QWORD *)(a1 + 2176);
  }
  LOBYTE(v41) = v18 >> 4;
  BYTE1(v41) = *(_BYTE *)(a2 + 16);
  if (v13)
  {
    v19 = sub_223B7EE5C((uint64_t *)v13);
    v20 = *(_QWORD *)(a2 + 80);
    *((float *)&v41 + 1) = v19;
    *(_QWORD *)&v42 = *(_QWORD *)(a2 + 72);
    *((_QWORD *)&v42 + 1) = v20;
    if (!v20)
      goto LABEL_15;
  }
  else
  {
    HIDWORD(v41) = 0;
    v20 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = v20;
    if (!v20)
      goto LABEL_15;
  }
  v21 = (unint64_t *)(v20 + 8);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
LABEL_15:
  v23 = (_QWORD *)(a1 + 2208);
  v24 = *(_QWORD *)(a1 + 2208);
  if (!v24)
  {
    v25 = (_QWORD *)(a1 + 2208);
    goto LABEL_25;
  }
  while (1)
  {
    while (1)
    {
      v25 = (_QWORD *)v24;
      v26 = (unsigned __int8 *)(v24 + 32);
      if (((char)sub_22319835C((unsigned __int8 *)a2, (unsigned __int8 *)(v24 + 32)) & 0x80000000) == 0)
        break;
      v24 = *v25;
      v23 = v25;
      if (!*v25)
        goto LABEL_25;
    }
    if (((char)sub_22319835C(v26, (unsigned __int8 *)a2) & 0x80000000) == 0)
      break;
    v23 = v25 + 1;
    v24 = v25[1];
    if (!v24)
      goto LABEL_25;
  }
  if (!*v23)
  {
LABEL_25:
    v30 = operator new(0x48uLL);
    v30[2] = *(_OWORD *)a2;
    *((_QWORD *)v30 + 6) = v41;
    *(_OWORD *)((char *)v30 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v25;
    *v23 = v30;
    v31 = **(_QWORD **)(a1 + 2200);
    if (v31)
    {
      *(_QWORD *)(a1 + 2200) = v31;
      v30 = (_OWORD *)*v23;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 2208), (uint64_t *)v30);
    ++*(_QWORD *)(a1 + 2216);
    v27 = *(_OWORD **)(a1 + 2184);
    v28 = *(_QWORD *)(a1 + 2192);
    if ((unint64_t)v27 >= v28)
      goto LABEL_28;
    goto LABEL_24;
  }
  v27 = *(_OWORD **)(a1 + 2184);
  v28 = *(_QWORD *)(a1 + 2192);
  if ((unint64_t)v27 >= v28)
  {
LABEL_28:
    v32 = *(_OWORD **)(a1 + 2176);
    v33 = v27 - v32;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      sub_22316E078();
    v35 = v28 - (_QWORD)v32;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 60)
        sub_223174E94();
      v37 = (char *)operator new(16 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v37[16 * v33];
    *(_OWORD *)v38 = *(_OWORD *)a2;
    v29 = v38 + 16;
    if (v27 != v32)
    {
      do
      {
        *((_OWORD *)v38 - 1) = *(v27 - 1);
        v38 -= 16;
        --v27;
      }
      while (v27 != v32);
      v27 = *(_OWORD **)(a1 + 2176);
    }
    *(_QWORD *)(a1 + 2176) = v38;
    *(_QWORD *)(a1 + 2184) = v29;
    *(_QWORD *)(a1 + 2192) = &v37[16 * v36];
    if (v27)
      operator delete(v27);
    goto LABEL_43;
  }
LABEL_24:
  *v27 = *(_OWORD *)a2;
  v29 = v27 + 1;
LABEL_43:
  *(_QWORD *)(a1 + 2184) = v29;
  if (*((_QWORD *)&v42 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
}

void sub_223BFC8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197300((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BFC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223197300((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223BFC920(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 v3;
  std::string::size_type v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::string::size_type v26;
  BOOL v27;
  _BOOL4 v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  std::string::size_type size;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  std::string::size_type v41;
  int v42;
  int v43;
  std::string::size_type v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type *v61;
  std::string::size_type v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  std::mutex *v88;
  uint64_t v89;
  uint64_t v90;
  std::string::size_type v91;
  void *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string::size_type *v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  std::mutex *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  int v133;
  unint64_t v134;
  char v135;
  __int128 *v136;
  const char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  std::string::size_type v142;
  char v143;
  std::string *v144;
  std::string *v145;
  const std::string::value_type *p_p;
  std::string::size_type v147;
  _QWORD *v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  std::string::size_type v154;
  char v155;
  std::string *v156;
  std::string *v157;
  const std::string::value_type *v158;
  std::string::size_type v159;
  _QWORD *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  std::string::size_type v166;
  unint64_t v167;
  int v168;
  _QWORD *v169;
  int v170;
  size_t v171;
  unint64_t v172;
  _QWORD *v173;
  char *v174;
  char v175;
  std::string *v176;
  size_t v177;
  std::string::size_type v178;
  size_t v179;
  unint64_t v180;
  std::string *v181;
  size_t v182;
  unint64_t v183;
  std::string *v184;
  size_t v185;
  _BYTE *v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  std::string::size_type v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  std::string *v195;
  std::string *v196;
  std::string::size_type v197;
  _QWORD *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::string::size_type *v206;
  std::string::size_type v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  __int128 v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  char *v230;
  unsigned __int8 *v231;
  unint64_t v232;
  char v233;
  _BYTE *v234;
  std::string *v235;
  __int128 v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  std::mutex *v240;
  uint64_t v241;
  uint64_t v242;
  std::string::size_type v243;
  std::string *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  float32x4_t v248;
  int32x2_t v249;
  int32x2_t v250;
  float32x4_t v251;
  unsigned __int8 *v252;
  std::string::size_type *v253;
  std::string::size_type v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  __int128 v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  std::string::size_type v281;
  std::string *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  std::mutex *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  std::string::size_type v290;
  char v291;
  std::string *v292;
  uint64_t *v293;
  void *v294;
  unint64_t v295;
  __int128 *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  BOOL v300;
  __n128 *v302;
  __int128 *v303;
  size_t v304;
  std::string::size_type v305;
  char v306;
  std::string *v307;
  std::string *v308;
  std::string::size_type v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  std::string::size_type v312;
  std::string::size_type v313;
  std::string *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  std::mutex *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  __int128 *v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  __n128 *v330;
  __int128 *v331;
  size_t v332;
  unsigned int v333;
  std::string::size_type v334;
  int v335;
  int v336;
  std::string::size_type v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  unsigned __int8 *v342;
  unsigned int v343;
  unsigned int v344;
  _QWORD *v345;
  unsigned int v346;
  _QWORD *v347;
  std::string::size_type __src;
  uint64_t v349;
  std::string v350;
  _BYTE v351[32];
  int v352;
  void *v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  std::string v359;
  uint64_t v360[2];
  char v361;
  std::string v362;
  std::string v363;
  __int128 v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  std::string v368;
  std::string v369;
  __int128 __p;
  _BYTE v371[12];
  std::string v372;
  std::string *v373;
  __int128 v374;
  std::string __dst[3];
  int v376;
  int v377;
  int v378;
  int v379;
  std::string v380;
  uint64_t v381;

  v381 = *MEMORY[0x24BDAC8D0];
  v353 = operator new(0x20uLL);
  v354 = xmmword_2245C6440;
  strcpy((char *)v353, "MeshingEngine.ClusterMapping");
  v2 = (unsigned __int8 *)(a1 + 112);
  v349 = a1;
  if (*(_BYTE *)(a1 + 128))
    v3 = *(_OWORD *)v2;
  else
    v3 = xmmword_2245F6D10;
  v374 = v3;
  v4 = *(unsigned int *)(a1 + 2112);
  v5 = *(_DWORD *)(a1 + 2116);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_669;
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
      __dst[0].__r_.__value_.__l.__size_ = 11;
      v12 = HIBYTE(v354);
      v13 = &v353;
      if (v354 < 0)
      {
        v13 = v353;
        v12 = v354;
      }
      __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
      __dst[1].__r_.__value_.__r.__words[0] = v12;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, &v380);
      sub_2241471F8();
      v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
        memset(v351, 0, sizeof(v351));
        v352 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v368.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v368.__r_.__value_.__l.__size_ = 2;
          v15 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          {
            v338 = v14;
            v340 = v15;
            v342 = v2;
            LOBYTE(__p) = 0;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21B18;
            sub_2233B32D0((_DWORD *)(v349 + 2112), &__p, (uint64_t *)&__dst[0].__r_.__value_.__l.__size_);
            v346 = v5;
            __src = v4;
            if (v5 && (_DWORD)v4)
            {
              for (i = 0; i != v346; ++i)
              {
                v22 = 0;
                v23 = 0;
                v24 = *(_DWORD *)(v349 + 2120);
                v25 = *(_QWORD *)(v349 + 2104) + (*(_DWORD *)(v349 + 2124) * i);
                do
                {
                  while (1)
                  {
                    v30 = *(unsigned __int8 *)(v25 + v22);
                    v31 = *(_QWORD *)(v349 + 2176);
                    if (v30 > (*(_QWORD *)(v349 + 2184) - v31) >> 4)
                    {
                      v32 = v378;
                      v33 = v379;
                      size = __dst[1].__r_.__value_.__l.__size_;
                      if (!__dst[1].__r_.__value_.__l.__size_
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      v35 = (char *)(size + (v32 * v23 + v33 * i));
                      v36 = 64;
                      goto LABEL_34;
                    }
                    v37 = v31 + 16 * v30;
                    v38 = sub_22456636C((unsigned __int8 *)v37);
                    v39 = v378;
                    v40 = v379;
                    v41 = __dst[1].__r_.__value_.__l.__size_;
                    if (!__dst[1].__r_.__value_.__l.__size_
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v26 = v41 + (v39 * v23 + v40 * i);
                    *(_BYTE *)(v26 + 2) = (((103 * (_DWORD)v38
                                           + ((((unint64_t)(103 * v38)
                                                            * (unsigned __int128)0x8080808080808081) >> 64) >> 7)) << 16) | ((211 * (int)v38 + ((211 * v38 / 0xFFuLL) & 0x1FFFFFF) - ((211 * v38 / 0xFFuLL) << 8)) << 8) | (53 * (int)v38 + ((53 * v38 / 0xFFuLL) & 0x1FFFFFF) - ((53 * v38 / 0xFFuLL) << 8))) >> 16;
                    *(_WORD *)v26 = ((211 * v38 % 0xFFuLL) << 8) | (53 * v38 % 0xFFuLL);
                    v27 = *(_QWORD *)v37 == (_QWORD)v374 && *(_QWORD *)(v37 + 8) == *((_QWORD *)&v374 + 1);
                    v28 = !v27;
                    v29 = !v28 && ((i | v23) & 3) == 0;
                    v4 = __src;
                    if (v29)
                      break;
                    ++v23;
                    v22 += v24;
                    if (__src == v23)
                      goto LABEL_17;
                  }
                  v42 = v378;
                  v43 = v379;
                  v44 = __dst[1].__r_.__value_.__l.__size_;
                  if (!__dst[1].__r_.__value_.__l.__size_
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v35 = (char *)(v44 + (v42 * v23 + v43 * i));
                  v36 = -1;
LABEL_34:
                  *v35 = v36;
                  v35[1] = v36;
                  v35[2] = v36;
                  ++v23;
                  v22 += v24;
                }
                while (v4 != v23);
LABEL_17:
                ;
              }
            }
            v16.i64[0] = *(_QWORD *)(v349 + 2272);
            v17.i32[0] = *(_DWORD *)(v349 + 2280);
            v18.i32[0] = *(_DWORD *)(v349 + 2296);
            v19.i32[0] = *(_DWORD *)(v349 + 2312);
            v20.i32[0] = *(_DWORD *)(v349 + 2328);
            *(float32x2_t *)v45.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v349 + 2288), v16.f32[0]), *(float32x2_t *)(v349 + 2304), *(float32x2_t *)v16.f32, 1), *(float32x2_t *)(v349 + 2320), v17.f32[0]);
            *(float32x2_t *)&v45.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)v16.f32), v19, *(float32x2_t *)v16.f32, 1), v17, v20);
            v16.i64[0] = *(_QWORD *)(v349 + 2336);
            v16.i32[2] = *(_DWORD *)(v349 + 2344);
            v46 = vaddq_f32(v45, v16);
            v47 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v349 + 2352), v46.f32[0]), *(float32x2_t *)(v349 + 2364), *(float32x2_t *)v46.f32, 1), *(float32x2_t *)(v349 + 2376), v46, 2);
            if (v47.f32[0] >= *(float *)(v349 + 2160)
              && v47.f32[0] <= *(float *)(v349 + 2168)
              && v47.f32[1] >= *(float *)(v349 + 2164)
              && v47.f32[1] <= *(float *)(v349 + 2172))
            {
              v50 = vdiv_f32(vsub_f32(v47, *(float32x2_t *)(v349 + 2160)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
              v51 = vcvtms_u32_f32(v50.f32[0]);
              v52 = vcvtms_u32_f32(v50.f32[1]);
              if (v51 >= 0x8F)
                v51 = 143;
              if (v52 >= 0x8F)
                v52 = 143;
              v53 = v52 - 2;
              v54 = v52 + 2;
              if (v54 >= v346)
                v55 = v346;
              else
                v55 = v54;
              if (v51 + 2 >= __src)
                v56 = __src;
              else
                v56 = v51 + 2;
              v344 = v55;
              if (v53 <= v55 && v51 - 2 <= v56)
              {
                v343 = v51 - 3;
                do
                {
                  v333 = v343;
                  do
                  {
                    v335 = v378;
                    v336 = v379;
                    v337 = __dst[1].__r_.__value_.__l.__size_;
                    if (!__dst[1].__r_.__value_.__l.__size_
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v334 = v337 + v335 + v335 * v333 + v336 * v53;
                    *(_WORD *)v334 = 255;
                    *(_BYTE *)(v334 + 2) = 0;
                    ++v333;
                  }
                  while (v56 != v333);
                  v27 = v53++ == v344;
                }
                while (!v27);
              }
            }
            strcpy((char *)&__p, "room_map");
            *(_WORD *)&v371[7] = 264;
            sub_2231C6C30(__dst, &__p, (__int128 *)&v368, &v372);
            if (v371[8] && (v371[7] & 0x80000000) != 0)
              operator delete((void *)__p);
            v58 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__r.__words[2];
            v2 = v342;
            v5 = v346;
            LODWORD(v4) = __src;
            if (__dst[0].__r_.__value_.__r.__words[2])
            {
              v59 = (unint64_t *)(__dst[0].__r_.__value_.__r.__words[2] + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v61 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v338 + 56))(v338);
            v62 = *v61;
            v63 = (std::__shared_weak_count *)v61[1];
            if (v63)
            {
              p_shared_owners = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldxr(p_shared_owners);
              while (__stxr(v65 + 1, p_shared_owners));
            }
            v66 = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
            v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v369.__r_.__value_.__r.__words[1] = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = 0uLL;
            __dst[0].__r_.__value_.__r.__words[0] = v62;
            __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v63;
            if (v63)
            {
              v67 = (unint64_t *)&v63->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v66;
            if (*((_QWORD *)&v66 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
            }
            (*(void (**)(uint64_t *, std::string *))(*v340 + 16))(v340, __dst);
            v71 = (std::__shared_weak_count *)__dst[1].__r_.__value_.__l.__size_;
            if (__dst[1].__r_.__value_.__l.__size_)
            {
              v72 = (unint64_t *)(__dst[1].__r_.__value_.__l.__size_ + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
            if (__dst[0].__r_.__value_.__l.__size_)
            {
              v75 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v77 = (std::__shared_weak_count *)v369.__r_.__value_.__r.__words[2];
            if (v369.__r_.__value_.__r.__words[2])
            {
              v78 = (unint64_t *)(v369.__r_.__value_.__r.__words[2] + 8);
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
            if (v63)
            {
              v80 = (unint64_t *)&v63->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v82 = (std::__shared_weak_count *)v372.__r_.__value_.__r.__words[2];
            if (v372.__r_.__value_.__r.__words[2])
            {
              v83 = (unint64_t *)(v372.__r_.__value_.__r.__words[2] + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v380.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v85 = sub_2241471F8();
    v86 = v85[2];
    if (!v86)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_669;
      }
      v86 = v85[2];
    }
    v87 = *(_QWORD *)(v86 + 64);
    v88 = (std::mutex *)(v87 + 32);
    std::mutex::lock((std::mutex *)(v87 + 32));
    v90 = *(_QWORD *)(v87 + 96);
    v89 = *(_QWORD *)(v87 + 104);
    std::mutex::unlock(v88);
    if (v90 != v89)
    {
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
      __dst[0].__r_.__value_.__l.__size_ = 11;
      v91 = HIBYTE(v354);
      v92 = &v353;
      if (v354 < 0)
      {
        v92 = v353;
        v91 = v354;
      }
      __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v92;
      __dst[1].__r_.__value_.__r.__words[0] = v91;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, &v380);
      sub_2241471F8();
      v93 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
      {
        memset(v351, 0, sizeof(v351));
        v352 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
        {
          v368.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v368.__r_.__value_.__l.__size_ = 2;
          v94 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
          {
            LODWORD(__p) = v4 >> 2;
            DWORD1(__p) = v5 >> 2;
            v369.__r_.__value_.__s.__data_[0] = 0;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC24788;
            sub_2236B4564(&__p, (void **)&v369.__r_.__value_.__l.__data_, (uint64_t *)&__dst[0].__r_.__value_.__l.__size_);
            v95 = *(_QWORD *)(v349 + 2136);
            v96 = *(_QWORD *)(v349 + 2144);
            if (v95 != v96)
            {
              v97 = 0;
              do
              {
                *(_BYTE *)(__dst[1].__r_.__value_.__l.__size_
                         + v376 * (v97 % (v4 >> 2))
                         + v377 * (v97 / (v4 >> 2))) = (int)fmin((double)(unint64_t)(50 * *(_QWORD *)(v95 + 16)), 255.0);
                v95 += 24;
                ++v97;
              }
              while (v95 != v96);
            }
            strcpy((char *)&__p, "summary_map");
            *(_WORD *)&v371[7] = 267;
            sub_2233B3528((uint64_t)__dst, &__p, (__int128 *)&v368, &v372);
            if (v371[8] && (v371[7] & 0x80000000) != 0)
              operator delete((void *)__p);
            v98 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__r.__words[2];
            if (__dst[0].__r_.__value_.__r.__words[2])
            {
              v99 = (unint64_t *)(__dst[0].__r_.__value_.__r.__words[2] + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            v101 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 56))(v93);
            v102 = *v101;
            v103 = (std::__shared_weak_count *)v101[1];
            if (v103)
            {
              v104 = (unint64_t *)&v103->__shared_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            v106 = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
            v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v369.__r_.__value_.__r.__words[1] = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = 0uLL;
            __dst[0].__r_.__value_.__r.__words[0] = v102;
            __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v103;
            if (v103)
            {
              v107 = (unint64_t *)&v103->__shared_owners_;
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v106;
            if (*((_QWORD *)&v106 + 1))
            {
              v109 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            (*(void (**)(uint64_t *, std::string *))(*v94 + 16))(v94, __dst);
            v111 = (std::__shared_weak_count *)__dst[1].__r_.__value_.__l.__size_;
            if (__dst[1].__r_.__value_.__l.__size_)
            {
              v112 = (unint64_t *)(__dst[1].__r_.__value_.__l.__size_ + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
            if (__dst[0].__r_.__value_.__l.__size_)
            {
              v115 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = (std::__shared_weak_count *)v369.__r_.__value_.__r.__words[2];
            if (v369.__r_.__value_.__r.__words[2])
            {
              v118 = (unint64_t *)(v369.__r_.__value_.__r.__words[2] + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            if (v103)
            {
              v120 = (unint64_t *)&v103->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v122 = (std::__shared_weak_count *)v372.__r_.__value_.__r.__words[2];
            if (v372.__r_.__value_.__r.__words[2])
            {
              v123 = (unint64_t *)(v372.__r_.__value_.__r.__words[2] + 8);
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v380.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_449;
  v125 = sub_2241471F8();
  v126 = v125[2];
  if (!v126)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v126 = v125[2];
      goto LABEL_173;
    }
LABEL_669:
    abort();
  }
LABEL_173:
  v127 = *(_QWORD *)(v126 + 64);
  v128 = (std::mutex *)(v127 + 32);
  std::mutex::lock((std::mutex *)(v127 + 32));
  v130 = *(_QWORD *)(v127 + 96);
  v129 = *(_QWORD *)(v127 + 104);
  std::mutex::unlock(v128);
  if (v130 == v129)
    goto LABEL_449;
  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  __dst[0].__r_.__value_.__l.__size_ = 11;
  __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"Stats.KFCluster.ClusterMapping.MappingFlags";
  __dst[1].__r_.__value_.__r.__words[0] = 43;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, &v350);
  sub_2241471F8();
  v131 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131))
  {
    memset(v351, 0, sizeof(v351));
    v352 = 728325616;
    kdebug_trace();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131)
      || (*(_QWORD *)&v355 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0),
          *((_QWORD *)&v355 + 1) = 2,
          v132 = sub_2241471F8(),
          !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131)))
    {
LABEL_446:
      kdebug_trace();
      goto LABEL_447;
    }
    *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[1] = 0uLL;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[0].__r_.__value_.__l.__size_;
    sub_2245314F4(__dst, &__p);
    v356 = __p;
    sub_22323DF84((uint64_t)__dst, (char *)__dst[0].__r_.__value_.__l.__size_);
    v371[7] = 12;
    strcpy((char *)&__p, "current room");
    v133 = *(unsigned __int8 *)(v349 + 128);
    if (*(_BYTE *)(v349 + 128))
    {
      LODWORD(__dst[1].__r_.__value_.__l.__data_) = 0;
      sub_22319B83C((uint64_t)&v372, (uint64_t)__dst, v2);
      if (LODWORD(__dst[1].__r_.__value_.__l.__data_) == -1)
        sub_22316DD70();
      v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v368;
      ((void (*)(__int128 *__return_ptr, std::string *, std::string *))off_24EC60938[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v364, &v372, __dst);
      if (LODWORD(__dst[1].__r_.__value_.__l.__data_) != -1)
        ((void (*)(std::string *, std::string *))off_24EC60920[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v372, __dst);
      v134 = HIBYTE(v365);
      v135 = HIBYTE(v365);
      if (v365 < 0)
        v134 = *((_QWORD *)&v364 + 1);
      if (v134 >= 4)
        v134 = 4;
      v367 = v365;
      v366 = v364;
      v364 = 0uLL;
      v365 = 0;
      if (v135 < 0)
      {
        *((_QWORD *)&v366 + 1) = v134;
        v136 = (__int128 *)v366;
      }
      else
      {
        HIBYTE(v367) = v134;
        v136 = &v366;
      }
      *((_BYTE *)v136 + v134) = 0;
      v137 = (const char *)&v366;
      if (v367 < 0)
        v137 = (const char *)v366;
    }
    else
    {
      v137 = "0000";
    }
    v369.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
    sub_224527BAC((uint64_t)&__p, (CFStringRef *)__dst);
    v339 = v132;
    v341 = v131;
    sub_223534538((uint64_t)&v356, __dst[0].__r_.__value_.__l.__data_, (const char **)&v369.__r_.__value_.__l.__data_);
    v138 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
    if (__dst[0].__r_.__value_.__l.__size_)
    {
      v139 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    if (v133)
    {
      if (SHIBYTE(v367) < 0)
        operator delete((void *)v366);
      if (SHIBYTE(v365) < 0)
        operator delete((void *)v364);
    }
    if ((v371[7] & 0x80000000) != 0)
      operator delete((void *)__p);
    memset(&v363, 0, sizeof(v363));
    v141 = *(_QWORD **)(v349 + 2440);
    if (v141 != (_QWORD *)(v349 + 2448))
    {
      do
      {
        *(_OWORD *)&v380.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v141 + 25);
        LODWORD(__dst[1].__r_.__value_.__l.__data_) = 0;
        sub_22319B83C((uint64_t)&v368, (uint64_t)__dst, (unsigned __int8 *)&v380);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) == -1)
          sub_22316DD70();
        v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v360;
        ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24EC60938[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v369, &v368, __dst);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) != -1)
          ((void (*)(std::string *, std::string *))off_24EC60920[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v368, __dst);
        v142 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        v143 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v142 = v369.__r_.__value_.__l.__size_;
        if (v142 >= 4)
          v142 = 4;
        v372 = v369;
        memset(&v369, 0, sizeof(v369));
        if (v143 < 0)
        {
          v372.__r_.__value_.__l.__size_ = v142;
          v144 = (std::string *)v372.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v372.__r_.__value_.__s + 23) = v142;
          v144 = &v372;
        }
        v144->__r_.__value_.__s.__data_[v142] = 0;
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = &v372;
        else
          v145 = (std::string *)v372.__r_.__value_.__r.__words[0];
        sub_22456D250("%.4s ", (std::string *)&__p, v145);
        if (v371[7] >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (v371[7] >= 0)
          v147 = v371[7];
        else
          v147 = *((_QWORD *)&__p + 1);
        std::string::append(&v363, p_p, v147);
        if ((v371[7] & 0x80000000) != 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_228:
            if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_229;
            goto LABEL_233;
          }
        }
        else if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_228;
        }
        operator delete(v372.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_229:
          v148 = (_QWORD *)v141[1];
          if (v148)
            goto LABEL_234;
          goto LABEL_236;
        }
LABEL_233:
        operator delete(v369.__r_.__value_.__l.__data_);
        v148 = (_QWORD *)v141[1];
        if (v148)
        {
          do
          {
LABEL_234:
            v149 = v148;
            v148 = (_QWORD *)*v148;
          }
          while (v148);
          goto LABEL_206;
        }
        do
        {
LABEL_236:
          v149 = (_QWORD *)v141[2];
          v27 = *v149 == (_QWORD)v141;
          v141 = v149;
        }
        while (!v27);
LABEL_206:
        v141 = v149;
      }
      while (v149 != (_QWORD *)(v349 + 2448));
    }
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 17;
    strcpy((char *)__dst, "space carve rooms");
    sub_224527BAC((uint64_t)__dst, (CFStringRef *)&__p);
    sub_2231AEDB8((uint64_t)&v356, (const void *)__p, (uint64_t)&v363);
    v150 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v151 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    memset(&v362, 0, sizeof(v362));
    v153 = *(_QWORD **)(v349 + 2416);
    if (v153 != (_QWORD *)(v349 + 2424))
    {
      do
      {
        *(_OWORD *)&v380.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v153 + 25);
        LODWORD(__dst[1].__r_.__value_.__l.__data_) = 0;
        sub_22319B83C((uint64_t)&v368, (uint64_t)__dst, (unsigned __int8 *)&v380);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) == -1)
          sub_22316DD70();
        v368.__r_.__value_.__r.__words[0] = (std::string::size_type)&v359;
        ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24EC60938[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v369, &v368, __dst);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) != -1)
          ((void (*)(std::string *, std::string *))off_24EC60920[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v368, __dst);
        v154 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        v155 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v154 = v369.__r_.__value_.__l.__size_;
        if (v154 >= 4)
          v154 = 4;
        v372 = v369;
        memset(&v369, 0, sizeof(v369));
        if (v155 < 0)
        {
          v372.__r_.__value_.__l.__size_ = v154;
          v156 = (std::string *)v372.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v372.__r_.__value_.__s + 23) = v154;
          v156 = &v372;
        }
        v156->__r_.__value_.__s.__data_[v154] = 0;
        if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v157 = &v372;
        else
          v157 = (std::string *)v372.__r_.__value_.__r.__words[0];
        sub_22456D250("%.4s ", (std::string *)&__p, v157);
        if (v371[7] >= 0)
          v158 = (const std::string::value_type *)&__p;
        else
          v158 = (const std::string::value_type *)__p;
        if (v371[7] >= 0)
          v159 = v371[7];
        else
          v159 = *((_QWORD *)&__p + 1);
        std::string::append(&v362, v158, v159);
        if ((v371[7] & 0x80000000) != 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_270:
            if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_271;
            goto LABEL_275;
          }
        }
        else if ((SHIBYTE(v372.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_270;
        }
        operator delete(v372.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_271:
          v160 = (_QWORD *)v153[1];
          if (v160)
            goto LABEL_276;
          goto LABEL_278;
        }
LABEL_275:
        operator delete(v369.__r_.__value_.__l.__data_);
        v160 = (_QWORD *)v153[1];
        if (v160)
        {
          do
          {
LABEL_276:
            v161 = v160;
            v160 = (_QWORD *)*v160;
          }
          while (v160);
          goto LABEL_248;
        }
        do
        {
LABEL_278:
          v161 = (_QWORD *)v153[2];
          v27 = *v161 == (_QWORD)v153;
          v153 = v161;
        }
        while (!v27);
LABEL_248:
        v153 = v161;
      }
      while (v161 != (_QWORD *)(v349 + 2424));
    }
    *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 19;
    strcpy((char *)__dst, "boundary clip rooms");
    sub_224527BAC((uint64_t)__dst, (CFStringRef *)&__p);
    sub_2231AEDB8((uint64_t)&v356, (const void *)__p, (uint64_t)&v362);
    v162 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v163 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    v361 = 13;
    strcpy((char *)v360, "depth carving");
    memset(&v359, 0, sizeof(v359));
    v165 = *(_QWORD **)(v349 + 2392);
    if (v165 != (_QWORD *)(v349 + 2400))
    {
      do
      {
        LODWORD(__dst[1].__r_.__value_.__l.__data_) = 0;
        sub_22319B83C((uint64_t)&__p, (uint64_t)__dst, (unsigned __int8 *)v165 + 32);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) == -1)
          sub_22316DD70();
        *(_QWORD *)&__p = &v372;
        ((void (*)(std::string *__return_ptr, __int128 *, std::string *))off_24EC60938[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v368, &__p, __dst);
        if (LODWORD(__dst[1].__r_.__value_.__l.__data_) != -1)
          ((void (*)(__int128 *, std::string *))off_24EC60920[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&__p, __dst);
        v166 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
        if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v166 = v368.__r_.__value_.__l.__size_;
        if (v166 >= 4)
          v166 = 4;
        v380 = v368;
        memset(&v368, 0, sizeof(v368));
        if (SHIBYTE(v380.__r_.__value_.__r.__words[2]) < 0)
        {
          v380.__r_.__value_.__l.__size_ = v166;
          *(_BYTE *)(v380.__r_.__value_.__r.__words[0] + v166) = 0;
          v167 = v165[8];
          *(_DWORD *)&v371[8] = -1;
          v168 = SHIBYTE(v380.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_300:
            __p = *(_OWORD *)&v380.__r_.__value_.__l.__data_;
            *(_QWORD *)v371 = *((_QWORD *)&v380.__r_.__value_.__l + 2);
            goto LABEL_303;
          }
        }
        else
        {
          *((_BYTE *)&v380.__r_.__value_.__s + 23) = v166;
          v380.__r_.__value_.__s.__data_[v166] = 0;
          v167 = v165[8];
          *(_DWORD *)&v371[8] = -1;
          v168 = SHIBYTE(v380.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_300;
        }
        sub_223197FA4(&__p, v380.__r_.__value_.__l.__data_, v380.__r_.__value_.__l.__size_);
LABEL_303:
        *(_DWORD *)&v371[8] = 1;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)" (";
        __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        __dst[1].__r_.__value_.__r.__words[0] = (std::string::size_type)" (";
        __dst[1].__r_.__value_.__l.__size_ = (std::string::size_type)" (";
        sub_2231AF1AC((uint64_t *)&__dst[0].__r_.__value_.__r.__words[2], (uint64_t)&__p);
        std::to_string(&v372, v167);
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v372;
        __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        __dst[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v372;
        __dst[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v372;
        if (*(_DWORD *)&v371[8] == -1)
          sub_22316DD70();
        v373 = __dst;
        ((void (*)(std::string **, __int128 *))off_24EC60908[*(unsigned int *)&v371[8]])(&v373, &__p);
        if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v372.__r_.__value_.__l.__data_);
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)") ";
        __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        __dst[1].__r_.__value_.__r.__words[0] = (std::string::size_type)") ";
        __dst[1].__r_.__value_.__l.__size_ = (std::string::size_type)") ";
        if (*(_DWORD *)&v371[8] == -1)
          sub_22316DD70();
        v372.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
        ((void (*)(std::string *, __int128 *))off_24EC60950[*(unsigned int *)&v371[8]])(&v372, &__p);
        if (*(_DWORD *)&v371[8] == -1)
          sub_22316DD70();
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v372;
        ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC60938[*(unsigned int *)&v371[8]])(&v369, __dst, &__p);
        if (*(_DWORD *)&v371[8] != -1)
          ((void (*)(std::string *, __int128 *))off_24EC60920[*(unsigned int *)&v371[8]])(__dst, &__p);
        if (v168 < 0)
        {
          operator delete(v380.__r_.__value_.__l.__data_);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_315:
            operator delete(v368.__r_.__value_.__l.__data_);
            v169 = (_QWORD *)v165[6];
            v345 = v165;
            v347 = v165 + 7;
            if (v169 == v165 + 7)
              goto LABEL_316;
LABEL_324:
            while (2)
            {
              sub_22456D250("(%d %d %d) ", __dst, *((unsigned int *)v169 + 7), *((unsigned int *)v169 + 8), *((unsigned int *)v169 + 9));
              v175 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
              if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v176 = __dst;
              else
                v176 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
              if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v177 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
              else
                v177 = __dst[0].__r_.__value_.__l.__size_;
              if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v178 = 22;
              else
                v178 = (v369.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v179 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
              else
                v179 = v369.__r_.__value_.__l.__size_;
              if (v178 - v179 >= v177)
              {
                if (v177)
                {
                  if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v184 = &v369;
                  else
                    v184 = (std::string *)v369.__r_.__value_.__r.__words[0];
                  memmove((char *)v184 + v179, v176, v177);
                  v185 = v179 + v177;
                  if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                    v369.__r_.__value_.__l.__size_ = v179 + v177;
                  else
                    *((_BYTE *)&v369.__r_.__value_.__s + 23) = v185 & 0x7F;
                  v186 = (char *)v184 + v185;
                  goto LABEL_360;
                }
              }
              else
              {
                v180 = v179 + v177;
                if (0x7FFFFFFFFFFFFFF6 - v178 < v179 + v177 - v178)
                  sub_22316DBC0();
                v181 = &v369;
                if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v181 = (std::string *)v369.__r_.__value_.__r.__words[0];
                __src = (std::string::size_type)v181;
                v182 = 0x7FFFFFFFFFFFFFF7;
                if (v178 <= 0x3FFFFFFFFFFFFFF2)
                {
                  v183 = 2 * v178;
                  if (v180 > 2 * v178)
                    v183 = v179 + v177;
                  if (v183 >= 0x17)
                  {
                    v187 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
                    v188 = v183 | 7;
                    if (v188 == 23)
                      v188 = v187;
                    v182 = v188 + 1;
                  }
                  else
                  {
                    v182 = 23;
                  }
                }
                v189 = operator new(v182);
                v190 = (std::string::size_type)v189;
                if (v179)
                  memmove(v189, (const void *)__src, v179);
                memcpy((void *)(v190 + v179), v176, v177);
                if (v178 != 22)
                  operator delete((void *)__src);
                v369.__r_.__value_.__l.__size_ = v179 + v177;
                v369.__r_.__value_.__r.__words[2] = v182 | 0x8000000000000000;
                v369.__r_.__value_.__r.__words[0] = v190;
                v186 = (_BYTE *)(v190 + v180);
LABEL_360:
                *v186 = 0;
                v175 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
              }
              if (v175 < 0)
              {
                operator delete(__dst[0].__r_.__value_.__l.__data_);
                v191 = (_QWORD *)v169[1];
                if (v191)
                  goto LABEL_365;
                do
                {
LABEL_367:
                  v192 = (_QWORD *)v169[2];
                  v27 = *v192 == (_QWORD)v169;
                  v169 = v192;
                }
                while (!v27);
              }
              else
              {
                v191 = (_QWORD *)v169[1];
                if (!v191)
                  goto LABEL_367;
                do
                {
LABEL_365:
                  v192 = v191;
                  v191 = (_QWORD *)*v191;
                }
                while (v191);
              }
              v169 = v192;
              if (v192 == v347)
                goto LABEL_316;
              continue;
            }
          }
        }
        else if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_315;
        }
        v169 = (_QWORD *)v165[6];
        v345 = v165;
        v347 = v165 + 7;
        if (v169 != v165 + 7)
          goto LABEL_324;
LABEL_316:
        v170 = SHIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v171 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        else
          v171 = v369.__r_.__value_.__l.__size_;
        v172 = v171 + 1;
        if (v171 + 1 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v173 = v345;
        if (v172 >= 0x17)
        {
          v193 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v172 | 7) != 0x17)
            v193 = v172 | 7;
          v194 = v193 + 1;
          v174 = (char *)operator new(v193 + 1);
          __dst[0].__r_.__value_.__r.__words[2] = v194 | 0x8000000000000000;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v174;
          __dst[0].__r_.__value_.__l.__size_ = v171 + 1;
        }
        else
        {
          memset(__dst, 0, 24);
          v174 = (char *)__dst;
          *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v171 + 1;
          if (!v171)
            goto LABEL_378;
        }
        if (v170 >= 0)
          v195 = &v369;
        else
          v195 = (std::string *)v369.__r_.__value_.__r.__words[0];
        memmove(v174, v195, v171);
LABEL_378:
        *(_WORD *)&v174[v171] = 10;
        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v196 = __dst;
        else
          v196 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v197 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
        else
          v197 = __dst[0].__r_.__value_.__l.__size_;
        std::string::append(&v359, (const std::string::value_type *)v196, v197);
        if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_386;
LABEL_389:
          operator delete(v369.__r_.__value_.__l.__data_);
          v198 = (_QWORD *)v345[1];
          if (!v198)
            goto LABEL_392;
          do
          {
LABEL_390:
            v199 = v198;
            v198 = (_QWORD *)*v198;
          }
          while (v198);
          goto LABEL_290;
        }
        operator delete(__dst[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_389;
LABEL_386:
        v198 = (_QWORD *)v345[1];
        if (v198)
          goto LABEL_390;
        do
        {
LABEL_392:
          v199 = (_QWORD *)v173[2];
          v27 = *v199 == (_QWORD)v173;
          v173 = v199;
        }
        while (!v27);
LABEL_290:
        v165 = v199;
      }
      while (v199 != (_QWORD *)(v349 + 2400));
    }
    sub_224527BAC((uint64_t)v360, (CFStringRef *)__dst);
    sub_2231AEDB8((uint64_t)&v356, __dst[0].__r_.__value_.__l.__data_, (uint64_t)&v359);
    v200 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
    if (__dst[0].__r_.__value_.__l.__size_)
    {
      v201 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v359.__r_.__value_.__l.__data_);
      if ((v361 & 0x80000000) == 0)
      {
LABEL_402:
        if ((SHIBYTE(v362.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_403;
        goto LABEL_647;
      }
    }
    else if ((v361 & 0x80000000) == 0)
    {
      goto LABEL_402;
    }
    operator delete((void *)v360[0]);
    if ((SHIBYTE(v362.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_403:
      if ((SHIBYTE(v363.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_404;
LABEL_648:
      operator delete(v363.__r_.__value_.__l.__data_);
LABEL_404:
      LOBYTE(__p) = 0;
      v371[8] = 0;
      sub_2231AD9F0((uint64_t)&v356, &__p, &v355, &v357);
      if (v371[8] && (v371[7] & 0x80000000) != 0)
        operator delete((void *)__p);
      v203 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
      if (*((_QWORD *)&v356 + 1))
      {
        v204 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      v206 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v341 + 56))(v341);
      v207 = *v206;
      v208 = (std::__shared_weak_count *)v206[1];
      if (v208)
      {
        v209 = (unint64_t *)&v208->__shared_owners_;
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v211 = v358;
      v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
      *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = v358;
      v358 = 0uLL;
      __dst[0].__r_.__value_.__r.__words[0] = v207;
      __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v208;
      if (v208)
      {
        v212 = (unint64_t *)&v208->__shared_owners_;
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
      }
      __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
      *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v211;
      if (*((_QWORD *)&v211 + 1))
      {
        v214 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v215 = __ldxr(v214);
        while (__stxr(v215 + 1, v214));
      }
      (*(void (**)(uint64_t *, std::string *))(*v339 + 16))(v339, __dst);
      v216 = (std::__shared_weak_count *)__dst[1].__r_.__value_.__l.__size_;
      if (__dst[1].__r_.__value_.__l.__size_)
      {
        v217 = (unint64_t *)(__dst[1].__r_.__value_.__l.__size_ + 8);
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }
      v219 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
      if (__dst[0].__r_.__value_.__l.__size_)
      {
        v220 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      v222 = (std::__shared_weak_count *)v372.__r_.__value_.__r.__words[2];
      if (v372.__r_.__value_.__r.__words[2])
      {
        v223 = (unint64_t *)(v372.__r_.__value_.__r.__words[2] + 8);
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      if (v208)
      {
        v225 = (unint64_t *)&v208->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      v227 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
      if (*((_QWORD *)&v358 + 1))
      {
        v228 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      goto LABEL_446;
    }
LABEL_647:
    operator delete(v362.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v363.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_404;
    goto LABEL_648;
  }
LABEL_447:
  if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v350.__r_.__value_.__l.__data_);
LABEL_449:
  v360[0] = 0;
  v230 = (char *)operator new(0x30uLL);
  v380.__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
  *(_OWORD *)&v380.__r_.__value_.__r.__words[1] = xmmword_2245C4530;
  strcpy(v230, "Stats.KFCluster.ClusterMapping.CarveDepth");
  v231 = *(unsigned __int8 **)(v349 + 2392);
  if (v231 != (unsigned __int8 *)(v349 + 2400))
  {
    while (1)
    {
      LODWORD(__dst[1].__r_.__value_.__l.__data_) = 0;
      sub_22319B83C((uint64_t)&v372, (uint64_t)__dst, v231 + 32);
      if (LODWORD(__dst[1].__r_.__value_.__l.__data_) == -1)
        sub_22316DD70();
      v372.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
      ((void (*)(__int128 *__return_ptr, std::string *, std::string *))off_24EC60938[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&__p, &v372, __dst);
      if (LODWORD(__dst[1].__r_.__value_.__l.__data_) != -1)
        ((void (*)(std::string *, std::string *))off_24EC60920[LODWORD(__dst[1].__r_.__value_.__l.__data_)])(&v372, __dst);
      v232 = v371[7];
      v233 = v371[7];
      if (v371[7] < 0)
        v232 = *((_QWORD *)&__p + 1);
      if (v232 >= 4)
        v232 = 4;
      *(_QWORD *)&v351[16] = *(_QWORD *)v371;
      *(_OWORD *)v351 = __p;
      __p = 0uLL;
      *(_QWORD *)v371 = 0;
      if (v233 < 0)
      {
        *(_QWORD *)&v351[8] = v232;
        v234 = *(_BYTE **)v351;
      }
      else
      {
        v351[23] = v232;
        v234 = v351;
      }
      v234[v232] = 0;
      v235 = std::string::insert((std::string *)v351, 0, "MeshingEngine.KFCluster.CarveDepth_", 0x23uLL);
      v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
      v368.__r_.__value_.__r.__words[2] = v235->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v236;
      v235->__r_.__value_.__l.__size_ = 0;
      v235->__r_.__value_.__r.__words[2] = 0;
      v235->__r_.__value_.__r.__words[0] = 0;
      if ((v351[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v351);
        if ((v371[7] & 0x80000000) == 0)
          goto LABEL_464;
      }
      else if ((v371[7] & 0x80000000) == 0)
      {
        goto LABEL_464;
      }
      operator delete((void *)__p);
LABEL_464:
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v237 = sub_2241471F8();
        v238 = v237[2];
        if (!v238)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v238 = v237[2];
        }
        v239 = *(_QWORD *)(v238 + 64);
        v240 = (std::mutex *)(v239 + 32);
        std::mutex::lock((std::mutex *)(v239 + 32));
        v242 = *(_QWORD *)(v239 + 96);
        v241 = *(_QWORD *)(v239 + 104);
        std::mutex::unlock(v240);
        if (v242 != v241)
        {
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
          __dst[0].__r_.__value_.__l.__size_ = 11;
          v243 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
          v244 = &v368;
          if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v243 = v368.__r_.__value_.__l.__size_;
            v244 = (std::string *)v368.__r_.__value_.__r.__words[0];
          }
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v244;
          __dst[1].__r_.__value_.__r.__words[0] = v243;
          sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, &v363);
          sub_2241471F8();
          v245 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245))
          {
            memset(v351, 0, sizeof(v351));
            v352 = 728325616;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245))
            {
              v362.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v362.__r_.__value_.__l.__size_ = __src & 0xFFFFFFFFFFFFFF00 | 2;
              __src = v362.__r_.__value_.__l.__size_;
              v246 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245))
              {
                sub_2241498F4((uint64_t)__dst, 0);
                v247 = sub_22456636C(v231 + 32);
                v359.__r_.__value_.__s.__data_[0] = 53 * v247
                                                  + ((((unint64_t)(53 * v247)
                                                                   * (unsigned __int128)0x8080808080808081) >> 64) >> 7);
                v359.__r_.__value_.__s.__data_[1] = -45 * v247
                                                  + ((((unint64_t)(211 * v247)
                                                                   * (unsigned __int128)0x8080808080808081) >> 64) >> 7);
                v359.__r_.__value_.__s.__data_[2] = 103 * v247
                                                  + ((((unint64_t)(103 * v247)
                                                                   * (unsigned __int128)0x8080808080808081) >> 64) >> 7);
                v252 = (unsigned __int8 *)*((_QWORD *)v231 + 6);
                if (v252 != v231 + 56)
                {
                  do
                  {
                    v248.i32[0] = *(_DWORD *)(v349 + 2504);
                    *(float *)v249.i32 = v248.f32[0] * 8.0;
                    *(float *)v250.i32 = (float)((float)(v248.f32[0] * 8.0) * 0.0) * 0.5;
                    *(float32x2_t *)v251.f32 = vcvt_f32_s32(*(int32x2_t *)(v252 + 28));
                    v251.f32[2] = (float)*((int *)v252 + 9);
                    v277 = vaddq_f32((float32x4_t)vdupq_lane_s32(v250, 0), vmulq_n_f32(v251, v248.f32[0]));
                    DWORD2(__p) = v277.i32[2];
                    *(_QWORD *)&__p = v277.i64[0];
                    v278 = vaddq_f32((float32x4_t)vdupq_lane_s32(v249, 0), v277);
                    LODWORD(v369.__r_.__value_.__r.__words[1]) = v278.i32[2];
                    v369.__r_.__value_.__r.__words[0] = v278.i64[0];
                    v248 = sub_223CF1130((uint64_t)&__p, (uint64_t)&v369, 1, (__int8 *)&v359, (uint64_t)__dst, v248, v278, v277);
                    v279 = (unsigned __int8 *)*((_QWORD *)v252 + 1);
                    if (v279)
                    {
                      do
                      {
                        v280 = v279;
                        v279 = *(unsigned __int8 **)v279;
                      }
                      while (v279);
                    }
                    else
                    {
                      do
                      {
                        v280 = (unsigned __int8 *)*((_QWORD *)v252 + 2);
                        v27 = *(_QWORD *)v280 == (_QWORD)v252;
                        v252 = v280;
                      }
                      while (!v27);
                    }
                    v252 = v280;
                  }
                  while (v280 != v231 + 56);
                }
                LOBYTE(__p) = 0;
                v371[8] = 0;
                sub_22329F414((uint64_t)__dst, &__p, (__int128 *)&v362, &v372);
                if (v371[8] && (v371[7] & 0x80000000) != 0)
                  operator delete((void *)__p);
                sub_22316F8F4((uint64_t *)__dst);
                v253 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v245 + 56))(v245);
                v254 = *v253;
                v255 = (std::__shared_weak_count *)v253[1];
                if (v255)
                {
                  v256 = (unint64_t *)&v255->__shared_owners_;
                  do
                    v257 = __ldxr(v256);
                  while (__stxr(v257 + 1, v256));
                }
                v258 = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
                v369.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                *(_OWORD *)&v369.__r_.__value_.__r.__words[1] = *(_OWORD *)&v372.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v372.__r_.__value_.__r.__words[1] = 0uLL;
                __dst[0].__r_.__value_.__r.__words[0] = v254;
                __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v255;
                if (v255)
                {
                  v259 = (unint64_t *)&v255->__shared_owners_;
                  do
                    v260 = __ldxr(v259);
                  while (__stxr(v260 + 1, v259));
                }
                __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
                *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v258;
                if (*((_QWORD *)&v258 + 1))
                {
                  v261 = (unint64_t *)(*((_QWORD *)&v258 + 1) + 8);
                  do
                    v262 = __ldxr(v261);
                  while (__stxr(v262 + 1, v261));
                }
                (*(void (**)(uint64_t *, std::string *))(*v246 + 16))(v246, __dst);
                v263 = (std::__shared_weak_count *)__dst[1].__r_.__value_.__l.__size_;
                if (__dst[1].__r_.__value_.__l.__size_)
                {
                  v264 = (unint64_t *)(__dst[1].__r_.__value_.__l.__size_ + 8);
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v266 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
                if (__dst[0].__r_.__value_.__l.__size_)
                {
                  v267 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }
                v269 = (std::__shared_weak_count *)v369.__r_.__value_.__r.__words[2];
                if (v369.__r_.__value_.__r.__words[2])
                {
                  v270 = (unint64_t *)(v369.__r_.__value_.__r.__words[2] + 8);
                  do
                    v271 = __ldaxr(v270);
                  while (__stlxr(v271 - 1, v270));
                  if (!v271)
                  {
                    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                    std::__shared_weak_count::__release_weak(v269);
                  }
                }
                if (v255)
                {
                  v272 = (unint64_t *)&v255->__shared_owners_;
                  do
                    v273 = __ldaxr(v272);
                  while (__stlxr(v273 - 1, v272));
                  if (!v273)
                  {
                    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                    std::__shared_weak_count::__release_weak(v255);
                  }
                }
                v274 = (std::__shared_weak_count *)v372.__r_.__value_.__r.__words[2];
                if (v372.__r_.__value_.__r.__words[2])
                {
                  v275 = (unint64_t *)(v372.__r_.__value_.__r.__words[2] + 8);
                  do
                    v276 = __ldaxr(v275);
                  while (__stlxr(v276 - 1, v275));
                  if (!v276)
                  {
                    ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                    std::__shared_weak_count::__release_weak(v274);
                  }
                }
              }
            }
            kdebug_trace();
          }
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
        }
      }
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
      __dst[0].__r_.__value_.__l.__size_ = 11;
      v281 = HIBYTE(v380.__r_.__value_.__r.__words[2]);
      v282 = &v380;
      if ((v380.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v281 = v380.__r_.__value_.__l.__size_;
        v282 = (std::string *)v380.__r_.__value_.__r.__words[0];
      }
      __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v282;
      __dst[1].__r_.__value_.__r.__words[0] = v281;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, (std::string *)&__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v283 = sub_2241471F8();
        v284 = v283[2];
        if (!v284)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v284 = v283[2];
        }
        v285 = *(_QWORD *)(v284 + 64);
        v286 = (std::mutex *)(v285 + 32);
        std::mutex::lock((std::mutex *)(v285 + 32));
        v288 = *(_QWORD *)(v285 + 96);
        v287 = *(_QWORD *)(v285 + 104);
        std::mutex::unlock(v286);
        if (v288 != v287)
        {
          sub_2241471F8();
          v289 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v289 + 24))(v289))
          {
            memset(__dst, 0, 32);
            LODWORD(__dst[1].__r_.__value_.__r.__words[1]) = 728325608;
            kdebug_trace();
            v362.__r_.__value_.__r.__words[0] = *((_QWORD *)v231 + 8);
            *(_DWORD *)&v351[24] = 0;
            sub_22319B83C((uint64_t)&v363, (uint64_t)v351, v231 + 32);
            if (*(_DWORD *)&v351[24] == -1)
              sub_22316DD70();
            v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&v359;
            ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60938[*(unsigned int *)&v351[24]])(&v369, &v363, v351);
            if (*(_DWORD *)&v351[24] != -1)
              ((void (*)(std::string *, _BYTE *))off_24EC60920[*(unsigned int *)&v351[24]])(&v363, v351);
            v290 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
            v291 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
            if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v290 = v369.__r_.__value_.__l.__size_;
            if (v290 >= 4)
              v290 = 4;
            v372 = v369;
            memset(&v369, 0, sizeof(v369));
            if (v291 < 0)
            {
              v372.__r_.__value_.__l.__size_ = v290;
              v292 = (std::string *)v372.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v372.__r_.__value_.__s + 23) = v290;
              v292 = &v372;
            }
            v292->__r_.__value_.__s.__data_[v290] = 0;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v289 + 24))(v289))
            {
              *(std::string *)v351 = v372;
              v363.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v363.__r_.__value_.__l.__size_ = 2;
              v293 = sub_2241471F8();
              sub_2231AD778((uint64_t)v293, v289, (uint64_t *)&v362, (uint64_t)v351, (__int128 *)&v363);
              if ((v351[23] & 0x80000000) != 0)
              {
                v294 = *(void **)v351;
                goto LABEL_548;
              }
            }
            else if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
            {
              v294 = (void *)v372.__r_.__value_.__r.__words[0];
LABEL_548:
              operator delete(v294);
            }
            if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v369.__r_.__value_.__l.__data_);
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      LODWORD(__dst[1].__r_.__value_.__r.__words[1]) = 728325624;
      kdebug_trace();
      v295 = v371[7];
      if (v371[7] < 0)
        v295 = *((_QWORD *)&__p + 1);
      if (v295 >= 0x11)
      {
        v296 = v371[7] >= 0 ? &__p : (__int128 *)__p;
        v297 = *(_QWORD *)v296;
        v298 = *((_QWORD *)v296 + 1);
        v299 = *((unsigned __int8 *)v296 + 16);
        v300 = v297 == 0x6365722E64337663 && v298 == 0x73746174532E6E6FLL;
        if (v300 && v299 == 46)
        {
          v302 = sub_223187510();
          if (v371[7] >= 0)
            v303 = &__p;
          else
            v303 = (__int128 *)__p;
          if (v371[7] >= 0)
            v304 = v371[7];
          else
            v304 = *((_QWORD *)&__p + 1);
          v362.__r_.__value_.__r.__words[0] = *((_QWORD *)v231 + 8);
          *(_DWORD *)&v351[24] = 0;
          sub_22319B83C((uint64_t)&v363, (uint64_t)v351, v231 + 32);
          if (*(_DWORD *)&v351[24] == -1)
            sub_22316DD70();
          v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&v359;
          ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60938[*(unsigned int *)&v351[24]])(&v369, &v363, v351);
          if (*(_DWORD *)&v351[24] != -1)
            ((void (*)(std::string *, _BYTE *))off_24EC60920[*(unsigned int *)&v351[24]])(&v363, v351);
          v305 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
          v306 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v305 = v369.__r_.__value_.__l.__size_;
          if (v305 >= 4)
            v305 = 4;
          v372 = v369;
          memset(&v369, 0, sizeof(v369));
          if (v306 < 0)
          {
            v372.__r_.__value_.__l.__size_ = v305;
            v307 = (std::string *)v372.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v372.__r_.__value_.__s + 23) = v305;
            v307 = &v372;
          }
          v307->__r_.__value_.__s.__data_[v305] = 0;
          if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v308 = &v372;
          else
            v308 = (std::string *)v372.__r_.__value_.__r.__words[0];
          if ((v372.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v309 = HIBYTE(v372.__r_.__value_.__r.__words[2]);
          else
            v309 = v372.__r_.__value_.__l.__size_;
          sub_22318760C((uint64_t *)v302, v303, v304, (uint64_t *)&v362, (uint64_t)v308, v309);
          if (SHIBYTE(v372.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v372.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_591;
          }
          else if ((SHIBYTE(v369.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_591;
          }
          operator delete(v369.__r_.__value_.__l.__data_);
        }
      }
LABEL_591:
      kdebug_trace();
      if ((v371[7] & 0x80000000) != 0)
      {
        operator delete((void *)__p);
        v360[0] += *((_QWORD *)v231 + 8);
        if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_593:
          v310 = (unsigned __int8 *)*((_QWORD *)v231 + 1);
          if (v310)
            goto LABEL_597;
          goto LABEL_599;
        }
      }
      else
      {
        v360[0] += *((_QWORD *)v231 + 8);
        if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_593;
      }
      operator delete(v368.__r_.__value_.__l.__data_);
      v310 = (unsigned __int8 *)*((_QWORD *)v231 + 1);
      if (v310)
      {
        do
        {
LABEL_597:
          v311 = v310;
          v310 = *(unsigned __int8 **)v310;
        }
        while (v310);
        goto LABEL_451;
      }
      do
      {
LABEL_599:
        v311 = (unsigned __int8 *)*((_QWORD *)v231 + 2);
        v27 = *(_QWORD *)v311 == (_QWORD)v231;
        v231 = v311;
      }
      while (!v27);
LABEL_451:
      v231 = v311;
      if (v311 == (unsigned __int8 *)(v349 + 2400))
      {
        LODWORD(v312) = HIBYTE(v380.__r_.__value_.__r.__words[2]);
        v313 = v380.__r_.__value_.__l.__size_;
        v230 = (char *)v380.__r_.__value_.__r.__words[0];
        goto LABEL_606;
      }
    }
  }
  LODWORD(v312) = 128;
  v313 = 41;
LABEL_606:
  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  __dst[0].__r_.__value_.__l.__size_ = 11;
  v312 = v312;
  v314 = &v380;
  if ((v312 & 0x80u) != 0)
  {
    v314 = (std::string *)v230;
    v312 = v313;
  }
  __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v314;
  __dst[1].__r_.__value_.__r.__words[0] = v312;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[1].__r_.__value_.__l.__size_, 0, 0, (std::string *)&__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v315 = sub_2241471F8();
    v316 = v315[2];
    if (!v316)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v316 = v315[2];
    }
    v317 = *(_QWORD *)(v316 + 64);
    v318 = (std::mutex *)(v317 + 32);
    std::mutex::lock((std::mutex *)(v317 + 32));
    v320 = *(_QWORD *)(v317 + 96);
    v319 = *(_QWORD *)(v317 + 104);
    std::mutex::unlock(v318);
    if (v320 != v319)
    {
      sub_2241471F8();
      v321 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v321 + 24))(v321))
      {
        memset(__dst, 0, 32);
        LODWORD(__dst[1].__r_.__value_.__r.__words[1]) = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v321 + 24))(v321))
        {
          v351[23] = 16;
          strcpy(v351, "total_candidates");
          v372.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v372.__r_.__value_.__l.__size_ = 2;
          v322 = sub_2241471F8();
          sub_223705674((uint64_t)v322, v321, v360, (uint64_t)v351, (__int128 *)&v372);
          if ((v351[23] & 0x80000000) != 0)
            operator delete(*(void **)v351);
        }
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  LODWORD(__dst[1].__r_.__value_.__r.__words[1]) = 728325624;
  kdebug_trace();
  v323 = v371[7];
  if (v371[7] < 0)
    v323 = *((_QWORD *)&__p + 1);
  if (v323 >= 0x11)
  {
    v324 = &__p;
    if (v371[7] < 0)
      v324 = (__int128 *)__p;
    v325 = *(_QWORD *)v324;
    v326 = *((_QWORD *)v324 + 1);
    v327 = *((unsigned __int8 *)v324 + 16);
    if (v325 == 0x6365722E64337663 && v326 == 0x73746174532E6E6FLL && v327 == 46)
    {
      v330 = sub_223187510();
      if (v371[7] >= 0)
        v331 = &__p;
      else
        v331 = (__int128 *)__p;
      if (v371[7] >= 0)
        v332 = v371[7];
      else
        v332 = *((_QWORD *)&__p + 1);
      sub_22318760C((uint64_t *)v330, v331, v332, v360, (uint64_t)"total_candidates", 16);
    }
  }
  kdebug_trace();
  if ((v371[7] & 0x80000000) != 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_640:
      if ((SHIBYTE(v354) & 0x80000000) == 0)
        return;
LABEL_644:
      operator delete(v353);
      return;
    }
  }
  else if ((SHIBYTE(v380.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_640;
  }
  operator delete(v380.__r_.__value_.__l.__data_);
  if (SHIBYTE(v354) < 0)
    goto LABEL_644;
}

void sub_223BFF8B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_223C00274(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  __int128 v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    v5 = sub_2241471F8();
    return sub_223C03548((uint64_t)v5, a1, a2, (uint64_t)&unk_2245C9EFE, &v6);
  }
  return result;
}

void sub_223C002EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  std::string::size_type size;
  std::string *v9;
  std::string *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::string::size_type v19;
  char v20;
  std::string *p_p;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  __int128 v58;
  _BYTE key[24];
  __int128 v60;
  std::string v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  std::string v66;
  std::string __p;
  std::string v68;
  char v69;
  char *v70;
  char v71;
  __int128 v72;
  unsigned int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  *(_QWORD *)&v58 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
  *((_QWORD *)&v58 + 1) = 2;
  v6 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  *(_QWORD *)&key[8] = 0;
  *(_QWORD *)&key[16] = 0;
  *(_QWORD *)key = &key[8];
  sub_2245314F4(key, &v61);
  v63 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)key, *(char **)&key[8]);
  if (!*(_BYTE *)(a2 + 128))
    sub_22324A974();
  v7 = a2 + 112;
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v61, "current_room");
  LODWORD(v60) = 0;
  sub_22319B83C((uint64_t)&v66, (uint64_t)key, (unsigned __int8 *)v7);
  if ((_DWORD)v60 == -1)
    sub_22316DD70();
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60938[v60])(&__p, &v66, key);
  if ((_DWORD)v60 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60920[v60])(&v66, key);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 4)
    size = 4;
  v68 = __p;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    v68.__r_.__value_.__l.__size_ = size;
    v9 = (std::string *)v68.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v68.__r_.__value_.__s + 23) = size;
    v9 = &v68;
  }
  v9->__r_.__value_.__s.__data_[size] = 0;
  v10 = &v68;
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v68.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v72 = v10;
  sub_224527BAC((uint64_t)&v61, (CFStringRef *)key);
  sub_223534538((uint64_t)&v63, *(void **)key, (const char **)&v72);
  v11 = *(std::__shared_weak_count **)&key[8];
  if (!*(_QWORD *)&key[8])
    goto LABEL_20;
  v12 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_27;
    }
  }
  else
  {
LABEL_20:
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    v57 = v6;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(__p.__r_.__value_.__l.__data_);
  v57 = v6;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_28:
    operator delete(v61.__r_.__value_.__l.__data_);
    memset(&v61, 0, sizeof(v61));
    v17 = (_QWORD *)*a3;
    v15 = a3 + 1;
    v14 = v17;
    if (v17 == v15)
      goto LABEL_66;
    while (1)
    {
LABEL_31:
      v72 = *(_OWORD *)((char *)v14 + 28);
      v73 = *((_DWORD *)v14 + 11);
      v18 = (_QWORD)v72 == *(_QWORD *)v7 && *((_QWORD *)&v72 + 1) == *(_QWORD *)(v7 + 8);
      if (v18)
      {
LABEL_57:
        v25 = (_QWORD *)v14[1];
        if (!v25)
          goto LABEL_63;
        goto LABEL_58;
      }
      LODWORD(v60) = 0;
      sub_22319B83C((uint64_t)&v70, (uint64_t)key, (unsigned __int8 *)&v72);
      if ((_DWORD)v60 == -1)
        sub_22316DD70();
      v70 = &v69;
      ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24EC60938[v60])(&v66, &v70, key);
      if ((_DWORD)v60 != -1)
        ((void (*)(char **, _BYTE *))off_24EC60920[v60])(&v70, key);
      v19 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      v20 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = v66.__r_.__value_.__l.__size_;
      if (v19 >= 4)
        v19 = 4;
      __p = v66;
      memset(&v66, 0, sizeof(v66));
      if (v20 < 0)
      {
        __p.__r_.__value_.__l.__size_ = v19;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
        p_p = &__p;
      }
      p_p->__r_.__value_.__s.__data_[v19] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &__p;
      else
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_22456D250("[%s, %d] ", &v68, v22, v73);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v68;
      else
        v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v24 = v68.__r_.__value_.__l.__size_;
      std::string::append(&v61, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_56:
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_57;
          goto LABEL_62;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_56;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_57;
LABEL_62:
      operator delete(v66.__r_.__value_.__l.__data_);
      v25 = (_QWORD *)v14[1];
      if (!v25)
      {
        do
        {
LABEL_63:
          v26 = (_QWORD *)v14[2];
          v18 = *v26 == (_QWORD)v14;
          v14 = v26;
        }
        while (!v18);
        goto LABEL_30;
      }
      do
      {
LABEL_58:
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
LABEL_30:
      v14 = v26;
      if (v26 == v15)
        goto LABEL_66;
    }
  }
LABEL_23:
  memset(&v61, 0, sizeof(v61));
  v16 = (_QWORD *)*a3;
  v15 = a3 + 1;
  v14 = v16;
  if (v16 != v15)
    goto LABEL_31;
LABEL_66:
  key[23] = 17;
  strcpy(key, "space carve rooms");
  sub_224527BAC((uint64_t)key, (CFStringRef *)&v68);
  sub_2231AEDB8((uint64_t)&v63, v68.__r_.__value_.__l.__data_, (uint64_t)&v61);
  v27 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
  if (!v68.__r_.__value_.__l.__size_)
    goto LABEL_70;
  v28 = (unint64_t *)(v68.__r_.__value_.__l.__size_ + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_70:
    if ((key[23] & 0x80000000) == 0)
      goto LABEL_71;
LABEL_116:
    operator delete(*(void **)key);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((key[23] & 0x80000000) != 0)
    goto LABEL_116;
LABEL_71:
  if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_72;
LABEL_117:
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_72:
  v61.__r_.__value_.__s.__data_[0] = 0;
  v62 = 0;
  sub_2231AD9F0((uint64_t)&v63, (__int128 *)&v61, &v58, &v64);
  if (v62 && SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v34 = *v33;
  v35 = (std::__shared_weak_count *)v33[1];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = v65;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
  *(_OWORD *)&v68.__r_.__value_.__r.__words[1] = v65;
  v65 = 0uLL;
  *(_QWORD *)key = v34;
  *(_QWORD *)&key[8] = v35;
  if (v35)
  {
    v39 = (unint64_t *)&v35->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)&key[16] = &off_24EC6A3B8;
  v60 = v38;
  if (*((_QWORD *)&v38 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  (*(void (**)(uint64_t *, _BYTE *))(*v57 + 16))(v57, key);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)&key[8];
  if (*(_QWORD *)&key[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = (std::__shared_weak_count *)v68.__r_.__value_.__r.__words[2];
  if (v68.__r_.__value_.__r.__words[2])
  {
    v50 = (unint64_t *)(v68.__r_.__value_.__r.__words[2] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v35)
  {
    v52 = (unint64_t *)&v35->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_223C00A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223C00D38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2508))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
    return;
  }
  v31 = 0;
  v32 = 0;
  v30 = (unsigned __int8 *)&v31;
  v4 = *(_QWORD **)(a1 + 2392);
  v5 = (_QWORD *)(a1 + 2400);
  if (v4 == (_QWORD *)(a1 + 2400))
    goto LABEL_3;
  while (2)
  {
    if (!v4[8])
      goto LABEL_49;
    v9 = &v31;
    v10 = &v31;
    if (!v31)
      goto LABEL_46;
    v11 = *((unsigned __int8 *)v4 + 32);
    v12 = v31;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v12;
        v13 = *((unsigned __int8 *)v12 + 25);
        v14 = v11 >= v13;
        if (v11 != v13)
        {
          v15 = *((unsigned __int8 *)v4 + 32);
          goto LABEL_41;
        }
        v15 = *((unsigned __int8 *)v4 + 33);
        v13 = *((unsigned __int8 *)v10 + 26);
        v14 = v15 >= v13;
        if (v15 == v13)
        {
          v15 = *((unsigned __int8 *)v4 + 34);
          v13 = *((unsigned __int8 *)v10 + 27);
          v14 = v15 >= v13;
          if (v15 == v13)
          {
            v15 = *((unsigned __int8 *)v4 + 35);
            v13 = *((unsigned __int8 *)v10 + 28);
            v14 = v15 >= v13;
            if (v15 == v13)
              break;
          }
        }
LABEL_41:
        if (v14)
          goto LABEL_43;
LABEL_9:
        v12 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_46;
      }
      v16 = *((unsigned __int8 *)v4 + 36);
      v17 = *((unsigned __int8 *)v10 + 29);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 37);
      v17 = *((unsigned __int8 *)v10 + 30);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 38);
      v17 = *((unsigned __int8 *)v10 + 31);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 39);
      v17 = *((unsigned __int8 *)v10 + 32);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 40);
      v17 = *((unsigned __int8 *)v10 + 33);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 41);
      v17 = *((unsigned __int8 *)v10 + 34);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 42);
      v17 = *((unsigned __int8 *)v10 + 35);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 43);
      v17 = *((unsigned __int8 *)v10 + 36);
      if (v16 != v17)
        goto LABEL_26;
      v16 = *((unsigned __int8 *)v4 + 44);
      v17 = *((unsigned __int8 *)v10 + 37);
      if (v16 != v17
        || (v16 = *((unsigned __int8 *)v4 + 45), v17 = *((unsigned __int8 *)v10 + 38), v16 != v17)
        || (v16 = *((unsigned __int8 *)v4 + 46), v17 = *((unsigned __int8 *)v10 + 39), v16 != v17)
        || (v16 = *((unsigned __int8 *)v4 + 47), v17 = *((unsigned __int8 *)v10 + 40), v16 != v17))
      {
LABEL_26:
        if (v16 < v17)
          goto LABEL_9;
      }
      v13 = *((unsigned __int8 *)v10 + 29);
      v15 = *((unsigned __int8 *)v4 + 36);
      if (v13 == v15)
      {
        v13 = *((unsigned __int8 *)v10 + 30);
        v15 = *((unsigned __int8 *)v4 + 37);
        if (v13 == v15)
        {
          v13 = *((unsigned __int8 *)v10 + 31);
          v15 = *((unsigned __int8 *)v4 + 38);
          if (v13 == v15)
          {
            v13 = *((unsigned __int8 *)v10 + 32);
            v15 = *((unsigned __int8 *)v4 + 39);
            if (v13 == v15)
            {
              v13 = *((unsigned __int8 *)v10 + 33);
              v15 = *((unsigned __int8 *)v4 + 40);
              if (v13 == v15)
              {
                v13 = *((unsigned __int8 *)v10 + 34);
                v15 = *((unsigned __int8 *)v4 + 41);
                if (v13 == v15)
                {
                  v13 = *((unsigned __int8 *)v10 + 35);
                  v15 = *((unsigned __int8 *)v4 + 42);
                  if (v13 == v15)
                  {
                    v13 = *((unsigned __int8 *)v10 + 36);
                    v15 = *((unsigned __int8 *)v4 + 43);
                    if (v13 == v15)
                    {
                      v13 = *((unsigned __int8 *)v10 + 37);
                      v15 = *((unsigned __int8 *)v4 + 44);
                      if (v13 == v15)
                      {
                        v13 = *((unsigned __int8 *)v10 + 38);
                        v15 = *((unsigned __int8 *)v4 + 45);
                        if (v13 == v15)
                        {
                          v13 = *((unsigned __int8 *)v10 + 39);
                          v15 = *((unsigned __int8 *)v4 + 46);
                          if (v13 == v15)
                          {
                            v13 = *((unsigned __int8 *)v10 + 40);
                            v15 = *((unsigned __int8 *)v4 + 47);
                            if (v13 == v15)
                              goto LABEL_49;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_43:
      if (v13 >= v15)
        goto LABEL_49;
      v12 = v10[1];
    }
    while (v12);
    v9 = v10 + 1;
LABEL_46:
    v18 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v18 + 25) = *((_OWORD *)v4 + 2);
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v10;
    *v9 = (uint64_t *)v18;
    if (*(_QWORD *)v30)
    {
      v30 = *(unsigned __int8 **)v30;
      v18 = (char *)*v9;
    }
    sub_2231A9A8C(v31, (uint64_t *)v18);
    ++v32;
LABEL_49:
    v19 = (_QWORD *)v4[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v4[2];
        v21 = *v20 == (_QWORD)v4;
        v4 = v20;
      }
      while (!v21);
    }
    v4 = v20;
    if (v20 != v5)
      continue;
    break;
  }
LABEL_3:
  v34 = 0;
  v35 = 0;
  v33 = &v34;
  sub_223475C18(&v33, *(unsigned __int8 **)(a1 + 2440), (unsigned __int8 *)(a1 + 2448));
  v37 = 0;
  v38 = 0;
  v36 = &v37;
  sub_223475C18(&v36, v30, (unsigned __int8 *)&v31);
  v40 = 0;
  v41 = 0;
  v39 = &v40;
  sub_223475C18(&v39, *(unsigned __int8 **)(a1 + 2416), (unsigned __int8 *)(a1 + 2424));
  v42 = *(_OWORD *)(a1 + 112);
  v43 = *(_BYTE *)(a1 + 128);
  v6 = v34;
  *(_QWORD *)a2 = v33;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = a2 + 8;
  v8 = v35;
  *(_QWORD *)(a2 + 16) = v35;
  if (v8)
  {
    v6[2] = v7;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v7;
  }
  v23 = v36;
  v22 = v37;
  *(_QWORD *)(a2 + 32) = v37;
  v24 = a2 + 32;
  *(_QWORD *)(a2 + 24) = v23;
  v25 = v38;
  *(_QWORD *)(a2 + 40) = v38;
  if (v25)
  {
    v22[2] = v24;
    v36 = &v37;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v24;
  }
  v27 = v39;
  v26 = v40;
  *(_QWORD *)(a2 + 56) = v40;
  v28 = a2 + 56;
  *(_QWORD *)(a2 + 48) = v27;
  v29 = v41;
  *(_QWORD *)(a2 + 64) = v41;
  if (v29)
  {
    v26[2] = v28;
    v26 = 0;
    v39 = &v40;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v28;
  }
  *(_OWORD *)(a2 + 72) = v42;
  *(_BYTE *)(a2 + 88) = v43;
  *(_BYTE *)(a2 + 96) = 1;
  sub_223198030((uint64_t)&v39, v26);
  sub_223198030((uint64_t)&v36, v37);
  sub_223198030((uint64_t)&v33, v34);
  sub_223198030((uint64_t)&v30, v31);
}

void sub_223C011C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;
  uint64_t v20;

  sub_223198030(v19, a19);
  sub_223198030(v20, a16);
  sub_223198030((uint64_t)&a12, a13);
  sub_223198030((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_223C01218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_223198030((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_223C01230(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int a4, int a5, unsigned __int8 *a6, uint64_t **a7, double a8, float32x4_t a9, double a10, float32x2_t a11, double a12, float32x2_t a13, double a14, double a15)
{
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  _BOOL8 v28;
  uint32x2_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  uint32x2_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned __int32 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned __int32 v55;
  char *v56;
  uint64_t *v57;
  uint64_t *v58;
  unsigned int v60;
  unsigned __int32 v61;
  uint32x2_t v62;

  a9.i32[0] = a3[1].i32[0];
  v15 = a3[2];
  a11.i32[0] = a3[3].i32[0];
  v16 = a3[4];
  a13.i32[0] = a3[5].i32[0];
  v17 = *a2;
  LODWORD(a15) = a2[1].i32[0];
  *(float32x2_t *)v18.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*a2)), v15, *a2, 1), v16, *(float *)&a15);
  *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.f32, *a2), a11, *a2, 1), *(float32x2_t *)&a15, a13);
  *(float32x2_t *)a9.f32 = a3[6];
  a9.i32[2] = a3[7].i32[0];
  v19 = (int8x16_t)vaddq_f32(v18, a9);
  v15.i32[0] = *(_DWORD *)(a1 + 2296);
  v16.i32[0] = *(_DWORD *)(a1 + 2312);
  v17.i32[0] = *(_DWORD *)(a1 + 2328);
  *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2288), *(float *)v19.i32), *(float32x2_t *)(a1 + 2304), *(float32x2_t *)v19.i8, 1), *(float32x2_t *)(a1 + 2320), (float32x4_t)v19, 2);
  v21 = vmla_lane_f32(vmul_f32(v15, *(float32x2_t *)v19.i8), v16, *(float32x2_t *)v19.i8, 1);
  v22 = (float32x4_t)vextq_s8(v19, v19, 8uLL);
  *(float32x2_t *)&v20.u32[2] = vmla_f32(v21, *(float32x2_t *)v22.f32, v17);
  v22.i64[0] = *(_QWORD *)(a1 + 2336);
  v22.i32[2] = *(_DWORD *)(a1 + 2344);
  v23 = vaddq_f32(v20, v22);
  v24 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2352), v23.f32[0]), *(float32x2_t *)(a1 + 2364), *(float32x2_t *)v23.f32, 1), *(float32x2_t *)(a1 + 2376), v23, 2);
  if (v24.f32[0] < *(float *)(a1 + 2160) || v24.f32[0] > *(float *)(a1 + 2168))
    return a4 ^ 1u;
  if (v24.f32[1] < *(float *)(a1 + 2164) || v24.f32[1] > *(float *)(a1 + 2172))
    return a4 ^ 1u;
  v32 = vmin_u32(vcvt_u32_f32(vrndm_f32(vdiv_f32(vsub_f32(v24, *(float32x2_t *)(a1 + 2160)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu)))), (uint32x2_t)0x8F0000008FLL);
  v34 = a7 + 1;
  v33 = a7[1];
  if (v33)
  {
    v35 = a7 + 1;
    v36 = a7[1];
    do
    {
      v37 = *((_DWORD *)v36 + 7);
      if (v37 < v32.i32[0])
      {
        ++v36;
      }
      else if (v32.i32[0] >= v37)
      {
        if (*((_DWORD *)v36 + 8) < v32.i32[1])
          ++v36;
        else
          v35 = (uint64_t **)v36;
      }
      else
      {
        v35 = (uint64_t **)v36;
      }
      v36 = (uint64_t *)*v36;
    }
    while (v36);
    if (v35 != v34)
    {
      v38 = *((_DWORD *)v35 + 7);
      if (v32.i32[0] >= v38 && (v38 < v32.i32[0] || v32.i32[1] >= *((_DWORD *)v35 + 8)))
      {
        while (1)
        {
          v60 = *((_DWORD *)v33 + 7);
          if (v32.i32[0] < v60)
            goto LABEL_64;
          if (v60 < v32.i32[0])
            goto LABEL_69;
          v61 = *((_DWORD *)v33 + 8);
          if (v32.i32[1] < v61)
          {
LABEL_64:
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_70;
          }
          else
          {
            if (v61 >= v32.i32[1])
              return *((unsigned __int8 *)v33 + 36) != 0;
LABEL_69:
            v33 = (uint64_t *)v33[1];
            if (!v33)
LABEL_70:
              sub_223198218("map::at:  key not found");
          }
        }
      }
    }
  }
  v39 = vshr_n_u32(v32, 2uLL);
  v40 = (v39.i32[0] + 36 * v39.i32[1]);
  v41 = *(_QWORD *)(a1 + 2136);
  v62 = v32;
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2144) - v41) >> 3) <= v40)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 703, (uint64_t)"room_summary.size() > summary_index && \"summary_index out of bound\"", 67, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v41 = *(_QWORD *)(a1 + 2136);
    v32 = v62;
  }
  v42 = v41 + 24 * v40;
  if (a5 == 2)
  {
    v28 = *(_QWORD *)(v42 + 16) == 0;
    v43 = *v34;
    v44 = v34;
    if (!*v34)
      goto LABEL_58;
    while (1)
    {
      v44 = v43;
      v45 = *((_DWORD *)v43 + 7);
      if (v32.i32[0] < v45)
        goto LABEL_31;
      if (v45 < v32.i32[0])
      {
LABEL_36:
        v43 = (uint64_t *)v44[1];
        if (!v43)
          goto LABEL_57;
      }
      else
      {
        v46 = *((_DWORD *)v44 + 8);
        if (v32.i32[1] >= v46)
        {
          if (v46 >= v32.i32[1])
            return v28;
          goto LABEL_36;
        }
LABEL_31:
        v43 = (uint64_t *)*v44;
        v34 = (uint64_t **)v44;
        if (!*v44)
          goto LABEL_58;
      }
    }
  }
  v49 = *(_QWORD *)(v42 + 8);
  v47 = v42 + 8;
  v48 = v49;
  if (!v49)
    goto LABEL_48;
  v50 = v47;
  do
  {
    v51 = sub_22319835C((unsigned __int8 *)(v48 + 25), a6);
    if (v51 >= 0)
      v52 = (uint64_t *)v48;
    else
      v52 = (uint64_t *)(v48 + 8);
    if (v51 >= 0)
      v50 = v48;
    v48 = *v52;
  }
  while (*v52);
  if (v50 == v47 || (sub_22319835C(a6, (unsigned __int8 *)(v50 + 25)) & 0x80) != 0)
LABEL_48:
    v50 = v47;
  v28 = v50 != v47;
  v53 = *v34;
  v44 = v34;
  if (*v34)
  {
    while (1)
    {
      v44 = v53;
      v54 = *((_DWORD *)v53 + 7);
      if (v62.i32[0] < v54)
        goto LABEL_51;
      if (v54 < v62.i32[0])
      {
LABEL_56:
        v53 = (uint64_t *)v44[1];
        if (!v53)
        {
LABEL_57:
          v34 = (uint64_t **)(v44 + 1);
          break;
        }
      }
      else
      {
        v55 = *((_DWORD *)v44 + 8);
        if (v62.i32[1] >= v55)
        {
          if (v55 >= v62.i32[1])
            return v28;
          goto LABEL_56;
        }
LABEL_51:
        v53 = (uint64_t *)*v44;
        v34 = (uint64_t **)v44;
        if (!*v44)
          break;
      }
    }
  }
LABEL_58:
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v56 + 28) = v62.u32[0] | ((unint64_t)v62.u32[1] << 32);
  v56[36] = v28;
  *(_QWORD *)v56 = 0;
  *((_QWORD *)v56 + 1) = 0;
  *((_QWORD *)v56 + 2) = v44;
  *v34 = (uint64_t *)v56;
  v57 = (uint64_t *)**a7;
  if (v57)
  {
    *a7 = v57;
    v58 = *v34;
  }
  else
  {
    v58 = (uint64_t *)v56;
  }
  sub_2231A9A8C(a7[1], v58);
  a7[2] = (uint64_t *)((char *)a7[2] + 1);
  return v28;
}

uint64_t sub_223C01678(int32x2_t *a1, uint64_t a2, float32x2_t *a3, unsigned __int8 *a4, int a5, int a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  double v31;
  float32x4_t v32;
  double v33;
  float32x2_t v34;
  double v35;
  float32x2_t v36;
  double v37;
  double v38;
  double v39;
  float32x4_t v40;
  double v41;
  float32x2_t v42;
  double v43;
  float32x2_t v44;
  double v45;
  double v46;
  double v47;
  float32x4_t v48;
  double v49;
  float32x2_t v50;
  double v51;
  float32x2_t v52;
  double v53;
  double v54;
  double v55;
  float32x4_t v56;
  double v57;
  float32x2_t v58;
  double v59;
  float32x2_t v60;
  double v61;
  double v62;
  double v63;
  float32x4_t v64;
  double v65;
  float32x2_t v66;
  double v67;
  float32x2_t v68;
  double v69;
  double v70;
  double v71;
  float32x4_t v72;
  double v73;
  float32x2_t v74;
  double v75;
  float32x2_t v76;
  double v77;
  double v78;
  double v79;
  float32x4_t v80;
  double v81;
  float32x2_t v82;
  double v83;
  float32x2_t v84;
  double v85;
  double v86;
  uint64_t v87;
  float32x2_t v89;
  __int32 v90;
  uint64_t v91;
  __int32 v92;
  float32x2_t v93;
  __int32 v94;
  float32x2_t v95;
  __int32 v96;
  float32x2_t v97;
  __int32 v98;
  float32x2_t v99;
  __int32 v100;
  float32x2_t v101;
  __int32 v102;
  float32x2_t v103;
  __int32 v104;
  uint64_t *v105;
  _QWORD *v106[2];

  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*a1);
  a8.f32[2] = (float)a1[1].i32[0];
  v14 = vmulq_n_f32(a8, a7.f32[0]);
  a9.f32[0] = a7.f32[0] * 11.5;
  a7.f32[0] = a7.f32[0] * -3.5;
  v15 = a7;
  v15.i32[1] = a7.i32[0];
  v16 = v15;
  v16.i32[2] = a7.i32[0];
  v17 = vaddq_f32(v16, v14);
  v90 = v17.i32[2];
  v89 = *(float32x2_t *)v17.f32;
  v18 = a9;
  v18.i32[1] = a7.i32[0];
  v19 = v18;
  v19.i32[2] = a7.i32[0];
  v20 = vaddq_f32(v19, v14);
  v92 = v20.i32[2];
  v91 = v20.i64[0];
  v21 = a7;
  v21.i32[1] = a9.i32[0];
  v22 = v21;
  v22.i32[2] = a7.i32[0];
  v23 = a9;
  v23.i32[1] = a9.i32[0];
  v24 = v23;
  v24.i32[2] = a7.i32[0];
  v106[0] = 0;
  v106[1] = 0;
  v105 = (uint64_t *)v106;
  v25 = vaddq_f32(v22, v14);
  v94 = v25.i32[2];
  v26 = vaddq_f32(v24, v14);
  v96 = v26.i32[2];
  v93 = *(float32x2_t *)v25.f32;
  v95 = *(float32x2_t *)v26.f32;
  v15.i32[2] = a9.i32[0];
  v27 = vaddq_f32(v15, v14);
  v98 = v27.i32[2];
  v97 = *(float32x2_t *)v27.f32;
  v18.i32[2] = a9.i32[0];
  v28 = vaddq_f32(v18, v14);
  v100 = v28.i32[2];
  v99 = *(float32x2_t *)v28.f32;
  v21.i32[2] = a9.i32[0];
  v29 = vaddq_f32(v21, v14);
  v102 = v29.i32[2];
  v23.i32[2] = a9.i32[0];
  v101 = *(float32x2_t *)v29.f32;
  v30 = vaddq_f32(v23, v14);
  v104 = v30.i32[2];
  v103 = *(float32x2_t *)v30.f32;
  if (sub_223C01230(a2, &v89, a3, a6, a5, a4, &v105, *(double *)v30.i64, v14, *(double *)a9.i64, *(float32x2_t *)v15.f32, *(double *)v18.i64, *(float32x2_t *)v21.f32, *(double *)v26.i64, *(double *)v23.i64)|| (sub_223C01230(a2, (float32x2_t *)((unint64_t)&v89 | 0xC), a3,
          a6,
          a5,
          a4,
          &v105,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38) & 1) != 0
    || (sub_223C01230(a2, &v93, a3, a6, a5, a4, &v105, v39, v40, v41, v42, v43, v44, v45, v46) & 1) != 0
    || (sub_223C01230(a2, &v95, a3, a6, a5, a4, &v105, v47, v48, v49, v50, v51, v52, v53, v54) & 1) != 0
    || (sub_223C01230(a2, &v97, a3, a6, a5, a4, &v105, v55, v56, v57, v58, v59, v60, v61, v62) & 1) != 0
    || (sub_223C01230(a2, &v99, a3, a6, a5, a4, &v105, v63, v64, v65, v66, v67, v68, v69, v70) & 1) != 0
    || (sub_223C01230(a2, &v101, a3, a6, a5, a4, &v105, v71, v72, v73, v74, v75, v76, v77, v78) & 1) != 0)
  {
    v87 = 0;
  }
  else
  {
    v87 = sub_223C01230(a2, &v103, a3, a6, a5, a4, &v105, v79, v80, v81, v82, v83, v84, v85, v86) ^ 1;
  }
  sub_223198030((uint64_t)&v105, v106[0]);
  return v87;
}

void sub_223C018F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1 - 72, *(_QWORD **)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_223C01910(float32x2_t *a1, float32x2_t *a2, _QWORD *a3, double a4)
{
  std::chrono::steady_clock::time_point v7;
  float32x2_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  float32x2_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  BOOL v31;
  BOOL v32;
  _QWORD *v33;
  _QWORD *v34;
  int32x2_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  int v40;
  uint64_t *v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  _QWORD *v48;
  float v49;
  float32x2_t v50;
  uint64_t *v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x2_t v59;
  float32x4_t v60;
  _QWORD *v63;
  _QWORD *v64;
  int32x2_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  _QWORD *v71;
  _QWORD *v72;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  std::mutex *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v84;
  std::string::size_type v85;
  int v86;
  __n128 *v89;
  std::string *v90;
  size_t v91;
  float v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v96;
  int v97;
  float v98;
  int v99;
  float32x4_t v100;
  float v101;
  std::string __p;
  uint64_t v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;
  int v107[3];
  __int128 v108;
  __int16 v109;
  uint64_t v110;

  *(double *)v100.i64 = a4;
  v110 = *MEMORY[0x24BDAC8D0];
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = *a1;
  if (!*(_QWORD *)a1)
    return;
  rep = v7.__d_.__rep_;
  v10 = a1[1];
  v103 = (uint64_t)*a1;
  v104 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(*(_QWORD *)&v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(*(_QWORD *)&v8 + 2208);
  if (v13)
  {
    v14 = a1 + 2;
    v15 = *(_QWORD *)&v8 + 2208;
    v16 = *(_QWORD *)&v8 + 2208;
    do
    {
      v17 = sub_22319835C((unsigned __int8 *)(v13 + 32), (unsigned __int8 *)&a1[2]);
      if (v17 >= 0)
        v18 = (uint64_t *)v13;
      else
        v18 = (uint64_t *)(v13 + 8);
      if (v17 >= 0)
        v16 = v13;
      v13 = *v18;
    }
    while (*v18);
    if (v16 != v15 && ((char)sub_22319835C((unsigned __int8 *)&a1[2], (unsigned __int8 *)(v16 + 32)) & 0x80000000) == 0)
    {
      v24 = v103;
      v19.i32[0] = *(_DWORD *)(v103 + 2296);
      v21.i32[0] = *(_DWORD *)(v103 + 2312);
      v25 = *(float32x2_t *)(v103 + 2320);
      v22.i32[0] = *(_DWORD *)(v103 + 2328);
      v26 = *a2;
      v23.i32[0] = a2[1].i32[0];
      v27 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v103 + 2288), COERCE_FLOAT(*a2)), *(float32x2_t *)(v103 + 2304), *a2, 1), v25, v23.f32[0]);
      *(float32x2_t *)&v29.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *a2), v21, *a2, 1), v23, v22);
      v19.i64[0] = *(_QWORD *)(v103 + 2336);
      v19.i32[2] = *(_DWORD *)(v103 + 2344);
      v28 = v103 + 2288;
      v30 = vaddq_f32(v29, v19);
      v20.i64[0] = *(_QWORD *)(v103 + 2376);
      *(float32x2_t *)v29.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v103 + 2352), v30.f32[0]), *(float32x2_t *)(v103 + 2364), *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v20.f32, v30, 2);
      v30.i32[0] = *(_DWORD *)(v103 + 2160);
      v20.i32[0] = *(_DWORD *)(v103 + 2168);
      v31 = v29.f32[0] < v30.f32[0] || v29.f32[0] > v20.f32[0];
      v96 = rep;
      if (v31
        || ((v30.i32[0] = v29.i32[1], v20.i32[0] = *(_DWORD *)(v103 + 2164), v29.f32[1] >= v20.f32[0])
          ? (v32 = v29.f32[1] > *(float *)(v103 + 2172))
          : (v32 = 1),
            v32))
      {
        v97 = 0;
        LOBYTE(v108) = 0;
        v109 = 0;
        v99 = *(unsigned __int8 *)(v16 + 49);
        v33 = a3 + 1;
        v34 = (_QWORD *)*a3;
        if ((_QWORD *)*a3 != a3 + 1)
          goto LABEL_33;
      }
      else
      {
        v35 = vmul_s32((int32x2_t)vmin_u32(vcvt_u32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)(v103 + 2160)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu)))), (uint32x2_t)0x8F0000008FLL), *(int32x2_t *)(v103 + 2120));
        *(int32x2_t *)v30.f32 = vdup_lane_s32(v35, 1);
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v103 + 2104) + vadd_s32(*(int32x2_t *)v30.f32, v35).u32[0]);
        v37 = *(_QWORD *)(v103 + 2176);
        if (v36 >= (*(_QWORD *)(v103 + 2184) - v37) >> 4)
        {
          v39 = 0;
          v40 = 0;
        }
        else
        {
          v38 = (char *)(v37 + 16 * v36);
          v39 = *v38;
          *(_QWORD *)&v105 = *(_QWORD *)(v38 + 1);
          *(_QWORD *)((char *)&v105 + 7) = *((_QWORD *)v38 + 1);
          v40 = 1;
        }
        LOBYTE(v108) = v39;
        *(_QWORD *)((char *)&v108 + 1) = v105;
        *((_QWORD *)&v108 + 1) = *(_QWORD *)((char *)&v105 + 7);
        v97 = v40;
        LOBYTE(v109) = v40;
        HIBYTE(v109) = 1;
        v99 = *(unsigned __int8 *)(v16 + 49);
        v33 = a3 + 1;
        v34 = (_QWORD *)*a3;
        if ((_QWORD *)*a3 != a3 + 1)
        {
          do
          {
LABEL_33:
            v42 = sub_223C01678((int32x2_t *)((char *)v34 + 28), v24, a1 + 4, (unsigned __int8 *)&a1[2], v99, 1, v100, v30, v20);
            v43 = (_QWORD *)v34[1];
            if (v42)
            {
              v44 = v34;
              if (v43)
              {
                do
                {
                  v45 = v43;
                  v43 = (_QWORD *)*v43;
                }
                while (v43);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v44[2];
                  v47 = *v45 == (_QWORD)v44;
                  v44 = v45;
                }
                while (!v47);
              }
              if ((_QWORD *)*a3 == v34)
                *a3 = v45;
              v41 = (uint64_t *)a3[1];
              --a3[2];
              sub_2231AFE60(v41, v34);
              operator delete(v34);
            }
            else if (v43)
            {
              do
              {
                v45 = v43;
                v43 = (_QWORD *)*v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                v45 = (_QWORD *)v34[2];
                v47 = *v45 == (_QWORD)v34;
                v34 = v45;
              }
              while (!v47);
            }
            v34 = v45;
          }
          while (v45 != v33);
        }
      }
      v46 = v97;
      if (v97)
      {
        v47 = (_QWORD)v108 == *v14 && *((_QWORD *)&v108 + 1) == *(_QWORD *)&a1[3];
        v46 = v47;
      }
      v48 = (_QWORD *)*a3;
      if ((_QWORD *)*a3 != v33)
      {
        if (v46)
          v49 = 0.5;
        else
          v49 = 0.25;
        v50 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
        v98 = v49;
        do
        {
          *(float32x2_t *)v29.f32 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)((char *)v48 + 28), (int32x2_t)0x400000004));
          v29.f32[2] = (float)(*((_DWORD *)v48 + 9) + 4);
          v52 = (int8x16_t)vmulq_n_f32(v29, v100.f32[0]);
          v20.i32[0] = a1[5].i32[0];
          v25.i32[0] = a1[7].i32[0];
          v26.i32[0] = a1[9].i32[0];
          *(float32x2_t *)v53.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(a1[4], *(float *)v52.i32), a1[6], *(float32x2_t *)v52.i8, 1), a1[8], (float32x4_t)v52, 2);
          v54 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v52.i8), v25, *(float32x2_t *)v52.i8, 1);
          v55 = (float32x4_t)vextq_s8(v52, v52, 8uLL);
          v56 = vmla_f32(v54, *(float32x2_t *)v55.f32, v26);
          *(float32x2_t *)&v53.u32[2] = v56;
          *(float32x2_t *)v55.f32 = a1[10];
          v55.i32[2] = a1[11].i32[0];
          v57 = vaddq_f32(v55, v53);
          *(float32x2_t *)v53.f32 = *a2;
          v53.i32[2] = a2[1].i32[0];
          v58 = (int8x16_t)vmlaq_n_f32(v57, vsubq_f32(v53, v57), v49);
          v56.i32[0] = *(_DWORD *)(v28 + 8);
          v25.i32[0] = *(_DWORD *)(v28 + 24);
          v26.i32[0] = *(_DWORD *)(v28 + 40);
          *(float32x2_t *)v53.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v28, *(float *)v58.i32), *(float32x2_t *)(v28 + 16), *(float32x2_t *)v58.i8, 1), *(float32x2_t *)(v28 + 32), (float32x4_t)v58, 2);
          v59 = vmla_lane_f32(vmul_f32(v56, *(float32x2_t *)v58.i8), v25, *(float32x2_t *)v58.i8, 1);
          v29 = (float32x4_t)vextq_s8(v58, v58, 8uLL);
          *(float32x2_t *)&v53.u32[2] = vmla_f32(v59, *(float32x2_t *)v29.f32, v26);
          v29.i64[0] = *(_QWORD *)(v28 + 48);
          v29.i32[2] = *(_DWORD *)(v28 + 56);
          v60 = vaddq_f32(v29, v53);
          v20.i64[0] = *(_QWORD *)(v28 + 88);
          *(float32x2_t *)v29.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v28 + 64), v60.f32[0]), *(float32x2_t *)(v28 + 76), *(float32x2_t *)v60.f32, 1), *(float32x2_t *)v20.f32, v60, 2);
          if (v29.f32[0] >= *(float *)(v24 + 2160)
            && v29.f32[0] <= *(float *)(v24 + 2168)
            && v29.f32[1] >= *(float *)(v24 + 2164)
            && v29.f32[1] <= *(float *)(v24 + 2172))
          {
            v65 = vmul_s32((int32x2_t)vmin_u32(vcvt_u32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)(v24 + 2160)), v50))), (uint32x2_t)0x8F0000008FLL), *(int32x2_t *)(v24 + 2120));
            v66 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 2104) + vadd_s32(vdup_lane_s32(v65, 1), v65).u32[0]);
            v67 = *(_QWORD *)(v24 + 2176);
            if (v66 >= (*(_QWORD *)(v24 + 2184) - v67) >> 4)
            {
              if (v99 != 2)
                goto LABEL_84;
            }
            else
            {
              v68 = (char *)(v67 + 16 * v66);
              v69 = *v68;
              *((_QWORD *)&v105 + 1) = *((_QWORD *)v68 + 1);
              *(_QWORD *)((char *)&v105 + 1) = *(_QWORD *)(v68 + 1);
              LOBYTE(v105) = v69;
              if ((_QWORD)v105 != *v14 || *((_QWORD *)&v105 + 1) != *(_QWORD *)&a1[3])
              {
LABEL_84:
                v71 = (_QWORD *)v48[1];
                v72 = v48;
                if (v71)
                {
                  do
                  {
                    v64 = v71;
                    v71 = (_QWORD *)*v71;
                  }
                  while (v71);
                }
                else
                {
                  do
                  {
                    v64 = (_QWORD *)v72[2];
                    v47 = *v64 == (_QWORD)v72;
                    v72 = v64;
                  }
                  while (!v47);
                }
                if ((_QWORD *)*a3 == v48)
                  *a3 = v64;
                v51 = (uint64_t *)a3[1];
                --a3[2];
                sub_2231AFE60(v51, v48);
                operator delete(v48);
                v49 = v98;
                goto LABEL_60;
              }
            }
          }
          v63 = (_QWORD *)v48[1];
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = (_QWORD *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = (_QWORD *)v48[2];
              v47 = *v64 == (_QWORD)v48;
              v48 = v64;
            }
            while (!v47);
          }
LABEL_60:
          v48 = v64;
        }
        while (v64 != v33);
      }
      *(_QWORD *)&v105 = "cv3d.recon.";
      *((_QWORD *)&v105 + 1) = 11;
      *(_QWORD *)&v106 = "Stats.KFCluster.Times.RoomMapping";
      *((_QWORD *)&v106 + 1) = 33;
      sub_2231A9820((uint64_t)&v105, (uint64_t)v107, 0, 0, &__p);
      sub_224569D7C();
      v73 = v96;
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v74 = sub_2241471F8();
        v75 = v74[2];
        if (!v75)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v75 = v74[2];
        }
        v76 = *(_QWORD *)(v75 + 64);
        v77 = (std::mutex *)(v76 + 32);
        std::mutex::lock((std::mutex *)(v76 + 32));
        v79 = *(_QWORD *)(v76 + 96);
        v78 = *(_QWORD *)(v76 + 104);
        std::mutex::unlock(v77);
        if (v79 != v78)
        {
          sub_2241471F8();
          v80 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80))
          {
            v105 = 0u;
            v106 = 0u;
            v107[0] = 728325608;
            kdebug_trace();
            v81 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v96) / 1000000.0;
            v73 = std::chrono::steady_clock::now().__d_.__rep_;
            v101 = v81;
            sub_22386E598((double *)&qword_255788F20, v80, &v101, "trim_alloc");
            kdebug_trace();
          }
        }
      }
      v105 = 0u;
      v106 = 0u;
      v107[0] = 728325624;
      kdebug_trace();
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v84 = p_p->__r_.__value_.__r.__words[0];
        v85 = p_p->__r_.__value_.__l.__size_;
        v86 = p_p->__r_.__value_.__s.__data_[16];
        if (v84 == 0x6365722E64337663 && v85 == 0x73746174532E6E6FLL && v86 == 46)
        {
          v89 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = &__p;
          else
            v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v91 = __p.__r_.__value_.__l.__size_;
          v92 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v73) / 1000000.0;
          std::chrono::steady_clock::now();
          v101 = v92;
          sub_2231897A8((uint64_t *)v89, v90, v91, &v101, (uint64_t)"trim_alloc", 10);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v93 = v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_223C02210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223C02280(uint64_t a1@<X0>, float32x2_t *a2@<X1>, unsigned __int8 *a3@<X2>, int32x2_t **a4@<X3>, int32x2_t **a5@<X8>, float a6@<S0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  int32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int32x2_t *v20;
  int32x2_t *v21;
  float v22;
  int32x2_t *v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x4_t v32;
  int32x2_t **v35;
  unint64_t v36;
  int32x2_t v37;
  int32x2_t *v38;
  int32x2_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  int32x2_t v44;
  int32x2_t *v45;
  int32x2_t *v46;
  int32x2_t v47;
  __int32 v48;
  unint64_t v49;
  int v50;
  float32x4_t v52;

  v11 = a1 + 2208;
  v12 = *(_QWORD *)(a1 + 2208);
  if (!v12)
    goto LABEL_11;
  v13 = a1 + 2208;
  do
  {
    v14 = sub_22319835C((unsigned __int8 *)(v12 + 32), a3);
    if (v14 >= 0)
      v15 = (uint64_t *)v12;
    else
      v15 = (uint64_t *)(v12 + 8);
    if (v14 >= 0)
      v13 = v12;
    v12 = *v15;
  }
  while (*v15);
  if (v13 == v11 || (sub_22319835C(a3, (unsigned __int8 *)(v13 + 32)) & 0x80) != 0)
  {
LABEL_11:
    v13 = v11;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/ClusterMappingManager.cpp", 832, (uint64_t)"iter != rooms_property.end()", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v50 = *(unsigned __int8 *)(v13 + 49);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v20 = *a4;
  v21 = a4[1];
  v22 = a6;
  if (*a4 != v21)
  {
    v23 = 0;
    *(float *)v16.i32 = a6 * 4.0;
    v24 = (float32x4_t)vdupq_lane_s32(v16, 0);
    v52 = v24;
    while (1)
    {
      *(float32x2_t *)v24.f32 = vcvt_f32_s32(*v20);
      v24.f32[2] = (float)v20[1].i32[0];
      v25 = (int8x16_t)vmlaq_n_f32(v52, v24, v22);
      v17.i32[0] = a2[1].i32[0];
      v18.i32[0] = a2[3].i32[0];
      v19.i32[0] = a2[5].i32[0];
      *(float32x2_t *)v26.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a2, *(float *)v25.i32), a2[2], *(float32x2_t *)v25.i8, 1), a2[4], (float32x4_t)v25, 2);
      v27 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v25.i8), v18, *(float32x2_t *)v25.i8, 1);
      v28 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
      v29 = vmla_f32(v27, *(float32x2_t *)v28.f32, v19);
      *(float32x2_t *)&v26.u32[2] = v29;
      *(float32x2_t *)v28.f32 = a2[6];
      v28.i32[2] = a2[7].i32[0];
      v30 = (int8x16_t)vaddq_f32(v28, v26);
      v29.i32[0] = *(_DWORD *)(a1 + 2296);
      v18.i32[0] = *(_DWORD *)(a1 + 2312);
      v19.i32[0] = *(_DWORD *)(a1 + 2328);
      *(float32x2_t *)v28.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2288), *(float *)v30.i32), *(float32x2_t *)(a1 + 2304), *(float32x2_t *)v30.i8, 1), *(float32x2_t *)(a1 + 2320), (float32x4_t)v30, 2);
      v31 = vmla_lane_f32(vmul_f32(v29, *(float32x2_t *)v30.i8), v18, *(float32x2_t *)v30.i8, 1);
      v24 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
      *(float32x2_t *)&v28.u32[2] = vmla_f32(v31, *(float32x2_t *)v24.f32, v19);
      v24.i64[0] = *(_QWORD *)(a1 + 2336);
      v24.i32[2] = *(_DWORD *)(a1 + 2344);
      v32 = vaddq_f32(v24, v28);
      v17.i64[0] = *(_QWORD *)(a1 + 2376);
      *(float32x2_t *)v24.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2352), v32.f32[0]), *(float32x2_t *)(a1 + 2364), *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v17.f32, v32, 2);
      if (v24.f32[0] < *(float *)(a1 + 2160) || v24.f32[0] > *(float *)(a1 + 2168))
        goto LABEL_15;
      v32.i32[0] = *(_DWORD *)(a1 + 2164);
      v17.i32[0] = *(_DWORD *)(a1 + 2172);
      if (v24.f32[1] < v32.f32[0] || v24.f32[1] > v17.f32[0])
        goto LABEL_15;
      v35 = a5;
      v24.f32[0] = v22;
      if (sub_223C01678(v20, a1, a2, a3, v50, 0, v24, v32, v17))
        break;
      v22 = a6;
LABEL_15:
      v20 = (int32x2_t *)((char *)v20 + 12);
      if (v20 == v21)
        return;
    }
    v36 = (unint64_t)a5[2];
    v22 = a6;
    if ((unint64_t)v23 >= v36)
    {
      v39 = *a5;
      v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)*v35) >> 2) + 1;
      if (v40 > 0x1555555555555555)
        sub_22316E078();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v39) >> 2);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0xAAAAAAAAAAAAAAALL)
        v42 = 0x1555555555555555;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 > 0x1555555555555555)
          sub_223174E94();
        v49 = v42;
        v43 = (char *)operator new(12 * v42);
        v22 = a6;
        v42 = v49;
      }
      else
      {
        v43 = 0;
      }
      v44 = *v20;
      v45 = (int32x2_t *)&v43[4 * (((char *)v23 - (char *)v39) >> 2)];
      v45[1].i32[0] = v20[1].i32[0];
      *v45 = v44;
      v46 = v45;
      if (v23 == v39)
      {
        a5 = v35;
        v38 = (int32x2_t *)((char *)v45 + 12);
        *v35 = v45;
        v35[1] = (int32x2_t *)((char *)v45 + 12);
        v35[2] = (int32x2_t *)&v43[12 * v42];
        if (!v23)
          goto LABEL_41;
      }
      else
      {
        do
        {
          v47 = *(int32x2_t *)((char *)v23 - 12);
          v23 = (int32x2_t *)((char *)v23 - 12);
          v48 = v23[1].i32[0];
          *(int32x2_t *)((char *)v46 - 12) = v47;
          v46 = (int32x2_t *)((char *)v46 - 12);
          v46[1].i32[0] = v48;
        }
        while (v23 != v39);
        a5 = v35;
        v23 = *v35;
        v38 = (int32x2_t *)((char *)v45 + 12);
        *v35 = v46;
        v35[1] = (int32x2_t *)((char *)v45 + 12);
        v35[2] = (int32x2_t *)&v43[12 * v42];
        if (!v23)
          goto LABEL_41;
      }
      operator delete(v23);
      v22 = a6;
    }
    else
    {
      v37 = *v20;
      v23[1].i32[0] = v20[1].i32[0];
      *v23 = v37;
      v38 = (int32x2_t *)((char *)v23 + 12);
    }
LABEL_41:
    a5[1] = v38;
    v23 = v38;
    goto LABEL_15;
  }
}

void sub_223C02620(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C02640(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  _QWORD v17[9];
  unint64_t v18[3];
  __int128 v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_DWORD *)(a1 + 68) = 1065353216;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 108) = 1065353216;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  sub_2232BD040(a1 + 136);
  *(_QWORD *)(a1 + 1960) = &off_24EC28BC8;
  v20 = 0;
  LOBYTE(v17[8]) = 0;
  memset(&v17[5], 0, 17);
  v21 = 0;
  v22 = 0;
  sub_22346A424(v18, &v21, &v22, 1, &v20, 1, 0);
  *(_OWORD *)v17 = 0uLL;
  *(_OWORD *)((char *)&v17[1] + 4) = *(_OWORD *)((char *)&v17[6] + 4);
  v4 = v18[0];
  v5 = v18[1];
  v6 = v18[2];
  v16 = v19;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24EC217F8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)v17;
  *(_OWORD *)(v7 + 20) = *(_OWORD *)((char *)&v17[1] + 4);
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v5;
  *(_QWORD *)(v7 + 56) = v6;
  *(_OWORD *)(v7 + 64) = v16;
  v14 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC21890;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v15 = v8;
  sub_2232C24E8((uint64_t *)(a1 + 1968), &v14);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a1 + 2016) = xmmword_2246689DC;
  *(_OWORD *)(a1 + 2032) = *(_OWORD *)algn_2246689EC;
  *(_OWORD *)(a1 + 2048) = xmmword_2246689FC;
  *(_OWORD *)(a1 + 2064) = unk_224668A0C;
  *(_QWORD *)(a1 + 2080) = &off_24EC29028;
  sub_223C0365C((uint64_t *)(a1 + 2088));
  *(_QWORD *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2160) = xmmword_2245F53F0;
  *(_QWORD *)(a1 + 2176) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_QWORD *)(a1 + 2200) = a1 + 2208;
  *(_OWORD *)(a1 + 2224) = xmmword_2246689DC;
  *(_OWORD *)(a1 + 2240) = *(_OWORD *)algn_2246689EC;
  *(_OWORD *)(a1 + 2256) = xmmword_2246689FC;
  *(_OWORD *)(a1 + 2272) = unk_224668A0C;
  *(_OWORD *)(a1 + 2336) = unk_224668A0C;
  *(_OWORD *)(a1 + 2288) = xmmword_2246689DC;
  *(_OWORD *)(a1 + 2304) = *(_OWORD *)algn_2246689EC;
  *(_OWORD *)(a1 + 2320) = xmmword_2246689FC;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2392) = a1 + 2400;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2432) = 0;
  *(_QWORD *)(a1 + 2416) = a1 + 2424;
  *(_QWORD *)(a1 + 2448) = 0;
  *(_QWORD *)(a1 + 2456) = 0;
  *(_QWORD *)(a1 + 2440) = a1 + 2448;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  if (!*(_BYTE *)(a2 + 560)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/include/Reconstruction/Frame/ClusterMappingManager.h", 70, (uint64_t)"config.meshing && \"No meshing config\"", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a2 + 376);
  if (!*(_BYTE *)(a2 + 364))
  {
    if (*(_BYTE *)(a2 + 328))
    {
      v12 = (_DWORD *)(a2 + 288);
      goto LABEL_12;
    }
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
LABEL_14:
    abort();
  }
  v12 = (_DWORD *)(a2 + 344);
LABEL_12:
  *(_DWORD *)(a1 + 2504) = *v12;
  *(_BYTE *)(a1 + 2508) = *(_BYTE *)(a2 + 524);
  *(_BYTE *)(a1 + 2509) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 2512) = &off_24EC60978;
  *(_QWORD *)(a1 + 2520) = sub_223C02280;
  *(_QWORD *)(a1 + 2536) = a1 + 2512;
  return a1;
}

void sub_223C029EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;

  sub_2232C2028(v12 + 245);
  sub_2232555B8(a12);
  sub_22386E26C(v12);
  _Unwind_Resume(a1);
}

void **sub_223C02B04(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_223198030((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223C02B6C(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int32 *a3@<X2>, unsigned __int8 *a4@<X3>, int32x2_t *a5@<X4>, float32x2_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v42;
  signed int v43;
  signed int v44;
  unint64_t v45;
  unint64_t v46;
  int32x2_t v47;
  char *v48;
  int *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  float32x2_t v53;
  uint64_t v54;
  __int32 *v55;
  uint64_t v56;
  int *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int32x2_t *i;
  unint64_t v70;
  int32x2_t v71;
  int32x2_t *v72;
  int32x2_t v73;
  __int32 v74;
  int32x2_t *v75;
  __int32 v76;
  BOOL v77;
  int32x2_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  int32x2_t v84;
  int *v85;
  uint64_t v86;
  int v87;
  int *v88;
  int *v89;
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  char v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v101;
  uint64_t v102;
  int *v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  char v110;
  char v111;
  float v112[3];

  v8 = *(_QWORD *)(a1 + 2208);
  if (!v8)
    goto LABEL_80;
  v13 = a1 + 2352;
  v14 = a1 + 2208;
  v15 = a1 + 2208;
  do
  {
    v16 = sub_22319835C((unsigned __int8 *)(v8 + 32), a4);
    if (v16 >= 0)
      v17 = (uint64_t *)v8;
    else
      v17 = (uint64_t *)(v8 + 8);
    if (v16 >= 0)
      v15 = v8;
    v8 = *v17;
  }
  while (*v17);
  if (v15 == v14)
    goto LABEL_80;
  if ((sub_22319835C(a4, (unsigned __int8 *)(v15 + 32)) & 0x80) != 0)
    goto LABEL_80;
  v95 = *(_BYTE *)(v15 + 49);
  v22 = *(float *)(a1 + 2504);
  *(int32x2_t *)v18.f32 = *a5;
  *(int32x2_t *)v19.i8 = a5[2];
  v23 = (float32x2_t)vzip1_s32(*a5, *(int32x2_t *)v19.i8);
  v18.i32[2] = a5[1].i32[0];
  v19.i32[2] = a5[3].i32[0];
  v24 = (float32x2_t)a5[4];
  v20.i32[0] = a5[5].i32[0];
  v25 = (float32x2_t)vtrn2q_s32((int32x4_t)v18, v19).u64[0];
  v19.i64[0] = vzip2q_s32((int32x4_t)v18, v19).u64[0];
  v26 = (int8x16_t)vdupq_lane_s32((int32x2_t)v25, 0);
  *(int32x2_t *)v21.f32 = a5[6];
  v21.i32[2] = a5[7].i32[0];
  v27 = (int8x16_t)vnegq_f32(v21);
  *(float32x2_t *)v28.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v23, *(float *)v27.i32), v25, *(float32x2_t *)v21.f32, 1), *(float32x2_t *)v19.i8, v21, 2);
  v29 = vmla_f32(vmls_lane_f32(vmul_f32(v24, *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1), *(float32x2_t *)v21.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), v20);
  v30 = (float32x2_t)vextq_s8(v26, (int8x16_t)vdupq_lane_s32((int32x2_t)v25, 1), 0xCuLL).u64[0];
  *(float32x2_t *)&v28.u32[2] = v29;
  v26.i32[0] = a6[1].i32[0];
  *(float32x2_t *)v31.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, COERCE_FLOAT(*a6)), v30, *a6, 1), *(float32x2_t *)v19.i8, *(float *)v26.i32);
  *(float32x2_t *)v19.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v24, *a6), (float32x2_t)vdup_lane_s32((int32x2_t)*a6, 1), v24, 1), *(float32x2_t *)v26.i8, v20);
  v31.i64[1] = v19.i64[0];
  v32 = vaddq_f32(v31, v28);
  __asm { FMOV            V5.4S, #-4.0 }
  v38 = vaddq_f32(v32, _Q5);
  v39.i64[0] = 0x3F0000003F000000;
  v39.i64[1] = 0x3F0000003F000000;
  _Q5.i64[0] = 0x3F0000003F000000;
  _Q5.i64[1] = 0x3F0000003F000000;
  v40 = vmlaq_n_f32(_Q5, v38, 1.0 / v22);
  __asm { FMOV            V16.4S, #4.0 }
  v42 = vmlaq_n_f32(v39, vaddq_f32(v32, _Q16), 1.0 / v22);
  v43 = vcvtms_s32_f32(v40.f32[2]) & 0xFFFFFFC0;
  v44 = vcvtms_s32_f32(v42.f32[2]) & 0xFFFFFFC0;
  v109 = 0;
  if (v43 > v44
    || (v45 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v40.f32)) & 0xFFFFFFC0FFFFFFC0,
        v46 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v42.f32)) & 0xFFFFFFC0FFFFFFC0,
        v47 = vcgt_s32((int32x2_t)v45, (int32x2_t)v46),
        ((v47.i32[1] | v47.i32[0]) & 1) != 0)
    || !a2[1])
  {
LABEL_80:
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)a8 = a8 + 8;
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v107 = (int)v45;
    v51 = (int)v46;
    v96 = SHIDWORD(v45);
    v52 = SHIDWORD(v46);
    v98 = v44;
    v53 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v13, v32.f32[0]), *(float32x2_t *)(v13 + 12), *(float32x2_t *)v32.f32, 1), *(float32x2_t *)(v13 + 24), vadd_f32(*(float32x2_t *)v19.i8, v29).f32[0]);
    v54 = v43;
    v106 = *(float *)(a1 + 2504);
    v55 = a3;
    v101 = SHIDWORD(v46);
    v93 = a1;
    v94 = a4;
LABEL_15:
    v108 = 83492791 * v54;
    v56 = v96;
    v57 = v49;
    v58 = v50;
    v102 = v54;
    do
    {
      if (a2[1])
      {
        v59 = v107;
        v60 = (19349669 * v56) ^ v108;
        do
        {
          v61 = (int8x8_t)a2[1];
          if (v61)
          {
            v62 = v60 ^ (73856093 * v59);
            v63 = (uint8x8_t)vcnt_s8(v61);
            v63.i16[0] = vaddlv_u8(v63);
            if (v63.u32[0] > 1uLL)
            {
              v64 = v60 ^ (73856093 * v59);
              if (v62 >= *(_QWORD *)&v61)
                v64 = v62 % *(_QWORD *)&v61;
            }
            else
            {
              v64 = (*(_QWORD *)&v61 - 1) & v62;
            }
            v65 = *(uint64_t ***)(*a2 + 8 * v64);
            if (v65)
            {
              v66 = *v65;
              if (v66)
              {
                if (v63.u32[0] < 2uLL)
                {
                  v67 = *(_QWORD *)&v61 - 1;
                  while (1)
                  {
                    v68 = v66[1];
                    if (v62 == v68)
                    {
                      if (*((_DWORD *)v66 + 4) == (_DWORD)v59
                        && *((_DWORD *)v66 + 5) == (_DWORD)v56
                        && *((_DWORD *)v66 + 6) == (_DWORD)v54)
                      {
                        goto LABEL_35;
                      }
                    }
                    else if ((v68 & v67) != v64)
                    {
                      goto LABEL_19;
                    }
                    v66 = (uint64_t *)*v66;
                    if (!v66)
                      goto LABEL_19;
                  }
                }
                do
                {
                  v70 = v66[1];
                  if (v62 == v70)
                  {
                    if (*((_DWORD *)v66 + 4) == (_DWORD)v59
                      && *((_DWORD *)v66 + 5) == (_DWORD)v56
                      && *((_DWORD *)v66 + 6) == (_DWORD)v54)
                    {
LABEL_35:
                      for (i = (int32x2_t *)v66[6]; i; i = (int32x2_t *)*i)
                      {
                        v72 = i + 2;
                        *(float32x2_t *)v18.f32 = vcvt_f32_s32(vadd_s32(i[2], (int32x2_t)0x400000004));
                        v18.f32[2] = (float)(i[3].i32[0] + 4);
                        v18 = vmulq_n_f32(v18, v22);
                        *(float32x2_t *)v18.f32 = vsub_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v13, v18.f32[0]), *(float32x2_t *)(v13 + 12), *(float32x2_t *)v18.f32, 1), *(float32x2_t *)(v13 + 24), v18, 2), v53);
                        if (vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 1), *(float32x2_t *)v18.f32, 1).f32[0] <= 16.0)
                        {
                          v73 = i[5];
                          if (v73)
                          {
                            v74 = *v55;
                            v75 = i + 5;
                            do
                            {
                              v76 = *(_DWORD *)(*(_QWORD *)&v73 + 28);
                              v77 = v76 < v74;
                              if (v76 >= v74)
                                v78 = (int32x2_t *)v73;
                              else
                                v78 = (int32x2_t *)(*(_QWORD *)&v73 + 8);
                              if (!v77)
                                v75 = (int32x2_t *)v73;
                              v73 = *v78;
                            }
                            while (*v78);
                            if (v75 != &i[5] && v74 >= v75[3].i32[1])
                            {
                              if (v49 < (int *)v48)
                              {
                                v71 = *v72;
                                v49[2] = i[3].i32[0];
                                *(int32x2_t *)v49 = v71;
                                v49 += 3;
                              }
                              else
                              {
                                v79 = 0xAAAAAAAAAAAAAAABLL * (v49 - v58);
                                v80 = v79 + 1;
                                if (v79 + 1 > 0x1555555555555555)
                                  sub_22316E078();
                                if (0x5555555555555556 * ((v48 - (char *)v58) >> 2) > v80)
                                  v80 = 0x5555555555555556 * ((v48 - (char *)v58) >> 2);
                                if (0xAAAAAAAAAAAAAAABLL * ((v48 - (char *)v58) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                                  v81 = 0x1555555555555555;
                                else
                                  v81 = v80;
                                if (v81)
                                {
                                  v104 = v58;
                                  v105 = v60;
                                  if (v81 > 0x1555555555555555)
                                    sub_223174E94();
                                  v82 = v81;
                                  v83 = (char *)operator new(12 * v81);
                                  v22 = v106;
                                  v58 = v104;
                                  v81 = v82;
                                  v60 = v105;
                                }
                                else
                                {
                                  v83 = 0;
                                }
                                v84 = *v72;
                                v85 = (int *)&v83[12 * v79];
                                v85[2] = i[3].i32[0];
                                *(int32x2_t *)v85 = v84;
                                v50 = v85;
                                if (v49 != v58)
                                {
                                  do
                                  {
                                    v86 = *(_QWORD *)(v49 - 3);
                                    v49 -= 3;
                                    v87 = v49[2];
                                    *(_QWORD *)(v50 - 3) = v86;
                                    v50 -= 3;
                                    v50[2] = v87;
                                  }
                                  while (v49 != v58);
                                  v49 = v58;
                                }
                                v48 = &v83[12 * v81];
                                v88 = v85 + 3;
                                v109 = v50;
                                if (v49)
                                {
                                  v89 = v49;
                                  v90 = v48;
                                  operator delete(v89);
                                  v48 = v90;
                                  v22 = v106;
                                }
                                v58 = v50;
                                v54 = v102;
                                v55 = a3;
                                v49 = v88;
                                v52 = v101;
                              }
                              v57 = v49;
                            }
                          }
                        }
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v70 >= *(_QWORD *)&v61)
                      v70 %= *(_QWORD *)&v61;
                    if (v70 != v64)
                      break;
                  }
                  v66 = (uint64_t *)*v66;
                }
                while (v66);
              }
            }
          }
LABEL_19:
          v59 += 64;
        }
        while (v59 <= v51);
      }
      v56 += 64;
    }
    while (v56 <= v52);
    while (1)
    {
      v54 += 64;
      if (v54 > v98)
        break;
      v49 = v57;
      if (a2[1])
        goto LABEL_15;
    }
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)a8 = a8 + 8;
    v91 = v57;
    if (v50 != v57)
    {
      do
      {
        v112[0] = v22;
        v111 = v95;
        v110 = 0;
        v92 = *(_QWORD *)(a7 + 24);
        if (!v92)
          sub_223198474();
        if ((*(unsigned int (**)(uint64_t, int *, float *, uint64_t, int32x2_t *, unsigned __int8 *, char *, char *))(*(_QWORD *)v92 + 48))(v92, v50, v112, v93, a5, v94, &v111, &v110))
        {
          sub_22397FD34((uint64_t **)a8, v50, (uint64_t)v50);
        }
        v50 += 3;
        v22 = v106;
      }
      while (v50 != v91);
      v91 = v109;
    }
    if (v91)
      operator delete(v91);
  }
}

void sub_223C03224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  sub_223198030(a17, *(_QWORD **)(a17 + 8));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223C0325C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_223198030(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD **sub_223C032B0(_QWORD **a1, _OWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v5;
  _OWORD *v7;
  unsigned __int8 *v8;
  char *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v5 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a4)
  {
    v7 = a2;
    do
    {
      *(_OWORD *)v15 = *v7;
      v8 = sub_223426D4C(a1, v5, &v14, &v13, v15);
      if (!*(_QWORD *)v8)
      {
        v9 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v9 + 25) = *(_OWORD *)v15;
        v10 = v14;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v10;
        *(_QWORD *)v8 = v9;
        v11 = (_QWORD *)**a1;
        if (v11)
        {
          *a1 = v11;
          v9 = *(char **)v8;
        }
        sub_2231A9A8C(a1[1], (uint64_t *)v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      v7 = (_OWORD *)((char *)v7 + 360);
    }
    while (v7 != a4);
  }
  return a1;
}

void sub_223C033C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_223C033D8(_QWORD *a1, int *a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = a1 + 1;
  result = a1[1];
  if (!result)
    return result;
  v6 = *a2;
  v5 = a2[1];
  v7 = v4;
  v8 = (_DWORD *)result;
  v9 = a2[2];
  do
  {
    v13 = v8[7];
    v14 = v13 < v6;
    if (v13 == v6)
    {
      v15 = v8[8];
      v14 = v15 < v5;
      if (v15 == v5)
        v14 = v8[9] < v9;
    }
    v10 = v14;
    v11 = v10 == 0;
    if (v10)
      v12 = v8 + 2;
    else
      v12 = v8;
    if (v11)
      v7 = v8;
    v8 = (_DWORD *)*v12;
  }
  while (*v12);
  if (v7 == (_DWORD *)v4)
    return 0;
  v16 = v7[7];
  v17 = v6 < v16;
  if (v6 == v16)
  {
    v18 = v7[8];
    v17 = v5 < v18;
    if (v5 == v18)
    {
      if (v9 < v7[9])
        return 0;
      goto LABEL_25;
    }
  }
  if (v17)
    return 0;
LABEL_25:
  v19 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (v19)
  {
    do
    {
      v20 = v19;
      v19 = (_QWORD *)*v19;
    }
    while (v19);
  }
  else
  {
    v21 = v7;
    do
    {
      v20 = (_QWORD *)v21[2];
      v11 = *v20 == (_QWORD)v21;
      v21 = v20;
    }
    while (!v11);
  }
  if ((_DWORD *)*a1 == v7)
    *a1 = v20;
  --a1[2];
  sub_2231AFE60((uint64_t *)result, (uint64_t *)v7);
  operator delete(v7);
  return 1;
}

void sub_223C03504(_QWORD *a1)
{
  if (a1)
  {
    sub_223C03504(*a1);
    sub_223C03504(a1[1]);
    sub_223198030((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t sub_223C03548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_2231AD9F0(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_223C03628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_223C0365C(uint64_t *a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  _OWORD v13[4];
  size_t v14[3];
  __int128 v15;
  char v16;
  uint64_t v17;
  void *v18;

  v16 = 0;
  BYTE8(v13[3]) = 0;
  memset(&v13[2], 0, 17);
  v17 = 0;
  v18 = 0;
  sub_223316930(v14, &v17, &v18, 1, (void **)&v16, 1, 0);
  v13[0] = 0uLL;
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)&v13[2] + 12);
  v3 = v14[0];
  v2 = v14[1];
  v4 = v14[2];
  v12 = v15;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24EC20D50;
  *(_OWORD *)(v5 + 8) = v13[0];
  *(_OWORD *)(v5 + 20) = *(_OWORD *)((char *)v13 + 12);
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v12;
  v10 = v5;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24880;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v11 = v6;
  sub_2232C54C4(a1, &v10);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223C037D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223C037F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231F9050((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223C03808(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_223C03824()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223C03838(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC60978;
  result[1] = v3;
  return result;
}

uint64_t sub_223C0386C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC60978;
  a2[1] = v2;
  return result;
}

uint64_t sub_223C03888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(a1 + 8))(a2, a3, a4, a6, *a5);
}

uint64_t sub_223C038A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS_9allocatorIS3_EEEERKN4cv3d5recon5frame21ClusterMapp"
                     "ingManagerERKNS1_15SE3GroupStorageIfNS2_IfLj4ELj4ELb1EEEEERKNS7_3esn6random4UUIDEfRKS6_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS_9allocatorIS3_EEEERKN4cv3d5recon5frame21"
                                "ClusterMappingManagerERKNS1_15SE3GroupStorageIfNS2_IfLj4ELj4ELb1EEEEERKNS7_3esn6random4UUIDEfRKS6_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS_9allocatorIS3_EEEERKN4cv3d5recon5frame21ClusterMappingManagerERKNS1_15SE3GroupStorageIfNS2_IfLj4ELj4ELb1EEEEERKNS7_3esn6random4UUIDEfRKS6_E"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS_9allocatorIS3_EEEERKN4cv3d5recon5frame21ClusterMappingManagerERKNS1_15SE3GroupStorageIfNS2_IfLj4ELj4ELb1EEEEERKNS7_3esn6random4UUIDEfRKS6_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223C03910()
{
  return &unk_24EC609F8;
}

uint64_t sub_223C0391C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7)
{
  unint64_t v7;
  float32x4_t v8;
  float v9;
  int v10;
  int32x4_t v11;
  float v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  float16x4_t *v28;
  int v29;
  uint64_t v30;
  const float *v41;
  float32x4_t v42;
  int16x4_t v43;
  float32x4_t v44;
  int8x8_t v45;
  uint16x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  BOOL v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;

  v7 = *(_QWORD *)(a5 + 32);
  v8 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v9 = 0.0;
  v61 = HIDWORD(v7);
  v62 = result;
  if (HIDWORD(v7))
  {
    v64 = *(_QWORD *)(a5 + 32);
    if (*(_QWORD *)(a5 + 32))
    {
      v10 = 0;
      v8 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v11 = 0uLL;
      v12 = 0.0;
      v13 = 0uLL;
      v14.i64[0] = 0x100000001;
      v14.i64[1] = 0x100000001;
      v15 = 0.0;
      v16 = 0.0;
      while (1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(_DWORD *)(v62 + 40);
        v22 = *(_QWORD *)(v62 + 24) + 2 * (*(_DWORD *)(v62 + 44) * v10);
        v23 = *(_DWORD *)(a6 + 40);
        v24 = *(_QWORD *)(a6 + 24) + 2 * (*(_DWORD *)(a6 + 44) * v10);
        v25 = *(_DWORD *)(a2 + 40);
        v26 = *(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * v10);
        v27 = 2 * v21;
        v28 = (float16x4_t *)(*(_QWORD *)(a5 + 24) + 2 * (*(_DWORD *)(a5 + 44) * v10));
        v29 = 3 * v21;
        v63 = v10;
        v30 = *(_QWORD *)(a3 + 24) + (*(_DWORD *)(a3 + 44) * v10) + 1;
        do
        {
          result = v23 + v18;
          LOWORD(_S24) = *(_WORD *)(v24 + 2 * v18);
          LOWORD(_S23) = *(_WORD *)(v24 + 2 * result);
          LOWORD(_S20) = *(_WORD *)(v24 + 2 * (2 * v23 + v18));
          LOWORD(_S17) = *(_WORD *)(v24 + 2 * (3 * v23 + v18));
          v41 = (const float *)a7 + 1;
          v42 = vcvtq_f32_f16(*v28);
          v43.i16[0] = *(unsigned __int8 *)(v26 + v19);
          v43.i16[1] = *(unsigned __int8 *)(v26 + v25 + v19);
          v43.i16[2] = *(unsigned __int8 *)(v26 + 2 * v25 + v19);
          v43.i16[3] = *(unsigned __int8 *)(v26 + 3 * v25 + v19);
          v44 = vld1q_dup_f32(v41);
          v45 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v42, (float32x4_t)vdupq_lane_s32(*a7, 0)), (int8x16_t)vcgtq_f32(v44, v42)));
          v44.i16[0] = LOWORD(_S24);
          v44.i16[1] = LOWORD(_S23);
          v44.i16[2] = LOWORD(_S20);
          v44.i16[3] = LOWORD(_S17);
          v46 = (uint16x4_t)vand_s8(vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(vcvtq_f32_f16(*(float16x4_t *)v44.f32))), vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v42)), v45)), (int8x8_t)vceqz_s16(v43));
          v47 = vminnmq_f32(v42, v8);
          v48 = vmaxnmq_f32(v42, v13);
          if ((v46.i8[0] & 1) != 0)
          {
            __asm { FCVT            S25, H24 }
            _S25 = _S25 * 0.9;
            __asm { FCVT            H25, S25 }
            if (!*(_BYTE *)(v30 + v20 - 1))
              _S24 = _S25;
            *(_WORD *)(v22 + 2 * v17) = LOWORD(_S24);
            v8.i32[0] = v47.i32[0];
            v13.i32[0] = v48.i32[0];
            v9 = v9 + v42.f32[0];
            if ((v46.i8[2] & 1) == 0)
            {
LABEL_14:
              *(_WORD *)(v22 + 2 * (v21 + v17)) = 0;
              if ((v46.i8[4] & 1) == 0)
                goto LABEL_15;
              goto LABEL_21;
            }
          }
          else
          {
            *(_WORD *)(v22 + 2 * v17) = 0;
            if ((v46.i8[2] & 1) == 0)
              goto LABEL_14;
          }
          __asm { FCVT            S24, H23 }
          _S24 = _S24 * 0.9;
          __asm { FCVT            H24, S24 }
          if (!*(_BYTE *)(v30 + v20))
            _S23 = _S24;
          *(_WORD *)(v22 + 2 * (v21 + v17)) = LOWORD(_S23);
          v8.i32[1] = v47.i32[1];
          v13.i32[1] = v48.i32[1];
          v16 = v16 + v42.f32[1];
          if ((v46.i8[4] & 1) == 0)
          {
LABEL_15:
            *(_WORD *)(v22 + 2 * (v27 + v17)) = 0;
            if ((v46.i8[6] & 1) == 0)
              goto LABEL_24;
            goto LABEL_6;
          }
LABEL_21:
          __asm { FCVT            S23, H20 }
          _S23 = _S23 * 0.9;
          __asm { FCVT            H23, S23 }
          if (!*(_BYTE *)(v30 + v20 + 1))
            _S20 = _S23;
          *(_WORD *)(v22 + 2 * (v27 + v17)) = LOWORD(_S20);
          v8.i32[2] = v47.i32[2];
          v13.i32[2] = v48.i32[2];
          v15 = v15 + v42.f32[2];
          if ((v46.i8[6] & 1) == 0)
          {
LABEL_24:
            *(_WORD *)(v22 + 2 * (v29 + v17)) = 0;
            goto LABEL_9;
          }
LABEL_6:
          __asm { FCVT            S20, H17 }
          _S20 = _S20 * 0.9;
          __asm { FCVT            H20, S20 }
          if (!*(_BYTE *)(v30 + v20 + 2))
            _S17 = _S20;
          *(_WORD *)(v22 + 2 * (v29 + v17)) = LOWORD(_S17);
          v8.i32[3] = v47.i32[3];
          v13.i32[3] = v48.i32[3];
          v12 = v12 + v42.f32[3];
LABEL_9:
          v20 += 4;
          v19 += 4 * v25;
          v11 = vaddq_s32(v11, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v46), v14));
          v18 += 4 * v23;
          v17 += 4 * v21;
          ++v28;
        }
        while (v20 < v64);
        v10 = v63 + 1;
        if (v63 + 1 == (_DWORD)v61)
          goto LABEL_26;
      }
    }
  }
  v11 = 0uLL;
  v13 = 0uLL;
  v16 = 0.0;
  v15 = 0.0;
  v12 = 0.0;
LABEL_26:
  v55 = vaddvq_s32(v11);
  if (v55)
    v56 = (float)((float)((float)(v9 + v16) + v15) + v12) / (float)v55;
  else
    v56 = -65504.0;
  v57 = vminnmvq_f32(v8);
  v58 = vmaxnmvq_f32(v13);
  v59 = v57 > v58;
  if (v57 > v58)
    v57 = -65504.0;
  *(float *)(a4 + 4) = v56;
  *(float *)(a4 + 8) = v57;
  if (v59)
    v60 = -65504.0;
  else
    v60 = v58;
  *(float *)(a4 + 12) = v60;
  *(_DWORD *)a4 = v55;
  return result;
}

uint64_t sub_223C03D00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24EC60A28;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 4);
  v5 = *(_OWORD *)(a2 + 20);
  v6 = *(_OWORD *)(a2 + 36);
  v7 = *(_OWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  v8 = a1 + 104;
  *(_OWORD *)(a1 + 60) = v7;
  *(_OWORD *)(a1 + 44) = v6;
  *(_OWORD *)(a1 + 28) = v5;
  *(_OWORD *)(a1 + 12) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_224668DA0;
  *(_OWORD *)(a1 + 144) = unk_224668DB0;
  *(_OWORD *)(a1 + 160) = xmmword_224668DC0;
  *(_OWORD *)(a1 + 176) = unk_224668DD0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  v9 = *a3;
  if (!*a3)
  {
    v16 = operator new();
    *(_QWORD *)(v16 + 192) = 0;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_QWORD *)v16 = off_24EC61B38;
    *(_DWORD *)(v16 + 112) = 0;
    *(_OWORD *)(v16 + 164) = unk_224668DD0;
    *(_OWORD *)(v16 + 148) = xmmword_224668DC0;
    *(_OWORD *)(v16 + 132) = unk_224668DB0;
    *(_OWORD *)(v16 + 116) = xmmword_224668DA0;
    v10 = (_OWORD *)(v8 - 92);
    v11 = (_OWORD *)(v8 + 24);
    v12 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v16;
    if (!v12)
      goto LABEL_4;
    goto LABEL_3;
  }
  *a3 = 0;
  v10 = (_OWORD *)(v8 - 92);
  v11 = (_OWORD *)(v8 + 24);
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v9;
  if (v12)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
LABEL_4:
  v13 = v10[1];
  *v11 = *v10;
  v11[1] = v13;
  v14 = v10[3];
  v11[2] = v10[2];
  v11[3] = v14;
  return a1;
}

void sub_223C03E88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v7;

  v7 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  sub_223198030(v2, *v4);
  sub_223198030(v3, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_223C03EC4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24EC60A28;
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_223198030(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
  return a1;
}

void sub_223C03F20(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24EC60A28;
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_223198030(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C03F8C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t result;

  v2 = (_QWORD *)(a1 + 88);
  sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 80) = v2;
  *v2 = 0;
  v3 = *(_QWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  sub_223198030(a1 + 104, v3);
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v4 = *(_OWORD *)(a1 + 60);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 44);
  *(_OWORD *)(a1 + 176) = v4;
  v5 = *(_OWORD *)(a1 + 28);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 12);
  *(_OWORD *)(a1 + 144) = v5;
  *(_WORD *)(a1 + 192) = 260;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 24))(*(_QWORD *)(a1 + 200));
  if (*(_BYTE *)(a1 + 224))
    *(_BYTE *)(a1 + 224) = 0;
  return result;
}

uint64_t sub_223C04018(uint64_t a1, float32x2_t **a2)
{
  char v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  uint64_t ***v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  float32x2_t *v13;
  float32x2_t *v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t *v25;
  int v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  void *__p[2];
  char v37;

  kdebug_trace();
  v4 = *(_BYTE *)(a1 + 192);
  if ((v4 & 2) != 0)
  {
    sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
    *(_QWORD *)(a1 + 80) = a1 + 88;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v4 = *(_BYTE *)(a1 + 192);
  }
  if ((v4 & 8) != 0)
    return kdebug_trace();
  v5 = (unsigned __int8 *)a2[3];
  v6 = (unsigned __int8 *)a2[4];
  if (v5 != v6)
  {
    v8 = (uint64_t ***)(a1 + 88);
    v7 = *(uint64_t ***)(a1 + 88);
    if (v7)
    {
LABEL_6:
      v9 = (unsigned __int8 *)(a1 + 88);
      do
      {
        v10 = *((unsigned __int8 *)v7 + 28);
        v11 = *v5;
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 29);
        v11 = v5[1];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 30);
        v11 = v5[2];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 31);
        v11 = v5[3];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 32);
        v11 = v5[4];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 33);
        v11 = v5[5];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 34);
        v11 = v5[6];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 35);
        v11 = v5[7];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 36);
        v11 = v5[8];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 37);
        v11 = v5[9];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 38);
        v11 = v5[10];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 39);
        v11 = v5[11];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 40);
        v11 = v5[12];
        if (v10 != v11)
          goto LABEL_24;
        v10 = *((unsigned __int8 *)v7 + 41);
        v11 = v5[13];
        if (v10 == v11
          && (v10 = *((unsigned __int8 *)v7 + 42), v11 = v5[14], v10 == v11)
          && (v10 = *((unsigned __int8 *)v7 + 43), v11 = v5[15], v10 == v11))
        {
          v9 = (unsigned __int8 *)v7;
        }
        else
        {
LABEL_24:
          if (v10 < v11)
            ++v7;
          else
            v9 = (unsigned __int8 *)v7;
        }
        v7 = (uint64_t **)*v7;
      }
      while (v7);
      if (v9 != (unsigned __int8 *)v8 && (sub_22319835C(v5, v9 + 28) & 0x80) == 0)
        sub_2231B0224((unsigned __int8 **)(a1 + 80), v5);
      while (1)
      {
        v5 += 84;
        if (v5 == v6)
          break;
        v7 = *v8;
        if (*v8)
          goto LABEL_6;
      }
    }
  }
  v13 = a2[1];
  if (*a2 != v13)
  {
    v14 = *a2 + 16;
    do
    {
      v26 = v14[14].u8[0];
      if (sub_223C8F01C(v26) <= 3)
      {
        *(float32x2_t *)v28.i8 = v14[6];
        v28.i32[2] = v14[7].i32[0];
        *(float32x2_t *)v29.i8 = v14[8];
        v29.i32[2] = v14[9].i32[0];
        v30.i32[0] = v14[11].i32[0];
        v15.i64[0] = vzip1q_s32(v28, v29).u64[0];
        *(float32x2_t *)v31.f32 = v14[12];
        v31.i32[2] = v14[13].i32[0];
        v16 = (int8x16_t)vnegq_f32(v31);
        v17 = (int8x16_t)vtrn2q_s32(v28, v29);
        v17.i32[2] = HIDWORD(*(_QWORD *)&v14[10]);
        v18 = (float32x4_t)vzip2q_s32(v28, v29);
        *(float32x2_t *)v27.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v15.f32, *(float *)v16.i32), *(float32x2_t *)v17.i8, *(float32x2_t *)v31.f32, 1), *(float32x2_t *)v18.f32, v31, 2);
        v18.i32[2] = v30.i32[0];
        v19 = vdupq_lane_s32(*(int32x2_t *)v17.i8, 0);
        v17.i64[0] = vextq_s8(v17, v27, 4uLL).u64[0];
        v27.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v14[10], *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v14[10], 1), *(float32x2_t *)v31.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), v30).u32[0]);
        v15.i64[1] = *(_QWORD *)&v14[10];
        v20.i32[3] = 0;
        v20.i32[0] = v19.i32[3];
        *(uint64_t *)((char *)v20.i64 + 4) = v17.i64[0];
        v18.i64[1] = vdupq_laneq_s32((int32x4_t)v18, 2).u32[0];
        v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v14[-2].f32)), v20, v14[-2], 1), v18, *(float32x4_t *)v14[-2].f32, 2), (float32x4_t)v27, *(float32x4_t *)v14[-2].f32, 3);
        v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v14->f32)), v20, *v14, 1), v18, *(float32x4_t *)v14->f32, 2), (float32x4_t)v27, *(float32x4_t *)v14->f32, 3);
        v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v14[2].f32)), v20, v14[2], 1), v18, *(float32x4_t *)v14[2].f32, 2), (float32x4_t)v27, *(float32x4_t *)v14[2].f32, 3);
        v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v14[4].f32)), v20, v14[4], 1), v18, *(float32x4_t *)v14[4].f32, 2), (float32x4_t)v27, *(float32x4_t *)v14[4].f32, 3);
        v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)v14[-10].f32)), v22, v14[-10], 1), v23, *(float32x4_t *)v14[-10].f32, 2), v24, *(float32x4_t *)v14[-10].f32, 3);
        v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)v14[-12].f32)), v22, v14[-12], 1), v23, *(float32x4_t *)v14[-12].f32, 2), v24, *(float32x4_t *)v14[-12].f32, 3);
        v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)v14[-8].f32)), v22, v14[-8], 1), v23, *(float32x4_t *)v14[-8].f32, 2), v24, *(float32x4_t *)v14[-8].f32, 3);
        v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)v14[-6].f32)), v22, v14[-6], 1), v23, *(float32x4_t *)v14[-6].f32, 2), v24, *(float32x4_t *)v14[-6].f32, 3);
        __p[0] = &v14[-16];
        v25 = sub_223C0568C((uint64_t **)(a1 + 80), (unsigned __int8 *)&v14[-16], (_OWORD **)__p);
        *(float32x4_t *)((char *)v25 + 44) = v35;
        *(float32x4_t *)((char *)v25 + 60) = v34;
        *(float32x4_t *)((char *)v25 + 76) = v33;
        *(float32x4_t *)((char *)v25 + 92) = v32;
      }
      else if ((sub_223C8F01C(v26) & 6) == 4)
      {
        sub_2231B0224((unsigned __int8 **)(a1 + 80), (unsigned __int8 *)&v14[-16]);
      }
      v14 += 31;
    }
    while (&v14[-16] != v13);
  }
  sub_223A62A3C((unsigned __int8 *)(a1 + 208), (uint64_t)__p);
  sub_223C11CBC((char *)(a1 + 80), (const void **)__p);
  if (v37 < 0)
    operator delete(__p[0]);
  return kdebug_trace();
}

void sub_223C0448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C044B0@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t ***v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v27;
  unint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t **v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t *v85;
  unint64_t v86;
  char *v87;
  unsigned __int8 *v90;
  __int128 v91;
  char *v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int16 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  v5 = *a2;
  v90 = a2[1];
  if (*a2 != v90)
  {
    v6 = (unsigned __int8 *)(a1 + 88);
    v7 = (uint64_t ***)(a1 + 112);
    do
    {
      v91 = *(_OWORD *)v5;
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 3);
      v92 = (char *)*((_QWORD *)v5 + 2);
      v93 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = *((_OWORD *)v5 + 2);
      v12 = *((_OWORD *)v5 + 3);
      v13 = *((_OWORD *)v5 + 5);
      v96 = *((_OWORD *)v5 + 4);
      v97 = v13;
      v94 = v11;
      v95 = v12;
      v14 = *((_OWORD *)v5 + 7);
      v98 = *((_OWORD *)v5 + 6);
      v15 = *((_OWORD *)v5 + 8);
      v16 = *((_OWORD *)v5 + 10);
      v17 = *((_OWORD *)v5 + 11);
      v101 = *((_OWORD *)v5 + 9);
      v102 = v16;
      v99 = v14;
      v100 = v15;
      v18 = *((_OWORD *)v5 + 12);
      v19 = *((_OWORD *)v5 + 14);
      v105 = *((_OWORD *)v5 + 13);
      v106 = v19;
      v103 = v17;
      v104 = v18;
      v107 = *((_WORD *)v5 + 120);
      v110 = *(_BYTE *)(a1 + 224);
      v109 = *(_OWORD *)(a1 + 208);
      if (v110)
      {
        v108 = xmmword_2245F6D10;
        if ((_QWORD)v109 != 0xC8F5B4EBD7BCC25 || *((_QWORD *)&v109 + 1) != 0xB606D763D1A232ECLL)
        {
          v21 = *(unsigned __int8 **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_37;
          v22 = v6;
          do
          {
            v23 = v21[28];
            v24 = *v5;
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[29];
            v24 = v5[1];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[30];
            v24 = v5[2];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[31];
            v24 = v5[3];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[32];
            v24 = v5[4];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[33];
            v24 = v5[5];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[34];
            v24 = v5[6];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[35];
            v24 = v5[7];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[36];
            v24 = v5[8];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[37];
            v24 = v5[9];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[38];
            v24 = v5[10];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[39];
            v24 = v5[11];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[40];
            v24 = v5[12];
            if (v23 != v24)
              goto LABEL_31;
            v23 = v21[41];
            v24 = v5[13];
            if (v23 == v24 && (v23 = v21[42], v24 = v5[14], v23 == v24) && (v23 = v21[43], v24 = v5[15], v23 == v24))
            {
              v22 = v21;
            }
            else
            {
LABEL_31:
              if (v23 < v24)
                v21 += 8;
              else
                v22 = v21;
            }
            v21 = *(unsigned __int8 **)v21;
          }
          while (v21);
          if (v22 == v6 || (char)sub_22319835C(v5, v22 + 28) < 0)
LABEL_37:
            v22 = v6;
          v25 = sub_223C8F01C(v107);
          if (HIBYTE(v107) == 2 || v22 == v6)
            v27 = 6;
          else
            v27 = 8;
          if (v25 >= 4)
            v27 = v107;
          LOBYTE(v107) = v27;
        }
      }
      v29 = a3[1];
      v28 = (unint64_t)a3[2];
      if ((unint64_t)v29 >= v28)
      {
        v43 = *a3;
        v44 = 0xEF7BDEF7BDEF7BDFLL * ((v29 - *a3) >> 3);
        v45 = v44 + 1;
        if (v44 + 1 > 0x108421084210842)
          sub_22316E078();
        v46 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v28 - (_QWORD)v43) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x84210842108421)
          v47 = 0x108421084210842;
        else
          v47 = v45;
        if (v47)
        {
          if (v47 > 0x108421084210842)
            sub_223174E94();
          v48 = (char *)operator new(248 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[248 * v44];
        *(_OWORD *)v49 = v91;
        v50 = v93;
        *((_QWORD *)v49 + 2) = v92;
        *((_QWORD *)v49 + 3) = v50;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
          v43 = *a3;
          v29 = a3[1];
        }
        v53 = v95;
        v54 = &v48[248 * v44];
        *((_OWORD *)v54 + 2) = v94;
        *((_OWORD *)v54 + 3) = v53;
        v55 = v97;
        *((_OWORD *)v54 + 4) = v96;
        *((_OWORD *)v54 + 5) = v55;
        v56 = v99;
        v57 = v100;
        *((_OWORD *)v54 + 6) = v98;
        *((_OWORD *)v54 + 7) = v56;
        v58 = v101;
        v59 = v102;
        *((_OWORD *)v54 + 8) = v57;
        *((_OWORD *)v54 + 9) = v58;
        v60 = v103;
        v61 = v104;
        *((_OWORD *)v54 + 10) = v59;
        *((_OWORD *)v54 + 11) = v60;
        v62 = v105;
        v63 = v106;
        *((_OWORD *)v54 + 12) = v61;
        *((_OWORD *)v54 + 13) = v62;
        v64 = &v48[248 * v47];
        *((_WORD *)v54 + 120) = v107;
        v42 = v49 + 248;
        *((_OWORD *)v54 + 14) = v63;
        if (v29 == v43)
        {
          *a3 = v49;
          a3[1] = v42;
          a3[2] = v64;
        }
        else
        {
          v65 = 0;
          do
          {
            v66 = &v29[v65];
            v67 = &v49[v65];
            *(_OWORD *)(v67 - 248) = *(_OWORD *)&v29[v65 - 248];
            *(_OWORD *)(v67 - 232) = *(_OWORD *)&v29[v65 - 232];
            *((_QWORD *)v66 - 29) = 0;
            *((_QWORD *)v66 - 28) = 0;
            v68 = *(_OWORD *)&v29[v65 - 216];
            v69 = *(_OWORD *)&v29[v65 - 200];
            v70 = *(_OWORD *)&v29[v65 - 184];
            *(_OWORD *)(v67 - 168) = *(_OWORD *)&v29[v65 - 168];
            *(_OWORD *)(v67 - 184) = v70;
            *(_OWORD *)(v67 - 200) = v69;
            *(_OWORD *)(v67 - 216) = v68;
            *(_OWORD *)(v67 - 152) = *(_OWORD *)&v29[v65 - 152];
            v71 = *(_OWORD *)&v29[v65 - 136];
            v72 = *(_OWORD *)&v29[v65 - 120];
            v73 = *(_OWORD *)&v29[v65 - 104];
            *(_OWORD *)(v67 - 88) = *(_OWORD *)&v29[v65 - 88];
            *(_OWORD *)(v67 - 104) = v73;
            *(_OWORD *)(v67 - 120) = v72;
            *(_OWORD *)(v67 - 136) = v71;
            v74 = *(_OWORD *)&v29[v65 - 72];
            v75 = *(_OWORD *)&v29[v65 - 56];
            v76 = *(_OWORD *)&v29[v65 - 40];
            *(_OWORD *)(v67 - 24) = *(_OWORD *)&v29[v65 - 24];
            *(_OWORD *)(v67 - 40) = v76;
            *(_OWORD *)(v67 - 56) = v75;
            *(_OWORD *)(v67 - 72) = v74;
            *((_WORD *)v67 - 4) = *(_WORD *)&v29[v65 - 8];
            v65 -= 248;
          }
          while (&v29[v65] != v43);
          v43 = *a3;
          v77 = a3[1];
          *a3 = &v49[v65];
          a3[1] = v42;
          a3[2] = v64;
          while (v77 != v43)
          {
            v78 = (std::__shared_weak_count *)*((_QWORD *)v77 - 28);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v77 -= 248;
          }
        }
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_OWORD *)v29 = v91;
        *((_QWORD *)v29 + 2) = v92;
        v30 = v93;
        *((_QWORD *)v29 + 3) = v93;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = v94;
        v34 = v95;
        v35 = v97;
        *((_OWORD *)v29 + 4) = v96;
        *((_OWORD *)v29 + 5) = v35;
        *((_OWORD *)v29 + 2) = v33;
        *((_OWORD *)v29 + 3) = v34;
        *((_OWORD *)v29 + 6) = v98;
        v36 = v99;
        v37 = v100;
        v38 = v102;
        *((_OWORD *)v29 + 9) = v101;
        *((_OWORD *)v29 + 10) = v38;
        *((_OWORD *)v29 + 7) = v36;
        *((_OWORD *)v29 + 8) = v37;
        v39 = v103;
        v40 = v104;
        v41 = v106;
        *((_OWORD *)v29 + 13) = v105;
        *((_OWORD *)v29 + 14) = v41;
        *((_OWORD *)v29 + 11) = v39;
        *((_OWORD *)v29 + 12) = v40;
        *((_WORD *)v29 + 120) = v107;
        v42 = v29 + 248;
      }
      a3[1] = v42;
      v81 = *v7;
      if (*v7)
      {
        v82 = (unsigned __int8 *)(a1 + 112);
        do
        {
          v83 = *((unsigned __int8 *)v81 + 25);
          v84 = *v5;
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 26);
          v84 = v5[1];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 27);
          v84 = v5[2];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 28);
          v84 = v5[3];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 29);
          v84 = v5[4];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 30);
          v84 = v5[5];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 31);
          v84 = v5[6];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 32);
          v84 = v5[7];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 33);
          v84 = v5[8];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 34);
          v84 = v5[9];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 35);
          v84 = v5[10];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 36);
          v84 = v5[11];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 37);
          v84 = v5[12];
          if (v83 != v84)
            goto LABEL_99;
          v83 = *((unsigned __int8 *)v81 + 38);
          v84 = v5[13];
          if (v83 == v84
            && (v83 = *((unsigned __int8 *)v81 + 39), v84 = v5[14], v83 == v84)
            && (v83 = *((unsigned __int8 *)v81 + 40), v84 = v5[15], v83 == v84))
          {
            v82 = (unsigned __int8 *)v81;
          }
          else
          {
LABEL_99:
            if (v83 < v84)
              ++v81;
            else
              v82 = (unsigned __int8 *)v81;
          }
          v81 = (uint64_t **)*v81;
        }
        while (v81);
        if (v82 != (unsigned __int8 *)v7 && ((char)sub_22319835C(v5, v82 + 25) & 0x80000000) == 0)
          sub_2231AFD68((unsigned __int8 **)(a1 + 104), v5);
      }
      v6 = (unsigned __int8 *)(a1 + 88);
      if (v93)
      {
        v85 = &v93->__shared_owners_;
        do
          v86 = __ldaxr((unint64_t *)v85);
        while (__stlxr(v86 - 1, (unint64_t *)v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v5 += 248;
    }
    while (v5 != v90);
  }
  sub_223C1D398((_QWORD *)(a1 + 104), (void **)&v91);
  v87 = a3[3];
  if (v87)
  {
    a3[4] = v87;
    operator delete(v87);
    a3[3] = 0;
    a3[4] = 0;
    a3[5] = 0;
  }
  *(_OWORD *)(a3 + 3) = v91;
  a3[5] = v92;
  return kdebug_trace();
}

void sub_223C04CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223C04D08(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float32x2_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float *v21;
  float *v22;
  int32x2_t *v23;
  int32x2_t *v24;
  float32x2_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int8x16_t v37;
  float32x2_t v38;
  uint64_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float *v48;
  unsigned __int8 *v49;
  uint64_t v50;

  v4 = (uint64_t **)(a1 + 80);
  v5 = a2 + 168;
  v6 = (unsigned __int8 *)(a1 + 208);
  sub_223A62A3C((unsigned __int8 *)(a1 + 208), (uint64_t)&v48);
  sub_223C1BB1C((uint64_t)v4, v5, (uint64_t)&v48);
  if (SHIBYTE(v50) < 0)
  {
    operator delete(v48);
    v7 = (_OWORD *)(a1 + 128);
    v8 = (__int128 *)(a2 + 4);
    v48 = (float *)(a1 + 128);
    v49 = a2 + 4;
    if (sub_2231F73E4(&v48))
    {
LABEL_9:
      v12 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v7 = (_OWORD *)(a1 + 128);
    v8 = (__int128 *)(a2 + 4);
    v48 = (float *)(a1 + 128);
    v49 = a2 + 4;
    if (sub_2231F73E4(&v48))
      goto LABEL_9;
  }
  if ((*((_DWORD *)a2 + 17) - 1) > 2 || (*a2 & 8) != 0)
    goto LABEL_9;
  v49 = 0;
  v50 = 0;
  v48 = (float *)&v49;
  v9 = (uint64_t *)(a1 + 88);
  sub_223198030((uint64_t)v4, *(_QWORD **)(a1 + 88));
  v10 = v49;
  *(_QWORD *)(a1 + 80) = v48;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = v50;
  *(_QWORD *)(a1 + 96) = v50;
  if (v11)
  {
    *((_QWORD *)v10 + 2) = v9;
    v48 = (float *)&v49;
    v49 = 0;
    v50 = 0;
    v10 = 0;
  }
  else
  {
    *v4 = v9;
  }
  sub_223198030((uint64_t)&v48, v10);
  v17.i64[0] = *(_QWORD *)(a2 + 4);
  v17.i32[2] = *((_DWORD *)a2 + 3);
  v18.i64[0] = *(_QWORD *)(a2 + 20);
  v18.i32[2] = *((_DWORD *)a2 + 7);
  v19 = *(float32x2_t *)(a2 + 36);
  v20.i64[0] = *(_QWORD *)(a2 + 52);
  v20.i32[2] = *((_DWORD *)a2 + 15);
  v21 = (float *)*((_QWORD *)a2 + 12);
  v22 = (float *)*((_QWORD *)a2 + 13);
  v23 = (int32x2_t *)*((_QWORD *)a2 + 9);
  v24 = (int32x2_t *)*((_QWORD *)a2 + 10);
  if (v21 != v22 || v23 != v24)
  {
    v25 = (float32x2_t)vzip1q_s32(v17, v18).u64[0];
    v26 = (int8x16_t)vnegq_f32(v20);
    v27 = vmul_n_f32(v25, *(float *)v26.i32);
    *(float32x2_t *)v28.f32 = v25;
    v28.i64[1] = v19.u32[0];
    v29 = (int8x16_t)vtrn2q_s32(v17, v18);
    v29.i32[2] = HIDWORD(*(_QWORD *)(a2 + 36));
    v30 = (int8x16_t)vzip2q_s32(v17, v18);
    *(float32x2_t *)v31.f32 = vmls_laneq_f32(vmls_lane_f32(v27, *(float32x2_t *)v29.i8, *(float32x2_t *)v20.f32, 1), *(float32x2_t *)v30.i8, v20, 2);
    v30.i32[2] = *((_DWORD *)a2 + 11);
    v32 = vextq_s8(vextq_s8(v29, v29, 0xCuLL), v30, 8uLL);
    v16.i32[0] = v30.i32[2];
    v31.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v19, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1), *(float32x2_t *)v20.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), v16).u32[0]);
    v33.i32[3] = 0;
    v33.i32[0] = v29.i32[0];
    *(uint64_t *)((char *)v33.i64 + 4) = v32.i64[0];
    v41 = v33;
    v33.i64[0] = v32.i64[1];
    v33.i64[1] = vdupq_laneq_s32((int32x4_t)v30, 2).u32[0];
    v40 = v33;
    v42 = v28;
    v43 = v31;
    do
    {
      do
      {
        v34.i32[0] = v23[1].i32[0];
        v35 = (float32x2_t)v23[2];
        v36 = (float32x2_t)v23[4];
        v29.i32[0] = v23[5].i32[0];
        *(int32x2_t *)v26.i8 = v23[6];
        v26.i32[2] = v23[7].i32[0];
        v37 = (int8x16_t)vnegq_f32((float32x4_t)v26);
        v34.i32[1] = v23[3].i32[0];
        v38 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v23, (int32x2_t)v35), *(float *)v37.i32), (float32x2_t)vzip2_s32(*v23, (int32x2_t)v35), *(float32x2_t *)v26.i8, 1), v34, (float32x4_t)v26, 2);
        v46 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v42, (float32x2_t)*v23, 1), v41, v35, 1), v40, v36, 1), (float32x4_t)0, v43);
        v47 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, COERCE_FLOAT(*v23)), v41, v35.f32[0]), v40, v36.f32[0]), (float32x4_t)0, v43);
        v44 = vaddq_f32(v43, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v38.f32[0]), v41, v38, 1), v40, vmla_f32(vmls_lane_f32(vmul_f32(v36, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v36, 1), *(float32x2_t *)v26.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v29.i8).f32[0]));
        v45 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, v34.f32[0]), v41, v34.f32[1]), v40, *(float *)v29.i32), (float32x4_t)0, v43);
        v48 = v21;
        v39 = sub_223C0568C(v4, (unsigned __int8 *)v21, (_OWORD **)&v48);
        *(float32x4_t *)((char *)v39 + 44) = v47;
        *(float32x4_t *)((char *)v39 + 60) = v46;
        *(float32x4_t *)((char *)v39 + 76) = v45;
        *(float32x4_t *)((char *)v39 + 92) = v44;
        v21 += 4;
        v23 += 8;
      }
      while (v21 != v22);
    }
    while (v23 != v24);
  }
  v12 = 1;
LABEL_10:
  v13 = *v8;
  v14 = v8[1];
  v15 = v8[3];
  v7[2] = v8[2];
  v7[3] = v15;
  *v7 = v13;
  v7[1] = v14;
  *(_BYTE *)(a1 + 193) = sub_223C82108(*a2, *(_BYTE *)(a1 + 193), v12);
  *(_BYTE *)(a1 + 192) = *a2;
  sub_223475C18((_QWORD *)(a1 + 104), *((unsigned __int8 **)a2 + 18), a2 + 152);
  sub_223C109E4(*(unsigned __int8 *)(a1 + 192), *(unsigned __int8 *)(a1 + 193), (uint64_t)v4, a1 + 104, v6);
}

void sub_223C0505C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void sub_223C05078(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  void **v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  char v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t __dst;

  v10 = __p;
  sub_223A62A3C((unsigned __int8 *)(a1 + 208), (uint64_t)__p);
  if (v21 < 0)
    v10 = (void **)__p[0];
  __dst = 0;
  v11 = strnlen((const char *)v10, 8uLL);
  memcpy(&__dst, v10, v11);
  kdebug_trace();
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (a4)
      goto LABEL_8;
  }
  else if (a4)
  {
    goto LABEL_8;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateManager.cpp", 157, (uint64_t)"gref_result.has_value() && \"Expect global reference result has value\"", 69, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_8:
  (***(void (****)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 200))(__p, *(_QWORD *)(a1 + 200), a2, a1 + 80, a1 + 128, *(unsigned __int8 *)(a1 + 192), a1 + 12, a3, 1);
  sub_223C04D08(a1, (unsigned __int8 *)__p);
  kdebug_trace();
  v12 = v29;
  *a5 = v28;
  a5[1] = v12;
  v13 = a5 + 1;
  v14 = v30;
  a5[2] = v30;
  if (v14)
  {
    v12[2] = v13;
    v28 = &v29;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    *a5 = v13;
  }
  v16 = v31;
  v15 = v32;
  a5[4] = v32;
  v17 = a5 + 4;
  a5[3] = v16;
  v18 = v33;
  a5[5] = v33;
  if (v18)
  {
    v15[2] = v17;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
    sub_223198030((uint64_t)&v31, 0);
    sub_223198030((uint64_t)&v28, v29);
    v19 = v26;
    if (!v26)
      goto LABEL_14;
    goto LABEL_13;
  }
  a5[3] = v17;
  sub_223198030((uint64_t)&v31, v15);
  sub_223198030((uint64_t)&v28, v29);
  v19 = v26;
  if (v26)
  {
LABEL_13:
    v27 = v19;
    operator delete(v19);
  }
LABEL_14:
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_223C052D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223C052EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223C052EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_223198030(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_223198030(a1 + 144, *(_QWORD **)(a1 + 152));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223C05354(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24EC60A28;
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_223198030(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
  return a1;
}

void sub_223C053B0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24EC60A28;
  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_223198030(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_223198030(a1 + 80, *(_QWORD **)(a1 + 88));
  JUMPOUT(0x227684CE8);
}

void sub_223C0541C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, _QWORD *a4@<X8>)
{
  void **v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *__p[2];
  char v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t __dst;

  v8 = __p;
  sub_223A62A3C((unsigned __int8 *)(a1 + 208), (uint64_t)__p);
  if (v19 < 0)
    v8 = (void **)__p[0];
  __dst = 0;
  v9 = strnlen((const char *)v8, 8uLL);
  memcpy(&__dst, v8, v9);
  kdebug_trace();
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a3)
      goto LABEL_8;
  }
  else if (!a3)
  {
    goto LABEL_8;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateManager.cpp", 197, (uint64_t)"!gref_result.has_value() && \"Global coordinate should not have known tracking status\"", 85, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_8:
  (***(void (****)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(a1 + 200))(__p, *(_QWORD *)(a1 + 200), a2, a1 + 80, a1 + 128, *(unsigned __int8 *)(a1 + 192), a1 + 12, 0, 0);
  sub_223C04D08(a1, (unsigned __int8 *)__p);
  kdebug_trace();
  v10 = v27;
  *a4 = v26;
  a4[1] = v10;
  v11 = a4 + 1;
  v12 = v28;
  a4[2] = v28;
  if (v12)
  {
    v10[2] = v11;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    *a4 = v11;
  }
  v14 = v29;
  v13 = v30;
  a4[4] = v30;
  v15 = a4 + 4;
  a4[3] = v14;
  v16 = v31;
  a4[5] = v31;
  if (v16)
  {
    v13[2] = v15;
    v29 = &v30;
    v30 = 0;
    v31 = 0;
    sub_223198030((uint64_t)&v29, 0);
    sub_223198030((uint64_t)&v26, v27);
    v17 = v24;
    if (!v24)
      goto LABEL_14;
    goto LABEL_13;
  }
  a4[3] = v15;
  sub_223198030((uint64_t)&v29, v13);
  sub_223198030((uint64_t)&v26, v27);
  v17 = v24;
  if (v24)
  {
LABEL_13:
    v25 = v17;
    operator delete(v17);
  }
LABEL_14:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_223C05674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223C052EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223C0568C(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x70uLL);
    *(_OWORD *)((char *)v10 + 28) = **a3;
    *(_OWORD *)((char *)v10 + 92) = unk_224668DD0;
    *(_OWORD *)((char *)v10 + 76) = xmmword_224668DC0;
    *(_OWORD *)((char *)v10 + 60) = unk_224668DB0;
    *(_OWORD *)((char *)v10 + 44) = xmmword_224668DA0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_2231A9A8C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)v5 + 28;
      if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 28) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_22319835C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_223C05798(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  std::string *v9;
  size_t v10;
  std::string v11;

  v3 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_12;
  v5 = a1 + 32;
  do
  {
    v6 = sub_22319835C((unsigned __int8 *)(v4 + 28), a2);
    if (v6 >= 0)
      v7 = (uint64_t *)v4;
    else
      v7 = (uint64_t *)(v4 + 8);
    if (v6 >= 0)
      v5 = v4;
    v4 = *v7;
  }
  while (*v7);
  if (v5 == v3 || (sub_22319835C(a2, (unsigned __int8 *)(v5 + 28)) & 0x80) != 0)
  {
LABEL_12:
    sub_223C0589C("Bundle does not exist with cid-", a2);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v11;
    else
      v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    v10 = strlen((const char *)v9);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemTypes.cpp", 30, (uint64_t)&unk_2245A4145, 0, (uint64_t)v9, v10, (void (*)(void **))sub_22457406C);
    std::string::~string(&v11);
    abort();
  }
  return *(unsigned int *)(v5 + 44);
}

void sub_223C05880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C0589C(char *__s, unsigned __int8 *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_2238E8ADC(v4, __s);
  sub_22319B83C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_22316DD70();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24EC60AF0[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24EC60AC0[v5])(&v7, v4);
  return result;
}

void sub_223C05944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C05958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C0596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223C05980(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  std::string *v10;
  size_t v11;
  std::string v12;
  int v13;

  v13 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 28);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2)
  {
LABEL_12:
    v10 = &v12;
    sub_223C05A68("Cluster does not exist with bid-", &v13);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
    v11 = strlen((const char *)v10);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemTypes.cpp", 38, (uint64_t)&unk_2245A4145, 0, (uint64_t)v10, v11, (void (*)(void **))sub_22457406C);
    std::string::~string(&v12);
    abort();
  }
  return *(_QWORD *)(v5 + 32);
}

void sub_223C05A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C05A68(char *__s, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_2232C8A68(v4, __s);
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC60AD8[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_22316DD70();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC60AF0[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC60AC0[v5])(v7, v4);
  return result;
}

void sub_223C05B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C05B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C05B70);
}

void sub_223C05BA4(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;

  v2 = a1 + 4;
  v3 = a1[4];
  if (v3)
  {
    v6 = a1 + 4;
    do
    {
      v7 = sub_22319835C((unsigned __int8 *)(v3 + 28), a2);
      if (v7 >= 0)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7 >= 0)
        v6 = (_QWORD *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v6 != v2 && (sub_22319835C(a2, (unsigned __int8 *)v6 + 28) & 0x80) == 0)
    {
      v9 = (uint64_t *)a1[1];
      if (v9)
      {
        v10 = *((_DWORD *)v6 + 11);
        v11 = a1 + 1;
        v12 = a1[1];
        do
        {
          v13 = *(_DWORD *)(v12 + 28);
          v14 = v13 < v10;
          if (v13 >= v10)
            v15 = (uint64_t *)v12;
          else
            v15 = (uint64_t *)(v12 + 8);
          if (!v14)
            v11 = (_QWORD *)v12;
          v12 = *v15;
        }
        while (*v15);
        if (v11 != a1 + 1 && v10 >= *((_DWORD *)v11 + 7))
        {
          v16 = (_QWORD *)v11[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            v18 = v11;
            do
            {
              v17 = (_QWORD *)v18[2];
              v19 = *v17 == (_QWORD)v18;
              v18 = v17;
            }
            while (!v19);
          }
          if ((_QWORD *)*a1 == v11)
            *a1 = v17;
          --a1[2];
          sub_2231AFE60(v9, v11);
          operator delete(v11);
        }
      }
      v20 = (_QWORD *)v6[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        v22 = v6;
        do
        {
          v21 = (_QWORD *)v22[2];
          v19 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (!v19);
      }
      if ((_QWORD *)a1[3] == v6)
        a1[3] = v21;
      v23 = (uint64_t *)a1[4];
      --a1[5];
      sub_2231AFE60(v23, v6);
      operator delete(v6);
    }
  }
}

uint64_t sub_223C05D34(uint64_t **a1, unsigned __int8 *a2, int a3)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  int v35;
  _DWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  uint64_t v42;
  std::string *v44;
  std::string::size_type size;
  size_t v46;
  void **p_dst;
  int v48;
  uint64_t v49;
  void **p_data;
  uint64_t v52;
  size_t v53;
  void **v54;
  unint64_t v55;
  const void **v56;
  unint64_t v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  uint64_t v63;
  const char *v64;
  size_t v65;
  unsigned __int8 v66;
  const char *v67;
  size_t v68;
  std::string::size_type *p_size;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  void *v78;
  _QWORD *v79;
  size_t v80;
  size_t v81;
  void **v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  uint64_t v88;
  const char *v89;
  size_t v90;
  unsigned __int8 v91;
  const char *v92;
  size_t v93;
  std::string::size_type *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  size_t v104;
  void *v105;
  _QWORD *v106;
  size_t v107;
  size_t v108;
  void **v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  std::string *v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  char *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::string *v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string::size_type v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  __int128 v153;
  std::string::size_type v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::string *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::string *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::string::size_type v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  __int128 v188;
  std::string::size_type v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::string *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::string *v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  const char *v215;
  uint64_t *v216;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v218;
  int v219;
  const char *v220;
  int v221;
  const char *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  std::string *__dst;
  size_t v226;
  int64_t v227;
  _QWORD v228[2];
  _QWORD v229[3];
  _BYTE v230[16];
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *__p;
  char v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  std::string v240;
  char *v241;
  std::__shared_weak_count *v242;
  std::string *v243;
  __int128 v244;
  std::string v245;
  __int128 v246;
  char *v247;
  size_t v248;
  unint64_t v249;
  char v250;
  _QWORD v251[5];

  v251[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 4;
  v6 = a1[4];
  if (v6)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[5];
    v14 = a2[6];
    v15 = a2[7];
    v16 = a2[8];
    v17 = a2[9];
    v18 = a2[10];
    v19 = a2[11];
    v20 = a2[12];
    v21 = a2[13];
    v22 = a2[14];
    v23 = a2[15];
    while (1)
    {
      v24 = v6;
      v25 = *((unsigned __int8 *)v6 + 28);
      if (v8 != v25)
        break;
      v25 = *((unsigned __int8 *)v24 + 29);
      if (v9 == v25)
      {
        v26 = *((unsigned __int8 *)v24 + 30);
        v27 = a2[2];
        if (v10 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 31);
        v27 = a2[3];
        if (v11 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 32);
        v27 = a2[4];
        if (v12 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 33);
        v27 = a2[5];
        if (v13 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 34);
        v27 = a2[6];
        if (v14 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 35);
        v27 = a2[7];
        if (v15 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 36);
        v27 = a2[8];
        if (v16 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 37);
        v27 = a2[9];
        if (v17 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 38);
        v27 = a2[10];
        if (v18 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 39);
        v27 = a2[11];
        if (v19 != v26)
          goto LABEL_20;
        v26 = *((unsigned __int8 *)v24 + 40);
        v27 = a2[12];
        if (v20 != v26
          || (v26 = *((unsigned __int8 *)v24 + 41), v27 = a2[13], v21 != v26)
          || (v26 = *((unsigned __int8 *)v24 + 42), v27 = a2[14], v22 != v26)
          || (v26 = *((unsigned __int8 *)v24 + 43), v27 = a2[15], v23 != v26))
        {
LABEL_20:
          if (v27 < v26)
            goto LABEL_3;
        }
        v25 = *((unsigned __int8 *)v24 + 30);
        v28 = a2[2];
        if (v25 == v10)
        {
          v25 = *((unsigned __int8 *)v24 + 31);
          v28 = a2[3];
          if (v25 == v11)
          {
            v25 = *((unsigned __int8 *)v24 + 32);
            v28 = a2[4];
            if (v25 == v12)
            {
              v25 = *((unsigned __int8 *)v24 + 33);
              v28 = a2[5];
              if (v25 == v13)
              {
                v25 = *((unsigned __int8 *)v24 + 34);
                v28 = a2[6];
                if (v25 == v14)
                {
                  v25 = *((unsigned __int8 *)v24 + 35);
                  v28 = a2[7];
                  if (v25 == v15)
                  {
                    v25 = *((unsigned __int8 *)v24 + 36);
                    v28 = a2[8];
                    if (v25 == v16)
                    {
                      v25 = *((unsigned __int8 *)v24 + 37);
                      v28 = a2[9];
                      if (v25 == v17)
                      {
                        v25 = *((unsigned __int8 *)v24 + 38);
                        v28 = a2[10];
                        if (v25 == v18)
                        {
                          v25 = *((unsigned __int8 *)v24 + 39);
                          v28 = a2[11];
                          if (v25 == v19)
                          {
                            v25 = *((unsigned __int8 *)v24 + 40);
                            v28 = a2[12];
                            if (v25 == v20)
                            {
                              v25 = *((unsigned __int8 *)v24 + 41);
                              v28 = a2[13];
                              if (v25 == v21)
                              {
                                v25 = *((unsigned __int8 *)v24 + 42);
                                v28 = a2[14];
                                if (v25 == v22)
                                {
                                  v25 = *((unsigned __int8 *)v24 + 43);
                                  v28 = a2[15];
                                  if (v25 == v23)
                                  {
LABEL_60:
                                    sub_223C0787C(&v239);
                                    result = v239;
                                    if (**(int **)(v239 + 56) <= 5)
                                    {
                                      v41 = *(unsigned __int8 *)(v239 + 72);
                                      result = sub_22322F254(v239, "OSLogSurrogateAppender", 1, 0);
                                      v42 = result;
                                      if (v41 || result != 0)
                                      {
                                        sub_223195210((uint64_t)v228);
                                        v219 = 0;
                                        sub_223846B20(&v216, "cluster ");
                                        sub_22319B83C((uint64_t)&__dst, (uint64_t)&v216, a2);
                                        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
                                        v245.__r_.__value_.__l.__size_ = (std::string::size_type)" already exist";
                                        v245.__r_.__value_.__r.__words[2] = (std::string::size_type)&v216;
                                        *(_QWORD *)&v246 = " already exist";
                                        *((_QWORD *)&v246 + 1) = " already exist";
                                        if (v219 == -1)
                                          sub_22316DD70();
                                        v243 = &v245;
                                        ((void (*)(std::string **, uint64_t **))off_24EC60B08[v219])(&v243, &v216);
                                        if (v219 == -1)
                                          sub_22316DD70();
                                        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
                                        ((void (*)(std::string *__return_ptr, std::string *, uint64_t **))off_24EC60AF0[v219])(&v240, &v245, &v216);
                                        if (v219 != -1)
                                          ((void (*)(std::string *, uint64_t **))off_24EC60AC0[v219])(&v245, &v216);
                                        if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          v44 = &v240;
                                        else
                                          v44 = (std::string *)v240.__r_.__value_.__r.__words[0];
                                        if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                          size = HIBYTE(v240.__r_.__value_.__r.__words[2]);
                                        else
                                          size = v240.__r_.__value_.__l.__size_;
                                        sub_2231813E8(v229, (uint64_t)v44, size);
                                        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v240.__r_.__value_.__l.__data_);
                                        if ((v237 & 0x10) != 0)
                                        {
                                          v55 = v236;
                                          if (v236 < v233)
                                          {
                                            v236 = v233;
                                            v55 = v233;
                                          }
                                          v56 = (const void **)&v232;
                                        }
                                        else
                                        {
                                          if ((v237 & 8) == 0)
                                          {
                                            v46 = 0;
                                            HIBYTE(v227) = 0;
                                            p_dst = (void **)&__dst;
                                            goto LABEL_118;
                                          }
                                          v56 = (const void **)v230;
                                          v55 = v231;
                                        }
                                        v59 = *v56;
                                        v46 = v55 - (_QWORD)*v56;
                                        if (v46 > 0x7FFFFFFFFFFFFFF7)
                                          sub_22316DBC0();
                                        if (v46 >= 0x17)
                                        {
                                          v60 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v46 | 7) != 0x17)
                                            v60 = v46 | 7;
                                          v61 = v60 + 1;
                                          p_dst = (void **)operator new(v60 + 1);
                                          v226 = v46;
                                          v227 = v61 | 0x8000000000000000;
                                          __dst = (std::string *)p_dst;
                                        }
                                        else
                                        {
                                          HIBYTE(v227) = v55 - *(_BYTE *)v56;
                                          p_dst = (void **)&__dst;
                                          if (!v46)
                                          {
LABEL_118:
                                            *((_BYTE *)p_dst + v46) = 0;
                                            v216 = &v239;
                                            rep = std::chrono::steady_clock::now().__d_.__rep_;
                                            v218 = std::chrono::system_clock::now().__d_.__rep_;
                                            v219 = 5;
                                            v220 = "unknown file";
                                            v221 = 60;
                                            v223 = 0;
                                            v224 = 0;
                                            v222 = "unknown function";
                                            if (v227 >= 0)
                                              v62 = (std::string *)&__dst;
                                            else
                                              v62 = __dst;
                                            v63 = *v216;
                                            v64 = (const char *)(*v216 + 16);
                                            v212 = *v216;
                                            v215 = v64;
                                            if (*(char *)(*v216 + 39) < 0)
                                            {
                                              v64 = *(const char **)(v63 + 16);
                                              v65 = *(_QWORD *)(v63 + 24);
                                            }
                                            else
                                            {
                                              v65 = *(unsigned __int8 *)(*v216 + 39);
                                            }
                                            v66 = atomic_load((unsigned __int8 *)&qword_255788F58);
                                            if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                                            {
                                              sub_224568628((uint64_t)&v245);
                                              sub_223199C58("com.apple.cv3d", (unint64_t)&v245, &xmmword_255788F40);
                                              if ((_BYTE)v246 && SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
                                                operator delete(v245.__r_.__value_.__l.__data_);
                                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                                              __cxa_guard_release(&qword_255788F58);
                                            }
                                            if (byte_255788F57 >= 0)
                                              v67 = (const char *)&xmmword_255788F40;
                                            else
                                              v67 = (const char *)xmmword_255788F40;
                                            if (byte_255788F57 >= 0)
                                              v68 = byte_255788F57;
                                            else
                                              v68 = *((_QWORD *)&xmmword_255788F40 + 1);
                                            v245.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v67, v64);
                                            p_size = &v245.__r_.__value_.__l.__size_;
                                            if (v68 > 0x7FFFFFFFFFFFFFF7)
                                              sub_22316DBC0();
                                            if (v68 >= 0x17)
                                            {
                                              v70 = v41;
                                              v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                                              if ((v68 | 7) != 0x17)
                                                v71 = v68 | 7;
                                              v72 = v71 + 1;
                                              p_size = (std::string::size_type *)operator new(v71 + 1);
                                              v245.__r_.__value_.__r.__words[2] = v68;
                                              *(_QWORD *)&v246 = v72 | 0x8000000000000000;
                                              v245.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                                              v41 = v70;
                                            }
                                            else
                                            {
                                              BYTE7(v246) = v68;
                                              if (!v68)
                                              {
LABEL_139:
                                                *((_BYTE *)p_size + v68) = 0;
                                                BYTE8(v246) = 1;
                                                v73 = (char *)&v247;
                                                if (v65 > 0x7FFFFFFFFFFFFFF7)
                                                  sub_22316DBC0();
                                                if (v65 >= 0x17)
                                                {
                                                  v74 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                  if ((v65 | 7) != 0x17)
                                                    v74 = v65 | 7;
                                                  v75 = v74 + 1;
                                                  v73 = (char *)operator new(v74 + 1);
                                                  v248 = v65;
                                                  v249 = v75 | 0x8000000000000000;
                                                  v247 = v73;
                                                }
                                                else
                                                {
                                                  HIBYTE(v249) = v65;
                                                  if (!v65)
                                                  {
LABEL_147:
                                                    v73[v65] = 0;
                                                    v250 = 1;
                                                    v76 = v245.__r_.__value_.__r.__words[0];
                                                    if (SHIBYTE(v249) < 0)
                                                      operator delete(v247);
                                                    if (BYTE8(v246) && SBYTE7(v246) < 0)
                                                      operator delete((void *)v245.__r_.__value_.__l.__size_);
                                                    if (v245.__r_.__value_.__r.__words[0])
                                                      os_release(v245.__r_.__value_.__l.__data_);
                                                    if (v42 && *(_QWORD *)(v42 + 24))
                                                    {
                                                      v77 = _os_log_pack_size();
                                                      v78 = operator new(v77, (std::align_val_t)8uLL);
                                                      v79 = (_QWORD *)operator new();
                                                      *v79 = &off_24EC1F7F0;
                                                      v79[1] = 0;
                                                      v79[2] = 0;
                                                      v79[3] = v78;
                                                      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
                                                      v240.__r_.__value_.__l.__size_ = (std::string::size_type)v78;
                                                      v241 = 0;
                                                      v242 = 0;
                                                      v240.__r_.__value_.__r.__words[2] = (std::string::size_type)v79;
                                                      v80 = strlen((const char *)v62);
                                                      if (v80 > 0x7FFFFFFFFFFFFFF7)
                                                        sub_22316DBC0();
                                                      v81 = v80;
                                                      if (v80 >= 0x17)
                                                      {
                                                        v111 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                                                        if ((v80 | 7) != 0x17)
                                                          v111 = v80 | 7;
                                                        v112 = v111 + 1;
                                                        v82 = (void **)operator new(v111 + 1);
                                                        *(_QWORD *)&v244 = v81;
                                                        *((_QWORD *)&v244 + 1) = v112 | 0x8000000000000000;
                                                        v243 = (std::string *)v82;
                                                      }
                                                      else
                                                      {
                                                        HIBYTE(v244) = v80;
                                                        v82 = (void **)&v243;
                                                        if (!v80)
                                                          goto LABEL_219;
                                                      }
                                                      memcpy(v82, v62, v81);
LABEL_219:
                                                      *((_BYTE *)v82 + v81) = 0;
                                                      v113 = v243;
                                                      v251[0] = v244;
                                                      *(_QWORD *)((char *)v251 + 7) = *(_QWORD *)((char *)&v244 + 7);
                                                      v114 = HIBYTE(v244);
                                                      v115 = operator new(0x38uLL);
                                                      v115[1] = 0;
                                                      v115[2] = 0;
                                                      v115[3] = off_24EC1FA48;
                                                      *v115 = &off_24EC1F9F8;
                                                      v116 = v251[0];
                                                      v115[4] = v113;
                                                      v115[5] = v116;
                                                      *(_QWORD *)((char *)v115 + 47) = *(_QWORD *)((char *)v251 + 7);
                                                      *((_BYTE *)v115 + 55) = v114;
                                                      v251[0] = 0;
                                                      *(_QWORD *)((char *)v251 + 7) = 0;
                                                      v117 = v242;
                                                      v241 = (char *)(v115 + 3);
                                                      v242 = (std::__shared_weak_count *)v115;
                                                      if (v117)
                                                      {
                                                        p_shared_owners = (unint64_t *)&v117->__shared_owners_;
                                                        do
                                                          v119 = __ldaxr(p_shared_owners);
                                                        while (__stlxr(v119 - 1, p_shared_owners));
                                                        if (!v119)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                                          std::__shared_weak_count::__release_weak(v117);
                                                        }
                                                      }
                                                      v245 = v240;
                                                      v120 = v241;
                                                      if (v240.__r_.__value_.__r.__words[2])
                                                      {
                                                        v121 = (unint64_t *)(v240.__r_.__value_.__r.__words[2] + 8);
                                                        do
                                                          v122 = __ldxr(v121);
                                                        while (__stxr(v122 + 1, v121));
                                                      }
                                                      v123 = v242;
                                                      *(_QWORD *)&v246 = v120;
                                                      *((_QWORD *)&v246 + 1) = v242;
                                                      if (v242)
                                                      {
                                                        v124 = (unint64_t *)&v242->__shared_owners_;
                                                        do
                                                          v125 = __ldxr(v124);
                                                        while (__stxr(v125 + 1, v124));
                                                        v247 = v120;
                                                        do
                                                          v126 = __ldaxr(v124);
                                                        while (__stlxr(v126 - 1, v124));
                                                        if (!v126)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                                                          std::__shared_weak_count::__release_weak(v123);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v247 = v120;
                                                      }
                                                      v143 = (std::__shared_weak_count *)v240.__r_.__value_.__r.__words[2];
                                                      if (v240.__r_.__value_.__r.__words[2])
                                                      {
                                                        v144 = (unint64_t *)(v240.__r_.__value_.__r.__words[2] + 8);
                                                        do
                                                          v145 = __ldaxr(v144);
                                                        while (__stlxr(v145 - 1, v144));
                                                        if (!v145)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                                                          std::__shared_weak_count::__release_weak(v143);
                                                        }
                                                      }
                                                      v146 = v245.__r_.__value_.__r.__words[0];
                                                      if (v247[31] >= 0)
                                                        v147 = v247 + 8;
                                                      else
                                                        v147 = (char *)*((_QWORD *)v247 + 1);
                                                      v148 = _os_log_pack_fill();
                                                      *(_DWORD *)v148 = 136315138;
                                                      *(_QWORD *)(v148 + 4) = v147;
                                                      v149 = operator new();
                                                      v150 = *(unsigned __int8 *)(v212 + 39);
                                                      v151 = *(const char **)(v212 + 16);
                                                      v152 = *(_QWORD *)(v212 + 24);
                                                      v153 = v246;
                                                      *(_OWORD *)(v149 + 8) = *(_OWORD *)&v245.__r_.__value_.__r.__words[1];
                                                      if ((v150 & 0x80u) != 0)
                                                        v150 = v152;
                                                      else
                                                        v151 = v215;
                                                      *(_QWORD *)v149 = v146;
                                                      *(_OWORD *)&v245.__r_.__value_.__r.__words[1] = 0uLL;
                                                      *(_OWORD *)(v149 + 24) = v153;
                                                      v246 = 0uLL;
                                                      *(_QWORD *)(v149 + 40) = v151;
                                                      *(_QWORD *)(v149 + 48) = v150;
                                                      *(_BYTE *)(v149 + 56) = 16;
                                                      v243 = 0;
                                                      v240.__r_.__value_.__r.__words[0] = v149;
                                                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), &v240);
                                                      v154 = v240.__r_.__value_.__r.__words[0];
                                                      v240.__r_.__value_.__r.__words[0] = 0;
                                                      if (v154)
                                                      {
                                                        v155 = *(std::__shared_weak_count **)(v154 + 32);
                                                        if (v155)
                                                        {
                                                          v156 = (unint64_t *)&v155->__shared_owners_;
                                                          do
                                                            v157 = __ldaxr(v156);
                                                          while (__stlxr(v157 - 1, v156));
                                                          if (!v157)
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                                                            std::__shared_weak_count::__release_weak(v155);
                                                          }
                                                        }
                                                        v158 = *(std::__shared_weak_count **)(v154 + 16);
                                                        if (v158)
                                                        {
                                                          v159 = (unint64_t *)&v158->__shared_owners_;
                                                          do
                                                            v160 = __ldaxr(v159);
                                                          while (__stlxr(v160 - 1, v159));
                                                          if (!v160)
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                                                            std::__shared_weak_count::__release_weak(v158);
                                                          }
                                                        }
                                                        MEMORY[0x227684CE8](v154, 0x10F0C40B62ED6C6);
                                                        v161 = v243;
                                                        v243 = 0;
                                                        if (v161)
                                                        {
                                                          v162 = (std::__shared_weak_count *)v161[1].__r_.__value_.__l.__size_;
                                                          if (v162)
                                                          {
                                                            v163 = (unint64_t *)&v162->__shared_owners_;
                                                            do
                                                              v164 = __ldaxr(v163);
                                                            while (__stlxr(v164 - 1, v163));
                                                            if (!v164)
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                                                              std::__shared_weak_count::__release_weak(v162);
                                                            }
                                                          }
                                                          v165 = (std::__shared_weak_count *)v161->__r_.__value_.__r.__words[2];
                                                          if (v165)
                                                          {
                                                            v166 = (unint64_t *)&v165->__shared_owners_;
                                                            do
                                                              v167 = __ldaxr(v166);
                                                            while (__stlxr(v167 - 1, v166));
                                                            if (!v167)
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                                                              std::__shared_weak_count::__release_weak(v165);
                                                            }
                                                          }
                                                          MEMORY[0x227684CE8](v161, 0x10F0C40B62ED6C6);
                                                        }
                                                      }
                                                      v168 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
                                                      if (*((_QWORD *)&v246 + 1))
                                                      {
                                                        v169 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
                                                        do
                                                          v170 = __ldaxr(v169);
                                                        while (__stlxr(v170 - 1, v169));
                                                        if (!v170)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                                                          std::__shared_weak_count::__release_weak(v168);
                                                        }
                                                      }
                                                      v171 = (std::__shared_weak_count *)v245.__r_.__value_.__r.__words[2];
                                                      if (v245.__r_.__value_.__r.__words[2])
                                                      {
                                                        v172 = (unint64_t *)(v245.__r_.__value_.__r.__words[2] + 8);
                                                        do
                                                          v173 = __ldaxr(v172);
                                                        while (__stlxr(v173 - 1, v172));
                                                        if (!v173)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                                          std::__shared_weak_count::__release_weak(v171);
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
                                                      LODWORD(v245.__r_.__value_.__l.__data_) = 136315138;
                                                      *(std::string::size_type *)((char *)v245.__r_.__value_.__r.__words
                                                                                + 4) = (std::string::size_type)v62;
                                                      v83 = (void *)_os_log_send_and_compose_impl();
                                                      if (v83)
                                                        free(v83);
                                                    }
                                                    if (v41)
                                                    {
                                                      v174 = (std::string *)&__dst;
                                                      if (v227 < 0)
                                                        v174 = __dst;
                                                      sub_22322C138((uint64_t)&v216, "%s", (const char *)v174);
                                                      sub_223182C08((uint64_t)&v216);
                                                    }
                                                    sub_223182C08((uint64_t)&v216);
                                                    v175 = v224;
                                                    if (v224)
                                                    {
                                                      v176 = (unint64_t *)&v224->__shared_owners_;
                                                      do
                                                        v177 = __ldaxr(v176);
                                                      while (__stlxr(v177 - 1, v176));
LABEL_358:
                                                      if (!v177)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                                        std::__shared_weak_count::__release_weak(v175);
                                                      }
                                                    }
                                                    goto LABEL_360;
                                                  }
                                                }
                                                memmove(v73, v64, v65);
                                                goto LABEL_147;
                                              }
                                            }
                                            memmove(p_size, v67, v68);
                                            goto LABEL_139;
                                          }
                                        }
                                        memmove(p_dst, v59, v46);
                                        goto LABEL_118;
                                      }
                                    }
                                    return result;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_39:
        if (v25 >= v28)
          goto LABEL_60;
        v6 = (uint64_t *)v24[1];
        if (!v6)
        {
          v7 = (uint64_t **)(v24 + 1);
          goto LABEL_43;
        }
      }
      else
      {
        v28 = a2[1];
        if (v9 >= v25)
          goto LABEL_39;
LABEL_3:
        v6 = (uint64_t *)*v24;
        v7 = (uint64_t **)v24;
        if (!*v24)
          goto LABEL_43;
      }
    }
    v28 = *a2;
    if (v8 >= v25)
      goto LABEL_39;
    goto LABEL_3;
  }
  v24 = (uint64_t *)(a1 + 4);
LABEL_43:
  v29 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v29 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v29 + 11) = a3;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = v24;
  *v7 = (uint64_t *)v29;
  v30 = (uint64_t *)*a1[3];
  if (v30)
  {
    a1[3] = v30;
    v31 = *v7;
  }
  else
  {
    v31 = (uint64_t *)v29;
  }
  sub_2231A9A8C(a1[4], v31);
  v33 = a1 + 1;
  v32 = a1[1];
  a1[5] = (uint64_t *)((char *)a1[5] + 1);
  if (!v32)
  {
    v34 = a1 + 1;
LABEL_54:
    v36 = operator new(0x30uLL);
    v36[7] = a3;
    *((_OWORD *)v36 + 2) = *(_OWORD *)a2;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v34;
    *v33 = (uint64_t *)v36;
    v37 = (uint64_t *)**a1;
    if (v37)
    {
      *a1 = v37;
      v38 = *v33;
    }
    else
    {
      v38 = (uint64_t *)v36;
    }
    result = (uint64_t)sub_2231A9A8C(a1[1], v38);
    v40 = (uint64_t)a1[2] + 1;
    a1[2] = (uint64_t *)v40;
    if (a1[5] != (uint64_t *)v40)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemTypes.cpp", 67, (uint64_t)"map_cluster_to_bundle.size() == map_bundle_to_cluster.size()", 60, (uint64_t)&unk_2245A4145, 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    return result;
  }
  while (1)
  {
    while (1)
    {
      v34 = (uint64_t **)v32;
      v35 = *((_DWORD *)v32 + 7);
      if (v35 <= a3)
        break;
      v32 = *v34;
      v33 = v34;
      if (!*v34)
        goto LABEL_54;
    }
    if (v35 >= a3)
      break;
    v32 = v34[1];
    if (!v32)
    {
      v33 = v34 + 1;
      goto LABEL_54;
    }
  }
  sub_223C0787C(&v239);
  result = v239;
  if (**(int **)(v239 + 56) <= 5)
  {
    v48 = *(unsigned __int8 *)(v239 + 72);
    result = sub_22322F254(v239, "OSLogSurrogateAppender", 1, 0);
    v49 = result;
    if (v48 || result != 0)
    {
      sub_223195210((uint64_t)v228);
      v219 = 0;
      sub_2231A0D14(&v216, "bundle ");
      std::to_string(&v240, a3);
      v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      v245.__r_.__value_.__l.__size_ = (std::string::size_type)&v240;
      v245.__r_.__value_.__r.__words[2] = (std::string::size_type)&v216;
      *(_QWORD *)&v246 = &v240;
      *((_QWORD *)&v246 + 1) = &v240;
      if (v219 == -1)
        sub_22316DD70();
      __dst = &v245;
      ((void (*)(std::string **, uint64_t **))off_24EC60AD8[v219])(&__dst, &v216);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      v245.__r_.__value_.__l.__size_ = (std::string::size_type)" already exist";
      v245.__r_.__value_.__r.__words[2] = (std::string::size_type)&v216;
      *(_QWORD *)&v246 = " already exist";
      *((_QWORD *)&v246 + 1) = " already exist";
      if (v219 == -1)
        sub_22316DD70();
      v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
      ((void (*)(std::string *, uint64_t **))off_24EC60B08[v219])(&v240, &v216);
      if (v219 == -1)
        sub_22316DD70();
      v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
      ((void (*)(std::string **__return_ptr, std::string *, uint64_t **))off_24EC60AF0[v219])(&v243, &v245, &v216);
      if (v219 != -1)
        ((void (*)(std::string *, uint64_t **))off_24EC60AC0[v219])(&v245, &v216);
      if (v244 >= 0)
        p_data = (void **)&v243;
      else
        p_data = (void **)&v243->__r_.__value_.__l.__data_;
      if (v244 >= 0)
        v52 = HIBYTE(v244);
      else
        v52 = v244;
      sub_2231813E8(v229, (uint64_t)p_data, v52);
      if (SHIBYTE(v244) < 0)
        operator delete(v243);
      v214 = v49;
      if ((v237 & 0x10) != 0)
      {
        v57 = v236;
        if (v236 < v233)
        {
          v236 = v233;
          v57 = v233;
        }
        v58 = (const void **)&v232;
      }
      else
      {
        if ((v237 & 8) == 0)
        {
          v53 = 0;
          HIBYTE(v227) = 0;
          v54 = (void **)&__dst;
          goto LABEL_171;
        }
        v58 = (const void **)v230;
        v57 = v231;
      }
      v84 = *v58;
      v53 = v57 - (_QWORD)*v58;
      if (v53 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v53 >= 0x17)
      {
        v85 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17)
          v85 = v53 | 7;
        v86 = v85 + 1;
        v54 = (void **)operator new(v85 + 1);
        v226 = v53;
        v227 = v86 | 0x8000000000000000;
        __dst = (std::string *)v54;
      }
      else
      {
        HIBYTE(v227) = v57 - *(_BYTE *)v58;
        v54 = (void **)&__dst;
        if (!v53)
        {
LABEL_171:
          *((_BYTE *)v54 + v53) = 0;
          v216 = &v239;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v218 = std::chrono::system_clock::now().__d_.__rep_;
          v219 = 5;
          v220 = "unknown file";
          v221 = 64;
          v223 = 0;
          v224 = 0;
          v222 = "unknown function";
          if (v227 >= 0)
            v87 = (void **)&__dst;
          else
            v87 = (void **)&__dst->__r_.__value_.__l.__data_;
          v88 = *v216;
          v89 = (const char *)(*v216 + 16);
          v213 = v89;
          if (*(char *)(*v216 + 39) < 0)
          {
            v89 = *(const char **)(v88 + 16);
            v90 = *(_QWORD *)(v88 + 24);
          }
          else
          {
            v90 = *(unsigned __int8 *)(*v216 + 39);
          }
          v91 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&v245);
            sub_223199C58("com.apple.cv3d", (unint64_t)&v245, &xmmword_255788F40);
            if ((_BYTE)v246 && SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v245.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v92 = (const char *)&xmmword_255788F40;
          else
            v92 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v93 = byte_255788F57;
          else
            v93 = *((_QWORD *)&xmmword_255788F40 + 1);
          v245.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v92, v89);
          v94 = &v245.__r_.__value_.__l.__size_;
          if (v93 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v93 >= 0x17)
          {
            v95 = v48;
            v96 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v93 | 7) != 0x17)
              v96 = v93 | 7;
            v97 = v96 + 1;
            v94 = (std::string::size_type *)operator new(v96 + 1);
            v245.__r_.__value_.__r.__words[2] = v93;
            *(_QWORD *)&v246 = v97 | 0x8000000000000000;
            v245.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
            v48 = v95;
          }
          else
          {
            BYTE7(v246) = v93;
            if (!v93)
            {
LABEL_192:
              *((_BYTE *)v94 + v93) = 0;
              BYTE8(v246) = 1;
              v98 = (char *)&v247;
              if (v90 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              v99 = (const char *)v87;
              if (v90 >= 0x17)
              {
                v101 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v90 | 7) != 0x17)
                  v101 = v90 | 7;
                v102 = v101 + 1;
                v100 = v214;
                v98 = (char *)operator new(v101 + 1);
                v248 = v90;
                v249 = v102 | 0x8000000000000000;
                v247 = v98;
              }
              else
              {
                HIBYTE(v249) = v90;
                v100 = v214;
                if (!v90)
                {
LABEL_200:
                  v98[v90] = 0;
                  v250 = 1;
                  v103 = v245.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(v249) < 0)
                    operator delete(v247);
                  if (BYTE8(v246) && SBYTE7(v246) < 0)
                    operator delete((void *)v245.__r_.__value_.__l.__size_);
                  if (v245.__r_.__value_.__r.__words[0])
                    os_release(v245.__r_.__value_.__l.__data_);
                  if (!v100 || !*(_QWORD *)(v100 + 24))
                  {
                    os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
                    LODWORD(v245.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v245.__r_.__value_.__r.__words + 4) = (std::string::size_type)v99;
                    v110 = (void *)_os_log_send_and_compose_impl();
                    if (v110)
                      free(v110);
                    goto LABEL_351;
                  }
                  v104 = _os_log_pack_size();
                  v105 = operator new(v104, (std::align_val_t)8uLL);
                  v106 = (_QWORD *)operator new();
                  *v106 = &off_24EC1F7F0;
                  v106[1] = 0;
                  v106[2] = 0;
                  v106[3] = v105;
                  v240.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
                  v240.__r_.__value_.__l.__size_ = (std::string::size_type)v105;
                  v241 = 0;
                  v242 = 0;
                  v240.__r_.__value_.__r.__words[2] = (std::string::size_type)v106;
                  v107 = strlen(v99);
                  if (v107 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v108 = v107;
                  if (v107 >= 0x17)
                  {
                    v127 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v107 | 7) != 0x17)
                      v127 = v107 | 7;
                    v128 = v127 + 1;
                    v109 = (void **)operator new(v127 + 1);
                    *(_QWORD *)&v244 = v108;
                    *((_QWORD *)&v244 + 1) = v128 | 0x8000000000000000;
                    v243 = (std::string *)v109;
                  }
                  else
                  {
                    HIBYTE(v244) = v107;
                    v109 = (void **)&v243;
                    if (!v107)
                    {
LABEL_238:
                      *((_BYTE *)v109 + v108) = 0;
                      v129 = v243;
                      v251[0] = v244;
                      *(_QWORD *)((char *)v251 + 7) = *(_QWORD *)((char *)&v244 + 7);
                      v130 = HIBYTE(v244);
                      v131 = operator new(0x38uLL);
                      v131[1] = 0;
                      v131[2] = 0;
                      v131[3] = off_24EC1FA48;
                      *v131 = &off_24EC1F9F8;
                      v132 = v251[0];
                      v131[4] = v129;
                      v131[5] = v132;
                      *(_QWORD *)((char *)v131 + 47) = *(_QWORD *)((char *)v251 + 7);
                      *((_BYTE *)v131 + 55) = v130;
                      v251[0] = 0;
                      *(_QWORD *)((char *)v251 + 7) = 0;
                      v133 = v242;
                      v241 = (char *)(v131 + 3);
                      v242 = (std::__shared_weak_count *)v131;
                      if (v133)
                      {
                        v134 = (unint64_t *)&v133->__shared_owners_;
                        do
                          v135 = __ldaxr(v134);
                        while (__stlxr(v135 - 1, v134));
                        if (!v135)
                        {
                          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                          std::__shared_weak_count::__release_weak(v133);
                        }
                      }
                      v245 = v240;
                      v136 = v241;
                      if (v240.__r_.__value_.__r.__words[2])
                      {
                        v137 = (unint64_t *)(v240.__r_.__value_.__r.__words[2] + 8);
                        do
                          v138 = __ldxr(v137);
                        while (__stxr(v138 + 1, v137));
                      }
                      v139 = v242;
                      *(_QWORD *)&v246 = v136;
                      *((_QWORD *)&v246 + 1) = v242;
                      if (v242)
                      {
                        v140 = (unint64_t *)&v242->__shared_owners_;
                        do
                          v141 = __ldxr(v140);
                        while (__stxr(v141 + 1, v140));
                        v247 = v136;
                        do
                          v142 = __ldaxr(v140);
                        while (__stlxr(v142 - 1, v140));
                        if (!v142)
                        {
                          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                          std::__shared_weak_count::__release_weak(v139);
                        }
                      }
                      else
                      {
                        v247 = v136;
                      }
                      v178 = (std::__shared_weak_count *)v240.__r_.__value_.__r.__words[2];
                      if (v240.__r_.__value_.__r.__words[2])
                      {
                        v179 = (unint64_t *)(v240.__r_.__value_.__r.__words[2] + 8);
                        do
                          v180 = __ldaxr(v179);
                        while (__stlxr(v180 - 1, v179));
                        if (!v180)
                        {
                          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                          std::__shared_weak_count::__release_weak(v178);
                        }
                      }
                      v181 = v245.__r_.__value_.__r.__words[0];
                      if (v247[31] >= 0)
                        v182 = v247 + 8;
                      else
                        v182 = (char *)*((_QWORD *)v247 + 1);
                      v183 = _os_log_pack_fill();
                      *(_DWORD *)v183 = 136315138;
                      *(_QWORD *)(v183 + 4) = v182;
                      v184 = operator new();
                      v185 = *(unsigned __int8 *)(v88 + 39);
                      v186 = *(const char **)(v88 + 16);
                      v187 = *(_QWORD *)(v88 + 24);
                      v188 = v246;
                      *(_OWORD *)(v184 + 8) = *(_OWORD *)&v245.__r_.__value_.__r.__words[1];
                      if ((v185 & 0x80u) != 0)
                        v185 = v187;
                      else
                        v186 = v213;
                      *(_QWORD *)v184 = v181;
                      *(_OWORD *)&v245.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v184 + 24) = v188;
                      v246 = 0uLL;
                      *(_QWORD *)(v184 + 40) = v186;
                      *(_QWORD *)(v184 + 48) = v185;
                      *(_BYTE *)(v184 + 56) = 16;
                      v243 = 0;
                      v240.__r_.__value_.__r.__words[0] = v184;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v240);
                      v189 = v240.__r_.__value_.__r.__words[0];
                      v240.__r_.__value_.__r.__words[0] = 0;
                      if (v189)
                      {
                        v190 = *(std::__shared_weak_count **)(v189 + 32);
                        if (v190)
                        {
                          v191 = (unint64_t *)&v190->__shared_owners_;
                          do
                            v192 = __ldaxr(v191);
                          while (__stlxr(v192 - 1, v191));
                          if (!v192)
                          {
                            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                            std::__shared_weak_count::__release_weak(v190);
                          }
                        }
                        v193 = *(std::__shared_weak_count **)(v189 + 16);
                        if (v193)
                        {
                          v194 = (unint64_t *)&v193->__shared_owners_;
                          do
                            v195 = __ldaxr(v194);
                          while (__stlxr(v195 - 1, v194));
                          if (!v195)
                          {
                            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                            std::__shared_weak_count::__release_weak(v193);
                          }
                        }
                        MEMORY[0x227684CE8](v189, 0x10F0C40B62ED6C6);
                        v196 = v243;
                        v243 = 0;
                        if (v196)
                        {
                          v197 = (std::__shared_weak_count *)v196[1].__r_.__value_.__l.__size_;
                          if (v197)
                          {
                            v198 = (unint64_t *)&v197->__shared_owners_;
                            do
                              v199 = __ldaxr(v198);
                            while (__stlxr(v199 - 1, v198));
                            if (!v199)
                            {
                              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                              std::__shared_weak_count::__release_weak(v197);
                            }
                          }
                          v200 = (std::__shared_weak_count *)v196->__r_.__value_.__r.__words[2];
                          if (v200)
                          {
                            v201 = (unint64_t *)&v200->__shared_owners_;
                            do
                              v202 = __ldaxr(v201);
                            while (__stlxr(v202 - 1, v201));
                            if (!v202)
                            {
                              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                              std::__shared_weak_count::__release_weak(v200);
                            }
                          }
                          MEMORY[0x227684CE8](v196, 0x10F0C40B62ED6C6);
                        }
                      }
                      v203 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
                      if (*((_QWORD *)&v246 + 1))
                      {
                        v204 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
                        do
                          v205 = __ldaxr(v204);
                        while (__stlxr(v205 - 1, v204));
                        if (!v205)
                        {
                          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                          std::__shared_weak_count::__release_weak(v203);
                        }
                      }
                      v206 = (std::__shared_weak_count *)v245.__r_.__value_.__r.__words[2];
                      if (v245.__r_.__value_.__r.__words[2])
                      {
                        v207 = (unint64_t *)(v245.__r_.__value_.__r.__words[2] + 8);
                        do
                          v208 = __ldaxr(v207);
                        while (__stlxr(v208 - 1, v207));
                        if (!v208)
                        {
                          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                          std::__shared_weak_count::__release_weak(v206);
                        }
                      }
LABEL_351:
                      if (v48)
                      {
                        v209 = (std::string *)&__dst;
                        if (v227 < 0)
                          v209 = __dst;
                        sub_22322C138((uint64_t)&v216, "%s", (const char *)v209);
                        sub_223182C08((uint64_t)&v216);
                      }
                      sub_223182C08((uint64_t)&v216);
                      v175 = v224;
                      if (v224)
                      {
                        v210 = (unint64_t *)&v224->__shared_owners_;
                        do
                          v177 = __ldaxr(v210);
                        while (__stlxr(v177 - 1, v210));
                        goto LABEL_358;
                      }
LABEL_360:
                      if (SHIBYTE(v227) < 0)
                        operator delete(__dst);
                      v228[0] = *MEMORY[0x24BEDB7F0];
                      v211 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v228 + *(_QWORD *)(v228[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v229[0] = v211;
                      v229[1] = MEMORY[0x24BEDB848] + 16;
                      if (v235 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      return MEMORY[0x227684BE0](&v238);
                    }
                  }
                  memcpy(v109, v99, v108);
                  goto LABEL_238;
                }
              }
              memmove(v98, v89, v90);
              goto LABEL_200;
            }
          }
          memmove(v94, v92, v93);
          goto LABEL_192;
        }
      }
      memmove(v54, v84, v53);
      goto LABEL_171;
    }
  }
  return result;
}

void sub_223C0760C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223C0786C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223C0787C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCF68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCF68))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.frame");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCF60);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCF68);
  }
  *a1 = qword_2540CCF60;
}

void sub_223C07918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCF68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCF68);
  _Unwind_Resume(a1);
}

_DWORD *sub_223C07970(_DWORD ***a1)
{
  return sub_22388D334(**a1, (char *)(*a1)[1]);
}

void sub_223C0797C(uint64_t a1, uint64_t a2)
{
  sub_223C0798C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223C0798C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC60AC0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223C07B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C07B84(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C07C7C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C07C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C07C7C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C07E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223C07E8C@<X0>(float32x2_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t result;
  int32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t *v12;
  float32x2_t *v13;
  int32x4_t v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  _OWORD v23[3];
  float32x2_t v24;
  unsigned __int32 v25;
  int v26;
  uint64_t v27[21];
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;

  result = sub_2241498F4(a3, 0);
  v13 = *a1;
  v12 = a1[1];
  if (v13 != v12)
  {
    v14.i32[3] = 1083179008;
    do
    {
      *(float32x2_t *)v14.i8 = *v13;
      v14.i32[2] = v13[1].i32[0];
      *(float32x2_t *)v9.i8 = v13[2];
      v9.i32[2] = v13[3].i32[0];
      *(float32x2_t *)v10.f32 = v13[6];
      v10.i32[2] = v13[7].i32[0];
      *(_QWORD *)&v15 = vzip1q_s32(v14, v9).u64[0];
      v16 = (int8x16_t)vnegq_f32(v10);
      v11.i32[0] = v13[5].i32[0];
      v17 = (int8x16_t)vtrn2q_s32(v14, v9);
      v17.i32[2] = HIDWORD(*(_QWORD *)&v13[4]);
      v18 = (int8x16_t)vzip2q_s32(v14, v9);
      v19 = (int32x4_t)v18;
      v19.i32[2] = v11.i32[0];
      v20 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v15, *(float *)v16.i32), *(float32x2_t *)v17.i8, *(float32x2_t *)v10.f32, 1), *(float32x2_t *)v18.i8, v10, 2);
      v21 = vmls_lane_f32(vmul_f32(v13[4], *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v13[4], 1), *(float32x2_t *)v10.f32, 1);
      v22 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
      *((_QWORD *)&v15 + 1) = *(_QWORD *)&v13[4];
      v16.i32[3] = 0;
      v16.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v17, 0).i32[3];
      *(uint64_t *)((char *)v16.i64 + 4) = vextq_s8(v17, v18, 4uLL).u64[0];
      v19.i64[1] = vdupq_laneq_s32(v19, 2).u32[0];
      v23[1] = v16;
      v23[2] = v19;
      v23[0] = v15;
      v24 = v20;
      v25 = vmla_f32(v21, v22, v11).u32[0];
      v26 = 1065353216;
      v28 = xmmword_224651370;
      sub_223207E58(&v36, (int *)&v28);
      v30 = v37;
      v31 = v38;
      v32 = v39;
      v33 = v40;
      v34 = v41;
      v35 = 0xA0000000ALL;
      v29[0] = &off_24EC207B8;
      v29[1] = &off_24EC20868;
      sub_224002D14((uint64_t)v29, (int32x2_t *)v23, a2, (uint64_t)v27, a4);
      sub_22414E9E0(a3, (uint64_t)v27);
      result = (uint64_t)sub_22316F8F4(v27);
      v13 += 8;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_223C0805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t *v11;
  va_list va;

  va_start(va, a11);
  sub_22316F8F4((uint64_t *)va);
  sub_22316F8F4(v11);
  _Unwind_Resume(a1);
}

void sub_223C08078(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223C0808C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  __int128 *v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  __int128 *v41;
  int v42;
  __int128 *v43;
  __int128 *v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string::size_type *v67;
  std::string::size_type v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  std::string v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  std::string v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 __p;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  std::string v106;
  std::string v107;
  char v108;
  _QWORD v109[2];
  std::string v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v94 = operator new(0x28uLL);
  v95 = xmmword_2245C65C0;
  strcpy((char *)v94, "Stats.KFCluster.LatestClusterResult");
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_205;
  v2 = sub_2241471F8();
  v3 = v2[2];
  if (!v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = v2[2];
  }
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  std::mutex::unlock(v5);
  if (v7 == v6)
    goto LABEL_205;
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  v110.__r_.__value_.__l.__size_ = 11;
  v8 = HIBYTE(v95);
  v9 = &v94;
  if (v95 < 0)
  {
    v9 = v94;
    v8 = v95;
  }
  v110.__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  *(_QWORD *)&v111 = v8;
  sub_2231A9820((uint64_t)&v110, (uint64_t)&v111 + 8, 0, 0, &v93);
  sub_2241471F8();
  v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
  {
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      *(_QWORD *)&v96 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v96 + 1) = 2;
      v11 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = 0uLL;
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110.__r_.__value_.__l.__size_;
        sub_2245314F4(&v110, &v97);
        v99 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
        sub_22323DF84((uint64_t)&v110, (char *)v110.__r_.__value_.__l.__size_);
        v12 = *(_QWORD **)(a1 + 72);
        v13 = (unsigned __int8 *)(a1 + 80);
        *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = 0uLL;
        v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97.__r_.__value_.__l.__size_;
        sub_223C206F8(&v97, v12, v14, (_QWORD *)(a1 + 80));
        *((_BYTE *)&v110.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&v110, "Add Clusters#");
        v106.__r_.__value_.__r.__words[0] = v97.__r_.__value_.__r.__words[2];
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v107);
        sub_223AC95C8((uint64_t)&v99, v107.__r_.__value_.__l.__data_, (uint64_t *)&v106);
        size = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_)
        {
          v16 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v91 = v11;
        v92 = v10;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        *((_BYTE *)&v107.__r_.__value_.__s + 23) = 0;
        v107.__r_.__value_.__s.__data_[0] = 0;
        v18 = *(unsigned __int8 **)(a1 + 72);
        if (v18 != v13)
        {
          do
          {
            LODWORD(v111) = 0;
            sub_22319B83C((uint64_t)v109, (uint64_t)&v110, v18 + 32);
            if ((_DWORD)v111 == -1)
              sub_22316DD70();
            v109[0] = &v108;
            ((void (*)(__int128 *__return_ptr, _QWORD *, std::string *))off_24EC60BB0[v111])(&__p, v109, &v110);
            if ((_DWORD)v111 != -1)
              ((void (*)(_QWORD *, std::string *))off_24EC60B38[v111])(v109, &v110);
            v19 = HIBYTE(v103);
            if (v103 < 0)
              v19 = *((_QWORD *)&__p + 1);
            if (v19 >= 4)
              v19 = 4;
            v105 = v103;
            v104 = __p;
            __p = 0uLL;
            v103 = 0;
            if (SHIBYTE(v105) < 0)
            {
              *((_QWORD *)&v104 + 1) = v19;
              v20 = (__int128 *)v104;
            }
            else
            {
              HIBYTE(v105) = v19;
              v20 = &v104;
            }
            *((_BYTE *)v20 + v19) = 0;
            v21 = SHIBYTE(v105);
            v22 = (__int128 *)v104;
            sub_223C1DE40((_QWORD *)v18 + 6, &v110);
            if (v21 >= 0)
              v23 = &v104;
            else
              v23 = v22;
            v24 = &v110;
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v24 = (std::string *)v110.__r_.__value_.__r.__words[0];
            sub_22456D250("CID:%s(%s)\n", &v106, v23, v24);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &v106;
            else
              v25 = (std::string *)v106.__r_.__value_.__r.__words[0];
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            else
              v26 = v106.__r_.__value_.__l.__size_;
            std::string::append(&v107, (const std::string::value_type *)v25, v26);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v106.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_44:
                if ((SHIBYTE(v105) & 0x80000000) == 0)
                  goto LABEL_45;
                goto LABEL_50;
              }
            }
            else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_44;
            }
            operator delete(v110.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v105) & 0x80000000) == 0)
            {
LABEL_45:
              if ((SHIBYTE(v103) & 0x80000000) == 0)
                goto LABEL_46;
              goto LABEL_51;
            }
LABEL_50:
            operator delete((void *)v104);
            if ((SHIBYTE(v103) & 0x80000000) == 0)
            {
LABEL_46:
              v27 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
              if (v27)
                goto LABEL_52;
              goto LABEL_54;
            }
LABEL_51:
            operator delete((void *)__p);
            v27 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
            if (v27)
            {
              do
              {
LABEL_52:
                v28 = v27;
                v27 = *(unsigned __int8 **)v27;
              }
              while (v27);
              goto LABEL_20;
            }
            do
            {
LABEL_54:
              v28 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
              v29 = *(_QWORD *)v28 == (_QWORD)v18;
              v18 = v28;
            }
            while (!v29);
LABEL_20:
            v18 = v28;
          }
          while (v28 != v13);
        }
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_2245B8EA0;
        strcpy(v110.__r_.__value_.__l.__data_, "Result: Add cluster to keyframe");
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v106);
        sub_2231AEDB8((uint64_t)&v99, v106.__r_.__value_.__l.__data_, (uint64_t)&v107);
        v30 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
        if (v106.__r_.__value_.__l.__size_)
        {
          v31 = (unint64_t *)(v106.__r_.__value_.__l.__size_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        sub_223198030((uint64_t)&v97, (_QWORD *)v97.__r_.__value_.__l.__size_);
        v33 = *(_QWORD **)(a1 + 48);
        v34 = (unsigned __int8 *)(a1 + 56);
        *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = 0uLL;
        v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97.__r_.__value_.__l.__size_;
        sub_223C206F8(&v97, v33, v35, (_QWORD *)(a1 + 56));
        *((_BYTE *)&v110.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v110, "Delete Clusters#");
        v106.__r_.__value_.__r.__words[0] = v97.__r_.__value_.__r.__words[2];
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v107);
        sub_223AC95C8((uint64_t)&v99, v107.__r_.__value_.__l.__data_, (uint64_t *)&v106);
        v36 = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        *((_BYTE *)&v107.__r_.__value_.__s + 23) = 0;
        v107.__r_.__value_.__s.__data_[0] = 0;
        v39 = *(unsigned __int8 **)(a1 + 48);
        if (v39 != v34)
        {
          do
          {
            LODWORD(v111) = 0;
            sub_22319B83C((uint64_t)v109, (uint64_t)&v110, v39 + 32);
            if ((_DWORD)v111 == -1)
              sub_22316DD70();
            v109[0] = &v108;
            ((void (*)(__int128 *__return_ptr, _QWORD *, std::string *))off_24EC60BB0[v111])(&__p, v109, &v110);
            if ((_DWORD)v111 != -1)
              ((void (*)(_QWORD *, std::string *))off_24EC60B38[v111])(v109, &v110);
            v40 = HIBYTE(v103);
            if (v103 < 0)
              v40 = *((_QWORD *)&__p + 1);
            if (v40 >= 4)
              v40 = 4;
            v105 = v103;
            v104 = __p;
            __p = 0uLL;
            v103 = 0;
            if (SHIBYTE(v105) < 0)
            {
              *((_QWORD *)&v104 + 1) = v40;
              v41 = (__int128 *)v104;
            }
            else
            {
              HIBYTE(v105) = v40;
              v41 = &v104;
            }
            *((_BYTE *)v41 + v40) = 0;
            v42 = SHIBYTE(v105);
            v43 = (__int128 *)v104;
            sub_223C1DE40((_QWORD *)v39 + 6, &v110);
            if (v42 >= 0)
              v44 = &v104;
            else
              v44 = v43;
            v45 = &v110;
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v45 = (std::string *)v110.__r_.__value_.__r.__words[0];
            sub_22456D250("CID:%s(%s)\n", &v106, v44, v45);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v46 = &v106;
            else
              v46 = (std::string *)v106.__r_.__value_.__r.__words[0];
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            else
              v47 = v106.__r_.__value_.__l.__size_;
            std::string::append(&v107, (const std::string::value_type *)v46, v47);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v106.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_100:
                if ((SHIBYTE(v105) & 0x80000000) == 0)
                  goto LABEL_101;
                goto LABEL_106;
              }
            }
            else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_100;
            }
            operator delete(v110.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v105) & 0x80000000) == 0)
            {
LABEL_101:
              if ((SHIBYTE(v103) & 0x80000000) == 0)
                goto LABEL_102;
              goto LABEL_107;
            }
LABEL_106:
            operator delete((void *)v104);
            if ((SHIBYTE(v103) & 0x80000000) == 0)
            {
LABEL_102:
              v48 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
              if (v48)
                goto LABEL_108;
              goto LABEL_110;
            }
LABEL_107:
            operator delete((void *)__p);
            v48 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
            if (v48)
            {
              do
              {
LABEL_108:
                v49 = v48;
                v48 = *(unsigned __int8 **)v48;
              }
              while (v48);
              goto LABEL_76;
            }
            do
            {
LABEL_110:
              v49 = (unsigned __int8 *)*((_QWORD *)v39 + 2);
              v29 = *(_QWORD *)v49 == (_QWORD)v39;
              v39 = v49;
            }
            while (!v29);
LABEL_76:
            v39 = v49;
          }
          while (v49 != v34);
        }
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_2245B8D40;
        strcpy(v110.__r_.__value_.__l.__data_, "Result: Delete cluster to keyframe");
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v106);
        sub_2231AEDB8((uint64_t)&v99, v106.__r_.__value_.__l.__data_, (uint64_t)&v107);
        v50 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
        if (v106.__r_.__value_.__l.__size_)
        {
          v51 = (unint64_t *)(v106.__r_.__value_.__l.__size_ + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        sub_223198030((uint64_t)&v97, (_QWORD *)v97.__r_.__value_.__l.__size_);
        *((_BYTE *)&v110.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&v110, "Result: new cluster");
        sub_223C1DE40((_QWORD *)a1, &v97);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v97;
        else
          v53 = (std::string *)v97.__r_.__value_.__r.__words[0];
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v107);
        sub_223534538((uint64_t)&v99, v107.__r_.__value_.__l.__data_, (const char **)&v106.__r_.__value_.__l.__data_);
        v54 = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_)
        {
          v55 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = xmmword_2245B9430;
        strcpy(v110.__r_.__value_.__l.__data_, "Result: deleted cluster");
        sub_223C1DE40((_QWORD *)(a1 + 24), &v97);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v97;
        else
          v57 = (std::string *)v97.__r_.__value_.__r.__words[0];
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        sub_224527BAC((uint64_t)&v110, (CFStringRef *)&v107);
        sub_223534538((uint64_t)&v99, v107.__r_.__value_.__l.__data_, (const char **)&v106.__r_.__value_.__l.__data_);
        v58 = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_)
        {
          v59 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        *((_BYTE *)&v97.__r_.__value_.__s + 23) = 20;
        strcpy((char *)&v97, "Result: current room");
        LODWORD(v111) = 0;
        if (*(_BYTE *)(a1 + 136))
          sub_22319B83C((uint64_t)&v106, (uint64_t)&v110, (unsigned __int8 *)(a1 + 120));
        else
          sub_2231A0D14(&v110, "nullopt");
        if ((_DWORD)v111 == -1)
          sub_22316DD70();
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24EC60BB0[v111])(&v107, &v106, &v110);
        if ((_DWORD)v111 != -1)
          ((void (*)(std::string *, std::string *))off_24EC60B38[v111])(&v106, &v110);
        sub_224527BAC((uint64_t)&v97, (CFStringRef *)&v110);
        sub_2231AEDB8((uint64_t)&v99, v110.__r_.__value_.__l.__data_, (uint64_t)&v107);
        v61 = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
        if (v110.__r_.__value_.__l.__size_)
        {
          v62 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        v97.__r_.__value_.__s.__data_[0] = 0;
        v98 = 0;
        sub_2231AD9F0((uint64_t)&v99, (__int128 *)&v97, &v96, &v100);
        if (v98 && SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        v64 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        if (*((_QWORD *)&v99 + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 56))(v92);
        v68 = *v67;
        v69 = (std::__shared_weak_count *)v67[1];
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldxr(p_shared_owners);
          while (__stxr(v71 + 1, p_shared_owners));
        }
        v72 = v101;
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v107.__r_.__value_.__r.__words[1] = v101;
        v101 = 0uLL;
        v110.__r_.__value_.__r.__words[0] = v68;
        v110.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
        if (v69)
        {
          v73 = (unint64_t *)&v69->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
        v111 = v72;
        if (*((_QWORD *)&v72 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        (*(void (**)(uint64_t *, std::string *))(*v91 + 16))(v91, &v110);
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
        if (*((_QWORD *)&v111 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
        if (v110.__r_.__value_.__l.__size_)
        {
          v81 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = (std::__shared_weak_count *)v107.__r_.__value_.__r.__words[2];
        if (v107.__r_.__value_.__r.__words[2])
        {
          v84 = (unint64_t *)(v107.__r_.__value_.__r.__words[2] + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v69)
        {
          v86 = (unint64_t *)&v69->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v88 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
        {
          v89 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
    }
    kdebug_trace();
  }
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_205:
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      return;
    goto LABEL_206;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95) < 0)
LABEL_206:
    operator delete(v94);
}

void sub_223C08F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223C09454(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  char v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  BOOL v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string::size_type *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  void *__p[2];
  std::__shared_weak_count *v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  void *v63[2];
  std::__shared_weak_count *v64;
  char v65;
  char *v66;
  std::__shared_weak_count *v67;
  std::string v68;
  void *v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x24BDAC8D0];
  v53 = operator new(0x20uLL);
  v54 = xmmword_2245B8D70;
  strcpy((char *)v53, "Stats.KFCluster.ClusterMap");
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_87;
  v2 = sub_2241471F8();
  v3 = v2[2];
  if (!v3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = v2[2];
  }
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  v7 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  std::mutex::unlock(v5);
  if (v7 == v6)
    goto LABEL_87;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
  v68.__r_.__value_.__l.__size_ = 11;
  v8 = (void *)HIBYTE(v54);
  v9 = &v53;
  if (v54 < 0)
  {
    v9 = v53;
    v8 = (void *)v54;
  }
  v68.__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  v69 = v8;
  sub_2231A9820((uint64_t)&v68, (uint64_t)v70, 0, 0, &v52);
  sub_2241471F8();
  v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
  {
    kdebug_trace();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      *(_QWORD *)&v55 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
      *((_QWORD *)&v55 + 1) = 2;
      v11 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        *(_OWORD *)&v68.__r_.__value_.__r.__words[1] = 0uLL;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68.__r_.__value_.__l.__size_;
        sub_2245314F4(&v68, __p);
        v59 = *(_OWORD *)__p;
        sub_22323DF84((uint64_t)&v68, (char *)v68.__r_.__value_.__l.__size_);
        v14 = (unsigned __int8 *)*a1;
        v12 = (unsigned __int8 *)(a1 + 1);
        v13 = v14;
        if (v14 != v12)
        {
          do
          {
            LODWORD(v69) = 0;
            sub_22319B83C((uint64_t)&v66, (uint64_t)&v68, v13 + 32);
            if ((_DWORD)v69 == -1)
              sub_22316DD70();
            v66 = &v65;
            ((void (*)(void **__return_ptr, char **, std::string *))off_24EC60BB0[v69])(v63, &v66, &v68);
            if ((_DWORD)v69 != -1)
              ((void (*)(char **, std::string *))off_24EC60B38[v69])(&v66, &v68);
            v15 = HIBYTE(v64);
            v16 = HIBYTE(v64);
            if (SHIBYTE(v64) < 0)
              v15 = (unint64_t)v63[1];
            if (v15 >= 4)
              v15 = 4;
            v57 = v64;
            *(_OWORD *)__p = *(_OWORD *)v63;
            v63[0] = 0;
            v63[1] = 0;
            v64 = 0;
            if (v16 < 0)
            {
              __p[1] = (void *)v15;
              v17 = (void **)__p[0];
            }
            else
            {
              HIBYTE(v57) = v15;
              v17 = __p;
            }
            *((_BYTE *)v17 + v15) = 0;
            sub_223C1DE40((_QWORD *)v13 + 6, &v68);
            sub_224527BAC((uint64_t)__p, (CFStringRef *)&v66);
            sub_2231AEDB8((uint64_t)&v59, v66, (uint64_t)&v68);
            v18 = v67;
            if (!v67)
              goto LABEL_28;
            p_shared_owners = (unint64_t *)&v67->__shared_owners_;
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
              if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_29:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_30;
                goto LABEL_35;
              }
            }
            else
            {
LABEL_28:
              if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_29;
            }
            operator delete(v68.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v57) & 0x80000000) == 0)
            {
LABEL_30:
              if ((SHIBYTE(v64) & 0x80000000) == 0)
                goto LABEL_31;
              goto LABEL_36;
            }
LABEL_35:
            operator delete(__p[0]);
            if ((SHIBYTE(v64) & 0x80000000) == 0)
            {
LABEL_31:
              v21 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
              if (v21)
                goto LABEL_37;
              goto LABEL_39;
            }
LABEL_36:
            operator delete(v63[0]);
            v21 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
            if (v21)
            {
              do
              {
LABEL_37:
                v22 = v21;
                v21 = *(unsigned __int8 **)v21;
              }
              while (v21);
              goto LABEL_13;
            }
            do
            {
LABEL_39:
              v22 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
              v23 = *(_QWORD *)v22 == (_QWORD)v13;
              v13 = v22;
            }
            while (!v23);
LABEL_13:
            v13 = v22;
          }
          while (v22 != v12);
        }
        LOBYTE(__p[0]) = 0;
        v58 = 0;
        sub_2231AD9F0((uint64_t)&v59, (__int128 *)__p, &v55, &v60);
        if (v58 && SHIBYTE(v57) < 0)
          operator delete(__p[0]);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::string::size_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
        v28 = *v27;
        v29 = (std::__shared_weak_count *)v27[1];
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v33 = v61;
        v32 = v62;
        v63[0] = &off_24EC6A3B8;
        v63[1] = v61;
        v64 = v62;
        v61 = 0;
        v62 = 0;
        v68.__r_.__value_.__r.__words[0] = v28;
        v68.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
        if (v29)
        {
          v34 = (unint64_t *)&v29->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v68.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_24EC6A3B8;
        v69 = v33;
        v70[0] = v32;
        if (v32)
        {
          v36 = (unint64_t *)&v32->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        (*(void (**)(uint64_t *, std::string *))(*v11 + 16))(v11, &v68);
        v38 = (std::__shared_weak_count *)v70[0];
        if (v70[0])
        {
          v39 = (unint64_t *)(v70[0] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        size = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
        if (v68.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v68.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v44 = v64;
        if (v64)
        {
          v45 = (unint64_t *)&v64->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v29)
        {
          v47 = (unint64_t *)&v29->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v49 = v62;
        if (v62)
        {
          v50 = (unint64_t *)&v62->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
    }
    kdebug_trace();
  }
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if ((SHIBYTE(v54) & 0x80000000) == 0)
      return;
    goto LABEL_88;
  }
  operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54) < 0)
LABEL_88:
    operator delete(v53);
}

void sub_223C09B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;

  sub_2241231D8(v47);
  v50 = *(std::__shared_weak_count **)(v48 - 120);
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_2241231D8((uint64_t)&a41);
  if (v46)
  {
    v53 = (unint64_t *)&v46->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_2241231D8((uint64_t)&a38);
  sub_2231874DC((uint64_t)&a9);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void sub_223C09D90(uint64_t *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  __n128 *v16;
  std::string *v17;
  size_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::mutex *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  int v40;
  __n128 *v43;
  std::string *v44;
  size_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::mutex *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string::size_type v69;
  int v70;
  __n128 *v73;
  std::string *v74;
  size_t v75;
  unsigned __int8 v76;
  float v77;
  unsigned __int8 v78;
  double v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  __int128 v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  void *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::mutex *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string::size_type v111;
  int v112;
  __n128 *v115;
  std::string *v116;
  size_t v117;
  uint64_t v118;
  void *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  std::mutex *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  std::string *v128;
  uint64_t v129;
  uint64_t v130;
  std::string::size_type v131;
  std::string *v132;
  std::string::size_type v133;
  std::string::size_type v134;
  int v135;
  __n128 *v138;
  std::string *v139;
  size_t v140;
  uint64_t v141;
  void *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  std::mutex *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  std::string *v151;
  uint64_t v152;
  uint64_t v153;
  std::string::size_type v154;
  std::string *v155;
  std::string::size_type v156;
  std::string::size_type v157;
  int v158;
  __n128 *v161;
  std::string *v162;
  size_t v163;
  uint64_t v164;
  void *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  std::mutex *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  std::string *v174;
  uint64_t v175;
  uint64_t v176;
  std::string::size_type v177;
  std::string *v178;
  std::string::size_type v179;
  std::string::size_type v180;
  int v181;
  __n128 *v184;
  std::string *v185;
  size_t v186;
  uint64_t v187;
  void *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  std::mutex *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  std::string *v197;
  uint64_t v198;
  uint64_t v199;
  std::string::size_type v200;
  std::string *v201;
  std::string::size_type v202;
  std::string::size_type v203;
  int v204;
  __n128 *v207;
  std::string *v208;
  size_t v209;
  uint64_t v210;
  void *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  std::mutex *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  std::string *v220;
  uint64_t v221;
  uint64_t v222;
  std::string::size_type v223;
  std::string *v224;
  std::string::size_type v225;
  std::string::size_type v226;
  int v227;
  __n128 *v230;
  std::string *v231;
  size_t v232;
  uint64_t v233;
  void *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  std::mutex *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  std::string *v243;
  uint64_t v244;
  uint64_t v245;
  std::string::size_type v246;
  std::string *v247;
  std::string::size_type v248;
  std::string::size_type v249;
  int v250;
  __n128 *v253;
  std::string *v254;
  size_t v255;
  uint64_t v256;
  void *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  std::mutex *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  std::string *v266;
  uint64_t v267;
  uint64_t v268;
  std::string::size_type v269;
  std::string *v270;
  std::string::size_type v271;
  std::string::size_type v272;
  int v273;
  __n128 *v276;
  std::string *v277;
  size_t v278;
  uint64_t v279;
  void *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  std::mutex *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 v288;
  std::string *v289;
  uint64_t v290;
  uint64_t v291;
  std::string::size_type v292;
  std::string *v293;
  std::string::size_type v294;
  std::string::size_type v295;
  int v296;
  __n128 *v299;
  std::string *v300;
  size_t v301;
  int v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  const char *v306;
  size_t v307;
  unsigned __int8 v308;
  unsigned __int8 v309;
  const char *v310;
  size_t v311;
  _BYTE *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  _BYTE *v316;
  NSObject *v317;
  uint64_t v318;
  uint64_t v319;
  size_t v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  unint64_t *p_shared_owners;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  const char *v339;
  std::string::size_type v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t *v378;
  const char *v379;
  std::string __p;
  int v382;
  const char *v383;
  int v384;
  const char *v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  float v388;
  uint64_t v389;
  std::string v390;
  void *v391;
  __int128 v392;
  __int128 v393;
  _BYTE v394[64];
  uint64_t v395;
  __int16 v396;
  uint64_t v397;
  uint64_t v398;

  v398 = *MEMORY[0x24BDAC8D0];
  v1 = operator new(0x20uLL);
  v391 = v1;
  v392 = xmmword_2245B8EA0;
  strcpy((char *)v1, "Stats.KFCluster.RoomBoundaryKPI");
  *(_QWORD *)v394 = "cv3d.recon.";
  *(_QWORD *)&v394[8] = 11;
  *(_QWORD *)&v394[16] = v1;
  *(_QWORD *)&v394[24] = 31;
  sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      sub_2241471F8();
      v8 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        memset(v394, 0, 32);
        *(_DWORD *)&v394[32] = 728325608;
        kdebug_trace();
        sub_223C0CD70(v8, a1, "cluster_total");
        kdebug_trace();
      }
    }
  }
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v11 = p_p->__r_.__value_.__r.__words[0];
    v12 = p_p->__r_.__value_.__l.__size_;
    v13 = p_p->__r_.__value_.__s.__data_[16];
    if (v11 == 0x6365722E64337663 && v12 == 0x73746174532E6E6FLL && v13 == 46)
    {
      v16 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      sub_22365B208(v16, v17, v18, a1, (uint64_t)"cluster_total", 13);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v19 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v373) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v372) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v372 / (double)v373;
    __cxa_guard_release(&qword_255795560);
  }
  v20 = *a1;
  v21 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D7C8);
  v22 = qword_25578D808;
  if (qword_25578D808 <= v20)
    v22 = v20;
  if (byte_25578D810)
    v23 = v22;
  else
    v23 = v20;
  qword_25578D808 = v23;
  byte_25578D810 = 1;
  std::mutex::unlock(&stru_25578D7C8);
  std::mutex::lock(&stru_25578D848);
  v24 = qword_25578D898;
  if (qword_25578D898 >= v20)
    v24 = v20;
  if (byte_25578D8A0)
    v25 = v24;
  else
    v25 = v20;
  qword_25578D898 = v25;
  byte_25578D8A0 = 1;
  std::mutex::unlock(&stru_25578D848);
  kdebug_trace();
  *(_QWORD *)v394 = "cv3d.recon.";
  *(_QWORD *)&v394[8] = 11;
  v26 = HIBYTE(v392);
  v27 = &v391;
  if (v392 < 0)
  {
    v27 = v391;
    v26 = v392;
  }
  *(_QWORD *)&v394[16] = v27;
  *(_QWORD *)&v394[24] = v26;
  sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &v390);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v28 = sub_2241471F8();
    v29 = v28[2];
    if (!v29)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v29 = v28[2];
    }
    v30 = *(_QWORD *)(v29 + 64);
    v31 = (std::mutex *)(v30 + 32);
    std::mutex::lock((std::mutex *)(v30 + 32));
    v33 = *(_QWORD *)(v30 + 96);
    v32 = *(_QWORD *)(v30 + 104);
    std::mutex::unlock(v31);
    if (v33 != v32)
    {
      sub_2241471F8();
      v34 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
      {
        memset(v394, 0, 32);
        *(_DWORD *)&v394[32] = 728325608;
        kdebug_trace();
        v389 = a1[9] + a1[8];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
          strcpy((char *)&__p, "cluster_change");
          *(_QWORD *)&v393 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v393 + 1) = 2;
          v35 = sub_2241471F8();
          sub_22366376C((uint64_t)v35, v34, &v389, (uint64_t)&__p, &v393);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325624;
  kdebug_trace();
  v36 = HIBYTE(v390.__r_.__value_.__r.__words[2]);
  if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = v390.__r_.__value_.__l.__size_;
  if (v36 >= 0x11)
  {
    v37 = &v390;
    if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v390.__r_.__value_.__r.__words[0];
    v38 = v37->__r_.__value_.__r.__words[0];
    v39 = v37->__r_.__value_.__l.__size_;
    v40 = v37->__r_.__value_.__s.__data_[16];
    if (v38 == 0x6365722E64337663 && v39 == 0x73746174532E6E6FLL && v40 == 46)
    {
      v43 = sub_223187510();
      if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v390;
      else
        v44 = (std::string *)v390.__r_.__value_.__r.__words[0];
      if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v390.__r_.__value_.__r.__words[2]);
      else
        v45 = v390.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = a1[9] + a1[8];
      sub_22365B208(v43, v44, v45, (uint64_t *)&__p, (uint64_t)"cluster_change", 14);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325632;
  kdebug_trace();
  v47 = a1 + 8;
  v46 = a1[8];
  v48 = a1[9];
  v378 = a1 + 9;
  mach_absolute_time();
  v49 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v375) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v374) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v374 / (double)v375;
    __cxa_guard_release(&qword_255795560);
  }
  v50 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D8C8);
  qword_25578D908 += v48 + v46;
  std::mutex::unlock(&stru_25578D8C8);
  kdebug_trace();
  v51 = a1 + 5;
  v52 = a1 + 6;
  v53 = a1[6] + a1[5];
  v54 = a1[10];
  if (v54)
  {
    v55 = (float)v53 / (float)v54;
  }
  else
  {
    v55 = 1.0;
    if (!v53)
      v55 = 0.0;
  }
  v388 = v55;
  *(_QWORD *)v394 = "cv3d.recon.";
  *(_QWORD *)&v394[8] = 11;
  v56 = HIBYTE(v392);
  v57 = &v391;
  if (v392 < 0)
  {
    v57 = v391;
    v56 = v392;
  }
  *(_QWORD *)&v394[16] = v57;
  *(_QWORD *)&v394[24] = v56;
  sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &v390);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v58 = sub_2241471F8();
    v59 = v58[2];
    if (!v59)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v59 = v58[2];
    }
    v60 = *(_QWORD *)(v59 + 64);
    v61 = (std::mutex *)(v60 + 32);
    std::mutex::lock((std::mutex *)(v60 + 32));
    v63 = *(_QWORD *)(v60 + 96);
    v62 = *(_QWORD *)(v60 + 104);
    std::mutex::unlock(v61);
    if (v63 != v62)
    {
      sub_2241471F8();
      v64 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
      {
        memset(v394, 0, 32);
        *(_DWORD *)&v394[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245B8D40;
          strcpy(__p.__r_.__value_.__l.__data_, "change_kfs_cluster_to_nearby_ratio");
          *(_QWORD *)&v393 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v393 + 1) = 2;
          v65 = sub_2241471F8();
          sub_2231AF940((uint64_t)v65, v64, &v388, (uint64_t)&__p, &v393);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325624;
  kdebug_trace();
  v66 = HIBYTE(v390.__r_.__value_.__r.__words[2]);
  if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v66 = v390.__r_.__value_.__l.__size_;
  if (v66 >= 0x11)
  {
    v67 = &v390;
    if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v67 = (std::string *)v390.__r_.__value_.__r.__words[0];
    v68 = v67->__r_.__value_.__r.__words[0];
    v69 = v67->__r_.__value_.__l.__size_;
    v70 = v67->__r_.__value_.__s.__data_[16];
    if (v68 == 0x6365722E64337663 && v69 == 0x73746174532E6E6FLL && v70 == 46)
    {
      v73 = sub_223187510();
      if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v390;
      else
        v74 = (std::string *)v390.__r_.__value_.__r.__words[0];
      if ((v390.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(v390.__r_.__value_.__r.__words[2]);
      else
        v75 = v390.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v73, v74, v75, &v388, (uint64_t)"change_kfs_cluster_to_nearby_ratio", 34);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  memset(v394, 0, 32);
  *(_DWORD *)&v394[32] = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v76 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v377) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v376) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v376 / (double)v377;
    __cxa_guard_release(&qword_255795560);
  }
  v77 = v388;
  v78 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D930);
  v79 = v77;
  if (byte_25578D978)
    v79 = *(double *)&qword_25578D970 + v79;
  else
    byte_25578D978 = 1;
  qword_25578D970 = *(_QWORD *)&v79;
  *(double *)&qword_25578D980 = *(double *)&qword_25578D980 + 1.0;
  std::mutex::unlock(&stru_25578D930);
  kdebug_trace();
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v80 = sub_2241471F8();
    v81 = v80[2];
    if (!v81)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v81 = v80[2];
    }
    v82 = *(_QWORD *)(v81 + 64);
    v83 = (std::mutex *)(v82 + 32);
    std::mutex::lock((std::mutex *)(v82 + 32));
    v85 = *(_QWORD *)(v82 + 96);
    v84 = *(_QWORD *)(v82 + 104);
    std::mutex::unlock(v83);
    if (v85 != v84)
    {
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v86 = HIBYTE(v392);
      v87 = &v391;
      if (v392 < 0)
      {
        v87 = v391;
        v86 = v392;
      }
      *(_QWORD *)&v394[16] = v87;
      *(_QWORD *)&v394[24] = v86;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      v88 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v89 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v88 & 0x80u) == 0)
        v90 = &__p;
      else
        v90 = (std::string *)v89;
      if ((v88 & 0x80u) == 0)
        v91 = v88;
      else
        v91 = *((_QWORD *)&v89 + 1);
      v92 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v90, v91);
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
      v94 = v93;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v94)
          goto LABEL_471;
      }
      else if (!v93)
      {
        goto LABEL_471;
      }
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v95 = HIBYTE(v392);
      v96 = &v391;
      if (v392 < 0)
      {
        v96 = v391;
        v95 = v392;
      }
      *(_QWORD *)&v394[16] = v96;
      *(_QWORD *)&v394[24] = v95;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v97 = sub_2241471F8();
        v98 = v97[2];
        if (!v98)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v98 = v97[2];
        }
        v99 = *(_QWORD *)(v98 + 64);
        v100 = (std::mutex *)(v99 + 32);
        std::mutex::lock((std::mutex *)(v99 + 32));
        v102 = *(_QWORD *)(v99 + 96);
        v101 = *(_QWORD *)(v99 + 104);
        std::mutex::unlock(v100);
        if (v102 != v101)
        {
          v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v104 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v105 = (v103 & 0x80u) == 0 ? &__p : (std::string *)v104;
          v106 = (v103 & 0x80u) == 0 ? v103 : *((_QWORD *)&v104 + 1);
          v107 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v105, v106);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0CEB8((double *)&qword_255788F20, v107, a1 + 1, "accumulated_cluster_created");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v108 = __p.__r_.__value_.__l.__size_;
      if (v108 >= 0x11)
      {
        v109 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v110 = v109->__r_.__value_.__r.__words[0];
        v111 = v109->__r_.__value_.__l.__size_;
        v112 = v109->__r_.__value_.__s.__data_[16];
        if (v110 == 0x6365722E64337663 && v111 == 0x73746174532E6E6FLL && v112 == 46)
        {
          v115 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = &__p;
          else
            v116 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v117 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v115, v116, v117, a1 + 1, (uint64_t)"accumulated_cluster_created", 27);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v118 = HIBYTE(v392);
      v119 = &v391;
      if (v392 < 0)
      {
        v119 = v391;
        v118 = v392;
      }
      *(_QWORD *)&v394[16] = v119;
      *(_QWORD *)&v394[24] = v118;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v120 = sub_2241471F8();
        v121 = v120[2];
        if (!v121)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v121 = v120[2];
        }
        v122 = *(_QWORD *)(v121 + 64);
        v123 = (std::mutex *)(v122 + 32);
        std::mutex::lock((std::mutex *)(v122 + 32));
        v125 = *(_QWORD *)(v122 + 96);
        v124 = *(_QWORD *)(v122 + 104);
        std::mutex::unlock(v123);
        if (v125 != v124)
        {
          v126 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v127 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v128 = (v126 & 0x80u) == 0 ? &__p : (std::string *)v127;
          v129 = (v126 & 0x80u) == 0 ? v126 : *((_QWORD *)&v127 + 1);
          v130 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v128, v129);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0CEB8((double *)&qword_255788F20, v130, a1 + 2, "accumulated_cluster_deleted");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v131 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v131 = __p.__r_.__value_.__l.__size_;
      if (v131 >= 0x11)
      {
        v132 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v133 = v132->__r_.__value_.__r.__words[0];
        v134 = v132->__r_.__value_.__l.__size_;
        v135 = v132->__r_.__value_.__s.__data_[16];
        if (v133 == 0x6365722E64337663 && v134 == 0x73746174532E6E6FLL && v135 == 46)
        {
          v138 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v139 = &__p;
          else
            v139 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v140 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v138, v139, v140, a1 + 2, (uint64_t)"accumulated_cluster_deleted", 27);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v141 = HIBYTE(v392);
      v142 = &v391;
      if (v392 < 0)
      {
        v142 = v391;
        v141 = v392;
      }
      *(_QWORD *)&v394[16] = v142;
      *(_QWORD *)&v394[24] = v141;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v143 = sub_2241471F8();
        v144 = v143[2];
        if (!v144)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v144 = v143[2];
        }
        v145 = *(_QWORD *)(v144 + 64);
        v146 = (std::mutex *)(v145 + 32);
        std::mutex::lock((std::mutex *)(v145 + 32));
        v148 = *(_QWORD *)(v145 + 96);
        v147 = *(_QWORD *)(v145 + 104);
        std::mutex::unlock(v146);
        if (v148 != v147)
        {
          v149 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v150 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v151 = (v149 & 0x80u) == 0 ? &__p : (std::string *)v150;
          v152 = (v149 & 0x80u) == 0 ? v149 : *((_QWORD *)&v150 + 1);
          v153 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v151, v152);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0CFF4(v153, a1 + 3, "kf_add_total");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v154 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v154 = __p.__r_.__value_.__l.__size_;
      if (v154 >= 0x11)
      {
        v155 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v155 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v156 = v155->__r_.__value_.__r.__words[0];
        v157 = v155->__r_.__value_.__l.__size_;
        v158 = v155->__r_.__value_.__s.__data_[16];
        if (v156 == 0x6365722E64337663 && v157 == 0x73746174532E6E6FLL && v158 == 46)
        {
          v161 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v162 = &__p;
          else
            v162 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v163 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v163 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v161, v162, v163, a1 + 3, (uint64_t)"kf_add_total", 12);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v164 = HIBYTE(v392);
      v165 = &v391;
      if (v392 < 0)
      {
        v165 = v391;
        v164 = v392;
      }
      *(_QWORD *)&v394[16] = v165;
      *(_QWORD *)&v394[24] = v164;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v166 = sub_2241471F8();
        v167 = v166[2];
        if (!v167)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v167 = v166[2];
        }
        v168 = *(_QWORD *)(v167 + 64);
        v169 = (std::mutex *)(v168 + 32);
        std::mutex::lock((std::mutex *)(v168 + 32));
        v171 = *(_QWORD *)(v168 + 96);
        v170 = *(_QWORD *)(v168 + 104);
        std::mutex::unlock(v169);
        if (v171 != v170)
        {
          v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v173 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v174 = (v172 & 0x80u) == 0 ? &__p : (std::string *)v173;
          v175 = (v172 & 0x80u) == 0 ? v172 : *((_QWORD *)&v173 + 1);
          v176 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v174, v175);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D13C(v176, a1 + 4, "kf_delete_total");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v177 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v177 = __p.__r_.__value_.__l.__size_;
      if (v177 >= 0x11)
      {
        v178 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v178 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v179 = v178->__r_.__value_.__r.__words[0];
        v180 = v178->__r_.__value_.__l.__size_;
        v181 = v178->__r_.__value_.__s.__data_[16];
        if (v179 == 0x6365722E64337663 && v180 == 0x73746174532E6E6FLL && v181 == 46)
        {
          v184 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v185 = &__p;
          else
            v185 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v186 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v186 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v184, v185, v186, a1 + 4, (uint64_t)"kf_delete_total", 15);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v187 = HIBYTE(v392);
      v188 = &v391;
      if (v392 < 0)
      {
        v188 = v391;
        v187 = v392;
      }
      *(_QWORD *)&v394[16] = v188;
      *(_QWORD *)&v394[24] = v187;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v189 = sub_2241471F8();
        v190 = v189[2];
        if (!v190)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v190 = v189[2];
        }
        v191 = *(_QWORD *)(v190 + 64);
        v192 = (std::mutex *)(v191 + 32);
        std::mutex::lock((std::mutex *)(v191 + 32));
        v194 = *(_QWORD *)(v191 + 96);
        v193 = *(_QWORD *)(v191 + 104);
        std::mutex::unlock(v192);
        if (v194 != v193)
        {
          v195 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v196 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v197 = (v195 & 0x80u) == 0 ? &__p : (std::string *)v196;
          v198 = (v195 & 0x80u) == 0 ? v195 : *((_QWORD *)&v196 + 1);
          v199 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v197, v198);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D284(v199, v51);
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v200 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v200 = __p.__r_.__value_.__l.__size_;
      if (v200 >= 0x11)
      {
        v201 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v201 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v202 = v201->__r_.__value_.__r.__words[0];
        v203 = v201->__r_.__value_.__l.__size_;
        v204 = v201->__r_.__value_.__s.__data_[16];
        if (v202 == 0x6365722E64337663 && v203 == 0x73746174532E6E6FLL && v204 == 46)
        {
          v207 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v208 = &__p;
          else
            v208 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v209 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v209 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v207, v208, v209, v51, (uint64_t)"kf_add_by_cluster", 17);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v210 = HIBYTE(v392);
      v211 = &v391;
      if (v392 < 0)
      {
        v211 = v391;
        v210 = v392;
      }
      *(_QWORD *)&v394[16] = v211;
      *(_QWORD *)&v394[24] = v210;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v212 = sub_2241471F8();
        v213 = v212[2];
        if (!v213)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v213 = v212[2];
        }
        v214 = *(_QWORD *)(v213 + 64);
        v215 = (std::mutex *)(v214 + 32);
        std::mutex::lock((std::mutex *)(v214 + 32));
        v217 = *(_QWORD *)(v214 + 96);
        v216 = *(_QWORD *)(v214 + 104);
        std::mutex::unlock(v215);
        if (v217 != v216)
        {
          v218 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v219 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v220 = (v218 & 0x80u) == 0 ? &__p : (std::string *)v219;
          v221 = (v218 & 0x80u) == 0 ? v218 : *((_QWORD *)&v219 + 1);
          v222 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v220, v221);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v222 + 24))(v222))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D354(v222, v52, "kf_delete_by_cluster");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v223 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v223 = __p.__r_.__value_.__l.__size_;
      if (v223 >= 0x11)
      {
        v224 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v224 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v225 = v224->__r_.__value_.__r.__words[0];
        v226 = v224->__r_.__value_.__l.__size_;
        v227 = v224->__r_.__value_.__s.__data_[16];
        if (v225 == 0x6365722E64337663 && v226 == 0x73746174532E6E6FLL && v227 == 46)
        {
          v230 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v231 = &__p;
          else
            v231 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v232 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v232 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v230, v231, v232, v52, (uint64_t)"kf_delete_by_cluster", 20);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v233 = HIBYTE(v392);
      v234 = &v391;
      if (v392 < 0)
      {
        v234 = v391;
        v233 = v392;
      }
      *(_QWORD *)&v394[16] = v234;
      *(_QWORD *)&v394[24] = v233;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v235 = sub_2241471F8();
        v236 = v235[2];
        if (!v236)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v236 = v235[2];
        }
        v237 = *(_QWORD *)(v236 + 64);
        v238 = (std::mutex *)(v237 + 32);
        std::mutex::lock((std::mutex *)(v237 + 32));
        v240 = *(_QWORD *)(v237 + 96);
        v239 = *(_QWORD *)(v237 + 104);
        std::mutex::unlock(v238);
        if (v240 != v239)
        {
          v241 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v242 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v243 = (v241 & 0x80u) == 0 ? &__p : (std::string *)v242;
          v244 = (v241 & 0x80u) == 0 ? v241 : *((_QWORD *)&v242 + 1);
          v245 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v243, v244);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v245 + 24))(v245))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D354(v245, a1 + 7, "keyframes_no_room_id");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v246 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v246 = __p.__r_.__value_.__l.__size_;
      if (v246 >= 0x11)
      {
        v247 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v248 = v247->__r_.__value_.__r.__words[0];
        v249 = v247->__r_.__value_.__l.__size_;
        v250 = v247->__r_.__value_.__s.__data_[16];
        if (v248 == 0x6365722E64337663 && v249 == 0x73746174532E6E6FLL && v250 == 46)
        {
          v253 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v254 = &__p;
          else
            v254 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v255 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v255 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v253, v254, v255, a1 + 7, (uint64_t)"keyframes_no_room_id", 20);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v256 = HIBYTE(v392);
      v257 = &v391;
      if (v392 < 0)
      {
        v257 = v391;
        v256 = v392;
      }
      *(_QWORD *)&v394[16] = v257;
      *(_QWORD *)&v394[24] = v256;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v258 = sub_2241471F8();
        v259 = v258[2];
        if (!v259)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v259 = v258[2];
        }
        v260 = *(_QWORD *)(v259 + 64);
        v261 = (std::mutex *)(v260 + 32);
        std::mutex::lock((std::mutex *)(v260 + 32));
        v263 = *(_QWORD *)(v260 + 96);
        v262 = *(_QWORD *)(v260 + 104);
        std::mutex::unlock(v261);
        if (v263 != v262)
        {
          v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v265 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v266 = (v264 & 0x80u) == 0 ? &__p : (std::string *)v265;
          v267 = (v264 & 0x80u) == 0 ? v264 : *((_QWORD *)&v265 + 1);
          v268 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v266, v267);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v268 + 24))(v268))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D13C(v268, v47, "cluster_created");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v269 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v269 = __p.__r_.__value_.__l.__size_;
      if (v269 >= 0x11)
      {
        v270 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v270 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v271 = v270->__r_.__value_.__r.__words[0];
        v272 = v270->__r_.__value_.__l.__size_;
        v273 = v270->__r_.__value_.__s.__data_[16];
        if (v271 == 0x6365722E64337663 && v272 == 0x73746174532E6E6FLL && v273 == 46)
        {
          v276 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v277 = &__p;
          else
            v277 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v278 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v278 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v276, v277, v278, v47, (uint64_t)"cluster_created", 15);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)v394 = "cv3d.recon.";
      *(_QWORD *)&v394[8] = 11;
      v279 = HIBYTE(v392);
      v280 = &v391;
      if (v392 < 0)
      {
        v280 = v391;
        v279 = v392;
      }
      *(_QWORD *)&v394[16] = v280;
      *(_QWORD *)&v394[24] = v279;
      sub_2231A9820((uint64_t)v394, (uint64_t)&v394[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v281 = sub_2241471F8();
        v282 = v281[2];
        if (!v282)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v282 = v281[2];
        }
        v283 = *(_QWORD *)(v282 + 64);
        v284 = (std::mutex *)(v283 + 32);
        std::mutex::lock((std::mutex *)(v283 + 32));
        v286 = *(_QWORD *)(v283 + 96);
        v285 = *(_QWORD *)(v283 + 104);
        std::mutex::unlock(v284);
        if (v286 != v285)
        {
          v287 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v288 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v289 = (v287 & 0x80u) == 0 ? &__p : (std::string *)v288;
          v290 = (v287 & 0x80u) == 0 ? v287 : *((_QWORD *)&v288 + 1);
          v291 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v289, v290);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v291 + 24))(v291))
          {
            memset(v394, 0, 32);
            *(_DWORD *)&v394[32] = 728325608;
            kdebug_trace();
            sub_223C0D13C(v291, v378, "cluster_deleted");
            kdebug_trace();
          }
        }
      }
      memset(v394, 0, 32);
      *(_DWORD *)&v394[32] = 728325624;
      kdebug_trace();
      v292 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v292 = __p.__r_.__value_.__l.__size_;
      if (v292 >= 0x11)
      {
        v293 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v293 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v294 = v293->__r_.__value_.__r.__words[0];
        v295 = v293->__r_.__value_.__l.__size_;
        v296 = v293->__r_.__value_.__s.__data_[16];
        if (v294 == 0x6365722E64337663 && v295 == 0x73746174532E6E6FLL && v296 == 46)
        {
          v299 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v300 = &__p;
          else
            v300 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v301 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v301 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v299, v300, v301, v378, (uint64_t)"cluster_deleted", 15);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_471:
  sub_223C0D49C(&v389);
  if (**(int **)(v389 + 56) > 3)
    goto LABEL_559;
  v302 = *(unsigned __int8 *)(v389 + 72);
  v303 = sub_22322F254(v389, "OSLogSurrogateAppender", 1, 0);
  v304 = v303;
  if (!v302 && !v303)
    goto LABEL_559;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v389;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v382 = 3;
  v383 = "unknown file";
  v384 = 191;
  v386 = 0;
  v387 = 0;
  v385 = "unknown function";
  v305 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v306 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
  v379 = v306;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v306 = *(const char **)(v305 + 16);
    v307 = *(_QWORD *)(v305 + 24);
    v309 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v309 & 1) != 0)
      goto LABEL_478;
  }
  else
  {
    v307 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v308 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v308 & 1) != 0)
      goto LABEL_478;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v394);
    sub_223199C58("com.apple.cv3d", (unint64_t)v394, byte_255788F40);
    if (v394[24] && (v394[23] & 0x80000000) != 0)
      operator delete(*(void **)v394);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_478:
  if (byte_255788F40[23] >= 0)
    v310 = byte_255788F40;
  else
    v310 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v311 = byte_255788F40[23];
  else
    v311 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v394 = os_log_create(v310, v306);
  v312 = &v394[8];
  if (v311 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v311 >= 0x17)
  {
    v313 = v302;
    v314 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v311 | 7) != 0x17)
      v314 = v311 | 7;
    v315 = v314 + 1;
    v312 = operator new(v314 + 1);
    *(_QWORD *)&v394[16] = v311;
    *(_QWORD *)&v394[24] = v315 | 0x8000000000000000;
    *(_QWORD *)&v394[8] = v312;
    v302 = v313;
    goto LABEL_491;
  }
  v394[31] = v311;
  if (v311)
LABEL_491:
    memmove(v312, v310, v311);
  v312[v311] = 0;
  v394[32] = 1;
  v316 = &v394[40];
  if (v307 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v307 >= 0x17)
  {
    v318 = (v307 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v307 | 7) != 0x17)
      v318 = v307 | 7;
    v319 = v318 + 1;
    v316 = operator new(v318 + 1);
    *(_QWORD *)&v394[48] = v307;
    *(_QWORD *)&v394[56] = v319 | 0x8000000000000000;
    *(_QWORD *)&v394[40] = v316;
  }
  else
  {
    v394[63] = v307;
    if (!v307)
    {
      v394[40] = 0;
      LOBYTE(v395) = 1;
      v317 = *(NSObject **)v394;
      if ((v394[63] & 0x80000000) == 0)
        goto LABEL_496;
      goto LABEL_502;
    }
  }
  memmove(v316, v306, v307);
  v316[v307] = 0;
  LOBYTE(v395) = 1;
  v317 = *(NSObject **)v394;
  if ((v394[63] & 0x80000000) == 0)
  {
LABEL_496:
    if (!v394[32])
      goto LABEL_505;
LABEL_503:
    if ((v394[31] & 0x80000000) != 0)
      operator delete(*(void **)&v394[8]);
    goto LABEL_505;
  }
LABEL_502:
  operator delete(*(void **)&v394[40]);
  if (v394[32])
    goto LABEL_503;
LABEL_505:
  if (*(_QWORD *)v394)
    os_release(*(void **)v394);
  if (v304 && *(_QWORD *)(v304 + 24))
  {
    v320 = _os_log_pack_size();
    v321 = (std::__shared_weak_count_vtbl *)operator new(v320, (std::align_val_t)8uLL);
    v322 = (std::__shared_weak_count *)operator new();
    v323 = v322;
    v322->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v322->__shared_owners_;
    v322->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v322->__shared_weak_owners_ = 0;
    v322[1].__vftable = v321;
    *(_QWORD *)v394 = v321;
    *(_QWORD *)&v394[8] = v321;
    *(_QWORD *)&v394[16] = v322;
    do
      v325 = __ldxr(p_shared_owners);
    while (__stxr(v325 + 1, p_shared_owners));
    memset(&v394[24], 0, 24);
    do
      v326 = __ldaxr(p_shared_owners);
    while (__stlxr(v326 - 1, p_shared_owners));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v323);
    }
    v327 = *(_QWORD *)v394;
    v328 = _os_log_pack_fill();
    v329 = *a1;
    v330 = a1[1];
    v331 = a1[2];
    v332 = a1[3];
    v333 = a1[4];
    v334 = a1[5];
    v335 = a1[6];
    v336 = a1[7];
    *(_DWORD *)v328 = 134219776;
    *(_QWORD *)(v328 + 4) = v329;
    *(_WORD *)(v328 + 12) = 2048;
    *(_QWORD *)(v328 + 14) = v330;
    *(_WORD *)(v328 + 22) = 2048;
    *(_QWORD *)(v328 + 24) = v331;
    *(_WORD *)(v328 + 32) = 2048;
    *(_QWORD *)(v328 + 34) = v332;
    *(_WORD *)(v328 + 42) = 2048;
    *(_QWORD *)(v328 + 44) = v333;
    *(_WORD *)(v328 + 52) = 2048;
    *(_QWORD *)(v328 + 54) = v334;
    *(_WORD *)(v328 + 62) = 2048;
    *(_QWORD *)(v328 + 64) = v335;
    *(_WORD *)(v328 + 72) = 2048;
    *(_QWORD *)(v328 + 74) = v336;
    v337 = operator new();
    v338 = *(unsigned __int8 *)(v305 + 39);
    v339 = v379;
    if ((v338 & 0x80u) != 0)
    {
      v339 = *(const char **)(v305 + 16);
      v338 = *(_QWORD *)(v305 + 24);
    }
    *(_QWORD *)v337 = v327;
    *(_OWORD *)(v337 + 8) = *(_OWORD *)&v394[8];
    *(_QWORD *)&v394[8] = 0;
    *(_QWORD *)&v394[16] = 0;
    *(_OWORD *)(v337 + 24) = *(_OWORD *)&v394[24];
    *(_QWORD *)&v394[24] = 0;
    *(_QWORD *)&v394[32] = 0;
    *(_QWORD *)(v337 + 40) = v339;
    *(_QWORD *)(v337 + 48) = v338;
    *(_BYTE *)(v337 + 56) = 1;
    *(_QWORD *)&v393 = 0;
    v390.__r_.__value_.__r.__words[0] = v337;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v304 + 24) + 40))(*(_QWORD *)(v304 + 24), &v390);
    v340 = v390.__r_.__value_.__r.__words[0];
    v390.__r_.__value_.__r.__words[0] = 0;
    if (v340)
    {
      v341 = *(std::__shared_weak_count **)(v340 + 32);
      if (v341)
      {
        v342 = (unint64_t *)&v341->__shared_owners_;
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 - 1, v342));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      v344 = *(std::__shared_weak_count **)(v340 + 16);
      if (v344)
      {
        v345 = (unint64_t *)&v344->__shared_owners_;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
          std::__shared_weak_count::__release_weak(v344);
        }
      }
      MEMORY[0x227684CE8](v340, 0x10F0C40B62ED6C6);
      v347 = v393;
      *(_QWORD *)&v393 = 0;
      if (v347)
      {
        v348 = *(std::__shared_weak_count **)(v347 + 32);
        if (v348)
        {
          v349 = (unint64_t *)&v348->__shared_owners_;
          do
            v350 = __ldaxr(v349);
          while (__stlxr(v350 - 1, v349));
          if (!v350)
          {
            ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
            std::__shared_weak_count::__release_weak(v348);
          }
        }
        v351 = *(std::__shared_weak_count **)(v347 + 16);
        if (v351)
        {
          v352 = (unint64_t *)&v351->__shared_owners_;
          do
            v353 = __ldaxr(v352);
          while (__stlxr(v353 - 1, v352));
          if (!v353)
          {
            ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
            std::__shared_weak_count::__release_weak(v351);
          }
        }
        MEMORY[0x227684CE8](v347, 0x10F0C40B62ED6C6);
      }
    }
    v354 = *(std::__shared_weak_count **)&v394[32];
    if (*(_QWORD *)&v394[32])
    {
      v355 = (unint64_t *)(*(_QWORD *)&v394[32] + 8);
      do
        v356 = __ldaxr(v355);
      while (__stlxr(v356 - 1, v355));
      if (!v356)
      {
        ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
        std::__shared_weak_count::__release_weak(v354);
      }
    }
    v357 = *(std::__shared_weak_count **)&v394[16];
    if (*(_QWORD *)&v394[16])
    {
      v358 = (unint64_t *)(*(_QWORD *)&v394[16] + 8);
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
  }
  else
  {
    os_log_type_enabled(v317, OS_LOG_TYPE_INFO);
    v360 = *a1;
    v361 = a1[1];
    v362 = a1[2];
    v363 = a1[3];
    v364 = a1[4];
    v365 = a1[5];
    v366 = a1[6];
    v367 = a1[7];
    *(_DWORD *)v394 = 134219776;
    *(_QWORD *)&v394[4] = v360;
    *(_WORD *)&v394[12] = 2048;
    *(_QWORD *)&v394[14] = v361;
    *(_WORD *)&v394[22] = 2048;
    *(_QWORD *)&v394[24] = v362;
    *(_WORD *)&v394[32] = 2048;
    *(_QWORD *)&v394[34] = v363;
    *(_WORD *)&v394[42] = 2048;
    *(_QWORD *)&v394[44] = v364;
    *(_WORD *)&v394[52] = 2048;
    *(_QWORD *)&v394[54] = v365;
    *(_WORD *)&v394[62] = 2048;
    v395 = v366;
    v396 = 2048;
    v397 = v367;
    v368 = (void *)_os_log_send_and_compose_impl();
    if (v368)
      free(v368);
  }
  if (v302)
  {
    sub_22322C138((uint64_t)&__p, "VLM:RB CT:%llu ACC:%llu ACD:%llu AT:%llu DT:%llu AC:%llu DC:%llu KI:%llu", *a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v369 = v387;
  if (v387)
  {
    v370 = (unint64_t *)&v387->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
LABEL_559:
  if (SHIBYTE(v392) < 0)
    operator delete(v391);
}

void sub_223C0C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;

  if (*(_BYTE *)(v46 - 184) && *(char *)(v46 - 185) < 0)
    operator delete(*(void **)(v46 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a20);
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223C0CD70(uint64_t a1, uint64_t *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2238C677C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223C0CE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0CEB8(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C0CFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0CFF4(uint64_t a1, uint64_t *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2238C677C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223C0D120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0D13C(uint64_t a1, uint64_t *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2238C677C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223C0D268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0D284(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[18];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 17;
    strcpy(__p, "kf_add_by_cluster");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2238C677C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223C0D338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0D354(uint64_t a1, uint64_t *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2238C677C((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223C0D480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C0D49C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCF78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCF78))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCF70);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCF78);
  }
  *a1 = qword_2540CCF70;
}

void sub_223C0D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCF78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCF78);
  _Unwind_Resume(a1);
}

void sub_223C0D590(unsigned __int8 **a1, unsigned __int8 *a2, int *a3)
{
  unint64_t v5;
  char v6;
  int v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  void **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  void **v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  int8x16_t v76;
  int8x16_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  __float2 v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  std::string *v90;
  uint64_t v91;
  const char *v92;
  size_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  NSObject *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  unsigned __int8 **v109;
  void *v110;
  _QWORD *v111;
  size_t v112;
  size_t v113;
  float *p_dst;
  int v115;
  int v116;
  void *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  size_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char *v130;
  std::string::size_type v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::string::size_type v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::string::size_type v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void **v170;
  int v171;
  int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  int8x16_t v178;
  int8x16_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  __float2 v185;
  float32x4_t v186;
  float32x4_t v187;
  int8x16_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  std::string *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  unsigned __int8 *v197;
  int v198;
  unsigned __int8 *v199;
  float v200;
  unsigned __int8 *v201;
  unint64_t v202;
  const char *v203;
  unint64_t v204;
  char *__sa[2];
  const char *__s;
  float __sb;
  unsigned __int8 **v208;
  int8x16_t v209;
  void *__p[2];
  __int128 v211;
  const char *v212;
  int v213;
  const char *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  std::string v217;
  void *v218[4];
  void *v219[2];
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  char v223;
  const char *v224[2];
  std::string v225;
  __int128 v226;
  char *v227;
  std::string v228;
  char *v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  __int128 v232;
  float *__dst;
  __int128 v234;
  _BYTE v235[70];
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)&v235[24] = 0;
  sub_22319B83C((uint64_t)__p, (uint64_t)v235, a2);
  if (*(_DWORD *)&v235[24] == -1)
    sub_22316DD70();
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
  ((void (*)(void **__return_ptr, std::string *, _BYTE *))off_24EC60BB0[*(unsigned int *)&v235[24]])(__p, &v225, v235);
  if (*(_DWORD *)&v235[24] != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60B38[*(unsigned int *)&v235[24]])(&v225, v235);
  v5 = BYTE7(v211);
  v6 = BYTE7(v211);
  if (SBYTE7(v211) < 0)
    v5 = (unint64_t)__p[1];
  if (v5 >= 4)
    v5 = 4;
  v220 = v211;
  *(_OWORD *)v219 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v211 = 0;
  if ((v6 & 0x80000000) == 0)
  {
    HIBYTE(v220) = v5;
    *((_BYTE *)v219 + v5) = 0;
    if ((SBYTE7(v211) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v219[1] = (void *)v5;
  *((_BYTE *)v219[0] + v5) = 0;
  if (SBYTE7(v211) < 0)
LABEL_10:
    operator delete(__p[0]);
LABEL_11:
  v7 = SHIBYTE(v220);
  if (v220 >= 0)
    v8 = HIBYTE(v220);
  else
    v8 = (size_t)v219[1];
  v9 = v8 + 19;
  if (v8 + 19 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    v218[1] = (void *)(v8 + 19);
    v218[2] = (void *)(v12 | 0x8000000000000000);
    v218[0] = v13;
    *(_DWORD *)((char *)v13 + 15) = 776160046;
    *v13 = *(_OWORD *)"Stats.KFCluster.CC.";
    v10 = (char *)v13 + 19;
    goto LABEL_21;
  }
  v218[2] = 0;
  HIBYTE(v218[2]) = v8 + 19;
  qmemcpy(v218, "Stats.KFCluster.CC.", 19);
  v10 = (char *)&v218[2] + 3;
  if (v8)
  {
LABEL_21:
    if (v7 >= 0)
      v14 = v219;
    else
      v14 = (void **)v219[0];
    memmove(v10, v14, v8);
  }
  v10[v8] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v15 = sub_2241471F8();
    v16 = v15[2];
    if (!v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v15[2];
    }
    v17 = *(_QWORD *)(v16 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      *(_QWORD *)v235 = "cv3d.recon.";
      *(_QWORD *)&v235[8] = 11;
      v21 = (void *)HIBYTE(v218[2]);
      v22 = v218;
      if (SHIBYTE(v218[2]) < 0)
      {
        v22 = (void **)v218[0];
        v21 = v218[1];
      }
      *(_QWORD *)&v235[16] = v22;
      *(_QWORD *)&v235[24] = v21;
      sub_2231A9820((uint64_t)v235, (uint64_t)&v235[32], 0, 0, &v217);
      sub_2241471F8();
      v23 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23))
        goto LABEL_120;
      *(_OWORD *)__p = 0u;
      v211 = 0u;
      LODWORD(v212) = 728325616;
      kdebug_trace();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23)
        || (*(_QWORD *)&v221 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0),
            *((_QWORD *)&v221 + 1) = 2,
            v24 = sub_2241471F8(),
            !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23)))
      {
LABEL_119:
        kdebug_trace();
LABEL_120:
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v217.__r_.__value_.__l.__data_);
        goto LABEL_122;
      }
      *(_QWORD *)&v235[8] = 0;
      *(_QWORD *)&v235[16] = 0;
      *(_QWORD *)v235 = &v235[8];
      sub_2245314F4(v235, &v225);
      v222 = *(_OWORD *)&v225.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)v235, *(char **)&v235[8]);
      sub_2240043CC(&v225);
      v235[23] = 6;
      strcpy(v235, "bundle");
      sub_223A9EC04(a3);
      sub_224527BAC((uint64_t)v235, (CFStringRef *)&__dst);
      sub_2231AEDB8((uint64_t)&v222, __dst, (uint64_t)&v228);
      v25 = (std::__shared_weak_count *)v234;
      if ((_QWORD)v234)
      {
        v26 = (unint64_t *)(v234 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      if ((v235[23] & 0x80000000) != 0)
        operator delete(*(void **)v235);
      v235[23] = 11;
      strcpy(v235, "system time");
      sub_224527BAC((uint64_t)v235, (CFStringRef *)&v228);
      sub_2231AEDB8((uint64_t)&v222, v228.__r_.__value_.__l.__data_, (uint64_t)&v225);
      size = (std::__shared_weak_count *)v228.__r_.__value_.__l.__size_;
      if (v228.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(v228.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((v235[23] & 0x80000000) != 0)
        operator delete(*(void **)v235);
      *((_BYTE *)&v228.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v228, "rawframe");
      v31 = *((unsigned __int8 *)a1 + 2016);
      *(_DWORD *)&v235[24] = 0;
      if (v31)
        v32 = "true";
      else
        v32 = "false";
      v224[0] = v32;
      sub_2231C06BC(v235, v224);
      if (*(_DWORD *)&v235[24] == -1)
        sub_22316DD70();
      v224[0] = &v223;
      ((void (*)(float **__return_ptr, const char **, _BYTE *))off_24EC60BB0[*(unsigned int *)&v235[24]])(&__dst, v224, v235);
      if (*(_DWORD *)&v235[24] != -1)
        ((void (*)(const char **, _BYTE *))off_24EC60B38[*(unsigned int *)&v235[24]])(v224, v235);
      sub_224527BAC((uint64_t)&v228, (CFStringRef *)v235);
      sub_2231AEDB8((uint64_t)&v222, *(const void **)v235, (uint64_t)&__dst);
      v33 = *(std::__shared_weak_count **)&v235[8];
      if (*(_QWORD *)&v235[8])
      {
        v34 = (unint64_t *)(*(_QWORD *)&v235[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v234) < 0)
        operator delete(__dst);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v228.__r_.__value_.__l.__data_);
      v235[23] = 13;
      strcpy(v235, "keyframe list");
      sub_223C1DAA8(a1 + 21, &v228);
      sub_224527BAC((uint64_t)v235, (CFStringRef *)&__dst);
      sub_2231AEDB8((uint64_t)&v222, __dst, (uint64_t)&v228);
      v36 = (std::__shared_weak_count *)v234;
      if ((_QWORD)v234)
      {
        v37 = (unint64_t *)(v234 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v228.__r_.__value_.__l.__data_);
        if ((v235[23] & 0x80000000) == 0)
        {
LABEL_73:
          if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_74;
LABEL_289:
          operator delete(v225.__r_.__value_.__l.__data_);
LABEL_74:
          v225.__r_.__value_.__s.__data_[0] = 0;
          LOBYTE(v226) = 0;
          sub_2231AD9F0((uint64_t)&v222, (__int128 *)&v225, &v221, &v231);
          if ((_BYTE)v226 && SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
          if (*((_QWORD *)&v222 + 1))
          {
            v40 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v42 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
          v43 = *v42;
          v44 = (std::__shared_weak_count *)v42[1];
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldxr(p_shared_owners);
            while (__stxr(v46 + 1, p_shared_owners));
          }
          v47 = v232;
          v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
          *(_OWORD *)&v228.__r_.__value_.__r.__words[1] = v232;
          v232 = 0uLL;
          *(_QWORD *)v235 = v43;
          *(_QWORD *)&v235[8] = v44;
          if (v44)
          {
            v48 = (unint64_t *)&v44->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          *(_QWORD *)&v235[16] = &off_24EC6A3B8;
          *(_OWORD *)&v235[24] = v47;
          if (*((_QWORD *)&v47 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          (*(void (**)(uint64_t *, _BYTE *))(*v24 + 16))(v24, v235);
          v52 = *(std::__shared_weak_count **)&v235[32];
          if (*(_QWORD *)&v235[32])
          {
            v53 = (unint64_t *)(*(_QWORD *)&v235[32] + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v55 = *(std::__shared_weak_count **)&v235[8];
          if (*(_QWORD *)&v235[8])
          {
            v56 = (unint64_t *)(*(_QWORD *)&v235[8] + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v58 = (std::__shared_weak_count *)v228.__r_.__value_.__r.__words[2];
          if (v228.__r_.__value_.__r.__words[2])
          {
            v59 = (unint64_t *)(v228.__r_.__value_.__r.__words[2] + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (v44)
          {
            v61 = (unint64_t *)&v44->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
          if (*((_QWORD *)&v232 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          goto LABEL_119;
        }
      }
      else if ((v235[23] & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete(*(void **)v235);
      if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
      goto LABEL_289;
    }
  }
LABEL_122:
  sub_223C0F3E0(&v222);
  if (**(int **)(v222 + 56) > 3
    || (v66 = *(unsigned __int8 *)(v222 + 72), v67 = sub_22322F254(v222, "OSLogSurrogateAppender", 1, 0), !v66)
    && !v67)
  {
LABEL_281:
    if ((SHIBYTE(v218[2]) & 0x80000000) == 0)
      goto LABEL_282;
    goto LABEL_285;
  }
  v204 = v67;
  __p[0] = &v222;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)&v211 = std::chrono::system_clock::now();
  DWORD2(v211) = 3;
  v212 = "unknown file";
  v213 = 218;
  v215 = 0;
  v216 = 0;
  v214 = "unknown function";
  v68 = v219;
  if (v220 < 0)
    v68 = (void **)v219[0];
  v203 = (const char *)v68;
  v69 = a1[17];
  v70 = a1[9];
  v71 = a1[10];
  v72 = a1;
  v73 = a1[13];
  v74 = v72[12];
  v208 = v72;
  v75 = (unsigned __int8 *)v72 + 4;
  memset(v235, 0, 24);
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = (unint64_t)v72 + 4;
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
  v228.__r_.__value_.__l.__size_ = 0;
  sub_2236763FC((float32x2_t **)&v225, (float **)&v228);
  v76 = *(int8x16_t *)v235;
  v77 = vextq_s8(v76, v76, 8uLL);
  v78 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235, 1), *(float32x2_t *)v235, 1), *(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8).f32[0];
  if (v78 >= 0.0061)
  {
    v82 = sqrtf(v78);
    *(_OWORD *)__sa = *(_OWORD *)v235;
    v200 = v78;
    v83 = __sincosf_stret(v82);
    v78 = v200;
    v76 = *(int8x16_t *)__sa;
    v80 = v83.__sinval / v82;
    v79 = (float)(1.0 / v200) * (float)(1.0 - v83.__cosval);
    *(float *)v77.i32 = (float)(1.0 / v200) * (float)(1.0 - (float)(v83.__sinval / v82));
    if (v200 >= 0.00000149)
    {
LABEL_129:
      if (v78 <= 9.0)
        v81 = (float)((float)(v79 * 0.5) - *(float *)v77.i32) / v80;
      else
        v81 = (float)(v79 + (float)(v80 * -0.5)) / (float)(v78 * v79);
      goto LABEL_134;
    }
  }
  else
  {
    v79 = 0.5 - (float)(v78 * (float)((float)(v78 / -720.0) + 0.041667));
    *(float *)v77.i32 = 0.16667 - (float)(v78 * (float)((float)(v78 / -5040.0) + 0.0083333));
    v80 = 1.0 - (float)(v78 * *(float *)v77.i32);
    if (v78 >= 0.00000149)
      goto LABEL_129;
  }
  v81 = (float)(v78 * 0.000033069) + (float)((float)(v78 * 0.0013889) + 0.083333);
LABEL_134:
  v77.i64[0] = *(uint64_t *)((char *)v208 + 52);
  v77.i32[2] = *((_DWORD *)v208 + 15);
  v84 = (float32x4_t)vextq_s8(vextq_s8(v76, v76, 0xCuLL), v76, 8uLL);
  v85 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), v76, 0xCuLL);
  v86 = (int8x16_t)vsubq_f32(vmulq_f32(v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL)), vmulq_f32(v85, (float32x4_t)vextq_s8(vextq_s8(v77, v77, 0xCuLL), v77, 8uLL)));
  v87.i64[0] = 0xBF000000BF000000;
  v87.i64[1] = 0xBF000000BF000000;
  v88 = vaddq_f32(vaddq_f32((float32x4_t)v77, vmulq_f32((float32x4_t)v86, v87)), vmulq_n_f32(vsubq_f32(vmulq_f32(v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), v86, 0xCuLL)), vmulq_f32(v85, (float32x4_t)vextq_s8(vextq_s8(v86, v86, 0xCuLL), v86, 8uLL))), v81));
  *(_DWORD *)&v235[20] = v88.i32[2];
  *(_QWORD *)&v235[12] = v88.i64[0];
  v89 = vabsq_f32(*(float32x4_t *)v235);
  sub_22456D250("(%2.3f,%2.3f,%2.3f,%2.3f,%2.3f,%2.3f)", &v217, vcvtq_f64_f32(*(float32x2_t *)v89.f32), vcvt_hight_f64_f32(v89), vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vabsq_f32(*(float32x4_t *)&v235[16])));
  v201 = v74;
  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &v217;
  else
    v90 = (std::string *)v217.__r_.__value_.__r.__words[0];
  __s = (const char *)v90;
  v91 = *(_QWORD *)__p[0];
  v92 = (const char *)(*(_QWORD *)__p[0] + 16);
  v196 = v92;
  v197 = v75;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v92 = *(const char **)(v91 + 16);
    v93 = *(_QWORD *)(v91 + 24);
    v199 = v69;
    v198 = v66;
    v95 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v95 & 1) != 0)
      goto LABEL_141;
  }
  else
  {
    v93 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    v199 = v69;
    v198 = v66;
    v94 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v94 & 1) != 0)
      goto LABEL_141;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v235);
    sub_223199C58("com.apple.cv3d", (unint64_t)v235, &xmmword_255788F40);
    if (v235[24] && (v235[23] & 0x80000000) != 0)
      operator delete(*(void **)v235);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_141:
  if (byte_255788F57 >= 0)
    v96 = (const char *)&xmmword_255788F40;
  else
    v96 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v97 = byte_255788F57;
  else
    v97 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v235 = os_log_create(v96, v92);
  v98 = &v235[8];
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v97 >= 0x17)
  {
    v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v99 = v97 | 7;
    v100 = v99 + 1;
    v98 = operator new(v99 + 1);
    *(_QWORD *)&v235[16] = v97;
    *(_QWORD *)&v235[24] = v100 | 0x8000000000000000;
    *(_QWORD *)&v235[8] = v98;
    goto LABEL_154;
  }
  v235[31] = v97;
  if (v97)
LABEL_154:
    memmove(v98, v96, v97);
  v98[v97] = 0;
  v235[32] = 1;
  v101 = &v235[40];
  if (v93 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v93 >= 0x17)
  {
    v104 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v104 = v93 | 7;
    v105 = v104 + 1;
    v101 = operator new(v104 + 1);
    *(_QWORD *)&v235[48] = v93;
    *(_QWORD *)&v235[56] = v105 | 0x8000000000000000;
    *(_QWORD *)&v235[40] = v101;
  }
  else
  {
    v235[63] = v93;
    if (!v93)
    {
      v235[40] = 0;
      v235[64] = 1;
      v102 = *(NSObject **)v235;
      if ((v235[63] & 0x80000000) == 0)
        goto LABEL_159;
      goto LABEL_165;
    }
  }
  memmove(v101, v92, v93);
  v101[v93] = 0;
  v235[64] = 1;
  v102 = *(NSObject **)v235;
  if ((v235[63] & 0x80000000) == 0)
  {
LABEL_159:
    v103 = v201;
    if (!v235[32])
      goto LABEL_168;
    goto LABEL_166;
  }
LABEL_165:
  operator delete(*(void **)&v235[40]);
  v103 = v201;
  if (!v235[32])
    goto LABEL_168;
LABEL_166:
  if ((v235[31] & 0x80000000) != 0)
    operator delete(*(void **)&v235[8]);
LABEL_168:
  if (*(_QWORD *)v235)
    os_release(*(void **)v235);
  v106 = 0xEF7BDEF7BDEF7BDFLL * ((v71 - v70) >> 3);
  v107 = 0xCF3CF3CF3CF3CF3DLL * ((v73 - v103) >> 2);
  if (v204 && *(_QWORD *)(v204 + 24))
  {
    v108 = _os_log_pack_size();
    v109 = v208;
    v110 = operator new(v108, (std::align_val_t)8uLL);
    v111 = (_QWORD *)operator new();
    *v111 = &off_24EC1F7F0;
    v111[1] = 0;
    v111[2] = 0;
    v111[3] = v110;
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
    v228.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
    v229 = 0;
    v230 = 0;
    v228.__r_.__value_.__r.__words[2] = (std::string::size_type)v111;
    v112 = strlen(v203);
    if (v112 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v113 = v112;
    v202 = v107;
    if (v112 >= 0x17)
    {
      v119 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v112 | 7) != 0x17)
        v119 = v112 | 7;
      v120 = v119 + 1;
      p_dst = (float *)operator new(v119 + 1);
      *(_QWORD *)&v234 = v113;
      *((_QWORD *)&v234 + 1) = v120 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v234) = v112;
      p_dst = (float *)&__dst;
      if (!v112)
      {
LABEL_182:
        *((_BYTE *)p_dst + v113) = 0;
        v121 = strlen(__s);
        if (v121 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v122 = v121;
        if (v121 >= 0x17)
        {
          v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v121 | 7) != 0x17)
            v124 = v121 | 7;
          v125 = v124 + 1;
          v123 = operator new(v124 + 1);
          *(_QWORD *)&v232 = v122;
          *((_QWORD *)&v232 + 1) = v125 | 0x8000000000000000;
          v231 = v123;
        }
        else
        {
          HIBYTE(v232) = v121;
          v123 = &v231;
          if (!v121)
            goto LABEL_190;
        }
        memcpy(v123, __s, v122);
LABEL_190:
        *((_BYTE *)v123 + v122) = 0;
        *(_QWORD *)&v235[8] = __dst;
        *(_QWORD *)&v235[16] = v234;
        *(_QWORD *)&v235[23] = *(_QWORD *)((char *)&v234 + 7);
        *(_QWORD *)&v235[32] = v231;
        *(_QWORD *)&v235[40] = v232;
        *(_QWORD *)&v235[47] = *(_QWORD *)((char *)&v232 + 7);
        *(_QWORD *)v235 = off_24EC60C58;
        v235[31] = HIBYTE(v234);
        v235[55] = HIBYTE(v232);
        v126 = (char *)operator new(0x50uLL);
        *((_QWORD *)v126 + 3) = off_24EC60C58;
        *((_QWORD *)v126 + 1) = 0;
        *((_QWORD *)v126 + 2) = 0;
        *(_QWORD *)v126 = &off_24EC60C08;
        *((_OWORD *)v126 + 2) = *(_OWORD *)&v235[8];
        *((_QWORD *)v126 + 6) = *(_QWORD *)&v235[24];
        memset(&v235[8], 0, 24);
        *(_OWORD *)(v126 + 56) = *(_OWORD *)&v235[32];
        *((_QWORD *)v126 + 9) = *(_QWORD *)&v235[48];
        memset(&v235[32], 0, 24);
        v127 = v230;
        v229 = v126 + 24;
        v230 = (std::__shared_weak_count *)v126;
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        if ((v235[55] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v235[32]);
          if ((v235[31] & 0x80000000) == 0)
          {
LABEL_197:
            v225 = v228;
            v131 = v228.__r_.__value_.__r.__words[2];
            v130 = v229;
            if (!v228.__r_.__value_.__r.__words[2])
              goto LABEL_203;
            goto LABEL_201;
          }
        }
        else if ((v235[31] & 0x80000000) == 0)
        {
          goto LABEL_197;
        }
        operator delete(*(void **)&v235[8]);
        v225 = v228;
        v131 = v228.__r_.__value_.__r.__words[2];
        v130 = v229;
        if (!v228.__r_.__value_.__r.__words[2])
        {
LABEL_203:
          v134 = v230;
          *(_QWORD *)&v226 = v130;
          *((_QWORD *)&v226 + 1) = v230;
          if (v230)
          {
            v135 = (unint64_t *)&v230->__shared_owners_;
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
            v227 = v130;
            do
              v137 = __ldaxr(v135);
            while (__stlxr(v137 - 1, v135));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          else
          {
            v227 = v130;
          }
          v138 = (std::__shared_weak_count *)v228.__r_.__value_.__r.__words[2];
          if (v228.__r_.__value_.__r.__words[2])
          {
            v139 = (unint64_t *)(v228.__r_.__value_.__r.__words[2] + 8);
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          v141 = v225.__r_.__value_.__r.__words[0];
          if (v227[31] >= 0)
            v142 = v227 + 8;
          else
            v142 = (char *)*((_QWORD *)v227 + 1);
          if (v227[55] >= 0)
            v143 = v227 + 32;
          else
            v143 = (char *)*((_QWORD *)v227 + 4);
          v144 = _os_log_pack_fill();
          v145 = *((unsigned __int8 *)v208 + 1);
          v146 = *(unsigned __int8 *)v208;
          *(_DWORD *)v144 = 68159490;
          *(_DWORD *)(v144 + 4) = 4;
          *(_WORD *)(v144 + 8) = 2080;
          *(_QWORD *)(v144 + 10) = v142;
          *(_WORD *)(v144 + 18) = 1024;
          *(_DWORD *)(v144 + 20) = v145;
          *(_WORD *)(v144 + 24) = 1024;
          *(_DWORD *)(v144 + 26) = v146;
          *(_WORD *)(v144 + 30) = 2048;
          *(_QWORD *)(v144 + 32) = v199;
          *(_WORD *)(v144 + 40) = 2048;
          *(_QWORD *)(v144 + 42) = v106;
          *(_WORD *)(v144 + 50) = 2048;
          *(_QWORD *)(v144 + 52) = v202;
          *(_WORD *)(v144 + 60) = 2080;
          *(_QWORD *)(v144 + 62) = v143;
          v147 = operator new();
          v148 = *(unsigned __int8 *)(v91 + 39);
          v149 = v196;
          if ((v148 & 0x80u) != 0)
          {
            v149 = *(const char **)(v91 + 16);
            v148 = *(_QWORD *)(v91 + 24);
          }
          *(_QWORD *)v147 = v141;
          *(_OWORD *)(v147 + 8) = *(_OWORD *)&v225.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v225.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v147 + 24) = v226;
          v226 = 0uLL;
          *(_QWORD *)(v147 + 40) = v149;
          *(_QWORD *)(v147 + 48) = v148;
          *(_BYTE *)(v147 + 56) = 1;
          v228.__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)v235 = v147;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v204 + 24) + 40))(*(_QWORD *)(v204 + 24), v235);
          v150 = *(_QWORD *)v235;
          *(_QWORD *)v235 = 0;
          v118 = v198;
          if (v150)
          {
            v151 = *(std::__shared_weak_count **)(v150 + 32);
            if (v151)
            {
              v152 = (unint64_t *)&v151->__shared_owners_;
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            v154 = *(std::__shared_weak_count **)(v150 + 16);
            if (v154)
            {
              v155 = (unint64_t *)&v154->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            MEMORY[0x227684CE8](v150, 0x10F0C40B62ED6C6);
            v157 = v228.__r_.__value_.__r.__words[0];
            v228.__r_.__value_.__r.__words[0] = 0;
            if (v157)
            {
              v158 = *(std::__shared_weak_count **)(v157 + 32);
              if (v158)
              {
                v159 = (unint64_t *)&v158->__shared_owners_;
                do
                  v160 = __ldaxr(v159);
                while (__stlxr(v160 - 1, v159));
                if (!v160)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
              }
              v161 = *(std::__shared_weak_count **)(v157 + 16);
              if (v161)
              {
                v162 = (unint64_t *)&v161->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              MEMORY[0x227684CE8](v157, 0x10F0C40B62ED6C6);
            }
          }
          v164 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
          if (*((_QWORD *)&v226 + 1))
          {
            v165 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          v167 = (std::__shared_weak_count *)v225.__r_.__value_.__r.__words[2];
          if (v225.__r_.__value_.__r.__words[2])
          {
            v168 = (unint64_t *)(v225.__r_.__value_.__r.__words[2] + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          goto LABEL_257;
        }
LABEL_201:
        v132 = (unint64_t *)(v131 + 8);
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
        goto LABEL_203;
      }
    }
    memcpy(p_dst, v203, v113);
    goto LABEL_182;
  }
  os_log_type_enabled(v102, OS_LOG_TYPE_INFO);
  v109 = v208;
  v115 = *((unsigned __int8 *)v208 + 1);
  v116 = *(unsigned __int8 *)v208;
  *(_QWORD *)v235 = 0x404100802;
  *(_WORD *)&v235[8] = 2080;
  *(_QWORD *)&v235[10] = v203;
  *(_WORD *)&v235[18] = 1024;
  *(_DWORD *)&v235[20] = v115;
  *(_WORD *)&v235[24] = 1024;
  *(_DWORD *)&v235[26] = v116;
  *(_WORD *)&v235[30] = 2048;
  *(_QWORD *)&v235[32] = v199;
  *(_WORD *)&v235[40] = 2048;
  *(_QWORD *)&v235[42] = 0xEF7BDEF7BDEF7BDFLL * ((v71 - v70) >> 3);
  *(_WORD *)&v235[50] = 2048;
  *(_QWORD *)&v235[52] = v107;
  *(_WORD *)&v235[60] = 2080;
  *(_QWORD *)&v235[62] = __s;
  v117 = (void *)_os_log_send_and_compose_impl();
  v118 = v198;
  if (v117)
    free(v117);
LABEL_257:
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v217.__r_.__value_.__l.__data_);
    if (!v118)
      goto LABEL_277;
  }
  else if (!v118)
  {
    goto LABEL_277;
  }
  if (v220 >= 0)
    v170 = v219;
  else
    v170 = (void **)v219[0];
  v171 = *((unsigned __int8 *)v109 + 1);
  v172 = *(unsigned __int8 *)v109;
  v173 = (uint64_t)v109[17];
  v175 = v109[9];
  v174 = v109[10];
  v177 = v109[12];
  v176 = v109[13];
  memset(v235, 0, 24);
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = (unint64_t)v197;
  __dst = (float *)v235;
  *(_QWORD *)&v234 = 0;
  sub_2236763FC((float32x2_t **)&v228, &__dst);
  v178 = *(int8x16_t *)v235;
  v179 = vextq_s8(v178, v178, 8uLL);
  v180 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v178.i8, *(float32x2_t *)v178.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235, 1), *(float32x2_t *)v235, 1), *(float32x2_t *)v179.i8, *(float32x2_t *)v179.i8).f32[0];
  if (v180 < 0.0061)
  {
    v181 = 0.5 - (float)(v180 * (float)((float)(v180 / -720.0) + 0.041667));
    *(float *)v179.i32 = 0.16667 - (float)(v180 * (float)((float)(v180 / -5040.0) + 0.0083333));
    v182 = 1.0 - (float)(v180 * *(float *)v179.i32);
    if (v180 >= 0.00000149)
      goto LABEL_266;
LABEL_269:
    v183 = (float)(v180 * 0.000033069) + (float)((float)(v180 * 0.0013889) + 0.083333);
    goto LABEL_271;
  }
  v184 = sqrtf(v180);
  __sb = v180;
  v209 = *(int8x16_t *)v235;
  v185 = __sincosf_stret(v184);
  v180 = __sb;
  v178 = v209;
  v182 = v185.__sinval / v184;
  v181 = (float)(1.0 / __sb) * (float)(1.0 - v185.__cosval);
  *(float *)v179.i32 = (float)(1.0 / __sb) * (float)(1.0 - (float)(v185.__sinval / v184));
  if (__sb < 0.00000149)
    goto LABEL_269;
LABEL_266:
  if (v180 <= 9.0)
    v183 = (float)((float)(v181 * 0.5) - *(float *)v179.i32) / v182;
  else
    v183 = (float)(v181 + (float)(v182 * -0.5)) / (float)(v180 * v181);
LABEL_271:
  v179.i64[0] = *(uint64_t *)((char *)v109 + 52);
  v179.i32[2] = *((_DWORD *)v109 + 15);
  v186 = (float32x4_t)vextq_s8(vextq_s8(v178, v178, 0xCuLL), v178, 8uLL);
  v187 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v178, (int32x4_t)v178), v178, 0xCuLL);
  v188 = (int8x16_t)vsubq_f32(vmulq_f32(v186, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v179, (int32x4_t)v179), v179, 0xCuLL)), vmulq_f32(v187, (float32x4_t)vextq_s8(vextq_s8(v179, v179, 0xCuLL), v179, 8uLL)));
  v189.i64[0] = 0xBF000000BF000000;
  v189.i64[1] = 0xBF000000BF000000;
  v190 = vaddq_f32(vaddq_f32((float32x4_t)v179, vmulq_f32((float32x4_t)v188, v189)), vmulq_n_f32(vsubq_f32(vmulq_f32(v186, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v188, (int32x4_t)v188), v188, 0xCuLL)), vmulq_f32(v187, (float32x4_t)vextq_s8(vextq_s8(v188, v188, 0xCuLL), v188, 8uLL))), v183));
  *(_DWORD *)&v235[20] = v190.i32[2];
  *(_QWORD *)&v235[12] = v190.i64[0];
  v191 = vabsq_f32(*(float32x4_t *)v235);
  sub_22456D250("(%2.3f,%2.3f,%2.3f,%2.3f,%2.3f,%2.3f)", &v225, vcvtq_f64_f32(*(float32x2_t *)v191.f32), vcvt_hight_f64_f32(v191), vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vabsq_f32(*(float32x4_t *)&v235[16])));
  if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v192 = &v225;
  else
    v192 = (std::string *)v225.__r_.__value_.__r.__words[0];
  sub_22322C138((uint64_t)__p, "VLM:GRS:CC[%.4s] TS:%d MS:%d ToT:%lu UK:%lu PK:%lu M2V:%s", (const char *)v170, v171, v172, v173, 0xEF7BDEF7BDEF7BDFLL * ((v174 - v175) >> 3), 0xCF3CF3CF3CF3CF3DLL * ((v176 - v177) >> 2), (const char *)v192);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  sub_223182C08((uint64_t)__p);
LABEL_277:
  sub_223182C08((uint64_t)__p);
  v193 = v216;
  if (!v216)
    goto LABEL_281;
  v194 = (unint64_t *)&v216->__shared_owners_;
  do
    v195 = __ldaxr(v194);
  while (__stlxr(v195 - 1, v194));
  if (v195)
    goto LABEL_281;
  ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
  std::__shared_weak_count::__release_weak(v193);
  if ((SHIBYTE(v218[2]) & 0x80000000) == 0)
  {
LABEL_282:
    if ((SHIBYTE(v220) & 0x80000000) == 0)
      return;
LABEL_286:
    operator delete(v219[0]);
    return;
  }
LABEL_285:
  operator delete(v218[0]);
  if (SHIBYTE(v220) < 0)
    goto LABEL_286;
}

void sub_223C0EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (*(_BYTE *)(v56 - 168) && *(char *)(v56 - 169) < 0)
    operator delete(*(void **)(v56 - 192));
  __cxa_guard_abort(&qword_255788F58);
  if (a43 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&a29);
  if (a49 < 0)
  {
    operator delete(a44);
    if ((a56 & 0x80000000) == 0)
LABEL_11:
      _Unwind_Resume(a1);
  }
  else if ((a56 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(a51);
  goto LABEL_11;
}

void sub_223C0F3E0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCF88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCF88))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.frame");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCF80);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCF88);
  }
  *a1 = qword_2540CCF80;
}

void sub_223C0F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCF88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCF88);
  _Unwind_Resume(a1);
}

void sub_223C0F4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  char *v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::mutex *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void **v22;
  uint64_t v23;
  __int128 v24;
  std::string *p_p;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  void **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::mutex *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  std::string::size_type v59;
  std::string *p_dst;
  std::string::size_type v61;
  std::string::size_type v62;
  int v63;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int info_low;
  unint64_t v70;
  unint64_t v71;
  char *v73;
  uint64_t v74;
  size_t v75;
  const char *v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  const char *v79;
  size_t v80;
  _BYTE *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  void *v94;
  _QWORD *v95;
  size_t v96;
  std::string::size_type v97;
  std::string *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  char *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::string::size_type v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::string::size_type v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  const char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  const char *v158;
  uint64_t v159;
  char *__s;
  std::string __p;
  int v162;
  const char *v163;
  int v164;
  const char *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  __int128 v168;
  void *v169[2];
  int64_t v170;
  CFStringRef v171;
  std::__shared_weak_count *v172;
  std::string v173;
  char *v174;
  std::__shared_weak_count *v175;
  std::string __dst;
  __int128 v177;
  _BYTE v178[40];
  char *v179;
  __int128 v180;
  char v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v3 = *(char *)(a3 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a3 + 23);
  else
    v4 = *(_QWORD *)(a3 + 8);
  v5 = v4 + 20;
  if (v4 + 20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v6 = (char *)a3;
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v12 = (char *)operator new(v10 + 1);
    v169[1] = (void *)(v4 + 20);
    v170 = v11 | 0x8000000000000000;
    v169[0] = v12;
    v9 = v12 + 20;
    *((_DWORD *)v12 + 4) = 776819538;
    *(_OWORD *)v12 = *(_OWORD *)"Stats.KFCluster.RSM.";
    goto LABEL_11;
  }
  v170 = 776819538;
  HIBYTE(v170) = v4 + 20;
  v9 = (char *)&v170 + 4;
  *(_OWORD *)v169 = *(_OWORD *)"Stats.KFCluster.RSM.";
  if (v4)
  {
LABEL_11:
    if (v3 >= 0)
      v13 = v6;
    else
      v13 = *(char **)v6;
    memmove(v9, v13, v4);
  }
  v9[v4] = 0;
  v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v15 = sub_2241471F8();
    v16 = v15[2];
    if (!v16)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v16 = v15[2];
    }
    v17 = *(_QWORD *)(v16 + 64);
    v18 = (std::mutex *)(v17 + 32);
    std::mutex::lock((std::mutex *)(v17 + 32));
    v20 = *(_QWORD *)(v17 + 96);
    v19 = *(_QWORD *)(v17 + 104);
    std::mutex::unlock(v18);
    if (v20 != v19)
    {
      *(_QWORD *)v178 = "cv3d.recon.";
      *(_QWORD *)&v178[8] = 11;
      v21 = (void *)HIBYTE(v170);
      v22 = v169;
      if (v170 < 0)
      {
        v22 = (void **)v169[0];
        v21 = v169[1];
      }
      *(_QWORD *)&v178[16] = v22;
      *(_QWORD *)&v178[24] = v21;
      sub_2231A9820((uint64_t)v178, (uint64_t)&v178[32], 0, 0, &__p);
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v23 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)v24;
      if ((v23 & 0x80u) == 0)
        v26 = v23;
      else
        v26 = *((_QWORD *)&v24 + 1);
      v27 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, p_p, v26);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v29 = v28;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v29)
          goto LABEL_109;
      }
      else if (!v28)
      {
        goto LABEL_109;
      }
      *(_QWORD *)&v178[8] = 0;
      *(_QWORD *)&v178[16] = 0;
      *(_QWORD *)v178 = &v178[8];
      sub_2245314F4(v178, &__p);
      v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)v178, *(char **)&v178[8]);
      sub_2240043CC(&__p);
      v178[23] = 11;
      strcpy(v178, "system time");
      sub_224527BAC((uint64_t)v178, (CFStringRef *)&v173);
      sub_2231AEDB8((uint64_t)&v168, v173.__r_.__value_.__l.__data_, (uint64_t)&__p);
      size = (std::__shared_weak_count *)v173.__r_.__value_.__l.__size_;
      if (v173.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v173.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((v178[23] & 0x80000000) != 0)
        operator delete(*(void **)v178);
      sub_22456D250("Out:%llu Pending:%llu MuteP:%llu MuteEX:%llu", &v173, v14[2], v14[3], *v14, v14[1]);
      v178[23] = 16;
      strcpy(v178, "BackLoggerStatus");
      sub_224527BAC((uint64_t)v178, (CFStringRef *)&__dst);
      sub_2231AEDB8((uint64_t)&v168, __dst.__r_.__value_.__l.__data_, (uint64_t)&v173);
      v33 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if ((v178[23] & 0x80000000) != 0)
        operator delete(*(void **)v178);
      v178[23] = 14;
      strcpy(v178, "kept keyframes");
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v177, a2, a1);
      sub_223C1089C((unsigned __int8 **)&v177, &__dst);
      sub_224527BAC((uint64_t)v178, &v171);
      sub_2231AEDB8((uint64_t)&v168, v171, (uint64_t)&__dst);
      v36 = v172;
      if (v172)
      {
        p_shared_owners = (unint64_t *)&v172->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v39 = v177;
      if ((_QWORD)v177)
      {
        v40 = *((_QWORD *)&v177 + 1);
        v41 = (void *)v177;
        if (*((_QWORD *)&v177 + 1) != (_QWORD)v177)
        {
          do
          {
            v42 = *(std::__shared_weak_count **)(v40 - 224);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v40 -= 248;
          }
          while (v40 != v39);
          v41 = (void *)v177;
        }
        *((_QWORD *)&v177 + 1) = v39;
        operator delete(v41);
      }
      if ((v178[23] & 0x80000000) != 0)
        operator delete(*(void **)v178);
      *(_QWORD *)v178 = "cv3d.recon.";
      *(_QWORD *)&v178[8] = 11;
      v45 = (void *)HIBYTE(v170);
      v46 = v169;
      if (v170 < 0)
      {
        v46 = (void **)v169[0];
        v45 = v169[1];
      }
      *(_QWORD *)&v178[16] = v46;
      *(_QWORD *)&v178[24] = v45;
      sub_2231A9820((uint64_t)v178, (uint64_t)&v178[32], 0, 0, &__dst);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v47 = sub_2241471F8();
        v48 = v47[2];
        if (!v48)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v48 = v47[2];
        }
        v49 = *(_QWORD *)(v48 + 64);
        v50 = (std::mutex *)(v49 + 32);
        std::mutex::lock((std::mutex *)(v49 + 32));
        v52 = *(_QWORD *)(v49 + 96);
        v51 = *(_QWORD *)(v49 + 104);
        std::mutex::unlock(v50);
        if (v52 != v51)
        {
          v53 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v54 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v55 = (v53 & 0x80u) == 0 ? &__dst : (std::string *)v54;
          v56 = (v53 & 0x80u) == 0 ? v53 : *((_QWORD *)&v54 + 1);
          v57 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v55, v56);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
          {
            memset(v178, 0, 32);
            *(_DWORD *)&v178[32] = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57))
            {
              *(_QWORD *)&v177 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *((_QWORD *)&v177 + 1) = 2;
              v58 = sub_2241471F8();
              sub_2234277D4((uint64_t)v58, v57, (uint64_t)&v168, (uint64_t)&unk_2245C9EFE, &v177);
            }
            kdebug_trace();
          }
        }
      }
      memset(v178, 0, 32);
      *(_DWORD *)&v178[32] = 728325624;
      kdebug_trace();
      v59 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v59 = __dst.__r_.__value_.__l.__size_;
      if (v59 >= 0x11)
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v61 = p_dst->__r_.__value_.__r.__words[0];
        v62 = p_dst->__r_.__value_.__l.__size_;
        v63 = p_dst->__r_.__value_.__s.__data_[16];
        if (v61 == 0x6365722E64337663 && v62 == 0x73746174532E6E6FLL && v63 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_99:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_100;
          goto LABEL_104;
        }
      }
      else if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_99;
      }
      operator delete(v173.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_100:
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
        if (!*((_QWORD *)&v168 + 1))
          goto LABEL_109;
LABEL_105:
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
        goto LABEL_109;
      }
LABEL_104:
      operator delete(__p.__r_.__value_.__l.__data_);
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      if (!*((_QWORD *)&v168 + 1))
        goto LABEL_109;
      goto LABEL_105;
    }
  }
LABEL_109:
  sub_223C0F3E0(&v171);
  if (*(int *)v171[1].length > 3)
    goto LABEL_231;
  info_low = LOBYTE(v171[2].info);
  v70 = sub_22322F254((uint64_t)v171, "OSLogSurrogateAppender", 1, 0);
  v71 = v70;
  if (!info_low && v70 == 0)
    goto LABEL_231;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v162 = 3;
  v163 = "unknown file";
  v164 = 245;
  v166 = 0;
  v167 = 0;
  v165 = "unknown function";
  if (v6[23] >= 0)
    v73 = v6;
  else
    v73 = *(char **)v6;
  __s = v73;
  v74 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v76 = *(const char **)(v74 + 16);
    v75 = *(_QWORD *)(v74 + 24);
    v159 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
    v78 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v78 & 1) != 0)
      goto LABEL_121;
  }
  else
  {
    v75 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v76 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v159 = (uint64_t)v76;
    v77 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v77 & 1) != 0)
      goto LABEL_121;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v178);
    sub_223199C58("com.apple.cv3d", (unint64_t)v178, &xmmword_255788F40);
    if (v178[24] && (v178[23] & 0x80000000) != 0)
      operator delete(*(void **)v178);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_121:
  if (byte_255788F57 >= 0)
    v79 = (const char *)&xmmword_255788F40;
  else
    v79 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v80 = byte_255788F57;
  else
    v80 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v178 = os_log_create(v79, v76);
  v81 = &v178[8];
  if (v80 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v80 >= 0x17)
  {
    v158 = v76;
    v82 = v6;
    v83 = v71;
    v84 = v74;
    v85 = info_low;
    v86 = v14;
    v87 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v87 = v80 | 7;
    v88 = v87 + 1;
    v81 = operator new(v87 + 1);
    *(_QWORD *)&v178[16] = v80;
    *(_QWORD *)&v178[24] = v88 | 0x8000000000000000;
    *(_QWORD *)&v178[8] = v81;
    v14 = v86;
    info_low = v85;
    v74 = v84;
    v71 = v83;
    v6 = v82;
    v76 = v158;
    goto LABEL_134;
  }
  v178[31] = v80;
  if (v80)
LABEL_134:
    memmove(v81, v79, v80);
  v81[v80] = 0;
  v178[32] = 1;
  v89 = (char *)&v179;
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v75 >= 0x17)
  {
    v91 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v91 = v75 | 7;
    v92 = v91 + 1;
    v89 = (char *)operator new(v91 + 1);
    *(_QWORD *)&v180 = v75;
    *((_QWORD *)&v180 + 1) = v92 | 0x8000000000000000;
    v179 = v89;
  }
  else
  {
    HIBYTE(v180) = v75;
    if (!v75)
    {
      LOBYTE(v179) = 0;
      v181 = 1;
      v90 = *(NSObject **)v178;
      if ((SHIBYTE(v180) & 0x80000000) == 0)
        goto LABEL_139;
      goto LABEL_145;
    }
  }
  memmove(v89, v76, v75);
  v89[v75] = 0;
  v181 = 1;
  v90 = *(NSObject **)v178;
  if ((SHIBYTE(v180) & 0x80000000) == 0)
  {
LABEL_139:
    if (!v178[32])
      goto LABEL_148;
    goto LABEL_146;
  }
LABEL_145:
  operator delete(v179);
  if (!v178[32])
    goto LABEL_148;
LABEL_146:
  if ((v178[31] & 0x80000000) != 0)
    operator delete(*(void **)&v178[8]);
LABEL_148:
  if (*(_QWORD *)v178)
    os_release(*(void **)v178);
  if (!v71 || !*(_QWORD *)(v71 + 24))
  {
    os_log_type_enabled(v90, OS_LOG_TYPE_INFO);
    v100 = v14[2];
    v101 = v14[3];
    v102 = (char *)*v14;
    v103 = v14[1];
    *(_QWORD *)v178 = 0x404100602;
    *(_WORD *)&v178[8] = 2080;
    *(_QWORD *)&v178[10] = __s;
    *(_WORD *)&v178[18] = 2048;
    *(_QWORD *)&v178[20] = v100;
    *(_WORD *)&v178[28] = 2048;
    *(_QWORD *)&v178[30] = v101;
    *(_WORD *)&v178[38] = 2048;
    v179 = v102;
    LOWORD(v180) = 2048;
    *(_QWORD *)((char *)&v180 + 2) = v103;
    v104 = (void *)_os_log_send_and_compose_impl();
    if (v104)
      free(v104);
    goto LABEL_221;
  }
  v93 = _os_log_pack_size();
  v94 = operator new(v93, (std::align_val_t)8uLL);
  v95 = (_QWORD *)operator new();
  *v95 = &off_24EC1F7F0;
  v95[1] = 0;
  v95[2] = 0;
  v95[3] = v94;
  v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
  v173.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
  v174 = 0;
  v175 = 0;
  v173.__r_.__value_.__r.__words[2] = (std::string::size_type)v95;
  v96 = strlen(__s);
  if (v96 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v97 = v96;
  if (v96 >= 0x17)
  {
    v105 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17)
      v105 = v96 | 7;
    v106 = v105 + 1;
    v98 = (std::string *)operator new(v105 + 1);
    __dst.__r_.__value_.__l.__size_ = v97;
    __dst.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v96;
    v98 = &__dst;
    if (!v96)
    {
      v99 = info_low;
      goto LABEL_162;
    }
  }
  v99 = info_low;
  memcpy(v98, __s, v97);
LABEL_162:
  v98->__r_.__value_.__s.__data_[v97] = 0;
  *(_QWORD *)&v177 = __dst.__r_.__value_.__l.__size_;
  v107 = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v177 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
  v108 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v109 = operator new(0x40uLL);
  v109[1] = 0;
  v109[2] = 0;
  v109[3] = off_24EC60CE0;
  *v109 = &off_24EC60C90;
  v110 = v177;
  v109[4] = v107;
  v109[5] = v110;
  *(_QWORD *)((char *)v109 + 47) = *(_QWORD *)((char *)&v177 + 7);
  *((_BYTE *)v109 + 55) = v108;
  *(_QWORD *)&v177 = 0;
  *(_QWORD *)((char *)&v177 + 7) = 0;
  v111 = v175;
  v174 = (char *)(v109 + 3);
  v175 = (std::__shared_weak_count *)v109;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  *(std::string *)v178 = v173;
  v114 = v174;
  if (v173.__r_.__value_.__r.__words[2])
  {
    v115 = (unint64_t *)(v173.__r_.__value_.__r.__words[2] + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = v175;
  *(_QWORD *)&v178[24] = v114;
  *(_QWORD *)&v178[32] = v175;
  if (v175)
  {
    v118 = (unint64_t *)&v175->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    v179 = v114;
    do
      v120 = __ldaxr(v118);
    while (__stlxr(v120 - 1, v118));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  else
  {
    v179 = v114;
  }
  v121 = (std::__shared_weak_count *)v173.__r_.__value_.__r.__words[2];
  if (v173.__r_.__value_.__r.__words[2])
  {
    v122 = (unint64_t *)(v173.__r_.__value_.__r.__words[2] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = *(_QWORD *)v178;
  if (v179[31] >= 0)
    v125 = v179 + 8;
  else
    v125 = (char *)*((_QWORD *)v179 + 1);
  v126 = _os_log_pack_fill();
  v127 = v14[2];
  v128 = v14[3];
  v129 = *v14;
  v130 = v14[1];
  *(_DWORD *)v126 = 68158978;
  *(_DWORD *)(v126 + 4) = 4;
  *(_WORD *)(v126 + 8) = 2080;
  *(_QWORD *)(v126 + 10) = v125;
  *(_WORD *)(v126 + 18) = 2048;
  *(_QWORD *)(v126 + 20) = v127;
  *(_WORD *)(v126 + 28) = 2048;
  *(_QWORD *)(v126 + 30) = v128;
  *(_WORD *)(v126 + 38) = 2048;
  *(_QWORD *)(v126 + 40) = v129;
  *(_WORD *)(v126 + 48) = 2048;
  *(_QWORD *)(v126 + 50) = v130;
  v131 = operator new();
  v132 = *(unsigned __int8 *)(v74 + 39);
  v133 = v159;
  if ((v132 & 0x80u) != 0)
  {
    v133 = *(_QWORD *)(v74 + 16);
    v132 = *(_QWORD *)(v74 + 24);
  }
  *(_QWORD *)v131 = v124;
  *(_OWORD *)(v131 + 8) = *(_OWORD *)&v178[8];
  *(_QWORD *)&v178[8] = 0;
  *(_QWORD *)&v178[16] = 0;
  *(_OWORD *)(v131 + 24) = *(_OWORD *)&v178[24];
  *(_QWORD *)&v178[24] = 0;
  *(_QWORD *)&v178[32] = 0;
  *(_QWORD *)(v131 + 40) = v133;
  *(_QWORD *)(v131 + 48) = v132;
  *(_BYTE *)(v131 + 56) = 1;
  __dst.__r_.__value_.__r.__words[0] = 0;
  v173.__r_.__value_.__r.__words[0] = v131;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v71 + 24) + 40))(*(_QWORD *)(v71 + 24), &v173);
  v134 = v173.__r_.__value_.__r.__words[0];
  v173.__r_.__value_.__r.__words[0] = 0;
  if (v134)
  {
    v135 = *(std::__shared_weak_count **)(v134 + 32);
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v138 = *(std::__shared_weak_count **)(v134 + 16);
    if (v138)
    {
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    MEMORY[0x227684CE8](v134, 0x10F0C40B62ED6C6);
    v141 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v141)
    {
      v142 = *(std::__shared_weak_count **)(v141 + 32);
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v145 = *(std::__shared_weak_count **)(v141 + 16);
      if (v145)
      {
        v146 = (unint64_t *)&v145->__shared_owners_;
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      MEMORY[0x227684CE8](v141, 0x10F0C40B62ED6C6);
    }
  }
  v148 = *(std::__shared_weak_count **)&v178[32];
  info_low = v99;
  if (*(_QWORD *)&v178[32])
  {
    v149 = (unint64_t *)(*(_QWORD *)&v178[32] + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = *(std::__shared_weak_count **)&v178[16];
  if (*(_QWORD *)&v178[16])
  {
    v152 = (unint64_t *)(*(_QWORD *)&v178[16] + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
LABEL_221:
  if (info_low)
  {
    if (v6[23] >= 0)
      v154 = v6;
    else
      v154 = *(const char **)v6;
    sub_22322C138((uint64_t)&__p, "VLM:GRS:RSM:[%.4s] Out:%llu Kept:%llu MP:%llu MEX:%llu", v154, v14[2], v14[3], *v14, v14[1]);
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v155 = v167;
  if (v167)
  {
    v156 = (unint64_t *)&v167->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
LABEL_231:
  if (SHIBYTE(v170) < 0)
    operator delete(v169[0]);
}

void sub_223C1063C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(_BYTE *)(v46 - 152) && *(char *)(v46 - 153) < 0)
    operator delete(*(void **)(v46 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223C1089C(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  char v6;
  std::string *p_p;
  std::string::size_type size;
  void *v9;
  char v10;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    do
    {
      v6 = v2[240];
      v10 = 1;
      LOWORD(v9) = 117;
      sub_223C1D6B4(&__p, v2, v6, (uint64_t *)&v9, v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10 < 0)
LABEL_14:
          operator delete(v9);
      }
      else if (v10 < 0)
      {
        goto LABEL_14;
      }
      v2 += 248;
      ++v5;
    }
    while (v2 != v3);
  }
}

void sub_223C10980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v20 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v20 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_223C109E4(int a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  _BOOL4 v9;
  int v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::mutex *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __int128 v25;
  std::string *p_p;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::mutex *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  std::string *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type size;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int v50;
  BOOL v51;
  __n128 *v53;
  std::string *v54;
  size_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::mutex *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  int v73;
  __n128 *v76;
  std::string *v77;
  size_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  void **v83;
  uint64_t v84;
  const char *v85;
  size_t v86;
  int v87;
  unsigned __int8 v88;
  const char *v89;
  size_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  int v95;
  NSObject *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  _QWORD *v102;
  size_t v103;
  size_t v104;
  uint64_t *p_dst;
  void *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *p_shared_owners;
  unint64_t v116;
  void *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  __int128 v134;
  std::string::size_type v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  const char *v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  _BYTE v164[40];
  int v165;
  const char *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  void *v170[2];
  unsigned __int8 v171;
  std::string __p;
  char *v173;
  std::__shared_weak_count *v174;
  uint64_t *__dst;
  __int128 v176;
  _BYTE v177[40];
  void *v178[2];
  unint64_t v179;
  char v180;
  _QWORD v181[5];

  v181[2] = *MEMORY[0x24BDAC8D0];
  v9 = a5[16] == 0;
  sub_223A62A3C(a5, (uint64_t)v170);
  if (!v9)
    goto LABEL_108;
  v10 = (char)v171;
  if ((v171 & 0x80u) == 0)
    v11 = v171;
  else
    v11 = (size_t)v170[1];
  v12 = v11 + 34;
  if (v11 + 34 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v12 <= 0x16)
  {
    qmemcpy(v164, "Stats.KFCluster.IGRS.graph_update.", 34);
    v13 = &v164[34];
LABEL_11:
    if (v10 >= 0)
      v15 = v170;
    else
      v15 = (void **)v170[0];
    memmove(v13, v15, v11);
    goto LABEL_15;
  }
  v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v14 = v12 | 7;
  *(_QWORD *)&v164[8] = v11 + 34;
  *(_QWORD *)&v164[16] = (v14 + 1) | 0x8000000000000000;
  *(_QWORD *)v164 = operator new(v14 + 1);
  qmemcpy(*(void **)v164, "Stats.KFCluster.IGRS.graph_update.", 34);
  v13 = (_BYTE *)(*(_QWORD *)v164 + 34);
  if (v11)
    goto LABEL_11;
LABEL_15:
  v13[v11] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_106;
  v16 = sub_2241471F8();
  v17 = v16[2];
  if (!v17)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v17 = v16[2];
  }
  v18 = *(_QWORD *)(v17 + 64);
  v19 = (std::mutex *)(v18 + 32);
  std::mutex::lock((std::mutex *)(v18 + 32));
  v21 = *(_QWORD *)(v18 + 96);
  v20 = *(_QWORD *)(v18 + 104);
  std::mutex::unlock(v19);
  if (v21 == v20)
    goto LABEL_106;
  *(_QWORD *)v177 = "cv3d.recon.";
  *(_QWORD *)&v177[8] = 11;
  v22 = v164[23];
  v23 = v164;
  if (v164[23] < 0)
  {
    v23 = *(_BYTE **)v164;
    v22 = *(_QWORD *)&v164[8];
  }
  *(_QWORD *)&v177[16] = v23;
  *(_QWORD *)&v177[24] = v22;
  sub_2231A9820((uint64_t)v177, (uint64_t)&v177[32], 0, 0, &__p);
  v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  sub_2241471F8();
  if ((v24 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v25;
  if ((v24 & 0x80u) == 0)
    v27 = v24;
  else
    v27 = *((_QWORD *)&v25 + 1);
  v28 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, p_p, v27);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  v30 = v29;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v30)
      goto LABEL_106;
LABEL_32:
    v31 = a4;
    *(_QWORD *)v177 = "cv3d.recon.";
    *(_QWORD *)&v177[8] = 11;
    v32 = v164[23];
    v33 = v164;
    if (v164[23] < 0)
    {
      v33 = *(_BYTE **)v164;
      v32 = *(_QWORD *)&v164[8];
    }
    *(_QWORD *)&v177[16] = v33;
    *(_QWORD *)&v177[24] = v32;
    sub_2231A9820((uint64_t)v177, (uint64_t)&v177[32], 0, 0, &__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v34 = sub_2241471F8();
      v35 = v34[2];
      if (!v35)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v35 = v34[2];
      }
      v36 = *(_QWORD *)(v35 + 64);
      v37 = (std::mutex *)(v36 + 32);
      std::mutex::lock((std::mutex *)(v36 + 32));
      v38 = a2;
      v40 = *(_QWORD *)(v36 + 96);
      v39 = *(_QWORD *)(v36 + 104);
      std::mutex::unlock(v37);
      v51 = v40 == v39;
      a2 = v38;
      if (!v51)
      {
        v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        sub_2241471F8();
        v43 = (v41 & 0x80u) == 0 ? &__p : (std::string *)v42;
        v44 = (v41 & 0x80u) == 0 ? v41 : *((_QWORD *)&v42 + 1);
        v45 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v43, v44);
        a2 = v38;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
        {
          memset(v177, 0, 32);
          *(_DWORD *)&v177[32] = 728325608;
          kdebug_trace();
          __dst = *(uint64_t **)(v31 + 16);
          sub_22386D76C((double *)&qword_255788F20, v45, (uint64_t *)&__dst, "unreceived");
          kdebug_trace();
        }
      }
    }
    memset(v177, 0, 32);
    *(_DWORD *)&v177[32] = 728325624;
    kdebug_trace();
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    a4 = v31;
    if (size >= 0x11)
    {
      v47 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v48 = v47->__r_.__value_.__r.__words[0];
      v49 = v47->__r_.__value_.__l.__size_;
      v50 = v47->__r_.__value_.__s.__data_[16];
      v51 = v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL;
      if (v51 && v50 == 46)
      {
        v53 = sub_223187510();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &__p;
        else
          v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v55 = __p.__r_.__value_.__l.__size_;
        __dst = *(uint64_t **)(v31 + 16);
        sub_22318760C((uint64_t *)v53, v54, v55, (uint64_t *)&__dst, (uint64_t)"unreceived", 10);
      }
    }
    kdebug_trace();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)v177 = "cv3d.recon.";
    *(_QWORD *)&v177[8] = 11;
    v56 = v164[23];
    v57 = v164;
    if (v164[23] < 0)
    {
      v57 = *(_BYTE **)v164;
      v56 = *(_QWORD *)&v164[8];
    }
    *(_QWORD *)&v177[16] = v57;
    *(_QWORD *)&v177[24] = v56;
    sub_2231A9820((uint64_t)v177, (uint64_t)&v177[32], 0, 0, &__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v58 = sub_2241471F8();
      v59 = v58[2];
      if (!v59)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v59 = v58[2];
      }
      v60 = *(_QWORD *)(v59 + 64);
      v61 = (std::mutex *)(v60 + 32);
      std::mutex::lock((std::mutex *)(v60 + 32));
      v63 = *(_QWORD *)(v60 + 96);
      v62 = *(_QWORD *)(v60 + 104);
      std::mutex::unlock(v61);
      if (v63 != v62)
      {
        v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v65 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        sub_2241471F8();
        v66 = (v64 & 0x80u) == 0 ? &__p : (std::string *)v65;
        v67 = (v64 & 0x80u) == 0 ? v64 : *((_QWORD *)&v65 + 1);
        v68 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v66, v67);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
        {
          memset(v177, 0, 32);
          *(_DWORD *)&v177[32] = 728325608;
          kdebug_trace();
          __dst = *(uint64_t **)(a3 + 16);
          sub_223189CA8((double *)&qword_255788F20, v68, (uint64_t *)&__dst, "tracked");
          kdebug_trace();
        }
      }
    }
    memset(v177, 0, 32);
    *(_DWORD *)&v177[32] = 728325624;
    kdebug_trace();
    v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v69 = __p.__r_.__value_.__l.__size_;
    if (v69 >= 0x11)
    {
      v70 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v71 = v70->__r_.__value_.__r.__words[0];
      v72 = v70->__r_.__value_.__l.__size_;
      v73 = v70->__r_.__value_.__s.__data_[16];
      if (v71 == 0x6365722E64337663 && v72 == 0x73746174532E6E6FLL && v73 == 46)
      {
        v76 = sub_223187510();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &__p;
        else
          v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v78 = __p.__r_.__value_.__l.__size_;
        __dst = *(uint64_t **)(a3 + 16);
        sub_22318760C((uint64_t *)v76, v77, v78, (uint64_t *)&__dst, (uint64_t)"tracked", 7);
      }
    }
    kdebug_trace();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_106;
  }
  if (v29)
    goto LABEL_32;
LABEL_106:
  if ((v164[23] & 0x80000000) != 0)
    operator delete(*(void **)v164);
LABEL_108:
  sub_223C0F3E0(&v169);
  if (**(int **)(v169 + 56) > 3)
    goto LABEL_230;
  v79 = *(unsigned __int8 *)(v169 + 72);
  v80 = sub_22322F254(v169, "OSLogSurrogateAppender", 1, 0);
  v81 = v80;
  if (!v79 && v80 == 0)
    goto LABEL_230;
  v161 = v79;
  *(_QWORD *)v164 = &v169;
  *(std::chrono::steady_clock::time_point *)&v164[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v164[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v164[24] = 3;
  *(_QWORD *)&v164[32] = "unknown file";
  v165 = 266;
  v167 = 0;
  v168 = 0;
  v166 = "unknown function";
  if ((v171 & 0x80u) == 0)
    v83 = v170;
  else
    v83 = (void **)v170[0];
  v84 = **(_QWORD **)v164;
  v85 = (const char *)(**(_QWORD **)v164 + 16);
  v159 = v85;
  if (*(char *)(**(_QWORD **)v164 + 39) < 0)
  {
    v85 = *(const char **)(v84 + 16);
    v86 = *(_QWORD *)(v84 + 24);
  }
  else
  {
    v86 = *(unsigned __int8 *)(**(_QWORD **)v164 + 39);
  }
  v163 = a2;
  v87 = a1;
  v160 = a4;
  v162 = *(_QWORD *)(a4 + 16);
  v88 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v177);
    sub_223199C58("com.apple.cv3d", (unint64_t)v177, byte_255788F40);
    if (v177[24] && (v177[23] & 0x80000000) != 0)
      operator delete(*(void **)v177);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v89 = byte_255788F40;
  else
    v89 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v90 = byte_255788F40[23];
  else
    v90 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v177 = os_log_create(v89, v85);
  v91 = &v177[8];
  if (v90 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v90 >= 0x17)
  {
    v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v92 = v90 | 7;
    v93 = v92 + 1;
    v91 = operator new(v92 + 1);
    *(_QWORD *)&v177[16] = v90;
    *(_QWORD *)&v177[24] = v93 | 0x8000000000000000;
    *(_QWORD *)&v177[8] = v91;
    goto LABEL_133;
  }
  v177[31] = v90;
  if (v90)
LABEL_133:
    memmove(v91, v89, v90);
  v91[v90] = 0;
  v177[32] = 1;
  v94 = v178;
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v95 = v87;
  if (v86 >= 0x17)
  {
    v98 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v98 = v86 | 7;
    v99 = v98 + 1;
    v94 = (void **)operator new(v98 + 1);
    v178[1] = (void *)v86;
    v179 = v99 | 0x8000000000000000;
    v178[0] = v94;
  }
  else
  {
    HIBYTE(v179) = v86;
    if (!v86)
    {
      LOBYTE(v178[0]) = 0;
      v180 = 1;
      v96 = *(NSObject **)v177;
      if ((SHIBYTE(v179) & 0x80000000) == 0)
        goto LABEL_138;
      goto LABEL_144;
    }
  }
  memmove(v94, v85, v86);
  *((_BYTE *)v94 + v86) = 0;
  v180 = 1;
  v96 = *(NSObject **)v177;
  if ((SHIBYTE(v179) & 0x80000000) == 0)
  {
LABEL_138:
    v97 = v163;
    if (!v177[32])
      goto LABEL_147;
    goto LABEL_145;
  }
LABEL_144:
  operator delete(v178[0]);
  v97 = v163;
  if (!v177[32])
    goto LABEL_147;
LABEL_145:
  if ((v177[31] & 0x80000000) != 0)
    operator delete(*(void **)&v177[8]);
LABEL_147:
  if (*(_QWORD *)v177)
    os_release(*(void **)v177);
  if (!v81 || !*(_QWORD *)(v81 + 24))
  {
    os_log_type_enabled(v96, OS_LOG_TYPE_INFO);
    *(_QWORD *)v177 = 0x404100502;
    *(_WORD *)&v177[8] = 2080;
    *(_QWORD *)&v177[10] = v83;
    *(_WORD *)&v177[18] = 1024;
    *(_DWORD *)&v177[20] = v87;
    *(_WORD *)&v177[24] = 1024;
    *(_DWORD *)&v177[26] = v97;
    *(_WORD *)&v177[30] = 2048;
    *(_QWORD *)&v177[32] = v162;
    v106 = (void *)_os_log_send_and_compose_impl();
    v107 = v161;
    if (v106)
      free(v106);
    goto LABEL_221;
  }
  v100 = _os_log_pack_size();
  v101 = operator new(v100, (std::align_val_t)8uLL);
  v102 = (_QWORD *)operator new();
  *v102 = &off_24EC1F7F0;
  v102[1] = 0;
  v102[2] = 0;
  v102[3] = v101;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
  v173 = 0;
  v174 = 0;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v102;
  v103 = strlen((const char *)v83);
  if (v103 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v104 = v103;
  if (v103 >= 0x17)
  {
    v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v103 | 7) != 0x17)
      v108 = v103 | 7;
    v109 = v108 + 1;
    p_dst = (uint64_t *)operator new(v108 + 1);
    *(_QWORD *)&v176 = v104;
    *((_QWORD *)&v176 + 1) = v109 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_160;
  }
  HIBYTE(v176) = v103;
  p_dst = (uint64_t *)&__dst;
  if (v103)
LABEL_160:
    memcpy(p_dst, v83, v104);
  *((_BYTE *)p_dst + v104) = 0;
  v110 = (uint64_t)__dst;
  v181[0] = v176;
  *(_QWORD *)((char *)v181 + 7) = *(_QWORD *)((char *)&v176 + 7);
  v111 = HIBYTE(v176);
  v112 = operator new(0x40uLL);
  v112[1] = 0;
  v112[2] = 0;
  v112[3] = off_24EC60D68;
  *v112 = &off_24EC60D18;
  v113 = v181[0];
  v112[4] = v110;
  v112[5] = v113;
  *(_QWORD *)((char *)v112 + 47) = *(_QWORD *)((char *)v181 + 7);
  *((_BYTE *)v112 + 55) = v111;
  v181[0] = 0;
  *(_QWORD *)((char *)v181 + 7) = 0;
  v114 = v174;
  v173 = (char *)(v112 + 3);
  v174 = (std::__shared_weak_count *)v112;
  v97 = v163;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldaxr(p_shared_owners);
    while (__stlxr(v116 - 1, p_shared_owners));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  *(std::string *)v177 = __p;
  v117 = v173;
  if (__p.__r_.__value_.__r.__words[2])
  {
    v118 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v120 = v174;
  *(_QWORD *)&v177[24] = v117;
  *(_QWORD *)&v177[32] = v174;
  if (v174)
  {
    v121 = (unint64_t *)&v174->__shared_owners_;
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
    v178[0] = v117;
    do
      v123 = __ldaxr(v121);
    while (__stlxr(v123 - 1, v121));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  else
  {
    v178[0] = v117;
  }
  v124 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v125 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = *(_QWORD *)v177;
  if (*((char *)v178[0] + 31) >= 0)
    v128 = (char *)v178[0] + 8;
  else
    v128 = (char *)*((_QWORD *)v178[0] + 1);
  v129 = _os_log_pack_fill();
  *(_DWORD *)v129 = 68158722;
  *(_DWORD *)(v129 + 4) = 4;
  *(_WORD *)(v129 + 8) = 2080;
  *(_QWORD *)(v129 + 10) = v128;
  *(_WORD *)(v129 + 18) = 1024;
  *(_DWORD *)(v129 + 20) = v95;
  *(_WORD *)(v129 + 24) = 1024;
  *(_DWORD *)(v129 + 26) = v163;
  *(_WORD *)(v129 + 30) = 2048;
  *(_QWORD *)(v129 + 32) = v162;
  v130 = operator new();
  v131 = *(unsigned __int8 *)(v84 + 39);
  v132 = *(const char **)(v84 + 16);
  v133 = *(_QWORD *)(v84 + 24);
  v134 = *(_OWORD *)&v177[24];
  *(_OWORD *)(v130 + 8) = *(_OWORD *)&v177[8];
  if ((v131 & 0x80u) != 0)
    v131 = v133;
  else
    v132 = v159;
  *(_QWORD *)v130 = v127;
  *(_QWORD *)&v177[8] = 0;
  *(_QWORD *)&v177[16] = 0;
  *(_OWORD *)(v130 + 24) = v134;
  *(_QWORD *)&v177[24] = 0;
  *(_QWORD *)&v177[32] = 0;
  *(_QWORD *)(v130 + 40) = v132;
  *(_QWORD *)(v130 + 48) = v131;
  *(_BYTE *)(v130 + 56) = 1;
  __dst = 0;
  __p.__r_.__value_.__r.__words[0] = v130;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &__p);
  v135 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v107 = v161;
  if (v135)
  {
    v136 = *(std::__shared_weak_count **)(v135 + 32);
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v139 = *(std::__shared_weak_count **)(v135 + 16);
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    MEMORY[0x227684CE8](v135, 0x10F0C40B62ED6C6);
    v142 = (uint64_t)__dst;
    __dst = 0;
    if (v142)
    {
      v143 = *(std::__shared_weak_count **)(v142 + 32);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = *(std::__shared_weak_count **)(v142 + 16);
      if (v146)
      {
        v147 = (unint64_t *)&v146->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      MEMORY[0x227684CE8](v142, 0x10F0C40B62ED6C6);
    }
  }
  v149 = *(std::__shared_weak_count **)&v177[32];
  if (*(_QWORD *)&v177[32])
  {
    v150 = (unint64_t *)(*(_QWORD *)&v177[32] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = *(std::__shared_weak_count **)&v177[16];
  if (*(_QWORD *)&v177[16])
  {
    v153 = (unint64_t *)(*(_QWORD *)&v177[16] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
LABEL_221:
  if (v107)
  {
    v155 = v170;
    if ((v171 & 0x80u) != 0)
      v155 = (void **)v170[0];
    sub_22322C138((uint64_t)v164, "VLM:GRS:CM:[%.4s] TS:%i MS:%i URK:%lu", (const char *)v155, v95, v97, *(_QWORD *)(v160 + 16));
    sub_223182C08((uint64_t)v164);
  }
  sub_223182C08((uint64_t)v164);
  v156 = v168;
  if (v168)
  {
    v157 = (unint64_t *)&v168->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
LABEL_230:
  if ((char)v171 < 0)
    operator delete(v170[0]);
}

void sub_223C11AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(_BYTE *)(v44 - 168) && *(char *)(v44 - 169) < 0)
    operator delete(*(void **)(v44 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223C11CBC(char *a1, const void **a2)
{
  int v2;
  size_t v3;
  unint64_t v4;
  _BYTE *v7;
  uint64_t v8;
  const void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  std::string *p_p;
  std::string::size_type v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::mutex *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int v50;
  BOOL v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char *v60;
  uint64_t v61;
  size_t v62;
  const char *v63;
  uint64_t v64;
  unsigned __int8 v65;
  const char *v66;
  size_t v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  size_t v83;
  size_t v84;
  _BYTE *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  const char *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  char *__s;
  char *__sa;
  const void **v142;
  std::string __p;
  int v144;
  const char *v145;
  int v146;
  const char *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  std::string v150;
  void *v151[2];
  char v152;
  __int128 v153;
  _BYTE v154[27];
  _BYTE v155[5];
  void *v156[2];
  std::__shared_weak_count *v157;
  char *v158;
  std::__shared_weak_count *v159;
  _BYTE __dst[24];
  char v161;
  char *v162;
  void *v163[2];
  char v164;
  _BYTE v165[40];
  void *v166[2];
  unint64_t v167;
  char v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  v4 = v3 + 27;
  if (v3 + 27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v4 <= 0x16)
  {
    v7 = v155;
    qmemcpy(v154, "Stats.KFCluster.CM.tracked.", sizeof(v154));
LABEL_10:
    if (v2 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v7, v9, v3);
    goto LABEL_14;
  }
  v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v8 = v4 | 7;
  *(_QWORD *)&v154[8] = v3 + 27;
  *(_QWORD *)&v154[16] = (v8 + 1) | 0x8000000000000000;
  *(_QWORD *)v154 = operator new(v8 + 1);
  v7 = (_BYTE *)(*(_QWORD *)v154 + 27);
  qmemcpy(*(void **)v154, "Stats.KFCluster.CM.tracked.", 27);
  if (v3)
    goto LABEL_10;
LABEL_14:
  v7[v3] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v10 = sub_2241471F8();
    v11 = v10[2];
    if (!v11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = v10[2];
    }
    v12 = *(_QWORD *)(v11 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      *(_QWORD *)v165 = "cv3d.recon.";
      *(_QWORD *)&v165[8] = 11;
      v16 = v154[23];
      v17 = v154;
      if (v154[23] < 0)
      {
        v17 = *(_BYTE **)v154;
        v16 = *(_QWORD *)&v154[8];
      }
      *(_QWORD *)&v165[16] = v17;
      *(_QWORD *)&v165[24] = v16;
      sub_2231A9820((uint64_t)v165, (uint64_t)&v165[32], 0, 0, &__p);
      sub_2241471F8();
      v18 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      v20 = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v20)
          goto LABEL_111;
      }
      else if (!v19)
      {
        goto LABEL_111;
      }
      *(_QWORD *)&v165[8] = 0;
      *(_QWORD *)&v165[16] = 0;
      *(_QWORD *)v165 = &v165[8];
      sub_2245314F4(v165, &__p);
      v153 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)v165, *(char **)&v165[8]);
      sub_2240043CC(v163);
      v165[23] = 8;
      strcpy(v165, "tracked#");
      v156[0] = *((void **)a1 + 2);
      sub_224527BAC((uint64_t)v165, (CFStringRef *)&__p);
      sub_223AC95C8((uint64_t)&v153, __p.__r_.__value_.__l.__data_, (uint64_t *)v156);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if ((v165[23] & 0x80000000) != 0)
        operator delete(*(void **)v165);
      v152 = 7;
      strcpy((char *)v151, "tracked");
      memset(&v150, 0, sizeof(v150));
      __s = a1;
      v24 = (unsigned __int8 *)(a1 + 8);
      v25 = *(unsigned __int8 **)a1;
      if (v25 != v24)
      {
        do
        {
          *(_DWORD *)&v165[24] = 0;
          sub_22319B83C((uint64_t)&v162, (uint64_t)v165, v25 + 28);
          if (*(_DWORD *)&v165[24] == -1)
            sub_22316DD70();
          v162 = &v161;
          ((void (*)(_BYTE *__return_ptr, char **, _BYTE *))off_24EC60BB0[*(unsigned int *)&v165[24]])(__dst, &v162, v165);
          if (*(_DWORD *)&v165[24] != -1)
            ((void (*)(char **, _BYTE *))off_24EC60B38[*(unsigned int *)&v165[24]])(&v162, v165);
          v26 = __dst[23];
          if (__dst[23] < 0)
            v26 = *(_QWORD *)&__dst[8];
          if (v26 >= 4)
            v26 = 4;
          v157 = *(std::__shared_weak_count **)&__dst[16];
          *(_OWORD *)v156 = *(_OWORD *)__dst;
          memset(__dst, 0, sizeof(__dst));
          if (SHIBYTE(v157) < 0)
          {
            v156[1] = (void *)v26;
            v27 = (void **)v156[0];
          }
          else
          {
            HIBYTE(v157) = v26;
            v27 = v156;
          }
          *((_BYTE *)v27 + v26) = 0;
          if (SHIBYTE(v157) >= 0)
            v28 = v156;
          else
            v28 = (void **)v156[0];
          sub_22456D250("%s  ", &__p, v28);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v30 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v150, (const std::string::value_type *)p_p, v30);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v157) & 0x80000000) == 0)
            {
LABEL_56:
              if ((__dst[23] & 0x80000000) == 0)
                goto LABEL_57;
              goto LABEL_61;
            }
          }
          else if ((SHIBYTE(v157) & 0x80000000) == 0)
          {
            goto LABEL_56;
          }
          operator delete(v156[0]);
          if ((__dst[23] & 0x80000000) == 0)
          {
LABEL_57:
            v31 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
            if (v31)
              goto LABEL_62;
            goto LABEL_64;
          }
LABEL_61:
          operator delete(*(void **)__dst);
          v31 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
          if (v31)
          {
            do
            {
LABEL_62:
              v32 = v31;
              v31 = *(unsigned __int8 **)v31;
            }
            while (v31);
            goto LABEL_34;
          }
          do
          {
LABEL_64:
            v32 = (unsigned __int8 *)*((_QWORD *)v25 + 2);
            v51 = *(_QWORD *)v32 == (_QWORD)v25;
            v25 = v32;
          }
          while (!v51);
LABEL_34:
          v25 = v32;
        }
        while (v32 != v24);
      }
      sub_224527BAC((uint64_t)v151, (CFStringRef *)v165);
      sub_2231AEDB8((uint64_t)&v153, *(const void **)v165, (uint64_t)&v150);
      a1 = __s;
      v33 = *(std::__shared_weak_count **)&v165[8];
      if (*(_QWORD *)&v165[8])
      {
        v34 = (unint64_t *)(*(_QWORD *)&v165[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (v152 < 0)
        operator delete(v151[0]);
      *(_QWORD *)v165 = "cv3d.recon.";
      *(_QWORD *)&v165[8] = 11;
      v36 = v154[23];
      v37 = v154;
      if (v154[23] < 0)
      {
        v37 = *(_BYTE **)v154;
        v36 = *(_QWORD *)&v154[8];
      }
      *(_QWORD *)&v165[16] = v37;
      *(_QWORD *)&v165[24] = v36;
      sub_2231A9820((uint64_t)v165, (uint64_t)&v165[32], 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v38 = sub_2241471F8();
        v39 = v38[2];
        if (!v39)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v39 = v38[2];
        }
        v40 = *(_QWORD *)(v39 + 64);
        v41 = (std::mutex *)(v40 + 32);
        std::mutex::lock((std::mutex *)(v40 + 32));
        v43 = *(_QWORD *)(v40 + 96);
        v42 = *(_QWORD *)(v40 + 104);
        std::mutex::unlock(v41);
        if (v43 != v42)
        {
          sub_2241471F8();
          v44 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44))
          {
            memset(v165, 0, 32);
            *(_DWORD *)&v165[32] = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44))
            {
              v156[0] = (void *)(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v156[1] = (void *)2;
              v45 = sub_2241471F8();
              sub_2234277D4((uint64_t)v45, v44, (uint64_t)&v153, (uint64_t)&unk_2245C9EFE, (__int128 *)v156);
            }
            kdebug_trace();
          }
        }
      }
      memset(v165, 0, 32);
      *(_DWORD *)&v165[32] = 728325624;
      kdebug_trace();
      v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = __p.__r_.__value_.__l.__size_;
      if (v46 >= 0x11)
      {
        v47 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v48 = v47->__r_.__value_.__r.__words[0];
        v49 = v47->__r_.__value_.__l.__size_;
        v50 = v47->__r_.__value_.__s.__data_[16];
        v51 = v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL;
        if (v51 && v50 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v164 & 0x80000000) == 0)
        {
LABEL_103:
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
          if (!*((_QWORD *)&v153 + 1))
            goto LABEL_111;
LABEL_107:
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
          goto LABEL_111;
        }
      }
      else if ((v164 & 0x80000000) == 0)
      {
        goto LABEL_103;
      }
      operator delete(v163[0]);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      if (!*((_QWORD *)&v153 + 1))
        goto LABEL_111;
      goto LABEL_107;
    }
  }
LABEL_111:
  sub_223C0F3E0(v151);
  if (**((int **)v151[0] + 7) > 3)
    goto LABEL_233;
  v56 = *((unsigned __int8 *)v151[0] + 72);
  v57 = sub_22322F254((uint64_t)v151[0], "OSLogSurrogateAppender", 1, 0);
  v58 = v57;
  if (!v56 && v57 == 0)
    goto LABEL_233;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v144 = 3;
  v145 = "unknown file";
  v146 = 280;
  v148 = 0;
  v149 = 0;
  v147 = "unknown function";
  if (*((char *)a2 + 23) >= 0)
    v60 = (char *)a2;
  else
    v60 = (char *)*a2;
  __sa = v60;
  v61 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v63 = *(const char **)(v61 + 16);
    v62 = *(_QWORD *)(v61 + 24);
  }
  else
  {
    v62 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v63 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
  }
  v139 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
  v142 = a2;
  v64 = *((_QWORD *)a1 + 2);
  v65 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v165);
    sub_223199C58("com.apple.cv3d", (unint64_t)v165, byte_255788F40);
    if (v165[24] && (v165[23] & 0x80000000) != 0)
      operator delete(*(void **)v165);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v66 = byte_255788F40;
  else
    v66 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v67 = byte_255788F40[23];
  else
    v67 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)v165 = os_log_create(v66, v63);
  v68 = &v165[8];
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v67 >= 0x17)
  {
    v138 = v63;
    v69 = v64;
    v70 = v58;
    v71 = v61;
    v72 = v56;
    v73 = a1;
    v74 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v74 = v67 | 7;
    v75 = v74 + 1;
    v68 = operator new(v74 + 1);
    *(_QWORD *)&v165[16] = v67;
    *(_QWORD *)&v165[24] = v75 | 0x8000000000000000;
    *(_QWORD *)&v165[8] = v68;
    a1 = v73;
    v56 = v72;
    v61 = v71;
    v58 = v70;
    v64 = v69;
    v63 = v138;
    goto LABEL_136;
  }
  v165[31] = v67;
  if (v67)
LABEL_136:
    memmove(v68, v66, v67);
  v68[v67] = 0;
  v165[32] = 1;
  v76 = v166;
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v62 >= 0x17)
  {
    v78 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v78 = v62 | 7;
    v79 = v78 + 1;
    v76 = (void **)operator new(v78 + 1);
    v166[1] = (void *)v62;
    v167 = v79 | 0x8000000000000000;
    v166[0] = v76;
  }
  else
  {
    HIBYTE(v167) = v62;
    if (!v62)
    {
      LOBYTE(v166[0]) = 0;
      v168 = 1;
      v77 = *(NSObject **)v165;
      if ((SHIBYTE(v167) & 0x80000000) == 0)
        goto LABEL_141;
      goto LABEL_147;
    }
  }
  memmove(v76, v63, v62);
  *((_BYTE *)v76 + v62) = 0;
  v168 = 1;
  v77 = *(NSObject **)v165;
  if ((SHIBYTE(v167) & 0x80000000) == 0)
  {
LABEL_141:
    if (!v165[32])
      goto LABEL_150;
    goto LABEL_148;
  }
LABEL_147:
  operator delete(v166[0]);
  if (!v165[32])
    goto LABEL_150;
LABEL_148:
  if ((v165[31] & 0x80000000) != 0)
    operator delete(*(void **)&v165[8]);
LABEL_150:
  if (*(_QWORD *)v165)
    os_release(*(void **)v165);
  if (!v58 || !*(_QWORD *)(v58 + 24))
  {
    os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
    *(_QWORD *)v165 = 0x404100302;
    *(_WORD *)&v165[8] = 2080;
    *(_QWORD *)&v165[10] = __sa;
    *(_WORD *)&v165[18] = 2048;
    *(_QWORD *)&v165[20] = v64;
    v86 = (void *)_os_log_send_and_compose_impl();
    if (v86)
      free(v86);
    goto LABEL_223;
  }
  v80 = _os_log_pack_size();
  v81 = (std::__shared_weak_count_vtbl *)operator new(v80, (std::align_val_t)8uLL);
  v82 = (std::__shared_weak_count *)operator new();
  v82->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
  v82->__shared_owners_ = 0;
  v82->__shared_weak_owners_ = 0;
  v82[1].__vftable = v81;
  v156[0] = v81;
  v156[1] = v81;
  v158 = 0;
  v159 = 0;
  v157 = v82;
  v83 = strlen(__sa);
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v84 = v83;
  v136 = v56;
  v137 = v64;
  if (v83 >= 0x17)
  {
    v87 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v87 = v83 | 7;
    v88 = v87 + 1;
    v85 = operator new(v87 + 1);
    *(_QWORD *)&__dst[8] = v84;
    *(_QWORD *)&__dst[16] = v88 | 0x8000000000000000;
    *(_QWORD *)__dst = v85;
    goto LABEL_163;
  }
  __dst[23] = v83;
  v85 = __dst;
  if (v83)
LABEL_163:
    memcpy(v85, __sa, v84);
  v85[v84] = 0;
  v163[0] = *(void **)&__dst[8];
  v89 = *(_QWORD *)__dst;
  *(void **)((char *)v163 + 7) = *(void **)&__dst[15];
  v90 = __dst[23];
  v91 = (char *)operator new(0x38uLL);
  *((_QWORD *)v91 + 1) = 0;
  *((_QWORD *)v91 + 2) = 0;
  *((_QWORD *)v91 + 3) = off_24EC36038;
  *(_QWORD *)v91 = &off_24EC35FE8;
  v92 = v163[0];
  *((_QWORD *)v91 + 4) = v89;
  *((_QWORD *)v91 + 5) = v92;
  *(void **)(v91 + 47) = *(void **)((char *)v163 + 7);
  v91[55] = v90;
  v163[0] = 0;
  *(void **)((char *)v163 + 7) = 0;
  v93 = v159;
  v158 = v91 + 24;
  v159 = (std::__shared_weak_count *)v91;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  *(_OWORD *)v165 = *(_OWORD *)v156;
  v96 = v158;
  *(_QWORD *)&v165[16] = v157;
  if (v157)
  {
    v97 = (unint64_t *)&v157->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = v159;
  *(_QWORD *)&v165[24] = v96;
  *(_QWORD *)&v165[32] = v159;
  if (v159)
  {
    v100 = (unint64_t *)&v159->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    v166[0] = v96;
    do
      v102 = __ldaxr(v100);
    while (__stlxr(v102 - 1, v100));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  else
  {
    v166[0] = v96;
  }
  v103 = v157;
  if (v157)
  {
    v104 = (unint64_t *)&v157->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = *(_QWORD *)v165;
  if (*((char *)v166[0] + 31) >= 0)
    v107 = (char *)v166[0] + 8;
  else
    v107 = (char *)*((_QWORD *)v166[0] + 1);
  v108 = _os_log_pack_fill();
  *(_DWORD *)v108 = 68158210;
  *(_DWORD *)(v108 + 4) = 4;
  *(_WORD *)(v108 + 8) = 2080;
  *(_QWORD *)(v108 + 10) = v107;
  *(_WORD *)(v108 + 18) = 2048;
  *(_QWORD *)(v108 + 20) = v137;
  v109 = (char *)operator new();
  v110 = *(unsigned __int8 *)(v61 + 39);
  v111 = v139;
  if ((v110 & 0x80u) != 0)
  {
    v111 = *(_QWORD *)(v61 + 16);
    v110 = *(_QWORD *)(v61 + 24);
  }
  *(_QWORD *)v109 = v106;
  *(_OWORD *)(v109 + 8) = *(_OWORD *)&v165[8];
  *(_QWORD *)&v165[8] = 0;
  *(_QWORD *)&v165[16] = 0;
  *(_OWORD *)(v109 + 24) = *(_OWORD *)&v165[24];
  *(_QWORD *)&v165[24] = 0;
  *(_QWORD *)&v165[32] = 0;
  *((_QWORD *)v109 + 5) = v111;
  *((_QWORD *)v109 + 6) = v110;
  v109[56] = 1;
  *(_QWORD *)__dst = 0;
  v156[0] = v109;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), v156);
  v56 = v136;
  v112 = v156[0];
  v156[0] = 0;
  if (v112)
  {
    v113 = (std::__shared_weak_count *)*((_QWORD *)v112 + 4);
    if (v113)
    {
      v114 = (unint64_t *)&v113->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = (std::__shared_weak_count *)*((_QWORD *)v112 + 2);
    if (v116)
    {
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    MEMORY[0x227684CE8](v112, 0x10F0C40B62ED6C6);
    v119 = *(_QWORD *)__dst;
    *(_QWORD *)__dst = 0;
    if (v119)
    {
      v120 = *(std::__shared_weak_count **)(v119 + 32);
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v123 = *(std::__shared_weak_count **)(v119 + 16);
      if (v123)
      {
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      MEMORY[0x227684CE8](v119, 0x10F0C40B62ED6C6);
    }
  }
  v126 = *(std::__shared_weak_count **)&v165[32];
  if (*(_QWORD *)&v165[32])
  {
    v127 = (unint64_t *)(*(_QWORD *)&v165[32] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(std::__shared_weak_count **)&v165[16];
  if (*(_QWORD *)&v165[16])
  {
    v130 = (unint64_t *)(*(_QWORD *)&v165[16] + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
LABEL_223:
  if (v56)
  {
    if (*((char *)v142 + 23) >= 0)
      v132 = (const char *)v142;
    else
      v132 = (const char *)*v142;
    sub_22322C138((uint64_t)&__p, "VLM:GRS:CM:[%.4s] TOT:%lu", v132, *((_QWORD *)a1 + 2));
    sub_223182C08((uint64_t)&__p);
  }
  sub_223182C08((uint64_t)&__p);
  v133 = v149;
  if (v149)
  {
    v134 = (unint64_t *)&v149->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
LABEL_233:
  if ((v154[23] & 0x80000000) != 0)
    operator delete(*(void **)v154);
}

void sub_223C12E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (*(_BYTE *)(v56 - 152) && *(char *)(v56 - 153) < 0)
    operator delete(*(void **)(v56 - 176));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223C130F4(unsigned __int8 *a1, unint64_t *a2, _QWORD *a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  _BOOL4 v10;
  const char *v11;
  size_t v12;
  size_t v13;
  int v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  const void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::mutex *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  std::mutex *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  void **v54;
  void *v55;
  void *v56;
  int v57;
  BOOL v58;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  size_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  const void *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  std::mutex *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void **v76;
  void *v77;
  void **v78;
  void *v79;
  void **v80;
  void *v81;
  uint64_t v82;
  int v83;
  float v84;
  void *v85;
  void **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  std::mutex *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void **v94;
  void *v95;
  void **v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  void **v100;
  void *v101;
  void *v102;
  int v103;
  __n128 *v106;
  void **v107;
  size_t v108;
  void *v109;
  void **v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  std::mutex *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void **v118;
  void *v119;
  void **v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  void **v124;
  void *v125;
  void *v126;
  int v127;
  __n128 *v130;
  void **v131;
  size_t v132;
  void *v133;
  void **v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  std::mutex *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void **v142;
  void *v143;
  void **v144;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  void **v148;
  void *v149;
  void *v150;
  int v151;
  __n128 *v154;
  void **v155;
  size_t v156;
  void *v157;
  void **v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  std::mutex *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void **v166;
  void *v167;
  void **v168;
  void *v169;
  uint64_t v170;
  unint64_t v171;
  void **v172;
  void *v173;
  void *v174;
  int v175;
  __n128 *v178;
  void **v179;
  size_t v180;
  void *v181;
  void **v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  std::mutex *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  void **v190;
  void *v191;
  void **v192;
  void *v193;
  uint64_t v194;
  unint64_t v195;
  void **v196;
  void *v197;
  void *v198;
  int v199;
  __n128 *v202;
  void **v203;
  size_t v204;
  void *v205;
  void **v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  std::mutex *v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void **v214;
  void *v215;
  void **v216;
  void *v217;
  uint64_t v218;
  unint64_t v219;
  void **v220;
  void *v221;
  void *v222;
  int v223;
  __n128 *v226;
  void **v227;
  size_t v228;
  int v229;
  size_t v230;
  unint64_t v231;
  __int16 *v232;
  uint64_t v233;
  const void *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  std::mutex *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  void *v243;
  void **v244;
  void *v245;
  void **v246;
  void *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  _BYTE *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  std::mutex *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void **v259;
  void *v260;
  void **v261;
  void *v262;
  uint64_t v263;
  unint64_t v264;
  void **v265;
  void *v266;
  void *v267;
  int v268;
  __n128 *v271;
  void **v272;
  size_t v273;
  uint64_t v274;
  _BYTE *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  std::mutex *v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void **v283;
  void *v284;
  void **v285;
  void *v286;
  uint64_t v287;
  unint64_t v288;
  void **v289;
  void *v290;
  void *v291;
  int v292;
  __n128 *v295;
  void **v296;
  size_t v297;
  uint64_t v298;
  _BYTE *v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  std::mutex *v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  void **v307;
  void *v308;
  void **v309;
  void *v310;
  uint64_t v311;
  unint64_t v312;
  void **v313;
  void *v314;
  void *v315;
  int v316;
  __n128 *v319;
  void **v320;
  size_t v321;
  uint64_t v322;
  _BYTE *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  std::mutex *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  void **v331;
  void *v332;
  void **v333;
  void *v334;
  uint64_t v335;
  unint64_t v336;
  void **v337;
  void *v338;
  void *v339;
  int v340;
  __n128 *v343;
  void **v344;
  size_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  std::mutex *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  void *v354;
  void **v355;
  void *v356;
  void **v357;
  void *v358;
  uint64_t v359;
  char v360;
  char v361;
  int32x4_t v362;
  int32x4_t v363;
  float32x2_t v364;
  float32x4_t v365;
  float32x4_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  float32x4_t v370;
  int8x16_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  uint64_t v378;
  void *v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  std::mutex *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  __int128 v387;
  std::string *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  std::string::size_type size;
  std::string *v394;
  std::string::size_type v395;
  std::string::size_type v396;
  int v397;
  _BYTE *v400;
  uint64_t v401;
  uint64_t v402;
  void *v403;
  int v404;
  void *v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  std::mutex *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  void *v413;
  uint64_t v414;
  __int128 v415;
  std::string *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t v420;
  _QWORD *v421;
  float32x2_t *v422;
  unsigned __int8 *v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  __int128 *v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  float32x2_t *v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  _QWORD *v453;
  float32x2_t *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  char *v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  float32x2_t *v463;
  char *v464;
  __int128 v465;
  __int128 v466;
  float32x2_t *v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  char *v471;
  _QWORD *v472;
  float32x2_t *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  char *v478;
  char *v479;
  __int128 v480;
  __int128 v481;
  float32x2_t *v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  float32x2_t *v486;
  float32x2_t *v487;
  int32x4_t v488;
  float32x4_t v489;
  float32x2_t v490;
  int32x4_t v491;
  __int128 v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int32x4_t v496;
  float32x2_t v497;
  float32x2_t v498;
  float32x2_t v499;
  int32x4_t v500;
  float32x4_t v501;
  float32x2_t v502;
  int32x4_t v503;
  float32x2_t *v504;
  __int128 v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int32x4_t v509;
  float32x2_t v510;
  float32x2_t v511;
  float32x2_t v512;
  uint64_t *v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *p_shared_owners;
  unint64_t v517;
  __int128 v518;
  unint64_t *v519;
  unint64_t v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  int8x16_t v528;
  int8x16_t v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  __float2 v535;
  float32x4_t v536;
  float32x4_t v537;
  int8x16_t v538;
  float32x4_t v539;
  float32x4_t v540;
  int v541;
  unint64_t v542;
  unint64_t v543;
  char *v544;
  uint64_t v545;
  const char *v546;
  size_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unsigned __int8 v552;
  const char *v553;
  size_t v554;
  _BYTE *v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  _BYTE *v563;
  uint64_t v564;
  uint64_t v565;
  NSObject *v566;
  unint64_t v567;
  float32x4_t v568;
  float v569;
  float v570;
  float v571;
  float v572;
  uint64_t v573;
  uint64_t v574;
  size_t v575;
  void *v576;
  _QWORD *v577;
  size_t v578;
  size_t v579;
  _BYTE *v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  int v586;
  void *v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  char v592;
  _QWORD *v593;
  uint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  char *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  const char *v618;
  std::string::size_type v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  uint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  const char *v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  const char *v643;
  const char *v644;
  uint64_t v645;
  int v646;
  int v647;
  uint64_t v648;
  uint64_t *v649;
  uint64_t v650;
  char *__s;
  float32x2_t *v653;
  float32x2_t *v654;
  float v655;
  float32x4_t v656;
  float v657;
  uint64_t v658;
  int8x16_t v659;
  float32x4_t v660;
  float v661;
  int v662;
  unsigned __int8 *v663;
  _BYTE v665[30];
  __int16 v666;
  void *v667[12];
  int v668;
  void *v669;
  size_t v670;
  unsigned __int8 v671;
  __int128 v672;
  __int128 v673;
  int v674;
  std::string v675;
  void *v676[2];
  uint64_t v677;
  char v678;
  __int128 v679;
  char v680;
  char v681;
  void *v682[2];
  uint64_t v683;
  char v684;
  _OWORD v685[4];
  void *__src[2];
  uint64_t v687;
  void *v688;
  __int128 v689;
  __int128 v690;
  void *v691[2];
  uint64_t v692;
  std::string v693;
  char *v694;
  std::__shared_weak_count *v695;
  uint64_t v696;
  __int128 v697;
  void *__p[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  int v703;
  uint64_t v704;
  float32x2_t *v705;
  float32x2_t *v706;
  float32x2_t *v707;
  float32x2_t *v708;
  char *v709;
  char *v710;
  int32x2_t v711;
  int v712;
  uint64_t v713;
  float v714;
  _OWORD v715[3];
  float32x2_t v716;
  unsigned __int32 v717;
  int v718;
  __int128 v719;
  _BYTE v720[80];
  int v721;
  uint64_t v722;
  _BYTE __dst[48];
  _BYTE v724[20];
  __int16 v725;
  int v726;
  __int16 v727;
  int v728;
  __int16 v729;
  uint64_t v730;
  __int16 v731;
  uint64_t v732;
  __int16 v733;
  uint64_t v734;
  __int16 v735;
  uint64_t v736;
  __int16 v737;
  double v738;
  __int16 v739;
  double v740;
  __int16 v741;
  double v742;
  __int16 v743;
  double v744;
  __int16 v745;
  double v746;
  __int16 v747;
  double v748;
  _BYTE v749[56];
  __int128 v750;
  int v751;
  uint64_t v752;

  v752 = *MEMORY[0x24BDAC8D0];
  v662 = a5[16];
  v10 = v662 == 0;
  sub_223A62A3C(a5, (uint64_t)&v669);
  v658 = a6;
  if ((v671 & 0x80u) == 0)
    v11 = (const char *)&v669;
  else
    v11 = (const char *)v669;
  *(_QWORD *)__dst = 0;
  v12 = strnlen(v11, 8uLL);
  memcpy(__dst, v11, v12);
  v667[8] = *(void **)__dst;
  memset(&v667[9], 0, 24);
  v668 = 728333648;
  *(_QWORD *)__dst = 0;
  v13 = strnlen(v11, 8uLL);
  memcpy(__dst, v11, v13);
  kdebug_trace();
  v14 = (char)v671;
  if ((v671 & 0x80u) == 0)
    v15 = v671;
  else
    v15 = v670;
  v16 = v15 + 21;
  if (v15 + 21 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v667[5] = (void *)(v15 + 21);
    v667[6] = (void *)((v18 + 1) | 0x8000000000000000);
    v667[4] = operator new(v18 + 1);
    qmemcpy(v667[4], "Stats.KFCluster.IGRS.", 21);
    v17 = (char *)v667[4] + 21;
    goto LABEL_14;
  }
  HIDWORD(v667[6]) = 0;
  HIBYTE(v667[6]) = v15 + 21;
  qmemcpy(&v667[4], "Stats.KFCluster.IGRS.", 21);
  v17 = (char *)&v667[6] + 5;
  if (v15)
  {
LABEL_14:
    if (v14 >= 0)
      v19 = &v669;
    else
      v19 = v669;
    memmove(v17, v19, v15);
  }
  v17[v15] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v20 = sub_2241471F8();
    v21 = v20[2];
    if (!v21)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v21 = v20[2];
    }
    v22 = *(_QWORD *)(v21 + 64);
    v23 = (std::mutex *)(v22 + 32);
    std::mutex::lock((std::mutex *)(v22 + 32));
    v25 = *(_QWORD *)(v22 + 96);
    v24 = *(_QWORD *)(v22 + 104);
    std::mutex::unlock(v23);
    if (v25 != v24)
    {
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v26 = (void *)HIBYTE(v667[6]);
      v27 = &v667[4];
      if (SHIBYTE(v667[6]) < 0)
      {
        v27 = (void **)v667[4];
        v26 = v667[5];
      }
      *(_QWORD *)&__dst[16] = v27;
      *(_QWORD *)&__dst[24] = v26;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_2241471F8();
      v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v30 = v29;
      if (SBYTE7(v699) < 0)
      {
        operator delete(__p[0]);
        if (!v30)
          goto LABEL_137;
      }
      else if (!v29)
      {
        goto LABEL_137;
      }
      *(_QWORD *)&__dst[16] = 0;
      *(_QWORD *)&__dst[8] = 0;
      *(_QWORD *)__dst = &__dst[8];
      sub_2245314F4(__dst, __p);
      v715[0] = *(_OWORD *)__p;
      sub_22323DF84((uint64_t)__dst, *(char **)&__dst[8]);
      __dst[23] = 6;
      strcpy(__dst, "remesh");
      v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 20);
      sub_224527BAC((uint64_t)__dst, (CFStringRef *)__p);
      sub_223AC95C8((uint64_t)v715, __p[0], (uint64_t *)&v693);
      v31 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v32 = (unint64_t *)((char *)__p[1] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      __dst[23] = 7;
      strcpy(__dst, "invalid");
      v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 23);
      sub_224527BAC((uint64_t)__dst, (CFStringRef *)__p);
      sub_223AC95C8((uint64_t)v715, __p[0], (uint64_t *)&v693);
      v34 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v35 = (unint64_t *)((char *)__p[1] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      v720[23] = 8;
      strcpy(v720, "metadata");
      DWORD2(v699) = 0;
      sub_223C20108(__p, "GRS-[");
      std::to_string(&v693, a2[4]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " : ";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " : ";
      *(_QWORD *)&__dst[32] = " : ";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B68[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[3]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " | ";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " | ";
      *(_QWORD *)&__dst[32] = " | ";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B68[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[8]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " RL (";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " RL (";
      *(_QWORD *)&__dst[32] = " RL (";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B20[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[1]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " | ";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " | ";
      *(_QWORD *)&__dst[32] = " | ";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B68[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[6]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = ") LC (";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = ") LC (";
      *(_QWORD *)&__dst[32] = ") LC (";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B80[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[2]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " | ";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " | ";
      *(_QWORD *)&__dst[32] = " | ";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B68[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[7]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = ") EX (";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = ") EX (";
      *(_QWORD *)&__dst[32] = ") EX (";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B80[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, *a2);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = " | ";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = " | ";
      *(_QWORD *)&__dst[32] = " | ";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B68[DWORD2(v699)])(&v693, __p);
      std::to_string(&v693, a2[5]);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = &v693;
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = &v693;
      *(_QWORD *)&__dst[32] = &v693;
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)&v685[0] = __dst;
      ((void (*)(_OWORD *, void **))off_24EC60B50[DWORD2(v699)])(v685, __p);
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      *(_QWORD *)__dst = __p;
      *(_QWORD *)&__dst[8] = ")]";
      *(_QWORD *)&__dst[16] = __p;
      *(_QWORD *)&__dst[24] = ")]";
      *(_QWORD *)&__dst[32] = ")]";
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      v693.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
      ((void (*)(std::string *, void **))off_24EC60B98[DWORD2(v699)])(&v693, __p);
      if (DWORD2(v699) == -1)
        sub_22316DD70();
      *(_QWORD *)__dst = &v693;
      ((void (*)(_BYTE *__return_ptr, _BYTE *, void **))off_24EC60BB0[DWORD2(v699)])(v749, __dst, __p);
      if (DWORD2(v699) != -1)
        ((void (*)(_BYTE *, void **))off_24EC60B38[DWORD2(v699)])(__dst, __p);
      sub_224527BAC((uint64_t)v720, (CFStringRef *)__dst);
      sub_2231AEDB8((uint64_t)v715, *(const void **)__dst, (uint64_t)v749);
      v37 = *(std::__shared_weak_count **)&__dst[8];
      if (*(_QWORD *)&__dst[8])
      {
        v38 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if ((v749[23] & 0x80000000) != 0)
        operator delete(*(void **)v749);
      if ((v720[23] & 0x80000000) != 0)
        operator delete(*(void **)v720);
      BYTE7(v699) = 14;
      strcpy((char *)__p, "slam_timestamp");
      if (*(_BYTE *)(a4 + 8))
      {
        *(double *)v749 = (double)*(uint64_t *)a4 / 1000000000.0;
        *(_DWORD *)&__dst[24] = 0;
        sub_2233B45E8((uint64_t)v720, (uint64_t)__dst, (double *)v749);
        if (*(_DWORD *)&__dst[24] == -1)
          sub_22316DD70();
        *(_QWORD *)v720 = v685;
        ((void (*)(std::string *__return_ptr, _BYTE *, _BYTE *))off_24EC60BB0[*(unsigned int *)&__dst[24]])(&v693, v720, __dst);
        if (*(_DWORD *)&__dst[24] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24EC60B38[*(unsigned int *)&__dst[24]])(v720, __dst);
      }
      else
      {
        *((_BYTE *)&v693.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v693, "nullopt");
      }
      sub_224527BAC((uint64_t)__p, (CFStringRef *)__dst);
      sub_2231AEDB8((uint64_t)v715, *(const void **)__dst, (uint64_t)&v693);
      v40 = *(std::__shared_weak_count **)&__dst[8];
      if (*(_QWORD *)&__dst[8])
      {
        v41 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v693.__r_.__value_.__l.__data_);
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v43 = (void *)HIBYTE(v667[6]);
      v44 = &v667[4];
      if (SHIBYTE(v667[6]) < 0)
      {
        v44 = (void **)v667[4];
        v43 = v667[5];
      }
      *(_QWORD *)&__dst[16] = v44;
      *(_QWORD *)&__dst[24] = v43;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v45 = sub_2241471F8();
        v46 = v45[2];
        if (!v46)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v46 = v45[2];
        }
        v47 = *(_QWORD *)(v46 + 64);
        v48 = (std::mutex *)(v47 + 32);
        std::mutex::lock((std::mutex *)(v47 + 32));
        v50 = *(_QWORD *)(v47 + 96);
        v49 = *(_QWORD *)(v47 + 104);
        std::mutex::unlock(v48);
        if (v50 != v49)
        {
          sub_2241471F8();
          v51 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
            {
              v693.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v693.__r_.__value_.__l.__size_ = 2;
              v52 = sub_2241471F8();
              sub_2234277D4((uint64_t)v52, v51, (uint64_t)v715, (uint64_t)&unk_2245C9EFE, (__int128 *)&v693);
            }
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v53 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v53 = (unint64_t)__p[1];
      if (v53 >= 0x11)
      {
        v54 = __p;
        if (SBYTE7(v699) < 0)
          v54 = (void **)__p[0];
        v55 = *v54;
        v56 = v54[1];
        v57 = *((unsigned __int8 *)v54 + 16);
        v58 = v55 == (void *)0x6365722E64337663 && v56 == (void *)0x73746174532E6E6FLL;
        if (v58 && v57 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v715[0] + 1);
      if (*((_QWORD *)&v715[0] + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v715[0] + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
  }
LABEL_137:
  v63 = (char)v671;
  if ((v671 & 0x80u) == 0)
    v64 = v671;
  else
    v64 = v670;
  v65 = v64 + 34;
  if (v64 + 34 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v65 <= 0x16)
  {
    qmemcpy(v667, "Stats.KFCluster.IGRS.graph_update.", 34);
    v66 = (char *)&v667[4] + 2;
LABEL_146:
    if (v63 >= 0)
      v68 = &v669;
    else
      v68 = v669;
    memmove(v66, v68, v64);
    goto LABEL_150;
  }
  v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v65 | 7) != 0x17)
    v67 = v65 | 7;
  v667[1] = (void *)(v64 + 34);
  v667[2] = (void *)((v67 + 1) | 0x8000000000000000);
  v667[0] = operator new(v67 + 1);
  qmemcpy(v667[0], "Stats.KFCluster.IGRS.graph_update.", 34);
  v66 = (char *)v667[0] + 34;
  if (v64)
    goto LABEL_146;
LABEL_150:
  v66[v64] = 0;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v69 = sub_2241471F8();
    v70 = v69[2];
    if (!v70)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v70 = v69[2];
    }
    v71 = *(_QWORD *)(v70 + 64);
    v72 = (std::mutex *)(v71 + 32);
    std::mutex::lock((std::mutex *)(v71 + 32));
    v74 = *(_QWORD *)(v71 + 96);
    v73 = *(_QWORD *)(v71 + 104);
    std::mutex::unlock(v72);
    if (v74 != v73)
    {
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v75 = (void *)HIBYTE(v667[2]);
      v76 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v76 = (void **)v667[0];
        v75 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v76;
      *(_QWORD *)&__dst[24] = v75;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      v77 = (void *)BYTE7(v699);
      v78 = (void **)__p[0];
      v79 = __p[1];
      sub_2241471F8();
      if ((char)v77 >= 0)
        v80 = __p;
      else
        v80 = v78;
      if ((char)v77 >= 0)
        v81 = v77;
      else
        v81 = v79;
      v82 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v80, v81);
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82) & v10;
      if (SBYTE7(v699) < 0)
      {
        operator delete(__p[0]);
        if (!v83)
          goto LABEL_392;
      }
      else if (!v83)
      {
        goto LABEL_392;
      }
      if ((*((_DWORD *)a1 + 17) - 1) >= 3)
        v84 = 0.0;
      else
        v84 = 1.0;
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v85 = (void *)HIBYTE(v667[2]);
      v86 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v86 = (void **)v667[0];
        v85 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v86;
      *(_QWORD *)&__dst[24] = v85;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v87 = sub_2241471F8();
        v88 = v87[2];
        if (!v88)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v88 = v87[2];
        }
        v89 = *(_QWORD *)(v88 + 64);
        v90 = (std::mutex *)(v89 + 32);
        std::mutex::lock((std::mutex *)(v89 + 32));
        v92 = *(_QWORD *)(v89 + 96);
        v91 = *(_QWORD *)(v89 + 104);
        std::mutex::unlock(v90);
        if (v92 != v91)
        {
          v93 = (void *)BYTE7(v699);
          v94 = (void **)__p[0];
          v95 = __p[1];
          sub_2241471F8();
          v96 = (char)v93 >= 0 ? __p : v94;
          v97 = (char)v93 >= 0 ? v93 : v95;
          v98 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v96, v97);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            *(float *)&v693.__r_.__value_.__l.__data_ = v84
                                                      * (float)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 13)
                                                                                          - *((_QWORD *)a1 + 12)) >> 4);
            sub_22345EECC((double *)&qword_255788F20, v98, (float *)&v693, "pose update (grs)");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v99 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v99 = (unint64_t)__p[1];
      if (v99 >= 0x11)
      {
        v100 = __p;
        if (SBYTE7(v699) < 0)
          v100 = (void **)__p[0];
        v101 = *v100;
        v102 = v100[1];
        v103 = *((unsigned __int8 *)v100 + 16);
        if (v101 == (void *)0x6365722E64337663 && v102 == (void *)0x73746174532E6E6FLL && v103 == 46)
        {
          v106 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v107 = __p;
          else
            v107 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v108 = BYTE7(v699);
          else
            v108 = (size_t)__p[1];
          *(float *)&v693.__r_.__value_.__l.__data_ = v84
                                                    * (float)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 13)
                                                                                        - *((_QWORD *)a1 + 12)) >> 4);
          sub_2231897A8((uint64_t *)v106, v107, v108, (float *)&v693, (uint64_t)"pose update (grs)", 17);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v109 = (void *)HIBYTE(v667[2]);
      v110 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v110 = (void **)v667[0];
        v109 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v110;
      *(_QWORD *)&__dst[24] = v109;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v111 = sub_2241471F8();
        v112 = v111[2];
        if (!v112)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v112 = v111[2];
        }
        v113 = *(_QWORD *)(v112 + 64);
        v114 = (std::mutex *)(v113 + 32);
        std::mutex::lock((std::mutex *)(v113 + 32));
        v116 = *(_QWORD *)(v113 + 96);
        v115 = *(_QWORD *)(v113 + 104);
        std::mutex::unlock(v114);
        if (v116 != v115)
        {
          v117 = (void *)BYTE7(v699);
          v118 = (void **)__p[0];
          v119 = __p[1];
          sub_2241471F8();
          v120 = (char)v117 >= 0 ? __p : v118;
          v121 = (char)v117 >= 0 ? v117 : v119;
          v122 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v120, v121);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            v693.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 4;
            sub_223197768((double *)&qword_255788F20, v122, (uint64_t *)&v693, "pose update");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v123 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v123 = (unint64_t)__p[1];
      if (v123 >= 0x11)
      {
        v124 = __p;
        if (SBYTE7(v699) < 0)
          v124 = (void **)__p[0];
        v125 = *v124;
        v126 = v124[1];
        v127 = *((unsigned __int8 *)v124 + 16);
        if (v125 == (void *)0x6365722E64337663 && v126 == (void *)0x73746174532E6E6FLL && v127 == 46)
        {
          v130 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v131 = __p;
          else
            v131 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v132 = BYTE7(v699);
          else
            v132 = (size_t)__p[1];
          v693.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 4;
          sub_22318760C((uint64_t *)v130, v131, v132, (uint64_t *)&v693, (uint64_t)"pose update", 11);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v133 = (void *)HIBYTE(v667[2]);
      v134 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v134 = (void **)v667[0];
        v133 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v134;
      *(_QWORD *)&__dst[24] = v133;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v135 = sub_2241471F8();
        v136 = v135[2];
        if (!v136)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v136 = v135[2];
        }
        v137 = *(_QWORD *)(v136 + 64);
        v138 = (std::mutex *)(v137 + 32);
        std::mutex::lock((std::mutex *)(v137 + 32));
        v140 = *(_QWORD *)(v137 + 96);
        v139 = *(_QWORD *)(v137 + 104);
        std::mutex::unlock(v138);
        if (v140 != v139)
        {
          v141 = (void *)BYTE7(v699);
          v142 = (void **)__p[0];
          v143 = __p[1];
          sub_2241471F8();
          v144 = (char)v141 >= 0 ? __p : v142;
          v145 = (char)v141 >= 0 ? v141 : v143;
          v146 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v144, v145);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v146 + 24))(v146))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            v693.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15)) >> 4;
            sub_223C189F0(v146, (uint64_t *)&v693);
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v147 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v147 = (unint64_t)__p[1];
      if (v147 >= 0x11)
      {
        v148 = __p;
        if (SBYTE7(v699) < 0)
          v148 = (void **)__p[0];
        v149 = *v148;
        v150 = v148[1];
        v151 = *((unsigned __int8 *)v148 + 16);
        if (v149 == (void *)0x6365722E64337663 && v150 == (void *)0x73746174532E6E6FLL && v151 == 46)
        {
          v154 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v155 = __p;
          else
            v155 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v156 = BYTE7(v699);
          else
            v156 = (size_t)__p[1];
          v693.__r_.__value_.__r.__words[0] = (uint64_t)(*((_QWORD *)a1 + 16) - *((_QWORD *)a1 + 15)) >> 4;
          sub_22318760C((uint64_t *)v154, v155, v156, (uint64_t *)&v693, (uint64_t)"external", 8);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v157 = (void *)HIBYTE(v667[2]);
      v158 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v158 = (void **)v667[0];
        v157 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v158;
      *(_QWORD *)&__dst[24] = v157;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v159 = sub_2241471F8();
        v160 = v159[2];
        if (!v160)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v160 = v159[2];
        }
        v161 = *(_QWORD *)(v160 + 64);
        v162 = (std::mutex *)(v161 + 32);
        std::mutex::lock((std::mutex *)(v161 + 32));
        v164 = *(_QWORD *)(v161 + 96);
        v163 = *(_QWORD *)(v161 + 104);
        std::mutex::unlock(v162);
        if (v164 != v163)
        {
          v165 = (void *)BYTE7(v699);
          v166 = (void **)__p[0];
          v167 = __p[1];
          sub_2241471F8();
          v168 = (char)v165 >= 0 ? __p : v166;
          v169 = (char)v165 >= 0 ? v165 : v167;
          v170 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v168, v169);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v170 + 24))(v170))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            *(float *)&v693.__r_.__value_.__l.__data_ = v84
                                                      * (float)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 16)
                                                                                          - *((_QWORD *)a1 + 15)) >> 4);
            sub_223865D90((double *)&qword_255788F20, v170, (float *)&v693, "external (grs)");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v171 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v171 = (unint64_t)__p[1];
      if (v171 >= 0x11)
      {
        v172 = __p;
        if (SBYTE7(v699) < 0)
          v172 = (void **)__p[0];
        v173 = *v172;
        v174 = v172[1];
        v175 = *((unsigned __int8 *)v172 + 16);
        if (v173 == (void *)0x6365722E64337663 && v174 == (void *)0x73746174532E6E6FLL && v175 == 46)
        {
          v178 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v179 = __p;
          else
            v179 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v180 = BYTE7(v699);
          else
            v180 = (size_t)__p[1];
          *(float *)&v693.__r_.__value_.__l.__data_ = v84
                                                    * (float)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 16)
                                                                                        - *((_QWORD *)a1 + 15)) >> 4);
          sub_2231897A8((uint64_t *)v178, v179, v180, (float *)&v693, (uint64_t)"external (grs)", 14);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v181 = (void *)HIBYTE(v667[2]);
      v182 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v182 = (void **)v667[0];
        v181 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v182;
      *(_QWORD *)&__dst[24] = v181;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v183 = sub_2241471F8();
        v184 = v183[2];
        if (!v184)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v184 = v183[2];
        }
        v185 = *(_QWORD *)(v184 + 64);
        v186 = (std::mutex *)(v185 + 32);
        std::mutex::lock((std::mutex *)(v185 + 32));
        v188 = *(_QWORD *)(v185 + 96);
        v187 = *(_QWORD *)(v185 + 104);
        std::mutex::unlock(v186);
        if (v188 != v187)
        {
          v189 = (void *)BYTE7(v699);
          v190 = (void **)__p[0];
          v191 = __p[1];
          sub_2241471F8();
          v192 = (char)v189 >= 0 ? __p : v190;
          v193 = (char)v189 >= 0 ? v189 : v191;
          v194 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v192, v193);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 24))(v194))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 20);
            sub_223875FE8((double *)&qword_255788F20, v194, (uint64_t *)&v693, "remesh");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v195 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v195 = (unint64_t)__p[1];
      if (v195 >= 0x11)
      {
        v196 = __p;
        if (SBYTE7(v699) < 0)
          v196 = (void **)__p[0];
        v197 = *v196;
        v198 = v196[1];
        v199 = *((unsigned __int8 *)v196 + 16);
        if (v197 == (void *)0x6365722E64337663 && v198 == (void *)0x73746174532E6E6FLL && v199 == 46)
        {
          v202 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v203 = __p;
          else
            v203 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v204 = BYTE7(v699);
          else
            v204 = (size_t)__p[1];
          v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 20);
          sub_22318760C((uint64_t *)v202, v203, v204, (uint64_t *)&v693, (uint64_t)"remesh", 6);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
      *(_QWORD *)__dst = "cv3d.recon.";
      *(_QWORD *)&__dst[8] = 11;
      v205 = (void *)HIBYTE(v667[2]);
      v206 = v667;
      if (SHIBYTE(v667[2]) < 0)
      {
        v206 = (void **)v667[0];
        v205 = v667[1];
      }
      *(_QWORD *)&__dst[16] = v206;
      *(_QWORD *)&__dst[24] = v205;
      sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v207 = sub_2241471F8();
        v208 = v207[2];
        if (!v208)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v208 = v207[2];
        }
        v209 = *(_QWORD *)(v208 + 64);
        v210 = (std::mutex *)(v209 + 32);
        std::mutex::lock((std::mutex *)(v209 + 32));
        v212 = *(_QWORD *)(v209 + 96);
        v211 = *(_QWORD *)(v209 + 104);
        std::mutex::unlock(v210);
        if (v212 != v211)
        {
          v213 = (void *)BYTE7(v699);
          v214 = (void **)__p[0];
          v215 = __p[1];
          sub_2241471F8();
          v216 = (char)v213 >= 0 ? __p : v214;
          v217 = (char)v213 >= 0 ? v213 : v215;
          v218 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v216, v217);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 24))(v218))
          {
            memset(__dst, 0, 32);
            *(_DWORD *)&__dst[32] = 728325608;
            kdebug_trace();
            v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 23);
            sub_223189CA8((double *)&qword_255788F20, v218, (uint64_t *)&v693, "invalid");
            kdebug_trace();
          }
        }
      }
      memset(__dst, 0, 32);
      *(_DWORD *)&__dst[32] = 728325624;
      kdebug_trace();
      v219 = BYTE7(v699);
      if (SBYTE7(v699) < 0)
        v219 = (unint64_t)__p[1];
      if (v219 >= 0x11)
      {
        v220 = __p;
        if (SBYTE7(v699) < 0)
          v220 = (void **)__p[0];
        v221 = *v220;
        v222 = v220[1];
        v223 = *((unsigned __int8 *)v220 + 16);
        if (v221 == (void *)0x6365722E64337663 && v222 == (void *)0x73746174532E6E6FLL && v223 == 46)
        {
          v226 = sub_223187510();
          if ((SBYTE7(v699) & 0x80u) == 0)
            v227 = __p;
          else
            v227 = (void **)__p[0];
          if ((SBYTE7(v699) & 0x80u) == 0)
            v228 = BYTE7(v699);
          else
            v228 = (size_t)__p[1];
          v693.__r_.__value_.__r.__words[0] = *((_QWORD *)a1 + 23);
          sub_22318760C((uint64_t *)v226, v227, v228, (uint64_t *)&v693, (uint64_t)"invalid", 7);
        }
      }
      kdebug_trace();
      if (SBYTE7(v699) < 0)
        operator delete(__p[0]);
    }
  }
LABEL_392:
  v229 = (char)v671;
  if ((v671 & 0x80u) == 0)
    v230 = v671;
  else
    v230 = v670;
  v231 = v230 + 30;
  if (v230 + 30 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v231 > 0x16)
  {
    v233 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v233 = v231 | 7;
    *(_QWORD *)&v665[8] = v230 + 30;
    *(_QWORD *)&v665[16] = (v233 + 1) | 0x8000000000000000;
    *(_QWORD *)v665 = operator new(v233 + 1);
    qmemcpy(*(void **)v665, "Stats.KFCluster.IGRS.metadata.", 30);
    v232 = (__int16 *)(*(_QWORD *)v665 + 30);
    if (!v230)
      goto LABEL_405;
  }
  else
  {
    qmemcpy(v665, "Stats.KFCluster.IGRS.metadata.", sizeof(v665));
    v232 = &v666;
  }
  if (v229 >= 0)
    v234 = &v669;
  else
    v234 = v669;
  memmove(v232, v234, v230);
LABEL_405:
  *((_BYTE *)v232 + v230) = 0;
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_569;
  v235 = sub_2241471F8();
  v236 = v235[2];
  if (!v236)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v236 = v235[2];
  }
  v237 = *(_QWORD *)(v236 + 64);
  v238 = (std::mutex *)(v237 + 32);
  std::mutex::lock((std::mutex *)(v237 + 32));
  v240 = *(_QWORD *)(v237 + 96);
  v239 = *(_QWORD *)(v237 + 104);
  std::mutex::unlock(v238);
  if (v240 == v239)
    goto LABEL_569;
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v241 = v665[23];
  v242 = v665;
  if (v665[23] < 0)
  {
    v242 = *(_BYTE **)v665;
    v241 = *(_QWORD *)&v665[8];
  }
  *(_QWORD *)&__dst[16] = v242;
  *(_QWORD *)&__dst[24] = v241;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  v243 = (void *)BYTE7(v699);
  v244 = (void **)__p[0];
  v245 = __p[1];
  sub_2241471F8();
  v246 = (char)v243 >= 0 ? __p : v244;
  v247 = (char)v243 >= 0 ? v243 : v245;
  v248 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v246, v247);
  v249 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 24))(v248) & v10;
  if (SBYTE7(v699) < 0)
  {
    operator delete(__p[0]);
    if (!v249)
      goto LABEL_569;
  }
  else if (!v249)
  {
    goto LABEL_569;
  }
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v250 = v665[23];
  v251 = v665;
  if (v665[23] < 0)
  {
    v251 = *(_BYTE **)v665;
    v250 = *(_QWORD *)&v665[8];
  }
  *(_QWORD *)&__dst[16] = v251;
  *(_QWORD *)&__dst[24] = v250;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v252 = sub_2241471F8();
    v253 = v252[2];
    if (!v253)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v253 = v252[2];
    }
    v254 = *(_QWORD *)(v253 + 64);
    v255 = (std::mutex *)(v254 + 32);
    std::mutex::lock((std::mutex *)(v254 + 32));
    v257 = *(_QWORD *)(v254 + 96);
    v256 = *(_QWORD *)(v254 + 104);
    std::mutex::unlock(v255);
    if (v257 != v256)
    {
      v258 = (void *)BYTE7(v699);
      v259 = (void **)__p[0];
      v260 = __p[1];
      sub_2241471F8();
      v261 = (char)v258 >= 0 ? __p : v259;
      v262 = (char)v258 >= 0 ? v258 : v260;
      v263 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v261, v262);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v263 + 24))(v263))
      {
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325608;
        kdebug_trace();
        sub_223A6AD5C((double *)&qword_255788F20, v263, (uint64_t *)a2, "#External");
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  v264 = BYTE7(v699);
  if (SBYTE7(v699) < 0)
    v264 = (unint64_t)__p[1];
  if (v264 >= 0x11)
  {
    v265 = __p;
    if (SBYTE7(v699) < 0)
      v265 = (void **)__p[0];
    v266 = *v265;
    v267 = v265[1];
    v268 = *((unsigned __int8 *)v265 + 16);
    if (v266 == (void *)0x6365722E64337663 && v267 == (void *)0x73746174532E6E6FLL && v268 == 46)
    {
      v271 = sub_223187510();
      if ((SBYTE7(v699) & 0x80u) == 0)
        v272 = __p;
      else
        v272 = (void **)__p[0];
      if ((SBYTE7(v699) & 0x80u) == 0)
        v273 = BYTE7(v699);
      else
        v273 = (size_t)__p[1];
      sub_22365B208(v271, v272, v273, (uint64_t *)a2, (uint64_t)"#External", 9);
    }
  }
  kdebug_trace();
  if (SBYTE7(v699) < 0)
    operator delete(__p[0]);
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v274 = v665[23];
  v275 = v665;
  if (v665[23] < 0)
  {
    v275 = *(_BYTE **)v665;
    v274 = *(_QWORD *)&v665[8];
  }
  *(_QWORD *)&__dst[16] = v275;
  *(_QWORD *)&__dst[24] = v274;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v276 = sub_2241471F8();
    v277 = v276[2];
    if (!v277)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v277 = v276[2];
    }
    v278 = *(_QWORD *)(v277 + 64);
    v279 = (std::mutex *)(v278 + 32);
    std::mutex::lock((std::mutex *)(v278 + 32));
    v281 = *(_QWORD *)(v278 + 96);
    v280 = *(_QWORD *)(v278 + 104);
    std::mutex::unlock(v279);
    if (v281 != v280)
    {
      v282 = (void *)BYTE7(v699);
      v283 = (void **)__p[0];
      v284 = __p[1];
      sub_2241471F8();
      v285 = (char)v282 >= 0 ? __p : v283;
      v286 = (char)v282 >= 0 ? v282 : v284;
      v287 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v285, v286);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v287 + 24))(v287))
      {
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325608;
        kdebug_trace();
        sub_223C0D13C(v287, (uint64_t *)a2 + 1, "#Relocalization");
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  v288 = BYTE7(v699);
  if (SBYTE7(v699) < 0)
    v288 = (unint64_t)__p[1];
  if (v288 >= 0x11)
  {
    v289 = __p;
    if (SBYTE7(v699) < 0)
      v289 = (void **)__p[0];
    v290 = *v289;
    v291 = v289[1];
    v292 = *((unsigned __int8 *)v289 + 16);
    if (v290 == (void *)0x6365722E64337663 && v291 == (void *)0x73746174532E6E6FLL && v292 == 46)
    {
      v295 = sub_223187510();
      if ((SBYTE7(v699) & 0x80u) == 0)
        v296 = __p;
      else
        v296 = (void **)__p[0];
      if ((SBYTE7(v699) & 0x80u) == 0)
        v297 = BYTE7(v699);
      else
        v297 = (size_t)__p[1];
      sub_22365B208(v295, v296, v297, (uint64_t *)a2 + 1, (uint64_t)"#Relocalization", 15);
    }
  }
  kdebug_trace();
  if (SBYTE7(v699) < 0)
    operator delete(__p[0]);
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v298 = v665[23];
  v299 = v665;
  if (v665[23] < 0)
  {
    v299 = *(_BYTE **)v665;
    v298 = *(_QWORD *)&v665[8];
  }
  *(_QWORD *)&__dst[16] = v299;
  *(_QWORD *)&__dst[24] = v298;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v300 = sub_2241471F8();
    v301 = v300[2];
    if (!v301)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v301 = v300[2];
    }
    v302 = *(_QWORD *)(v301 + 64);
    v303 = (std::mutex *)(v302 + 32);
    std::mutex::lock((std::mutex *)(v302 + 32));
    v305 = *(_QWORD *)(v302 + 96);
    v304 = *(_QWORD *)(v302 + 104);
    std::mutex::unlock(v303);
    if (v305 != v304)
    {
      v306 = (void *)BYTE7(v699);
      v307 = (void **)__p[0];
      v308 = __p[1];
      sub_2241471F8();
      v309 = (char)v306 >= 0 ? __p : v307;
      v310 = (char)v306 >= 0 ? v306 : v308;
      v311 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v309, v310);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v311 + 24))(v311))
      {
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325608;
        kdebug_trace();
        sub_223C0CFF4(v311, (uint64_t *)a2 + 2, "#LoopClosure");
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  v312 = BYTE7(v699);
  if (SBYTE7(v699) < 0)
    v312 = (unint64_t)__p[1];
  if (v312 >= 0x11)
  {
    v313 = __p;
    if (SBYTE7(v699) < 0)
      v313 = (void **)__p[0];
    v314 = *v313;
    v315 = v313[1];
    v316 = *((unsigned __int8 *)v313 + 16);
    if (v314 == (void *)0x6365722E64337663 && v315 == (void *)0x73746174532E6E6FLL && v316 == 46)
    {
      v319 = sub_223187510();
      if ((SBYTE7(v699) & 0x80u) == 0)
        v320 = __p;
      else
        v320 = (void **)__p[0];
      if ((SBYTE7(v699) & 0x80u) == 0)
        v321 = BYTE7(v699);
      else
        v321 = (size_t)__p[1];
      sub_22365B208(v319, v320, v321, (uint64_t *)a2 + 2, (uint64_t)"#LoopClosure", 12);
    }
  }
  kdebug_trace();
  if (SBYTE7(v699) < 0)
    operator delete(__p[0]);
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v322 = v665[23];
  v323 = v665;
  if (v665[23] < 0)
  {
    v323 = *(_BYTE **)v665;
    v322 = *(_QWORD *)&v665[8];
  }
  *(_QWORD *)&__dst[16] = v323;
  *(_QWORD *)&__dst[24] = v322;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v324 = sub_2241471F8();
    v325 = v324[2];
    if (!v325)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v325 = v324[2];
    }
    v326 = *(_QWORD *)(v325 + 64);
    v327 = (std::mutex *)(v326 + 32);
    std::mutex::lock((std::mutex *)(v326 + 32));
    v329 = *(_QWORD *)(v326 + 96);
    v328 = *(_QWORD *)(v326 + 104);
    std::mutex::unlock(v327);
    if (v329 != v328)
    {
      v330 = (void *)BYTE7(v699);
      v331 = (void **)__p[0];
      v332 = __p[1];
      sub_2241471F8();
      v333 = (char)v330 >= 0 ? __p : v331;
      v334 = (char)v330 >= 0 ? v330 : v332;
      v335 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v333, v334);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v335 + 24))(v335))
      {
        memset(__dst, 0, 32);
        *(_DWORD *)&__dst[32] = 728325608;
        kdebug_trace();
        sub_223C0CD70(v335, (uint64_t *)a2 + 3, "Coordinate ID");
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  v336 = BYTE7(v699);
  if (SBYTE7(v699) < 0)
    v336 = (unint64_t)__p[1];
  if (v336 >= 0x11)
  {
    v337 = __p;
    if (SBYTE7(v699) < 0)
      v337 = (void **)__p[0];
    v338 = *v337;
    v339 = v337[1];
    v340 = *((unsigned __int8 *)v337 + 16);
    if (v338 == (void *)0x6365722E64337663 && v339 == (void *)0x73746174532E6E6FLL && v340 == 46)
    {
      v343 = sub_223187510();
      if ((SBYTE7(v699) & 0x80u) == 0)
        v344 = __p;
      else
        v344 = (void **)__p[0];
      if ((SBYTE7(v699) & 0x80u) == 0)
        v345 = BYTE7(v699);
      else
        v345 = (size_t)__p[1];
      sub_22365B208(v343, v344, v345, (uint64_t *)a2 + 3, (uint64_t)"Coordinate ID", 13);
    }
  }
  kdebug_trace();
  if ((SBYTE7(v699) & 0x80000000) == 0)
  {
LABEL_569:
    if (!a5[16])
      goto LABEL_803;
    goto LABEL_570;
  }
  operator delete(__p[0]);
  if (!a5[16])
    goto LABEL_803;
LABEL_570:
  v688 = operator new(0x28uLL);
  v689 = xmmword_2245B8E00;
  strcpy((char *)v688, "MeshingEngine.KFCluster.TrackedAnchors");
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_801;
  v346 = sub_2241471F8();
  v347 = v346[2];
  if (!v347)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_965;
    }
    v347 = v346[2];
  }
  v348 = *(_QWORD *)(v347 + 64);
  v349 = (std::mutex *)(v348 + 32);
  std::mutex::lock((std::mutex *)(v348 + 32));
  v351 = *(_QWORD *)(v348 + 96);
  v350 = *(_QWORD *)(v348 + 104);
  std::mutex::unlock(v349);
  if (v351 == v350)
    goto LABEL_801;
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v352 = HIBYTE(v689);
  v353 = &v688;
  if (v689 < 0)
  {
    v353 = v688;
    v352 = v689;
  }
  *(_QWORD *)&__dst[16] = v353;
  *(_QWORD *)&__dst[24] = v352;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, (std::string *)__p);
  v354 = (void *)BYTE7(v699);
  v355 = (void **)__p[0];
  v356 = __p[1];
  sub_2241471F8();
  if ((char)v354 >= 0)
    v357 = __p;
  else
    v357 = v355;
  if ((char)v354 >= 0)
    v358 = v354;
  else
    v358 = v356;
  v359 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v357, v358);
  v360 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v359 + 24))(v359);
  v361 = v360;
  if (SBYTE7(v699) < 0)
  {
    operator delete(__p[0]);
    if ((v361 & 1) == 0)
      goto LABEL_801;
  }
  else if ((v360 & 1) == 0)
  {
    goto LABEL_801;
  }
  if (!a5[16]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemUtils.cpp", 72, (uint64_t)"cid.GetId().has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_965:
    abort();
  }
  sub_223A62A3C(a5, (uint64_t)__src);
  v362.i64[0] = *(_QWORD *)v658;
  v362.i32[2] = *(_DWORD *)(v658 + 8);
  v363.i64[0] = *(_QWORD *)(v658 + 16);
  v363.i32[2] = *(_DWORD *)(v658 + 24);
  v364.i32[0] = *(_DWORD *)(v658 + 40);
  v365.i64[0] = vzip1q_s32(v362, v363).u64[0];
  v366.i64[0] = *(_QWORD *)(v658 + 48);
  v366.i32[2] = *(_DWORD *)(v658 + 56);
  v367 = (int8x16_t)vnegq_f32(v366);
  v368 = (int8x16_t)vtrn2q_s32(v362, v363);
  v368.i32[2] = HIDWORD(*(_QWORD *)(v658 + 32));
  v369 = (int8x16_t)vzip2q_s32(v362, v363);
  *(float32x2_t *)v370.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v365.f32, *(float *)v367.i32), *(float32x2_t *)v368.i8, *(float32x2_t *)v366.f32, 1), *(float32x2_t *)v369.i8, v366, 2);
  v369.i32[2] = v364.i32[0];
  v371 = vextq_s8(vextq_s8(v368, v368, 0xCuLL), v369, 8uLL);
  v370.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v658 + 32), *(float32x2_t *)v367.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v658 + 32), 1), *(float32x2_t *)v366.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v367, v367, 8uLL), v364).u32[0]);
  v372.i64[0] = __PAIR64__(v371.u32[0], v368.u32[0]);
  v372.i64[1] = v371.u32[1];
  v373.i64[0] = v371.i64[1];
  v373.i64[1] = vdupq_laneq_s32((int32x4_t)v369, 2).u32[0];
  v365.i64[1] = *(_QWORD *)(v658 + 32);
  v374 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v365, COERCE_FLOAT(*(_OWORD *)(a1 + 4))), v372, *(float32x2_t *)(a1 + 4), 1), v373, *(float32x4_t *)(a1 + 4), 2), v370, *(float32x4_t *)(a1 + 4), 3);
  v375 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v365, COERCE_FLOAT(*(_OWORD *)(a1 + 20))), v372, *(float32x2_t *)(a1 + 20), 1), v373, *(float32x4_t *)(a1 + 20), 2), v370, *(float32x4_t *)(a1 + 20), 3);
  v376 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v365, COERCE_FLOAT(*(_OWORD *)(a1 + 36))), v372, *(float32x2_t *)(a1 + 36), 1), v373, *(float32x4_t *)(a1 + 36), 2), v370, *(float32x4_t *)(a1 + 36), 3);
  v377 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v365, COERCE_FLOAT(*(_OWORD *)(a1 + 52))), v372, *(float32x2_t *)(a1 + 52), 1), v373, *(float32x4_t *)(a1 + 52), 2), v370, *(float32x4_t *)(a1 + 52), 3);
  v685[0] = v374;
  v685[1] = v375;
  v685[2] = v376;
  v685[3] = v377;
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v378 = HIBYTE(v689);
  v379 = &v688;
  if (v689 < 0)
  {
    v379 = v688;
    v378 = v689;
  }
  *(_QWORD *)&__dst[16] = v379;
  *(_QWORD *)&__dst[24] = v378;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v693);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v380 = sub_2241471F8();
    v381 = v380[2];
    if (!v381)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v381 = v380[2];
    }
    v382 = *(_QWORD *)(v381 + 64);
    v383 = (std::mutex *)(v382 + 32);
    std::mutex::lock((std::mutex *)(v382 + 32));
    v385 = *(_QWORD *)(v382 + 96);
    v384 = *(_QWORD *)(v382 + 104);
    std::mutex::unlock(v383);
    if (v385 != v384)
    {
      v386 = HIBYTE(v693.__r_.__value_.__r.__words[2]);
      v387 = *(_OWORD *)&v693.__r_.__value_.__l.__data_;
      sub_2241471F8();
      v388 = (v386 & 0x80u) == 0 ? &v693 : (std::string *)v387;
      v389 = (v386 & 0x80u) == 0 ? v386 : *((_QWORD *)&v387 + 1);
      v390 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v388, v389);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v390 + 24))(v390))
      {
        v699 = 0u;
        *(_OWORD *)__p = 0u;
        LODWORD(v700) = 728325608;
        kdebug_trace();
        sub_224141CD8((uint64_t *)v720, v685, flt_22469B46C);
        if (SHIBYTE(v687) < 0)
        {
          sub_223197FA4(v682, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          *(_OWORD *)v682 = *(_OWORD *)__src;
          v683 = v687;
        }
        v684 = 1;
        LOBYTE(v679) = 0;
        v681 = 0;
        sub_22414372C((uint64_t)__dst, (uint64_t *)v720, (__int128 *)v682, &v679);
        sub_22352DE04((double *)&qword_255788F20, v390, (uint64_t)__dst, (uint64_t)__src);
        if (v724[16] && (v724[15] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[40]);
        if (__dst[32] && (__dst[31] & 0x80000000) != 0)
          operator delete(*(void **)&__dst[8]);
        v391 = *(_QWORD *)__dst;
        *(_QWORD *)__dst = 0;
        if (v391)
          MEMORY[0x227684CE8](v391, 0x1000C4072FAA15ELL);
        if (v681 && v680 < 0)
          operator delete((void *)v679);
        if (v684 && SHIBYTE(v683) < 0)
          operator delete(v682[0]);
        v392 = *(_QWORD *)v720;
        *(_QWORD *)v720 = 0;
        if (v392)
          MEMORY[0x227684CE8](v392, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  memset(__dst, 0, 32);
  *(_DWORD *)&__dst[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v693.__r_.__value_.__r.__words[2]);
  if ((v693.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v693.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v394 = &v693;
    if ((v693.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v394 = (std::string *)v693.__r_.__value_.__r.__words[0];
    v395 = v394->__r_.__value_.__r.__words[0];
    v396 = v394->__r_.__value_.__l.__size_;
    v397 = v394->__r_.__value_.__s.__data_[16];
    if (v395 == 0x6365722E64337663 && v396 == 0x73746174532E6E6FLL && v397 == 46)
    {
      sub_223187510();
      sub_224141CD8((uint64_t *)__p, v685, flt_22469B46C);
      if (SHIBYTE(v687) < 0)
      {
        sub_223197FA4(v676, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        *(_OWORD *)v676 = *(_OWORD *)__src;
        v677 = v687;
      }
      v678 = 1;
      v400 = __p[0];
      v401 = operator new();
      *(_BYTE *)v401 = 0;
      *(_DWORD *)(v401 + 128) = -1;
      v402 = *((unsigned int *)v400 + 32);
      if ((_DWORD)v402 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24EC6BD10[v402])(v720, v401, v400);
        *(_DWORD *)(v401 + 128) = v402;
      }
      *(_BYTE *)(v401 + 136) = v400[136];
      if (v678)
      {
        v403 = v676[0];
        v404 = SHIBYTE(v677);
        v676[1] = 0;
        v677 = 0;
        v676[0] = 0;
        if (v404 < 0)
          operator delete(v403);
      }
      MEMORY[0x227684CE8](v401, 0x1000C4072FAA15ELL);
      if (v678 && SHIBYTE(v677) < 0)
        operator delete(v676[0]);
      v405 = __p[0];
      __p[0] = 0;
      if (v405)
        MEMORY[0x227684CE8](v405, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v693.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v693.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_799;
  v406 = sub_2241471F8();
  v407 = v406[2];
  if (!v407)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v407 = v406[2];
  }
  v408 = *(_QWORD *)(v407 + 64);
  v409 = (std::mutex *)(v408 + 32);
  std::mutex::lock((std::mutex *)(v408 + 32));
  v411 = *(_QWORD *)(v408 + 96);
  v410 = *(_QWORD *)(v408 + 104);
  std::mutex::unlock(v409);
  if (v411 == v410)
    goto LABEL_799;
  *(_QWORD *)__dst = "cv3d.recon.";
  *(_QWORD *)&__dst[8] = 11;
  v412 = HIBYTE(v689);
  v413 = &v688;
  if (v689 < 0)
  {
    v413 = v688;
    v412 = v689;
  }
  *(_QWORD *)&__dst[16] = v413;
  *(_QWORD *)&__dst[24] = v412;
  sub_2231A9820((uint64_t)__dst, (uint64_t)&__dst[32], 0, 0, &v675);
  v414 = HIBYTE(v675.__r_.__value_.__r.__words[2]);
  v415 = *(_OWORD *)&v675.__r_.__value_.__l.__data_;
  sub_2241471F8();
  if ((v414 & 0x80u) == 0)
    v416 = &v675;
  else
    v416 = (std::string *)v415;
  if ((v414 & 0x80u) == 0)
    v417 = v414;
  else
    v417 = *((_QWORD *)&v415 + 1);
  v418 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v416, v417);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v418 + 24))(v418))
    goto LABEL_797;
  v672 = 0u;
  v673 = 0u;
  v674 = 728325616;
  kdebug_trace();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v418 + 24))(v418))
    goto LABEL_796;
  if (SHIBYTE(v687) < 0)
  {
    sub_223197FA4(v691, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v691 = *(_OWORD *)__src;
    v692 = v687;
  }
  *(_QWORD *)&v690 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
  *((_QWORD *)&v690 + 1) = 2;
  v419 = sub_2241471F8();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v418 + 24))(v418))
    goto LABEL_794;
  *(_OWORD *)__dst = *(_OWORD *)a5;
  __dst[16] = a5[16];
  v420 = sub_22456636C(__dst);
  *(float *)&v713 = (float)(53 * v420 % 0xFFuLL) / 255.0;
  *((float *)&v713 + 1) = (float)(211 * v420 % 0xFFuLL) / 255.0;
  v714 = (float)(103 * v420 % 0xFFuLL) / 255.0;
  v711 = vdup_n_s32(0x3E4CCCCDu);
  v712 = 1045220557;
  v709 = 0;
  v708 = 0;
  v710 = 0;
  v706 = 0;
  v705 = 0;
  v707 = 0;
  v421 = (_QWORD *)*a3;
  v649 = v419;
  if ((_QWORD *)*a3 == a3 + 1)
  {
    sub_2241498F4((uint64_t)&v693, 0);
    v422 = 0;
    v486 = 0;
    goto LABEL_764;
  }
  v422 = 0;
  v423 = a1 + 152;
  do
  {
    v424 = *((unsigned __int8 *)v421 + 28);
    v425 = *((unsigned __int8 *)v421 + 29);
    v426 = *((unsigned __int8 *)v421 + 30);
    v427 = *((unsigned __int8 *)v421 + 31);
    v428 = *((unsigned __int8 *)v421 + 32);
    v429 = *((unsigned __int8 *)v421 + 33);
    v430 = *((unsigned __int8 *)v421 + 34);
    v431 = *((unsigned __int8 *)v421 + 35);
    v432 = *((unsigned __int8 *)v421 + 36);
    v433 = *((unsigned __int8 *)v421 + 37);
    v434 = *((unsigned __int8 *)v421 + 38);
    v435 = *((unsigned __int8 *)v421 + 39);
    v436 = *((unsigned __int8 *)v421 + 40);
    v437 = *((unsigned __int8 *)v421 + 41);
    v438 = *((unsigned __int8 *)v421 + 42);
    v439 = *((unsigned __int8 *)v421 + 43);
    v440 = (__int128 *)((char *)v421 + 44);
    v441 = *(_OWORD *)((char *)v421 + 44);
    v442 = *(_OWORD *)((char *)v421 + 60);
    v443 = *(_OWORD *)((char *)v421 + 76);
    *(_OWORD *)v724 = *(_OWORD *)((char *)v421 + 92);
    *(_OWORD *)&__dst[32] = v443;
    *(_OWORD *)&__dst[16] = v442;
    *(_OWORD *)__dst = v441;
    v444 = *(unsigned __int8 **)v423;
    if (!*(_QWORD *)v423)
      goto LABEL_717;
    v445 = a1 + 152;
    do
    {
      v446 = v444[25];
      v447 = v424;
      if (v446 != v424)
        goto LABEL_695;
      v446 = v444[26];
      v447 = v425;
      if (v446 != v425)
        goto LABEL_695;
      v446 = v444[27];
      v447 = v426;
      if (v446 != v426)
        goto LABEL_695;
      v446 = v444[28];
      v447 = v427;
      if (v446 != v427)
        goto LABEL_695;
      v446 = v444[29];
      v447 = v428;
      if (v446 != v428)
        goto LABEL_695;
      v446 = v444[30];
      v447 = v429;
      if (v446 != v429)
        goto LABEL_695;
      v446 = v444[31];
      v447 = v430;
      if (v446 != v430)
        goto LABEL_695;
      v446 = v444[32];
      v447 = v431;
      if (v446 != v431)
        goto LABEL_695;
      v446 = v444[33];
      v447 = v432;
      if (v446 != v432)
        goto LABEL_695;
      v446 = v444[34];
      v447 = v433;
      if (v446 != v433)
        goto LABEL_695;
      v446 = v444[35];
      v447 = v434;
      if (v446 != v434)
        goto LABEL_695;
      v446 = v444[36];
      v447 = v435;
      if (v446 != v435)
        goto LABEL_695;
      v446 = v444[37];
      v447 = v436;
      if (v446 != v436)
        goto LABEL_695;
      v446 = v444[38];
      v447 = v437;
      if (v446 == v437 && (v446 = v444[39], v447 = v438, v446 == v438) && (v446 = v444[40], v447 = v439, v446 == v439))
      {
        v445 = v444;
      }
      else
      {
LABEL_695:
        if (v446 < v447)
          v444 += 8;
        else
          v445 = v444;
      }
      v444 = *(unsigned __int8 **)v444;
    }
    while (v444);
    if (v445 == v423)
      goto LABEL_717;
    v448 = v445[25];
    if (v424 == v448)
    {
      v448 = v445[26];
      v424 = v425;
      if (v425 == v448)
      {
        v448 = v445[27];
        v424 = v426;
        if (v426 == v448)
        {
          v448 = v445[28];
          v424 = v427;
          if (v427 == v448)
          {
            v448 = v445[29];
            v424 = v428;
            if (v428 == v448)
            {
              v448 = v445[30];
              v424 = v429;
              if (v429 == v448)
              {
                v448 = v445[31];
                v424 = v430;
                if (v430 == v448)
                {
                  v448 = v445[32];
                  v424 = v431;
                  if (v431 == v448)
                  {
                    v448 = v445[33];
                    v424 = v432;
                    if (v432 == v448)
                    {
                      v448 = v445[34];
                      v424 = v433;
                      if (v433 == v448)
                      {
                        v448 = v445[35];
                        v424 = v434;
                        if (v434 == v448)
                        {
                          v448 = v445[36];
                          v424 = v435;
                          if (v435 == v448)
                          {
                            v448 = v445[37];
                            v424 = v436;
                            if (v436 == v448)
                            {
                              v448 = v445[38];
                              v424 = v437;
                              if (v437 == v448)
                              {
                                v448 = v445[39];
                                v424 = v438;
                                if (v438 == v448)
                                {
                                  v448 = v445[40];
                                  v424 = v439;
                                  if (v439 == v448)
                                    goto LABEL_729;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v424 >= v448)
    {
LABEL_729:
      if (v422 >= v707)
      {
        v473 = v705;
        v474 = ((char *)v422 - (char *)v705) >> 6;
        v475 = v474 + 1;
        if ((unint64_t)(v474 + 1) >> 58)
LABEL_975:
          sub_223257BE4();
        v476 = (char *)v707 - (char *)v705;
        if (((char *)v707 - (char *)v705) >> 5 > v475)
          v475 = v476 >> 5;
        if ((unint64_t)v476 >= 0x7FFFFFFFFFFFFFC0)
          v477 = 0x3FFFFFFFFFFFFFFLL;
        else
          v477 = v475;
        if (v477)
        {
          if (v477 >> 58)
LABEL_987:
            sub_223174E94();
          v478 = (char *)operator new(v477 << 6);
        }
        else
        {
          v478 = 0;
        }
        v479 = &v478[64 * v474];
        v480 = *(_OWORD *)&__dst[16];
        *(_OWORD *)v479 = *(_OWORD *)__dst;
        *((_OWORD *)v479 + 1) = v480;
        v481 = *(_OWORD *)v724;
        *((_OWORD *)v479 + 2) = *(_OWORD *)&__dst[32];
        *((_OWORD *)v479 + 3) = v481;
        v482 = (float32x2_t *)v479;
        if (v422 != v473)
        {
          do
          {
            v483 = *(_OWORD *)v422[-8].f32;
            v484 = *(_OWORD *)v422[-6].f32;
            v485 = *(_OWORD *)v422[-2].f32;
            *(_OWORD *)v482[-4].f32 = *(_OWORD *)v422[-4].f32;
            *(_OWORD *)v482[-2].f32 = v485;
            *(_OWORD *)v482[-8].f32 = v483;
            *(_OWORD *)v482[-6].f32 = v484;
            v482 -= 8;
            v422 -= 8;
          }
          while (v422 != v473);
          v422 = v473;
        }
        v463 = (float32x2_t *)(v479 + 64);
        v705 = v482;
        v706 = (float32x2_t *)(v479 + 64);
        v707 = (float32x2_t *)&v478[64 * v477];
        if (v422)
          operator delete(v422);
      }
      else
      {
        v460 = *v440;
        v461 = *(_OWORD *)((char *)v421 + 60);
        v462 = *(_OWORD *)((char *)v421 + 92);
        *(_OWORD *)v422[4].f32 = *(_OWORD *)((char *)v421 + 76);
        *(_OWORD *)v422[6].f32 = v462;
        *(_OWORD *)v422->f32 = v460;
        *(_OWORD *)v422[2].f32 = v461;
        v463 = v422 + 8;
      }
      v706 = v463;
      v422 = v463;
      v453 = (_QWORD *)v421[1];
      if (!v453)
      {
        do
        {
LABEL_756:
          v472 = (_QWORD *)v421[2];
          v58 = *v472 == (_QWORD)v421;
          v421 = v472;
        }
        while (!v58);
        goto LABEL_675;
      }
    }
    else
    {
LABEL_717:
      v449 = (float32x2_t *)v709;
      if (v709 >= v710)
      {
        v454 = v708;
        v455 = (v709 - (char *)v708) >> 6;
        v456 = v455 + 1;
        if ((unint64_t)(v455 + 1) >> 58)
          goto LABEL_975;
        v457 = v710 - (char *)v708;
        if ((v710 - (char *)v708) >> 5 > v456)
          v456 = v457 >> 5;
        if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFC0)
          v458 = 0x3FFFFFFFFFFFFFFLL;
        else
          v458 = v456;
        if (v458)
        {
          if (v458 >> 58)
            goto LABEL_987;
          v459 = (char *)operator new(v458 << 6);
        }
        else
        {
          v459 = 0;
        }
        v464 = &v459[64 * v455];
        v465 = *(_OWORD *)&__dst[16];
        *(_OWORD *)v464 = *(_OWORD *)__dst;
        *((_OWORD *)v464 + 1) = v465;
        v466 = *(_OWORD *)v724;
        *((_OWORD *)v464 + 2) = *(_OWORD *)&__dst[32];
        *((_OWORD *)v464 + 3) = v466;
        v467 = (float32x2_t *)v464;
        if (v449 != v454)
        {
          do
          {
            v468 = *(_OWORD *)v449[-8].f32;
            v469 = *(_OWORD *)v449[-6].f32;
            v470 = *(_OWORD *)v449[-2].f32;
            *(_OWORD *)v467[-4].f32 = *(_OWORD *)v449[-4].f32;
            *(_OWORD *)v467[-2].f32 = v470;
            *(_OWORD *)v467[-8].f32 = v468;
            *(_OWORD *)v467[-6].f32 = v469;
            v467 -= 8;
            v449 -= 8;
          }
          while (v449 != v454);
          v449 = v454;
        }
        v471 = v464 + 64;
        v708 = v467;
        v710 = &v459[64 * v458];
        if (v449)
          operator delete(v449);
        v709 = v471;
        v453 = (_QWORD *)v421[1];
        if (!v453)
          goto LABEL_756;
      }
      else
      {
        v450 = *v440;
        v451 = *(_OWORD *)((char *)v421 + 60);
        v452 = *(_OWORD *)((char *)v421 + 92);
        *((_OWORD *)v709 + 2) = *(_OWORD *)((char *)v421 + 76);
        *(_OWORD *)v449[6].f32 = v452;
        *(_OWORD *)v449->f32 = v450;
        *(_OWORD *)v449[2].f32 = v451;
        v709 = (char *)&v449[8];
        v453 = (_QWORD *)v421[1];
        if (!v453)
          goto LABEL_756;
      }
    }
    do
    {
      v472 = v453;
      v453 = (_QWORD *)*v453;
    }
    while (v453);
LABEL_675:
    v421 = v472;
  }
  while (v472 != a3 + 1);
  v486 = v708;
  v487 = (float32x2_t *)v709;
  sub_2241498F4((uint64_t)&v693, 0);
  if (v486 != v487)
  {
    v491.i32[3] = 1083179008;
    v653 = v486;
    do
    {
      *(float32x2_t *)v491.i8 = *v486;
      v491.i32[2] = v486[1].i32[0];
      *(float32x2_t *)v488.i8 = v486[2];
      v488.i32[2] = v486[3].i32[0];
      *(float32x2_t *)v489.f32 = v486[6];
      v489.i32[2] = v486[7].i32[0];
      *(_QWORD *)&v492 = vzip1q_s32(v491, v488).u64[0];
      v493 = (int8x16_t)vnegq_f32(v489);
      v490.i32[0] = v486[5].i32[0];
      v494 = (int8x16_t)vtrn2q_s32(v491, v488);
      v494.i32[2] = HIDWORD(*(_QWORD *)&v486[4]);
      v495 = (int8x16_t)vzip2q_s32(v491, v488);
      v496 = (int32x4_t)v495;
      v496.i32[2] = v490.i32[0];
      v497 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v492, *(float *)v493.i32), *(float32x2_t *)v494.i8, *(float32x2_t *)v489.f32, 1), *(float32x2_t *)v495.i8, v489, 2);
      v498 = vmls_lane_f32(vmul_f32(v486[4], *(float32x2_t *)v493.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v486[4], 1), *(float32x2_t *)v489.f32, 1);
      v499 = (float32x2_t)vextq_s8(v493, v493, 8uLL).u64[0];
      *((_QWORD *)&v492 + 1) = *(_QWORD *)&v486[4];
      v493.i32[3] = 0;
      v493.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v494, 0).i32[3];
      *(uint64_t *)((char *)v493.i64 + 4) = vextq_s8(v494, v495, 4uLL).u64[0];
      v496.i64[1] = vdupq_laneq_s32(v496, 2).u32[0];
      *(int8x16_t *)&v749[16] = v493;
      *(int32x4_t *)&v749[32] = v496;
      *(_OWORD *)v749 = v492;
      *(float32x2_t *)&v749[48] = v497;
      LODWORD(v750) = vmla_f32(v498, v499, v490).u32[0];
      DWORD1(v750) = 1065353216;
      v715[0] = xmmword_224651370;
      sub_223207E58(v720, (int *)v715);
      v699 = *(_OWORD *)&v720[8];
      v700 = *(_OWORD *)&v720[24];
      v701 = *(_OWORD *)&v720[40];
      v702 = *(_OWORD *)&v720[56];
      v703 = *(_DWORD *)&v720[72];
      v704 = 0xA0000000ALL;
      __p[1] = &off_24EC20868;
      __p[0] = &off_24EC207B8;
      sub_224002D14((uint64_t)__p, (int32x2_t *)v749, &v713, (uint64_t)__dst, 0.2);
      sub_22414E9E0((uint64_t)&v693, (uint64_t)__dst);
      sub_22316F8F4((uint64_t *)__dst);
      v486 += 8;
    }
    while (v486 != v487);
    v486 = v653;
  }
LABEL_764:
  sub_2241498F4((uint64_t)__p, 0);
  v654 = v705;
  if (v705 != v422)
  {
    v503.i32[3] = 1083179008;
    v504 = v705;
    do
    {
      *(float32x2_t *)v503.i8 = *v504;
      v503.i32[2] = v504[1].i32[0];
      *(float32x2_t *)v500.i8 = v504[2];
      v500.i32[2] = v504[3].i32[0];
      *(float32x2_t *)v501.f32 = v504[6];
      v501.i32[2] = v504[7].i32[0];
      *(_QWORD *)&v505 = vzip1q_s32(v503, v500).u64[0];
      v506 = (int8x16_t)vnegq_f32(v501);
      v502.i32[0] = v504[5].i32[0];
      v507 = (int8x16_t)vtrn2q_s32(v503, v500);
      v507.i32[2] = HIDWORD(*(_QWORD *)&v504[4]);
      v508 = (int8x16_t)vzip2q_s32(v503, v500);
      v509 = (int32x4_t)v508;
      v509.i32[2] = v502.i32[0];
      v510 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v505, *(float *)v506.i32), *(float32x2_t *)v507.i8, *(float32x2_t *)v501.f32, 1), *(float32x2_t *)v508.i8, v501, 2);
      v511 = vmls_lane_f32(vmul_f32(v504[4], *(float32x2_t *)v506.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v504[4], 1), *(float32x2_t *)v501.f32, 1);
      v512 = (float32x2_t)vextq_s8(v506, v506, 8uLL).u64[0];
      *((_QWORD *)&v505 + 1) = *(_QWORD *)&v504[4];
      v506.i32[3] = 0;
      v506.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v507, 0).i32[3];
      *(uint64_t *)((char *)v506.i64 + 4) = vextq_s8(v507, v508, 4uLL).u64[0];
      v509.i64[1] = vdupq_laneq_s32(v509, 2).u32[0];
      v715[2] = v509;
      v715[0] = v505;
      v715[1] = v506;
      v716 = v510;
      v717 = vmla_f32(v511, v512, v502).u32[0];
      v718 = 1065353216;
      v719 = xmmword_224651370;
      sub_223207E58(v749, (int *)&v719);
      *(_OWORD *)&v720[16] = *(_OWORD *)&v749[8];
      *(_OWORD *)&v720[32] = *(_OWORD *)&v749[24];
      *(_OWORD *)&v720[48] = *(_OWORD *)&v749[40];
      *(_OWORD *)&v720[64] = v750;
      v721 = v751;
      v722 = 0xA0000000ALL;
      *(_QWORD *)&v720[8] = &off_24EC20868;
      *(_QWORD *)v720 = &off_24EC207B8;
      sub_224002D14((uint64_t)v720, (int32x2_t *)v715, (uint64_t *)&v711, (uint64_t)__dst, 0.2);
      sub_22414E9E0((uint64_t)__p, (uint64_t)__dst);
      sub_22316F8F4((uint64_t *)__dst);
      v504 += 8;
    }
    while (v504 != v422);
  }
  sub_22414E9E0((uint64_t)&v693, (uint64_t)__p);
  sub_22316F8F4((uint64_t *)__p);
  if (v654)
    operator delete(v654);
  if (v486)
    operator delete(v486);
  *(_OWORD *)__p = *(_OWORD *)v691;
  *(_QWORD *)&v699 = v692;
  v691[1] = 0;
  v691[0] = 0;
  v692 = 0;
  BYTE8(v699) = 1;
  sub_22329F414((uint64_t)&v693, (__int128 *)__p, &v690, &v696);
  if (BYTE8(v699) && SBYTE7(v699) < 0)
    operator delete(__p[0]);
  sub_22316F8F4((uint64_t *)&v693);
  v513 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v418 + 56))(v418);
  v514 = *v513;
  v515 = (std::__shared_weak_count *)v513[1];
  if (v515)
  {
    p_shared_owners = (unint64_t *)&v515->__shared_owners_;
    do
      v517 = __ldxr(p_shared_owners);
    while (__stxr(v517 + 1, p_shared_owners));
  }
  v518 = v697;
  v693.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
  *(_OWORD *)&v693.__r_.__value_.__r.__words[1] = v697;
  v697 = 0uLL;
  *(_QWORD *)__dst = v514;
  *(_QWORD *)&__dst[8] = v515;
  if (v515)
  {
    v519 = (unint64_t *)&v515->__shared_owners_;
    do
      v520 = __ldxr(v519);
    while (__stxr(v520 + 1, v519));
  }
  *(_QWORD *)&__dst[16] = &off_24EC6A3B8;
  *(_OWORD *)&__dst[24] = v518;
  if (*((_QWORD *)&v518 + 1))
  {
    v521 = (unint64_t *)(*((_QWORD *)&v518 + 1) + 8);
    do
      v522 = __ldxr(v521);
    while (__stxr(v522 + 1, v521));
  }
  (*(void (**)(uint64_t *, _BYTE *))(*v649 + 16))(v649, __dst);
  sub_2241231D8((uint64_t)&__dst[16]);
  v523 = *(std::__shared_weak_count **)&__dst[8];
  if (*(_QWORD *)&__dst[8])
  {
    v524 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
    do
      v525 = __ldaxr(v524);
    while (__stlxr(v525 - 1, v524));
    if (!v525)
    {
      ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
      std::__shared_weak_count::__release_weak(v523);
    }
  }
  sub_2241231D8((uint64_t)&v693);
  if (v515)
  {
    v526 = (unint64_t *)&v515->__shared_owners_;
    do
      v527 = __ldaxr(v526);
    while (__stlxr(v527 - 1, v526));
    if (!v527)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  sub_2241231D8((uint64_t)&v696);
LABEL_794:
  if (SHIBYTE(v692) < 0)
    operator delete(v691[0]);
LABEL_796:
  kdebug_trace();
LABEL_797:
  if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v675.__r_.__value_.__l.__data_);
LABEL_799:
  if (SHIBYTE(v687) < 0)
    operator delete(__src[0]);
LABEL_801:
  if (SHIBYTE(v689) < 0)
    operator delete(v688);
LABEL_803:
  memset(__dst, 0, 24);
  __p[0] = a1 + 4;
  __p[1] = 0;
  *(_OWORD *)&v693.__r_.__value_.__l.__data_ = (unint64_t)__dst;
  sub_2236763FC((float32x2_t **)__p, (float **)&v693);
  v528 = *(int8x16_t *)__dst;
  v529 = vextq_s8(v528, v528, 8uLL);
  v530 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v528.i8, *(float32x2_t *)v528.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)__dst, 1), *(float32x2_t *)__dst, 1), *(float32x2_t *)v529.i8, *(float32x2_t *)v529.i8).f32[0];
  if (v530 >= 0.0061)
  {
    v534 = sqrtf(v530);
    v655 = v530;
    v659 = *(int8x16_t *)__dst;
    v535 = __sincosf_stret(v534);
    v530 = v655;
    v528 = v659;
    v532 = v535.__sinval / v534;
    v531 = (float)(1.0 / v655) * (float)(1.0 - v535.__cosval);
    *(float *)v529.i32 = (float)(1.0 / v655) * (float)(1.0 - (float)(v535.__sinval / v534));
    if (v655 >= 0.00000149)
      goto LABEL_805;
  }
  else
  {
    v531 = 0.5 - (float)(v530 * (float)((float)(v530 / -720.0) + 0.041667));
    *(float *)v529.i32 = 0.16667 - (float)(v530 * (float)((float)(v530 / -5040.0) + 0.0083333));
    v532 = 1.0 - (float)(v530 * *(float *)v529.i32);
    if (v530 >= 0.00000149)
    {
LABEL_805:
      if (v530 <= 9.0)
        v533 = (float)((float)(v531 * 0.5) - *(float *)v529.i32) / v532;
      else
        v533 = (float)(v531 + (float)(v532 * -0.5)) / (float)(v530 * v531);
      goto LABEL_810;
    }
  }
  v533 = (float)(v530 * 0.000033069) + (float)((float)(v530 * 0.0013889) + 0.083333);
LABEL_810:
  v529.i64[0] = *(_QWORD *)(a1 + 52);
  v529.i32[2] = *((_DWORD *)a1 + 15);
  v536 = (float32x4_t)vextq_s8(vextq_s8(v528, v528, 0xCuLL), v528, 8uLL);
  v537 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v528, (int32x4_t)v528), v528, 0xCuLL);
  v538 = (int8x16_t)vsubq_f32(vmulq_f32(v536, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v529, (int32x4_t)v529), v529, 0xCuLL)), vmulq_f32(v537, (float32x4_t)vextq_s8(vextq_s8(v529, v529, 0xCuLL), v529, 8uLL)));
  v539.i64[0] = 0xBF000000BF000000;
  v539.i64[1] = 0xBF000000BF000000;
  v540 = vaddq_f32(vaddq_f32((float32x4_t)v529, vmulq_f32((float32x4_t)v538, v539)), vmulq_n_f32(vsubq_f32(vmulq_f32(v536, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v538, (int32x4_t)v538), v538, 0xCuLL)), vmulq_f32(v537, (float32x4_t)vextq_s8(vextq_s8(v538, v538, 0xCuLL), v538, 8uLL))), v533));
  *(_DWORD *)&__dst[20] = v540.i32[2];
  *(_QWORD *)&__dst[12] = v540.i64[0];
  v656 = *(float32x4_t *)&__dst[16];
  v660 = *(float32x4_t *)__dst;
  if (v662 && *a1 == 4)
    goto LABEL_931;
  sub_223C0F3E0(v715);
  if (**(int **)(*(_QWORD *)&v715[0] + 56) > 3)
    goto LABEL_931;
  v541 = *(unsigned __int8 *)(*(_QWORD *)&v715[0] + 72);
  v542 = sub_22322F254(*(uint64_t *)&v715[0], "OSLogSurrogateAppender", 1, 0);
  v543 = v542;
  if (!v541 && !v542)
    goto LABEL_931;
  __p[0] = v715;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
  DWORD2(v699) = 3;
  *(_QWORD *)&v700 = "unknown file";
  DWORD2(v700) = 347;
  *(_QWORD *)&v702 = 0;
  *(_QWORD *)&v701 = "unknown function";
  *((_QWORD *)&v701 + 1) = 0;
  if ((v671 & 0x80u) == 0)
    v544 = (char *)&v669;
  else
    v544 = (char *)v669;
  v545 = *(_QWORD *)__p[0];
  v546 = (const char *)(*(_QWORD *)__p[0] + 16);
  v646 = v541;
  v644 = v546;
  v645 = *(_QWORD *)__p[0];
  __s = v544;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v546 = *(const char **)(v545 + 16);
    v547 = *(_QWORD *)(v545 + 24);
  }
  else
  {
    v547 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
  }
  v548 = *((_QWORD *)a1 + 12);
  v549 = *((_QWORD *)a1 + 13);
  v551 = *((_QWORD *)a1 + 15);
  v550 = *((_QWORD *)a1 + 16);
  v647 = *((_DWORD *)a1 + 17);
  v663 = a1;
  v648 = *((_QWORD *)a1 + 20);
  v650 = *((_QWORD *)a1 + 23);
  v552 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v552 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__dst);
    sub_223199C58("com.apple.cv3d", (unint64_t)__dst, byte_255788F40);
    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F40[23] >= 0)
    v553 = byte_255788F40;
  else
    v553 = *(const char **)byte_255788F40;
  if (byte_255788F40[23] >= 0)
    v554 = byte_255788F40[23];
  else
    v554 = *(_QWORD *)&byte_255788F40[8];
  *(_QWORD *)__dst = os_log_create(v553, v546);
  v555 = &__dst[8];
  if (v554 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v554 >= 0x17)
  {
    v643 = v546;
    v556 = v543;
    v557 = v551;
    v558 = v550;
    v559 = v548;
    v560 = v549;
    v561 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v554 | 7) != 0x17)
      v561 = v554 | 7;
    v562 = v561 + 1;
    v555 = operator new(v561 + 1);
    *(_QWORD *)&__dst[24] = v562 | 0x8000000000000000;
    *(_QWORD *)&__dst[8] = v555;
    *(_QWORD *)&__dst[16] = v554;
    v549 = v560;
    v548 = v559;
    v550 = v558;
    v551 = v557;
    v543 = v556;
    v546 = v643;
    goto LABEL_835;
  }
  __dst[31] = v554;
  if (v554)
LABEL_835:
    memmove(v555, v553, v554);
  v555[v554] = 0;
  __dst[32] = 1;
  v563 = &__dst[40];
  if (v547 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v547 >= 0x17)
  {
    v564 = (v547 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v547 | 7) != 0x17)
      v564 = v547 | 7;
    v565 = v564 + 1;
    v563 = operator new(v564 + 1);
    *(_QWORD *)&v724[8] = v565 | 0x8000000000000000;
    *(_QWORD *)&__dst[40] = v563;
    *(_QWORD *)v724 = v547;
    goto LABEL_843;
  }
  v724[15] = v547;
  if (v547)
LABEL_843:
    memmove(v563, v546, v547);
  v563[v547] = 0;
  v724[16] = 1;
  v566 = *(NSObject **)__dst;
  if ((v724[15] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[40]);
  if (__dst[32] && (__dst[31] & 0x80000000) != 0)
    operator delete(*(void **)&__dst[8]);
  if (*(_QWORD *)__dst)
    os_release(*(void **)__dst);
  v567 = vabsq_f32(v656).u64[0];
  v568 = vabsq_f32(v660);
  v569 = v568.f32[1];
  v570 = v568.f32[2];
  v657 = v568.f32[0];
  v661 = *(float *)&v567;
  v571 = v568.f32[3];
  v572 = *((float *)&v567 + 1);
  v573 = (v549 - v548) >> 4;
  v574 = (v550 - v551) >> 4;
  if (v543 && *(_QWORD *)(v543 + 24))
  {
    v575 = _os_log_pack_size();
    v576 = operator new(v575, (std::align_val_t)8uLL);
    v577 = (_QWORD *)operator new();
    *v577 = &off_24EC1F7F0;
    v577[1] = 0;
    v577[2] = 0;
    v577[3] = v576;
    v693.__r_.__value_.__r.__words[0] = (std::string::size_type)v576;
    v693.__r_.__value_.__l.__size_ = (std::string::size_type)v576;
    v695 = 0;
    v693.__r_.__value_.__r.__words[2] = (std::string::size_type)v577;
    v694 = 0;
    v578 = strlen(__s);
    if (v578 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v579 = v578;
    if (v578 >= 0x17)
    {
      v589 = (v578 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v578 | 7) != 0x17)
        v589 = v578 | 7;
      v590 = v589 + 1;
      v580 = operator new(v589 + 1);
      *(_QWORD *)&v720[16] = v590 | 0x8000000000000000;
      *(_QWORD *)v720 = v580;
      *(_QWORD *)&v720[8] = v579;
    }
    else
    {
      v720[23] = v578;
      v580 = v720;
      if (!v578)
        goto LABEL_863;
    }
    memcpy(v580, __s, v579);
LABEL_863:
    v580[v579] = 0;
    v591 = *(_QWORD *)v720;
    *(_QWORD *)v749 = *(_QWORD *)&v720[8];
    *(_QWORD *)&v749[7] = *(_QWORD *)&v720[15];
    v592 = v720[23];
    v593 = operator new(0x48uLL);
    v593[1] = 0;
    v593[2] = 0;
    v593[3] = off_24EC60DF0;
    *v593 = &off_24EC60DA0;
    v594 = *(_QWORD *)v749;
    v593[4] = v591;
    v593[5] = v594;
    *(_QWORD *)((char *)v593 + 47) = *(_QWORD *)&v749[7];
    *((_BYTE *)v593 + 55) = v592;
    *(_QWORD *)v749 = 0;
    *(_QWORD *)&v749[7] = 0;
    v595 = v695;
    v694 = (char *)(v593 + 3);
    v695 = (std::__shared_weak_count *)v593;
    if (v595)
    {
      v596 = (unint64_t *)&v595->__shared_owners_;
      do
        v597 = __ldaxr(v596);
      while (__stlxr(v597 - 1, v596));
      if (!v597)
      {
        ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
        std::__shared_weak_count::__release_weak(v595);
      }
    }
    *(std::string *)__dst = v693;
    v598 = v694;
    if (v693.__r_.__value_.__r.__words[2])
    {
      v599 = (unint64_t *)(v693.__r_.__value_.__r.__words[2] + 8);
      do
        v600 = __ldxr(v599);
      while (__stxr(v600 + 1, v599));
    }
    v601 = v695;
    *(_QWORD *)&__dst[24] = v598;
    *(_QWORD *)&__dst[32] = v695;
    if (v695)
    {
      v602 = (unint64_t *)&v695->__shared_owners_;
      do
        v603 = __ldxr(v602);
      while (__stxr(v603 + 1, v602));
      *(_QWORD *)&__dst[40] = v598;
      do
        v604 = __ldaxr(v602);
      while (__stlxr(v604 - 1, v602));
      if (!v604)
      {
        ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
        std::__shared_weak_count::__release_weak(v601);
      }
    }
    else
    {
      *(_QWORD *)&__dst[40] = v598;
    }
    v605 = (std::__shared_weak_count *)v693.__r_.__value_.__r.__words[2];
    if (v693.__r_.__value_.__r.__words[2])
    {
      v606 = (unint64_t *)(v693.__r_.__value_.__r.__words[2] + 8);
      do
        v607 = __ldaxr(v606);
      while (__stlxr(v607 - 1, v606));
      if (!v607)
      {
        ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
        std::__shared_weak_count::__release_weak(v605);
      }
    }
    if (*(char *)(*(_QWORD *)&__dst[40] + 31) >= 0)
      v608 = *(_QWORD *)&__dst[40] + 8;
    else
      v608 = *(_QWORD *)(*(_QWORD *)&__dst[40] + 8);
    v609 = _os_log_pack_fill();
    v610 = a2[5];
    v611 = a2[6];
    v612 = a2[7];
    v613 = a2[8];
    v614 = a2[9];
    v615 = *v663;
    *(_DWORD *)v609 = 68162306;
    *(_DWORD *)(v609 + 4) = 4;
    *(_WORD *)(v609 + 8) = 2080;
    *(_QWORD *)(v609 + 10) = v608;
    *(_WORD *)(v609 + 18) = 2048;
    *(_QWORD *)(v609 + 20) = v610;
    *(_WORD *)(v609 + 28) = 2048;
    *(_QWORD *)(v609 + 30) = v611;
    *(_WORD *)(v609 + 38) = 2048;
    *(_QWORD *)(v609 + 40) = v612;
    *(_WORD *)(v609 + 48) = 2048;
    *(_QWORD *)(v609 + 50) = v613;
    *(_WORD *)(v609 + 58) = 2048;
    *(_QWORD *)(v609 + 60) = v614;
    *(_WORD *)(v609 + 68) = 1024;
    *(_DWORD *)(v609 + 70) = v615;
    *(_WORD *)(v609 + 74) = 1024;
    *(_DWORD *)(v609 + 76) = v647;
    *(_WORD *)(v609 + 80) = 2048;
    *(_QWORD *)(v609 + 82) = v573;
    *(_WORD *)(v609 + 90) = 2048;
    *(_QWORD *)(v609 + 92) = v574;
    *(_WORD *)(v609 + 100) = 2048;
    *(_QWORD *)(v609 + 102) = v648;
    *(_WORD *)(v609 + 110) = 2048;
    *(_QWORD *)(v609 + 112) = v650;
    *(_WORD *)(v609 + 120) = 2048;
    *(double *)(v609 + 122) = v657;
    *(_WORD *)(v609 + 130) = 2048;
    *(double *)(v609 + 132) = v569;
    *(_WORD *)(v609 + 140) = 2048;
    *(double *)(v609 + 142) = v570;
    *(_WORD *)(v609 + 150) = 2048;
    *(double *)(v609 + 152) = v571;
    *(_WORD *)(v609 + 160) = 2048;
    *(double *)(v609 + 162) = v661;
    *(_WORD *)(v609 + 170) = 2048;
    *(double *)(v609 + 172) = v572;
    v616 = operator new();
    v617 = *(unsigned __int8 *)(v645 + 39);
    v618 = v644;
    if ((v617 & 0x80u) != 0)
    {
      v618 = *(const char **)(v645 + 16);
      v617 = *(_QWORD *)(v645 + 24);
    }
    *(_OWORD *)v616 = *(_OWORD *)__dst;
    *(_QWORD *)(v616 + 16) = *(_QWORD *)&__dst[16];
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_OWORD *)(v616 + 24) = *(_OWORD *)&__dst[24];
    *(_QWORD *)&__dst[24] = 0;
    *(_QWORD *)&__dst[32] = 0;
    *(_QWORD *)(v616 + 40) = v618;
    *(_QWORD *)(v616 + 48) = v617;
    *(_BYTE *)(v616 + 56) = 1;
    *(_QWORD *)v720 = 0;
    v693.__r_.__value_.__r.__words[0] = v616;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v543 + 24) + 40))(*(_QWORD *)(v543 + 24), &v693);
    v619 = v693.__r_.__value_.__r.__words[0];
    v693.__r_.__value_.__r.__words[0] = 0;
    if (v619)
    {
      v620 = *(std::__shared_weak_count **)(v619 + 32);
      if (v620)
      {
        v621 = (unint64_t *)&v620->__shared_owners_;
        do
          v622 = __ldaxr(v621);
        while (__stlxr(v622 - 1, v621));
        if (!v622)
        {
          ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
          std::__shared_weak_count::__release_weak(v620);
        }
      }
      v623 = *(std::__shared_weak_count **)(v619 + 16);
      if (v623)
      {
        v624 = (unint64_t *)&v623->__shared_owners_;
        do
          v625 = __ldaxr(v624);
        while (__stlxr(v625 - 1, v624));
        if (!v625)
        {
          ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
          std::__shared_weak_count::__release_weak(v623);
        }
      }
      MEMORY[0x227684CE8](v619, 0x10F0C40B62ED6C6);
      v626 = *(_QWORD *)v720;
      *(_QWORD *)v720 = 0;
      if (v626)
      {
        v627 = *(std::__shared_weak_count **)(v626 + 32);
        if (v627)
        {
          v628 = (unint64_t *)&v627->__shared_owners_;
          do
            v629 = __ldaxr(v628);
          while (__stlxr(v629 - 1, v628));
          if (!v629)
          {
            ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
            std::__shared_weak_count::__release_weak(v627);
          }
        }
        v630 = *(std::__shared_weak_count **)(v626 + 16);
        if (v630)
        {
          v631 = (unint64_t *)&v630->__shared_owners_;
          do
            v632 = __ldaxr(v631);
          while (__stlxr(v632 - 1, v631));
          if (!v632)
          {
            ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
            std::__shared_weak_count::__release_weak(v630);
          }
        }
        MEMORY[0x227684CE8](v626, 0x10F0C40B62ED6C6);
      }
    }
    v633 = *(std::__shared_weak_count **)&__dst[32];
    v588 = v646;
    if (*(_QWORD *)&__dst[32])
    {
      v634 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
      do
        v635 = __ldaxr(v634);
      while (__stlxr(v635 - 1, v634));
      if (!v635)
      {
        ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
        std::__shared_weak_count::__release_weak(v633);
      }
    }
    v636 = *(std::__shared_weak_count **)&__dst[16];
    if (*(_QWORD *)&__dst[16])
    {
      v637 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
      do
        v638 = __ldaxr(v637);
      while (__stlxr(v638 - 1, v637));
      if (!v638)
      {
        ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
        std::__shared_weak_count::__release_weak(v636);
      }
    }
  }
  else
  {
    os_log_type_enabled(v566, OS_LOG_TYPE_INFO);
    v581 = a2[5];
    v582 = a2[6];
    v583 = a2[7];
    v584 = a2[8];
    v585 = a2[9];
    v586 = *v663;
    *(_QWORD *)__dst = 0x404101302;
    *(_WORD *)&__dst[8] = 2080;
    *(_QWORD *)&__dst[10] = __s;
    *(_WORD *)&__dst[18] = 2048;
    *(_QWORD *)&__dst[20] = v581;
    *(_WORD *)&__dst[28] = 2048;
    *(_QWORD *)&__dst[30] = v582;
    *(_WORD *)&__dst[38] = 2048;
    *(_QWORD *)&__dst[40] = v583;
    *(_WORD *)v724 = 2048;
    *(_QWORD *)&v724[2] = v584;
    *(_WORD *)&v724[10] = 2048;
    *(_QWORD *)&v724[12] = v585;
    v725 = 1024;
    v726 = v586;
    v727 = 1024;
    v728 = v647;
    v729 = 2048;
    v730 = v573;
    v731 = 2048;
    v732 = (v550 - v551) >> 4;
    v733 = 2048;
    v734 = v648;
    v735 = 2048;
    v736 = v650;
    v737 = 2048;
    v738 = v657;
    v739 = 2048;
    v740 = v569;
    v741 = 2048;
    v742 = v570;
    v743 = 2048;
    v744 = v571;
    v745 = 2048;
    v746 = v661;
    v747 = 2048;
    v748 = v572;
    v587 = (void *)_os_log_send_and_compose_impl();
    v588 = v646;
    if (v587)
      free(v587);
  }
  if (v588)
  {
    v639 = (const char *)&v669;
    if ((v671 & 0x80u) != 0)
      v639 = (const char *)v669;
    sub_22322C138((uint64_t)__p, "VLM:GRS:IGRS[%.4s] PID:%llu NC:%llu RL:%llu LC:%llu EX:%llu TS:%d ET:%d PU:%zu EX:%zu RM:%zu IV:%zu M2V:[%2.3f,%2.3f,%2.3f,%2.3f,%2.3f,%2.3f]", v639, a2[5], a2[6], a2[7], a2[8], a2[9], *v663, *((_DWORD *)v663 + 17), (uint64_t)(*((_QWORD *)v663 + 13) - *((_QWORD *)v663 + 12)) >> 4, (uint64_t)(*((_QWORD *)v663 + 16) - *((_QWORD *)v663 + 15)) >> 4, *((_QWORD *)v663 + 20), *((_QWORD *)v663 + 23), v657, v569, v570, v571,
      v661,
      v572);
    sub_223182C08((uint64_t)__p);
  }
  sub_223182C08((uint64_t)__p);
  v640 = (std::__shared_weak_count *)v702;
  if ((_QWORD)v702)
  {
    v641 = (unint64_t *)(v702 + 8);
    do
      v642 = __ldaxr(v641);
    while (__stlxr(v642 - 1, v641));
    if (!v642)
    {
      ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
      std::__shared_weak_count::__release_weak(v640);
    }
  }
LABEL_931:
  if ((v665[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v665);
    if (SHIBYTE(v667[2]) < 0)
      goto LABEL_938;
LABEL_933:
    if (SHIBYTE(v667[6]) < 0)
LABEL_939:
      operator delete(v667[4]);
  }
  else
  {
    if ((SHIBYTE(v667[2]) & 0x80000000) == 0)
      goto LABEL_933;
LABEL_938:
    operator delete(v667[0]);
    if (SHIBYTE(v667[6]) < 0)
      goto LABEL_939;
  }
  kdebug_trace();
  if ((char)v671 < 0)
    operator delete(v669);
}

void sub_223C181A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a67;
  char a72;

  if (LOBYTE(STACK[0x718]) && SLOBYTE(STACK[0x717]) < 0)
    operator delete((void *)STACK[0x700]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x480]);
  if (a46 < 0)
    operator delete(a41);
  if (a53 < 0)
    operator delete(a48);
  if (a60 < 0)
    operator delete(a55);
  sub_2231874DC((uint64_t)&a62);
  if (a72 < 0)
    operator delete(a67);
  _Unwind_Resume(a1);
}

void sub_223C189F0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 8;
    strcpy((char *)__p, "external");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2231AD778((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223C18AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C18AC0(unsigned __int8 *a1)
{
  std::string::size_type v1;
  char v2;
  int v3;
  size_t size;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  int v28;
  int v31;
  size_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  std::string *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  std::mutex *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  int v56;
  int v59;
  size_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  std::string *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  std::mutex *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  int v84;
  int v87;
  size_t v88;
  unint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  std::string *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  std::mutex *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string::size_type v111;
  int v112;
  int v115;
  size_t v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  std::string *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  std::mutex *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  int v140;
  int v143;
  size_t v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  std::string *v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  std::mutex *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::string::size_type v164;
  std::string *v165;
  std::string::size_type v166;
  std::string::size_type v167;
  int v168;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  std::mutex *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  std::mutex *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  size_t v230;
  unint64_t v231;
  std::string::value_type *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  std::string *v236;
  void *v237;
  int v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  _BYTE __p[32];
  int v266;
  std::string v267;
  std::string v268;
  std::string __dst;
  __int128 v270;
  __int128 v271;
  std::__shared_weak_count *v272;
  std::string v273;
  char v274;
  __int128 v275;
  std::__shared_weak_count *v276;
  _QWORD v277[2];
  __int128 v278;
  __int128 v279;
  _QWORD v280[48];

  v280[45] = *MEMORY[0x24BDAC8D0];
  DWORD2(v279) = 0;
  sub_22319B83C((uint64_t)__p, (uint64_t)&v278, a1);
  if (DWORD2(v279) == -1)
    sub_22316DD70();
  v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
  ((void (*)(_BYTE *__return_ptr, std::string *, __int128 *))off_24EC60BB0[DWORD2(v279)])(__p, &v273, &v278);
  if (DWORD2(v279) != -1)
    ((void (*)(std::string *, __int128 *))off_24EC60B38[DWORD2(v279)])(&v273, &v278);
  v1 = __p[23];
  v2 = __p[23];
  if (__p[23] < 0)
    v1 = *(_QWORD *)&__p[8];
  if (v1 >= 4)
    v1 = 4;
  v268 = *(std::string *)__p;
  memset(__p, 0, 24);
  if ((v2 & 0x80000000) == 0)
  {
    *((_BYTE *)&v268.__r_.__value_.__s + 23) = v1;
    v268.__r_.__value_.__s.__data_[v1] = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v268.__r_.__value_.__l.__size_ = v1;
  *(_BYTE *)(v268.__r_.__value_.__r.__words[0] + v1) = 0;
  if ((__p[23] & 0x80000000) != 0)
LABEL_10:
    operator delete(*(void **)__p);
LABEL_11:
  v3 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    size = v268.__r_.__value_.__l.__size_;
  v5 = size + 19;
  if (size + 19 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = (char *)operator new(v7 + 1);
    *(_QWORD *)&__p[8] = size + 19;
    *(_QWORD *)&__p[16] = v8 | 0x8000000000000000;
    *(_QWORD *)__p = v9;
    *(_DWORD *)(v9 + 15) = 776160046;
    *(_OWORD *)v9 = *(_OWORD *)"Stats.KFCluster.CC.";
    v6 = v9 + 19;
  }
  else
  {
    *(_QWORD *)&__p[16] = 0;
    __p[23] = size + 19;
    qmemcpy(__p, "Stats.KFCluster.CC.", 19);
    v6 = &__p[19];
    if (!size)
      goto LABEL_25;
  }
  if (v3 >= 0)
    v10 = &v268;
  else
    v10 = (std::string *)v268.__r_.__value_.__r.__words[0];
  memmove(v6, v10, size);
LABEL_25:
  v6[size] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v11 = __p[23];
  v12 = __p;
  if (__p[23] < 0)
  {
    v12 = *(_BYTE **)__p;
    v11 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v12;
  *((_QWORD *)&v279 + 1) = v11;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v13 = sub_2241471F8();
    v14 = v13[2];
    if (!v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = v13[2];
    }
    v15 = *(_QWORD *)(v14 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 != v17)
    {
      sub_2241471F8();
      v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v20 = sub_2241471F8();
          sub_223C03548((uint64_t)v20, v19, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v24 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = v273.__r_.__value_.__l.__size_;
  if (v24 >= 0x11)
  {
    v25 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v26 = v25->__r_.__value_.__r.__words[0];
    v27 = v25->__r_.__value_.__l.__size_;
    v28 = v25->__r_.__value_.__s.__data_[16];
    if (v26 == 0x6365722E64337663 && v27 == 0x73746174532E6E6FLL && v28 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v178 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v178)
      {
        p_shared_owners = (unint64_t *)&v178->__shared_owners_;
        do
          v180 = __ldaxr(p_shared_owners);
        while (__stlxr(v180 - 1, p_shared_owners));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v31 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v32 = v268.__r_.__value_.__l.__size_;
  v33 = v32 + 27;
  if (v32 + 27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v33 <= 0x16)
  {
    qmemcpy(__p, "Stats.KFCluster.CM.tracked.", 27);
    v34 = &__p[27];
LABEL_66:
    if (v31 >= 0)
      v38 = &v268;
    else
      v38 = (std::string *)v268.__r_.__value_.__r.__words[0];
    memmove(v34, v38, v32);
    goto LABEL_70;
  }
  v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17)
    v35 = v33 | 7;
  v36 = v35 + 1;
  v37 = (char *)operator new(v35 + 1);
  *(_QWORD *)&__p[8] = v32 + 27;
  *(_QWORD *)&__p[16] = v36 | 0x8000000000000000;
  *(_QWORD *)__p = v37;
  qmemcpy(v37, "Stats.KFCluster.CM.tracked.", 27);
  v34 = v37 + 27;
  if (v32)
    goto LABEL_66;
LABEL_70:
  v34[v32] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v39 = __p[23];
  v40 = __p;
  if (__p[23] < 0)
  {
    v40 = *(_BYTE **)__p;
    v39 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v40;
  *((_QWORD *)&v279 + 1) = v39;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v41 = sub_2241471F8();
    v42 = v41[2];
    if (!v42)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v42 = v41[2];
    }
    v43 = *(_QWORD *)(v42 + 64);
    v44 = (std::mutex *)(v43 + 32);
    std::mutex::lock((std::mutex *)(v43 + 32));
    v46 = *(_QWORD *)(v43 + 96);
    v45 = *(_QWORD *)(v43 + 104);
    std::mutex::unlock(v44);
    if (v46 != v45)
    {
      sub_2241471F8();
      v47 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v48 = sub_2241471F8();
          sub_223C03548((uint64_t)v48, v47, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v52 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = v273.__r_.__value_.__l.__size_;
  if (v52 >= 0x11)
  {
    v53 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v54 = v53->__r_.__value_.__r.__words[0];
    v55 = v53->__r_.__value_.__l.__size_;
    v56 = v53->__r_.__value_.__s.__data_[16];
    if (v54 == 0x6365722E64337663 && v55 == 0x73746174532E6E6FLL && v56 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v181 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v181)
      {
        v182 = (unint64_t *)&v181->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v59 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v60 = v268.__r_.__value_.__l.__size_;
  v61 = v60 + 21;
  if (v60 + 21 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v61 >= 0x17)
  {
    v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v63 = v61 | 7;
    v64 = v63 + 1;
    v65 = (char *)operator new(v63 + 1);
    *(_QWORD *)&__p[8] = v60 + 21;
    *(_QWORD *)&__p[16] = v64 | 0x8000000000000000;
    *(_QWORD *)__p = v65;
    qmemcpy(v65, "Stats.KFCluster.IGRS.", 21);
    v62 = v65 + 21;
  }
  else
  {
    *(_DWORD *)&__p[20] = 0;
    __p[23] = v60 + 21;
    qmemcpy(__p, "Stats.KFCluster.IGRS.", 21);
    v62 = &__p[21];
    if (!v60)
      goto LABEL_116;
  }
  if (v59 >= 0)
    v66 = &v268;
  else
    v66 = (std::string *)v268.__r_.__value_.__r.__words[0];
  memmove(v62, v66, v60);
LABEL_116:
  v62[v60] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v67 = __p[23];
  v68 = __p;
  if (__p[23] < 0)
  {
    v68 = *(_BYTE **)__p;
    v67 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v68;
  *((_QWORD *)&v279 + 1) = v67;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v69 = sub_2241471F8();
    v70 = v69[2];
    if (!v70)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v70 = v69[2];
    }
    v71 = *(_QWORD *)(v70 + 64);
    v72 = (std::mutex *)(v71 + 32);
    std::mutex::lock((std::mutex *)(v71 + 32));
    v74 = *(_QWORD *)(v71 + 96);
    v73 = *(_QWORD *)(v71 + 104);
    std::mutex::unlock(v72);
    if (v74 != v73)
    {
      sub_2241471F8();
      v75 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v76 = sub_2241471F8();
          sub_223C03548((uint64_t)v76, v75, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v80 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v80 = v273.__r_.__value_.__l.__size_;
  if (v80 >= 0x11)
  {
    v81 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v81 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v82 = v81->__r_.__value_.__r.__words[0];
    v83 = v81->__r_.__value_.__l.__size_;
    v84 = v81->__r_.__value_.__s.__data_[16];
    if (v82 == 0x6365722E64337663 && v83 == 0x73746174532E6E6FLL && v84 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v184 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v184)
      {
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v87 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v88 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v88 = v268.__r_.__value_.__l.__size_;
  v89 = v88 + 29;
  if (v88 + 29 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v89 <= 0x16)
  {
    qmemcpy(__p, "Stats.KFCluster.KVA.metadata.", 29);
    v90 = &__p[29];
LABEL_157:
    if (v87 >= 0)
      v94 = &v268;
    else
      v94 = (std::string *)v268.__r_.__value_.__r.__words[0];
    memmove(v90, v94, v88);
    goto LABEL_161;
  }
  v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v89 | 7) != 0x17)
    v91 = v89 | 7;
  v92 = v91 + 1;
  v93 = (char *)operator new(v91 + 1);
  *(_QWORD *)&__p[8] = v88 + 29;
  *(_QWORD *)&__p[16] = v92 | 0x8000000000000000;
  *(_QWORD *)__p = v93;
  qmemcpy(v93, "Stats.KFCluster.KVA.metadata.", 29);
  v90 = v93 + 29;
  if (v88)
    goto LABEL_157;
LABEL_161:
  v90[v88] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v95 = __p[23];
  v96 = __p;
  if (__p[23] < 0)
  {
    v96 = *(_BYTE **)__p;
    v95 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v96;
  *((_QWORD *)&v279 + 1) = v95;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v97 = sub_2241471F8();
    v98 = v97[2];
    if (!v98)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v98 = v97[2];
    }
    v99 = *(_QWORD *)(v98 + 64);
    v100 = (std::mutex *)(v99 + 32);
    std::mutex::lock((std::mutex *)(v99 + 32));
    v102 = *(_QWORD *)(v99 + 96);
    v101 = *(_QWORD *)(v99 + 104);
    std::mutex::unlock(v100);
    if (v102 != v101)
    {
      sub_2241471F8();
      v103 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v104 = sub_2241471F8();
          sub_223C03548((uint64_t)v104, v103, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v105 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v106 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v108 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v108 = v273.__r_.__value_.__l.__size_;
  if (v108 >= 0x11)
  {
    v109 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v109 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v110 = v109->__r_.__value_.__r.__words[0];
    v111 = v109->__r_.__value_.__l.__size_;
    v112 = v109->__r_.__value_.__s.__data_[16];
    if (v110 == 0x6365722E64337663 && v111 == 0x73746174532E6E6FLL && v112 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v187)
      {
        v188 = (unint64_t *)&v187->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v115 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v116 = v268.__r_.__value_.__l.__size_;
  v117 = v116 + 28;
  if (v116 + 28 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v117 <= 0x16)
  {
    qmemcpy(__p, "Stats.KFCluster.KVA.tracked.", 28);
    v118 = &__p[28];
LABEL_202:
    if (v115 >= 0)
      v122 = &v268;
    else
      v122 = (std::string *)v268.__r_.__value_.__r.__words[0];
    memmove(v118, v122, v116);
    goto LABEL_206;
  }
  v119 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v117 | 7) != 0x17)
    v119 = v117 | 7;
  v120 = v119 + 1;
  v121 = (char *)operator new(v119 + 1);
  *(_QWORD *)&__p[8] = v116 + 28;
  *(_QWORD *)&__p[16] = v120 | 0x8000000000000000;
  *(_QWORD *)__p = v121;
  qmemcpy(v121, "Stats.KFCluster.KVA.tracked.", 28);
  v118 = v121 + 28;
  if (v116)
    goto LABEL_202;
LABEL_206:
  v118[v116] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v123 = __p[23];
  v124 = __p;
  if (__p[23] < 0)
  {
    v124 = *(_BYTE **)__p;
    v123 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v124;
  *((_QWORD *)&v279 + 1) = v123;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v125 = sub_2241471F8();
    v126 = v125[2];
    if (!v126)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v126 = v125[2];
    }
    v127 = *(_QWORD *)(v126 + 64);
    v128 = (std::mutex *)(v127 + 32);
    std::mutex::lock((std::mutex *)(v127 + 32));
    v130 = *(_QWORD *)(v127 + 96);
    v129 = *(_QWORD *)(v127 + 104);
    std::mutex::unlock(v128);
    if (v130 != v129)
    {
      sub_2241471F8();
      v131 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 24))(v131))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v132 = sub_2241471F8();
          sub_223C03548((uint64_t)v132, v131, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v133 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v134 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v136 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v136 = v273.__r_.__value_.__l.__size_;
  if (v136 >= 0x11)
  {
    v137 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v137 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v138 = v137->__r_.__value_.__r.__words[0];
    v139 = v137->__r_.__value_.__l.__size_;
    v140 = v137->__r_.__value_.__s.__data_[16];
    if (v138 == 0x6365722E64337663 && v139 == 0x73746174532E6E6FLL && v140 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v190 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v190)
      {
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  v143 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v144 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v144 = v268.__r_.__value_.__l.__size_;
  v145 = v144 + 20;
  if (v144 + 20 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v145 >= 0x17)
  {
    v147 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v145 | 7) != 0x17)
      v147 = v145 | 7;
    v148 = v147 + 1;
    v149 = (char *)operator new(v147 + 1);
    *(_QWORD *)&__p[8] = v144 + 20;
    *(_QWORD *)&__p[16] = v148 | 0x8000000000000000;
    *(_QWORD *)__p = v149;
    *((_DWORD *)v149 + 4) = 776819538;
    *(_OWORD *)v149 = *(_OWORD *)"Stats.KFCluster.RSM.";
    v146 = v149 + 20;
  }
  else
  {
    *(_DWORD *)&__p[20] = 0;
    __p[23] = v144 + 20;
    qmemcpy(__p, "Stats.KFCluster.RSM.", 20);
    v146 = &__p[20];
    if (!v144)
      goto LABEL_252;
  }
  if (v143 >= 0)
    v150 = &v268;
  else
    v150 = (std::string *)v268.__r_.__value_.__r.__words[0];
  memmove(v146, v150, v144);
LABEL_252:
  v146[v144] = 0;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  v151 = __p[23];
  v152 = __p;
  if (__p[23] < 0)
  {
    v152 = *(_BYTE **)__p;
    v151 = *(_QWORD *)&__p[8];
  }
  *(_QWORD *)&v279 = v152;
  *((_QWORD *)&v279 + 1) = v151;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v273);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v153 = sub_2241471F8();
    v154 = v153[2];
    if (!v154)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v154 = v153[2];
    }
    v155 = *(_QWORD *)(v154 + 64);
    v156 = (std::mutex *)(v155 + 32);
    std::mutex::lock((std::mutex *)(v155 + 32));
    v158 = *(_QWORD *)(v155 + 96);
    v157 = *(_QWORD *)(v155 + 104);
    std::mutex::unlock(v156);
    if (v158 != v157)
    {
      sub_2241471F8();
      v159 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v159 + 24))(v159))
      {
        v278 = 0u;
        v279 = 0u;
        LODWORD(v280[0]) = 728325608;
        kdebug_trace();
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_QWORD *)__p = &__p[8];
        sub_2245314F4(__p, &v275);
        v271 = v275;
        sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v159 + 24))(v159))
        {
          *(_QWORD *)__p = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&__p[8] = 2;
          v160 = sub_2241471F8();
          sub_223C03548((uint64_t)v160, v159, (uint64_t)&v271, (uint64_t)&unk_2245C9EFE, (__int128 *)__p);
        }
        v161 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
        if (*((_QWORD *)&v271 + 1))
        {
          v162 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        kdebug_trace();
      }
    }
  }
  v278 = 0u;
  v279 = 0u;
  LODWORD(v280[0]) = 728325624;
  kdebug_trace();
  v164 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v164 = v273.__r_.__value_.__l.__size_;
  if (v164 >= 0x11)
  {
    v165 = &v273;
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v165 = (std::string *)v273.__r_.__value_.__r.__words[0];
    v166 = v165->__r_.__value_.__r.__words[0];
    v167 = v165->__r_.__value_.__l.__size_;
    v168 = v165->__r_.__value_.__s.__data_[16];
    if (v166 == 0x6365722E64337663 && v167 == 0x73746174532E6E6FLL && v168 == 46)
    {
      sub_223187510();
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)__p = &__p[8];
      sub_2245314F4(__p, &v275);
      v193 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
      if (v193)
      {
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v171 = sub_2241471F8();
    v172 = v171[2];
    if (!v172)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_453;
      }
      v172 = v171[2];
    }
    v173 = *(_QWORD *)(v172 + 64);
    v174 = (std::mutex *)(v173 + 32);
    std::mutex::lock((std::mutex *)(v173 + 32));
    v176 = *(_QWORD *)(v173 + 96);
    v175 = *(_QWORD *)(v173 + 104);
    std::mutex::unlock(v174);
    if (v176 != v175)
    {
      *(_QWORD *)&v278 = "cv3d.recon.";
      *((_QWORD *)&v278 + 1) = 11;
      *(_QWORD *)&v279 = "MeshingEngine.KFCluster.TrackedAnchors";
      *((_QWORD *)&v279 + 1) = 38;
      sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &v267);
      sub_2241471F8();
      v177 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177))
      {
        memset(__p, 0, sizeof(__p));
        v266 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177))
        {
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&__dst, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
          else
            __dst = v268;
          *(_QWORD *)&v270 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v270 + 1) = 2;
          v196 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v177 + 24))(v177))
          {
            sub_2241498F4((uint64_t)&v278, 0);
            v273 = __dst;
            memset(&__dst, 0, sizeof(__dst));
            v274 = 1;
            sub_22329F414((uint64_t)&v278, (__int128 *)&v273, &v270, &v275);
            if (v274 && SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v273.__r_.__value_.__l.__data_);
            sub_22316F8F4((uint64_t *)&v278);
            v197 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 56))(v177);
            v198 = *v197;
            v199 = (std::__shared_weak_count *)v197[1];
            if (v199)
            {
              v200 = (unint64_t *)&v199->__shared_owners_;
              do
                v201 = __ldxr(v200);
              while (__stxr(v201 + 1, v200));
            }
            v203 = *((_QWORD *)&v275 + 1);
            v202 = v276;
            *(_QWORD *)&v271 = &off_24EC6A3B8;
            *((_QWORD *)&v271 + 1) = *((_QWORD *)&v275 + 1);
            v272 = v276;
            *((_QWORD *)&v275 + 1) = 0;
            v276 = 0;
            *(_QWORD *)&v278 = v198;
            *((_QWORD *)&v278 + 1) = v199;
            if (v199)
            {
              v204 = (unint64_t *)&v199->__shared_owners_;
              do
                v205 = __ldxr(v204);
              while (__stxr(v205 + 1, v204));
            }
            *(_QWORD *)&v279 = &off_24EC6A3B8;
            *((_QWORD *)&v279 + 1) = v203;
            v280[0] = v202;
            if (v202)
            {
              v206 = (unint64_t *)&v202->__shared_owners_;
              do
                v207 = __ldxr(v206);
              while (__stxr(v207 + 1, v206));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v196 + 16))(v196, &v278);
            v208 = (std::__shared_weak_count *)v280[0];
            if (v280[0])
            {
              v209 = (unint64_t *)(v280[0] + 8);
              do
                v210 = __ldaxr(v209);
              while (__stlxr(v210 - 1, v209));
              if (!v210)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }
            v211 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
            if (*((_QWORD *)&v278 + 1))
            {
              v212 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
              do
                v213 = __ldaxr(v212);
              while (__stlxr(v213 - 1, v212));
              if (!v213)
              {
                ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                std::__shared_weak_count::__release_weak(v211);
              }
            }
            v214 = v272;
            if (v272)
            {
              v215 = (unint64_t *)&v272->__shared_owners_;
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
              }
            }
            if (v199)
            {
              v217 = (unint64_t *)&v199->__shared_owners_;
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            v219 = v276;
            if (v276)
            {
              v220 = (unint64_t *)&v276->__shared_owners_;
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v267.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_441;
  v222 = sub_2241471F8();
  v223 = v222[2];
  if (!v223)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      v223 = v222[2];
      goto LABEL_380;
    }
LABEL_453:
    abort();
  }
LABEL_380:
  v224 = *(_QWORD *)(v223 + 64);
  v225 = (std::mutex *)(v224 + 32);
  std::mutex::lock((std::mutex *)(v224 + 32));
  v227 = *(_QWORD *)(v224 + 96);
  v226 = *(_QWORD *)(v224 + 104);
  std::mutex::unlock(v225);
  if (v227 == v226)
    goto LABEL_441;
  *(_QWORD *)&v278 = "cv3d.recon.";
  *((_QWORD *)&v278 + 1) = 11;
  *(_QWORD *)&v279 = "MeshingEngine.KFCluster.RoomBoundaries";
  *((_QWORD *)&v279 + 1) = 38;
  sub_2231A9820((uint64_t)&v278, (uint64_t)v280, 0, 0, &__dst);
  sub_2241471F8();
  v228 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v228 + 24))(v228))
    goto LABEL_440;
  memset(__p, 0, sizeof(__p));
  v266 = 728325616;
  kdebug_trace();
  v229 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
  if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v230 = HIBYTE(v268.__r_.__value_.__r.__words[2]);
  else
    v230 = v268.__r_.__value_.__l.__size_;
  v231 = v230 + 9;
  if (v230 + 9 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v231 >= 0x17)
  {
    v233 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v233 = v231 | 7;
    v234 = v233 + 1;
    v235 = (char *)operator new(v233 + 1);
    v267.__r_.__value_.__l.__size_ = v230 + 9;
    v267.__r_.__value_.__r.__words[2] = v234 | 0x8000000000000000;
    v267.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
    v235[8] = 95;
    *(_QWORD *)v235 = *(_QWORD *)"boundary_";
    v232 = v235 + 9;
    goto LABEL_392;
  }
  *(_OWORD *)&v267.__r_.__value_.__r.__words[1] = 0x5FuLL;
  *((_BYTE *)&v267.__r_.__value_.__s + 23) = v230 + 9;
  v267.__r_.__value_.__r.__words[0] = *(_QWORD *)"boundary_";
  v232 = &v267.__r_.__value_.__s.__data_[9];
  if (v230)
  {
LABEL_392:
    if (v229 >= 0)
      v236 = &v268;
    else
      v236 = (std::string *)v268.__r_.__value_.__r.__words[0];
    memmove(v232, v236, v230);
  }
  v232[v230] = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v228 + 24))(v228))
  {
    v277[0] = v267.__r_.__value_.__l.__size_;
    v237 = (void *)v267.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v277 + 7) = *(std::string::size_type *)((char *)&v267.__r_.__value_.__r.__words[1] + 7);
    v238 = SHIBYTE(v267.__r_.__value_.__r.__words[2]);
    memset(&v267, 0, sizeof(v267));
    *(_QWORD *)&v270 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v270 + 1) = 2;
    v239 = sub_2241471F8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v228 + 24))(v228))
    {
      sub_2241498F4((uint64_t)&v278, 0);
      v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v237;
      v273.__r_.__value_.__l.__size_ = v277[0];
      *(std::string::size_type *)((char *)&v273.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v277 + 7);
      *((_BYTE *)&v273.__r_.__value_.__s + 23) = v238;
      v277[0] = 0;
      *(_QWORD *)((char *)v277 + 7) = 0;
      v274 = 1;
      sub_22329F414((uint64_t)&v278, (__int128 *)&v273, &v270, &v275);
      if (v274 && SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v273.__r_.__value_.__l.__data_);
      sub_22316F8F4((uint64_t *)&v278);
      v240 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 56))(v228);
      v241 = *v240;
      v242 = (std::__shared_weak_count *)v240[1];
      if (v242)
      {
        v243 = (unint64_t *)&v242->__shared_owners_;
        do
          v244 = __ldxr(v243);
        while (__stxr(v244 + 1, v243));
      }
      v246 = *((_QWORD *)&v275 + 1);
      v245 = v276;
      *(_QWORD *)&v271 = &off_24EC6A3B8;
      *((_QWORD *)&v271 + 1) = *((_QWORD *)&v275 + 1);
      v272 = v276;
      *((_QWORD *)&v275 + 1) = 0;
      v276 = 0;
      *(_QWORD *)&v278 = v241;
      *((_QWORD *)&v278 + 1) = v242;
      if (v242)
      {
        v247 = (unint64_t *)&v242->__shared_owners_;
        do
          v248 = __ldxr(v247);
        while (__stxr(v248 + 1, v247));
      }
      *(_QWORD *)&v279 = &off_24EC6A3B8;
      *((_QWORD *)&v279 + 1) = v246;
      v280[0] = v245;
      if (v245)
      {
        v249 = (unint64_t *)&v245->__shared_owners_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
      }
      (*(void (**)(uint64_t *, __int128 *))(*v239 + 16))(v239, &v278);
      v251 = (std::__shared_weak_count *)v280[0];
      if (v280[0])
      {
        v252 = (unint64_t *)(v280[0] + 8);
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      v254 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
      if (*((_QWORD *)&v278 + 1))
      {
        v255 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = v272;
      if (v272)
      {
        v258 = (unint64_t *)&v272->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      if (v242)
      {
        v260 = (unint64_t *)&v242->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
          std::__shared_weak_count::__release_weak(v242);
        }
      }
      v262 = v276;
      if (v276)
      {
        v263 = (unint64_t *)&v276->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
    }
    else if (v238 < 0)
    {
      operator delete(v237);
    }
  }
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  kdebug_trace();
LABEL_440:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_441:
    if ((SHIBYTE(v268.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_442;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
LABEL_442:
    operator delete(v268.__r_.__value_.__l.__data_);
}

void sub_223C1AD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,std::__shared_weak_count *a60)
{
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;

  v62 = v60;
  sub_2241231D8(v62);
  v64 = a60;
  if (a60)
  {
    p_shared_owners = (unint64_t *)&a60->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_2241231D8((uint64_t)&a39);
  if (v61)
  {
    v67 = (unint64_t *)&v61->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_2241231D8((uint64_t)&a51);
  if (a22 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a9);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_223C1B154(unsigned int a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  __n128 *v17;
  std::string *v18;
  size_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  std::mutex *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int v36;
  __n128 *v39;
  std::string *v40;
  size_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::string v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  std::string __p;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v56 = a2;
  v53 = 0u;
  v54 = 0u;
  v55 = 728333736;
  kdebug_trace();
  v51 = operator new(0x28uLL);
  v52 = xmmword_2245B8D40;
  strcpy((char *)v51, "Stats.Volumetric.CoordinateManager");
  *(_QWORD *)&v59 = "cv3d.recon.";
  *((_QWORD *)&v59 + 1) = 11;
  *(_QWORD *)&v60 = v51;
  *((_QWORD *)&v60 + 1) = 34;
  sub_2231A9820((uint64_t)&v59, (uint64_t)&v61, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v3 = sub_2241471F8();
    v4 = v3[2];
    if (!v4)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v3[2];
    }
    v5 = *(_QWORD *)(v4 + 64);
    v6 = (std::mutex *)(v5 + 32);
    std::mutex::lock((std::mutex *)(v5 + 32));
    v8 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(v5 + 104);
    std::mutex::unlock(v6);
    if (v8 != v7)
    {
      sub_2241471F8();
      v9 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
      {
        v59 = 0u;
        v60 = 0u;
        v61 = 728325608;
        kdebug_trace();
        v50.__r_.__value_.__s.__data_[0] = a1;
        sub_2238B0164((double *)&qword_255788F20, v9, (char *)&v50, "GR anchor tracking status");
        kdebug_trace();
      }
    }
  }
  v59 = 0u;
  v60 = 0u;
  v61 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = p_p->__r_.__value_.__r.__words[0];
    v13 = p_p->__r_.__value_.__l.__size_;
    v14 = p_p->__r_.__value_.__s.__data_[16];
    if (v12 == 0x6365722E64337663 && v13 == 0x73746174532E6E6FLL && v14 == 46)
    {
      v17 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v19 = __p.__r_.__value_.__l.__size_;
      v50.__r_.__value_.__s.__data_[0] = a1;
      sub_22387FA8C(v17, v18, v19, (unsigned __int8 *)&v50, (uint64_t)"GR anchor tracking status", 25);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v59 = 0u;
  v60 = 0u;
  v61 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v20 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v47) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v46) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v46 / (double)v47;
    __cxa_guard_release(&qword_255795560);
  }
  v21 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  sub_223C20C00((uint64_t)&qword_25578BBD0, a1);
  kdebug_trace();
  *(_QWORD *)&v59 = "cv3d.recon.";
  *((_QWORD *)&v59 + 1) = 11;
  v22 = HIBYTE(v52);
  v23 = &v51;
  if (v52 < 0)
  {
    v23 = v51;
    v22 = v52;
  }
  *(_QWORD *)&v60 = v23;
  *((_QWORD *)&v60 + 1) = v22;
  sub_2231A9820((uint64_t)&v59, (uint64_t)&v61, 0, 0, &v50);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v24 = sub_2241471F8();
    v25 = v24[2];
    if (!v25)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v25 = v24[2];
    }
    v26 = *(_QWORD *)(v25 + 64);
    v27 = (std::mutex *)(v26 + 32);
    std::mutex::lock((std::mutex *)(v26 + 32));
    v29 = *(_QWORD *)(v26 + 96);
    v28 = *(_QWORD *)(v26 + 104);
    std::mutex::unlock(v27);
    if (v29 != v28)
    {
      sub_2241471F8();
      v30 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30))
      {
        v59 = 0u;
        v60 = 0u;
        v61 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&__p, "remesh");
          *(_QWORD *)&v57 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v57 + 1) = 2;
          v31 = sub_2241471F8();
          sub_223705674((uint64_t)v31, v30, &v56, (uint64_t)&__p, &v57);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v59 = 0u;
  v60 = 0u;
  v61 = 728325624;
  kdebug_trace();
  v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = v50.__r_.__value_.__l.__size_;
  if (v32 >= 0x11)
  {
    v33 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
    v34 = v33->__r_.__value_.__r.__words[0];
    v35 = v33->__r_.__value_.__l.__size_;
    v36 = v33->__r_.__value_.__s.__data_[16];
    if (v34 == 0x6365722E64337663 && v35 == 0x73746174532E6E6FLL && v36 == 46)
    {
      v39 = sub_223187510();
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v50;
      else
        v40 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        v41 = v50.__r_.__value_.__l.__size_;
      sub_22318760C((uint64_t *)v39, v40, v41, &v56, (uint64_t)"remesh", 6);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v59 = 0u;
  v60 = 0u;
  v61 = 728325632;
  kdebug_trace();
  mach_absolute_time();
  v42 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&__p);
    LODWORD(v49) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
    LODWORD(v48) = __p.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v48 / (double)v49;
    __cxa_guard_release(&qword_255795560);
  }
  v43 = v56;
  v44 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578D278);
  qword_25578D2B8 += v43;
  std::mutex::unlock(&stru_25578D278);
  kdebug_trace();
  if (SHIBYTE(v52) < 0)
    operator delete(v51);
  return kdebug_trace();
}

void sub_223C1B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC(v37 - 128);
  if (a22 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_223C1BB1C(uint64_t result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unint64_t v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  size_t v29;
  size_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *v82;
  const char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  BOOL v89;
  _QWORD *v90;
  unsigned __int8 **v91;
  const char *v92;
  uint64_t v93;
  char *__s;
  void *__p[2];
  char v97;
  _QWORD v98[3];
  int v99;
  const char *v100;
  int v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  _BYTE v106[24];
  __int128 v107;
  char *v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  char *v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  __int128 v114;
  _QWORD *v115;
  __int128 v116;
  _QWORD v117[7];
  unint64_t v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = (unsigned __int8 **)result;
    v90 = a2 + 1;
    v91 = (unsigned __int8 **)result;
    while (1)
    {
      sub_223C0D49C(&v105);
      v6 = (unsigned __int8 *)v4 + 25;
      if (**(int **)(v105 + 56) <= 4)
      {
        v7 = *(unsigned __int8 *)(v105 + 72);
        v8 = *(_BYTE *)(v105 + 72) != 0;
        v9 = sub_22322F254(v105, "OSLogSurrogateAppender", 1, 0);
        if (((v9 == 0) & ~v8) == 0)
          break;
      }
LABEL_157:
      result = sub_2231B0224(v5, v6);
      v87 = (_QWORD *)v4[1];
      if (v87)
      {
        do
        {
          v88 = v87;
          v87 = (_QWORD *)*v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          v88 = (_QWORD *)v4[2];
          v89 = *v88 == (_QWORD)v4;
          v4 = v88;
        }
        while (!v89);
      }
      v4 = v88;
      if (v88 == v3)
        return result;
    }
    v98[0] = &v105;
    v98[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v98[2] = std::chrono::system_clock::now().__d_.__rep_;
    v99 = 4;
    v100 = "unknown file";
    v101 = 382;
    v102 = "unknown function";
    v103 = 0;
    v104 = 0;
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const char *)a3;
    else
      v10 = *(const char **)a3;
    LODWORD(v117[3]) = 0;
    sub_22319B83C((uint64_t)v106, (uint64_t)v117, (unsigned __int8 *)v4 + 25);
    if (LODWORD(v117[3]) == -1)
      sub_22316DD70();
    *(_QWORD *)v106 = &v109;
    ((void (*)(void **__return_ptr, _BYTE *, _QWORD *))off_24EC60BB0[LODWORD(v117[3])])(__p, v106, v117);
    if (LODWORD(v117[3]) != -1)
      ((void (*)(_BYTE *, _QWORD *))off_24EC60B38[LODWORD(v117[3])])(v106, v117);
    v11 = __p;
    if (v97 < 0)
      v11 = (void **)__p[0];
    __s = (char *)v11;
    v12 = *(_QWORD *)v98[0];
    v13 = (const char *)(*(_QWORD *)v98[0] + 16);
    v92 = v13;
    v93 = *(_QWORD *)v98[0];
    if (*(char *)(*(_QWORD *)v98[0] + 39) < 0)
    {
      v13 = *(const char **)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      v16 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v16 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v98[0] + 39);
      v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v15 & 1) != 0)
        goto LABEL_18;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v106);
      sub_223199C58("com.apple.cv3d", (unint64_t)v106, byte_255788F40);
      if ((_BYTE)v107 && (v106[23] & 0x80000000) != 0)
        operator delete(*(void **)v106);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_18:
    if (byte_255788F40[23] >= 0)
      v17 = byte_255788F40;
    else
      v17 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v18 = byte_255788F40[23];
    else
      v18 = *(_QWORD *)&byte_255788F40[8];
    v117[0] = os_log_create(v17, v13);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v18 >= 0x17)
    {
      v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v20 = v18 | 7;
      v21 = v20 + 1;
      v19 = operator new(v20 + 1);
      v117[2] = v18;
      v117[3] = v21 | 0x8000000000000000;
      v117[1] = v19;
    }
    else
    {
      HIBYTE(v117[3]) = v18;
      v19 = &v117[1];
      if (!v18)
      {
LABEL_32:
        *((_BYTE *)v19 + v18) = 0;
        LOBYTE(v117[4]) = 1;
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v14 >= 0x17)
        {
          v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v24 = v14 | 7;
          v25 = v24 + 1;
          v22 = operator new(v24 + 1);
          v117[6] = v14;
          v118 = v25 | 0x8000000000000000;
          v117[5] = v22;
        }
        else
        {
          HIBYTE(v118) = v14;
          v22 = &v117[5];
          if (!v14)
          {
            LOBYTE(v117[5]) = 0;
            v119 = 1;
            v23 = v117[0];
            if ((SHIBYTE(v118) & 0x80000000) == 0)
              goto LABEL_36;
            goto LABEL_42;
          }
        }
        memmove(v22, v13, v14);
        *((_BYTE *)v22 + v14) = 0;
        v119 = 1;
        v23 = v117[0];
        if ((SHIBYTE(v118) & 0x80000000) == 0)
        {
LABEL_36:
          if (!LOBYTE(v117[4]))
            goto LABEL_45;
          goto LABEL_43;
        }
LABEL_42:
        operator delete((void *)v117[5]);
        if (!LOBYTE(v117[4]))
          goto LABEL_45;
LABEL_43:
        if (SHIBYTE(v117[3]) < 0)
          operator delete((void *)v117[1]);
LABEL_45:
        if (v117[0])
          os_release((void *)v117[0]);
        if (!v9 || !*(_QWORD *)(v9 + 24))
        {
          os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          LODWORD(v117[0]) = 136315394;
          *(_QWORD *)((char *)v117 + 4) = v10;
          WORD2(v117[1]) = 2080;
          *(_QWORD *)((char *)&v117[1] + 6) = __s;
          v32 = (void *)_os_log_send_and_compose_impl();
          v5 = v91;
          v6 = (unsigned __int8 *)v4 + 25;
          if (v32)
          {
            free(v32);
            if ((v97 & 0x80000000) == 0)
              goto LABEL_135;
            goto LABEL_138;
          }
          goto LABEL_134;
        }
        v26 = _os_log_pack_size();
        v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
        v28 = (std::__shared_weak_count *)operator new();
        v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v28->__shared_owners_ = 0;
        v28->__shared_weak_owners_ = 0;
        v28[1].__vftable = v27;
        *(_QWORD *)&v109 = v27;
        *((_QWORD *)&v109 + 1) = v27;
        v110 = v28;
        v111 = 0;
        v112 = 0;
        v29 = strlen(v10);
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v30 = v29;
        if (v29 >= 0x17)
        {
          v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v33 = v29 | 7;
          v34 = v33 + 1;
          v31 = operator new(v33 + 1);
          *(_QWORD *)&v116 = v30;
          *((_QWORD *)&v116 + 1) = v34 | 0x8000000000000000;
          v115 = v31;
        }
        else
        {
          HIBYTE(v116) = v29;
          v31 = &v115;
          if (!v29)
          {
LABEL_60:
            *((_BYTE *)v31 + v30) = 0;
            v35 = strlen(__s);
            if (v35 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v36 = v35;
            if (v35 >= 0x17)
            {
              v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v35 | 7) != 0x17)
                v38 = v35 | 7;
              v39 = v38 + 1;
              v37 = operator new(v38 + 1);
              *(_QWORD *)&v114 = v36;
              *((_QWORD *)&v114 + 1) = v39 | 0x8000000000000000;
              v113 = v37;
            }
            else
            {
              HIBYTE(v114) = v35;
              v37 = &v113;
              if (!v35)
                goto LABEL_68;
            }
            memcpy(v37, __s, v36);
LABEL_68:
            *((_BYTE *)v37 + v36) = 0;
            v117[2] = v116;
            *(_QWORD *)((char *)&v117[2] + 7) = *(_QWORD *)((char *)&v116 + 7);
            v117[5] = v114;
            *(_QWORD *)((char *)&v117[5] + 7) = *(_QWORD *)((char *)&v114 + 7);
            v117[0] = off_24EC20780;
            v117[1] = v115;
            HIBYTE(v117[3]) = HIBYTE(v116);
            v117[4] = v113;
            HIBYTE(v117[6]) = HIBYTE(v114);
            v40 = (char *)operator new(0x50uLL);
            *((_QWORD *)v40 + 1) = 0;
            *((_QWORD *)v40 + 2) = 0;
            *((_QWORD *)v40 + 3) = off_24EC20780;
            *(_QWORD *)v40 = &off_24EC20730;
            *((_OWORD *)v40 + 2) = *(_OWORD *)&v117[1];
            *((_QWORD *)v40 + 6) = v117[3];
            memset(&v117[1], 0, 24);
            *(_OWORD *)(v40 + 56) = *(_OWORD *)&v117[4];
            *((_QWORD *)v40 + 9) = v117[6];
            memset(&v117[4], 0, 24);
            v41 = v112;
            v111 = v40 + 24;
            v112 = (std::__shared_weak_count *)v40;
            if (!v41)
              goto LABEL_72;
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(p_shared_owners);
            while (__stlxr(v43 - 1, p_shared_owners));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
              if ((SHIBYTE(v117[6]) & 0x80000000) == 0)
              {
LABEL_73:
                if ((SHIBYTE(v117[3]) & 0x80000000) == 0)
                  goto LABEL_74;
                goto LABEL_78;
              }
            }
            else
            {
LABEL_72:
              if ((SHIBYTE(v117[6]) & 0x80000000) == 0)
                goto LABEL_73;
            }
            operator delete((void *)v117[4]);
            if ((SHIBYTE(v117[3]) & 0x80000000) == 0)
            {
LABEL_74:
              *(_OWORD *)v106 = v109;
              v45 = v110;
              v44 = v111;
              *(_QWORD *)&v106[16] = v110;
              if (!v110)
                goto LABEL_81;
              goto LABEL_79;
            }
LABEL_78:
            operator delete((void *)v117[1]);
            *(_OWORD *)v106 = v109;
            v45 = v110;
            v44 = v111;
            *(_QWORD *)&v106[16] = v110;
            if (!v110)
              goto LABEL_81;
LABEL_79:
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
LABEL_81:
            v48 = v112;
            *(_QWORD *)&v107 = v44;
            *((_QWORD *)&v107 + 1) = v112;
            if (v112)
            {
              v49 = (unint64_t *)&v112->__shared_owners_;
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
              v108 = v44;
              do
                v51 = __ldaxr(v49);
              while (__stlxr(v51 - 1, v49));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            else
            {
              v108 = v44;
            }
            v52 = v110;
            if (v110)
            {
              v53 = (unint64_t *)&v110->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = *(_QWORD *)v106;
            if (v108[31] >= 0)
              v56 = v108 + 8;
            else
              v56 = (char *)*((_QWORD *)v108 + 1);
            if (v108[55] >= 0)
              v57 = v108 + 32;
            else
              v57 = (char *)*((_QWORD *)v108 + 4);
            v58 = _os_log_pack_fill();
            *(_DWORD *)v58 = 136315394;
            *(_QWORD *)(v58 + 4) = v56;
            *(_WORD *)(v58 + 12) = 2080;
            *(_QWORD *)(v58 + 14) = v57;
            v59 = operator new();
            v60 = *(unsigned __int8 *)(v93 + 39);
            v61 = v92;
            if ((v60 & 0x80u) != 0)
            {
              v61 = *(const char **)(v93 + 16);
              v60 = *(_QWORD *)(v93 + 24);
            }
            *(_QWORD *)v59 = v55;
            *(_OWORD *)(v59 + 8) = *(_OWORD *)&v106[8];
            *(_QWORD *)&v106[8] = 0;
            *(_QWORD *)&v106[16] = 0;
            *(_OWORD *)(v59 + 24) = v107;
            v107 = 0uLL;
            *(_QWORD *)(v59 + 40) = v61;
            *(_QWORD *)(v59 + 48) = v60;
            *(_BYTE *)(v59 + 56) = 16;
            *(_QWORD *)&v109 = 0;
            v117[0] = v59;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v117);
            v62 = v117[0];
            v117[0] = 0;
            if (v62)
            {
              v63 = *(std::__shared_weak_count **)(v62 + 32);
              if (v63)
              {
                v64 = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              v66 = *(std::__shared_weak_count **)(v62 + 16);
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              MEMORY[0x227684CE8](v62, 0x10F0C40B62ED6C6);
              v69 = v109;
              *(_QWORD *)&v109 = 0;
              if (v69)
              {
                v70 = *(std::__shared_weak_count **)(v69 + 32);
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v73 = *(std::__shared_weak_count **)(v69 + 16);
                if (v73)
                {
                  v74 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                MEMORY[0x227684CE8](v69, 0x10F0C40B62ED6C6);
              }
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
            v5 = v91;
            v6 = (unsigned __int8 *)v4 + 25;
            if (*((_QWORD *)&v107 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v79 = *(std::__shared_weak_count **)&v106[16];
            if (*(_QWORD *)&v106[16])
            {
              v80 = (unint64_t *)(*(_QWORD *)&v106[16] + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
                if ((v97 & 0x80000000) == 0)
                {
LABEL_135:
                  if (!v7)
                  {
LABEL_151:
                    sub_223182C08((uint64_t)v98);
                    v84 = v104;
                    if (v104)
                    {
                      v85 = (unint64_t *)&v104->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v3 = v90;
                    goto LABEL_157;
                  }
LABEL_139:
                  if (*(char *)(a3 + 23) >= 0)
                    v82 = (const char *)a3;
                  else
                    v82 = *(const char **)a3;
                  LODWORD(v117[3]) = 0;
                  sub_22319B83C((uint64_t)&v109, (uint64_t)v117, v6);
                  if (LODWORD(v117[3]) == -1)
                    sub_22316DD70();
                  *(_QWORD *)&v109 = &v115;
                  ((void (*)(_BYTE *__return_ptr, __int128 *, _QWORD *))off_24EC60BB0[LODWORD(v117[3])])(v106, &v109, v117);
                  if (LODWORD(v117[3]) != -1)
                    ((void (*)(__int128 *, _QWORD *))off_24EC60B38[LODWORD(v117[3])])(&v109, v117);
                  if (v106[23] >= 0)
                    v83 = v106;
                  else
                    v83 = *(const char **)v106;
                  sub_22322C138((uint64_t)v98, "GRS:%s Remove invalid KF %s", v82, v83);
                  if ((v106[23] & 0x80000000) != 0)
                    operator delete(*(void **)v106);
                  sub_223182C08((uint64_t)v98);
                  goto LABEL_151;
                }
LABEL_138:
                operator delete(__p[0]);
                if (!v7)
                  goto LABEL_151;
                goto LABEL_139;
              }
            }
LABEL_134:
            if ((v97 & 0x80000000) == 0)
              goto LABEL_135;
            goto LABEL_138;
          }
        }
        memcpy(v31, v10, v30);
        goto LABEL_60;
      }
    }
    memmove(v19, v17, v18);
    goto LABEL_32;
  }
  return result;
}

void sub_223C1C770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a54 && a53 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  if (a37 < 0)
    operator delete(a32);
  sub_223182DAC((uint64_t)&a38);
  _Unwind_Resume(a1);
}

unint64_t sub_223C1C938(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7)
{
  unint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[2];
  unsigned __int8 v13;
  std::string v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v19 = a2;
  v20 = result;
  v17 = a4;
  v18 = a3;
  v15 = a6;
  v16 = a5;
  v7 = result - (a3 + a4);
  if (v7 >= a2)
    v7 = a2;
  if (a5 <= a6)
    v8 = a6;
  else
    v8 = a5;
  if (v7 < v8)
  {
    if (a7)
      v9 = "External";
    else
      v9 = "Pose Update";
    sub_223174DE4(&v14, v9);
    sub_223C1CAAC("Graph update constraints violated graph lower bound (", &v15, (std::string *)") event required size (", &v16, (std::string *)") tracked kfs (", &v20, (std::string *)") event kfs (", &v19, (std::string *)") removed kfs (", &v17, (std::string *)") non-graph external kfs (", &v18, (std::string *)") graph update type (", &v14, (std::string *)")");
    if ((v13 & 0x80u) == 0)
      v10 = v12;
    else
      v10 = (_QWORD *)v12[0];
    if ((v13 & 0x80u) == 0)
      v11 = v13;
    else
      v11 = v12[1];
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemUtils.cpp", 411, (uint64_t)"", 0, (uint64_t)v10, v11, (void (*)(void **))sub_22457406C);
    abort();
  }
  return result;
}

void sub_223C1CA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C1CAAC(const char *a1, unint64_t *a2, std::string *a3, unint64_t *a4, std::string *a5, unint64_t *a6, std::string *a7, unint64_t *a8, std::string *a9, unint64_t *a10, std::string *a11, unint64_t *a12, std::string *a13, std::string *a14, std::string *a15)
{
  size_t v23;
  size_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t *v29;
  _QWORD __dst[2];
  unint64_t v31;
  int v32;
  std::string v33;
  std::string **v34;
  std::string *v35;
  std::string *v36;
  _QWORD *v37;
  std::string *v38;
  std::string *v39;

  v32 = -1;
  v23 = strlen(a1);
  if (v23 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v24 = v23;
  v29 = a8;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    __dst[1] = v24;
    v31 = v27 | 0x8000000000000000;
    __dst[0] = v25;
    goto LABEL_8;
  }
  HIBYTE(v31) = v23;
  v25 = __dst;
  if (v23)
LABEL_8:
    memcpy(v25, a1, v24);
  *((_BYTE *)v25 + v24) = 0;
  v32 = 1;
  std::to_string(&v33, *a2);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a3;
  v37 = __dst;
  v38 = a3;
  v39 = a3;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E18[v32])(&v33, __dst);
  std::to_string(&v33, *a4);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a5;
  v37 = __dst;
  v38 = a5;
  v39 = a5;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E30[v32])(&v33, __dst);
  std::to_string(&v33, *a6);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a7;
  v37 = __dst;
  v38 = a7;
  v39 = a7;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E48[v32])(&v33, __dst);
  std::to_string(&v33, *v29);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a9;
  v37 = __dst;
  v38 = a9;
  v39 = a9;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E30[v32])(&v33, __dst);
  std::to_string(&v33, *a10);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a11;
  v37 = __dst;
  v38 = a11;
  v39 = a11;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E60[v32])(&v33, __dst);
  std::to_string(&v33, *a12);
  v35 = (std::string *)__dst;
  v36 = &v33;
  v37 = __dst;
  v38 = &v33;
  v39 = &v33;
  if (v32 == -1)
    sub_22316DD70();
  v34 = &v35;
  ((void (*)(std::string ***, _QWORD *))off_24EC60B50[v32])(&v34, __dst);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v35 = (std::string *)__dst;
  v36 = a13;
  v37 = __dst;
  v38 = a13;
  v39 = a13;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60E78[v32])(&v33, __dst);
  v35 = (std::string *)__dst;
  v36 = a14;
  v37 = __dst;
  v38 = a14;
  v39 = a14;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60BC8[v32])(&v33, __dst);
  v35 = (std::string *)__dst;
  v36 = a15;
  v37 = __dst;
  v38 = a15;
  v39 = a15;
  if (v32 == -1)
    sub_22316DD70();
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  ((void (*)(std::string *, _QWORD *))off_24EC60BE0[v32])(&v33, __dst);
  if (v32 == -1)
    sub_22316DD70();
  v35 = &v33;
  result = ((uint64_t (*)(std::string **, _QWORD *))off_24EC60BB0[v32])(&v35, __dst);
  if (v32 != -1)
    return ((uint64_t (*)(std::string **, _QWORD *))off_24EC60B38[v32])(&v35, __dst);
  return result;
}

void sub_223C1D068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_22319B964((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223C1D0F0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (_QWORD *)*a1;
  v26 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v29 = xmmword_224668DF8;
      v30 = unk_224668E08;
      v31 = xmmword_224668E18;
      v32 = unk_224668E28;
      memset(&v34[20], 0, 40);
      *(_OWORD *)&v34[4] = 0u;
      v33 = 0uLL;
      *(_DWORD *)v34 = 1065353216;
      *(_DWORD *)&v34[20] = 1065353216;
      *(_DWORD *)&v34[40] = 1065353216;
      memset(&v34[84], 0, 40);
      *(_OWORD *)&v34[68] = 0u;
      *(_QWORD *)&v34[60] = _D8;
      *(_DWORD *)&v34[84] = 1065353216;
      *(_DWORD *)&v34[104] = 1065353216;
      *(_DWORD *)&v34[124] = 1065353216;
      v28 = 0uLL;
      v27 = *(_OWORD *)((char *)v3 + 25);
      v35 = 288;
      v9 = (char *)operator new(0x240uLL);
      sub_223894E6C((uint64_t)v9);
      *(_QWORD *)&v28 = v9 + 24;
      *((_QWORD *)&v28 + 1) = v9;
      v10 = *(_QWORD *)(a2 + 8);
      if (v10 >= *(_QWORD *)(a2 + 16))
      {
        v21 = sub_22356F1F8((void **)a2, (uint64_t)&v27);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        *(_QWORD *)(a2 + 8) = v21;
        if (!v22)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          v20 = (_QWORD *)v3[1];
          if (v20)
          {
            do
            {
LABEL_12:
              v25 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
            goto LABEL_3;
          }
        }
        else
        {
LABEL_11:
          v20 = (_QWORD *)v3[1];
          if (v20)
            goto LABEL_12;
        }
      }
      else
      {
        *(_OWORD *)v10 = v27;
        *(_OWORD *)(v10 + 16) = v28;
        v28 = 0uLL;
        v11 = v32;
        v13 = v29;
        v12 = v30;
        *(_OWORD *)(v10 + 64) = v31;
        *(_OWORD *)(v10 + 80) = v11;
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v12;
        *(_OWORD *)(v10 + 96) = v33;
        v15 = *(_OWORD *)&v34[32];
        v14 = *(_OWORD *)&v34[48];
        v16 = *(_OWORD *)&v34[16];
        *(_OWORD *)(v10 + 112) = *(_OWORD *)v34;
        *(_OWORD *)(v10 + 128) = v16;
        *(_OWORD *)(v10 + 144) = v15;
        *(_OWORD *)(v10 + 160) = v14;
        v18 = *(_OWORD *)&v34[96];
        v17 = *(_OWORD *)&v34[112];
        v19 = *(_OWORD *)&v34[80];
        *(_OWORD *)(v10 + 176) = *(_OWORD *)&v34[64];
        *(_OWORD *)(v10 + 192) = v19;
        *(_OWORD *)(v10 + 208) = v18;
        *(_OWORD *)(v10 + 224) = v17;
        *(_WORD *)(v10 + 240) = v35;
        *(_QWORD *)(a2 + 8) = v10 + 248;
        v20 = (_QWORD *)v3[1];
        if (v20)
          goto LABEL_12;
      }
      do
      {
        v25 = (_QWORD *)v3[2];
        _ZF = *v25 == (_QWORD)v3;
        v3 = v25;
      }
      while (!_ZF);
LABEL_3:
      v3 = v25;
    }
    while (v25 != v26);
  }
}

void sub_223C1D354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void **v13;
  va_list va;

  va_start(va, a13);
  sub_223198118((uint64_t)va);
  sub_223473EA8(v13);
  _Unwind_Resume(a1);
}

void sub_223C1D398(_QWORD *a1@<X0>, void **a2@<X8>)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _QWORD *v28;
  BOOL v29;
  __int128 v30;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = a1[2];
  if (!v4)
  {
    v5 = 0;
    v6 = a1 + 1;
    v7 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 == a1 + 1)
      return;
    goto LABEL_6;
  }
  if (v4 > 0x30C30C30C30C30CLL)
    sub_22316E078();
  v5 = (char *)operator new(84 * v4);
  *a2 = v5;
  a2[1] = v5;
  a2[2] = &v5[84 * v4];
  v8 = (_QWORD *)*a1;
  v6 = a1 + 1;
  v7 = v8;
  if (v8 != v6)
  {
LABEL_6:
    v9 = xmmword_224668DF8;
    v10 = unk_224668E08;
    v11 = xmmword_224668E18;
    v12 = unk_224668E28;
    do
    {
      v30 = *(_OWORD *)((char *)v7 + 25);
      v13 = (unint64_t)a2[2];
      if ((unint64_t)v5 < v13)
      {
        *(_OWORD *)v5 = v30;
        v5[16] = 4;
        *(_OWORD *)(v5 + 20) = v9;
        *(_OWORD *)(v5 + 36) = v10;
        *(_OWORD *)(v5 + 52) = v11;
        *(_OWORD *)(v5 + 68) = v12;
        v5 += 84;
        a2[1] = v5;
        v14 = (_QWORD *)v7[1];
        if (v14)
          goto LABEL_27;
        goto LABEL_29;
      }
      v15 = (char *)*a2;
      v16 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - (_BYTE *)*a2) >> 2);
      v17 = v16 + 1;
      if (v16 + 1 > 0x30C30C30C30C30CLL)
        sub_22316E078();
      v18 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v13 - (_QWORD)v15) >> 2);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x186186186186186)
        v19 = 0x30C30C30C30C30CLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0x30C30C30C30C30CLL)
          sub_223174E94();
        v20 = (char *)operator new(84 * v19);
        v10 = unk_224668E08;
        v9 = xmmword_224668DF8;
        v12 = unk_224668E28;
        v11 = xmmword_224668E18;
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[84 * v16];
      *(_OWORD *)v21 = v30;
      v21[16] = 4;
      *(_OWORD *)(v21 + 20) = v9;
      *(_OWORD *)(v21 + 36) = v10;
      *(_OWORD *)(v21 + 52) = v11;
      *(_OWORD *)(v21 + 68) = v12;
      if (v5 == v15)
      {
        v27 = v5;
        v5 = v21 + 84;
        *a2 = v21;
        a2[1] = v21 + 84;
        a2[2] = &v20[84 * v19];
        if (v27)
          goto LABEL_25;
      }
      else
      {
        v22 = &v20[84 * v16];
        do
        {
          v23 = *(_OWORD *)(v5 - 84);
          *(v22 - 68) = *(v5 - 68);
          *(_OWORD *)(v22 - 84) = v23;
          v24 = *((_OWORD *)v5 - 4);
          v25 = *((_OWORD *)v5 - 3);
          v26 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v22 - 1) = v26;
          *((_OWORD *)v22 - 4) = v24;
          *((_OWORD *)v22 - 3) = v25;
          v22 -= 84;
          v5 -= 84;
        }
        while (v5 != v15);
        v27 = *a2;
        v5 = v21 + 84;
        *a2 = v22;
        a2[1] = v21 + 84;
        a2[2] = &v20[84 * v19];
        if (v27)
        {
LABEL_25:
          operator delete(v27);
          v12 = unk_224668E28;
          v11 = xmmword_224668E18;
          v10 = unk_224668E08;
          v9 = xmmword_224668DF8;
        }
      }
      a2[1] = v5;
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
LABEL_27:
          v28 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
        goto LABEL_7;
      }
      do
      {
LABEL_29:
        v28 = (_QWORD *)v7[2];
        v29 = *v28 == (_QWORD)v7;
        v7 = v28;
      }
      while (!v29);
LABEL_7:
      v7 = v28;
    }
    while (v28 != v6);
  }
}

void sub_223C1D690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_223C1D6B4(std::string *a1, unsigned __int8 *a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v7;
  unint64_t v8;
  char v9;
  void **v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  _BYTE v20[24];
  int v21;
  char v22;
  char *v23;

  v19 = a3;
  if (*((char *)a4 + 23) >= 0)
    v7 = a4;
  else
    v7 = (uint64_t *)*a4;
  v21 = 0;
  sub_22319B83C((uint64_t)__p, (uint64_t)v20, a2);
  if (v21 == -1)
    sub_22316DD70();
  __p[0] = &v23;
  ((void (*)(void **__return_ptr, void **, _BYTE *))off_24EC60BB0[v21])(v15, __p, v20);
  if (v21 != -1)
    ((void (*)(void **, _BYTE *))off_24EC60B38[v21])(__p, v20);
  v8 = HIBYTE(v16);
  v9 = HIBYTE(v16);
  if (v16 < 0)
    v8 = (unint64_t)v15[1];
  if (v8 >= 4)
    v8 = 4;
  v18 = v16;
  *(_OWORD *)v17 = *(_OWORD *)v15;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if (v9 < 0)
  {
    v17[1] = (void *)v8;
    v10 = (void **)v17[0];
  }
  else
  {
    HIBYTE(v18) = v8;
    v10 = v17;
  }
  *((_BYTE *)v10 + v8) = 0;
  if (v18 >= 0)
    v11 = v17;
  else
    v11 = (void **)v17[0];
  v21 = 0;
  sub_22356F9F4((uint64_t)&v23, (uint64_t)v20, &v19);
  if (v21 == -1)
    sub_22316DD70();
  v23 = &v22;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60BB0[v21])(__p, &v23, v20);
  if (v21 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60B38[v21])(&v23, v20);
  v12 = __p;
  if (v14 < 0)
    v12 = (void **)__p[0];
  sub_22456D250("%s:%zu-%s:%s\n", a1, v7, a5, v11, v12);
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_28:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v17[0]);
  if (SHIBYTE(v16) < 0)
    goto LABEL_28;
}

void sub_223C1D8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a24 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  if ((a24 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_223C1D94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22319B964(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_223C1D960(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  char v6;
  std::string *p_p;
  std::string::size_type size;
  void *v9;
  char v10;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    do
    {
      v6 = v2[16];
      v10 = 1;
      LOWORD(v9) = 112;
      sub_223C1D6B4(&__p, v2, v6, (uint64_t *)&v9, v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10 < 0)
LABEL_14:
          operator delete(v9);
      }
      else if (v10 < 0)
      {
        goto LABEL_14;
      }
      v2 += 84;
      ++v5;
    }
    while (v2 != v3);
  }
}

void sub_223C1DA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v20 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v20 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_223C1DAA8(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  std::string __p;
  std::string v8;

  sub_223C1089C(a1, &v8);
  sub_223C1D960(a1 + 241, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
}

void sub_223C1DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_223C1DBA4(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v5;
  char v6;
  void **v7;
  void **v8;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  std::string __p;
  _BYTE v19[24];
  int v20;
  char v21;
  char *v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v20 = 0;
      sub_22319B83C((uint64_t)&v22, (uint64_t)v19, v3 + 25);
      if (v20 == -1)
        sub_22316DD70();
      v22 = &v21;
      ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60BB0[v20])(v14, &v22, v19);
      if (v20 != -1)
        ((void (*)(char **, _BYTE *))off_24EC60B38[v20])(&v22, v19);
      v5 = HIBYTE(v15);
      v6 = HIBYTE(v15);
      if (v15 < 0)
        v5 = (unint64_t)v14[1];
      if (v5 >= 4)
        v5 = 4;
      v17 = v15;
      *(_OWORD *)v16 = *(_OWORD *)v14;
      v14[0] = 0;
      v14[1] = 0;
      v15 = 0;
      if (v6 < 0)
      {
        v16[1] = (void *)v5;
        v7 = (void **)v16[0];
      }
      else
      {
        HIBYTE(v17) = v5;
        v7 = v16;
      }
      *((_BYTE *)v7 + v5) = 0;
      if (v17 >= 0)
        v8 = v16;
      else
        v8 = (void **)v16[0];
      sub_22456D250("%s  ", &__p, v8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v17) & 0x80000000) == 0)
        {
LABEL_25:
          if ((SHIBYTE(v15) & 0x80000000) == 0)
            goto LABEL_26;
          goto LABEL_30;
        }
      }
      else if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
        goto LABEL_25;
      }
      operator delete(v16[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_26:
        v11 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
        if (v11)
          goto LABEL_31;
        goto LABEL_33;
      }
LABEL_30:
      operator delete(v14[0]);
      v11 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v11)
      {
        do
        {
LABEL_31:
          v12 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
        goto LABEL_3;
      }
      do
      {
LABEL_33:
        v12 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v13 = *(_QWORD *)v12 == (_QWORD)v3;
        v3 = v12;
      }
      while (!v13);
LABEL_3:
      v3 = v12;
    }
    while (v12 != v2);
  }
}

void sub_223C1DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

void sub_223C1DE40(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v5;
  char v6;
  void **v7;
  void **v8;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  std::string __p;
  _BYTE v19[24];
  int v20;
  char v21;
  char *v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v20 = 0;
      sub_22319B83C((uint64_t)&v22, (uint64_t)v19, v3 + 25);
      if (v20 == -1)
        sub_22316DD70();
      v22 = &v21;
      ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60BB0[v20])(v14, &v22, v19);
      if (v20 != -1)
        ((void (*)(char **, _BYTE *))off_24EC60B38[v20])(&v22, v19);
      v5 = HIBYTE(v15);
      v6 = HIBYTE(v15);
      if (v15 < 0)
        v5 = (unint64_t)v14[1];
      if (v5 >= 4)
        v5 = 4;
      v17 = v15;
      *(_OWORD *)v16 = *(_OWORD *)v14;
      v14[0] = 0;
      v14[1] = 0;
      v15 = 0;
      if (v6 < 0)
      {
        v16[1] = (void *)v5;
        v7 = (void **)v16[0];
      }
      else
      {
        HIBYTE(v17) = v5;
        v7 = v16;
      }
      *((_BYTE *)v7 + v5) = 0;
      if (v17 >= 0)
        v8 = v16;
      else
        v8 = (void **)v16[0];
      sub_22456D250("%s  ", &__p, v8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v17) & 0x80000000) == 0)
        {
LABEL_25:
          if ((SHIBYTE(v15) & 0x80000000) == 0)
            goto LABEL_26;
          goto LABEL_30;
        }
      }
      else if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
        goto LABEL_25;
      }
      operator delete(v16[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_26:
        v11 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
        if (v11)
          goto LABEL_31;
        goto LABEL_33;
      }
LABEL_30:
      operator delete(v14[0]);
      v11 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v11)
      {
        do
        {
LABEL_31:
          v12 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
        goto LABEL_3;
      }
      do
      {
LABEL_33:
        v12 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
        v13 = *(_QWORD *)v12 == (_QWORD)v3;
        v3 = v12;
      }
      while (!v13);
LABEL_3:
      v3 = v12;
    }
    while (v12 != v2);
  }
}

void sub_223C1E040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223C1E0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  BOOL v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_223475A00(a3, a2);
  v4 = *(unsigned __int8 **)(a1 + 72);
  if (v4 != (unsigned __int8 *)(a1 + 80))
  {
    do
    {
      v16 = xmmword_2245F6D10;
      v5 = *((_QWORD *)v4 + 4) == 0xC8F5B4EBD7BCC25 && *((_QWORD *)v4 + 5) == 0xB606D763D1A232ECLL;
      if (!v5
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemUtils.cpp", 553, (uint64_t)"cid == GlobalClusterId()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_QWORD *)&v16 = v4 + 32;
      v6 = sub_223C237C8((uint64_t **)(a3 + 72), v4 + 32, (uint64_t)&unk_2245BA939, (_OWORD **)&v16);
      if (v4 != (unsigned __int8 *)v6)
        sub_223475EB0((uint64_t)(v6 + 6), *((_QWORD **)v4 + 6), (_QWORD *)v4 + 7);
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v5 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v5);
      }
      v4 = v8;
    }
    while (v8 != (unsigned __int8 *)(a1 + 80));
  }
  v9 = *(unsigned __int8 **)(a1 + 48);
  if (v9 != (unsigned __int8 *)(a1 + 56))
  {
    do
    {
      v16 = xmmword_2245F6D10;
      v10 = *((_QWORD *)v9 + 4) == 0xC8F5B4EBD7BCC25 && *((_QWORD *)v9 + 5) == 0xB606D763D1A232ECLL;
      if (!v10
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/CoordinateSystemUtils.cpp", 557, (uint64_t)"cid == GlobalClusterId()", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_QWORD *)&v16 = v9 + 32;
      v11 = sub_223C237C8((uint64_t **)(a3 + 48), v9 + 32, (uint64_t)&unk_2245BA939, (_OWORD **)&v16);
      if (v9 != (unsigned __int8 *)v11)
        sub_223475EB0((uint64_t)(v11 + 6), *((_QWORD **)v9 + 6), (_QWORD *)v9 + 7);
      v12 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
          v5 = *(_QWORD *)v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v5);
      }
      v9 = v13;
    }
    while (v13 != (unsigned __int8 *)(a1 + 56));
  }
  sub_223475C18((_QWORD *)a3, *(unsigned __int8 **)a1, (unsigned __int8 *)(a1 + 8));
  return sub_223475C18((_QWORD *)(a3 + 24), *(unsigned __int8 **)(a1 + 24), (unsigned __int8 *)(a1 + 32));
}

void sub_223C1E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  sub_2234759A4(a10);
  _Unwind_Resume(a1);
}

void sub_223C1E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  sub_2234759A4(a10);
  _Unwind_Resume(a1);
}

void sub_223C1E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  sub_2234759A4(a10);
  _Unwind_Resume(a1);
}

void sub_223C1E3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  sub_2234759A4(a10);
  _Unwind_Resume(a1);
}

void sub_223C1E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  sub_2234759A4(a10);
  _Unwind_Resume(a1);
}

char *sub_223C1E3F8(char *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char **v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  char **v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void **v39;
  char **v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;

  v2 = *(_QWORD **)(a2 + 96);
  v69 = result;
  v70 = (_QWORD *)(a2 + 104);
  if (v2 == (_QWORD *)(a2 + 104))
    return result;
  v3 = result + 8;
  if (*(char **)result == result + 8)
  {
    do
    {
      v67 = (_QWORD *)v2[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v2[2];
          v26 = *v68 == (_QWORD)v2;
          v2 = v68;
        }
        while (!v26);
      }
      v2 = v68;
    }
    while (v68 != v70);
    return result;
  }
  v4 = (char **)(a2 + 80);
  while (2)
  {
    v5 = *(_QWORD **)v69;
    if (*(_QWORD **)v69 == v3)
      goto LABEL_195;
    v6 = (unsigned __int8 *)v2 + 25;
    while (2)
    {
      v7 = (unsigned __int8 *)v5[7];
      if (!v7)
        goto LABEL_177;
      v8 = *v6;
      v9 = (unsigned __int8 *)(v5 + 7);
      do
      {
        while (1)
        {
          v10 = v7[25];
          v11 = *v6;
          if (v10 != v8)
            break;
          v10 = v7[26];
          v11 = *((unsigned __int8 *)v2 + 26);
          if (v10 != v11)
            break;
          v10 = v7[27];
          v11 = *((unsigned __int8 *)v2 + 27);
          if (v10 != v11)
            break;
          v10 = v7[28];
          v11 = *((unsigned __int8 *)v2 + 28);
          if (v10 != v11)
            break;
          v10 = v7[29];
          v11 = *((unsigned __int8 *)v2 + 29);
          if (v10 != v11)
            break;
          v10 = v7[30];
          v11 = *((unsigned __int8 *)v2 + 30);
          if (v10 != v11)
            break;
          v10 = v7[31];
          v11 = *((unsigned __int8 *)v2 + 31);
          if (v10 != v11)
            break;
          v10 = v7[32];
          v11 = *((unsigned __int8 *)v2 + 32);
          if (v10 != v11)
            break;
          v10 = v7[33];
          v11 = *((unsigned __int8 *)v2 + 33);
          if (v10 != v11)
            break;
          v10 = v7[34];
          v11 = *((unsigned __int8 *)v2 + 34);
          if (v10 != v11)
            break;
          v10 = v7[35];
          v11 = *((unsigned __int8 *)v2 + 35);
          if (v10 != v11)
            break;
          v10 = v7[36];
          v11 = *((unsigned __int8 *)v2 + 36);
          if (v10 != v11)
            break;
          v10 = v7[37];
          v11 = *((unsigned __int8 *)v2 + 37);
          if (v10 != v11)
            break;
          v10 = v7[38];
          v11 = *((unsigned __int8 *)v2 + 38);
          if (v10 != v11)
            break;
          v10 = v7[39];
          v11 = *((unsigned __int8 *)v2 + 39);
          if (v10 != v11)
            break;
          v10 = v7[40];
          v11 = *((unsigned __int8 *)v2 + 40);
          if (v10 != v11)
            break;
          v9 = v7;
          v7 = *(unsigned __int8 **)v7;
          if (!v7)
            goto LABEL_31;
        }
        if (v10 < v11)
          v7 += 8;
        else
          v9 = v7;
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
LABEL_31:
      if (v9 == (unsigned __int8 *)(v5 + 7))
        goto LABEL_177;
      v12 = v9[25];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 26);
      v12 = v9[26];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 27);
      v12 = v9[27];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 28);
      v12 = v9[28];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 29);
      v12 = v9[29];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 30);
      v12 = v9[30];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 31);
      v12 = v9[31];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 32);
      v12 = v9[32];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 33);
      v12 = v9[33];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 34);
      v12 = v9[34];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 35);
      v12 = v9[35];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 36);
      v12 = v9[36];
      if (v8 != v12)
        goto LABEL_48;
      v8 = *((unsigned __int8 *)v2 + 37);
      v12 = v9[37];
      if (v8 != v12
        || (v8 = *((unsigned __int8 *)v2 + 38), v12 = v9[38], v8 != v12)
        || (v8 = *((unsigned __int8 *)v2 + 39), v12 = v9[39], v8 != v12)
        || (v8 = *((unsigned __int8 *)v2 + 40), v12 = v9[40], v8 != v12))
      {
LABEL_48:
        if (v8 < v12)
          goto LABEL_177;
      }
      v13 = *v4;
      v14 = v4;
      v15 = (char *)v4;
      if (!*v4)
        goto LABEL_88;
      v16 = *((unsigned __int8 *)v5 + 32);
      do
      {
        while (1)
        {
          v15 = v13;
          v17 = v13[32];
          v18 = v16 >= v17;
          if (v16 != v17)
          {
            v19 = *((unsigned __int8 *)v5 + 32);
            goto LABEL_83;
          }
          v19 = *((unsigned __int8 *)v5 + 33);
          v17 = v15[33];
          v18 = v19 >= v17;
          if (v19 == v17)
          {
            v19 = *((unsigned __int8 *)v5 + 34);
            v17 = v15[34];
            v18 = v19 >= v17;
            if (v19 == v17)
            {
              v19 = *((unsigned __int8 *)v5 + 35);
              v17 = v15[35];
              v18 = v19 >= v17;
              if (v19 == v17)
                break;
            }
          }
LABEL_83:
          if (v18)
            goto LABEL_85;
LABEL_51:
          v13 = *(char **)v15;
          v14 = (char **)v15;
          if (!*(_QWORD *)v15)
            goto LABEL_88;
        }
        v20 = *((unsigned __int8 *)v5 + 36);
        v21 = v15[36];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 37);
        v21 = v15[37];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 38);
        v21 = v15[38];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 39);
        v21 = v15[39];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 40);
        v21 = v15[40];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 41);
        v21 = v15[41];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 42);
        v21 = v15[42];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 43);
        v21 = v15[43];
        if (v20 != v21)
          goto LABEL_68;
        v20 = *((unsigned __int8 *)v5 + 44);
        v21 = v15[44];
        if (v20 != v21
          || (v20 = *((unsigned __int8 *)v5 + 45), v21 = v15[45], v20 != v21)
          || (v20 = *((unsigned __int8 *)v5 + 46), v21 = v15[46], v20 != v21)
          || (v20 = *((unsigned __int8 *)v5 + 47), v21 = v15[47], v20 != v21))
        {
LABEL_68:
          if (v20 < v21)
            goto LABEL_51;
        }
        v17 = v15[36];
        v19 = *((unsigned __int8 *)v5 + 36);
        if (v17 == v19)
        {
          v17 = v15[37];
          v19 = *((unsigned __int8 *)v5 + 37);
          if (v17 == v19)
          {
            v17 = v15[38];
            v19 = *((unsigned __int8 *)v5 + 38);
            if (v17 == v19)
            {
              v17 = v15[39];
              v19 = *((unsigned __int8 *)v5 + 39);
              if (v17 == v19)
              {
                v17 = v15[40];
                v19 = *((unsigned __int8 *)v5 + 40);
                if (v17 == v19)
                {
                  v17 = v15[41];
                  v19 = *((unsigned __int8 *)v5 + 41);
                  if (v17 == v19)
                  {
                    v17 = v15[42];
                    v19 = *((unsigned __int8 *)v5 + 42);
                    if (v17 == v19)
                    {
                      v17 = v15[43];
                      v19 = *((unsigned __int8 *)v5 + 43);
                      if (v17 == v19)
                      {
                        v17 = v15[44];
                        v19 = *((unsigned __int8 *)v5 + 44);
                        if (v17 == v19)
                        {
                          v17 = v15[45];
                          v19 = *((unsigned __int8 *)v5 + 45);
                          if (v17 == v19)
                          {
                            v17 = v15[46];
                            v19 = *((unsigned __int8 *)v5 + 46);
                            if (v17 == v19)
                            {
                              v17 = v15[47];
                              v19 = *((unsigned __int8 *)v5 + 47);
                              if (v17 == v19)
                                goto LABEL_113;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_85:
        if (v17 >= v19)
          goto LABEL_113;
        v13 = (char *)*((_QWORD *)v15 + 1);
      }
      while (v13);
      v14 = (char **)(v15 + 8);
LABEL_88:
      v22 = v15;
      result = (char *)operator new(0x48uLL);
      v15 = result;
      *((_OWORD *)result + 2) = *((_OWORD *)v5 + 2);
      *((_QWORD *)result + 8) = 0;
      *((_QWORD *)result + 7) = 0;
      *((_QWORD *)result + 6) = result + 56;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = v22;
      *v14 = result;
      v23 = **(_QWORD **)(a2 + 72);
      v24 = result;
      if (v23)
      {
        *(_QWORD *)(a2 + 72) = v23;
        v24 = *v14;
      }
      v25 = *v4;
      v26 = v24 == *v4;
      v24[24] = v26;
      if (!v26)
      {
        do
        {
          v27 = *((_QWORD *)v24 + 2);
          if (*(_BYTE *)(v27 + 24))
            break;
          v28 = *(char **)(v27 + 16);
          v29 = *(_QWORD *)v28;
          if (*(_QWORD *)v28 == v27)
          {
            v32 = *((_QWORD *)v28 + 1);
            if (!v32 || (v33 = *(unsigned __int8 *)(v32 + 24), v30 = (_BYTE *)(v32 + 24), v33))
            {
              if (*(char **)v27 == v24)
              {
                *(_BYTE *)(v27 + 24) = 1;
                v28[24] = 0;
                v36 = *(_QWORD *)(v27 + 8);
                *(_QWORD *)v28 = v36;
                if (v36)
                  goto LABEL_105;
              }
              else
              {
                v34 = *(uint64_t **)(v27 + 8);
                v35 = *v34;
                *(_QWORD *)(v27 + 8) = *v34;
                if (v35)
                {
                  *(_QWORD *)(v35 + 16) = v27;
                  v28 = *(char **)(v27 + 16);
                }
                v34[2] = (uint64_t)v28;
                *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v34;
                *v34 = v27;
                *(_QWORD *)(v27 + 16) = v34;
                v28 = (char *)v34[2];
                v27 = *(_QWORD *)v28;
                *((_BYTE *)v34 + 24) = 1;
                v28[24] = 0;
                v36 = *(_QWORD *)(v27 + 8);
                *(_QWORD *)v28 = v36;
                if (v36)
LABEL_105:
                  *(_QWORD *)(v36 + 16) = v28;
              }
              *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
              *(_QWORD *)(*((_QWORD *)v28 + 2) + 8 * (**((_QWORD **)v28 + 2) != (_QWORD)v28)) = v27;
              *(_QWORD *)(v27 + 8) = v28;
LABEL_111:
              *((_QWORD *)v28 + 2) = v27;
              break;
            }
          }
          else if (!v29 || (v31 = *(unsigned __int8 *)(v29 + 24), v30 = (_BYTE *)(v29 + 24), v31))
          {
            if (*(char **)v27 == v24)
            {
              v63 = *((_QWORD *)v24 + 1);
              *(_QWORD *)v27 = v63;
              if (v63)
              {
                *(_QWORD *)(v63 + 16) = v27;
                v28 = *(char **)(v27 + 16);
              }
              *((_QWORD *)v24 + 2) = v28;
              *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v24;
              *((_QWORD *)v24 + 1) = v27;
              *(_QWORD *)(v27 + 16) = v24;
              v28 = (char *)*((_QWORD *)v24 + 2);
              v24[24] = 1;
              v28[24] = 0;
              v27 = *((_QWORD *)v28 + 1);
              v37 = *(char **)v27;
              *((_QWORD *)v28 + 1) = *(_QWORD *)v27;
              if (v37)
LABEL_109:
                *((_QWORD *)v37 + 2) = v28;
            }
            else
            {
              *(_BYTE *)(v27 + 24) = 1;
              v28[24] = 0;
              v27 = *((_QWORD *)v28 + 1);
              v37 = *(char **)v27;
              *((_QWORD *)v28 + 1) = *(_QWORD *)v27;
              if (v37)
                goto LABEL_109;
            }
            *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
            *(_QWORD *)(*((_QWORD *)v28 + 2) + 8 * (**((_QWORD **)v28 + 2) != (_QWORD)v28)) = v27;
            *(_QWORD *)v27 = v28;
            goto LABEL_111;
          }
          *(_BYTE *)(v27 + 24) = 1;
          v24 = v28;
          v28[24] = v28 == v25;
          *v30 = 1;
        }
        while (v28 != v25);
      }
      ++*(_QWORD *)(a2 + 88);
LABEL_113:
      v39 = (void **)(v15 + 56);
      v38 = *((_QWORD *)v15 + 7);
      v40 = (char **)(v15 + 56);
      v41 = v15 + 56;
      if (!v38)
        goto LABEL_152;
      v42 = *v6;
      while (2)
      {
        while (2)
        {
          v41 = (char *)v38;
          v43 = *(unsigned __int8 *)(v38 + 25);
          v44 = v42 >= v43;
          if (v42 != v43)
          {
            v45 = *v6;
            goto LABEL_147;
          }
          v45 = *((unsigned __int8 *)v2 + 26);
          v43 = v41[26];
          v44 = v45 >= v43;
          if (v45 != v43
            || (v45 = *((unsigned __int8 *)v2 + 27), v43 = v41[27], v44 = v45 >= v43, v45 != v43)
            || (v45 = *((unsigned __int8 *)v2 + 28), v43 = v41[28], v44 = v45 >= v43, v45 != v43))
          {
LABEL_147:
            if (!v44)
              goto LABEL_115;
            goto LABEL_149;
          }
          v46 = *((unsigned __int8 *)v2 + 29);
          v47 = v41[29];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 30);
          v47 = v41[30];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 31);
          v47 = v41[31];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 32);
          v47 = v41[32];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 33);
          v47 = v41[33];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 34);
          v47 = v41[34];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 35);
          v47 = v41[35];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 36);
          v47 = v41[36];
          if (v46 != v47)
            goto LABEL_132;
          v46 = *((unsigned __int8 *)v2 + 37);
          v47 = v41[37];
          if (v46 != v47
            || (v46 = *((unsigned __int8 *)v2 + 38), v47 = v41[38], v46 != v47)
            || (v46 = *((unsigned __int8 *)v2 + 39), v47 = v41[39], v46 != v47)
            || (v46 = *((unsigned __int8 *)v2 + 40), v47 = v41[40], v46 != v47))
          {
LABEL_132:
            if (v46 < v47)
            {
LABEL_115:
              v38 = *(_QWORD *)v41;
              v40 = (char **)v41;
              if (!*(_QWORD *)v41)
                goto LABEL_152;
              continue;
            }
          }
          break;
        }
        v43 = v41[29];
        v45 = *((unsigned __int8 *)v2 + 29);
        if (v43 == v45)
        {
          v43 = v41[30];
          v45 = *((unsigned __int8 *)v2 + 30);
          if (v43 == v45)
          {
            v43 = v41[31];
            v45 = *((unsigned __int8 *)v2 + 31);
            if (v43 == v45)
            {
              v43 = v41[32];
              v45 = *((unsigned __int8 *)v2 + 32);
              if (v43 == v45)
              {
                v43 = v41[33];
                v45 = *((unsigned __int8 *)v2 + 33);
                if (v43 == v45)
                {
                  v43 = v41[34];
                  v45 = *((unsigned __int8 *)v2 + 34);
                  if (v43 == v45)
                  {
                    v43 = v41[35];
                    v45 = *((unsigned __int8 *)v2 + 35);
                    if (v43 == v45)
                    {
                      v43 = v41[36];
                      v45 = *((unsigned __int8 *)v2 + 36);
                      if (v43 == v45)
                      {
                        v43 = v41[37];
                        v45 = *((unsigned __int8 *)v2 + 37);
                        if (v43 == v45)
                        {
                          v43 = v41[38];
                          v45 = *((unsigned __int8 *)v2 + 38);
                          if (v43 == v45)
                          {
                            v43 = v41[39];
                            v45 = *((unsigned __int8 *)v2 + 39);
                            if (v43 == v45)
                            {
                              v43 = v41[40];
                              v45 = *((unsigned __int8 *)v2 + 40);
                              if (v43 == v45)
                                goto LABEL_177;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_149:
        if (v43 >= v45)
          goto LABEL_177;
        v38 = *((_QWORD *)v41 + 1);
        if (v38)
          continue;
        break;
      }
      v40 = (char **)(v41 + 8);
LABEL_152:
      result = (char *)operator new(0x30uLL);
      *(_OWORD *)(result + 25) = *(_OWORD *)v6;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = v41;
      *v40 = result;
      v48 = **((_QWORD **)v15 + 6);
      if (v48)
      {
        *((_QWORD *)v15 + 6) = v48;
        result = *v40;
      }
      v49 = (char *)*v39;
      v26 = result == *v39;
      result[24] = v26;
      if (!v26)
      {
        do
        {
          v50 = *((_QWORD *)result + 2);
          if (*(_BYTE *)(v50 + 24))
            break;
          v51 = *(char **)(v50 + 16);
          v52 = *(_QWORD *)v51;
          if (*(_QWORD *)v51 == v50)
          {
            v55 = *((_QWORD *)v51 + 1);
            if (!v55 || (v56 = *(unsigned __int8 *)(v55 + 24), v53 = (_BYTE *)(v55 + 24), v56))
            {
              if (*(char **)v50 == result)
              {
                *(_BYTE *)(v50 + 24) = 1;
                v51[24] = 0;
                v59 = *(_QWORD *)(v50 + 8);
                *(_QWORD *)v51 = v59;
                if (v59)
                  goto LABEL_169;
              }
              else
              {
                v57 = *(uint64_t **)(v50 + 8);
                v58 = *v57;
                *(_QWORD *)(v50 + 8) = *v57;
                if (v58)
                {
                  *(_QWORD *)(v58 + 16) = v50;
                  v51 = *(char **)(v50 + 16);
                }
                v57[2] = (uint64_t)v51;
                *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v57;
                *v57 = v50;
                *(_QWORD *)(v50 + 16) = v57;
                v51 = (char *)v57[2];
                v50 = *(_QWORD *)v51;
                *((_BYTE *)v57 + 24) = 1;
                v51[24] = 0;
                v59 = *(_QWORD *)(v50 + 8);
                *(_QWORD *)v51 = v59;
                if (v59)
LABEL_169:
                  *(_QWORD *)(v59 + 16) = v51;
              }
              *(_QWORD *)(v50 + 16) = *((_QWORD *)v51 + 2);
              *(_QWORD *)(*((_QWORD *)v51 + 2) + 8 * (**((_QWORD **)v51 + 2) != (_QWORD)v51)) = v50;
              *(_QWORD *)(v50 + 8) = v51;
LABEL_175:
              *((_QWORD *)v51 + 2) = v50;
              break;
            }
          }
          else if (!v52 || (v54 = *(unsigned __int8 *)(v52 + 24), v53 = (_BYTE *)(v52 + 24), v54))
          {
            if (*(char **)v50 == result)
            {
              v64 = *((_QWORD *)result + 1);
              *(_QWORD *)v50 = v64;
              if (v64)
              {
                *(_QWORD *)(v64 + 16) = v50;
                v51 = *(char **)(v50 + 16);
              }
              *((_QWORD *)result + 2) = v51;
              *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = result;
              *((_QWORD *)result + 1) = v50;
              *(_QWORD *)(v50 + 16) = result;
              v51 = (char *)*((_QWORD *)result + 2);
              result[24] = 1;
              v51[24] = 0;
              v50 = *((_QWORD *)v51 + 1);
              v60 = *(char **)v50;
              *((_QWORD *)v51 + 1) = *(_QWORD *)v50;
              if (v60)
LABEL_173:
                *((_QWORD *)v60 + 2) = v51;
            }
            else
            {
              result = (char *)*((_QWORD *)result + 2);
              *(_BYTE *)(v50 + 24) = 1;
              v51[24] = 0;
              v50 = *((_QWORD *)v51 + 1);
              v60 = *(char **)v50;
              *((_QWORD *)v51 + 1) = *(_QWORD *)v50;
              if (v60)
                goto LABEL_173;
            }
            *(_QWORD *)(v50 + 16) = *((_QWORD *)v51 + 2);
            *(_QWORD *)(*((_QWORD *)v51 + 2) + 8 * (**((_QWORD **)v51 + 2) != (_QWORD)v51)) = v50;
            *(_QWORD *)v50 = v51;
            goto LABEL_175;
          }
          *(_BYTE *)(v50 + 24) = 1;
          result = v51;
          v51[24] = v51 == v49;
          *v53 = 1;
        }
        while (v51 != v49);
      }
      ++*((_QWORD *)v15 + 8);
LABEL_177:
      v61 = (_QWORD *)v5[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (_QWORD *)v5[2];
          v26 = *v62 == (_QWORD)v5;
          v5 = v62;
        }
        while (!v26);
      }
      v5 = v62;
      if (v62 != v3)
        continue;
      break;
    }
LABEL_195:
    v65 = (_QWORD *)v2[1];
    if (v65)
    {
      do
      {
        v66 = v65;
        v65 = (_QWORD *)*v65;
      }
      while (v65);
    }
    else
    {
      do
      {
        v66 = (_QWORD *)v2[2];
        v26 = *v66 == (_QWORD)v2;
        v2 = v66;
      }
      while (!v26);
    }
    v2 = v66;
    if (v66 != v70)
      continue;
    return result;
  }
}

void sub_223C1EFBC(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  int8x16_t v15;
  int8x16_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __float2 v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  std::string *p_p;
  uint64_t v30;
  const char *v31;
  size_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  NSObject *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  void *v49;
  _QWORD *v50;
  size_t v51;
  size_t v52;
  float *p_dst;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  __int128 v94;
  std::string::size_type v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  float *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  __float2 v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  std::string *v135;
  std::__shared_weak_count *v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  uint64_t v139;
  const char *v140;
  float *v141;
  int v142;
  uint64_t v143;
  float v144;
  char *__s;
  char *__sa;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  float v153;
  uint64_t *v154;
  int8x16_t v155;
  int8x16_t v156;
  unsigned __int8 *v157;
  int v158;
  std::string __p;
  _QWORD v160[3];
  int v161;
  const char *v162;
  int v163;
  const char *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::string v168;
  char *v169;
  std::__shared_weak_count *v170;
  float *__dst;
  __int128 v172;
  _BYTE v173[56];
  _BYTE v174[10];
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  char *v182;
  _QWORD v183[5];

  v183[2] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 9);
  v5 = *((_QWORD *)a1 + 10);
  if (v4 == v5)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (sub_223C8F01C(*(unsigned __int8 *)(v4 + 240)) < 4)
        ++v6;
      if ((sub_223C8F01C(*(unsigned __int8 *)(v4 + 240)) & 6) == 4)
        ++v7;
      v4 += 248;
    }
    while (v4 != v5);
  }
  sub_223C0D49C(&v167);
  if (**(int **)(v167 + 56) <= 3)
  {
    v8 = *(unsigned __int8 *)(v167 + 72);
    v9 = sub_22322F254(v167, "OSLogSurrogateAppender", 1, 0);
    if (v8 || v9 != 0)
    {
      v151 = v9;
      v160[0] = &v167;
      v160[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v160[2] = std::chrono::system_clock::now().__d_.__rep_;
      v161 = 3;
      v162 = "unknown file";
      v163 = 637;
      v165 = 0;
      v166 = 0;
      v164 = "unknown function";
      v11 = *((_QWORD *)a1 + 17);
      v12 = *((_QWORD *)a1 + 9);
      v13 = *((_QWORD *)a1 + 10);
      v147 = *((_QWORD *)a1 + 12);
      v149 = *((_QWORD *)a1 + 13);
      v14 = (float *)(a1 + 4);
      memset(v173, 0, 24);
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = (unint64_t)(a1 + 4);
      __dst = (float *)v173;
      *(_QWORD *)&v172 = 0;
      sub_2236763FC((float32x2_t **)&v168, &__dst);
      v15 = *(int8x16_t *)v173;
      v16 = vextq_s8(v15, v15, 8uLL);
      v17 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173, 1), *(float32x2_t *)v173, 1), *(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8).f32[0];
      if (v17 >= 0.0061)
      {
        v21 = sqrtf(v17);
        v153 = v17;
        v156 = *(int8x16_t *)v173;
        v22 = __sincosf_stret(v21);
        v17 = v153;
        v15 = v156;
        v19 = v22.__sinval / v21;
        v18 = (float)(1.0 / v153) * (float)(1.0 - v22.__cosval);
        *(float *)v16.i32 = (float)(1.0 / v153) * (float)(1.0 - (float)(v22.__sinval / v21));
        if (v153 >= 0.00000149)
        {
LABEL_17:
          if (v17 <= 9.0)
            v20 = (float)((float)(v18 * 0.5) - *(float *)v16.i32) / v19;
          else
            v20 = (float)(v18 + (float)(v19 * -0.5)) / (float)(v17 * v18);
          goto LABEL_22;
        }
      }
      else
      {
        v18 = 0.5 - (float)(v17 * (float)((float)(v17 / -720.0) + 0.041667));
        *(float *)v16.i32 = 0.16667 - (float)(v17 * (float)((float)(v17 / -5040.0) + 0.0083333));
        v19 = 1.0 - (float)(v17 * *(float *)v16.i32);
        if (v17 >= 0.00000149)
          goto LABEL_17;
      }
      v20 = (float)(v17 * 0.000033069) + (float)((float)(v17 * 0.0013889) + 0.083333);
LABEL_22:
      v16.i64[0] = *(_QWORD *)(a1 + 52);
      v16.i32[2] = *((_DWORD *)a1 + 15);
      v23 = (float32x4_t)vextq_s8(vextq_s8(v15, v15, 0xCuLL), v15, 8uLL);
      v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL);
      v25 = (int8x16_t)vsubq_f32(vmulq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL)), vmulq_f32(v24, (float32x4_t)vextq_s8(vextq_s8(v16, v16, 0xCuLL), v16, 8uLL)));
      v26.i64[0] = 0xBF000000BF000000;
      v26.i64[1] = 0xBF000000BF000000;
      v27 = vaddq_f32(vaddq_f32((float32x4_t)v16, vmulq_f32((float32x4_t)v25, v26)), vmulq_n_f32(vsubq_f32(vmulq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL)), vmulq_f32(v24, (float32x4_t)vextq_s8(vextq_s8(v25, v25, 0xCuLL), v25, 8uLL))), v20));
      *(_DWORD *)&v173[20] = v27.i32[2];
      *(_QWORD *)&v173[12] = v27.i64[0];
      v28 = vabsq_f32(*(float32x4_t *)v173);
      sub_22456D250("(%2.3f,%2.3f,%2.3f,%2.3f,%2.3f,%2.3f)", &__p, vcvtq_f64_f32(*(float32x2_t *)v28.f32), vcvt_hight_f64_f32(v28), vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vabsq_f32(*(float32x4_t *)&v173[16])));
      v154 = a2;
      v157 = a1;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = *(_QWORD *)v160[0];
      v31 = (const char *)(*(_QWORD *)v160[0] + 16);
      v139 = *(_QWORD *)v160[0];
      v140 = v31;
      __s = (char *)p_p;
      if (*(char *)(*(_QWORD *)v160[0] + 39) < 0)
      {
        v31 = *(const char **)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(*(_QWORD *)v160[0] + 39);
      }
      v33 = v12;
      v143 = v11;
      v141 = v14;
      v142 = v8;
      v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v173);
        sub_223199C58("com.apple.cv3d", (unint64_t)v173, &xmmword_255788F40);
        if (v173[24] && (v173[23] & 0x80000000) != 0)
          operator delete(*(void **)v173);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v35 = (const char *)&xmmword_255788F40;
      else
        v35 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v36 = byte_255788F57;
      else
        v36 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v173 = os_log_create(v35, v31);
      v37 = &v173[8];
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v36 >= 0x17)
      {
        v38 = v13;
        v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v39 = v36 | 7;
        v40 = v39 + 1;
        v37 = operator new(v39 + 1);
        *(_QWORD *)&v173[16] = v36;
        *(_QWORD *)&v173[24] = v40 | 0x8000000000000000;
        *(_QWORD *)&v173[8] = v37;
        v13 = v38;
      }
      else
      {
        v173[31] = v36;
        if (!v36)
        {
LABEL_43:
          v37[v36] = 0;
          v173[32] = 1;
          v41 = &v173[40];
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v32 >= 0x17)
          {
            v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v45 = v32 | 7;
            v46 = v45 + 1;
            v41 = operator new(v45 + 1);
            *(_QWORD *)&v173[48] = v32;
            *(_QWORD *)v174 = v46 | 0x8000000000000000;
            *(_QWORD *)&v173[40] = v41;
          }
          else
          {
            v174[7] = v32;
            if (!v32)
            {
              v173[40] = 0;
              v174[8] = 1;
              v42 = *(NSObject **)v173;
              if ((v174[7] & 0x80000000) == 0)
                goto LABEL_47;
              goto LABEL_53;
            }
          }
          memmove(v41, v31, v32);
          v41[v32] = 0;
          v174[8] = 1;
          v42 = *(NSObject **)v173;
          if ((v174[7] & 0x80000000) == 0)
          {
LABEL_47:
            v43 = v157;
            v44 = v151;
            if (!v173[32])
              goto LABEL_56;
            goto LABEL_54;
          }
LABEL_53:
          operator delete(*(void **)&v173[40]);
          v43 = v157;
          v44 = v151;
          if (!v173[32])
            goto LABEL_56;
LABEL_54:
          if ((v173[31] & 0x80000000) != 0)
            operator delete(*(void **)&v173[8]);
LABEL_56:
          if (*(_QWORD *)v173)
            os_release(*(void **)v173);
          v47 = 0xEF7BDEF7BDEF7BDFLL * ((v13 - v33) >> 3);
          if (!v44 || !*(_QWORD *)(v44 + 24))
          {
            os_log_type_enabled(v42, OS_LOG_TYPE_INFO);
            v54 = v43[1];
            v55 = *v43;
            v56 = v154[2];
            v57 = v154[3];
            v58 = *v154;
            v59 = v154[1];
            *(_DWORD *)v173 = 67111938;
            *(_DWORD *)&v173[4] = v54;
            *(_WORD *)&v173[8] = 1024;
            *(_DWORD *)&v173[10] = v55;
            *(_WORD *)&v173[14] = 2048;
            *(_QWORD *)&v173[16] = v143;
            *(_WORD *)&v173[24] = 2048;
            *(_QWORD *)&v173[26] = v47;
            *(_WORD *)&v173[34] = 2048;
            *(_QWORD *)&v173[36] = 0xCF3CF3CF3CF3CF3DLL * ((v149 - v147) >> 2);
            *(_WORD *)&v173[44] = 1024;
            *(_DWORD *)&v173[46] = v6;
            *(_WORD *)&v173[50] = 1024;
            *(_DWORD *)&v173[52] = v7;
            *(_WORD *)v174 = 2048;
            *(_QWORD *)&v174[2] = v56;
            v175 = 2048;
            v176 = v57;
            v177 = 2048;
            v178 = v58;
            v179 = 2048;
            v180 = v59;
            v181 = 2080;
            v182 = __s;
            v60 = (void *)_os_log_send_and_compose_impl();
            v61 = v142;
            if (v60)
              free(v60);
LABEL_130:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v61)
                goto LABEL_147;
            }
            else if (!v61)
            {
LABEL_147:
              sub_223182C08((uint64_t)v160);
              v136 = v166;
              if (v166)
              {
                p_shared_owners = (unint64_t *)&v166->__shared_owners_;
                do
                  v138 = __ldaxr(p_shared_owners);
                while (__stlxr(v138 - 1, p_shared_owners));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              return;
            }
            v158 = v43[1];
            v152 = *v43;
            v115 = *((_QWORD *)v43 + 9);
            v116 = *((_QWORD *)v43 + 10);
            v118 = *((_QWORD *)v43 + 12);
            v117 = *((_QWORD *)v43 + 13);
            v119 = v154[1];
            v148 = v154[2];
            v150 = *((_QWORD *)v43 + 17);
            __sa = (char *)v154[3];
            v120 = *v154;
            memset(v173, 0, 24);
            __dst = v141;
            *(_QWORD *)&v172 = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v173;
            __p.__r_.__value_.__l.__size_ = 0;
            sub_2236763FC((float32x2_t **)&__dst, (float **)&__p);
            v121 = *(int8x16_t *)v173;
            v122 = vextq_s8(v121, v121, 8uLL);
            v123 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173, 1), *(float32x2_t *)v173, 1), *(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8).f32[0];
            if (v123 >= 0.0061)
            {
              v127 = sqrtf(v123);
              v155 = *(int8x16_t *)v173;
              v144 = v123;
              v128 = __sincosf_stret(v127);
              v123 = v144;
              v121 = v155;
              v125 = v128.__sinval / v127;
              v124 = (float)(1.0 / v144) * (float)(1.0 - v128.__cosval);
              *(float *)v122.i32 = (float)(1.0 / v144) * (float)(1.0 - (float)(v128.__sinval / v127));
              if (v144 >= 0.00000149)
              {
LABEL_136:
                if (v123 <= 9.0)
                  v126 = (float)((float)(v124 * 0.5) - *(float *)v122.i32) / v125;
                else
                  v126 = (float)(v124 + (float)(v125 * -0.5)) / (float)(v123 * v124);
LABEL_141:
                v122.i64[0] = *(_QWORD *)(v43 + 52);
                v122.i32[2] = *((_DWORD *)v43 + 15);
                v129 = (float32x4_t)vextq_s8(vextq_s8(v121, v121, 0xCuLL), v121, 8uLL);
                v130 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), v121, 0xCuLL);
                v131 = (int8x16_t)vsubq_f32(vmulq_f32(v129, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), v122, 0xCuLL)), vmulq_f32(v130, (float32x4_t)vextq_s8(vextq_s8(v122, v122, 0xCuLL), v122, 8uLL)));
                v132.i64[0] = 0xBF000000BF000000;
                v132.i64[1] = 0xBF000000BF000000;
                v133 = vaddq_f32(vaddq_f32((float32x4_t)v122, vmulq_f32((float32x4_t)v131, v132)), vmulq_n_f32(vsubq_f32(vmulq_f32(v129, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), v131, 0xCuLL)), vmulq_f32(v130, (float32x4_t)vextq_s8(vextq_s8(v131, v131, 0xCuLL), v131, 8uLL))), v126));
                *(_DWORD *)&v173[20] = v133.i32[2];
                *(_QWORD *)&v173[12] = v133.i64[0];
                v134 = vabsq_f32(*(float32x4_t *)v173);
                sub_22456D250("(%2.3f,%2.3f,%2.3f,%2.3f,%2.3f,%2.3f)", &v168, vcvtq_f64_f32(*(float32x2_t *)v134.f32), vcvt_hight_f64_f32(v134), vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vabsq_f32(*(float32x4_t *)&v173[16])));
                if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v135 = &v168;
                else
                  v135 = (std::string *)v168.__r_.__value_.__r.__words[0];
                sub_22322C138((uint64_t)v160, "VLM:GRS:G TS:%d MS:%d TT:%lu UK:%lu PK:%lu KA:%d KD:%d O:%llu K:%llu MP:%llu ME:%llu MV:%s", v158, v152, v150, 0xEF7BDEF7BDEF7BDFLL * ((v116 - v115) >> 3), 0xCF3CF3CF3CF3CF3DLL * ((v117 - v118) >> 2), v6, v7, v148, __sa, v120, v119, (const char *)v135);
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                sub_223182C08((uint64_t)v160);
                goto LABEL_147;
              }
            }
            else
            {
              v124 = 0.5 - (float)(v123 * (float)((float)(v123 / -720.0) + 0.041667));
              *(float *)v122.i32 = 0.16667 - (float)(v123 * (float)((float)(v123 / -5040.0) + 0.0083333));
              v125 = 1.0 - (float)(v123 * *(float *)v122.i32);
              if (v123 >= 0.00000149)
                goto LABEL_136;
            }
            v126 = (float)(v123 * 0.000033069) + (float)((float)(v123 * 0.0013889) + 0.083333);
            goto LABEL_141;
          }
          v48 = _os_log_pack_size();
          v49 = operator new(v48, (std::align_val_t)8uLL);
          v50 = (_QWORD *)operator new();
          *v50 = &off_24EC1F7F0;
          v50[1] = 0;
          v50[2] = 0;
          v50[3] = v49;
          v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          v168.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
          v169 = 0;
          v170 = 0;
          v168.__r_.__value_.__r.__words[2] = (std::string::size_type)v50;
          v51 = strlen(__s);
          if (v51 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v52 = v51;
          if (v51 >= 0x17)
          {
            v62 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17)
              v62 = v51 | 7;
            v63 = v62 + 1;
            p_dst = (float *)operator new(v62 + 1);
            *(_QWORD *)&v172 = v52;
            *((_QWORD *)&v172 + 1) = v63 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v172) = v51;
            p_dst = (float *)&__dst;
            if (!v51)
            {
LABEL_70:
              *((_BYTE *)p_dst + v52) = 0;
              v64 = __dst;
              v183[0] = v172;
              *(_QWORD *)((char *)v183 + 7) = *(_QWORD *)((char *)&v172 + 7);
              v65 = HIBYTE(v172);
              v66 = operator new(0x38uLL);
              v66[1] = 0;
              v66[2] = 0;
              v66[3] = off_24EC60EF0;
              *v66 = &off_24EC60EA0;
              v67 = v183[0];
              v66[4] = v64;
              v66[5] = v67;
              *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)v183 + 7);
              *((_BYTE *)v66 + 55) = v65;
              v183[0] = 0;
              *(_QWORD *)((char *)v183 + 7) = 0;
              v68 = v170;
              v169 = (char *)(v66 + 3);
              v170 = (std::__shared_weak_count *)v66;
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              *(std::string *)v173 = v168;
              v71 = v169;
              if (v168.__r_.__value_.__r.__words[2])
              {
                v72 = (unint64_t *)(v168.__r_.__value_.__r.__words[2] + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              v74 = v170;
              *(_QWORD *)&v173[24] = v71;
              *(_QWORD *)&v173[32] = v170;
              if (v170)
              {
                v75 = (unint64_t *)&v170->__shared_owners_;
                do
                  v76 = __ldxr(v75);
                while (__stxr(v76 + 1, v75));
                *(_QWORD *)&v173[40] = v71;
                do
                  v77 = __ldaxr(v75);
                while (__stlxr(v77 - 1, v75));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              else
              {
                *(_QWORD *)&v173[40] = v71;
              }
              v78 = (std::__shared_weak_count *)v168.__r_.__value_.__r.__words[2];
              if (v168.__r_.__value_.__r.__words[2])
              {
                v79 = (unint64_t *)(v168.__r_.__value_.__r.__words[2] + 8);
                do
                  v80 = __ldaxr(v79);
                while (__stlxr(v80 - 1, v79));
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              v81 = *(_QWORD *)v173;
              if (*(char *)(*(_QWORD *)&v173[40] + 31) >= 0)
                v82 = *(_QWORD *)&v173[40] + 8;
              else
                v82 = *(_QWORD *)(*(_QWORD *)&v173[40] + 8);
              v83 = _os_log_pack_fill();
              v84 = v157[1];
              v85 = *v157;
              v86 = v154[2];
              v87 = v154[3];
              v88 = *v154;
              v89 = v154[1];
              *(_DWORD *)v83 = 67111938;
              *(_DWORD *)(v83 + 4) = v84;
              *(_WORD *)(v83 + 8) = 1024;
              *(_DWORD *)(v83 + 10) = v85;
              *(_WORD *)(v83 + 14) = 2048;
              *(_QWORD *)(v83 + 16) = v143;
              *(_WORD *)(v83 + 24) = 2048;
              *(_QWORD *)(v83 + 26) = v47;
              *(_WORD *)(v83 + 34) = 2048;
              *(_QWORD *)(v83 + 36) = 0xCF3CF3CF3CF3CF3DLL * ((v149 - v147) >> 2);
              *(_WORD *)(v83 + 44) = 1024;
              *(_DWORD *)(v83 + 46) = v6;
              *(_WORD *)(v83 + 50) = 1024;
              *(_DWORD *)(v83 + 52) = v7;
              *(_WORD *)(v83 + 56) = 2048;
              *(_QWORD *)(v83 + 58) = v86;
              *(_WORD *)(v83 + 66) = 2048;
              *(_QWORD *)(v83 + 68) = v87;
              *(_WORD *)(v83 + 76) = 2048;
              *(_QWORD *)(v83 + 78) = v88;
              *(_WORD *)(v83 + 86) = 2048;
              *(_QWORD *)(v83 + 88) = v89;
              *(_WORD *)(v83 + 96) = 2080;
              *(_QWORD *)(v83 + 98) = v82;
              v90 = operator new();
              v91 = *(unsigned __int8 *)(v139 + 39);
              v92 = *(const char **)(v139 + 16);
              v93 = *(_QWORD *)(v139 + 24);
              v94 = *(_OWORD *)&v173[24];
              *(_OWORD *)(v90 + 8) = *(_OWORD *)&v173[8];
              if ((v91 & 0x80u) != 0)
                v91 = v93;
              else
                v92 = v140;
              *(_QWORD *)v90 = v81;
              *(_QWORD *)&v173[8] = 0;
              *(_QWORD *)&v173[16] = 0;
              *(_OWORD *)(v90 + 24) = v94;
              *(_QWORD *)&v173[24] = 0;
              *(_QWORD *)&v173[32] = 0;
              *(_QWORD *)(v90 + 40) = v92;
              *(_QWORD *)(v90 + 48) = v91;
              *(_BYTE *)(v90 + 56) = 1;
              __dst = 0;
              v168.__r_.__value_.__r.__words[0] = v90;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v151 + 24) + 40))(*(_QWORD *)(v151 + 24), &v168);
              v95 = v168.__r_.__value_.__r.__words[0];
              v168.__r_.__value_.__r.__words[0] = 0;
              v43 = v157;
              if (v95)
              {
                v96 = *(std::__shared_weak_count **)(v95 + 32);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v99 = *(std::__shared_weak_count **)(v95 + 16);
                if (v99)
                {
                  v100 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                MEMORY[0x227684CE8](v95, 0x10F0C40B62ED6C6);
                v102 = __dst;
                __dst = 0;
                if (v102)
                {
                  v103 = (std::__shared_weak_count *)*((_QWORD *)v102 + 4);
                  if (v103)
                  {
                    v104 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v104);
                    while (__stlxr(v105 - 1, v104));
                    if (!v105)
                    {
                      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                      std::__shared_weak_count::__release_weak(v103);
                    }
                  }
                  v106 = (std::__shared_weak_count *)*((_QWORD *)v102 + 2);
                  if (v106)
                  {
                    v107 = (unint64_t *)&v106->__shared_owners_;
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 - 1, v107));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                      std::__shared_weak_count::__release_weak(v106);
                    }
                  }
                  MEMORY[0x227684CE8](v102, 0x10F0C40B62ED6C6);
                }
              }
              v109 = *(std::__shared_weak_count **)&v173[32];
              v61 = v142;
              if (*(_QWORD *)&v173[32])
              {
                v110 = (unint64_t *)(*(_QWORD *)&v173[32] + 8);
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              v112 = *(std::__shared_weak_count **)&v173[16];
              if (*(_QWORD *)&v173[16])
              {
                v113 = (unint64_t *)(*(_QWORD *)&v173[16] + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              goto LABEL_130;
            }
          }
          memcpy(p_dst, __s, v52);
          goto LABEL_70;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_43;
    }
  }
}

void sub_223C1FF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 232) && *(char *)(v60 - 233) < 0)
    operator delete(*(void **)(v60 - 256));
  __cxa_guard_abort(&qword_255788F58);
  if (a41 < 0)
  {
    operator delete(__p);
    sub_223182DAC((uint64_t)&a42);
    _Unwind_Resume(a1);
  }
  sub_223182DAC((uint64_t)&a42);
  _Unwind_Resume(a1);
}

_DWORD *sub_223C200EC(_DWORD ***a1)
{
  return sub_223C20108(**a1, (char *)(*a1)[1]);
}

void sub_223C200F8(uint64_t a1, uint64_t a2)
{
  sub_223C201F8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223C20108(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC60B38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223C201F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC60B38[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223C203AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C203F0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C204E8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C204E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C204E8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C206E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223C206F8(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t *v7;
  char **v8;
  _QWORD *v9;
  char *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2 != a4)
  {
    v5 = a2;
    v6 = (_QWORD **)result;
    v7 = result + 1;
    do
    {
      v17 = *((_OWORD *)v5 + 2);
      result = sub_223426D4C(v6, v7, &v16, &v15, (unsigned __int8 *)&v17);
      v8 = (char **)result;
      if (*result)
      {
        v9 = (_QWORD *)v5[1];
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v10 + 25) = v17;
        v11 = v16;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v11;
        *v8 = v10;
        v12 = (_QWORD *)**v6;
        if (v12)
        {
          *v6 = v12;
          v10 = *v8;
        }
        result = sub_2231A9A8C(v6[1], (uint64_t *)v10);
        v6[2] = (_QWORD *)((char *)v6[2] + 1);
        v9 = (_QWORD *)v5[1];
        if (v9)
        {
          do
          {
LABEL_10:
            v13 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v13 = (_QWORD *)v5[2];
        v14 = *v13 == (_QWORD)v5;
        v5 = v13;
      }
      while (!v14);
LABEL_3:
      v5 = v13;
    }
    while (v13 != a4);
  }
  return result;
}

uint64_t sub_223C20834(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223C2088C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C2089C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C208CC(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_223C2091C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t sub_223C20978(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223C209B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C209C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C209F8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223C20A10(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C20A50(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223C20A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C20AA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C20AD0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223C20AE8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C20B28(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223C20B68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C20B78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C20BA8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223C20BC0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223C20C00(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  __n128 *v18;
  size_t v19;
  std::string *v20;
  std::string::size_type v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  __n128 *v36;
  size_t v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  std::mutex *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  __n128 *v54;
  size_t v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::mutex *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  int v69;
  __n128 *v72;
  size_t v73;
  std::string *v74;
  std::string::size_type v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  std::mutex *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  __n128 *v90;
  size_t v91;
  std::string *v92;
  std::string::size_type v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  std::mutex *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  std::string *v102;
  std::string::size_type v103;
  std::string::size_type v104;
  int v105;
  __n128 *v108;
  size_t v109;
  std::string *v110;
  std::string::size_type v111;
  std::mutex *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  std::mutex *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string *v122;
  std::string::size_type v123;
  std::string::size_type v124;
  int v125;
  __n128 *v128;
  size_t v129;
  std::string *v130;
  std::string::size_type v131;
  std::string __p;
  __int128 v133;
  __int128 v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = a2;
    if ((a2 & 1) != 0)
    {
      std::mutex::lock((std::mutex *)(a1 + 4952));
      ++*(_QWORD *)(a1 + 5016);
      std::mutex::unlock((std::mutex *)(a1 + 4952));
      if ((v3 & 2) == 0)
      {
LABEL_4:
        if ((v3 & 4) == 0)
          goto LABEL_5;
        goto LABEL_192;
      }
    }
    else if ((a2 & 2) == 0)
    {
      goto LABEL_4;
    }
    std::mutex::lock((std::mutex *)(a1 + 5056));
    ++*(_QWORD *)(a1 + 5120);
    std::mutex::unlock((std::mutex *)(a1 + 5056));
    if ((v3 & 4) == 0)
    {
LABEL_5:
      if ((v3 & 8) == 0)
        goto LABEL_6;
      goto LABEL_193;
    }
LABEL_192:
    std::mutex::lock((std::mutex *)(a1 + 5160));
    ++*(_QWORD *)(a1 + 5224);
    std::mutex::unlock((std::mutex *)(a1 + 5160));
    if ((v3 & 8) == 0)
    {
LABEL_6:
      if ((v3 & 0x10) == 0)
      {
LABEL_8:
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v4 = sub_2241471F8();
          v5 = v4[2];
          if (!v5)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v5 = v4[2];
          }
          v6 = *(_QWORD *)(v5 + 64);
          v7 = (std::mutex *)(v6 + 32);
          std::mutex::lock((std::mutex *)(v6 + 32));
          v9 = *(_QWORD *)(v6 + 96);
          v8 = *(_QWORD *)(v6 + 104);
          std::mutex::unlock(v7);
          if (v9 != v8)
          {
            sub_2241471F8();
            v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 4952));
              std::mutex::unlock((std::mutex *)(a1 + 4952));
              sub_223C222A0((double *)&qword_255788F20, v10, (uint64_t *)(a1 + 5016), "tracking_status_reloc_succeeds");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v13 = p_p->__r_.__value_.__r.__words[0];
          v14 = p_p->__r_.__value_.__l.__size_;
          v15 = p_p->__r_.__value_.__s.__data_[16];
          if (v13 == 0x6365722E64337663 && v14 == 0x73746174532E6E6FLL && v15 == 46)
          {
            v18 = sub_223187510();
            v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v21 = __p.__r_.__value_.__l.__size_;
            v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 4952));
            if ((v19 & 0x80u) != 0)
              v19 = v21;
            else
              v20 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 4952));
            sub_22365B208(v18, v20, v19, (uint64_t *)(a1 + 5016), (uint64_t)"tracking_status_reloc_succeeds", 30);
          }
        }
        kdebug_trace();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v22 = sub_2241471F8();
          v23 = v22[2];
          if (!v23)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v23 = v22[2];
          }
          v24 = *(_QWORD *)(v23 + 64);
          v25 = (std::mutex *)(v24 + 32);
          std::mutex::lock((std::mutex *)(v24 + 32));
          v27 = *(_QWORD *)(v24 + 96);
          v26 = *(_QWORD *)(v24 + 104);
          std::mutex::unlock(v25);
          if (v27 != v26)
          {
            sub_2241471F8();
            v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 5056));
              std::mutex::unlock((std::mutex *)(a1 + 5056));
              sub_223C0CEB8((double *)&qword_255788F20, v28, (uint64_t *)(a1 + 5120), "tracking_status_reloc_fails");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = __p.__r_.__value_.__l.__size_;
        if (v29 >= 0x11)
        {
          v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v31 = v30->__r_.__value_.__r.__words[0];
          v32 = v30->__r_.__value_.__l.__size_;
          v33 = v30->__r_.__value_.__s.__data_[16];
          if (v31 == 0x6365722E64337663 && v32 == 0x73746174532E6E6FLL && v33 == 46)
          {
            v36 = sub_223187510();
            v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v39 = __p.__r_.__value_.__l.__size_;
            v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 5056));
            if ((v37 & 0x80u) != 0)
              v37 = v39;
            else
              v38 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 5056));
            sub_22365B208(v36, v38, v37, (uint64_t *)(a1 + 5120), (uint64_t)"tracking_status_reloc_fails", 27);
          }
        }
        kdebug_trace();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v40 = sub_2241471F8();
          v41 = v40[2];
          if (!v41)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v41 = v40[2];
          }
          v42 = *(_QWORD *)(v41 + 64);
          v43 = (std::mutex *)(v42 + 32);
          std::mutex::lock((std::mutex *)(v42 + 32));
          v45 = *(_QWORD *)(v42 + 96);
          v44 = *(_QWORD *)(v42 + 104);
          std::mutex::unlock(v43);
          if (v45 != v44)
          {
            sub_2241471F8();
            v46 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 5160));
              std::mutex::unlock((std::mutex *)(a1 + 5160));
              sub_223C223DC((double *)&qword_255788F20, v46, (uint64_t *)(a1 + 5224), "tracking_status_in_track");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = __p.__r_.__value_.__l.__size_;
        if (v47 >= 0x11)
        {
          v48 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v49 = v48->__r_.__value_.__r.__words[0];
          v50 = v48->__r_.__value_.__l.__size_;
          v51 = v48->__r_.__value_.__s.__data_[16];
          if (v49 == 0x6365722E64337663 && v50 == 0x73746174532E6E6FLL && v51 == 46)
          {
            v54 = sub_223187510();
            v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v57 = __p.__r_.__value_.__l.__size_;
            v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 5160));
            if ((v55 & 0x80u) != 0)
              v55 = v57;
            else
              v56 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 5160));
            sub_22365B208(v54, v56, v55, (uint64_t *)(a1 + 5224), (uint64_t)"tracking_status_in_track", 24);
          }
        }
        kdebug_trace();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v58 = sub_2241471F8();
          v59 = v58[2];
          if (!v59)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v59 = v58[2];
          }
          v60 = *(_QWORD *)(v59 + 64);
          v61 = (std::mutex *)(v60 + 32);
          std::mutex::lock((std::mutex *)(v60 + 32));
          v63 = *(_QWORD *)(v60 + 96);
          v62 = *(_QWORD *)(v60 + 104);
          std::mutex::unlock(v61);
          if (v63 != v62)
          {
            sub_2241471F8();
            v64 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 5264));
              std::mutex::unlock((std::mutex *)(a1 + 5264));
              sub_223C0CEB8((double *)&qword_255788F20, v64, (uint64_t *)(a1 + 5328), "tracking_status_is_external");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v65 = __p.__r_.__value_.__l.__size_;
        if (v65 >= 0x11)
        {
          v66 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v67 = v66->__r_.__value_.__r.__words[0];
          v68 = v66->__r_.__value_.__l.__size_;
          v69 = v66->__r_.__value_.__s.__data_[16];
          if (v67 == 0x6365722E64337663 && v68 == 0x73746174532E6E6FLL && v69 == 46)
          {
            v72 = sub_223187510();
            v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v75 = __p.__r_.__value_.__l.__size_;
            v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 5264));
            if ((v73 & 0x80u) != 0)
              v73 = v75;
            else
              v74 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 5264));
            sub_22365B208(v72, v74, v73, (uint64_t *)(a1 + 5328), (uint64_t)"tracking_status_is_external", 27);
          }
        }
        kdebug_trace();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v76 = sub_2241471F8();
          v77 = v76[2];
          if (!v77)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v77 = v76[2];
          }
          v78 = *(_QWORD *)(v77 + 64);
          v79 = (std::mutex *)(v78 + 32);
          std::mutex::lock((std::mutex *)(v78 + 32));
          v81 = *(_QWORD *)(v78 + 96);
          v80 = *(_QWORD *)(v78 + 104);
          std::mutex::unlock(v79);
          if (v81 != v80)
          {
            sub_2241471F8();
            v82 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 5368));
              std::mutex::unlock((std::mutex *)(a1 + 5368));
              sub_223C22518((double *)&qword_255788F20, v82, (uint64_t *)(a1 + 5432), "tracking_status_changes_to_external");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v83 = __p.__r_.__value_.__l.__size_;
        if (v83 >= 0x11)
        {
          v84 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v85 = v84->__r_.__value_.__r.__words[0];
          v86 = v84->__r_.__value_.__l.__size_;
          v87 = v84->__r_.__value_.__s.__data_[16];
          if (v85 == 0x6365722E64337663 && v86 == 0x73746174532E6E6FLL && v87 == 46)
          {
            v90 = sub_223187510();
            v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v93 = __p.__r_.__value_.__l.__size_;
            v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 5368));
            if ((v91 & 0x80u) != 0)
              v91 = v93;
            else
              v92 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 5368));
            sub_22365B208(v90, v92, v91, (uint64_t *)(a1 + 5432), (uint64_t)"tracking_status_changes_to_external", 35);
          }
        }
        kdebug_trace();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)&v133 = "cv3d.recon.";
        *((_QWORD *)&v133 + 1) = 11;
        *(_QWORD *)&v134 = "Stats.aggregated.ga";
        *((_QWORD *)&v134 + 1) = 19;
        sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v94 = sub_2241471F8();
          v95 = v94[2];
          if (!v95)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v95 = v94[2];
          }
          v96 = *(_QWORD *)(v95 + 64);
          v97 = (std::mutex *)(v96 + 32);
          std::mutex::lock((std::mutex *)(v96 + 32));
          v99 = *(_QWORD *)(v96 + 96);
          v98 = *(_QWORD *)(v96 + 104);
          std::mutex::unlock(v97);
          if (v99 != v98)
          {
            sub_2241471F8();
            v100 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100))
            {
              v133 = 0u;
              v134 = 0u;
              v135 = 728325608;
              kdebug_trace();
              std::mutex::lock((std::mutex *)(a1 + 4848));
              std::mutex::unlock((std::mutex *)(a1 + 4848));
              sub_223C22654((double *)&qword_255788F20, v100, (uint64_t *)(a1 + 4912), "tracking_status_uninitialized");
              kdebug_trace();
            }
          }
        }
        v133 = 0u;
        v134 = 0u;
        v135 = 728325624;
        kdebug_trace();
        v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v101 = __p.__r_.__value_.__l.__size_;
        if (v101 >= 0x11)
        {
          v102 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v102 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v103 = v102->__r_.__value_.__r.__words[0];
          v104 = v102->__r_.__value_.__l.__size_;
          v105 = v102->__r_.__value_.__s.__data_[16];
          if (v103 == 0x6365722E64337663 && v104 == 0x73746174532E6E6FLL && v105 == 46)
          {
            v108 = sub_223187510();
            v109 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v111 = __p.__r_.__value_.__l.__size_;
            v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            std::mutex::lock((std::mutex *)(a1 + 4848));
            if ((v109 & 0x80u) != 0)
              v109 = v111;
            else
              v110 = &__p;
            std::mutex::unlock((std::mutex *)(a1 + 4848));
            sub_22365B208(v108, v110, v109, (uint64_t *)(a1 + 4912), (uint64_t)"tracking_status_uninitialized", 29);
          }
        }
        goto LABEL_187;
      }
LABEL_7:
      std::mutex::lock((std::mutex *)(a1 + 5368));
      ++*(_QWORD *)(a1 + 5432);
      std::mutex::unlock((std::mutex *)(a1 + 5368));
      goto LABEL_8;
    }
LABEL_193:
    std::mutex::lock((std::mutex *)(a1 + 5264));
    ++*(_QWORD *)(a1 + 5328);
    std::mutex::unlock((std::mutex *)(a1 + 5264));
    if ((v3 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v112 = (std::mutex *)(a1 + 4744);
  std::mutex::lock((std::mutex *)(a1 + 4744));
  ++*(_QWORD *)(a1 + 4808);
  std::mutex::unlock((std::mutex *)(a1 + 4744));
  *(_QWORD *)&v133 = "cv3d.recon.";
  *((_QWORD *)&v133 + 1) = 11;
  *(_QWORD *)&v134 = "Stats.aggregated.ga";
  *((_QWORD *)&v134 + 1) = 19;
  sub_2231A9820((uint64_t)&v133, (uint64_t)&v135, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  v113 = (uint64_t *)(a1 + 4808);
  if (os_variant_has_internal_diagnostics())
  {
    v114 = sub_2241471F8();
    v115 = v114[2];
    if (!v115)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v115 = v114[2];
    }
    v116 = *(_QWORD *)(v115 + 64);
    v117 = (std::mutex *)(v116 + 32);
    std::mutex::lock((std::mutex *)(v116 + 32));
    v119 = *(_QWORD *)(v116 + 96);
    v118 = *(_QWORD *)(v116 + 104);
    std::mutex::unlock(v117);
    if (v119 != v118)
    {
      sub_2241471F8();
      v120 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v120 + 24))(v120))
      {
        v133 = 0u;
        v134 = 0u;
        v135 = 728325608;
        kdebug_trace();
        std::mutex::lock(v112);
        std::mutex::unlock(v112);
        sub_223C22164((double *)&qword_255788F20, v120, v113, "tracking_status_undefined");
        kdebug_trace();
      }
    }
  }
  v133 = 0u;
  v134 = 0u;
  v135 = 728325624;
  kdebug_trace();
  v121 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v121 = __p.__r_.__value_.__l.__size_;
  if (v121 >= 0x11)
  {
    v122 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v122 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v123 = v122->__r_.__value_.__r.__words[0];
    v124 = v122->__r_.__value_.__l.__size_;
    v125 = v122->__r_.__value_.__s.__data_[16];
    if (v123 == 0x6365722E64337663 && v124 == 0x73746174532E6E6FLL && v125 == 46)
    {
      v128 = sub_223187510();
      v129 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v131 = __p.__r_.__value_.__l.__size_;
      v130 = (std::string *)__p.__r_.__value_.__r.__words[0];
      std::mutex::lock(v112);
      if ((v129 & 0x80u) != 0)
        v129 = v131;
      else
        v130 = &__p;
      std::mutex::unlock(v112);
      sub_22365B208(v128, v130, v129, v113, (uint64_t)"tracking_status_undefined", 25);
    }
  }
LABEL_187:
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C22048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223C22164(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C22284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C222A0(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C223C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C223DC(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C224FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C22518(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C22638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C22654(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223C22774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_223C22790(_DWORD ***a1)
{
  return sub_223845034(**a1, (char *)(*a1)[1]);
}

void sub_223C2279C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC60B38[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_22319BD1C((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_223C22954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C22998(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C22A90((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C22A88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C22A90(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C22C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223C22CA0(_DWORD ***a1)
{
  return sub_223845124(**a1, (char *)(*a1)[1]);
}

void sub_223C22CAC(uint64_t a1, uint64_t a2)
{
  sub_223C22CBC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223C22CBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC60B38[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223C22E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C22EB4(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C22FAC((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C22FA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C22FAC(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C231A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223C231BC(_DWORD ***a1)
{
  return sub_223C231D8(**a1, (char *)(*a1)[1]);
}

void sub_223C231C8(uint64_t a1, uint64_t a2)
{
  sub_223C232C8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223C231D8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC60B38[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223C232C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC60B38[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223C2347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223C234C0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223C235B8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223C235B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223C235B8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223C237B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223C237C8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  unsigned __int8 *v10;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = (unsigned __int8 *)(v6 + 4);
        if ((sub_22319835C(a2, (unsigned __int8 *)v6 + 32) & 0x80) == 0)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_11;
      }
      if ((sub_22319835C(v10, a2) & 0x80) == 0)
        break;
      v7 = v9 + 1;
      v6 = v9[1];
      if (!v6)
        goto LABEL_11;
    }
    if (*v7)
      return *v7;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_11:
  v12 = operator new(0x48uLL);
  v12[2] = **a4;
  *((_QWORD *)v12 + 8) = 0;
  *((_QWORD *)v12 + 7) = 0;
  *((_QWORD *)v12 + 6) = (char *)v12 + 56;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = v9;
  *v7 = (uint64_t *)v12;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v12;
  if (v13)
  {
    *a1 = v13;
    v14 = *v7;
  }
  sub_2231A9A8C(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v12;
}

uint64_t sub_223C238E4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223C23924(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C23934(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC60EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C23964(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223C2397C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223C239BC(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint32x4_t v4;
  uint32x4_t v5;
  uint32x4_t v6;
  int8x16_t v7;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  vImage_Error v42;
  size_t v43;
  void *v44;
  unsigned __int8 v45;
  const void *v46;
  size_t v47;
  unsigned __int8 v48;
  const void *v49;
  size_t v50;
  unsigned __int8 v51;
  const void *v52;
  size_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  CVPixelBufferPoolRef *v57;
  size_t v58;
  const char *v59;
  unsigned __int8 v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  CVPixelBufferPoolRef *v64;
  size_t v65;
  const char *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float64x2_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  float **v104;
  uint64_t v105;
  float *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float *v110;
  unint64_t v111;
  unint64_t v112;
  float32x2_t v113;
  double v114;
  uint32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  int32x4_t v122;
  int64x2_t v123;
  __int128 v124;
  int8x16_t *v125;
  int8x16_t *v126;
  uint64_t v127;
  char *v128;
  const char *v129;
  unsigned __int8 *v130;
  unint64_t v131;
  char *v132;
  const char *v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unsigned int v136;
  float32x2_t v137;
  int32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  int v142;
  unint64_t v143;
  BOOL v145;
  BOOL v147;
  BOOL v148;
  unint64_t v149;
  uint64_t v150;
  int8x16_t v151;
  int8x16_t v152;
  const char *v153;
  uint32x4_t v154;
  int8x16_t v155;
  uint32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float64x2_t v181;
  unsigned int v182;
  float64x2_t v183;
  unsigned int v184;
  float64x2_t v185;
  float64x2_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  unsigned int v193;
  float v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float64x2_t v198;
  unint64_t v199;
  unsigned int v200;
  unsigned int v201;
  float32x4_t v202;
  float64x2_t v203;
  unsigned int v204;
  float32x4_t v205;
  float32x4_t v206;
  unsigned int v207;
  float32x4_t v208;
  float64x2_t v209;
  unsigned int v210;
  float32x4_t v211;
  float64x2_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  float64x2_t v216;
  float64x2_t v217;
  unsigned int v218;
  unsigned __int8 *v219;
  int v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  uint8x8_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  float32x4_t v252;
  uint8x8_t v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  float32x4_t v260;
  uint8x8_t v261;
  int v262;
  int v263;
  int v264;
  int v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float64x2_t v270;
  unsigned int v271;
  float64x2_t v272;
  float64x2_t v273;
  unsigned int v274;
  float64x2_t v275;
  float64x2_t v276;
  unsigned int v277;
  unsigned int v278;
  float64x2_t v279;
  unsigned int v280;
  unsigned int v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  int v286;
  unsigned int v287;
  uint8x8_t v288;
  int v289;
  float64x2_t v290;
  int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  uint8x8_t v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  char *v304;
  uint16x8_t v305;
  uint16x8_t v306;
  uint16x8_t v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float v316;
  float v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  float v334;
  float32x4_t v335;
  float32x4_t v336;
  unsigned int v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  int v345;
  float64x2_t v346;
  float64x2_t v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  int8x16_t v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  char *v355;
  unsigned int v356;
  unsigned int v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float64x2_t v362;
  uint8x8_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  unsigned int v369;
  unsigned int v370;
  uint16x8_t v371;
  uint32x4_t v372;
  float64x2_t v373;
  unsigned int v374;
  uint32x4_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  uint8x8_t v379;
  unsigned int v380;
  uint16x8_t v381;
  unsigned int v382;
  uint32x4_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  int v406;
  unint64_t v407;
  unint64_t v408;
  CVPixelBufferPoolRef *v409;
  size_t v410;
  const char *v411;
  unsigned __int8 v412;
  const char *v413;
  size_t v414;
  _BYTE *v415;
  unint64_t v416;
  const char *v417;
  CVPixelBufferPoolRef *v418;
  _QWORD *v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  void **v423;
  uint64_t v424;
  uint64_t v425;
  NSObject *v426;
  size_t v427;
  std::__shared_weak_count_vtbl *v428;
  std::__shared_weak_count *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  CVPixelBufferPoolRef v436;
  uint64_t v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  void *v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  unsigned __int8 v455;
  const char *v456;
  size_t v457;
  _BYTE *v458;
  unint64_t v459;
  const char *v460;
  _QWORD *v461;
  CVPixelBufferPoolRef *v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  void **v466;
  uint64_t v467;
  uint64_t v468;
  NSObject *v469;
  size_t v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  CVPixelBufferPoolRef v479;
  uint64_t v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  void *v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  unsigned __int8 v501;
  const char *v502;
  size_t v503;
  _BYTE *v504;
  unint64_t v505;
  const char *v506;
  CVPixelBufferPoolRef *v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  void **v511;
  uint64_t v512;
  uint64_t v513;
  NSObject *v514;
  size_t v515;
  std::__shared_weak_count_vtbl *v516;
  std::__shared_weak_count *v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  CVPixelBufferPoolRef v524;
  uint64_t v525;
  uint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  void *v539;
  unint64_t *v540;
  std::__shared_weak_count *v541;
  uint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  uint64_t *v549;
  std::__shared_weak_count *v550;
  uint64_t v551;
  unint64_t *v552;
  unint64_t v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  size_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  const char *v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  void *v583;
  void *v584;
  void *v585;
  size_t v586;
  size_t v587;
  unint64_t v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  const char *v595;
  char *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  int8x16_t v600;
  uint64_t v601;
  int8x16_t v602;
  int8x16_t v603;
  int8x16_t v604;
  __int128 v605;
  __int128 v606;
  uint64_t (**v607)();
  uint64_t *v608;
  std::__shared_weak_count *v609;
  __int128 __p;
  std::__shared_weak_count *v611;
  CVPixelBufferPoolRef *v612;
  std::__shared_weak_count *v613;
  CVPixelBufferPoolRef **v614;
  uint64_t *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v616;
  int v617;
  const char *v618;
  int v619;
  const char *v620;
  uint64_t v621;
  std::__shared_weak_count *v622;
  vImage_Buffer dest;
  vImage_Buffer v624;
  vImage_Buffer src;
  vImage_Buffer v626;
  uint64_t (**v627)();
  uint64_t *v628;
  std::__shared_weak_count *v629;
  uint64_t (**v630)();
  uint64_t *v631;
  std::__shared_weak_count *v632;
  uint64_t (**v633)();
  uint64_t *v634;
  std::__shared_weak_count *v635;
  uint64_t (**v636)();
  uint64_t *v637;
  std::__shared_weak_count *v638;
  void (**v639)(_QWORD);
  void *v640;
  std::__shared_weak_count *v641;
  char v642;
  char v643;
  CVPixelBufferPoolRef *v644;
  std::__shared_weak_count *v645;
  _BYTE v646[24];
  __int128 v647;
  void **v648;
  size_t v649;
  unint64_t v650;
  char v651;
  int8x16x2_t v652;
  int8x16x4_t v653;

  if (sub_2242A78F0(a1) != 875836518
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 55, (uint64_t)"color_ref.Format() == kcv::PixelFormat::YpCbCr444BiplanarFullRange_8", 68, (uint64_t)"Pixel type does not match required 444f format.", 47, (void (*)(void **))sub_22457406C)|| ((v12 = HIDWORD(a2)) == 0 || !(_DWORD)a2)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 56, (uint64_t)"out_size[0] > 0 && out_size[1] > 0", 34, (uint64_t)"Output image size is not valid", 30, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v13 = atomic_load((unsigned __int8 *)&qword_2540CCF98);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCF98))
  {
    qword_2540CD0E8 = 0;
    unk_2540CD0F0 = 0;
    qword_2540CD0E0 = (uint64_t)&qword_2540CD0E8;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD0E0, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCF98);
  }
  v14 = sub_2242A78F0(a1);
  sub_223C8536C((uint64_t **)&qword_2540CD0E0, a2, v14, 1u, (std::__shared_weak_count_vtbl ***)&v644);
  sub_2242A7370(v644, (uint64_t)&v639);
  if (!v643
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 65, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer for image scaling", 47, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v588 = a2;
  v636 = &off_24EC715B8;
  v637 = (uint64_t *)v640;
  v638 = v641;
  if (v641)
  {
    p_shared_owners = (unint64_t *)&v641->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_2242AA1D0((uint64_t)&v636, &v633);
  if (v634)
  {
    v18 = *v634;
    v17 = (std::__shared_weak_count *)v634[1];
    if (!v17)
      goto LABEL_18;
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v18)
        goto LABEL_20;
    }
    else
    {
LABEL_18:
      if (v18)
        goto LABEL_20;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 69, (uint64_t)"scaled_image_iosurface", 22, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_20:
  v646[23] = 12;
  strcpy(v646, "ColorScaling");
  sub_2244E116C((uint64_t)&v633, (uint64_t *)v646);
  if ((v646[23] & 0x80000000) != 0)
    operator delete(*(void **)v646);
  v22 = v637;
  v631 = v637;
  v632 = v638;
  if (v638)
  {
    v23 = (unint64_t *)&v638->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v630 = &off_24EC71548;
  if (v22)
  {
    v26 = *v22;
    v25 = (std::__shared_weak_count *)v22[1];
    if (!v25)
      goto LABEL_31;
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (v29)
    {
LABEL_31:
      if (!v26)
        goto LABEL_33;
      goto LABEL_32;
    }
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (v26)
LABEL_32:
      sub_2242AE8BC((uint64_t)v631);
  }
LABEL_33:
  v30 = *(uint64_t **)(a1 + 8);
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  v628 = v30;
  v629 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v627 = &off_24EC71528;
  v34 = a2;
  if (v30)
  {
    v36 = *v30;
    v35 = (std::__shared_weak_count *)v30[1];
    if (!v35)
      goto LABEL_42;
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (v39)
    {
LABEL_42:
      if (!v36)
        goto LABEL_44;
      goto LABEL_43;
    }
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (v36)
LABEL_43:
      sub_2242AE7CC((uint64_t)v628);
  }
LABEL_44:
  v40 = sub_2242A9824(a1);
  v41 = sub_2242A9824(a1);
  v626.data = (void *)sub_2242A8318((uint64_t)&v627, 0);
  v626.height = HIDWORD(v41);
  v626.width = v40;
  v626.rowBytes = sub_2242A9F04((uint64_t)&v627, 0);
  src.data = (void *)sub_2242A8318((uint64_t)&v627, 1u);
  src.height = HIDWORD(v41);
  src.width = v40;
  src.rowBytes = sub_2242A9F04((uint64_t)&v627, 1uLL);
  v624.data = (void *)sub_2242A8318((uint64_t)&v630, 0);
  v624.height = HIDWORD(a2);
  v624.width = a2;
  v624.rowBytes = sub_2242A9F04((uint64_t)&v630, 0);
  dest.data = (void *)sub_2242A8318((uint64_t)&v630, 1u);
  dest.height = HIDWORD(a2);
  dest.width = a2;
  dest.rowBytes = sub_2242A9F04((uint64_t)&v630, 1uLL);
  if (!v626.data
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 88, (uint64_t)"srcYp.data", 10, (uint64_t)"The Luma(Y) input image plane is invalid", 40, (void (*)(void **))sub_22457406C)|| !v624.data&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 89, (uint64_t)"outYp.data", 10, (uint64_t)"The Luma(Y) output image plane is invalid", 41, (void (*)(void **))sub_22457406C)|| !src.data&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp",
         90,
         (uint64_t)"srcCbCr.data",
         12,
         (uint64_t)"The Chroma(CbCr) input image plane is invalid",
         45,
         (void (*)(void **))sub_22457406C)
    || !dest.data
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 91, (uint64_t)"outCbCr.data", 12, (uint64_t)"The Chroma(CbCr) output image plane is invalid", 46, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v42 = vImageScale_CbCr8(&src, &dest, 0, 0x98u);
  v43 = v42;
  if (v42 < 0)
  {
    v45 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223C26E3C(v646);
    if (*(char *)(*(_QWORD *)v646 + 39) < 0)
    {
      v46 = *(const void **)(*(_QWORD *)v646 + 16);
      v47 = *(_QWORD *)(*(_QWORD *)v646 + 24);
    }
    else
    {
      v46 = (const void *)(*(_QWORD *)v646 + 16);
      v47 = *(unsigned __int8 *)(*(_QWORD *)v646 + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v46, v47, "Unable to compute memory allocation size", 0x28uLL);
    sub_223C26F30(&v612);
    if (*(int *)v612[7] > 5)
      goto LABEL_544;
    v61 = *((unsigned __int8 *)v612 + 72);
    v62 = sub_22322F254((uint64_t)v612, "OSLogSurrogateAppender", 1, 0);
    v63 = v62;
    if (!v61 && !v62)
      goto LABEL_544;
    v614 = &v612;
    rep = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v616 = std::chrono::system_clock::now().__d_.__rep_;
    v617 = 5;
    v618 = "unknown file";
    v619 = 103;
    v621 = 0;
    v622 = 0;
    v620 = "unknown function";
    v64 = *v614;
    if (*((char *)*v614 + 39) < 0)
    {
      v66 = (const char *)v64[2];
      v65 = (size_t)v64[3];
      v599 = (uint64_t)(*v614 + 2);
      v455 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v455 & 1) != 0)
        goto LABEL_474;
    }
    else
    {
      v65 = *((unsigned __int8 *)*v614 + 39);
      v66 = (const char *)(*v614 + 2);
      v599 = (uint64_t)v66;
      v67 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v67 & 1) != 0)
        goto LABEL_474;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v646);
      sub_223199C58("com.apple.cv3d", (unint64_t)v646, &xmmword_255788F40);
      if ((_BYTE)v647 && (v646[23] & 0x80000000) != 0)
        operator delete(*(void **)v646);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_474:
    if (byte_255788F57 >= 0)
      v456 = (const char *)&xmmword_255788F40;
    else
      v456 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v457 = byte_255788F57;
    else
      v457 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v646 = os_log_create(v456, v66);
    v458 = &v646[8];
    if (v457 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v457 >= 0x17)
    {
      v459 = v63;
      v460 = v66;
      v461 = a4;
      v462 = v64;
      v463 = v61;
      v464 = (v457 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v457 | 7) != 0x17)
        v464 = v457 | 7;
      v465 = v464 + 1;
      v458 = operator new(v464 + 1);
      *(_QWORD *)&v646[16] = v457;
      *(_QWORD *)&v647 = v465 | 0x8000000000000000;
      *(_QWORD *)&v646[8] = v458;
      v61 = v463;
      v64 = v462;
      a4 = v461;
      v66 = v460;
      v63 = v459;
    }
    else
    {
      BYTE7(v647) = v457;
      if (!v457)
      {
LABEL_488:
        v458[v457] = 0;
        BYTE8(v647) = 1;
        v466 = (void **)&v648;
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v65 >= 0x17)
        {
          v467 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v467 = v65 | 7;
          v468 = v467 + 1;
          v466 = (void **)operator new(v467 + 1);
          v649 = v65;
          v650 = v468 | 0x8000000000000000;
          v648 = v466;
        }
        else
        {
          HIBYTE(v650) = v65;
          if (!v65)
            goto LABEL_496;
        }
        memmove(v466, v66, v65);
LABEL_496:
        *((_BYTE *)v466 + v65) = 0;
        v651 = 1;
        v469 = *(NSObject **)v646;
        if (SHIBYTE(v650) < 0)
          operator delete(v648);
        if (BYTE8(v647) && SBYTE7(v647) < 0)
          operator delete(*(void **)&v646[8]);
        if (*(_QWORD *)v646)
          os_release(*(void **)v646);
        if (v63 && *(_QWORD *)(v63 + 24))
        {
          v470 = _os_log_pack_size();
          v471 = (std::__shared_weak_count_vtbl *)operator new(v470, (std::align_val_t)8uLL);
          v472 = (std::__shared_weak_count *)operator new();
          v473 = v472;
          v472->__shared_owners_ = 0;
          v474 = (unint64_t *)&v472->__shared_owners_;
          v472->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v472->__shared_weak_owners_ = 0;
          v472[1].__vftable = v471;
          *(_QWORD *)v646 = v471;
          *(_QWORD *)&v646[8] = v471;
          *(_QWORD *)&v646[16] = v472;
          do
            v475 = __ldxr(v474);
          while (__stxr(v475 + 1, v474));
          v647 = 0uLL;
          v648 = 0;
          do
            v476 = __ldaxr(v474);
          while (__stlxr(v476 - 1, v474));
          if (!v476)
          {
            ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
            std::__shared_weak_count::__release_weak(v473);
          }
          v477 = *(_QWORD *)v646;
          *(_WORD *)_os_log_pack_fill() = 0;
          v478 = operator new();
          v479 = (CVPixelBufferPoolRef)*((unsigned __int8 *)v64 + 39);
          v480 = v599;
          if ((char)v479 < 0)
          {
            v480 = (uint64_t)v64[2];
            v479 = v64[3];
          }
          *(_QWORD *)v478 = v477;
          *(_OWORD *)(v478 + 8) = *(_OWORD *)&v646[8];
          *(_QWORD *)&v646[8] = 0;
          *(_QWORD *)&v646[16] = 0;
          *(_OWORD *)(v478 + 24) = v647;
          v647 = 0uLL;
          *(_QWORD *)(v478 + 40) = v480;
          *(_QWORD *)(v478 + 48) = v479;
          *(_BYTE *)(v478 + 56) = 16;
          v607 = 0;
          *(_QWORD *)&__p = v478;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v63 + 24) + 40))(*(_QWORD *)(v63 + 24), &__p);
          v481 = __p;
          *(_QWORD *)&__p = 0;
          if (v481)
          {
            v482 = *(std::__shared_weak_count **)(v481 + 32);
            if (v482)
            {
              v483 = (unint64_t *)&v482->__shared_owners_;
              do
                v484 = __ldaxr(v483);
              while (__stlxr(v484 - 1, v483));
              if (!v484)
              {
                ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
                std::__shared_weak_count::__release_weak(v482);
              }
            }
            v485 = *(std::__shared_weak_count **)(v481 + 16);
            if (v485)
            {
              v486 = (unint64_t *)&v485->__shared_owners_;
              do
                v487 = __ldaxr(v486);
              while (__stlxr(v487 - 1, v486));
              if (!v487)
              {
                ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                std::__shared_weak_count::__release_weak(v485);
              }
            }
            MEMORY[0x227684CE8](v481, 0x10F0C40B62ED6C6);
            v607 = 0;
          }
          v488 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
          if (*((_QWORD *)&v647 + 1))
          {
            v489 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
            do
              v490 = __ldaxr(v489);
            while (__stlxr(v490 - 1, v489));
            if (!v490)
            {
              ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
              std::__shared_weak_count::__release_weak(v488);
            }
          }
          v491 = *(std::__shared_weak_count **)&v646[16];
          if (*(_QWORD *)&v646[16])
          {
            v492 = (unint64_t *)(*(_QWORD *)&v646[16] + 8);
            do
              v493 = __ldaxr(v492);
            while (__stlxr(v493 - 1, v492));
            if (!v493)
            {
              ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
              std::__shared_weak_count::__release_weak(v491);
            }
          }
        }
        else
        {
          os_log_type_enabled(v469, OS_LOG_TYPE_ERROR);
          *(_WORD *)v646 = 0;
          v494 = (void *)_os_log_send_and_compose_impl();
          if (v494)
            free(v494);
        }
        if (v61)
        {
          sub_22322C138((uint64_t)&v614, "Unable to compute memory allocation size");
          sub_223182C08((uint64_t)&v614);
        }
        sub_223182C08((uint64_t)&v614);
        v495 = v622;
        if (v622)
        {
          v496 = (unint64_t *)&v622->__shared_owners_;
          do
            v497 = __ldaxr(v496);
          while (__stlxr(v497 - 1, v496));
          if (!v497)
          {
            ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
            std::__shared_weak_count::__release_weak(v495);
          }
        }
LABEL_544:
        a4[1] = 0;
        a4[2] = 0;
        *a4 = &off_24EC715B8;
        goto LABEL_627;
      }
    }
    memmove(v458, v456, v457);
    goto LABEL_488;
  }
  if (v42)
  {
    v44 = operator new(v42);
    bzero(v44, v43);
  }
  else
  {
    v44 = 0;
  }
  if (!vImageScale_Planar8(&v626, &v624, v44, 0x18u))
  {
    if (vImageScale_CbCr8(&src, &dest, v44, 0x18u))
    {
      v51 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223C26E3C(v646);
      if (*(char *)(*(_QWORD *)v646 + 39) < 0)
      {
        v52 = *(const void **)(*(_QWORD *)v646 + 16);
        v53 = *(_QWORD *)(*(_QWORD *)v646 + 24);
      }
      else
      {
        v52 = (const void *)(*(_QWORD *)v646 + 16);
        v53 = *(unsigned __int8 *)(*(_QWORD *)v646 + 39);
      }
      sub_223195728((uint64_t)&unk_255789280, v52, v53, "Failed to scale CbCr part of YUV image", 0x26uLL);
      sub_223C26F30(&v612);
      if (*(int *)v612[7] > 5)
        goto LABEL_624;
      v406 = *((unsigned __int8 *)v612 + 72);
      v407 = sub_22322F254((uint64_t)v612, "OSLogSurrogateAppender", 1, 0);
      v408 = v407;
      if (!v406 && !v407)
        goto LABEL_624;
      v614 = &v612;
      rep = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v616 = std::chrono::system_clock::now().__d_.__rep_;
      v617 = 5;
      v618 = "unknown file";
      v619 = 119;
      v621 = 0;
      v622 = 0;
      v620 = "unknown function";
      v409 = *v614;
      if (*((char *)*v614 + 39) < 0)
      {
        v411 = (const char *)v409[2];
        v410 = (size_t)v409[3];
      }
      else
      {
        v410 = *((unsigned __int8 *)*v614 + 39);
        v411 = (const char *)(*v614 + 2);
      }
      v601 = (uint64_t)(*v614 + 2);
      v585 = v44;
      v501 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v501 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v646);
        sub_223199C58("com.apple.cv3d", (unint64_t)v646, &xmmword_255788F40);
        if ((_BYTE)v647 && (v646[23] & 0x80000000) != 0)
          operator delete(*(void **)v646);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v502 = (const char *)&xmmword_255788F40;
      else
        v502 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v503 = byte_255788F57;
      else
        v503 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v646 = os_log_create(v502, v411);
      v504 = &v646[8];
      if (v503 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v503 >= 0x17)
      {
        v505 = v408;
        v506 = v411;
        v507 = v409;
        v508 = v406;
        v509 = (v503 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v503 | 7) != 0x17)
          v509 = v503 | 7;
        v510 = v509 + 1;
        v504 = operator new(v509 + 1);
        *(_QWORD *)&v646[16] = v503;
        *(_QWORD *)&v647 = v510 | 0x8000000000000000;
        *(_QWORD *)&v646[8] = v504;
        v406 = v508;
        v409 = v507;
        v411 = v506;
        v408 = v505;
      }
      else
      {
        BYTE7(v647) = v503;
        if (!v503)
        {
LABEL_568:
          v504[v503] = 0;
          BYTE8(v647) = 1;
          v511 = (void **)&v648;
          if (v410 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v410 >= 0x17)
          {
            v512 = (v410 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v410 | 7) != 0x17)
              v512 = v410 | 7;
            v513 = v512 + 1;
            v511 = (void **)operator new(v512 + 1);
            v649 = v410;
            v650 = v513 | 0x8000000000000000;
            v648 = v511;
          }
          else
          {
            HIBYTE(v650) = v410;
            if (!v410)
              goto LABEL_576;
          }
          memmove(v511, v411, v410);
LABEL_576:
          *((_BYTE *)v511 + v410) = 0;
          v651 = 1;
          v514 = *(NSObject **)v646;
          if (SHIBYTE(v650) < 0)
            operator delete(v648);
          if (BYTE8(v647) && SBYTE7(v647) < 0)
            operator delete(*(void **)&v646[8]);
          if (*(_QWORD *)v646)
            os_release(*(void **)v646);
          if (v408 && *(_QWORD *)(v408 + 24))
          {
            v515 = _os_log_pack_size();
            v516 = (std::__shared_weak_count_vtbl *)operator new(v515, (std::align_val_t)8uLL);
            v517 = (std::__shared_weak_count *)operator new();
            v518 = v517;
            v517->__shared_owners_ = 0;
            v519 = (unint64_t *)&v517->__shared_owners_;
            v517->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v517->__shared_weak_owners_ = 0;
            v517[1].__vftable = v516;
            *(_QWORD *)v646 = v516;
            *(_QWORD *)&v646[8] = v516;
            *(_QWORD *)&v646[16] = v517;
            do
              v520 = __ldxr(v519);
            while (__stxr(v520 + 1, v519));
            v647 = 0uLL;
            v648 = 0;
            do
              v521 = __ldaxr(v519);
            while (__stlxr(v521 - 1, v519));
            if (!v521)
            {
              ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
              std::__shared_weak_count::__release_weak(v518);
            }
            v522 = *(_QWORD *)v646;
            *(_WORD *)_os_log_pack_fill() = 0;
            v523 = operator new();
            v524 = (CVPixelBufferPoolRef)*((unsigned __int8 *)v409 + 39);
            v525 = v601;
            if ((char)v524 < 0)
            {
              v525 = (uint64_t)v409[2];
              v524 = v409[3];
            }
            *(_QWORD *)v523 = v522;
            *(_OWORD *)(v523 + 8) = *(_OWORD *)&v646[8];
            *(_QWORD *)&v646[8] = 0;
            *(_QWORD *)&v646[16] = 0;
            *(_OWORD *)(v523 + 24) = v647;
            v647 = 0uLL;
            *(_QWORD *)(v523 + 40) = v525;
            *(_QWORD *)(v523 + 48) = v524;
            *(_BYTE *)(v523 + 56) = 16;
            v607 = 0;
            *(_QWORD *)&__p = v523;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v408 + 24) + 40))(*(_QWORD *)(v408 + 24), &__p);
            v526 = __p;
            *(_QWORD *)&__p = 0;
            v44 = v585;
            if (v526)
            {
              v527 = *(std::__shared_weak_count **)(v526 + 32);
              if (v527)
              {
                v528 = (unint64_t *)&v527->__shared_owners_;
                do
                  v529 = __ldaxr(v528);
                while (__stlxr(v529 - 1, v528));
                if (!v529)
                {
                  ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
                  std::__shared_weak_count::__release_weak(v527);
                }
              }
              v530 = *(std::__shared_weak_count **)(v526 + 16);
              if (v530)
              {
                v531 = (unint64_t *)&v530->__shared_owners_;
                do
                  v532 = __ldaxr(v531);
                while (__stlxr(v532 - 1, v531));
                if (!v532)
                {
                  ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
                  std::__shared_weak_count::__release_weak(v530);
                }
              }
              MEMORY[0x227684CE8](v526, 0x10F0C40B62ED6C6);
              v607 = 0;
            }
            v533 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
            if (*((_QWORD *)&v647 + 1))
            {
              v534 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
              do
                v535 = __ldaxr(v534);
              while (__stlxr(v535 - 1, v534));
              if (!v535)
              {
                ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
                std::__shared_weak_count::__release_weak(v533);
              }
            }
            v536 = *(std::__shared_weak_count **)&v646[16];
            if (*(_QWORD *)&v646[16])
            {
              v537 = (unint64_t *)(*(_QWORD *)&v646[16] + 8);
              do
                v538 = __ldaxr(v537);
              while (__stlxr(v538 - 1, v537));
              if (!v538)
              {
                ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                std::__shared_weak_count::__release_weak(v536);
              }
            }
          }
          else
          {
            os_log_type_enabled(v514, OS_LOG_TYPE_ERROR);
            *(_WORD *)v646 = 0;
            v539 = (void *)_os_log_send_and_compose_impl();
            v44 = v585;
            if (v539)
              free(v539);
          }
          if (v406)
          {
            sub_22322C138((uint64_t)&v614, "Failed to scale CbCr part of YUV image");
            sub_223182C08((uint64_t)&v614);
          }
          sub_223182C08((uint64_t)&v614);
          v452 = v622;
          if (!v622)
            goto LABEL_624;
          v540 = (unint64_t *)&v622->__shared_owners_;
          do
            v454 = __ldaxr(v540);
          while (__stlxr(v454 - 1, v540));
          goto LABEL_622;
        }
      }
      memmove(v504, v502, v503);
      goto LABEL_568;
    }
    v584 = v44;
    sub_223C8536C((uint64_t **)&qword_2540CD0E0, a2, 0x42475241u, 1u, (std::__shared_weak_count_vtbl ***)&v612);
    sub_2242A7370(v612, (uint64_t)v646);
    if (!BYTE8(v647)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 130, (uint64_t)"brga_buffer_opt", 15, (uint64_t)"Failed to create pixel buffer for conversion of YUV to BGRA", 59, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v69 = *(_QWORD *)&v646[8];
    v68 = *(_QWORD *)&v646[16];
    *a4 = &off_24EC715B8;
    a4[1] = v69;
    a4[2] = v68;
    if (v68)
    {
      v70 = (unint64_t *)(v68 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    sub_2242AA1D0((uint64_t)a4, &v614);
    if (!rep)
      goto LABEL_716;
    v72 = *rep;
    v73 = (std::__shared_weak_count *)rep[1];
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      do
        v76 = __ldaxr(v74);
      while (__stlxr(v76 - 1, v74));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (!v72)
    {
LABEL_716:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 134, (uint64_t)"brga_out_iosurface", 18, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    HIBYTE(v611) = 12;
    strcpy((char *)&__p, "YpCbCrToBGRA");
    sub_2244E116C((uint64_t)&v614, (uint64_t *)&__p);
    if (SHIBYTE(v611) < 0)
      operator delete((void *)__p);
    v77 = (uint64_t *)a4[1];
    v78 = (std::__shared_weak_count *)a4[2];
    *((_QWORD *)&__p + 1) = v77;
    v611 = v78;
    if (v78)
    {
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    *(_QWORD *)&__p = &off_24EC71548;
    if (v77)
    {
      v81 = *v77;
      v82 = (std::__shared_weak_count *)v77[1];
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        do
          v85 = __ldaxr(v83);
        while (__stlxr(v85 - 1, v83));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (v81)
        sub_2242AE8BC(*((uint64_t *)&__p + 1));
    }
    v86 = v637;
    v608 = v637;
    v609 = v638;
    if (v638)
    {
      v87 = (unint64_t *)&v638->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v607 = &off_24EC71528;
    if (v86)
    {
      v89 = *v86;
      v90 = (std::__shared_weak_count *)v86[1];
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        do
          v93 = __ldaxr(v91);
        while (__stlxr(v93 - 1, v91));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v89)
        sub_2242AE7CC((uint64_t)v608);
    }
    v94 = sub_2242A8318((uint64_t)&v607, 0);
    v95 = sub_2242A8318((uint64_t)&v607, 1u);
    v96 = sub_2242A8318((uint64_t)&__p, 0);
    v587 = sub_2242A9F04((uint64_t)&v607, 0);
    v586 = sub_2242A9F04((uint64_t)&v607, 1uLL);
    v97 = sub_2242A9DCC((uint64_t)&__p);
    if (!v12)
      goto LABEL_362;
    v104 = (float **)MEMORY[0x24BDB3BB8];
    if (a3)
      v104 = (float **)MEMORY[0x24BDB3BC0];
    if (!(_DWORD)a2)
    {
LABEL_362:
      if (v608)
      {
        v387 = *v608;
        v388 = (std::__shared_weak_count *)v608[1];
        if (v388)
        {
          v389 = (unint64_t *)&v388->__shared_owners_;
          do
            v390 = __ldxr(v389);
          while (__stxr(v390 + 1, v389));
          do
            v391 = __ldaxr(v389);
          while (__stlxr(v391 - 1, v389));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
            std::__shared_weak_count::__release_weak(v388);
          }
        }
        if (v387)
          sub_2242AE9A8((uint64_t)v608);
      }
      v607 = &off_24EC715B8;
      v392 = v609;
      if (v609)
      {
        v393 = (unint64_t *)&v609->__shared_owners_;
        do
          v394 = __ldaxr(v393);
        while (__stlxr(v394 - 1, v393));
        if (!v394)
        {
          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
          std::__shared_weak_count::__release_weak(v392);
        }
      }
      if (*((_QWORD *)&__p + 1))
      {
        v395 = **((_QWORD **)&__p + 1);
        v396 = *(std::__shared_weak_count **)(*((_QWORD *)&__p + 1) + 8);
        if (v396)
        {
          v397 = (unint64_t *)&v396->__shared_owners_;
          do
            v398 = __ldxr(v397);
          while (__stxr(v398 + 1, v397));
          do
            v399 = __ldaxr(v397);
          while (__stlxr(v399 - 1, v397));
          if (!v399)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
        }
        if (v395)
          sub_2242AEA98(*((uint64_t *)&__p + 1));
      }
      *(_QWORD *)&__p = &off_24EC715B8;
      v400 = v611;
      v44 = v584;
      if (v611)
      {
        v401 = (unint64_t *)&v611->__shared_owners_;
        do
          v402 = __ldaxr(v401);
        while (__stlxr(v402 - 1, v401));
        if (!v402)
        {
          ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
          std::__shared_weak_count::__release_weak(v400);
        }
      }
      v614 = (CVPixelBufferPoolRef **)&off_24EC76F28;
      v403 = (std::__shared_weak_count *)v616;
      if (v616)
      {
        v404 = (unint64_t *)(v616 + 8);
        do
          v405 = __ldaxr(v404);
        while (__stlxr(v405 - 1, v404));
        if (!v405)
        {
          ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
          std::__shared_weak_count::__release_weak(v403);
        }
      }
      if (BYTE8(v647))
      {
        (**(void (***)(_BYTE *))v646)(v646);
      }
      else if (SBYTE7(v647) < 0)
      {
        operator delete(*(void **)&v646[8]);
      }
      v498 = v613;
      if (v613)
      {
        v499 = (unint64_t *)&v613->__shared_owners_;
        do
          v500 = __ldaxr(v499);
        while (__stlxr(v500 - 1, v499));
        if (!v500)
        {
          ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
          std::__shared_weak_count::__release_weak(v498);
        }
      }
      goto LABEL_625;
    }
    v105 = 0;
    v106 = *v104;
    v107 = (unint64_t)(*v104 + 1);
    if (v12 <= 1)
      v108 = 1;
    else
      v108 = HIDWORD(a2);
    v109 = 2 * a2;
    v110 = v106 + 5;
    v577 = a2 & 0xF;
    v111 = a2 - v577;
    v567 = 4 * v111;
    v568 = 2 * v111;
    v576 = a2 & 7;
    v112 = a2 - v576;
    v574 = 2 * v112;
    v575 = 4 * v112;
    v113 = (float32x2_t)vdup_n_s32(0x437F0000u);
    v114 = 0.5;
    __asm { FMOV            V3.2D, #0.5 }
    v119 = 0uLL;
    v120 = (int8x16_t)xmmword_2245F6710;
    v121 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v122.i64[0] = 0x7F0000007FLL;
    v122.i64[1] = 0x7F0000007FLL;
    v123.i64[1] = -1;
    *(_QWORD *)&v124 = -1;
    *((_QWORD *)&v124 + 1) = -1;
    v125 = (int8x16_t *)&unk_224669000;
    v126 = (int8x16_t *)&unk_224669000;
    v127 = -1;
    v128 = (char *)v96;
    v129 = (const char *)v95;
    v130 = (unsigned __int8 *)v94;
    v581 = v94;
    v582 = (uint64_t)(*v104 + 1);
    v572 = v96;
    v573 = v95;
    v570 = v108;
    v571 = v97;
    v569 = v112;
    while (v34 >= 8)
    {
      v131 = 0;
      v143 = v96 + 4 * v588 + v97 * v105;
      v145 = (unint64_t)v128 < v95 + v109 + v586 * v105 && (unint64_t)v129 < v143;
      v147 = v128 < (char *)v110 && v107 < v143;
      v148 = (unint64_t)v130 >= v143 || (unint64_t)v128 >= v94 + v34 + v587 * v105;
      if (!v148 || v145)
        goto LABEL_138;
      v132 = v128;
      v133 = v129;
      v134 = v130;
      if (!v147)
      {
        if (v34 < 0x10)
        {
          v149 = 0;
LABEL_300:
          v600 = v101;
          v603 = v102;
          v604 = v103;
          v606 = v124;
          v132 = &v128[v575];
          v133 = &v129[v574];
          v134 = &v130[v112];
          v308 = 2 * v149;
          v309 = 4 * v149;
          do
          {
            v310 = &v129[v308];
            v123.i64[0] = *(_QWORD *)&v130[v149];
            v98 = (int8x16_t)vld2_s8(v310);
            v311 = vdivq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v123, v120)), v121);
            v312 = vdivq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v123, (int8x16_t)xmmword_2245F6720)), v121);
            v313 = vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v98, v120), v122)), v121);
            v314 = vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v98, (int8x16_t)xmmword_2245F6720), v122)), v121);
            v315 = vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_2245F6720), v122)), v121);
            v316 = v106[1];
            v317 = v106[2];
            v318 = vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v99, v120), v122)), v121);
            v319 = vmulq_f32(vaddq_f32(v311, vmulq_n_f32(v318, v316)), v121);
            v320 = vmulq_f32(vaddq_f32(v312, vmulq_n_f32(v315, v316)), v121);
            v321 = vcvt_hight_f64_f32(v320);
            v322 = vcvt_hight_f64_f32(v319);
            v323 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v319.f32), _Q3);
            v324 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v320.f32), _Q3);
            v325 = vaddq_f64(v322, _Q3);
            v326 = vaddq_f64(v321, _Q3);
            v327 = v326.f64[1];
            if (v326.f64[1] >= 0xFF)
              v327 = 255;
            v328 = v326.f64[0];
            if (v326.f64[0] >= 0xFF)
              v328 = 255;
            v7.i64[0] = __PAIR64__(v327, v328);
            if (v325.f64[1] >= 0xFF)
              v329 = 255;
            else
              v329 = v325.f64[1];
            v330 = v325.f64[0];
            if (v325.f64[0] >= 0xFF)
              v330 = 255;
            v5.i64[0] = __PAIR64__(v329, v330);
            if (v324.f64[1] >= 0xFF)
              v331 = 255;
            else
              v331 = v324.f64[1];
            v332 = v324.f64[0];
            if (v324.f64[0] >= 0xFF)
              v332 = 255;
            v333 = v323.f64[0];
            v6.i32[0] = v332;
            v334 = v106[3];
            *(float *)v323.f64 = v106[4];
            v335 = vmulq_n_f32(v314, v334);
            v336 = vmulq_n_f32(v313, v334);
            if (v323.f64[1] >= 0xFF)
              v337 = 255;
            else
              v337 = v323.f64[1];
            v338 = vmulq_n_f32(v318, v317);
            v339 = vmulq_f32(vaddq_f32(vaddq_f32(v311, v336), v338), v121);
            v340 = vmulq_f32(vaddq_f32(vaddq_f32(v312, v335), vmulq_n_f32(v315, v317)), v121);
            v341 = vcvt_hight_f64_f32(v340);
            v6.i32[1] = v331;
            v342 = vcvt_hight_f64_f32(v339);
            v343 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v339.f32), _Q3);
            v344 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v340.f32), _Q3);
            if (v333 >= 0xFF)
              v345 = 255;
            else
              v345 = v333;
            v346 = vaddq_f64(v342, _Q3);
            v347 = vaddq_f64(v341, _Q3);
            v4.i32[0] = v345;
            if (v347.f64[1] >= 0xFF)
              v348 = 255;
            else
              v348 = v347.f64[1];
            v349 = v347.f64[0];
            v4.i32[1] = v337;
            v350 = v344.f64[1];
            if (v347.f64[0] >= 0xFF)
              v349 = 255;
            v351 = v120;
            v120.i64[0] = __PAIR64__(v348, v349);
            if (v346.f64[1] >= 0xFF)
              v352 = 255;
            else
              v352 = v346.f64[1];
            if (v346.f64[0] >= 0xFF)
              v353 = 255;
            else
              v353 = v346.f64[0];
            v119.i64[0] = __PAIR64__(v352, v353);
            if (v350 >= 0xFF)
              v350 = 255;
            if (v344.f64[0] >= 0xFF)
              v354 = 255;
            else
              v354 = v344.f64[0];
            LODWORD(v100.f64[0]) = v354;
            if (v343.f64[1] >= 0xFF)
              v356 = 255;
            else
              v356 = v343.f64[1];
            HIDWORD(v100.f64[0]) = v350;
            v357 = v343.f64[0];
            v358 = vmulq_n_f32(v313, *(float *)v323.f64);
            v359 = vmulq_n_f32(v314, *(float *)v323.f64);
            if (v357 >= 0xFF)
              v357 = 255;
            v360 = vmulq_f32(vaddq_f32(v311, v358), v121);
            v361 = vmulq_f32(vaddq_f32(v312, v359), v121);
            v362 = vcvt_hight_f64_f32(v361);
            v363 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v4.i8, (int8x8_t)0x3430242014100400);
            v364 = vcvt_hight_f64_f32(v360);
            v365 = vcvtq_f64_f32(*(float32x2_t *)v361.f32);
            v366 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v360.f32), _Q3);
            v367 = vaddq_f64(v364, _Q3);
            v338.i64[0] = __PAIR64__(v356, v357);
            v368 = vaddq_f64(v362, _Q3);
            v369 = v368.f64[1];
            if (v368.f64[1] >= 0xFF)
              v369 = 255;
            v370 = v368.f64[0];
            v371 = vmovl_u8(v363);
            if (v370 >= 0xFF)
              v370 = 255;
            v314.i64[0] = __PAIR64__(v369, v370);
            v372 = vmovl_high_u16(v371);
            v373 = vaddq_f64(v365, _Q3);
            if (v367.f64[1] >= 0xFF)
              v374 = 255;
            else
              v374 = v367.f64[1];
            v375 = vmovl_u16(*(uint16x4_t *)v371.i8);
            v376 = v367.f64[0];
            if (v367.f64[0] >= 0xFF)
              v376 = 255;
            v312.i32[0] = v376;
            v377 = v373.f64[1];
            if (v373.f64[1] >= 0xFF)
              v377 = 255;
            v312.i32[1] = v374;
            v378 = v373.f64[0];
            if (v373.f64[0] >= 0xFF)
              v378 = 255;
            v313.i64[0] = __PAIR64__(v377, v378);
            v379 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)(&v100 - 2), (int8x8_t)0x3430242014100400);
            v120 = v351;
            v380 = v366.f64[1];
            v381 = vmovl_u8(v379);
            if (v366.f64[1] >= 0xFF)
              v380 = 255;
            v382 = v366.f64[0];
            v99 = (int8x16_t)vmovl_high_u16(v381);
            if (v366.f64[0] >= 0xFF)
              v382 = 255;
            v311.i64[0] = __PAIR64__(v380, v382);
            v98 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v381.i8);
            v123 = (int64x2_t)vmovl_u8((uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v311.f32, (int8x8_t)0x3430242014100400));
            v119 = vmovl_high_u16((uint16x8_t)v123);
            v383 = vmovl_u16(*(uint16x4_t *)v123.i8);
            v384 = vqtbl2q_s8(*(int8x16x2_t *)(&v119 - 1), (int8x16_t)xmmword_2245F6730).u64[0];
            v385 = vqtbl2q_s8(*(int8x16x2_t *)v98.i8, (int8x16_t)xmmword_2245F6730).u64[0];
            v386 = vqtbl2q_s8(*(int8x16x2_t *)(&v372 - 1), (int8x16_t)xmmword_2245F6730).u64[0];
            v122.i64[0] = 0x7F0000007FLL;
            v122.i64[1] = 0x7F0000007FLL;
            v355 = &v128[v309];
            vst4_s8(v355, *(int8x8x4_t *)(&v127 - 3));
            v149 += 8;
            v308 += 16;
            v309 += 32;
          }
          while (v112 != v149);
          v131 = v112;
          v119 = 0uLL;
          v101 = v600;
          v102 = v603;
          v103 = v604;
          v124 = v606;
          v125 = (int8x16_t *)&unk_224669000;
          v126 = (int8x16_t *)&unk_224669000;
          v94 = v581;
          v107 = v582;
          if (!v576)
            goto LABEL_135;
          goto LABEL_139;
        }
        v579 = v128;
        v580 = v105;
        v150 = 0;
        v578 = v129;
        do
        {
          v596 = v128;
          v597 = v150;
          v605 = v124;
          v151 = *(int8x16_t *)&v130[v150];
          v152 = v125[76];
          v652 = vld2q_s8(v129);
          v153 = v129 + 32;
          v595 = v153;
          v154 = (uint32x4_t)vqtbl1q_s8(v151, v152);
          v155 = v126[77];
          v156 = (uint32x4_t)vqtbl1q_s8(v151, v155);
          v157 = (int32x4_t)vqtbl1q_s8(v652.val[0], v155);
          v158 = (int32x4_t)vqtbl1q_s8(v652.val[0], v152);
          v159 = (int32x4_t)vqtbl1q_s8(v652.val[0], (int8x16_t)xmmword_2245F6720);
          v160 = (int32x4_t)vqtbl1q_s8(v652.val[0], v120);
          v161 = (int32x4_t)vqtbl1q_s8(v652.val[1], v152);
          v162 = vdivq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v151, v120)), v121);
          v163 = (int32x4_t)vqtbl1q_s8(v652.val[1], v155);
          v164 = vdivq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v151, (int8x16_t)xmmword_2245F6720)), v121);
          v195 = vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v652.val[1], (int8x16_t)xmmword_2245F6720), v122)), v121);
          v652.val[1] = (int8x16_t)vdivq_f32(vcvtq_f32_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v652.val[1], v120), v122)), v121);
          v151.i32[0] = (__int32)v106[1];
          v152.i32[0] = (__int32)v106[2];
          v165 = vmulq_f32(vaddq_f32(v162, vmulq_n_f32((float32x4_t)v652.val[1], *(float *)v151.i32)), v121);
          v166 = vmulq_f32(vaddq_f32(v164, vmulq_n_f32(v195, *(float *)v151.i32)), v121);
          v167 = vaddq_f64(vcvt_hight_f64_f32(v166), _Q3);
          v592 = v167.f64[1];
          v593 = v167.f64[0];
          v168 = vaddq_f64(vcvt_hight_f64_f32(v165), _Q3);
          v594 = v168.f64[1];
          v169 = vcvtq_f32_u32(v156);
          v170 = vdivq_f32(vcvtq_f32_u32(v154), v121);
          v171 = vaddq_s32(v158, v122);
          v172 = vcvtq_f32_s32(vaddq_s32(v157, v122));
          v173 = vcvtq_f32_s32(v171);
          v174 = vdivq_f32(v169, v121);
          v175 = vdivq_f32(v173, v121);
          v176 = vdivq_f32(v172, v121);
          v177 = vdivq_f32(vcvtq_f32_s32(vaddq_s32(v163, v122)), v121);
          v178 = vdivq_f32(vcvtq_f32_s32(vaddq_s32(v161, v122)), v121);
          v179 = vmulq_f32(vaddq_f32(v174, vmulq_n_f32(v177, *(float *)v151.i32)), v121);
          v180 = vmulq_f32(vaddq_f32(v170, vmulq_n_f32(v178, *(float *)v151.i32)), v121);
          v181 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v166.f32), _Q3);
          v589 = v181.f64[0];
          v182 = v181.f64[1];
          v183 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v165.f32), _Q3);
          v590 = v183.f64[0];
          v591 = v168.f64[0];
          v184 = v183.f64[1];
          v185 = vaddq_f64(vcvt_hight_f64_f32(v180), _Q3);
          v186 = vaddq_f64(vcvt_hight_f64_f32(v179), _Q3);
          v187 = v186.f64[0];
          v188 = v185.f64[0];
          v189 = v186.f64[1];
          v190 = vmulq_n_f32((float32x4_t)v652.val[1], *(float *)v152.i32);
          v191 = vmulq_n_f32(v195, *(float *)v152.i32);
          v192 = vmulq_n_f32(v178, *(float *)v152.i32);
          v193 = v185.f64[1];
          v195.f32[0] = v106[3];
          v194 = v106[4];
          v196 = vaddq_f32(vaddq_f32(v174, vmulq_n_f32(v176, v195.f32[0])), vmulq_n_f32(v177, *(float *)v152.i32));
          v197 = vdivq_f32(vcvtq_f32_s32(vaddq_s32(v159, v122)), v121);
          v198 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v179.f32), _Q3);
          v199 = v111;
          v200 = v198.f64[0];
          v201 = v198.f64[1];
          v202 = vdivq_f32(vcvtq_f32_s32(vaddq_s32(v160, v122)), v121);
          v203 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v180.f32), _Q3);
          v204 = v203.f64[0];
          v205 = vmulq_f32(vaddq_f32(vaddq_f32(v162, vmulq_n_f32(v202, v195.f32[0])), v190), v121);
          v206 = vmulq_f32(vaddq_f32(vaddq_f32(v164, vmulq_n_f32(v197, v195.f32[0])), v191), v121);
          v207 = v203.f64[1];
          v208 = vmulq_f32(v196, v121);
          v209 = vaddq_f64(vcvt_hight_f64_f32(v208), _Q3);
          v210 = v209.f64[1];
          v211 = vmulq_f32(vaddq_f32(vaddq_f32(v170, vmulq_n_f32(v175, v195.f32[0])), v192), v121);
          v212 = vaddq_f64(vcvt_hight_f64_f32(v206), _Q3);
          v213 = v209.f64[0];
          v214 = v212.f64[1];
          v215 = v212.f64[0];
          v216 = vaddq_f64(vcvt_hight_f64_f32(v211), _Q3);
          v217 = vaddq_f64(vcvt_hight_f64_f32(v205), _Q3);
          v218 = v217.f64[1];
          v219 = v130;
          if (v189 >= 0xFF)
            v220 = 255;
          else
            v220 = v189;
          v221 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v205.f32), _Q3);
          v222 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v206.f32), _Q3);
          v223 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v211.f32), _Q3);
          v224 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v208.f32), _Q3);
          v225 = v224.f64[0];
          v226 = v223.f64[0];
          v227 = v217.f64[0];
          v228 = v224.f64[1];
          v229 = v222.f64[1];
          v230 = v223.f64[1];
          v231 = v222.f64[0];
          if (v187 >= 0xFF)
            v187 = 255;
          v191.i64[0] = __PAIR64__(v220, v187);
          v232 = v221.f64[0];
          v130 = v219;
          if (v193 >= 0xFF)
            v193 = 255;
          if (v188 >= 0xFF)
            v188 = 255;
          v190.i64[0] = __PAIR64__(v193, v188);
          if (v201 >= 0xFF)
            v233 = 255;
          else
            v233 = v201;
          if (v200 >= 0xFF)
            v234 = 255;
          else
            v234 = v200;
          v111 = v199;
          v179.i64[0] = __PAIR64__(v233, v234);
          if (v207 >= 0xFF)
            v235 = 255;
          else
            v235 = v207;
          if (v204 >= 0xFF)
            v236 = 255;
          else
            v236 = v204;
          v195.i32[0] = v236;
          v237 = v592;
          if (v592 >= 0xFF)
            v237 = 255;
          v195.i32[1] = v235;
          if (v593 >= 0xFF)
            v238 = 255;
          else
            v238 = v593;
          v239 = vmulq_n_f32(v202, v194);
          v240 = vmulq_n_f32(v197, v194);
          v241 = vmulq_n_f32(v175, v194);
          v242 = vmulq_n_f32(v176, v194);
          v243 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v195.f32, (int8x8_t)0x3430242014100400);
          v190.i32[0] = v238;
          v244 = v594;
          if (v594 >= 0xFF)
            v244 = 255;
          v190.i32[1] = v237;
          if (v591 >= 0xFF)
            v245 = 255;
          else
            v245 = v591;
          v176.i32[0] = v245;
          if (v182 >= 0xFF)
            v246 = 255;
          else
            v246 = v182;
          v176.i32[1] = v244;
          v247 = v589;
          if (v589 >= 0xFF)
            v247 = 255;
          v195.i64[0] = __PAIR64__(v246, v247);
          if (v184 >= 0xFF)
            v248 = 255;
          else
            v248 = v184;
          v126 = (int8x16_t *)&unk_224669000;
          v249 = v590;
          if (v590 >= 0xFF)
            v249 = 255;
          v175.i64[0] = __PAIR64__(v248, v249);
          if (v210 >= 0xFF)
            v250 = 255;
          else
            v250 = v210;
          if (v213 >= 0xFF)
            v251 = 255;
          else
            v251 = v213;
          v252 = vaddq_f32(v174, v242);
          v253 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v175.f32, (int8x8_t)0x3430242014100400);
          v195.i32[0] = v251;
          if (v216.f64[1] >= 0xFF)
            v254 = 255;
          else
            v254 = v216.f64[1];
          v195.i32[1] = v250;
          if (v216.f64[0] >= 0xFF)
            v255 = 255;
          else
            v255 = v216.f64[0];
          v175.i32[0] = v255;
          if (v228 >= 0xFF)
            v228 = 255;
          v175.i32[1] = v254;
          if (v225 >= 0xFF)
            v256 = 255;
          else
            v256 = v225;
          v176.i64[0] = __PAIR64__(v228, v256);
          if (v230 >= 0xFF)
            v257 = 255;
          else
            v257 = v230;
          if (v226 >= 0xFF)
            v258 = 255;
          else
            v258 = v226;
          v174.i64[0] = __PAIR64__(v257, v258);
          if (v214 >= 0xFF)
            v259 = 255;
          else
            v259 = v214;
          if (v215 >= 0xFF)
            v215 = 255;
          v260 = vaddq_f32(v170, v241);
          v261 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v174.f32, (int8x8_t)0x3430242014100400);
          v176.i32[0] = v215;
          if (v218 >= 0xFF)
            v262 = 255;
          else
            v262 = v218;
          v176.i32[1] = v259;
          if (v227 >= 0xFF)
            v263 = 255;
          else
            v263 = v227;
          v174.i32[0] = v263;
          if (v229 >= 0xFF)
            v264 = 255;
          else
            v264 = v229;
          v174.i32[1] = v262;
          if (v231 >= 0xFF)
            v265 = 255;
          else
            v265 = v231;
          v266 = vmulq_f32(vaddq_f32(v162, v239), v121);
          v267 = vmulq_f32(vaddq_f32(v164, v240), v121);
          v268 = vmulq_f32(v260, v121);
          v269 = vmulq_f32(v252, v121);
          v270 = vaddq_f64(vcvt_hight_f64_f32(v269), _Q3);
          v175.i32[0] = v265;
          v271 = v270.f64[1];
          v272 = vcvt_hight_f64_f32(v268);
          v273 = vcvtq_f64_f32(*(float32x2_t *)v269.f32);
          if (v221.f64[1] >= 0xFF)
            v274 = 255;
          else
            v274 = v221.f64[1];
          v275 = vcvtq_f64_f32(*(float32x2_t *)v268.f32);
          v276 = vaddq_f64(v272, _Q3);
          v277 = v270.f64[0];
          v278 = v276.f64[1];
          v100 = vcvt_hight_f64_f32(v267);
          v279 = vaddq_f64(v273, _Q3);
          v175.i32[1] = v264;
          v280 = v276.f64[0];
          v281 = v279.f64[1];
          if (v232 >= 0xFF)
            v232 = 255;
          v282 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v266.f32), _Q3);
          v283 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v267.f32), _Q3);
          v170.i32[0] = v232;
          v284 = vaddq_f64(vcvt_hight_f64_f32(v266), _Q3);
          v285 = vaddq_f64(v275, _Q3);
          if (v271 >= 0xFF)
            v271 = 255;
          v170.i32[1] = v274;
          if (v277 >= 0xFF)
            v286 = 255;
          else
            v286 = v277;
          v287 = v279.f64[0];
          v288 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v170.f32, (int8x8_t)0x3430242014100400);
          v176.i64[0] = __PAIR64__(v271, v286);
          if (v278 >= 0xFF)
            v289 = 255;
          else
            v289 = v278;
          if (v280 >= 0xFF)
            v280 = 255;
          v174.i64[0] = __PAIR64__(v289, v280);
          v290 = vaddq_f64(v100, _Q3);
          if (v281 >= 0xFF)
            v291 = 255;
          else
            v291 = v281;
          if (v287 >= 0xFF)
            v292 = 255;
          else
            v292 = v287;
          v175.i32[0] = v292;
          if (v285.f64[1] >= 0xFF)
            v293 = 255;
          else
            v293 = v285.f64[1];
          v175.i32[1] = v291;
          if (v285.f64[0] >= 0xFF)
            v294 = 255;
          else
            v294 = v285.f64[0];
          v170.i32[0] = v294;
          if (v290.f64[1] >= 0xFF)
            v295 = 255;
          else
            v295 = v290.f64[1];
          v296 = v290.f64[0];
          v170.i32[1] = v293;
          if (v290.f64[0] >= 0xFF)
            v296 = 255;
          v191.i64[0] = __PAIR64__(v295, v296);
          v297 = (uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v170.f32, (int8x8_t)0x3430242014100400);
          if (v284.f64[1] >= 0xFF)
            v298 = 255;
          else
            v298 = v284.f64[1];
          if (v284.f64[0] >= 0xFF)
            v299 = 255;
          else
            v299 = v284.f64[0];
          v190.i64[0] = __PAIR64__(v298, v299);
          if (v283.f64[1] >= 0xFF)
            v300 = 255;
          else
            v300 = v283.f64[1];
          if (v283.f64[0] >= 0xFF)
            v301 = 255;
          else
            v301 = v283.f64[0];
          v179.i64[0] = __PAIR64__(v300, v301);
          v302 = v282.f64[0];
          if (v282.f64[1] >= 0xFF)
            v303 = 255;
          else
            v303 = v282.f64[1];
          v125 = (int8x16_t *)&unk_224669000;
          if (v302 >= 0xFF)
            v302 = 255;
          v195.i64[0] = __PAIR64__(v303, v302);
          v129 = v595;
          v304 = v596;
          v99 = (int8x16_t)vmovl_u8(v297);
          v653.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v99);
          v305 = vmovl_u8((uint8x8_t)vqtbl4_s8(*(int8x16x4_t *)v195.f32, (int8x8_t)0x3430242014100400));
          v653.val[1] = (int8x16_t)vmovl_high_u16(v305);
          v653.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v306 = vmovl_u8(v261);
          v653.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v305.i8);
          v99.i64[1] = 0x3C3834302C282420;
          v7 = vqtbl4q_s8(v653, (int8x16_t)xmmword_2246694E0);
          v653.val[3] = (int8x16_t)vmovl_high_u16(v306);
          v98 = (int8x16_t)vmovl_u8(v288);
          v653.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v98);
          v653.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v306.i8);
          v653.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v98.i8);
          v123 = (int64x2_t)vmovl_u8(v243);
          v602 = vqtbl4q_s8(v653, (int8x16_t)xmmword_2246694E0);
          v6 = vmovl_high_u16((uint16x8_t)v123);
          v307 = vmovl_u8(v253);
          v101 = v7;
          v102 = v602;
          v124 = v605;
          v4 = vmovl_high_u16(v307);
          v5 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v653.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v307.i8);
          v103 = vqtbl4q_s8(*(int8x16x4_t *)(&v4 - 1), (int8x16_t)xmmword_2246694E0);
          vst4q_s8(v304, *(int8x16x4_t *)v101.i8);
          v128 = v304 + 64;
          v150 = v597 + 16;
        }
        while (v111 != v597 + 16);
        v34 = v588;
        v105 = v580;
        v94 = v581;
        v96 = v572;
        v95 = v573;
        v108 = v570;
        v97 = v571;
        v107 = v582;
        v110 = v106 + 5;
        v109 = 2 * v588;
        v129 = v578;
        v112 = v569;
        v114 = 0.5;
        v128 = v579;
        if (!v577)
          goto LABEL_135;
        v149 = v111;
        if (v577 >= 8)
          goto LABEL_300;
        v134 = &v130[v111];
        v133 = &v578[v568];
        v132 = &v579[v567];
        v131 = v111;
        v107 = v582;
      }
LABEL_139:
      v135 = v34 - v131;
      do
      {
        v136 = *v134++;
        v137.f32[0] = (float)v136 / 255.0;
        v138.i32[0] = *(unsigned __int8 *)v133;
        v138.i32[1] = *((unsigned __int8 *)v133 + 1);
        v139 = vdiv_f32(vcvt_f32_s32(vadd_s32(v138, (int32x2_t)0x7F0000007FLL)), v113);
        v140.f32[0] = v106[4];
        v141 = (float)(v137.f32[0] + vmuls_lane_f32(v106[1], v139, 1)) * 255.0;
        v140.f32[1] = v106[2];
        v137.f32[1] = v137.f32[0] + (float)(v106[3] * v139.f32[0]);
        v123 = vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vadd_f32(v137, vmul_f32(v139, v140)), v113)), _Q3));
        v133 += 2;
        *(int32x2_t *)v123.i8 = vmax_s32(vmin_s32(vmovn_s64(v123), (int32x2_t)0xFF000000FFLL), *(int32x2_t *)v119.i8);
        *v132 = v123.i8[0];
        v142 = (int)(v141 + v114);
        if (v142 >= 255)
          v142 = 255;
        v132[1] = v123.i8[4];
        v132[2] = v142 & ~(v142 >> 31);
        v132[3] = -1;
        v132 += 4;
        --v135;
      }
      while (v135);
LABEL_135:
      v128 += v97;
      v130 += v587;
      v129 += v586;
      if (++v105 == v108)
        goto LABEL_362;
    }
    v131 = 0;
LABEL_138:
    v132 = v128;
    v133 = v129;
    v134 = v130;
    goto LABEL_139;
  }
  v48 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223C26E3C(v646);
  if (*(char *)(*(_QWORD *)v646 + 39) < 0)
  {
    v49 = *(const void **)(*(_QWORD *)v646 + 16);
    v50 = *(_QWORD *)(*(_QWORD *)v646 + 24);
  }
  else
  {
    v49 = (const void *)(*(_QWORD *)v646 + 16);
    v50 = *(unsigned __int8 *)(*(_QWORD *)v646 + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v49, v50, "Failed to scale Yp part of YUV image", 0x24uLL);
  sub_223C26F30(&v612);
  if (*(int *)v612[7] > 5)
    goto LABEL_624;
  v54 = *((unsigned __int8 *)v612 + 72);
  v55 = sub_22322F254((uint64_t)v612, "OSLogSurrogateAppender", 1, 0);
  v56 = v55;
  if (!v54 && !v55)
    goto LABEL_624;
  v614 = &v612;
  rep = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
  v616 = std::chrono::system_clock::now().__d_.__rep_;
  v617 = 5;
  v618 = "unknown file";
  v619 = 114;
  v621 = 0;
  v622 = 0;
  v620 = "unknown function";
  v57 = *v614;
  if (*((char *)*v614 + 39) < 0)
  {
    v59 = (const char *)v57[2];
    v58 = (size_t)v57[3];
    v598 = (uint64_t)(*v614 + 2);
    v583 = v44;
    v412 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v412 & 1) != 0)
      goto LABEL_404;
  }
  else
  {
    v58 = *((unsigned __int8 *)*v614 + 39);
    v59 = (const char *)(*v614 + 2);
    v598 = (uint64_t)v59;
    v583 = v44;
    v60 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v60 & 1) != 0)
      goto LABEL_404;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v646);
    sub_223199C58("com.apple.cv3d", (unint64_t)v646, &xmmword_255788F40);
    if ((_BYTE)v647 && (v646[23] & 0x80000000) != 0)
      operator delete(*(void **)v646);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_404:
  if (byte_255788F57 >= 0)
    v413 = (const char *)&xmmword_255788F40;
  else
    v413 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v414 = byte_255788F57;
  else
    v414 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)v646 = os_log_create(v413, v59);
  v415 = &v646[8];
  if (v414 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v414 >= 0x17)
  {
    v416 = v56;
    v417 = v59;
    v418 = v57;
    v419 = a4;
    v420 = v54;
    v421 = (v414 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v414 | 7) != 0x17)
      v421 = v414 | 7;
    v422 = v421 + 1;
    v415 = operator new(v421 + 1);
    *(_QWORD *)&v646[16] = v414;
    *(_QWORD *)&v647 = v422 | 0x8000000000000000;
    *(_QWORD *)&v646[8] = v415;
    v54 = v420;
    a4 = v419;
    v57 = v418;
    v59 = v417;
    v56 = v416;
    goto LABEL_417;
  }
  BYTE7(v647) = v414;
  if (v414)
LABEL_417:
    memmove(v415, v413, v414);
  v415[v414] = 0;
  BYTE8(v647) = 1;
  v423 = (void **)&v648;
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v58 >= 0x17)
  {
    v424 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v424 = v58 | 7;
    v425 = v424 + 1;
    v423 = (void **)operator new(v424 + 1);
    v649 = v58;
    v650 = v425 | 0x8000000000000000;
    v648 = v423;
  }
  else
  {
    HIBYTE(v650) = v58;
    if (!v58)
      goto LABEL_426;
  }
  memmove(v423, v59, v58);
LABEL_426:
  *((_BYTE *)v423 + v58) = 0;
  v651 = 1;
  v426 = *(NSObject **)v646;
  if (SHIBYTE(v650) < 0)
    operator delete(v648);
  if (BYTE8(v647) && SBYTE7(v647) < 0)
    operator delete(*(void **)&v646[8]);
  if (*(_QWORD *)v646)
    os_release(*(void **)v646);
  if (v56 && *(_QWORD *)(v56 + 24))
  {
    v427 = _os_log_pack_size();
    v428 = (std::__shared_weak_count_vtbl *)operator new(v427, (std::align_val_t)8uLL);
    v429 = (std::__shared_weak_count *)operator new();
    v430 = v429;
    v429->__shared_owners_ = 0;
    v431 = (unint64_t *)&v429->__shared_owners_;
    v429->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v429->__shared_weak_owners_ = 0;
    v429[1].__vftable = v428;
    *(_QWORD *)v646 = v428;
    *(_QWORD *)&v646[8] = v428;
    *(_QWORD *)&v646[16] = v429;
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
    v647 = 0uLL;
    v648 = 0;
    do
      v433 = __ldaxr(v431);
    while (__stlxr(v433 - 1, v431));
    if (!v433)
    {
      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
      std::__shared_weak_count::__release_weak(v430);
    }
    v434 = *(_QWORD *)v646;
    *(_WORD *)_os_log_pack_fill() = 0;
    v435 = operator new();
    v436 = (CVPixelBufferPoolRef)*((unsigned __int8 *)v57 + 39);
    v437 = v598;
    if ((char)v436 < 0)
    {
      v437 = (uint64_t)v57[2];
      v436 = v57[3];
    }
    *(_QWORD *)v435 = v434;
    *(_OWORD *)(v435 + 8) = *(_OWORD *)&v646[8];
    *(_QWORD *)&v646[8] = 0;
    *(_QWORD *)&v646[16] = 0;
    *(_OWORD *)(v435 + 24) = v647;
    v647 = 0uLL;
    *(_QWORD *)(v435 + 40) = v437;
    *(_QWORD *)(v435 + 48) = v436;
    *(_BYTE *)(v435 + 56) = 16;
    v607 = 0;
    *(_QWORD *)&__p = v435;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v56 + 24) + 40))(*(_QWORD *)(v56 + 24), &__p);
    v438 = __p;
    *(_QWORD *)&__p = 0;
    v44 = v583;
    if (v438)
    {
      v439 = *(std::__shared_weak_count **)(v438 + 32);
      if (v439)
      {
        v440 = (unint64_t *)&v439->__shared_owners_;
        do
          v441 = __ldaxr(v440);
        while (__stlxr(v441 - 1, v440));
        if (!v441)
        {
          ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
          std::__shared_weak_count::__release_weak(v439);
        }
      }
      v442 = *(std::__shared_weak_count **)(v438 + 16);
      if (v442)
      {
        v443 = (unint64_t *)&v442->__shared_owners_;
        do
          v444 = __ldaxr(v443);
        while (__stlxr(v444 - 1, v443));
        if (!v444)
        {
          ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
          std::__shared_weak_count::__release_weak(v442);
        }
      }
      MEMORY[0x227684CE8](v438, 0x10F0C40B62ED6C6);
      v607 = 0;
    }
    v445 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
    if (*((_QWORD *)&v647 + 1))
    {
      v446 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
      do
        v447 = __ldaxr(v446);
      while (__stlxr(v447 - 1, v446));
      if (!v447)
      {
        ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
        std::__shared_weak_count::__release_weak(v445);
      }
    }
    v448 = *(std::__shared_weak_count **)&v646[16];
    if (*(_QWORD *)&v646[16])
    {
      v449 = (unint64_t *)(*(_QWORD *)&v646[16] + 8);
      do
        v450 = __ldaxr(v449);
      while (__stlxr(v450 - 1, v449));
      if (!v450)
      {
        ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
        std::__shared_weak_count::__release_weak(v448);
      }
    }
  }
  else
  {
    os_log_type_enabled(v426, OS_LOG_TYPE_ERROR);
    *(_WORD *)v646 = 0;
    v451 = (void *)_os_log_send_and_compose_impl();
    v44 = v583;
    if (v451)
      free(v451);
  }
  if (v54)
  {
    sub_22322C138((uint64_t)&v614, "Failed to scale Yp part of YUV image");
    sub_223182C08((uint64_t)&v614);
  }
  sub_223182C08((uint64_t)&v614);
  v452 = v622;
  if (!v622)
    goto LABEL_624;
  v453 = (unint64_t *)&v622->__shared_owners_;
  do
    v454 = __ldaxr(v453);
  while (__stlxr(v454 - 1, v453));
LABEL_622:
  if (!v454)
  {
    ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
    std::__shared_weak_count::__release_weak(v452);
  }
LABEL_624:
  a4[1] = 0;
  a4[2] = 0;
  *a4 = &off_24EC715B8;
LABEL_625:
  if (v44)
    operator delete(v44);
LABEL_627:
  if (v628)
  {
    v542 = *v628;
    v541 = (std::__shared_weak_count *)v628[1];
    if (v541)
    {
      v543 = (unint64_t *)&v541->__shared_owners_;
      do
        v544 = __ldxr(v543);
      while (__stxr(v544 + 1, v543));
      do
        v545 = __ldaxr(v543);
      while (__stlxr(v545 - 1, v543));
      if (!v545)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
        if (!v542)
          goto LABEL_635;
        goto LABEL_634;
      }
    }
    if (v542)
LABEL_634:
      sub_2242AE9A8((uint64_t)v628);
  }
LABEL_635:
  v627 = &off_24EC715B8;
  v546 = v629;
  if (!v629)
    goto LABEL_639;
  v547 = (unint64_t *)&v629->__shared_owners_;
  do
    v548 = __ldaxr(v547);
  while (__stlxr(v548 - 1, v547));
  if (!v548)
  {
    ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
    std::__shared_weak_count::__release_weak(v546);
    v549 = v631;
    if (!v631)
      goto LABEL_647;
  }
  else
  {
LABEL_639:
    v549 = v631;
    if (!v631)
      goto LABEL_647;
  }
  v551 = *v549;
  v550 = (std::__shared_weak_count *)v549[1];
  if (v550)
  {
    v552 = (unint64_t *)&v550->__shared_owners_;
    do
      v553 = __ldxr(v552);
    while (__stxr(v553 + 1, v552));
    do
      v554 = __ldaxr(v552);
    while (__stlxr(v554 - 1, v552));
    if (!v554)
    {
      ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
      std::__shared_weak_count::__release_weak(v550);
      if (!v551)
        goto LABEL_647;
      goto LABEL_646;
    }
  }
  if (v551)
LABEL_646:
    sub_2242AEA98((uint64_t)v631);
LABEL_647:
  v630 = &off_24EC715B8;
  v555 = v632;
  if (v632)
  {
    v556 = (unint64_t *)&v632->__shared_owners_;
    do
      v557 = __ldaxr(v556);
    while (__stlxr(v557 - 1, v556));
    if (!v557)
    {
      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
      std::__shared_weak_count::__release_weak(v555);
    }
  }
  v633 = &off_24EC76F28;
  v558 = v635;
  if (!v635)
    goto LABEL_656;
  v559 = (unint64_t *)&v635->__shared_owners_;
  do
    v560 = __ldaxr(v559);
  while (__stlxr(v560 - 1, v559));
  if (!v560)
  {
    ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
    std::__shared_weak_count::__release_weak(v558);
    v636 = &off_24EC715B8;
    v561 = v638;
    if (!v638)
      goto LABEL_660;
  }
  else
  {
LABEL_656:
    v636 = &off_24EC715B8;
    v561 = v638;
    if (!v638)
      goto LABEL_660;
  }
  v562 = (unint64_t *)&v561->__shared_owners_;
  do
    v563 = __ldaxr(v562);
  while (__stlxr(v563 - 1, v562));
  if (!v563)
  {
    ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
    std::__shared_weak_count::__release_weak(v561);
    if (v643)
      goto LABEL_661;
    goto LABEL_667;
  }
LABEL_660:
  if (v643)
  {
LABEL_661:
    (*v639)(&v639);
    goto LABEL_669;
  }
LABEL_667:
  if (v642 < 0)
    operator delete(v640);
LABEL_669:
  v564 = v645;
  if (v645)
  {
    v565 = (unint64_t *)&v645->__shared_owners_;
    do
      v566 = __ldaxr(v565);
    while (__stlxr(v566 - 1, v565));
    if (!v566)
    {
      ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
      std::__shared_weak_count::__release_weak(v564);
    }
  }
}

void sub_223C26984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 216) && *(char *)(v60 - 217) < 0)
    operator delete(*(void **)(v60 - 240));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a60);
  if (__p)
    operator delete(__p);
  sub_2242A86B4(&STACK[0x268]);
  sub_2242A89DC(&STACK[0x280]);
  sub_2244E0FF4(&STACK[0x298]);
  sub_2242A8F3C(&STACK[0x2B0]);
  sub_2232B6080((uint64_t)&STACK[0x2C8]);
  sub_223167354(v60 - 256);
  _Unwind_Resume(a1);
}

void sub_223C26E3C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCFE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFE8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.frame");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCFE0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCFE8);
  }
  *a1 = qword_2540CCFE0;
}

void sub_223C26ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCFE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCFE8);
  _Unwind_Resume(a1);
}

void sub_223C26F30(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCFF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFF8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCFF0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCFF8);
  }
  *a1 = qword_2540CCFF0;
}

void sub_223C26FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCFF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCFF8);
  _Unwind_Resume(a1);
}

void sub_223C27024(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  char *isa;
  size_t isa_high;
  std::__shared_weak_count *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  size_t v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];
  int v82;
  const char *v83;
  int v84;
  const char *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  uint64_t (**v89)();
  uint64_t *v90;
  std::__shared_weak_count *v91;
  uint64_t (**v92)();
  __int128 v93;
  void (**v94)(_QWORD);
  __int128 __p;
  char v96;
  char v97;
  CVPixelBufferPoolRef *v98;
  std::__shared_weak_count *v99;
  os_log_t v100;
  __int128 v101;
  __int128 v102;
  void *v103[2];
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107[3];

  if ((!HIDWORD(a2) || !(_DWORD)a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 194, (uint64_t)"out_size[0] > 0 && out_size[1] > 0", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = atomic_load((unsigned __int8 *)&qword_2540CCFA0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFA0))
  {
    qword_2540CD100 = 0;
    unk_2540CD108 = 0;
    qword_2540CD0F8 = (uint64_t)&qword_2540CD100;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD0F8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCFA0);
  }
  sub_223C8536C((uint64_t **)&qword_2540CD0F8, a2, 0x42475241u, 1u, (std::__shared_weak_count_vtbl ***)&v98);
  sub_2242A7370(v98, (uint64_t)&v94);
  if (!v97
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 198, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v92 = &off_24EC715B8;
  v93 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_2242AA1D0((uint64_t)&v92, &v89);
  if (v90)
  {
    v10 = *v90;
    v9 = (std::__shared_weak_count *)v90[1];
    if (!v9)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v10)
        goto LABEL_18;
    }
    else
    {
LABEL_16:
      if (v10)
        goto LABEL_18;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 202, (uint64_t)"out_buffer_iosurface", 20, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_18:
  HIBYTE(v101) = 6;
  strcpy((char *)&v100, "ToSrgb");
  sub_2244E116C((uint64_t)&v89, (uint64_t *)&v100);
  if (SHIBYTE(v101) < 0)
    operator delete(v100);
  v14 = atomic_load((unsigned __int8 *)&qword_2540CCFB0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFB0))
  {
    sub_223FC4CB0(&qword_2540CCFA8);
    __cxa_atexit((void (*)(void *))sub_223416934, &qword_2540CCFA8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCFB0);
  }
  if ((sub_223FC4D34(&qword_2540CCFA8, a1, (uint64_t)&v92) & 0xFF00000000) != 0)
  {
    v15 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223C26E3C(&v100);
    if (SHIBYTE(v100[4].isa) < 0)
    {
      isa = (char *)v100[2].isa;
      isa_high = (size_t)v100[3].isa;
    }
    else
    {
      isa = (char *)&v100[2];
      isa_high = HIBYTE(v100[4].isa);
    }
    sub_223195728((uint64_t)&unk_255789280, isa, isa_high, "Failed to convert color image to sRGB!", 0x26uLL);
    sub_223C26F30(&v88);
    if (**(int **)(v88 + 56) > 5
      || (v19 = *(unsigned __int8 *)(v88 + 72),
          v20 = sub_22322F254(v88, "OSLogSurrogateAppender", 1, 0),
          v21 = v20,
          !v19)
      && !v20)
    {
LABEL_118:
      *a3 = &off_24EC715B8;
      v70 = a3 + 1;
      *v70 = 0;
      v70[1] = 0;
      v89 = &off_24EC76F28;
      v18 = v91;
      if (!v91)
        goto LABEL_123;
      goto LABEL_119;
    }
    v81[0] = &v88;
    v81[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v81[2] = std::chrono::system_clock::now().__d_.__rep_;
    v82 = 5;
    v83 = "unknown file";
    v84 = 209;
    v86 = 0;
    v87 = 0;
    v85 = "unknown function";
    v80 = v88;
    if (*(char *)(v88 + 39) < 0)
    {
      v23 = *(const char **)(v88 + 16);
      v22 = *(_QWORD *)(v88 + 24);
      v79 = v88 + 16;
      v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v25 & 1) != 0)
        goto LABEL_37;
    }
    else
    {
      v22 = *(unsigned __int8 *)(v88 + 39);
      v23 = (const char *)(v88 + 16);
      v79 = v88 + 16;
      v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v24 & 1) != 0)
        goto LABEL_37;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v100);
      sub_223199C58("com.apple.cv3d", (unint64_t)&v100, &xmmword_255788F40);
      if ((_BYTE)v102 && SHIBYTE(v101) < 0)
        operator delete(v100);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_37:
    if (byte_255788F57 >= 0)
      v26 = (const char *)&xmmword_255788F40;
    else
      v26 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v27 = byte_255788F57;
    else
      v27 = *((_QWORD *)&xmmword_255788F40 + 1);
    v100 = os_log_create(v26, v23);
    v28 = &v101;
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v27 >= 0x17)
    {
      v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v29 = v27 | 7;
      v30 = v29 + 1;
      v28 = (__int128 *)operator new(v29 + 1);
      *((_QWORD *)&v101 + 1) = v27;
      *(_QWORD *)&v102 = v30 | 0x8000000000000000;
      *(_QWORD *)&v101 = v28;
    }
    else
    {
      BYTE7(v102) = v27;
      if (!v27)
      {
LABEL_51:
        *((_BYTE *)v28 + v27) = 0;
        BYTE8(v102) = 1;
        v31 = v103;
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v22 >= 0x17)
        {
          v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v32 = v22 | 7;
          v33 = v32 + 1;
          v31 = (void **)operator new(v32 + 1);
          v103[1] = (void *)v22;
          v104 = v33 | 0x8000000000000000;
          v103[0] = v31;
        }
        else
        {
          HIBYTE(v104) = v22;
          if (!v22)
            goto LABEL_59;
        }
        memmove(v31, v23, v22);
LABEL_59:
        *((_BYTE *)v31 + v22) = 0;
        v105 = 1;
        v34 = v100;
        if (SHIBYTE(v104) < 0)
          operator delete(v103[0]);
        if (BYTE8(v102) && SBYTE7(v102) < 0)
          operator delete((void *)v101);
        if (v100)
          os_release(v100);
        if (v21 && *(_QWORD *)(v21 + 24))
        {
          v35 = _os_log_pack_size();
          v36 = operator new(v35, (std::align_val_t)8uLL);
          v37 = (std::__shared_weak_count *)operator new();
          v38 = v37;
          v37->__shared_owners_ = 0;
          v39 = (unint64_t *)&v37->__shared_owners_;
          v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v37->__shared_weak_owners_ = 0;
          v37[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
          v100 = v36;
          *(_QWORD *)&v101 = v36;
          *((_QWORD *)&v101 + 1) = v37;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
          v102 = 0uLL;
          v103[0] = 0;
          do
            v41 = __ldaxr(v39);
          while (__stlxr(v41 - 1, v39));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v38);
          }
          v42 = v100;
          *(_WORD *)_os_log_pack_fill() = 0;
          v43 = operator new();
          v44 = *(unsigned __int8 *)(v80 + 39);
          v45 = v79;
          if ((v44 & 0x80u) != 0)
          {
            v45 = *(_QWORD *)(v80 + 16);
            v44 = *(_QWORD *)(v80 + 24);
          }
          *(_QWORD *)v43 = v42;
          *(_OWORD *)(v43 + 8) = v101;
          v101 = 0uLL;
          *(_OWORD *)(v43 + 24) = v102;
          v102 = 0uLL;
          *(_QWORD *)(v43 + 40) = v45;
          *(_QWORD *)(v43 + 48) = v44;
          *(_BYTE *)(v43 + 56) = 16;
          v106 = 0;
          v107[0] = v43;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), v107);
          v46 = v107[0];
          v107[0] = 0;
          if (v46)
          {
            v47 = *(std::__shared_weak_count **)(v46 + 32);
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = *(std::__shared_weak_count **)(v46 + 16);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
            v53 = v106;
            v106 = 0;
            if (v53)
            {
              v54 = *(std::__shared_weak_count **)(v53 + 32);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v57 = *(std::__shared_weak_count **)(v53 + 16);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              MEMORY[0x227684CE8](v53, 0x10F0C40B62ED6C6);
            }
          }
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (*((_QWORD *)&v101 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
        }
        else
        {
          os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          LOWORD(v100) = 0;
          v66 = (void *)_os_log_send_and_compose_impl();
          if (v66)
            free(v66);
        }
        if (v19)
        {
          sub_22322C138((uint64_t)v81, "Failed to convert color image to sRGB!");
          sub_223182C08((uint64_t)v81);
        }
        sub_223182C08((uint64_t)v81);
        v67 = v87;
        if (v87)
        {
          v68 = (unint64_t *)&v87->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        goto LABEL_118;
      }
    }
    memmove(v28, v26, v27);
    goto LABEL_51;
  }
  *a3 = &off_24EC715B8;
  *(_OWORD *)(a3 + 1) = v93;
  v93 = 0uLL;
  v89 = &off_24EC76F28;
  v18 = v91;
  if (!v91)
    goto LABEL_123;
LABEL_119:
  v71 = (unint64_t *)&v18->__shared_owners_;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_123:
  v92 = &off_24EC715B8;
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (!*((_QWORD *)&v93 + 1))
    goto LABEL_127;
  v74 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v75 - 1, v74));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    if (v97)
      goto LABEL_128;
  }
  else
  {
LABEL_127:
    if (v97)
    {
LABEL_128:
      (*v94)(&v94);
      goto LABEL_132;
    }
  }
  if (v96 < 0)
    operator delete((void *)__p);
LABEL_132:
  v76 = v99;
  if (v99)
  {
    v77 = (unint64_t *)&v99->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_223C27B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(_BYTE *)(v35 - 168))
  {
    if (*(char *)(v35 - 169) < 0)
      operator delete(*(void **)(v35 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  sub_2244E0FF4(&a24);
  sub_2242A8F3C(&a27);
  sub_2232B6080((uint64_t)&a30);
  sub_223167354((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_223C27CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  unsigned __int8 *v29;
  char *v30;
  int v32;
  int v33;
  int v38;
  uint64_t v39;
  char *v40;
  float v41;
  __int128 v42;
  float v43;
  float v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  float v52;
  char *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  _OWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  unsigned __int8 *v81;
  __int32 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *__p[2];
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t (**v91)();
  _QWORD *v92;
  std::__shared_weak_count *v93;
  uint64_t (**v94)();
  uint64_t *v95;
  std::__shared_weak_count *v96;
  void (**v97)(_QWORD, __n128);
  void *v98;
  uint64_t v99;
  char v100;
  char v101;
  CVPixelBufferPoolRef *v102;
  std::__shared_weak_count *v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  _OWORD v111[2];
  int v112;
  unint64_t v113;
  _OWORD v114[3];

  sub_2242A7B48(a1, (uint64_t)&v104);
  v6 = atomic_load((unsigned __int8 *)&qword_2540CCFB8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFB8))
  {
    qword_2540CD118 = 0;
    unk_2540CD120 = 0;
    qword_2540CD110 = (uint64_t)&qword_2540CD118;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD110, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCFB8);
  }
  v7 = sub_2242A9824(a1);
  sub_223C8536C((uint64_t **)&qword_2540CD110, v7, 0x52476641u, 1u, (std::__shared_weak_count_vtbl ***)&v102);
  sub_2242A7370(v102, (uint64_t)&v97);
  if (!v101
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 229, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v9 = v98;
  v8 = v99;
  *a3 = &off_24EC715B8;
  a3[1] = v9;
  a3[2] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_2242AA1D0((uint64_t)a3, &v94);
  if (v95)
  {
    v12 = *v95;
    v13 = (std::__shared_weak_count *)v95[1];
    if (!v13)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v12)
        goto LABEL_15;
    }
    else
    {
LABEL_13:
      if (v12)
        goto LABEL_15;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 233, (uint64_t)"linear_rgba_iosurface", 21, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  HIBYTE(v88) = 8;
  strcpy((char *)__p, "ToLinear");
  sub_2244E116C((uint64_t)&v94, (uint64_t *)__p);
  if (SHIBYTE(v88) < 0)
    operator delete(__p[0]);
  v17 = (_QWORD *)a3[1];
  v18 = (std::__shared_weak_count *)a3[2];
  v92 = v17;
  v93 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v17 = v92;
  }
  v91 = &off_24EC71548;
  if (v17)
  {
    v21 = *v17;
    v22 = (std::__shared_weak_count *)v17[1];
    if (!v22)
      goto LABEL_27;
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (v25)
    {
LABEL_27:
      if (!v21)
        goto LABEL_29;
      goto LABEL_28;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v21)
LABEL_28:
      sub_2242AE8BC((uint64_t)v92);
  }
LABEL_29:
  sub_2242A80E4((uint64_t)&v91, (uint64_t)__p);
  if (*(_BYTE *)(a2 + 24))
  {
    v86 = a2;
    if (v105 && v106 && v107)
    {
      v28 = v106 - 1;
      v85 = v109;
      v78 = v110;
      v84 = v89;
      v77 = v90;
      v29 = v104;
      v30 = (char *)__p[0];
      _Q0.i64[0] = 0;
      memset(v111, 0, sizeof(v111));
      v32 = v107 - 1;
      if (v107 != 1)
      {
        if (v106 == 1)
        {
          v59 = 0;
          v60 = 0;
          v61 = 4 * v90;
          do
          {
            *(_QWORD *)&v114[0] = &v30[v59];
            *(_QWORD *)&v111[0] = &v29[v60];
            *(_QWORD *)&v111[1] = &v30[v59];
            _Q0.i64[0] = sub_223C6887C(v111, (uint64_t)&v86, &v29[v60], (_OWORD **)v114, *(double *)_Q0.i64, v27).u64[0];
            v60 += v78;
            v59 += v61;
            --v32;
          }
          while (v32);
          v29 += v60;
          *(_QWORD *)&v114[0] = &v30[v59];
          *(_QWORD *)&v111[0] = v29;
          *(_QWORD *)&v111[1] = &v30[v59];
LABEL_69:
          v26 = sub_223C6887C(v111, (uint64_t)&v86, v29, (_OWORD **)v114, *(double *)_Q0.i64, v27);
          goto LABEL_70;
        }
        v33 = 0;
        __asm { FMOV            V0.4S, #1.0 }
        v82 = _Q0.i32[3];
        v83 = v106 - 1;
        v76 = v107 - 1;
        do
        {
          v79 = v33;
          v38 = 0;
          v39 = qword_2540CD030;
          v80 = v30;
          v81 = v29;
          v40 = v30;
          do
          {
            v45 = v29;
            v46 = v40;
            v47 = *v29;
            v48 = v29[1];
            v49 = v45[2];
            if (!v39)
            {
              v50 = a2;
              v39 = operator new();
              for (i = 0; i != 256; ++i)
              {
                while (1)
                {
                  v52 = (float)i;
                  if (i <= 0xAu)
                    break;
                  *(float *)&byte_2540CCF90[4 * i++ + 1248] = powf((float)((float)(v52 * 0.78431) + 11.0) / 211.0, 2.4);
                  if (i == 256)
                    goto LABEL_37;
                }
                *(float *)&byte_2540CCF90[4 * i + 1248] = v52 * 0.00030353;
              }
LABEL_37:
              qword_2540CD030 = v39;
              a2 = v50;
            }
            _Q0.i32[0] = dword_2540CD470[v49];
            v27.i32[0] = dword_2540CD470[v48];
            v41 = *(float *)&dword_2540CD470[v47];
            *(_QWORD *)&v42 = __PAIR64__(v27.u32[0], _Q0.u32[0]);
            *((_QWORD *)&v42 + 1) = __PAIR64__(v82, LODWORD(v41));
            *(_OWORD *)v46 = v42;
            if (v27.f32[0] <= _Q0.f32[0])
              v43 = _Q0.f32[0];
            else
              v43 = v27.f32[0];
            if (v43 < v41)
              v43 = v41;
            v44 = (float)((float)((float)((float)(_Q0.f32[0] * 0.072)
                                        + (float)((float)(_Q0.f32[0] * 0.213) + (float)(v27.f32[0] * 0.715)))
                                + v43)
                        * 0.5)
                + 0.00000011921;
            _Q0.i32[1] = v27.i32[0];
            _Q0.f32[2] = v41;
            _Q0 = vmulq_n_f32(_Q0, *(float *)(*(_QWORD *)a2+ 4* vcvtas_u32_f32(v44* (float)(unint64_t)(((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) - 1)))/ v44);
            *((_DWORD *)v46 + 2) = _Q0.i32[2];
            *(_QWORD *)v46 = _Q0.i64[0];
            v29 = &v45[v85];
            v40 = &v46[4 * v84];
            ++v38;
            v28 = v83;
          }
          while (v38 != v83);
          *(_QWORD *)&v111[0] = v45;
          *(_QWORD *)&v111[1] = v46;
          *(_QWORD *)&v114[0] = &v46[4 * v84];
          _Q0 = sub_223C6887C(v111, (uint64_t)&v86, &v45[v85], (_OWORD **)v114, *(double *)_Q0.i64, v27);
          v29 = &v81[v78];
          v30 = &v80[4 * v77];
          v33 = v79 + 1;
        }
        while (v79 + 1 != v76);
      }
      *(_QWORD *)&v114[0] = v30;
      *(_QWORD *)&v111[0] = v29;
      *(_QWORD *)&v111[1] = v30;
      if (v28)
      {
        v53 = &v30[4 * v84];
        do
        {
          _Q0.i64[0] = sub_223C6887C(v111, (uint64_t)&v86, v29, (_OWORD **)v114, *(double *)_Q0.i64, v27).u64[0];
          v29 += v85;
          *(_QWORD *)&v114[0] = v53;
          v53 += 4 * v84;
          --v28;
        }
        while (v28);
      }
      goto LABEL_69;
    }
  }
  else if (v105 && v106 && v107)
  {
    *(_QWORD *)((char *)v111 + 12) = v108 | ((unint64_t)v88 << 32);
    *(_QWORD *)&v111[0] = 0;
    DWORD2(v111[0]) = v105 - 1;
    DWORD1(v111[1]) = v106 - 1;
    *((_QWORD *)&v111[1] + 1) = v109 | ((unint64_t)v89 << 32);
    v54 = v110;
    v113 = v110 | ((unint64_t)v90 << 32);
    v55 = v104;
    v56 = __p[0];
    memset(v114, 0, 32);
    v57 = v107 - 1;
    v112 = v107 - 1;
    if (v107 != 1)
    {
      v58 = 4 * v90;
      do
      {
        sub_223C68A74(v111, v114, v55, v56);
        v55 += v54;
        v56 = (_OWORD *)((char *)v56 + v58);
        --v57;
      }
      while (v57);
    }
    sub_223C68A74(v111, v114, v55, v56);
  }
LABEL_70:
  if (v92)
  {
    v63 = *v92;
    v62 = (std::__shared_weak_count *)v92[1];
    if (v62)
    {
      v64 = (unint64_t *)&v62->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
      do
        v66 = __ldaxr(v64);
      while (__stlxr(v66 - 1, v64));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *, float32x4_t))v62->__on_zero_shared)(v62, v26);
        std::__shared_weak_count::__release_weak(v62);
        if (!v63)
          goto LABEL_78;
        goto LABEL_77;
      }
    }
    if (v63)
LABEL_77:
      sub_2242AEA98((uint64_t)v92);
  }
LABEL_78:
  v91 = &off_24EC715B8;
  v67 = v93;
  if (v93)
  {
    v68 = (unint64_t *)&v93->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *, float32x4_t))v67->__on_zero_shared)(v67, v26);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v94 = &off_24EC76F28;
  v70 = v96;
  if (!v96)
    goto LABEL_87;
  v71 = (unint64_t *)&v96->__shared_owners_;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *, float32x4_t))v70->__on_zero_shared)(v70, v26);
    std::__shared_weak_count::__release_weak(v70);
    if (v101)
      goto LABEL_88;
  }
  else
  {
LABEL_87:
    if (v101)
    {
LABEL_88:
      (*v97)(&v97, (__n128)v26);
      goto LABEL_92;
    }
  }
  if (v100 < 0)
    operator delete(v98);
LABEL_92:
  v73 = v103;
  if (v103)
  {
    v74 = (unint64_t *)&v103->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_223C284E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _QWORD *v44;

  sub_2242A89DC(&a33);
  sub_2244E0FF4(&a36);
  sub_2242A8F3C(v44);
  sub_2232B6080((uint64_t)&a39);
  sub_223167354((uint64_t)&a44);
  _Unwind_Resume(a1);
}

_QWORD *sub_223C285F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char **v4;
  char **v5;
  float32x4_t v6;
  float32x4_t v7;
  int64x2_t v8;
  int64x2_t v9;
  double v10;
  float32x4_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  char *v40;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  char *v52;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  int64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  int64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char **v82;
  unint64_t v83;
  int64x2_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  int64x2_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v134;
  char **v135;
  void **v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  int v140[2];
  char *v141;
  void *__p;
  void *v143;
  char *v144;
  void *v145;
  char *v146;
  uint64_t *v147;

  v3 = (_QWORD *)a1;
  sub_223C29098(a1, a1 + 24, (_QWORD *)a2, (__int128 **)(a2 + 24));
  v135 = (char **)(v3 + 9);
  v136 = (void **)(v3 + 6);
  sub_223C29098((uint64_t)(v3 + 6), (uint64_t)(v3 + 9), (_QWORD *)(a2 + 48), (__int128 **)(a2 + 72));
  v4 = (char **)(v3 + 12);
  sub_223C2944C((uint64_t)(v3 + 12), (_QWORD *)(a2 + 96));
  v5 = (char **)(v3 + 15);
  sub_223C2944C((uint64_t)(v3 + 15), (_QWORD *)(a2 + 120));
  sub_223C2944C((uint64_t)(v3 + 18), (_QWORD *)(a2 + 144));
  v12 = *(_QWORD **)(a2 + 120);
  v13 = *(_QWORD **)(a2 + 128);
  while (v12 != v13)
  {
    v15 = (char *)*v3;
    v14 = (char *)v3[1];
    v16 = (char *)*v3;
    if ((char *)*v3 != v14)
    {
      while (*(_QWORD *)v16 != *v12 || *((_QWORD *)v16 + 1) != v12[1])
      {
        v16 += 16;
        if (v16 == v14)
        {
          v16 = (char *)v3[1];
          break;
        }
      }
    }
    if (v16 != v14)
    {
      v18 = v14 - (v16 + 16);
      if (v14 != v16 + 16)
        memmove(v16, v16 + 16, v14 - (v16 + 16));
      v19 = v16 - v15;
      v3[1] = &v16[v18];
      v21 = v3[3];
      v20 = v3[4];
      v22 = v21 + (v19 >> 4 << 6);
      if (v22 + 64 != v20)
      {
        v23 = ((v20 - v22 - 128) & 0xFFFFFFFFFFFFFFC0) + 64;
        memmove((void *)v22, (const void *)(v22 + 64), v23);
        v22 = v21 + v23 + 4 * v19;
      }
      v3[4] = v22;
    }
    v12 += 2;
  }
  v24 = *(_QWORD **)(a2 + 96);
  v25 = *(_QWORD **)(a2 + 104);
  while (v24 != v25)
  {
    v27 = (char *)*v3;
    v26 = (char *)v3[1];
    v28 = (char *)*v3;
    if ((char *)*v3 != v26)
    {
      while (*(_QWORD *)v28 != *v24 || *((_QWORD *)v28 + 1) != v24[1])
      {
        v28 += 16;
        if (v28 == v26)
        {
          v28 = (char *)v3[1];
          break;
        }
      }
    }
    if (v28 != v26)
    {
      v30 = v26 - (v28 + 16);
      if (v26 != v28 + 16)
        memmove(v28, v28 + 16, v26 - (v28 + 16));
      v31 = v28 - v27;
      v3[1] = &v28[v30];
      v33 = v3[3];
      v32 = v3[4];
      v34 = v33 + (v31 >> 4 << 6);
      if (v34 + 64 != v32)
      {
        v35 = ((v32 - v34 - 128) & 0xFFFFFFFFFFFFFFC0) + 64;
        memmove((void *)v34, (const void *)(v34 + 64), v35);
        v34 = v33 + v35 + 4 * v31;
      }
      v3[4] = v34;
    }
    v24 += 2;
  }
  v36 = *(_QWORD **)(a2 + 120);
  v37 = *(_QWORD **)(a2 + 128);
  while (v36 != v37)
  {
    v39 = (char *)v3[6];
    v38 = (char *)v3[7];
    v40 = v39;
    if (v39 != v38)
    {
      while (*(_QWORD *)v40 != *v36 || *((_QWORD *)v40 + 1) != v36[1])
      {
        v40 += 16;
        if (v40 == v38)
        {
          v40 = (char *)v3[7];
          break;
        }
      }
    }
    if (v40 != v38)
    {
      v42 = v38 - (v40 + 16);
      if (v38 != v40 + 16)
        memmove(v40, v40 + 16, v38 - (v40 + 16));
      v43 = v40 - v39;
      v3[7] = &v40[v42];
      v45 = v3[9];
      v44 = v3[10];
      v46 = v45 + (v43 >> 4 << 6);
      if (v46 + 64 != v44)
      {
        v47 = ((v44 - v46 - 128) & 0xFFFFFFFFFFFFFFC0) + 64;
        memmove((void *)v46, (const void *)(v46 + 64), v47);
        v46 = v45 + v47 + 4 * v43;
      }
      v3[10] = v46;
    }
    v36 += 2;
  }
  v48 = *(_QWORD **)(a2 + 96);
  v49 = *(_QWORD **)(a2 + 104);
  while (v48 != v49)
  {
    v51 = (char *)v3[6];
    v50 = (char *)v3[7];
    v52 = v51;
    if (v51 != v50)
    {
      while (*(_QWORD *)v52 != *v48 || *((_QWORD *)v52 + 1) != v48[1])
      {
        v52 += 16;
        if (v52 == v50)
        {
          v52 = (char *)v3[7];
          break;
        }
      }
    }
    if (v52 != v50)
    {
      v54 = v50 - (v52 + 16);
      if (v50 != v52 + 16)
        memmove(v52, v52 + 16, v50 - (v52 + 16));
      v55 = v52 - v51;
      v3[7] = &v52[v54];
      v57 = v3[9];
      v56 = v3[10];
      v58 = v57 + (v55 >> 4 << 6);
      if (v58 + 64 != v56)
      {
        v59 = ((v56 - v58 - 128) & 0xFFFFFFFFFFFFFFC0) + 64;
        memmove((void *)v58, (const void *)(v58 + 64), v59);
        v58 = v57 + v59 + 4 * v55;
      }
      v3[10] = v58;
    }
    v48 += 2;
  }
  v60 = *(_QWORD **)(a2 + 48);
  v61 = *(_QWORD **)(a2 + 56);
  if (v60 != v61)
  {
    v62 = (char *)v3[16];
    do
    {
      v63 = v62;
      if (*v5 != v62)
      {
        v63 = *v5;
        while (*(_QWORD *)v63 != *v60 || *((_QWORD *)v63 + 1) != v60[1])
        {
          v63 += 16;
          if (v63 == v62)
          {
            v63 = v62;
            break;
          }
        }
      }
      if (v63 != v62)
      {
        v65 = v62 - (v63 + 16);
        if (v62 != v63 + 16)
          memmove(v63, v63 + 16, v62 - (v63 + 16));
        v62 = &v63[v65];
        v3[16] = &v63[v65];
      }
      v60 += 2;
    }
    while (v60 != v61);
    v66 = *(_QWORD **)(a2 + 48);
    v67 = *(_QWORD **)(a2 + 56);
    if (v66 != v67)
    {
      v68 = (char *)v3[13];
      do
      {
        v69 = v68;
        if (*v4 != v68)
        {
          v69 = *v4;
          while (*(_QWORD *)v69 != *v66 || *((_QWORD *)v69 + 1) != v66[1])
          {
            v69 += 16;
            if (v69 == v68)
            {
              v69 = v68;
              break;
            }
          }
        }
        if (v69 != v68)
        {
          v71 = v68 - (v69 + 16);
          if (v68 != v69 + 16)
            memmove(v69, v69 + 16, v68 - (v69 + 16));
          v68 = &v69[v71];
          v3[13] = &v69[v71];
        }
        v66 += 2;
      }
      while (v66 != v67);
    }
  }
  v72 = *(_QWORD **)(a2 + 96);
  v73 = *(_QWORD **)(a2 + 104);
  if (v72 != v73)
  {
    v74 = (char *)v3[16];
    do
    {
      v75 = v74;
      if (*v5 != v74)
      {
        v75 = *v5;
        while (*(_QWORD *)v75 != *v72 || *((_QWORD *)v75 + 1) != v72[1])
        {
          v75 += 16;
          if (v75 == v74)
          {
            v75 = v74;
            break;
          }
        }
      }
      if (v75 != v74)
      {
        v77 = v74 - (v75 + 16);
        if (v74 != v75 + 16)
          memmove(v75, v75 + 16, v74 - (v75 + 16));
        v74 = &v75[v77];
        v3[16] = &v75[v77];
      }
      v72 += 2;
    }
    while (v72 != v73);
  }
  v78 = atomic_load((unsigned __int8 *)&qword_2540CD000);
  if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD000))
  {
    *(_QWORD *)&xmmword_2540CD0C0 = 0;
    DWORD2(xmmword_2540CD0C0) = 0;
    __cxa_guard_release(&qword_2540CD000);
  }
  v80 = v3[6];
  v79 = v3[7];
  v146 = 0;
  v147 = 0;
  v145 = 0;
  v81 = v79 - v80;
  v82 = (char **)(v3 + 9);
  if (v79 == v80)
  {
    v84 = 0;
  }
  else
  {
    if ((v81 & 0x8000000000000000) != 0)
      sub_22367C394();
    v83 = v81 >> 1;
    v84 = (int64x2_t *)operator new(v81 >> 1);
    v145 = v84;
    v147 = &v84->i64[(uint64_t)v81 >> 4];
    bzero(v84, v81 >> 1);
    v81 = (unint64_t)v84->u64 + v83;
    v146 = &v84->i8[v83];
    if (v83 - 8 >= 0x18)
    {
      v87 = ((v83 - 8) >> 3) + 1;
      v85 = v87 & 0x3FFFFFFFFFFFFFFCLL;
      v86 = &v84->i64[v87 & 0x3FFFFFFFFFFFFFFCLL];
      v6 = (float32x4_t)xmmword_2245F5410;
      v88 = v84 + 1;
      v7 = (float32x4_t)vdupq_n_s64(2uLL);
      v8 = vdupq_n_s64(4uLL);
      v89 = v87 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v9 = vaddq_s64((int64x2_t)v6, (int64x2_t)v7);
        v88[-1] = (int64x2_t)v6;
        *v88 = v9;
        v6 = (float32x4_t)vaddq_s64((int64x2_t)v6, v8);
        v88 += 2;
        v89 -= 4;
      }
      while (v89);
      if (v87 == v85)
        goto LABEL_120;
    }
    else
    {
      v85 = 0;
      v86 = (uint64_t *)v84;
    }
    do
      *v86++ = v85++;
    while (v86 != (uint64_t *)v81);
  }
LABEL_120:
  __p = v3 + 9;
  v90 = 126 - 2 * __clz((uint64_t)(v81 - (_QWORD)v84) >> 3);
  if (v79 == v80)
    v91 = 0;
  else
    v91 = v90;
  sub_223C65CB0((uint64_t)v84, (uint64_t *)v81, (uint64_t **)&__p, v91, 1, v6, v7, *(double *)v8.i64, *(double *)v9.i64, v10, v11);
  v93 = v3[6];
  v92 = v3[7];
  v143 = 0;
  v144 = 0;
  __p = 0;
  v94 = v92 - v93;
  if (v92 == v93)
  {
    v95 = 0;
    v138 = 0;
    v139 = 0;
    v132 = v3[9];
    v131 = v3[10];
    *(_QWORD *)v140 = 0;
    v141 = 0;
    v98 = v131 - v132;
    if (v131 != v132)
      goto LABEL_126;
  }
  else
  {
    if (v94 < 0)
      sub_22316E078();
    v95 = (char *)operator new(v92 - v93);
    __p = v95;
    v143 = v95;
    v138 = &v95[16 * (v94 >> 4)];
    v139 = 0;
    v144 = v138;
    v97 = v3[9];
    v96 = v3[10];
    *(_QWORD *)v140 = 0;
    v141 = 0;
    v98 = v96 - v97;
    if (v96 != v97)
    {
LABEL_126:
      if (v98 < 0)
        sub_223257BE4();
      v99 = (char *)operator new(v98);
      v100 = &v99[64 * (v98 >> 6)];
      *(_QWORD *)v140 = v99;
      if (v79 != v80)
        goto LABEL_128;
      goto LABEL_171;
    }
  }
  v99 = 0;
  v100 = 0;
  if (v79 != v80)
  {
LABEL_128:
    v101 = v95;
    v102 = v99;
    v137 = v3;
    v134 = (uint64_t *)v81;
    while (1)
    {
      v106 = v84->i64[0];
      v107 = (char *)*v136 + 16 * v84->i64[0];
      if (v95 < v138)
      {
        *(_OWORD *)v95 = *v107;
        v95 += 16;
        v108 = &(*v82)[64 * v106];
        if (v99 < v100)
          goto LABEL_129;
        goto LABEL_148;
      }
      v109 = (v95 - v101) >> 4;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 60)
      {
        v143 = v95;
        v144 = v138;
        v141 = v100;
        __p = v101;
        v139 = v102;
        *(_QWORD *)v140 = v99;
        sub_22316E078();
      }
      if ((v138 - v101) >> 3 > v110)
        v110 = (v138 - v101) >> 3;
      v111 = v100;
      if ((unint64_t)(v138 - v101) >= 0x7FFFFFFFFFFFFFF0)
        v112 = 0xFFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        if (v112 >> 60)
          goto LABEL_183;
        v113 = (char *)operator new(16 * v112);
        v114 = &v113[16 * v109];
        *(_OWORD *)v114 = *v107;
        if (v95 == v101)
        {
LABEL_158:
          v116 = v95;
          v101 = v114;
          v82 = v135;
          v138 = &v113[16 * v112];
          v95 = v114 + 16;
          if (v116)
            goto LABEL_146;
          goto LABEL_147;
        }
      }
      else
      {
        v113 = 0;
        v114 = (char *)(16 * v109);
        *(_OWORD *)(16 * v109) = *v107;
        if (v95 == v101)
          goto LABEL_158;
      }
      v115 = v114;
      v82 = v135;
      do
      {
        *((_OWORD *)v115 - 1) = *((_OWORD *)v95 - 1);
        v115 -= 16;
        v95 -= 16;
      }
      while (v95 != v101);
      v116 = v101;
      v101 = v115;
      v138 = &v113[16 * v112];
      v95 = v114 + 16;
      if (v116)
LABEL_146:
        operator delete(v116);
LABEL_147:
      v100 = v111;
      v3 = v137;
      v108 = &(*v82)[64 * v106];
      if (v99 < v100)
      {
LABEL_129:
        v103 = *(_OWORD *)v108;
        v104 = *((_OWORD *)v108 + 1);
        v105 = *((_OWORD *)v108 + 3);
        *((_OWORD *)v99 + 2) = *((_OWORD *)v108 + 2);
        *((_OWORD *)v99 + 3) = v105;
        *(_OWORD *)v99 = v103;
        *((_OWORD *)v99 + 1) = v104;
        v99 += 64;
        goto LABEL_130;
      }
LABEL_148:
      v117 = (v99 - v102) >> 6;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 58)
      {
        v143 = v95;
        v144 = v138;
        v141 = v100;
        __p = v101;
        v139 = v102;
        *(_QWORD *)v140 = v99;
        sub_223257BE4();
      }
      if ((v100 - v102) >> 5 > v118)
        v118 = (v100 - v102) >> 5;
      if ((unint64_t)(v100 - v102) >= 0x7FFFFFFFFFFFFFC0)
        v119 = 0x3FFFFFFFFFFFFFFLL;
      else
        v119 = v118;
      if (v119)
      {
        v111 = v100;
        if (v119 >> 58)
        {
LABEL_183:
          v143 = v95;
          v144 = v138;
          v141 = v111;
          __p = v101;
          v139 = v102;
          *(_QWORD *)v140 = v99;
          sub_223174E94();
        }
        v120 = (char *)operator new(v119 << 6);
        v3 = v137;
      }
      else
      {
        v120 = 0;
      }
      v121 = &v120[64 * v117];
      v122 = *(_OWORD *)v108;
      v123 = *((_OWORD *)v108 + 1);
      v124 = *((_OWORD *)v108 + 3);
      *((_OWORD *)v121 + 2) = *((_OWORD *)v108 + 2);
      *((_OWORD *)v121 + 3) = v124;
      *(_OWORD *)v121 = v122;
      *((_OWORD *)v121 + 1) = v123;
      if (v99 != v102)
      {
        v125 = &v120[64 * v117];
        v82 = v135;
        do
        {
          v126 = *((_OWORD *)v99 - 4);
          v127 = *((_OWORD *)v99 - 3);
          v128 = *((_OWORD *)v99 - 1);
          *((_OWORD *)v125 - 2) = *((_OWORD *)v99 - 2);
          *((_OWORD *)v125 - 1) = v128;
          *((_OWORD *)v125 - 4) = v126;
          *((_OWORD *)v125 - 3) = v127;
          v125 -= 64;
          v99 -= 64;
        }
        while (v99 != v102);
        v129 = v102;
        v102 = v125;
        v100 = &v120[64 * v119];
        v99 = v121 + 64;
        if (!v129)
          goto LABEL_130;
LABEL_167:
        v130 = v100;
        operator delete(v129);
        v100 = v130;
        v3 = v137;
        goto LABEL_130;
      }
      v129 = v99;
      v102 = &v120[64 * v117];
      v82 = v135;
      v100 = &v120[64 * v119];
      v99 = v121 + 64;
      if (v129)
        goto LABEL_167;
LABEL_130:
      v84 = (int64x2_t *)((char *)v84 + 8);
      if (v84 == (int64x2_t *)v134)
      {
        v143 = v95;
        *(_QWORD *)v140 = v99;
        goto LABEL_172;
      }
    }
  }
LABEL_171:
  v102 = v99;
  v101 = v95;
LABEL_172:
  v144 = v138;
  v141 = v100;
  __p = v101;
  v139 = v102;
  if (&__p != v136)
  {
    sub_2231984D0(v136, v101, v95, (v95 - v101) >> 4);
    v102 = v139;
  }
  if (&v139 != v82)
  {
    sub_223483000(v82, v102, *(char **)v140, (uint64_t)(*(_QWORD *)v140 - (_QWORD)v102) >> 6);
    v102 = v139;
  }
  if (v102)
  {
    *(_QWORD *)v140 = v102;
    operator delete(v102);
  }
  if (__p)
  {
    v143 = __p;
    operator delete(__p);
  }
  if (v145)
    operator delete(v145);
  return v3;
}

void sub_223C29014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_223C29098(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 **a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 *v29;
  __int128 *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v8 = *(char **)a1;
  v9 = *(char **)(a1 + 8);
  v10 = (uint64_t)&v9[-*(_QWORD *)a1] >> 4;
  v11 = v10 + ((uint64_t)(a3[1] - *a3) >> 4);
  if (v11 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (v11 >> 60)
LABEL_65:
      sub_22316E078();
    v12 = 16 * v11;
    v13 = (char *)operator new(16 * v11);
    v14 = &v13[16 * v10];
    if (v9 != v8)
    {
      v15 = &v13[16 * v10];
      do
      {
        v14 = v15 - 16;
        *((_OWORD *)v15 - 1) = *((_OWORD *)v9 - 1);
        v9 -= 16;
        v15 -= 16;
      }
      while (v9 != v8);
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = &v13[16 * v10];
    *(_QWORD *)(a1 + 16) = &v13[v12];
    if (v8)
      operator delete(v8);
  }
  v16 = *(_OWORD **)a2;
  v17 = *(_OWORD **)(a2 + 8);
  v18 = ((uint64_t)v17 - *(_QWORD *)a2) >> 6;
  v19 = v18 + (((char *)a4[1] - (char *)*a4) >> 6);
  if (v19 > (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 6)
  {
    if (v19 >> 58)
LABEL_66:
      sub_223257BE4();
    v20 = v19 << 6;
    v21 = (char *)operator new(v19 << 6);
    v22 = &v21[64 * v18];
    if (v17 != v16)
    {
      v23 = &v21[64 * v18];
      do
      {
        v22 = v23 - 64;
        v24 = *(v17 - 4);
        v25 = *(v17 - 3);
        v26 = *(v17 - 1);
        *((_OWORD *)v23 - 2) = *(v17 - 2);
        *((_OWORD *)v23 - 1) = v26;
        *((_OWORD *)v23 - 4) = v24;
        *((_OWORD *)v23 - 3) = v25;
        v17 -= 4;
        v23 -= 64;
      }
      while (v17 != v16);
    }
    *(_QWORD *)a2 = v22;
    *(_QWORD *)(a2 + 8) = &v21[64 * v18];
    *(_QWORD *)(a2 + 16) = &v21[v20];
    if (v16)
      operator delete(v16);
  }
  v28 = (_QWORD *)*a3;
  v27 = (_QWORD *)a3[1];
  v29 = *a4;
  v30 = a4[1];
  while (v28 != v27 || v29 != v30)
  {
    v35 = *(char **)a1;
    v36 = *(char **)(a1 + 8);
    v37 = *(char **)a1;
    if (*(char **)a1 != v36)
    {
      v37 = *(char **)a1;
      while (*(_QWORD *)v37 != *v28 || *((_QWORD *)v37 + 1) != v28[1])
      {
        v37 += 16;
        if (v37 == v36)
        {
          v37 = *(char **)(a1 + 8);
          break;
        }
      }
    }
    if (v37 != v36)
    {
      v31 = (_OWORD *)(*(_QWORD *)a2 + ((v37 - v35) >> 4 << 6));
      v32 = *v29;
      v33 = v29[1];
      v34 = v29[3];
      v31[2] = v29[2];
      v31[3] = v34;
      *v31 = v32;
      v31[1] = v33;
      goto LABEL_18;
    }
    v39 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v36 >= v39)
    {
      v41 = (v36 - v35) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        goto LABEL_65;
      v43 = v39 - (_QWORD)v35;
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 60)
          goto LABEL_67;
        v45 = (char *)operator new(16 * v44);
        v46 = &v45[16 * v41];
        *(_OWORD *)v46 = *(_OWORD *)v28;
        v47 = (uint64_t)v46;
        if (v35 == v36)
          goto LABEL_44;
        do
        {
LABEL_42:
          *(_OWORD *)(v47 - 16) = *((_OWORD *)v36 - 1);
          v47 -= 16;
          v36 -= 16;
        }
        while (v36 != v35);
        v35 = *(char **)a1;
      }
      else
      {
        v45 = 0;
        v46 = (char *)(16 * v41);
        *(_OWORD *)(16 * v41) = *(_OWORD *)v28;
        v47 = 16 * v41;
        if (v35 != v36)
          goto LABEL_42;
      }
LABEL_44:
      v40 = v46 + 16;
      *(_QWORD *)a1 = v47;
      *(_QWORD *)(a1 + 8) = v46 + 16;
      *(_QWORD *)(a1 + 16) = &v45[16 * v44];
      if (v35)
        operator delete(v35);
      goto LABEL_46;
    }
    *(_OWORD *)v36 = *(_OWORD *)v28;
    v40 = v36 + 16;
LABEL_46:
    *(_QWORD *)(a1 + 8) = v40;
    v49 = *(_OWORD **)(a2 + 8);
    v48 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v49 >= v48)
    {
      v54 = *(_OWORD **)a2;
      v55 = ((uint64_t)v49 - *(_QWORD *)a2) >> 6;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 58)
        goto LABEL_66;
      v57 = v48 - (_QWORD)v54;
      if (v57 >> 5 > v56)
        v56 = v57 >> 5;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFC0)
        v58 = 0x3FFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        if (v58 >> 58)
LABEL_67:
          sub_223174E94();
        v59 = (char *)operator new(v58 << 6);
      }
      else
      {
        v59 = 0;
      }
      v60 = &v59[64 * v55];
      v61 = *v29;
      v62 = v29[1];
      v63 = v29[3];
      *((_OWORD *)v60 + 2) = v29[2];
      *((_OWORD *)v60 + 3) = v63;
      *(_OWORD *)v60 = v61;
      *((_OWORD *)v60 + 1) = v62;
      v64 = v60;
      if (v49 != v54)
      {
        do
        {
          v65 = *(v49 - 4);
          v66 = *(v49 - 3);
          v67 = *(v49 - 1);
          *((_OWORD *)v64 - 2) = *(v49 - 2);
          *((_OWORD *)v64 - 1) = v67;
          *((_OWORD *)v64 - 4) = v65;
          *((_OWORD *)v64 - 3) = v66;
          v64 -= 64;
          v49 -= 4;
        }
        while (v49 != v54);
        v49 = *(_OWORD **)a2;
      }
      v53 = v60 + 64;
      *(_QWORD *)a2 = v64;
      *(_QWORD *)(a2 + 8) = v60 + 64;
      *(_QWORD *)(a2 + 16) = &v59[64 * v58];
      if (v49)
        operator delete(v49);
    }
    else
    {
      v50 = *v29;
      v51 = v29[1];
      v52 = v29[3];
      v49[2] = v29[2];
      v49[3] = v52;
      *v49 = v50;
      v49[1] = v51;
      v53 = v49 + 4;
    }
    *(_QWORD *)(a2 + 8) = v53;
LABEL_18:
    v28 += 2;
    v29 += 4;
  }
}

void sub_223C2944C(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = *(_OWORD **)a1;
  v5 = *(_OWORD **)(a1 + 8);
  v6 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
  v7 = v6 + ((uint64_t)(a2[1] - *a2) >> 4);
  if (v7 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (v7 >> 60)
LABEL_39:
      sub_22316E078();
    v8 = 16 * v7;
    v9 = (char *)operator new(16 * v7);
    v10 = &v9[16 * v6];
    if (v5 != v4)
    {
      v11 = &v9[16 * v6];
      do
      {
        v10 = v11 - 16;
        *((_OWORD *)v11 - 1) = *--v5;
        v11 -= 16;
      }
      while (v5 != v4);
    }
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = &v9[16 * v6];
    *(_QWORD *)(a1 + 16) = &v9[v8];
    if (v4)
      operator delete(v4);
  }
  v12 = (_QWORD *)*a2;
  v13 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v13)
  {
    v14 = *(_OWORD **)(a1 + 8);
    while (1)
    {
      while (1)
      {
        v15 = *(_OWORD **)a1;
        v16 = v14;
        if (*(_OWORD **)a1 != v14)
        {
          v16 = *(_QWORD **)a1;
          while (*v16 != *v12 || v16[1] != v12[1])
          {
            v16 += 2;
            if (v16 == (_QWORD *)v14)
            {
              v16 = v14;
              break;
            }
          }
        }
        if (v16 == (_QWORD *)v14)
          break;
        v12 += 2;
        if (v12 == v13)
          return;
      }
      v18 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v14 >= v18)
        break;
      *v14 = *(_OWORD *)v12;
      v19 = v14 + 1;
LABEL_37:
      *(_QWORD *)(a1 + 8) = v19;
      v14 = v19;
      v12 += 2;
      if (v12 == v13)
        return;
    }
    v20 = v14 - v15;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      goto LABEL_39;
    v22 = v18 - (_QWORD)v15;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 60)
        sub_223174E94();
      v24 = (char *)operator new(16 * v23);
      v25 = &v24[16 * v20];
      *(_OWORD *)v25 = *(_OWORD *)v12;
      v26 = (uint64_t)v25;
      if (v15 == v14)
        goto LABEL_35;
    }
    else
    {
      v24 = 0;
      v25 = (char *)(16 * v20);
      *(_OWORD *)(16 * v20) = *(_OWORD *)v12;
      v26 = 16 * v20;
      if (v15 == v14)
      {
LABEL_35:
        v19 = v25 + 16;
        *(_QWORD *)a1 = v26;
        *(_QWORD *)(a1 + 8) = v25 + 16;
        *(_QWORD *)(a1 + 16) = &v24[16 * v23];
        if (v14)
          operator delete(v14);
        goto LABEL_37;
      }
    }
    do
    {
      *(_OWORD *)(v26 - 16) = *(v14 - 1);
      v26 -= 16;
      --v14;
    }
    while (v14 != v15);
    v14 = *(_OWORD **)a1;
    goto LABEL_35;
  }
}

void sub_223C29670(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  CFMutableDictionaryRef v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  void *v66[2];
  char v67;
  void *v68;
  std::__shared_weak_count *v69;
  char v70;
  void *value[2];
  char v72;
  _BYTE __p[24];
  int v74;
  char v75;
  char *v76;

  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  sub_2245314F4(__p, value);
  *(_OWORD *)a3 = *(_OWORD *)value;
  sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
  __p[23] = 15;
  strcpy(__p, "vio_initialized");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)value);
  sub_223C69820(a3, value[0], (_BYTE *)a1);
  v6 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v7 = (unint64_t *)((char *)value[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_6:
    operator delete(*(void **)__p);
LABEL_7:
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B8D00;
  strcpy(*(char **)__p, "tracking_state_is_nominal");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)value);
  sub_223C69820(a3, value[0], (_BYTE *)(a1 + 1));
  v9 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v10 = (unint64_t *)((char *)value[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_12:
    operator delete(*(void **)__p);
LABEL_13:
  __p[23] = 8;
  strcpy(__p, "map_size");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)value);
  sub_223C69984(a3, value[0], (int *)(a1 + 4));
  v12 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v13 = (unint64_t *)((char *)value[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_18:
    operator delete(*(void **)__p);
LABEL_19:
  __p[23] = 9;
  strcpy(__p, "timestamp");
  *(double *)v66 = (double)*(uint64_t *)(a1 + 8) / 1000000000.0;
  sub_223C2A5F0((uint64_t *)v66);
  sub_224527BAC((uint64_t)__p, (CFStringRef *)&v68);
  sub_2236634D4(a3, v68, (uint64_t)value);
  v15 = v69;
  if (!v69)
    goto LABEL_23;
  p_shared_owners = (unint64_t *)&v69->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
LABEL_23:
    if ((v72 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_39:
    operator delete(value[0]);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_25;
LABEL_40:
    operator delete(*(void **)__p);
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (v72 < 0)
    goto LABEL_39;
LABEL_24:
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_40;
LABEL_25:
  __p[23] = 21;
  strcpy(__p, "reinitialize_attempts");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)value);
  sub_223C69984(a3, value[0], (int *)(a1 + 16));
  v18 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_29;
  v19 = (unint64_t *)((char *)value[1] + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_30:
      if (!a2)
        goto LABEL_117;
      goto LABEL_43;
    }
  }
  else
  {
LABEL_29:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(*(void **)__p);
  if (!a2)
    goto LABEL_117;
LABEL_43:
  v67 = 7;
  strcpy((char *)v66, "anchors");
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  sub_2245314F4(__p, value);
  v65 = *(_OWORD *)value;
  sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
  v72 = 9;
  strcpy((char *)value, "new_uuids");
  v74 = 0;
  sub_2231AEF2C((uint64_t)&v76, (uint64_t)__p, (unsigned __int8 **)(a1 + 24));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v21 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_50;
  v22 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_50:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_51;
LABEL_147:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_148;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (v70 < 0)
    goto LABEL_147;
LABEL_51:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_52;
LABEL_148:
  operator delete(value[0]);
LABEL_52:
  v72 = 9;
  strcpy((char *)value, "new_poses");
  v74 = 0;
  sub_223C69464((uint64_t)__p, (__int128 **)(a1 + 48));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v24 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_59;
  v25 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_59:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_60;
LABEL_150:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_151;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (v70 < 0)
    goto LABEL_150;
LABEL_60:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_61;
LABEL_151:
  operator delete(value[0]);
LABEL_61:
  v72 = 13;
  strcpy((char *)value, "updated_uuids");
  v74 = 0;
  sub_2231AEF2C((uint64_t)&v76, (uint64_t)__p, (unsigned __int8 **)(a1 + 72));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v27 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_68;
  v28 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_68:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_69;
LABEL_153:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_154;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (v70 < 0)
    goto LABEL_153;
LABEL_69:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_70;
LABEL_154:
  operator delete(value[0]);
LABEL_70:
  v72 = 13;
  strcpy((char *)value, "updated_poses");
  v74 = 0;
  sub_223C69464((uint64_t)__p, (__int128 **)(a1 + 96));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v30 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_77;
  v31 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_77:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_156:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (v70 < 0)
    goto LABEL_156;
LABEL_78:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_79;
LABEL_157:
  operator delete(value[0]);
LABEL_79:
  v72 = 13;
  strcpy((char *)value, "removed_uuids");
  v74 = 0;
  sub_2231AEF2C((uint64_t)&v76, (uint64_t)__p, (unsigned __int8 **)(a1 + 120));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v33 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_86;
  v34 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_86:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_87;
LABEL_159:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_88;
    goto LABEL_160;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v70 < 0)
    goto LABEL_159;
LABEL_87:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_88;
LABEL_160:
  operator delete(value[0]);
LABEL_88:
  v72 = 14;
  strcpy((char *)value, "external_uuids");
  v74 = 0;
  sub_2231AEF2C((uint64_t)&v76, (uint64_t)__p, (unsigned __int8 **)(a1 + 144));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v36 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_95;
  v37 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
  {
LABEL_95:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_96;
LABEL_162:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_163;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (v70 < 0)
    goto LABEL_162;
LABEL_96:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_97;
LABEL_163:
  operator delete(value[0]);
LABEL_97:
  v72 = 10;
  strcpy((char *)value, "near_uuids");
  v74 = 0;
  sub_2231AEF2C((uint64_t)&v76, (uint64_t)__p, (unsigned __int8 **)(a1 + 168));
  if (v74 == -1)
    sub_22316DD70();
  v76 = &v75;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[v74])(&v68, &v76, __p);
  if (v74 != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[v74])(&v76, __p);
  sub_224527BAC((uint64_t)value, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v65, *(const void **)__p, (uint64_t)&v68);
  v39 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_104;
  v40 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_104:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_105;
LABEL_165:
    operator delete(v68);
    if ((v72 & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_166;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v70 < 0)
    goto LABEL_165;
LABEL_105:
  if ((v72 & 0x80000000) == 0)
    goto LABEL_106;
LABEL_166:
  operator delete(value[0]);
LABEL_106:
  sub_224527BAC((uint64_t)v66, (CFStringRef *)__p);
  sub_223C69AE8(a3, *(void **)__p, (void **)&v65);
  v42 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if ((v67 & 0x80000000) == 0)
        goto LABEL_117;
      goto LABEL_116;
    }
  }
  if (v67 < 0)
LABEL_116:
    operator delete(v66[0]);
LABEL_117:
  __p[23] = 9;
  strcpy(__p, "slam_mode");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)&v68);
  v48 = v68;
  v50 = *(CFMutableDictionaryRef *)a3;
  v49 = *(std::__shared_weak_count **)(a3 + 8);
  if (!v49)
    goto LABEL_122;
  v51 = (unint64_t *)&v49->__shared_owners_;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  do
    v53 = __ldaxr(v51);
  while (__stlxr(v53 - 1, v51));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    if (!v50)
      goto LABEL_136;
  }
  else
  {
LABEL_122:
    if (!v50)
      goto LABEL_136;
  }
  LOBYTE(v66[0]) = *(_BYTE *)(a1 + 192);
  sub_22452736C((unsigned __int8 *)v66, (CFNumberRef *)value);
  v55 = value[0];
  v54 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v56 = (unint64_t *)((char *)value[1] + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    do
      v58 = __ldaxr(v56);
    while (__stlxr(v58 - 1, v56));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if (!v55)
        goto LABEL_130;
      goto LABEL_129;
    }
  }
  if (v55)
LABEL_129:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, v48, value[0]);
LABEL_130:
  v59 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v60 = (unint64_t *)((char *)value[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_136:
  v62 = v69;
  if (!v69)
    goto LABEL_140;
  v63 = (unint64_t *)&v69->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_140:
    if ((__p[23] & 0x80000000) == 0)
      return;
LABEL_143:
    operator delete(*(void **)__p);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_143;
}

void sub_223C2A41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  sub_223167354((uint64_t)&a23);
  sub_223167354((uint64_t)&a17);
  if (a35 < 0)
    operator delete(__p);
  sub_223167354(v35);
  _Unwind_Resume(a1);
}

void sub_223C2A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,char *a22)
{
  sub_22323DF84((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

uint64_t sub_223C2A5F0(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string __p;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  sub_223701C90(a1, &__p);
  v5[0] = v2;
  v5[1] = &__p;
  v5[2] = v2;
  v5[3] = &__p;
  v5[4] = &__p;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &__p;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F98[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F50[v3])(v5, v2);
  return result;
}

void sub_223C2A6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C2A6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223C2A714@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;

  kdebug_trace();
  *(_WORD *)a2 = 256;
  *(_BYTE *)(a2 + 2) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 177) = 0u;
  v5 = *a1;
  v4 = a1[1];
  if (v5 != v4)
  {
    *(_WORD *)a2 = 257;
    *(_BYTE *)(a2 + 2) = 0;
    *(_BYTE *)(a2 + 192) = 0;
    do
    {
      sub_223C285F0(a2 + 24, v5 + 24);
      v6 = *(_QWORD *)(a2 + 8);
      if (v6 <= *(_QWORD *)(v5 + 8))
        v6 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(a2 + 8) = v6;
      *(_BYTE *)a2 &= *(_BYTE *)v5;
      *(_BYTE *)(a2 + 1) &= *(_BYTE *)(v5 + 1);
      *(_BYTE *)(a2 + 2) &= *(_BYTE *)(v5 + 2);
      v7 = *(_DWORD *)(a2 + 4);
      if (v7 <= *(_DWORD *)(v5 + 4))
        v7 = *(_DWORD *)(v5 + 4);
      *(_DWORD *)(a2 + 4) = v7;
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 <= *(_DWORD *)(v5 + 16))
        v8 = *(_DWORD *)(v5 + 16);
      *(_DWORD *)(a2 + 16) = v8;
      v9 = *(unsigned __int8 *)(a2 + 192);
      if (v9 <= *(unsigned __int8 *)(v5 + 192))
        LOBYTE(v9) = *(_BYTE *)(v5 + 192);
      *(_BYTE *)(a2 + 192) = v9;
      v5 += 200;
    }
    while (v5 != v4);
  }
  return kdebug_trace();
}

void sub_223C2A8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223255CAC(v1);
  _Unwind_Resume(a1);
}

void sub_223C2A8DC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __CVBuffer *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  _BYTE *v72;
  uint64_t v73;
  __int16 v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  uint64_t *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char **v147;
  char *v148;
  char *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unsigned __int8 v154;
  const void *v155;
  size_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  void **v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  char *v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  char *v177;
  unsigned __int8 v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl **v180;
  NSObject *v181;
  const char *v182;
  unsigned __int8 v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count_vtbl **v185;
  NSObject *v186;
  const char *v187;
  unsigned __int8 v188;
  const void *v189;
  size_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  size_t v195;
  const char *v196;
  unsigned __int8 v197;
  const char *v198;
  size_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  unint64_t v208;
  size_t v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  CVPixelBufferPoolRef *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  char *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  int v243;
  int v244;
  void *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  char *v249;
  unint64_t v250;
  char *v251;
  char *v252;
  float v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  float v257;
  char *v258;
  uint64_t v259;
  float v260;
  char *v261;
  unsigned int v262;
  float v263;
  float v264;
  float v265;
  uint64_t *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  const char *__src;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t (**v301)();
  __int128 v302;
  _QWORD v303[2];
  std::__shared_weak_count *v304;
  void **v305;
  void *v306;
  __int128 v307;
  char v308;
  void *v309[2];
  char v310;
  char v311;
  void *v312;
  char v313;
  void *v314;
  char v315;
  char v316;
  char v317;
  uint64_t (**v318)();
  __int128 v319;
  uint64_t (**v320)();
  __int128 v321;
  _QWORD v322[2];
  std::__shared_weak_count *v323;
  uint64_t (**v324)();
  uint64_t *v325;
  std::__shared_weak_count *v326;
  _QWORD v327[2];
  std::__shared_weak_count *v328;
  _QWORD v329[2];
  std::__shared_weak_count *v330;
  void *__p[3];
  _OWORD v332[2];
  uint64_t (**v333)();
  __int128 v334;
  char *category;
  uint64_t v336;
  CVPixelBufferPoolRef *v337;
  std::__shared_weak_count *v338;
  uint64_t *v339;
  __int128 v340;
  _BYTE v341[32];
  uint64_t v342;
  std::__shared_weak_count *v343;
  uint64_t v344;
  _BYTE v345[40];
  void **v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  char v352;
  char v353;
  uint64_t v354;

  v354 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v333 = &off_24EC715B8;
  *(_QWORD *)&v334 = v8;
  *((_QWORD *)&v334 + 1) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (sub_2242A78F0((uint64_t)&v333) == 1380410945)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    v327[0] = &off_24EC715B8;
    v327[1] = v12;
    v328 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    sub_223C2CD40(v329, (uint64_t)v327, a3);
    sub_22429724C((uint64_t)v329, (uint64_t)&v339);
    __p[0] = &off_24EC28CD0;
    *(_OWORD *)&__p[1] = v340;
    v332[0] = *(_OWORD *)v341;
    *(_OWORD *)((char *)v332 + 14) = *(_OWORD *)&v341[14];
    *(_QWORD *)v345 = &off_24EC28D40;
    sub_2232BF504((uint64_t)__p, (uint64_t)&v345[8]);
    sub_2232BAAA0(a1, (uint64_t)v345);
    *(_QWORD *)v345 = &off_24EC28D40;
    v15 = *(std::__shared_weak_count **)&v345[16];
    if (*(_QWORD *)&v345[16])
    {
      v16 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    __p[0] = &off_24EC28CD0;
    v18 = (std::__shared_weak_count *)__p[2];
    if (__p[2])
    {
      v19 = (unint64_t *)((char *)__p[2] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v329[0] = &off_24EC715B8;
    v21 = v330;
    if (v330)
    {
      v22 = (unint64_t *)&v330->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v327[0] = &off_24EC715B8;
    v24 = v328;
    if (v328)
    {
      v25 = (unint64_t *)&v328->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_BYTE *)(a4 + 120) = 1;
    goto LABEL_29;
  }
  v30 = *(_QWORD *)(a2 + 8);
  if (v30)
  {
    v31 = *(__CVBuffer **)v30;
    v32 = *(std::__shared_weak_count **)(v30 + 8);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      do
        v35 = __ldaxr(v33);
      while (__stlxr(v35 - 1, v33));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    v31 = 0;
  }
  if ((CVPixelBufferGetPixelFormatType(v31) & 0xEFFFFFFF) == 0x66333038)
  {
    v36 = *(uint64_t **)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    v325 = v36;
    v326 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v324 = &off_24EC71528;
    if (v36)
    {
      v41 = *v36;
      v40 = (std::__shared_weak_count *)v36[1];
      if (v40)
      {
        v42 = (unint64_t *)&v40->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v41)
        sub_2242AE7CC((uint64_t)v325);
    }
    v45 = atomic_load((unsigned __int8 *)&qword_2540CD020);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD020))
    {
      qword_2540CD160 = 0;
      unk_2540CD168 = 0;
      qword_2540CD158 = (uint64_t)&qword_2540CD160;
      __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD158, &dword_22314D000);
      __cxa_guard_release(&qword_2540CD020);
    }
    v46 = sub_2242A9824((uint64_t)&v324);
    sub_223C8536C((uint64_t **)&qword_2540CD158, v46, 0x34343466u, 1u, (std::__shared_weak_count_vtbl ***)&v337);
    sub_2242A7370(v337, (uint64_t)v345);
    if (!v345[32]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 309, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v306 = &off_24EC715B8;
    v307 = *(_OWORD *)&v345[8];
    if (*(_QWORD *)&v345[16])
    {
      v47 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    sub_2242AA1D0((uint64_t)&v306, &v339);
    if (!(_QWORD)v340)
      goto LABEL_491;
    v50 = *(_QWORD *)v340;
    v49 = *(std::__shared_weak_count **)(v340 + 8);
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (!v50)
    {
LABEL_491:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 313, (uint64_t)"buffer_iosurface", 16, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    HIBYTE(__p[2]) = 10;
    strcpy((char *)__p, "ToBiPlanar");
    sub_2244E116C((uint64_t)&v339, (uint64_t *)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v54 = (uint64_t *)v307;
    *(_OWORD *)&__p[1] = v307;
    if (*((_QWORD *)&v307 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    __p[0] = &off_24EC71548;
    if (v54)
    {
      v58 = *v54;
      v57 = (std::__shared_weak_count *)v54[1];
      if (v57)
      {
        v59 = (unint64_t *)&v57->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        do
          v61 = __ldaxr(v59);
        while (__stlxr(v61 - 1, v59));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (v58)
        sub_2242AE8BC((uint64_t)__p[1]);
    }
    v62 = sub_2242A9DCC((uint64_t)&v324);
    v63 = sub_2242A9F04((uint64_t)__p, 0);
    v64 = sub_2242A9F04((uint64_t)__p, 1uLL);
    v65 = sub_2242A8318((uint64_t)&v324, 0);
    v66 = sub_2242A8318((uint64_t)__p, 0);
    v67 = sub_2242A8318((uint64_t)__p, 1u);
    v68 = sub_2242A9C94((uint64_t)&v324);
    if (v68 && v62)
    {
      v69 = 0;
      v70 = v67 + 1;
      do
      {
        v71 = 0;
        v72 = (_BYTE *)v66;
        v73 = v70;
        do
        {
          v74 = *(_WORD *)(v65 + v71 + 1);
          *v72++ = *(_BYTE *)(v65 + v71);
          *(_WORD *)(v73 - 1) = v74;
          v71 += 3;
          v73 += 2;
        }
        while (v71 < v62);
        v65 += v62;
        v66 += v63;
        ++v69;
        v70 += v64;
      }
      while (v69 != v68);
    }
    if (__p[1])
    {
      v76 = *(_QWORD *)__p[1];
      v75 = (std::__shared_weak_count *)*((_QWORD *)__p[1] + 1);
      if (v75)
      {
        v77 = (unint64_t *)&v75->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
        do
          v79 = __ldaxr(v77);
        while (__stlxr(v79 - 1, v77));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      if (v76)
        sub_2242AEA98((uint64_t)__p[1]);
    }
    __p[0] = &off_24EC715B8;
    v80 = (std::__shared_weak_count *)__p[2];
    if (!__p[2])
      goto LABEL_105;
    v81 = (unint64_t *)((char *)__p[2] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      v339 = (uint64_t *)&off_24EC76F28;
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
      if (!*((_QWORD *)&v340 + 1))
        goto LABEL_109;
    }
    else
    {
LABEL_105:
      v339 = (uint64_t *)&off_24EC76F28;
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
      if (!*((_QWORD *)&v340 + 1))
        goto LABEL_109;
    }
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
      if (v345[32])
        goto LABEL_110;
      goto LABEL_114;
    }
LABEL_109:
    if (v345[32])
    {
LABEL_110:
      (**(void (***)(_BYTE *))v345)(v345);
      goto LABEL_116;
    }
LABEL_114:
    if ((v345[31] & 0x80000000) != 0)
      operator delete(*(void **)&v345[8]);
LABEL_116:
    v86 = v338;
    if (v338)
    {
      v87 = (unint64_t *)&v338->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v89 = v307;
    v307 = 0uLL;
    v90 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v334 = v89;
    if (!v90)
      goto LABEL_125;
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
      v306 = &off_24EC715B8;
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
      if (!*((_QWORD *)&v307 + 1))
        goto LABEL_129;
    }
    else
    {
LABEL_125:
      v306 = &off_24EC715B8;
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
      if (!*((_QWORD *)&v307 + 1))
        goto LABEL_129;
    }
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
      v96 = v325;
      if (v325)
      {
LABEL_130:
        v98 = *v96;
        v97 = (std::__shared_weak_count *)v96[1];
        if (v97)
        {
          v99 = (unint64_t *)&v97->__shared_owners_;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
          do
            v101 = __ldaxr(v99);
          while (__stlxr(v101 - 1, v99));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        if (v98)
          sub_2242AE9A8((uint64_t)v325);
      }
LABEL_138:
      v324 = &off_24EC715B8;
      v102 = v326;
      if (v326)
      {
        v103 = (unint64_t *)&v326->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      goto LABEL_143;
    }
LABEL_129:
    v96 = v325;
    if (v325)
      goto LABEL_130;
    goto LABEL_138;
  }
LABEL_143:
  v105 = sub_2242A78F0((uint64_t)&v333);
  if (v105 == 875836518)
  {
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v320 = &off_24EC715B8;
    v321 = v334;
    if (*((_QWORD *)&v334 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    sub_223C239BC((uint64_t)&v320, a3, 1, v345);
    v123 = *(_OWORD *)&v345[8];
    *(_QWORD *)&v345[8] = 0;
    *(_QWORD *)&v345[16] = 0;
    v334 = v123;
    if (v120)
    {
      v124 = (unint64_t *)&v120->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    *(_QWORD *)v345 = &off_24EC715B8;
    v126 = *(std::__shared_weak_count **)&v345[16];
    if (*(_QWORD *)&v345[16])
    {
      v127 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v320 = &off_24EC715B8;
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
    if (!*((_QWORD *)&v321 + 1))
      goto LABEL_196;
    v129 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v119 = __ldaxr(v129);
    while (__stlxr(v119 - 1, v129));
  }
  else
  {
    if (v105 == 1111970369)
    {
      v107 = *(_QWORD *)(a2 + 8);
      v106 = *(std::__shared_weak_count **)(a2 + 16);
      v322[0] = &off_24EC715B8;
      v322[1] = v107;
      v323 = v106;
      if (v106)
      {
        v108 = (unint64_t *)&v106->__shared_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      sub_223C2CD40(v345, (uint64_t)v322, a3);
      v110 = *(_OWORD *)&v345[8];
      *(_QWORD *)&v345[8] = 0;
      *(_QWORD *)&v345[16] = 0;
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
      v334 = v110;
      if (v111)
      {
        v112 = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      *(_QWORD *)v345 = &off_24EC715B8;
      v114 = *(std::__shared_weak_count **)&v345[16];
      if (*(_QWORD *)&v345[16])
      {
        v115 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v322[0] = &off_24EC715B8;
      v117 = v323;
      if (v323)
      {
        v118 = (unint64_t *)&v323->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        goto LABEL_195;
      }
LABEL_196:
      v140 = (uint64_t *)v334;
      if (!(_QWORD)v334)
        goto LABEL_215;
      goto LABEL_197;
    }
    v130 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v318 = &off_24EC715B8;
    v319 = v334;
    if (*((_QWORD *)&v334 + 1))
    {
      v131 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
    }
    sub_223C27024((uint64_t)&v318, a3, v345);
    v133 = *(_OWORD *)&v345[8];
    *(_QWORD *)&v345[8] = 0;
    *(_QWORD *)&v345[16] = 0;
    v334 = v133;
    if (v130)
    {
      v134 = (unint64_t *)&v130->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    *(_QWORD *)v345 = &off_24EC715B8;
    v136 = *(std::__shared_weak_count **)&v345[16];
    if (*(_QWORD *)&v345[16])
    {
      v137 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v318 = &off_24EC715B8;
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v319 + 1);
    if (!*((_QWORD *)&v319 + 1))
      goto LABEL_196;
    v139 = (unint64_t *)(*((_QWORD *)&v319 + 1) + 8);
    do
      v119 = __ldaxr(v139);
    while (__stlxr(v119 - 1, v139));
  }
LABEL_195:
  if (v119)
    goto LABEL_196;
  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
  std::__shared_weak_count::__release_weak(v117);
  v140 = (uint64_t *)v334;
  if (!(_QWORD)v334)
    goto LABEL_215;
LABEL_197:
  v142 = *v140;
  v141 = (std::__shared_weak_count *)v140[1];
  if (!v141)
    goto LABEL_202;
  v143 = (unint64_t *)&v141->__shared_owners_;
  do
    v144 = __ldxr(v143);
  while (__stxr(v144 + 1, v143));
  do
    v145 = __ldaxr(v143);
  while (__stlxr(v145 - 1, v143));
  if (v145)
  {
LABEL_202:
    if (v142)
      goto LABEL_203;
LABEL_215:
    sub_223208674(v309, "Error converting color image");
    v317 = 1;
    sub_2231A958C(0x16u, (__int128 *)v309, (uint64_t)v345);
    *(_OWORD *)a4 = *(_OWORD *)v345;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v353)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v157 = v346;
      if ((_BYTE)v346)
      {
        *(_OWORD *)(a4 + 16) = *(_OWORD *)&v345[16];
        *(_QWORD *)(a4 + 32) = *(_QWORD *)&v345[32];
        memset(&v345[16], 0, 24);
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v352)
      {
        v158 = v349;
        *(_QWORD *)(a4 + 64) = v348;
        *(_OWORD *)(a4 + 48) = v347;
        v347 = 0uLL;
        *(_QWORD *)(a4 + 72) = v158;
        *(_OWORD *)(a4 + 80) = v350;
        *(_QWORD *)(a4 + 96) = v351;
        v348 = 0;
        v350 = 0uLL;
        v351 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v157 && (v345[39] & 0x80000000) != 0)
        operator delete(*(void **)&v345[16]);
      if (!v317)
        goto LABEL_29;
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
      if (!v317)
        goto LABEL_29;
    }
    if (v316)
    {
      if (v315 < 0)
        operator delete(v314);
      if (v313 < 0)
        operator delete(v312);
    }
    if (v311 && v310 < 0)
      operator delete(v309[0]);
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
  std::__shared_weak_count::__release_weak(v141);
  if (!v142)
    goto LABEL_215;
LABEL_203:
  LOBYTE(v306) = 0;
  v308 = 0;
  if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 140) || (*(_DWORD *)(a1 + 136) - 1) > 1)
    goto LABEL_417;
  v146 = 0;
  v147 = (char **)(a1 + 104);
  v148 = *(char **)(a1 + 104);
  v149 = *(char **)(a1 + 112);
  v150 = v149 - v148;
  v151 = (v149 - v148) >> 1;
  v152 = v151 - 1;
  while (v152 != v146)
  {
    v153 = &v148[2 * v146++];
    if (*(unsigned __int16 *)v153 > *((unsigned __int16 *)v153 + 1))
    {
      v154 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223C26E3C(v345);
      if (*(char *)(*(_QWORD *)v345 + 39) < 0)
      {
        v155 = *(const void **)(*(_QWORD *)v345 + 16);
        v156 = *(_QWORD *)(*(_QWORD *)v345 + 24);
      }
      else
      {
        v155 = (const void *)(*(_QWORD *)v345 + 16);
        v156 = *(unsigned __int8 *)(*(_QWORD *)v345 + 39);
      }
      sub_223195728((uint64_t)&unk_255789280, v155, v156, "ICTM global LUT is not monotonically increasing: %s", 0x33uLL);
      sub_223C26F30(&v344);
      if (**(int **)(v344 + 56) <= 5)
      {
        v170 = *(unsigned __int8 *)(v344 + 72);
        v171 = sub_22322F254(v344, "OSLogSurrogateAppender", 1, 0);
        v172 = v171 ? v171 + 16 : 0;
        if (v170 || v171)
        {
          v339 = &v344;
          *(std::chrono::steady_clock::time_point *)&v340 = std::chrono::steady_clock::now();
          *((std::chrono::system_clock::time_point *)&v340 + 1) = std::chrono::system_clock::now();
          *(_DWORD *)v341 = 5;
          *(_QWORD *)&v341[8] = "unknown file";
          *(_DWORD *)&v341[16] = 754;
          v343 = 0;
          *(_QWORD *)&v341[24] = "unknown function";
          v342 = 0;
          sub_223C2D98C((uint64_t)__p, v147);
          if (SHIBYTE(__p[2]) >= 0)
            v173 = __p;
          else
            v173 = (void **)__p[0];
          v305 = v173;
          v174 = *v339;
          v175 = (uint64_t *)(*v339 + 16);
          if (*(char *)(*v339 + 39) < 0)
          {
            v177 = *(char **)(v174 + 16);
            v176 = *(_QWORD *)(v174 + 24);
          }
          else
          {
            v176 = *(unsigned __int8 *)(*v339 + 39);
            v177 = (char *)(*v339 + 16);
          }
          category = v177;
          v336 = v176;
          v178 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v345);
            sub_223199C58("com.apple.cv3d", (unint64_t)v345, &xmmword_255788F40);
            if (v345[24] && (v345[23] & 0x80000000) != 0)
              operator delete(*(void **)v345);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          v179 = (std::__shared_weak_count *)byte_255788F57;
          if (byte_255788F57 >= 0)
          {
            v180 = (std::__shared_weak_count_vtbl **)&xmmword_255788F40;
          }
          else
          {
            v179 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_255788F40 + 1);
            v180 = (std::__shared_weak_count_vtbl **)xmmword_255788F40;
          }
          v337 = (CVPixelBufferPoolRef *)v180;
          v338 = v179;
          *(_QWORD *)v345 = os_log_create((const char *)v180, category);
          sub_223199D38(&v345[8], (uint64_t)&v337);
          sub_223199D38(&v346, (uint64_t)&category);
          v181 = *(NSObject **)v345;
          sub_223199BDC((uint64_t)v345);
          sub_223C6AB84(v172, v175, v181, OS_LOG_TYPE_ERROR, (const char **)&v305);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if (v170)
          {
            sub_223C2D98C((uint64_t)v345, v147);
            if (v345[23] >= 0)
              v182 = v345;
            else
              v182 = *(const char **)v345;
            sub_22322C138((uint64_t)&v339, "ICTM global LUT is not monotonically increasing: %s", v182);
            if ((v345[23] & 0x80000000) != 0)
              operator delete(*(void **)v345);
            sub_223182C08((uint64_t)&v339);
          }
          sub_223182DAC((uint64_t)&v339);
        }
      }
      goto LABEL_417;
    }
  }
  v159 = 0;
  while (v152 != v159)
  {
    v160 = &v148[2 * v159++];
    if (*(unsigned __int16 *)v160 >= *((unsigned __int16 *)v160 + 1))
    {
      sub_223C26F30(&v344);
      if (**(int **)(v344 + 56) <= 4)
      {
        v161 = *(unsigned __int8 *)(v344 + 72);
        v162 = sub_22322F254(v344, "OSLogSurrogateAppender", 1, 0);
        v163 = v162 ? v162 + 16 : 0;
        if (v161 || v162 != 0)
        {
          v339 = &v344;
          *(std::chrono::steady_clock::time_point *)&v340 = std::chrono::steady_clock::now();
          *((std::chrono::system_clock::time_point *)&v340 + 1) = std::chrono::system_clock::now();
          *(_DWORD *)v341 = 4;
          *(_QWORD *)&v341[8] = "unknown file";
          *(_DWORD *)&v341[16] = 749;
          v343 = 0;
          *(_QWORD *)&v341[24] = "unknown function";
          v342 = 0;
          sub_223C2D98C((uint64_t)__p, v147);
          if (SHIBYTE(__p[2]) >= 0)
            v165 = __p;
          else
            v165 = (void **)__p[0];
          v305 = v165;
          v166 = *v339;
          v167 = (uint64_t *)(*v339 + 16);
          if (*(char *)(*v339 + 39) < 0)
          {
            v169 = *(char **)(v166 + 16);
            v168 = *(_QWORD *)(v166 + 24);
          }
          else
          {
            v168 = *(unsigned __int8 *)(*v339 + 39);
            v169 = (char *)(*v339 + 16);
          }
          category = v169;
          v336 = v168;
          v183 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v183 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)v345);
            sub_223199C58("com.apple.cv3d", (unint64_t)v345, &xmmword_255788F40);
            if (v345[24] && (v345[23] & 0x80000000) != 0)
              operator delete(*(void **)v345);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          v184 = (std::__shared_weak_count *)byte_255788F57;
          if (byte_255788F57 >= 0)
          {
            v185 = (std::__shared_weak_count_vtbl **)&xmmword_255788F40;
          }
          else
          {
            v184 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_255788F40 + 1);
            v185 = (std::__shared_weak_count_vtbl **)xmmword_255788F40;
          }
          v337 = (CVPixelBufferPoolRef *)v185;
          v338 = v184;
          *(_QWORD *)v345 = os_log_create((const char *)v185, category);
          sub_223199D38(&v345[8], (uint64_t)&v337);
          sub_223199D38(&v346, (uint64_t)&category);
          v186 = *(NSObject **)v345;
          sub_223199BDC((uint64_t)v345);
          sub_223C6A580(v163, v167, v186, OS_LOG_TYPE_ERROR, (const char **)&v305);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          if (v161)
          {
            sub_223C2D98C((uint64_t)v345, v147);
            if (v345[23] >= 0)
              v187 = v345;
            else
              v187 = *(const char **)v345;
            sub_22322C138((uint64_t)&v339, "ICTM global LUT is not strictly monotonically increasing: %s", v187);
            if ((v345[23] & 0x80000000) != 0)
              operator delete(*(void **)v345);
            sub_223182C08((uint64_t)&v339);
          }
          sub_223182DAC((uint64_t)&v339);
        }
      }
      v148 = *(char **)(a1 + 104);
      v149 = *(char **)(a1 + 112);
      v150 = v149 - v148;
      v151 = (v149 - v148) >> 1;
      break;
    }
  }
  if (v150 >= 4 && !*(_WORD *)v148 && *(__int16 *)&v148[2 * v151 - 2] == -1)
    goto LABEL_394;
  v188 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223C26E3C(v345);
  if (*(char *)(*(_QWORD *)v345 + 39) < 0)
  {
    v189 = *(const void **)(*(_QWORD *)v345 + 16);
    v190 = *(_QWORD *)(*(_QWORD *)v345 + 24);
  }
  else
  {
    v189 = (const void *)(*(_QWORD *)v345 + 16);
    v190 = *(unsigned __int8 *)(*(_QWORD *)v345 + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v189, v190, "Global tone curve has invalid values. Size:%zu First:%d Last:%d", 0x3FuLL);
  sub_223C26F30(&v344);
  if (**(int **)(v344 + 56) <= 5)
  {
    v191 = *(unsigned __int8 *)(v344 + 72);
    v192 = sub_22322F254(v344, "OSLogSurrogateAppender", 1, 0);
    v193 = v192;
    if (v191 || v192)
    {
      v294 = v149;
      v339 = &v344;
      *(std::chrono::steady_clock::time_point *)&v340 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v340 + 1) = std::chrono::system_clock::now();
      *(_DWORD *)v341 = 5;
      *(_QWORD *)&v341[8] = "unknown file";
      *(_DWORD *)&v341[16] = 1451;
      v343 = 0;
      *(_QWORD *)&v341[24] = "unknown function";
      v342 = 0;
      v194 = *v339;
      v292 = *v339;
      if (*(char *)(*v339 + 39) < 0)
      {
        v196 = *(const char **)(v194 + 16);
        v195 = *(_QWORD *)(v194 + 24);
      }
      else
      {
        v195 = *(unsigned __int8 *)(*v339 + 39);
        v196 = (const char *)(*v339 + 16);
      }
      v291 = *v339 + 16;
      v298 = v193;
      v299 = v151;
      v297 = v191;
      v293 = v150;
      v295 = *v147;
      v197 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v345);
        sub_223199C58("com.apple.cv3d", (unint64_t)v345, &xmmword_255788F40);
        if (v345[24] && (v345[23] & 0x80000000) != 0)
          operator delete(*(void **)v345);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v198 = (const char *)&xmmword_255788F40;
      else
        v198 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v199 = byte_255788F57;
      else
        v199 = *((_QWORD *)&xmmword_255788F40 + 1);
      __src = v196;
      *(_QWORD *)v345 = os_log_create(v198, v196);
      v200 = &v345[8];
      if (v199 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v199 >= 0x17)
      {
        v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v199 | 7) != 0x17)
          v201 = v199 | 7;
        v202 = v201 + 1;
        v200 = operator new(v201 + 1);
        *(_QWORD *)&v345[16] = v199;
        *(_QWORD *)&v345[24] = v202 | 0x8000000000000000;
        *(_QWORD *)&v345[8] = v200;
        v147 = (char **)(a1 + 104);
      }
      else
      {
        v345[31] = v199;
        if (!v199)
        {
LABEL_325:
          v200[v199] = 0;
          v345[32] = 1;
          v203 = (void **)&v346;
          if (v195 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v204 = v191;
          if (v195 >= 0x17)
          {
            v205 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v195 | 7) != 0x17)
              v205 = v195 | 7;
            v206 = v205 + 1;
            v203 = (void **)operator new(v205 + 1);
            *(_QWORD *)&v347 = v195;
            *((_QWORD *)&v347 + 1) = v206 | 0x8000000000000000;
            v346 = v203;
          }
          else
          {
            HIBYTE(v347) = v195;
            if (!v195)
              goto LABEL_333;
          }
          memmove(v203, __src, v195);
LABEL_333:
          *((_BYTE *)v203 + v195) = 0;
          LOBYTE(v348) = 1;
          v207 = *(NSObject **)v345;
          if (SHIBYTE(v347) < 0)
            operator delete(v346);
          v151 = v299;
          if (v345[32] && (v345[31] & 0x80000000) != 0)
            operator delete(*(void **)&v345[8]);
          if (*(_QWORD *)v345)
            os_release(*(void **)v345);
          v208 = v299 - 1;
          if (v298 && *(_QWORD *)(v298 + 24))
          {
            v209 = _os_log_pack_size();
            v210 = (std::__shared_weak_count_vtbl *)operator new(v209, (std::align_val_t)8uLL);
            v211 = (std::__shared_weak_count *)operator new();
            v212 = v211;
            v211->__shared_owners_ = 0;
            v213 = (unint64_t *)&v211->__shared_owners_;
            v211->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v211->__shared_weak_owners_ = 0;
            v211[1].__vftable = v210;
            *(_QWORD *)v345 = v210;
            *(_QWORD *)&v345[8] = v210;
            *(_QWORD *)&v345[16] = v211;
            do
              v214 = __ldxr(v213);
            while (__stxr(v214 + 1, v213));
            *(_QWORD *)&v345[24] = 0;
            *(_QWORD *)&v345[32] = 0;
            v346 = 0;
            do
              v215 = __ldaxr(v213);
            while (__stlxr(v215 - 1, v213));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v212);
            }
            v216 = *(_QWORD *)v345;
            v217 = _os_log_pack_fill();
            v218 = *(unsigned __int16 *)v295;
            v219 = *(unsigned __int16 *)&v295[2 * v208];
            *(_DWORD *)v217 = 134218496;
            *(_QWORD *)(v217 + 4) = v299;
            *(_WORD *)(v217 + 12) = 1024;
            *(_DWORD *)(v217 + 14) = v218;
            *(_WORD *)(v217 + 18) = 1024;
            *(_DWORD *)(v217 + 20) = v219;
            v220 = operator new();
            v221 = *(unsigned __int8 *)(v292 + 39);
            v222 = v291;
            if ((v221 & 0x80u) != 0)
            {
              v222 = *(_QWORD *)(v292 + 16);
              v221 = *(_QWORD *)(v292 + 24);
            }
            *(_QWORD *)v220 = v216;
            *(_OWORD *)(v220 + 8) = *(_OWORD *)&v345[8];
            *(_QWORD *)&v345[8] = 0;
            *(_QWORD *)&v345[16] = 0;
            *(_OWORD *)(v220 + 24) = *(_OWORD *)&v345[24];
            *(_QWORD *)&v345[24] = 0;
            *(_QWORD *)&v345[32] = 0;
            *(_QWORD *)(v220 + 40) = v222;
            *(_QWORD *)(v220 + 48) = v221;
            *(_BYTE *)(v220 + 56) = 16;
            category = 0;
            v337 = (CVPixelBufferPoolRef *)v220;
            (*(void (**)(_QWORD, CVPixelBufferPoolRef **))(**(_QWORD **)(v298 + 24) + 40))(*(_QWORD *)(v298 + 24), &v337);
            v223 = v337;
            v337 = 0;
            v151 = v299;
            v204 = v297;
            if (v223)
            {
              v224 = (std::__shared_weak_count *)v223[4];
              if (v224)
              {
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              v227 = (std::__shared_weak_count *)v223[2];
              if (v227)
              {
                v228 = (unint64_t *)&v227->__shared_owners_;
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                }
              }
              MEMORY[0x227684CE8](v223, 0x10F0C40B62ED6C6);
              v230 = category;
              category = 0;
              if (v230)
              {
                v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
                if (v231)
                {
                  v232 = (unint64_t *)&v231->__shared_owners_;
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
                v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                MEMORY[0x227684CE8](v230, 0x10F0C40B62ED6C6);
              }
            }
            v237 = *(std::__shared_weak_count **)&v345[32];
            v149 = v294;
            if (*(_QWORD *)&v345[32])
            {
              v238 = (unint64_t *)(*(_QWORD *)&v345[32] + 8);
              do
                v239 = __ldaxr(v238);
              while (__stlxr(v239 - 1, v238));
              if (!v239)
              {
                ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                std::__shared_weak_count::__release_weak(v237);
              }
            }
            v240 = *(std::__shared_weak_count **)&v345[16];
            if (*(_QWORD *)&v345[16])
            {
              v241 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
              do
                v242 = __ldaxr(v241);
              while (__stlxr(v242 - 1, v241));
              if (!v242)
              {
                ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                std::__shared_weak_count::__release_weak(v240);
              }
            }
          }
          else
          {
            os_log_type_enabled(v207, OS_LOG_TYPE_ERROR);
            v243 = *(unsigned __int16 *)v295;
            v244 = *(unsigned __int16 *)&v295[2 * v208];
            *(_DWORD *)v345 = 134218496;
            *(_QWORD *)&v345[4] = v299;
            *(_WORD *)&v345[12] = 1024;
            *(_DWORD *)&v345[14] = v243;
            *(_WORD *)&v345[18] = 1024;
            *(_DWORD *)&v345[20] = v244;
            v245 = (void *)_os_log_send_and_compose_impl();
            v149 = v294;
            if (v245)
              free(v245);
          }
          if (v204)
          {
            sub_22322C138((uint64_t)&v339, "Global tone curve has invalid values. Size:%zu First:%d Last:%d", v151, *(unsigned __int16 *)*v147, *(unsigned __int16 *)&(*v147)[2 * v208]);
            sub_223182C08((uint64_t)&v339);
          }
          sub_223182C08((uint64_t)&v339);
          v246 = v343;
          v150 = v293;
          if (v343)
          {
            v247 = (unint64_t *)&v343->__shared_owners_;
            do
              v248 = __ldaxr(v247);
            while (__stlxr(v248 - 1, v247));
            if (!v248)
            {
              ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
              std::__shared_weak_count::__release_weak(v246);
            }
          }
          goto LABEL_392;
        }
      }
      memmove(v200, v198, v199);
      goto LABEL_325;
    }
  }
LABEL_392:
  if (v150 <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1453, (uint64_t)"size > 1", 8, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_466;
  }
LABEL_394:
  v249 = *v147;
  if (*(_WORD *)*v147)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1454, (uint64_t)"lut[0] == 0", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_466;
    }
    v249 = *v147;
  }
  v250 = v151 - 1;
  if (*(__int16 *)&v249[2 * v151 - 2] != -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1455, (uint64_t)"lut[size - 1] == kMaxUshort", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_466:
    abort();
  }
  memset(__p, 0, sizeof(__p));
  if (v149 == v148)
  {
    v252 = 0;
    v256 = 0;
    v251 = 0;
  }
  else
  {
    if (v150 >= 0x7FFFFFFFFFFFFFFFLL)
      sub_22316E078();
    v251 = (char *)operator new(2 * v150);
    v252 = &v251[4 * v151];
    __p[0] = v251;
    __p[2] = v252;
    bzero(v251, 2 * v150);
    v254 = 0;
    v255 = 0;
    v256 = &v251[2 * v150];
    v257 = 65535.0 / (float)v250;
    v258 = *v147;
    if (v151 <= 1)
      v259 = 1;
    else
      v259 = v151;
    do
    {
      while (1)
      {
        v260 = v257 * (float)v254;
        v261 = &v258[2 * v255--];
        do
        {
          ++v255;
          v262 = *(unsigned __int16 *)v261;
          v261 += 2;
          v263 = (float)v262;
        }
        while (v255 < v250 && v260 > v263);
        if (v255)
          break;
        *(_DWORD *)&v251[4 * v254++] = 0;
        if (v254 == v259)
          goto LABEL_412;
      }
      LOWORD(v253) = *((_WORD *)v261 - 2);
      v264 = (float)(v260 - (float)LODWORD(v253)) / (float)(v263 - (float)LODWORD(v253));
      v265 = v257 * (float)(v255 - 1);
      v253 = (float)(v257 * (float)v255) - v265;
      *(float *)&v251[4 * v254++] = (float)(v265 + (float)(v253 * v264)) / 65535.0;
    }
    while (v254 != v259);
  }
LABEL_412:
  if (v308)
  {
    if (v306)
    {
      *(_QWORD *)&v307 = v306;
      operator delete(v306);
    }
    v306 = v251;
    *(_QWORD *)&v307 = v256;
    *((_QWORD *)&v307 + 1) = v252;
  }
  else
  {
    v306 = v251;
    *(_QWORD *)&v307 = v256;
    *((_QWORD *)&v307 + 1) = v252;
    v308 = 1;
  }
LABEL_417:
  v266 = (uint64_t *)v334;
  v302 = v334;
  if (*((_QWORD *)&v334 + 1))
  {
    v267 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
    v266 = (uint64_t *)v302;
  }
  v301 = &off_24EC71528;
  if (v266)
  {
    v270 = *v266;
    v269 = (std::__shared_weak_count *)v266[1];
    if (v269)
    {
      v271 = (unint64_t *)&v269->__shared_owners_;
      do
        v272 = __ldxr(v271);
      while (__stxr(v272 + 1, v271));
      do
        v273 = __ldaxr(v271);
      while (__stlxr(v273 - 1, v271));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    if (v270)
      sub_2242AE7CC(v302);
  }
  sub_223C27CA8((uint64_t)&v301, (uint64_t)&v306, v303);
  sub_22429724C((uint64_t)v303, (uint64_t)&v339);
  __p[0] = &off_24EC28CD0;
  *(_OWORD *)&__p[1] = v340;
  v332[0] = *(_OWORD *)v341;
  *(_OWORD *)((char *)v332 + 14) = *(_OWORD *)&v341[14];
  *(_QWORD *)v345 = &off_24EC28D40;
  sub_2232BF504((uint64_t)__p, (uint64_t)&v345[8]);
  sub_2232BAAA0(a1, (uint64_t)v345);
  *(_QWORD *)v345 = &off_24EC28D40;
  v274 = *(std::__shared_weak_count **)&v345[16];
  if (*(_QWORD *)&v345[16])
  {
    v275 = (unint64_t *)(*(_QWORD *)&v345[16] + 8);
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  __p[0] = &off_24EC28CD0;
  v277 = (std::__shared_weak_count *)__p[2];
  if (__p[2])
  {
    v278 = (unint64_t *)((char *)__p[2] + 8);
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v303[0] = &off_24EC715B8;
  v280 = v304;
  if (v304)
  {
    v281 = (unint64_t *)&v304->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  if ((_QWORD)v302)
  {
    v284 = *(_QWORD *)v302;
    v283 = *(std::__shared_weak_count **)(v302 + 8);
    if (v283)
    {
      v285 = (unint64_t *)&v283->__shared_owners_;
      do
        v286 = __ldxr(v285);
      while (__stxr(v286 + 1, v285));
      do
        v287 = __ldaxr(v285);
      while (__stlxr(v287 - 1, v285));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
    }
    if (v284)
      sub_2242AE9A8(v302);
  }
  v301 = &off_24EC715B8;
  v288 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
  if (*((_QWORD *)&v302 + 1))
  {
    v289 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  *(_BYTE *)(a4 + 120) = 1;
  if (v308 && v306)
  {
    *(_QWORD *)&v307 = v306;
    operator delete(v306);
  }
LABEL_29:
  v333 = &off_24EC715B8;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
  if (*((_QWORD *)&v334 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_223C2C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t a72;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 200) && *(char *)(v72 - 201) < 0)
    operator delete(*(void **)(v72 - 224));
  __cxa_guard_abort(&qword_255788F58);
  if (a70 < 0)
    operator delete(__p);
  sub_223182DAC((uint64_t)&STACK[0x230]);
  if (a33)
  {
    if (a30)
      operator delete(a30);
  }
  sub_2242A8F3C(&a72);
  _Unwind_Resume(a1);
}

void sub_223C2CD40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const void *v17;
  size_t v18;
  std::__shared_weak_count *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  const char *v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  size_t v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  uint64_t (**v90)();
  uint64_t *v91;
  std::__shared_weak_count *v92;
  uint64_t (**v93)();
  __int128 v94;
  void (**v95)(_QWORD);
  __int128 __p;
  char v97;
  char v98;
  CVPixelBufferPoolRef *v99;
  std::__shared_weak_count *v100;
  _BYTE v101[24];
  __int128 v102;
  void *v103[2];
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107[3];

  v6 = atomic_load((unsigned __int8 *)&qword_2540CD008);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD008))
  {
    qword_2540CD148 = 0;
    unk_2540CD150 = 0;
    qword_2540CD140 = (uint64_t)&qword_2540CD148;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD140, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD008);
  }
  v7 = sub_2242A78F0(a2);
  sub_223C8536C((uint64_t **)&qword_2540CD140, a3, v7, 1u, (std::__shared_weak_count_vtbl ***)&v99);
  sub_2242A7370(v99, (uint64_t)&v95);
  if (!v98
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 285, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v93 = &off_24EC715B8;
  v94 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_2242AA1D0((uint64_t)&v93, &v90);
  if (v91)
  {
    v11 = *v91;
    v10 = (std::__shared_weak_count *)v91[1];
    if (!v10)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v11)
        goto LABEL_15;
    }
    else
    {
LABEL_13:
      if (v11)
        goto LABEL_15;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 289, (uint64_t)"out_buffer_iosurface", 20, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  v101[23] = 11;
  strcpy(v101, "ResizeImage");
  sub_2244E116C((uint64_t)&v90, (uint64_t *)v101);
  if ((v101[23] & 0x80000000) != 0)
    operator delete(*(void **)v101);
  v15 = atomic_load((unsigned __int8 *)&qword_2540CD018);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD018))
  {
    sub_223FC4CB0(&qword_2540CD010);
    __cxa_atexit((void (*)(void *))sub_223416934, &qword_2540CD010, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD018);
  }
  if ((sub_223FC4D34(&qword_2540CD010, a2, (uint64_t)&v93) & 0xFF00000000) != 0)
  {
    v16 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223C26E3C(v101);
    if (*(char *)(*(_QWORD *)v101 + 39) < 0)
    {
      v17 = *(const void **)(*(_QWORD *)v101 + 16);
      v18 = *(_QWORD *)(*(_QWORD *)v101 + 24);
    }
    else
    {
      v17 = (const void *)(*(_QWORD *)v101 + 16);
      v18 = *(unsigned __int8 *)(*(_QWORD *)v101 + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v17, v18, "Failed to resize color image!", 0x1DuLL);
    sub_223C26F30(&v89);
    if (**(int **)(v89 + 56) > 5
      || (v20 = *(unsigned __int8 *)(v89 + 72),
          v21 = sub_22322F254(v89, "OSLogSurrogateAppender", 1, 0),
          v22 = v21,
          !v20)
      && !v21)
    {
LABEL_115:
      *a1 = &off_24EC715B8;
      v71 = a1 + 1;
      *v71 = 0;
      v71[1] = 0;
      v90 = &off_24EC76F28;
      v19 = v92;
      if (!v92)
        goto LABEL_120;
      goto LABEL_116;
    }
    v82[0] = &v89;
    v82[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v82[2] = std::chrono::system_clock::now().__d_.__rep_;
    v83 = 5;
    v84 = "unknown file";
    v85 = 296;
    v87 = 0;
    v88 = 0;
    v86 = "unknown function";
    v81 = v89;
    if (*(char *)(v89 + 39) < 0)
    {
      v24 = *(const char **)(v89 + 16);
      v23 = *(_QWORD *)(v89 + 24);
      v80 = v89 + 16;
      v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v26 & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      v23 = *(unsigned __int8 *)(v89 + 39);
      v24 = (const char *)(v89 + 16);
      v80 = v89 + 16;
      v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v25 & 1) != 0)
        goto LABEL_34;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v101);
      sub_223199C58("com.apple.cv3d", (unint64_t)v101, &xmmword_255788F40);
      if ((_BYTE)v102 && (v101[23] & 0x80000000) != 0)
        operator delete(*(void **)v101);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_34:
    if (byte_255788F57 >= 0)
      v27 = (const char *)&xmmword_255788F40;
    else
      v27 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v28 = byte_255788F57;
    else
      v28 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)v101 = os_log_create(v27, v24);
    v29 = &v101[8];
    if (v28 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v28 >= 0x17)
    {
      v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v30 = v28 | 7;
      v31 = v30 + 1;
      v29 = operator new(v30 + 1);
      *(_QWORD *)&v101[16] = v28;
      *(_QWORD *)&v102 = v31 | 0x8000000000000000;
      *(_QWORD *)&v101[8] = v29;
    }
    else
    {
      BYTE7(v102) = v28;
      if (!v28)
      {
LABEL_48:
        v29[v28] = 0;
        BYTE8(v102) = 1;
        v32 = v103;
        if (v23 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v23 >= 0x17)
        {
          v33 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v33 = v23 | 7;
          v34 = v33 + 1;
          v32 = (void **)operator new(v33 + 1);
          v103[1] = (void *)v23;
          v104 = v34 | 0x8000000000000000;
          v103[0] = v32;
        }
        else
        {
          HIBYTE(v104) = v23;
          if (!v23)
            goto LABEL_56;
        }
        memmove(v32, v24, v23);
LABEL_56:
        *((_BYTE *)v32 + v23) = 0;
        v105 = 1;
        v35 = *(NSObject **)v101;
        if (SHIBYTE(v104) < 0)
          operator delete(v103[0]);
        if (BYTE8(v102) && SBYTE7(v102) < 0)
          operator delete(*(void **)&v101[8]);
        if (*(_QWORD *)v101)
          os_release(*(void **)v101);
        if (v22 && *(_QWORD *)(v22 + 24))
        {
          v36 = _os_log_pack_size();
          v37 = (std::__shared_weak_count_vtbl *)operator new(v36, (std::align_val_t)8uLL);
          v38 = (std::__shared_weak_count *)operator new();
          v39 = v38;
          v38->__shared_owners_ = 0;
          v40 = (unint64_t *)&v38->__shared_owners_;
          v38->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v38->__shared_weak_owners_ = 0;
          v38[1].__vftable = v37;
          *(_QWORD *)v101 = v37;
          *(_QWORD *)&v101[8] = v37;
          *(_QWORD *)&v101[16] = v38;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
          v102 = 0uLL;
          v103[0] = 0;
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 - 1, v40));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v39);
          }
          v43 = *(_QWORD *)v101;
          *(_WORD *)_os_log_pack_fill() = 0;
          v44 = operator new();
          v45 = *(unsigned __int8 *)(v81 + 39);
          v46 = v80;
          if ((v45 & 0x80u) != 0)
          {
            v46 = *(_QWORD *)(v81 + 16);
            v45 = *(_QWORD *)(v81 + 24);
          }
          *(_QWORD *)v44 = v43;
          *(_OWORD *)(v44 + 8) = *(_OWORD *)&v101[8];
          *(_QWORD *)&v101[8] = 0;
          *(_QWORD *)&v101[16] = 0;
          *(_OWORD *)(v44 + 24) = v102;
          v102 = 0uLL;
          *(_QWORD *)(v44 + 40) = v46;
          *(_QWORD *)(v44 + 48) = v45;
          *(_BYTE *)(v44 + 56) = 16;
          v106 = 0;
          v107[0] = v44;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v22 + 24) + 40))(*(_QWORD *)(v22 + 24), v107);
          v47 = v107[0];
          v107[0] = 0;
          if (v47)
          {
            v48 = *(std::__shared_weak_count **)(v47 + 32);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = *(std::__shared_weak_count **)(v47 + 16);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
            v54 = v106;
            v106 = 0;
            if (v54)
            {
              v55 = *(std::__shared_weak_count **)(v54 + 32);
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v58 = *(std::__shared_weak_count **)(v54 + 16);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              MEMORY[0x227684CE8](v54, 0x10F0C40B62ED6C6);
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v62 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = *(std::__shared_weak_count **)&v101[16];
          if (*(_QWORD *)&v101[16])
          {
            v65 = (unint64_t *)(*(_QWORD *)&v101[16] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        else
        {
          os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          *(_WORD *)v101 = 0;
          v67 = (void *)_os_log_send_and_compose_impl();
          if (v67)
            free(v67);
        }
        if (v20)
        {
          sub_22322C138((uint64_t)v82, "Failed to resize color image!");
          sub_223182C08((uint64_t)v82);
        }
        sub_223182C08((uint64_t)v82);
        v68 = v88;
        if (v88)
        {
          v69 = (unint64_t *)&v88->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        goto LABEL_115;
      }
    }
    memmove(v29, v27, v28);
    goto LABEL_48;
  }
  *a1 = &off_24EC715B8;
  *(_OWORD *)(a1 + 1) = v94;
  v94 = 0uLL;
  v90 = &off_24EC76F28;
  v19 = v92;
  if (!v92)
    goto LABEL_120;
LABEL_116:
  v72 = (unint64_t *)&v19->__shared_owners_;
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v73 - 1, v72));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_120:
  v93 = &off_24EC715B8;
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (!*((_QWORD *)&v94 + 1))
    goto LABEL_124;
  v75 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
    if (v98)
      goto LABEL_125;
  }
  else
  {
LABEL_124:
    if (v98)
    {
LABEL_125:
      (*v95)(&v95);
      goto LABEL_129;
    }
  }
  if (v97 < 0)
    operator delete((void *)__p);
LABEL_129:
  v77 = v100;
  if (v100)
  {
    v78 = (unint64_t *)&v100->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_223C2D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(_BYTE *)(v35 - 168))
  {
    if (*(char *)(v35 - 169) < 0)
      operator delete(*(void **)(v35 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a14);
  sub_2244E0FF4(&a24);
  sub_2242A8F3C(&a27);
  sub_2232B6080((uint64_t)&a30);
  sub_223167354((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_223C2D98C(uint64_t a1, char **a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  char *v6;

  v4 = 0;
  sub_223C69C9C((uint64_t)&v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_22316DD70();
  v6 = &v5;
  result = ((uint64_t (*)(char **, _BYTE *))off_24EC60F98[v4])(&v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(char **, _BYTE *))off_24EC60F50[v4])(&v6, v3);
  return result;
}

void sub_223C2DA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C2DA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C2DA4C(uint64_t a1, uint64_t a2, float a3)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (***v21)();
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  BOOL v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t (***v63)();
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  void *v82;
  BOOL v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  float v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  std::string::size_type v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  __int16 v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned __int8 v165;
  unsigned int v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void **v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  int v200;
  float v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t i;
  unsigned __int8 v217;
  uint64_t v218;
  std::string::size_type v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  __int128 v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::logic_error *exception;
  unsigned __int8 v278;
  std::string *v279;
  uint64_t *v280;
  uint64_t v281;
  std::string::size_type size;
  std::string *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  int v289;
  size_t v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  std::string::size_type v298;
  std::string *p_p;
  std::string *p_dst;
  std::string *v301;
  uint64_t v302;
  uint64_t v303;
  std::string *v304;
  __int128 v305;
  __int128 *v306;
  __int128 v307;
  int64x2_t v308;
  int8x16_t v309;
  _QWORD *v310;
  _QWORD *v311;
  void *v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  void *v318[2];
  char v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int16 v323;
  uint64_t (**v324)();
  _QWORD *v325;
  std::__shared_weak_count *v326;
  uint64_t (**v327)();
  __int128 v328;
  _BYTE v329[72];
  __int16 v330;
  char v331;
  std::string __dst;
  std::string __p;
  void *v334;
  _QWORD *v335;
  std::__shared_weak_count *v336;
  std::string __s;
  char v338;
  char v339;
  CVPixelBufferPoolRef *v340;
  std::__shared_weak_count *v341;
  void *v342[4];
  uint64_t v343;
  void *v344;
  __int128 v345;
  _BYTE v346[56];
  _BYTE v347[32];
  __int128 v348;
  uint64_t v349;
  __int16 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  __int16 v359;
  _BYTE v360[64];
  uint64_t v361;
  __int16 v362;
  uint64_t v363;

  v5 = a2;
  v6 = a1;
  v363 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v360[23] = 5;
  strcpy(v360, "Depth");
  if (*(_BYTE *)(a2 + 56))
  {
    sub_223C303A8((uint64_t)&v344, a2, (uint64_t)v360, a3);
    *(_OWORD *)&v329[10] = *(_OWORD *)&v346[10];
    *(_OWORD *)v329 = *(_OWORD *)v346;
    v7 = v345;
    *(_QWORD *)v6 = &off_24EC21328;
    *(_OWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 24) = *(_OWORD *)v329;
    *(_OWORD *)(v6 + 34) = *(_OWORD *)&v329[10];
    *(_BYTE *)(v6 + 56) = 1;
  }
  if ((v360[23] & 0x80000000) != 0)
    operator delete(*(void **)v360);
  v360[23] = 10;
  v8 = *(_QWORD *)"Confidence";
  strcpy(v360, "Confidence");
  v9 = *(unsigned __int8 *)(v5 + 120);
  if (*(_BYTE *)(v5 + 120))
  {
    sub_223C303A8((uint64_t)&v344, v5 + 64, (uint64_t)v360, a3);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
    v8 = v345;
    *(_OWORD *)v329 = *(_OWORD *)v346;
    *(_OWORD *)&v329[10] = *(_OWORD *)&v346[10];
    v10 = *(unsigned __int8 *)(v6 + 120);
    if (v10 == 1)
      goto LABEL_7;
LABEL_16:
    *(_QWORD *)(v6 + 64) = &off_24EC21328;
    if (!v10)
    {
      *(_QWORD *)(v6 + 72) = v8;
      *(_QWORD *)(v6 + 80) = v3;
      *(_OWORD *)(v6 + 88) = *(_OWORD *)v329;
      *(_OWORD *)(v6 + 98) = *(_OWORD *)&v329[10];
      *(_BYTE *)(v6 + 120) = 1;
      if ((v360[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
    v14 = *(std::__shared_weak_count **)(v6 + 80);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_BYTE *)(v6 + 120) = 0;
LABEL_23:
    if (!v9)
      goto LABEL_28;
    if (!v3)
      goto LABEL_28;
    v17 = (unint64_t *)&v3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (v18)
    {
LABEL_28:
      if ((v360[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((v360[23] & 0x80000000) == 0)
      goto LABEL_30;
LABEL_29:
    operator delete(*(void **)v360);
    goto LABEL_30;
  }
  v10 = *(unsigned __int8 *)(v6 + 120);
  if (*(_BYTE *)(v6 + 120))
    goto LABEL_16;
LABEL_7:
  if (!v10)
    goto LABEL_23;
  v11 = *(std::__shared_weak_count **)(v6 + 80);
  *(_QWORD *)(v6 + 72) = v8;
  *(_QWORD *)(v6 + 80) = v3;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(v6 + 88) = *(_OWORD *)v329;
  *(_OWORD *)(v6 + 98) = *(_OWORD *)&v329[10];
  if ((v360[23] & 0x80000000) != 0)
    goto LABEL_29;
LABEL_30:
  v319 = 7;
  strcpy((char *)v318, "Normals");
  v19 = 1936482669;
  v20 = *(unsigned __int8 *)(v5 + 208);
  if (!*(_BYTE *)(v5 + 208))
  {
    v26 = *(unsigned __int8 *)(v6 + 208);
    if (!*(_BYTE *)(v6 + 208))
      goto LABEL_418;
LABEL_43:
    *(_QWORD *)(v6 + 128) = &off_24EC26FA8;
    if (!v26)
    {
      *(_QWORD *)(v6 + 136) = v19;
      *(_QWORD *)(v6 + 144) = v3;
      v52 = v321;
      *(_OWORD *)(v6 + 152) = v320;
      *(_OWORD *)(v6 + 168) = v52;
      *(_OWORD *)(v6 + 184) = v322;
      *(_WORD *)(v6 + 200) = v323;
      *(_BYTE *)(v6 + 208) = 1;
      if (v319 < 0)
        goto LABEL_425;
      goto LABEL_433;
    }
    v27 = *(std::__shared_weak_count **)(v6 + 144);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    *(_BYTE *)(v6 + 208) = 0;
    if (!v20)
      goto LABEL_432;
    if (!v3)
      goto LABEL_432;
LABEL_427:
    v250 = (unint64_t *)&v3->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v319 < 0)
        goto LABEL_425;
    }
    else
    {
LABEL_432:
      if (v319 < 0)
        goto LABEL_425;
    }
LABEL_433:
    v249 = *(_QWORD *)(v5 + 216);
    if (!v249)
      return;
    goto LABEL_434;
  }
  if (a3 <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 422, (uint64_t)"scale_factor > 0.f", 18, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_DWORD *)(v5 + 184) && *(_DWORD *)(v5 + 188))
  {
    v314 = v20;
    v21 = *(uint64_t (****)())(v5 + 136);
    v22 = *(_QWORD *)(v5 + 144);
    *(_QWORD *)v360 = v21;
    *(_QWORD *)&v360[8] = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v21 && *v21 == off_24EC6FC50)
    {
      v344 = v21;
      *(_QWORD *)&v345 = v22;
      *(_QWORD *)v360 = 0;
      *(_QWORD *)&v360[8] = 0;
    }
    else
    {
      v344 = 0;
      *(_QWORD *)&v345 = 0;
      v25 = *(std::__shared_weak_count **)&v360[8];
      if (*(_QWORD *)&v360[8])
      {
        v56 = (unint64_t *)(*(_QWORD *)&v360[8] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          v58 = v344;
          v59 = (std::__shared_weak_count *)v345;
          if (!(_QWORD)v345)
            goto LABEL_103;
          goto LABEL_100;
        }
      }
    }
    v58 = v344;
    v59 = (std::__shared_weak_count *)v345;
    if (!(_QWORD)v345)
      goto LABEL_103;
LABEL_100:
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      v317 = v5;
      if (v58)
      {
LABEL_104:
        v63 = *(uint64_t (****)())(v5 + 136);
        v62 = *(std::__shared_weak_count **)(v5 + 144);
        if (v62)
        {
          v64 = (unint64_t *)&v62->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        if (v63 && *v63 == off_24EC6FC50)
        {
          v66 = (_OWORD *)(v5 + 152);
          if (v62)
          {
            v67 = (unint64_t *)&v62->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
            v69 = *(_OWORD *)(v5 + 168);
            *(_OWORD *)v360 = *v66;
            *(_OWORD *)&v360[16] = v69;
            *(_OWORD *)&v360[32] = *(_OWORD *)(v5 + 184);
            do
              v70 = __ldxr(v67);
            while (__stxr(v70 + 1, v67));
            do
              v71 = __ldaxr(v67);
            while (__stlxr(v71 - 1, v67));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
            do
              v72 = __ldaxr(v67);
            while (__stlxr(v72 - 1, v67));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
            *(_QWORD *)v329 = &off_24EC611E0;
            *(_QWORD *)&v329[8] = v63;
            *(_QWORD *)&v329[16] = v62;
            *(_OWORD *)&v329[24] = *(_OWORD *)v360;
            *(_OWORD *)&v329[40] = *(_OWORD *)&v360[16];
            *(_OWORD *)&v329[56] = *(_OWORD *)&v360[32];
            LOBYTE(v330) = v360[48];
            v331 = 1;
            do
              v73 = __ldxr(v67);
            while (__stxr(v73 + 1, v67));
            do
              v74 = __ldaxr(v67);
            while (__stlxr(v74 - 1, v67));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          else
          {
            v96 = *(_OWORD *)(v5 + 168);
            v95 = *(_OWORD *)(v5 + 184);
            v97 = *v66;
            *(_QWORD *)v329 = &off_24EC611E0;
            *(_QWORD *)&v329[8] = v63;
            *(_QWORD *)&v329[16] = 0;
            LOBYTE(v330) = v360[48];
            *(_OWORD *)&v329[24] = v97;
            *(_OWORD *)&v329[40] = v96;
            *(_OWORD *)&v329[56] = v95;
            v331 = 1;
          }
          sub_224279540((uint64_t)v63, &v324);
          if ((a3 <= 0.0 || a3 > 1.0)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 395, (uint64_t)"scale_factor > 0.f && scale_factor <= 1.f", 41, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v98 = v325;
          if (v325)
          {
            v99 = *v325;
            v100 = (std::__shared_weak_count *)v325[1];
            if (v100)
            {
              v101 = (unint64_t *)&v100->__shared_owners_;
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
              do
                v103 = __ldaxr(v101);
              while (__stlxr(v103 - 1, v101));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            if (v99)
            {
              v104 = sub_2242A9824((uint64_t)&v324);
              v342[0] = &off_24EC715B8;
              v342[1] = v325;
              v342[2] = v326;
              if (v326)
              {
                v105 = (unint64_t *)&v326->__shared_owners_;
                do
                  v106 = __ldxr(v105);
                while (__stxr(v106 + 1, v105));
              }
              sub_223C6B460(v360, (uint64_t)v342);
              v344 = &off_24EC25248;
              v107 = *(_QWORD *)&v360[8];
              v108 = *(std::__shared_weak_count **)&v360[16];
              if (*(_QWORD *)&v360[16])
              {
                v109 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
                do
                  v111 = __ldxr(v109);
                while (__stxr(v111 + 1, v109));
                *(_OWORD *)&v346[8] = *(_OWORD *)&v360[32];
                *(_OWORD *)&v346[24] = *(_OWORD *)&v360[48];
                v112 = *(_QWORD *)&v360[24];
                *(_QWORD *)&v346[40] = v361;
                do
                  v113 = __ldxr(v109);
                while (__stxr(v113 + 1, v109));
                *(_QWORD *)&v345 = v107;
                *((_QWORD *)&v345 + 1) = v108;
                *(_QWORD *)v346 = v112;
                do
                  v114 = __ldaxr(v109);
                while (__stlxr(v114 - 1, v109));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
                do
                  v115 = __ldaxr(v109);
                while (__stlxr(v115 - 1, v109));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
              else
              {
                v345 = *(unint64_t *)&v360[8];
                *(_QWORD *)v346 = *(_QWORD *)&v360[24];
                *(_OWORD *)&v346[8] = *(_OWORD *)&v360[32];
                *(_OWORD *)&v346[24] = *(_OWORD *)&v360[48];
                *(_QWORD *)&v346[40] = v361;
              }
              v159 = *(std::__shared_weak_count **)&v360[16];
              if (*(_QWORD *)&v360[16])
              {
                v160 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              v342[0] = &off_24EC715B8;
              v162 = (std::__shared_weak_count *)v342[2];
              if (v342[2])
              {
                v163 = (unint64_t *)((char *)v342[2] + 8);
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              v165 = atomic_load((unsigned __int8 *)&qword_2540CD058);
              if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD058))
              {
                qword_2540CD1D8 = 0;
                unk_2540CD1E0 = 0;
                qword_2540CD1D0 = (uint64_t)&qword_2540CD1D8;
                __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD1D0, &dword_22314D000);
                __cxa_guard_release(&qword_2540CD058);
              }
              v166 = sub_2242A78F0((uint64_t)&v324);
              sub_223C8536C((uint64_t **)&qword_2540CD1D0, (float)((float)v104 * a3) | ((unint64_t)(float)((float)HIDWORD(v104) * a3) << 32), v166, 1u, (std::__shared_weak_count_vtbl ***)&v340);
              sub_2242A7370(v340, (uint64_t)&__s);
              if (!v339
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 404, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v327 = &off_24EC715B8;
              v328 = *(_OWORD *)&__s.__r_.__value_.__r.__words[1];
              if (__s.__r_.__value_.__r.__words[2])
              {
                v167 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                do
                  v168 = __ldxr(v167);
                while (__stxr(v168 + 1, v167));
              }
              sub_2242AA1D0((uint64_t)&v327, &v334);
              if (!v335)
                goto LABEL_551;
              v169 = *v335;
              v170 = (std::__shared_weak_count *)v335[1];
              if (v170)
              {
                v171 = (unint64_t *)&v170->__shared_owners_;
                do
                  v172 = __ldxr(v171);
                while (__stxr(v172 + 1, v171));
                do
                  v173 = __ldaxr(v171);
                while (__stlxr(v173 - 1, v171));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              if (!v169)
              {
LABEL_551:
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 408, (uint64_t)"out_iosurface", 13, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
              }
              *(_QWORD *)v360 = "Downsample";
              *(_QWORD *)&v360[8] = 10;
              v174 = v319;
              v175 = v318;
              if (v319 < 0)
              {
                v175 = (void **)v318[0];
                v174 = (unint64_t)v318[1];
              }
              *(_QWORD *)&v360[16] = v175;
              *(_QWORD *)&v360[24] = v174;
              sub_2231A9820((uint64_t)v360, (uint64_t)&v360[32], 0, 0, &__p);
              sub_2244E116C((uint64_t)&v334, (uint64_t *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
              *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = v328;
              if (*((_QWORD *)&v328 + 1))
              {
                v176 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
                do
                  v177 = __ldxr(v176);
                while (__stxr(v177 + 1, v176));
              }
              sub_223C6B460(v360, (uint64_t)&__dst);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
              v178 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
              if (__dst.__r_.__value_.__r.__words[2])
              {
                v179 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              v181 = v345;
              if ((_QWORD)v345)
              {
                v182 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
                if (*((_QWORD *)&v345 + 1))
                {
                  v183 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                  do
                    v184 = __ldxr(v183);
                  while (__stxr(v184 + 1, v183));
                  do
                    v185 = __ldaxr(v183);
                  while (__stlxr(v185 - 1, v183));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                  v186 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
                  v181 = v345;
                  if (*((_QWORD *)&v345 + 1))
                  {
                    v187 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                    do
                      v188 = __ldxr(v187);
                    while (__stxr(v188 + 1, v187));
                    do
                      v189 = __ldaxr(v187);
                    while (__stlxr(v189 - 1, v187));
                    if (!v189)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                }
                (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v181 + 96))(&__p, v181, 0);
                v190 = *(_QWORD *)&v360[8];
                if (*(_QWORD *)&v360[8])
                {
LABEL_318:
                  v191 = *(std::__shared_weak_count **)&v360[16];
                  if (*(_QWORD *)&v360[16])
                  {
                    v192 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                    do
                      v193 = __ldxr(v192);
                    while (__stxr(v193 + 1, v192));
                    do
                      v194 = __ldaxr(v192);
                    while (__stlxr(v194 - 1, v192));
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                      std::__shared_weak_count::__release_weak(v191);
                    }
                    v190 = *(_QWORD *)&v360[8];
                    v195 = *(std::__shared_weak_count **)&v360[16];
                    if (*(_QWORD *)&v360[16])
                    {
                      v196 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                      do
                        v197 = __ldxr(v196);
                      while (__stxr(v197 + 1, v196));
                      do
                        v198 = __ldaxr(v196);
                      while (__stlxr(v198 - 1, v196));
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                        std::__shared_weak_count::__release_weak(v195);
                      }
                    }
                  }
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v190 + 96))(&v343, v190, 1);
                  if (!*(_DWORD *)&v360[60])
                    goto LABEL_360;
                  goto LABEL_334;
                }
              }
              else
              {
                __p.__r_.__value_.__r.__words[0] = 0;
                v190 = *(_QWORD *)&v360[8];
                if (*(_QWORD *)&v360[8])
                  goto LABEL_318;
              }
              v343 = 0;
              if (!*(_DWORD *)&v360[60])
              {
LABEL_360:
                v218 = v343;
                v343 = 0;
                if (v218)
                  (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
                v219 = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = 0;
                if (v219)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v219 + 8))(v219);
                v220 = *(std::__shared_weak_count **)&v360[16];
                if (*(_QWORD *)&v360[16])
                {
                  v221 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
                  do
                    v222 = __ldaxr(v221);
                  while (__stlxr(v222 - 1, v221));
                  if (!v222)
                  {
                    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                    std::__shared_weak_count::__release_weak(v220);
                  }
                }
                v334 = &off_24EC76F28;
                v223 = v336;
                if (v336)
                {
                  v224 = (unint64_t *)&v336->__shared_owners_;
                  do
                    v225 = __ldaxr(v224);
                  while (__stlxr(v225 - 1, v224));
                  if (!v225)
                  {
                    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                    std::__shared_weak_count::__release_weak(v223);
                  }
                }
                if (v339)
                {
                  (*(void (**)(std::string *))__s.__r_.__value_.__l.__data_)(&__s);
                }
                else if (v338 < 0)
                {
                  operator delete((void *)__s.__r_.__value_.__l.__size_);
                }
                v226 = v341;
                if (v341)
                {
                  v227 = (unint64_t *)&v341->__shared_owners_;
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                    std::__shared_weak_count::__release_weak(v226);
                  }
                }
                v229 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
                if (*((_QWORD *)&v345 + 1))
                {
                  v230 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                    std::__shared_weak_count::__release_weak(v229);
                  }
                }
                v232 = v326;
                v324 = &off_24EC715B8;
                if (v326)
                {
                  v233 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v234 = __ldaxr(v233);
                  while (__stlxr(v234 - 1, v233));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
                goto LABEL_393;
              }
LABEL_334:
              if (*(_DWORD *)&v360[56])
              {
                v199 = 0;
                v200 = 1;
                v201 = 1.0 / a3;
                do
                {
                  if (v200)
                  {
                    v202 = (int)(float)(v201 * (float)v199);
                    v203 = *(unsigned int *)&v360[48];
                    v316 = v199;
                    v204 = *(_QWORD *)&v360[24] + 2 * HIDWORD(v361) * v199;
                    v205 = 0;
                    if (*(_QWORD *)&v360[24])
                    {
                      v206 = 0;
                      while (1)
                      {
                        v207 = *(_DWORD *)&v346[40];
                        v208 = *(_DWORD *)&v346[44];
                        v209 = *(_QWORD *)v346;
                        if (!*(_QWORD *)v346
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                        {
                          break;
                        }
                        *(_QWORD *)(v204 + 2 * v205) = *(_QWORD *)(v209
                                                                                 + 2
                                                                                 * (v208 * v202
                                                                                                + v207
                                                                                                * (int)(float)(v201 * (float)v206++)));
                        v200 = *(_DWORD *)&v360[56];
                        v205 += v203;
                        if (v206 >= *(unsigned int *)&v360[56])
                          goto LABEL_336;
                      }
LABEL_466:
                      abort();
                    }
                    do
                    {
                      v210 = *(_DWORD *)&v346[40];
                      v211 = *(_DWORD *)&v346[44];
                      v212 = *(_QWORD *)v346;
                      if (!*(_QWORD *)v346
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_466;
                      }
                      v213 = *(_QWORD *)(v212
                                       + 2
                                       * (v211 * v202
                                                      + v210 * (int)(float)(v201 * (float)v205)));
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                      v214 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v214 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v215 = qword_255795648;
                        for (i = qword_255795650; v215 != i; v215 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v215)(*(_QWORD *)(v215 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                      }
                      v217 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                      *(_QWORD *)(v204 + 2 * (v205++ * v203)) = v213;
                      v200 = *(_DWORD *)&v360[56];
                    }
                    while (v205 < *(unsigned int *)&v360[56]);
LABEL_336:
                    v5 = v317;
                    v199 = v316;
                  }
                  ++v199;
                }
                while (v199 < *(_DWORD *)&v360[60]);
              }
              goto LABEL_360;
            }
            v98 = v325;
          }
          v327 = &off_24EC715B8;
          *(_QWORD *)&v328 = v98;
          *((_QWORD *)&v328 + 1) = v326;
          v325 = 0;
          v326 = 0;
          v324 = &off_24EC715B8;
LABEL_393:
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
          *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = v328;
          if (*((_QWORD *)&v328 + 1))
          {
            v235 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
          }
          sub_22429724C((uint64_t)&__s, (uint64_t)&v344);
          *(_QWORD *)v360 = &off_24EC28CD0;
          *(_OWORD *)&v360[8] = v345;
          *(_OWORD *)&v360[24] = *(_OWORD *)v346;
          *(_OWORD *)&v360[38] = *(_OWORD *)&v346[14];
          v344 = &off_24EC26FA8;
          sub_2232BE164((uint64_t)v360, (uint64_t)&v345);
          *(_QWORD *)v360 = &off_24EC28CD0;
          v237 = *(std::__shared_weak_count **)&v360[16];
          v20 = v314;
          if (*(_QWORD *)&v360[16])
          {
            v238 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
          v240 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
          if (__s.__r_.__value_.__r.__words[2])
          {
            v241 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
          v327 = &off_24EC715B8;
          v156 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
          if (!*((_QWORD *)&v328 + 1))
            goto LABEL_411;
          v243 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v158 = __ldaxr(v243);
          while (__stlxr(v158 - 1, v243));
LABEL_409:
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
LABEL_411:
          if (!v331)
            goto LABEL_417;
          *(_QWORD *)v329 = &off_24EC611E0;
          v53 = *(std::__shared_weak_count **)&v329[16];
          if (!*(_QWORD *)&v329[16])
            goto LABEL_417;
          v244 = (unint64_t *)(*(_QWORD *)&v329[16] + 8);
          do
            v55 = __ldaxr(v244);
          while (__stlxr(v55 - 1, v244));
          goto LABEL_415;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v278 = atomic_load((unsigned __int8 *)&qword_2540CD050);
        if ((v278 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD050))
        {
LABEL_469:
          v279 = sub_2232BE4E0();
          v344 = "Attempting to create an ";
          *(_QWORD *)&v345 = 24;
          v280 = &qword_2540CD1B8;
          v281 = byte_2540CD1CF;
          if (byte_2540CD1CF < 0)
          {
            v281 = unk_2540CD1C0;
            v280 = (uint64_t *)qword_2540CD1B8;
          }
          *((_QWORD *)&v345 + 1) = v280;
          *(_QWORD *)v346 = v281;
          *(_QWORD *)&v346[8] = " from an ";
          *(_QWORD *)&v346[16] = 9;
          size = HIBYTE(v279->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0)
            v283 = v279;
          else
            v283 = (std::string *)v279->__r_.__value_.__r.__words[0];
          if ((size & 0x80u) != 0)
            size = v279->__r_.__value_.__l.__size_;
          *(_QWORD *)&v346[24] = v283;
          *(_QWORD *)&v346[32] = size;
          sub_2231A9820((uint64_t)&v344, (uint64_t)&v346[40], 0, 0, &__p);
          v284 = *(_QWORD *)(v317 + 136);
          v285 = *(std::__shared_weak_count **)(v317 + 144);
          if (v285)
          {
            v286 = (unint64_t *)&v285->__shared_owners_;
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
            do
              v288 = __ldaxr(v286);
            while (__stlxr(v288 - 1, v286));
            if (!v288)
            {
              ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
              std::__shared_weak_count::__release_weak(v285);
            }
            if (v284)
            {
              v284 = *(_QWORD *)(v317 + 136);
              v292 = *(std::__shared_weak_count **)(v317 + 144);
              if (v292)
              {
                v293 = (unint64_t *)&v292->__shared_owners_;
                do
                  v294 = __ldxr(v293);
                while (__stxr(v294 + 1, v293));
                do
                  v295 = __ldaxr(v293);
                while (__stlxr(v295 - 1, v293));
                if (!v295)
                {
                  ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                  std::__shared_weak_count::__release_weak(v292);
                }
              }
              goto LABEL_504;
            }
          }
          else if (v284)
          {
LABEL_504:
            v296 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v284 + 80))(v284);
            v298 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v298 = __p.__r_.__value_.__l.__size_;
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            v344 = p_p;
            *(_QWORD *)&v345 = v298;
            *((_QWORD *)&v345 + 1) = " but the other image contains an incompatible buffer type ";
            *(_QWORD *)v346 = 58;
            *(_QWORD *)&v346[8] = v296;
            *(_QWORD *)&v346[16] = v297;
            sub_2231A9820((uint64_t)&v344, (uint64_t)&v346[24], 0, 0, &__dst);
            LOBYTE(v289) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_514:
            if ((v289 & 0x80) != 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::logic_error::logic_error(exception, &__dst);
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
          }
          v289 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v290 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v290 = __p.__r_.__value_.__l.__size_;
          v291 = v290 + 46;
          if (v290 + 46 >= 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          if (v291 > 0x16)
          {
            v302 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v291 | 7) != 0x17)
              v302 = v291 | 7;
            v303 = v302 + 1;
            p_dst = (std::string *)operator new(v302 + 1);
            __dst.__r_.__value_.__l.__size_ = v290 + 46;
            __dst.__r_.__value_.__r.__words[2] = v303 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            if (!v290)
              goto LABEL_513;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v290 + 46;
          }
          if (v289 >= 0)
            v301 = &__p;
          else
            v301 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(p_dst, v301, v290);
LABEL_513:
          strcpy((char *)p_dst + v290, " but the other image does not contain a buffer");
          goto LABEL_514;
        }
        HIBYTE(v342[2]) = 16;
        strcpy((char *)v342, "ConstSharedImage");
        v304 = sub_2231EF4F0();
        if (SHIBYTE(v304->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(&__s, v304->__r_.__value_.__l.__data_, v304->__r_.__value_.__l.__size_);
        }
        else
        {
          v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
          __s.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v305;
        }
        sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v344);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v306 = sub_2232101F4();
        if (*((char *)v306 + 23) < 0)
        {
          sub_223197FA4(&__s, *(void **)v306, *((_QWORD *)v306 + 1));
        }
        else
        {
          v307 = *v306;
          __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v306 + 2);
          *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v307;
        }
        sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v346);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        sub_22319BD1C(&v334, (uint64_t)&v344, 2uLL);
        sub_2245730F4((char *)v342, (uint64_t *)&v334, (std::string *)&qword_2540CD1B8, v308, v309);
        v310 = v334;
        if (v334)
        {
          v311 = v335;
          v312 = v334;
          if (v335 != v334)
          {
            do
            {
              if (*((char *)v311 - 1) < 0)
                operator delete((void *)*(v311 - 3));
              v311 -= 3;
            }
            while (v311 != v310);
            v312 = v334;
          }
          v335 = v310;
          operator delete(v312);
          if ((v346[23] & 0x80000000) != 0)
          {
LABEL_535:
            operator delete(*(void **)v346);
            if ((SHIBYTE(v345) & 0x80000000) == 0)
              goto LABEL_536;
            goto LABEL_547;
          }
        }
        else if ((v346[23] & 0x80000000) != 0)
        {
          goto LABEL_535;
        }
        if ((SHIBYTE(v345) & 0x80000000) == 0)
        {
LABEL_536:
          if ((SHIBYTE(v342[2]) & 0x80000000) == 0)
          {
LABEL_538:
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD1B8, &dword_22314D000);
            __cxa_guard_release(&qword_2540CD050);
            goto LABEL_469;
          }
LABEL_537:
          operator delete(v342[0]);
          goto LABEL_538;
        }
LABEL_547:
        operator delete(v344);
        if ((SHIBYTE(v342[2]) & 0x80000000) == 0)
          goto LABEL_538;
        goto LABEL_537;
      }
LABEL_128:
      v329[0] = 0;
      v331 = 0;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 431, (uint64_t)"!CV3D_TARGET_IS_PUBLIC", 22, (uint64_t)"POR should use CVBuffer", 23, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = (float)((float)*(unsigned int *)(v5 + 184) * a3);
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = (float)((float)*(unsigned int *)(v5 + 188) * a3);
      *(_QWORD *)v360 = &off_24EC28F30;
      v342[0] = &off_24EC257D0;
      sub_22449AB78(&__p, (uint64_t)&v344);
      v75 = (char *)operator new();
      *(_QWORD *)v75 = &off_24EC25818;
      *((_QWORD *)v75 + 7) = *(_QWORD *)&v346[32];
      v76 = *(_QWORD *)&v347[24];
      *((_QWORD *)v75 + 10) = *(_QWORD *)v347;
      *(_OWORD *)(v75 + 8) = v345;
      *(_OWORD *)(v75 + 24) = *(_OWORD *)v346;
      *(_OWORD *)(v75 + 40) = *(_OWORD *)&v346[16];
      *((_OWORD *)v75 + 4) = *(_OWORD *)&v346[40];
      *((_QWORD *)v75 + 13) = v76;
      *(_OWORD *)(v75 + 88) = *(_OWORD *)&v347[8];
      v334 = v75;
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      v77 = (_QWORD *)operator new();
      *v77 = &off_24EC258B0;
      v77[1] = 0;
      v77[2] = 0;
      v77[3] = v75;
      __s.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
      v334 = 0;
      sub_2232C3270((uint64_t *)&v360[8], (uint64_t *)&__s);
      v78 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__l.__size_)
      {
        v79 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v334;
      v334 = 0;
      if (v81)
      {
        v82 = (void *)v81[9];
        if (v82)
        {
          v83 = !*((_DWORD *)v81 + 24) || *((_DWORD *)v81 + 23) == 0;
          v84 = v83 || *((_DWORD *)v81 + 22) == 0;
          v85 = v84 ? 0 : *((_DWORD *)v81 + 24);
          if (v85 * (*((_DWORD *)v81 + 27) >> 1) != -1)
            goto LABEL_148;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v82 = (void *)v81[9];
          if (v82)
LABEL_148:
            free(v82);
        }
        v81[9] = 0;
        MEMORY[0x227684CE8](v81, 0x1091C40A44A61E0);
      }
      v86 = *(_QWORD *)(v5 + 136);
      v87 = *(std::__shared_weak_count **)(v5 + 144);
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        do
          v90 = __ldaxr(v88);
        while (__stlxr(v90 - 1, v88));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
        if (!v86)
          goto LABEL_210;
        v86 = *(_QWORD *)(v5 + 136);
        v91 = *(std::__shared_weak_count **)(v5 + 144);
        if (v91)
        {
          v92 = (unint64_t *)&v91->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
          do
            v94 = __ldaxr(v92);
          while (__stlxr(v94 - 1, v92));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
      }
      else if (!v86)
      {
        goto LABEL_210;
      }
      if (*(_BYTE *)(v5 + 201))
      {
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v86 + 96))(&v344, v86, 0);
        v116 = *(_QWORD *)&v360[8];
        v117 = *(std::__shared_weak_count **)&v360[16];
        v313 = v6;
        if (*(_QWORD *)&v360[16])
          goto LABEL_198;
        goto LABEL_211;
      }
LABEL_210:
      v344 = 0;
      v116 = *(_QWORD *)&v360[8];
      v117 = *(std::__shared_weak_count **)&v360[16];
      v313 = v6;
      if (*(_QWORD *)&v360[16])
      {
LABEL_198:
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
        do
          v120 = __ldaxr(v118);
        while (__stlxr(v120 - 1, v118));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
        if (!v116)
          goto LABEL_215;
        v116 = *(_QWORD *)&v360[8];
        v121 = *(std::__shared_weak_count **)&v360[16];
        if (*(_QWORD *)&v360[16])
        {
          v122 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
          do
            v124 = __ldaxr(v122);
          while (__stlxr(v124 - 1, v122));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
LABEL_212:
        if (HIBYTE(v362))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v116 + 96))(&__s, v116, 1);
          if (!*(_DWORD *)&v360[60])
            goto LABEL_243;
          goto LABEL_216;
        }
LABEL_215:
        __s.__r_.__value_.__r.__words[0] = 0;
        if (!*(_DWORD *)&v360[60])
        {
LABEL_243:
          v144 = __s.__r_.__value_.__r.__words[0];
          __s.__r_.__value_.__r.__words[0] = 0;
          if (v144)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v144 + 8))(v144);
          v145 = v344;
          v344 = 0;
          v6 = v313;
          if (v145)
            (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
          v344 = &off_24EC26FA8;
          v146 = *(_QWORD *)&v360[8];
          v147 = *(std::__shared_weak_count **)&v360[16];
          if (*(_QWORD *)&v360[16])
          {
            v148 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
            do
              v149 = __ldxr(v148);
            while (__stxr(v149 + 1, v148));
            v150 = v362;
            do
              v151 = __ldxr(v148);
            while (__stxr(v151 + 1, v148));
            *(_OWORD *)&v346[8] = *(_OWORD *)&v360[32];
            *(_OWORD *)&v346[24] = *(_OWORD *)&v360[48];
            v152 = *(_QWORD *)&v360[24];
            *(_QWORD *)&v346[40] = v361;
            do
              v153 = __ldxr(v148);
            while (__stxr(v153 + 1, v148));
            *(_QWORD *)&v345 = v146;
            *((_QWORD *)&v345 + 1) = v147;
            *(_QWORD *)v346 = v152;
            *(_WORD *)&v346[48] = v150;
            do
              v154 = __ldaxr(v148);
            while (__stlxr(v154 - 1, v148));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
            do
              v155 = __ldaxr(v148);
            while (__stlxr(v155 - 1, v148));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          else
          {
            v345 = *(unint64_t *)&v360[8];
            *(_QWORD *)v346 = *(_QWORD *)&v360[24];
            *(_OWORD *)&v346[8] = *(_OWORD *)&v360[32];
            *(_OWORD *)&v346[24] = *(_OWORD *)&v360[48];
            *(_QWORD *)&v346[40] = v361;
            *(_WORD *)&v346[48] = v362;
          }
          *(_QWORD *)v360 = &off_24EC28F30;
          v156 = *(std::__shared_weak_count **)&v360[16];
          v20 = v314;
          if (!*(_QWORD *)&v360[16])
            goto LABEL_411;
          v157 = (unint64_t *)(*(_QWORD *)&v360[16] + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          goto LABEL_409;
        }
LABEL_216:
        if (*(_DWORD *)&v360[56])
        {
          v125 = 0;
          v126 = 1;
          v127 = 1.0 / a3;
          do
          {
            if (v126)
            {
              v128 = (int)(float)(v127 * (float)v125);
              v129 = *(unsigned int *)&v360[48];
              v315 = v125;
              v130 = *(_QWORD *)&v360[24] + 2 * HIDWORD(v361) * v125;
              v131 = 0;
              if (*(_QWORD *)&v360[24])
              {
                v132 = 0;
                while (1)
                {
                  v133 = *(_DWORD *)(v317 + 192);
                  v134 = *(_DWORD *)(v317 + 196);
                  v135 = *(_QWORD *)(v317 + 152);
                  if (!v135
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    break;
                  }
                  *(_QWORD *)(v130 + 2 * v131) = *(_QWORD *)(v135
                                                                           + 2
                                                                           * (v134 * v128
                                                                                          + v133
                                                                                          * (int)(float)(v127 * (float)v132++)));
                  v126 = *(_DWORD *)&v360[56];
                  v131 += v129;
                  if (v132 >= *(unsigned int *)&v360[56])
                    goto LABEL_218;
                }
LABEL_464:
                abort();
              }
              do
              {
                v136 = *(_DWORD *)(v317 + 192);
                v137 = *(_DWORD *)(v317 + 196);
                v138 = *(_QWORD *)(v317 + 152);
                if (!v138
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  goto LABEL_464;
                }
                v139 = *(_QWORD *)(v138
                                 + 2
                                 * (v137 * v128 + v136 * (int)(float)(v127 * (float)v131)));
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v140 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v141 = qword_255795648;
                  v142 = qword_255795650;
                  while (v141 != v142)
                  {
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v141)(*(_QWORD *)(v141 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    v141 += 16;
                  }
                }
                v143 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  abort();
                qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                *(_QWORD *)(v130 + 2 * (v131++ * v129)) = v139;
                v126 = *(_DWORD *)&v360[56];
              }
              while (v131 < *(unsigned int *)&v360[56]);
LABEL_218:
              v5 = v317;
              v125 = v315;
            }
            ++v125;
          }
          while (v125 < *(_DWORD *)&v360[60]);
        }
        goto LABEL_243;
      }
LABEL_211:
      if (!v116)
        goto LABEL_215;
      goto LABEL_212;
    }
LABEL_103:
    v317 = v5;
    if (v58)
      goto LABEL_104;
    goto LABEL_128;
  }
  *(_QWORD *)v329 = &off_24EC28F30;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC257D0;
  sub_22449AA08((uint64_t)&v344);
  v30 = operator new();
  *(_QWORD *)v30 = &off_24EC25818;
  *(_QWORD *)(v30 + 56) = *(_QWORD *)&v346[32];
  v31 = *(_QWORD *)&v347[24];
  *(_QWORD *)(v30 + 80) = *(_QWORD *)v347;
  *(_OWORD *)(v30 + 8) = v345;
  *(_OWORD *)(v30 + 24) = *(_OWORD *)v346;
  *(_OWORD *)(v30 + 40) = *(_OWORD *)&v346[16];
  *(_OWORD *)(v30 + 64) = *(_OWORD *)&v346[40];
  *(_QWORD *)(v30 + 104) = v31;
  *(_OWORD *)(v30 + 88) = *(_OWORD *)&v347[8];
  *(_QWORD *)v360 = v30;
  v32 = (_QWORD *)operator new();
  *v32 = &off_24EC258B0;
  v32[1] = 0;
  v32[2] = 0;
  v32[3] = v30;
  *(_QWORD *)&v360[8] = v32;
  v342[0] = 0;
  sub_2232C3270((uint64_t *)&v329[8], (uint64_t *)v360);
  v33 = *(std::__shared_weak_count **)&v360[8];
  if (!*(_QWORD *)&v360[8])
    goto LABEL_54;
  v34 = (unint64_t *)(*(_QWORD *)&v360[8] + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v36 = v342[0];
    v342[0] = 0;
    if (!v36)
      goto LABEL_70;
  }
  else
  {
LABEL_54:
    v36 = v342[0];
    v342[0] = 0;
    if (!v36)
      goto LABEL_70;
  }
  v37 = (void *)v36[9];
  if (v37)
  {
    v38 = !*((_DWORD *)v36 + 24) || *((_DWORD *)v36 + 23) == 0;
    v39 = v38 || *((_DWORD *)v36 + 22) == 0;
    v40 = v39 ? 0 : *((_DWORD *)v36 + 24);
    if (v40 * (*((_DWORD *)v36 + 27) >> 1) != -1)
      goto LABEL_68;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v37 = (void *)v36[9];
    if (v37)
LABEL_68:
      free(v37);
  }
  v36[9] = 0;
  MEMORY[0x227684CE8](v36, 0x1091C40A44A61E0);
LABEL_70:
  v344 = &off_24EC26FA8;
  v41 = *(_QWORD *)&v329[8];
  v42 = *(std::__shared_weak_count **)&v329[16];
  if (*(_QWORD *)&v329[16])
  {
    v43 = v20;
    v44 = (unint64_t *)(*(_QWORD *)&v329[16] + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v46 = v330;
    do
      v47 = __ldxr(v44);
    while (__stxr(v47 + 1, v44));
    *(_OWORD *)&v346[8] = *(_OWORD *)&v329[32];
    *(_OWORD *)&v346[24] = *(_OWORD *)&v329[48];
    v48 = *(_QWORD *)&v329[24];
    *(_QWORD *)&v346[40] = *(_QWORD *)&v329[64];
    do
      v49 = __ldxr(v44);
    while (__stxr(v49 + 1, v44));
    *(_QWORD *)&v345 = v41;
    *((_QWORD *)&v345 + 1) = v42;
    *(_QWORD *)v346 = v48;
    *(_WORD *)&v346[48] = v46;
    do
      v50 = __ldaxr(v44);
    while (__stlxr(v50 - 1, v44));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    do
      v51 = __ldaxr(v44);
    while (__stlxr(v51 - 1, v44));
    v20 = v43;
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    v345 = *(unint64_t *)&v329[8];
    *(_QWORD *)v346 = *(_QWORD *)&v329[24];
    *(_OWORD *)&v346[8] = *(_OWORD *)&v329[32];
    *(_OWORD *)&v346[24] = *(_OWORD *)&v329[48];
    *(_QWORD *)&v346[40] = *(_QWORD *)&v329[64];
    *(_WORD *)&v346[48] = v330;
  }
  *(_QWORD *)v329 = &off_24EC28F30;
  v53 = *(std::__shared_weak_count **)&v329[16];
  if (*(_QWORD *)&v329[16])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v329[16] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
LABEL_415:
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
LABEL_417:
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
  v19 = v345;
  v320 = *(_OWORD *)v346;
  v321 = *(_OWORD *)&v346[16];
  v322 = *(_OWORD *)&v346[32];
  v323 = *(_WORD *)&v346[48];
  v26 = *(unsigned __int8 *)(v6 + 208);
  if (v26 != 1)
    goto LABEL_43;
LABEL_418:
  if (!v26)
    goto LABEL_427;
  v245 = *(std::__shared_weak_count **)(v6 + 144);
  *(_QWORD *)(v6 + 136) = v19;
  *(_QWORD *)(v6 + 144) = v3;
  if (v245)
  {
    v246 = (unint64_t *)&v245->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v321;
  *(_OWORD *)(v6 + 152) = v320;
  *(_OWORD *)(v6 + 168) = v248;
  *(_OWORD *)(v6 + 184) = v322;
  *(_WORD *)(v6 + 200) = v323;
  if ((v319 & 0x80000000) == 0)
    goto LABEL_433;
LABEL_425:
  operator delete(v318[0]);
  v249 = *(_QWORD *)(v5 + 216);
  if (!v249)
    return;
LABEL_434:
  v344 = operator new(0x20uLL);
  v345 = xmmword_2245B8D70;
  strcpy((char *)v344, "ActiveDepthMeasurementMask");
  sub_223C303A8((uint64_t)v329, v249, (uint64_t)&v344, a3);
  if (SHIBYTE(v345) < 0)
    operator delete(v344);
  sub_223C30C48((uint64_t)&v344, (uint64_t)v329);
  v252 = (char *)operator new(0x130uLL);
  *((_QWORD *)v252 + 1) = 0;
  *((_QWORD *)v252 + 2) = 0;
  *(_QWORD *)v252 = &off_24EC612D8;
  *((_QWORD *)v252 + 3) = &off_24EC21328;
  v253 = v345;
  v345 = 0uLL;
  v254 = *(_OWORD *)v346;
  *((_OWORD *)v252 + 2) = v253;
  *((_OWORD *)v252 + 3) = v254;
  *(_OWORD *)(v252 + 58) = *(_OWORD *)&v346[10];
  *((_QWORD *)v252 + 10) = &off_24EC216B8;
  v255 = *(_OWORD *)v347;
  *(_OWORD *)(v252 + 88) = *(_OWORD *)&v346[40];
  *(_QWORD *)&v346[40] = 0;
  *(_QWORD *)&v346[48] = 0;
  v256 = *(_OWORD *)&v347[16];
  v257 = v348;
  *((_QWORD *)v252 + 19) = v349;
  *(_OWORD *)(v252 + 136) = v257;
  *(_OWORD *)(v252 + 120) = v256;
  *(_OWORD *)(v252 + 104) = v255;
  *((_WORD *)v252 + 80) = v350;
  *((_QWORD *)v252 + 21) = &off_24EC617D0;
  v258 = v351;
  v351 = 0uLL;
  v259 = v356;
  *((_OWORD *)v252 + 15) = v355;
  *((_OWORD *)v252 + 16) = v259;
  *((_OWORD *)v252 + 17) = v357;
  *((_QWORD *)v252 + 36) = v358;
  v260 = v352;
  *((_OWORD *)v252 + 11) = v258;
  *((_OWORD *)v252 + 12) = v260;
  v261 = v354;
  *((_OWORD *)v252 + 13) = v353;
  *((_OWORD *)v252 + 14) = v261;
  *((_WORD *)v252 + 148) = v359;
  v262 = *(std::__shared_weak_count **)(v6 + 224);
  *(_QWORD *)(v6 + 216) = v252 + 24;
  *(_QWORD *)(v6 + 224) = v252;
  if (v262)
  {
    v263 = (unint64_t *)&v262->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
  if (*((_QWORD *)&v351 + 1))
  {
    v266 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = *(std::__shared_weak_count **)&v346[48];
  if (*(_QWORD *)&v346[48])
  {
    v269 = (unint64_t *)(*(_QWORD *)&v346[48] + 8);
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  v344 = &off_24EC21328;
  v271 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
  if (*((_QWORD *)&v345 + 1))
  {
    v272 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  *(_QWORD *)v329 = &off_24EC21328;
  v274 = *(std::__shared_weak_count **)&v329[16];
  if (*(_QWORD *)&v329[16])
  {
    v275 = (unint64_t *)(*(_QWORD *)&v329[16] + 8);
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
}

void sub_223C2FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void **__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a68;
  char a72;
  void *a73;
  char a74;
  std::__shared_weak_count *v74;
  void *v75;
  uint64_t v76;
  void **v78;
  void **v79;
  unint64_t *p_shared_owners;
  unint64_t v81;

  if (__p)
  {
    v78 = (void **)a50;
    v79 = __p;
    if ((void **)a50 != __p)
    {
      do
      {
        if (*((char *)v78 - 1) < 0)
          operator delete(*(v78 - 3));
        v78 -= 3;
      }
      while (v78 != __p);
      v79 = __p;
    }
    operator delete(v79);
  }
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a68);
  if (a65 < 0)
    operator delete(a60);
  __cxa_guard_abort(&qword_2540CD050);
  __cxa_free_exception(v75);
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (a17 < 0)
    operator delete(a12);
  sub_2232565CC(v76);
  _Unwind_Resume(a1);
}

void sub_223C303A8(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  BOOL v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)();
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int16 v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD v84[2];
  std::__shared_weak_count *v85;
  uint64_t (**v86)();
  __int128 v87;
  _OWORD v88[2];
  _QWORD v89[2];
  std::__shared_weak_count *v90;
  _QWORD v91[2];
  std::__shared_weak_count *v92;
  uint64_t (**v93)();
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  __int128 v97;
  __int16 v98;
  char v99;
  uint64_t (**v100)();
  __int128 v101;
  _BYTE v102[30];

  if (a4 <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 422, (uint64_t)"scale_factor > 0.f", 18, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_DWORD *)(a2 + 32))
    v8 = *(_DWORD *)(a2 + 36) == 0;
  else
    v8 = 1;
  if (!v8)
  {
    sub_2238B0960(a2, (uint64_t)&v93);
    if (v99)
    {
      v19 = v94;
      v20 = v95;
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      sub_224276BD8(v19, v89);
      sub_223C330CC(v91, (uint64_t)v89, a3, a4);
      v89[0] = &off_24EC715B8;
      v24 = v90;
      if (v90)
      {
        v25 = (unint64_t *)&v90->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v84[0] = &off_24EC715B8;
      v84[1] = v91[1];
      v85 = v92;
      if (v92)
      {
        v27 = (unint64_t *)&v92->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      sub_22429724C((uint64_t)v84, (uint64_t)&v100);
      v86 = &off_24EC28CD0;
      v87 = v101;
      v88[0] = *(_OWORD *)v102;
      *(_OWORD *)((char *)v88 + 14) = *(_OWORD *)&v102[14];
      *(_QWORD *)a1 = &off_24EC21328;
      sub_2232BD340((uint64_t)&v86, a1 + 8);
      v86 = &off_24EC28CD0;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v84[0] = &off_24EC715B8;
      v32 = v85;
      if (v85)
      {
        v33 = (unint64_t *)&v85->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v91[0] = &off_24EC715B8;
      v35 = v92;
      if (v92)
      {
        v36 = (unint64_t *)&v92->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        goto LABEL_120;
      }
      goto LABEL_122;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 431, (uint64_t)"!CV3D_TARGET_IS_PUBLIC", 22, (uint64_t)"POR should use CVBuffer", 23, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v83 = (float)((float)*(unsigned int *)(a2 + 32) * a4) | ((unint64_t)(float)((float)*(unsigned int *)(a2 + 36) * a4) << 32);
    v100 = &off_24EC21040;
    sub_2231C12FC(&v83, (uint64_t *)&v101);
    v43 = *(_QWORD *)(a2 + 8);
    v44 = *(std::__shared_weak_count **)(a2 + 16);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      do
        v47 = __ldaxr(v45);
      while (__stlxr(v47 - 1, v45));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      if (!v43)
        goto LABEL_85;
      v43 = *(_QWORD *)(a2 + 8);
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    else if (!v43)
    {
      goto LABEL_85;
    }
    if (*(_BYTE *)(a2 + 49))
    {
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)v43 + 96))(&v86, v43, 0);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      v52 = v101;
      if (*((_QWORD *)&v101 + 1))
        goto LABEL_73;
      goto LABEL_86;
    }
LABEL_85:
    v86 = 0;
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    v52 = v101;
    if (*((_QWORD *)&v101 + 1))
    {
LABEL_73:
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      do
        v56 = __ldaxr(v54);
      while (__stlxr(v56 - 1, v54));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      if (!v52)
        goto LABEL_90;
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      v52 = v101;
      if (*((_QWORD *)&v101 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        do
          v60 = __ldaxr(v58);
        while (__stlxr(v60 - 1, v58));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
LABEL_87:
      if (v102[25])
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v52 + 96))(v91, v52, 1);
        v61 = *(_DWORD *)&v102[12];
        if (!*(_DWORD *)&v102[12])
          goto LABEL_98;
        goto LABEL_91;
      }
LABEL_90:
      v91[0] = 0;
      v61 = *(_DWORD *)&v102[12];
      if (!*(_DWORD *)&v102[12])
        goto LABEL_98;
LABEL_91:
      if (*(_DWORD *)&v102[8])
      {
        v62 = 0;
        v63 = 1;
        do
        {
          if (v63)
          {
            v64 = 0;
            v65 = 0;
            v66 = *(_DWORD *)&v102[16];
            v67 = *(_QWORD *)v102 + 2 * *(_DWORD *)&v102[20] * v62;
            do
            {
              *(_WORD *)(v67 + 2 * v64) = *(_WORD *)(*(_QWORD *)(a2 + 24)
                                                     + 2
                                                     * (*(_DWORD *)(a2 + 44)
                                                                    * (int)(float)((float)(1.0 / a4) * (float)v62)
                                                                    + *(_DWORD *)(a2 + 40)
                                                                    * (int)(float)((float)(1.0 / a4)
                                                                                 * (float)v65++)));
              v63 = *(_DWORD *)&v102[8];
              v64 += v66;
            }
            while (v65 < *(unsigned int *)&v102[8]);
            v61 = *(_DWORD *)&v102[12];
          }
          ++v62;
        }
        while (v62 < v61);
      }
LABEL_98:
      v68 = v91[0];
      v91[0] = 0;
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      v69 = v86;
      v86 = 0;
      if (v69)
        (*((void (**)(uint64_t (**)()))*v69 + 1))(v69);
      *(_QWORD *)a1 = &off_24EC21328;
      v70 = v101;
      if (*((_QWORD *)&v101 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
        v73 = *(_WORD *)&v102[24];
        do
          v74 = __ldxr(v71);
        while (__stxr(v74 + 1, v71));
        v75 = *(_QWORD *)v102;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)&v102[8];
        do
          v76 = __ldxr(v71);
        while (__stxr(v76 + 1, v71));
        *(_OWORD *)(a1 + 8) = v70;
        *(_QWORD *)(a1 + 24) = v75;
        *(_WORD *)(a1 + 48) = v73;
        do
          v77 = __ldaxr(v71);
        while (__stlxr(v77 - 1, v71));
        if (!v77)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
        }
        do
          v78 = __ldaxr(v71);
        while (__stlxr(v78 - 1, v71));
        if (!v78)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
        }
      }
      else
      {
        v79 = *(_WORD *)&v102[24];
        v80 = *(_QWORD *)v102;
        *(_QWORD *)(a1 + 8) = v101;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v80;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)&v102[8];
        *(_WORD *)(a1 + 48) = v79;
      }
      v100 = &off_24EC21040;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v37 = __ldaxr(v81);
        while (__stlxr(v37 - 1, v81));
LABEL_120:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
LABEL_122:
      if (v99)
      {
        v93 = &off_24EC5C140;
        v40 = v95;
        if (v95)
        {
          v82 = (unint64_t *)&v95->__shared_owners_;
          do
            v42 = __ldaxr(v82);
          while (__stlxr(v42 - 1, v82));
LABEL_126:
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
          return;
        }
      }
      return;
    }
LABEL_86:
    if (!v52)
      goto LABEL_90;
    goto LABEL_87;
  }
  v93 = &off_24EC21040;
  sub_2231BF5DC(&v94);
  *(_QWORD *)a1 = &off_24EC21328;
  v9 = v94;
  v10 = v95;
  if (v95)
  {
    v11 = (unint64_t *)&v95->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = v98;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    v15 = v96;
    *(_OWORD *)(a1 + 32) = v97;
    do
      v16 = __ldxr(v11);
    while (__stxr(v16 + 1, v11));
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v15;
    *(_WORD *)(a1 + 48) = v13;
    do
      v17 = __ldaxr(v11);
    while (__stlxr(v17 - 1, v11));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    do
      v18 = __ldaxr(v11);
    while (__stlxr(v18 - 1, v11));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v38 = v98;
    v39 = v96;
    *(_QWORD *)(a1 + 8) = v94;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v39;
    *(_OWORD *)(a1 + 32) = v97;
    *(_WORD *)(a1 + 48) = v38;
  }
  v93 = &off_24EC21040;
  v40 = v95;
  if (v95)
  {
    v41 = (unint64_t *)&v95->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    goto LABEL_126;
  }
}

void sub_223C30B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    sub_2231BBBE4((_QWORD *)(v26 - 136));
    sub_2238B0AC8((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_2231BBBE4((_QWORD *)(v26 - 136));
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C30BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C30BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2232B45D0(&a13);
  sub_2242A8F3C(&a10);
  sub_2242A8F3C(&a23);
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C30C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2242A8F3C(&a20);
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C30C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C30C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2238B0AC8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_223C30C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  _DWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  float v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  float v58;
  _DWORD *v59;
  float v60;
  int v61;
  __int16 *v62;
  int v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;
  float *v68;
  float v71;
  _DWORD *v72;
  _DWORD *v73;
  float *v74;
  int v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  float v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  float v97;
  uint64_t v98;
  int *v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  float *v116;
  unsigned __int32 *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  float v121;
  float v122;
  float v123;
  unsigned int i;
  float v125;
  float v126;
  float v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  float v132;
  float v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  float v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  unsigned int v139;
  uint64_t v140;
  float v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  float v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t j;
  uint64_t v149;
  uint64_t k;
  uint64_t v151;
  uint64_t m;
  uint64_t v153;
  uint64_t n;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  __int16 v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  __int16 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  _DWORD *v195;
  unsigned int v196;
  _DWORD *v197;
  int v198;
  float *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _DWORD *v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t (**v206)();
  uint64_t v207;
  std::__shared_weak_count *v208;
  _DWORD *v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t (**v213)();
  uint64_t v214;
  std::__shared_weak_count *v215;
  _DWORD *v216;
  uint64_t v217;
  unsigned int v218;
  int v219;
  _QWORD v220[2];
  uint64_t v221;
  std::__shared_weak_count *v222;
  __int128 v223;
  uint64_t v224;
  __int16 v225;
  uint64_t (**v226)();
  _OWORD v227[7];
  uint64_t v228;
  __int16 v229;
  uint64_t (**v230)();
  _OWORD v231[4];
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  int v237;

  v235 = 0u;
  v236 = 0u;
  v237 = 728303500;
  kdebug_trace();
  v234 = *(_QWORD *)(a2 + 32);
  LODWORD(v226) = 0;
  v230 = &off_24EC216B8;
  sub_22321B00C(&v234, &v226, v231);
  LOWORD(v206) = 0;
  v226 = &off_24EC617D0;
  sub_223C746E0(&v234, (const __int16 *)&v206, (uint64_t *)v227);
  v220[1] = &off_24EC200A8;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a2 + 48);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v223 = *(_OWORD *)(a2 + 24);
    v224 = *(_QWORD *)(a2 + 40);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v221 = v4;
    v222 = v5;
    v225 = v8;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v13 = v221;
    if (!v221)
      goto LABEL_32;
  }
  else
  {
    v14 = *(_WORD *)(a2 + 48);
    v221 = *(_QWORD *)(a2 + 8);
    v222 = 0;
    v223 = *(_OWORD *)(a2 + 24);
    v224 = *(_QWORD *)(a2 + 40);
    v225 = v14;
    v13 = v221;
    if (!v221)
      goto LABEL_32;
  }
  v15 = v222;
  if (v222)
  {
    v16 = (unint64_t *)&v222->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v13 = v221;
    v19 = v222;
    if (v222)
    {
      v20 = (unint64_t *)&v222->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (HIBYTE(v225))
          goto LABEL_30;
LABEL_32:
        v220[0] = 0;
        goto LABEL_33;
      }
    }
  }
  if (!HIBYTE(v225))
    goto LABEL_32;
LABEL_30:
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(v220, v13, 0);
LABEL_33:
  v213 = &off_24EC21FE8;
  sub_2231DCF04((uint64_t)&v230, &v214);
  v206 = &off_24EC22468;
  sub_223C75100((uint64_t)&v226, &v207);
  v187 = a2;
  v188 = a1;
  v24 = DWORD2(v223);
  if (*((_QWORD *)&v223 + 1) != v217
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/DistanceTransform.h", 94, (uint64_t)"input.Size() == distance.Size()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| __PAIR64__(HIDWORD(v223), v24) != v211&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/DistanceTransform.h", 95, (uint64_t)"input.Size() == source.Size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_231;
  }
  v193 = HIDWORD(v223);
  v204 = DWORD2(v223);
  v25 = v224;
  v26 = HIDWORD(v210);
  v27 = v209;
  v28 = v218;
  v29 = v216;
  v202 = v223;
  _H0 = *(_WORD *)v223;
  __asm { FCVT            S0, H0 }
  v36 = _S0 <= 0.0;
  v23.n128_u32[0] = 2137417317;
  if (!v36)
    v23.n128_f32[0] = 0.0;
  *v216 = v23.n128_u32[0];
  if (!v27
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_231:
    abort();
  }
  *v27 = 0;
  if (v204 != 1)
  {
    v52 = 0;
    v53 = 0;
    v54 = 1;
    v23.n128_u32[0] = 0;
    v55 = v25;
    do
    {
      _H2 = *(_WORD *)(v202 + 2 * v55);
      __asm { FCVT            S2, H2 }
      v36 = _S2 <= 0.0;
      v58 = 3.0625e38;
      if (!v36)
        v58 = 0.0;
      *(float *)&v29[v28 + v52] = v58;
      v59 = (_DWORD *)((char *)v27 + 2 * v26 + 2 * v53);
      *v59 = (unsigned __int16)v54;
      v60 = *(float *)&v29[v52] + 1.0;
      if (v60 < *(float *)&v29[v28 + v52])
      {
        *(float *)&v29[v28 + v52] = v60;
        *v59 = *(_DWORD *)((char *)v27 + 2 * v53);
      }
      ++v54;
      v53 += v26;
      v52 += v28;
      v55 += v25;
    }
    while (v204 != v54);
  }
  v189 = v193 - 1;
  v37 = v204;
  if (v193 != 1)
  {
    v191 = v204 - 2;
    v198 = HIDWORD(v224);
    v61 = 1;
    v196 = v204 - 1;
    while (1)
    {
      v62 = (__int16 *)(v202 + 2 * (v198 * v61));
      v200 = v210;
      v63 = v212;
      v64 = v209;
      v66 = v218;
      v65 = v219;
      v67 = v216;
      v68 = (float *)&v216[v219 * v61];
      _H0 = *v62;
      __asm { FCVT            S0, H0 }
      v36 = _S0 <= 0.0;
      v71 = 3.0625e38;
      if (!v36)
        v71 = 0.0;
      *v68 = v71;
      if (!v64
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_231;
      }
      v72 = (_DWORD *)((char *)v64 + 2 * (v63 * (v61 - 1)));
      v73 = (_DWORD *)((char *)v64 + 2 * (v63 * v61));
      v74 = (float *)&v67[v65 * (v61 - 1)];
      v75 = v61 << 16;
      *v73 = v61 << 16;
      v76 = *v74 + 1.0;
      v77 = *v68;
      if (v76 < *v68)
      {
        *v68 = v76;
        *v73 = *v72;
        v77 = *v68;
      }
      v78 = v74[v66] + 1.4;
      v79 = 2 * HIDWORD(v200);
      v37 = v204;
      if (v78 < v77)
      {
        *v68 = v78;
        *v73 = *(_DWORD *)((char *)v72 + v79);
      }
      if (v204 != 2)
        break;
LABEL_70:
      v80 = v66 * v196;
      _H0 = v62[v25 * (v204 - 1)];
      __asm { FCVT            S0, H0 }
      v36 = _S0 <= 0.0;
      v83 = 3.0625e38;
      if (!v36)
        v83 = 0.0;
      v68[v66 * v196] = v83;
      v84 = v196 * HIDWORD(v200);
      v85 = (_DWORD *)((char *)v73 + 2 * v84);
      *v85 = v75 | (unsigned __int16)(v204 - 1);
      v86 = v66 * v191;
      v87 = v74[v86] + 1.4;
      v23.n128_f32[0] = v68[v66 * v196];
      if (v87 < v23.n128_f32[0])
      {
        v68[v80] = v87;
        *v85 = *(_DWORD *)((char *)v72 + 2 * v191 * HIDWORD(v200));
        v23.n128_f32[0] = v68[v80];
        v88 = v74[v80] + 1.0;
        if (v88 >= v23.n128_f32[0])
        {
LABEL_74:
          v89 = v68[v86] + 1.0;
          if (v89 < v23.n128_f32[0])
            goto LABEL_91;
          goto LABEL_60;
        }
      }
      else
      {
        v88 = v74[v80] + 1.0;
        if (v88 >= v23.n128_f32[0])
          goto LABEL_74;
      }
      v68[v80] = v88;
      *v85 = *(_DWORD *)((char *)v72 + 2 * v84);
      v23.n128_f32[0] = v68[v80];
      v89 = v68[v86] + 1.0;
      if (v89 < v23.n128_f32[0])
      {
LABEL_91:
        v68[v80] = v89;
        *v85 = *(_DWORD *)((char *)v73 + 2 * v191 * HIDWORD(v200));
      }
LABEL_60:
      if (++v61 == v193)
        goto LABEL_43;
    }
    v90 = 0;
    v91 = 0;
    v92 = 2;
    v93 = v25;
    while (1)
    {
      v94 = (v66 + v90);
      _H0 = v62[v93];
      __asm { FCVT            S0, H0 }
      v36 = _S0 <= 0.0;
      v97 = 3.0625e38;
      if (!v36)
        v97 = 0.0;
      v68[(v66 + v90)] = v97;
      v98 = HIDWORD(v200) + v91;
      v99 = (_DWORD *)((char *)v73 + 2 * v98);
      *v99 = (unsigned __int16)(v92 - 1) | v75;
      v100 = v74[v90] + 1.4;
      v101 = v68[(v66 + v90)];
      if (v100 < v101)
      {
        v68[v94] = v100;
        *v99 = *(_DWORD *)((char *)v72 + 2 * v91);
        v101 = v68[v94];
      }
      v102 = v74[v94] + 1.0;
      if (v102 < v101)
      {
        v68[v94] = v102;
        *v99 = *(_DWORD *)((char *)v72 + 2 * v98);
        v101 = v68[v94];
      }
      v103 = v74[(2 * v66 + v90)] + 1.4;
      if (v103 < v101)
      {
        v68[v94] = v103;
        *v99 = *(_DWORD *)((char *)v72 + 2 * v79 + 2 * v91);
        v104 = v68[v90] + 1.0;
        if (v104 < v68[v94])
        {
LABEL_88:
          v68[v94] = v104;
          *v99 = *(_DWORD *)((char *)v73 + 2 * v91);
        }
      }
      else
      {
        v104 = v68[v90] + 1.0;
        if (v104 < v101)
          goto LABEL_88;
      }
      v91 += HIDWORD(v200);
      ++v92;
      v90 += v66;
      v93 += v25;
      if (v204 == v92)
        goto LABEL_70;
    }
  }
LABEL_43:
  if (v217 != __PAIR64__(v193, v37)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/DistanceTransform.h", 203, (uint64_t)"input.Size() == distance.Size()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| v211 != __PAIR64__(v193, v204)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/DistanceTransform.h", 204, (uint64_t)"input.Size() == source.Size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_231;
  }
  v38 = v204;
  v190 = v204 - 1;
  if (v204 != 1)
  {
    v39 = HIDWORD(v210);
    v40 = (char *)v209 + 2 * v189 * v212;
    v41 = v218;
    v42 = &v216[v219 * v189];
    if (!v209)
    {
      v105 = 0;
      v106 = HIDWORD(v210) * v190;
      v107 = v190 - 1;
      v108 = (v204 - 2) * HIDWORD(v210);
      v109 = v218 * (v204 - 2);
      v110 = v218 * v190;
      while (1)
      {
        v112 = (v109 + v105);
        v23.n128_f32[0] = *(float *)&v42[v110 + v105] + 1.0;
        if (v23.n128_f32[0] < *(float *)&v42[v112])
        {
          v42[v112] = v23.n128_u32[0];
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_231;
          }
          *(_DWORD *)&v40[2 * v108] = *(_DWORD *)&v40[2 * v106];
          v38 = v204;
        }
        v106 -= v39;
        v111 = v107--;
        v108 -= v39;
        v105 -= v41;
        if (!v111)
          goto LABEL_97;
      }
    }
    v43 = 0;
    v44 = HIDWORD(v210) * v190;
    v45 = v190 - 1;
    v46 = (v204 - 2) * HIDWORD(v210);
    v47 = v218 * (v204 - 2);
    v23.n128_u32[0] = 1.0;
    v48 = v218 * v190;
    do
    {
      v50 = (v47 + v43);
      v51 = *(float *)&v42[v48 + v43] + 1.0;
      if (v51 < *(float *)&v42[v50])
      {
        *(float *)&v42[v50] = v51;
        *(_DWORD *)&v40[2 * v46] = *(_DWORD *)&v40[2 * v44];
      }
      v44 -= v39;
      v49 = v45--;
      v46 -= v39;
      v43 -= v41;
    }
    while (v49);
  }
LABEL_97:
  v113 = v193;
  v114 = v193 - 1;
  if (v193 != 1)
  {
    v192 = v38 - 2;
    do
    {
      v115 = v113 - 2;
      v197 = (_DWORD *)((char *)v209 + 2 * v212 * v114);
      v203 = v209;
      v205 = HIDWORD(v210);
      v194 = v114;
      v116 = (float *)&v216[v219 * v114];
      v117 = &v216[v219 * v115];
      v118 = v218 * v190;
      v119 = (v190 * HIDWORD(v210));
      v199 = v116;
      v201 = v218;
      v195 = (_DWORD *)((char *)v209 + 2 * v212 * v115);
      v120 = (_DWORD *)((char *)v195 + 2 * v119);
      v121 = v116[v218 * v192] + 1.4;
      v122 = *(float *)&v117[v118];
      if (v121 < v122)
      {
        *(float *)&v117[v118] = v121;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_231;
        }
        v116 = v199;
        *v120 = *(_DWORD *)((char *)v197 + 2 * v192 * v205);
        v122 = *(float *)&v117[v118];
      }
      v123 = v116[v118] + 1.0;
      if (v123 < v122)
      {
        *(float *)&v117[v118] = v123;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_231;
        }
        v116 = v199;
        *v120 = *(_DWORD *)((char *)v197 + 2 * v119);
        for (i = v192; i; v116 = v199)
        {
LABEL_125:
          v128 = i;
          v129 = v201 * i;
          v130 = i * v205;
          --i;
          v131 = (_DWORD *)((char *)v195 + 2 * v130);
          v132 = v116[v201 * i] + 1.4;
          v133 = *(float *)&v117[v129];
          if (v132 < v133)
          {
            *(float *)&v117[v129] = v132;
            if (!v203)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v134 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v147 = qword_255795648;
                for (j = qword_255795650; v147 != j; v147 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v147)(*(_QWORD *)(v147 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v135 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_231;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v116 = v199;
            *v131 = *(_DWORD *)((char *)v197 + 2 * i * v205);
            v133 = *(float *)&v117[v129];
          }
          v136 = v116[v129] + 1.0;
          if (v136 < v133)
          {
            *(float *)&v117[v129] = v136;
            if (!v203)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v137 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v149 = qword_255795648;
                for (k = qword_255795650; v149 != k; v149 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v149)(*(_QWORD *)(v149 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v138 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_231;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            v116 = v199;
            *v131 = *(_DWORD *)((char *)v197 + 2 * v130);
            v133 = *(float *)&v117[v129];
          }
          v139 = v128 + 1;
          v140 = (v128 + 1) * v201;
          v141 = v116[v140] + 1.4;
          if (v141 < v133)
          {
            *(float *)&v117[v129] = v141;
            if (!v203)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v142 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v151 = qword_255795648;
                for (m = qword_255795650; v151 != m; v151 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v151)(*(_QWORD *)(v151 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v143 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_231;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            *v131 = *(_DWORD *)((char *)v197 + 2 * v139 * v205);
            v133 = *(float *)&v117[v129];
          }
          v144 = *(float *)&v117[v140] + 1.0;
          if (v144 < v133)
          {
            *(float *)&v117[v129] = v144;
            if (!v203)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v145 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v153 = qword_255795648;
                for (n = qword_255795650; v153 != n; v153 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v153)(*(_QWORD *)(v153 + 8), "ptr != nullptr || size == 0", 27, "", 0);
              }
              v146 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_231;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            }
            *v131 = *(_DWORD *)((char *)v195 + 2 * v139 * v205);
          }
        }
      }
      else
      {
        i = v192;
        if (v192)
          goto LABEL_125;
      }
      v125 = *v116 + 1.0;
      v23.n128_u32[0] = *v117;
      if (v125 < *(float *)v117)
      {
        *(float *)v117 = v125;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_231;
        }
        *v195 = *v197;
        v23.n128_u32[0] = *v117;
        v116 = v199;
      }
      v126 = v116[v201] + 1.4;
      if (v126 < v23.n128_f32[0])
      {
        *(float *)v117 = v126;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_231;
        }
        *v195 = *(_DWORD *)((char *)v197 + 2 * v205);
        v23.n128_u32[0] = *v117;
      }
      v127 = *(float *)&v117[v201] + 1.0;
      if (v127 < v23.n128_f32[0])
      {
        *(float *)v117 = v127;
        if (!v203
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_231;
        }
        *v195 = *(_DWORD *)((char *)v195 + 2 * v205);
      }
      v113 = v194;
      v114 = v194 - 1;
    }
    while (v194 != 1);
  }
  v155 = v208;
  if (v208)
  {
    v156 = (unint64_t *)&v208->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v155->__on_zero_shared)(v155, v23);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v215;
  if (!v215)
    goto LABEL_197;
  v159 = (unint64_t *)&v215->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (v160)
  {
LABEL_197:
    *(_QWORD *)v188 = &off_24EC21328;
    v161 = *(_QWORD *)(v187 + 8);
    v162 = *(std::__shared_weak_count **)(v187 + 16);
    if (v162)
      goto LABEL_198;
LABEL_212:
    v170 = *(_WORD *)(v187 + 48);
    *(_QWORD *)(v188 + 8) = v161;
    *(_QWORD *)(v188 + 16) = 0;
    *(_OWORD *)(v188 + 24) = *(_OWORD *)(v187 + 24);
    *(_QWORD *)(v188 + 40) = *(_QWORD *)(v187 + 40);
    *(_WORD *)(v188 + 48) = v170;
    goto LABEL_213;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v158->__on_zero_shared)(v158, v23);
  std::__shared_weak_count::__release_weak(v158);
  *(_QWORD *)v188 = &off_24EC21328;
  v161 = *(_QWORD *)(v187 + 8);
  v162 = *(std::__shared_weak_count **)(v187 + 16);
  if (!v162)
    goto LABEL_212;
LABEL_198:
  v163 = (unint64_t *)&v162->__shared_owners_;
  do
    v164 = __ldxr(v163);
  while (__stxr(v164 + 1, v163));
  v165 = *(_WORD *)(v187 + 48);
  do
    v166 = __ldxr(v163);
  while (__stxr(v166 + 1, v163));
  *(_OWORD *)(v188 + 24) = *(_OWORD *)(v187 + 24);
  *(_QWORD *)(v188 + 40) = *(_QWORD *)(v187 + 40);
  do
    v167 = __ldxr(v163);
  while (__stxr(v167 + 1, v163));
  *(_QWORD *)(v188 + 8) = v161;
  *(_QWORD *)(v188 + 16) = v162;
  *(_WORD *)(v188 + 48) = v165;
  do
    v168 = __ldaxr(v163);
  while (__stlxr(v168 - 1, v163));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
  do
    v169 = __ldaxr(v163);
  while (__stlxr(v169 - 1, v163));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
LABEL_213:
  v171 = v231[1];
  *(_OWORD *)(v188 + 64) = v231[0];
  *(_OWORD *)(v188 + 80) = v171;
  v172 = v231[3];
  *(_OWORD *)(v188 + 96) = v231[2];
  *(_OWORD *)(v188 + 112) = v172;
  v173 = v227[1];
  *(_OWORD *)(v188 + 152) = v227[0];
  v174 = v227[5];
  *(_OWORD *)(v188 + 216) = v227[4];
  *(_OWORD *)(v188 + 232) = v174;
  *(_OWORD *)(v188 + 248) = v227[6];
  *(_OWORD *)(v188 + 168) = v173;
  v175 = v227[3];
  *(_OWORD *)(v188 + 184) = v227[2];
  *(_QWORD *)(v188 + 56) = &off_24EC216B8;
  v231[0] = 0uLL;
  *(_QWORD *)(v188 + 128) = v232;
  *(_WORD *)(v188 + 136) = v233;
  *(_QWORD *)(v188 + 144) = &off_24EC617D0;
  v227[0] = 0uLL;
  *(_QWORD *)(v188 + 264) = v228;
  *(_OWORD *)(v188 + 200) = v175;
  *(_WORD *)(v188 + 272) = v229;
  v176 = v220[0];
  v220[0] = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = v222;
  if (v222)
  {
    v178 = (unint64_t *)&v222->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v227[0] + 1);
  if (*((_QWORD *)&v227[0] + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v227[0] + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v231[0] + 1);
  if (*((_QWORD *)&v231[0] + 1))
  {
    v184 = (unint64_t *)(*((_QWORD *)&v231[0] + 1) + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  return kdebug_trace();
}

void sub_223C3220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_22319EF60((uint64_t)&a41);
  sub_223167354(a11);
  sub_223167354(a12);
  sub_2231874DC(v41 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_223C322D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[20];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *a1 = &off_24EC21328;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_223C323C0@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  const void *v19;
  size_t v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  _QWORD v90[3];
  int v91;
  const char *v92;
  int v93;
  const char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  uint64_t (**v98)();
  uint64_t *v99;
  std::__shared_weak_count *v100;
  uint64_t (**v101)();
  __int128 v102;
  void (**v103)(_QWORD);
  __int128 __p;
  char v105;
  char v106;
  CVPixelBufferPoolRef *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[24];
  __int128 v117;
  void *v118[2];
  unint64_t v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2242A78F0(a1);
  v7 = *a2;
  v109 = v6;
  v110 = v7;
  v111 = 0;
  v112 = 0;
  v113 = 728303484;
  kdebug_trace();
  v8 = atomic_load((unsigned __int8 *)&qword_2540CCFC0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFC0))
  {
    qword_2540CD130 = 0;
    unk_2540CD138 = 0;
    qword_2540CD128 = (uint64_t)&qword_2540CD130;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD128, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCFC0);
  }
  v9 = sub_2242A9824(a1);
  sub_223C8536C((uint64_t **)&qword_2540CD128, v9, *a2, 1u, (std::__shared_weak_count_vtbl ***)&v107);
  sub_2242A7370(v107, (uint64_t)&v103);
  if (!v106
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 800, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v101 = &off_24EC715B8;
  v102 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_2242AA1D0((uint64_t)&v101, &v98);
  if (v99)
  {
    v13 = *v99;
    v12 = (std::__shared_weak_count *)v99[1];
    if (!v12)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_15;
    }
    else
    {
LABEL_13:
      if (v13)
        goto LABEL_15;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 804, (uint64_t)"out_iosurface", 13, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  v116[23] = 15;
  strcpy(v116, "ConvertToFormat");
  sub_2244E116C((uint64_t)&v98, (uint64_t *)v116);
  if ((v116[23] & 0x80000000) != 0)
    operator delete(*(void **)v116);
  v17 = atomic_load((unsigned __int8 *)&qword_2540CCFD0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCFD0))
  {
    sub_223FC4CB0(&qword_2540CCFC8);
    __cxa_atexit((void (*)(void *))sub_223416934, &qword_2540CCFC8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCFD0);
  }
  if ((sub_223FC4D34(&qword_2540CCFC8, a1, (uint64_t)&v101) & 0xFF00000000) == 0)
  {
    *a3 = &off_24EC715B8;
    *(_OWORD *)(a3 + 1) = v102;
    v102 = 0uLL;
    v98 = &off_24EC76F28;
    v21 = v100;
    if (!v100)
      goto LABEL_119;
    goto LABEL_116;
  }
  v18 = atomic_load((unsigned __int8 *)&qword_2557892F0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
  {
    __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
    __cxa_guard_release(&qword_2557892F0);
  }
  sub_223C26E3C(v116);
  if (*(char *)(*(_QWORD *)v116 + 39) < 0)
  {
    v19 = *(const void **)(*(_QWORD *)v116 + 16);
    v20 = *(_QWORD *)(*(_QWORD *)v116 + 24);
  }
  else
  {
    v19 = (const void *)(*(_QWORD *)v116 + 16);
    v20 = *(unsigned __int8 *)(*(_QWORD *)v116 + 39);
  }
  sub_223195728((uint64_t)&unk_255789280, v19, v20, "Failed to convert buffer from %d to format %d", 0x2DuLL);
  sub_223C26F30(&v97);
  if (**(int **)(v97 + 56) <= 5)
  {
    v22 = *(unsigned __int8 *)(v97 + 72);
    v23 = sub_22322F254(v97, "OSLogSurrogateAppender", 1, 0);
    v24 = v23;
    if (v22 || v23)
    {
      v90[0] = &v97;
      v90[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v90[2] = std::chrono::system_clock::now().__d_.__rep_;
      v91 = 5;
      v92 = "unknown file";
      v93 = 812;
      v95 = 0;
      v96 = 0;
      v94 = "unknown function";
      v88 = sub_2242A78F0(a1);
      v25 = (const char *)(v97 + 16);
      v84 = v97 + 16;
      v85 = v97;
      if (*(char *)(v97 + 39) < 0)
      {
        v25 = *(const char **)(v97 + 16);
        v26 = *(_QWORD *)(v97 + 24);
      }
      else
      {
        v26 = *(unsigned __int8 *)(v97 + 39);
      }
      v89 = v24;
      v86 = v22;
      v87 = *a2;
      v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v116);
        sub_223199C58("com.apple.cv3d", (unint64_t)v116, &xmmword_255788F40);
        if ((_BYTE)v117 && (v116[23] & 0x80000000) != 0)
          operator delete(*(void **)v116);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v28 = (const char *)&xmmword_255788F40;
      else
        v28 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v29 = byte_255788F57;
      else
        v29 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v116 = os_log_create(v28, v25);
      v30 = &v116[8];
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v29 >= 0x17)
      {
        v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v31 = v29 | 7;
        v32 = v31 + 1;
        v30 = operator new(v31 + 1);
        *(_QWORD *)&v116[16] = v29;
        *(_QWORD *)&v117 = v32 | 0x8000000000000000;
        *(_QWORD *)&v116[8] = v30;
      }
      else
      {
        BYTE7(v117) = v29;
        if (!v29)
        {
LABEL_48:
          v30[v29] = 0;
          BYTE8(v117) = 1;
          v33 = v118;
          if (v26 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v26 >= 0x17)
          {
            v34 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v26 | 7) != 0x17)
              v34 = v26 | 7;
            v35 = v34 + 1;
            v33 = (void **)operator new(v34 + 1);
            v118[1] = (void *)v26;
            v119 = v35 | 0x8000000000000000;
            v118[0] = v33;
          }
          else
          {
            HIBYTE(v119) = v26;
            if (!v26)
              goto LABEL_56;
          }
          memmove(v33, v25, v26);
LABEL_56:
          *((_BYTE *)v33 + v26) = 0;
          v120 = 1;
          v36 = *(NSObject **)v116;
          if (SHIBYTE(v119) < 0)
            operator delete(v118[0]);
          if (BYTE8(v117) && SBYTE7(v117) < 0)
            operator delete(*(void **)&v116[8]);
          if (*(_QWORD *)v116)
            os_release(*(void **)v116);
          if (v89 && *(_QWORD *)(v89 + 24))
          {
            v37 = _os_log_pack_size();
            v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
            v39 = (std::__shared_weak_count *)operator new();
            v40 = v39;
            v39->__shared_owners_ = 0;
            v41 = (unint64_t *)&v39->__shared_owners_;
            v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v39->__shared_weak_owners_ = 0;
            v39[1].__vftable = v38;
            *(_QWORD *)v116 = v38;
            *(_QWORD *)&v116[8] = v38;
            *(_QWORD *)&v116[16] = v39;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            v117 = 0uLL;
            v118[0] = 0;
            do
              v43 = __ldaxr(v41);
            while (__stlxr(v43 - 1, v41));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            v44 = *(_QWORD *)v116;
            v45 = _os_log_pack_fill();
            *(_DWORD *)v45 = 67109376;
            *(_DWORD *)(v45 + 4) = v88;
            *(_WORD *)(v45 + 8) = 1024;
            *(_DWORD *)(v45 + 10) = v87;
            v46 = operator new();
            v47 = *(unsigned __int8 *)(v85 + 39);
            v48 = v84;
            if ((v47 & 0x80u) != 0)
            {
              v48 = *(_QWORD *)(v85 + 16);
              v47 = *(_QWORD *)(v85 + 24);
            }
            *(_QWORD *)v46 = v44;
            *(_OWORD *)(v46 + 8) = *(_OWORD *)&v116[8];
            *(_QWORD *)&v116[8] = 0;
            *(_QWORD *)&v116[16] = 0;
            *(_OWORD *)(v46 + 24) = v117;
            v117 = 0uLL;
            *(_QWORD *)(v46 + 40) = v48;
            *(_QWORD *)(v46 + 48) = v47;
            *(_BYTE *)(v46 + 56) = 16;
            v114 = 0;
            v115 = v46;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v89 + 24) + 40))(*(_QWORD *)(v89 + 24), &v115);
            v49 = v115;
            v115 = 0;
            if (v49)
            {
              v50 = *(std::__shared_weak_count **)(v49 + 32);
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v53 = *(std::__shared_weak_count **)(v49 + 16);
              if (v53)
              {
                v54 = (unint64_t *)&v53->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              MEMORY[0x227684CE8](v49, 0x10F0C40B62ED6C6);
              v56 = v114;
              v114 = 0;
              if (v56)
              {
                v57 = *(std::__shared_weak_count **)(v56 + 32);
                if (v57)
                {
                  v58 = (unint64_t *)&v57->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                v60 = *(std::__shared_weak_count **)(v56 + 16);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                MEMORY[0x227684CE8](v56, 0x10F0C40B62ED6C6);
              }
            }
            v63 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
            if (*((_QWORD *)&v117 + 1))
            {
              v64 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = *(std::__shared_weak_count **)&v116[16];
            if (*(_QWORD *)&v116[16])
            {
              v67 = (unint64_t *)(*(_QWORD *)&v116[16] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }
          else
          {
            os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v116 = 67109376;
            *(_DWORD *)&v116[4] = v88;
            *(_WORD *)&v116[8] = 1024;
            *(_DWORD *)&v116[10] = v87;
            v69 = (void *)_os_log_send_and_compose_impl();
            if (v69)
              free(v69);
          }
          if (v86)
          {
            v70 = sub_2242A78F0(a1);
            sub_22322C138((uint64_t)v90, "Failed to convert buffer from %d to format %d", v70, *a2);
            sub_223182C08((uint64_t)v90);
          }
          sub_223182C08((uint64_t)v90);
          v71 = v96;
          if (v96)
          {
            v72 = (unint64_t *)&v96->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          goto LABEL_115;
        }
      }
      memmove(v30, v28, v29);
      goto LABEL_48;
    }
  }
LABEL_115:
  *a3 = &off_24EC715B8;
  v74 = a3 + 1;
  *v74 = 0;
  v74[1] = 0;
  v98 = &off_24EC76F28;
  v21 = v100;
  if (!v100)
    goto LABEL_119;
LABEL_116:
  v75 = (unint64_t *)&v21->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v101 = &off_24EC715B8;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (!*((_QWORD *)&v102 + 1))
      goto LABEL_123;
    goto LABEL_120;
  }
LABEL_119:
  v101 = &off_24EC715B8;
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (!*((_QWORD *)&v102 + 1))
    goto LABEL_123;
LABEL_120:
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    if (v106)
      goto LABEL_124;
    goto LABEL_128;
  }
LABEL_123:
  if (v106)
  {
LABEL_124:
    (*v103)(&v103);
    goto LABEL_130;
  }
LABEL_128:
  if (v105 < 0)
    operator delete((void *)__p);
LABEL_130:
  v80 = v108;
  if (v108)
  {
    v81 = (unint64_t *)&v108->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  return kdebug_trace();
}

void sub_223C32F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(_BYTE *)(v38 - 152))
  {
    if (*(char *)(v38 - 153) < 0)
      operator delete(*(void **)(v38 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  sub_2244E0FF4(&a27);
  sub_2242A8F3C(&a30);
  sub_2232B6080((uint64_t)&a33);
  sub_223167354((uint64_t)&a38);
  sub_2231874DC(v38 - 232);
  _Unwind_Resume(a1);
}

void sub_223C330C4()
{
  JUMPOUT(0x223C330B4);
}

void sub_223C330CC(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  BOOL v8;
  uint64_t *v9;
  uint64_t **v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  float v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  std::string::size_type v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD v99[2];
  std::__shared_weak_count *v100;
  std::string __p;
  uint64_t (**v102)();
  uint64_t *v103;
  std::__shared_weak_count *v104;
  void (**v105)(_QWORD);
  void *v106;
  uint64_t v107;
  char v108;
  char v109;
  CVPixelBufferPoolRef *v110;
  std::__shared_weak_count *v111;
  _QWORD v112[2];
  std::__shared_weak_count *v113;
  uint64_t (**v114)();
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v8 = a4 <= 0.0 || a4 > 1.0;
  if (v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 395, (uint64_t)"scale_factor > 0.f && scale_factor <= 1.f", 41, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v10 = (uint64_t **)(a2 + 8);
  v9 = *(uint64_t **)(a2 + 8);
  if (!v9)
    goto LABEL_32;
  v12 = *v9;
  v11 = (std::__shared_weak_count *)v9[1];
  if (!v11)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_13:
    if (v12)
      goto LABEL_14;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12)
  {
LABEL_31:
    v9 = *v10;
LABEL_32:
    *a1 = &off_24EC715B8;
    a1[1] = v9;
    a1[2] = *(_QWORD *)(a2 + 16);
    *v10 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
LABEL_14:
  v16 = sub_2242A9824(a2);
  v18 = *(_QWORD *)(a2 + 8);
  v17 = *(std::__shared_weak_count **)(a2 + 16);
  v112[0] = &off_24EC715B8;
  v112[1] = v18;
  v113 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_223291230((uint64_t)v112, &v120);
  v114 = &off_24EC24F10;
  v21 = v121;
  v22 = v122;
  if (v122)
  {
    v23 = (unint64_t *)&v122->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    v26 = v123;
    v118 = v124;
    do
      v27 = __ldxr(v23);
    while (__stxr(v27 + 1, v23));
    v115 = v21;
    v116 = v22;
    v117 = v26;
    do
      v28 = __ldaxr(v23);
    while (__stlxr(v28 - 1, v23));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    do
      v29 = __ldaxr(v23);
    while (__stlxr(v29 - 1, v23));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v115 = v121;
    v116 = 0;
    v117 = v123;
    v118 = v124;
  }
  v30 = v122;
  if (v122)
  {
    v31 = (unint64_t *)&v122->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v112[0] = &off_24EC715B8;
  v33 = v113;
  if (v113)
  {
    v34 = (unint64_t *)&v113->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = atomic_load((unsigned __int8 *)&qword_2540CD078);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD078))
  {
    qword_2540CD238 = 0;
    unk_2540CD240 = 0;
    qword_2540CD230 = (uint64_t)&qword_2540CD238;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD230, &dword_22314D000);
    __cxa_guard_release(&qword_2540CD078);
  }
  v37 = sub_2242A78F0(a2);
  sub_223C8536C((uint64_t **)&qword_2540CD230, (float)((float)v16 * a4) | ((unint64_t)(float)((float)HIDWORD(v16)* a4) << 32), v37, 1u, (std::__shared_weak_count_vtbl ***)&v110);
  sub_2242A7370(v110, (uint64_t)&v105);
  if (!v109
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 404, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v39 = v106;
  v38 = v107;
  *a1 = &off_24EC715B8;
  a1[1] = v39;
  a1[2] = v38;
  if (v38)
  {
    v40 = (unint64_t *)(v38 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  sub_2242AA1D0((uint64_t)a1, &v102);
  if (v103)
  {
    v43 = *v103;
    v42 = (std::__shared_weak_count *)v103[1];
    if (!v42)
      goto LABEL_56;
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (v43)
        goto LABEL_58;
    }
    else
    {
LABEL_56:
      if (v43)
        goto LABEL_58;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 408, (uint64_t)"out_iosurface", 13, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_58:
  v120 = "Downsample";
  v121 = 10;
  v47 = *(unsigned __int8 *)(a3 + 23);
  if ((v47 & 0x80u) == 0)
    v48 = (std::__shared_weak_count *)a3;
  else
    v48 = *(std::__shared_weak_count **)a3;
  if ((v47 & 0x80u) != 0)
    v47 = *(_QWORD *)(a3 + 8);
  v122 = v48;
  v123 = v47;
  sub_2231A9820((uint64_t)&v120, (uint64_t)&v124, 0, 0, &__p);
  sub_2244E116C((uint64_t)&v102, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50 = a1[1];
  v49 = (std::__shared_weak_count *)a1[2];
  v99[0] = &off_24EC715B8;
  v99[1] = v50;
  v100 = v49;
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  sub_223291230((uint64_t)v99, &v120);
  v99[0] = &off_24EC715B8;
  v53 = v100;
  if (!v100)
    goto LABEL_72;
  v54 = (unint64_t *)&v100->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_72:
    v56 = v115;
    if (v115)
      goto LABEL_73;
LABEL_101:
    __p.__r_.__value_.__r.__words[0] = 0;
    v65 = v121;
    if (v121)
      goto LABEL_86;
LABEL_102:
    v119 = 0;
    v74 = DWORD1(v124);
    if (!DWORD1(v124))
      goto LABEL_110;
    goto LABEL_103;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  v56 = v115;
  if (!v115)
    goto LABEL_101;
LABEL_73:
  v57 = v116;
  if (v116)
  {
    v58 = (unint64_t *)&v116->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    do
      v60 = __ldaxr(v58);
    while (__stlxr(v60 - 1, v58));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    v56 = v115;
    v61 = v116;
    if (v116)
    {
      v62 = (unint64_t *)&v116->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v56 + 96))(&__p, v56, 0);
  v65 = v121;
  if (!v121)
    goto LABEL_102;
LABEL_86:
  v66 = v122;
  if (v122)
  {
    v67 = (unint64_t *)&v122->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    do
      v69 = __ldaxr(v67);
    while (__stlxr(v69 - 1, v67));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    v65 = v121;
    v70 = v122;
    if (v122)
    {
      v71 = (unint64_t *)&v122->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 96))(&v119, v65, 1);
  v74 = DWORD1(v124);
  if (DWORD1(v124))
  {
LABEL_103:
    if ((_DWORD)v124)
    {
      v75 = 0;
      v76 = 1;
      v77 = 1.0 / a4;
      do
      {
        if (v76)
        {
          v78 = 0;
          v79 = 0;
          v80 = DWORD2(v124);
          v81 = v123 + 2 * HIDWORD(v124) * v75;
          v82 = DWORD2(v118);
          v83 = v117;
          v84 = HIDWORD(v118) * (int)(float)(v77 * (float)v75);
          do
          {
            *(_WORD *)(v81 + 2 * v78) = *(_WORD *)(v83
                                                   + 2
                                                   * (v84
                                                                  + v82 * (int)(float)(v77 * (float)v79++)));
            v76 = v124;
            v78 += v80;
          }
          while (v79 < v124);
          v74 = DWORD1(v124);
        }
        ++v75;
      }
      while (v75 < v74);
    }
  }
LABEL_110:
  v85 = v119;
  v119 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v86)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
  v87 = v122;
  if (!v122)
    goto LABEL_118;
  v88 = (unint64_t *)&v122->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v102 = &off_24EC76F28;
    v90 = v104;
    if (!v104)
      goto LABEL_122;
  }
  else
  {
LABEL_118:
    v102 = &off_24EC76F28;
    v90 = v104;
    if (!v104)
      goto LABEL_122;
  }
  v91 = (unint64_t *)&v90->__shared_owners_;
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if (v109)
      goto LABEL_123;
LABEL_127:
    if (v108 < 0)
      operator delete(v106);
    goto LABEL_129;
  }
LABEL_122:
  if (!v109)
    goto LABEL_127;
LABEL_123:
  (*v105)(&v105);
LABEL_129:
  v93 = v111;
  if (v111)
  {
    v94 = (unint64_t *)&v111->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v116;
  if (v116)
  {
    v97 = (unint64_t *)&v116->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
}

void sub_223C33994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  _QWORD *v32;
  uint64_t v33;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  sub_22320F834(v33 - 144);
  sub_2244E0FF4(&a19);
  sub_2242A8F3C(v32);
  sub_2232B6080((uint64_t)&a22);
  sub_223167354((uint64_t)&a27);
  sub_2231D5D24((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_223C33A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2231D5D24((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_223C33A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  float32x2_t v6;
  float32x2_t v7;
  unsigned int v8;
  unsigned int v9;
  std::string::size_type v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __n128 v43;
  uint64_t (***v44)();
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  void *v56;
  std::string::size_type v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  void *v73;
  std::string::size_type v74;
  unint64_t v75;
  std::string::size_type v76;
  __int16 v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t (***v88)();
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __n128 v113;
  __n128 v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  std::string::size_type v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  int v142;
  float v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  std::string::size_type v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  __int16 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  int v168;
  void *v169;
  std::string::size_type v170;
  unint64_t v171;
  std::string::size_type v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned __int8 v182;
  unsigned int v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  void **v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::string::size_type size;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unsigned int v216;
  int v217;
  float v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  unsigned __int8 v230;
  uint64_t i;
  uint64_t v232;
  unsigned __int8 v233;
  uint64_t v234;
  std::string::size_type v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  __int128 v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _BOOL4 v258;
  BOOL v259;
  unint64_t v260;
  unint64_t v261;
  void *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  std::string::size_type v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  void *v271;
  std::string::size_type v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  int v276;
  int v277;
  void *v278;
  std::string::size_type v279;
  unint64_t *v280;
  int v281;
  int v282;
  void *v283;
  std::string::size_type v284;
  unint64_t *v285;
  int v286;
  int v287;
  void *v288;
  std::string::size_type v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  __int128 v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  __int128 v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  __int128 v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  int v321;
  __int128 v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  int v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  __int128 v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  int v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  __int128 v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  __int128 v345;
  std::__shared_weak_count *v346;
  __int128 v347;
  unint64_t *v348;
  unint64_t v349;
  __int128 v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  _OWORD *v363;
  _OWORD *v364;
  _OWORD *v365;
  _OWORD *v366;
  int v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  __int128 v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  __int128 v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::logic_error *v387;
  unsigned __int8 v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  std::logic_error *exception;
  unint64_t *v396;
  unint64_t v397;
  unint64_t v398;
  int v399;
  size_t v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  std::string::size_type v408;
  std::string *p_p;
  std::string *p_dst;
  uint64_t v411;
  uint64_t v412;
  std::string *v413;
  std::string *v414;
  __int128 v415;
  __int128 *v416;
  __int128 v417;
  int64x2_t v418;
  int8x16_t v419;
  _QWORD *v420;
  _QWORD *v421;
  void *v422;
  uint64_t v423;
  _QWORD *v424;
  unsigned int v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  void *v431;
  __int128 v432;
  __int128 v433;
  uint32x2_t v434;
  uint64_t v435;
  uint64_t (**v436)();
  __int128 v437;
  _BYTE v438[32];
  __int128 v439;
  __int128 v440;
  _BYTE v441[32];
  unsigned __int8 v442;
  uint64_t (**v443)();
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  int v448;
  unsigned __int8 v449;
  unsigned __int8 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  int v454;
  void *v455[2];
  char v456;
  uint64_t (**v457)();
  _QWORD *v458;
  std::__shared_weak_count *v459;
  uint64_t (**v460)();
  __int128 v461;
  std::string __dst;
  std::string __p;
  void *v464;
  _QWORD *v465;
  std::__shared_weak_count *v466;
  std::string __s;
  char v468;
  char v469;
  CVPixelBufferPoolRef *v470;
  std::__shared_weak_count *v471;
  uint64_t v472;
  _BYTE v473[56];
  _BYTE v474[24];
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  void *v478[4];
  _BYTE v479[64];
  uint64_t v480;
  std::string v481;
  _BYTE v482[40];
  uint64_t v483;
  __int16 v484;
  uint64_t v485;

  v3 = a1;
  v4 = a2;
  v485 = *MEMORY[0x24BDAC8D0];
  if (a3.n128_f32[0] == 1.0)
    return sub_223257000(a2, a1);
  v453 = 0u;
  v452 = 0u;
  v454 = 728303088;
  kdebug_trace();
  v6 = vcvt_f32_u32(*(uint32x2_t *)(v3 + 1328));
  v434 = vcvt_u32_f32(vmul_n_f32(v6, a3.n128_f32[0]));
  v7 = vdiv_f32(vcvt_f32_u32(v434), v6);
  *(float *)&v8 = *(float *)(v3 + 1256) * v7.f32[0];
  *(float *)&v9 = vmuls_lane_f32(*(float *)(v3 + 1260), v7, 1);
  v10 = (std::string::size_type)vadd_f32(vmul_f32(v7, vadd_f32(*(float32x2_t *)(v3 + 1264), (float32x2_t)0x3F0000003F000000)), (float32x2_t)0xBF000000BF000000);
  v481.__r_.__value_.__r.__words[0] = __PAIR64__(v9, v8);
  v481.__r_.__value_.__l.__size_ = v10;
  sub_223207E58(&v436, (int *)&v481);
  v11 = v437;
  *(_OWORD *)v479 = *(_OWORD *)v438;
  *(_OWORD *)v473 = *(_OWORD *)&v438[16];
  *(_OWORD *)&v473[16] = v439;
  *(_DWORD *)&v473[32] = v440;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  *(_BYTE *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 288) = 0;
  *(_BYTE *)(v4 + 296) = 0;
  *(_BYTE *)(v4 + 352) = 0;
  *(_BYTE *)(v4 + 360) = 0;
  *(_BYTE *)(v4 + 440) = 0;
  *(_BYTE *)(v4 + 448) = 0;
  *(_BYTE *)(v4 + 452) = 0;
  *(_BYTE *)(v4 + 456) = 0;
  *(_BYTE *)(v4 + 460) = 0;
  *(_BYTE *)(v4 + 464) = 0;
  *(_BYTE *)(v4 + 488) = 0;
  *(_BYTE *)(v4 + 496) = 0;
  *(_BYTE *)(v4 + 500) = 0;
  *(_BYTE *)(v4 + 504) = 0;
  *(_BYTE *)(v4 + 508) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  v437 = 0uLL;
  v436 = (uint64_t (**)())&v437;
  sub_224530B6C(&v436, &v481);
  v429 = v4 + 360;
  *(_OWORD *)(v4 + 512) = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)&v436, (char *)v437);
  *(_BYTE *)(v4 + 528) = 0;
  *(_BYTE *)(v4 + 564) = 0;
  *(_BYTE *)(v4 + 568) = 0;
  *(_BYTE *)(v4 + 624) = 0;
  *(_BYTE *)(v4 + 632) = 0;
  *(_BYTE *)(v4 + 688) = 0;
  *(_BYTE *)(v4 + 792) = 0;
  *(_BYTE *)(v4 + 800) = 0;
  *(_BYTE *)(v4 + 880) = 0;
  *(_BYTE *)(v4 + 888) = 0;
  *(_BYTE *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 704) = 0;
  *(_QWORD *)(v4 + 696) = 0;
  *(_BYTE *)(v4 + 712) = 0;
  v424 = (_QWORD *)(v4 + 976);
  *(_BYTE *)(v4 + 976) = 0;
  *(_BYTE *)(v4 + 1032) = 0;
  v428 = v4 + 1040;
  *(_BYTE *)(v4 + 1040) = 0;
  *(_BYTE *)(v4 + 1120) = 0;
  *(_BYTE *)(v4 + 1128) = 0;
  *(_BYTE *)(v4 + 1208) = 0;
  *(_BYTE *)(v4 + 1216) = 0;
  *(_DWORD *)(v4 + 1220) = 1065353216;
  *(_QWORD *)(v4 + 1224) = 0;
  *(_QWORD *)(v4 + 1232) = *(_QWORD *)(v3 + 1232);
  *(_QWORD *)(v4 + 1248) = &off_24EC20868;
  *(_OWORD *)(v4 + 1256) = v11;
  v12 = *(_OWORD *)v473;
  v13 = *(_OWORD *)&v473[16];
  *(_OWORD *)(v4 + 1272) = *(_OWORD *)v479;
  *(_OWORD *)(v4 + 1288) = v12;
  *(_OWORD *)(v4 + 1304) = v13;
  *(_DWORD *)(v4 + 1320) = *(_DWORD *)&v473[32];
  *(_QWORD *)(v4 + 1328) = v434.u32[0] | ((unint64_t)v434.u32[1] << 32);
  *(_QWORD *)(v4 + 1240) = &off_24EC207B8;
  v14 = *(_OWORD *)(v3 + 1336);
  v15 = *(_OWORD *)(v3 + 1352);
  v16 = *(_OWORD *)(v3 + 1384);
  *(_OWORD *)(v4 + 1368) = *(_OWORD *)(v3 + 1368);
  *(_OWORD *)(v4 + 1384) = v16;
  *(_OWORD *)(v4 + 1336) = v14;
  *(_OWORD *)(v4 + 1352) = v15;
  *(_BYTE *)(v4 + 1400) = 2;
  *(_BYTE *)(v4 + 1408) = 0;
  *(_BYTE *)(v4 + 1608) = 0;
  *(_BYTE *)(v4 + 1616) = 0;
  *(_BYTE *)(v4 + 1744) = 0;
  *(_QWORD *)(v4 + 1752) = &off_24EC715B8;
  *(_OWORD *)(v4 + 1760) = 0u;
  *(_OWORD *)(v4 + 1776) = 0u;
  *(_OWORD *)(v4 + 1786) = 0u;
  v437 = 0uLL;
  v436 = (uint64_t (**)())&v437;
  sub_224530B6C(&v436, &v481);
  *(_OWORD *)(v4 + 1808) = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)&v436, (char *)v437);
  LOBYTE(v436) = 0;
  LOBYTE(v439) = 0;
  BYTE8(v439) = 0;
  v442 = 0;
  *((_BYTE *)&v481.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v481, "SemanticLabel");
  if (*(_BYTE *)(v3 + 288))
  {
    sub_223C6BB04((uint64_t)v473, v3 + 232, (std::string::size_type)&v481, a3.n128_f32[0]);
    *(_OWORD *)v438 = *(_OWORD *)&v473[24];
    *(_OWORD *)&v438[10] = *(_OWORD *)&v473[34];
    v436 = &off_24EC270A0;
    v437 = *(_OWORD *)&v473[8];
    v17 = 1;
    LOBYTE(v439) = 1;
    if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v481.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = 0;
  }
  *((_BYTE *)&v481.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v481, "SemanticConfidence");
  if (!*(_BYTE *)(v3 + 352)
    || (sub_223C303A8((uint64_t)v473, v3 + 296, (uint64_t)&v481, a3.n128_f32[0]),
        *(_OWORD *)v441 = *(_OWORD *)&v473[24],
        *(_OWORD *)&v441[10] = *(_OWORD *)&v473[34],
        *((_QWORD *)&v439 + 1) = &off_24EC21328,
        v440 = *(_OWORD *)&v473[8],
        v442 = 1,
        (SHIBYTE(v481.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    v18 = *(unsigned __int8 *)(v4 + 288);
    if (v18 == v17)
      goto LABEL_10;
LABEL_25:
    *(_QWORD *)(v4 + 232) = &off_24EC270A0;
    if (!v18)
    {
      v79 = v437;
      v80 = *(_OWORD *)v438;
      v437 = 0uLL;
      *(_OWORD *)(v4 + 240) = v79;
      *(_OWORD *)(v4 + 256) = v80;
      *(_OWORD *)(v4 + 266) = *(_OWORD *)&v438[10];
      *(_BYTE *)(v4 + 288) = 1;
      v23 = *(unsigned __int8 *)(v4 + 352);
      v24 = v442;
      if (v23 == v442)
        goto LABEL_33;
LABEL_17:
      *(_QWORD *)(v4 + 296) = &off_24EC21328;
      if (v23)
      {
        v25 = *(std::__shared_weak_count **)(v4 + 312);
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        *(_BYTE *)(v4 + 352) = 0;
      }
      else
      {
        v35 = v440;
        v36 = *(_OWORD *)v441;
        v440 = 0uLL;
        *(_OWORD *)(v4 + 304) = v35;
        *(_OWORD *)(v4 + 320) = v36;
        *(_OWORD *)(v4 + 330) = *(_OWORD *)&v441[10];
        *(_BYTE *)(v4 + 352) = 1;
      }
LABEL_41:
      v24 = v442;
      goto LABEL_42;
    }
    v28 = *(std::__shared_weak_count **)(v4 + 248);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    *(_BYTE *)(v4 + 288) = 0;
LABEL_32:
    v23 = *(unsigned __int8 *)(v4 + 352);
    v24 = v442;
    if (v23 == v442)
      goto LABEL_33;
    goto LABEL_17;
  }
  operator delete(v481.__r_.__value_.__l.__data_);
  v18 = *(unsigned __int8 *)(v4 + 288);
  if (v18 != v17)
    goto LABEL_25;
LABEL_10:
  if (!v18)
    goto LABEL_32;
  v19 = v437;
  v437 = 0uLL;
  v20 = *(std::__shared_weak_count **)(v4 + 248);
  *(_OWORD *)(v4 + 240) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_OWORD *)(v4 + 256) = *(_OWORD *)v438;
  *(_OWORD *)(v4 + 266) = *(_OWORD *)&v438[10];
  v23 = *(unsigned __int8 *)(v4 + 352);
  v24 = v442;
  if (v23 != v442)
    goto LABEL_17;
LABEL_33:
  if (v23)
  {
    v31 = v440;
    v440 = 0uLL;
    v32 = *(std::__shared_weak_count **)(v4 + 312);
    *(_OWORD *)(v4 + 304) = v31;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    *(_OWORD *)(v4 + 320) = *(_OWORD *)v441;
    *(_OWORD *)(v4 + 330) = *(_OWORD *)&v441[10];
    goto LABEL_41;
  }
LABEL_42:
  if (v24)
  {
    *((_QWORD *)&v439 + 1) = &off_24EC21328;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
    if (*((_QWORD *)&v440 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  if ((_BYTE)v439)
  {
    v436 = &off_24EC270A0;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    if (*((_QWORD *)&v437 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  LOBYTE(v436) = 0;
  BYTE8(v440) = 0;
  v441[0] = 0;
  v441[4] = 0;
  v441[8] = 0;
  v441[12] = 0;
  v441[16] = 0;
  LOBYTE(v443) = 0;
  LOBYTE(v444) = 0;
  BYTE4(v444) = 0;
  BYTE8(v444) = 0;
  BYTE12(v444) = 0;
  *(_QWORD *)&v473[16] = 0;
  *(_QWORD *)&v473[8] = 0;
  *(_QWORD *)v473 = &v473[8];
  sub_224530B6C(v473, &v481);
  v445 = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
  sub_22323DF84((uint64_t)v473, *(char **)&v473[8]);
  LOBYTE(v446) = 0;
  v449 = 0;
  v456 = 5;
  strcpy((char *)v455, "Color");
  if (!*(_BYTE *)(v3 + 440))
    goto LABEL_430;
  v43 = a3;
  v423 = v4;
  if (a3.n128_f32[0] <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 422, (uint64_t)"scale_factor > 0.f", 18, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v435 = v3;
  if (*(_DWORD *)(v3 + 416) && *(_DWORD *)(v3 + 420))
  {
    v44 = *(uint64_t (****)())(v3 + 368);
    v45 = *(_QWORD *)(v3 + 376);
    *(_QWORD *)v479 = v44;
    *(_QWORD *)&v479[8] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    if (v44 && *v44 == off_24EC710C0)
    {
      v481.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      v481.__r_.__value_.__l.__size_ = v45;
      *(_QWORD *)v479 = 0;
      *(_QWORD *)&v479[8] = 0;
    }
    else
    {
      *(_OWORD *)&v481.__r_.__value_.__l.__data_ = 0uLL;
      v48 = *(std::__shared_weak_count **)&v479[8];
      if (*(_QWORD *)&v479[8])
      {
        v83 = (unint64_t *)(*(_QWORD *)&v479[8] + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v43);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    v85 = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
    if (v481.__r_.__value_.__l.__size_)
    {
      v86 = (unint64_t *)(v481.__r_.__value_.__l.__size_ + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        (*(void (**)(_QWORD, __n128))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1), v43);
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
      }
    }
    if ((_QWORD)v85)
    {
      v88 = *(uint64_t (****)())(v3 + 368);
      v89 = *(std::__shared_weak_count **)(v3 + 376);
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      if (v88 && *v88 == off_24EC710C0)
      {
        v92 = (_OWORD *)(v3 + 384);
        if (v89)
        {
          v93 = (unint64_t *)&v89->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          v95 = *(_OWORD *)(v3 + 400);
          *(_OWORD *)v479 = *v92;
          *(_OWORD *)&v479[16] = v95;
          *(_OWORD *)&v479[32] = *(_OWORD *)(v3 + 416);
          do
            v96 = __ldxr(v93);
          while (__stxr(v96 + 1, v93));
          do
            v97 = __ldaxr(v93);
          while (__stlxr(v97 - 1, v93));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
          do
            v98 = __ldaxr(v93);
          while (__stlxr(v98 - 1, v93));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
          *(_QWORD *)v473 = &off_24EC60FF0;
          *(_QWORD *)&v473[8] = v88;
          *(_QWORD *)&v473[16] = v89;
          *(_OWORD *)&v473[24] = *(_OWORD *)v479;
          *(_OWORD *)&v473[40] = *(_OWORD *)&v479[16];
          *(_OWORD *)v474 = *(_OWORD *)&v479[32];
          v474[16] = v479[48];
          LOBYTE(v475) = 1;
          do
            v99 = __ldxr(v93);
          while (__stxr(v99 + 1, v93));
          do
            v100 = __ldaxr(v93);
          while (__stlxr(v100 - 1, v93));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        else
        {
          v111 = *(_OWORD *)(v3 + 400);
          v110 = *(_OWORD *)(v3 + 416);
          v112 = *v92;
          *(_QWORD *)v473 = &off_24EC60FF0;
          *(_QWORD *)&v473[8] = v88;
          *(_QWORD *)&v473[16] = 0;
          v474[16] = v479[48];
          *(_OWORD *)&v473[24] = v112;
          *(_OWORD *)&v473[40] = v111;
          *(_OWORD *)v474 = v110;
          LOBYTE(v475) = 1;
        }
        sub_22427DEC8((uint64_t)v88, &v457);
        v113 = a3;
        if (a3.n128_f32[0] <= 0.0 || (v113.n128_u32[0] = 1.0, v114 = a3, a3.n128_f32[0] > 1.0))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 395, (uint64_t)"scale_factor > 0.f && scale_factor <= 1.f", 41, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        v115 = v458;
        if (v458)
        {
          v116 = *v458;
          v117 = (std::__shared_weak_count *)v458[1];
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
            do
              v120 = __ldaxr(v118);
            while (__stlxr(v120 - 1, v118));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *, __n128, __n128))v117->__on_zero_shared)(v117, v113, v114);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          if (v116)
          {
            v121 = sub_2242A9824((uint64_t)&v457);
            v478[0] = &off_24EC715B8;
            v478[1] = v458;
            v478[2] = v459;
            if (v459)
            {
              v122 = (unint64_t *)&v459->__shared_owners_;
              do
                v123 = __ldxr(v122);
              while (__stxr(v123 + 1, v122));
            }
            sub_223290A00((uint64_t)v478, v479);
            v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC610E8;
            v124 = *(_OWORD *)&v479[8];
            if (*(_QWORD *)&v479[16])
            {
              v125 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
              do
                v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
              do
                v127 = __ldxr(v125);
              while (__stxr(v127 + 1, v125));
              *(_OWORD *)&v482[8] = *(_OWORD *)&v479[32];
              *(_OWORD *)&v482[24] = *(_OWORD *)&v479[48];
              v128 = *(_QWORD *)&v479[24];
              v483 = v480;
              do
                v129 = __ldxr(v125);
              while (__stxr(v129 + 1, v125));
              *(_OWORD *)&v481.__r_.__value_.__r.__words[1] = v124;
              *(_QWORD *)v482 = v128;
              do
                v130 = __ldaxr(v125);
              while (__stlxr(v130 - 1, v125));
              if (!v130)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v124 + 1) + 16))(*((_QWORD *)&v124 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v124 + 1));
              }
              do
                v131 = __ldaxr(v125);
              while (__stlxr(v131 - 1, v125));
              if (!v131)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v124 + 1) + 16))(*((_QWORD *)&v124 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v124 + 1));
              }
            }
            else
            {
              *(_OWORD *)&v481.__r_.__value_.__r.__words[1] = *(unint64_t *)&v479[8];
              *(_OWORD *)&v482[8] = *(_OWORD *)&v479[32];
              *(_OWORD *)&v482[24] = *(_OWORD *)&v479[48];
              *(_QWORD *)v482 = *(_QWORD *)&v479[24];
              v483 = v480;
            }
            v176 = *(std::__shared_weak_count **)&v479[16];
            if (*(_QWORD *)&v479[16])
            {
              v177 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
            v478[0] = &off_24EC715B8;
            v179 = (std::__shared_weak_count *)v478[2];
            if (v478[2])
            {
              v180 = (unint64_t *)((char *)v478[2] + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v182 = atomic_load((unsigned __int8 *)&qword_2540CD048);
            if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD048))
            {
              qword_2540CD1A8 = 0;
              unk_2540CD1B0 = 0;
              qword_2540CD1A0 = (uint64_t)&qword_2540CD1A8;
              __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD1A0, &dword_22314D000);
              __cxa_guard_release(&qword_2540CD048);
            }
            v183 = sub_2242A78F0((uint64_t)&v457);
            sub_223C8536C((uint64_t **)&qword_2540CD1A0, (float)((float)v121 * a3.n128_f32[0]) | ((unint64_t)(float)((float)HIDWORD(v121) * a3.n128_f32[0]) << 32), v183, 1u, (std::__shared_weak_count_vtbl ***)&v470);
            sub_2242A7370(v470, (uint64_t)&__s);
            if (!v469
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 404, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v460 = &off_24EC715B8;
            v461 = *(_OWORD *)&__s.__r_.__value_.__r.__words[1];
            if (__s.__r_.__value_.__r.__words[2])
            {
              v184 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            sub_2242AA1D0((uint64_t)&v460, &v464);
            if (!v465)
              goto LABEL_693;
            v186 = *v465;
            v187 = (std::__shared_weak_count *)v465[1];
            if (v187)
            {
              v188 = (unint64_t *)&v187->__shared_owners_;
              do
                v189 = __ldxr(v188);
              while (__stxr(v189 + 1, v188));
              do
                v190 = __ldaxr(v188);
              while (__stlxr(v190 - 1, v188));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
              }
            }
            if (!v186)
            {
LABEL_693:
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 408, (uint64_t)"out_iosurface", 13, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
            }
            *(_QWORD *)v479 = "Downsample";
            *(_QWORD *)&v479[8] = 10;
            v191 = v456;
            v192 = v455;
            if (v456 < 0)
            {
              v192 = (void **)v455[0];
              v191 = (unint64_t)v455[1];
            }
            *(_QWORD *)&v479[16] = v192;
            *(_QWORD *)&v479[24] = v191;
            sub_2231A9820((uint64_t)v479, (uint64_t)&v479[32], 0, 0, &__p);
            sub_2244E116C((uint64_t)&v464, (uint64_t *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = v461;
            if (*((_QWORD *)&v461 + 1))
            {
              v193 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
            sub_223290A00((uint64_t)&__dst, v479);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
            v195 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v196 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v197 = __ldaxr(v196);
              while (__stlxr(v197 - 1, v196));
              if (!v197)
              {
                ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                std::__shared_weak_count::__release_weak(v195);
              }
            }
            size = v481.__r_.__value_.__l.__size_;
            if (v481.__r_.__value_.__l.__size_)
            {
              v199 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
              if (v481.__r_.__value_.__r.__words[2])
              {
                v200 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
                do
                  v201 = __ldxr(v200);
                while (__stxr(v201 + 1, v200));
                do
                  v202 = __ldaxr(v200);
                while (__stlxr(v202 - 1, v200));
                if (!v202)
                {
                  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                  std::__shared_weak_count::__release_weak(v199);
                }
                v203 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
                size = v481.__r_.__value_.__l.__size_;
                if (v481.__r_.__value_.__r.__words[2])
                {
                  v204 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
                  do
                    v205 = __ldxr(v204);
                  while (__stxr(v205 + 1, v204));
                  do
                    v206 = __ldaxr(v204);
                  while (__stlxr(v206 - 1, v204));
                  if (!v206)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
              }
              (*(void (**)(std::string *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)size + 96))(&__p, size, 0);
            }
            else
            {
              __p.__r_.__value_.__r.__words[0] = 0;
            }
            v207 = *(_QWORD *)&v479[8];
            if (*(_QWORD *)&v479[8])
            {
              v208 = *(std::__shared_weak_count **)&v479[16];
              if (*(_QWORD *)&v479[16])
              {
                v209 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
                do
                  v210 = __ldxr(v209);
                while (__stxr(v210 + 1, v209));
                do
                  v211 = __ldaxr(v209);
                while (__stlxr(v211 - 1, v209));
                if (!v211)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
                v212 = *(std::__shared_weak_count **)&v479[16];
                v207 = *(_QWORD *)&v479[8];
                if (*(_QWORD *)&v479[16])
                {
                  v213 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
                  do
                    v214 = __ldxr(v213);
                  while (__stxr(v214 + 1, v213));
                  do
                    v215 = __ldaxr(v213);
                  while (__stlxr(v215 - 1, v213));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v207 + 96))(&v472, v207, 1);
            }
            else
            {
              v472 = 0;
            }
            if (*(_DWORD *)&v479[60] && *(_DWORD *)&v479[56])
            {
              v216 = 0;
              v217 = 1;
              v218 = 1.0 / a3.n128_f32[0];
              do
              {
                if (v217)
                {
                  v219 = (int)(float)(v218 * (float)v216);
                  v220 = *(unsigned int *)&v479[48];
                  v426 = v216;
                  v221 = *(_QWORD *)&v479[24] + 4 * HIDWORD(v480) * v216;
                  v222 = 0;
                  if (*(_QWORD *)&v479[24])
                  {
                    v223 = 0;
                    while (1)
                    {
                      v225 = v483;
                      v224 = HIDWORD(v483);
                      v226 = *(_QWORD *)v482;
                      if (!*(_QWORD *)v482
                        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                      {
                        break;
                      }
                      *(_OWORD *)(v221 + 4 * v222) = *(_OWORD *)(v226
                                                                               + 4
                                                                               * (v224 * v219
                                                                                              + v225
                                                                                              * (int)(float)(v218 * (float)v223++)));
                      v217 = *(_DWORD *)&v479[56];
                      v222 += v220;
                      if (v223 >= *(unsigned int *)&v479[56])
                        goto LABEL_315;
                    }
LABEL_611:
                    abort();
                  }
                  do
                  {
                    v227 = v483;
                    v228 = HIDWORD(v483);
                    v229 = *(_QWORD *)v482;
                    if (!*(_QWORD *)v482
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_611;
                    }
                    v433 = *(_OWORD *)(v229
                                     + 4
                                     * (v228 * v219 + v227
                                                                  * (int)(float)(v218 * (float)v222)));
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v230 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v230 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v232 = qword_255795648;
                      for (i = qword_255795650; v232 != i; v232 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v232)(*(_QWORD *)(v232 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    v233 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v233 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                    *(_OWORD *)(v221 + 4 * (v222++ * v220)) = v433;
                    v217 = *(_DWORD *)&v479[56];
                  }
                  while (v222 < *(unsigned int *)&v479[56]);
LABEL_315:
                  v216 = v426;
                }
                ++v216;
              }
              while (v216 < *(_DWORD *)&v479[60]);
            }
            v234 = v472;
            v472 = 0;
            if (v234)
              (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
            v235 = __p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = 0;
            if (v235)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v235 + 8))(v235);
            v236 = *(std::__shared_weak_count **)&v479[16];
            if (*(_QWORD *)&v479[16])
            {
              v237 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
            v464 = &off_24EC76F28;
            v239 = v466;
            if (v466)
            {
              v240 = (unint64_t *)&v466->__shared_owners_;
              do
                v241 = __ldaxr(v240);
              while (__stlxr(v241 - 1, v240));
              if (!v241)
              {
                ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                std::__shared_weak_count::__release_weak(v239);
              }
            }
            if (v469)
            {
              (*(void (**)(std::string *))__s.__r_.__value_.__l.__data_)(&__s);
            }
            else if (v468 < 0)
            {
              operator delete((void *)__s.__r_.__value_.__l.__size_);
            }
            v242 = v471;
            if (v471)
            {
              v243 = (unint64_t *)&v471->__shared_owners_;
              do
                v244 = __ldaxr(v243);
              while (__stlxr(v244 - 1, v243));
              if (!v244)
              {
                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                std::__shared_weak_count::__release_weak(v242);
              }
            }
            v245 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
            if (v481.__r_.__value_.__r.__words[2])
            {
              v246 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
              do
                v247 = __ldaxr(v246);
              while (__stlxr(v247 - 1, v246));
              if (!v247)
              {
                ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                std::__shared_weak_count::__release_weak(v245);
              }
            }
            v248 = v459;
            v457 = &off_24EC715B8;
            if (v459)
            {
              v249 = (unint64_t *)&v459->__shared_owners_;
              do
                v250 = __ldaxr(v249);
              while (__stlxr(v250 - 1, v249));
              if (!v250)
              {
                ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                std::__shared_weak_count::__release_weak(v248);
              }
            }
LABEL_372:
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
            *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = v461;
            if (*((_QWORD *)&v461 + 1))
            {
              v251 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
              do
                v252 = __ldxr(v251);
              while (__stxr(v252 + 1, v251));
            }
            sub_22429724C((uint64_t)&__s, (uint64_t)&v481);
            v253 = *(_OWORD *)&v481.__r_.__value_.__r.__words[1];
            *(_QWORD *)v479 = &off_24EC28CD0;
            *(_OWORD *)&v479[8] = *(_OWORD *)&v481.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v479[38] = *(_OWORD *)&v482[14];
            *(_OWORD *)&v479[24] = *(_OWORD *)v482;
            if ((*(_QWORD *)&v482[22] >> 16) != 32)
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_223C6A514((uint64_t)&v481, (uint64_t)v479);
              std::logic_error::logic_error(exception, &v481);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
              __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
            }
            if (v481.__r_.__value_.__l.__size_)
            {
              if (v481.__r_.__value_.__r.__words[2])
              {
                v254 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
                do
                  v255 = __ldxr(v254);
                while (__stxr(v255 + 1, v254));
                *(_OWORD *)&v481.__r_.__value_.__l.__data_ = v253;
                do
                  v256 = __ldxr(v254);
                while (__stxr(v256 + 1, v254));
                do
                  v257 = __ldaxr(v254);
                while (__stlxr(v257 - 1, v254));
                if (!v257)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v253 + 1) + 16))(*((_QWORD *)&v253 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v253 + 1));
                }
              }
              else
              {
                *(_OWORD *)&v481.__r_.__value_.__l.__data_ = v481.__r_.__value_.__l.__size_;
              }
            }
            else
            {
              *(_OWORD *)&v481.__r_.__value_.__l.__data_ = 0uLL;
            }
            v427 = *(_QWORD *)&v479[40];
            v258 = *(_DWORD *)&v479[24] == 0;
            if (!*(_DWORD *)&v479[28])
              v258 = 1;
            v259 = !v258;
            if (v258)
              v260 = 0;
            else
              v260 = ((unint64_t)*(unsigned int *)&v479[32] << 30) & 0x3FFFFFFF00000000;
            v67 = v260 | (4 * (*(_DWORD *)&v479[24] != 0));
            v261 = *(_QWORD *)&v479[24];
            if (!v259)
              v261 = 0;
            *(void **)((char *)v478 + 4) = (void *)v261;
            LODWORD(v478[0]) = 4;
            v68 = v261;
            v262 = v478[0];
            v65 = HIDWORD(v261);
            LODWORD(v478[0]) = 1;
            *(void **)((char *)v478 + 4) = (void *)(v260 | (4 * (*(_DWORD *)&v479[24] != 0)));
            v64 = v478[0];
            v66 = HIDWORD(v260);
            if (HIDWORD(v261) * HIDWORD(v260) == -1
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v431 = v262;
            v77 = *(_WORD *)&v479[52];
            v58 = (std::__shared_weak_count *)v481.__r_.__value_.__l.__size_;
            v57 = v481.__r_.__value_.__r.__words[0];
            if (v481.__r_.__value_.__l.__size_)
            {
              v263 = (unint64_t *)(v481.__r_.__value_.__l.__size_ + 8);
              do
                v264 = __ldxr(v263);
              while (__stxr(v264 + 1, v263));
              do
                v265 = __ldaxr(v263);
              while (__stlxr(v265 - 1, v263));
              if (!v265)
              {
                v266 = v57;
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
                v57 = v266;
              }
            }
            *(_QWORD *)v479 = &off_24EC28CD0;
            v267 = *(std::__shared_weak_count **)&v479[16];
            if (*(_QWORD *)&v479[16])
            {
              v268 = (unint64_t *)(*(_QWORD *)&v479[16] + 8);
              do
                v269 = __ldaxr(v268);
              while (__stlxr(v269 - 1, v268));
              if (!v269)
              {
                v270 = v67;
                v271 = v64;
                v272 = v57;
                ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                std::__shared_weak_count::__release_weak(v267);
                v57 = v272;
                v64 = v271;
                v67 = v270;
                v65 = HIDWORD(v68);
              }
            }
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC715B8;
            v273 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
            if (__s.__r_.__value_.__r.__words[2])
            {
              v274 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
              do
                v275 = __ldaxr(v274);
              while (__stlxr(v275 - 1, v274));
              if (!v275)
              {
                v276 = v66;
                v277 = v65;
                v65 = v67;
                v278 = v64;
                v279 = v57;
                ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                std::__shared_weak_count::__release_weak(v273);
                v57 = v279;
                v64 = v278;
                v67 = v65;
                LODWORD(v65) = v277;
                LODWORD(v66) = v276;
              }
            }
            v460 = &off_24EC715B8;
            v173 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
            v63 = v427;
            if (*((_QWORD *)&v461 + 1))
            {
              v280 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
              do
                v175 = __ldaxr(v280);
              while (__stlxr(v175 - 1, v280));
              goto LABEL_415;
            }
            goto LABEL_417;
          }
          v115 = v458;
        }
        v460 = &off_24EC715B8;
        *(_QWORD *)&v461 = v115;
        *((_QWORD *)&v461 + 1) = v459;
        v458 = 0;
        v459 = 0;
        v457 = &off_24EC715B8;
        goto LABEL_372;
      }
      v387 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v388 = atomic_load((unsigned __int8 *)&qword_2540CD038);
      if ((v388 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD038))
      {
LABEL_614:
        sub_223C6A0F0();
        v481.__r_.__value_.__r.__words[0] = (std::string::size_type)"Attempting to create an ";
        v481.__r_.__value_.__l.__size_ = 24;
        v389 = byte_2540CD187;
        if (byte_2540CD187 >= 0)
        {
          v390 = &qword_2540CD170;
        }
        else
        {
          v389 = unk_2540CD178;
          v390 = (uint64_t *)qword_2540CD170;
        }
        v481.__r_.__value_.__r.__words[2] = (std::string::size_type)v390;
        *(_QWORD *)v482 = v389;
        *(_QWORD *)&v482[8] = " from an ";
        *(_QWORD *)&v482[16] = 9;
        v391 = byte_2540CD19F;
        v392 = &qword_2540CD188;
        if (byte_2540CD19F < 0)
        {
          v391 = qword_2540CD190;
          v392 = (uint64_t *)qword_2540CD188;
        }
        *(_QWORD *)&v482[24] = v392;
        *(_QWORD *)&v482[32] = v391;
        sub_2231A9820((uint64_t)&v481, (uint64_t)&v483, 0, 0, &__p);
        v393 = *(_QWORD *)(v3 + 368);
        v394 = *(std::__shared_weak_count **)(v3 + 376);
        if (v394)
        {
          v396 = (unint64_t *)&v394->__shared_owners_;
          do
            v397 = __ldxr(v396);
          while (__stxr(v397 + 1, v396));
          do
            v398 = __ldaxr(v396);
          while (__stlxr(v398 - 1, v396));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
            std::__shared_weak_count::__release_weak(v394);
          }
          if (v393)
          {
            v393 = *(_QWORD *)(v3 + 368);
            v402 = *(std::__shared_weak_count **)(v3 + 376);
            if (v402)
            {
              v403 = (unint64_t *)&v402->__shared_owners_;
              do
                v404 = __ldxr(v403);
              while (__stxr(v404 + 1, v403));
              do
                v405 = __ldaxr(v403);
              while (__stlxr(v405 - 1, v403));
              if (!v405)
              {
                ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                std::__shared_weak_count::__release_weak(v402);
              }
            }
            goto LABEL_648;
          }
        }
        else if (v393)
        {
LABEL_648:
          v406 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v393 + 80))(v393);
          v408 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v408 = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v481.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          v481.__r_.__value_.__l.__size_ = v408;
          v481.__r_.__value_.__r.__words[2] = (std::string::size_type)" but the other image contains an incompatible buffer type ";
          *(_QWORD *)v482 = 58;
          *(_QWORD *)&v482[8] = v406;
          *(_QWORD *)&v482[16] = v407;
          sub_2231A9820((uint64_t)&v481, (uint64_t)&v482[24], 0, 0, &__dst);
          LOBYTE(v399) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_661:
          if ((v399 & 0x80) != 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(v387, &__dst);
          v387->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v387, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
        }
        v399 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v400 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v400 = __p.__r_.__value_.__l.__size_;
        v401 = v400 + 46;
        if (v400 + 46 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v401 > 0x16)
        {
          v411 = (v401 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v401 | 7) != 0x17)
            v411 = v401 | 7;
          v412 = v411 + 1;
          p_dst = (std::string *)operator new(v411 + 1);
          __dst.__r_.__value_.__l.__size_ = v400 + 46;
          __dst.__r_.__value_.__r.__words[2] = v412 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!v400)
            goto LABEL_660;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v400 + 46;
        }
        if (v399 >= 0)
          v413 = &__p;
        else
          v413 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, v413, v400);
LABEL_660:
        strcpy((char *)p_dst + v400, " but the other image does not contain a buffer");
        goto LABEL_661;
      }
      HIBYTE(v478[2]) = 16;
      strcpy((char *)v478, "ConstSharedImage");
      v414 = sub_2231EFDB4();
      if (SHIBYTE(v414->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__s, v414->__r_.__value_.__l.__data_, v414->__r_.__value_.__l.__size_);
      }
      else
      {
        v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v415;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v481);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v416 = sub_2232101F4();
      if (*((char *)v416 + 23) < 0)
      {
        sub_223197FA4(&__s, *(void **)v416, *((_QWORD *)v416 + 1));
      }
      else
      {
        v417 = *v416;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v416 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v417;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v482);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_22319BD1C(&v464, (uint64_t)&v481, 2uLL);
      sub_2245730F4((char *)v478, (uint64_t *)&v464, (std::string *)&qword_2540CD170, v418, v419);
      v420 = v464;
      if (v464)
      {
        v421 = v465;
        v422 = v464;
        if (v465 != v464)
        {
          do
          {
            if (*((char *)v421 - 1) < 0)
              operator delete((void *)*(v421 - 3));
            v421 -= 3;
          }
          while (v421 != v420);
          v422 = v464;
        }
        v465 = v420;
        operator delete(v422);
        if ((v482[23] & 0x80000000) != 0)
        {
LABEL_677:
          operator delete(*(void **)v482);
          if ((SHIBYTE(v481.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_678;
          goto LABEL_689;
        }
      }
      else if ((v482[23] & 0x80000000) != 0)
      {
        goto LABEL_677;
      }
      if ((SHIBYTE(v481.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_678:
        if ((SHIBYTE(v478[2]) & 0x80000000) == 0)
        {
LABEL_680:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD170, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD038);
          goto LABEL_614;
        }
LABEL_679:
        operator delete(v478[0]);
        goto LABEL_680;
      }
LABEL_689:
      operator delete(v481.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v478[2]) & 0x80000000) == 0)
        goto LABEL_680;
      goto LABEL_679;
    }
    v473[0] = 0;
    LOBYTE(v475) = 0;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 431, (uint64_t)"!CV3D_TARGET_IS_PUBLIC", 22, (uint64_t)"POR should use CVBuffer", 23, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    LODWORD(v478[0]) = (float)((float)*(unsigned int *)(v3 + 416) * a3.n128_f32[0]);
    HIDWORD(v478[0]) = (float)((float)*(unsigned int *)(v3 + 420) * a3.n128_f32[0]);
    v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28D40;
    sub_2232BF1E4(v478, (uint64_t *)&v481.__r_.__value_.__l.__size_);
    v101 = *(_QWORD *)(v3 + 368);
    v102 = *(std::__shared_weak_count **)(v3 + 376);
    if (v102)
    {
      v103 = (unint64_t *)&v102->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
      do
        v105 = __ldaxr(v103);
      while (__stlxr(v105 - 1, v103));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
      if (!v101)
        goto LABEL_175;
      v101 = *(_QWORD *)(v3 + 368);
      v106 = *(std::__shared_weak_count **)(v3 + 376);
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
        do
          v109 = __ldaxr(v107);
        while (__stlxr(v109 - 1, v107));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
    }
    else if (!v101)
    {
      goto LABEL_175;
    }
    if (*(_BYTE *)(v3 + 433))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v101 + 96))(v479, v101, 0);
      goto LABEL_176;
    }
LABEL_175:
    *(_QWORD *)v479 = 0;
LABEL_176:
    v133 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
    v132 = v481.__r_.__value_.__l.__size_;
    if (v481.__r_.__value_.__r.__words[2])
    {
      v134 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
      do
        v136 = __ldaxr(v134);
      while (__stlxr(v136 - 1, v134));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
      if (!v132)
        goto LABEL_192;
      v137 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
      v132 = v481.__r_.__value_.__l.__size_;
      if (v481.__r_.__value_.__r.__words[2])
      {
        v138 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
        do
          v140 = __ldaxr(v138);
        while (__stlxr(v140 - 1, v138));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
    }
    else if (!v481.__r_.__value_.__l.__size_)
    {
      goto LABEL_192;
    }
    if (HIBYTE(v484))
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v132 + 96))(&__s, v132, 1);
LABEL_193:
      if (*(_DWORD *)&v482[36] && *(_DWORD *)&v482[32])
      {
        v141 = 0;
        v142 = 1;
        v143 = 1.0 / a3.n128_f32[0];
        do
        {
          if (v142)
          {
            v144 = (int)(float)(v143 * (float)v141);
            v145 = *(unsigned int *)&v482[24];
            v425 = v141;
            v146 = *(_QWORD *)v482 + 4 * HIDWORD(v483) * v141;
            v147 = 0;
            if (*(_QWORD *)v482)
            {
              v148 = 0;
              while (1)
              {
                v149 = *(_DWORD *)(v3 + 424);
                v150 = *(_DWORD *)(v3 + 428);
                v151 = *(_QWORD *)(v3 + 384);
                if (!v151
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  break;
                }
                *(_OWORD *)(v146 + 4 * v147) = *(_OWORD *)(v151
                                                                         + 4
                                                                         * (v150 * v144
                                                                                        + v149
                                                                                        * (int)(float)(v143 * (float)v148++)));
                v142 = *(_DWORD *)&v482[32];
                v147 += v145;
                if (v148 >= *(unsigned int *)&v482[32])
                  goto LABEL_196;
              }
LABEL_609:
              abort();
            }
            do
            {
              v152 = *(_DWORD *)(v3 + 424);
              v153 = *(_DWORD *)(v3 + 428);
              v154 = *(_QWORD *)(v3 + 384);
              if (!v154
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_609;
              }
              v432 = *(_OWORD *)(v154
                               + 4
                               * (v153 * v144 + v152 * (int)(float)(v143 * (float)v147)));
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v155 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v157 = qword_255795648;
                v156 = qword_255795650;
                while (v157 != v156)
                {
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v157)(*(_QWORD *)(v157 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                  v157 += 16;
                }
              }
              v158 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              *(_OWORD *)(v146 + 4 * (v147++ * v145)) = v432;
              v142 = *(_DWORD *)&v482[32];
            }
            while (v147 < *(unsigned int *)&v482[32]);
LABEL_196:
            v141 = v425;
          }
          ++v141;
        }
        while (v141 < *(_DWORD *)&v482[36]);
      }
      v159 = __s.__r_.__value_.__r.__words[0];
      __s.__r_.__value_.__r.__words[0] = 0;
      if (v159)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v159 + 8))(v159);
      v160 = *(_QWORD *)v479;
      *(_QWORD *)v479 = 0;
      if (v160)
        (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
      v58 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
      v57 = v481.__r_.__value_.__l.__size_;
      if (v481.__r_.__value_.__r.__words[2])
      {
        v161 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
        v163 = v484;
        do
          v164 = __ldxr(v161);
        while (__stxr(v164 + 1, v161));
        v63 = *(_QWORD *)v482;
        v431 = *(void **)&v482[8];
        v64 = *(void **)&v482[20];
        LODWORD(v65) = *(_DWORD *)&v482[16];
        LODWORD(v66) = *(_DWORD *)&v482[28];
        v68 = *(_QWORD *)&v482[32];
        v67 = v483;
        do
          v165 = __ldxr(v161);
        while (__stxr(v165 + 1, v161));
        do
          v166 = __ldaxr(v161);
        while (__stlxr(v166 - 1, v161));
        if (!v166)
        {
          v167 = v66;
          v168 = v65;
          v65 = v67;
          v169 = v64;
          v170 = v57;
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          v57 = v170;
          v64 = v169;
          v67 = v65;
          LODWORD(v65) = v168;
          LODWORD(v66) = v167;
        }
        do
          v171 = __ldaxr(v161);
        while (__stlxr(v171 - 1, v161));
        if (!v171)
        {
          v172 = v57;
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          v57 = v172;
        }
        v77 = v163;
      }
      else
      {
        v77 = v484;
        v63 = *(_QWORD *)v482;
        v431 = *(void **)&v482[8];
        v64 = *(void **)&v482[20];
        LODWORD(v65) = *(_DWORD *)&v482[16];
        LODWORD(v66) = *(_DWORD *)&v482[28];
        v68 = *(_QWORD *)&v482[32];
        v67 = v483;
      }
      v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28D40;
      v173 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
      if (v481.__r_.__value_.__r.__words[2])
      {
        v174 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
LABEL_415:
        if (!v175)
        {
          v281 = v66;
          v282 = v65;
          v65 = v67;
          v283 = v64;
          v284 = v57;
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
          v57 = v284;
          v64 = v283;
          v67 = v65;
          LODWORD(v65) = v282;
          LODWORD(v66) = v281;
        }
      }
LABEL_417:
      if ((_BYTE)v475)
      {
        *(_QWORD *)v473 = &off_24EC60FF0;
        v78 = *(std::__shared_weak_count **)&v473[16];
        if (*(_QWORD *)&v473[16])
        {
          v285 = (unint64_t *)(*(_QWORD *)&v473[16] + 8);
          do
            v82 = __ldaxr(v285);
          while (__stlxr(v82 - 1, v285));
LABEL_421:
          if (!v82)
          {
            v286 = v66;
            v287 = v65;
            v65 = v67;
            v288 = v64;
            v289 = v57;
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
            v57 = v289;
            v64 = v288;
            v67 = v65;
            LODWORD(v65) = v287;
            LODWORD(v66) = v286;
          }
          goto LABEL_423;
        }
      }
      goto LABEL_423;
    }
LABEL_192:
    __s.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_193;
  }
  v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28D40;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC24C98;
  sub_22449ACFC((uint64_t)v473);
  v49 = (char *)operator new();
  *(_QWORD *)v49 = &off_24EC24CE0;
  v50 = v475;
  *((_QWORD *)v49 + 7) = *(_QWORD *)v474;
  *(_OWORD *)(v49 + 8) = *(_OWORD *)&v473[8];
  *(_OWORD *)(v49 + 24) = *(_OWORD *)&v473[24];
  *(_OWORD *)(v49 + 40) = *(_OWORD *)&v473[40];
  *((_OWORD *)v49 + 4) = *(_OWORD *)&v474[8];
  *((_QWORD *)v49 + 10) = v50;
  *((_QWORD *)v49 + 13) = v477;
  *(_OWORD *)(v49 + 88) = v476;
  v478[0] = v49;
  *(_QWORD *)v479 = v49;
  v51 = (_QWORD *)operator new();
  *v51 = &off_24EC24D78;
  v51[1] = 0;
  v51[2] = 0;
  v51[3] = v49;
  *(_QWORD *)&v479[8] = v51;
  v478[0] = 0;
  sub_2232BF3A0((uint64_t *)&v481.__r_.__value_.__l.__size_, (uint64_t *)v479);
  v52 = *(std::__shared_weak_count **)&v479[8];
  if (*(_QWORD *)&v479[8])
  {
    v53 = (unint64_t *)(*(_QWORD *)&v479[8] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v478[0];
  if (v478[0])
  {
    v56 = (void *)*((_QWORD *)v478[0] + 9);
    if (v56)
      free(v56);
    v55[9] = 0;
    MEMORY[0x227684CE8](v55, 0x1091C40A44A61E0);
  }
  v58 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
  v57 = v481.__r_.__value_.__l.__size_;
  if (v481.__r_.__value_.__r.__words[2])
  {
    v59 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v61 = v484;
    do
      v62 = __ldxr(v59);
    while (__stxr(v62 + 1, v59));
    v63 = *(_QWORD *)v482;
    v431 = *(void **)&v482[8];
    v64 = *(void **)&v482[20];
    LODWORD(v65) = *(_DWORD *)&v482[16];
    LODWORD(v66) = *(_DWORD *)&v482[28];
    v68 = *(_QWORD *)&v482[32];
    v67 = v483;
    do
      v69 = __ldxr(v59);
    while (__stxr(v69 + 1, v59));
    do
      v70 = __ldaxr(v59);
    while (__stlxr(v70 - 1, v59));
    if (!v70)
    {
      v71 = v66;
      v72 = v65;
      v65 = v67;
      v73 = v64;
      v74 = v57;
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v57 = v74;
      v64 = v73;
      v67 = v65;
      LODWORD(v65) = v72;
      LODWORD(v66) = v71;
    }
    do
      v75 = __ldaxr(v59);
    while (__stlxr(v75 - 1, v59));
    if (!v75)
    {
      v76 = v57;
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v57 = v76;
    }
    v77 = v61;
    v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28D40;
    v78 = (std::__shared_weak_count *)v481.__r_.__value_.__r.__words[2];
    if (!v481.__r_.__value_.__r.__words[2])
      goto LABEL_423;
    v81 = (unint64_t *)(v481.__r_.__value_.__r.__words[2] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    goto LABEL_421;
  }
  v77 = v484;
  v63 = *(_QWORD *)v482;
  v431 = *(void **)&v482[8];
  v64 = *(void **)&v482[20];
  LODWORD(v65) = *(_DWORD *)&v482[16];
  LODWORD(v66) = *(_DWORD *)&v482[28];
  v68 = *(_QWORD *)&v482[32];
  v67 = v483;
  v481.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28D40;
LABEL_423:
  if (!BYTE8(v440))
  {
    v436 = &off_24EC26EB0;
    *(_QWORD *)&v437 = v57;
    *((_QWORD *)&v437 + 1) = v58;
    *(_QWORD *)v438 = v63;
    *(_QWORD *)&v438[8] = v431;
    *(_DWORD *)&v438[16] = v65;
    *(_QWORD *)&v438[20] = v64;
    *(_DWORD *)&v438[28] = v66;
    *(_QWORD *)&v439 = v68;
    *((_QWORD *)&v439 + 1) = v67;
    LOWORD(v440) = v77;
    BYTE8(v440) = 1;
    v4 = v423;
    v3 = v435;
    if ((v456 & 0x80000000) == 0)
      goto LABEL_432;
    goto LABEL_431;
  }
  v290 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
  *(_QWORD *)&v437 = v57;
  *((_QWORD *)&v437 + 1) = v58;
  if (v290)
  {
    v291 = (unint64_t *)&v290->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  *(_QWORD *)v438 = v63;
  *(_QWORD *)&v438[8] = v431;
  *(_DWORD *)&v438[16] = v65;
  *(_QWORD *)&v438[20] = v64;
  *(_DWORD *)&v438[28] = v66;
  *(_QWORD *)&v439 = v68;
  *((_QWORD *)&v439 + 1) = v67;
  LOWORD(v440) = v77;
  v4 = v423;
  v3 = v435;
LABEL_430:
  if (v456 < 0)
LABEL_431:
    operator delete(v455[0]);
LABEL_432:
  *(_DWORD *)v441 = *(_DWORD *)(v3 + 448);
  v441[4] = *(_BYTE *)(v3 + 452);
  *(_DWORD *)&v441[8] = *(_DWORD *)(v3 + 456);
  v441[12] = *(_BYTE *)(v3 + 460);
  sub_223482660((uint64_t)&v441[16], v3 + 464);
  LODWORD(v444) = *(_DWORD *)(v3 + 496);
  BYTE4(v444) = *(_BYTE *)(v3 + 500);
  DWORD2(v444) = *(_DWORD *)(v3 + 504);
  BYTE12(v444) = *(_BYTE *)(v3 + 508);
  sub_2231DD328(v473, v3 + 512);
  v293 = *(_OWORD *)v473;
  *(_QWORD *)&v473[8] = 0;
  *(_QWORD *)v473 = 0;
  v294 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
  v445 = v293;
  if (!v294)
    goto LABEL_436;
  v295 = (unint64_t *)&v294->__shared_owners_;
  do
    v296 = __ldaxr(v295);
  while (__stlxr(v296 - 1, v295));
  if (!v296)
  {
    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
    std::__shared_weak_count::__release_weak(v294);
    v297 = *(std::__shared_weak_count **)&v473[8];
    if (!*(_QWORD *)&v473[8])
      goto LABEL_440;
  }
  else
  {
LABEL_436:
    v297 = *(std::__shared_weak_count **)&v473[8];
    if (!*(_QWORD *)&v473[8])
      goto LABEL_440;
  }
  v298 = (unint64_t *)&v297->__shared_owners_;
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (v299)
  {
LABEL_440:
    v300 = v3 + 528;
    v301 = v449;
    if (v449 == *(unsigned __int8 *)(v3 + 564))
      goto LABEL_441;
LABEL_447:
    v302 = v429;
    if (!v301)
    {
      v307 = *(_OWORD *)(v300 + 16);
      v446 = *(_OWORD *)v300;
      v447 = v307;
      v448 = *(_DWORD *)(v300 + 32);
      v449 = 1;
      sub_22347FED4(v429, (uint64_t)&v436);
      v304 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
      if (!*((_QWORD *)&v445 + 1))
        goto LABEL_457;
      goto LABEL_450;
    }
    v449 = 0;
LABEL_449:
    sub_22347FED4(v302, (uint64_t)&v436);
    v304 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
    if (!*((_QWORD *)&v445 + 1))
      goto LABEL_457;
    goto LABEL_450;
  }
  ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
  std::__shared_weak_count::__release_weak(v297);
  v300 = v3 + 528;
  v301 = v449;
  if (v449 != *(unsigned __int8 *)(v3 + 564))
    goto LABEL_447;
LABEL_441:
  v302 = v429;
  if (!v301)
    goto LABEL_449;
  v303 = *(_OWORD *)(v300 + 16);
  v446 = *(_OWORD *)v300;
  v447 = v303;
  v448 = *(_DWORD *)(v300 + 32);
  sub_22347FED4(v429, (uint64_t)&v436);
  v304 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
  if (!*((_QWORD *)&v445 + 1))
    goto LABEL_457;
LABEL_450:
  v305 = (unint64_t *)&v304->__shared_owners_;
  do
    v306 = __ldaxr(v305);
  while (__stlxr(v306 - 1, v305));
  if (!v306)
  {
    ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
    std::__shared_weak_count::__release_weak(v304);
  }
LABEL_457:
  if ((_BYTE)v443 && *(_QWORD *)&v441[16])
  {
    *(_QWORD *)&v441[24] = *(_QWORD *)&v441[16];
    operator delete(*(void **)&v441[16]);
  }
  if (BYTE8(v440))
  {
    v436 = &off_24EC26EB0;
    v304 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    if (*((_QWORD *)&v437 + 1))
    {
      v308 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
      do
        v309 = __ldaxr(v308);
      while (__stlxr(v309 - 1, v308));
      if (!v309)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
  }
  *((_BYTE *)&v481.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v481, "MaterialLabel");
  v310 = *(_QWORD *)"ialLabel";
  v311 = *(unsigned __int8 *)(v3 + 1032);
  if (*(_BYTE *)(v3 + 1032))
  {
    sub_223C6BB04((uint64_t)&v436, v3 + 976, (std::string::size_type)&v481, a3.n128_f32[0]);
    v304 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    v310 = v437;
    *(_OWORD *)v473 = *(_OWORD *)v438;
    *(_OWORD *)&v473[10] = *(_OWORD *)&v438[10];
    v312 = *(unsigned __int8 *)(v4 + 1032);
    if (v312 == 1)
      goto LABEL_468;
LABEL_476:
    *v424 = &off_24EC270A0;
    if (!v312)
    {
      *(_QWORD *)(v4 + 984) = v310;
      *(_QWORD *)(v4 + 992) = v304;
      *(_OWORD *)(v4 + 1000) = *(_OWORD *)v473;
      *(_OWORD *)(v4 + 1010) = *(_OWORD *)&v473[10];
      *(_BYTE *)(v4 + 1032) = 1;
      goto LABEL_490;
    }
    v316 = *(std::__shared_weak_count **)(v4 + 992);
    if (v316)
    {
      v317 = (unint64_t *)&v316->__shared_owners_;
      do
        v318 = __ldaxr(v317);
      while (__stlxr(v318 - 1, v317));
      if (!v318)
      {
        ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
        std::__shared_weak_count::__release_weak(v316);
      }
    }
    *(_BYTE *)(v4 + 1032) = 0;
    goto LABEL_483;
  }
  v312 = *(unsigned __int8 *)(v4 + 1032);
  if (*(_BYTE *)(v4 + 1032))
    goto LABEL_476;
LABEL_468:
  if (v312)
  {
    *(_QWORD *)(v4 + 984) = v310;
    v313 = *(std::__shared_weak_count **)(v4 + 992);
    *(_QWORD *)(v4 + 992) = v304;
    if (v313)
    {
      v314 = (unint64_t *)&v313->__shared_owners_;
      do
        v315 = __ldaxr(v314);
      while (__stlxr(v315 - 1, v314));
      if (!v315)
      {
        ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
        std::__shared_weak_count::__release_weak(v313);
      }
    }
    *(_OWORD *)(v4 + 1000) = *(_OWORD *)v473;
    *(_OWORD *)(v4 + 1010) = *(_OWORD *)&v473[10];
    goto LABEL_490;
  }
LABEL_483:
  if (v311)
  {
    if (v304)
    {
      v319 = (unint64_t *)&v304->__shared_owners_;
      do
        v320 = __ldaxr(v319);
      while (__stlxr(v320 - 1, v319));
      if (!v320)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
  }
LABEL_490:
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  sub_223C2DA4C((uint64_t)&v436, v3, a3.n128_f32[0]);
  v321 = *(unsigned __int8 *)(v4 + 56);
  if (v321 == v439)
  {
    if (*(_BYTE *)(v4 + 56))
    {
      v322 = v437;
      v437 = 0uLL;
      v323 = *(std::__shared_weak_count **)(v4 + 16);
      *(_OWORD *)(v4 + 8) = v322;
      if (v323)
      {
        v324 = (unint64_t *)&v323->__shared_owners_;
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      *(_OWORD *)(v4 + 24) = *(_OWORD *)v438;
      *(_OWORD *)(v4 + 34) = *(_OWORD *)&v438[10];
      v326 = *(unsigned __int8 *)(v4 + 120);
      if (v326 != v442)
        goto LABEL_500;
LABEL_515:
      if (!v326)
        goto LABEL_529;
      v333 = v440;
      v440 = 0uLL;
      v334 = *(std::__shared_weak_count **)(v4 + 80);
      *(_OWORD *)(v4 + 72) = v333;
      if (v334)
      {
        v335 = (unint64_t *)&v334->__shared_owners_;
        do
          v336 = __ldaxr(v335);
        while (__stlxr(v336 - 1, v335));
        if (!v336)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
      *(_OWORD *)(v4 + 88) = *(_OWORD *)v441;
      *(_OWORD *)(v4 + 98) = *(_OWORD *)&v441[10];
      v337 = *(unsigned __int8 *)(v4 + 208);
      if (v337 != v450)
        goto LABEL_522;
      goto LABEL_530;
    }
  }
  else
  {
    *(_QWORD *)v4 = &off_24EC21328;
    if (!v321)
    {
      *(_OWORD *)(v4 + 8) = v437;
      v437 = 0uLL;
      *(_OWORD *)(v4 + 24) = *(_OWORD *)v438;
      *(_OWORD *)(v4 + 34) = *(_OWORD *)&v438[10];
      *(_BYTE *)(v4 + 56) = 1;
      v326 = *(unsigned __int8 *)(v4 + 120);
      if (v326 == v442)
        goto LABEL_515;
      goto LABEL_500;
    }
    v330 = *(std::__shared_weak_count **)(v4 + 16);
    if (v330)
    {
      v331 = (unint64_t *)&v330->__shared_owners_;
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
    *(_BYTE *)(v4 + 56) = 0;
  }
  v326 = *(unsigned __int8 *)(v4 + 120);
  if (v326 == v442)
    goto LABEL_515;
LABEL_500:
  *(_QWORD *)(v4 + 64) = &off_24EC21328;
  if (v326)
  {
    v327 = *(std::__shared_weak_count **)(v4 + 80);
    if (v327)
    {
      v328 = (unint64_t *)&v327->__shared_owners_;
      do
        v329 = __ldaxr(v328);
      while (__stlxr(v329 - 1, v328));
      if (!v329)
      {
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
    }
    *(_BYTE *)(v4 + 120) = 0;
LABEL_529:
    v337 = *(unsigned __int8 *)(v4 + 208);
    if (v337 == v450)
      goto LABEL_530;
LABEL_522:
    *(_QWORD *)(v4 + 128) = &off_24EC26FA8;
    if (!v337)
    {
      *(_OWORD *)(v4 + 136) = v444;
      v444 = 0uLL;
      *(_OWORD *)(v4 + 152) = v445;
      *(_OWORD *)(v4 + 168) = v446;
      *(_OWORD *)(v4 + 184) = v447;
      *(_WORD *)(v4 + 200) = v448;
      *(_BYTE *)(v4 + 208) = 1;
      v350 = v451;
      v451 = 0uLL;
      v346 = *(std::__shared_weak_count **)(v4 + 224);
      *(_OWORD *)(v4 + 216) = v350;
      if (!v346)
        goto LABEL_548;
      goto LABEL_539;
    }
    v338 = *(std::__shared_weak_count **)(v4 + 144);
    if (v338)
    {
      v339 = (unint64_t *)&v338->__shared_owners_;
      do
        v340 = __ldaxr(v339);
      while (__stlxr(v340 - 1, v339));
      if (!v340)
      {
        ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
        std::__shared_weak_count::__release_weak(v338);
      }
    }
    *(_BYTE *)(v4 + 208) = 0;
LABEL_538:
    v347 = v451;
    v451 = 0uLL;
    v346 = *(std::__shared_weak_count **)(v4 + 224);
    *(_OWORD *)(v4 + 216) = v347;
    if (!v346)
      goto LABEL_548;
    goto LABEL_539;
  }
  *(_OWORD *)(v4 + 72) = v440;
  v440 = 0uLL;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)v441;
  *(_OWORD *)(v4 + 98) = *(_OWORD *)&v441[10];
  *(_BYTE *)(v4 + 120) = 1;
  v337 = *(unsigned __int8 *)(v4 + 208);
  if (v337 != v450)
    goto LABEL_522;
LABEL_530:
  if (!v337)
    goto LABEL_538;
  v341 = v444;
  v444 = 0uLL;
  v342 = *(std::__shared_weak_count **)(v4 + 144);
  *(_OWORD *)(v4 + 136) = v341;
  if (v342)
  {
    v343 = (unint64_t *)&v342->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  *(_OWORD *)(v4 + 152) = v445;
  *(_OWORD *)(v4 + 168) = v446;
  *(_OWORD *)(v4 + 184) = v447;
  *(_WORD *)(v4 + 200) = v448;
  v345 = v451;
  v451 = 0uLL;
  v346 = *(std::__shared_weak_count **)(v4 + 224);
  *(_OWORD *)(v4 + 216) = v345;
  if (v346)
  {
LABEL_539:
    v348 = (unint64_t *)&v346->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
LABEL_548:
  v351 = (std::__shared_weak_count *)*((_QWORD *)&v451 + 1);
  if (*((_QWORD *)&v451 + 1))
  {
    v352 = (unint64_t *)(*((_QWORD *)&v451 + 1) + 8);
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  if (v450)
  {
    v443 = &off_24EC26FA8;
    v354 = (std::__shared_weak_count *)*((_QWORD *)&v444 + 1);
    if (*((_QWORD *)&v444 + 1))
    {
      v355 = (unint64_t *)(*((_QWORD *)&v444 + 1) + 8);
      do
        v356 = __ldaxr(v355);
      while (__stlxr(v356 - 1, v355));
      if (!v356)
      {
        ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
        std::__shared_weak_count::__release_weak(v354);
      }
    }
  }
  if (v442)
  {
    *((_QWORD *)&v439 + 1) = &off_24EC21328;
    v357 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
    if (*((_QWORD *)&v440 + 1))
    {
      v358 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
  }
  if ((_BYTE)v439)
  {
    v436 = &off_24EC21328;
    v360 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    if (*((_QWORD *)&v437 + 1))
    {
      v361 = (unint64_t *)(*((_QWORD *)&v437 + 1) + 8);
      do
        v362 = __ldaxr(v361);
      while (__stlxr(v362 - 1, v361));
      if (!v362)
      {
        ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
        std::__shared_weak_count::__release_weak(v360);
      }
    }
  }
  sub_223482CFC(v428, v3 + 1040);
  sub_223482418(v4 + 1128, v3 + 1128);
  v363 = (_OWORD *)(v4 + 1408);
  *(_OWORD *)(v4 + 1216) = *(_OWORD *)(v3 + 1216);
  v364 = (_OWORD *)(v3 + 1408);
  if (*(unsigned __int8 *)(v4 + 1608) != *(unsigned __int8 *)(v3 + 1608))
  {
    if (!*(_BYTE *)(v4 + 1608))
    {
      *v363 = *v364;
      *(_DWORD *)(v4 + 1424) = *(_DWORD *)(v3 + 1424);
      sub_223258368((_QWORD *)(v4 + 1432), v3 + 1432);
      *(_BYTE *)(v4 + 1600) = *(_BYTE *)(v3 + 1600);
      *(_BYTE *)(v4 + 1608) = 1;
      v365 = (_OWORD *)(v4 + 1616);
      v366 = (_OWORD *)(v3 + 1616);
      v367 = *(unsigned __int8 *)(v4 + 1744);
      if (v367 == *(unsigned __int8 *)(v3 + 1744))
        goto LABEL_579;
LABEL_574:
      if (v367)
      {
        *(_BYTE *)(v4 + 1744) = 0;
      }
      else
      {
        v370 = v366[1];
        *v365 = *v366;
        v365[1] = v370;
        v371 = v366[3];
        v365[2] = v366[2];
        v365[3] = v371;
        *(_OWORD *)(v4 + 1680) = *(_OWORD *)(v3 + 1680);
        *(_OWORD *)(v4 + 1696) = *(_OWORD *)(v3 + 1696);
        *(_OWORD *)(v4 + 1712) = *(_OWORD *)(v3 + 1712);
        *(_OWORD *)(v4 + 1728) = *(_OWORD *)(v3 + 1728);
        *(_BYTE *)(v4 + 1744) = 1;
      }
      goto LABEL_584;
    }
    sub_223255CAC(v4 + 1432);
    *(_BYTE *)(v4 + 1608) = 0;
LABEL_578:
    v365 = (_OWORD *)(v4 + 1616);
    v366 = (_OWORD *)(v3 + 1616);
    v367 = *(unsigned __int8 *)(v4 + 1744);
    if (v367 == *(unsigned __int8 *)(v3 + 1744))
      goto LABEL_579;
    goto LABEL_574;
  }
  if (!*(_BYTE *)(v4 + 1608))
    goto LABEL_578;
  *v363 = *v364;
  *(_DWORD *)(v4 + 1424) = *(_DWORD *)(v3 + 1424);
  sub_223482F44((char **)(v4 + 1432), (char **)(v3 + 1432));
  *(_BYTE *)(v4 + 1600) = *(_BYTE *)(v3 + 1600);
  v365 = (_OWORD *)(v4 + 1616);
  v366 = (_OWORD *)(v3 + 1616);
  v367 = *(unsigned __int8 *)(v4 + 1744);
  if (v367 != *(unsigned __int8 *)(v3 + 1744))
    goto LABEL_574;
LABEL_579:
  if (v367)
  {
    v368 = v366[1];
    *v365 = *v366;
    v365[1] = v368;
    v369 = v366[3];
    v365[2] = v366[2];
    v365[3] = v369;
    *(_OWORD *)(v4 + 1680) = *(_OWORD *)(v3 + 1680);
    *(_OWORD *)(v4 + 1696) = *(_OWORD *)(v3 + 1696);
    *(_OWORD *)(v4 + 1712) = *(_OWORD *)(v3 + 1712);
    *(_OWORD *)(v4 + 1728) = *(_OWORD *)(v3 + 1728);
  }
LABEL_584:
  v372 = *(_QWORD *)(v3 + 1760);
  v373 = *(_QWORD *)(v3 + 1768);
  *(_QWORD *)v479 = &off_24EC715B8;
  *(_OWORD *)&v479[8] = 0uLL;
  *(_QWORD *)v473 = &off_24EC715B8;
  *(_QWORD *)&v473[8] = v372;
  *(_QWORD *)&v473[16] = v373;
  if (v373)
  {
    v374 = (unint64_t *)(v373 + 8);
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
  }
  *((_BYTE *)&v481.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v481, "ActiveDepthFoVMask");
  sub_223C330CC(&v436, (uint64_t)v473, (uint64_t)&v481, a3.n128_f32[0]);
  v376 = v437;
  v437 = 0uLL;
  *(_OWORD *)&v479[8] = v376;
  v436 = &off_24EC715B8;
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  *(_QWORD *)v473 = &off_24EC715B8;
  v377 = *(std::__shared_weak_count **)&v473[16];
  if (*(_QWORD *)&v473[16])
  {
    v378 = (unint64_t *)(*(_QWORD *)&v473[16] + 8);
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
  v380 = *(_OWORD *)&v479[8];
  *(_OWORD *)&v479[8] = 0uLL;
  v381 = *(std::__shared_weak_count **)(v4 + 1768);
  *(_OWORD *)(v4 + 1760) = v380;
  if (!v381)
    goto LABEL_598;
  v382 = (unint64_t *)&v381->__shared_owners_;
  do
    v383 = __ldaxr(v382);
  while (__stlxr(v383 - 1, v382));
  if (!v383)
  {
    ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
    std::__shared_weak_count::__release_weak(v381);
    *(_QWORD *)v479 = &off_24EC715B8;
    v384 = *(std::__shared_weak_count **)&v479[16];
    if (!*(_QWORD *)&v479[16])
      goto LABEL_602;
  }
  else
  {
LABEL_598:
    *(_QWORD *)v479 = &off_24EC715B8;
    v384 = *(std::__shared_weak_count **)&v479[16];
    if (!*(_QWORD *)&v479[16])
      goto LABEL_602;
  }
  v385 = (unint64_t *)&v384->__shared_owners_;
  do
    v386 = __ldaxr(v385);
  while (__stlxr(v386 - 1, v385));
  if (!v386)
  {
    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
    std::__shared_weak_count::__release_weak(v384);
    if (v4 == v3)
      goto LABEL_604;
    goto LABEL_603;
  }
LABEL_602:
  if (v4 != v3)
LABEL_603:
    sub_2234831B0((void **)(v4 + 1776), *(_QWORD *)(v3 + 1776), *(_QWORD *)(v3 + 1784), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 1784) - *(_QWORD *)(v3 + 1776)) >> 5));
LABEL_604:
  *(_BYTE *)(v4 + 1400) = *(_BYTE *)(v3 + 1400);
  *(_WORD *)(v4 + 1800) = *(_WORD *)(v3 + 1800);
  return kdebug_trace();
}

void sub_223C36DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *__p;
  void *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *v76;
  unint64_t v77;
  void *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;

  v76 = __p;
  if (__p)
  {
    v77 = STACK[0x200];
    v78 = __p;
    if ((void *)STACK[0x200] != __p)
    {
      do
      {
        if (*(char *)(v77 - 1) < 0)
          operator delete(*(void **)(v77 - 24));
        v77 -= 24;
      }
      while ((void *)v77 != v76);
      v78 = __p;
    }
    STACK[0x200] = (unint64_t)v76;
    operator delete(v78);
  }
  if (*(char *)(v74 - 161) < 0)
    operator delete(*(void **)(v74 - 184));
  if (*(char *)(v74 - 185) < 0)
    operator delete(*(void **)(v74 - 208));
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  __cxa_guard_abort(&qword_2540CD038);
  __cxa_free_exception(v72);
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (a62 < 0)
    operator delete(a57);
  sub_223255B0C((uint64_t)&a22);
  sub_2232555B8(a10);
  sub_2231874DC((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_223C37324(uint64_t a1)
{
  float v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v86;
  uint64_t v87;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t (**v141)();
  uint64_t v142;
  std::__shared_weak_count *v143;
  _BYTE v144[26];
  char v145;
  uint64_t (**v146)();
  __int128 v147;
  _BYTE v148[30];
  char v149;
  uint64_t (**v150)();
  __int128 v151;
  _BYTE v152[28];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int16 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int16 v167;
  _QWORD v168[2];
  std::__shared_weak_count *v169;
  uint64_t (**v170)();
  __int128 v171;
  _OWORD v172[2];
  uint64_t (**v173)();
  uint64_t v174;
  std::__shared_weak_count *v175;
  _BYTE v176[26];

  v2 = a1;
  v3 = *(uint64_t **)(a1 + 1760);
  if (!v3)
    goto LABEL_67;
  v4 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_67;
  }
  else
  {
LABEL_7:
    if (!v4)
      goto LABEL_67;
  }
  v9 = *(_QWORD *)(v2 + 1760);
  v10 = *(std::__shared_weak_count **)(v2 + 1768);
  v168[0] = &off_24EC715B8;
  v168[1] = v9;
  v169 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_22429724C((uint64_t)v168, (uint64_t)&v146);
  v170 = &off_24EC28CD0;
  v171 = v147;
  v172[0] = *(_OWORD *)v148;
  *(_OWORD *)((char *)v172 + 14) = *(_OWORD *)&v148[14];
  v173 = &off_24EC21040;
  sub_2232BDBB0((uint64_t)&v170, (uint64_t)&v174);
  v141 = &off_24EC21328;
  v13 = v174;
  v14 = v175;
  if (v175)
  {
    v15 = (unint64_t *)&v175->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = *(_WORD *)&v176[24];
    do
      v18 = __ldxr(v15);
    while (__stxr(v18 + 1, v15));
    v19 = *(_QWORD *)v176;
    *(_OWORD *)&v144[8] = *(_OWORD *)&v176[8];
    do
      v20 = __ldxr(v15);
    while (__stxr(v20 + 1, v15));
    v142 = v13;
    v143 = v14;
    *(_QWORD *)v144 = v19;
    *(_WORD *)&v144[24] = v17;
    do
      v21 = __ldaxr(v15);
    while (__stlxr(v21 - 1, v15));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v22 = __ldaxr(v15);
    while (__stlxr(v22 - 1, v15));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v142 = v174;
    v143 = 0;
    *(_QWORD *)v144 = *(_QWORD *)v176;
    *(_OWORD *)&v144[8] = *(_OWORD *)&v176[8];
    *(_WORD *)&v144[24] = *(_WORD *)&v176[24];
  }
  sub_223C30C48((uint64_t)&v150, (uint64_t)&v141);
  v141 = &off_24EC21328;
  v23 = v143;
  if (v143)
  {
    v24 = (unint64_t *)&v143->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v173 = &off_24EC21040;
  v26 = v175;
  if (v175)
  {
    v27 = (unint64_t *)&v175->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v170 = &off_24EC28CD0;
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v168[0] = &off_24EC715B8;
  v32 = v169;
  if (v169)
  {
    v33 = (unint64_t *)&v169->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (char *)operator new(0x130uLL);
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 2) = 0;
  *(_QWORD *)v35 = &off_24EC612D8;
  *((_QWORD *)v35 + 3) = &off_24EC21328;
  v36 = v151;
  v151 = 0uLL;
  v37 = *(_OWORD *)v152;
  *((_OWORD *)v35 + 2) = v36;
  *((_OWORD *)v35 + 3) = v37;
  *(_OWORD *)(v35 + 58) = *(_OWORD *)&v152[10];
  *((_QWORD *)v35 + 10) = &off_24EC216B8;
  v38 = v154;
  *(_OWORD *)(v35 + 88) = v153;
  v153 = 0uLL;
  v39 = v155;
  v40 = v156;
  *((_QWORD *)v35 + 19) = v157;
  *(_OWORD *)(v35 + 136) = v40;
  *(_OWORD *)(v35 + 120) = v39;
  *(_OWORD *)(v35 + 104) = v38;
  *((_WORD *)v35 + 80) = v158;
  *((_QWORD *)v35 + 21) = &off_24EC617D0;
  v41 = v159;
  v159 = 0uLL;
  v42 = v164;
  *((_OWORD *)v35 + 15) = v163;
  *((_OWORD *)v35 + 16) = v42;
  *((_OWORD *)v35 + 17) = v165;
  *((_QWORD *)v35 + 36) = v166;
  v43 = v160;
  *((_OWORD *)v35 + 11) = v41;
  *((_OWORD *)v35 + 12) = v43;
  v44 = v162;
  *((_OWORD *)v35 + 13) = v161;
  *((_OWORD *)v35 + 14) = v44;
  *((_WORD *)v35 + 148) = v167;
  v45 = *(std::__shared_weak_count **)(v2 + 224);
  *(_QWORD *)(v2 + 216) = v35 + 24;
  *(_QWORD *)(v2 + 224) = v35;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
  if (*((_QWORD *)&v153 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v150 = &off_24EC21328;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (!*((_QWORD *)&v151 + 1))
    goto LABEL_67;
  v55 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (v56)
  {
LABEL_67:
    if (!*(_BYTE *)(v2 + 288))
      goto LABEL_125;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
  std::__shared_weak_count::__release_weak(v54);
  if (!*(_BYTE *)(v2 + 288))
    goto LABEL_125;
LABEL_68:
  if ((!*(_DWORD *)(v2 + 264) || !*(_DWORD *)(v2 + 268))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_157;
  }
  sub_223C3F490(v2 + 232, (uint64_t)&v150);
  v146 = &off_24EC21420;
  v147 = v151;
  *(_OWORD *)v148 = *(_OWORD *)v152;
  *(_OWORD *)&v148[10] = *(_OWORD *)&v152[10];
  v149 = 1;
  v170 = *(uint64_t (***)())(v2 + 264);
  v150 = &off_24EC21138;
  sub_2231C2980(&v170, (uint64_t *)&v151);
  v57 = *(unsigned __int8 *)(v2 + 352);
  if (*(_BYTE *)(v2 + 352))
  {
    if ((!*(_DWORD *)(v2 + 328) || !*(_DWORD *)(v2 + 332))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1187, (uint64_t)"!semantic.confidence->Empty()", 29, (uint64_t)"Semantic confidence buffer not valid", 36, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(v2 + 296, (uint64_t)&v173);
    v58 = v175;
    v141 = &off_24EC200A8;
    v142 = v174;
    v143 = v175;
    *(_OWORD *)v144 = *(_OWORD *)v176;
    *(_OWORD *)&v144[10] = *(_OWORD *)&v176[10];
    v145 = 1;
    v132 = HIDWORD(v170);
    if (!HIDWORD(v170))
      goto LABEL_108;
    if (!(_DWORD)v170)
    {
LABEL_107:
      v58 = v143;
LABEL_108:
      if (v58)
      {
        v100 = (unint64_t *)&v58->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      goto LABEL_113;
    }
    v125 = v57;
    v126 = v2;
    v133 = 0;
    v59 = *(_DWORD *)&v148[16];
    v131 = *(_DWORD *)&v148[20];
    v130 = *(_QWORD *)v148;
    v60 = *(_DWORD *)&v144[16];
    v129 = *(_DWORD *)&v144[20];
    LOWORD(v1) = 23544;
    v128 = *(_QWORD *)v144;
    v136 = *(_DWORD *)&v144[16];
    do
    {
      v61 = v170;
      if ((_DWORD)v170)
      {
        v62 = v130 + (v131 * v133);
        v63 = v128 + 2 * (v129 * v133);
        v64 = *(unsigned int *)&v152[24];
        v65 = *(_QWORD *)v152 + 2 * (DWORD1(v153) * v133);
        if (*(_QWORD *)v152)
        {
          v66 = 0;
          v67 = 0;
          v68 = 0;
          do
          {
            _H0 = *(_WORD *)(v63 + 2 * v66);
            __asm { FCVT            S0, H0 }
            _S0 = _S0 * 10.0;
            __asm
            {
              FCVT            H0, S0
              FCVT            S1, H0
            }
            if (_S1 > 255.0)
              _S0 = v1;
            __asm { FCVT            S0, H0 }
            *(_QWORD *)(v65 + 2 * v68) = (int)_S0 | ((unint64_t)*(unsigned __int8 *)(v62 + v67) << 8) | 0xFE00FE00FE000000;
            v68 += v64;
            v67 += v59;
            v66 += v60;
            --v61;
          }
          while (v61);
        }
        else
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          do
          {
            _H0 = *(_WORD *)(v63 + 2 * v78);
            __asm { FCVT            S0, H0 }
            _S0 = _S0 * 10.0;
            __asm
            {
              FCVT            H0, S0
              FCVT            S1, H0
            }
            if (_S1 <= 255.0)
              _S10 = _S0;
            else
              _S10 = v1;
            v86 = v62;
            v87 = *(unsigned __int8 *)(v62 + v79);
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            __asm { FCVT            S0, H10 }
            *(_QWORD *)(v65 + 2 * v80) = (int)_S0 | (unint64_t)(v87 << 8) | 0xFE00FE00FE000000;
            v80 += v64;
            v79 += v59;
            v60 = v136;
            v78 += v136;
            --v61;
            v62 = v86;
            v63 = v128 + 2 * (v129 * v133);
          }
          while (v61);
        }
      }
      ++v133;
    }
    while (v133 != v132);
  }
  else
  {
    LOBYTE(v141) = 0;
    v145 = 0;
    v139 = HIDWORD(v170);
    if (!HIDWORD(v170) || !(_DWORD)v170)
      goto LABEL_113;
    v125 = v57;
    v126 = v2;
    v89 = 0;
    v90 = *(_DWORD *)&v148[16];
    v137 = *(_DWORD *)&v148[20];
    v134 = *(_QWORD *)v148;
    do
    {
      v91 = v170;
      if ((_DWORD)v170)
      {
        v92 = v134 + (v137 * v89);
        v93 = *(unsigned int *)&v152[24];
        v94 = *(_QWORD *)v152 + 2 * (DWORD1(v153) * v89);
        if (*(_QWORD *)v152)
        {
          v95 = 0;
          v96 = 0;
          do
          {
            *(_QWORD *)(v94 + 2 * v96) = ((unint64_t)*(unsigned __int8 *)(v92 + v95) << 8) | 0xFE00FE00FE00000ALL;
            v96 += v93;
            v95 += v90;
            --v91;
          }
          while (v91);
        }
        else
        {
          v97 = 0;
          v98 = 0;
          do
          {
            v99 = *(unsigned __int8 *)(v92 + v97);
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            *(_QWORD *)(v94 + 2 * v98) = (v99 << 8) | 0xFE00FE00FE00000ALL;
            v98 += v93;
            v97 += v90;
            --v91;
          }
          while (v91);
        }
      }
      ++v89;
    }
    while (v89 != v139);
  }
  v2 = v126;
  if (v125)
    goto LABEL_107;
LABEL_113:
  sub_2231BDE0C(v2 + 800, (uint64_t)&v150);
  v150 = &off_24EC21138;
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v149)
  {
    v105 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
  }
LABEL_125:
  if (!*(_BYTE *)(v2 + 1032))
    return;
  if ((!*(_DWORD *)(v2 + 1008) || !*(_DWORD *)(v2 + 1012))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1199, (uint64_t)"!materials_image->Empty()", 25, (uint64_t)"Material buffer not valid", 25, (void (*)(void **))sub_22457406C))
  {
LABEL_157:
    abort();
  }
  sub_223C3F490(v2 + 976, (uint64_t)&v150);
  v146 = &off_24EC21420;
  v147 = v151;
  *(_OWORD *)v148 = *(_OWORD *)v152;
  *(_OWORD *)&v148[10] = *(_OWORD *)&v152[10];
  v149 = 1;
  v127 = v2;
  v141 = *(uint64_t (***)())(v2 + 1008);
  v150 = &off_24EC21138;
  sub_2231C2980(&v141, (uint64_t *)&v151);
  v140 = HIDWORD(v141);
  if (HIDWORD(v141) && (_DWORD)v141)
  {
    v108 = 0;
    v109 = *(_DWORD *)&v148[16];
    v138 = *(_DWORD *)&v148[20];
    v135 = *(_QWORD *)v148;
    do
    {
      v110 = v141;
      if ((_DWORD)v141)
      {
        v111 = v135 + (v138 * v108);
        v112 = *(unsigned int *)&v152[24];
        v113 = *(_QWORD *)v152 + 2 * (DWORD1(v153) * v108);
        if (*(_QWORD *)v152)
        {
          v114 = 0;
          v115 = 0;
          do
          {
            *(_QWORD *)(v113 + 2 * v115) = ((unint64_t)*(unsigned __int8 *)(v111 + v114) << 8) | 0xFE00FE00FE00000ALL;
            v115 += v112;
            v114 += v109;
            --v110;
          }
          while (v110);
        }
        else
        {
          v116 = 0;
          v117 = 0;
          do
          {
            v118 = *(unsigned __int8 *)(v111 + v116);
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            *(_QWORD *)(v113 + 2 * v117) = (v118 << 8) | 0xFE00FE00FE00000ALL;
            v117 += v112;
            v116 += v109;
            --v110;
          }
          while (v110);
        }
      }
      ++v108;
    }
    while (v108 != v140);
  }
  sub_2231BDE0C(v127 + 888, (uint64_t)&v150);
  v150 = &off_24EC21138;
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v149)
  {
    v122 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v123 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
}

void sub_223C37F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_223C322D0(&a34);
  _Unwind_Resume(a1);
}

void sub_223C37F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_2231BEAF8((uint64_t *)va);
  sub_2231BBBE4((_QWORD *)(v10 - 176));
  sub_2232B45D0((_QWORD *)(v10 - 232));
  sub_2242A8F3C((_QWORD *)(v10 - 256));
  _Unwind_Resume(a1);
}

void sub_223C37F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2242A8F3C((_QWORD *)(v1 - 256));
  _Unwind_Resume(a1);
}

void sub_223C37FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_2231BBD94(&a34);
  sub_2231BD90C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_223C38034(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(a1 + 288))
  {
    if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(a1 + 232, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC21420;
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v6 + 10);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

void sub_223C380FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(a1 + 352))
  {
    if ((!*(_DWORD *)(a1 + 328) || !*(_DWORD *)(a1 + 332))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1187, (uint64_t)"!semantic.confidence->Empty()", 29, (uint64_t)"Semantic confidence buffer not valid", 36, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1 + 296, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC200A8;
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v6 + 10);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

void sub_223C381C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(a1 + 1032))
  {
    if ((!*(_DWORD *)(a1 + 1008) || !*(_DWORD *)(a1 + 1012))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1199, (uint64_t)"!materials_image->Empty()", 25, (uint64_t)"Material buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(a1 + 976, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC21420;
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v6 + 10);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

void sub_223C3828C(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  float32x2_t v3;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  double v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  float v26;
  double v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string::size_type size;
  std::string *p_valuePtr;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _BOOL4 v61;
  float *v62;
  double v63;
  float v64;
  double v65;
  float v66;
  double v67;
  float v68;
  double v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char v96;
  unsigned int v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char v104;
  unsigned __int8 *v105;
  unsigned int v106;
  BOOL v107;
  unsigned int v108;
  unsigned int v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  const std::string::value_type *v122;
  std::string::size_type v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  const std::string::value_type *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  std::string *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  float32x4_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  float32x2_t v146;
  int8x16_t v147;
  float32x2_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  float32x4_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  double *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  float32x2_t v167;
  float32x4_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  float32x2_t v172;
  int8x16_t v173;
  float32x4_t v174;
  int8x16_t v175;
  float32x2_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  char v206;
  int8x16_t v207;
  float32x2_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::string::value_type v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  int32x2_t v225;
  int32x2_t v226;
  float32x4_t v227;
  char v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  _QWORD *v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x4_t v235;
  uint64_t v236;
  _BYTE __p[24];
  _BYTE v238[32];
  __int128 v239;
  __int16 v240;
  char v241;
  std::string v242;
  double v243[4];
  __int128 v244;
  char v245;
  std::string valuePtr;
  _BYTE v247[24];
  _BYTE v248[32];
  __int128 v249;
  __int16 v250;
  uint64_t v251;

  v251 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  sub_2245314F4(__p, v247);
  v244 = *(_OWORD *)v247;
  sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
  __p[23] = 2;
  strcpy(__p, "ts");
  *(double *)&valuePtr.__r_.__value_.__l.__data_ = (double)*(uint64_t *)(a1 + 1232) / 1000000000.0;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2236772E4((uint64_t)&v244, *(const void **)v247, &valuePtr);
  v7 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_5;
  v8 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_5:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if ((__p[23] & 0x80000000) != 0)
LABEL_6:
    operator delete(*(void **)__p);
LABEL_7:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&valuePtr, "depth.is_zero");
  if (*(_BYTE *)(a1 + 56))
  {
    if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC200A8;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    v10 = 1;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8] && *(_DWORD *)&v238[12])
    {
      _H1 = *(_WORD *)(*(_QWORD *)v238
                     + 2
                     * (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                    + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1)));
      __asm { FCVT            S0, H1 }
      if (_S0 == 0.0)
      {
        v10 = 1;
      }
      else
      {
        __asm { FCVT            D1, H1 }
        if (_S0 >= 0.0)
          v18 = _D1;
        else
          v18 = 0.0 - _D1;
        v10 = v18 <= 0.0009765625;
      }
    }
  }
  else
  {
    __p[0] = 0;
    LOBYTE(v239) = 0;
    v10 = 1;
  }
  LOBYTE(v243[0]) = v10;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v19 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_26;
  v20 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!(_BYTE)v239)
      goto LABEL_34;
  }
  else
  {
LABEL_26:
    if (!(_BYTE)v239)
      goto LABEL_34;
  }
  v22 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_34;
  v23 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_34:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_35:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_36:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&valuePtr, "raster_depth.is_zero");
  if (*(_BYTE *)(a1 + 688))
  {
    if ((!*(_DWORD *)(a1 + 664) || !*(_DWORD *)(a1 + 668))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1157, (uint64_t)"!derived.raster_depth->Empty()", 30, (uint64_t)"Rasterized depth buffer not valid", 33, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3C8D8(a1 + 632, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC21230;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    v25 = 1;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8] && *(_DWORD *)&v238[12])
    {
      v26 = *(float *)(*(_QWORD *)v238
                     + 4
                     * (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                    + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1)));
      if (v26 == 0.0)
      {
        v25 = 1;
      }
      else
      {
        if (v26 >= 0.0)
          v27 = v26;
        else
          v27 = 0.0 - v26;
        v25 = v27 <= 0.00000011920929;
      }
    }
  }
  else
  {
    __p[0] = 0;
    LOBYTE(v239) = 0;
    v25 = 1;
  }
  LOBYTE(v243[0]) = v25;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v28 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_53;
  v29 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!(_BYTE)v239)
      goto LABEL_61;
  }
  else
  {
LABEL_53:
    if (!(_BYTE)v239)
      goto LABEL_61;
  }
  v31 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_61;
  v32 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_61:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_62;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_63;
LABEL_62:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_63:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&valuePtr, "depth.confidence");
  if (*(_BYTE *)(a1 + 120))
  {
    if ((!*(_DWORD *)(a1 + 96) || !*(_DWORD *)(a1 + 100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1 + 64, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC200A8;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8] && *(_DWORD *)&v238[12])
    {
      LODWORD(v236) = *(unsigned __int16 *)(*(_QWORD *)v238
                                          + 2
                                          * (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                                         + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1))) | 0x10000;
      *(_DWORD *)v248 = 0;
      sub_223C6DE48((uint64_t)&v242, (uint64_t)v247, (__int16 *)&v236);
      goto LABEL_72;
    }
  }
  else
  {
    __p[0] = 0;
    LOBYTE(v239) = 0;
  }
  LODWORD(v236) = 0;
  *(_DWORD *)v248 = 0;
  sub_2231A0D14(v247, "nullopt");
LABEL_72:
  if (*(_DWORD *)v248 == -1)
    sub_22316DD70();
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  ((void (*)(double *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v248])(v243, &v242, v247);
  if (*(_DWORD *)v248 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v248])(&v242, v247);
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_2236634D4((uint64_t)&v244, *(const void **)v247, (uint64_t)v243);
  v34 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_79;
  v35 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_79:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_80;
LABEL_83:
    operator delete(*(void **)&v243[0]);
    if (!(_BYTE)v239)
      goto LABEL_88;
    goto LABEL_84;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (SHIBYTE(v243[2]) < 0)
    goto LABEL_83;
LABEL_80:
  if (!(_BYTE)v239)
    goto LABEL_88;
LABEL_84:
  v37 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_88;
  v38 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_88:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
LABEL_92:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
    if ((a2 & 1) != 0)
      goto LABEL_174;
LABEL_93:
    HIBYTE(v243[2]) = 13;
    strcpy((char *)v243, "depth.normals");
    if (*(_BYTE *)(a1 + 208))
    {
      if ((!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223C3D9D0(a1 + 128, (uint64_t)v247);
      *(_QWORD *)__p = &off_24EC25150;
      *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
      v239 = v249;
      *(_OWORD *)v238 = *(_OWORD *)v248;
      *(_OWORD *)&v238[16] = *(_OWORD *)&v248[16];
      v240 = v250;
      v241 = 1;
      if ((_DWORD)v249 && DWORD1(v239))
      {
        v228 = a2;
        v232 = a3;
        v40 = (__int16 *)(*(_QWORD *)v238
                        + 2 * (DWORD2(v239) * (v249 >> 1) + HIDWORD(v239) * (DWORD1(v239) >> 1)));
        sub_223C6E24C((uint64_t)v247, v40);
        if (v247[23] >= 0)
          v41 = v247[23];
        else
          v41 = *(_QWORD *)&v247[8];
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        sub_223C6E24C((uint64_t)v247, v40 + 1);
        if (v247[23] >= 0)
          v42 = v247[23];
        else
          v42 = *(_QWORD *)&v247[8];
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        sub_223C6E24C((uint64_t)v247, v40 + 2);
        if (v247[23] >= 0)
          v43 = v247[23];
        else
          v43 = *(_QWORD *)&v247[8];
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        sub_223C6E24C((uint64_t)v247, v40 + 3);
        if (v247[23] >= 0)
          v44 = v247[23];
        else
          v44 = *(_QWORD *)&v247[8];
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        memset(&valuePtr, 0, sizeof(valuePtr));
        std::string::reserve(&valuePtr, v41 + v42 + v43 + v44 + 3);
        sub_223C6E24C((uint64_t)v247, v40);
        a3 = v232;
        if (v247[23] >= 0)
          v45 = v247;
        else
          v45 = *(const std::string::value_type **)v247;
        if (v247[23] >= 0)
          v46 = v247[23];
        else
          v46 = *(_QWORD *)&v247[8];
        std::string::append(&valuePtr, v45, v46);
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        std::string::append(&valuePtr, ",", 1uLL);
        sub_223C6E24C((uint64_t)v247, v40 + 1);
        if (v247[23] >= 0)
          v47 = v247;
        else
          v47 = *(const std::string::value_type **)v247;
        if (v247[23] >= 0)
          v48 = v247[23];
        else
          v48 = *(_QWORD *)&v247[8];
        std::string::append(&valuePtr, v47, v48);
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        std::string::append(&valuePtr, ",", 1uLL);
        sub_223C6E24C((uint64_t)v247, v40 + 2);
        if (v247[23] >= 0)
          v49 = v247;
        else
          v49 = *(const std::string::value_type **)v247;
        if (v247[23] >= 0)
          v50 = v247[23];
        else
          v50 = *(_QWORD *)&v247[8];
        std::string::append(&valuePtr, v49, v50);
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        std::string::append(&valuePtr, ",", 1uLL);
        sub_223C6E24C((uint64_t)v247, v40 + 3);
        if (v247[23] >= 0)
          v51 = v247;
        else
          v51 = *(const std::string::value_type **)v247;
        if (v247[23] >= 0)
          v52 = v247[23];
        else
          v52 = *(_QWORD *)&v247[8];
        std::string::append(&valuePtr, v51, v52);
        a2 = v228;
        if ((v247[23] & 0x80000000) != 0)
          operator delete(*(void **)v247);
        *(_QWORD *)v247 = "[";
        *(_QWORD *)&v247[8] = 1;
        size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
        p_valuePtr = &valuePtr;
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          size = valuePtr.__r_.__value_.__l.__size_;
          p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)&v247[16] = p_valuePtr;
        *(_QWORD *)v248 = size;
        *(_QWORD *)&v248[8] = "]";
        *(_QWORD *)&v248[16] = 1;
        sub_2231A9820((uint64_t)v247, (uint64_t)&v248[24], 0, 0, &v242);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        goto LABEL_159;
      }
    }
    else
    {
      __p[0] = 0;
      v241 = 0;
    }
    *(_DWORD *)v248 = 0;
    sub_2231A0D14(v247, "nullopt");
    if (*(_DWORD *)v248 == -1)
      sub_22316DD70();
    valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
    ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v248])(&v242, &valuePtr, v247);
    if (*(_DWORD *)v248 != -1)
      ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v248])(&valuePtr, v247);
LABEL_159:
    sub_224527BAC((uint64_t)v243, (CFStringRef *)v247);
    sub_2236634D4((uint64_t)&v244, *(const void **)v247, (uint64_t)&v242);
    v55 = *(std::__shared_weak_count **)&v247[8];
    if (!*(_QWORD *)&v247[8])
      goto LABEL_163;
    v56 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_164:
        if (!v241)
          goto LABEL_172;
        goto LABEL_168;
      }
    }
    else
    {
LABEL_163:
      if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_164;
    }
    operator delete(v242.__r_.__value_.__l.__data_);
    if (!v241)
      goto LABEL_172;
LABEL_168:
    v58 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v59 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
          goto LABEL_174;
LABEL_173:
        operator delete(*(void **)&v243[0]);
        goto LABEL_174;
      }
    }
LABEL_172:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_173;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_92;
LABEL_89:
  if ((a2 & 1) == 0)
    goto LABEL_93;
LABEL_174:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&valuePtr, "color.is_zero");
  if (*(_BYTE *)(a1 + 440))
  {
    if ((!*(_DWORD *)(a1 + 416) || !*(_DWORD *)(a1 + 420))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3E368(a1 + 360, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC21DF8;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    v239 = v249;
    *(_OWORD *)v238 = *(_OWORD *)v248;
    *(_OWORD *)&v238[16] = *(_OWORD *)&v248[16];
    v240 = v250;
    LOBYTE(v61) = 1;
    v241 = 1;
    if ((_DWORD)v249 && DWORD1(v239))
    {
      v62 = (float *)(*(_QWORD *)v238
                    + 4 * (DWORD2(v239) * (v249 >> 1) + HIDWORD(v239) * (DWORD1(v239) >> 1)));
      v63 = *v62;
      v61 = *v62 == 0.0;
      if (*v62 < 0.0)
        v63 = 0.0 - v63;
      if (v63 <= 0.00000011920929)
        v61 = 1;
      if (v61)
      {
        v64 = v62[1];
        v61 = v64 == 0.0;
        v65 = 0.0 - v64;
        if (v64 >= 0.0)
          v65 = v64;
        if (v65 <= 0.00000011920929)
          v61 = 1;
        if (v61)
        {
          v66 = v62[2];
          v67 = v66;
          v61 = v66 == 0.0;
          if (v66 < 0.0)
            v67 = 0.0 - v67;
          if (v67 <= 0.00000011920929)
            v61 = 1;
          if (v61)
          {
            v68 = v62[3];
            v69 = 0.0 - v68;
            if (v68 >= 0.0)
              v69 = v68;
            LOBYTE(v61) = v69 <= 0.00000011920929 || v68 == 0.0;
          }
        }
      }
    }
  }
  else
  {
    __p[0] = 0;
    v241 = 0;
    LOBYTE(v61) = 1;
  }
  LOBYTE(v243[0]) = v61;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v70 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_205;
  v71 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    if (!v241)
      goto LABEL_213;
  }
  else
  {
LABEL_205:
    if (!v241)
      goto LABEL_213;
  }
  v73 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v74 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_214;
      goto LABEL_215;
    }
  }
LABEL_213:
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
LABEL_214:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_215:
  sub_223C3B5E0(&valuePtr, a1 + 360, 0);
  __p[23] = 14;
  strcpy(__p, "color.metadata");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_223C69AE8((uint64_t)&v244, *(void **)v247, (void **)&valuePtr.__r_.__value_.__l.__data_);
  v76 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v77 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_221;
      goto LABEL_220;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_220:
    operator delete(*(void **)__p);
LABEL_221:
  v79 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&valuePtr, "semantic.is_valid");
  v82 = *(_BYTE *)(a1 + 288);
  if (v82)
  {
    if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(a1 + 232, (uint64_t)v247);
    v82 = 0;
    *(_QWORD *)__p = &off_24EC21420;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8])
    {
      v83 = 0;
      if (*(_DWORD *)&v238[12])
      {
        v83 = *(unsigned __int8 *)(*(_QWORD *)v238
                                 + (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                                + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1)));
        v82 = 1;
      }
    }
    else
    {
      v83 = 0;
    }
  }
  else
  {
    v83 = 0;
    __p[0] = 0;
    LOBYTE(v239) = 0;
  }
  if (v83 >= 0x2A)
    v82 = 0;
  LOBYTE(v243[0]) = v82;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v84 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_243;
  v85 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    if (!(_BYTE)v239)
      goto LABEL_251;
  }
  else
  {
LABEL_243:
    if (!(_BYTE)v239)
      goto LABEL_251;
  }
  v87 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_251;
  v88 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (v89)
  {
LABEL_251:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_253;
    goto LABEL_252;
  }
  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
  std::__shared_weak_count::__release_weak(v87);
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_253;
LABEL_252:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_253:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&valuePtr, "semantic_confidence");
  if (*(_BYTE *)(a1 + 352))
  {
    if ((!*(_DWORD *)(a1 + 328) || !*(_DWORD *)(a1 + 332))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1187, (uint64_t)"!semantic.confidence->Empty()", 29, (uint64_t)"Semantic confidence buffer not valid", 36, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1 + 296, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC200A8;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8] && *(_DWORD *)&v238[12])
    {
      LODWORD(v236) = *(unsigned __int16 *)(*(_QWORD *)v238
                                          + 2
                                          * (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                                         + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1))) | 0x10000;
      *(_DWORD *)v248 = 0;
      sub_223C6DE48((uint64_t)&v242, (uint64_t)v247, (__int16 *)&v236);
      goto LABEL_262;
    }
  }
  else
  {
    __p[0] = 0;
    LOBYTE(v239) = 0;
  }
  LODWORD(v236) = 0;
  *(_DWORD *)v248 = 0;
  sub_2231A0D14(v247, "nullopt");
LABEL_262:
  if (*(_DWORD *)v248 == -1)
    sub_22316DD70();
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  ((void (*)(double *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v248])(v243, &v242, v247);
  if (*(_DWORD *)v248 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v248])(&v242, v247);
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_2236634D4((uint64_t)&v244, *(const void **)v247, (uint64_t)v243);
  v90 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_269;
  v91 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (v92)
  {
LABEL_269:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_270;
LABEL_273:
    operator delete(*(void **)&v243[0]);
    if (!(_BYTE)v239)
      goto LABEL_278;
    goto LABEL_274;
  }
  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
  std::__shared_weak_count::__release_weak(v90);
  if (SHIBYTE(v243[2]) < 0)
    goto LABEL_273;
LABEL_270:
  if (!(_BYTE)v239)
    goto LABEL_278;
LABEL_274:
  v93 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_278;
  v94 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (v95)
  {
LABEL_278:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_280;
    goto LABEL_279;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
LABEL_279:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_280:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&valuePtr, "material.is_valid");
  v96 = *(_BYTE *)(a1 + 1032);
  if (v96)
  {
    if ((!*(_DWORD *)(a1 + 1008) || !*(_DWORD *)(a1 + 1012))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1199, (uint64_t)"!materials_image->Empty()", 25, (uint64_t)"Material buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(a1 + 976, (uint64_t)v247);
    v96 = 0;
    *(_QWORD *)__p = &off_24EC21420;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    *(_OWORD *)&v238[10] = *(_OWORD *)&v248[10];
    *(_OWORD *)v238 = *(_OWORD *)v248;
    LOBYTE(v239) = 1;
    if (*(_DWORD *)&v248[8])
    {
      v97 = 0;
      if (*(_DWORD *)&v238[12])
      {
        v97 = *(unsigned __int8 *)(*(_QWORD *)v238
                                 + (*(_DWORD *)&v238[16] * (*(_DWORD *)&v248[8] >> 1)
                                                + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1)));
        v96 = 1;
      }
    }
    else
    {
      v97 = 0;
    }
  }
  else
  {
    v97 = 0;
    __p[0] = 0;
    LOBYTE(v239) = 0;
  }
  if (v97 >= 0x1A)
    v96 = 0;
  LOBYTE(v243[0]) = v96;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v98 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_295;
  v99 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (!v100)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if (!(_BYTE)v239)
      goto LABEL_304;
  }
  else
  {
LABEL_295:
    if (!(_BYTE)v239)
      goto LABEL_304;
  }
  v101 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v102 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_301;
LABEL_305:
      if ((a2 & 1) != 0)
        goto LABEL_415;
      goto LABEL_306;
    }
  }
LABEL_304:
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_305;
LABEL_301:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if ((a2 & 1) != 0)
    goto LABEL_415;
LABEL_306:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&valuePtr, "scene_type.is_valid");
  v104 = *(_BYTE *)(a1 + 1120);
  if (v104)
  {
    if ((!*(_DWORD *)(a1 + 1096) || !*(_DWORD *)(a1 + 1100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1205, (uint64_t)"!scene_type.labels->Empty()", 27, (uint64_t)"Scene type buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C40728(a1 + 1040, (uint64_t)v247);
    v104 = 0;
    *(_QWORD *)__p = &off_24EC28E38;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    v239 = v249;
    *(_OWORD *)v238 = *(_OWORD *)v248;
    *(_OWORD *)&v238[16] = *(_OWORD *)&v248[16];
    v240 = v250;
    v241 = 1;
    if ((_DWORD)v249 && DWORD1(v239))
    {
      v105 = (unsigned __int8 *)(*(_QWORD *)v238
                               + DWORD2(v239) * (v249 >> 1)
                               + HIDWORD(v239) * (DWORD1(v239) >> 1));
      v106 = *v105;
      v107 = v106 < 0x21;
      if (v106 <= 0x20)
      {
        v108 = v105[1];
        v107 = v108 < 0x21;
        if (v108 <= 0x20)
        {
          v109 = v105[2];
          v107 = v109 < 0x21;
          if (v109 <= 0x20)
            v107 = v105[3] < 0x21u;
        }
      }
      v104 = !v107;
    }
  }
  else
  {
    __p[0] = 0;
    v241 = 0;
  }
  LOBYTE(v243[0]) = v104;
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, v243);
  v110 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_322;
  v111 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
    if (!v241)
      goto LABEL_332;
  }
  else
  {
LABEL_322:
    if (!v241)
      goto LABEL_332;
  }
  v113 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_332;
  v114 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_332:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_334;
    goto LABEL_333;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v113);
  if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_334;
LABEL_333:
  operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_334:
  strcpy((char *)v243, "scene_type_probability");
  HIBYTE(v243[2]) = 22;
  if (*(_BYTE *)(a1 + 1208))
  {
    if ((!*(_DWORD *)(a1 + 1184) || !*(_DWORD *)(a1 + 1188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1211, (uint64_t)"!scene_type.confidence->Empty()", 31, (uint64_t)"Scene type probability buffer not valid", 39, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3E368(a1 + 1128, (uint64_t)v247);
    *(_QWORD *)__p = &off_24EC21DF8;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v247[8];
    v239 = v249;
    *(_OWORD *)v238 = *(_OWORD *)v248;
    *(_OWORD *)&v238[16] = *(_OWORD *)&v248[16];
    v240 = v250;
    v241 = 1;
    if ((_DWORD)v249 && DWORD1(v239))
    {
      v116 = (float *)(*(_QWORD *)v238
                     + 4 * (DWORD2(v239) * (v249 >> 1) + HIDWORD(v239) * (DWORD1(v239) >> 1)));
      sub_223C6E31C((uint64_t)v247, v116);
      if (v247[23] >= 0)
        v117 = v247[23];
      else
        v117 = *(_QWORD *)&v247[8];
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      sub_223C6E31C((uint64_t)v247, v116 + 1);
      if (v247[23] >= 0)
        v118 = v247[23];
      else
        v118 = *(_QWORD *)&v247[8];
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      sub_223C6E31C((uint64_t)v247, v116 + 2);
      if (v247[23] >= 0)
        v119 = v247[23];
      else
        v119 = *(_QWORD *)&v247[8];
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      sub_223C6E31C((uint64_t)v247, v116 + 3);
      v120 = a3;
      if (v247[23] >= 0)
        v121 = v247[23];
      else
        v121 = *(_QWORD *)&v247[8];
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      memset(&valuePtr, 0, sizeof(valuePtr));
      std::string::reserve(&valuePtr, v117 + v118 + v119 + v121 + 3);
      sub_223C6E31C((uint64_t)v247, v116);
      a3 = v120;
      if (v247[23] >= 0)
        v122 = v247;
      else
        v122 = *(const std::string::value_type **)v247;
      if (v247[23] >= 0)
        v123 = v247[23];
      else
        v123 = *(_QWORD *)&v247[8];
      std::string::append(&valuePtr, v122, v123);
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      std::string::append(&valuePtr, ",", 1uLL);
      sub_223C6E31C((uint64_t)v247, v116 + 1);
      if (v247[23] >= 0)
        v124 = v247;
      else
        v124 = *(const std::string::value_type **)v247;
      if (v247[23] >= 0)
        v125 = v247[23];
      else
        v125 = *(_QWORD *)&v247[8];
      std::string::append(&valuePtr, v124, v125);
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      std::string::append(&valuePtr, ",", 1uLL);
      sub_223C6E31C((uint64_t)v247, v116 + 2);
      if (v247[23] >= 0)
        v126 = v247;
      else
        v126 = *(const std::string::value_type **)v247;
      if (v247[23] >= 0)
        v127 = v247[23];
      else
        v127 = *(_QWORD *)&v247[8];
      std::string::append(&valuePtr, v126, v127);
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      std::string::append(&valuePtr, ",", 1uLL);
      sub_223C6E31C((uint64_t)v247, v116 + 3);
      if (v247[23] >= 0)
        v128 = v247;
      else
        v128 = *(const std::string::value_type **)v247;
      if (v247[23] >= 0)
        v129 = v247[23];
      else
        v129 = *(_QWORD *)&v247[8];
      std::string::append(&valuePtr, v128, v129);
      if ((v247[23] & 0x80000000) != 0)
        operator delete(*(void **)v247);
      *(_QWORD *)v247 = "[";
      *(_QWORD *)&v247[8] = 1;
      v130 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
      v131 = &valuePtr;
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v130 = valuePtr.__r_.__value_.__l.__size_;
        v131 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)&v247[16] = v131;
      *(_QWORD *)v248 = v130;
      *(_QWORD *)&v248[8] = "]";
      *(_QWORD *)&v248[16] = 1;
      sub_2231A9820((uint64_t)v247, (uint64_t)&v248[24], 0, 0, &v242);
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      goto LABEL_400;
    }
  }
  else
  {
    __p[0] = 0;
    v241 = 0;
  }
  *(_DWORD *)v248 = 0;
  sub_2231A0D14(v247, "nullopt");
  if (*(_DWORD *)v248 == -1)
    sub_22316DD70();
  valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v248])(&v242, &valuePtr, v247);
  if (*(_DWORD *)v248 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v248])(&valuePtr, v247);
LABEL_400:
  sub_224527BAC((uint64_t)v243, (CFStringRef *)v247);
  sub_2236634D4((uint64_t)&v244, *(const void **)v247, (uint64_t)&v242);
  v132 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_404;
  v133 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 - 1, v133));
  if (v134)
  {
LABEL_404:
    if ((SHIBYTE(v242.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_405;
LABEL_408:
    operator delete(v242.__r_.__value_.__l.__data_);
    if (!v241)
      goto LABEL_413;
LABEL_409:
    v135 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v136 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
        if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
          goto LABEL_415;
        goto LABEL_414;
      }
    }
    goto LABEL_413;
  }
  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
  std::__shared_weak_count::__release_weak(v132);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_408;
LABEL_405:
  if (v241)
    goto LABEL_409;
LABEL_413:
  if (SHIBYTE(v243[2]) < 0)
LABEL_414:
    operator delete(*(void **)&v243[0]);
LABEL_415:
  *((_BYTE *)&valuePtr.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&valuePtr, "active_depth_distance");
  sub_223C3BCBC(a1, (uint64_t)__p);
  if ((_BYTE)v239 && *(_DWORD *)&v238[8] && *(_DWORD *)&v238[12])
  {
    v236 = *(unsigned int *)(*(_QWORD *)v238
                           + 4
                           * (*(_DWORD *)&v238[16] * (*(_DWORD *)&v238[8] >> 1)
                                          + *(_DWORD *)&v238[20] * (*(_DWORD *)&v238[12] >> 1))) | 0x100000000;
    *(_DWORD *)v248 = 0;
    sub_223208764((uint64_t)&v242, (uint64_t)v247, (float *)&v236);
  }
  else
  {
    v236 = 0;
    *(_DWORD *)v248 = 0;
    sub_2231A0D14(v247, "nullopt");
  }
  if (*(_DWORD *)v248 == -1)
    sub_22316DD70();
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  ((void (*)(double *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v248])(v243, &v242, v247);
  if (*(_DWORD *)v248 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v248])(&v242, v247);
  sub_224527BAC((uint64_t)&valuePtr, (CFStringRef *)v247);
  sub_2236634D4((uint64_t)&v244, *(const void **)v247, (uint64_t)v243);
  v139 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_427;
  v140 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v141 = __ldaxr(v140);
  while (__stlxr(v141 - 1, v140));
  if (!v141)
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
    {
LABEL_428:
      v142 = a1 + 1336;
      if (!(_BYTE)v239)
        goto LABEL_436;
      goto LABEL_432;
    }
  }
  else
  {
LABEL_427:
    if ((SHIBYTE(v243[2]) & 0x80000000) == 0)
      goto LABEL_428;
  }
  operator delete(*(void **)&v243[0]);
  v142 = a1 + 1336;
  if (!(_BYTE)v239)
    goto LABEL_436;
LABEL_432:
  v143 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v144 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
      if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_438;
      goto LABEL_437;
    }
  }
LABEL_436:
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
LABEL_437:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
LABEL_438:
  v226 = *(int32x2_t *)v142;
  v146.i32[0] = *(_DWORD *)(v142 + 8);
  v225 = *(int32x2_t *)(v142 + 16);
  v229 = *(float32x2_t *)(v142 + 32);
  v3.i32[0] = *(_DWORD *)(v142 + 40);
  v138.i64[0] = *(_QWORD *)(v142 + 48);
  v138.i32[2] = *(_DWORD *)(v142 + 56);
  v227 = v138;
  v146.i32[1] = *(_DWORD *)(v142 + 24);
  v233 = v146;
  __p[23] = 7;
  strcpy(__p, "lidar.#");
  valuePtr.__r_.__value_.__r.__words[0] = 0x6DB6DB6DB6DB6DB7
                                        * ((uint64_t)(*(_QWORD *)(a1 + 1784) - *(_QWORD *)(a1 + 1776)) >> 5);
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)&valuePtr);
  v147 = (int8x16_t)vnegq_f32(v227);
  v234 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(v226, v225), *(float *)v147.i32), (float32x2_t)vzip2_s32(v226, v225), *(float32x2_t *)v227.f32, 1), v233, v227, 2);
  v148 = vmla_f32(vmls_lane_f32(vmul_f32(v229, *(float32x2_t *)v147.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v229, 1), *(float32x2_t *)v227.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), v3);
  v149 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_442;
  v150 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
  if (v151)
  {
LABEL_442:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_444;
    goto LABEL_443;
  }
  v231 = v148;
  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
  std::__shared_weak_count::__release_weak(v149);
  v148 = v231;
  if ((__p[23] & 0x80000000) != 0)
  {
LABEL_443:
    v230 = v148;
    operator delete(*(void **)__p);
    v148 = v230;
  }
LABEL_444:
  *(float32x2_t *)v152.f32 = v234;
  *(float32x2_t *)&v152.u32[2] = v148;
  v235 = v152;
  v153 = *(_QWORD *)(a1 + 1776);
  if (v153 == *(_QWORD *)(a1 + 1784))
    goto LABEL_480;
  v154 = *(_QWORD *)(v153 + 72);
  v155 = *(_QWORD **)v154;
  v156 = *(_QWORD **)(v154 + 8);
  if (*(_QWORD **)v154 == v156)
  {
    v157 = 0;
  }
  else
  {
    v157 = 0;
    do
    {
      v158 = v155[1];
      if (v158)
      {
        v159 = 32 * v158;
        v160 = (double *)(*v155 + 16);
        while (*v160 < 0.800000012)
        {
          v160 += 4;
          v159 -= 32;
          if (!v159)
            goto LABEL_448;
        }
        ++v157;
      }
LABEL_448:
      v155 += 15;
    }
    while (v155 != v156);
  }
  LODWORD(v243[0]) = v157;
  __p[23] = 12;
  strcpy(__p, "lidar.bank.#");
  valuePtr.__r_.__value_.__r.__words[0] = 0xEEEEEEEEEEEEEEEFLL
                                        * ((uint64_t)(*(_QWORD *)(v154 + 8) - *(_QWORD *)v154) >> 3);
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)&valuePtr);
  v161 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v162 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_463;
      goto LABEL_462;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_462:
    operator delete(*(void **)__p);
LABEL_463:
  __p[23] = 21;
  strcpy(__p, "lidar.bank.#confident");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_223C69984((uint64_t)&v244, *(const void **)v247, (int *)v243);
  v164 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v165 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_469;
      goto LABEL_468;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_468:
    operator delete(*(void **)__p);
LABEL_469:
  valuePtr.__r_.__value_.__r.__words[0] = 0;
  *(double *)&valuePtr.__r_.__value_.__l.__data_ = (double)(uint64_t)(*(_QWORD *)(a1 + 1232) - *(_QWORD *)v153)
                                                 / 1000000000.0;
  __p[23] = 16;
  strcpy(__p, "lidar.bank.dtime");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2236772E4((uint64_t)&v244, *(const void **)v247, &valuePtr);
  v169 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v170 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_475;
      goto LABEL_474;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_474:
    operator delete(*(void **)__p);
LABEL_475:
  v172.i32[0] = *(_DWORD *)(v153 + 16);
  v167.i32[0] = *(_DWORD *)(v153 + 48);
  v168.i64[0] = *(_QWORD *)(v153 + 56);
  v168.i32[2] = *(_DWORD *)(v153 + 64);
  v173 = (int8x16_t)vnegq_f32(v168);
  v172.i32[1] = *(_DWORD *)(v153 + 32);
  *(float32x2_t *)v174.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)(v153 + 8), *(int32x2_t *)(v153 + 24)), *(float *)v173.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)(v153 + 8), *(int32x2_t *)(v153 + 24)), *(float32x2_t *)v168.f32, 1), v172, v168, 2);
  *(float32x2_t *)&v174.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v153 + 40), *(float32x2_t *)v173.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v153 + 40), 1), *(float32x2_t *)v168.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL), v167);
  v175 = (int8x16_t)vsubq_f32(v174, v235);
  v176 = (float32x2_t)vextq_s8(v175, v175, 8uLL).u64[0];
  LODWORD(v242.__r_.__value_.__l.__data_) = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v175.i8, *(float32x2_t *)v175.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v175.i8, 1), *(float32x2_t *)v175.i8, 1), v176, v176).f32[0]);
  __p[23] = 20;
  strcpy(__p, "lidar.bank.dposition");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2231FD11C((uint64_t)&v244, *(const void **)v247, (uint64_t)&v242);
  v177 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_479;
  v178 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_480:
      if (!*(_BYTE *)(a1 + 1608))
        goto LABEL_534;
      goto LABEL_481;
    }
  }
  else
  {
LABEL_479:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_480;
  }
  operator delete(*(void **)__p);
  if (!*(_BYTE *)(a1 + 1608))
    goto LABEL_534;
LABEL_481:
  sub_223C29670(a1 + 1408, 0, (uint64_t)&valuePtr);
  __p[23] = 9;
  strcpy(__p, "slam.meta");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_223C69AE8((uint64_t)&v244, *(void **)v247, (void **)&valuePtr.__r_.__value_.__l.__data_);
  v180 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v181 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_487;
      goto LABEL_486;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_486:
    operator delete(*(void **)__p);
LABEL_487:
  __p[23] = 14;
  strcpy(__p, "slam.#external");
  *(_QWORD *)&v243[0] = (uint64_t)(*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 4;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)v243);
  v183 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v184 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_493;
      goto LABEL_492;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_492:
    operator delete(*(void **)__p);
LABEL_493:
  __p[23] = 13;
  strcpy(__p, "slam.#closeby");
  *(_QWORD *)&v243[0] = (uint64_t)(*(_QWORD *)(a1 + 1584) - *(_QWORD *)(a1 + 1576)) >> 4;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)v243);
  v186 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v187 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_499;
      goto LABEL_498;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_498:
    operator delete(*(void **)__p);
LABEL_499:
  __p[23] = 9;
  strcpy(__p, "slam.#new");
  *(_QWORD *)&v243[0] = (uint64_t)(*(_QWORD *)(a1 + 1440) - *(_QWORD *)(a1 + 1432)) >> 4;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)v243);
  v189 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v190 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_505;
      goto LABEL_504;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_504:
    operator delete(*(void **)__p);
LABEL_505:
  __p[23] = 13;
  strcpy(__p, "slam.#updated");
  *(_QWORD *)&v243[0] = (uint64_t)(*(_QWORD *)(a1 + 1488) - *(_QWORD *)(a1 + 1480)) >> 4;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)v243);
  v192 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v193 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_511;
      goto LABEL_510;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_510:
    operator delete(*(void **)__p);
LABEL_511:
  __p[23] = 13;
  strcpy(__p, "slam.#removed");
  *(_QWORD *)&v243[0] = (uint64_t)(*(_QWORD *)(a1 + 1536) - *(_QWORD *)(a1 + 1528)) >> 4;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, (uint64_t *)v243);
  v195 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v196 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_517;
      goto LABEL_516;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_516:
    operator delete(*(void **)__p);
LABEL_517:
  v198 = (std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_;
  if (valuePtr.__r_.__value_.__l.__size_)
  {
    v199 = (unint64_t *)(valuePtr.__r_.__value_.__l.__size_ + 8);
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
LABEL_534:
  LOBYTE(v243[0]) = 0;
  LOBYTE(v243[1]) = 0;
  if (byte_2540CCF90[0] == 1)
  {
    v243[0] = (double)(*(_QWORD *)(a1 + 1232) - qword_2540CCFD8) / 1000000000.0;
    LOBYTE(v243[1]) = 1;
    v247[23] = 5;
    strcpy(v247, "dtime");
    *(_DWORD *)v238 = 0;
    sub_2233B45E8((uint64_t)&v242, (uint64_t)__p, v243);
  }
  else
  {
    v247[23] = 5;
    strcpy(v247, "dtime");
    *(_DWORD *)v238 = 0;
    sub_2231A0D14(__p, "nullopt");
  }
  if (*(_DWORD *)v238 == -1)
    sub_22316DD70();
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v238])(&valuePtr, &v242, __p);
  if (*(_DWORD *)v238 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v238])(&v242, __p);
  sub_224527BAC((uint64_t)v247, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v244, *(const void **)__p, (uint64_t)&valuePtr);
  v201 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_544;
  v202 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_545:
      if ((v247[23] & 0x80000000) == 0)
        goto LABEL_546;
      goto LABEL_553;
    }
  }
  else
  {
LABEL_544:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_545;
  }
  operator delete(valuePtr.__r_.__value_.__l.__data_);
  if ((v247[23] & 0x80000000) == 0)
  {
LABEL_546:
    v204 = *(_QWORD *)(a1 + 1232);
    if ((byte_2540CCF90[0] & 1) != 0)
      goto LABEL_547;
    goto LABEL_554;
  }
LABEL_553:
  operator delete(*(void **)v247);
  v204 = *(_QWORD *)(a1 + 1232);
  if ((byte_2540CCF90[0] & 1) != 0)
  {
LABEL_547:
    qword_2540CCFD8 = v204;
    if (LOBYTE(v243[1]))
      goto LABEL_548;
LABEL_555:
    v205 = BYTE12(xmmword_2540CD0D0);
    goto LABEL_556;
  }
LABEL_554:
  byte_2540CCF90[0] = 1;
  qword_2540CCFD8 = v204;
  if (!LOBYTE(v243[1]))
    goto LABEL_555;
LABEL_548:
  v205 = BYTE12(xmmword_2540CD0D0);
  if (v243[0] > 0.0)
  {
    if (BYTE12(xmmword_2540CD0D0))
    {
      v206 = 0;
      v207 = (int8x16_t)vsubq_f32(v235, (float32x4_t)xmmword_2540CD0D0);
      v208 = (float32x2_t)vextq_s8(v207, v207, 8uLL).u64[0];
      *(float *)&v209 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v207.i8, 1), *(float32x2_t *)v207.i8, 1), v208, v208).f32[0])/ v243[0];
      DWORD2(xmmword_2540CD0D0) = v235.i32[2];
      *(_QWORD *)&xmmword_2540CD0D0 = v235.i64[0];
      v210 = v209;
      v211 = 0x100000000;
      goto LABEL_570;
    }
    DWORD2(xmmword_2540CD0D0) = v235.i32[2];
    *(_QWORD *)&xmmword_2540CD0D0 = v235.i64[0];
    goto LABEL_569;
  }
LABEL_556:
  DWORD2(xmmword_2540CD0D0) = v235.i32[2];
  *(_QWORD *)&xmmword_2540CD0D0 = v235.i64[0];
  if (v205)
  {
    v210 = 0;
    v211 = 0;
    v206 = 1;
    goto LABEL_570;
  }
LABEL_569:
  v210 = 0;
  v211 = 0;
  v206 = 1;
  BYTE12(xmmword_2540CD0D0) = 1;
LABEL_570:
  v236 = v211 | v210;
  v247[23] = 5;
  strcpy(v247, "speed");
  *(_DWORD *)v238 = 0;
  if ((v206 & 1) != 0)
    sub_2231A0D14(__p, "nullopt");
  else
    sub_223208764((uint64_t)&v242, (uint64_t)__p, (float *)&v236);
  if (*(_DWORD *)v238 == -1)
    sub_22316DD70();
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
  ((void (*)(std::string *__return_ptr, std::string *, _BYTE *))off_24EC60F98[*(unsigned int *)v238])(&valuePtr, &v242, __p);
  if (*(_DWORD *)v238 != -1)
    ((void (*)(std::string *, _BYTE *))off_24EC60F50[*(unsigned int *)v238])(&v242, __p);
  sub_224527BAC((uint64_t)v247, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)&v244, *(const void **)__p, (uint64_t)&valuePtr);
  v212 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_580;
  v213 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (v214)
  {
LABEL_580:
    if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_581;
LABEL_603:
    operator delete(valuePtr.__r_.__value_.__l.__data_);
    if ((v247[23] & 0x80000000) == 0)
      goto LABEL_582;
    goto LABEL_604;
  }
  ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
  std::__shared_weak_count::__release_weak(v212);
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_603;
LABEL_581:
  if ((v247[23] & 0x80000000) == 0)
    goto LABEL_582;
LABEL_604:
  operator delete(*(void **)v247);
LABEL_582:
  __p[23] = 4;
  strcpy(__p, "worn");
  v215 = *(_BYTE *)(a1 + 1801);
  if (v215)
    v215 = *(_BYTE *)(a1 + 1800);
  valuePtr.__r_.__value_.__s.__data_[0] = v215;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_223C69820((uint64_t)&v244, *(const void **)v247, &valuePtr);
  v216 = *(std::__shared_weak_count **)&v247[8];
  if (*(_QWORD *)&v247[8])
  {
    v217 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_590;
      goto LABEL_589;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
LABEL_589:
    operator delete(*(void **)__p);
LABEL_590:
  __p[23] = 5;
  strcpy(__p, "#call");
  ++qword_2540CD028;
  sub_224527BAC((uint64_t)__p, (CFStringRef *)v247);
  sub_2238A5104((uint64_t)&v244, *(const void **)v247, &qword_2540CD028);
  v219 = *(std::__shared_weak_count **)&v247[8];
  if (!*(_QWORD *)&v247[8])
    goto LABEL_594;
  v220 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
  do
    v221 = __ldaxr(v220);
  while (__stlxr(v221 - 1, v220));
  if (v221)
  {
LABEL_594:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_596;
    goto LABEL_595;
  }
  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
  std::__shared_weak_count::__release_weak(v219);
  if ((__p[23] & 0x80000000) != 0)
LABEL_595:
    operator delete(*(void **)__p);
LABEL_596:
  sub_2231AEC20(a3, (uint64_t)&v244);
  v222 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
  if (*((_QWORD *)&v244 + 1))
  {
    v223 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
}

void sub_223C3AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 217) < 0)
    operator delete(*(void **)(v48 - 240));
  sub_2231BD3DC((uint64_t)&a21);
  if (a46 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_223C3B2A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(a1 + 56))
  {
    if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC200A8;
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v6 + 10);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

void sub_223C3B368(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[8];
  __int128 v5;
  _OWORD v6[2];

  if (*(_BYTE *)(a1 + 120))
  {
    if ((!*(_DWORD *)(a1 + 96) || !*(_DWORD *)(a1 + 100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a1 + 64, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC200A8;
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v6 + 10);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

void sub_223C3B430(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[24];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;

  if (*(_BYTE *)(a1 + 208))
  {
    if ((!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3D9D0(a1 + 128, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC25150;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
    *(_OWORD *)(a2 + 24) = v5;
    *(_OWORD *)(a2 + 40) = v6;
    *(_OWORD *)(a2 + 56) = v7;
    *(_WORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
}

void sub_223C3B508(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[24];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;

  if (*(_BYTE *)(a1 + 440))
  {
    if ((!*(_DWORD *)(a1 + 416) || !*(_DWORD *)(a1 + 420))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3E368(a1 + 360, (uint64_t)v4);
    *(_QWORD *)a2 = &off_24EC21DF8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v4[8];
    *(_OWORD *)(a2 + 24) = v5;
    *(_OWORD *)(a2 + 40) = v6;
    *(_OWORD *)(a2 + 56) = v7;
    *(_WORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
}

void sub_223C3B5E0(_OWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *p_info;
  unint64_t v17;
  __CFString *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  unint64_t v28;
  _BYTE __p[32];
  int v30;
  char v31;
  void *v32[2];
  char v33;
  CFStringRef v34[2];
  char v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char *v40;

  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_QWORD *)__p = &__p[8];
  sub_2245314F4(__p, &v36);
  *a1 = v36;
  sub_22323DF84((uint64_t)__p, *(char **)&__p[8]);
  v34[0] = *(CFStringRef *)(a2 + 88);
  if (((unint64_t)v34[0] & 0xFF00000000) != 0)
  {
    __p[23] = 9;
    strcpy(__p, "lux_level");
    sub_224527BAC((uint64_t)__p, (CFStringRef *)&v36);
    sub_2231FCFB8((uint64_t)a1, (const void *)v36, (uint64_t)v34);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_6;
    v7 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (v8)
    {
LABEL_6:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_7;
LABEL_15:
      operator delete(*(void **)__p);
      v34[0] = *(CFStringRef *)(a2 + 96);
      if (((unint64_t)v34[0] & 0xFF00000000) == 0)
        goto LABEL_18;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((__p[23] & 0x80000000) != 0)
      goto LABEL_15;
  }
LABEL_7:
  v34[0] = *(CFStringRef *)(a2 + 96);
  if (((unint64_t)v34[0] & 0xFF00000000) == 0)
    goto LABEL_18;
LABEL_8:
  __p[23] = 18;
  strcpy(__p, "clipping_point_lux");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)&v36);
  sub_2231FD11C((uint64_t)a1, (const void *)v36, (uint64_t)v34);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_12;
  v10 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_12:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if ((__p[23] & 0x80000000) != 0)
LABEL_13:
    operator delete(*(void **)__p);
LABEL_18:
  sub_223257B24((uint64_t)&v36, a2 + 104);
  if (!v38)
    goto LABEL_45;
  if (!a3)
  {
    __p[23] = 19;
    strcpy(__p, "ictm_global_lut.len");
    v32[0] = (void *)((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 1);
    sub_224527BAC((uint64_t)__p, v34);
    sub_2238A5104((uint64_t)a1, v34[0], (uint64_t *)v32);
    v15 = (std::__shared_weak_count *)v34[1];
    if (!v34[1])
      goto LABEL_34;
    p_info = &v34[1]->info;
    do
      v17 = __ldaxr((unint64_t *)p_info);
    while (__stlxr(v17 - 1, (unint64_t *)p_info));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_42;
    }
    else
    {
LABEL_34:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_42;
    }
    v18 = *(__CFString **)__p;
LABEL_41:
    operator delete(v18);
    goto LABEL_42;
  }
  v35 = 15;
  strcpy((char *)v34, "ictm_global_lut");
  *(_DWORD *)&__p[24] = 0;
  sub_223C69C9C((uint64_t)&v40, (uint64_t)__p, (char **)&v36);
  if (*(_DWORD *)&__p[24] == -1)
    sub_22316DD70();
  v40 = &v39;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC60F98[*(unsigned int *)&__p[24]])(v32, &v40, __p);
  if (*(_DWORD *)&__p[24] != -1)
    ((void (*)(char **, _BYTE *))off_24EC60F50[*(unsigned int *)&__p[24]])(&v40, __p);
  sub_224527BAC((uint64_t)v34, (CFStringRef *)__p);
  sub_2236634D4((uint64_t)a1, *(const void **)__p, (uint64_t)v32);
  v12 = *(std::__shared_weak_count **)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_27;
  v13 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v33 & 0x80000000) == 0)
    {
LABEL_28:
      if (v35 < 0)
        goto LABEL_40;
      goto LABEL_42;
    }
  }
  else
  {
LABEL_27:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_28;
  }
  operator delete(v32[0]);
  if (v35 < 0)
  {
LABEL_40:
    v18 = (__CFString *)v34[0];
    goto LABEL_41;
  }
LABEL_42:
  if (v38 && (_QWORD)v36)
  {
    *((_QWORD *)&v36 + 1) = v36;
    operator delete((void *)v36);
  }
LABEL_45:
  v34[0] = *(CFStringRef *)(a2 + 136);
  if (((unint64_t)v34[0] & 0xFF00000000) == 0)
    goto LABEL_51;
  __p[23] = 8;
  strcpy(__p, "gtc_mode");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)&v36);
  sub_2231FCFB8((uint64_t)a1, (const void *)v36, (uint64_t)v34);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_50;
  v20 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_50:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_51;
LABEL_59:
    operator delete(*(void **)__p);
    v34[0] = *(CFStringRef *)(a2 + 144);
    if (((unint64_t)v34[0] & 0xFF00000000) == 0)
      goto LABEL_62;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_59;
LABEL_51:
  v34[0] = *(CFStringRef *)(a2 + 144);
  if (((unint64_t)v34[0] & 0xFF00000000) == 0)
    goto LABEL_62;
LABEL_52:
  __p[23] = 6;
  strcpy(__p, "d_gain");
  sub_224527BAC((uint64_t)__p, (CFStringRef *)&v36);
  sub_2231FCFB8((uint64_t)a1, (const void *)v36, (uint64_t)v34);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_56;
  v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_56:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if ((__p[23] & 0x80000000) != 0)
LABEL_57:
    operator delete(*(void **)__p);
LABEL_62:
  if (!*(_BYTE *)(a2 + 204))
    return;
  v25 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)__p = *(_OWORD *)(a2 + 168);
  *(_OWORD *)&__p[16] = v25;
  v30 = *(_DWORD *)(a2 + 200);
  v31 = 1;
  v37 = 4;
  strcpy((char *)&v36, "icam");
  sub_224527BAC((uint64_t)&v36, v34);
  sub_22321B7BC((uint64_t)a1, v34[0], (uint64_t)__p);
  v26 = (std::__shared_weak_count *)v34[1];
  if (!v34[1])
    goto LABEL_67;
  v27 = &v34[1]->info;
  do
    v28 = __ldaxr((unint64_t *)v27);
  while (__stlxr(v28 - 1, (unint64_t *)v27));
  if (v28)
  {
LABEL_67:
    if ((v37 & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete((void *)v36);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (v37 < 0)
    goto LABEL_70;
}

void sub_223C3BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;

  sub_223167354((uint64_t)&a9);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (*(_BYTE *)(v30 - 56))
  {
    v32 = *(void **)(v30 - 80);
    if (v32)
    {
      *(_QWORD *)(v30 - 72) = v32;
      operator delete(v32);
      sub_223167354(v29);
      _Unwind_Resume(a1);
    }
  }
  sub_223167354(v29);
  _Unwind_Resume(a1);
}

void sub_223C3BCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_22323DF84((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_223C3BCBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __int128 v23;
  __int16 v24;

  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
  {
    if (!*(_DWORD *)(v3 + 120) || !*(_DWORD *)(v3 + 124))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1218, (uint64_t)"!depth.active_depth_mask->distance_transform.Empty()", 52, (uint64_t)"Active depth mask buffer not valid", 34, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = *(_QWORD *)(a1 + 216);
    }
    sub_2231DCF04(v3 + 56, &v20);
    *(_QWORD *)a2 = &off_24EC21230;
    v5 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = v24;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = v22;
      *(_OWORD *)(a2 + 32) = v23;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v11;
      *(_WORD *)(a2 + 48) = v9;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      v15 = v24;
      v16 = v22;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = v16;
      *(_OWORD *)(a2 + 32) = v23;
      *(_WORD *)(a2 + 48) = v15;
    }
    *(_BYTE *)(a2 + 56) = 1;
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

uint64_t sub_223C3BE94(uint64_t a1, uint64_t a2)
{
  uint64_t v3[16];
  uint64_t v4[16];

  v4[0] = a1;
  v4[1] = a1 + 232;
  v4[2] = a1 + 360;
  v4[3] = a1 + 568;
  v4[4] = a1 + 976;
  v4[5] = a1 + 1040;
  v4[6] = a1 + 1232;
  v4[7] = a1 + 1240;
  v4[8] = a1 + 1336;
  v4[9] = a1 + 1400;
  v4[10] = a1 + 1408;
  v4[11] = a1 + 1616;
  v4[12] = a1 + 1752;
  v4[13] = a1 + 1776;
  v4[14] = a1 + 1800;
  v4[15] = a1 + 1808;
  v3[0] = a2;
  v3[1] = a2 + 232;
  v3[2] = a2 + 360;
  v3[3] = a2 + 568;
  v3[4] = a2 + 976;
  v3[5] = a2 + 1040;
  v3[6] = a2 + 1232;
  v3[7] = a2 + 1240;
  v3[8] = a2 + 1336;
  v3[9] = a2 + 1400;
  v3[10] = a2 + 1408;
  v3[11] = a2 + 1616;
  v3[12] = a2 + 1752;
  v3[13] = a2 + 1776;
  v3[14] = a2 + 1800;
  v3[15] = a2 + 1808;
  return sub_223C6E3EC(v4, v3);
}

void sub_223C3BF78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t (**v36)();
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t (***v43)();
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int16 v85;
  uint64_t (**v86)();
  uint64_t *v87;
  std::__shared_weak_count *v88;
  uint64_t (**v89)();
  uint64_t (***v90)();
  std::__shared_weak_count *v91;
  __int128 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t (**v95)();
  __int128 v96;
  _OWORD v97[2];
  char v98;
  uint64_t (**v99)();
  __int128 v100;
  _BYTE v101[25];
  uint64_t (***v102)();
  std::__shared_weak_count *v103;
  uint64_t (**v104)();

  v89 = &off_24EC200A8;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 48);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v92 = *(_OWORD *)(a1 + 24);
    v93 = *(_QWORD *)(a1 + 40);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v90 = v4;
    v91 = v5;
    v94 = v8;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v90;
    if (v90)
      goto LABEL_16;
LABEL_23:
    v102 = 0;
    v103 = 0;
    v99 = 0;
    *(_QWORD *)&v100 = 0;
    goto LABEL_29;
  }
  v15 = *(_WORD *)(a1 + 48);
  v90 = *(uint64_t (****)())(a1 + 8);
  v91 = 0;
  v92 = *(_OWORD *)(a1 + 24);
  v93 = *(_QWORD *)(a1 + 40);
  v94 = v15;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  v102 = v4;
  v103 = v91;
  if (v91)
  {
    v13 = (unint64_t *)&v91->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (*v4 == off_24EC71150)
  {
    v99 = (uint64_t (**)())v4;
    *(_QWORD *)&v100 = v91;
    v102 = 0;
    v103 = 0;
  }
  else
  {
    v99 = 0;
    *(_QWORD *)&v100 = 0;
    if (v103)
    {
      v16 = &v103->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
  }
  if (!(_QWORD)v100)
    goto LABEL_33;
LABEL_29:
  v18 = (unint64_t *)(v100 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v100 + 16))(v100);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v100);
    if (v99)
    {
LABEL_34:
      v99 = &off_24EC24F10;
      sub_22320F9FC((uint64_t)&v89, (uint64_t)&v100);
      v95 = &off_24EC24F10;
      v96 = v100;
      v97[0] = *(_OWORD *)v101;
      *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)&v101[9];
      v20 = 1;
      v98 = 1;
      v21 = v91;
      if (!v91)
        goto LABEL_35;
LABEL_89:
      v57 = (unint64_t *)&v21->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (v58)
      {
        if (v98)
          goto LABEL_36;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (v98)
          goto LABEL_36;
      }
      goto LABEL_93;
    }
  }
  else
  {
LABEL_33:
    if (v99)
      goto LABEL_34;
  }
  v20 = 0;
  LOBYTE(v95) = 0;
  v98 = 0;
  v21 = v91;
  if (v91)
    goto LABEL_89;
LABEL_35:
  if (v20)
  {
LABEL_36:
    v22 = v96;
    if (*((_QWORD *)&v96 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    sub_22427727C(v22, &v86);
    v26 = (uint64_t (**)())operator new();
    v27 = v87;
    v90 = (uint64_t (***)())v87;
    v91 = v88;
    if (v88)
    {
      v28 = (unint64_t *)&v88->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v89 = &off_24EC71528;
    if (v27)
    {
      v31 = *v27;
      v30 = (std::__shared_weak_count *)v27[1];
      if (!v30)
        goto LABEL_51;
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (v34)
      {
LABEL_51:
        if (!v31)
          goto LABEL_53;
        goto LABEL_52;
      }
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      if (v31)
LABEL_52:
        sub_2242AE7CC((uint64_t)v90);
    }
LABEL_53:
    sub_224281C3C(v26, (uint64_t)&v89);
    if (v90)
    {
      v36 = *v90;
      v35 = (std::__shared_weak_count *)v90[1];
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if (!v36)
            goto LABEL_61;
          goto LABEL_60;
        }
      }
      if (v36)
LABEL_60:
        sub_2242AE9A8((uint64_t)v90);
    }
LABEL_61:
    v89 = &off_24EC715B8;
    v40 = v91;
    if (v91)
    {
      v41 = (unint64_t *)&v91->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v102 = 0;
    v104 = v26;
    v99 = &off_24EC25008;
    v89 = v26;
    v43 = (uint64_t (***)())operator new();
    *v43 = (uint64_t (**)())&off_24EC25100;
    v43[1] = 0;
    v43[2] = 0;
    v43[3] = v26;
    v90 = v43;
    v104 = 0;
    sub_2232106E0((uint64_t)&v100, (uint64_t *)&v89);
    v44 = (std::__shared_weak_count *)v90;
    if (!v90)
      goto LABEL_70;
    v45 = (unint64_t *)(v90 + 1);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v47 = v104;
      v104 = 0;
      if (!v47)
        goto LABEL_74;
    }
    else
    {
LABEL_70:
      v47 = v104;
      v104 = 0;
      if (!v47)
        goto LABEL_74;
    }
    *v47 = (uint64_t (*)())off_24EC6F620;
    v48 = *((unsigned int *)v47 + 10);
    if ((_DWORD)v48 != -1)
      ((void (*)(uint64_t (***)(), uint64_t (**)()))off_24EC70110[v48])(&v89, v47 + 2);
    *((_DWORD *)v47 + 10) = -1;
    MEMORY[0x227684CE8](v47, 0x10A3C40A1F8E8FFLL);
LABEL_74:
    *(_QWORD *)a2 = &off_24EC200A8;
    v49 = v100;
    if (*((_QWORD *)&v100 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      do
        v52 = __ldxr(v50);
      while (__stxr(v52 + 1, v50));
      v53 = *(_QWORD *)v101;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v101[8];
      do
        v54 = __ldxr(v50);
      while (__stxr(v54 + 1, v50));
      *(_OWORD *)(a2 + 8) = v49;
      *(_QWORD *)(a2 + 24) = v53;
      *(_WORD *)(a2 + 48) = 256;
      do
        v55 = __ldaxr(v50);
      while (__stlxr(v55 - 1, v50));
      if (!v55)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
      }
      do
        v56 = __ldaxr(v50);
      while (__stlxr(v56 - 1, v50));
      if (!v56)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
      }
    }
    else
    {
      v69 = *(_QWORD *)v101;
      *(_QWORD *)(a2 + 8) = v100;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = v69;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v101[8];
      *(_WORD *)(a2 + 48) = 256;
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
    if (!*((_QWORD *)&v100 + 1))
      goto LABEL_114;
    v71 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      v73 = v87;
      if (!v87)
        goto LABEL_122;
    }
    else
    {
LABEL_114:
      v73 = v87;
      if (!v87)
        goto LABEL_122;
    }
    v75 = *v73;
    v74 = (std::__shared_weak_count *)v73[1];
    if (v74)
    {
      v76 = (unint64_t *)&v74->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      do
        v78 = __ldaxr(v76);
      while (__stlxr(v78 - 1, v76));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
        if (!v75)
          goto LABEL_122;
        goto LABEL_121;
      }
    }
    if (v75)
LABEL_121:
      sub_2242AE9A8((uint64_t)v87);
LABEL_122:
    v86 = &off_24EC715B8;
    v79 = v88;
    if (v88)
    {
      v80 = (unint64_t *)&v88->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        v68 = v79;
        goto LABEL_127;
      }
    }
    goto LABEL_128;
  }
LABEL_93:
  *(_QWORD *)a2 = &off_24EC200A8;
  v59 = *(_QWORD *)(a1 + 8);
  v60 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v60)
  {
    v85 = *(_WORD *)(a1 + 48);
    *(_QWORD *)(a2 + 8) = v59;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    *(_WORD *)(a2 + 48) = v85;
    if (!v98)
      return;
    goto LABEL_129;
  }
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldxr(v61);
  while (__stxr(v62 + 1, v61));
  v63 = *(_WORD *)(a1 + 48);
  do
    v64 = __ldxr(v61);
  while (__stxr(v64 + 1, v61));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  do
    v65 = __ldxr(v61);
  while (__stxr(v65 + 1, v61));
  *(_QWORD *)(a2 + 8) = v59;
  *(_QWORD *)(a2 + 16) = v60;
  *(_WORD *)(a2 + 48) = v63;
  do
    v66 = __ldaxr(v61);
  while (__stlxr(v66 - 1, v61));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  do
    v67 = __ldaxr(v61);
  while (__stlxr(v67 - 1, v61));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    v68 = v60;
LABEL_127:
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_128:
  if (!v98)
    return;
LABEL_129:
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_223C3C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  a12 = &off_24EC715B8;
  v21 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  MEMORY[0x227684CE8](v19, 0x10A3C40A1F8E8FFLL);
  sub_2242A86B4(&a9);
  sub_223C73144((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223C3C894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2242A86B4(&a9);
  sub_223C73144((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_223C3C8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223C73144((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C3C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22319EF60((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_223C3C8D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t (***v34)();
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t (**v38)();
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t (**v43)();
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 result;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int16 v80;
  __n128 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t (***v90)();
  std::__shared_weak_count *v91;
  uint64_t (**v92)();
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t *v99;
  unint64_t v100;
  __int16 v101;
  std::logic_error *exception;
  unsigned __int8 v103;
  std::string *v104;
  uint64_t *v105;
  uint64_t v106;
  std::string::size_type size;
  std::string *v108;
  uint64_t v109;
  int v110;
  size_t v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string *p_p;
  std::string *p_dst;
  std::string *v124;
  uint64_t v125;
  uint64_t v126;
  std::string *v127;
  __int128 v128;
  __int128 *v129;
  __int128 v130;
  int64x2_t v131;
  int8x16_t v132;
  void **v133;
  void **v134;
  void *v135;
  uint64_t (**v136)();
  uint64_t (***v137)();
  std::__shared_weak_count *v138;
  uint64_t (**v139)();
  uint64_t (***v140)();
  std::__shared_weak_count *v141;
  __int128 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t (**v145)();
  uint64_t (***v146)();
  std::__shared_weak_count *v147;
  _OWORD v148[2];
  char v149;
  std::string __dst;
  std::string __p;
  void *v152;
  void **v153;
  void *v154[2];
  char v155;
  std::string __s;
  _BYTE v157[48];
  _QWORD v158[2];
  _QWORD v159[2];

  v159[1] = *MEMORY[0x24BDAC8D0];
  v139 = &off_24EC21230;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 48);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v142 = *(_OWORD *)(a1 + 24);
    v143 = *(_QWORD *)(a1 + 40);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v140 = v4;
    v141 = v5;
    v144 = v8;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v140;
    if (v140)
      goto LABEL_16;
LABEL_23:
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)v157 = 0uLL;
    goto LABEL_29;
  }
  v15 = *(_WORD *)(a1 + 48);
  v140 = *(uint64_t (****)())(a1 + 8);
  v141 = 0;
  v142 = *(_OWORD *)(a1 + 24);
  v143 = *(_QWORD *)(a1 + 40);
  v144 = v15;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
  if (v141)
  {
    v13 = &v141->__shared_owners_;
    do
      v14 = __ldxr((unint64_t *)v13);
    while (__stxr(v14 + 1, (unint64_t *)v13));
  }
  if (*v4 == off_24EC71270)
  {
    *(_QWORD *)v157 = v4;
    *(_QWORD *)&v157[8] = v141;
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    *(_OWORD *)v157 = 0uLL;
    if (__s.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__size_ + 16))(__s.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
      }
    }
  }
  if (!*(_QWORD *)&v157[8])
    goto LABEL_33;
LABEL_29:
  v18 = (unint64_t *)(*(_QWORD *)&v157[8] + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v157[8] + 16))(*(_QWORD *)&v157[8]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v157[8]);
    if (*(_QWORD *)v157)
    {
LABEL_34:
      if (v141)
      {
        v20 = &v141->__shared_owners_;
        do
          v21 = __ldxr((unint64_t *)v20);
        while (__stxr(v21 + 1, (unint64_t *)v20));
      }
      if (v140 && *v140 == off_24EC71270)
      {
        if (v141)
        {
          v22 = &v141->__shared_owners_;
          do
            v23 = __ldxr((unint64_t *)v22);
          while (__stxr(v23 + 1, (unint64_t *)v22));
          *(_OWORD *)v157 = v142;
          *(_QWORD *)&v157[16] = v143;
          do
            v24 = __ldxr((unint64_t *)v22);
          while (__stxr(v24 + 1, (unint64_t *)v22));
          do
            v25 = __ldaxr((unint64_t *)v22);
          while (__stlxr(v25 - 1, (unint64_t *)v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
          do
            v26 = __ldaxr((unint64_t *)v22);
          while (__stlxr(v26 - 1, (unint64_t *)v22));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        else
        {
          *(_OWORD *)v157 = v142;
          *(_QWORD *)&v157[16] = v143;
        }
        v145 = &off_24EC61518;
        v146 = v140;
        v147 = v141;
        v148[0] = *(_OWORD *)v157;
        *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)&v157[9];
        v149 = 1;
        v27 = v141;
        if (!v141)
          goto LABEL_58;
        goto LABEL_55;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v103 = atomic_load((unsigned __int8 *)&qword_2540CD098);
      if ((v103 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD098))
      {
LABEL_175:
        v104 = sub_223C73330();
        *(_QWORD *)v157 = "Attempting to create an ";
        *(_QWORD *)&v157[8] = 24;
        v105 = &qword_2540CD290;
        v106 = byte_2540CD2A7;
        if (byte_2540CD2A7 < 0)
        {
          v106 = unk_2540CD298;
          v105 = (uint64_t *)qword_2540CD290;
        }
        *(_QWORD *)&v157[16] = v105;
        *(_QWORD *)&v157[24] = v106;
        *(_QWORD *)&v157[32] = " from an ";
        *(_QWORD *)&v157[40] = 9;
        size = HIBYTE(v104->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v108 = v104;
        else
          v108 = (std::string *)v104->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = v104->__r_.__value_.__l.__size_;
        v158[0] = v108;
        v158[1] = size;
        sub_2231A9820((uint64_t)v157, (uint64_t)v159, 0, 0, &__p);
        v109 = (uint64_t)v140;
        if (v140)
        {
          if (v141)
          {
            v113 = &v141->__shared_owners_;
            do
              v114 = __ldxr((unint64_t *)v113);
            while (__stxr(v114 + 1, (unint64_t *)v113));
            do
              v115 = __ldaxr((unint64_t *)v113);
            while (__stlxr(v115 - 1, (unint64_t *)v113));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
            v109 = (uint64_t)v140;
            v116 = &v141->__shared_owners_;
            do
              v117 = __ldxr((unint64_t *)v116);
            while (__stxr(v117 + 1, (unint64_t *)v116));
            do
              v118 = __ldaxr((unint64_t *)v116);
            while (__stlxr(v118 - 1, (unint64_t *)v116));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 80))(v109);
          v121 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v121 = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)v157 = p_p;
          *(_QWORD *)&v157[8] = v121;
          *(_QWORD *)&v157[16] = " but the other image contains an incompatible buffer type ";
          *(_QWORD *)&v157[24] = 58;
          *(_QWORD *)&v157[32] = v119;
          *(_QWORD *)&v157[40] = v120;
          sub_2231A9820((uint64_t)v157, (uint64_t)v158, 0, 0, &__dst);
          LOBYTE(v110) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_209:
          if ((v110 & 0x80) != 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(exception, &__dst);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
        }
        v110 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v111 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v111 = __p.__r_.__value_.__l.__size_;
        v112 = v111 + 46;
        if (v111 + 46 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v112 > 0x16)
        {
          v125 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v112 | 7) != 0x17)
            v125 = v112 | 7;
          v126 = v125 + 1;
          p_dst = (std::string *)operator new(v125 + 1);
          __dst.__r_.__value_.__l.__size_ = v111 + 46;
          __dst.__r_.__value_.__r.__words[2] = v126 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!v111)
            goto LABEL_208;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v111 + 46;
        }
        if (v110 >= 0)
          v124 = &__p;
        else
          v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, v124, v111);
LABEL_208:
        strcpy((char *)p_dst + v111, " but the other image does not contain a buffer");
        goto LABEL_209;
      }
      v155 = 14;
      strcpy((char *)v154, "ConstImageView");
      v127 = sub_2231C26A0();
      if (SHIBYTE(v127->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__s, v127->__r_.__value_.__l.__data_, v127->__r_.__value_.__l.__size_);
      }
      else
      {
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v128;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v157);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v129 = sub_2232101F4();
      if (*((char *)v129 + 23) < 0)
      {
        sub_223197FA4(&__s, *(void **)v129, *((_QWORD *)v129 + 1));
      }
      else
      {
        v130 = *v129;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v130;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v157[24]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_22319BD1C(&v152, (uint64_t)v157, 2uLL);
      sub_2245730F4((char *)v154, (uint64_t *)&v152, (std::string *)&qword_2540CD290, v131, v132);
      v133 = (void **)v152;
      if (v152)
      {
        v134 = v153;
        v135 = v152;
        if (v153 != v152)
        {
          do
          {
            if (*((char *)v134 - 1) < 0)
              operator delete(*(v134 - 3));
            v134 -= 3;
          }
          while (v134 != v133);
          v135 = v152;
        }
        v153 = v133;
        operator delete(v135);
        if ((v157[47] & 0x80000000) == 0)
        {
LABEL_229:
          if ((v157[23] & 0x80000000) == 0)
            goto LABEL_230;
          goto LABEL_241;
        }
      }
      else if ((v157[47] & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete(*(void **)&v157[24]);
      if ((v157[23] & 0x80000000) == 0)
      {
LABEL_230:
        if ((v155 & 0x80000000) == 0)
        {
LABEL_232:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD290, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD098);
          goto LABEL_175;
        }
LABEL_231:
        operator delete(v154[0]);
        goto LABEL_232;
      }
LABEL_241:
      operator delete(*(void **)v157);
      if ((v155 & 0x80000000) == 0)
        goto LABEL_232;
      goto LABEL_231;
    }
  }
  else
  {
LABEL_33:
    if (*(_QWORD *)v157)
      goto LABEL_34;
  }
  LOBYTE(v145) = 0;
  v149 = 0;
  v27 = v141;
  if (!v141)
    goto LABEL_58;
LABEL_55:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v149)
      goto LABEL_59;
LABEL_124:
    *(_QWORD *)a2 = &off_24EC21230;
    v76 = *(_QWORD *)(a1 + 8);
    v77 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v77)
    {
      v101 = *(_WORD *)(a1 + 48);
      *(_QWORD *)(a2 + 8) = v76;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(__n128 *)(a1 + 24);
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
      *(_WORD *)(a2 + 48) = v101;
      if (!v149)
        return result;
      goto LABEL_157;
    }
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = *(_WORD *)(a1 + 48);
    v81 = (__n128 *)(a1 + 24);
    do
      v82 = __ldxr(v78);
    while (__stxr(v82 + 1, v78));
    result = *v81;
    *(__n128 *)(a2 + 24) = *v81;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    do
      v83 = __ldxr(v78);
    while (__stxr(v83 + 1, v78));
    *(_QWORD *)(a2 + 8) = v76;
    *(_QWORD *)(a2 + 16) = v77;
    *(_WORD *)(a2 + 48) = v80;
    do
      v84 = __ldaxr(v78);
    while (__stlxr(v84 - 1, v78));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v85 = __ldaxr(v78);
    while (__stlxr(v85 - 1, v78));
    if (!v85)
      goto LABEL_155;
    goto LABEL_156;
  }
LABEL_58:
  if (!v149)
    goto LABEL_124;
LABEL_59:
  if (v147)
  {
    v30 = &v147->__shared_owners_;
    do
      v31 = __ldxr((unint64_t *)v30);
    while (__stxr(v31 + 1, (unint64_t *)v30));
    do
      v32 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v32 - 1, (unint64_t *)v30));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  sub_22427B568((uint64_t)v146, &v136);
  v33 = (std::__shared_weak_count_vtbl *)operator new();
  v34 = v137;
  v140 = v137;
  v141 = v138;
  if (v138)
  {
    v35 = (unint64_t *)&v138->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v139 = &off_24EC71528;
  if (v34)
  {
    v38 = *v34;
    v37 = (std::__shared_weak_count *)v34[1];
    if (!v37)
      goto LABEL_74;
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (v41)
    {
LABEL_74:
      if (!v38)
        goto LABEL_76;
      goto LABEL_75;
    }
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (v38)
LABEL_75:
      sub_2242AE7CC((uint64_t)v140);
  }
LABEL_76:
  sub_224283A54(v33, (uint64_t)&v139);
  if (v140)
  {
    v43 = *v140;
    v42 = (std::__shared_weak_count *)v140[1];
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          goto LABEL_84;
        goto LABEL_83;
      }
    }
    if (v43)
LABEL_83:
      sub_2242AE9A8((uint64_t)v140);
  }
LABEL_84:
  v139 = &off_24EC715B8;
  v47 = v141;
  if (v141)
  {
    v48 = &v141->__shared_owners_;
    do
      v49 = __ldaxr((unint64_t *)v48);
    while (__stlxr(v49 - 1, (unint64_t *)v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v154[0] = 0;
  v152 = v33;
  *(_QWORD *)v157 = &off_24EC27F88;
  v139 = (uint64_t (**)())v33;
  v50 = (std::__shared_weak_count *)operator new();
  v51 = v50;
  v50->__shared_owners_ = 0;
  v52 = (unint64_t *)&v50->__shared_owners_;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC61950;
  v50->__shared_weak_owners_ = 0;
  v50[1].__vftable = v33;
  v140 = (uint64_t (***)())v50;
  v152 = 0;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  *(_QWORD *)&v157[8] = v33;
  *(_QWORD *)&v157[16] = v50;
  do
    v54 = __ldxr(v52);
  while (__stxr(v54 + 1, v52));
  do
    v55 = __ldaxr(v52);
  while (__stlxr(v55 - 1, v52));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v51);
  }
  (*((void (**)(std::string *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v33->~__shared_weak_count
   + 8))(&__s, v33, 4);
  v56 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)&v157[24] = *(_OWORD *)__s.__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[40] = v56;
  __s.__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x227684CE8]();
  v57 = *(std::__shared_weak_count **)&v157[16];
  if (*(_QWORD *)&v157[16])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    do
      v60 = __ldaxr(v58);
    while (__stlxr(v60 - 1, v58));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v61 = (std::__shared_weak_count *)v140;
  if (!v140)
    goto LABEL_106;
  v62 = (unint64_t *)(v140 + 1);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = (unsigned int *)v152;
    v152 = 0;
    if (!v64)
      goto LABEL_110;
  }
  else
  {
LABEL_106:
    v64 = (unsigned int *)v152;
    v152 = 0;
    if (!v64)
      goto LABEL_110;
  }
  *(_QWORD *)v64 = off_24EC6F7D0;
  v65 = v64[10];
  if ((_DWORD)v65 != -1)
    ((void (*)(uint64_t (***)(), unsigned int *))off_24EC70110[v65])(&v139, v64 + 4);
  v64[10] = -1;
  MEMORY[0x227684CE8](v64, 0x10A3C40A1F8E8FFLL);
LABEL_110:
  *(_QWORD *)a2 = &off_24EC21230;
  v66 = *(_QWORD *)&v157[8];
  v67 = *(std::__shared_weak_count **)&v157[16];
  if (*(_QWORD *)&v157[16])
  {
    v68 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    do
      v70 = __ldxr(v68);
    while (__stxr(v70 + 1, v68));
    v71 = *(_QWORD *)&v157[24];
    result = *(__n128 *)&v157[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v157[32];
    do
      v73 = __ldxr(v68);
    while (__stxr(v73 + 1, v68));
    *(_QWORD *)(a2 + 8) = v66;
    *(_QWORD *)(a2 + 16) = v67;
    *(_QWORD *)(a2 + 24) = v71;
    *(_WORD *)(a2 + 48) = 256;
    do
      v74 = __ldaxr(v68);
    while (__stlxr(v74 - 1, v68));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    do
      v75 = __ldaxr(v68);
    while (__stlxr(v75 - 1, v68));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  else
  {
    v86 = *(_QWORD *)&v157[24];
    *(_QWORD *)(a2 + 8) = *(_QWORD *)&v157[8];
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v86;
    result = *(__n128 *)&v157[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v157[32];
    *(_WORD *)(a2 + 48) = 256;
  }
  v87 = *(std::__shared_weak_count **)&v157[16];
  if (!*(_QWORD *)&v157[16])
    goto LABEL_143;
  v88 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v90 = v137;
    if (!v137)
      goto LABEL_151;
  }
  else
  {
LABEL_143:
    v90 = v137;
    if (!v137)
      goto LABEL_151;
  }
  v92 = *v90;
  v91 = (std::__shared_weak_count *)v90[1];
  if (v91)
  {
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    do
      v95 = __ldaxr(v93);
    while (__stlxr(v95 - 1, v93));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      if (!v92)
        goto LABEL_151;
      goto LABEL_150;
    }
  }
  if (v92)
LABEL_150:
    sub_2242AE9A8((uint64_t)v137);
LABEL_151:
  v136 = &off_24EC715B8;
  v77 = v138;
  if (v138)
  {
    v96 = (unint64_t *)&v138->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
LABEL_155:
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_156:
  if (!v149)
    return result;
LABEL_157:
  v98 = v147;
  if (v147)
  {
    v99 = &v147->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  return result;
}

void sub_223C3D760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void **__p,void **a40)
{
  std::__shared_weak_count *v40;
  void *v41;
  uint64_t v42;
  void **v44;
  void **v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  v44 = __p;
  if (__p)
  {
    v45 = a40;
    v46 = __p;
    if (a40 != __p)
    {
      do
      {
        if (*((char *)v45 - 1) < 0)
          operator delete(*(v45 - 3));
        v45 -= 3;
      }
      while (v45 != v44);
      v46 = __p;
    }
    a40 = v44;
    operator delete(v46);
  }
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  if (*(char *)(v42 - 177) < 0)
    operator delete(*(void **)(v42 - 200));
  __cxa_guard_abort(&qword_2540CD098);
  __cxa_free_exception(v41);
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_2231BD9DC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223C3D9D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int16 v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t (***v44)();
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t (**v48)();
  uint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int16 v89;
  uint64_t (**v90)();
  uint64_t *v91;
  std::__shared_weak_count *v92;
  uint64_t (**v93)();
  uint64_t (***v94)();
  std::__shared_weak_count *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int16 v99;
  uint64_t (**v100)();
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105;
  char v106;
  uint64_t (**v107)();
  __int128 v108;
  _BYTE v109[48];
  char v110;
  uint64_t (***v111)();
  std::__shared_weak_count *v112;
  uint64_t (**v113)();

  v93 = &off_24EC25150;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 72);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_OWORD *)(a1 + 40);
    v96 = *(_OWORD *)(a1 + 24);
    v97 = v10;
    v98 = *(_OWORD *)(a1 + 56);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v94 = v4;
    v95 = v5;
    v99 = v8;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v94;
    if (v94)
      goto LABEL_16;
LABEL_23:
    v111 = 0;
    v112 = 0;
    v107 = 0;
    *(_QWORD *)&v108 = 0;
    goto LABEL_29;
  }
  v16 = *(_WORD *)(a1 + 72);
  v94 = *(uint64_t (****)())(a1 + 8);
  v95 = 0;
  v96 = *(_OWORD *)(a1 + 24);
  v97 = *(_OWORD *)(a1 + 40);
  v98 = *(_OWORD *)(a1 + 56);
  v99 = v16;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  v111 = v4;
  v112 = v95;
  if (v95)
  {
    v14 = (unint64_t *)&v95->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (*v4 == off_24EC6FC50)
  {
    v107 = (uint64_t (**)())v4;
    *(_QWORD *)&v108 = v95;
    v111 = 0;
    v112 = 0;
  }
  else
  {
    v107 = 0;
    *(_QWORD *)&v108 = 0;
    if (v112)
    {
      v17 = &v112->__shared_owners_;
      do
        v18 = __ldaxr((unint64_t *)v17);
      while (__stlxr(v18 - 1, (unint64_t *)v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
  }
  if (!(_QWORD)v108)
    goto LABEL_33;
LABEL_29:
  v19 = (unint64_t *)(v108 + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v108 + 16))(v108);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v108);
    if (v107)
    {
LABEL_34:
      v107 = &off_24EC25248;
      sub_223211760((uint64_t)&v93, (uint64_t)&v108);
      v100 = &off_24EC25248;
      v101 = v108;
      v102 = *(_OWORD *)v109;
      v103 = *(_OWORD *)&v109[16];
      v104 = *(_OWORD *)&v109[32];
      v105 = v110;
      v21 = 1;
      v106 = 1;
      v22 = v95;
      if (!v95)
        goto LABEL_35;
LABEL_89:
      v59 = (unint64_t *)&v22->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (v60)
      {
        if (v106)
          goto LABEL_36;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (v106)
          goto LABEL_36;
      }
      goto LABEL_93;
    }
  }
  else
  {
LABEL_33:
    if (v107)
      goto LABEL_34;
  }
  v21 = 0;
  LOBYTE(v100) = 0;
  v106 = 0;
  v22 = v95;
  if (v95)
    goto LABEL_89;
LABEL_35:
  if (v21)
  {
LABEL_36:
    v23 = v101;
    if (*((_QWORD *)&v101 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    sub_224279C10(v23, &v90);
    v27 = (uint64_t (**)())operator new();
    v28 = v91;
    v94 = (uint64_t (***)())v91;
    v95 = v92;
    if (v92)
    {
      v29 = (unint64_t *)&v92->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v93 = &off_24EC71528;
    if (v28)
    {
      v32 = *v28;
      v31 = (std::__shared_weak_count *)v28[1];
      if (!v31)
        goto LABEL_51;
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      do
        v35 = __ldaxr(v33);
      while (__stlxr(v35 - 1, v33));
      if (v35)
      {
LABEL_51:
        if (!v32)
          goto LABEL_53;
        goto LABEL_52;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (v32)
LABEL_52:
        sub_2242AE7CC((uint64_t)v94);
    }
LABEL_53:
    sub_22428F938(v27, (uint64_t)&v93);
    if (v94)
    {
      v37 = *v94;
      v36 = (std::__shared_weak_count *)v94[1];
      if (v36)
      {
        v38 = (unint64_t *)&v36->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          if (!v37)
            goto LABEL_61;
          goto LABEL_60;
        }
      }
      if (v37)
LABEL_60:
        sub_2242AE9A8((uint64_t)v94);
    }
LABEL_61:
    v93 = &off_24EC715B8;
    v41 = v95;
    if (v95)
    {
      v42 = (unint64_t *)&v95->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v111 = 0;
    v113 = v27;
    v107 = &off_24EC25340;
    v93 = v27;
    v44 = (uint64_t (***)())operator new();
    *v44 = (uint64_t (**)())&off_24EC25438;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v27;
    v94 = v44;
    v113 = 0;
    sub_223212248((uint64_t)&v108, (uint64_t *)&v93);
    v45 = (std::__shared_weak_count *)v94;
    if (!v94)
      goto LABEL_70;
    v46 = (unint64_t *)(v94 + 1);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      v48 = v113;
      v113 = 0;
      if (!v48)
        goto LABEL_74;
    }
    else
    {
LABEL_70:
      v48 = v113;
      v113 = 0;
      if (!v48)
        goto LABEL_74;
    }
    *v48 = (uint64_t (*)())off_24EC6F740;
    v49 = *((unsigned int *)v48 + 10);
    if ((_DWORD)v49 != -1)
      ((void (*)(uint64_t (***)(), uint64_t (**)()))off_24EC70110[v49])(&v93, v48 + 2);
    *((_DWORD *)v48 + 10) = -1;
    MEMORY[0x227684CE8](v48, 0x10A3C40ED729E16);
LABEL_74:
    *(_QWORD *)a2 = &off_24EC25150;
    v50 = v108;
    if (*((_QWORD *)&v108 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldxr(v51);
      while (__stxr(v53 + 1, v51));
      v54 = *(_QWORD *)v109;
      v55 = *(_OWORD *)&v109[24];
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v109[8];
      *(_OWORD *)(a2 + 48) = v55;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)&v109[40];
      do
        v56 = __ldxr(v51);
      while (__stxr(v56 + 1, v51));
      *(_OWORD *)(a2 + 8) = v50;
      *(_QWORD *)(a2 + 24) = v54;
      *(_WORD *)(a2 + 72) = 256;
      do
        v57 = __ldaxr(v51);
      while (__stlxr(v57 - 1, v51));
      if (!v57)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
      }
      do
        v58 = __ldaxr(v51);
      while (__stlxr(v58 - 1, v51));
      if (!v58)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v50 + 1) + 16))(*((_QWORD *)&v50 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v50 + 1));
      }
    }
    else
    {
      v72 = *(_QWORD *)v109;
      *(_QWORD *)(a2 + 8) = v108;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = v72;
      v73 = *(_OWORD *)&v109[24];
      *(_OWORD *)(a2 + 32) = *(_OWORD *)&v109[8];
      *(_OWORD *)(a2 + 48) = v73;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)&v109[40];
      *(_WORD *)(a2 + 72) = 256;
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (!*((_QWORD *)&v108 + 1))
      goto LABEL_114;
    v75 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
      v77 = v91;
      if (!v91)
        goto LABEL_122;
    }
    else
    {
LABEL_114:
      v77 = v91;
      if (!v91)
        goto LABEL_122;
    }
    v79 = *v77;
    v78 = (std::__shared_weak_count *)v77[1];
    if (v78)
    {
      v80 = (unint64_t *)&v78->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
      do
        v82 = __ldaxr(v80);
      while (__stlxr(v82 - 1, v80));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
        if (!v79)
          goto LABEL_122;
        goto LABEL_121;
      }
    }
    if (v79)
LABEL_121:
      sub_2242AE9A8((uint64_t)v91);
LABEL_122:
    v90 = &off_24EC715B8;
    v83 = v92;
    if (v92)
    {
      v84 = (unint64_t *)&v92->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        v71 = v83;
        goto LABEL_127;
      }
    }
    goto LABEL_128;
  }
LABEL_93:
  *(_QWORD *)a2 = &off_24EC25150;
  v61 = *(_QWORD *)(a1 + 8);
  v62 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v62)
  {
    v89 = *(_WORD *)(a1 + 72);
    *(_QWORD *)(a2 + 8) = v61;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
    *(_WORD *)(a2 + 72) = v89;
    if (!v106)
      return;
    goto LABEL_129;
  }
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldxr(v63);
  while (__stxr(v64 + 1, v63));
  v65 = *(_WORD *)(a1 + 72);
  do
    v66 = __ldxr(v63);
  while (__stxr(v66 + 1, v63));
  v67 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = v67;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  do
    v68 = __ldxr(v63);
  while (__stxr(v68 + 1, v63));
  *(_QWORD *)(a2 + 8) = v61;
  *(_QWORD *)(a2 + 16) = v62;
  *(_WORD *)(a2 + 72) = v65;
  do
    v69 = __ldaxr(v63);
  while (__stlxr(v69 - 1, v63));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  do
    v70 = __ldaxr(v63);
  while (__stlxr(v70 - 1, v63));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    v71 = v62;
LABEL_127:
    std::__shared_weak_count::__release_weak(v71);
  }
LABEL_128:
  if (!v106)
    return;
LABEL_129:
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
}

void sub_223C3E260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, std::__shared_weak_count *);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v11 = &off_24EC715B8;
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  MEMORY[0x227684CE8](v2, 0x10A3C40ED729E16);
  sub_2242A86B4((uint64_t *)va);
  sub_2236FE284((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223C3E324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_2242A86B4((uint64_t *)va);
  sub_2236FE284((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223C3E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_2236FE284((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C3E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231D4840((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_223C3E368@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int16 v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (***v69)();
  std::__shared_weak_count *v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __n128 result;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t *v104;
  unint64_t v105;
  __int16 v106;
  std::logic_error *exception;
  unsigned __int8 v108;
  std::string *v109;
  uint64_t *v110;
  uint64_t v111;
  std::string::size_type size;
  std::string *v113;
  uint64_t (***v114)();
  int v115;
  size_t v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::string::size_type v126;
  std::string *p_p;
  std::string *p_dst;
  std::string *v129;
  uint64_t v130;
  uint64_t v131;
  std::string *v132;
  __int128 v133;
  __int128 *v134;
  __int128 v135;
  int64x2_t v136;
  int8x16_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t (**v141)();
  uint64_t *v142;
  std::__shared_weak_count *v143;
  uint64_t (**v144)();
  uint64_t (***v145)();
  std::__shared_weak_count *v146;
  _BYTE v147[48];
  __int16 v148;
  uint64_t (**v149)();
  uint64_t (***v150)();
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  char v156;
  std::string __dst;
  std::string __p;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  void *v161[2];
  char v162;
  std::string __s;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD v167[2];
  _QWORD v168[2];

  v168[1] = *MEMORY[0x24BDAC8D0];
  v144 = &off_24EC21DF8;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 72);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)v147 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v147[16] = v10;
    *(_OWORD *)&v147[32] = *(_OWORD *)(a1 + 56);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v145 = v4;
    v146 = v5;
    v148 = v8;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v145;
    if (v145)
      goto LABEL_16;
LABEL_23:
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    v164 = 0uLL;
    goto LABEL_29;
  }
  v16 = *(_WORD *)(a1 + 72);
  v145 = *(uint64_t (****)())(a1 + 8);
  v146 = 0;
  v17 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)v147 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v147[16] = v17;
  *(_OWORD *)&v147[32] = *(_OWORD *)(a1 + 56);
  v148 = v16;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v146;
  if (v146)
  {
    v14 = &v146->__shared_owners_;
    do
      v15 = __ldxr((unint64_t *)v14);
    while (__stxr(v15 + 1, (unint64_t *)v14));
  }
  if (*v4 == off_24EC710C0)
  {
    *(_QWORD *)&v164 = v4;
    *((_QWORD *)&v164 + 1) = v146;
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    v164 = 0uLL;
    if (__s.__r_.__value_.__l.__size_)
    {
      v18 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__size_ + 16))(__s.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
      }
    }
  }
  if (!*((_QWORD *)&v164 + 1))
    goto LABEL_33;
LABEL_29:
  v20 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v164 + 1) + 16))(*((_QWORD *)&v164 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v164 + 1));
    if ((_QWORD)v164)
    {
LABEL_34:
      if (v146)
      {
        v22 = &v146->__shared_owners_;
        do
          v23 = __ldxr((unint64_t *)v22);
        while (__stxr(v23 + 1, (unint64_t *)v22));
      }
      if (v145 && *v145 == off_24EC710C0)
      {
        if (v146)
        {
          v24 = &v146->__shared_owners_;
          do
            v25 = __ldxr((unint64_t *)v24);
          while (__stxr(v25 + 1, (unint64_t *)v24));
          v164 = *(_OWORD *)v147;
          v165 = *(_OWORD *)&v147[16];
          v166 = *(_OWORD *)&v147[32];
          do
            v26 = __ldxr((unint64_t *)v24);
          while (__stxr(v26 + 1, (unint64_t *)v24));
          do
            v27 = __ldaxr((unint64_t *)v24);
          while (__stlxr(v27 - 1, (unint64_t *)v24));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
          do
            v28 = __ldaxr((unint64_t *)v24);
          while (__stlxr(v28 - 1, (unint64_t *)v24));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        else
        {
          v164 = *(_OWORD *)v147;
          v165 = *(_OWORD *)&v147[16];
          v166 = *(_OWORD *)&v147[32];
        }
        v149 = &off_24EC610E8;
        v150 = v145;
        v151 = v146;
        v152 = v164;
        v153 = v165;
        v154 = v166;
        v155 = v167[0];
        v156 = 1;
        v29 = v146;
        if (!v146)
          goto LABEL_58;
        goto LABEL_55;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v108 = atomic_load((unsigned __int8 *)&qword_2540CD0A0);
      if ((v108 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD0A0))
      {
LABEL_175:
        v109 = sub_223C73794();
        *(_QWORD *)&v164 = "Attempting to create an ";
        *((_QWORD *)&v164 + 1) = 24;
        v110 = &qword_2540CD2A8;
        v111 = byte_2540CD2BF;
        if (byte_2540CD2BF < 0)
        {
          v111 = unk_2540CD2B0;
          v110 = (uint64_t *)qword_2540CD2A8;
        }
        *(_QWORD *)&v165 = v110;
        *((_QWORD *)&v165 + 1) = v111;
        *(_QWORD *)&v166 = " from an ";
        *((_QWORD *)&v166 + 1) = 9;
        size = HIBYTE(v109->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v113 = v109;
        else
          v113 = (std::string *)v109->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = v109->__r_.__value_.__l.__size_;
        v167[0] = v113;
        v167[1] = size;
        sub_2231A9820((uint64_t)&v164, (uint64_t)v168, 0, 0, &__p);
        v114 = v145;
        if (v145)
        {
          if (v146)
          {
            v118 = &v146->__shared_owners_;
            do
              v119 = __ldxr((unint64_t *)v118);
            while (__stxr(v119 + 1, (unint64_t *)v118));
            do
              v120 = __ldaxr((unint64_t *)v118);
            while (__stlxr(v120 - 1, (unint64_t *)v118));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
            v114 = v145;
            v121 = &v146->__shared_owners_;
            do
              v122 = __ldxr((unint64_t *)v121);
            while (__stxr(v122 + 1, (unint64_t *)v121));
            do
              v123 = __ldaxr((unint64_t *)v121);
            while (__stlxr(v123 - 1, (unint64_t *)v121));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          v124 = ((uint64_t (*)(uint64_t (***)()))(*v114)[10])(v114);
          v126 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v126 = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)&v164 = p_p;
          *((_QWORD *)&v164 + 1) = v126;
          *(_QWORD *)&v165 = " but the other image contains an incompatible buffer type ";
          *((_QWORD *)&v165 + 1) = 58;
          *(_QWORD *)&v166 = v124;
          *((_QWORD *)&v166 + 1) = v125;
          sub_2231A9820((uint64_t)&v164, (uint64_t)v167, 0, 0, &__dst);
          LOBYTE(v115) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_209:
          if ((v115 & 0x80) != 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(exception, &__dst);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
        }
        v115 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v116 = __p.__r_.__value_.__l.__size_;
        v117 = v116 + 46;
        if (v116 + 46 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v117 > 0x16)
        {
          v130 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v117 | 7) != 0x17)
            v130 = v117 | 7;
          v131 = v130 + 1;
          p_dst = (std::string *)operator new(v130 + 1);
          __dst.__r_.__value_.__l.__size_ = v116 + 46;
          __dst.__r_.__value_.__r.__words[2] = v131 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!v116)
            goto LABEL_208;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v116 + 46;
        }
        if (v115 >= 0)
          v129 = &__p;
        else
          v129 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, v129, v116);
LABEL_208:
        strcpy((char *)p_dst + v116, " but the other image does not contain a buffer");
        goto LABEL_209;
      }
      v162 = 14;
      strcpy((char *)v161, "ConstImageView");
      v132 = sub_2231EFDB4();
      if (SHIBYTE(v132->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__s, v132->__r_.__value_.__l.__data_, v132->__r_.__value_.__l.__size_);
      }
      else
      {
        v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v133;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v164);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v134 = sub_2232101F4();
      if (*((char *)v134 + 23) < 0)
      {
        sub_223197FA4(&__s, *(void **)v134, *((_QWORD *)v134 + 1));
      }
      else
      {
        v135 = *v134;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v134 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v135;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v165 + 8);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_22319BD1C(&v159, (uint64_t)&v164, 2uLL);
      sub_2245730F4((char *)v161, (uint64_t *)&v159, (std::string *)&qword_2540CD2A8, v136, v137);
      v138 = (uint64_t)v159;
      if (v159)
      {
        v139 = v160;
        v140 = v159;
        if ((std::__shared_weak_count_vtbl *)v160 != v159)
        {
          do
          {
            if (*(char *)(v139 - 1) < 0)
              operator delete(*(void **)(v139 - 24));
            v139 -= 24;
          }
          while (v139 != v138);
          v140 = v159;
        }
        v160 = v138;
        operator delete(v140);
        if ((SHIBYTE(v166) & 0x80000000) == 0)
        {
LABEL_229:
          if ((SBYTE7(v165) & 0x80000000) == 0)
            goto LABEL_230;
          goto LABEL_241;
        }
      }
      else if ((SHIBYTE(v166) & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete(*((void **)&v165 + 1));
      if ((SBYTE7(v165) & 0x80000000) == 0)
      {
LABEL_230:
        if ((v162 & 0x80000000) == 0)
        {
LABEL_232:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD2A8, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD0A0);
          goto LABEL_175;
        }
LABEL_231:
        operator delete(v161[0]);
        goto LABEL_232;
      }
LABEL_241:
      operator delete((void *)v164);
      if ((v162 & 0x80000000) == 0)
        goto LABEL_232;
      goto LABEL_231;
    }
  }
  else
  {
LABEL_33:
    if ((_QWORD)v164)
      goto LABEL_34;
  }
  LOBYTE(v149) = 0;
  v156 = 0;
  v29 = v146;
  if (!v146)
    goto LABEL_58;
LABEL_55:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (v156)
      goto LABEL_59;
LABEL_124:
    *(_QWORD *)a2 = &off_24EC21DF8;
    v80 = *(_QWORD *)(a1 + 8);
    v81 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v81)
    {
      v106 = *(_WORD *)(a1 + 72);
      *(_QWORD *)(a2 + 8) = v80;
      *(_QWORD *)(a2 + 16) = 0;
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
      result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 56) = result;
      *(_WORD *)(a2 + 72) = v106;
      if (!v156)
        return result;
      goto LABEL_157;
    }
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    v84 = *(_WORD *)(a1 + 72);
    do
      v85 = __ldxr(v82);
    while (__stxr(v85 + 1, v82));
    v86 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 40) = v86;
    result = *(__n128 *)(a1 + 56);
    *(__n128 *)(a2 + 56) = result;
    do
      v87 = __ldxr(v82);
    while (__stxr(v87 + 1, v82));
    *(_QWORD *)(a2 + 8) = v80;
    *(_QWORD *)(a2 + 16) = v81;
    *(_WORD *)(a2 + 72) = v84;
    do
      v88 = __ldaxr(v82);
    while (__stlxr(v88 - 1, v82));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
    do
      v89 = __ldaxr(v82);
    while (__stlxr(v89 - 1, v82));
    if (!v89)
      goto LABEL_155;
    goto LABEL_156;
  }
LABEL_58:
  if (!v156)
    goto LABEL_124;
LABEL_59:
  if (v151)
  {
    v32 = &v151->__shared_owners_;
    do
      v33 = __ldxr((unint64_t *)v32);
    while (__stxr(v33 + 1, (unint64_t *)v32));
    do
      v34 = __ldaxr((unint64_t *)v32);
    while (__stlxr(v34 - 1, (unint64_t *)v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  sub_22427E59C((uint64_t)v150, &v141);
  v35 = (std::__shared_weak_count_vtbl *)operator new();
  v36 = v142;
  *((_QWORD *)&v164 + 1) = v142;
  *(_QWORD *)&v165 = v143;
  if (v143)
  {
    v37 = (unint64_t *)&v143->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)&v164 = &off_24EC71528;
  if (v36)
  {
    v40 = *v36;
    v39 = (std::__shared_weak_count *)v36[1];
    if (!v39)
      goto LABEL_74;
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (v43)
    {
LABEL_74:
      if (!v40)
        goto LABEL_76;
      goto LABEL_75;
    }
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (v40)
LABEL_75:
      sub_2242AE7CC(*((uint64_t *)&v164 + 1));
  }
LABEL_76:
  sub_224291924(v35, (uint64_t)&v164);
  if (*((_QWORD *)&v164 + 1))
  {
    v45 = **((_QWORD **)&v164 + 1);
    v44 = *(std::__shared_weak_count **)(*((_QWORD *)&v164 + 1) + 8);
    if (v44)
    {
      v46 = (unint64_t *)&v44->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if (!v45)
          goto LABEL_84;
        goto LABEL_83;
      }
    }
    if (v45)
LABEL_83:
      sub_2242AE9A8(*((uint64_t *)&v164 + 1));
  }
LABEL_84:
  *(_QWORD *)&v164 = &off_24EC715B8;
  v49 = (std::__shared_weak_count *)v165;
  if ((_QWORD)v165)
  {
    v50 = (unint64_t *)(v165 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v161[0] = 0;
  v159 = v35;
  v144 = &off_24EC27D98;
  *(_QWORD *)&v164 = v35;
  v52 = (std::__shared_weak_count *)operator new();
  v53 = v52;
  v52->__shared_owners_ = 0;
  v54 = (unint64_t *)&v52->__shared_owners_;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC619F0;
  v52->__shared_weak_owners_ = 0;
  v52[1].__vftable = v35;
  *((_QWORD *)&v164 + 1) = v52;
  v159 = 0;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v145 = (uint64_t (***)())v35;
  v146 = v52;
  do
    v56 = __ldxr(v54);
  while (__stxr(v56 + 1, v54));
  do
    v57 = __ldaxr(v54);
  while (__stlxr(v57 - 1, v54));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v53);
  }
  (*((void (**)(std::string *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v35->~__shared_weak_count
   + 8))(&__s, v35, 32);
  v59 = *(_OWORD *)(__s.__r_.__value_.__r.__words[0] + 16);
  v58 = *(_OWORD *)(__s.__r_.__value_.__r.__words[0] + 32);
  *(_OWORD *)v147 = *(_OWORD *)__s.__r_.__value_.__l.__data_;
  *(_OWORD *)&v147[16] = v59;
  *(_OWORD *)&v147[32] = v58;
  __s.__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x227684CE8]();
  v60 = v146;
  if (v146)
  {
    v61 = &v146->__shared_owners_;
    do
      v62 = __ldxr((unint64_t *)v61);
    while (__stxr(v62 + 1, (unint64_t *)v61));
    do
      v63 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v63 - 1, (unint64_t *)v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (!*((_QWORD *)&v164 + 1))
    goto LABEL_106;
  v65 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    v67 = (uint64_t)v159;
    v159 = 0;
    if (!v67)
      goto LABEL_110;
  }
  else
  {
LABEL_106:
    v67 = (uint64_t)v159;
    v159 = 0;
    if (!v67)
      goto LABEL_110;
  }
  *(_QWORD *)v67 = off_24EC6F8F0;
  v68 = *(unsigned int *)(v67 + 40);
  if ((_DWORD)v68 != -1)
    ((void (*)(__int128 *, uint64_t))off_24EC70110[v68])(&v164, v67 + 16);
  *(_DWORD *)(v67 + 40) = -1;
  MEMORY[0x227684CE8](v67, 0x10A3C40ED729E16);
LABEL_110:
  *(_QWORD *)a2 = &off_24EC21DF8;
  v69 = v145;
  v70 = v146;
  if (v146)
  {
    v71 = &v146->__shared_owners_;
    do
      v72 = __ldxr((unint64_t *)v71);
    while (__stxr(v72 + 1, (unint64_t *)v71));
    do
      v73 = __ldxr((unint64_t *)v71);
    while (__stxr(v73 + 1, (unint64_t *)v71));
    v74 = *(_QWORD *)v147;
    result = *(__n128 *)&v147[8];
    v76 = *(_OWORD *)&v147[24];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v147[8];
    *(_OWORD *)(a2 + 48) = v76;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v147[40];
    do
      v77 = __ldxr((unint64_t *)v71);
    while (__stxr(v77 + 1, (unint64_t *)v71));
    *(_QWORD *)(a2 + 8) = v69;
    *(_QWORD *)(a2 + 16) = v70;
    *(_QWORD *)(a2 + 24) = v74;
    *(_WORD *)(a2 + 72) = 256;
    do
      v78 = __ldaxr((unint64_t *)v71);
    while (__stlxr(v78 - 1, (unint64_t *)v71));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    do
      v79 = __ldaxr((unint64_t *)v71);
    while (__stlxr(v79 - 1, (unint64_t *)v71));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  else
  {
    v90 = *(_QWORD *)v147;
    *(_QWORD *)(a2 + 8) = v145;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v90;
    result = *(__n128 *)&v147[8];
    v91 = *(_OWORD *)&v147[24];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v147[8];
    *(_OWORD *)(a2 + 48) = v91;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v147[40];
    *(_WORD *)(a2 + 72) = 256;
  }
  v92 = v146;
  if (!v146)
    goto LABEL_143;
  v93 = &v146->__shared_owners_;
  do
    v94 = __ldaxr((unint64_t *)v93);
  while (__stlxr(v94 - 1, (unint64_t *)v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = v142;
    if (!v142)
      goto LABEL_151;
  }
  else
  {
LABEL_143:
    v95 = v142;
    if (!v142)
      goto LABEL_151;
  }
  v97 = *v95;
  v96 = (std::__shared_weak_count *)v95[1];
  if (v96)
  {
    v98 = (unint64_t *)&v96->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    do
      v100 = __ldaxr(v98);
    while (__stlxr(v100 - 1, v98));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if (!v97)
        goto LABEL_151;
      goto LABEL_150;
    }
  }
  if (v97)
LABEL_150:
    sub_2242AE9A8((uint64_t)v142);
LABEL_151:
  v141 = &off_24EC715B8;
  v81 = v143;
  if (v143)
  {
    v101 = (unint64_t *)&v143->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
LABEL_155:
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_156:
  if (!v156)
    return result;
LABEL_157:
  v103 = v151;
  if (v151)
  {
    v104 = &v151->__shared_owners_;
    do
      v105 = __ldaxr((unint64_t *)v104);
    while (__stlxr(v105 - 1, (unint64_t *)v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  return result;
}

void sub_223C3F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  v48 = *(_QWORD *)(v46 - 224);
  if (v48)
  {
    v49 = *(_QWORD *)(v46 - 216);
    v50 = *(void **)(v46 - 224);
    if (v49 != v48)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0)
          operator delete(*(void **)(v49 - 24));
        v49 -= 24;
      }
      while (v49 != v48);
      v50 = *(void **)(v46 - 224);
    }
    *(_QWORD *)(v46 - 216) = v48;
    operator delete(v50);
  }
  if (*(char *)(v46 - 97) < 0)
    operator delete(*(void **)(v46 - 120));
  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  if (*(char *)(v46 - 177) < 0)
    operator delete(*(void **)(v46 - 200));
  __cxa_guard_abort(&qword_2540CD0A0);
  __cxa_free_exception(v45);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_2231CE1A0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

__n128 sub_223C3F490@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t (***v34)();
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t (**v38)();
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t (**v43)();
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 result;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int16 v80;
  __n128 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t (***v90)();
  std::__shared_weak_count *v91;
  uint64_t (**v92)();
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t *v99;
  unint64_t v100;
  __int16 v101;
  std::logic_error *exception;
  unsigned __int8 v103;
  std::string *v104;
  uint64_t *v105;
  uint64_t v106;
  std::string::size_type size;
  std::string *v108;
  uint64_t v109;
  int v110;
  size_t v111;
  unint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string *p_p;
  std::string *p_dst;
  std::string *v124;
  uint64_t v125;
  uint64_t v126;
  std::string *v127;
  __int128 v128;
  __int128 *v129;
  __int128 v130;
  int64x2_t v131;
  int8x16_t v132;
  void **v133;
  void **v134;
  void *v135;
  uint64_t (**v136)();
  uint64_t (***v137)();
  std::__shared_weak_count *v138;
  uint64_t (**v139)();
  uint64_t (***v140)();
  std::__shared_weak_count *v141;
  __int128 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t (**v145)();
  uint64_t (***v146)();
  std::__shared_weak_count *v147;
  _OWORD v148[2];
  char v149;
  std::string __dst;
  std::string __p;
  void *v152;
  void **v153;
  void *v154[2];
  char v155;
  std::string __s;
  _BYTE v157[48];
  _QWORD v158[2];
  _QWORD v159[2];

  v159[1] = *MEMORY[0x24BDAC8D0];
  v139 = &off_24EC21420;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 48);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v142 = *(_OWORD *)(a1 + 24);
    v143 = *(_QWORD *)(a1 + 40);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v140 = v4;
    v141 = v5;
    v144 = v8;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v140;
    if (v140)
      goto LABEL_16;
LABEL_23:
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)v157 = 0uLL;
    goto LABEL_29;
  }
  v15 = *(_WORD *)(a1 + 48);
  v140 = *(uint64_t (****)())(a1 + 8);
  v141 = 0;
  v142 = *(_OWORD *)(a1 + 24);
  v143 = *(_QWORD *)(a1 + 40);
  v144 = v15;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v141;
  if (v141)
  {
    v13 = &v141->__shared_owners_;
    do
      v14 = __ldxr((unint64_t *)v13);
    while (__stxr(v14 + 1, (unint64_t *)v13));
  }
  if (*v4 == off_24EC711E0)
  {
    *(_QWORD *)v157 = v4;
    *(_QWORD *)&v157[8] = v141;
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    *(_OWORD *)v157 = 0uLL;
    if (__s.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__size_ + 16))(__s.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
      }
    }
  }
  if (!*(_QWORD *)&v157[8])
    goto LABEL_33;
LABEL_29:
  v18 = (unint64_t *)(*(_QWORD *)&v157[8] + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v157[8] + 16))(*(_QWORD *)&v157[8]);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v157[8]);
    if (*(_QWORD *)v157)
    {
LABEL_34:
      if (v141)
      {
        v20 = &v141->__shared_owners_;
        do
          v21 = __ldxr((unint64_t *)v20);
        while (__stxr(v21 + 1, (unint64_t *)v20));
      }
      if (v140 && *v140 == off_24EC711E0)
      {
        if (v141)
        {
          v22 = &v141->__shared_owners_;
          do
            v23 = __ldxr((unint64_t *)v22);
          while (__stxr(v23 + 1, (unint64_t *)v22));
          *(_OWORD *)v157 = v142;
          *(_QWORD *)&v157[16] = v143;
          do
            v24 = __ldxr((unint64_t *)v22);
          while (__stxr(v24 + 1, (unint64_t *)v22));
          do
            v25 = __ldaxr((unint64_t *)v22);
          while (__stlxr(v25 - 1, (unint64_t *)v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
          do
            v26 = __ldaxr((unint64_t *)v22);
          while (__stlxr(v26 - 1, (unint64_t *)v22));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        else
        {
          *(_OWORD *)v157 = v142;
          *(_QWORD *)&v157[16] = v143;
        }
        v145 = &off_24EC61420;
        v146 = v140;
        v147 = v141;
        v148[0] = *(_OWORD *)v157;
        *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)&v157[9];
        v149 = 1;
        v27 = v141;
        if (!v141)
          goto LABEL_58;
        goto LABEL_55;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v103 = atomic_load((unsigned __int8 *)&qword_2540CD0A8);
      if ((v103 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD0A8))
      {
LABEL_175:
        v104 = sub_223C73BF8();
        *(_QWORD *)v157 = "Attempting to create an ";
        *(_QWORD *)&v157[8] = 24;
        v105 = &qword_2540CD2C0;
        v106 = byte_2540CD2D7;
        if (byte_2540CD2D7 < 0)
        {
          v106 = unk_2540CD2C8;
          v105 = (uint64_t *)qword_2540CD2C0;
        }
        *(_QWORD *)&v157[16] = v105;
        *(_QWORD *)&v157[24] = v106;
        *(_QWORD *)&v157[32] = " from an ";
        *(_QWORD *)&v157[40] = 9;
        size = HIBYTE(v104->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v108 = v104;
        else
          v108 = (std::string *)v104->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = v104->__r_.__value_.__l.__size_;
        v158[0] = v108;
        v158[1] = size;
        sub_2231A9820((uint64_t)v157, (uint64_t)v159, 0, 0, &__p);
        v109 = (uint64_t)v140;
        if (v140)
        {
          if (v141)
          {
            v113 = &v141->__shared_owners_;
            do
              v114 = __ldxr((unint64_t *)v113);
            while (__stxr(v114 + 1, (unint64_t *)v113));
            do
              v115 = __ldaxr((unint64_t *)v113);
            while (__stlxr(v115 - 1, (unint64_t *)v113));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
            v109 = (uint64_t)v140;
            v116 = &v141->__shared_owners_;
            do
              v117 = __ldxr((unint64_t *)v116);
            while (__stxr(v117 + 1, (unint64_t *)v116));
            do
              v118 = __ldaxr((unint64_t *)v116);
            while (__stlxr(v118 - 1, (unint64_t *)v116));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 80))(v109);
          v121 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v121 = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)v157 = p_p;
          *(_QWORD *)&v157[8] = v121;
          *(_QWORD *)&v157[16] = " but the other image contains an incompatible buffer type ";
          *(_QWORD *)&v157[24] = 58;
          *(_QWORD *)&v157[32] = v119;
          *(_QWORD *)&v157[40] = v120;
          sub_2231A9820((uint64_t)v157, (uint64_t)v158, 0, 0, &__dst);
          LOBYTE(v110) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_209:
          if ((v110 & 0x80) != 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(exception, &__dst);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
        }
        v110 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v111 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v111 = __p.__r_.__value_.__l.__size_;
        v112 = v111 + 46;
        if (v111 + 46 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v112 > 0x16)
        {
          v125 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v112 | 7) != 0x17)
            v125 = v112 | 7;
          v126 = v125 + 1;
          p_dst = (std::string *)operator new(v125 + 1);
          __dst.__r_.__value_.__l.__size_ = v111 + 46;
          __dst.__r_.__value_.__r.__words[2] = v126 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!v111)
            goto LABEL_208;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v111 + 46;
        }
        if (v110 >= 0)
          v124 = &__p;
        else
          v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, v124, v111);
LABEL_208:
        strcpy((char *)p_dst + v111, " but the other image does not contain a buffer");
        goto LABEL_209;
      }
      v155 = 14;
      strcpy((char *)v154, "ConstImageView");
      v127 = sub_2231B47AC();
      if (SHIBYTE(v127->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__s, v127->__r_.__value_.__l.__data_, v127->__r_.__value_.__l.__size_);
      }
      else
      {
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v128;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v157);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v129 = sub_2232101F4();
      if (*((char *)v129 + 23) < 0)
      {
        sub_223197FA4(&__s, *(void **)v129, *((_QWORD *)v129 + 1));
      }
      else
      {
        v130 = *v129;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v130;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v157[24]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_22319BD1C(&v152, (uint64_t)v157, 2uLL);
      sub_2245730F4((char *)v154, (uint64_t *)&v152, (std::string *)&qword_2540CD2C0, v131, v132);
      v133 = (void **)v152;
      if (v152)
      {
        v134 = v153;
        v135 = v152;
        if (v153 != v152)
        {
          do
          {
            if (*((char *)v134 - 1) < 0)
              operator delete(*(v134 - 3));
            v134 -= 3;
          }
          while (v134 != v133);
          v135 = v152;
        }
        v153 = v133;
        operator delete(v135);
        if ((v157[47] & 0x80000000) == 0)
        {
LABEL_229:
          if ((v157[23] & 0x80000000) == 0)
            goto LABEL_230;
          goto LABEL_241;
        }
      }
      else if ((v157[47] & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete(*(void **)&v157[24]);
      if ((v157[23] & 0x80000000) == 0)
      {
LABEL_230:
        if ((v155 & 0x80000000) == 0)
        {
LABEL_232:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD2C0, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD0A8);
          goto LABEL_175;
        }
LABEL_231:
        operator delete(v154[0]);
        goto LABEL_232;
      }
LABEL_241:
      operator delete(*(void **)v157);
      if ((v155 & 0x80000000) == 0)
        goto LABEL_232;
      goto LABEL_231;
    }
  }
  else
  {
LABEL_33:
    if (*(_QWORD *)v157)
      goto LABEL_34;
  }
  LOBYTE(v145) = 0;
  v149 = 0;
  v27 = v141;
  if (!v141)
    goto LABEL_58;
LABEL_55:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v149)
      goto LABEL_59;
LABEL_124:
    *(_QWORD *)a2 = &off_24EC21420;
    v76 = *(_QWORD *)(a1 + 8);
    v77 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v77)
    {
      v101 = *(_WORD *)(a1 + 48);
      *(_QWORD *)(a2 + 8) = v76;
      *(_QWORD *)(a2 + 16) = 0;
      result = *(__n128 *)(a1 + 24);
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
      *(_WORD *)(a2 + 48) = v101;
      if (!v149)
        return result;
      goto LABEL_157;
    }
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    v80 = *(_WORD *)(a1 + 48);
    v81 = (__n128 *)(a1 + 24);
    do
      v82 = __ldxr(v78);
    while (__stxr(v82 + 1, v78));
    result = *v81;
    *(__n128 *)(a2 + 24) = *v81;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
    do
      v83 = __ldxr(v78);
    while (__stxr(v83 + 1, v78));
    *(_QWORD *)(a2 + 8) = v76;
    *(_QWORD *)(a2 + 16) = v77;
    *(_WORD *)(a2 + 48) = v80;
    do
      v84 = __ldaxr(v78);
    while (__stlxr(v84 - 1, v78));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    do
      v85 = __ldaxr(v78);
    while (__stlxr(v85 - 1, v78));
    if (!v85)
      goto LABEL_155;
    goto LABEL_156;
  }
LABEL_58:
  if (!v149)
    goto LABEL_124;
LABEL_59:
  if (v147)
  {
    v30 = &v147->__shared_owners_;
    do
      v31 = __ldxr((unint64_t *)v30);
    while (__stxr(v31 + 1, (unint64_t *)v30));
    do
      v32 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v32 - 1, (unint64_t *)v30));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  sub_22426D038((uint64_t)v146, &v136);
  v33 = (std::__shared_weak_count_vtbl *)operator new();
  v34 = v137;
  v140 = v137;
  v141 = v138;
  if (v138)
  {
    v35 = (unint64_t *)&v138->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v139 = &off_24EC71528;
  if (v34)
  {
    v38 = *v34;
    v37 = (std::__shared_weak_count *)v34[1];
    if (!v37)
      goto LABEL_74;
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (v41)
    {
LABEL_74:
      if (!v38)
        goto LABEL_76;
      goto LABEL_75;
    }
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (v38)
LABEL_75:
      sub_2242AE7CC((uint64_t)v140);
  }
LABEL_76:
  sub_22427E9A8(v33, (uint64_t)&v139);
  if (v140)
  {
    v43 = *v140;
    v42 = (std::__shared_weak_count *)v140[1];
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if (!v43)
          goto LABEL_84;
        goto LABEL_83;
      }
    }
    if (v43)
LABEL_83:
      sub_2242AE9A8((uint64_t)v140);
  }
LABEL_84:
  v139 = &off_24EC715B8;
  v47 = v141;
  if (v141)
  {
    v48 = &v141->__shared_owners_;
    do
      v49 = __ldaxr((unint64_t *)v48);
    while (__stlxr(v49 - 1, (unint64_t *)v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v154[0] = 0;
  v152 = v33;
  *(_QWORD *)v157 = &off_24EC27E90;
  v139 = (uint64_t (**)())v33;
  v50 = (std::__shared_weak_count *)operator new();
  v51 = v50;
  v50->__shared_owners_ = 0;
  v52 = (unint64_t *)&v50->__shared_owners_;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F4F8;
  v50->__shared_weak_owners_ = 0;
  v50[1].__vftable = v33;
  v140 = (uint64_t (***)())v50;
  v152 = 0;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  *(_QWORD *)&v157[8] = v33;
  *(_QWORD *)&v157[16] = v50;
  do
    v54 = __ldxr(v52);
  while (__stxr(v54 + 1, v52));
  do
    v55 = __ldaxr(v52);
  while (__stlxr(v55 - 1, v52));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v51);
  }
  (*((void (**)(std::string *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v33->~__shared_weak_count
   + 8))(&__s, v33, 1);
  v56 = *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)&v157[24] = *(_OWORD *)__s.__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[40] = v56;
  __s.__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x227684CE8]();
  v57 = *(std::__shared_weak_count **)&v157[16];
  if (*(_QWORD *)&v157[16])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    do
      v60 = __ldaxr(v58);
    while (__stlxr(v60 - 1, v58));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v61 = (std::__shared_weak_count *)v140;
  if (!v140)
    goto LABEL_106;
  v62 = (unint64_t *)(v140 + 1);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = (unsigned int *)v152;
    v152 = 0;
    if (!v64)
      goto LABEL_110;
  }
  else
  {
LABEL_106:
    v64 = (unsigned int *)v152;
    v152 = 0;
    if (!v64)
      goto LABEL_110;
  }
  *(_QWORD *)v64 = off_24EC6F230;
  v65 = v64[10];
  if ((_DWORD)v65 != -1)
    ((void (*)(uint64_t (***)(), unsigned int *))off_24EC70110[v65])(&v139, v64 + 4);
  v64[10] = -1;
  MEMORY[0x227684CE8](v64, 0x10A3C40A1F8E8FFLL);
LABEL_110:
  *(_QWORD *)a2 = &off_24EC21420;
  v66 = *(_QWORD *)&v157[8];
  v67 = *(std::__shared_weak_count **)&v157[16];
  if (*(_QWORD *)&v157[16])
  {
    v68 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    do
      v70 = __ldxr(v68);
    while (__stxr(v70 + 1, v68));
    v71 = *(_QWORD *)&v157[24];
    result = *(__n128 *)&v157[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v157[32];
    do
      v73 = __ldxr(v68);
    while (__stxr(v73 + 1, v68));
    *(_QWORD *)(a2 + 8) = v66;
    *(_QWORD *)(a2 + 16) = v67;
    *(_QWORD *)(a2 + 24) = v71;
    *(_WORD *)(a2 + 48) = 256;
    do
      v74 = __ldaxr(v68);
    while (__stlxr(v74 - 1, v68));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    do
      v75 = __ldaxr(v68);
    while (__stlxr(v75 - 1, v68));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  else
  {
    v86 = *(_QWORD *)&v157[24];
    *(_QWORD *)(a2 + 8) = *(_QWORD *)&v157[8];
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v86;
    result = *(__n128 *)&v157[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v157[32];
    *(_WORD *)(a2 + 48) = 256;
  }
  v87 = *(std::__shared_weak_count **)&v157[16];
  if (!*(_QWORD *)&v157[16])
    goto LABEL_143;
  v88 = (unint64_t *)(*(_QWORD *)&v157[16] + 8);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v90 = v137;
    if (!v137)
      goto LABEL_151;
  }
  else
  {
LABEL_143:
    v90 = v137;
    if (!v137)
      goto LABEL_151;
  }
  v92 = *v90;
  v91 = (std::__shared_weak_count *)v90[1];
  if (v91)
  {
    v93 = (unint64_t *)&v91->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    do
      v95 = __ldaxr(v93);
    while (__stlxr(v95 - 1, v93));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      if (!v92)
        goto LABEL_151;
      goto LABEL_150;
    }
  }
  if (v92)
LABEL_150:
    sub_2242AE9A8((uint64_t)v137);
LABEL_151:
  v136 = &off_24EC715B8;
  v77 = v138;
  if (v138)
  {
    v96 = (unint64_t *)&v138->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
LABEL_155:
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_156:
  if (!v149)
    return result;
LABEL_157:
  v98 = v147;
  if (v147)
  {
    v99 = &v147->__shared_owners_;
    do
      v100 = __ldaxr((unint64_t *)v99);
    while (__stlxr(v100 - 1, (unint64_t *)v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  return result;
}

void sub_223C40318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void **__p,void **a40)
{
  std::__shared_weak_count *v40;
  void *v41;
  uint64_t v42;
  void **v44;
  void **v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  v44 = __p;
  if (__p)
  {
    v45 = a40;
    v46 = __p;
    if (a40 != __p)
    {
      do
      {
        if (*((char *)v45 - 1) < 0)
          operator delete(*(v45 - 3));
        v45 -= 3;
      }
      while (v45 != v44);
      v46 = __p;
    }
    a40 = v44;
    operator delete(v46);
  }
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  if (*(char *)(v42 - 177) < 0)
    operator delete(*(void **)(v42 - 200));
  __cxa_guard_abort(&qword_2540CD0A8);
  __cxa_free_exception(v41);
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_2231BEEB4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

__n128 sub_223C40588@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __n128 v16;

  if (*(_BYTE *)(a1 + 792))
  {
    if ((!*(_DWORD *)(a1 + 768) || !*(_DWORD *)(a1 + 772))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1193, (uint64_t)"!derived.processed_semantics->Empty()", 37, (uint64_t)"Processed semantic buffer not valid", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 720);
    v5 = *(std::__shared_weak_count **)(a1 + 728);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a1 + 784);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v14 = *(_OWORD *)(a1 + 736);
      v15 = *(_OWORD *)(a1 + 752);
      v16 = *(__n128 *)(a1 + 768);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v8 = *(_WORD *)(a1 + 784);
      v14 = *(_OWORD *)(a1 + 736);
      v15 = *(_OWORD *)(a1 + 752);
      v16 = *(__n128 *)(a1 + 768);
    }
    *(_QWORD *)a2 = &off_24EC204C0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 24) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    result = v16;
    *(__n128 *)(a2 + 56) = v16;
    *(_WORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  return result;
}

__n128 sub_223C40728@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int16 v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (***v69)();
  std::__shared_weak_count *v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __n128 result;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t *v104;
  unint64_t v105;
  __int16 v106;
  std::logic_error *exception;
  unsigned __int8 v108;
  std::string *v109;
  uint64_t *v110;
  uint64_t v111;
  std::string::size_type size;
  std::string *v113;
  uint64_t (***v114)();
  int v115;
  size_t v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::string::size_type v126;
  std::string *p_p;
  std::string *p_dst;
  std::string *v129;
  uint64_t v130;
  uint64_t v131;
  std::string *v132;
  __int128 v133;
  __int128 *v134;
  __int128 v135;
  int64x2_t v136;
  int8x16_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t (**v141)();
  uint64_t *v142;
  std::__shared_weak_count *v143;
  uint64_t (**v144)();
  uint64_t (***v145)();
  std::__shared_weak_count *v146;
  _BYTE v147[48];
  __int16 v148;
  uint64_t (**v149)();
  uint64_t (***v150)();
  std::__shared_weak_count *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  char v156;
  std::string __dst;
  std::string __p;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  void *v161[2];
  char v162;
  std::string __s;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD v167[2];
  _QWORD v168[2];

  v168[1] = *MEMORY[0x24BDAC8D0];
  v144 = &off_24EC28E38;
  v4 = *(uint64_t (****)())(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_WORD *)(a1 + 72);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)v147 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v147[16] = v10;
    *(_OWORD *)&v147[32] = *(_OWORD *)(a1 + 56);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v145 = v4;
    v146 = v5;
    v148 = v8;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = v145;
    if (v145)
      goto LABEL_16;
LABEL_23:
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    v164 = 0uLL;
    goto LABEL_29;
  }
  v16 = *(_WORD *)(a1 + 72);
  v145 = *(uint64_t (****)())(a1 + 8);
  v146 = 0;
  v17 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)v147 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v147[16] = v17;
  *(_OWORD *)&v147[32] = *(_OWORD *)(a1 + 56);
  v148 = v16;
  if (!v4)
    goto LABEL_23;
LABEL_16:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)v146;
  if (v146)
  {
    v14 = &v146->__shared_owners_;
    do
      v15 = __ldxr((unint64_t *)v14);
    while (__stxr(v15 + 1, (unint64_t *)v14));
  }
  if (*v4 == off_24EC71030)
  {
    *(_QWORD *)&v164 = v4;
    *((_QWORD *)&v164 + 1) = v146;
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    v164 = 0uLL;
    if (__s.__r_.__value_.__l.__size_)
    {
      v18 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__size_ + 16))(__s.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
      }
    }
  }
  if (!*((_QWORD *)&v164 + 1))
    goto LABEL_33;
LABEL_29:
  v20 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v164 + 1) + 16))(*((_QWORD *)&v164 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v164 + 1));
    if ((_QWORD)v164)
    {
LABEL_34:
      if (v146)
      {
        v22 = &v146->__shared_owners_;
        do
          v23 = __ldxr((unint64_t *)v22);
        while (__stxr(v23 + 1, (unint64_t *)v22));
      }
      if (v145 && *v145 == off_24EC71030)
      {
        if (v146)
        {
          v24 = &v146->__shared_owners_;
          do
            v25 = __ldxr((unint64_t *)v24);
          while (__stxr(v25 + 1, (unint64_t *)v24));
          v164 = *(_OWORD *)v147;
          v165 = *(_OWORD *)&v147[16];
          v166 = *(_OWORD *)&v147[32];
          do
            v26 = __ldxr((unint64_t *)v24);
          while (__stxr(v26 + 1, (unint64_t *)v24));
          do
            v27 = __ldaxr((unint64_t *)v24);
          while (__stlxr(v27 - 1, (unint64_t *)v24));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
          do
            v28 = __ldaxr((unint64_t *)v24);
          while (__stlxr(v28 - 1, (unint64_t *)v24));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        else
        {
          v164 = *(_OWORD *)v147;
          v165 = *(_OWORD *)&v147[16];
          v166 = *(_OWORD *)&v147[32];
        }
        v149 = &off_24EC61610;
        v150 = v145;
        v151 = v146;
        v152 = v164;
        v153 = v165;
        v154 = v166;
        v155 = v167[0];
        v156 = 1;
        v29 = v146;
        if (!v146)
          goto LABEL_58;
        goto LABEL_55;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v108 = atomic_load((unsigned __int8 *)&qword_2540CD0B0);
      if ((v108 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD0B0))
      {
LABEL_175:
        v109 = sub_223C7402C();
        *(_QWORD *)&v164 = "Attempting to create an ";
        *((_QWORD *)&v164 + 1) = 24;
        v110 = &qword_2540CD2D8;
        v111 = byte_2540CD2EF;
        if (byte_2540CD2EF < 0)
        {
          v111 = unk_2540CD2E0;
          v110 = (uint64_t *)qword_2540CD2D8;
        }
        *(_QWORD *)&v165 = v110;
        *((_QWORD *)&v165 + 1) = v111;
        *(_QWORD *)&v166 = " from an ";
        *((_QWORD *)&v166 + 1) = 9;
        size = HIBYTE(v109->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v113 = v109;
        else
          v113 = (std::string *)v109->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = v109->__r_.__value_.__l.__size_;
        v167[0] = v113;
        v167[1] = size;
        sub_2231A9820((uint64_t)&v164, (uint64_t)v168, 0, 0, &__p);
        v114 = v145;
        if (v145)
        {
          if (v146)
          {
            v118 = &v146->__shared_owners_;
            do
              v119 = __ldxr((unint64_t *)v118);
            while (__stxr(v119 + 1, (unint64_t *)v118));
            do
              v120 = __ldaxr((unint64_t *)v118);
            while (__stlxr(v120 - 1, (unint64_t *)v118));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
            v114 = v145;
            v121 = &v146->__shared_owners_;
            do
              v122 = __ldxr((unint64_t *)v121);
            while (__stxr(v122 + 1, (unint64_t *)v121));
            do
              v123 = __ldaxr((unint64_t *)v121);
            while (__stlxr(v123 - 1, (unint64_t *)v121));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          v124 = ((uint64_t (*)(uint64_t (***)()))(*v114)[10])(v114);
          v126 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v126 = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)&v164 = p_p;
          *((_QWORD *)&v164 + 1) = v126;
          *(_QWORD *)&v165 = " but the other image contains an incompatible buffer type ";
          *((_QWORD *)&v165 + 1) = 58;
          *(_QWORD *)&v166 = v124;
          *((_QWORD *)&v166 + 1) = v125;
          sub_2231A9820((uint64_t)&v164, (uint64_t)v167, 0, 0, &__dst);
          LOBYTE(v115) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
LABEL_209:
          if ((v115 & 0x80) != 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(exception, &__dst);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
        }
        v115 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v116 = __p.__r_.__value_.__l.__size_;
        v117 = v116 + 46;
        if (v116 + 46 >= 0x7FFFFFFFFFFFFFF8)
          sub_22316DBC0();
        if (v117 > 0x16)
        {
          v130 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v117 | 7) != 0x17)
            v130 = v117 | 7;
          v131 = v130 + 1;
          p_dst = (std::string *)operator new(v130 + 1);
          __dst.__r_.__value_.__l.__size_ = v116 + 46;
          __dst.__r_.__value_.__r.__words[2] = v131 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          if (!v116)
            goto LABEL_208;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v116 + 46;
        }
        if (v115 >= 0)
          v129 = &__p;
        else
          v129 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_dst, v129, v116);
LABEL_208:
        strcpy((char *)p_dst + v116, " but the other image does not contain a buffer");
        goto LABEL_209;
      }
      v162 = 14;
      strcpy((char *)v161, "ConstImageView");
      v132 = sub_2231EC034();
      if (SHIBYTE(v132->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_223197FA4(&__s, v132->__r_.__value_.__l.__data_, v132->__r_.__value_.__l.__size_);
      }
      else
      {
        v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v133;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v164);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v134 = sub_2232101F4();
      if (*((char *)v134 + 23) < 0)
      {
        sub_223197FA4(&__s, *(void **)v134, *((_QWORD *)v134 + 1));
      }
      else
      {
        v135 = *v134;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v134 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v135;
      }
      sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v165 + 8);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_22319BD1C(&v159, (uint64_t)&v164, 2uLL);
      sub_2245730F4((char *)v161, (uint64_t *)&v159, (std::string *)&qword_2540CD2D8, v136, v137);
      v138 = (uint64_t)v159;
      if (v159)
      {
        v139 = v160;
        v140 = v159;
        if ((std::__shared_weak_count_vtbl *)v160 != v159)
        {
          do
          {
            if (*(char *)(v139 - 1) < 0)
              operator delete(*(void **)(v139 - 24));
            v139 -= 24;
          }
          while (v139 != v138);
          v140 = v159;
        }
        v160 = v138;
        operator delete(v140);
        if ((SHIBYTE(v166) & 0x80000000) == 0)
        {
LABEL_229:
          if ((SBYTE7(v165) & 0x80000000) == 0)
            goto LABEL_230;
          goto LABEL_241;
        }
      }
      else if ((SHIBYTE(v166) & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete(*((void **)&v165 + 1));
      if ((SBYTE7(v165) & 0x80000000) == 0)
      {
LABEL_230:
        if ((v162 & 0x80000000) == 0)
        {
LABEL_232:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD2D8, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD0B0);
          goto LABEL_175;
        }
LABEL_231:
        operator delete(v161[0]);
        goto LABEL_232;
      }
LABEL_241:
      operator delete((void *)v164);
      if ((v162 & 0x80000000) == 0)
        goto LABEL_232;
      goto LABEL_231;
    }
  }
  else
  {
LABEL_33:
    if ((_QWORD)v164)
      goto LABEL_34;
  }
  LOBYTE(v149) = 0;
  v156 = 0;
  v29 = v146;
  if (!v146)
    goto LABEL_58;
LABEL_55:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (v156)
      goto LABEL_59;
LABEL_124:
    *(_QWORD *)a2 = &off_24EC28E38;
    v80 = *(_QWORD *)(a1 + 8);
    v81 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v81)
    {
      v106 = *(_WORD *)(a1 + 72);
      *(_QWORD *)(a2 + 8) = v80;
      *(_QWORD *)(a2 + 16) = 0;
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
      result = *(__n128 *)(a1 + 56);
      *(__n128 *)(a2 + 56) = result;
      *(_WORD *)(a2 + 72) = v106;
      if (!v156)
        return result;
      goto LABEL_157;
    }
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    v84 = *(_WORD *)(a1 + 72);
    do
      v85 = __ldxr(v82);
    while (__stxr(v85 + 1, v82));
    v86 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 40) = v86;
    result = *(__n128 *)(a1 + 56);
    *(__n128 *)(a2 + 56) = result;
    do
      v87 = __ldxr(v82);
    while (__stxr(v87 + 1, v82));
    *(_QWORD *)(a2 + 8) = v80;
    *(_QWORD *)(a2 + 16) = v81;
    *(_WORD *)(a2 + 72) = v84;
    do
      v88 = __ldaxr(v82);
    while (__stlxr(v88 - 1, v82));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
    do
      v89 = __ldaxr(v82);
    while (__stlxr(v89 - 1, v82));
    if (!v89)
      goto LABEL_155;
    goto LABEL_156;
  }
LABEL_58:
  if (!v156)
    goto LABEL_124;
LABEL_59:
  if (v151)
  {
    v32 = &v151->__shared_owners_;
    do
      v33 = __ldxr((unint64_t *)v32);
    while (__stxr(v33 + 1, (unint64_t *)v32));
    do
      v34 = __ldaxr((unint64_t *)v32);
    while (__stlxr(v34 - 1, (unint64_t *)v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  sub_224271ABC((uint64_t)v150, &v141);
  v35 = (std::__shared_weak_count_vtbl *)operator new();
  v36 = v142;
  *((_QWORD *)&v164 + 1) = v142;
  *(_QWORD *)&v165 = v143;
  if (v143)
  {
    v37 = (unint64_t *)&v143->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)&v164 = &off_24EC71528;
  if (v36)
  {
    v40 = *v36;
    v39 = (std::__shared_weak_count *)v36[1];
    if (!v39)
      goto LABEL_74;
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (v43)
    {
LABEL_74:
      if (!v40)
        goto LABEL_76;
      goto LABEL_75;
    }
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (v40)
LABEL_75:
      sub_2242AE7CC(*((uint64_t *)&v164 + 1));
  }
LABEL_76:
  sub_22428DB80(v35, (uint64_t)&v164);
  if (*((_QWORD *)&v164 + 1))
  {
    v45 = **((_QWORD **)&v164 + 1);
    v44 = *(std::__shared_weak_count **)(*((_QWORD *)&v164 + 1) + 8);
    if (v44)
    {
      v46 = (unint64_t *)&v44->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if (!v45)
          goto LABEL_84;
        goto LABEL_83;
      }
    }
    if (v45)
LABEL_83:
      sub_2242AE9A8(*((uint64_t *)&v164 + 1));
  }
LABEL_84:
  *(_QWORD *)&v164 = &off_24EC715B8;
  v49 = (std::__shared_weak_count *)v165;
  if ((_QWORD)v165)
  {
    v50 = (unint64_t *)(v165 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v161[0] = 0;
  v159 = v35;
  v144 = &off_24EC28080;
  *(_QWORD *)&v164 = v35;
  v52 = (std::__shared_weak_count *)operator new();
  v53 = v52;
  v52->__shared_owners_ = 0;
  v54 = (unint64_t *)&v52->__shared_owners_;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC619A0;
  v52->__shared_weak_owners_ = 0;
  v52[1].__vftable = v35;
  *((_QWORD *)&v164 + 1) = v52;
  v159 = 0;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v145 = (uint64_t (***)())v35;
  v146 = v52;
  do
    v56 = __ldxr(v54);
  while (__stxr(v56 + 1, v54));
  do
    v57 = __ldaxr(v54);
  while (__stlxr(v57 - 1, v54));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v53);
  }
  (*((void (**)(std::string *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v35->~__shared_weak_count
   + 8))(&__s, v35, 25);
  v59 = *(_OWORD *)(__s.__r_.__value_.__r.__words[0] + 16);
  v58 = *(_OWORD *)(__s.__r_.__value_.__r.__words[0] + 32);
  *(_OWORD *)v147 = *(_OWORD *)__s.__r_.__value_.__l.__data_;
  *(_OWORD *)&v147[16] = v59;
  *(_OWORD *)&v147[32] = v58;
  __s.__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x227684CE8]();
  v60 = v146;
  if (v146)
  {
    v61 = &v146->__shared_owners_;
    do
      v62 = __ldxr((unint64_t *)v61);
    while (__stxr(v62 + 1, (unint64_t *)v61));
    do
      v63 = __ldaxr((unint64_t *)v61);
    while (__stlxr(v63 - 1, (unint64_t *)v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (!*((_QWORD *)&v164 + 1))
    goto LABEL_106;
  v65 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    v67 = (uint64_t)v159;
    v159 = 0;
    if (!v67)
      goto LABEL_110;
  }
  else
  {
LABEL_106:
    v67 = (uint64_t)v159;
    v159 = 0;
    if (!v67)
      goto LABEL_110;
  }
  *(_QWORD *)v67 = off_24EC6F3E0;
  v68 = *(unsigned int *)(v67 + 40);
  if ((_DWORD)v68 != -1)
    ((void (*)(__int128 *, uint64_t))off_24EC70110[v68])(&v164, v67 + 16);
  *(_DWORD *)(v67 + 40) = -1;
  MEMORY[0x227684CE8](v67, 0x10A3C40ED729E16);
LABEL_110:
  *(_QWORD *)a2 = &off_24EC28E38;
  v69 = v145;
  v70 = v146;
  if (v146)
  {
    v71 = &v146->__shared_owners_;
    do
      v72 = __ldxr((unint64_t *)v71);
    while (__stxr(v72 + 1, (unint64_t *)v71));
    do
      v73 = __ldxr((unint64_t *)v71);
    while (__stxr(v73 + 1, (unint64_t *)v71));
    v74 = *(_QWORD *)v147;
    result = *(__n128 *)&v147[8];
    v76 = *(_OWORD *)&v147[24];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v147[8];
    *(_OWORD *)(a2 + 48) = v76;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v147[40];
    do
      v77 = __ldxr((unint64_t *)v71);
    while (__stxr(v77 + 1, (unint64_t *)v71));
    *(_QWORD *)(a2 + 8) = v69;
    *(_QWORD *)(a2 + 16) = v70;
    *(_QWORD *)(a2 + 24) = v74;
    *(_WORD *)(a2 + 72) = 256;
    do
      v78 = __ldaxr((unint64_t *)v71);
    while (__stlxr(v78 - 1, (unint64_t *)v71));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    do
      v79 = __ldaxr((unint64_t *)v71);
    while (__stlxr(v79 - 1, (unint64_t *)v71));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  else
  {
    v90 = *(_QWORD *)v147;
    *(_QWORD *)(a2 + 8) = v145;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v90;
    result = *(__n128 *)&v147[8];
    v91 = *(_OWORD *)&v147[24];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v147[8];
    *(_OWORD *)(a2 + 48) = v91;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v147[40];
    *(_WORD *)(a2 + 72) = 256;
  }
  v92 = v146;
  if (!v146)
    goto LABEL_143;
  v93 = &v146->__shared_owners_;
  do
    v94 = __ldaxr((unint64_t *)v93);
  while (__stlxr(v94 - 1, (unint64_t *)v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v95 = v142;
    if (!v142)
      goto LABEL_151;
  }
  else
  {
LABEL_143:
    v95 = v142;
    if (!v142)
      goto LABEL_151;
  }
  v97 = *v95;
  v96 = (std::__shared_weak_count *)v95[1];
  if (v96)
  {
    v98 = (unint64_t *)&v96->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    do
      v100 = __ldaxr(v98);
    while (__stlxr(v100 - 1, v98));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if (!v97)
        goto LABEL_151;
      goto LABEL_150;
    }
  }
  if (v97)
LABEL_150:
    sub_2242AE9A8((uint64_t)v142);
LABEL_151:
  v141 = &off_24EC715B8;
  v81 = v143;
  if (v143)
  {
    v101 = (unint64_t *)&v143->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
LABEL_155:
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_156:
  if (!v156)
    return result;
LABEL_157:
  v103 = v151;
  if (v151)
  {
    v104 = &v151->__shared_owners_;
    do
      v105 = __ldaxr((unint64_t *)v104);
    while (__stlxr(v105 - 1, (unint64_t *)v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  return result;
}

void sub_223C415E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  v48 = *(_QWORD *)(v46 - 224);
  if (v48)
  {
    v49 = *(_QWORD *)(v46 - 216);
    v50 = *(void **)(v46 - 224);
    if (v49 != v48)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0)
          operator delete(*(void **)(v49 - 24));
        v49 -= 24;
      }
      while (v49 != v48);
      v50 = *(void **)(v46 - 224);
    }
    *(_QWORD *)(v46 - 216) = v48;
    operator delete(v50);
  }
  if (*(char *)(v46 - 97) < 0)
    operator delete(*(void **)(v46 - 120));
  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  if (*(char *)(v46 - 177) < 0)
    operator delete(*(void **)(v46 - 200));
  __cxa_guard_abort(&qword_2540CD0B0);
  __cxa_free_exception(v45);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_2232CDB08((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223C41850(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __int128 v23;
  __int16 v24;

  v4 = *(_QWORD *)(a1 + 696);
  if (v4)
  {
    if (!*(_DWORD *)(v4 + 64) || !*(_DWORD *)(v4 + 68))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1224, (uint64_t)"!derived.invalid_pixel_mask->Empty()", 36, (uint64_t)"Invalid pixel mask not valid", 28, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = *(_QWORD *)(a1 + 696);
    }
    sub_2236B487C(v4, &v20);
    *(_QWORD *)a2 = &off_24EC21420;
    v5 = v20;
    v6 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v9 = v24;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = v22;
      *(_OWORD *)(a2 + 32) = v23;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v11;
      *(_WORD *)(a2 + 48) = v9;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      v15 = v24;
      v16 = v22;
      *(_QWORD *)(a2 + 8) = v20;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = v16;
      *(_OWORD *)(a2 + 32) = v23;
      *(_WORD *)(a2 + 48) = v15;
    }
    *(_BYTE *)(a2 + 56) = 1;
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
}

__n128 sub_223C41A24@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __n128 v16;

  if (*(_BYTE *)(a1 + 880))
  {
    if ((!*(_DWORD *)(a1 + 856) || !*(_DWORD *)(a1 + 860))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1230, (uint64_t)"!derived.semantics_histogram->Empty()", 37, (uint64_t)"Semantics histogram not valid", 29, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 808);
    v5 = *(std::__shared_weak_count **)(a1 + 816);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a1 + 872);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v14 = *(_OWORD *)(a1 + 824);
      v15 = *(_OWORD *)(a1 + 840);
      v16 = *(__n128 *)(a1 + 856);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v8 = *(_WORD *)(a1 + 872);
      v14 = *(_OWORD *)(a1 + 824);
      v15 = *(_OWORD *)(a1 + 840);
      v16 = *(__n128 *)(a1 + 856);
    }
    *(_QWORD *)a2 = &off_24EC204C0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 24) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    result = v16;
    *(__n128 *)(a2 + 56) = v16;
    *(_WORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  return result;
}

__n128 sub_223C41BC8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __n128 v16;

  if (*(_BYTE *)(a1 + 968))
  {
    if ((!*(_DWORD *)(a1 + 944) || !*(_DWORD *)(a1 + 948))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1236, (uint64_t)"!derived.material_histogram->Empty()", 36, (uint64_t)"Material histogram not valid", 28, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 896);
    v5 = *(std::__shared_weak_count **)(a1 + 904);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = *(_WORD *)(a1 + 960);
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v14 = *(_OWORD *)(a1 + 912);
      v15 = *(_OWORD *)(a1 + 928);
      v16 = *(__n128 *)(a1 + 944);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v8 = *(_WORD *)(a1 + 960);
      v14 = *(_OWORD *)(a1 + 912);
      v15 = *(_OWORD *)(a1 + 928);
      v16 = *(__n128 *)(a1 + 944);
    }
    *(_QWORD *)a2 = &off_24EC204C0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 24) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    result = v16;
    *(__n128 *)(a2 + 56) = v16;
    *(_WORD *)(a2 + 72) = v8;
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  return result;
}

void sub_223C41D68(uint64_t a1)
{
  double v2;
  double v3;
  char v4[24];
  void *__p[2];
  char v6;

  v2 = (double)*(uint64_t *)(a1 + 1232) * 0.000000001;
  kdebug_trace();
  if (*(double *)&qword_255788F20 != v2)
  {
    v3 = v2 - *(double *)&qword_255788F20;
    if (*(double *)&qword_255788F20 >= v2)
      v3 = *(double *)&qword_255788F20 - v2;
    if (v3 > 0.00000001)
      qword_255788F20 = *(_QWORD *)&v2;
  }
  kdebug_trace();
  v6 = 11;
  strcpy((char *)__p, "FrameBundle");
  v4[23] = 17;
  strcpy(v4, "Stats.FrameBundle");
  sub_223C41EB4(a1, __p, v4);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_223C41E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

#error "223C41EB4: too big function (funcsize=0)"

void sub_223C622A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  uint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  __cxa_guard_abort(&qword_255795560);
  v49 = (std::__shared_weak_count *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2231874DC((uint64_t)&STACK[0x310]);
  if (*(char *)(v47 - 169) < 0)
  {
    operator delete(*(void **)(v47 - 192));
    sub_223C65944((uint64_t)&a47);
    _Unwind_Resume(a1);
  }
  sub_223C65944((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C6388C(_Unwind_Exception *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_223C638A8()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  v0 = (std::__shared_weak_count *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x223C64818);
}

void sub_223C638B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C638BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C650E8);
}

void sub_223C638D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC((_QWORD **)&STACK[0x2F0]);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C650E8);
}

void sub_223C63964(_Unwind_Exception *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_223C63980()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  v0 = (std::__shared_weak_count *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x223C64818);
}

void sub_223C6398C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C639E4()
{
  sub_22323DF84((uint64_t)&STACK[0x3E0], (char *)STACK[0x3E8]);
  sub_2231874DC((uint64_t)&STACK[0x310]);
  JUMPOUT(0x223C64B58);
}

void sub_223C639F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C65120);
}

void sub_223C63A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC((_QWORD **)&STACK[0x2F0]);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C65120);
}

void sub_223C63A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C63AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC(&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C63AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C63ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC(&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C63AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2241231D8((uint64_t)&a39);
  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65160);
}

void sub_223C63B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  sub_2231BD3DC((uint64_t)&a47);
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C63B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC(&a39);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C64984);
}

void sub_223C63B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  *(_QWORD *)(v40 + 8) = v39;
  v41 = *(std::__shared_weak_count **)(v40 + 24);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_2231C37EC(&a39);
  MEMORY[0x227684CE8](v40, 0x10F3C4035895BD5);
  JUMPOUT(0x223C63BC8);
}

void sub_223C63BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C651A8);
}

void sub_223C63BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC((_QWORD **)&STACK[0x2F0]);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  sub_2231874DC((uint64_t)&a39);
  JUMPOUT(0x223C651A8);
}

void sub_223C63C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;

  sub_2241231D8(v40);
  v43 = (std::__shared_weak_count *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_2241231D8(v41 - 192);
  sub_2231874DC((uint64_t)&a33);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    sub_2231BD90C((uint64_t)&a39);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C652F4);
}

void sub_223C63D14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;

  if (a53 && a52 < 0)
    operator delete(__p);
  sub_223167354(v53);
  JUMPOUT(0x223C64C94);
}

void sub_223C63D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2241231D8((uint64_t)&a47);
  sub_2231BD90C((uint64_t)&STACK[0x310]);
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C63D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_2231C35FC(&a39);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C649B4);
}

void sub_223C63D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  *(_QWORD *)(v40 + 8) = v39;
  v41 = *(std::__shared_weak_count **)(v40 + 24);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_2231C37EC(&a39);
  MEMORY[0x227684CE8](v40, 0x10F3C4035895BD5);
  JUMPOUT(0x223C63DD4);
}

void sub_223C63DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;

  if (a54)
  {
    v55 = a49;
    if (a49)
    {
      p_shared_owners = (unint64_t *)&a49->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  sub_2231874DC((uint64_t)&a33);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    sub_2231BD90C((uint64_t)&a39);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C652F4);
}

void sub_223C63E28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&a39);
  if (a53 && a52 < 0)
    operator delete(__p);
  sub_2231BD90C((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C64C80);
}

void sub_223C63E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;

  sub_2241231D8(v48);
  v49 = (std::__shared_weak_count *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2241231D8((uint64_t)&a47);
  if (v47)
  {
    v52 = (unint64_t *)&v47->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x2F0]);
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C64C1CLL);
}

void sub_223C63F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  sub_22316F8F4((uint64_t *)&STACK[0x3E0]);
  sub_2231AD66C((uint64_t)&STACK[0x310]);
  sub_22316F8F4(&a47);
  JUMPOUT(0x223C649F8);
}

void sub_223C63FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2241231D8((uint64_t)&a33);
  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_223294C8C((uint64_t *)&STACK[0x3E0]);
  JUMPOUT(0x223C645BCLL);
}

void sub_223C63FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65254);
}

void sub_223C64014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a38 < 0)
    operator delete(a33);
  sub_2231874DC((uint64_t)&a50);
  JUMPOUT(0x223C652B4);
}

void sub_223C64024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;

  v50 = (std::__shared_weak_count *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  if (a38 < 0)
    operator delete(a33);
  sub_2231874DC((uint64_t)&a50);
  JUMPOUT(0x223C652B4);
}

void sub_223C64064()
{
  sub_2232178D4((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&STACK[0x310]);
  sub_223167354((uint64_t)&STACK[0x2F0]);
  JUMPOUT(0x223C647F4);
}

void sub_223C6406C()
{
  sub_2231AD66C(&STACK[0x3E0]);
  JUMPOUT(0x223C64884);
}

void sub_223C64078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C64090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C640A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C640B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C640C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C640E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C640F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C64108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C64118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C64130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      JUMPOUT(0x223C64914);
  }
  JUMPOUT(0x223C64918);
}

void sub_223C64140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;

  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(__p);
  sub_223167354(v53 - 192);
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C64190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC(&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C641A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C641B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53 && a52 < 0)
    operator delete(a47);
  sub_2231874DC(&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C641C8()
{
  sub_2241231D8((uint64_t)&STACK[0x310]);
  JUMPOUT(0x223C64A30);
}

void sub_223C641DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  sub_223167354((uint64_t)&a33);
  sub_223167354(v34 - 192);
  sub_2231AD66C((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C64A30);
}

void sub_223C642A0()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C642AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C642B4()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C642BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C642C4()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  MEMORY[0x227684CE8](v0, 0x1000C4072FAA15ELL);
  JUMPOUT(0x223C64720);
}

void sub_223C642E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C642F0()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C642F8()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64300()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C6432C()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1000C4072FAA15ELL);
  MEMORY[0x227684CE8](v0, 0x1000C4072FAA15ELL);
  sub_2231874DC(&STACK[0x3E0]);
  JUMPOUT(0x223C6522CLL);
}

void sub_223C64354(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::mutex *v52;

  std::mutex::unlock(v52);
  if (a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C64390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::mutex *v52;

  std::mutex::unlock(v52);
  if (a52 < 0)
    JUMPOUT(0x223C64914);
  JUMPOUT(0x223C64918);
}

void sub_223C643B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643D4()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C643DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C643FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6440C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64414(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6441C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64424()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C6442C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64434(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6443C()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64444(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6444C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6445C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64474(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6447C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64488()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64490(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64498(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C644A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C644A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C644B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C644C0()
{
  JUMPOUT(0x223C644F8);
}

void sub_223C64504(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6450C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64514(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6451C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64524(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6452C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64550(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64558(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64574()
{
  JUMPOUT(0x223C64720);
}

void sub_223C64580(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64588(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64590(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C645A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C645DC()
{
  JUMPOUT(0x223C64720);
}

void sub_223C645E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C645F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C645FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64604(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6461C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64624(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64630(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64638(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64644(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6464C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64658(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64660(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6466C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64674(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6467C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64684(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64690(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64698(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C646B0()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C646B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C646D4()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C646DC()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C646E4()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C646EC()
{
  JUMPOUT(0x223C64720);
}

void sub_223C64728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::mutex *v52;

  std::mutex::unlock(v52);
  if (a52 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C652B4);
}

void sub_223C6479C()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C647AC()
{
  std::__shared_weak_count *v0;
  unint64_t *v1;
  unint64_t v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (!v2)
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  sub_2232178D4((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&STACK[0x310]);
  JUMPOUT(0x223C647ECLL);
}

void sub_223C64804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::mutex *v52;

  std::mutex::unlock(v52);
  if (a52 < 0)
    operator delete(a47);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x223C65404);
}

void sub_223C64824()
{
  JUMPOUT(0x223C65360);
}

void sub_223C64830()
{
  JUMPOUT(0x223C653C8);
}

void sub_223C64838()
{
  JUMPOUT(0x223C64918);
}

void sub_223C64840(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64848()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64850(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64858(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64860()
{
  JUMPOUT(0x223C64A2CLL);
}

void sub_223C64868(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64870(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64878(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C648A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C648B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C648C0()
{
  JUMPOUT(0x223C64C80);
}

void sub_223C64948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_2231874DC(&a33);
  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    sub_2231BD90C(&a39);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C652F4);
}

void sub_223C649D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_22319B964((uint64_t)&STACK[0x3E0]);
  sub_2231874DC((uint64_t)&a50);
  if (a44 < 0)
    operator delete(a39);
  if (*(char *)(v50 - 169) < 0)
  {
    operator delete(*(void **)(v50 - 192));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C65458);
}

void sub_223C64A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_22319B964((uint64_t)&a47);
  JUMPOUT(0x223C64918);
}

void sub_223C64AD8()
{
  JUMPOUT(0x223C64A30);
}

void sub_223C64B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C64B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231874DC((uint64_t)&a33);
  JUMPOUT(0x223C652C4);
}

void sub_223C64B40()
{
  JUMPOUT(0x223C64C80);
}

void sub_223C64B84()
{
  JUMPOUT(0x223C65368);
}

void sub_223C64B90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64B98(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64BAC(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64BC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64BC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64BD0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64BE0()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C64BF4()
{
  JUMPOUT(0x223C653D0);
}

void sub_223C64C00()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C64C08()
{
  JUMPOUT(0x223C64C9CLL);
}

void sub_223C64CD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64CE0(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64CF4(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64D08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D10(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D18(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D64(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D78(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64D98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DCC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DE8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64DFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E10(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E18(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E20(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E38(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E78(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E84(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64E98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64ED4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64EEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64F44()
{
  uint64_t v0;

  if ((*(char *)(v0 - 169) & 0x80000000) == 0)
    JUMPOUT(0x223C65458);
  JUMPOUT(0x223C652CCLL);
}

void sub_223C64F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x223C65214);
  JUMPOUT(0x223C65458);
}

void sub_223C64F8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64F94(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64FA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64FA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64FB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C64FBC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_25578F010);
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64FDC(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C64FF0(_Unwind_Exception *a1)
{
  sub_2231874DC((uint64_t)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_223C65004(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C6500C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C65014(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223C65028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_223C65944((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD3DC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65064()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C6506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD90C((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD90C((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C650A0()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C65108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_223C65944((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD3DC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65184()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C6518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD90C((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C651C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_2231BD90C((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65200()
{
  JUMPOUT(0x223C652C4);
}

void sub_223C65280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    JUMPOUT(0x223C6540CLL);
  JUMPOUT(0x223C65458);
}

void sub_223C65318(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x223C6531CLL);
  _Unwind_Resume(a1);
}

void sub_223C65324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v49;

  v49 = *(_QWORD *)(v47 - 192);
  *(_QWORD *)(v47 - 192) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  if (a39)
    (*(void (**)(uint64_t))(*(_QWORD *)a39 + 8))(a39);
  sub_223167354(a10);
  sub_2231874DC(&STACK[0x310]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  sub_2231BD3DC(&a47);
  _Unwind_Resume(a1);
}

void sub_223C6538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v49;

  v49 = *(_QWORD *)(v47 - 192);
  *(_QWORD *)(v47 - 192) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  if (a39)
    (*(void (**)(uint64_t))(*(_QWORD *)a39 + 8))(a39);
  sub_223167354(a12);
  sub_2231874DC(&STACK[0x310]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  sub_2231BD90C(&a47);
  _Unwind_Resume(a1);
}

void sub_223C6541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_22319B964((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_223C65430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (SLOBYTE(STACK[0x327]) < 0)
  {
    operator delete((void *)STACK[0x310]);
    sub_22319B964((uint64_t)&a47);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223C65420);
}

void sub_223C65464(uint64_t a1, uint64_t a2, const char *a3)
{
  size_t v6;
  size_t v7;
  void *p_p;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *__p;
  __int128 v34;
  uint64_t (**v35)();
  __int128 v36;
  _OWORD v37[2];
  mach_timebase_info info;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD v41[2];
  _QWORD v42[3];
  _BYTE v43[15];
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    return;
  v6 = strlen(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_p = operator new(v9 + 1);
    *(_QWORD *)&v34 = v7;
    *((_QWORD *)&v34 + 1) = v10 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v34) = v6;
    p_p = &__p;
    if (!v6)
      goto LABEL_10;
  }
  memcpy(p_p, a3, v7);
LABEL_10:
  *((_BYTE *)p_p + v7) = 0;
  v11 = *(double *)&qword_255788F20;
  v12 = sub_2241471F8();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v13 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v14 = __p;
    v41[0] = v34;
    *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)&v34 + 7);
    v15 = HIBYTE(v34);
    v34 = 0uLL;
    __p = 0;
    v16 = mach_continuous_time();
    v17 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v31) = info.numer;
      LODWORD(v32) = info.denom;
      *(double *)&qword_255795558 = (double)v31 / (double)v32;
      __cxa_guard_release(&qword_255795560);
    }
    v42[0] = llround(*(double *)&qword_255795558 * (double)v16);
    v42[1] = 2;
    v42[2] = v14;
    *(_QWORD *)v43 = v41[0];
    *(_QWORD *)&v43[7] = *(_QWORD *)((char *)v41 + 7);
    v44 = v15;
    v41[0] = 0;
    *(_QWORD *)((char *)v41 + 7) = 0;
    v45 = 1;
    v46 = 0;
    v47 = 0;
    v48 = (uint64_t)(v11 * 1000000000.0);
    v49 = 2;
    v50 = 1;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v18 = operator new();
    info = (mach_timebase_info)&off_24EC1F958;
    sub_2231FA09C(a2, (uint64_t)&v39);
    v35 = &off_24EC219D8;
    sub_2231F9F68((uint64_t)&info, (uint64_t)&v36);
    v19 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_QWORD *)v18 = &off_24EC21AC8;
    *(_QWORD *)(v18 + 8) = &off_24EC219D8;
    v22 = v36;
    v23 = v37[0];
    v36 = 0uLL;
    *(_OWORD *)(v18 + 16) = v22;
    *(_OWORD *)(v18 + 32) = v23;
    *(_OWORD *)(v18 + 46) = *(_OWORD *)((char *)v37 + 14);
    sub_2231AB0FC(v18 + 64, (uint64_t)v42);
    *(_QWORD *)v18 = &off_24EC21A48;
    v35 = &off_24EC219D8;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_QWORD *)v18 = &off_24EC6A528;
    v35 = 0;
    info = (mach_timebase_info)&off_24EC6A3B8;
    v39 = v18;
    v27 = (std::__shared_weak_count *)operator new();
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
    v40 = v27;
    sub_2231AD66C((uint64_t)v42);
    sub_2231AA5A4((uint64_t)v12, v13, (uint64_t)&info);
    v28 = v40;
    if (v40)
    {
      v29 = (unint64_t *)&v40->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
}

void sub_223C65840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  int v33;

  __cxa_guard_abort(&qword_255795560);
  if (v33 < 0)
    operator delete(v32);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223C65944(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC27290;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_223C659C0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_223C65A28(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  float **v8;
  uint64_t *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  _BOOL8 result;
  char *v14;
  char *v15;
  _QWORD *v16;
  float **v18;
  uint64_t *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v27;
  char *v28;
  _QWORD *v29;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  float *v40;
  uint64_t v41;

  v3 = **(char ***)a1;
  v2 = *(char **)(*(_QWORD *)a1 + 8);
  v4 = **(_QWORD ***)a2;
  if (v2 - v3 != *(_QWORD *)(*(_QWORD *)a2 + 8) - (_QWORD)v4)
    return 0;
  if (v3 != v2)
  {
    while (*(_QWORD *)v3 == *v4 && *((_QWORD *)v3 + 1) == v4[1])
    {
      v3 += 16;
      v4 += 2;
      if (v3 == v2)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v8 = *(float ***)(a1 + 8);
  v9 = *(uint64_t **)(a2 + 8);
  v11 = *v8;
  v10 = v8[1];
  v12 = *v9;
  if ((char *)v10 - (char *)*v8 != v9[1] - *v9)
    return 0;
  if (v11 == v10)
  {
LABEL_13:
    v15 = **(char ***)(a1 + 16);
    v14 = *(char **)(*(_QWORD *)(a1 + 16) + 8);
    v16 = **(_QWORD ***)(a2 + 16);
    if (v14 - v15 == *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) - (_QWORD)v16)
    {
      if (v15 == v14)
      {
LABEL_21:
        v18 = *(float ***)(a1 + 24);
        v19 = *(uint64_t **)(a2 + 24);
        v21 = *v18;
        v20 = v18[1];
        v22 = *v19;
        if ((char *)v20 - (char *)*v18 == v19[1] - *v19)
        {
          for (; v21 != v20; v22 += 64)
          {
            v40 = v21;
            v41 = v22;
            result = sub_2231F73E4(&v40);
            if (!result)
              return result;
            v21 += 16;
          }
          v24 = **(char ***)(a1 + 32);
          v23 = *(char **)(*(_QWORD *)(a1 + 32) + 8);
          v25 = **(_QWORD ***)(a2 + 32);
          if (v23 - v24 == *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) - (_QWORD)v25)
          {
            if (v24 == v23)
            {
LABEL_33:
              v28 = **(char ***)(a1 + 40);
              v27 = *(char **)(*(_QWORD *)(a1 + 40) + 8);
              v29 = **(_QWORD ***)(a2 + 40);
              if (v27 - v28 == *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) - (_QWORD)v29)
              {
                if (v28 == v27)
                {
LABEL_41:
                  v32 = **(char ***)(a1 + 48);
                  v31 = *(char **)(*(_QWORD *)(a1 + 48) + 8);
                  v33 = **(uint64_t ***)(a2 + 48);
                  if (v31 - v32 == *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) - (_QWORD)v33)
                  {
                    if (v32 == v31)
                      return 1;
                    do
                    {
                      v34 = *(_QWORD *)v32;
                      v35 = *((_QWORD *)v32 + 1);
                      v32 += 16;
                      v36 = *v33;
                      v37 = v33[1];
                      v33 += 2;
                      v38 = v34 ^ v36 | v35 ^ v37;
                      result = v38 == 0;
                      if (v38)
                        v39 = 1;
                      else
                        v39 = v32 == v31;
                    }
                    while (!v39);
                    return result;
                  }
                }
                else
                {
                  while (*(_QWORD *)v28 == *v29 && *((_QWORD *)v28 + 1) == v29[1])
                  {
                    v28 += 16;
                    v29 += 2;
                    if (v28 == v27)
                      goto LABEL_41;
                  }
                }
              }
            }
            else
            {
              while (*(_QWORD *)v24 == *v25 && *((_QWORD *)v24 + 1) == v25[1])
              {
                v24 += 16;
                v25 += 2;
                if (v24 == v23)
                  goto LABEL_33;
              }
            }
          }
        }
      }
      else
      {
        while (*(_QWORD *)v15 == *v16 && *((_QWORD *)v15 + 1) == v16[1])
        {
          v15 += 16;
          v16 += 2;
          if (v15 == v14)
            goto LABEL_21;
        }
      }
    }
    return 0;
  }
  while (1)
  {
    v40 = v11;
    v41 = v12;
    result = sub_2231F73E4(&v40);
    if (!result)
      return result;
    v11 += 16;
    v12 += 64;
    if (v11 == v10)
      goto LABEL_13;
  }
}

uint64_t sub_223C65CB0(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5, float32x4_t a6, float32x4_t a7, double a8, double a9, double a10, float32x4_t a11)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t *v24;
  float32x2_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  float32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x2_t v51;
  float32x2_t v52;
  uint64_t v53;
  float32x2_t v54;
  uint64_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  int8x16_t v61;
  float32x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  float32x4_t v87;
  float32x2_t v88;
  _BOOL4 v89;
  uint64_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x2_t v93;
  float32x2_t v94;
  uint64_t v95;
  float32x2_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x2_t v101;
  int8x16_t v102;
  float32x2_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  float32x4_t v127;
  float32x2_t v128;
  _BOOL4 v129;
  uint64_t v130;
  float32x4_t v131;
  uint64_t v132;
  float32x2_t v133;
  float32x2_t v134;
  uint64_t v135;
  float32x2_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float32x4_t v146;
  float32x2_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  float32x4_t v152;
  float32x2_t v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t v159;
  float32x2_t v160;
  _BOOL4 v161;
  float32x4_t v162;
  float32x2_t v163;
  float v164;
  int8x16_t v165;
  float32x2_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float v169;
  int8x16_t v170;
  float32x2_t v171;
  uint64_t v172;
  uint64_t v173;
  float32x2_t v174;
  float32x2_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  float32x4_t v179;
  float32x2_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  float32x4_t v186;
  float32x2_t v187;
  uint64_t v188;
  uint64_t v189;
  float32x2_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  float32x2_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x2_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  float32x4_t v202;
  float32x2_t v203;
  uint64_t v204;
  uint64_t v205;
  float32x2_t v206;
  uint64_t v207;
  uint64_t v208;
  float32x2_t v209;
  uint64_t *v210;
  BOOL v211;
  float32x4_t v212;
  float32x4_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x2_t v216;
  uint64_t v217;
  uint64_t v218;
  float32x2_t v219;
  uint64_t *v220;
  uint64_t v221;
  float32x2_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  float32x2_t v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t v229;
  float32x2_t v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  float32x2_t v234;
  uint64_t v235;
  uint64_t v236;
  float32x2_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  float32x4_t v242;
  uint64_t v243;
  float32x2_t v244;
  float32x2_t v245;
  uint64_t v246;
  int8x16_t v247;
  float32x2_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  float32x4_t v253;
  float32x2_t v254;
  float32x2_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  float32x4_t v259;
  float32x2_t v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  float32x4_t v264;
  float32x2_t v265;
  _BOOL4 v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  float32x4_t v273;
  float32x4_t v274;
  uint64_t v275;
  float32x2_t v276;
  float v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  float32x4_t v281;
  float32x2_t v282;
  float v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  float32x4_t v287;
  float32x2_t v288;
  _BOOL4 v289;
  uint64_t *v290;
  uint64_t *v291;
  float32x4_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x2_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  float32x4_t v302;
  float32x4_t v303;
  uint64_t v304;
  float32x2_t v305;
  float v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  float32x4_t v310;
  float32x2_t v311;
  float v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  float32x4_t v316;
  float32x2_t v317;
  _BOOL4 v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  float32x4_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  float32x4_t v335;
  float32x2_t v336;
  float32x2_t v337;
  uint64_t v338;
  float32x2_t v339;
  uint64_t v340;
  uint64_t v341;
  float32x4_t v342;
  float32x2_t v343;
  float v344;
  uint64_t v345;
  float32x2_t v346;
  int64_t v347;
  int64_t v348;
  BOOL v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  float32x4_t v354;
  float32x2_t v355;
  float v356;
  uint64_t v357;
  float32x2_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  float32x2_t v363;
  float32x2_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  float32x2_t v368;
  uint64_t v369;
  float32x2_t v370;
  float v371;
  float32x2_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  float32x4_t v376;
  float32x2_t v377;
  float v378;
  uint64_t v379;
  float32x2_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x4_t v390;
  float32x2_t v391;
  float v392;
  uint64_t v393;
  float32x2_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  float32x4_t v402;
  float32x2_t v403;
  float32x2_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  float32x2_t v408;
  uint64_t *v409;
  uint64_t v410;
  float32x4_t v411;
  float32x2_t v412;
  float v413;
  float32x2_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  float32x4_t v418;
  float32x2_t v419;
  float32x2_t v420;
  uint64_t v421;
  int8x16_t v422;
  float32x2_t v423;
  float32x4_t v424;
  float32x2_t v425;
  float32x2_t v426;
  float32x2_t v427;
  float32x4_t v428;
  float32x2_t v429;
  float v430;
  float32x2_t v431;
  uint64_t *v432;
  uint64_t v433;
  float32x4_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  float32x4_t v440;
  float32x2_t v441;
  float32x2_t v442;
  uint64_t v443;
  float32x2_t v444;
  uint64_t *v445;
  int8x16_t v446;
  float32x2_t v447;
  uint64_t v448;
  float32x2_t v449;
  float32x2_t v450;
  uint64_t v451;
  uint64_t v452;
  float32x4_t v453;
  float32x2_t v454;
  float32x2_t v455;
  uint64_t v456;
  float32x4_t v457;
  float32x2_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  float32x4_t v463;
  uint64_t v464;
  float32x2_t v465;
  float32x2_t v466;
  uint64_t v467;
  float32x4_t v468;
  float32x2_t v469;
  float32x4_t v470;
  uint64_t v471;
  float32x2_t v472;
  float32x2_t v473;
  uint64_t v474;
  int8x16_t v475;
  float32x2_t v476;
  uint64_t v477;
  uint64_t v478;
  float32x4_t v479;
  float32x2_t v480;
  float32x2_t v481;
  int8x16_t v482;
  float32x2_t v483;
  float32x4_t v484;
  float32x2_t v485;
  float v486;
  float32x2_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  float32x4_t v492;
  float32x2_t v493;
  float32x2_t v494;
  uint64_t v495;
  float32x4_t v496;
  float32x2_t v497;
  float32x4_t v498;
  float32x2_t v499;
  float32x2_t v500;
  uint64_t v501;
  float32x2_t v502;
  float32x4_t v503;
  float32x2_t v504;
  float32x2_t v505;
  uint64_t v506;
  float32x2_t v507;
  uint64_t v508;
  uint64_t v509;
  float32x4_t v510;
  float32x2_t v511;
  float32x2_t v512;
  uint64_t v513;
  float32x4_t v514;
  float32x2_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  float32x4_t v521;
  float32x2_t v522;
  float32x2_t v523;
  uint64_t v524;
  float32x4_t v525;
  float32x2_t v526;
  float32x4_t v527;
  uint64_t v528;
  float32x2_t v529;
  float32x2_t v530;
  uint64_t v531;
  float32x4_t v532;
  float32x2_t v533;
  float32x4_t v534;
  float32x2_t v535;
  float32x2_t v536;
  uint64_t v537;
  int8x16_t v538;
  float32x2_t v539;

  v15 = (uint64_t *)result;
LABEL_2:
  v16 = v15;
  while (2)
  {
    v15 = v16;
    v17 = (char *)a2 - (char *)v16;
    v18 = a2 - v16;
    switch(v18)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v239 = *(a2 - 1);
        v240 = **a3;
        v241 = v240 + (v239 << 6);
        a6.i64[0] = *(_QWORD *)(v241 + 48);
        a6.i32[2] = *(_DWORD *)(v241 + 56);
        v242 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
        v243 = *v16;
        v244 = (float32x2_t)vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u64[0];
        v245 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v242.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v242.f32, 1), *(float32x2_t *)v242.f32, 1);
        v246 = v240 + (*v16 << 6);
        v242.i64[0] = *(_QWORD *)(v246 + 48);
        v242.i32[2] = *(_DWORD *)(v246 + 56);
        v247 = (int8x16_t)vsubq_f32(v242, (float32x4_t)xmmword_2540CD0C0);
        v248 = (float32x2_t)vextq_s8(v247, v247, 8uLL).u64[0];
        if (vmla_f32(v245, v244, v244).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v247.i8, *(float32x2_t *)v247.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v247.i8, 1), *(float32x2_t *)v247.i8, 1), v248, v248).f32[0])
        {
          *v16 = v239;
          *(a2 - 1) = v243;
        }
        return result;
      case 3:
        v249 = **a3;
        v250 = *v16;
        v251 = v16[1];
        v252 = v249 + (v251 << 6);
        a6.i64[0] = *(_QWORD *)(v252 + 48);
        a6.i32[2] = *(_DWORD *)(v252 + 56);
        v253 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
        v254 = (float32x2_t)vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u64[0];
        v255 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v253.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v253.f32, 1), *(float32x2_t *)v253.f32, 1);
        v256 = v249 + (*v16 << 6);
        v258 = *(_QWORD *)(v256 + 48);
        v257 = v256 + 48;
        v253.i64[0] = v258;
        v253.i32[2] = *(_DWORD *)(v257 + 8);
        v255.f32[0] = vmla_f32(v255, v254, v254).f32[0];
        v259 = vsubq_f32(v253, (float32x4_t)xmmword_2540CD0C0);
        v260 = (float32x2_t)vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL).u64[0];
        v261 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v259.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v259.f32, 1), *(float32x2_t *)v259.f32, 1), v260, v260).f32[0];
        v262 = *(a2 - 1);
        v263 = v249 + (v262 << 6);
        v259.i64[0] = *(_QWORD *)(v263 + 48);
        v259.i32[2] = *(_DWORD *)(v263 + 56);
        v264 = vsubq_f32(v259, (float32x4_t)xmmword_2540CD0C0);
        v265 = (float32x2_t)vextq_s8((int8x16_t)v264, (int8x16_t)v264, 8uLL).u64[0];
        v266 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v264.f32, *(float32x2_t *)v264.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v264.f32, 1), *(float32x2_t *)v264.f32, 1), v265, v265).f32[0] < v255.f32[0];
        if (v255.f32[0] >= v261)
        {
          if (v266)
          {
            v16[1] = v262;
            *(a2 - 1) = v251;
            v416 = *v16;
            v415 = v16[1];
            v417 = v249 + (v415 << 6);
            v264.i64[0] = *(_QWORD *)(v417 + 48);
            v264.i32[2] = *(_DWORD *)(v417 + 56);
            v418 = vsubq_f32(v264, (float32x4_t)xmmword_2540CD0C0);
            v419 = (float32x2_t)vextq_s8((int8x16_t)v418, (int8x16_t)v418, 8uLL).u64[0];
            v420 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v418.f32, *(float32x2_t *)v418.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v418.f32, 1), *(float32x2_t *)v418.f32, 1);
            v421 = v249 + (*v16 << 6);
            v418.i64[0] = *(_QWORD *)(v421 + 48);
            v418.i32[2] = *(_DWORD *)(v421 + 56);
            v422 = (int8x16_t)vsubq_f32(v418, (float32x4_t)xmmword_2540CD0C0);
            v423 = (float32x2_t)vextq_s8(v422, v422, 8uLL).u64[0];
            if (vmla_f32(v420, v419, v419).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v422.i8, *(float32x2_t *)v422.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v422.i8, 1), *(float32x2_t *)v422.i8, 1), v423, v423).f32[0])
            {
              *v16 = v415;
              goto LABEL_192;
            }
          }
        }
        else if (v266)
        {
          *v16 = v262;
          *(a2 - 1) = v250;
        }
        else
        {
          *v16 = v251;
          v16[1] = v250;
          v477 = *(a2 - 1);
          v478 = v249 + (v477 << 6);
          v264.i64[0] = *(_QWORD *)(v478 + 48);
          v264.i32[2] = *(_DWORD *)(v478 + 56);
          v479 = vsubq_f32(v264, (float32x4_t)xmmword_2540CD0C0);
          v480 = (float32x2_t)vextq_s8((int8x16_t)v479, (int8x16_t)v479, 8uLL).u64[0];
          v481 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v479.f32, *(float32x2_t *)v479.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v479.f32, 1), *(float32x2_t *)v479.f32, 1);
          v479.i64[0] = *(_QWORD *)v257;
          v479.i32[2] = *(_DWORD *)(v257 + 8);
          v482 = (int8x16_t)vsubq_f32(v479, (float32x4_t)xmmword_2540CD0C0);
          v483 = (float32x2_t)vextq_s8(v482, v482, 8uLL).u64[0];
          if (vmla_f32(v481, v480, v480).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v482.i8, *(float32x2_t *)v482.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v482.i8, 1), *(float32x2_t *)v482.i8, 1), v483, v483).f32[0])
          {
            v16[1] = v477;
            *(a2 - 1) = v250;
          }
        }
        return result;
      case 4:
        v267 = v16 + 1;
        v268 = v16[1];
        v269 = v16 + 2;
        v270 = v16[2];
        v271 = **a3;
        v272 = v271 + (v268 << 6);
        a7.i64[0] = *(_QWORD *)(v272 + 48);
        a7.i32[2] = *(_DWORD *)(v272 + 56);
        v273 = (float32x4_t)xmmword_2540CD0C0;
        v274 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
        v275 = *v16;
        v276 = (float32x2_t)vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL).u64[0];
        v277 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v274.f32, *(float32x2_t *)v274.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v274.f32, 1), *(float32x2_t *)v274.f32, 1), v276, v276).f32[0];
        v278 = v271 + (*v16 << 6);
        v280 = *(_QWORD *)(v278 + 48);
        v279 = v278 + 48;
        v274.i64[0] = v280;
        v274.i32[2] = *(_DWORD *)(v279 + 8);
        v281 = vsubq_f32(v274, (float32x4_t)xmmword_2540CD0C0);
        v282 = (float32x2_t)vextq_s8((int8x16_t)v281, (int8x16_t)v281, 8uLL).u64[0];
        v283 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v281.f32, 1), *(float32x2_t *)v281.f32, 1), v282, v282).f32[0];
        v284 = v271 + (v270 << 6);
        v286 = *(_QWORD *)(v284 + 48);
        v285 = v284 + 48;
        v281.i64[0] = v286;
        v281.i32[2] = *(_DWORD *)(v285 + 8);
        v287 = vsubq_f32(v281, (float32x4_t)xmmword_2540CD0C0);
        v288 = (float32x2_t)vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u64[0];
        v289 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v287.f32, 1), *(float32x2_t *)v287.f32, 1), v288, v288).f32[0] < v277;
        if (v277 >= v283)
        {
          if (!v289)
            goto LABEL_171;
          *v267 = v270;
          *v269 = v268;
          v287.i64[0] = *(_QWORD *)v285;
          v287.i32[2] = *(_DWORD *)(v285 + 8);
          v273 = (float32x4_t)xmmword_2540CD0C0;
          v424 = vsubq_f32(v287, (float32x4_t)xmmword_2540CD0C0);
          v425 = (float32x2_t)vextq_s8((int8x16_t)v424, (int8x16_t)v424, 8uLL).u64[0];
          v426 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v424.f32, *(float32x2_t *)v424.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v424.f32, 1), *(float32x2_t *)v424.f32, 1);
          v424.i64[0] = *(_QWORD *)v279;
          v424.i32[2] = *(_DWORD *)(v279 + 8);
          v426.f32[0] = vmla_f32(v426, v425, v425).f32[0];
          v287 = vsubq_f32(v424, (float32x4_t)xmmword_2540CD0C0);
          v427 = (float32x2_t)vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u64[0];
          v290 = v16;
          v291 = v16 + 1;
          result = v268;
          if (v426.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v287.f32, 1), *(float32x2_t *)v287.f32, 1), v427, v427).f32[0])goto LABEL_172;
        }
        else
        {
          v290 = v16;
          v291 = v16 + 2;
          result = *v16;
          if (!v289)
          {
            *v16 = v268;
            v16[1] = v275;
            v287.i64[0] = *(_QWORD *)v285;
            v287.i32[2] = *(_DWORD *)(v285 + 8);
            v273 = (float32x4_t)xmmword_2540CD0C0;
            v292 = vsubq_f32(v287, (float32x4_t)xmmword_2540CD0C0);
            v293 = (float32x2_t)vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u64[0];
            v294 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v292.f32, 1), *(float32x2_t *)v292.f32, 1);
            v292.i64[0] = *(_QWORD *)v279;
            v292.i32[2] = *(_DWORD *)(v279 + 8);
            v294.f32[0] = vmla_f32(v294, v293, v293).f32[0];
            v287 = vsubq_f32(v292, (float32x4_t)xmmword_2540CD0C0);
            v295 = (float32x2_t)vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u64[0];
            v290 = v16 + 1;
            v291 = v16 + 2;
            result = v275;
            if (v294.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v287.f32, 1), *(float32x2_t *)v287.f32, 1), v295, v295).f32[0])
            {
LABEL_171:
              v268 = v270;
LABEL_172:
              v451 = *(a2 - 1);
              v452 = v271 + (v451 << 6);
              v287.i64[0] = *(_QWORD *)(v452 + 48);
              v287.i32[2] = *(_DWORD *)(v452 + 56);
              v453 = vsubq_f32(v287, v273);
              v454 = (float32x2_t)vextq_s8((int8x16_t)v453, (int8x16_t)v453, 8uLL).u64[0];
              v455 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v453.f32, *(float32x2_t *)v453.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v453.f32, 1), *(float32x2_t *)v453.f32, 1);
              v456 = v271 + (v268 << 6);
              v453.i64[0] = *(_QWORD *)(v456 + 48);
              v453.i32[2] = *(_DWORD *)(v456 + 56);
              v457 = vsubq_f32(v453, v273);
              v458 = (float32x2_t)vextq_s8((int8x16_t)v457, (int8x16_t)v457, 8uLL).u64[0];
              if (vmla_f32(v455, v454, v454).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v457.f32, *(float32x2_t *)v457.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v457.f32, 1), *(float32x2_t *)v457.f32, 1), v458, v458).f32[0])
              {
                *v269 = v451;
                *(a2 - 1) = v268;
                v459 = *v269;
                v460 = v271 + (v459 << 6);
                v462 = *(_QWORD *)(v460 + 48);
                v461 = v460 + 48;
                v457.i64[0] = v462;
                v457.i32[2] = *(_DWORD *)(v461 + 8);
                v463 = vsubq_f32(v457, (float32x4_t)xmmword_2540CD0C0);
                v464 = *v267;
                v465 = (float32x2_t)vextq_s8((int8x16_t)v463, (int8x16_t)v463, 8uLL).u64[0];
                v466 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v463.f32, *(float32x2_t *)v463.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v463.f32, 1), *(float32x2_t *)v463.f32, 1);
                v467 = v271 + (v464 << 6);
                v463.i64[0] = *(_QWORD *)(v467 + 48);
                v463.i32[2] = *(_DWORD *)(v467 + 56);
                v468 = vsubq_f32(v463, (float32x4_t)xmmword_2540CD0C0);
                v469 = (float32x2_t)vextq_s8((int8x16_t)v468, (int8x16_t)v468, 8uLL).u64[0];
                if (vmla_f32(v466, v465, v465).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v468.f32, *(float32x2_t *)v468.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v468.f32, 1), *(float32x2_t *)v468.f32, 1), v469, v469).f32[0])
                {
                  v16[1] = v459;
                  v16[2] = v464;
                  v468.i64[0] = *(_QWORD *)v461;
                  v468.i32[2] = *(_DWORD *)(v461 + 8);
                  v470 = vsubq_f32(v468, (float32x4_t)xmmword_2540CD0C0);
                  v471 = *v16;
                  v472 = (float32x2_t)vextq_s8((int8x16_t)v470, (int8x16_t)v470, 8uLL).u64[0];
                  v473 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v470.f32, *(float32x2_t *)v470.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v470.f32, 1), *(float32x2_t *)v470.f32, 1);
                  v474 = v271 + (*v16 << 6);
                  v470.i64[0] = *(_QWORD *)(v474 + 48);
                  v470.i32[2] = *(_DWORD *)(v474 + 56);
                  v475 = (int8x16_t)vsubq_f32(v470, (float32x4_t)xmmword_2540CD0C0);
                  v476 = (float32x2_t)vextq_s8(v475, v475, 8uLL).u64[0];
                  if (vmla_f32(v473, v472, v472).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v475.i8, *(float32x2_t *)v475.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v475.i8, 1), *(float32x2_t *)v475.i8, 1), v476, v476).f32[0])
                  {
                    *v16 = v459;
                    v16[1] = v471;
                  }
                }
              }
              return result;
            }
          }
        }
        *v290 = v270;
        *v291 = v275;
        v273 = (float32x4_t)xmmword_2540CD0C0;
        v268 = result;
        goto LABEL_172;
      case 5:
        v296 = v16 + 1;
        v297 = v16[1];
        v299 = v16 + 2;
        v298 = v16[2];
        v300 = **a3;
        v301 = v300 + (v297 << 6);
        a7.i64[0] = *(_QWORD *)(v301 + 48);
        a7.i32[2] = *(_DWORD *)(v301 + 56);
        v302 = (float32x4_t)xmmword_2540CD0C0;
        v303 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
        v304 = *v16;
        v305 = (float32x2_t)vextq_s8((int8x16_t)v303, (int8x16_t)v303, 8uLL).u64[0];
        v306 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v303.f32, *(float32x2_t *)v303.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v303.f32, 1), *(float32x2_t *)v303.f32, 1), v305, v305).f32[0];
        v307 = v300 + (*v16 << 6);
        v309 = *(_QWORD *)(v307 + 48);
        v308 = v307 + 48;
        v303.i64[0] = v309;
        v303.i32[2] = *(_DWORD *)(v308 + 8);
        v310 = vsubq_f32(v303, (float32x4_t)xmmword_2540CD0C0);
        v311 = (float32x2_t)vextq_s8((int8x16_t)v310, (int8x16_t)v310, 8uLL).u64[0];
        v312 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v310.f32, *(float32x2_t *)v310.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v310.f32, 1), *(float32x2_t *)v310.f32, 1), v311, v311).f32[0];
        v313 = v300 + (v298 << 6);
        v315 = *(_QWORD *)(v313 + 48);
        v314 = v313 + 48;
        v310.i64[0] = v315;
        v310.i32[2] = *(_DWORD *)(v314 + 8);
        v316 = vsubq_f32(v310, (float32x4_t)xmmword_2540CD0C0);
        v317 = (float32x2_t)vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u64[0];
        v318 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v316.f32, *(float32x2_t *)v316.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v316.f32, 1), *(float32x2_t *)v316.f32, 1), v317, v317).f32[0] < v306;
        if (v306 >= v312)
        {
          if (v318)
          {
            *v296 = v298;
            *v299 = v297;
            v316.i64[0] = *(_QWORD *)v314;
            v316.i32[2] = *(_DWORD *)(v314 + 8);
            v428 = vsubq_f32(v316, v302);
            v429 = (float32x2_t)vextq_s8((int8x16_t)v428, (int8x16_t)v428, 8uLL).u64[0];
            v430 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v428.f32, *(float32x2_t *)v428.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v428.f32, 1), *(float32x2_t *)v428.f32, 1), v429, v429).f32[0];
            v428.i64[0] = *(_QWORD *)v308;
            v428.i32[2] = *(_DWORD *)(v308 + 8);
            v316 = vsubq_f32(v428, v302);
            v431 = (float32x2_t)vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u64[0];
            v319 = v16;
            v320 = v16 + 1;
            v321 = v298;
            result = v304;
            v322 = v297;
            if (v430 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v316.f32, *(float32x2_t *)v316.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v316.f32, 1), *(float32x2_t *)v316.f32, 1), v431, v431).f32[0])
            {
              v321 = v304;
              v304 = v298;
              v298 = v297;
              goto LABEL_182;
            }
            goto LABEL_179;
          }
          v321 = *v16;
          v304 = v16[1];
        }
        else
        {
          if (v318)
          {
            v319 = v16;
            v320 = v16 + 2;
            v321 = v16[2];
            result = v16[1];
            v322 = *v16;
LABEL_179:
            *v319 = v298;
            *v320 = v304;
            v304 = result;
            v298 = v322;
            goto LABEL_182;
          }
          *v16 = v297;
          v16[1] = v304;
          v316.i64[0] = *(_QWORD *)v314;
          v316.i32[2] = *(_DWORD *)(v314 + 8);
          v484 = vsubq_f32(v316, v302);
          v485 = (float32x2_t)vextq_s8((int8x16_t)v484, (int8x16_t)v484, 8uLL).u64[0];
          v486 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v484.f32, *(float32x2_t *)v484.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v484.f32, 1), *(float32x2_t *)v484.f32, 1), v485, v485).f32[0];
          v484.i64[0] = *(_QWORD *)v308;
          v484.i32[2] = *(_DWORD *)(v308 + 8);
          v316 = vsubq_f32(v484, v302);
          v487 = (float32x2_t)vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u64[0];
          v319 = v16 + 1;
          v320 = v16 + 2;
          v321 = v297;
          result = v298;
          v322 = v304;
          if (v486 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v316.f32, *(float32x2_t *)v316.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v316.f32, 1), *(float32x2_t *)v316.f32, 1), v487, v487).f32[0])goto LABEL_179;
          v321 = v297;
        }
LABEL_182:
        v488 = v16[3];
        v489 = v300 + (v488 << 6);
        v491 = *(_QWORD *)(v489 + 48);
        v490 = v489 + 48;
        v316.i64[0] = v491;
        v316.i32[2] = *(_DWORD *)(v490 + 8);
        v492 = vsubq_f32(v316, v302);
        v493 = (float32x2_t)vextq_s8((int8x16_t)v492, (int8x16_t)v492, 8uLL).u64[0];
        v494 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v492.f32, *(float32x2_t *)v492.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v492.f32, 1), *(float32x2_t *)v492.f32, 1);
        v495 = v300 + (v298 << 6);
        v492.i64[0] = *(_QWORD *)(v495 + 48);
        v492.i32[2] = *(_DWORD *)(v495 + 56);
        v496 = vsubq_f32(v492, v302);
        v494.f32[0] = vmla_f32(v494, v493, v493).f32[0];
        v497 = (float32x2_t)vextq_s8((int8x16_t)v496, (int8x16_t)v496, 8uLL).u64[0];
        if (v494.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v496.f32, *(float32x2_t *)v496.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v496.f32, 1), *(float32x2_t *)v496.f32, 1), v497, v497).f32[0])
        {
          v298 = v16[3];
        }
        else
        {
          v16[2] = v488;
          v16[3] = v298;
          v496.i64[0] = *(_QWORD *)v490;
          v496.i32[2] = *(_DWORD *)(v490 + 8);
          v498 = vsubq_f32(v496, v302);
          v499 = (float32x2_t)vextq_s8((int8x16_t)v498, (int8x16_t)v498, 8uLL).u64[0];
          v500 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v498.f32, *(float32x2_t *)v498.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v498.f32, 1), *(float32x2_t *)v498.f32, 1);
          v501 = v300 + (v304 << 6);
          v498.i64[0] = *(_QWORD *)(v501 + 48);
          v498.i32[2] = *(_DWORD *)(v501 + 56);
          v496 = vsubq_f32(v498, v302);
          v500.f32[0] = vmla_f32(v500, v499, v499).f32[0];
          v502 = (float32x2_t)vextq_s8((int8x16_t)v496, (int8x16_t)v496, 8uLL).u64[0];
          if (v500.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v496.f32, *(float32x2_t *)v496.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v496.f32, 1), *(float32x2_t *)v496.f32, 1), v502, v502).f32[0])
          {
            *v296 = v488;
            *v299 = v304;
            v496.i64[0] = *(_QWORD *)v490;
            v496.i32[2] = *(_DWORD *)(v490 + 8);
            v503 = vsubq_f32(v496, v302);
            v504 = (float32x2_t)vextq_s8((int8x16_t)v503, (int8x16_t)v503, 8uLL).u64[0];
            v505 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v503.f32, *(float32x2_t *)v503.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v503.f32, 1), *(float32x2_t *)v503.f32, 1);
            v506 = v300 + (v321 << 6);
            v503.i64[0] = *(_QWORD *)(v506 + 48);
            v503.i32[2] = *(_DWORD *)(v506 + 56);
            v496 = vsubq_f32(v503, v302);
            v505.f32[0] = vmla_f32(v505, v504, v504).f32[0];
            v507 = (float32x2_t)vextq_s8((int8x16_t)v496, (int8x16_t)v496, 8uLL).u64[0];
            if (v505.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v496.f32, *(float32x2_t *)v496.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v496.f32, 1), *(float32x2_t *)v496.f32, 1), v507, v507).f32[0])
            {
              *v16 = v488;
              v16[1] = v321;
            }
          }
        }
        v508 = *(a2 - 1);
        v509 = v300 + (v508 << 6);
        v496.i64[0] = *(_QWORD *)(v509 + 48);
        v496.i32[2] = *(_DWORD *)(v509 + 56);
        v510 = vsubq_f32(v496, v302);
        v511 = (float32x2_t)vextq_s8((int8x16_t)v510, (int8x16_t)v510, 8uLL).u64[0];
        v512 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v510.f32, *(float32x2_t *)v510.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v510.f32, 1), *(float32x2_t *)v510.f32, 1);
        v513 = v300 + (v298 << 6);
        v510.i64[0] = *(_QWORD *)(v513 + 48);
        v510.i32[2] = *(_DWORD *)(v513 + 56);
        v514 = vsubq_f32(v510, v302);
        v512.f32[0] = vmla_f32(v512, v511, v511).f32[0];
        v515 = (float32x2_t)vextq_s8((int8x16_t)v514, (int8x16_t)v514, 8uLL).u64[0];
        if (v512.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v514.f32, *(float32x2_t *)v514.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v514.f32, 1), *(float32x2_t *)v514.f32, 1), v515, v515).f32[0])
        {
          v16[3] = v508;
          *(a2 - 1) = v298;
          v517 = v16[2];
          v516 = v16[3];
          v518 = v300 + (v516 << 6);
          v520 = *(_QWORD *)(v518 + 48);
          v519 = v518 + 48;
          v514.i64[0] = v520;
          v514.i32[2] = *(_DWORD *)(v519 + 8);
          v521 = vsubq_f32(v514, v302);
          v522 = (float32x2_t)vextq_s8((int8x16_t)v521, (int8x16_t)v521, 8uLL).u64[0];
          v523 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v521.f32, *(float32x2_t *)v521.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v521.f32, 1), *(float32x2_t *)v521.f32, 1);
          v524 = v300 + (v517 << 6);
          v521.i64[0] = *(_QWORD *)(v524 + 48);
          v521.i32[2] = *(_DWORD *)(v524 + 56);
          v525 = vsubq_f32(v521, v302);
          v523.f32[0] = vmla_f32(v523, v522, v522).f32[0];
          v526 = (float32x2_t)vextq_s8((int8x16_t)v525, (int8x16_t)v525, 8uLL).u64[0];
          if (v523.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v525.f32, *(float32x2_t *)v525.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v525.f32, 1), *(float32x2_t *)v525.f32, 1), v526, v526).f32[0])
          {
            v16[2] = v516;
            v16[3] = v517;
            v525.i64[0] = *(_QWORD *)v519;
            v525.i32[2] = *(_DWORD *)(v519 + 8);
            v527 = vsubq_f32(v525, v302);
            v528 = v16[1];
            v529 = (float32x2_t)vextq_s8((int8x16_t)v527, (int8x16_t)v527, 8uLL).u64[0];
            v530 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v527.f32, *(float32x2_t *)v527.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v527.f32, 1), *(float32x2_t *)v527.f32, 1);
            v531 = v300 + (v528 << 6);
            v527.i64[0] = *(_QWORD *)(v531 + 48);
            v527.i32[2] = *(_DWORD *)(v531 + 56);
            v532 = vsubq_f32(v527, v302);
            v530.f32[0] = vmla_f32(v530, v529, v529).f32[0];
            v533 = (float32x2_t)vextq_s8((int8x16_t)v532, (int8x16_t)v532, 8uLL).u64[0];
            if (v530.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v532.f32, *(float32x2_t *)v532.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v532.f32, 1), *(float32x2_t *)v532.f32, 1), v533, v533).f32[0])
            {
              v16[1] = v516;
              v16[2] = v528;
              v532.i64[0] = *(_QWORD *)v519;
              v532.i32[2] = *(_DWORD *)(v519 + 8);
              v534 = vsubq_f32(v532, v302);
              v416 = *v16;
              v535 = (float32x2_t)vextq_s8((int8x16_t)v534, (int8x16_t)v534, 8uLL).u64[0];
              v536 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v534.f32, *(float32x2_t *)v534.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v534.f32, 1), *(float32x2_t *)v534.f32, 1);
              v537 = v300 + (*v16 << 6);
              v534.i64[0] = *(_QWORD *)(v537 + 48);
              v534.i32[2] = *(_DWORD *)(v537 + 56);
              v538 = (int8x16_t)vsubq_f32(v534, v302);
              v539 = (float32x2_t)vextq_s8(v538, v538, 8uLL).u64[0];
              if (vmla_f32(v536, v535, v535).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v538.i8, *(float32x2_t *)v538.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v538.i8, 1), *(float32x2_t *)v538.i8, 1), v539, v539).f32[0])
              {
                *v16 = v516;
LABEL_192:
                v16[1] = v416;
              }
            }
          }
        }
        return result;
      default:
        if (v17 > 191)
        {
          if (!a4)
          {
            if (v16 != a2)
            {
              v347 = (unint64_t)(v18 - 2) >> 1;
              v348 = v347;
              do
              {
                if (v347 >= v348)
                {
                  v350 = (2 * v348) | 1;
                  v351 = &v16[v350];
                  v352 = **a3;
                  if (2 * v348 + 2 < v18)
                  {
                    result = v351[1];
                    v353 = v352 + (*v351 << 6);
                    a7.i64[0] = *(_QWORD *)(v353 + 48);
                    a7.i32[2] = *(_DWORD *)(v353 + 56);
                    v354 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                    v355 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
                    v356 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v354.f32, *(float32x2_t *)v354.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v354.f32, 1), *(float32x2_t *)v354.f32, 1), v355, v355).f32[0];
                    v357 = v352 + (result << 6);
                    v354.i64[0] = *(_QWORD *)(v357 + 48);
                    v354.i32[2] = *(_DWORD *)(v357 + 56);
                    a7 = vsubq_f32(v354, (float32x4_t)xmmword_2540CD0C0);
                    v358 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                    if (v356 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v358, v358).f32[0])
                    {
                      ++v351;
                      v350 = 2 * v348 + 2;
                    }
                  }
                  v359 = &v16[v348];
                  v360 = *v351;
                  v361 = *v359;
                  v362 = v352 + (*v351 << 6);
                  a7.i64[0] = *(_QWORD *)(v362 + 48);
                  a7.i32[2] = *(_DWORD *)(v362 + 56);
                  a7 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                  v363 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                  v364 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
                  v365 = v352 + (*v359 << 6);
                  v367 = *(_QWORD *)(v365 + 48);
                  v366 = v365 + 48;
                  a7.i64[0] = v367;
                  a7.i32[2] = *(_DWORD *)(v366 + 8);
                  a6 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                  v368 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                  if (vmla_f32(v364, v363, v363).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v368, v368).f32[0])
                  {
                    do
                    {
                      v373 = v351;
                      *v359 = v360;
                      if (v347 < v350)
                        break;
                      result = (2 * v350) | 1;
                      v351 = &v16[result];
                      v374 = 2 * v350 + 2;
                      if (v374 < v18)
                      {
                        v375 = v352 + (*v351 << 6);
                        a7.i64[0] = *(_QWORD *)(v375 + 48);
                        a7.i32[2] = *(_DWORD *)(v375 + 56);
                        v376 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                        v377 = (float32x2_t)vextq_s8((int8x16_t)v376, (int8x16_t)v376, 8uLL).u64[0];
                        v378 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v376.f32, *(float32x2_t *)v376.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v376.f32, 1), *(float32x2_t *)v376.f32, 1), v377, v377).f32[0];
                        v379 = v352 + (v351[1] << 6);
                        v376.i64[0] = *(_QWORD *)(v379 + 48);
                        v376.i32[2] = *(_DWORD *)(v379 + 56);
                        a7 = vsubq_f32(v376, (float32x4_t)xmmword_2540CD0C0);
                        v380 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                        if (v378 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v380, v380).f32[0])
                        {
                          ++v351;
                          result = v374;
                        }
                      }
                      v360 = *v351;
                      v369 = v352 + (*v351 << 6);
                      a7.i64[0] = *(_QWORD *)(v369 + 48);
                      a7.i32[2] = *(_DWORD *)(v369 + 56);
                      a7 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                      v370 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                      v371 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v370, v370).f32[0];
                      a7.i64[0] = *(_QWORD *)v366;
                      a7.i32[2] = *(_DWORD *)(v366 + 8);
                      a6 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                      v372 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                      v359 = v373;
                      v350 = result;
                    }
                    while (v371 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v372, v372).f32[0]);
                    *v373 = v361;
                  }
                }
                v349 = v348-- <= 0;
              }
              while (!v349);
              v381 = (unint64_t)v17 >> 3;
              do
              {
                v382 = 0;
                v383 = *v16;
                v384 = *a3;
                v385 = v16;
                do
                {
                  v386 = &v385[v382 + 1];
                  v387 = (2 * v382) | 1;
                  v388 = 2 * v382 + 2;
                  if (v388 < v381)
                  {
                    result = v386[1];
                    v389 = *v384 + (*v386 << 6);
                    a6.i64[0] = *(_QWORD *)(v389 + 48);
                    a6.i32[2] = *(_DWORD *)(v389 + 56);
                    v390 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
                    v391 = (float32x2_t)vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u64[0];
                    v392 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v390.f32, *(float32x2_t *)v390.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v390.f32, 1), *(float32x2_t *)v390.f32, 1), v391, v391).f32[0];
                    v393 = *v384 + (result << 6);
                    v390.i64[0] = *(_QWORD *)(v393 + 48);
                    v390.i32[2] = *(_DWORD *)(v393 + 56);
                    a6 = vsubq_f32(v390, (float32x4_t)xmmword_2540CD0C0);
                    v394 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                    if (v392 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v394, v394).f32[0])
                    {
                      ++v386;
                      v387 = v388;
                    }
                  }
                  *v385 = *v386;
                  v385 = v386;
                  v382 = v387;
                }
                while (v387 <= (uint64_t)((unint64_t)(v381 - 2) >> 1));
                if (v386 == --a2)
                {
                  *v386 = v383;
                }
                else
                {
                  *v386 = *a2;
                  *a2 = v383;
                  v395 = (char *)v386 - (char *)v16 + 8;
                  if (v395 >= 9)
                  {
                    v396 = (((unint64_t)v395 >> 3) - 2) >> 1;
                    v397 = &v16[v396];
                    v398 = *v397;
                    v399 = **a3;
                    v400 = v399 + (*v397 << 6);
                    a6.i64[0] = *(_QWORD *)(v400 + 48);
                    a6.i32[2] = *(_DWORD *)(v400 + 56);
                    v401 = *v386;
                    v402 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
                    v403 = (float32x2_t)vextq_s8((int8x16_t)v402, (int8x16_t)v402, 8uLL).u64[0];
                    v404 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v402.f32, *(float32x2_t *)v402.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v402.f32, 1), *(float32x2_t *)v402.f32, 1);
                    v405 = v399 + (*v386 << 6);
                    v407 = *(_QWORD *)(v405 + 48);
                    v406 = v405 + 48;
                    v402.i64[0] = v407;
                    v402.i32[2] = *(_DWORD *)(v406 + 8);
                    a6 = vsubq_f32(v402, (float32x4_t)xmmword_2540CD0C0);
                    v408 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                    if (vmla_f32(v404, v403, v403).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v408, v408).f32[0])
                    {
                      do
                      {
                        v409 = v397;
                        *v386 = v398;
                        if (!v396)
                          break;
                        v396 = (v396 - 1) >> 1;
                        v397 = &v16[v396];
                        v398 = *v397;
                        v410 = v399 + (*v397 << 6);
                        a6.i64[0] = *(_QWORD *)(v410 + 48);
                        a6.i32[2] = *(_DWORD *)(v410 + 56);
                        v411 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
                        v412 = (float32x2_t)vextq_s8((int8x16_t)v411, (int8x16_t)v411, 8uLL).u64[0];
                        v413 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v411.f32, *(float32x2_t *)v411.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v411.f32, 1), *(float32x2_t *)v411.f32, 1), v412, v412).f32[0];
                        v411.i64[0] = *(_QWORD *)v406;
                        v411.i32[2] = *(_DWORD *)(v406 + 8);
                        a6 = vsubq_f32(v411, (float32x4_t)xmmword_2540CD0C0);
                        v414 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
                        v386 = v409;
                      }
                      while (v413 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v414, v414).f32[0]);
                      *v409 = v401;
                    }
                  }
                }
                v349 = v381-- <= 2;
              }
              while (!v349);
            }
            return result;
          }
          v19 = (unint64_t)v18 >> 1;
          v20 = **a3;
          v21 = *(a2 - 1);
          v22 = v20 + (v21 << 6);
          a6.i64[0] = *(_QWORD *)(v22 + 48);
          a6.i32[2] = *(_DWORD *)(v22 + 56);
          v23 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
          v24 = &v16[v19];
          v25 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
          LODWORD(v26) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), *(float32x2_t *)v23.f32, 1), v25, v25).u32[0];
          if ((unint64_t)v17 < 0x401)
          {
            v38 = *v16;
            v39 = *v24;
            v40 = v20 + (*v16 << 6);
            v23.i64[0] = *(_QWORD *)(v40 + 48);
            v23.i32[2] = *(_DWORD *)(v40 + 56);
            v41 = vsubq_f32(v23, (float32x4_t)xmmword_2540CD0C0);
            v42 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
            v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v41.f32, 1), v42, v42).f32[0];
            v44 = v20 + (*v24 << 6);
            v46 = *(_QWORD *)(v44 + 48);
            v45 = v44 + 48;
            v41.i64[0] = v46;
            v41.i32[2] = *(_DWORD *)(v45 + 8);
            a7 = vsubq_f32(v41, (float32x4_t)xmmword_2540CD0C0);
            v47 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
            if (v43 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v47, v47).f32[0])
            {
              if (v26 < v43)
              {
                *v16 = v21;
                *(a2 - 1) = v38;
                v55 = v20 + (*v16 << 6);
                a6.i64[0] = *(_QWORD *)(v55 + 48);
                a6.i32[2] = *(_DWORD *)(v55 + 56);
                a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
                v56 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
                v57 = *v24;
                v58 = (float32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
                v59 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 1), *(float32x2_t *)v56.f32, 1);
                v60 = v20 + (*v24 << 6);
                v56.i64[0] = *(_QWORD *)(v60 + 48);
                v56.i32[2] = *(_DWORD *)(v60 + 56);
                v61 = (int8x16_t)vsubq_f32(v56, (float32x4_t)xmmword_2540CD0C0);
                v62 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
                if (vmla_f32(v59, v58, v58).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)v61.i8, 1), v62, v62).f32[0])
                {
                  *v24 = *v16;
                  *v16 = v57;
                  --a4;
                  v63 = v57;
                  a6 = (float32x4_t)xmmword_2540CD0C0;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
            }
            else
            {
              if (v26 < v43)
              {
                *v24 = v21;
                goto LABEL_31;
              }
              *v24 = v38;
              *v16 = v39;
              v97 = *(a2 - 1);
              v98 = v20 + (v97 << 6);
              a6.i64[0] = *(_QWORD *)(v98 + 48);
              a6.i32[2] = *(_DWORD *)(v98 + 56);
              a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
              v99 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
              v100 = (float32x2_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
              v101 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.f32, 1), *(float32x2_t *)v99.f32, 1);
              v99.i64[0] = *(_QWORD *)v45;
              v99.i32[2] = *(_DWORD *)(v45 + 8);
              v102 = (int8x16_t)vsubq_f32(v99, (float32x4_t)xmmword_2540CD0C0);
              v103 = (float32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
              if (vmla_f32(v101, v100, v100).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1), *(float32x2_t *)v102.i8, 1), v103, v103).f32[0])
              {
                *v16 = v97;
LABEL_31:
                *(a2 - 1) = v39;
              }
            }
            --a4;
            v63 = *v16;
            a6 = (float32x4_t)xmmword_2540CD0C0;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v27 = *v24;
          v28 = *v16;
          v29 = v20 + (*v24 << 6);
          v23.i64[0] = *(_QWORD *)(v29 + 48);
          v23.i32[2] = *(_DWORD *)(v29 + 56);
          v30 = vsubq_f32(v23, (float32x4_t)xmmword_2540CD0C0);
          v31 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
          v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1), *(float32x2_t *)v30.f32, 1), v31, v31).f32[0];
          v33 = v20 + (*v16 << 6);
          v35 = *(_QWORD *)(v33 + 48);
          v34 = v33 + 48;
          v30.i64[0] = v35;
          v30.i32[2] = *(_DWORD *)(v34 + 8);
          v36 = (int8x16_t)vsubq_f32(v30, (float32x4_t)xmmword_2540CD0C0);
          v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
          if (v32 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1), v37, v37).f32[0])
          {
            if (v26 < v32)
            {
              *v24 = v21;
              *(a2 - 1) = v27;
              v48 = v20 + (*v24 << 6);
              a6.i64[0] = *(_QWORD *)(v48 + 48);
              a6.i32[2] = *(_DWORD *)(v48 + 56);
              v49 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
              v50 = *v16;
              v51 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
              v52 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 1), *(float32x2_t *)v49.f32, 1);
              v53 = v20 + (*v16 << 6);
              v49.i64[0] = *(_QWORD *)(v53 + 48);
              v49.i32[2] = *(_DWORD *)(v53 + 56);
              a6 = vsubq_f32(v49, (float32x4_t)xmmword_2540CD0C0);
              v54 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
              if (vmla_f32(v52, v51, v51).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v54, v54).f32[0])
              {
                *v16 = *v24;
                *v24 = v50;
              }
            }
          }
          else
          {
            if (v26 >= v32)
            {
              *v16 = v27;
              *v24 = v28;
              v64 = *(a2 - 1);
              v65 = v20 + (v64 << 6);
              a6.i64[0] = *(_QWORD *)(v65 + 48);
              a6.i32[2] = *(_DWORD *)(v65 + 56);
              v66 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
              v67 = (float32x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
              v68 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.f32, 1), *(float32x2_t *)v66.f32, 1);
              v66.i64[0] = *(_QWORD *)v34;
              v66.i32[2] = *(_DWORD *)(v34 + 8);
              a6 = vsubq_f32(v66, (float32x4_t)xmmword_2540CD0C0);
              v69 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
              if (vmla_f32(v68, v67, v67).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1), *(float32x2_t *)a6.f32, 1), v69, v69).f32[0])goto LABEL_23;
              *v24 = v64;
            }
            else
            {
              *v16 = v21;
            }
            *(a2 - 1) = v28;
          }
LABEL_23:
          v70 = &v16[v19];
          v73 = *(v70 - 1);
          v71 = v70 - 1;
          v72 = v73;
          v74 = v16[1];
          v75 = v20 + (v73 << 6);
          a6.i64[0] = *(_QWORD *)(v75 + 48);
          a6.i32[2] = *(_DWORD *)(v75 + 56);
          v76 = vsubq_f32(a6, (float32x4_t)xmmword_2540CD0C0);
          v77 = (float32x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
          v78 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), *(float32x2_t *)v76.f32, 1);
          v79 = v20 + (v74 << 6);
          v81 = *(_QWORD *)(v79 + 48);
          v80 = v79 + 48;
          v76.i64[0] = v81;
          v76.i32[2] = *(_DWORD *)(v80 + 8);
          v78.f32[0] = vmla_f32(v78, v77, v77).f32[0];
          v82 = vsubq_f32(v76, (float32x4_t)xmmword_2540CD0C0);
          v83 = (float32x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
          v84 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1), *(float32x2_t *)v82.f32, 1), v83, v83).f32[0];
          v85 = *(a2 - 2);
          v86 = v20 + (v85 << 6);
          v82.i64[0] = *(_QWORD *)(v86 + 48);
          v82.i32[2] = *(_DWORD *)(v86 + 56);
          v87 = vsubq_f32(v82, (float32x4_t)xmmword_2540CD0C0);
          v88 = (float32x2_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          v89 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 1), *(float32x2_t *)v87.f32, 1), v88, v88).f32[0] < v78.f32[0];
          if (v78.f32[0] >= v84)
          {
            if (v89)
            {
              *v71 = v85;
              *(a2 - 2) = v72;
              v90 = v20 + (*v71 << 6);
              v87.i64[0] = *(_QWORD *)(v90 + 48);
              v87.i32[2] = *(_DWORD *)(v90 + 56);
              v91 = vsubq_f32(v87, (float32x4_t)xmmword_2540CD0C0);
              v92 = v16[1];
              v93 = (float32x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
              v94 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.f32, 1), *(float32x2_t *)v91.f32, 1);
              v95 = v20 + (v92 << 6);
              v91.i64[0] = *(_QWORD *)(v95 + 48);
              v91.i32[2] = *(_DWORD *)(v95 + 56);
              v87 = vsubq_f32(v91, (float32x4_t)xmmword_2540CD0C0);
              v96 = (float32x2_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
              if (vmla_f32(v94, v93, v93).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 1), *(float32x2_t *)v87.f32, 1), v96, v96).f32[0])
              {
                v16[1] = *v71;
                *v71 = v92;
              }
            }
          }
          else
          {
            if (v89)
            {
              v16[1] = v85;
            }
            else
            {
              v16[1] = v72;
              *v71 = v74;
              v104 = *(a2 - 2);
              v105 = v20 + (v104 << 6);
              v87.i64[0] = *(_QWORD *)(v105 + 48);
              v87.i32[2] = *(_DWORD *)(v105 + 56);
              v106 = vsubq_f32(v87, (float32x4_t)xmmword_2540CD0C0);
              v107 = (float32x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
              v108 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1), *(float32x2_t *)v106.f32, 1);
              v106.i64[0] = *(_QWORD *)v80;
              v106.i32[2] = *(_DWORD *)(v80 + 8);
              v87 = vsubq_f32(v106, (float32x4_t)xmmword_2540CD0C0);
              v109 = (float32x2_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
              if (vmla_f32(v108, v107, v107).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 1), *(float32x2_t *)v87.f32, 1), v109, v109).f32[0])goto LABEL_37;
              *v71 = v104;
            }
            *(a2 - 2) = v74;
          }
LABEL_37:
          v110 = &v16[v19];
          v113 = v110[1];
          v111 = v110 + 1;
          v112 = v113;
          v114 = v16[2];
          v115 = v20 + (v113 << 6);
          v87.i64[0] = *(_QWORD *)(v115 + 48);
          v87.i32[2] = *(_DWORD *)(v115 + 56);
          v116 = vsubq_f32(v87, (float32x4_t)xmmword_2540CD0C0);
          v117 = (float32x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
          v118 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 1), *(float32x2_t *)v116.f32, 1);
          v119 = v20 + (v114 << 6);
          v121 = *(_QWORD *)(v119 + 48);
          v120 = v119 + 48;
          v116.i64[0] = v121;
          v116.i32[2] = *(_DWORD *)(v120 + 8);
          v118.f32[0] = vmla_f32(v118, v117, v117).f32[0];
          v122 = vsubq_f32(v116, (float32x4_t)xmmword_2540CD0C0);
          v123 = (float32x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u64[0];
          v124 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.f32, 1), *(float32x2_t *)v122.f32, 1), v123, v123).f32[0];
          v125 = *(a2 - 3);
          v126 = v20 + (v125 << 6);
          v122.i64[0] = *(_QWORD *)(v126 + 48);
          v122.i32[2] = *(_DWORD *)(v126 + 56);
          v127 = vsubq_f32(v122, (float32x4_t)xmmword_2540CD0C0);
          v128 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
          v129 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 1), *(float32x2_t *)v127.f32, 1), v128, v128).f32[0] < v118.f32[0];
          if (v118.f32[0] >= v124)
          {
            if (v129)
            {
              *v111 = v125;
              *(a2 - 3) = v112;
              v130 = v20 + (*v111 << 6);
              v127.i64[0] = *(_QWORD *)(v130 + 48);
              v127.i32[2] = *(_DWORD *)(v130 + 56);
              v131 = vsubq_f32(v127, (float32x4_t)xmmword_2540CD0C0);
              v132 = v16[2];
              v133 = (float32x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
              v134 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 1), *(float32x2_t *)v131.f32, 1);
              v135 = v20 + (v132 << 6);
              v131.i64[0] = *(_QWORD *)(v135 + 48);
              v131.i32[2] = *(_DWORD *)(v135 + 56);
              v127 = vsubq_f32(v131, (float32x4_t)xmmword_2540CD0C0);
              v136 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
              if (vmla_f32(v134, v133, v133).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 1), *(float32x2_t *)v127.f32, 1), v136, v136).f32[0])
              {
                v16[2] = *v111;
                *v111 = v132;
              }
            }
          }
          else
          {
            if (v129)
            {
              v16[2] = v125;
            }
            else
            {
              v16[2] = v112;
              *v111 = v114;
              v137 = *(a2 - 3);
              v138 = v20 + (v137 << 6);
              v127.i64[0] = *(_QWORD *)(v138 + 48);
              v127.i32[2] = *(_DWORD *)(v138 + 56);
              v139 = vsubq_f32(v127, (float32x4_t)xmmword_2540CD0C0);
              v140 = (float32x2_t)vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL).u64[0];
              v141 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v139.f32, 1), *(float32x2_t *)v139.f32, 1);
              v139.i64[0] = *(_QWORD *)v120;
              v139.i32[2] = *(_DWORD *)(v120 + 8);
              v127 = vsubq_f32(v139, (float32x4_t)xmmword_2540CD0C0);
              v142 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
              if (vmla_f32(v141, v140, v140).f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 1), *(float32x2_t *)v127.f32, 1), v142, v142).f32[0])goto LABEL_46;
              *v111 = v137;
            }
            *(a2 - 3) = v114;
          }
LABEL_46:
          v143 = *v24;
          v144 = *v71;
          v145 = v20 + (*v24 << 6);
          v127.i64[0] = *(_QWORD *)(v145 + 48);
          v127.i32[2] = *(_DWORD *)(v145 + 56);
          a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
          v146 = vsubq_f32(v127, (float32x4_t)xmmword_2540CD0C0);
          v147 = (float32x2_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
          v148 = v20 + (*v71 << 6);
          v150 = *(_QWORD *)(v148 + 48);
          v149 = v148 + 48;
          v151 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v146.f32, 1), *(float32x2_t *)v146.f32, 1), v147, v147).f32[0];
          v146.i64[0] = v150;
          v146.i32[2] = *(_DWORD *)(v149 + 8);
          v152 = vsubq_f32(v146, (float32x4_t)xmmword_2540CD0C0);
          v153 = (float32x2_t)vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u64[0];
          v154 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 1), *(float32x2_t *)v152.f32, 1), v153, v153).f32[0];
          v155 = *v111;
          v156 = v20 + (*v111 << 6);
          v158 = *(_QWORD *)(v156 + 48);
          v157 = v156 + 48;
          v152.i64[0] = v158;
          v152.i32[2] = *(_DWORD *)(v157 + 8);
          v159 = vsubq_f32(v152, (float32x4_t)xmmword_2540CD0C0);
          v160 = (float32x2_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
          v161 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.f32, 1), *(float32x2_t *)v159.f32, 1), v160, v160).f32[0] < v151;
          if (v151 < v154)
          {
            if (!v161)
            {
              *v71 = v143;
              *v24 = v144;
              v159.i64[0] = *(_QWORD *)v157;
              v159.i32[2] = *(_DWORD *)(v157 + 8);
              a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
              v162 = vsubq_f32(v159, (float32x4_t)xmmword_2540CD0C0);
              v163 = (float32x2_t)vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
              v164 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v162.f32, 1), *(float32x2_t *)v162.f32, 1), v163, v163).f32[0];
              v162.i64[0] = *(_QWORD *)v149;
              v162.i32[2] = *(_DWORD *)(v149 + 8);
              v165 = (int8x16_t)vsubq_f32(v162, (float32x4_t)xmmword_2540CD0C0);
              v166 = (float32x2_t)vextq_s8(v165, v165, 8uLL).u64[0];
              v71 = v24;
              v143 = v155;
              if (v164 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v165.i8, *(float32x2_t *)v165.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v165.i8, 1), *(float32x2_t *)v165.i8, 1), v166, v166).f32[0])
              {
                v143 = v144;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v71 = v155;
            *v111 = v144;
            goto LABEL_53;
          }
          if (!v161)
            goto LABEL_53;
          *v24 = v155;
          *v111 = v143;
          v159.i64[0] = *(_QWORD *)v157;
          v159.i32[2] = *(_DWORD *)(v157 + 8);
          a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
          v167 = vsubq_f32(v159, (float32x4_t)xmmword_2540CD0C0);
          v168 = (float32x2_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
          v169 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v167.f32, 1), *(float32x2_t *)v167.f32, 1), v168, v168).f32[0];
          v167.i64[0] = *(_QWORD *)v149;
          v167.i32[2] = *(_DWORD *)(v149 + 8);
          v170 = (int8x16_t)vsubq_f32(v167, (float32x4_t)xmmword_2540CD0C0);
          v171 = (float32x2_t)vextq_s8(v170, v170, 8uLL).u64[0];
          v111 = v24;
          v143 = v144;
          if (v169 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v170.i8, *(float32x2_t *)v170.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v170.i8, 1), *(float32x2_t *)v170.i8, 1), v171, v171).f32[0])goto LABEL_52;
          v143 = v155;
LABEL_53:
          v172 = *v16;
          *v16 = v143;
          *v24 = v172;
          --a4;
          v63 = *v16;
          a6 = (float32x4_t)xmmword_2540CD0C0;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v173 = v20 + (*(v16 - 1) << 6);
          a7.i64[0] = *(_QWORD *)(v173 + 48);
          a7.i32[2] = *(_DWORD *)(v173 + 56);
          a7 = vsubq_f32(a7, a6);
          v174 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
          v175 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1);
          v176 = v20 + (v63 << 6);
          v178 = *(_QWORD *)(v176 + 48);
          v177 = v176 + 48;
          a7.i64[0] = v178;
          a7.i32[2] = *(_DWORD *)(v177 + 8);
          v179 = vsubq_f32(a7, a6);
          v175.f32[0] = vmla_f32(v175, v174, v174).f32[0];
          v180 = (float32x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
          a7.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v179.f32, 1), *(float32x2_t *)v179.f32, 1), v180, v180).f32[0];
          if (v175.f32[0] >= a7.f32[0])
          {
            v214 = v20 + (*(a2 - 1) << 6);
            v179.i64[0] = *(_QWORD *)(v214 + 48);
            v179.i32[2] = *(_DWORD *)(v214 + 56);
            v215 = vsubq_f32(v179, a6);
            v216 = (float32x2_t)vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
            if (a7.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.f32, 1), *(float32x2_t *)v215.f32, 1), v216, v216).f32[0])
            {
              v220 = v16 + 1;
              do
              {
                v16 = v220;
                if (v220 >= a2)
                  break;
                ++v220;
                v221 = v20 + (*v16 << 6);
                v215.i64[0] = *(_QWORD *)(v221 + 48);
                v215.i32[2] = *(_DWORD *)(v221 + 56);
                v215 = vsubq_f32(v215, a6);
                v222 = (float32x2_t)vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
              }
              while (a7.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.f32, 1), *(float32x2_t *)v215.f32, 1), v222, v222).f32[0]);
            }
            else
            {
              do
              {
                v217 = v16[1];
                ++v16;
                v218 = v20 + (v217 << 6);
                v215.i64[0] = *(_QWORD *)(v218 + 48);
                v215.i32[2] = *(_DWORD *)(v218 + 56);
                v215 = vsubq_f32(v215, a6);
                v219 = (float32x2_t)vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
              }
              while (a7.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.f32, 1), *(float32x2_t *)v215.f32, 1), v219, v219).f32[0]);
            }
            v223 = a2;
            if (v16 < a2)
            {
              v223 = a2;
              do
              {
                v224 = *--v223;
                v225 = v20 + (v224 << 6);
                v215.i64[0] = *(_QWORD *)(v225 + 48);
                v215.i32[2] = *(_DWORD *)(v225 + 56);
                v215 = vsubq_f32(v215, a6);
                v226 = (float32x2_t)vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u64[0];
              }
              while (a7.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.f32, 1), *(float32x2_t *)v215.f32, 1), v226, v226).f32[0]);
            }
            if (v16 < v223)
            {
              v227 = *v16;
              v228 = *v223;
              do
              {
                *v16 = v228;
                *v223 = v227;
                a7.i64[0] = *(_QWORD *)v177;
                a7.i32[2] = *(_DWORD *)(v177 + 8);
                a6.i32[3] = HIDWORD(xmmword_2540CD0C0);
                v229 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
                v230 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
                LODWORD(v231) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 1), *(float32x2_t *)v229.f32, 1), v230, v230).u32[0];
                do
                {
                  v232 = v16[1];
                  ++v16;
                  v227 = v232;
                  v233 = v20 + (v232 << 6);
                  v229.i64[0] = *(_QWORD *)(v233 + 48);
                  v229.i32[2] = *(_DWORD *)(v233 + 56);
                  v229 = vsubq_f32(v229, (float32x4_t)xmmword_2540CD0C0);
                  v234 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
                }
                while (v231 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 1), *(float32x2_t *)v229.f32, 1), v234, v234).f32[0]);
                do
                {
                  v235 = *--v223;
                  v228 = v235;
                  v236 = v20 + (v235 << 6);
                  v229.i64[0] = *(_QWORD *)(v236 + 48);
                  v229.i32[2] = *(_DWORD *)(v236 + 56);
                  v229 = vsubq_f32(v229, (float32x4_t)xmmword_2540CD0C0);
                  v237 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
                }
                while (v231 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 1), *(float32x2_t *)v229.f32, 1), v237, v237).f32[0]);
              }
              while (v16 < v223);
            }
            v238 = v16 - 1;
            if (v16 - 1 != v15)
              *v15 = *v238;
            a5 = 0;
            *v238 = v63;
            continue;
          }
LABEL_55:
          v181 = 0;
          v182 = **a3;
          v183 = v182 + (v63 << 6);
          v185 = *(_QWORD *)(v183 + 48);
          v184 = v183 + 48;
          a7.i64[0] = v185;
          a7.i32[2] = *(_DWORD *)(v184 + 8);
          v186 = vsubq_f32(a7, a6);
          v187 = (float32x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
          *(float32x2_t *)a7.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v186.f32, 1), *(float32x2_t *)v186.f32, 1), v187, v187);
          do
          {
            v188 = v16[v181 + 1];
            v189 = v182 + (v188 << 6);
            v186.i64[0] = *(_QWORD *)(v189 + 48);
            v186.i32[2] = *(_DWORD *)(v189 + 56);
            v186 = vsubq_f32(v186, a6);
            v190 = (float32x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
            ++v181;
          }
          while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v186.f32, 1), *(float32x2_t *)v186.f32, 1), v190, v190).f32[0] < a7.f32[0]);
          v191 = &v16[v181];
          v192 = a2;
          if (v181 == 1)
          {
            v192 = a2;
            do
            {
              if (v191 >= v192)
                break;
              v196 = *--v192;
              v197 = v182 + (v196 << 6);
              v186.i64[0] = *(_QWORD *)(v197 + 48);
              v186.i32[2] = *(_DWORD *)(v197 + 56);
              v186 = vsubq_f32(v186, a6);
              v198 = (float32x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
            }
            while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v186.f32, 1), *(float32x2_t *)v186.f32, 1), v198, v198).f32[0] >= a7.f32[0]);
          }
          else
          {
            do
            {
              v193 = *--v192;
              v194 = v182 + (v193 << 6);
              v186.i64[0] = *(_QWORD *)(v194 + 48);
              v186.i32[2] = *(_DWORD *)(v194 + 56);
              v186 = vsubq_f32(v186, a6);
              v195 = (float32x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
            }
            while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v186.f32, 1), *(float32x2_t *)v186.f32, 1), v195, v195).f32[0] >= a7.f32[0]);
          }
          if (v191 < v192)
          {
            v199 = *v192;
            v200 = v191;
            v201 = v192;
            do
            {
              *v200 = v199;
              *v201 = v188;
              a6 = (float32x4_t)xmmword_2540CD0C0;
              a7.i64[0] = *(_QWORD *)v184;
              a7.i32[2] = *(_DWORD *)(v184 + 8);
              v202 = vsubq_f32(a7, (float32x4_t)xmmword_2540CD0C0);
              v203 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
              *(float32x2_t *)a7.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), *(float32x2_t *)v202.f32, 1), v203, v203);
              do
              {
                v204 = v200[1];
                ++v200;
                v188 = v204;
                v205 = v182 + (v204 << 6);
                v202.i64[0] = *(_QWORD *)(v205 + 48);
                v202.i32[2] = *(_DWORD *)(v205 + 56);
                v202 = vsubq_f32(v202, (float32x4_t)xmmword_2540CD0C0);
                v206 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), *(float32x2_t *)v202.f32, 1), v206, v206).f32[0] < a7.f32[0]);
              do
              {
                v207 = *--v201;
                v199 = v207;
                v208 = v182 + (v207 << 6);
                v202.i64[0] = *(_QWORD *)(v208 + 48);
                v202.i32[2] = *(_DWORD *)(v208 + 56);
                v202 = vsubq_f32(v202, (float32x4_t)xmmword_2540CD0C0);
                v209 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
              }
              while (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), *(float32x2_t *)v202.f32, 1), v209, v209).f32[0] >= a7.f32[0]);
            }
            while (v200 < v201);
            v210 = v200 - 1;
            if (v200 - 1 == v16)
              goto LABEL_73;
LABEL_72:
            *v16 = *v210;
            goto LABEL_73;
          }
          v210 = v191 - 1;
          if (v191 - 1 != v16)
            goto LABEL_72;
LABEL_73:
          *v210 = v63;
          if (v191 < v192)
            goto LABEL_76;
          v211 = sub_223C67938(v16, v210, *a3, a6, a7);
          v16 = v210 + 1;
          result = sub_223C67938(v210 + 1, a2, *a3, v212, v213);
          if (!(_DWORD)result)
          {
            if (v211)
              continue;
LABEL_76:
            result = sub_223C65CB0(v15, v210, a3, a4, a5 & 1);
            a5 = 0;
            v16 = v210 + 1;
            continue;
          }
          a2 = v210;
          if (v211)
            return result;
          goto LABEL_2;
        }
        v323 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v16 != a2)
          {
            v324 = v16 + 1;
            if (v16 + 1 != a2)
            {
              v325 = *v323;
              v326 = (float32x4_t)xmmword_2540CD0C0;
              v327 = 8;
              v328 = v16;
              do
              {
                v331 = *v328;
                v330 = v328[1];
                v332 = v325 + (v330 << 6);
                v334 = *(_QWORD *)(v332 + 48);
                v333 = v332 + 48;
                a7.i64[0] = v334;
                a7.i32[2] = *(_DWORD *)(v333 + 8);
                v335 = vsubq_f32(a7, v326);
                v328 = v324;
                v336 = (float32x2_t)vextq_s8((int8x16_t)v335, (int8x16_t)v335, 8uLL).u64[0];
                v337 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v335.f32, *(float32x2_t *)v335.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v335.f32, 1), *(float32x2_t *)v335.f32, 1);
                v338 = v325 + (v331 << 6);
                v335.i64[0] = *(_QWORD *)(v338 + 48);
                v335.i32[2] = *(_DWORD *)(v338 + 56);
                a7 = vsubq_f32(v335, v326);
                v337.f32[0] = vmla_f32(v337, v336, v336).f32[0];
                v339 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
                if (v337.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v339, v339).f32[0])
                {
                  v340 = v327;
                  do
                  {
                    *(uint64_t *)((char *)v16 + v340) = v331;
                    v341 = v340 - 8;
                    if (v340 == 8)
                    {
                      v329 = v16;
                      goto LABEL_116;
                    }
                    v331 = *(uint64_t *)((char *)v16 + v340 - 16);
                    v326.i64[0] = *(_QWORD *)v333;
                    v326.i32[2] = *(_DWORD *)(v333 + 8);
                    a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
                    v342 = vsubq_f32(v326, (float32x4_t)xmmword_2540CD0C0);
                    v343 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u64[0];
                    v344 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v342.f32, *(float32x2_t *)v342.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v342.f32, 1), *(float32x2_t *)v342.f32, 1), v343, v343).f32[0];
                    v345 = v325 + (v331 << 6);
                    v342.i64[0] = *(_QWORD *)(v345 + 48);
                    v342.i32[2] = *(_DWORD *)(v345 + 56);
                    v326 = vsubq_f32(v342, (float32x4_t)xmmword_2540CD0C0);
                    v346 = (float32x2_t)vextq_s8((int8x16_t)v326, (int8x16_t)v326, 8uLL).u64[0];
                    v340 = v341;
                  }
                  while (v344 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v326.f32, *(float32x2_t *)v326.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v326.f32, 1), *(float32x2_t *)v326.f32, 1), v346, v346).f32[0]);
                  v329 = (uint64_t *)((char *)v16 + v341);
LABEL_116:
                  *v329 = v330;
                  v326 = (float32x4_t)xmmword_2540CD0C0;
                }
                v324 = v328 + 1;
                v327 += 8;
              }
              while (v328 + 1 != a2);
            }
          }
        }
        else if (v16 != a2)
        {
          v432 = v16 + 1;
          if (v16 + 1 != a2)
          {
            v433 = *v323;
            v434 = (float32x4_t)xmmword_2540CD0C0;
            do
            {
              v436 = *v15;
              v435 = v15[1];
              v437 = v433 + (v435 << 6);
              v439 = *(_QWORD *)(v437 + 48);
              v438 = v437 + 48;
              a7.i64[0] = v439;
              a7.i32[2] = *(_DWORD *)(v438 + 8);
              v440 = vsubq_f32(a7, v434);
              v15 = v432;
              v441 = (float32x2_t)vextq_s8((int8x16_t)v440, (int8x16_t)v440, 8uLL).u64[0];
              v442 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v440.f32, *(float32x2_t *)v440.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v440.f32, 1), *(float32x2_t *)v440.f32, 1);
              v443 = v433 + (v436 << 6);
              v440.i64[0] = *(_QWORD *)(v443 + 48);
              v440.i32[2] = *(_DWORD *)(v443 + 56);
              a7 = vsubq_f32(v440, v434);
              v442.f32[0] = vmla_f32(v442, v441, v441).f32[0];
              v444 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
              if (v442.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 1), *(float32x2_t *)a7.f32, 1), v444, v444).f32[0])
              {
                v445 = v15;
                do
                {
                  *v445 = v436;
                  v436 = *(v445 - 2);
                  v434.i64[0] = *(_QWORD *)v438;
                  v434.i32[2] = *(_DWORD *)(v438 + 8);
                  a7.i32[3] = HIDWORD(xmmword_2540CD0C0);
                  v446 = (int8x16_t)vsubq_f32(v434, (float32x4_t)xmmword_2540CD0C0);
                  v447 = (float32x2_t)vextq_s8(v446, v446, 8uLL).u64[0];
                  v448 = v433 + (v436 << 6);
                  a11.i64[0] = *(_QWORD *)(v448 + 48);
                  v449 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v446.i8, *(float32x2_t *)v446.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v446.i8, 1), *(float32x2_t *)v446.i8, 1);
                  a11.i32[2] = *(_DWORD *)(v448 + 56);
                  v434 = vsubq_f32(a11, (float32x4_t)xmmword_2540CD0C0);
                  v450 = (float32x2_t)vextq_s8((int8x16_t)v434, (int8x16_t)v434, 8uLL).u64[0];
                  --v445;
                }
                while (vmla_f32(v449, v447, v447).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v434.f32, *(float32x2_t *)v434.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v434.f32, 1), *(float32x2_t *)v434.f32, 1), v450, v450).f32[0]);
                *v445 = v435;
                v434 = (float32x4_t)xmmword_2540CD0C0;
              }
              v432 = v15 + 1;
            }
            while (v15 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223C67938(_QWORD *a1, uint64_t *a2, uint64_t *a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  int8x16_t v13;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x2_t v32;
  _BOOL4 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x2_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x2_t v54;
  _BOOL4 v55;
  _QWORD *v56;
  _QWORD *v57;
  float32x4_t v58;
  float32x2_t v59;
  float v60;
  float32x2_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x2_t v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x2_t v83;
  _BOOL4 v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  float32x4_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x2_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  float32x2_t v113;
  _BOOL4 v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  uint64_t v126;
  int8x16_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float v131;
  float32x2_t v132;
  uint64_t *v133;
  int v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x2_t v142;
  float32x2_t v143;
  uint64_t v144;
  float32x2_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x2_t v149;
  float v150;
  uint64_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float v159;
  float32x2_t v160;
  uint64_t v161;
  uint64_t v162;
  float32x4_t v163;
  float32x2_t v164;
  float32x2_t v165;
  uint64_t v166;
  float32x4_t v167;
  float32x2_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float32x4_t v173;
  uint64_t v174;
  float32x2_t v175;
  float32x2_t v176;
  uint64_t v177;
  float32x4_t v178;
  float32x2_t v179;
  float32x4_t v180;
  uint64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  uint64_t v184;
  int8x16_t v185;
  float32x2_t v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  int8x16_t v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float v196;
  float32x2_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x2_t v204;
  uint64_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x2_t v210;
  uint64_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x2_t v215;
  uint64_t v216;
  float32x2_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x4_t v220;
  float32x2_t v221;
  float32x2_t v222;
  uint64_t v223;
  float32x4_t v224;
  float32x2_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x2_t v232;
  float32x2_t v233;
  uint64_t v234;
  float32x4_t v235;
  float32x2_t v236;
  float32x4_t v237;
  uint64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  float32x4_t v242;
  float32x2_t v243;
  float32x4_t v244;
  uint64_t v245;
  float32x2_t v246;
  float32x2_t v247;
  uint64_t v248;
  int8x16_t v249;
  float32x2_t v250;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a3 + (v6 << 6);
      a4.i64[0] = *(_QWORD *)(v7 + 48);
      a4.i32[2] = *(_DWORD *)(v7 + 56);
      v8 = vsubq_f32(a4, (float32x4_t)xmmword_2540CD0C0);
      v9 = *a1;
      v10 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      v11 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 1), *(float32x2_t *)v8.f32, 1);
      v12 = *a3 + (*a1 << 6);
      v8.i64[0] = *(_QWORD *)(v12 + 48);
      v8.i32[2] = *(_DWORD *)(v12 + 56);
      v13 = (int8x16_t)vsubq_f32(v8, (float32x4_t)xmmword_2540CD0C0);
      v14 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
      if (vmla_f32(v11, v10, v10).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), v14, v14).f32[0])
      {
        *a1 = v6;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      v15 = *a3;
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3 + (v17 << 6);
      a5.i64[0] = *(_QWORD *)(v18 + 48);
      a5.i32[2] = *(_DWORD *)(v18 + 56);
      v19 = (float32x4_t)xmmword_2540CD0C0;
      v20 = vsubq_f32(a5, (float32x4_t)xmmword_2540CD0C0);
      v21 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v22 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1), *(float32x2_t *)v20.f32, 1);
      v23 = *a3 + (*a1 << 6);
      v25 = *(_QWORD *)(v23 + 48);
      v24 = v23 + 48;
      v20.i64[0] = v25;
      v20.i32[2] = *(_DWORD *)(v24 + 8);
      v22.f32[0] = vmla_f32(v22, v21, v21).f32[0];
      v26 = vsubq_f32(v20, (float32x4_t)xmmword_2540CD0C0);
      v27 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
      v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 1), *(float32x2_t *)v26.f32, 1), v27, v27).f32[0];
      v29 = *(a2 - 1);
      v30 = *a3 + (v29 << 6);
      v26.i64[0] = *(_QWORD *)(v30 + 48);
      v26.i32[2] = *(_DWORD *)(v30 + 56);
      v31 = vsubq_f32(v26, (float32x4_t)xmmword_2540CD0C0);
      v32 = (float32x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
      v33 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1), *(float32x2_t *)v31.f32, 1), v32, v32).f32[0] < v22.f32[0];
      if (v22.f32[0] >= v28)
      {
        if (v33)
        {
          a1[1] = v29;
          *(a2 - 1) = v17;
          v121 = *a1;
          v120 = a1[1];
          v122 = v15 + (v120 << 6);
          v31.i64[0] = *(_QWORD *)(v122 + 48);
          v31.i32[2] = *(_DWORD *)(v122 + 56);
          v123 = vsubq_f32(v31, v19);
          v124 = (float32x2_t)vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
          v125 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.f32, 1), *(float32x2_t *)v123.f32, 1);
          v126 = v15 + (*a1 << 6);
          v123.i64[0] = *(_QWORD *)(v126 + 48);
          v123.i32[2] = *(_DWORD *)(v126 + 56);
          v127 = (int8x16_t)vsubq_f32(v123, v19);
          v128 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
          if (vmla_f32(v125, v124, v124).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v127.i8, 1), *(float32x2_t *)v127.i8, 1), v128, v128).f32[0])
          {
            *a1 = v120;
            a1[1] = v121;
            return 1;
          }
        }
      }
      else
      {
        if (v33)
        {
          *a1 = v29;
          *(a2 - 1) = v16;
          return 1;
        }
        *a1 = v17;
        a1[1] = v16;
        v187 = *(a2 - 1);
        v188 = v15 + (v187 << 6);
        v31.i64[0] = *(_QWORD *)(v188 + 48);
        v31.i32[2] = *(_DWORD *)(v188 + 56);
        v189 = vsubq_f32(v31, v19);
        v190 = (float32x2_t)vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
        v191 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v189.f32, 1), *(float32x2_t *)v189.f32, 1);
        v189.i64[0] = *(_QWORD *)v24;
        v189.i32[2] = *(_DWORD *)(v24 + 8);
        v192 = (int8x16_t)vsubq_f32(v189, v19);
        v193 = (float32x2_t)vextq_s8(v192, v192, 8uLL).u64[0];
        if (vmla_f32(v191, v190, v190).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v192.i8, *(float32x2_t *)v192.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v192.i8, 1), *(float32x2_t *)v192.i8, 1), v193, v193).f32[0])
        {
          a1[1] = v187;
          *(a2 - 1) = v16;
          return 1;
        }
      }
      return 1;
    case 4:
      v62 = a1 + 1;
      v63 = a1[1];
      v64 = a1 + 2;
      v65 = a1[2];
      v66 = *a3;
      v67 = *a3 + (v63 << 6);
      a5.i64[0] = *(_QWORD *)(v67 + 48);
      a5.i32[2] = *(_DWORD *)(v67 + 56);
      v68 = (float32x4_t)xmmword_2540CD0C0;
      v69 = vsubq_f32(a5, (float32x4_t)xmmword_2540CD0C0);
      v70 = *a1;
      v71 = (float32x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
      v72 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1), *(float32x2_t *)v69.f32, 1), v71, v71).f32[0];
      v73 = *a3 + (*a1 << 6);
      v75 = *(_QWORD *)(v73 + 48);
      v74 = v73 + 48;
      v69.i64[0] = v75;
      v69.i32[2] = *(_DWORD *)(v74 + 8);
      v76 = vsubq_f32(v69, (float32x4_t)xmmword_2540CD0C0);
      v77 = (float32x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
      v78 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), *(float32x2_t *)v76.f32, 1), v77, v77).f32[0];
      v79 = *a3 + (v65 << 6);
      v81 = *(_QWORD *)(v79 + 48);
      v80 = v79 + 48;
      v76.i64[0] = v81;
      v76.i32[2] = *(_DWORD *)(v80 + 8);
      v82 = vsubq_f32(v76, (float32x4_t)xmmword_2540CD0C0);
      v83 = (float32x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
      v84 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1), *(float32x2_t *)v82.f32, 1), v83, v83).f32[0] < v72;
      if (v72 >= v78)
      {
        if (!v84)
        {
LABEL_41:
          v63 = v65;
LABEL_42:
          v161 = *(a2 - 1);
          v162 = v66 + (v161 << 6);
          v82.i64[0] = *(_QWORD *)(v162 + 48);
          v82.i32[2] = *(_DWORD *)(v162 + 56);
          v163 = vsubq_f32(v82, v68);
          v164 = (float32x2_t)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
          v165 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v163.f32, 1), *(float32x2_t *)v163.f32, 1);
          v166 = v66 + (v63 << 6);
          v163.i64[0] = *(_QWORD *)(v166 + 48);
          v163.i32[2] = *(_DWORD *)(v166 + 56);
          v167 = vsubq_f32(v163, v68);
          v165.f32[0] = vmla_f32(v165, v164, v164).f32[0];
          v168 = (float32x2_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u64[0];
          if (v165.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v167.f32, 1), *(float32x2_t *)v167.f32, 1), v168, v168).f32[0])
          {
            *v64 = v161;
            *(a2 - 1) = v63;
            v169 = *v64;
            v170 = v66 + (v169 << 6);
            v172 = *(_QWORD *)(v170 + 48);
            v171 = v170 + 48;
            v167.i64[0] = v172;
            v167.i32[2] = *(_DWORD *)(v171 + 8);
            v173 = vsubq_f32(v167, v68);
            v174 = *v62;
            v175 = (float32x2_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u64[0];
            v176 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.f32, 1), *(float32x2_t *)v173.f32, 1);
            v177 = v66 + (v174 << 6);
            v173.i64[0] = *(_QWORD *)(v177 + 48);
            v173.i32[2] = *(_DWORD *)(v177 + 56);
            v178 = vsubq_f32(v173, v68);
            v176.f32[0] = vmla_f32(v176, v175, v175).f32[0];
            v179 = (float32x2_t)vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u64[0];
            if (v176.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v178.f32, 1), *(float32x2_t *)v178.f32, 1), v179, v179).f32[0])
            {
              a1[1] = v169;
              a1[2] = v174;
              v178.i64[0] = *(_QWORD *)v171;
              v178.i32[2] = *(_DWORD *)(v171 + 8);
              v180 = vsubq_f32(v178, v68);
              v181 = *a1;
              v182 = (float32x2_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u64[0];
              v183 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v180.f32, 1), *(float32x2_t *)v180.f32, 1);
              v184 = v66 + (*a1 << 6);
              v180.i64[0] = *(_QWORD *)(v184 + 48);
              v180.i32[2] = *(_DWORD *)(v184 + 56);
              v185 = (int8x16_t)vsubq_f32(v180, v68);
              v186 = (float32x2_t)vextq_s8(v185, v185, 8uLL).u64[0];
              if (vmla_f32(v183, v182, v182).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v185.i8, 1), *(float32x2_t *)v185.i8, 1), v186, v186).f32[0])
              {
                *a1 = v169;
                a1[1] = v181;
                return 1;
              }
            }
          }
          return 1;
        }
        *v62 = v65;
        *v64 = v63;
        v82.i64[0] = *(_QWORD *)v80;
        v82.i32[2] = *(_DWORD *)(v80 + 8);
        v153 = vsubq_f32(v82, v68);
        v154 = (float32x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
        v155 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v153.f32, 1), *(float32x2_t *)v153.f32, 1);
        v153.i64[0] = *(_QWORD *)v74;
        v153.i32[2] = *(_DWORD *)(v74 + 8);
        v155.f32[0] = vmla_f32(v155, v154, v154).f32[0];
        v82 = vsubq_f32(v153, v68);
        v156 = (float32x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
        v85 = a1;
        v86 = a1 + 1;
        v87 = v63;
        if (v155.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1), *(float32x2_t *)v82.f32, 1), v156, v156).f32[0])goto LABEL_42;
      }
      else
      {
        v85 = a1;
        v86 = a1 + 2;
        v87 = *a1;
        if (!v84)
        {
          *a1 = v63;
          a1[1] = v70;
          v82.i64[0] = *(_QWORD *)v80;
          v82.i32[2] = *(_DWORD *)(v80 + 8);
          v88 = vsubq_f32(v82, v68);
          v89 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
          v90 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.f32, 1), *(float32x2_t *)v88.f32, 1);
          v88.i64[0] = *(_QWORD *)v74;
          v88.i32[2] = *(_DWORD *)(v74 + 8);
          v90.f32[0] = vmla_f32(v90, v89, v89).f32[0];
          v82 = vsubq_f32(v88, v68);
          v91 = (float32x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
          v85 = a1 + 1;
          v86 = a1 + 2;
          v87 = v70;
          if (v90.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1), *(float32x2_t *)v82.f32, 1), v91, v91).f32[0])goto LABEL_41;
        }
      }
      *v85 = v65;
      *v86 = v70;
      v63 = v87;
      goto LABEL_42;
    case 5:
      v92 = a1 + 1;
      v93 = a1[1];
      v95 = a1 + 2;
      v94 = a1[2];
      v96 = *a3;
      v97 = *a3 + (v93 << 6);
      a5.i64[0] = *(_QWORD *)(v97 + 48);
      a5.i32[2] = *(_DWORD *)(v97 + 56);
      v98 = (float32x4_t)xmmword_2540CD0C0;
      v99 = vsubq_f32(a5, (float32x4_t)xmmword_2540CD0C0);
      v100 = *a1;
      v101 = (float32x2_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
      v102 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.f32, 1), *(float32x2_t *)v99.f32, 1), v101, v101).f32[0];
      v103 = *a3 + (*a1 << 6);
      v105 = *(_QWORD *)(v103 + 48);
      v104 = v103 + 48;
      v99.i64[0] = v105;
      v99.i32[2] = *(_DWORD *)(v104 + 8);
      v106 = vsubq_f32(v99, (float32x4_t)xmmword_2540CD0C0);
      v107 = (float32x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
      v108 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1), *(float32x2_t *)v106.f32, 1), v107, v107).f32[0];
      v109 = *a3 + (v94 << 6);
      v111 = *(_QWORD *)(v109 + 48);
      v110 = v109 + 48;
      v106.i64[0] = v111;
      v106.i32[2] = *(_DWORD *)(v110 + 8);
      v112 = vsubq_f32(v106, (float32x4_t)xmmword_2540CD0C0);
      v113 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
      v114 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 1), *(float32x2_t *)v112.f32, 1), v113, v113).f32[0] < v102;
      if (v102 >= v108)
      {
        if (v114)
        {
          *v92 = v94;
          *v95 = v93;
          v112.i64[0] = *(_QWORD *)v110;
          v112.i32[2] = *(_DWORD *)(v110 + 8);
          v157 = vsubq_f32(v112, v98);
          v158 = (float32x2_t)vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
          v159 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.f32, 1), *(float32x2_t *)v157.f32, 1), v158, v158).f32[0];
          v157.i64[0] = *(_QWORD *)v104;
          v157.i32[2] = *(_DWORD *)(v104 + 8);
          v112 = vsubq_f32(v157, v98);
          v160 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
          v115 = a1;
          v116 = a1 + 1;
          v117 = v94;
          v118 = v100;
          v119 = v93;
          if (v159 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 1), *(float32x2_t *)v112.f32, 1), v160, v160).f32[0])
          {
            v117 = v100;
            v100 = v94;
            v94 = v93;
            goto LABEL_52;
          }
          goto LABEL_49;
        }
        v117 = *a1;
        v100 = a1[1];
      }
      else
      {
        if (v114)
        {
          v115 = a1;
          v116 = a1 + 2;
          v117 = a1[2];
          v118 = a1[1];
          v119 = *a1;
LABEL_49:
          *v115 = v94;
          *v116 = v100;
          v100 = v118;
          v94 = v119;
          goto LABEL_52;
        }
        *a1 = v93;
        a1[1] = v100;
        v112.i64[0] = *(_QWORD *)v110;
        v112.i32[2] = *(_DWORD *)(v110 + 8);
        v194 = vsubq_f32(v112, v98);
        v195 = (float32x2_t)vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u64[0];
        v196 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v194.f32, 1), *(float32x2_t *)v194.f32, 1), v195, v195).f32[0];
        v194.i64[0] = *(_QWORD *)v104;
        v194.i32[2] = *(_DWORD *)(v104 + 8);
        v112 = vsubq_f32(v194, v98);
        v197 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
        v115 = a1 + 1;
        v116 = a1 + 2;
        v117 = v93;
        v118 = v94;
        v119 = v100;
        if (v196 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 1), *(float32x2_t *)v112.f32, 1), v197, v197).f32[0])goto LABEL_49;
        v117 = v93;
      }
LABEL_52:
      v198 = a1[3];
      v199 = v96 + (v198 << 6);
      v201 = *(_QWORD *)(v199 + 48);
      v200 = v199 + 48;
      v112.i64[0] = v201;
      v112.i32[2] = *(_DWORD *)(v200 + 8);
      v202 = vsubq_f32(v112, v98);
      v203 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
      v204 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), *(float32x2_t *)v202.f32, 1);
      v205 = v96 + (v94 << 6);
      v202.i64[0] = *(_QWORD *)(v205 + 48);
      v202.i32[2] = *(_DWORD *)(v205 + 56);
      v206 = vsubq_f32(v202, v98);
      v204.f32[0] = vmla_f32(v204, v203, v203).f32[0];
      v207 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
      if (v204.f32[0] >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 1), *(float32x2_t *)v206.f32, 1), v207, v207).f32[0])
      {
        v94 = a1[3];
      }
      else
      {
        a1[2] = v198;
        a1[3] = v94;
        v206.i64[0] = *(_QWORD *)v200;
        v206.i32[2] = *(_DWORD *)(v200 + 8);
        v208 = vsubq_f32(v206, v98);
        v209 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
        v210 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v208.f32, 1), *(float32x2_t *)v208.f32, 1);
        v211 = v96 + (v100 << 6);
        v208.i64[0] = *(_QWORD *)(v211 + 48);
        v208.i32[2] = *(_DWORD *)(v211 + 56);
        v206 = vsubq_f32(v208, v98);
        v210.f32[0] = vmla_f32(v210, v209, v209).f32[0];
        v212 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
        if (v210.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 1), *(float32x2_t *)v206.f32, 1), v212, v212).f32[0])
        {
          *v92 = v198;
          *v95 = v100;
          v206.i64[0] = *(_QWORD *)v200;
          v206.i32[2] = *(_DWORD *)(v200 + 8);
          v213 = vsubq_f32(v206, v98);
          v214 = (float32x2_t)vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL).u64[0];
          v215 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.f32, 1), *(float32x2_t *)v213.f32, 1);
          v216 = v96 + (v117 << 6);
          v213.i64[0] = *(_QWORD *)(v216 + 48);
          v213.i32[2] = *(_DWORD *)(v216 + 56);
          v206 = vsubq_f32(v213, v98);
          v215.f32[0] = vmla_f32(v215, v214, v214).f32[0];
          v217 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
          if (v215.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 1), *(float32x2_t *)v206.f32, 1), v217, v217).f32[0])
          {
            *a1 = v198;
            a1[1] = v117;
          }
        }
      }
      v218 = *(a2 - 1);
      v219 = v96 + (v218 << 6);
      v206.i64[0] = *(_QWORD *)(v219 + 48);
      v206.i32[2] = *(_DWORD *)(v219 + 56);
      v220 = vsubq_f32(v206, v98);
      v221 = (float32x2_t)vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
      v222 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v220.f32, 1), *(float32x2_t *)v220.f32, 1);
      v223 = v96 + (v94 << 6);
      v220.i64[0] = *(_QWORD *)(v223 + 48);
      v220.i32[2] = *(_DWORD *)(v223 + 56);
      v224 = vsubq_f32(v220, v98);
      v222.f32[0] = vmla_f32(v222, v221, v221).f32[0];
      v225 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
      if (v222.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.f32, 1), *(float32x2_t *)v224.f32, 1), v225, v225).f32[0])
      {
        a1[3] = v218;
        *(a2 - 1) = v94;
        v227 = a1[2];
        v226 = a1[3];
        v228 = v96 + (v226 << 6);
        v230 = *(_QWORD *)(v228 + 48);
        v229 = v228 + 48;
        v224.i64[0] = v230;
        v224.i32[2] = *(_DWORD *)(v229 + 8);
        v231 = vsubq_f32(v224, v98);
        v232 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
        v233 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.f32, 1), *(float32x2_t *)v231.f32, 1);
        v234 = v96 + (v227 << 6);
        v231.i64[0] = *(_QWORD *)(v234 + 48);
        v231.i32[2] = *(_DWORD *)(v234 + 56);
        v235 = vsubq_f32(v231, v98);
        v233.f32[0] = vmla_f32(v233, v232, v232).f32[0];
        v236 = (float32x2_t)vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
        if (v233.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v235.f32, *(float32x2_t *)v235.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.f32, 1), *(float32x2_t *)v235.f32, 1), v236, v236).f32[0])
        {
          a1[2] = v226;
          a1[3] = v227;
          v235.i64[0] = *(_QWORD *)v229;
          v235.i32[2] = *(_DWORD *)(v229 + 8);
          v237 = vsubq_f32(v235, v98);
          v238 = a1[1];
          v239 = (float32x2_t)vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
          v240 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v237.f32, *(float32x2_t *)v237.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.f32, 1), *(float32x2_t *)v237.f32, 1);
          v241 = v96 + (v238 << 6);
          v237.i64[0] = *(_QWORD *)(v241 + 48);
          v237.i32[2] = *(_DWORD *)(v241 + 56);
          v242 = vsubq_f32(v237, v98);
          v240.f32[0] = vmla_f32(v240, v239, v239).f32[0];
          v243 = (float32x2_t)vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u64[0];
          if (v240.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v242.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v242.f32, 1), *(float32x2_t *)v242.f32, 1), v243, v243).f32[0])
          {
            a1[1] = v226;
            a1[2] = v238;
            v242.i64[0] = *(_QWORD *)v229;
            v242.i32[2] = *(_DWORD *)(v229 + 8);
            v244 = vsubq_f32(v242, v98);
            v245 = *a1;
            v246 = (float32x2_t)vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
            v247 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v244.f32, 1), *(float32x2_t *)v244.f32, 1);
            v248 = v96 + (*a1 << 6);
            v244.i64[0] = *(_QWORD *)(v248 + 48);
            v244.i32[2] = *(_DWORD *)(v248 + 56);
            v249 = (int8x16_t)vsubq_f32(v244, v98);
            v250 = (float32x2_t)vextq_s8(v249, v249, 8uLL).u64[0];
            if (vmla_f32(v247, v246, v246).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v249.i8, *(float32x2_t *)v249.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v249.i8, 1), *(float32x2_t *)v249.i8, 1), v250, v250).f32[0])
            {
              *a1 = v226;
              a1[1] = v245;
              return 1;
            }
          }
        }
      }
      return 1;
    default:
      v34 = a1 + 2;
      v35 = a1[2];
      v36 = a1[1];
      v37 = *a3;
      v38 = *a3 + (v36 << 6);
      a5.i64[0] = *(_QWORD *)(v38 + 48);
      a5.i32[2] = *(_DWORD *)(v38 + 56);
      v39 = (float32x4_t)xmmword_2540CD0C0;
      v40 = vsubq_f32(a5, (float32x4_t)xmmword_2540CD0C0);
      v41 = *a1;
      v42 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      v43 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1), *(float32x2_t *)v40.f32, 1), v42, v42).f32[0];
      v44 = *a3 + (*a1 << 6);
      v46 = *(_QWORD *)(v44 + 48);
      v45 = v44 + 48;
      v40.i64[0] = v46;
      v40.i32[2] = *(_DWORD *)(v45 + 8);
      v47 = vsubq_f32(v40, (float32x4_t)xmmword_2540CD0C0);
      v48 = (float32x2_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
      v49 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.f32, 1), *(float32x2_t *)v47.f32, 1), v48, v48).f32[0];
      v50 = *a3 + (v35 << 6);
      v52 = *(_QWORD *)(v50 + 48);
      v51 = v50 + 48;
      v47.i64[0] = v52;
      v47.i32[2] = *(_DWORD *)(v51 + 8);
      v53 = vsubq_f32(v47, (float32x4_t)xmmword_2540CD0C0);
      v54 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
      v55 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), *(float32x2_t *)v53.f32, 1), v54, v54).f32[0] < v43;
      if (v43 < v49)
      {
        v56 = a1;
        v57 = a1 + 2;
        if (!v55)
        {
          *a1 = v36;
          a1[1] = v41;
          v53.i64[0] = *(_QWORD *)v51;
          v53.i32[2] = *(_DWORD *)(v51 + 8);
          v58 = vsubq_f32(v53, v39);
          v59 = (float32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
          v60 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 1), *(float32x2_t *)v58.f32, 1), v59, v59).f32[0];
          v58.i64[0] = *(_QWORD *)v45;
          v58.i32[2] = *(_DWORD *)(v45 + 8);
          v53 = vsubq_f32(v58, v39);
          v61 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          v56 = a1 + 1;
          v57 = a1 + 2;
          if (v60 >= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), *(float32x2_t *)v53.f32, 1), v61, v61).f32[0])goto LABEL_25;
        }
LABEL_24:
        *v56 = v35;
        *v57 = v41;
        goto LABEL_25;
      }
      if (v55)
      {
        a1[1] = v35;
        *v34 = v36;
        v53.i64[0] = *(_QWORD *)v51;
        v53.i32[2] = *(_DWORD *)(v51 + 8);
        v129 = vsubq_f32(v53, v39);
        v130 = (float32x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u64[0];
        v131 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.f32, 1), *(float32x2_t *)v129.f32, 1), v130, v130).f32[0];
        v129.i64[0] = *(_QWORD *)v45;
        v129.i32[2] = *(_DWORD *)(v45 + 8);
        v53 = vsubq_f32(v129, v39);
        v132 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        v56 = a1;
        v57 = a1 + 1;
        if (v131 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), *(float32x2_t *)v53.f32, 1), v132, v132).f32[0])goto LABEL_24;
      }
LABEL_25:
      v133 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v134 = 0;
      for (i = 24; ; i += 8)
      {
        v136 = *v133;
        v137 = v37 + (*v133 << 6);
        v139 = *(_QWORD *)(v137 + 48);
        v138 = v137 + 48;
        v53.i64[0] = v139;
        v53.i32[2] = *(_DWORD *)(v138 + 8);
        v140 = vsubq_f32(v53, v39);
        v141 = *v34;
        v142 = (float32x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u64[0];
        v143 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v140.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v140.f32, 1), *(float32x2_t *)v140.f32, 1);
        v144 = v37 + (v141 << 6);
        v140.i64[0] = *(_QWORD *)(v144 + 48);
        v140.i32[2] = *(_DWORD *)(v144 + 56);
        v53 = vsubq_f32(v140, v39);
        v143.f32[0] = vmla_f32(v143, v142, v142).f32[0];
        v145 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        if (v143.f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), *(float32x2_t *)v53.f32, 1), v145, v145).f32[0])break;
LABEL_28:
        v34 = v133++;
        if (v133 == a2)
          return 1;
      }
      v146 = i;
      do
      {
        *(_QWORD *)((char *)a1 + v146) = v141;
        v147 = v146 - 8;
        if (v146 == 8)
        {
          *a1 = v136;
          if (++v134 != 8)
            goto LABEL_28;
          return v133 + 1 == a2;
        }
        v141 = *(_QWORD *)((char *)a1 + v146 - 16);
        v53.i64[0] = *(_QWORD *)v138;
        v53.i32[2] = *(_DWORD *)(v138 + 8);
        v148 = vsubq_f32(v53, v39);
        v149 = (float32x2_t)vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u64[0];
        v150 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 1), *(float32x2_t *)v148.f32, 1), v149, v149).f32[0];
        v151 = v37 + (v141 << 6);
        v148.i64[0] = *(_QWORD *)(v151 + 48);
        v148.i32[2] = *(_DWORD *)(v151 + 56);
        v53 = vsubq_f32(v148, v39);
        v152 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        v146 = v147;
      }
      while (v150 < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1), *(float32x2_t *)v53.f32, 1), v152, v152).f32[0]);
      *(_QWORD *)((char *)a1 + v147) = v136;
      if (++v134 != 8)
        goto LABEL_28;
      return v133 + 1 == a2;
  }
}

BOOL sub_223C6857C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  v2 = *(_QWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a2 + 36);
  if ((_DWORD)v2 != (_DWORD)v3)
    return 0;
  v4 = HIDWORD(v2);
  v5 = HIDWORD(v3);
  return ((*(_DWORD *)(a2 + 52) ^ *(_DWORD *)(a1 + 52)) & 0x7FFFFFFF) == 0 && (_DWORD)v4 == (_DWORD)v5;
}

char *sub_223C685C8(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924)
    sub_223257BE4();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x124924924924924)
      sub_223174E94();
    v7 = (char *)operator new(224 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[224 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 72);
  *((_QWORD *)v8 + 10) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = &v7[224 * v3];
  v12[88] = 0;
  v13 = v12 + 88;
  v13[128] = 0;
  v14 = v13 + 128;
  if (*(_BYTE *)(a2 + 216))
  {
    v15 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)v13 = *(_OWORD *)(a2 + 88);
    *((_OWORD *)v13 + 1) = v15;
    v16 = *(_OWORD *)(a2 + 136);
    *((_OWORD *)v13 + 2) = *(_OWORD *)(a2 + 120);
    *((_OWORD *)v13 + 3) = v16;
    v17 = &v7[224 * v3];
    *(_OWORD *)(v17 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(v17 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v17 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(v17 + 200) = *(_OWORD *)(a2 + 200);
    *v14 = 1;
  }
  v18 = &v7[224 * v6];
  v19 = v8 + 224;
  v20 = (char *)*a1;
  v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = v8;
    a1[1] = v19;
    a1[2] = v18;
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = &v8[v22];
      v24 = &v21[v22];
      *((_QWORD *)v23 - 28) = *(_QWORD *)&v21[v22 - 224];
      v25 = *(_OWORD *)&v21[v22 - 216];
      v26 = *(_OWORD *)&v21[v22 - 200];
      v27 = *(_OWORD *)&v21[v22 - 184];
      *(_OWORD *)(v23 - 168) = *(_OWORD *)&v21[v22 - 168];
      *(_OWORD *)(v23 - 184) = v27;
      *(_OWORD *)(v23 - 200) = v26;
      *(_OWORD *)(v23 - 216) = v25;
      *(_OWORD *)(v23 - 152) = *(_OWORD *)&v21[v22 - 152];
      *((_QWORD *)v24 - 19) = 0;
      *((_QWORD *)v24 - 18) = 0;
      v8[v22 - 136] = 0;
      *(v23 - 8) = 0;
      if (v21[v22 - 8])
      {
        v28 = *(_OWORD *)(v24 - 136);
        v29 = *(_OWORD *)(v24 - 120);
        v30 = *(_OWORD *)(v24 - 88);
        *(_OWORD *)&v8[v22 - 104] = *(_OWORD *)(v24 - 104);
        *(_OWORD *)&v8[v22 - 88] = v30;
        *(_OWORD *)&v8[v22 - 136] = v28;
        *(_OWORD *)&v8[v22 - 120] = v29;
        v31 = *(_OWORD *)(v24 - 72);
        v32 = *(_OWORD *)(v24 - 56);
        v33 = *(_OWORD *)(v24 - 40);
        *(_OWORD *)(v23 - 24) = *(_OWORD *)(v24 - 24);
        *(_OWORD *)(v23 - 40) = v33;
        *(_OWORD *)(v23 - 56) = v32;
        *(_OWORD *)(v23 - 72) = v31;
        *(v23 - 8) = 1;
      }
      v22 -= 224;
    }
    while (&v21[v22] != v20);
    v21 = (char *)*a1;
    v34 = (char *)a1[1];
    *a1 = &v8[v22];
    a1[1] = v19;
    a1[2] = v18;
    while (v34 != v21)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)v34 - 18);
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v34 -= 224;
    }
  }
  if (v21)
    operator delete(v21);
  return v19;
}

float32x4_t sub_223C6887C(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, _OWORD **a4, double a5, float32x4_t a6)
{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  float v12;
  float *v18;
  float v19;
  float v20;
  float v21;
  float32x4_t result;
  uint64_t v23;
  uint64_t v24;

  *a1 = a3;
  v7 = *a4;
  a1[2] = *a4;
  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  if (!qword_2540CD030)
  {
    v24 = a2;
    v23 = operator new();
    for (i = 0; i != 256; ++i)
    {
      while (1)
      {
        v12 = (float)i;
        if (i <= 0xAu)
          break;
        *(float *)&byte_2540CCF90[4 * i++ + 1248] = powf((float)((float)(v12 * 0.78431) + 11.0) / 211.0, 2.4);
        if (i == 256)
          goto LABEL_6;
      }
      *(float *)&byte_2540CCF90[4 * i + 1248] = v12 * 0.00030353;
    }
LABEL_6:
    a2 = v24;
    qword_2540CD030 = v23;
    v7 = (_OWORD *)a1[2];
  }
  __asm { FMOV            V0.4S, #1.0 }
  LODWORD(_Q0) = dword_2540CD470[v10];
  DWORD1(_Q0) = dword_2540CD470[v9];
  DWORD2(_Q0) = dword_2540CD470[v8];
  *v7 = _Q0;
  v18 = (float *)a1[2];
  v19 = *v18;
  v20 = v18[1];
  if (*v18 < v20)
    v19 = v18[1];
  if (v19 < v18[2])
    v19 = v18[2];
  v21 = (float)((float)((float)((float)(*v18 * 0.072) + (float)((float)(*v18 * 0.213) + (float)(v20 * 0.715))) + v19)
              * 0.5)
      + 0.00000011921;
  a6.i64[0] = *(_QWORD *)v18;
  a6.f32[2] = v18[2];
  result = vmulq_n_f32(a6, *(float *)(**(_QWORD **)a2+ 4* vcvtas_u32_f32(v21* (float)(unint64_t)(((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) >> 2)- 1)))/ v21);
  v18[2] = result.f32[2];
  *(_QWORD *)v18 = result.i64[0];
  return result;
}

void sub_223C68A74(_DWORD *a1, _QWORD *a2, unsigned __int8 *a3, _OWORD *a4)
{
  _OWORD *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  float v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t i;
  float v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = a4;
  v7 = qword_2540CD030;
  __asm { FMOV            V1.4S, #1.0 }
  v29 = HIDWORD(_Q1);
  if (a1[5])
  {
    if (qword_2540CD030)
    {
      v14 = 0;
      do
      {
        *a2 = v5;
        a2[2] = v4;
        HIDWORD(v15) = HIDWORD(_Q1);
        LODWORD(v15) = dword_2540CD470[v5[2]];
        DWORD1(v15) = dword_2540CD470[v5[1]];
        DWORD2(v15) = dword_2540CD470[*v5];
        *v4 = v15;
        v5 += a1[6];
        v4 = (_OWORD *)((char *)v4 + 4 * a1[7]);
        ++v14;
      }
      while (v14 < a1[5]);
    }
    else
    {
      v21 = 0;
      do
      {
        *a2 = v5;
        a2[2] = v4;
        v22 = *v5;
        v24 = v5[1];
        v23 = v4;
        v26 = v5[2];
        if (!v7)
        {
          v30 = v5[1];
          v31 = *v5;
          v33 = operator new();
          for (i = 0; i != 256; ++i)
          {
            while (1)
            {
              v28 = (float)i;
              if (i <= 0xAu)
                break;
              *(float *)&byte_2540CCF90[4 * i++ + 1248] = powf((float)((float)(v28 * 0.78431) + 11.0) / 211.0, 2.4);
              if (i == 256)
                goto LABEL_13;
            }
            *(float *)&byte_2540CCF90[4 * i + 1248] = v28 * 0.00030353;
          }
LABEL_13:
          v22 = v31;
          v7 = v33;
          qword_2540CD030 = v33;
          v23 = (_OWORD *)a2[2];
          HIDWORD(_Q1) = v29;
          v24 = v30;
        }
        HIDWORD(v25) = HIDWORD(_Q1);
        LODWORD(v25) = dword_2540CD470[v26];
        DWORD1(v25) = dword_2540CD470[v24];
        DWORD2(v25) = dword_2540CD470[v22];
        *v23 = v25;
        v5 += a1[6];
        v4 = (_OWORD *)((char *)v4 + 4 * a1[7]);
        ++v21;
      }
      while (v21 < a1[5]);
    }
  }
  *a2 = v5;
  a2[2] = v4;
  v16 = *v5;
  v17 = v5[1];
  v18 = v5[2];
  if (!v7)
  {
    v32 = operator new();
    for (j = 0; j != 256; ++j)
    {
      while (1)
      {
        v20 = (float)j;
        if (j <= 0xAu)
          break;
        *(float *)&byte_2540CCF90[4 * j++ + 1248] = powf((float)((float)(v20 * 0.78431) + 11.0) / 211.0, 2.4);
        if (j == 256)
          goto LABEL_10;
      }
      *(float *)&byte_2540CCF90[4 * j + 1248] = v20 * 0.00030353;
    }
LABEL_10:
    qword_2540CD030 = v32;
    v4 = (_OWORD *)a2[2];
    HIDWORD(_Q1) = v29;
  }
  LODWORD(_Q1) = dword_2540CD470[v18];
  DWORD1(_Q1) = dword_2540CD470[v17];
  DWORD2(_Q1) = dword_2540CD470[v16];
  *v4 = _Q1;
}

uint64_t sub_223C68D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v83 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_38;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 129))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 129))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_38;
LABEL_29:
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!*(_BYTE *)(a2 + 129))
          goto LABEL_38;
LABEL_35:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
        v22 = *(_DWORD *)(a1 + 88);
        if (v22 != *(_DWORD *)(a2 + 88))
          goto LABEL_105;
        goto LABEL_39;
      }
    }
LABEL_34:
    if (!*(_BYTE *)(a2 + 129))
      goto LABEL_38;
    goto LABEL_35;
  }
  if (v13)
    goto LABEL_29;
LABEL_38:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 88);
  if (v22 != *(_DWORD *)(a2 + 88))
    goto LABEL_105;
LABEL_39:
  v23 = *(_DWORD *)(a1 + 92);
  if (v23 != *(_DWORD *)(a2 + 92))
    goto LABEL_105;
  v24 = *(_DWORD *)(a1 + 96);
  if (v24 != *(_DWORD *)(a2 + 96))
    goto LABEL_105;
  if (*(_DWORD *)(a1 + 112) && *(_DWORD *)(a1 + 116))
  {
    v25 = *(unsigned int *)(a1 + 104);
    v80 = *(unsigned int *)(a2 + 100);
    v81 = *(unsigned int *)(a1 + 100);
    v26 = *(unsigned int *)(a2 + 108);
    v79 = *(unsigned int *)(a2 + 104);
    v27 = *(unsigned int *)(a1 + 108);
    v28 = *(unsigned __int16 **)(a1 + 80);
    if (*(_BYTE *)(a1 + 128) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v28 = *(unsigned __int16 **)(a1 + 80);
    }
    v34 = *(unsigned __int16 **)(a2 + 80);
    if (*(_BYTE *)(a2 + 128) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
      v34 = *(unsigned __int16 **)(a2 + 80);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_115;
          }
        }
        else
        {
          v70 = 0;
LABEL_91:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_91;
              goto LABEL_96;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_101:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_101;
LABEL_110:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_115;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_65:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_66:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_105;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_65;
                    goto LABEL_76;
                  }
                }
                break;
              }
              goto LABEL_66;
            }
          }
        }
      }
LABEL_105:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_107;
      goto LABEL_106;
    }
LABEL_76:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_110;
      v63 = 0;
LABEL_79:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_105;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_79;
          goto LABEL_96;
        }
      }
      goto LABEL_105;
    }
LABEL_96:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_115;
      }
      goto LABEL_105;
    }
LABEL_115:
    v67 = *v28 == *v34;
    goto LABEL_116;
  }
  if (*(_DWORD *)(a2 + 112))
  {
    v67 = *(_DWORD *)(a2 + 116) == 0;
LABEL_116:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_107;
    goto LABEL_106;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_106:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_107:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_223C69400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C69464(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  int v23;
  __int128 *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void **v34;
  _QWORD v35[2];

  if ((char *)a2[1] - (char *)*a2 <= 63)
  {
    *(_QWORD *)&v26 = a1;
    *((_QWORD *)&v26 + 1) = "{}";
    *(_QWORD *)&v27 = a1;
    *((_QWORD *)&v27 + 1) = "{}";
    *(_QWORD *)&v28 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v30 = &v26;
      return ((uint64_t (*)(__int128 **, uint64_t))off_24EC60F68[v3])(&v30, a1);
    }
LABEL_18:
    sub_22316DD70();
  }
  *(_QWORD *)&v26 = a1;
  *((_QWORD *)&v26 + 1) = "{";
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = "{";
  *(_QWORD *)&v28 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  v30 = &v26;
  ((void (*)(__int128 **, uint64_t))off_24EC60F38[v5])(&v30, a1);
  v7 = *a2;
  v8 = **a2;
  v9 = (*a2)[1];
  v10 = (*a2)[3];
  v28 = (*a2)[2];
  v29 = v10;
  v26 = v8;
  v27 = v9;
  v22 = 0x400000004;
  v23 = 4;
  v24 = &v26;
  v25 = 0;
  sub_224505D70((unsigned int *)&v22, __p);
  v30 = (__int128 *)a1;
  v31 = __p;
  v32 = a1;
  v33 = __p;
  v34 = __p;
  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11 == -1)
    sub_22316DD70();
  v35[0] = &v30;
  ((void (*)(_QWORD *, uint64_t))off_24EC60F80[v11])(v35, a1);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    v12 = a2[1];
    v13 = v7 + 4;
    if (v13 != v12)
    {
LABEL_12:
      do
      {
        *(_QWORD *)&v26 = a1;
        *((_QWORD *)&v26 + 1) = ",";
        *(_QWORD *)&v27 = a1;
        *((_QWORD *)&v27 + 1) = ",";
        *(_QWORD *)&v28 = ",";
        v14 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v14 == -1)
          goto LABEL_18;
        v30 = &v26;
        ((void (*)(__int128 **, uint64_t))off_24EC60F38[v14])(&v30, a1);
        v15 = *v13;
        v16 = v13[1];
        v17 = v13[3];
        v28 = v13[2];
        v29 = v17;
        v26 = v15;
        v27 = v16;
        v22 = 0x400000004;
        v23 = 4;
        v24 = &v26;
        v25 = 0;
        sub_224505D70((unsigned int *)&v22, __p);
        v30 = (__int128 *)a1;
        v31 = __p;
        v32 = a1;
        v33 = __p;
        v34 = __p;
        v18 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v18 == -1)
          sub_22316DD70();
        v35[0] = &v30;
        ((void (*)(_QWORD *, uint64_t))off_24EC60F80[v18])(v35, a1);
        if (v21 < 0)
          operator delete(__p[0]);
        v13 += 4;
      }
      while (v13 != v12);
    }
  }
  else
  {
    v12 = a2[1];
    v13 = v7 + 4;
    if (v13 != v12)
      goto LABEL_12;
  }
  *(_QWORD *)&v26 = a1;
  *((_QWORD *)&v26 + 1) = "}";
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = "}";
  *(_QWORD *)&v28 = "}";
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    goto LABEL_18;
  v30 = &v26;
  return ((uint64_t (*)(__int128 **, uint64_t))off_24EC60F38[v19])(&v30, a1);
}

void sub_223C696F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223C69718(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24EC60F38[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_22316DD70();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24EC60F80[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_223C69804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_223C69820(uint64_t a1, const void *a2, _BYTE *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_22452795C(a3, (std::__shared_weak_count_vtbl **)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_223C69970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_223C69984(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_224527160(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_223C69AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223C69AE8(uint64_t a1, void *key, void **a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *value;
  std::__shared_weak_count *v23;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  v12 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    value = v12;
    v23 = v11;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    do
      v16 = __ldaxr(v13);
    while (__stlxr(v16 - 1, v13));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (!v12)
      goto LABEL_26;
  }
  else
  {
    value = v12;
    v23 = 0;
    if (!v12)
      goto LABEL_26;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_26:
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_223C69C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223C69C9C(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v4;
  uint64_t v6;
  char *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if (a3[1] - *a3 <= 1)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24EC60F68[v4])(&v15, a2);
    }
LABEL_19:
    sub_22316DD70();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24EC60F38[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, *(unsigned __int16 *)*a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24EC60F80[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = (unsigned __int16 *)a3[1];
    v11 = (unsigned __int16 *)(v8 + 2);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24EC60F38[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_22316DD70();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24EC60F80[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = (unsigned __int16 *)a3[1];
    v11 = (unsigned __int16 *)(v8 + 2);
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC60F38[v14])(&v15, a2);
}

void sub_223C69EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C69EE8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC60FF0;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_223C69F64(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC60FF0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C69FD8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC60FF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C6A04C()
{
  return 32;
}

uint64_t sub_223C6A054(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223C6A05C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223C6A074(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C6A0F0()
{
  unsigned __int8 v0;
  std::string *v1;
  __int128 *v2;
  int64x2_t v3;
  int8x16_t v4;
  void *v5[3];
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2540CD040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD040))
  {
    sub_223174DE4(v6, "ConstSharedImage");
    v1 = sub_2231EFDB4();
    sub_223C6A2E0((uint64_t)v8, (uint64_t)v1);
    v2 = sub_2231A27C0();
    sub_223C6A2E0((uint64_t)&__p, (uint64_t)v2);
    sub_22319BD1C(v5, (uint64_t)v8, 2uLL);
    sub_2245730F4((char *)v6, (uint64_t *)v5, (std::string *)&qword_2540CD188, v3, v4);
    sub_22319BB48(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD188, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD040);
          return;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
}

void sub_223C6A22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2540CD040);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2540CD040);
  _Unwind_Resume(a1);
}

void sub_223C6A2E0(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C6A37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C6A398(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C6A400(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C6A468()
{
  return 32;
}

uint64_t sub_223C6A470(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223C6A478@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223C6A490(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_223C6A514(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  unsigned int v5;

  sub_223C6A0F0();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a2 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)&qword_2540CD188, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223C6A580(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223C6AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223C6AB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C6AB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223C6AB84(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223C6B0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223C6B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223C6B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_223C6B188(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 36))
    v2 = *(_BYTE *)(a2 + 36) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 36) != 0) == (*(_BYTE *)(a2 + 36) != 0);
  return *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32);
}

uint64_t sub_223C6B258(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    *(_QWORD *)result = &off_24EC611E0;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_223C6B2D4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC611E0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C6B348(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC611E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C6B3BC()
{
  return 31;
}

uint64_t sub_223C6B3C4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223C6B3CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223C6B3E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C6B460(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;

  sub_22429724C(a2, (uint64_t)&v22);
  v30[0] = &off_24EC20EB8;
  v3 = v23;
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v27;
    v8 = v28;
    v9 = v29;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = v27;
    v8 = v28;
    v9 = v29;
  }
  v30[1] = v3;
  v31 = v4;
  v32 = v25;
  v33 = v26;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v22 = &off_24EC28CD0;
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v22 = &off_24EC23CA0;
  sub_223C6B660((uint64_t)v30, (uint64_t)&v23);
  *a1 = &off_24EC25340;
  sub_223214668((uint64_t)&v22, (uint64_t)(a1 + 1));
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_223C6B630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2231CD9B0((uint64_t)va);
  sub_2231B4CC8(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_223C6B64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231B4CC8(v1 - 72);
  _Unwind_Resume(a1);
}

void sub_223C6B660(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223C6B964(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  v16 = v15 | (4 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 4;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223C6B918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_223C6B964(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_2231EF234();
  v3 = sub_2232969B8();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223C6B9DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC612D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223C6B9EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC612D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223C6BA1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[3] = &off_24EC21328;
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_223C6BB04(uint64_t a1, uint64_t a2, std::string::size_type a3, float a4)
{
  BOOL v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (***v18)();
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  __int16 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t (***v34)();
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string::size_type v48;
  void *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  std::string::size_type v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unsigned __int8 v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::string::size_type v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  std::string::size_type size;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  float v154;
  unsigned int v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  std::string::size_type v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  __int128 v181;
  int v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _BOOL8 v188;
  _BOOL4 v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  __int16 v193;
  __int128 v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t *v205;
  std::logic_error *v206;
  unsigned __int8 v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  std::logic_error *exception;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  size_t v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  std::string::size_type v227;
  std::string *v228;
  std::string *p_p;
  uint64_t v230;
  uint64_t v231;
  std::string *v232;
  std::string *v233;
  __int128 v234;
  __int128 *v235;
  __int128 v236;
  int64x2_t v237;
  int8x16_t v238;
  void **v239;
  void **v240;
  void *v241;
  _QWORD v242[2];
  std::__shared_weak_count *v243;
  uint64_t (**v244)();
  _QWORD *v245;
  std::__shared_weak_count *v246;
  uint64_t (**v247)();
  uint64_t v248;
  uint64_t v249;
  uint64_t (**v250)();
  uint64_t (***v251)();
  std::__shared_weak_count *v252;
  _OWORD v253[2];
  char v254;
  _QWORD v255[2];
  std::__shared_weak_count *v256;
  std::string __p;
  std::string v258;
  uint64_t v259[3];
  char v260;
  char v261;
  CVPixelBufferPoolRef *v262;
  std::__shared_weak_count *v263;
  void *v264;
  void **v265;
  std::__shared_weak_count *v266;
  uint64_t v267;
  std::string __s;
  _BYTE v269[30];
  _BYTE v270[56];
  uint64_t v271;
  __int128 v272;
  uint64_t v273;

  v273 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0.0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 422, (uint64_t)"scale_factor > 0.f", 18, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_DWORD *)(a2 + 32))
    v8 = *(_DWORD *)(a2 + 36) == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v18 = *(uint64_t (****)())(a2 + 8);
    v19 = *(_QWORD *)(a2 + 16);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    __s.__r_.__value_.__l.__size_ = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (v18 && *v18 == off_24EC711E0)
    {
      *(_QWORD *)v270 = v18;
      *(_QWORD *)&v270[8] = v19;
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    }
    else
    {
      *(_OWORD *)v270 = 0uLL;
      if (__s.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__size_ + 16))(__s.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
          v29 = *(std::__shared_weak_count **)&v270[8];
          v30 = *(_QWORD *)v270;
          if (!*(_QWORD *)&v270[8])
            goto LABEL_42;
          goto LABEL_39;
        }
      }
    }
    v29 = *(std::__shared_weak_count **)&v270[8];
    v30 = *(_QWORD *)v270;
    if (!*(_QWORD *)&v270[8])
      goto LABEL_42;
LABEL_39:
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if (v30)
      {
LABEL_43:
        v34 = *(uint64_t (****)())(a2 + 8);
        v33 = *(std::__shared_weak_count **)(a2 + 16);
        if (v33)
        {
          v35 = (unint64_t *)&v33->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v34 && *v34 == off_24EC711E0)
        {
          v37 = a2 + 24;
          if (v33)
          {
            v38 = (unint64_t *)&v33->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            *(_OWORD *)v270 = *(_OWORD *)v37;
            *(_QWORD *)&v270[16] = *(_QWORD *)(v37 + 16);
            do
              v40 = __ldxr(v38);
            while (__stxr(v40 + 1, v38));
            do
              v41 = __ldaxr(v38);
            while (__stlxr(v41 - 1, v38));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
            do
              v42 = __ldaxr(v38);
            while (__stlxr(v42 - 1, v38));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          else
          {
            *(_OWORD *)v270 = *(_OWORD *)v37;
            *(_QWORD *)&v270[16] = *(_QWORD *)(a2 + 40);
          }
          v250 = &off_24EC61328;
          v251 = v34;
          v252 = v33;
          v253[0] = *(_OWORD *)v270;
          *(_OWORD *)((char *)v253 + 9) = *(_OWORD *)&v270[9];
          v254 = 1;
          if (v33)
          {
            v59 = (unint64_t *)&v33->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
            do
              v61 = __ldaxr(v59);
            while (__stlxr(v61 - 1, v59));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          sub_22426C994((uint64_t)v34, &v244);
          if ((a4 <= 0.0 || a4 > 1.0)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 395, (uint64_t)"scale_factor > 0.f && scale_factor <= 1.f", 41, (uint64_t)"Invalid scale factor!", 21, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v62 = v245;
          if (v245)
          {
            v64 = *v245;
            v63 = (std::__shared_weak_count *)v245[1];
            if (v63)
            {
              v65 = (unint64_t *)&v63->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
              do
                v67 = __ldaxr(v65);
              while (__stlxr(v67 - 1, v65));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            if (v64)
            {
              v68 = sub_2242A9824((uint64_t)&v244);
              v264 = &off_24EC715B8;
              v265 = (void **)v245;
              v266 = v246;
              if (v246)
              {
                v69 = (unint64_t *)&v246->__shared_owners_;
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
              }
              sub_22328CFD4((uint64_t)&v264, &__s);
              *(_QWORD *)v270 = &off_24EC61420;
              v71 = *(_OWORD *)&__s.__r_.__value_.__r.__words[1];
              if (__s.__r_.__value_.__r.__words[2])
              {
                v72 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
                do
                  v74 = __ldxr(v72);
                while (__stxr(v74 + 1, v72));
                v75 = *(_QWORD *)v269;
                *(_OWORD *)&v270[32] = *(_OWORD *)&v269[8];
                do
                  v76 = __ldxr(v72);
                while (__stxr(v76 + 1, v72));
                *(_OWORD *)&v270[8] = v71;
                *(_QWORD *)&v270[24] = v75;
                do
                  v77 = __ldaxr(v72);
                while (__stlxr(v77 - 1, v72));
                if (!v77)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 16))(*((_QWORD *)&v71 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v71 + 1));
                }
                do
                  v78 = __ldaxr(v72);
                while (__stlxr(v78 - 1, v72));
                if (!v78)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 16))(*((_QWORD *)&v71 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v71 + 1));
                }
              }
              else
              {
                *(_OWORD *)&v270[8] = __s.__r_.__value_.__l.__size_;
                *(_QWORD *)&v270[24] = *(_QWORD *)v269;
                *(_OWORD *)&v270[32] = *(_OWORD *)&v269[8];
              }
              v111 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
              if (__s.__r_.__value_.__r.__words[2])
              {
                v112 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              v264 = &off_24EC715B8;
              v114 = v266;
              if (v266)
              {
                v115 = (unint64_t *)&v266->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
              }
              v117 = atomic_load((unsigned __int8 *)&qword_2540CD070);
              if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD070))
              {
                qword_2540CD220 = 0;
                unk_2540CD228 = 0;
                qword_2540CD218 = (uint64_t)&qword_2540CD220;
                __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CD218, &dword_22314D000);
                __cxa_guard_release(&qword_2540CD070);
              }
              v118 = sub_2242A78F0((uint64_t)&v244);
              sub_223C8536C((uint64_t **)&qword_2540CD218, (float)((float)v68 * a4) | ((unint64_t)(float)((float)HIDWORD(v68) * a4) << 32), v118, 1u, (std::__shared_weak_count_vtbl ***)&v262);
              sub_2242A7370(v262, (uint64_t)v259);
              if (!v261
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 404, (uint64_t)"buffer_opt", 10, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v247 = &off_24EC715B8;
              v248 = v259[1];
              v249 = v259[2];
              if (v259[2])
              {
                v119 = (unint64_t *)(v259[2] + 8);
                do
                  v120 = __ldxr(v119);
                while (__stxr(v120 + 1, v119));
              }
              sub_2242AA1D0((uint64_t)&v247, &v258);
              if (!v258.__r_.__value_.__l.__size_)
                goto LABEL_418;
              v122 = *(_QWORD *)v258.__r_.__value_.__l.__size_;
              v121 = *(std::__shared_weak_count **)(v258.__r_.__value_.__l.__size_ + 8);
              if (v121)
              {
                v123 = (unint64_t *)&v121->__shared_owners_;
                do
                  v124 = __ldxr(v123);
                while (__stxr(v124 + 1, v123));
                do
                  v125 = __ldaxr(v123);
                while (__stlxr(v125 - 1, v123));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              if (!v122)
              {
LABEL_418:
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 408, (uint64_t)"out_iosurface", 13, (uint64_t)"Expect IOSurface backed pixel buffer", 36, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
              }
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Downsample";
              __s.__r_.__value_.__l.__size_ = 10;
              v126 = *(unsigned __int8 *)(a3 + 23);
              if ((v126 & 0x80u) == 0)
                v127 = a3;
              else
                v127 = *(_QWORD *)a3;
              if ((v126 & 0x80u) != 0)
                v126 = *(_QWORD *)(a3 + 8);
              __s.__r_.__value_.__r.__words[2] = v127;
              *(_QWORD *)v269 = v126;
              sub_2231A9820((uint64_t)&__s, (uint64_t)&v269[8], 0, 0, &__p);
              sub_2244E116C((uint64_t)&v258, (uint64_t *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v255[0] = &off_24EC715B8;
              v255[1] = v248;
              v256 = (std::__shared_weak_count *)v249;
              if (v249)
              {
                v128 = (unint64_t *)(v249 + 8);
                do
                  v129 = __ldxr(v128);
                while (__stxr(v129 + 1, v128));
              }
              sub_22328CFD4((uint64_t)v255, &__s);
              v255[0] = &off_24EC715B8;
              v130 = v256;
              if (v256)
              {
                v131 = (unint64_t *)&v256->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              v133 = *(_QWORD *)&v270[8];
              if (*(_QWORD *)&v270[8])
              {
                v134 = *(std::__shared_weak_count **)&v270[16];
                if (*(_QWORD *)&v270[16])
                {
                  v135 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                  do
                    v137 = __ldaxr(v135);
                  while (__stlxr(v137 - 1, v135));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                  v138 = *(std::__shared_weak_count **)&v270[16];
                  v133 = *(_QWORD *)&v270[8];
                  if (*(_QWORD *)&v270[16])
                  {
                    v139 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                    do
                      v141 = __ldaxr(v139);
                    while (__stlxr(v141 - 1, v139));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                }
                (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v133 + 96))(&__p, v133, 0);
                size = __s.__r_.__value_.__l.__size_;
                if (__s.__r_.__value_.__l.__size_)
                {
LABEL_227:
                  v143 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                  if (__s.__r_.__value_.__r.__words[2])
                  {
                    v144 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                    do
                      v145 = __ldxr(v144);
                    while (__stxr(v145 + 1, v144));
                    do
                      v146 = __ldaxr(v144);
                    while (__stlxr(v146 - 1, v144));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                    v147 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                    size = __s.__r_.__value_.__l.__size_;
                    if (__s.__r_.__value_.__r.__words[2])
                    {
                      v148 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                      do
                        v149 = __ldxr(v148);
                      while (__stxr(v149 + 1, v148));
                      do
                        v150 = __ldaxr(v148);
                      while (__stlxr(v150 - 1, v148));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                  }
                  (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)size + 96))(&v267, size, 1);
                  v151 = *(_DWORD *)&v269[12];
                  if (!*(_DWORD *)&v269[12])
                    goto LABEL_250;
                  goto LABEL_243;
                }
              }
              else
              {
                __p.__r_.__value_.__r.__words[0] = 0;
                size = __s.__r_.__value_.__l.__size_;
                if (__s.__r_.__value_.__l.__size_)
                  goto LABEL_227;
              }
              v267 = 0;
              v151 = *(_DWORD *)&v269[12];
              if (!*(_DWORD *)&v269[12])
              {
LABEL_250:
                v162 = v267;
                v267 = 0;
                if (v162)
                  (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
                v163 = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = 0;
                if (v163)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v163 + 8))(v163);
                v164 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                if (__s.__r_.__value_.__r.__words[2])
                {
                  v165 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                  do
                    v166 = __ldaxr(v165);
                  while (__stlxr(v166 - 1, v165));
                  if (!v166)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                v258.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC76F28;
                v167 = (std::__shared_weak_count *)v258.__r_.__value_.__r.__words[2];
                if (v258.__r_.__value_.__r.__words[2])
                {
                  v168 = (unint64_t *)(v258.__r_.__value_.__r.__words[2] + 8);
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                if (v261)
                {
                  (*(void (**)(uint64_t *))v259[0])(v259);
                }
                else if (v260 < 0)
                {
                  operator delete((void *)v259[1]);
                }
                v170 = v263;
                if (v263)
                {
                  v171 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                v173 = *(std::__shared_weak_count **)&v270[16];
                if (*(_QWORD *)&v270[16])
                {
                  v174 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
                v176 = v246;
                v244 = &off_24EC715B8;
                if (v246)
                {
                  v177 = (unint64_t *)&v246->__shared_owners_;
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
LABEL_283:
                v242[0] = &off_24EC715B8;
                v242[1] = v248;
                v243 = (std::__shared_weak_count *)v249;
                if (v249)
                {
                  v179 = (unint64_t *)(v249 + 8);
                  do
                    v180 = __ldxr(v179);
                  while (__stxr(v180 + 1, v179));
                }
                sub_22429724C((uint64_t)v242, (uint64_t)v270);
                v181 = *(_OWORD *)&v270[8];
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28CD0;
                *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = *(_OWORD *)&v270[8];
                *(_OWORD *)&v269[14] = *(_OWORD *)&v270[38];
                *(_OWORD *)v269 = *(_OWORD *)&v270[24];
                v182 = *(_QWORD *)&v270[46] >> 16;
                *(_QWORD *)a1 = &off_24EC270A0;
                if (v182 != 1)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  sub_223C6DDDC((uint64_t)v270, (uint64_t)&__s);
                  std::logic_error::logic_error(exception, (const std::string *)v270);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
                }
                if ((_QWORD)v181)
                {
                  if (*((_QWORD *)&v181 + 1))
                  {
                    v183 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
                    do
                      v184 = __ldxr(v183);
                    while (__stxr(v184 + 1, v183));
                    *(_OWORD *)v270 = v181;
                    do
                      v185 = __ldxr(v183);
                    while (__stxr(v185 + 1, v183));
                    do
                      v186 = __ldaxr(v183);
                    while (__stlxr(v186 - 1, v183));
                    if (!v186)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v181 + 1) + 16))(*((_QWORD *)&v181 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v181 + 1));
                    }
                  }
                  else
                  {
                    *(_OWORD *)v270 = (unint64_t)v181;
                  }
                }
                else
                {
                  *(_OWORD *)v270 = 0uLL;
                }
                v187 = *(_QWORD *)&v269[16];
                v188 = *(_DWORD *)v269 != 0;
                v189 = *(_DWORD *)v269 == 0;
                if (!*(_DWORD *)&v269[4])
                  v189 = 1;
                if (v189)
                  v190 = 0;
                else
                  v190 = (unint64_t)*(unsigned int *)&v269[8] << 32;
                if (v189)
                  v191 = 0;
                else
                  v191 = *(_QWORD *)v269;
                if (HIDWORD(v191) * HIDWORD(v190) == -1
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v192 = v190 | v188;
                v193 = *(_WORD *)&v269[28];
                v194 = *(_OWORD *)v270;
                if (*(_QWORD *)&v270[8])
                {
                  v195 = (unint64_t *)(*(_QWORD *)&v270[8] + 8);
                  do
                    v196 = __ldxr(v195);
                  while (__stxr(v196 + 1, v195));
                  *(_OWORD *)(a1 + 8) = v194;
                  *(_QWORD *)(a1 + 24) = v187;
                  *(_QWORD *)(a1 + 32) = v191;
                  *(_QWORD *)(a1 + 40) = v192;
                  *(_WORD *)(a1 + 48) = v193;
                  do
                    v197 = __ldaxr(v195);
                  while (__stlxr(v197 - 1, v195));
                  if (!v197)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v194 + 1) + 16))(*((_QWORD *)&v194 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v194 + 1));
                  }
                }
                else
                {
                  *(_OWORD *)(a1 + 8) = *(unint64_t *)v270;
                  *(_QWORD *)(a1 + 24) = v187;
                  *(_QWORD *)(a1 + 32) = v191;
                  *(_QWORD *)(a1 + 40) = v192;
                  *(_WORD *)(a1 + 48) = v193;
                }
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC28CD0;
                v198 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
                if (__s.__r_.__value_.__r.__words[2])
                {
                  v199 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
                  do
                    v200 = __ldaxr(v199);
                  while (__stlxr(v200 - 1, v199));
                  if (!v200)
                  {
                    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                    std::__shared_weak_count::__release_weak(v198);
                  }
                }
                v242[0] = &off_24EC715B8;
                v201 = v243;
                if (v243)
                {
                  v202 = (unint64_t *)&v243->__shared_owners_;
                  do
                    v203 = __ldaxr(v202);
                  while (__stlxr(v203 - 1, v202));
                  if (!v203)
                  {
                    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                    std::__shared_weak_count::__release_weak(v201);
                  }
                }
                v247 = &off_24EC715B8;
                v108 = (std::__shared_weak_count *)v249;
                if (v249)
                {
                  v204 = (unint64_t *)(v249 + 8);
                  do
                    v110 = __ldaxr(v204);
                  while (__stlxr(v110 - 1, v204));
                  goto LABEL_329;
                }
                goto LABEL_331;
              }
LABEL_243:
              if (*(_DWORD *)&v269[8])
              {
                v152 = 0;
                v153 = 1;
                v154 = 1.0 / a4;
                do
                {
                  if (v153)
                  {
                    v155 = 0;
                    v156 = 0;
                    v157 = *(_DWORD *)&v269[16];
                    v158 = *(_QWORD *)v269 + *(_DWORD *)&v269[20] * v152;
                    v159 = *(_DWORD *)&v270[40];
                    v160 = *(_QWORD *)&v270[24];
                    v161 = *(_DWORD *)&v270[44] * (int)(float)(v154 * (float)v152);
                    do
                    {
                      *(_BYTE *)(v158 + v155) = *(_BYTE *)(v160
                                                         + (v161
                                                                        + v159
                                                                        * (int)(float)(v154 * (float)v156++)));
                      v153 = *(_DWORD *)&v269[8];
                      v155 += v157;
                    }
                    while (v156 < *(unsigned int *)&v269[8]);
                    v151 = *(_DWORD *)&v269[12];
                  }
                  ++v152;
                }
                while (v152 < v151);
              }
              goto LABEL_250;
            }
            v62 = v245;
          }
          v247 = &off_24EC715B8;
          v248 = (uint64_t)v62;
          v249 = (uint64_t)v246;
          v245 = 0;
          v246 = 0;
          v244 = &off_24EC715B8;
          goto LABEL_283;
        }
        v206 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v207 = atomic_load((unsigned __int8 *)&qword_2540CD060);
        if ((v207 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD060))
        {
LABEL_339:
          sub_223C6D9BC();
          *(_QWORD *)v270 = "Attempting to create an ";
          *(_QWORD *)&v270[8] = 24;
          v208 = byte_2540CD1FF;
          if (byte_2540CD1FF >= 0)
          {
            v209 = &qword_2540CD1E8;
          }
          else
          {
            v208 = unk_2540CD1F0;
            v209 = (uint64_t *)qword_2540CD1E8;
          }
          *(_QWORD *)&v270[16] = v209;
          *(_QWORD *)&v270[24] = v208;
          *(_QWORD *)&v270[32] = " from an ";
          *(_QWORD *)&v270[40] = 9;
          v210 = byte_2540CD217;
          v211 = &qword_2540CD200;
          if (byte_2540CD217 < 0)
          {
            v210 = qword_2540CD208;
            v211 = (uint64_t *)qword_2540CD200;
          }
          *(_QWORD *)&v270[48] = v211;
          v271 = v210;
          sub_2231A9820((uint64_t)v270, (uint64_t)&v272, 0, 0, &v258);
          v212 = *(_QWORD *)(a2 + 8);
          v213 = *(std::__shared_weak_count **)(a2 + 16);
          if (v213)
          {
            v215 = (unint64_t *)&v213->__shared_owners_;
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
            do
              v217 = __ldaxr(v215);
            while (__stlxr(v217 - 1, v215));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
            if (v212)
            {
              v212 = *(_QWORD *)(a2 + 8);
              v221 = *(std::__shared_weak_count **)(a2 + 16);
              if (v221)
              {
                v222 = (unint64_t *)&v221->__shared_owners_;
                do
                  v223 = __ldxr(v222);
                while (__stxr(v223 + 1, v222));
                do
                  v224 = __ldaxr(v222);
                while (__stlxr(v224 - 1, v222));
                if (!v224)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
              goto LABEL_373;
            }
          }
          else if (v212)
          {
LABEL_373:
            v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 80))(v212);
            v227 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
            v228 = &v258;
            if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v227 = v258.__r_.__value_.__l.__size_;
              v228 = (std::string *)v258.__r_.__value_.__r.__words[0];
            }
            *(_QWORD *)v270 = v228;
            *(_QWORD *)&v270[8] = v227;
            *(_QWORD *)&v270[16] = " but the other image contains an incompatible buffer type ";
            *(_QWORD *)&v270[24] = 58;
            *(_QWORD *)&v270[32] = v225;
            *(_QWORD *)&v270[40] = v226;
            sub_2231A9820((uint64_t)v270, (uint64_t)&v270[48], 0, 0, &__p);
            LOBYTE(v218) = *((_BYTE *)&v258.__r_.__value_.__s + 23);
LABEL_386:
            if ((v218 & 0x80) != 0)
              operator delete(v258.__r_.__value_.__l.__data_);
            std::logic_error::logic_error(v206, &__p);
            v206->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v206, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
          }
          v218 = SHIBYTE(v258.__r_.__value_.__r.__words[2]);
          if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v219 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
          else
            v219 = v258.__r_.__value_.__l.__size_;
          v220 = v219 + 46;
          if (v219 + 46 >= 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          if (v220 > 0x16)
          {
            v230 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v220 | 7) != 0x17)
              v230 = v220 | 7;
            v231 = v230 + 1;
            p_p = (std::string *)operator new(v230 + 1);
            __p.__r_.__value_.__l.__size_ = v219 + 46;
            __p.__r_.__value_.__r.__words[2] = v231 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            if (!v219)
              goto LABEL_385;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            p_p = &__p;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v219 + 46;
          }
          if (v218 >= 0)
            v232 = &v258;
          else
            v232 = (std::string *)v258.__r_.__value_.__r.__words[0];
          memmove(p_p, v232, v219);
LABEL_385:
          strcpy((char *)p_p + v219, " but the other image does not contain a buffer");
          goto LABEL_386;
        }
        HIBYTE(v259[2]) = 16;
        strcpy((char *)v259, "ConstSharedImage");
        v233 = sub_2231B47AC();
        if (SHIBYTE(v233->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_223197FA4(&__s, v233->__r_.__value_.__l.__data_, v233->__r_.__value_.__l.__size_);
        }
        else
        {
          v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
          __s.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v234;
        }
        sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v270);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v235 = sub_2232101F4();
        if (*((char *)v235 + 23) < 0)
        {
          sub_223197FA4(&__s, *(void **)v235, *((_QWORD *)v235 + 1));
        }
        else
        {
          v236 = *v235;
          __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v235 + 2);
          *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v236;
        }
        sub_22456D060(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v270[24]);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        sub_22319BD1C(&v264, (uint64_t)v270, 2uLL);
        sub_2245730F4((char *)v259, (uint64_t *)&v264, (std::string *)&qword_2540CD1E8, v237, v238);
        v239 = (void **)v264;
        if (v264)
        {
          v240 = v265;
          v241 = v264;
          if (v265 != v264)
          {
            do
            {
              if (*((char *)v240 - 1) < 0)
                operator delete(*(v240 - 3));
              v240 -= 3;
            }
            while (v240 != v239);
            v241 = v264;
          }
          v265 = v239;
          operator delete(v241);
          if ((v270[47] & 0x80000000) != 0)
          {
LABEL_402:
            operator delete(*(void **)&v270[24]);
            if ((v270[23] & 0x80000000) == 0)
              goto LABEL_403;
            goto LABEL_414;
          }
        }
        else if ((v270[47] & 0x80000000) != 0)
        {
          goto LABEL_402;
        }
        if ((v270[23] & 0x80000000) == 0)
        {
LABEL_403:
          if ((SHIBYTE(v259[2]) & 0x80000000) == 0)
          {
LABEL_405:
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD1E8, &dword_22314D000);
            __cxa_guard_release(&qword_2540CD060);
            goto LABEL_339;
          }
LABEL_404:
          operator delete((void *)v259[0]);
          goto LABEL_405;
        }
LABEL_414:
        operator delete(*(void **)v270);
        if ((SHIBYTE(v259[2]) & 0x80000000) == 0)
          goto LABEL_405;
        goto LABEL_404;
      }
LABEL_62:
      LOBYTE(v250) = 0;
      v254 = 0;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 431, (uint64_t)"!CV3D_TARGET_IS_PUBLIC", 22, (uint64_t)"POR should use CVBuffer", 23, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = (float)((float)*(unsigned int *)(a2 + 32) * a4);
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = (float)((float)*(unsigned int *)(a2 + 36) * a4);
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC29028;
      v264 = &off_24EC20D08;
      sub_22449897C(&__p, (uint64_t)v270);
      v43 = operator new();
      *(_QWORD *)v43 = &off_24EC20D50;
      *(_OWORD *)(v43 + 8) = *(_OWORD *)&v270[8];
      *(_OWORD *)(v43 + 20) = *(_OWORD *)&v270[20];
      *(_OWORD *)(v43 + 40) = *(_OWORD *)&v270[40];
      *(_QWORD *)(v43 + 56) = v271;
      *(_OWORD *)(v43 + 64) = v272;
      v258.__r_.__value_.__r.__words[0] = v43;
      v259[0] = v43;
      v44 = (_QWORD *)operator new();
      *v44 = &off_24EC24880;
      v44[1] = 0;
      v44[2] = 0;
      v44[3] = v43;
      v259[1] = (uint64_t)v44;
      v258.__r_.__value_.__r.__words[0] = 0;
      sub_2232C54C4((uint64_t *)&__s.__r_.__value_.__l.__size_, v259);
      v45 = (std::__shared_weak_count *)v259[1];
      if (v259[1])
      {
        v46 = (unint64_t *)(v259[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v258.__r_.__value_.__r.__words[0];
      if (v258.__r_.__value_.__r.__words[0])
      {
        v49 = *(void **)(v258.__r_.__value_.__r.__words[0] + 48);
        if (v49)
          free(v49);
        *(_QWORD *)(v48 + 48) = 0;
        MEMORY[0x227684CE8](v48, 0x1091C406A8758A4);
      }
      v50 = *(_QWORD *)(a2 + 8);
      v51 = *(std::__shared_weak_count **)(a2 + 16);
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        do
          v54 = __ldaxr(v52);
        while (__stlxr(v54 - 1, v52));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        if (!v50)
          goto LABEL_136;
        v50 = *(_QWORD *)(a2 + 8);
        v55 = *(std::__shared_weak_count **)(a2 + 16);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      else if (!v50)
      {
        goto LABEL_136;
      }
      if (*(_BYTE *)(a2 + 49))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v50 + 96))(v270, v50, 0);
        v80 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
        v79 = __s.__r_.__value_.__l.__size_;
        if (__s.__r_.__value_.__r.__words[2])
          goto LABEL_124;
        goto LABEL_137;
      }
LABEL_136:
      *(_QWORD *)v270 = 0;
      v80 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
      v79 = __s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__r.__words[2])
      {
LABEL_124:
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
        do
          v83 = __ldaxr(v81);
        while (__stlxr(v83 - 1, v81));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
        if (!v79)
          goto LABEL_141;
        v84 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
        v79 = __s.__r_.__value_.__l.__size_;
        if (__s.__r_.__value_.__r.__words[2])
        {
          v85 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
          do
            v87 = __ldaxr(v85);
          while (__stlxr(v87 - 1, v85));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
LABEL_138:
        if (v269[25])
        {
          (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v79 + 96))(v259, v79, 1);
          v88 = *(_DWORD *)&v269[12];
          if (!*(_DWORD *)&v269[12])
            goto LABEL_149;
          goto LABEL_142;
        }
LABEL_141:
        v259[0] = 0;
        v88 = *(_DWORD *)&v269[12];
        if (!*(_DWORD *)&v269[12])
          goto LABEL_149;
LABEL_142:
        if (*(_DWORD *)&v269[8])
        {
          v89 = 0;
          v90 = 1;
          do
          {
            if (v90)
            {
              v91 = 0;
              v92 = 0;
              v93 = *(_DWORD *)&v269[16];
              v94 = *(_QWORD *)v269 + *(_DWORD *)&v269[20] * v89;
              do
              {
                *(_BYTE *)(v94 + v91) = *(_BYTE *)(*(_QWORD *)(a2 + 24)
                                                 + (*(_DWORD *)(a2 + 44)
                                                                * (int)(float)((float)(1.0 / a4) * (float)v89)
                                                                + *(_DWORD *)(a2 + 40)
                                                                * (int)(float)((float)(1.0 / a4)
                                                                             * (float)v92++)));
                v90 = *(_DWORD *)&v269[8];
                v91 += v93;
              }
              while (v92 < *(unsigned int *)&v269[8]);
              v88 = *(_DWORD *)&v269[12];
            }
            ++v89;
          }
          while (v89 < v88);
        }
LABEL_149:
        v95 = v259[0];
        v259[0] = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
        v96 = *(_QWORD *)v270;
        *(_QWORD *)v270 = 0;
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
        *(_QWORD *)a1 = &off_24EC270A0;
        v97 = *(_OWORD *)&__s.__r_.__value_.__r.__words[1];
        if (__s.__r_.__value_.__r.__words[2])
        {
          v98 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
          v100 = *(_WORD *)&v269[24];
          do
            v101 = __ldxr(v98);
          while (__stxr(v101 + 1, v98));
          v102 = *(_QWORD *)v269;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)&v269[8];
          do
            v103 = __ldxr(v98);
          while (__stxr(v103 + 1, v98));
          *(_OWORD *)(a1 + 8) = v97;
          *(_QWORD *)(a1 + 24) = v102;
          *(_WORD *)(a1 + 48) = v100;
          do
            v104 = __ldaxr(v98);
          while (__stlxr(v104 - 1, v98));
          if (!v104)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v97 + 1) + 16))(*((_QWORD *)&v97 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v97 + 1));
          }
          do
            v105 = __ldaxr(v98);
          while (__stlxr(v105 - 1, v98));
          if (!v105)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v97 + 1) + 16))(*((_QWORD *)&v97 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v97 + 1));
          }
        }
        else
        {
          v106 = *(_WORD *)&v269[24];
          v107 = *(_QWORD *)v269;
          *(_QWORD *)(a1 + 8) = __s.__r_.__value_.__l.__size_;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = v107;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)&v269[8];
          *(_WORD *)(a1 + 48) = v106;
        }
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC29028;
        v108 = (std::__shared_weak_count *)__s.__r_.__value_.__r.__words[2];
        if (__s.__r_.__value_.__r.__words[2])
        {
          v109 = (unint64_t *)(__s.__r_.__value_.__r.__words[2] + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
LABEL_329:
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
LABEL_331:
        if (v254)
        {
          v250 = &off_24EC61328;
          v24 = v252;
          if (v252)
          {
            v205 = (unint64_t *)&v252->__shared_owners_;
            do
              v26 = __ldaxr(v205);
            while (__stlxr(v26 - 1, v205));
LABEL_335:
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
            return;
          }
        }
        return;
      }
LABEL_137:
      if (!v79)
        goto LABEL_141;
      goto LABEL_138;
    }
LABEL_42:
    if (v30)
      goto LABEL_43;
    goto LABEL_62;
  }
  *(_QWORD *)v270 = &off_24EC29028;
  sub_223C0365C((uint64_t *)&v270[8]);
  *(_QWORD *)a1 = &off_24EC270A0;
  v9 = *(_OWORD *)&v270[8];
  if (*(_QWORD *)&v270[16])
  {
    v10 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *(_WORD *)&v270[48];
    do
      v13 = __ldxr(v10);
    while (__stxr(v13 + 1, v10));
    v14 = *(_QWORD *)&v270[24];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v270[32];
    do
      v15 = __ldxr(v10);
    while (__stxr(v15 + 1, v10));
    *(_OWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 24) = v14;
    *(_WORD *)(a1 + 48) = v12;
    do
      v16 = __ldaxr(v10);
    while (__stlxr(v16 - 1, v10));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
    }
    do
      v17 = __ldaxr(v10);
    while (__stlxr(v17 - 1, v10));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  else
  {
    v22 = *(_WORD *)&v270[48];
    v23 = *(_QWORD *)&v270[24];
    *(_OWORD *)(a1 + 8) = *(unint64_t *)&v270[8];
    *(_QWORD *)(a1 + 24) = v23;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v270[32];
    *(_WORD *)(a1 + 48) = v22;
  }
  *(_QWORD *)v270 = &off_24EC29028;
  v24 = *(std::__shared_weak_count **)&v270[16];
  if (*(_QWORD *)&v270[16])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_335;
  }
}

void sub_223C6D424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void **__p,void **a53)
{
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  void **v57;
  void **v58;
  unint64_t *p_shared_owners;
  unint64_t v60;

  if (__p)
  {
    v57 = a53;
    v58 = __p;
    if (a53 != __p)
    {
      do
      {
        if (*((char *)v57 - 1) < 0)
          operator delete(*(v57 - 3));
        v57 -= 3;
      }
      while (v57 != __p);
      v58 = __p;
    }
    operator delete(v58);
  }
  if (*(char *)(v55 - 145) < 0)
    operator delete(*(void **)(v55 - 168));
  if (*(char *)(v55 - 169) < 0)
    operator delete(*(void **)(v55 - 192));
  if (a46 < 0)
    operator delete(a41);
  __cxa_guard_abort(&qword_2540CD060);
  __cxa_free_exception(v53);
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223C6D7B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    *(_QWORD *)result = &off_24EC61328;
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

_QWORD *sub_223C6D834(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC61328;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C6D8A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC61328;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C6D91C()
{
  return 1;
}

uint64_t sub_223C6D924(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223C6D92C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223C6D940(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_223C6D9BC()
{
  unsigned __int8 v0;
  std::string *v1;
  __int128 *v2;
  int64x2_t v3;
  int8x16_t v4;
  void *v5[3];
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2540CD068);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CD068))
  {
    sub_223174DE4(v6, "ConstSharedImage");
    v1 = sub_2231B47AC();
    sub_223C6DBAC((uint64_t)v8, (uint64_t)v1);
    v2 = sub_2231A27C0();
    sub_223C6DBAC((uint64_t)&__p, (uint64_t)v2);
    sub_22319BD1C(v5, (uint64_t)v8, 2uLL);
    sub_2245730F4((char *)v6, (uint64_t *)v5, (std::string *)&qword_2540CD200, v3, v4);
    sub_22319BB48(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD200, &dword_22314D000);
          __cxa_guard_release(&qword_2540CD068);
          return;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
}

void sub_223C6DAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_22319BB48((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2540CD068);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2540CD068);
  _Unwind_Resume(a1);
}

void sub_223C6DBAC(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_223197FA4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223C6DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C6DC64(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223C6DCCC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223C6DD34()
{
  return 1;
}

uint64_t sub_223C6DD3C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223C6DD44@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223C6DD58(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_223C6DDDC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  unsigned int v5;

  sub_223C6D9BC();
  v3 = sub_2232BD8F4();
  v5 = *(_DWORD *)(a2 + 48);
  return sub_2231A08B0("Attempting to create an ", (uint64_t)&qword_2540CD200, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

void sub_223C6DE48(uint64_t a1, uint64_t a2, __int16 *a3)
{
  std::string *v12;
  std::string *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  unint64_t v39;
  std::string v40;
  double v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  double *v46;

  _H0 = *a3;
  __asm { FCVT            S0, H0; __val }
  std::to_string(&v40, _S0);
  v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v40;
  else
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v15 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v40.__r_.__value_.__r.__words[2]) - 1)
      {
        v12 = &v40;
        goto LABEL_17;
      }
LABEL_15:
      v41 = *(double *)&a2;
      v42 = &v40;
      v43 = a2;
      v44 = &v40;
      v45 = &v40;
      v17 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v17 == -1)
        sub_22316DD70();
LABEL_16:
      __p[0] = &v41;
      ((void (*)(void **, uint64_t))off_24EC60FC8[v17])(__p, a2);
LABEL_44:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_45:
      operator delete(v40.__r_.__value_.__l.__data_);
      return;
    }
    v16 = v15[size--];
  }
  while (v16 == 48);
  if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v40.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  v18 = (_QWORD *)operator new();
  sub_22456E918((uint64_t)v18, (char *)v12);
  __p[0] = v18;
  v41 = 0.0;
  v19 = (_QWORD *)MEMORY[0x227684574](v18, &v41);
  v20 = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5;
  _S0 = v41;
  __asm { FCVT            H8, S0 }
  v22 = MEMORY[0x24BEDB7F0];
  v23 = *MEMORY[0x24BEDB7F0];
  *v18 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
  v18[3] = MEMORY[0x24BEDB848] + 16;
  v18[2] = v24;
  if (*((char *)v18 + 111) < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v18 + 16);
  MEMORY[0x227684CE8](v18, 0x10B2C40EED050F3);
  LOWORD(_S0) = 0;
  if (!v20)
    _S0 = _S8;
  _H1 = *a3;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
  }
  if (_S0 != _S1)
  {
    v41 = *(double *)&a2;
    v42 = &v40;
    v43 = a2;
    v44 = &v40;
    v45 = &v40;
    v17 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v17 == -1)
      sub_22316DD70();
    goto LABEL_16;
  }
  v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v40;
  else
    v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v40.__r_.__value_.__l.__size_;
  v31 = 1;
  if (v30->__r_.__value_.__s.__data_[size] == 46)
    v31 = 2;
  v32 = v31 + size;
  if (v29 >= v32)
    v33 = v32;
  else
    v33 = v29;
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    __p[1] = (void *)v33;
    v39 = v36 | 0x8000000000000000;
    __p[0] = v34;
    goto LABEL_41;
  }
  HIBYTE(v39) = v33;
  v34 = __p;
  if (v33)
LABEL_41:
    memmove(v34, v30, v33);
  *((_BYTE *)v34 + v33) = 0;
  v41 = *(double *)&a2;
  v42 = (std::string *)__p;
  v43 = a2;
  v44 = (std::string *)__p;
  v45 = (std::string *)__p;
  v37 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v37 == -1)
    sub_22316DD70();
  v46 = &v41;
  ((void (*)(double **, uint64_t))off_24EC60F80[v37])(&v46, a2);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_44;
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
}

void sub_223C6E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C6E24C(uint64_t a1, __int16 *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  sub_223C6DE48((uint64_t)v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_22316DD70();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F98[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F50[v4])(v6, v3);
  return result;
}

void sub_223C6E2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC60F50[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C6E31C(uint64_t a1, float *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  _QWORD v6[2];

  v4 = 0;
  sub_223208764((uint64_t)v6, (uint64_t)v3, a2);
  if (v4 == -1)
    sub_22316DD70();
  v6[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F98[v4])(v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC60F50[v4])(v6, v3);
  return result;
}

void sub_223C6E3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC60F50[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223C6E3EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  float *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  float *v57;
  float *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  size_t v63;
  const void *v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  _BOOL4 v83;
  float v84;
  float v85;
  float *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101[3];
  uint64_t v102;

  v4 = *a1;
  v5 = *a2;
  v6 = *(unsigned __int8 *)(*a2 + 56);
  if (*(_BYTE *)(*a1 + 56))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((*(_BYTE *)(*a1 + 56) != 0) != (v6 != 0))
      return 0;
  }
  else if (!sub_223B8A384(*a1, *a2))
  {
    return 0;
  }
  v8 = *(unsigned __int8 *)(v5 + 120);
  if (*(_BYTE *)(v4 + 120))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if ((*(_BYTE *)(v4 + 120) != 0) != (v8 != 0))
      return 0;
  }
  else if (!sub_223B8A384(v4 + 64, v5 + 64))
  {
    return 0;
  }
  v10 = *(unsigned __int8 *)(v5 + 208);
  if (*(_BYTE *)(v4 + 208))
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if ((*(_BYTE *)(v4 + 208) != 0) != (v10 != 0))
      return 0;
  }
  else if (!sub_223B8A8DC(v4 + 128, v5 + 128))
  {
    return 0;
  }
  v12 = *(_QWORD *)(v4 + 216);
  v13 = *(_QWORD *)(v5 + 216);
  if (v12 && v13)
  {
    result = sub_223B8A384(v12, v13);
    if (!(_DWORD)result)
      return result;
    v15 = *(_QWORD *)(v12 + 64);
    v16 = *(std::__shared_weak_count **)(v12 + 72);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (!v15)
        goto LABEL_57;
      v15 = *(_QWORD *)(v12 + 64);
      v20 = *(std::__shared_weak_count **)(v12 + 72);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        do
          v23 = __ldaxr(v21);
        while (__stlxr(v23 - 1, v21));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else if (!v15)
    {
      goto LABEL_57;
    }
    if (*(_BYTE *)(v12 + 137))
    {
      (*(void (**)(float **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v15 + 96))(v101, v15, 0);
      goto LABEL_58;
    }
LABEL_57:
    v101[0] = 0;
LABEL_58:
    v29 = *(_QWORD *)(v13 + 64);
    v30 = *(std::__shared_weak_count **)(v13 + 72);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      if (!v29)
        goto LABEL_74;
      v29 = *(_QWORD *)(v13 + 64);
      v34 = *(std::__shared_weak_count **)(v13 + 72);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    else if (!v29)
    {
      goto LABEL_74;
    }
    if (*(_BYTE *)(v13 + 137))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v29 + 96))(&v102, v29, 0);
LABEL_75:
      v38 = *(_DWORD *)(v12 + 120);
      if (v38 == *(_DWORD *)(v13 + 120))
      {
        v39 = *(_DWORD *)(v12 + 124);
        if (v39 == *(_DWORD *)(v13 + 124))
        {
          v40 = 1;
          if (!v38 || !v39)
          {
LABEL_134:
            v65 = v102;
            v102 = 0;
            if (v65)
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
            v66 = v101[0];
            v101[0] = 0;
            if (v66)
              (*(void (**)(float *))(*(_QWORD *)v66 + 8))(v66);
            if (!v40 || (sub_223C68D6C(v12 + 144, v13 + 144) & 1) == 0)
              return 0;
            goto LABEL_42;
          }
          v41 = *(unsigned int *)(v12 + 132);
          v99 = *(unsigned int *)(v13 + 128);
          v100 = *(unsigned int *)(v12 + 128);
          v98 = *(unsigned int *)(v13 + 132);
          v42 = *(float **)(v12 + 112);
          if (*(_BYTE *)(v12 + 136) && v42)
          {
            v43 = *(_QWORD *)(v12 + 64);
            v44 = *(std::__shared_weak_count **)(v12 + 72);
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
              do
                v47 = __ldaxr(v45);
              while (__stlxr(v47 - 1, v45));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v43 + 88))(v43, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
            v42 = *(float **)(v12 + 112);
          }
          v48 = *(float **)(v13 + 112);
          if (*(_BYTE *)(v13 + 136) && v48)
          {
            v49 = *(_QWORD *)(v13 + 64);
            v50 = *(std::__shared_weak_count **)(v13 + 72);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
              do
                v53 = __ldaxr(v51);
              while (__stlxr(v53 - 1, v51));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v49 + 88))(v49, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
            v48 = *(float **)(v13 + 112);
          }
          v54 = v38 - 1;
          v55 = v39 - 1;
          if (v39 == 1)
          {
LABEL_105:
            if (v38 == 1)
            {
LABEL_132:
              v40 = *v42 == *v48;
              goto LABEL_134;
            }
            while (*v42 == *v48)
            {
              v42 += v100;
              v48 += v99;
              if (!--v54)
                goto LABEL_132;
            }
          }
          else if (v38 == 1)
          {
            while (*v42 == *v48)
            {
              v42 += v41;
              v48 += v98;
              if (!--v55)
                goto LABEL_132;
            }
          }
          else
          {
            v56 = 0;
LABEL_100:
            v57 = v48;
            v58 = v42;
            v59 = v38 - 1;
            while (*v58 == *v57)
            {
              v58 += v100;
              v57 += v99;
              if (!--v59)
              {
                if (*v58 != *v57)
                  break;
                v42 += v41;
                v48 += v98;
                if (++v56 != v55)
                  goto LABEL_100;
                goto LABEL_105;
              }
            }
          }
        }
      }
      v40 = 0;
      goto LABEL_134;
    }
LABEL_74:
    v102 = 0;
    goto LABEL_75;
  }
  if ((v12 != 0) != (v13 != 0))
    return 0;
LABEL_42:
  v24 = a1[1];
  v25 = a2[1];
  v26 = *(unsigned __int8 *)(v25 + 56);
  if (*(_BYTE *)(v24 + 56))
    v27 = v26 == 0;
  else
    v27 = 1;
  if (v27)
  {
    if ((*(_BYTE *)(v24 + 56) != 0) != (v26 != 0))
      return 0;
  }
  else
  {
    v28 = sub_223B8B8E4(a1[1], a2[1]);
    if ((v28 & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(v24 + 120) && *(_BYTE *)(v25 + 120))
  {
    if (!sub_223B8A384(v24 + 64, v25 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(v24 + 120) != 0) != (*(_BYTE *)(v25 + 120) != 0))
  {
    return 0;
  }
  v60 = a1[2];
  v61 = a2[2];
  if (*(_BYTE *)(v60 + 80) && *(_BYTE *)(v61 + 80))
  {
    if (!sub_223B8B180(a1[2], a2[2]))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 80) != 0) != (*(_BYTE *)(v61 + 80) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v60 + 92) && *(_BYTE *)(v61 + 92))
  {
    if (*(_DWORD *)(v60 + 88) != *(_DWORD *)(v61 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 92) != 0) != (*(_BYTE *)(v61 + 92) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v60 + 100) && *(_BYTE *)(v61 + 100))
  {
    if (*(float *)(v60 + 96) != *(float *)(v61 + 96))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 100) != 0) != (*(_BYTE *)(v61 + 100) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v60 + 128) && *(_BYTE *)(v61 + 128))
  {
    v62 = *(const void **)(v60 + 104);
    v63 = *(_QWORD *)(v60 + 112) - (_QWORD)v62;
    v64 = *(const void **)(v61 + 104);
    if (v63 != *(_QWORD *)(v61 + 112) - (_QWORD)v64 || memcmp(v62, v64, v63))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 128) != 0) != (*(_BYTE *)(v61 + 128) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v60 + 140) && *(_BYTE *)(v61 + 140))
  {
    if (*(_DWORD *)(v60 + 136) != *(_DWORD *)(v61 + 136))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 140) != 0) != (*(_BYTE *)(v61 + 140) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v60 + 148) && *(_BYTE *)(v61 + 148))
  {
    if (*(_DWORD *)(v60 + 144) != *(_DWORD *)(v61 + 144))
      return 0;
  }
  else if ((*(_BYTE *)(v60 + 148) != 0) != (*(_BYTE *)(v61 + 148) != 0))
  {
    return 0;
  }
  result = sub_2231D0524((const void **)(v60 + 152), v61 + 152);
  if (!(_DWORD)result)
    return result;
  result = sub_223C6B188(v60 + 168, v61 + 168);
  if (!(_DWORD)result)
    return result;
  v67 = a1[3];
  v68 = a2[3];
  if (*(_BYTE *)(v67 + 56) && *(_BYTE *)(v68 + 56))
  {
    if (*(_QWORD *)(v67 + 24) != *(_QWORD *)(v68 + 24))
      return 0;
    v69 = *(_QWORD *)(v67 + 32);
    v70 = *(_QWORD *)(v68 + 32);
    if ((_DWORD)v69 != (_DWORD)v70)
      return 0;
    result = 0;
    if (HIDWORD(v69) != HIDWORD(v70) || ((*(_DWORD *)(v67 + 44) ^ *(_DWORD *)(v68 + 44)) & 0x7FFFFFFF) != 0)
      return result;
  }
  else if ((*(_BYTE *)(v67 + 56) != 0) != (*(_BYTE *)(v68 + 56) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(v67 + 120) && *(_BYTE *)(v68 + 120))
  {
    if (*(_QWORD *)(v67 + 88) != *(_QWORD *)(v68 + 88))
      return 0;
    v71 = *(_QWORD *)(v67 + 96);
    v72 = *(_QWORD *)(v68 + 96);
    if ((_DWORD)v71 != (_DWORD)v72)
      return 0;
    result = 0;
    if (HIDWORD(v71) != HIDWORD(v72) || ((*(_DWORD *)(v67 + 108) ^ *(_DWORD *)(v68 + 108)) & 0x3FFFFFFF) != 0)
      return result;
  }
  else if ((*(_BYTE *)(v67 + 120) != 0) != (*(_BYTE *)(v68 + 120) != 0))
  {
    return 0;
  }
  if (*(_QWORD *)(v67 + 128) != *(_QWORD *)(v68 + 128))
    return 0;
  if (*(_BYTE *)(v67 + 224) && *(_BYTE *)(v68 + 224))
  {
    if (*(_QWORD *)(v67 + 168) != *(_QWORD *)(v68 + 168))
      return 0;
    v73 = *(_QWORD *)(v67 + 180);
    v74 = *(_QWORD *)(v68 + 180);
    if ((_DWORD)v73 != (_DWORD)v74)
      return 0;
    result = 0;
    if (HIDWORD(v73) != HIDWORD(v74) || ((*(_DWORD *)(v67 + 196) ^ *(_DWORD *)(v68 + 196)) & 0x7FFFFFFF) != 0)
      return result;
  }
  else if ((*(_BYTE *)(v67 + 224) != 0) != (*(_BYTE *)(v68 + 224) != 0))
  {
    return 0;
  }
  if (!*(_BYTE *)(v67 + 312) || !*(_BYTE *)(v68 + 312))
  {
    if ((*(_BYTE *)(v67 + 312) != 0) != (*(_BYTE *)(v68 + 312) != 0))
      return 0;
    goto LABEL_188;
  }
  if (*(_QWORD *)(v67 + 256) != *(_QWORD *)(v68 + 256))
    return 0;
  v75 = *(_QWORD *)(v67 + 268);
  v76 = *(_QWORD *)(v68 + 268);
  if ((_DWORD)v75 != (_DWORD)v76)
    return 0;
  result = 0;
  if (HIDWORD(v75) == HIDWORD(v76) && ((*(_DWORD *)(v67 + 284) ^ *(_DWORD *)(v68 + 284)) & 0x7FFFFFFF) == 0)
  {
LABEL_188:
    if (*(_BYTE *)(v67 + 400) && *(_BYTE *)(v68 + 400))
    {
      if (!sub_223C6857C(v67 + 320, v68 + 320))
        return 0;
    }
    else if ((*(_BYTE *)(v67 + 400) != 0) != (*(_BYTE *)(v68 + 400) != 0))
    {
      return 0;
    }
    v77 = a1[4];
    v78 = a2[4];
    if (*(_BYTE *)(v77 + 56) && *(_BYTE *)(v78 + 56))
    {
      if ((sub_223B8B8E4(v77, v78) & 1) == 0)
        return 0;
    }
    else if ((*(_BYTE *)(v77 + 56) != 0) != (*(_BYTE *)(v78 + 56) != 0))
    {
      return 0;
    }
    v79 = a1[5];
    v80 = a2[5];
    if (*(_BYTE *)(v79 + 80) && *(_BYTE *)(v80 + 80))
    {
      if (!sub_223B8BE08(a1[5], a2[5]))
        return 0;
    }
    else if ((*(_BYTE *)(v79 + 80) != 0) != (*(_BYTE *)(v80 + 80) != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(v79 + 168) && *(_BYTE *)(v80 + 168))
    {
      if (!sub_223B8B180(v79 + 88, v80 + 88))
        return 0;
    }
    else if ((*(_BYTE *)(v79 + 168) != 0) != (*(_BYTE *)(v80 + 168) != 0))
    {
      return 0;
    }
    if (*(unsigned __int8 *)(v79 + 176) != *(unsigned __int8 *)(v80 + 176))
      return 0;
    v81 = *(float *)(v79 + 180);
    v82 = *(float *)(v80 + 180);
    v83 = v81 == v82;
    if (v81 == v82)
    {
      v84 = *(float *)(v79 + 184);
      v85 = *(float *)(v80 + 184);
      v83 = v84 == v85;
      if (v84 == v85)
        v83 = *(float *)(v79 + 188) == *(float *)(v80 + 188);
    }
    if (!v83 || *(_QWORD *)a1[6] != *(_QWORD *)a2[6])
      return 0;
    result = sub_223C6F038(a1[7], a2[7]);
    if (!(_DWORD)result)
      return result;
    v86 = (float *)a2[8];
    v101[0] = (float *)a1[8];
    v101[1] = v86;
    result = sub_2231F73E4(v101);
    if (!(_DWORD)result)
      return result;
    if (*(unsigned __int8 *)a1[9] == *(unsigned __int8 *)a2[9])
    {
      result = sub_223C6F0A4((unsigned __int8 *)a1[10], (unsigned __int8 *)a2[10]);
      if (!(_DWORD)result)
        return result;
      v87 = (float32x4_t *)a1[11];
      v88 = (float32x4_t *)a2[11];
      if (v87[8].i8[0] && v88[8].i8[0])
      {
        if ((sub_223FF9C98(v87, v88) & 1) == 0)
          return 0;
      }
      else if ((v87[8].i8[0] != 0) != (v88[8].i8[0] != 0))
      {
        return 0;
      }
      result = sub_2242AA2FC(a1[12], a2[12]);
      if (!(_DWORD)result)
        return result;
      v89 = (uint64_t *)a1[13];
      v90 = (uint64_t *)a2[13];
      v91 = *v89;
      v92 = v89[1];
      v93 = *v90;
      if (v92 - *v89 == v90[1] - *v90)
      {
        for (; v91 != v92; v93 += 224)
        {
          result = sub_223C8C3C8(v91, v93);
          if (!(_DWORD)result)
            return result;
          v91 += 224;
        }
        v94 = (unsigned __int8 *)a1[14];
        v95 = (unsigned __int8 *)a2[14];
        v96 = v95[1];
        if (v94[1])
          v97 = v96 == 0;
        else
          v97 = 1;
        if (v97)
        {
          if ((v94[1] != 0) == (v96 != 0))
            return sub_2231D0524((const void **)a1[15], a2[15]);
        }
        else if (*v94 == *v95)
        {
          return sub_2231D0524((const void **)a1[15], a2[15]);
        }
      }
    }
    return 0;
  }
  return result;
}

void sub_223C6EFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  if (a16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
    v17 = a13;
    if (!a13)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a13;
    if (!a13)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(exception_object);
}

BOOL sub_223C6F038(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
}

BOOL sub_223C6F0A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  _BOOL8 result;
  _QWORD v6[7];
  _QWORD v7[7];

  if (a1[200])
    v2 = a2[200] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[200] != 0) == (a2[200] != 0);
  if (*a1 != *a2
    || a1[1] != a2[1]
    || a1[2] != a2[2]
    || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)
    || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1)
    || *((_DWORD *)a1 + 4) != *((_DWORD *)a2 + 4))
  {
    return 0;
  }
  v7[0] = a1 + 24;
  v7[1] = a1 + 48;
  v7[2] = a1 + 72;
  v7[3] = a1 + 96;
  v7[4] = a1 + 120;
  v7[5] = a1 + 144;
  v7[6] = a1 + 168;
  v6[0] = a2 + 24;
  v6[1] = a2 + 48;
  v6[2] = a2 + 72;
  v6[3] = a2 + 96;
  v6[4] = a2 + 120;
  v6[5] = a2 + 144;
  v6[6] = a2 + 168;
  result = sub_223C65A28((uint64_t)v7, (uint64_t)v6);
  if (result)
    return a1[192] == a2[192];
  return result;
}

_QWORD *sub_223C6F1F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t ***v4;
  unint64_t **v5;
  unint64_t **v6;
  std::string::size_type v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string::size_type size;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t ***v38;
  unint64_t **v39;
  unint64_t **v40;
  uint64_t v41;
  _QWORD **v42;
  unint64_t **v43;
  _QWORD **v44;
  _QWORD *v45;
  unsigned __int16 *v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  _BYTE *v51;
  uint64_t v52;
  _QWORD **v53;
  __int128 v54;
  std::string *p_p;
  std::string::size_type v56;
  uint64_t v57;
  unint64_t ***v58;
  unint64_t **v59;
  std::string::size_type v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned __int8 v83;
  uint64_t *v84;
  std::string::size_type v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t **v90;
  unint64_t **v91;
  unint64_t **v92;
  uint64_t v93;
  unint64_t **v94;
  uint64_t v95;
  std::string::size_type *v96;
  std::string::size_type v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __int16 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int8 v120;
  uint64_t *v121;
  std::string::size_type v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void **v126;
  unint64_t **v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t *v130;
  _QWORD **v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  _QWORD **v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  std::string *v140;
  std::string::size_type v141;
  _BYTE *v142;
  _QWORD **v143;
  _QWORD *v144;
  uint64_t v145;
  const char *v146;
  char *v147;
  char *v148;
  std::string *v149;
  uint64_t data_low;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  int v157;
  std::string *v158;
  size_t v159;
  void **p_dst;
  unint64_t v161;
  unint64_t v162;
  const void *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t **v176;
  uint64_t *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  _QWORD **v184;
  uint64_t *v185;
  _QWORD **v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t i;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  _QWORD **v194;
  const char *v195;
  uint64_t v196;
  CFTypeRef *v197;
  std::string *v199;
  __int128 v200;
  std::string *v201;
  __int128 *v202;
  int64x2_t v203;
  int8x16_t v204;
  __int128 *v205;
  __int128 v206;
  int64x2_t v207;
  int8x16_t v208;
  void **v209;
  void **v210;
  void **v211;
  _QWORD *v212;
  _BYTE v214[32];
  __int128 v215;
  __int128 v216;
  void *v217[2];
  unsigned __int8 v218;
  char v219;
  std::string __p;
  int v221;
  uint64_t v222;
  std::string *v223;
  char *v224;
  void **__dst;
  void **v226;
  unint64_t v227;
  _QWORD *v228;
  void *v229[3];
  _BYTE *v230;
  std::string v231;
  void *v232[2];
  char v233;
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v4 = *(unint64_t ****)(a2 + 8);
  sub_2231813E8(*v4, (uint64_t)"{", 1);
  v5 = *v4;
  if (*(_BYTE *)(v3 + 56))
    sub_223C71628(v5, v3);
  else
    sub_2231813E8(v5, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v4, (uint64_t)",", 1);
  v6 = *v4;
  if (*(_BYTE *)(v3 + 120))
    sub_223C71628(v6, v3 + 64);
  else
    sub_2231813E8(v6, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v4, (uint64_t)",", 1);
  v7 = (std::string::size_type)*v4;
  if (!*(_BYTE *)(v3 + 208))
  {
    sub_2231813E8(*v4, (uint64_t)"nullopt", 7);
    goto LABEL_57;
  }
  v8 = *(_QWORD *)(v3 + 136);
  v9 = *(std::__shared_weak_count **)(v3 + 144);
  if (!v9)
  {
    if (!v8)
    {
LABEL_35:
      v229[0] = 0;
      *(_QWORD *)v214 = &off_24EC1F8C8;
      v17 = *(_QWORD *)(v3 + 136);
      v18 = *(std::__shared_weak_count **)(v3 + 144);
      if (!v18)
        goto LABEL_36;
LABEL_28:
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v21 = *(_QWORD *)(v3 + 164);
      v22 = *(_DWORD *)(v3 + 180);
      v23 = *(_QWORD *)(v3 + 152);
      v24 = *(_WORD *)(v3 + 200);
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      goto LABEL_37;
    }
    goto LABEL_26;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
    if (!v8)
      goto LABEL_35;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
      goto LABEL_35;
  }
  v8 = *(_QWORD *)(v3 + 136);
  v13 = *(std::__shared_weak_count **)(v3 + 144);
  if (!v13)
    goto LABEL_26;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (v16)
  {
LABEL_26:
    if (!*(_BYTE *)(v3 + 201))
      goto LABEL_35;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!*(_BYTE *)(v3 + 201))
    goto LABEL_35;
LABEL_27:
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8 + 96))(v229, v8, 0);
  *(_QWORD *)v214 = &off_24EC1F8C8;
  v17 = *(_QWORD *)(v3 + 136);
  v18 = *(std::__shared_weak_count **)(v3 + 144);
  if (v18)
    goto LABEL_28;
LABEL_36:
  v21 = *(_QWORD *)(v3 + 164);
  v22 = *(_DWORD *)(v3 + 180);
  v23 = *(_QWORD *)(v3 + 152);
  v24 = *(_WORD *)(v3 + 200);
LABEL_37:
  *(_QWORD *)&v214[8] = v17;
  *(_QWORD *)&v214[16] = v18;
  *(_QWORD *)&v214[24] = v21;
  LODWORD(v215) = 2 * v22;
  *((_QWORD *)&v215 + 1) = v23;
  LODWORD(v216) = 31;
  WORD2(v216) = v24;
  if (v18)
  {
    v27 = (unint64_t *)&v18->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v30 = sub_2232BE4E0();
  size = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v32 = (std::string::size_type)v30;
  else
    v32 = v30->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v30->__r_.__value_.__l.__size_;
  __p.__r_.__value_.__r.__words[0] = v32;
  __p.__r_.__value_.__l.__size_ = size;
  v231.__r_.__value_.__r.__words[0] = v7;
  v231.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  sub_2244DA40C(v216, (unint64_t ***)&v231, (uint64_t)v214);
  v33 = *(std::__shared_weak_count **)&v214[16];
  if (*(_QWORD *)&v214[16])
  {
    v34 = (unint64_t *)(*(_QWORD *)&v214[16] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v229[0];
  v229[0] = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
LABEL_57:
  sub_2231813E8(*v4, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_2231813E8(*v4, (uint64_t)"}", 1);
  v37 = a1[1];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v38 = *(unint64_t ****)(a2 + 8);
  sub_2231813E8(*v38, (uint64_t)"{", 1);
  v39 = *v38;
  if (*(_BYTE *)(v37 + 56))
    sub_223C718D8(v39, v37);
  else
    sub_2231813E8(v39, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v38, (uint64_t)",", 1);
  v40 = *v38;
  if (*(_BYTE *)(v37 + 120))
    sub_223C71628(v40, v37 + 64);
  else
    sub_2231813E8(v40, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v38, (uint64_t)"}", 1);
  v41 = a1[2];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v42 = *(_QWORD ***)(a2 + 8);
  sub_2231813E8(*v42, (uint64_t)"{", 1);
  v229[1] = v42;
  v229[2] = &__dst;
  LOBYTE(v229[0]) = 0;
  v43 = (unint64_t **)*v42;
  if (*(_BYTE *)(v41 + 80))
    sub_223C71C7C(v43, v41);
  else
    sub_2231813E8(v43, (uint64_t)"nullopt", 7);
  sub_223C71B88((uint64_t)v229, v41 + 88);
  v44 = (_QWORD **)v229[1];
  if (!LOBYTE(v229[0]))
    sub_2231813E8(*(_QWORD **)v229[1], (uint64_t)",", 1);
  if (*(_BYTE *)(v41 + 100))
    sub_223C71F38((uint64_t)v214, v44, (float *)(v41 + 96));
  else
    sub_2231813E8(*v44, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v44, (uint64_t)",", 1);
  LOBYTE(v229[0]) = 0;
  if (!*(_BYTE *)(v41 + 128))
  {
    sub_2231813E8(*v44, (uint64_t)"nullopt", 7);
    goto LABEL_100;
  }
  v45 = *v44;
  if ((uint64_t)(*(_QWORD *)(v41 + 112) - *(_QWORD *)(v41 + 104)) <= 1)
  {
    sub_2231813E8(v45, (uint64_t)"{}", 2);
    goto LABEL_100;
  }
  sub_2231813E8(v45, (uint64_t)"{", 1);
  v46 = *(unsigned __int16 **)(v41 + 104);
  std::to_string((std::string *)v214, *v46);
  if (v214[23] >= 0)
    v47 = v214;
  else
    v47 = *(_BYTE **)v214;
  if (v214[23] >= 0)
    v48 = v214[23];
  else
    v48 = *(_QWORD *)&v214[8];
  sub_2231813E8(*v44, (uint64_t)v47, v48);
  if ((v214[23] & 0x80000000) == 0)
  {
    v49 = *(unsigned __int16 **)(v41 + 112);
    v50 = v46 + 1;
    if (v46 + 1 == v49)
      goto LABEL_99;
    do
    {
LABEL_91:
      sub_2231813E8(*v44, (uint64_t)",", 1);
      std::to_string((std::string *)v214, *v50);
      if (v214[23] >= 0)
        v51 = v214;
      else
        v51 = *(_BYTE **)v214;
      if (v214[23] >= 0)
        v52 = v214[23];
      else
        v52 = *(_QWORD *)&v214[8];
      sub_2231813E8(*v44, (uint64_t)v51, v52);
      if ((v214[23] & 0x80000000) != 0)
        operator delete(*(void **)v214);
      ++v50;
    }
    while (v50 != v49);
    goto LABEL_99;
  }
  operator delete(*(void **)v214);
  v49 = *(unsigned __int16 **)(v41 + 112);
  v50 = v46 + 1;
  if (v46 + 1 != v49)
    goto LABEL_91;
LABEL_99:
  sub_2231813E8(*v44, (uint64_t)"}", 1);
LABEL_100:
  sub_223C71B88((uint64_t)v229, v41 + 136);
  sub_223C71B88((uint64_t)v229, v41 + 144);
  v53 = (_QWORD **)v229[1];
  if (!LOBYTE(v229[0]))
    sub_2231813E8(*(_QWORD **)v229[1], (uint64_t)",", 1);
  sub_224532A28(*v53, *(CFTypeRef *)(v41 + 152));
  sub_2231813E8(*v53, (uint64_t)",", 1);
  if (*(_BYTE *)(v41 + 204))
  {
    v54 = *(_OWORD *)(v41 + 184);
    *(_OWORD *)v214 = *(_OWORD *)(v41 + 168);
    *(_OWORD *)&v214[16] = v54;
    LODWORD(v215) = *(_DWORD *)(v41 + 200);
    v231.__r_.__value_.__r.__words[0] = 0x300000003;
    LODWORD(v231.__r_.__value_.__r.__words[1]) = 3;
    v231.__r_.__value_.__r.__words[2] = (std::string::size_type)v214;
    LODWORD(v232[0]) = 0;
    sub_224505D70((unsigned int *)&v231, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v56 = __p.__r_.__value_.__l.__size_;
    sub_2231813E8(*v53, (uint64_t)p_p, v56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_2231813E8(*v53, (uint64_t)"nullopt", 7);
  }
  sub_2231813E8(*v42, (uint64_t)"}", 1);
  v57 = a1[3];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v58 = *(unint64_t ****)(a2 + 8);
  sub_2231813E8(*v58, (uint64_t)"{", 1);
  v59 = *v58;
  if (*(_BYTE *)(v57 + 56))
    sub_223C71628(v59, v57);
  else
    sub_2231813E8(v59, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v58, (uint64_t)",", 1);
  v60 = (std::string::size_type)*v58;
  if (!*(_BYTE *)(v57 + 120))
  {
    sub_2231813E8(*v58, (uint64_t)"nullopt", 7);
    goto LABEL_163;
  }
  v61 = *(_QWORD *)(v57 + 72);
  v62 = *(std::__shared_weak_count **)(v57 + 80);
  if (!v62)
  {
    if (!v61)
    {
LABEL_143:
      v222 = 0;
      *(_QWORD *)v214 = &off_24EC1F8C8;
      v70 = *(_QWORD *)(v57 + 72);
      v71 = *(std::__shared_weak_count **)(v57 + 80);
      if (!v71)
        goto LABEL_144;
      goto LABEL_136;
    }
    goto LABEL_134;
  }
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldxr(v63);
  while (__stxr(v64 + 1, v63));
  do
    v65 = __ldaxr(v63);
  while (__stlxr(v65 - 1, v63));
  if (v65)
  {
    if (!v61)
      goto LABEL_143;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    if (!v61)
      goto LABEL_143;
  }
  v61 = *(_QWORD *)(v57 + 72);
  v66 = *(std::__shared_weak_count **)(v57 + 80);
  if (!v66)
    goto LABEL_134;
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldxr(v67);
  while (__stxr(v68 + 1, v67));
  do
    v69 = __ldaxr(v67);
  while (__stlxr(v69 - 1, v67));
  if (v69)
  {
LABEL_134:
    if (!*(_BYTE *)(v57 + 113))
      goto LABEL_143;
    goto LABEL_135;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  if (!*(_BYTE *)(v57 + 113))
    goto LABEL_143;
LABEL_135:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v61 + 96))(&v222, v61, 0);
  *(_QWORD *)v214 = &off_24EC1F8C8;
  v70 = *(_QWORD *)(v57 + 72);
  v71 = *(std::__shared_weak_count **)(v57 + 80);
  if (!v71)
  {
LABEL_144:
    v74 = *(_DWORD *)(v57 + 108);
    v76 = *(_QWORD *)(v57 + 88);
    v75 = *(_QWORD *)(v57 + 96);
    v77 = *(_WORD *)(v57 + 112);
    goto LABEL_145;
  }
LABEL_136:
  v72 = (unint64_t *)&v71->__shared_owners_;
  do
    v73 = __ldxr(v72);
  while (__stxr(v73 + 1, v72));
  v74 = *(_DWORD *)(v57 + 108);
  v76 = *(_QWORD *)(v57 + 88);
  v75 = *(_QWORD *)(v57 + 96);
  v77 = *(_WORD *)(v57 + 112);
  do
    v78 = __ldxr(v72);
  while (__stxr(v78 + 1, v72));
  do
    v79 = __ldxr(v72);
  while (__stxr(v79 + 1, v72));
LABEL_145:
  *(_QWORD *)&v214[8] = v70;
  *(_QWORD *)&v214[16] = v71;
  *(_QWORD *)&v214[24] = v75;
  LODWORD(v215) = 4 * v74;
  *((_QWORD *)&v215 + 1) = v76;
  LODWORD(v216) = 4;
  WORD2(v216) = v77;
  if (v71)
  {
    v80 = (unint64_t *)&v71->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    do
      v82 = __ldaxr(v80);
    while (__stlxr(v82 - 1, v80));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v83 = atomic_load((unsigned __int8 *)&qword_2540CD080);
  if ((v83 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD080))
    goto LABEL_154;
  HIBYTE(v229[2]) = 16;
  strcpy((char *)v229, "ConstSharedImage");
  v199 = sub_2231C26A0();
  if (SHIBYTE(v199->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&__p, v199->__r_.__value_.__l.__data_, v199->__r_.__value_.__l.__size_);
  }
  else
  {
    v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v200;
  }
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v231);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v205 = sub_2231A27C0();
  if (*((char *)v205 + 23) < 0)
  {
    sub_223197FA4(&__p, *(void **)v205, *((_QWORD *)v205 + 1));
  }
  else
  {
    v206 = *v205;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v205 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v206;
  }
  sub_22456D060(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v232);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_22319BD1C(&__dst, (uint64_t)&v231, 2uLL);
  sub_2245730F4((char *)v229, (uint64_t *)&__dst, (std::string *)&qword_2540CD248, v207, v208);
  v209 = __dst;
  if (__dst)
  {
    v210 = v226;
    v211 = __dst;
    if (v226 != __dst)
    {
      do
      {
        if (*((char *)v210 - 1) < 0)
          operator delete(*(v210 - 3));
        v210 -= 3;
      }
      while (v210 != v209);
      v211 = __dst;
    }
    v226 = v209;
    operator delete(v211);
  }
  if ((v233 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_408;
LABEL_411:
    operator delete(v231.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v229[2]) & 0x80000000) == 0)
      goto LABEL_409;
LABEL_412:
    operator delete(v229[0]);
    goto LABEL_409;
  }
  operator delete(v232[0]);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_411;
LABEL_408:
  if (SHIBYTE(v229[2]) < 0)
    goto LABEL_412;
LABEL_409:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD248, &dword_22314D000);
  __cxa_guard_release(&qword_2540CD080);
LABEL_154:
  v84 = &qword_2540CD248;
  v85 = byte_2540CD25F;
  if (byte_2540CD25F < 0)
  {
    v85 = unk_2540CD250;
    v84 = (uint64_t *)qword_2540CD248;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
  __p.__r_.__value_.__l.__size_ = v85;
  v231.__r_.__value_.__r.__words[0] = v60;
  v231.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  sub_2244DA40C(v216, (unint64_t ***)&v231, (uint64_t)v214);
  v86 = *(std::__shared_weak_count **)&v214[16];
  if (*(_QWORD *)&v214[16])
  {
    v87 = (unint64_t *)(*(_QWORD *)&v214[16] + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v222;
  v222 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
LABEL_163:
  sub_2231813E8(*v58, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_2231813E8(*v58, (uint64_t)",", 1);
  v90 = *v58;
  if (*(_BYTE *)(v57 + 224))
    sub_223C721A4(v90, v57 + 144);
  else
    sub_2231813E8(v90, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v58, (uint64_t)",", 1);
  v91 = *v58;
  if (*(_BYTE *)(v57 + 312))
    sub_223C721A4(v91, v57 + 232);
  else
    sub_2231813E8(v91, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v58, (uint64_t)",", 1);
  v92 = *v58;
  if (*(_BYTE *)(v57 + 400))
    sub_223C721A4(v92, v57 + 320);
  else
    sub_2231813E8(v92, (uint64_t)"nullopt", 7);
  sub_2231813E8(*v58, (uint64_t)"}", 1);
  v93 = a1[4];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v94 = **(unint64_t ****)(a2 + 8);
  if (*(_BYTE *)(v93 + 56))
    sub_223C718D8(v94, v93);
  else
    sub_2231813E8(v94, (uint64_t)"nullopt", 7);
  v95 = a1[5];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v96 = *(std::string::size_type **)(a2 + 8);
  sub_2231813E8((_QWORD *)*v96, (uint64_t)"{", 1);
  v97 = *v96;
  if (!*(_BYTE *)(v95 + 80))
  {
    sub_2231813E8((_QWORD *)*v96, (uint64_t)"nullopt", 7);
    goto LABEL_225;
  }
  v98 = *(_QWORD *)(v95 + 8);
  v99 = *(std::__shared_weak_count **)(v95 + 16);
  if (!v99)
  {
    if (!v98)
    {
LABEL_205:
      __dst = 0;
      *(_QWORD *)v214 = &off_24EC1F8C8;
      v107 = *(_QWORD *)(v95 + 8);
      v108 = *(std::__shared_weak_count **)(v95 + 16);
      if (!v108)
        goto LABEL_206;
      goto LABEL_198;
    }
    goto LABEL_196;
  }
  v100 = (unint64_t *)&v99->__shared_owners_;
  do
    v101 = __ldxr(v100);
  while (__stxr(v101 + 1, v100));
  do
    v102 = __ldaxr(v100);
  while (__stlxr(v102 - 1, v100));
  if (v102)
  {
    if (!v98)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    if (!v98)
      goto LABEL_205;
  }
  v98 = *(_QWORD *)(v95 + 8);
  v103 = *(std::__shared_weak_count **)(v95 + 16);
  if (!v103)
    goto LABEL_196;
  v104 = (unint64_t *)&v103->__shared_owners_;
  do
    v105 = __ldxr(v104);
  while (__stxr(v105 + 1, v104));
  do
    v106 = __ldaxr(v104);
  while (__stlxr(v106 - 1, v104));
  if (v106)
  {
LABEL_196:
    if (!*(_BYTE *)(v95 + 73))
      goto LABEL_205;
    goto LABEL_197;
  }
  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
  std::__shared_weak_count::__release_weak(v103);
  if (!*(_BYTE *)(v95 + 73))
    goto LABEL_205;
LABEL_197:
  (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v98 + 96))(&__dst, v98, 0);
  *(_QWORD *)v214 = &off_24EC1F8C8;
  v107 = *(_QWORD *)(v95 + 8);
  v108 = *(std::__shared_weak_count **)(v95 + 16);
  if (!v108)
  {
LABEL_206:
    v111 = *(_QWORD *)(v95 + 36);
    v112 = *(_DWORD *)(v95 + 52);
    v113 = *(_QWORD *)(v95 + 24);
    v114 = *(_WORD *)(v95 + 72);
    goto LABEL_207;
  }
LABEL_198:
  v109 = (unint64_t *)&v108->__shared_owners_;
  do
    v110 = __ldxr(v109);
  while (__stxr(v110 + 1, v109));
  v111 = *(_QWORD *)(v95 + 36);
  v112 = *(_DWORD *)(v95 + 52);
  v113 = *(_QWORD *)(v95 + 24);
  v114 = *(_WORD *)(v95 + 72);
  do
    v115 = __ldxr(v109);
  while (__stxr(v115 + 1, v109));
  do
    v116 = __ldxr(v109);
  while (__stxr(v116 + 1, v109));
LABEL_207:
  *(_QWORD *)&v214[8] = v107;
  *(_QWORD *)&v214[16] = v108;
  *(_QWORD *)&v214[24] = v111;
  LODWORD(v215) = v112;
  *((_QWORD *)&v215 + 1) = v113;
  LODWORD(v216) = 25;
  WORD2(v216) = v114;
  if (v108)
  {
    v117 = (unint64_t *)&v108->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
    do
      v119 = __ldaxr(v117);
    while (__stlxr(v119 - 1, v117));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v120 = atomic_load((unsigned __int8 *)&qword_2540CD090);
  if ((v120 & 1) != 0 || !__cxa_guard_acquire(&qword_2540CD090))
    goto LABEL_216;
  sub_223174DE4(&__p, "ConstSharedImage");
  v201 = sub_2231EC034();
  sub_223C726CC((uint64_t)&v231, (uint64_t)v201);
  v202 = sub_2231A27C0();
  sub_223C726CC((uint64_t)v232, (uint64_t)v202);
  sub_22319BD1C(v229, (uint64_t)&v231, 2uLL);
  sub_2245730F4((char *)&__p, (uint64_t *)v229, (std::string *)&qword_2540CD278, v203, v204);
  sub_22319BB48(v229);
  if ((v233 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_384;
LABEL_414:
    operator delete(v231.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_385;
LABEL_415:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_385;
  }
  operator delete(v232[0]);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_414;
LABEL_384:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_415;
LABEL_385:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2540CD278, &dword_22314D000);
  __cxa_guard_release(&qword_2540CD090);
LABEL_216:
  v121 = &qword_2540CD278;
  v122 = byte_2540CD28F;
  if (byte_2540CD28F < 0)
  {
    v122 = unk_2540CD280;
    v121 = (uint64_t *)qword_2540CD278;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
  __p.__r_.__value_.__l.__size_ = v122;
  v231.__r_.__value_.__r.__words[0] = v97;
  v231.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  sub_2244DA40C(v216, (unint64_t ***)&v231, (uint64_t)v214);
  v123 = *(std::__shared_weak_count **)&v214[16];
  if (*(_QWORD *)&v214[16])
  {
    v124 = (unint64_t *)(*(_QWORD *)&v214[16] + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __dst;
  __dst = 0;
  if (v126)
    (*((void (**)(void **))*v126 + 1))(v126);
LABEL_225:
  sub_2231813E8((_QWORD *)*v96, (uint64_t)",", 1);
  v127 = (unint64_t **)*v96;
  if (*(_BYTE *)(v95 + 168))
    sub_223C71C7C(v127, v95 + 88);
  else
    sub_2231813E8(v127, (uint64_t)"nullopt", 7);
  sub_2231813E8((_QWORD *)*v96, (uint64_t)",", 1);
  std::to_string((std::string *)v214, *(unsigned __int8 *)(v95 + 176));
  if (v214[23] >= 0)
    v128 = v214;
  else
    v128 = *(_BYTE **)v214;
  if (v214[23] >= 0)
    v129 = v214[23];
  else
    v129 = *(_QWORD *)&v214[8];
  sub_2231813E8((_QWORD *)*v96, (uint64_t)v128, v129);
  if ((v214[23] & 0x80000000) != 0)
    operator delete(*(void **)v214);
  sub_2231813E8((_QWORD *)*v96, (uint64_t)",", 1);
  sub_2231813E8((_QWORD *)*v96, (uint64_t)"{", 1);
  sub_223C71F38((uint64_t)v214, (_QWORD **)v96, (float *)(v95 + 180));
  sub_2231813E8((_QWORD *)*v96, (uint64_t)",", 1);
  sub_223C71F38((uint64_t)v214, (_QWORD **)v96, (float *)(v95 + 184));
  sub_2231813E8((_QWORD *)*v96, (uint64_t)",", 1);
  sub_223C71F38((uint64_t)v214, (_QWORD **)v96, (float *)(v95 + 188));
  sub_2231813E8((_QWORD *)*v96, (uint64_t)"}", 1);
  sub_2231813E8((_QWORD *)*v96, (uint64_t)"}", 1);
  v130 = (uint64_t *)a1[6];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v131 = *(_QWORD ***)(a2 + 8);
  sub_2233025E8(v130, (std::string *)v214);
  if (v214[23] >= 0)
    v132 = v214;
  else
    v132 = *(_BYTE **)v214;
  if (v214[23] >= 0)
    v133 = v214[23];
  else
    v133 = *(_QWORD *)&v214[8];
  sub_2231813E8(*v131, (uint64_t)v132, v133);
  if ((v214[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v214);
    v134 = a1[7];
    if (*(_BYTE *)a2)
      goto LABEL_249;
  }
  else
  {
    v134 = a1[7];
    if (*(_BYTE *)a2)
      goto LABEL_249;
  }
  sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_249:
  *(_BYTE *)a2 = 0;
  sub_223C72784(**(_QWORD ***)(a2 + 8), v134);
  v135 = (__int128 *)a1[8];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v136 = *(_QWORD ***)(a2 + 8);
  v137 = *v135;
  v138 = v135[1];
  v139 = v135[3];
  v215 = v135[2];
  v216 = v139;
  *(_OWORD *)v214 = v137;
  *(_OWORD *)&v214[16] = v138;
  v231.__r_.__value_.__r.__words[0] = 0x400000004;
  LODWORD(v231.__r_.__value_.__r.__words[1]) = 4;
  v231.__r_.__value_.__r.__words[2] = (std::string::size_type)v214;
  LODWORD(v232[0]) = 0;
  sub_224505D70((unsigned int *)&v231, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = &__p;
  else
    v140 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v141 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8(*v136, (uint64_t)v140, v141);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v142 = (_BYTE *)a1[9];
    if (*(_BYTE *)a2)
      goto LABEL_262;
  }
  else
  {
    v142 = (_BYTE *)a1[9];
    if (*(_BYTE *)a2)
      goto LABEL_262;
  }
  sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_262:
  *(_BYTE *)a2 = 0;
  v143 = *(_QWORD ***)(a2 + 8);
  sub_2231813E8(*v143, (uint64_t)"{", 1);
  v144 = *v143;
  if (*v142 == 1)
    sub_2231813E8(v144, (uint64_t)"Monitor", 7);
  else
    sub_2231813E8(v144, (uint64_t)"Update", 6);
  sub_2231813E8(*v143, (uint64_t)"}", 1);
  v145 = a1[10];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v212 = **(_QWORD ***)(a2 + 8);
  if (!*(_BYTE *)(v145 + 200))
  {
    sub_2231813E8(v212, (uint64_t)"nullopt", 7);
    goto LABEL_345;
  }
  v221 = 0;
  sub_2231ABA1C(&__p, "{");
  v223 = &__p;
  v224 = &v219;
  LOBYTE(v222) = 0;
  if (*(_BYTE *)v145)
    v146 = "true";
  else
    v146 = "false";
  v229[0] = (void *)v146;
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = v229;
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = v229;
  *(_QWORD *)&v215 = v229;
  if (v221 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60FB0[v221])(&v231, &__p);
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (v221 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60F38[v221])(&v231, &__p);
  LOBYTE(v222) = 0;
  v147 = *(_BYTE *)(v145 + 1) ? "true" : "false";
  v229[0] = v147;
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = v229;
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = v229;
  *(_QWORD *)&v215 = v229;
  if (v221 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60FB0[v221])(&v231, &__p);
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (v221 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60F38[v221])(&v231, &__p);
  LOBYTE(v222) = 0;
  v148 = *(_BYTE *)(v145 + 2) ? "true" : "false";
  v229[0] = v148;
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = v229;
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = v229;
  *(_QWORD *)&v215 = v229;
  if (v221 == -1)
LABEL_376:
    sub_22316DD70();
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60FB0[v221])(&v231, &__p);
  sub_223C69718((uint64_t)&v222, (int *)(v145 + 4));
  v149 = v223;
  if (!(_BYTE)v222)
  {
    *(_QWORD *)v214 = v223;
    *(_QWORD *)&v214[8] = ",";
    *(_QWORD *)&v214[16] = v223;
    *(_QWORD *)&v214[24] = ",";
    *(_QWORD *)&v215 = ",";
    data_low = LODWORD(v223[1].__r_.__value_.__l.__data_);
    if ((_DWORD)data_low == -1)
      goto LABEL_376;
    v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
    ((void (*)(std::string *, std::string *))off_24EC60F38[data_low])(&v231, v223);
  }
  LOBYTE(v222) = 0;
  sub_2233025E8((uint64_t *)(v145 + 8), &v231);
  *(_QWORD *)v214 = v149;
  *(_QWORD *)&v214[8] = &v231;
  *(_QWORD *)&v214[16] = v149;
  *(_QWORD *)&v214[24] = &v231;
  *(_QWORD *)&v215 = &v231;
  v151 = LODWORD(v149[1].__r_.__value_.__l.__data_);
  if ((_DWORD)v151 == -1)
    sub_22316DD70();
  v229[0] = v214;
  ((void (*)(void **, std::string *))off_24EC60F80[v151])(v229, v149);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  sub_223C69718((uint64_t)&v222, (int *)(v145 + 16));
  v152 = v223;
  if (!(_BYTE)v222)
  {
    *(_QWORD *)v214 = v223;
    *(_QWORD *)&v214[8] = ",";
    *(_QWORD *)&v214[16] = v223;
    *(_QWORD *)&v214[24] = ",";
    *(_QWORD *)&v215 = ",";
    v153 = LODWORD(v223[1].__r_.__value_.__l.__data_);
    if ((_DWORD)v153 == -1)
      goto LABEL_376;
    v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
    ((void (*)(std::string *, std::string *))off_24EC60F38[v153])(&v231, v223);
  }
  LOBYTE(v222) = 0;
  v154 = operator new();
  *(_QWORD *)(v154 + 272) = 0;
  *(_OWORD *)(v154 + 240) = 0u;
  *(_OWORD *)(v154 + 256) = 0u;
  *(_OWORD *)(v154 + 208) = 0u;
  *(_OWORD *)(v154 + 224) = 0u;
  *(_OWORD *)(v154 + 176) = 0u;
  *(_OWORD *)(v154 + 192) = 0u;
  *(_OWORD *)(v154 + 144) = 0u;
  *(_OWORD *)(v154 + 160) = 0u;
  *(_OWORD *)(v154 + 112) = 0u;
  *(_OWORD *)(v154 + 128) = 0u;
  *(_OWORD *)(v154 + 80) = 0u;
  *(_OWORD *)(v154 + 96) = 0u;
  *(_OWORD *)(v154 + 48) = 0u;
  *(_OWORD *)(v154 + 64) = 0u;
  *(_OWORD *)(v154 + 16) = 0u;
  *(_OWORD *)(v154 + 32) = 0u;
  *(_OWORD *)v154 = 0u;
  sub_223195210(v154);
  v228 = (_QWORD *)v154;
  LODWORD(v232[0]) = 0;
  sub_2231ABA1C(&v231, "{");
  sub_2231AEF2C((uint64_t)v214, (uint64_t)&v231, (unsigned __int8 **)(v145 + 24));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_223C69464((uint64_t)&v231, (__int128 **)(v145 + 48));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_2231AEF2C((uint64_t)v214, (uint64_t)&v231, (unsigned __int8 **)(v145 + 72));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_223C69464((uint64_t)&v231, (__int128 **)(v145 + 96));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_2231AEF2C((uint64_t)v214, (uint64_t)&v231, (unsigned __int8 **)(v145 + 120));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_2231AEF2C((uint64_t)v214, (uint64_t)&v231, (unsigned __int8 **)(v145 + 144));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  if (LODWORD(v232[0]) == -1)
    goto LABEL_377;
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  sub_2231AEF2C((uint64_t)v214, (uint64_t)&v231, (unsigned __int8 **)(v145 + 168));
  *(_QWORD *)v214 = &v231;
  *(_QWORD *)&v214[8] = "}";
  *(_QWORD *)&v214[16] = &v231;
  *(_QWORD *)&v214[24] = "}";
  *(_QWORD *)&v215 = "}";
  if (LODWORD(v232[0]) == -1)
LABEL_377:
    sub_22316DD70();
  v230 = v214;
  ((void (*)(_BYTE **, std::string *))off_24EC60F38[LODWORD(v232[0])])(&v230, &v231);
  if (LODWORD(v232[0]) == -1)
    sub_22316DD70();
  *(_QWORD *)v214 = &v230;
  ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC60F98[LODWORD(v232[0])])(v229, v214, &v231);
  if (LODWORD(v232[0]) != -1)
    ((void (*)(_BYTE *, std::string *))off_24EC60F50[LODWORD(v232[0])])(v214, &v231);
  if (SHIBYTE(v229[2]) >= 0)
    v155 = v229;
  else
    v155 = (void **)v229[0];
  if (SHIBYTE(v229[2]) >= 0)
    v156 = HIBYTE(v229[2]);
  else
    v156 = (uint64_t)v229[1];
  sub_2231813E8((_QWORD *)(v154 + 16), (uint64_t)v155, v156);
  if ((SHIBYTE(v229[2]) & 0x80000000) == 0)
  {
    v157 = *(_DWORD *)(v154 + 120);
    if ((v157 & 0x10) == 0)
      goto LABEL_309;
LABEL_313:
    v161 = *(_QWORD *)(v154 + 112);
    v162 = *(_QWORD *)(v154 + 72);
    if (v161 < v162)
    {
      *(_QWORD *)(v154 + 112) = v162;
      v161 = v162;
    }
    v158 = v152;
    v163 = *(const void **)(v154 + 64);
    v159 = v161 - (_QWORD)v163;
    if (v161 - (unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_375;
    goto LABEL_316;
  }
  operator delete(v229[0]);
  v157 = *(_DWORD *)(v154 + 120);
  if ((v157 & 0x10) != 0)
    goto LABEL_313;
LABEL_309:
  v158 = v152;
  if ((v157 & 8) == 0)
  {
    v159 = 0;
    HIBYTE(v227) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_323;
  }
  v163 = *(const void **)(v154 + 40);
  v159 = *(_QWORD *)(v154 + 56) - (_QWORD)v163;
  if (v159 >= 0x7FFFFFFFFFFFFFF8)
LABEL_375:
    sub_22316DBC0();
LABEL_316:
  if (v159 >= 0x17)
  {
    v164 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v159 | 7) != 0x17)
      v164 = v159 | 7;
    v165 = v164 + 1;
    p_dst = (void **)operator new(v164 + 1);
    v226 = (void **)v159;
    v227 = v165 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_322;
  }
  HIBYTE(v227) = v159;
  p_dst = (void **)&__dst;
  if (v159)
LABEL_322:
    memmove(p_dst, v163, v159);
LABEL_323:
  *((_BYTE *)p_dst + v159) = 0;
  v166 = v228;
  if (v228)
  {
    v167 = MEMORY[0x24BEDB7F0];
    v168 = *MEMORY[0x24BEDB7F0];
    *v228 = *MEMORY[0x24BEDB7F0];
    v169 = *(_QWORD *)(v167 + 72);
    *(_QWORD *)((char *)v166 + *(_QWORD *)(v168 - 24)) = *(_QWORD *)(v167 + 64);
    v166[3] = MEMORY[0x24BEDB848] + 16;
    v166[2] = v169;
    if (*((char *)v166 + 111) < 0)
      operator delete((void *)v166[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v166 + 16);
    MEMORY[0x227684CE8](v166, 0x10B2C40EED050F3);
  }
  *(_QWORD *)v214 = v158;
  *(_QWORD *)&v214[8] = &__dst;
  *(_QWORD *)&v214[16] = v158;
  *(_QWORD *)&v214[24] = &__dst;
  *(_QWORD *)&v215 = &__dst;
  v170 = LODWORD(v158[1].__r_.__value_.__l.__data_);
  if ((_DWORD)v170 == -1)
    sub_22316DD70();
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60F80[v170])(&v231, v158);
  if (SHIBYTE(v227) < 0)
  {
    operator delete(__dst);
    v171 = (uint64_t)v223;
    if ((_BYTE)v222)
      goto LABEL_334;
  }
  else
  {
    v171 = (uint64_t)v223;
    if ((_BYTE)v222)
      goto LABEL_334;
  }
  *(_QWORD *)v214 = v171;
  *(_QWORD *)&v214[8] = ",";
  *(_QWORD *)&v214[16] = v171;
  *(_QWORD *)&v214[24] = ",";
  *(_QWORD *)&v215 = ",";
  v172 = *(unsigned int *)(v171 + 24);
  if ((_DWORD)v172 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, uint64_t))off_24EC60F38[v172])(&v231, v171);
LABEL_334:
  sub_2238E7D38((uint64_t)v214, v171, (char *)(v145 + 192));
  *(_QWORD *)v214 = &__p;
  *(_QWORD *)&v214[8] = "}";
  *(_QWORD *)&v214[16] = &__p;
  *(_QWORD *)&v214[24] = "}";
  *(_QWORD *)&v215 = "}";
  if (v221 == -1)
    goto LABEL_376;
  v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
  ((void (*)(std::string *, std::string *))off_24EC60F38[v221])(&v231, &__p);
  if (v221 == -1)
    sub_22316DD70();
  *(_QWORD *)v214 = &v231;
  ((void (*)(void **__return_ptr, _BYTE *, std::string *))off_24EC60F98[v221])(v217, v214, &__p);
  if (v221 != -1)
    ((void (*)(_BYTE *, std::string *))off_24EC60F50[v221])(v214, &__p);
  if ((v218 & 0x80u) == 0)
    v173 = v217;
  else
    v173 = (void **)v217[0];
  if ((v218 & 0x80u) == 0)
    v174 = v218;
  else
    v174 = (uint64_t)v217[1];
  sub_2231813E8(v212, (uint64_t)v173, v174);
  if (((char)v218 & 0x80000000) == 0)
  {
LABEL_345:
    v175 = a1[11];
    if (*(_BYTE *)a2)
      goto LABEL_348;
    goto LABEL_346;
  }
  operator delete(v217[0]);
  v175 = a1[11];
  if (!*(_BYTE *)a2)
LABEL_346:
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_348:
  *(_BYTE *)a2 = 0;
  v176 = *(uint64_t ***)(a2 + 8);
  v177 = *v176;
  if (*(_BYTE *)(v175 + 128))
  {
    sub_2231813E8(*v176, (uint64_t)"\nUser world to vision world transform:\n", 39);
    v178 = *(_OWORD *)v175;
    v179 = *(_OWORD *)(v175 + 16);
    v180 = *(_OWORD *)(v175 + 48);
    v215 = *(_OWORD *)(v175 + 32);
    v216 = v180;
    *(_OWORD *)v214 = v178;
    *(_OWORD *)&v214[16] = v179;
    sub_223C72A90(v177, (uint64_t)v214);
    sub_2231813E8(v177, (uint64_t)"\nMeshing world to vision world transform:\n", 42);
    v181 = *(_OWORD *)(v175 + 80);
    *(_OWORD *)v214 = *(_OWORD *)(v175 + 64);
    *(_OWORD *)&v214[16] = v181;
    v182 = *(_OWORD *)(v175 + 112);
    v215 = *(_OWORD *)(v175 + 96);
    v216 = v182;
    sub_223C72A90(v177, (uint64_t)v214);
  }
  else
  {
    sub_2231813E8(*v176, (uint64_t)"nullopt", 7);
  }
  v183 = a1[12];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v184 = *(_QWORD ***)(a2 + 8);
  sub_2231813E8(*v184, (uint64_t)"{", 1);
  sub_2242AA730(*v184, v183);
  sub_2231813E8(*v184, (uint64_t)"}", 1);
  v185 = (uint64_t *)a1[13];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v186 = *(_QWORD ***)(a2 + 8);
  v187 = *v186;
  if (v185[1] - *v185 > 223)
  {
    sub_2231813E8(v187, (uint64_t)"{", 1);
    v188 = *v185;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v186;
    *(_QWORD *)v214 = v188;
    *(_QWORD *)&v214[8] = v188 + 8;
    *(_QWORD *)&v214[16] = v188 + 72;
    *(_QWORD *)&v214[24] = v188 + 88;
    sub_2231813E8(__p.__r_.__value_.__l.__data_, (uint64_t)"{", 1);
    v231.__r_.__value_.__s.__data_[0] = 1;
    v231.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    v231.__r_.__value_.__r.__words[2] = (std::string::size_type)v229;
    sub_223C8D690((uint64_t)v214, (uint64_t)&v231);
    sub_2231813E8(__p.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
    v189 = v185[1];
    for (i = v188 + 224; i != v189; i = v192 + 136)
    {
      sub_2231813E8(*v186, (uint64_t)",", 1);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v186;
      *(_QWORD *)v214 = i;
      *(_QWORD *)&v214[8] = i + 8;
      v191 = i + 72;
      v192 = i + 88;
      *(_QWORD *)&v214[16] = v191;
      *(_QWORD *)&v214[24] = v192;
      sub_2231813E8(__p.__r_.__value_.__l.__data_, (uint64_t)"{", 1);
      v231.__r_.__value_.__s.__data_[0] = 1;
      v231.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
      v231.__r_.__value_.__r.__words[2] = (std::string::size_type)v229;
      sub_223C8D690((uint64_t)v214, (uint64_t)&v231);
      sub_2231813E8(__p.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
    }
    sub_2231813E8(*v186, (uint64_t)"}", 1);
  }
  else
  {
    sub_2231813E8(v187, (uint64_t)"{}", 2);
  }
  v193 = (_BYTE *)a1[14];
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v194 = *(_QWORD ***)(a2 + 8);
    if (v193[1])
    {
LABEL_362:
      if (*v193)
        v195 = "true";
      else
        v195 = "false";
      if (*v193)
        v196 = 4;
      else
        v196 = 5;
      sub_2231813E8(*v194, (uint64_t)v195, v196);
      goto LABEL_371;
    }
  }
  else
  {
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v194 = *(_QWORD ***)(a2 + 8);
    if (v193[1])
      goto LABEL_362;
  }
  sub_2231813E8(*v194, (uint64_t)"nullopt", 7);
LABEL_371:
  v197 = (CFTypeRef *)a1[15];
  if (!*(_BYTE *)a2)
    sub_2231813E8(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  return sub_224532A28(**(_QWORD ***)(a2 + 8), *v197);
}

