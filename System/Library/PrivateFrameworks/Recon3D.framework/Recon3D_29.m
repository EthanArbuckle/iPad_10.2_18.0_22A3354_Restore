void sub_223CD799C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CD79E4(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, double a13, double a14)
{
  float32x2_t v14;
  float32x2_t v15;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  float v59;
  float v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  float32x2_t *v70;
  float32x2_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int8x16_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x2_t v103;
  float32x2_t v104;
  int8x16_t v105;
  unsigned int v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  unsigned __int32 v120;
  __int32 v121;
  float v122;
  _QWORD *v123;
  float v124;
  float32x4_t v128;

  v124 = a9.f32[0];
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v18 != 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 2))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 209, (uint64_t)"vertex_quadric.size() == mesh.vertices.size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_87;
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != v18)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 210, (uint64_t)"vertex_to_edge.size() == mesh.vertices.size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_87;
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) != v18)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 211, (uint64_t)"vertex_to_face.size() == mesh.vertices.size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_87;
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 2);
  }
  if (a4[1] != v18)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 212, (uint64_t)"is_vertex_feature.size() == mesh.vertices.size()", 48, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_87;
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 2);
  }
  if (a5[1] - *a5 != v18
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 213, (uint64_t)"vertex_state.size() == mesh.vertices.size()", 43, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| a6[1] - *a6 != 0xAAAAAAAAAAAAAAABLL * ((a8[15] - a8[14]) >> 2)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 214, (uint64_t)"face_state.size() == mesh.faces.size()", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_87;
  }
  v20 = (unsigned int *)a8[18];
  v19 = (unsigned int *)a8[19];
  if (a7[1] - *a7 != ((char *)v19 - (char *)v20) >> 3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 215, (uint64_t)"edge_state.size() == mesh.edges.size()", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_87;
    }
    v20 = (unsigned int *)a8[18];
    v19 = (unsigned int *)a8[19];
  }
  if (v20 != v19)
  {
    v110 = 0;
    v21 = 0;
    v123 = a7;
    while (1)
    {
      if (*(_BYTE *)(*a7 + v21) != 1)
        goto LABEL_23;
      v23 = *v20;
      v22 = v20[1];
      v24 = *a4;
      v25 = 1 << v23;
      v26 = *(_QWORD *)(*a4 + ((v23 >> 3) & 0x1FFFFFF8));
      v27 = v22 >> 6;
      v28 = 1 << v22;
      v29 = v25 & v26;
      if ((v25 & v26) != 0)
      {
        v30 = *(_QWORD *)(v24 + 8 * v27);
        if ((v30 & v28) != 0)
          goto LABEL_23;
      }
      else
      {
        v30 = *(_QWORD *)(v24 + 8 * v27);
      }
      v31 = a8[18];
      v32 = (unsigned int *)(v31 + 8 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = *a1 + 40 * v34;
      v36 = *(float *)v35;
      v37 = *(float *)(v35 + 4);
      v38 = *(float *)(v35 + 8);
      v39 = *(float *)(v35 + 12);
      v40 = *(float *)(v35 + 16);
      v41 = *(float *)(v35 + 20);
      v42 = *(float *)(v35 + 24);
      a11.i32[0] = *(_DWORD *)(v35 + 28);
      v43 = *(float *)(v35 + 32);
      v44 = *(float *)(v35 + 36);
      v45 = *a1 + 40 * v33;
      v46 = *(float *)v45;
      v47 = *(float *)(v45 + 4);
      v15.i32[0] = *(_DWORD *)(v45 + 8);
      v48 = *(float *)(v45 + 12);
      v49 = *(float *)(v45 + 16);
      v50 = *(float *)(v45 + 20);
      v51 = *(float *)(v45 + 24);
      v52 = *(float *)(v45 + 28);
      v53 = *(float *)(v45 + 32);
      v54 = *(float *)(v45 + 36);
      if (v21 >= (unint64_t)((a8[19] - v31) >> 3))
      {
        v111 = *(float *)(v45 + 36);
        v112 = *(float *)(v45 + 32);
        v113 = *(float *)(v45 + 28);
        v114 = *(float *)(v45 + 24);
        v115 = *(float *)(v35 + 36);
        v116 = *(float *)(v45 + 20);
        v117 = *(float *)(v45 + 16);
        v118 = *(float *)(v35 + 32);
        v119 = *(float *)(v45 + 12);
        v120 = *(_DWORD *)(v35 + 28);
        v121 = *(_DWORD *)(v45 + 8);
        v122 = *(float *)(v35 + 24);
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 555, (uint64_t)"edge_id < mesh.edges.size()", 27, (uint64_t)"Edge ID exceeds limit", 21, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_87;
        }
        v31 = a8[18];
        v55 = (unsigned int *)(v31 + 8 * v21);
        v34 = *v55;
        v33 = v55[1];
        v15.i32[0] = v121;
        v42 = v122;
        v48 = v119;
        a11.i32[0] = v120;
        v49 = v117;
        v43 = v118;
        v44 = v115;
        v50 = v116;
        v52 = v113;
        v51 = v114;
        v54 = v111;
        v53 = v112;
      }
      v56 = *a8 + 12 * v34;
      if (v29)
      {
        v128.i64[0] = *(_QWORD *)v56;
        v128.i32[2] = *(_DWORD *)(v56 + 8);
      }
      else
      {
        v57 = *a8 + 12 * v33;
        if ((v30 & v28) != 0)
        {
          v128.i64[0] = *(_QWORD *)v57;
          v128.i32[2] = *(_DWORD *)(v57 + 8);
        }
        else
        {
          a9.i64[0] = *(_QWORD *)v56;
          a9.i32[2] = *(_DWORD *)(v56 + 8);
          a10.i64[0] = *(_QWORD *)v57;
          a10.i32[2] = *(_DWORD *)(v57 + 8);
          v58 = vaddq_f32(a9, a10);
          a10.i64[0] = 0x3F0000003F000000;
          a10.i64[1] = 0x3F0000003F000000;
          a9 = vmulq_f32(v58, a10);
          v128.i32[2] = a9.i32[2];
          v128.i64[0] = a9.i64[0];
        }
      }
      v59 = v42 + v51;
      v60 = v38 + v15.f32[0];
      v15.i32[0] = v128.i32[2];
      v14.i32[0] = v128.i32[1];
      *(float *)&a14 = v59
                     + (float)((float)((float)((float)(v37 + v47) * v128.f32[0])
                                     + (float)((float)(v40 + v49) * v128.f32[1]))
                             + (float)((float)(v41 + v50) * v128.f32[2]));
      a11.f32[0] = (float)(v43 + v53)
                 + (float)((float)((float)(v60 * v128.f32[0]) + (float)((float)(v41 + v50) * v128.f32[1]))
                         + (float)((float)(a11.f32[0] + v52) * v128.f32[2]));
      a10.f32[0] = v128.f32[0]
                 * (float)((float)(v39 + v48)
                         + (float)((float)((float)((float)(v36 + v46) * v128.f32[0])
                                         + (float)((float)(v37 + v47) * v128.f32[1]))
                                 + (float)(v60 * v128.f32[2])));
      *(float32x2_t *)a10.f32 = vmla_f32(vmla_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)&a14, v14), *(float32x2_t *)a11.f32, v15);
      if ((float)((float)((float)(v44 + v54)
                         + (float)((float)((float)((float)(v39 + v48) * v128.f32[0]) + (float)(v59 * v128.f32[1]))
                                 + (float)((float)(v43 + v53) * v128.f32[2])))
                 + a10.f32[0]) > v124)
        goto LABEL_22;
      if (v21 >= (unint64_t)((a8[19] - v31) >> 3))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 594, (uint64_t)"mesh.edges.size() > edge_id", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_87;
        }
        v31 = a8[18];
      }
      v61 = (unsigned int *)(v31 + 8 * v21);
      v63 = *v61;
      v62 = v61[1];
      v64 = *a3;
      v65 = a8[14];
      v66 = a8[9];
      if (a8[15] - v65 != a8[10] - v66)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 492, (uint64_t)"mesh.faces.size() == mesh.normals.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_87;
        }
        v65 = a8[14];
        v66 = a8[9];
      }
      v67 = *(unsigned int **)(v64 + 24 * v63);
      v68 = *(unsigned int **)(v64 + 24 * v63 + 8);
      if (v67 == v68)
        break;
      v69 = *a8;
      a9.i32[3] = v128.i32[3];
      while (1)
      {
        v72 = (unsigned int *)(v65 + 12 * *v67);
        v74 = *v72;
        v73 = v72[1];
        v75 = v72[2];
        v76 = v74 == v62 || v73 == v62;
        if (!v76 && v75 != v62)
        {
          if (v74 == v63)
          {
            v78 = v73;
            LODWORD(v73) = v75;
          }
          else if (v73 == v63)
          {
            v78 = v75;
            LODWORD(v73) = v74;
          }
          else
          {
            v78 = v74;
            if (v75 != v63)
            {
LABEL_86:
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 514, (uint64_t)"", 0, (uint64_t)"None of the 1-ring vertices are edge vertices", 45, (void (*)(void **))sub_22457406C);
              goto LABEL_87;
            }
          }
          v79 = v69 + 12 * v78;
          v80 = v69 + 12 * v73;
          a10.i64[0] = *(_QWORD *)v79;
          a10.i32[2] = *(_DWORD *)(v79 + 8);
          a11.i64[0] = *(_QWORD *)v80;
          a11.i32[2] = *(_DWORD *)(v80 + 8);
          v81 = (int8x16_t)vsubq_f32(a10, v128);
          v82 = (int8x16_t)vsubq_f32(a11, v128);
          a11 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v81, v81, 0xCuLL), v81, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), v82, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), v81, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v82, v82, 0xCuLL), v82, 8uLL));
          v83 = (float32x2_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL).u64[0];
          v84 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.f32, 1), *(float32x2_t *)a11.f32, 1), v83, v83);
          v85 = 0uLL;
          if (v84.f32[0] > 1.0e-13)
          {
            *(float *)v85.i32 = sqrtf(v84.f32[0]);
            v85 = (int8x16_t)vdivq_f32(a11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.i8, 0));
          }
          v70 = (float32x2_t *)(v66 + 12 * *v67);
          *(float32x2_t *)a11.f32 = *v70;
          v84.i32[0] = v70[1].i32[0];
          a14 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v85.i8, 1));
          v71 = vmla_lane_f32(vmul_f32(*v70, *(float32x2_t *)v85.i8), *(float32x2_t *)&a14, *v70, 1);
          a10 = (float32x4_t)vextq_s8(v85, v85, 8uLL);
          if (vmla_f32(v71, *(float32x2_t *)a10.f32, v84).f32[0] < 0.0)
            break;
        }
        if (++v67 == v68)
          goto LABEL_62;
      }
      a7 = v123;
LABEL_23:
      v20 += 2;
      ++v21;
      if (v20 == v19)
        return v110;
    }
LABEL_62:
    v86 = *a3;
    if (a8[15] - v65 == a8[10] - v66
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 492, (uint64_t)"mesh.faces.size() == mesh.normals.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      v87 = *(unsigned int **)(v86 + 24 * v62);
      v88 = *(unsigned int **)(v86 + 24 * v62 + 8);
      if (v87 == v88)
      {
LABEL_82:
        a7 = v123;
        sub_223CD6F98(v21, (uint64_t *)&v128, a2, a3, a4, a5, a6, v123, a8, 1u);
        ++v110;
        goto LABEL_23;
      }
      v89 = *a8;
      a9.i32[3] = v128.i32[3];
      while (1)
      {
        v92 = (unsigned int *)(a8[14] + 12 * *v87);
        v94 = *v92;
        v93 = v92[1];
        v95 = v92[2];
        v96 = v94 == v63 || v93 == v63;
        if (!v96 && v95 != v63)
        {
          if (v94 == v62)
          {
            v98 = v93;
            LODWORD(v93) = v95;
          }
          else if (v93 == v62)
          {
            v98 = v95;
            LODWORD(v93) = v94;
          }
          else
          {
            v98 = v94;
            if (v95 != v62)
              goto LABEL_86;
          }
          v99 = v89 + 12 * v98;
          v100 = v89 + 12 * v93;
          a10.i64[0] = *(_QWORD *)v99;
          a10.i32[2] = *(_DWORD *)(v99 + 8);
          a11.i64[0] = *(_QWORD *)v100;
          a11.i32[2] = *(_DWORD *)(v100 + 8);
          v101 = (int8x16_t)vsubq_f32(a10, v128);
          v102 = (int8x16_t)vsubq_f32(a11, v128);
          a11 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v101, v101, 0xCuLL), v101, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), v102, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), v101, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v102, v102, 0xCuLL), v102, 8uLL));
          v103 = (float32x2_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL).u64[0];
          v104 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a11.f32, *(float32x2_t *)a11.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.f32, 1), *(float32x2_t *)a11.f32, 1), v103, v103);
          v105 = 0uLL;
          if (v104.f32[0] > 1.0e-13)
          {
            *(float *)v105.i32 = sqrtf(v104.f32[0]);
            v105 = (int8x16_t)vdivq_f32(a11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.i8, 0));
          }
          v90 = (float32x2_t *)(a8[9] + 12 * *v87);
          *(float32x2_t *)a11.f32 = *v90;
          v104.i32[0] = v90[1].i32[0];
          a14 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)v105.i8, 1));
          v91 = vmla_lane_f32(vmul_f32(*v90, *(float32x2_t *)v105.i8), *(float32x2_t *)&a14, *v90, 1);
          a10 = (float32x4_t)vextq_s8(v105, v105, 8uLL);
          if (vmla_f32(v91, *(float32x2_t *)a10.f32, v104).f32[0] < 0.0)
            break;
        }
        if (++v87 == v88)
          goto LABEL_82;
      }
LABEL_22:
      a7 = v123;
      goto LABEL_23;
    }
LABEL_87:
    abort();
  }
  return 0;
}

float32_t sub_223CD8370(uint64_t *a1, char **a2, float32x4_t a3, float32x4_t a4, double a5, double a6, float32x2_t a7)
{
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t *v20;
  int *v21;
  char *v22;
  unsigned int v23;
  float32x2_t *v24;
  float32x2_t v25;
  float32_t v26;
  float v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  float32x4_t *v36;
  float32_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;

  if (a1[10] - a1[9] != a1[15] - a1[14]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/MeshDecimationUtils.cpp", 532, (uint64_t)"mesh.normals.size() == mesh.faces.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v9 = *a2;
  a2[1] = *a2;
  v10 = a1[1] - *a1;
  if (v10)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v9) >> 3);
    if (v12 >= v11)
    {
      bzero(v9, 40 * ((40 * v11 - 40) / 0x28) + 40);
      a2[1] = &v9[40 * ((40 * v11 - 40) / 0x28) + 40];
    }
    else
    {
      if (v11 > 0x666666666666666)
        sub_22316E078();
      v13 = 0x999999999999999ALL * ((a2[2] - v9) >> 3);
      if (v13 <= v11)
        v13 = v11;
      if (v12 >= 0x333333333333333)
        v14 = 0x666666666666666;
      else
        v14 = v13;
      if (v14 > 0x666666666666666)
        sub_223174E94();
      v15 = 40 * v14;
      v16 = (char *)operator new(40 * v14);
      bzero(v16, 40 * ((40 * v11 - 40) / 0x28) + 40);
      *a2 = v16;
      a2[1] = &v16[40 * ((40 * v11 - 40) / 0x28) + 40];
      a2[2] = &v16[v15];
      if (v9)
        operator delete(v9);
    }
  }
  v17 = a1[14];
  v18 = -1431655765 * ((unint64_t)(a1[15] - v17) >> 2);
  if ((_DWORD)v18)
  {
    v19 = *a1;
    v20 = (float32x2_t *)a1[9];
    v21 = (int *)(v17 + 8);
    v22 = *a2;
    do
    {
      v23 = *(v21 - 2);
      v24 = (float32x2_t *)(v19 + 12 * v23);
      *(float32x2_t *)a3.f32 = *v20;
      a4.i32[0] = v20[1].i32[0];
      a7.i32[0] = v24[1].i32[0];
      v25 = vmla_f32(vmla_lane_f32(vmul_f32(*v20, *v24), (float32x2_t)vdup_lane_s32((int32x2_t)*v24, 1), *v20, 1), a7, *(float32x2_t *)a4.f32);
      v26 = -v25.f32[0];
      v27 = -(float)(v25.f32[0] * a4.f32[0]);
      v25.f32[0] = vmul_f32(v25, v25).f32[0];
      v28 = (float32x4_t *)&v22[40 * v23];
      v29 = (float32x4_t *)&v22[40 * *(v21 - 1)];
      v30 = a3;
      v31 = v25.f32[0] + v28[2].f32[1];
      v30.i32[2] = a4.i32[0];
      v32 = (int32x4_t)v30;
      v33 = (float32x4_t)vuzp1q_s32(vdupq_lane_s32((int32x2_t)*v20, 1), (int32x4_t)v30);
      v30.f32[3] = v26;
      v28[2].f32[0] = v27 + v28[2].f32[0];
      v28[2].f32[1] = v31;
      v34 = vmulq_n_f32(v30, a3.f32[0]);
      v32.i32[3] = a4.i32[0];
      v35 = *v21;
      v21 += 3;
      v36 = (float32x4_t *)&v22[40 * v35];
      v33.f32[2] = v26;
      v37 = v25.f32[0] + v29[2].f32[1];
      v38 = vmulq_f32((float32x4_t)vuzp2q_s32(v32, v32), v33);
      v39 = v28[1];
      v40 = vaddq_f32(v34, *v28);
      v29[2].f32[0] = v27 + v29[2].f32[0];
      v29[2].f32[1] = v37;
      *v28 = v40;
      v28[1] = vaddq_f32(v38, v39);
      v41 = vaddq_f32(v38, v29[1]);
      *v29 = vaddq_f32(v34, *v29);
      v29[1] = v41;
      a3 = vaddq_f32(v34, *v36);
      a4 = vaddq_f32(v38, v36[1]);
      v38.i32[0] = v36[2].i32[1];
      v41.f32[0] = v27 + v36[2].f32[0];
      *v36 = a3;
      v36[1] = a4;
      a3.f32[0] = v25.f32[0] + v38.f32[0];
      v36[2].i32[0] = v41.i32[0];
      v36[2].f32[1] = v25.f32[0] + v38.f32[0];
      v20 = (float32x2_t *)((char *)v20 + 12);
      --v18;
    }
    while (v18);
  }
  return a3.f32[0];
}

_QWORD *sub_223CD8618(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_223CD86C0(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223CD8718(_QWORD *a1, unsigned int **a2, int32x2_t **a3)
{
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t *v26;
  int32x2_t *v27;
  int v28;
  float32x4_t v29;
  unsigned __int8 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  size_t v36;
  const char *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  void *v44;
  int v45;
  unsigned int *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  unint64_t v54;
  size_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  const char *__src;
  unint64_t v95;
  uint64_t *v96[3];
  int v97;
  const char *v98;
  int v99;
  const char *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *object;
  void *v107[2];
  __int128 v108;
  void *__p[2];
  unint64_t v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  object = 0;
  LODWORD(v107[0]) = 0;
  sub_22339E688((uint64_t)a3, v6, (uint64_t *)&object);
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      v12 = 12 * *v10;
      v13 = *a1 + v12;
      v14 = *a1 + 12 * v10[1];
      v15 = *a1 + 12 * v10[2];
      v7.i64[0] = *(_QWORD *)v14;
      v7.i32[2] = *(_DWORD *)(v14 + 8);
      v8.i64[0] = *(_QWORD *)v13;
      v8.i32[2] = *(_DWORD *)(v13 + 8);
      v9.i64[0] = *(_QWORD *)v15;
      v9.i32[2] = *(_DWORD *)(v15 + 8);
      v16 = (int32x4_t)vsubq_f32(v7, v8);
      v17 = (int32x4_t)vsubq_f32(v9, v8);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL);
      v19 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL), (int8x16_t)v17, 8uLL);
      v9 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL), v18);
      v20 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL), v19);
      v21 = (uint64_t)*a3 + v12;
      v19.i64[0] = *(_QWORD *)v21;
      v19.i32[2] = *(_DWORD *)(v21 + 8);
      v22 = vsubq_f32(v9, v20);
      v23 = vaddq_f32(v19, v22);
      *(_DWORD *)(v21 + 8) = v23.i32[2];
      *(_QWORD *)v21 = v23.i64[0];
      v24 = (uint64_t)*a3 + 12 * v10[1];
      v23.i64[0] = *(_QWORD *)v24;
      v23.i32[2] = *(_DWORD *)(v24 + 8);
      v8 = vaddq_f32(v22, v23);
      *(_DWORD *)(v24 + 8) = v8.i32[2];
      *(_QWORD *)v24 = v8.i64[0];
      v25 = (uint64_t)*a3 + 12 * v10[2];
      v8.i64[0] = *(_QWORD *)v25;
      v8.i32[2] = *(_DWORD *)(v25 + 8);
      v7 = vaddq_f32(v22, v8);
      *(_DWORD *)(v25 + 8) = v7.i32[2];
      *(_QWORD *)v25 = v7.i64[0];
      v10 += 3;
    }
    while (v10 != v11);
  }
  v26 = *a3;
  v27 = a3[1];
  if (*a3 != v27)
  {
    v28 = 0;
    do
    {
      v8.i32[0] = v26[1].i32[0];
      *(int32x2_t *)v9.f32 = *v26;
      v29 = v9;
      v8.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*v26, 1), (float32x2_t)*v26, 1), *(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0]);
      if (v8.f32[0] < 0.00000011921)
      {
        ++v28;
        v8.f32[0] = 0.00000011921;
      }
      v29.i32[2] = v26[1].i32[0];
      v8 = vdivq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0));
      v26[1].i32[0] = v8.i32[2];
      *v26 = *(int32x2_t *)v8.f32;
      v26 = (int32x2_t *)((char *)v26 + 12);
    }
    while (v26 != v27);
    if (v28)
    {
      v30 = atomic_load((unsigned __int8 *)&qword_2540CDF78);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDF78))
      {
        sub_22455F53C(v96);
        sub_223174DE4(&object, "cv3d.recon.mesh_util");
        sub_2232300E0(v96, (uint64_t)&object, &qword_2540CDF70);
        if (SHIBYTE(v107[1]) < 0)
          operator delete(object);
        __cxa_guard_release(&qword_2540CDF78);
      }
      v103 = qword_2540CDF70;
      if (**(int **)(qword_2540CDF70 + 56) <= 2)
      {
        v31 = *(unsigned __int8 *)(qword_2540CDF70 + 72);
        v32 = sub_22322F254(qword_2540CDF70, "OSLogSurrogateAppender", 1, 0);
        v33 = v32;
        if (v31 || v32 != 0)
        {
          v96[0] = &v103;
          v96[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
          v96[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
          v97 = 2;
          v98 = "unknown file";
          v99 = 82;
          v101 = 0;
          v102 = 0;
          v100 = "unknown function";
          v35 = *v96[0];
          v93 = *v96[0];
          v95 = v33;
          if (*(char *)(*v96[0] + 39) < 0)
          {
            v37 = *(const char **)(v35 + 16);
            v36 = *(_QWORD *)(v35 + 24);
            v92 = *v96[0] + 16;
            v39 = *a2;
            v38 = a2[1];
            v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v41 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            v36 = *(unsigned __int8 *)(*v96[0] + 39);
            v37 = (const char *)(*v96[0] + 16);
            v92 = (uint64_t)v37;
            v39 = *a2;
            v38 = a2[1];
            v40 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v40 & 1) != 0)
              goto LABEL_19;
          }
          if (__cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&object);
            sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
            if ((_BYTE)v108 && SHIBYTE(v107[1]) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
LABEL_19:
          if (byte_255788F57 >= 0)
            v42 = (const char *)&xmmword_255788F40;
          else
            v42 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v43 = byte_255788F57;
          else
            v43 = *((_QWORD *)&xmmword_255788F40 + 1);
          __src = v37;
          object = os_log_create(v42, v37);
          v44 = v107;
          if (v43 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v45 = v31;
          if (v43 >= 0x17)
          {
            v91 = v39;
            v47 = v95;
            v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v43 | 7) != 0x17)
              v48 = v43 | 7;
            v49 = v48 + 1;
            v44 = operator new(v48 + 1);
            v107[1] = (void *)v43;
            *(_QWORD *)&v108 = v49 | 0x8000000000000000;
            v107[0] = v44;
            v45 = v31;
            v46 = v91;
          }
          else
          {
            BYTE7(v108) = v43;
            v46 = v39;
            v47 = v95;
            if (!v43)
            {
LABEL_33:
              *((_BYTE *)v44 + v43) = 0;
              BYTE8(v108) = 1;
              v50 = __p;
              if (v36 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v36 >= 0x17)
              {
                v51 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v51 = v36 | 7;
                v52 = v51 + 1;
                v50 = operator new(v51 + 1);
                __p[1] = (void *)v36;
                v110 = v52 | 0x8000000000000000;
                __p[0] = v50;
              }
              else
              {
                HIBYTE(v110) = v36;
                if (!v36)
                  goto LABEL_41;
              }
              memmove(v50, __src, v36);
LABEL_41:
              *((_BYTE *)v50 + v36) = 0;
              v111 = 1;
              v53 = object;
              if (SHIBYTE(v110) < 0)
                operator delete(__p[0]);
              if (BYTE8(v108) && SBYTE7(v108) < 0)
                operator delete(v107[0]);
              if (object)
                os_release(object);
              v54 = 0xAAAAAAAAAAAAAAABLL * (v38 - v46);
              if (v47 && *(_QWORD *)(v47 + 24))
              {
                v55 = _os_log_pack_size();
                v56 = (std::__shared_weak_count_vtbl *)operator new(v55, (std::align_val_t)8uLL);
                v57 = (std::__shared_weak_count *)operator new();
                v58 = v57;
                v57->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v57->__shared_weak_owners_ = 0;
                v57[1].__vftable = v56;
                object = v56;
                v107[0] = v56;
                v107[1] = v57;
                do
                  v60 = __ldxr(p_shared_owners);
                while (__stxr(v60 + 1, p_shared_owners));
                v108 = 0uLL;
                __p[0] = 0;
                do
                  v61 = __ldaxr(p_shared_owners);
                while (__stlxr(v61 - 1, p_shared_owners));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v58);
                }
                v62 = object;
                v63 = _os_log_pack_fill();
                *(_DWORD *)v63 = 67109376;
                *(_DWORD *)(v63 + 4) = v28;
                *(_WORD *)(v63 + 8) = 2048;
                *(_QWORD *)(v63 + 10) = v54;
                v64 = operator new();
                v65 = *(unsigned __int8 *)(v93 + 39);
                v66 = v92;
                if ((v65 & 0x80u) != 0)
                {
                  v66 = *(_QWORD *)(v93 + 16);
                  v65 = *(_QWORD *)(v93 + 24);
                }
                *(_QWORD *)v64 = v62;
                *(_OWORD *)(v64 + 8) = *(_OWORD *)v107;
                v107[0] = 0;
                v107[1] = 0;
                *(_OWORD *)(v64 + 24) = v108;
                v108 = 0uLL;
                *(_QWORD *)(v64 + 40) = v66;
                *(_QWORD *)(v64 + 48) = v65;
                *(_BYTE *)(v64 + 56) = 2;
                v104 = 0;
                v105 = v64;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), &v105);
                v67 = v105;
                v105 = 0;
                if (v67)
                {
                  v68 = *(std::__shared_weak_count **)(v67 + 32);
                  if (v68)
                  {
                    v69 = (unint64_t *)&v68->__shared_owners_;
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  v71 = *(std::__shared_weak_count **)(v67 + 16);
                  if (v71)
                  {
                    v72 = (unint64_t *)&v71->__shared_owners_;
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  MEMORY[0x227684CE8](v67, 0x10F0C40B62ED6C6);
                  v74 = v104;
                  v104 = 0;
                  if (v74)
                  {
                    v75 = *(std::__shared_weak_count **)(v74 + 32);
                    if (v75)
                    {
                      v76 = (unint64_t *)&v75->__shared_owners_;
                      do
                        v77 = __ldaxr(v76);
                      while (__stlxr(v77 - 1, v76));
                      if (!v77)
                      {
                        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                        std::__shared_weak_count::__release_weak(v75);
                      }
                    }
                    v78 = *(std::__shared_weak_count **)(v74 + 16);
                    if (v78)
                    {
                      v79 = (unint64_t *)&v78->__shared_owners_;
                      do
                        v80 = __ldaxr(v79);
                      while (__stlxr(v80 - 1, v79));
                      if (!v80)
                      {
                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                        std::__shared_weak_count::__release_weak(v78);
                      }
                    }
                    MEMORY[0x227684CE8](v74, 0x10F0C40B62ED6C6);
                  }
                }
                v81 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                if (*((_QWORD *)&v108 + 1))
                {
                  v82 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                v84 = (std::__shared_weak_count *)v107[1];
                if (v107[1])
                {
                  v85 = (unint64_t *)((char *)v107[1] + 8);
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG);
                LODWORD(object) = 67109376;
                HIDWORD(object) = v28;
                LOWORD(v107[0]) = 2048;
                *(void **)((char *)v107 + 2) = (void *)(0xAAAAAAAAAAAAAAABLL * (v38 - v46));
                v87 = (void *)_os_log_send_and_compose_impl();
                if (v87)
                  free(v87);
              }
              if (v45)
              {
                sub_22322C138((uint64_t)v96, "Found %d/%lu collapsed faces.", v28, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
                sub_223182C08((uint64_t)v96);
              }
              sub_223182C08((uint64_t)v96);
              v88 = v102;
              if (v102)
              {
                v89 = (unint64_t *)&v102->__shared_owners_;
                do
                  v90 = __ldaxr(v89);
                while (__stlxr(v90 - 1, v89));
                if (!v90)
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
              }
              return;
            }
          }
          memmove(v44, v42, v43);
          goto LABEL_33;
        }
      }
    }
  }
}

void sub_223CD9084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223CD90C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDF78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDF78);
  _Unwind_Resume(a1);
}

void sub_223CD911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_22319A054(&a28);
  sub_22319A054(&a27);
  sub_223199DE8((uint64_t)&a29);
  sub_223182DAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_223CD9150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x227684CE8](v9, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CD917C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CD9190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223CD920C(const void **a1, uint64_t *a2, char **a3)
{
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  float *v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  int32x2_t *v118;
  float32x4_t v119;
  char *__p;
  _BYTE v121[20];
  __int32 v122;
  uint64_t v123;
  __int32 v124;
  uint64_t v125;
  __int32 v126;
  float32x4x3_t v127;
  float32x4x3_t v128;

  v6 = *a1;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 2);
  v8 = *a3;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
  if (v7 <= v9)
  {
    if (v7 < v9)
      a3[1] = &v8[12 * v7];
  }
  else
  {
    sub_22317EF30((uint64_t)a3, v7 - v9);
    v8 = *a3;
    v6 = *a1;
  }
  bzero(v8, (_BYTE *)a1[1] - v6);
  v10 = 0;
  v11 = *a2;
  v12 = a2[1];
  v13 = *a1;
  v14 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
  __p = 0;
  if (v15 != -1)
  {
    if (v15 + 1 >= 0x1555555555555556)
      sub_22316E078();
    v10 = (char *)operator new(v14 + 12);
    __p = v10;
  }
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 2);
  memcpy(v10, v13, v14);
  v20 = 0;
  if ((v16 & 0xFFFFFFFC) != 0)
  {
    v21 = 44;
    do
    {
      v22 = (unsigned int *)(*a2 + v21);
      v23 = *(v22 - 10);
      v24 = *(v22 - 9);
      v26 = *(v22 - 7);
      v25 = *(v22 - 6);
      v27 = *(v22 - 4);
      v28 = *(v22 - 3);
      v29 = *(v22 - 1);
      v30 = *v22;
      v31 = 12 * *(v22 - 11);
      v32 = *(int32x4_t *)&__p[v31];
      v33 = 12 * *(v22 - 8);
      v34 = 12 * *(v22 - 5);
      v35 = *(int32x4_t *)&__p[v33];
      v36 = *(int32x4_t *)&__p[v34];
      v37 = 12 * *(v22 - 2);
      v38 = *(int32x4_t *)&__p[v37];
      v39 = vzip1q_s32(v32, v36);
      v40 = *(int32x4_t *)&__p[12 * v23];
      v41 = vzip2q_s32(v32, v36);
      v42 = vzip1q_s32(v35, v38);
      v43 = *(int32x4_t *)&__p[12 * v26];
      v44 = vzip2q_s32(v35, v38);
      v45 = *(int32x4_t *)&__p[12 * v27];
      v46 = (float32x4_t)vzip1q_s32(v39, v42);
      v47 = *(int32x4_t *)&__p[12 * v29];
      v48 = vzip1q_s32(v40, v45);
      v49 = vzip2q_s32(v40, v45);
      v50 = (float32x4_t)vzip2q_s32(v39, v42);
      v51 = vzip1q_s32(v43, v47);
      v52 = *(int32x4_t *)&__p[12 * v24];
      v53 = (float32x4_t)vzip1q_s32(v41, v44);
      v54 = vzip2q_s32(v43, v47);
      v25 *= 12;
      v55 = *(int32x4_t *)&__p[v25];
      v56 = (float32x4_t)vzip1q_s32(v48, v51);
      v57 = *(int32x4_t *)&__p[12 * v28];
      v58 = (float32x4_t)vzip2q_s32(v48, v51);
      v59 = vzip1q_s32(v52, v57);
      v60 = vzip2q_s32(v52, v57);
      v61 = *(int32x4_t *)&__p[12 * v30];
      v62 = (float32x4_t)vzip1q_s32(v49, v54);
      v63 = vzip1q_s32(v55, v61);
      v64 = (float32x4_t)vzip1q_s32(v60, vzip2q_s32(v55, v61));
      v65 = vsubq_f32(v46, v56);
      v66 = vsubq_f32(v50, v58);
      v67 = vsubq_f32(v53, v62);
      v68 = vsubq_f32((float32x4_t)vzip1q_s32(v59, v63), v46);
      v19 = vsubq_f32((float32x4_t)vzip2q_s32(v59, v63), v50);
      v69 = vsubq_f32(v64, v53);
      v128.val[0] = vsubq_f32(vmulq_f32(v67, v19), vmulq_f32(v66, v69));
      v128.val[1] = vsubq_f32(vmulq_f32(v65, v69), vmulq_f32(v67, v68));
      v70 = vmulq_f32(v65, v19);
      v128.val[2] = vsubq_f32(vmulq_f32(v66, v68), v70);
      v71 = (uint64_t)&(*a3)[v31];
      v70.i64[0] = *(_QWORD *)v71;
      vst3q_f32((float *)v121, v128);
      v70.i32[2] = *(_DWORD *)(v71 + 8);
      v18 = *(float32x4_t *)v121;
      v72 = vaddq_f32(v70, *(float32x4_t *)v121);
      *(_DWORD *)(v71 + 8) = v72.i32[2];
      *(_QWORD *)v71 = v72.i64[0];
      v73 = (uint64_t)&(*a3)[12 * v23];
      v72.i64[0] = *(_QWORD *)v73;
      v72.i32[2] = *(_DWORD *)(v73 + 8);
      v74 = vaddq_f32(v18, v72);
      *(_DWORD *)(v73 + 8) = v74.i32[2];
      *(_QWORD *)v73 = v74.i64[0];
      v75 = (uint64_t)&(*a3)[12 * v24];
      v74.i64[0] = *(_QWORD *)v75;
      v74.i32[2] = *(_DWORD *)(v75 + 8);
      v76 = vaddq_f32(v18, v74);
      *(_DWORD *)(v75 + 8) = v76.i32[2];
      *(_QWORD *)v75 = v76.i64[0];
      v77 = (uint64_t)&(*a3)[v33];
      v76.i64[0] = *(_QWORD *)v77;
      v18.i64[0] = *(_QWORD *)&v121[12];
      v76.i32[2] = *(_DWORD *)(v77 + 8);
      v18.i32[2] = v122;
      v78 = vaddq_f32(v76, v18);
      *(_DWORD *)(v77 + 8) = v78.i32[2];
      *(_QWORD *)v77 = v78.i64[0];
      v79 = (uint64_t)&(*a3)[12 * v26];
      v78.i64[0] = *(_QWORD *)v79;
      v78.i32[2] = *(_DWORD *)(v79 + 8);
      v80 = vaddq_f32(v18, v78);
      *(_DWORD *)(v79 + 8) = v80.i32[2];
      *(_QWORD *)v79 = v80.i64[0];
      v81 = &(*a3)[v25];
      v80.i64[0] = *(_QWORD *)v81;
      v80.i32[2] = *((_DWORD *)v81 + 2);
      v82 = vaddq_f32(v18, v80);
      *((_DWORD *)v81 + 2) = v82.i32[2];
      *(_QWORD *)v81 = v82.i64[0];
      v83 = (uint64_t)&(*a3)[v34];
      v82.i64[0] = *(_QWORD *)v83;
      v18.i64[0] = v123;
      v82.i32[2] = *(_DWORD *)(v83 + 8);
      v18.i32[2] = v124;
      v84 = vaddq_f32(v82, v18);
      *(_DWORD *)(v83 + 8) = v84.i32[2];
      *(_QWORD *)v83 = v84.i64[0];
      v85 = (uint64_t)&(*a3)[12 * v27];
      v84.i64[0] = *(_QWORD *)v85;
      v84.i32[2] = *(_DWORD *)(v85 + 8);
      v86 = vaddq_f32(v18, v84);
      *(_DWORD *)(v85 + 8) = v86.i32[2];
      *(_QWORD *)v85 = v86.i64[0];
      v87 = (uint64_t)&(*a3)[12 * v28];
      v86.i64[0] = *(_QWORD *)v87;
      v86.i32[2] = *(_DWORD *)(v87 + 8);
      v88 = vaddq_f32(v18, v86);
      *(_DWORD *)(v87 + 8) = v88.i32[2];
      *(_QWORD *)v87 = v88.i64[0];
      v89 = (uint64_t)&(*a3)[v37];
      v88.i64[0] = *(_QWORD *)v89;
      v18.i64[0] = v125;
      v88.i32[2] = *(_DWORD *)(v89 + 8);
      v18.i32[2] = v126;
      v90 = vaddq_f32(v88, v18);
      *(_DWORD *)(v89 + 8) = v90.i32[2];
      *(_QWORD *)v89 = v90.i64[0];
      v91 = (uint64_t)&(*a3)[12 * v29];
      v90.i64[0] = *(_QWORD *)v91;
      v90.i32[2] = *(_DWORD *)(v91 + 8);
      v92 = vaddq_f32(v18, v90);
      *(_DWORD *)(v91 + 8) = v92.i32[2];
      *(_QWORD *)v91 = v92.i64[0];
      v93 = (uint64_t)&(*a3)[12 * v30];
      v92.i64[0] = *(_QWORD *)v93;
      v92.i32[2] = *(_DWORD *)(v93 + 8);
      v17 = vaddq_f32(v18, v92);
      *(_DWORD *)(v93 + 8) = v17.i32[2];
      *(_QWORD *)v93 = v17.i64[0];
      v20 += 4;
      v21 += 48;
    }
    while (v20 < (v16 & 0xFFFFFFFC));
    v11 = *a2;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  }
  if (v20 < v16)
  {
    v94 = 12 * v20;
    do
    {
      v95 = 12 * *(unsigned int *)(v11 + v94);
      v96 = (uint64_t)*a1 + v95;
      v97 = (uint64_t)*a1 + 12 * *(unsigned int *)(v11 + v94 + 4);
      v98 = (uint64_t)*a1 + 12 * *(unsigned int *)(v11 + v94 + 8);
      v17.i64[0] = *(_QWORD *)v97;
      v17.i32[2] = *(_DWORD *)(v97 + 8);
      v18.i64[0] = *(_QWORD *)v96;
      v18.i32[2] = *(_DWORD *)(v96 + 8);
      v19.i64[0] = *(_QWORD *)v98;
      v19.i32[2] = *(_DWORD *)(v98 + 8);
      v99 = (int8x16_t)vsubq_f32(v17, v18);
      v100 = (int8x16_t)vsubq_f32(v19, v18);
      v101 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), v100, 0xCuLL);
      v102 = (float32x4_t)vextq_s8(vextq_s8(v100, v100, 0xCuLL), v100, 8uLL);
      v19 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v99, v99, 0xCuLL), v99, 8uLL), v101);
      v103 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), v99, 0xCuLL), v102);
      v104 = (uint64_t)&(*a3)[v95];
      v102.i64[0] = *(_QWORD *)v104;
      v102.i32[2] = *(_DWORD *)(v104 + 8);
      v105 = vsubq_f32(v19, v103);
      v106 = vaddq_f32(v102, v105);
      *(_DWORD *)(v104 + 8) = v106.i32[2];
      *(_QWORD *)v104 = v106.i64[0];
      v107 = (uint64_t)&(*a3)[12 * *(unsigned int *)(v11 + v94 + 4)];
      v106.i64[0] = *(_QWORD *)v107;
      v106.i32[2] = *(_DWORD *)(v107 + 8);
      v18 = vaddq_f32(v105, v106);
      *(_DWORD *)(v107 + 8) = v18.i32[2];
      *(_QWORD *)v107 = v18.i64[0];
      v108 = (uint64_t)&(*a3)[12 * *(unsigned int *)(v11 + v94 + 8)];
      v18.i64[0] = *(_QWORD *)v108;
      v18.i32[2] = *(_DWORD *)(v108 + 8);
      v17 = vaddq_f32(v105, v18);
      *(_DWORD *)(v108 + 8) = v17.i32[2];
      *(_QWORD *)v108 = v17.i64[0];
      ++v20;
      v11 = *a2;
      v94 += 12;
    }
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  }
  v109 = *a3;
  v110 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
  v111 = v110 & 0xFFFFFFFC;
  if ((v110 & 0xFFFFFFFC) != 0)
  {
    v112 = 0;
    v113 = 0;
    do
    {
      v114 = (float *)&(*a3)[v112];
      *(float32x4x3_t *)(&v18 - 1) = vld3q_f32(v114);
      v116 = vsqrtq_f32(vaddq_f32(vmulq_f32(v19, v19), vaddq_f32(vmulq_f32(v115, v115), vmulq_f32(v18, v18))));
      v127.val[0] = vdivq_f32(v115, v116);
      v127.val[1] = vdivq_f32(v18, v116);
      v127.val[2] = vdivq_f32(v19, v116);
      vst3q_f32(v114, v127);
      v113 += 4;
      v112 += 48;
    }
    while (v113 < v111);
    v109 = *a3;
    if (v113 >= 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2))
      goto LABEL_23;
    goto LABEL_21;
  }
  v113 = 0;
  if (v110)
  {
LABEL_21:
    v117 = 12 * v113;
    do
    {
      v118 = (int32x2_t *)&v109[v117];
      v18.i32[0] = v118[1].i32[0];
      *(int32x2_t *)v19.f32 = *v118;
      v119 = v19;
      v119.i32[2] = v18.i32[0];
      v18 = vmulq_n_f32(v119, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32), (float32x2_t)vdup_lane_s32(*v118, 1), (float32x2_t)*v118, 1), *(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32).f32[0]));
      v118[1].i32[0] = v18.i32[2];
      *v118 = *(int32x2_t *)v18.f32;
      ++v113;
      v109 = *a3;
      v117 += 12;
    }
    while (v113 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  }
LABEL_23:
  if (__p)
    operator delete(__p);
}

void sub_223CD98C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223CD98DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC637E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223CD99CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC637E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CD9ABC(uint64_t a1, uint64_t a2, unsigned int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v9;
  void ***v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void ***v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  __int128 v109;
  void **v110;
  std::__shared_weak_count *v111;
  void *v112;
  _QWORD v113[4];

  *(double *)v113 = a4;
  *(double *)&v113[1] = a5;
  *(double *)&v113[2] = a6;
  *(double *)&v113[3] = a7;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = &off_24EC634A0;
  v9 = a1 + 8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = xmmword_22466EFA0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 1;
  v10 = (void ***)(a1 + 88);
  *(_BYTE *)(a1 + 86) = 0;
  sub_2232285F8((_QWORD *)(a1 + 88));
  sub_2232291A8((_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 152) = 0;
  sub_223227930((uint64_t *)&v112);
  sub_223226E78(*(void ****)a1, v11, v12, v13, v14, v15, &v110);
  sub_223CEA6B8(v9, &v110);
  v16 = *(void ****)a1;
  v18 = *(_DWORD *)(*(_QWORD *)a1 + 16);
  v17 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  nullsub_30(&v110);
  sub_223226080(&v109, &v110, v17 * v18, 0, v19, v20);
  v21 = v109;
  v109 = 0uLL;
  v22 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v21;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_2232290AC(a3, (const char *)*((unsigned int *)v16 + 4), *((_DWORD *)v16 + 5), 0, &v109);
  sub_223229188((_QWORD **)&v109, 2, v28, v29, v30, v31);
  sub_223229198((_QWORD **)&v109, 4u, v32, v33, v34, v35);
  nullsub_30(&v110);
  sub_223229208(&v108, &v110, (uint64_t **)&v109, v36, v37, v38);
  v43 = v108;
  v108 = 0uLL;
  v44 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_223228674(v10, 0, v39, v40, v41, v42, &v108);
  sub_2232285A4((_QWORD **)&v108, (_QWORD **)(a1 + 104), v50, v51, v52, v53);
  sub_2232285B8((_QWORD **)&v108, 2, v54, v55, v56, v57);
  sub_2232285C8((_QWORD **)&v108, 1, v58, v59, v60, v61);
  sub_2232285D8((_QWORD **)&v108, (uint64_t)v113, v62, v63, v64, v65);
  sub_223228784(v10, v66, v67, v68, v69, v70, &v106);
  sub_2232285A4(&v106, (_QWORD **)(*(_QWORD *)a1 + 40), v71, v72, v73, v74);
  sub_2232285B8(&v106, 2, v75, v76, v77, v78);
  sub_2232285C8(&v106, 0, v79, v80, v81, v82);
  sub_2232285EC(&v106, v83, v84, v85, v86, v87);
  v93 = v107;
  if (v107)
  {
    v94 = (unint64_t *)&v107->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v97 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v111;
  if (v111)
  {
    v103 = (unint64_t *)&v111->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  sub_22322797C(&v112, v88, v89, v90, v91, v92);
  return a1;
}

void sub_223CD9E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  va_list va1;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  va_list va2;
  uint64_t v25;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v22 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v23 = va_arg(va3, _QWORD);
  v25 = va_arg(va3, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va2);
  sub_22322797C((void **)va3, v11, v12, v13, v14, v15);
  sub_223CD5140(v8, *v9);
  sub_223167354(v7);
  sub_223167354(a3);
  sub_223167354(v6);
  sub_223CEA5C0(v5);
  _Unwind_Resume(a1);
}

void sub_223CD9F40(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  char *v25;
  uint64_t **v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD v101[3];
  void **v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  unint64_t v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return;
  v7 = *(_QWORD *)(a2 + 240);
  v8 = *(_QWORD *)(a2 + 248);
  if (v7 == v8)
    return;
  v11 = a3;
  if (v8 - v7 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/SemanticRenderer.cpp", 88, (uint64_t)"mesh.semantics.size() == mesh.faces.size()", 42, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223226CAC(a5, (const char *)a2, a3, a4, a5, a6, &v102);
  v19 = (uint64_t **)(a1 + 144);
  v18 = *(uint64_t **)(a1 + 144);
  if (!v18)
  {
    v26 = (uint64_t **)(a1 + 144);
LABEL_23:
    v28 = (char *)operator new(0x58uLL);
    *((_QWORD *)v28 + 4) = a2;
    *(_OWORD *)(v28 + 40) = 0u;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = v26;
    *v19 = (uint64_t *)v28;
    v29 = **(_QWORD **)(a1 + 136);
    v30 = (uint64_t *)v28;
    if (v29)
    {
      *(_QWORD *)(a1 + 136) = v29;
      v30 = *v19;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 144), v30);
    ++*(_QWORD *)(a1 + 152);
    goto LABEL_26;
  }
  v20 = (uint64_t **)(a1 + 144);
  v21 = *(_QWORD **)(a1 + 144);
  do
  {
    v22 = v21[4];
    v23 = v22 >= a2;
    if (v22 >= a2)
      v24 = v21;
    else
      v24 = v21 + 1;
    if (v23)
      v20 = (uint64_t **)v21;
    v21 = (_QWORD *)*v24;
  }
  while (*v24);
  if (v20 == v19 || (unint64_t)v20[4] > a2)
  {
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t **)v18;
        v27 = v18[4];
        if (v27 <= a2)
          break;
        v18 = *v26;
        v19 = v26;
        if (!*v26)
          goto LABEL_23;
      }
      if (v27 >= a2)
        break;
      v18 = v26[1];
      if (!v18)
      {
        v19 = v26 + 1;
        goto LABEL_23;
      }
    }
    v28 = (char *)v26;
LABEL_26:
    v31 = *(_QWORD *)a2;
    v32 = *(_QWORD *)(a2 + 8);
    nullsub_30(&v102);
    v108 = 0;
    sub_2232264FC(&v104, &v102, v31, (((v32 - v31) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, &v105);
    v33 = v108;
    if (v108 == (uint64_t *)&v105)
    {
      v34 = 4;
      v33 = (uint64_t *)&v105;
    }
    else
    {
      if (!v108)
      {
LABEL_31:
        v35 = v104;
        v104 = 0uLL;
        v36 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
        *(_OWORD *)(v28 + 40) = v35;
        if (!v36)
          goto LABEL_35;
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v25 = v28 + 40;
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
          if (!*((_QWORD *)&v104 + 1))
            goto LABEL_39;
        }
        else
        {
LABEL_35:
          v25 = v28 + 40;
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
          if (!*((_QWORD *)&v104 + 1))
            goto LABEL_39;
        }
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          v42 = *(_QWORD *)(a2 + 112);
          v43 = *(_QWORD *)(a2 + 120);
          if (v42 == v43)
            goto LABEL_74;
          goto LABEL_40;
        }
LABEL_39:
        v42 = *(_QWORD *)(a2 + 112);
        v43 = *(_QWORD *)(a2 + 120);
        if (v42 == v43)
          goto LABEL_74;
LABEL_40:
        nullsub_30(&v102);
        v108 = 0;
        sub_2232264FC(&v104, &v102, v42, (((v43 - v42) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, &v105);
        v44 = v108;
        if (v108 == (uint64_t *)&v105)
        {
          v45 = 4;
          v44 = (uint64_t *)&v105;
        }
        else
        {
          if (!v108)
          {
LABEL_49:
            v46 = v104;
            v104 = 0uLL;
            v47 = (std::__shared_weak_count *)*((_QWORD *)v28 + 8);
            *(_OWORD *)(v28 + 56) = v46;
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
            if (*((_QWORD *)&v104 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = *(_QWORD *)(a2 + 240);
            v54 = *(_QWORD *)(a2 + 248);
            nullsub_30(&v102);
            v108 = 0;
            sub_2232264FC(&v104, &v102, v53, (v54 - v53 + 4095) & 0xFFFFF000, 0, &v105);
            v55 = v108;
            if (v108 == (uint64_t *)&v105)
            {
              v56 = 4;
              v55 = (uint64_t *)&v105;
            }
            else
            {
              if (!v108)
                goto LABEL_64;
              v56 = 5;
            }
            (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_64:
            v57 = v104;
            v104 = 0uLL;
            v58 = (std::__shared_weak_count *)*((_QWORD *)v28 + 10);
            *(_OWORD *)(v28 + 72) = v57;
            if (v58)
            {
              v59 = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v61 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
            if (*((_QWORD *)&v104 + 1))
            {
              v62 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            goto LABEL_74;
          }
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
        goto LABEL_49;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_31;
  }
  v25 = (char *)(v20 + 5);
LABEL_74:
  v65 = *(_QWORD **)v25;
  v64 = (std::__shared_weak_count *)*((_QWORD *)v25 + 1);
  v105 = a2;
  v106 = v65;
  v107 = v64;
  if (v64)
  {
    v66 = (unint64_t *)&v64->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)v25 + 3);
  v108 = (uint64_t *)*((_QWORD *)v25 + 2);
  v109 = v68;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)v25 + 5);
  v110 = (_QWORD *)*((_QWORD *)v25 + 4);
  v111 = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *(_QWORD *)(a5 + 16);
  v101[1] = *(_QWORD *)(a5 + 8);
  v101[2] = v74;
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v101[0] = &off_24EC25F68;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 248))
  {
    sub_223226CAC((uint64_t)v101, v13, v14, v15, v16, v17, &v104);
    if ((v11 & 1) != 0)
    {
      v81 = *(_QWORD *)(v105 + 112);
      v82 = *(_QWORD *)(v105 + 120);
      if (v81 != v82)
      {
        sub_223228420((uint64_t)v101, (_QWORD **)(a1 + 48), v77, v78, v79, v80);
        sub_223228434((uint64_t)v101, a4, 0x50u, 0, 0, v83);
        sub_223228450((uint64_t)v101, &v106, 0, 1u, 1, v84);
        sub_2232284A4((uint64_t)v101, &v110, 0, 0, 1, v85);
        sub_2232284FC((uint64_t)v101, 3, (unint64_t)(v82 - v81) >> 2, 1, &v108);
      }
    }
    if ((v11 & 6) != 0)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/SemanticRenderer.cpp", 153, (uint64_t)"", 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_22457406C);
      abort();
    }
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  sub_223226D74(v101);
  v89 = v111;
  if (v111)
  {
    v90 = (unint64_t *)&v111->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v109;
  if (v109)
  {
    v93 = (unint64_t *)&v109->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v107;
  if (v107)
  {
    v96 = (unint64_t *)&v107->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v103;
  if (v103)
  {
    v99 = (unint64_t *)&v103->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
}

void sub_223CDA69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_223226D74((uint64_t *)va);
  sub_223CD5FE0(va2);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

char *sub_223CDA788@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_223CDA7DC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_223CDA838(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "MeshSemanticsVS");
}

void sub_223CDA860(char *a1@<X8>)
{
  unsigned __int8 v2;
  BOOL v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = atomic_load((unsigned __int8 *)&qword_2557950F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2557950F8))
  {
    byte_2557950F0 = sub_223FF1D10();
    __cxa_guard_release(&qword_2557950F8);
  }
  if (!byte_2557950F0)
  {
    sub_223227930((uint64_t *)&v9);
    v3 = sub_223CEFC14();
    sub_22322797C(&v9, v4, v5, v6, v7, v8);
    if (!v3
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/include_private/Reconstruction/MeshUtil/SemanticRenderer.h", 79, (uint64_t)"(system::is_device_virtual_machine() || has_primitive_id_rendering())", 69, (uint64_t)"GPU capability check failed on non-virtual machine.", 51, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  a1[23] = 15;
  strcpy(a1, "MeshSemanticsFS");
}

void sub_223CDA940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2557950F8);
  _Unwind_Resume(a1);
}

void sub_223CDA958(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

uint64_t sub_223CDA96C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  *(_QWORD *)(a1 + 8) = off_24EC637E8;
  v14 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v20)
    return a1;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void **sub_223CDAB6C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  sub_223227930((uint64_t *)&v15);
  if (*(_QWORD *)(a1 + 72))
    return sub_22322797C(&v15, v2, v3, v4, v5, v6);
  v8 = operator new();
  sub_223CD5418(v8, a1, 0x37u, -65504.0, -65504.0, -65504.0, -65504.0);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  if (v14)
    (*(void (**)(void))(a1 + 80))();
  *(_QWORD *)(a1 + 80) = sub_223CDB7D4;
  return sub_22322797C(&v15, v9, v10, v11, v12, v13);
}

void sub_223CDAC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10A0C40A68C26F0);
  sub_22322797C((void **)va, v4, v5, v6, v7, v8);
  _Unwind_Resume(a1);
}

void sub_223CDAC50(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void **sub_223CDAC64(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  sub_223227930((uint64_t *)&v15);
  if (*(_QWORD *)(a1 + 152))
    return sub_22322797C(&v15, v2, v3, v4, v5, v6);
  v8 = operator new();
  sub_223CD9ABC(v8, a1, 0xAu, 0.996078431, 0.996078431, 0.996078431, 0.996078431);
  v14 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v8;
  if (v14)
    (*(void (**)(void))(a1 + 160))();
  *(_QWORD *)(a1 + 160) = sub_223CDB8B0;
  return sub_22322797C(&v15, v9, v10, v11, v12, v13);
}

void sub_223CDAD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10A0C40A68C26F0);
  sub_22322797C((void **)va, v4, v5, v6, v7, v8);
  _Unwind_Resume(a1);
}

void sub_223CDAD44(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_223CDAD58(uint64_t a1, void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
    goto LABEL_18;
  if ((v5 & 0xFFF) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshRenderer.cpp", 73, (uint64_t)"IsAligned(mesh_.vertices.data(), kPageSize)", 43, (uint64_t)"Expect aligned vertices", 23, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = (((v4 - v5) & 0xFFFFFFFC) + 4095) & 0xFFFFF000;
  nullsub_30(a2);
  v40 = 0;
  sub_2232264FC(&v38, a2, v5, v6, 0, v39);
  v7 = v40;
  if (v40 == v39)
  {
    v8 = 4;
    v7 = v39;
    goto LABEL_9;
  }
  if (v40)
  {
    v8 = 5;
LABEL_9:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v38;
  v38 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a1 + 392);
  *(_OWORD *)(a1 + 384) = v9;
  if (!v10)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_18;
  }
  else
  {
LABEL_14:
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_18;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_18:
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_QWORD *)(a1 + 120);
    if (v16 == v17)
      goto LABEL_40;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  if (v16 == v17)
    goto LABEL_40;
LABEL_19:
  if ((v16 & 0xFFF) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshRenderer.cpp", 79, (uint64_t)"IsAligned(mesh_.faces.data(), kPageSize)", 40, (uint64_t)"Expect aligned faces", 20, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_QWORD *)(a1 + 120);
  }
  nullsub_30(a2);
  v40 = 0;
  sub_2232264FC(&v38, a2, v16, (((v17 - v16) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, v39);
  v18 = v40;
  if (v40 == v39)
  {
    v19 = 4;
    v18 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_27;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_27:
  v20 = v38;
  v38 = 0uLL;
  v21 = *(std::__shared_weak_count **)(a1 + 408);
  *(_OWORD *)(a1 + 400) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_40:
  v27 = *(_QWORD *)(a1 + 240);
  v28 = *(_QWORD *)(a1 + 248);
  if (v27 == v28)
    return;
  if ((v27 & 0xFFF) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshRenderer.cpp", 85, (uint64_t)"IsAligned(mesh_.semantics.data(), kPageSize)", 44, (uint64_t)"Expect aligned faces", 20, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v27 = *(_QWORD *)(a1 + 240);
    v28 = *(_QWORD *)(a1 + 248);
  }
  nullsub_30(a2);
  v40 = 0;
  sub_2232264FC(&v38, a2, v27, (v28 - v27 + 4095) & 0xFFFFF000, 0, v39);
  v29 = v40;
  if (v40 == v39)
  {
    v30 = 4;
    v29 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_49;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_49:
  v31 = v38;
  v38 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 424);
  *(_OWORD *)(a1 + 416) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223CDB170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15 != v15)
  {
    if (a15)
    {
      (*(void (**)(void))(*(_QWORD *)a15 + 40))();
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(a12 + 32))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CDB1E8(uint64_t a1, uint64_t a2, void ***a3)
{
  _OWORD *v5;

  v5 = (_OWORD *)sub_223180698(a1, a2);
  v5[25] = 0u;
  v5[26] = 0u;
  v5[24] = 0u;
  sub_223CDAD58((uint64_t)v5, a3);
  return a1;
}

void sub_223CDB22C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = (std::__shared_weak_count *)v1[53];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)v1[51];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v1[49];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223CDB2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 160))();
  v3 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 144))();
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 128))();
  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v5)
    (*(void (**)(void))(a1 + 112))();
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    (*(void (**)(void))(a1 + 96))();
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
    (*(void (**)(void))(a1 + 80))();
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void **sub_223CDB450(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v68;
  __int128 v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  void **v72;
  std::__shared_weak_count *v73;
  void *v74;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_223227930((uint64_t *)&v74);
  sub_223226E78((void ***)a1, v12, v13, v14, v15, v16, &v72);
  if (!sub_223225C34(&v72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshRenderer.cpp", 147, (uint64_t)"device", 6, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223227778(&v70);
  sub_223227804(&v70, 1, v17, v18, v19, v20);
  sub_2232277F4(&v70, 3, v21, v22, v23, v24);
  nullsub_30(&v72);
  sub_223227814(&v69, &v72, &v70, v25, v26, v27);
  v28 = v69;
  v69 = 0uLL;
  v29 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v28;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_2232290AC(0xFCu, (const char *)*a2, a2[1], 0, &v69);
  sub_223229188((_QWORD **)&v69, 2, v35, v36, v37, v38);
  sub_223229198((_QWORD **)&v69, 4u, v39, v40, v41, v42);
  nullsub_30(&v72);
  sub_223229208(&v68, &v72, (uint64_t **)&v69, v43, v44, v45);
  v51 = v68;
  v68 = 0uLL;
  v52 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v51;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v71;
  if (v71)
  {
    v62 = (unint64_t *)&v71->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v73;
  if (v73)
  {
    v65 = (unint64_t *)&v73->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return sub_22322797C(&v74, v46, v47, v48, v49, v50);
}

void sub_223CDB760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  sub_22322797C((void **)(v6 - 40), v8, v9, v10, v11, v12);
  _Unwind_Resume(a1);
}

uint64_t sub_223CDB7D4(uint64_t result)
{
  if (result)
  {
    sub_223CD4F78(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CDB800(uint64_t result)
{
  if (result)
  {
    sub_223CD4F78(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CDB82C(uint64_t result)
{
  if (result)
  {
    sub_223CDA96C(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CDB858(uint64_t result)
{
  if (result)
  {
    sub_223CD4F78(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CDB884(uint64_t result)
{
  if (result)
  {
    sub_223CD4F78(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223CDB8B0(uint64_t result)
{
  if (result)
  {
    sub_223CD4F78(result);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void **sub_223CDB8DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x4_t *a3@<X2>, float32x2_t *a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  float32x4_t v23;
  float32x4_t *v24;
  size_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  float32x4_t v29;
  float32x4_t *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  float32x4_t v72;
  float32x4_t *v73;
  size_t v74;
  void ***v75;
  void ***v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _BOOL8 v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD v131[2];
  _QWORD *v132;
  _QWORD *(**v133)(_QWORD *);
  unsigned int v134;
  float32x2_t *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  std::string v146;
  _QWORD *(**v147)(_QWORD *);
  __int128 v148;
  std::string v149;
  std::string v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  _BYTE v157[32];
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  char v164;
  uint64_t v165;

  v134 = a5;
  v135 = a4;
  v165 = *MEMORY[0x24BDAC8D0];
  v156 = a6;
  sub_223227930((uint64_t *)&v155);
  kdebug_trace();
  sub_223226E78(*(void ****)a1, v11, v12, v13, v14, v15, &v153);
  sub_223226F40(*(void ****)a1, v16, v17, v18, v19, (uint64_t)&v151);
  *((_BYTE *)&v150.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v150, "DepthRenderImpl");
  v20 = std::string::insert(&v150, 0, "Recon.", 6uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)v157 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append((std::string *)v157, ".DrawMeshes.CommandBuffer", 0x19uLL);
  v23 = *(float32x4_t *)&v22->__r_.__value_.__l.__data_;
  v161.i64[0] = v22->__r_.__value_.__r.__words[2];
  v160 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v24 = &v160;
  else
    v24 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v25 = v161.u8[7];
  else
    v25 = v160.u64[1];
  sub_223CEECA4((uint64_t)&v151, (std::string::value_type *)v24, v25);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((v157[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_32:
    operator delete(*(void **)v157);
    if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
  operator delete((void *)v160.i64[0]);
  if ((v157[23] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_9:
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_33:
  operator delete(v150.__r_.__value_.__l.__data_);
LABEL_10:
  sub_223226BC8((uint64_t)&v151, a1 + 88, (uint64_t)&v150);
  *((_BYTE *)&v149.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v149, "DepthRenderImpl");
  v26 = std::string::insert(&v149, 0, "Recon.", 6uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)v157 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append((std::string *)v157, ".DrawMeshes.RenderEncoder", 0x19uLL);
  v29 = *(float32x4_t *)&v28->__r_.__value_.__l.__data_;
  v161.i64[0] = v28->__r_.__value_.__r.__words[2];
  v160 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v30 = &v160;
  else
    v30 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v31 = v161.u8[7];
  else
    v31 = v160.u64[1];
  sub_223CEEDEC((uint64_t)&v150, (std::string::value_type *)v30, v31);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((v157[23] & 0x80000000) == 0)
      goto LABEL_18;
LABEL_35:
    operator delete(*(void **)v157);
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
  operator delete((void *)v160.i64[0]);
  if ((v157[23] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_18:
  if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_36:
  operator delete(v149.__r_.__value_.__l.__data_);
LABEL_19:
  sub_2232284C8((uint64_t)&v150, (_QWORD **)(*(_QWORD *)a1 + 56), v32, v33, v34, v35);
  sub_223228474((uint64_t)&v150, *(_DWORD *)(*(_QWORD *)a1 + 24), v36, v37, v38, v39);
  sub_223228484((uint64_t)&v150, *(_DWORD *)(*(_QWORD *)a1 + 28), v40, v41, v42, v43);
  qmemcpy(v131, "nderImplDepthRen", sizeof(v131));
  v132 = a7;
  v50 = *a2;
  v51 = a2[1];
  if (*a2 != v51)
  {
    v52 = 0;
    v133 = &off_24EC25F68;
    do
    {
      v53 = *(uint64_t **)v50;
      v54 = *(float32x4_t *)(v50 + 24);
      v136 = *(float32x4_t *)(v50 + 8);
      v137 = v54;
      v55 = *(float32x4_t *)(v50 + 40);
      v56 = *(float32x4_t *)(v50 + 56);
      v138 = *a3;
      v139 = a3[1];
      v140 = v55;
      v141 = a3[2];
      v142 = a3[3];
      v143 = v56;
      sub_223CEC0BC(v135, (float *)(*(_QWORD *)a1 + 32), &v156, (uint64_t)v157, v49);
      v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v136.f32[0]), v139, *(float32x2_t *)v136.f32, 1), v141, v136, 2), v142, v136, 3);
      v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v137.f32[0]), v139, *(float32x2_t *)v137.f32, 1), v141, v137, 2), v142, v137, 3);
      v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v140.f32[0]), v139, *(float32x2_t *)v140.f32, 1), v141, v140, 2), v142, v140, 3);
      v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v143.f32[0]), v139, *(float32x2_t *)v143.f32, 1), v141, v143, 2), v142, v143, 3);
      v160 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v58.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v58.f32, 1), v158, v58, 2), v159, v58, 3);
      v161 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v59.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v59.f32, 1), v158, v59, 2), v159, v59, 3);
      v162 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v60.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v60.f32, 1), v158, v60, 2), v159, v60, 3);
      v163 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v61.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v61.f32, 1), v158, v61, 2), v159, v61, 3);
      v164 = v156;
      v63 = *v53;
      v62 = v53[1];
      v148 = *(_OWORD *)&v150.__r_.__value_.__r.__words[1];
      if (v150.__r_.__value_.__r.__words[2])
      {
        v64 = (unint64_t *)(v150.__r_.__value_.__r.__words[2] + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v147 = &off_24EC25F68;
        *(_OWORD *)&v157[8] = v148;
        if (*((_QWORD *)&v148 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
      }
      else
      {
        v147 = v133;
        *(_OWORD *)&v157[8] = v150.__r_.__value_.__l.__size_;
      }
      *(_QWORD *)v157 = &off_24EC25F68;
      sub_223CD58A0(a1, (unint64_t)v53, v134, (uint64_t)&v160, (uint64_t)v157, v57);
      sub_223226D74(v157);
      sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      v52 -= 1431655765 * ((v62 - v63) >> 2);
      *(_QWORD *)(a1 + 136) = a1 + 144;
      sub_223226D74(&v147);
      v50 += 72;
    }
    while (v50 != v51);
  }
  sub_223226DF0((uint64_t)&v150, v44, v45, v46, v47, v48);
  sub_223226BBC((uint64_t)&v151, (uint64_t)v157);
  v68 = v132;
  *((_BYTE *)&v146.__r_.__value_.__s + 23) = 15;
  v146.__r_.__value_.__r.__words[0] = v131[1];
  *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = v131[0];
  v146.__r_.__value_.__s.__data_[15] = 0;
  v69 = std::string::insert(&v146, 0, "Recon.", 6uLL);
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  v71 = std::string::append(&v149, ".DrawMeshes.BlitEncoder", 0x17uLL);
  v72 = *(float32x4_t *)&v71->__r_.__value_.__l.__data_;
  v161.i64[0] = v71->__r_.__value_.__r.__words[2];
  v160 = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v73 = &v160;
  else
    v73 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v74 = v161.u8[7];
  else
    v74 = v160.u64[1];
  sub_223CEF07C((uint64_t)v157, (std::string::value_type *)v73, v74);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_53:
    operator delete(v149.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_54;
  }
  operator delete((void *)v160.i64[0]);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_45:
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
LABEL_54:
  operator delete(v146.__r_.__value_.__l.__data_);
LABEL_46:
  v75 = (void ***)(a1 + 120);
  v76 = *(void ****)a1;
  v160.i64[0] = 0;
  v160.i32[2] = 0;
  v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v76[2];
  LODWORD(v149.__r_.__value_.__r.__words[1]) = 1;
  sub_223225F60((uint64_t)v157, (const char *)(a1 + 104), 0, 0, (uint64_t)&v160, (uint64_t)&v149, (_QWORD **)(a1 + 120), 0, 4 * LODWORD(v149.__r_.__value_.__l.__data_), 0);
  sub_223226DF0((uint64_t)v157, v77, v78, v79, v80, v81);
  v144 = v151;
  v145 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v83 = __ldxr(p_shared_owners);
    while (__stxr(v83 + 1, p_shared_owners));
  }
  kdebug_trace();
  v160.i64[0] = (uint64_t)&off_24EC63500;
  v161.i64[1] = (uint64_t)&v160;
  sub_2232268C4((uint64_t)&v144, (const char *)&v160, v84, v85, v86, v87);
  v93 = (float32x4_t *)v161.i64[1];
  if ((float32x4_t *)v161.i64[1] == &v160)
  {
    v94 = 4;
    v93 = &v160;
    goto LABEL_56;
  }
  if (v161.i64[1])
  {
    v94 = 5;
LABEL_56:
    (*(void (**)(void))(v93->i64[0] + 8 * v94))();
  }
  v95 = v145;
  if (v145)
  {
    v96 = (unint64_t *)&v145->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  sub_2232267C8((uint64_t)&v151, v88, v89, v90, v91, v92);
  sub_223226BB0((uint64_t)&v151, v98, v99, v100, v101, v102);
  v104 = *(_QWORD **)(a1 + 144);
  v103 = (_QWORD *)(a1 + 144);
  sub_223CD5140((uint64_t)(v103 - 1), v104);
  *(v103 - 1) = v103;
  *v103 = 0;
  v103[1] = 0;
  kdebug_trace();
  kdebug_trace();
  v110 = sub_223226520(v75, v105, v106, v107, v108, v109);
  v111 = *((_DWORD *)v76 + 4);
  v112 = *((_DWORD *)v76 + 5);
  v146.__r_.__value_.__r.__words[0] = __PAIR64__(v112, v111);
  v113 = v111 != 0;
  v114 = v112 == 0;
  *v68 = &off_24EC21230;
  v115 = (uint64_t)(v68 + 1);
  if (v112)
    v116 = v111;
  else
    v116 = 0;
  v160.i64[0] = v110;
  v117 = v114 || v111 == 0;
  v118 = v116 << 32;
  if (v117)
    v118 = 0;
  v149.__r_.__value_.__r.__words[0] = v118 | v113;
  sub_223CDC4C0(&v160, &v146, (uint64_t *)&v149, v115);
  sub_223226D74(v157);
  sub_223226D74(&v150);
  v124 = v152;
  if (v152)
  {
    v125 = (unint64_t *)&v152->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v154;
  if (v154)
  {
    v128 = (unint64_t *)&v154->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  return sub_22322797C(&v155, v119, v120, v121, v122, v123);
}

void sub_223CDC104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_223226D74((_QWORD *)(v62 - 240));
  sub_223226D74(&a52);
  sub_223197300((uint64_t)&a58);
  sub_223167354((uint64_t)&a62);
  sub_22322797C((void **)(v62 - 256), v64, v65, v66, v67, v68);
  _Unwind_Resume(a1);
}

void sub_223CDC34C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223CDC360()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC63500;
  return result;
}

void sub_223CDC384(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC63500;
}

uint64_t sub_223CDC39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_223226B8C(a2, a2, a3, a4, a5, a6);
  sub_223226B80(a2, v7, v8, v9, v10, v11);
  sub_223226B98(a2, v12, v13, v14, v15, v16);
  sub_223226B8C(a2, v17, v18, v19, v20, v21);
  sub_223226BA4(a2, v22, v23, v24, v25, v26);
  sub_223226B98(a2, v27, v28, v29, v30, v31);
  return kdebug_trace();
}

uint64_t sub_223CDC448(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon9mesh_util18MetalDepthRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon9mesh_util18MetalDepthRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon9mesh_util18MetalDepthRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon9mesh_util18MetalDepthRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223CDC4B4()
{
  return &unk_24EC63560;
}

void sub_223CDC4C0(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231FDE98(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_223CDC5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CDC5C8(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223CDC8AC(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223CDC720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223CDC734(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223CDC79C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CDC804()
{
  return 29;
}

uint64_t sub_223CDC80C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_223CDC814@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_223CDC828(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_223CDC8AC(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_223CDC9B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223CDC9FC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223210E2C(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_223CDCB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CDCB6C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223CDCB80()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC63678;
  return result;
}

void sub_223CDCBA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC63678;
}

uint64_t sub_223CDCBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_223226B8C(a2, a2, a3, a4, a5, a6);
  sub_223226B80(a2, v7, v8, v9, v10, v11);
  sub_223226B98(a2, v12, v13, v14, v15, v16);
  sub_223226B8C(a2, v17, v18, v19, v20, v21);
  sub_223226BA4(a2, v22, v23, v24, v25, v26);
  sub_223226B98(a2, v27, v28, v29, v30, v31);
  return kdebug_trace();
}

uint64_t sub_223CDCC68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon9mesh_util21MetalSemanticRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon9mesh_util21MetalSemanticRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon9mesh_util21MetalSemanticRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon9mesh_util21MetalSemanticRenderer8GpuTraceEN5petal13CommandBufferEEUlRT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223CDCCD4()
{
  return &unk_24EC636D8;
}

void sub_223CDCCE0(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231F74F8(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_223CDCDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_223CDCDE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x4_t *a3@<X2>, float32x2_t *a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  float32x4_t v23;
  float32x4_t *v24;
  size_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  float32x4_t v29;
  float32x4_t *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  float32x4_t v72;
  float32x4_t *v73;
  size_t v74;
  void ***v75;
  void ***v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _BOOL8 v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD v131[2];
  _QWORD *v132;
  _QWORD *(**v133)(_QWORD *);
  unsigned int v134;
  float32x2_t *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  __int128 v144;
  std::__shared_weak_count *v145;
  std::string v146;
  _QWORD *(**v147)(_QWORD *);
  __int128 v148;
  std::string v149;
  std::string v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  _BYTE v157[32];
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  char v164;
  uint64_t v165;

  v134 = a5;
  v135 = a4;
  v165 = *MEMORY[0x24BDAC8D0];
  v156 = a6;
  sub_223227930((uint64_t *)&v155);
  kdebug_trace();
  sub_223226E78(*(void ****)a1, v11, v12, v13, v14, v15, &v153);
  sub_223226F40(*(void ****)a1, v16, v17, v18, v19, (uint64_t)&v151);
  *((_BYTE *)&v150.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v150, "DepthRenderImpl");
  v20 = std::string::insert(&v150, 0, "Recon.", 6uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)v157 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append((std::string *)v157, ".DrawMeshes.CommandBuffer", 0x19uLL);
  v23 = *(float32x4_t *)&v22->__r_.__value_.__l.__data_;
  v161.i64[0] = v22->__r_.__value_.__r.__words[2];
  v160 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v24 = &v160;
  else
    v24 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v25 = v161.u8[7];
  else
    v25 = v160.u64[1];
  sub_223CEECA4((uint64_t)&v151, (std::string::value_type *)v24, v25);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((v157[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_32:
    operator delete(*(void **)v157);
    if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
  operator delete((void *)v160.i64[0]);
  if ((v157[23] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_9:
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_33:
  operator delete(v150.__r_.__value_.__l.__data_);
LABEL_10:
  sub_223226BC8((uint64_t)&v151, a1 + 88, (uint64_t)&v150);
  *((_BYTE *)&v149.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v149, "DepthRenderImpl");
  v26 = std::string::insert(&v149, 0, "Recon.", 6uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)&v157[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)v157 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append((std::string *)v157, ".DrawMeshes.RenderEncoder", 0x19uLL);
  v29 = *(float32x4_t *)&v28->__r_.__value_.__l.__data_;
  v161.i64[0] = v28->__r_.__value_.__r.__words[2];
  v160 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v30 = &v160;
  else
    v30 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v31 = v161.u8[7];
  else
    v31 = v160.u64[1];
  sub_223CEEDEC((uint64_t)&v150, (std::string::value_type *)v30, v31);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((v157[23] & 0x80000000) == 0)
      goto LABEL_18;
LABEL_35:
    operator delete(*(void **)v157);
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
  operator delete((void *)v160.i64[0]);
  if ((v157[23] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_18:
  if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_36:
  operator delete(v149.__r_.__value_.__l.__data_);
LABEL_19:
  sub_2232284C8((uint64_t)&v150, (_QWORD **)(*(_QWORD *)a1 + 56), v32, v33, v34, v35);
  sub_223228474((uint64_t)&v150, *(_DWORD *)(*(_QWORD *)a1 + 24), v36, v37, v38, v39);
  sub_223228484((uint64_t)&v150, *(_DWORD *)(*(_QWORD *)a1 + 28), v40, v41, v42, v43);
  qmemcpy(v131, "nderImplDepthRen", sizeof(v131));
  v132 = a7;
  v50 = *a2;
  v51 = a2[1];
  if (*a2 != v51)
  {
    v52 = 0;
    v133 = &off_24EC25F68;
    do
    {
      v53 = *(uint64_t **)v50;
      v54 = *(float32x4_t *)(v50 + 24);
      v136 = *(float32x4_t *)(v50 + 8);
      v137 = v54;
      v55 = *(float32x4_t *)(v50 + 40);
      v56 = *(float32x4_t *)(v50 + 56);
      v138 = *a3;
      v139 = a3[1];
      v140 = v55;
      v141 = a3[2];
      v142 = a3[3];
      v143 = v56;
      sub_223CEC0BC(v135, (float *)(*(_QWORD *)a1 + 32), &v156, (uint64_t)v157, v49);
      v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v136.f32[0]), v139, *(float32x2_t *)v136.f32, 1), v141, v136, 2), v142, v136, 3);
      v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v137.f32[0]), v139, *(float32x2_t *)v137.f32, 1), v141, v137, 2), v142, v137, 3);
      v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v140.f32[0]), v139, *(float32x2_t *)v140.f32, 1), v141, v140, 2), v142, v140, 3);
      v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v138, v143.f32[0]), v139, *(float32x2_t *)v143.f32, 1), v141, v143, 2), v142, v143, 3);
      v160 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v58.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v58.f32, 1), v158, v58, 2), v159, v58, 3);
      v161 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v59.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v59.f32, 1), v158, v59, 2), v159, v59, 3);
      v162 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v60.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v60.f32, 1), v158, v60, 2), v159, v60, 3);
      v163 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v157, v61.f32[0]), *(float32x4_t *)&v157[16], *(float32x2_t *)v61.f32, 1), v158, v61, 2), v159, v61, 3);
      v164 = v156;
      v63 = *v53;
      v62 = v53[1];
      v148 = *(_OWORD *)&v150.__r_.__value_.__r.__words[1];
      if (v150.__r_.__value_.__r.__words[2])
      {
        v64 = (unint64_t *)(v150.__r_.__value_.__r.__words[2] + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v147 = &off_24EC25F68;
        *(_OWORD *)&v157[8] = v148;
        if (*((_QWORD *)&v148 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
      }
      else
      {
        v147 = v133;
        *(_OWORD *)&v157[8] = v150.__r_.__value_.__l.__size_;
      }
      *(_QWORD *)v157 = &off_24EC25F68;
      sub_223CD58A0(a1, (unint64_t)v53, v134, (uint64_t)&v160, (uint64_t)v157, v57);
      sub_223226D74(v157);
      sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      v52 -= 1431655765 * ((v62 - v63) >> 2);
      *(_QWORD *)(a1 + 136) = a1 + 144;
      sub_223226D74(&v147);
      v50 += 72;
    }
    while (v50 != v51);
  }
  sub_223226DF0((uint64_t)&v150, v44, v45, v46, v47, v48);
  sub_223226BBC((uint64_t)&v151, (uint64_t)v157);
  v68 = v132;
  *((_BYTE *)&v146.__r_.__value_.__s + 23) = 15;
  v146.__r_.__value_.__r.__words[0] = v131[1];
  *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = v131[0];
  v146.__r_.__value_.__s.__data_[15] = 0;
  v69 = std::string::insert(&v146, 0, "Recon.", 6uLL);
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  v71 = std::string::append(&v149, ".DrawMeshes.BlitEncoder", 0x17uLL);
  v72 = *(float32x4_t *)&v71->__r_.__value_.__l.__data_;
  v161.i64[0] = v71->__r_.__value_.__r.__words[2];
  v160 = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  if (v161.i8[7] >= 0)
    v73 = &v160;
  else
    v73 = (float32x4_t *)v160.i64[0];
  if (v161.i8[7] >= 0)
    v74 = v161.u8[7];
  else
    v74 = v160.u64[1];
  sub_223CEF07C((uint64_t)v157, (std::string::value_type *)v73, v74);
  if ((v161.i8[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_53:
    operator delete(v149.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_54;
  }
  operator delete((void *)v160.i64[0]);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_45:
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
LABEL_54:
  operator delete(v146.__r_.__value_.__l.__data_);
LABEL_46:
  v75 = (void ***)(a1 + 120);
  v76 = *(void ****)a1;
  v160.i64[0] = 0;
  v160.i32[2] = 0;
  v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v76[2];
  LODWORD(v149.__r_.__value_.__r.__words[1]) = 1;
  sub_223225F60((uint64_t)v157, (const char *)(a1 + 104), 0, 0, (uint64_t)&v160, (uint64_t)&v149, (_QWORD **)(a1 + 120), 0, 4 * LODWORD(v149.__r_.__value_.__l.__data_), 0);
  sub_223226DF0((uint64_t)v157, v77, v78, v79, v80, v81);
  v144 = v151;
  v145 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v83 = __ldxr(p_shared_owners);
    while (__stxr(v83 + 1, p_shared_owners));
  }
  kdebug_trace();
  v160.i64[0] = (uint64_t)&off_24EC63500;
  v161.i64[1] = (uint64_t)&v160;
  sub_2232268C4((uint64_t)&v144, (const char *)&v160, v84, v85, v86, v87);
  v93 = (float32x4_t *)v161.i64[1];
  if ((float32x4_t *)v161.i64[1] == &v160)
  {
    v94 = 4;
    v93 = &v160;
    goto LABEL_56;
  }
  if (v161.i64[1])
  {
    v94 = 5;
LABEL_56:
    (*(void (**)(void))(v93->i64[0] + 8 * v94))();
  }
  v95 = v145;
  if (v145)
  {
    v96 = (unint64_t *)&v145->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  sub_2232267C8((uint64_t)&v151, v88, v89, v90, v91, v92);
  sub_223226BB0((uint64_t)&v151, v98, v99, v100, v101, v102);
  v104 = *(_QWORD **)(a1 + 144);
  v103 = (_QWORD *)(a1 + 144);
  sub_223CD5140((uint64_t)(v103 - 1), v104);
  *(v103 - 1) = v103;
  *v103 = 0;
  v103[1] = 0;
  kdebug_trace();
  kdebug_trace();
  v110 = sub_223226520(v75, v105, v106, v107, v108, v109);
  v111 = *((_DWORD *)v76 + 4);
  v112 = *((_DWORD *)v76 + 5);
  v146.__r_.__value_.__r.__words[0] = __PAIR64__(v112, v111);
  v113 = v111 != 0;
  v114 = v112 == 0;
  *v68 = &off_24EC21230;
  v115 = (uint64_t)(v68 + 1);
  if (v112)
    v116 = v111;
  else
    v116 = 0;
  v160.i64[0] = v110;
  v117 = v114 || v111 == 0;
  v118 = v116 << 32;
  if (v117)
    v118 = 0;
  v149.__r_.__value_.__r.__words[0] = v118 | v113;
  sub_223CDC4C0(&v160, &v146, (uint64_t *)&v149, v115);
  sub_223226D74(v157);
  sub_223226D74(&v150);
  v124 = v152;
  if (v152)
  {
    v125 = (unint64_t *)&v152->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v154;
  if (v154)
  {
    v128 = (unint64_t *)&v154->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  return sub_22322797C(&v155, v119, v120, v121, v122, v123);
}

void sub_223CDD610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  sub_223226D74((_QWORD *)(v62 - 240));
  sub_223226D74(&a52);
  sub_223197300((uint64_t)&a58);
  sub_223167354((uint64_t)&a62);
  sub_22322797C((void **)(v62 - 256), v64, v65, v66, v67, v68);
  _Unwind_Resume(a1);
}

void **sub_223CDD854@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, float32x4_t *a3@<X2>, float32x2_t *a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  float32x4_t v23;
  float32x4_t *v24;
  size_t v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  float32x4_t v29;
  float32x4_t *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  float32x4_t v68;
  float32x4_t *v69;
  size_t v70;
  void ***v71;
  void ***v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  _BOOL8 v109;
  BOOL v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  std::string v138;
  _QWORD *(**v139)(_QWORD *);
  __int128 v140;
  std::string v141;
  std::string v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void *v147;
  char v148;
  _BYTE v149[32];
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v148 = a6;
  sub_223227930((uint64_t *)&v147);
  kdebug_trace();
  sub_223226E78(*(void ****)a1, v11, v12, v13, v14, v15, &v145);
  sub_223226F40(*(void ****)a1, v16, v17, v18, v19, (uint64_t)&v143);
  *((_BYTE *)&v142.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v142, "SemantiRenderImpl");
  v20 = std::string::insert(&v142, 0, "Recon.", 6uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&v149[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)v149 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append((std::string *)v149, ".DrawMeshes.CommandBuffer", 0x19uLL);
  v23 = *(float32x4_t *)&v22->__r_.__value_.__l.__data_;
  v153.i64[0] = v22->__r_.__value_.__r.__words[2];
  v152 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v153.i8[7] >= 0)
    v24 = &v152;
  else
    v24 = (float32x4_t *)v152.i64[0];
  if (v153.i8[7] >= 0)
    v25 = v153.u8[7];
  else
    v25 = v152.u64[1];
  sub_223CEECA4((uint64_t)&v143, (std::string::value_type *)v24, v25);
  if ((v153.i8[7] & 0x80000000) == 0)
  {
    if ((v149[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_32:
    operator delete(*(void **)v149);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
  operator delete((void *)v152.i64[0]);
  if ((v149[23] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_9:
  if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
LABEL_33:
  operator delete(v142.__r_.__value_.__l.__data_);
LABEL_10:
  sub_223226BC8((uint64_t)&v143, a1 + 88, (uint64_t)&v142);
  *((_BYTE *)&v141.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v141, "SemantiRenderImpl");
  v26 = std::string::insert(&v141, 0, "Recon.", 6uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)&v149[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)v149 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append((std::string *)v149, ".DrawMeshes.RenderEncoder", 0x19uLL);
  v29 = *(float32x4_t *)&v28->__r_.__value_.__l.__data_;
  v153.i64[0] = v28->__r_.__value_.__r.__words[2];
  v152 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (v153.i8[7] >= 0)
    v30 = &v152;
  else
    v30 = (float32x4_t *)v152.i64[0];
  if (v153.i8[7] >= 0)
    v31 = v153.u8[7];
  else
    v31 = v152.u64[1];
  sub_223CEEDEC((uint64_t)&v142, (std::string::value_type *)v30, v31);
  if ((v153.i8[7] & 0x80000000) == 0)
  {
    if ((v149[23] & 0x80000000) == 0)
      goto LABEL_18;
LABEL_35:
    operator delete(*(void **)v149);
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
  operator delete((void *)v152.i64[0]);
  if ((v149[23] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_18:
  if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_36:
  operator delete(v141.__r_.__value_.__l.__data_);
LABEL_19:
  sub_2232284C8((uint64_t)&v142, (_QWORD **)(*(_QWORD *)a1 + 56), v32, v33, v34, v35);
  sub_223228474((uint64_t)&v142, *(_DWORD *)(*(_QWORD *)a1 + 24), v36, v37, v38, v39);
  sub_223228484((uint64_t)&v142, *(_DWORD *)(*(_QWORD *)a1 + 28), v40, v41, v42, v43);
  v50 = *a2;
  v51 = a2[1];
  if (*a2 != v51)
  {
    v52 = 0;
    do
    {
      v53 = *(uint64_t **)v50;
      v128 = *(float32x4_t *)(v50 + 8);
      v129 = *(float32x4_t *)(v50 + 24);
      v130 = *a3;
      v131 = a3[1];
      v132 = *(float32x4_t *)(v50 + 40);
      v133 = a3[2];
      v134 = a3[3];
      v135 = *(float32x4_t *)(v50 + 56);
      sub_223CEC0BC(a4, (float *)(*(_QWORD *)a1 + 32), &v148, (uint64_t)v149, v49);
      v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v128.f32[0]), v131, *(float32x2_t *)v128.f32, 1), v133, v128, 2), v134, v128, 3);
      v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v129.f32[0]), v131, *(float32x2_t *)v129.f32, 1), v133, v129, 2), v134, v129, 3);
      v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v132.f32[0]), v131, *(float32x2_t *)v132.f32, 1), v133, v132, 2), v134, v132, 3);
      v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v135.f32[0]), v131, *(float32x2_t *)v135.f32, 1), v133, v135, 2), v134, v135, 3);
      v152 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v149, v55.f32[0]), *(float32x4_t *)&v149[16], *(float32x2_t *)v55.f32, 1), v150, v55, 2), v151, v55, 3);
      v153 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v149, v56.f32[0]), *(float32x4_t *)&v149[16], *(float32x2_t *)v56.f32, 1), v150, v56, 2), v151, v56, 3);
      v154 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v149, v57.f32[0]), *(float32x4_t *)&v149[16], *(float32x2_t *)v57.f32, 1), v150, v57, 2), v151, v57, 3);
      v155 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v149, v58.f32[0]), *(float32x4_t *)&v149[16], *(float32x2_t *)v58.f32, 1), v150, v58, 2), v151, v58, 3);
      v156 = v148;
      v60 = *v53;
      v59 = v53[1];
      v140 = *(_OWORD *)&v142.__r_.__value_.__r.__words[1];
      if (v142.__r_.__value_.__r.__words[2])
      {
        v61 = (unint64_t *)(v142.__r_.__value_.__r.__words[2] + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        v139 = &off_24EC25F68;
        *(_OWORD *)&v149[8] = v140;
        if (*((_QWORD *)&v140 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
      }
      else
      {
        v139 = &off_24EC25F68;
        *(_OWORD *)&v149[8] = v142.__r_.__value_.__l.__size_;
      }
      *(_QWORD *)v149 = &off_24EC25F68;
      sub_223CD9F40(a1, (unint64_t)v53, a5, (uint64_t)&v152, (uint64_t)v149, v54);
      sub_223226D74(v149);
      sub_223CD5140(a1 + 136, *(_QWORD **)(a1 + 144));
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      v52 -= 1431655765 * ((v59 - v60) >> 2);
      *(_QWORD *)(a1 + 136) = a1 + 144;
      sub_223226D74(&v139);
      v50 += 72;
    }
    while (v50 != v51);
  }
  sub_223226DF0((uint64_t)&v142, v44, v45, v46, v47, v48);
  sub_223226BBC((uint64_t)&v143, (uint64_t)v149);
  *((_BYTE *)&v138.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v138, "SemantiRenderImpl");
  v65 = std::string::insert(&v138, 0, "Recon.", 6uLL);
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&v141, ".DrawMeshes.BlitEncoder", 0x17uLL);
  v68 = *(float32x4_t *)&v67->__r_.__value_.__l.__data_;
  v153.i64[0] = v67->__r_.__value_.__r.__words[2];
  v152 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (v153.i8[7] >= 0)
    v69 = &v152;
  else
    v69 = (float32x4_t *)v152.i64[0];
  if (v153.i8[7] >= 0)
    v70 = v153.u8[7];
  else
    v70 = v152.u64[1];
  sub_223CEF07C((uint64_t)v149, (std::string::value_type *)v69, v70);
  if ((v153.i8[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_53:
    operator delete(v141.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_54;
  }
  operator delete((void *)v152.i64[0]);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_45:
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
LABEL_54:
  operator delete(v138.__r_.__value_.__l.__data_);
LABEL_46:
  v71 = (void ***)(a1 + 120);
  v72 = *(void ****)a1;
  v152.i64[0] = 0;
  v152.i32[2] = 0;
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v72[2];
  LODWORD(v141.__r_.__value_.__r.__words[1]) = 1;
  sub_223225F60((uint64_t)v149, (const char *)(a1 + 104), 0, 0, (uint64_t)&v152, (uint64_t)&v141, (_QWORD **)(a1 + 120), 0, v141.__r_.__value_.__l.__data_, 0);
  sub_223226DF0((uint64_t)v149, v73, v74, v75, v76, v77);
  v136 = v143;
  v137 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v79 = __ldxr(p_shared_owners);
    while (__stxr(v79 + 1, p_shared_owners));
  }
  kdebug_trace();
  v152.i64[0] = (uint64_t)&off_24EC63678;
  v153.i64[1] = (uint64_t)&v152;
  sub_2232268C4((uint64_t)&v136, (const char *)&v152, v80, v81, v82, v83);
  v89 = (float32x4_t *)v153.i64[1];
  if ((float32x4_t *)v153.i64[1] == &v152)
  {
    v90 = 4;
    v89 = &v152;
    goto LABEL_56;
  }
  if (v153.i64[1])
  {
    v90 = 5;
LABEL_56:
    (*(void (**)(void))(v89->i64[0] + 8 * v90))();
  }
  v91 = v137;
  if (v137)
  {
    v92 = (unint64_t *)&v137->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  sub_2232267C8((uint64_t)&v143, v84, v85, v86, v87, v88);
  sub_223226BB0((uint64_t)&v143, v94, v95, v96, v97, v98);
  v100 = *(_QWORD **)(a1 + 144);
  v99 = (_QWORD *)(a1 + 144);
  sub_223CD5140((uint64_t)(v99 - 1), v100);
  *(v99 - 1) = v99;
  *v99 = 0;
  v99[1] = 0;
  kdebug_trace();
  kdebug_trace();
  v106 = sub_223226520(v71, v101, v102, v103, v104, v105);
  v107 = *((_DWORD *)v72 + 4);
  v108 = *((_DWORD *)v72 + 5);
  v138.__r_.__value_.__r.__words[0] = __PAIR64__(v108, v107);
  v109 = v107 != 0;
  v110 = v108 == 0;
  *a7 = &off_24EC21420;
  if (v108)
    v111 = v107;
  else
    v111 = 0;
  v152.i64[0] = v106;
  v112 = v110 || v107 == 0;
  v113 = v111 << 32;
  if (v112)
    v113 = 0;
  v141.__r_.__value_.__r.__words[0] = v113 | v109;
  sub_223CDCCE0(&v152, &v138, (uint64_t *)&v141, (uint64_t)(a7 + 1));
  sub_223226D74(v149);
  sub_223226D74(&v142);
  v119 = v144;
  if (v144)
  {
    v120 = (unint64_t *)&v144->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v146;
  if (v146)
  {
    v123 = (unint64_t *)&v146->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  return sub_22322797C(&v147, v114, v115, v116, v117, v118);
}

void sub_223CDE06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  sub_223226D74((_QWORD *)(v55 - 240));
  sub_223226D74(&a47);
  sub_223197300((uint64_t)&a51);
  sub_223167354((uint64_t)&a55);
  sub_22322797C((void **)(v55 - 256), v57, v58, v59, v60, v61);
  _Unwind_Resume(a1);
}

void **sub_223CDE2B0(uint64_t a1, _QWORD *a2, _QWORD *a3, char *a4, float32x2_t *a5, unsigned int a6, _QWORD *a7)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  float32x4_t v24;
  float32x4_t *v25;
  size_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  float32x4_t v44;
  float32x4_t *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string::value_type *v76;
  size_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  BOOL v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::string::size_type v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  _BOOL8 v134;
  BOOL v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  __int32 v158;
  unsigned __int32 v159;
  const void *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  __int32 v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  __int32 v206;
  uint64_t v207;
  uint64_t v208;
  std::string::size_type v209;
  uint64_t v210;
  std::string::size_type v211;
  std::string::size_type v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  _QWORD v228[2];
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  void ***v232;
  _QWORD *v233;
  unint64_t v234;
  unsigned int v235;
  float32x2_t *v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  __int128 v245;
  std::__shared_weak_count *v246;
  std::string v247;
  _QWORD *(**v248)(_QWORD *);
  __int128 v249;
  std::string v250;
  std::string v251;
  __int128 v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  void *v256;
  _BYTE v257[32];
  float32x4_t v258;
  float32x4_t v259;
  _DWORD v260[2];
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  char v265;
  uint64_t v266;

  v235 = a6;
  v236 = a5;
  v233 = a3;
  v231 = a2;
  v266 = *MEMORY[0x24BDAC8D0];
  v232 = *(void ****)a1;
  sub_223227930((uint64_t *)&v256);
  sub_223226E78(*(void ****)a1, v10, v11, v12, v13, v14, &v254);
  kdebug_trace();
  sub_223226F40(*(void ****)a1, v15, v16, v17, v18, (uint64_t)&v252);
  *((_BYTE *)&v251.__r_.__value_.__s + 23) = 15;
  v19 = *(_QWORD *)"DepthRenderImpl";
  strcpy((char *)&v251, "DepthRenderImpl");
  v20 = *(_QWORD *)"nderImpl";
  v21 = std::string::insert(&v251, 0, "Recon.", 6uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)&v257[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)v257 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append((std::string *)v257, "BatchDrawMeshes.CommandBuffer", 0x1DuLL);
  v24 = *(float32x4_t *)&v23->__r_.__value_.__l.__data_;
  v262.i64[0] = v23->__r_.__value_.__r.__words[2];
  v261 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v262.i8[7] >= 0)
    v25 = &v261;
  else
    v25 = (float32x4_t *)v261.i64[0];
  if (v262.i8[7] >= 0)
    v26 = v262.u8[7];
  else
    v26 = v261.u64[1];
  sub_223CEECA4((uint64_t)&v252, (std::string::value_type *)v25, v26);
  if (v262.i8[7] < 0)
  {
    operator delete((void *)v261.i64[0]);
    if ((v257[23] & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_67:
      operator delete(v251.__r_.__value_.__l.__data_);
      if (v233[1] != *v233)
        goto LABEL_11;
      goto LABEL_68;
    }
  }
  else if ((v257[23] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)v257);
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_67;
LABEL_10:
  if (v233[1] != *v233)
  {
LABEL_11:
    v27 = 0;
    v28 = 0;
    v230 = a1 + 88;
    v229 = a7;
    qmemcpy(v228, "nderImplDepthRen", sizeof(v228));
    do
    {
      sub_223226BC8((uint64_t)&v252, v230, (uint64_t)&v251);
      sub_2232284C8((uint64_t)&v251, (_QWORD **)(*(_QWORD *)a1 + 56), v29, v30, v31, v32);
      sub_223228474((uint64_t)&v251, *(_DWORD *)(*(_QWORD *)a1 + 24), v33, v34, v35, v36);
      sub_223228484((uint64_t)&v251, *(_DWORD *)(*(_QWORD *)a1 + 28), v37, v38, v39, v40);
      *((_BYTE *)&v250.__r_.__value_.__s + 23) = 15;
      v250.__r_.__value_.__r.__words[0] = v19;
      *(std::string::size_type *)((char *)v250.__r_.__value_.__r.__words + 7) = v20;
      v250.__r_.__value_.__s.__data_[15] = 0;
      v41 = std::string::insert(&v250, 0, "Recon.", 6uLL);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      *(_QWORD *)&v257[16] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
      *(_OWORD *)v257 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append((std::string *)v257, "BatchDrawMeshes.RenderEncoder", 0x1DuLL);
      v44 = *(float32x4_t *)&v43->__r_.__value_.__l.__data_;
      v262.i64[0] = v43->__r_.__value_.__r.__words[2];
      v261 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (v262.i8[7] >= 0)
        v45 = &v261;
      else
        v45 = (float32x4_t *)v261.i64[0];
      if (v262.i8[7] >= 0)
        v46 = v262.u8[7];
      else
        v46 = v261.u64[1];
      sub_223CEEDEC((uint64_t)&v251, (std::string::value_type *)v45, v46);
      if (v262.i8[7] < 0)
      {
        operator delete((void *)v261.i64[0]);
        if ((v257[23] & 0x80000000) != 0)
        {
LABEL_50:
          operator delete(*(void **)v257);
          if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_51;
        }
      }
      else if ((v257[23] & 0x80000000) != 0)
      {
        goto LABEL_50;
      }
      if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_21;
LABEL_51:
      operator delete(v250.__r_.__value_.__l.__data_);
LABEL_21:
      v53 = (uint64_t *)(*v231 + 24 * v28);
      v55 = *v53;
      v54 = v53[1];
      v135 = *v53 == v54;
      v234 = v28;
      if (!v135)
      {
        v56 = (float32x4_t *)(*v233 + (v28 << 6));
        do
        {
          v57 = *(uint64_t **)v55;
          v58 = *(float32x4_t *)(v55 + 24);
          v237 = *(float32x4_t *)(v55 + 8);
          v238 = v58;
          v59 = *(float32x4_t *)(v55 + 40);
          v60 = *(float32x4_t *)(v55 + 56);
          v239 = *v56;
          v240 = v56[1];
          v241 = v59;
          v242 = v56[2];
          v243 = v56[3];
          v244 = v60;
          sub_223CEC0BC(v236, (float *)(*(_QWORD *)a1 + 32), a4, (uint64_t)v257, v52);
          v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v237.f32[0]), v240, *(float32x2_t *)v237.f32, 1), v242, v237, 2), v243, v237, 3);
          v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v238.f32[0]), v240, *(float32x2_t *)v238.f32, 1), v242, v238, 2), v243, v238, 3);
          v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v241.f32[0]), v240, *(float32x2_t *)v241.f32, 1), v242, v241, 2), v243, v241, 3);
          v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v239, v244.f32[0]), v240, *(float32x2_t *)v244.f32, 1), v242, v244, 2), v243, v244, 3);
          v66 = *a4;
          v261 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v257, v62.f32[0]), *(float32x4_t *)&v257[16], *(float32x2_t *)v62.f32, 1), v258, v62, 2), v259, v62, 3);
          v262 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v257, v63.f32[0]), *(float32x4_t *)&v257[16], *(float32x2_t *)v63.f32, 1), v258, v63, 2), v259, v63, 3);
          v263 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v257, v64.f32[0]), *(float32x4_t *)&v257[16], *(float32x2_t *)v64.f32, 1), v258, v64, 2), v259, v64, 3);
          v264 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v257, v65.f32[0]), *(float32x4_t *)&v257[16], *(float32x2_t *)v65.f32, 1), v258, v65, 2), v259, v65, 3);
          v265 = v66;
          v68 = *v57;
          v67 = v57[1];
          v249 = *(_OWORD *)&v251.__r_.__value_.__r.__words[1];
          if (v251.__r_.__value_.__r.__words[2])
          {
            v69 = (unint64_t *)(v251.__r_.__value_.__r.__words[2] + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          v248 = &off_24EC25F68;
          sub_223CD58A0(a1, (unint64_t)v57, v235, (uint64_t)&v261, (uint64_t)&v248, v61);
          v27 -= 1431655765 * ((v67 - v68) >> 2);
          sub_223226D74(&v248);
          v55 += 72;
        }
        while (v55 != v54);
      }
      sub_223226DF0((uint64_t)&v251, v47, v48, v49, v50, v51);
      sub_223226BBC((uint64_t)&v252, (uint64_t)&v261);
      v19 = v228[1];
      a7 = v229;
      v20 = v228[0];
      v71 = v234;
      *((_BYTE *)&v247.__r_.__value_.__s + 23) = 15;
      v247.__r_.__value_.__r.__words[0] = v228[1];
      *(std::string::size_type *)((char *)v247.__r_.__value_.__r.__words + 7) = v228[0];
      v247.__r_.__value_.__s.__data_[15] = 0;
      v72 = std::string::insert(&v247, 0, "Recon.", 6uLL);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v250.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v250, "BatchDrawMeshes.BlitEncoder", 0x1BuLL);
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      *(_QWORD *)&v257[16] = *((_QWORD *)&v74->__r_.__value_.__l + 2);
      *(_OWORD *)v257 = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (v257[23] >= 0)
        v76 = v257;
      else
        v76 = *(std::string::value_type **)v257;
      if (v257[23] >= 0)
        v77 = v257[23];
      else
        v77 = *(_QWORD *)&v257[8];
      sub_223CEF07C((uint64_t)&v261, v76, v77);
      if ((v257[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v257);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_53:
          operator delete(v250.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_36;
          goto LABEL_54;
        }
      }
      else if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_53;
      }
      if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_54:
      operator delete(v247.__r_.__value_.__l.__data_);
LABEL_36:
      v78 = *a7 + 80 * v71;
      *(_QWORD *)v257 = *(_QWORD *)(v78 + 56);
      v79 = *(_QWORD *)(v78 + 64);
      *(_QWORD *)&v257[8] = v79;
      if (v79)
      {
        v80 = (unint64_t *)(v79 + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = sub_223225C34(v257);
      v83 = v82;
      v84 = *(std::__shared_weak_count **)&v257[8];
      if (!*(_QWORD *)&v257[8])
        goto LABEL_43;
      v85 = (unint64_t *)(*(_QWORD *)&v257[8] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
        if (!v83)
        {
LABEL_44:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/include_private/Reconstruction/MeshUtil/MetalRenderer.h", 326, (uint64_t)"render_targets[i].Buffer()", 26, (uint64_t)"Buffer not present", 18, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
      }
      else
      {
LABEL_43:
        if (!v82)
          goto LABEL_44;
      }
      v250.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v250.__r_.__value_.__r.__words[1]) = 0;
      v87 = (std::string::size_type)v232[2];
      v247.__r_.__value_.__r.__words[0] = v87;
      LODWORD(v247.__r_.__value_.__r.__words[1]) = 1;
      v88 = *a7 + 80 * v71;
      *(_QWORD *)v257 = *(_QWORD *)(v88 + 56);
      v89 = *(_QWORD *)(v88 + 64);
      *(_QWORD *)&v257[8] = v89;
      if (v89)
      {
        v90 = (unint64_t *)(v89 + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        v92 = *((_DWORD *)v232 + 4);
      }
      else
      {
        v92 = v87;
      }
      sub_223225F60((uint64_t)&v261, (const char *)(a1 + 104), 0, 0, (uint64_t)&v250, (uint64_t)&v247, (_QWORD **)v257, 0, 4 * v92, 0);
      v98 = *(std::__shared_weak_count **)&v257[8];
      if (*(_QWORD *)&v257[8])
      {
        v99 = (unint64_t *)(*(_QWORD *)&v257[8] + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      sub_223226DF0((uint64_t)&v261, v93, v94, v95, v96, v97);
      sub_223226D74(&v261);
      sub_223226D74(&v251);
      v28 = v71 + 1;
    }
    while (v28 < (uint64_t)(v233[1] - *v233) >> 6);
  }
LABEL_68:
  v245 = v252;
  v246 = v253;
  if (v253)
  {
    p_shared_owners = (unint64_t *)&v253->__shared_owners_;
    do
      v102 = __ldxr(p_shared_owners);
    while (__stxr(v102 + 1, p_shared_owners));
  }
  kdebug_trace();
  v261.i64[0] = (uint64_t)&off_24EC63500;
  v262.i64[1] = (uint64_t)&v261;
  sub_2232268C4((uint64_t)&v245, (const char *)&v261, v103, v104, v105, v106);
  v112 = (float32x4_t *)v262.i64[1];
  if ((float32x4_t *)v262.i64[1] == &v261)
  {
    v113 = 4;
    v112 = &v261;
    goto LABEL_75;
  }
  if (v262.i64[1])
  {
    v113 = 5;
LABEL_75:
    (*(void (**)(void))(v112->i64[0] + 8 * v113))();
  }
  v114 = v246;
  if (v246)
  {
    v115 = (unint64_t *)&v246->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  sub_2232267C8((uint64_t)&v252, v107, v108, v109, v110, v111);
  sub_223226BB0((uint64_t)&v252, v117, v118, v119, v120, v121);
  v123 = *(_QWORD **)(a1 + 144);
  v122 = (_QWORD *)(a1 + 144);
  sub_223CD5140((uint64_t)(v122 - 1), v123);
  *(v122 - 1) = v122;
  *v122 = 0;
  v122[1] = 0;
  v130 = *a7;
  v129 = a7[1];
  if (v130 != v129)
  {
    v244.i64[0] = (uint64_t)&v261.i64[1];
    while (!*(_BYTE *)(v130 + 72))
    {
LABEL_83:
      v130 += 80;
      if (v130 == v129)
        goto LABEL_243;
    }
    v131 = sub_223226520((void ***)(v130 + 56), v124, v125, v126, v127, v128);
    v132 = *(_DWORD *)(v130 + 32);
    v133 = *(_DWORD *)(v130 + 36);
    v260[0] = v132;
    v260[1] = v133;
    v134 = v132 != 0;
    v135 = v133 == 0;
    if (v133)
      v136 = v132;
    else
      v136 = 0;
    *(_QWORD *)v257 = v131;
    v261.i64[0] = (uint64_t)&off_24EC21230;
    v137 = v135 || v132 == 0;
    v138 = v136 << 32;
    if (v137)
      v138 = 0;
    v251.__r_.__value_.__r.__words[0] = v138 | v134;
    sub_223CDC4C0(v257, v260, (uint64_t *)&v251, v244.i64[0]);
    v139 = v261.i64[1];
    if (!v261.i64[1])
      goto LABEL_110;
    v140 = (std::__shared_weak_count *)v262.i64[0];
    if (!v262.i64[0])
      goto LABEL_106;
    v141 = (unint64_t *)(v262.i64[0] + 8);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    do
      v143 = __ldaxr(v141);
    while (__stlxr(v143 - 1, v141));
    if (v143)
    {
      v139 = v261.i64[1];
      v144 = (std::__shared_weak_count *)v262.i64[0];
      if (!v262.i64[0])
        goto LABEL_106;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
      v139 = v261.i64[1];
      v144 = (std::__shared_weak_count *)v262.i64[0];
      if (!v262.i64[0])
        goto LABEL_106;
    }
    v145 = (unint64_t *)&v144->__shared_owners_;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
    do
      v147 = __ldaxr(v145);
    while (__stlxr(v147 - 1, v145));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
      if (v264.i8[1])
      {
LABEL_107:
        (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v139 + 96))(&v250, v139, 0);
        v148 = *(_QWORD *)(v130 + 8);
        if (!v148)
        {
LABEL_127:
          v247.__r_.__value_.__r.__words[0] = 0;
          v157 = v263.u32[0];
          v158 = v263.i32[3];
          if (v263.i32[3] != v263.i32[0])
            goto LABEL_154;
LABEL_128:
          if (v158 == *(_DWORD *)(v130 + 44))
          {
            v159 = v263.u32[1];
            v160 = (const void *)v262.i64[1];
            if (v264.i8[0] && v262.i64[1])
            {
              v161 = v261.i64[1];
              v162 = (std::__shared_weak_count *)v262.i64[0];
              if (v262.i64[0])
              {
                v163 = (unint64_t *)(v262.i64[0] + 8);
                do
                  v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
                do
                  v165 = __ldaxr(v163);
                while (__stlxr(v165 - 1, v163));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v161 + 88))(v161, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v160 = (const void *)v262.i64[1];
            }
            v166 = v159 * (unint64_t)v157;
            if (v166
              && !v160
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_256:
              abort();
            }
            v167 = *(void **)(v130 + 24);
            if (*(_BYTE *)(v130 + 48) && v167)
            {
              v168 = *(_QWORD *)(v130 + 8);
              v169 = *(std::__shared_weak_count **)(v130 + 16);
              if (v169)
              {
                v170 = (unint64_t *)&v169->__shared_owners_;
                do
                  v171 = __ldxr(v170);
                while (__stxr(v171 + 1, v170));
                do
                  v172 = __ldaxr(v170);
                while (__stlxr(v172 - 1, v170));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v168 + 88))(v168, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v167 = *(void **)(v130 + 24);
            }
            if (!v166 || v167)
            {
              if (!v166)
              {
LABEL_234:
                v211 = v247.__r_.__value_.__r.__words[0];
                v247.__r_.__value_.__r.__words[0] = 0;
                if (v211)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v211 + 8))(v211);
                v212 = v250.__r_.__value_.__r.__words[0];
                v250.__r_.__value_.__r.__words[0] = 0;
                if (v212)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v212 + 8))(v212);
                v213 = (std::__shared_weak_count *)v262.i64[0];
                if (v262.i64[0])
                {
                  v214 = (unint64_t *)(v262.i64[0] + 8);
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
                goto LABEL_83;
              }
            }
            else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_256;
            }
            memmove(v167, v160, 4 * v166);
            goto LABEL_234;
          }
LABEL_154:
          v173 = v261.i64[1];
          if (!v261.i64[1])
            goto LABEL_173;
          v174 = (std::__shared_weak_count *)v262.i64[0];
          if (!v262.i64[0])
            goto LABEL_169;
          v175 = (unint64_t *)(v262.i64[0] + 8);
          do
            v176 = __ldxr(v175);
          while (__stxr(v176 + 1, v175));
          do
            v177 = __ldaxr(v175);
          while (__stlxr(v177 - 1, v175));
          if (v177)
          {
            v173 = v261.i64[1];
            v178 = (std::__shared_weak_count *)v262.i64[0];
            if (!v262.i64[0])
              goto LABEL_169;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
            v173 = v261.i64[1];
            v178 = (std::__shared_weak_count *)v262.i64[0];
            if (!v262.i64[0])
              goto LABEL_169;
          }
          v179 = (unint64_t *)&v178->__shared_owners_;
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
          do
            v181 = __ldaxr(v179);
          while (__stlxr(v181 - 1, v179));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
            if (v264.i8[1])
            {
LABEL_170:
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v173 + 96))(v257, v173, 0);
              v182 = *(_QWORD *)(v130 + 8);
              if (!v182)
              {
LABEL_190:
                v251.__r_.__value_.__r.__words[0] = 0;
                if (!v263.i32[0])
                  goto LABEL_230;
                goto LABEL_191;
              }
LABEL_174:
              v183 = *(std::__shared_weak_count **)(v130 + 16);
              if (!v183)
                goto LABEL_186;
              v184 = (unint64_t *)&v183->__shared_owners_;
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
              do
                v186 = __ldaxr(v184);
              while (__stlxr(v186 - 1, v184));
              if (v186)
              {
                v182 = *(_QWORD *)(v130 + 8);
                v187 = *(std::__shared_weak_count **)(v130 + 16);
                if (!v187)
                  goto LABEL_186;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                std::__shared_weak_count::__release_weak(v183);
                v182 = *(_QWORD *)(v130 + 8);
                v187 = *(std::__shared_weak_count **)(v130 + 16);
                if (!v187)
                  goto LABEL_186;
              }
              v188 = (unint64_t *)&v187->__shared_owners_;
              do
                v189 = __ldxr(v188);
              while (__stxr(v189 + 1, v188));
              do
                v190 = __ldaxr(v188);
              while (__stlxr(v190 - 1, v188));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                std::__shared_weak_count::__release_weak(v187);
                if (!*(_BYTE *)(v130 + 49))
                  goto LABEL_190;
LABEL_187:
                (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 96))(&v251, v182, 1);
                if (!v263.i32[0])
                  goto LABEL_230;
LABEL_191:
                v191 = v263.i32[1];
                if (v263.i32[1])
                {
                  v192 = v263.u32[3];
                  v193 = *(unsigned int *)(v130 + 44);
                  v194 = (char *)v262.i64[1];
                  if (v264.i8[0] && v262.i64[1])
                  {
                    v195 = v261.i64[1];
                    v196 = (std::__shared_weak_count *)v262.i64[0];
                    if (v262.i64[0])
                    {
                      v197 = (unint64_t *)(v262.i64[0] + 8);
                      do
                        v198 = __ldxr(v197);
                      while (__stxr(v198 + 1, v197));
                      do
                        v199 = __ldaxr(v197);
                      while (__stlxr(v199 - 1, v197));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v195 + 88))(v195, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v194 = (char *)v262.i64[1];
                  }
                  v200 = *(char **)(v130 + 24);
                  if (*(_BYTE *)(v130 + 48) && v200)
                  {
                    v201 = *(_QWORD *)(v130 + 8);
                    v202 = *(std::__shared_weak_count **)(v130 + 16);
                    if (v202)
                    {
                      v203 = (unint64_t *)&v202->__shared_owners_;
                      do
                        v204 = __ldxr(v203);
                      while (__stxr(v204 + 1, v203));
                      do
                        v205 = __ldaxr(v203);
                      while (__stlxr(v205 - 1, v203));
                      if (!v205)
                      {
                        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v201 + 88))(v201, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v200 = *(char **)(v130 + 24);
                  }
                  v206 = v191 - 1;
                  if (v206)
                  {
                    if ((_DWORD)v157)
                    {
                      v207 = 4 * v192;
                      v208 = 4 * v193;
                      while ((v194
                            || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))&& (v200|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
                      {
                        memmove(v200, v194, 4 * v157);
                        v194 += v207;
                        v200 += v208;
                        if (!--v206)
                          goto LABEL_219;
                      }
LABEL_254:
                      abort();
                    }
                    goto LABEL_230;
                  }
LABEL_219:
                  if ((_DWORD)v157 && !v194)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_254;
                    }
                    if (!v200)
                      goto LABEL_226;
                    goto LABEL_229;
                  }
                  if ((_DWORD)v157 && !v200)
                  {
LABEL_226:
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_254;
                    }
                    v200 = 0;
                    goto LABEL_229;
                  }
                  if ((_DWORD)v157)
LABEL_229:
                    memmove(v200, v194, 4 * v157);
                }
LABEL_230:
                v209 = v251.__r_.__value_.__r.__words[0];
                v251.__r_.__value_.__r.__words[0] = 0;
                if (v209)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v209 + 8))(v209);
                v210 = *(_QWORD *)v257;
                *(_QWORD *)v257 = 0;
                if (v210)
                  (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
                goto LABEL_234;
              }
LABEL_186:
              if (!*(_BYTE *)(v130 + 49))
                goto LABEL_190;
              goto LABEL_187;
            }
LABEL_173:
            *(_QWORD *)v257 = 0;
            v182 = *(_QWORD *)(v130 + 8);
            if (!v182)
              goto LABEL_190;
            goto LABEL_174;
          }
LABEL_169:
          if (v264.i8[1])
            goto LABEL_170;
          goto LABEL_173;
        }
LABEL_111:
        v149 = *(std::__shared_weak_count **)(v130 + 16);
        if (!v149)
          goto LABEL_123;
        v150 = (unint64_t *)&v149->__shared_owners_;
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
        do
          v152 = __ldaxr(v150);
        while (__stlxr(v152 - 1, v150));
        if (v152)
        {
          v148 = *(_QWORD *)(v130 + 8);
          v153 = *(std::__shared_weak_count **)(v130 + 16);
          if (!v153)
            goto LABEL_123;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
          v148 = *(_QWORD *)(v130 + 8);
          v153 = *(std::__shared_weak_count **)(v130 + 16);
          if (!v153)
            goto LABEL_123;
        }
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        do
          v156 = __ldaxr(v154);
        while (__stlxr(v156 - 1, v154));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
          if (!*(_BYTE *)(v130 + 49))
            goto LABEL_127;
LABEL_124:
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v148 + 96))(&v247, v148, 1);
          v157 = v263.u32[0];
          v158 = v263.i32[3];
          if (v263.i32[3] != v263.i32[0])
            goto LABEL_154;
          goto LABEL_128;
        }
LABEL_123:
        if (!*(_BYTE *)(v130 + 49))
          goto LABEL_127;
        goto LABEL_124;
      }
LABEL_110:
      v250.__r_.__value_.__r.__words[0] = 0;
      v148 = *(_QWORD *)(v130 + 8);
      if (!v148)
        goto LABEL_127;
      goto LABEL_111;
    }
LABEL_106:
    if (v264.i8[1])
      goto LABEL_107;
    goto LABEL_110;
  }
LABEL_243:
  kdebug_trace();
  kdebug_trace();
  v221 = v253;
  if (v253)
  {
    v222 = (unint64_t *)&v253->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = v255;
  if (v255)
  {
    v225 = (unint64_t *)&v255->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  return sub_22322797C(&v256, v216, v217, v218, v219, v220);
}

void sub_223CDF45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223CDF55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  sub_223197300((uint64_t)&a59);
  sub_223167354((uint64_t)&a62);
  sub_22322797C(&a64, v65, v66, v67, v68, v69);
  _Unwind_Resume(a1);
}

void sub_223CDF6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (a50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a50 + 8))(a50);
    v60 = *(_QWORD *)(v58 - 256);
    *(_QWORD *)(v58 - 256) = 0;
    if (!v60)
    {
LABEL_3:
      v61 = a41;
      if (!a41)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v60 = *(_QWORD *)(v58 - 256);
    *(_QWORD *)(v58 - 256) = 0;
    if (!v60)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = a41;
  if (!a41)
  {
LABEL_4:
    v62 = a47;
    if (!a47)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = a47;
  if (!a47)
  {
LABEL_6:
    sub_2231BD9DC(v58 - 176);
    sub_223197300((uint64_t)&a53);
    sub_223167354((uint64_t)&a56);
    sub_22322797C(&a58, v63, v64, v65, v66, v67);
    _Unwind_Resume(a1);
  }
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  goto LABEL_6;
}

void sub_223CDF75C()
{
  JUMPOUT(0x223CDF764);
}

void sub_223CDF76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  sub_223226D74(&a50);
  JUMPOUT(0x223CDF778);
}

void **sub_223CDF798(uint64_t a1, _QWORD *a2, _QWORD *a3, char *a4, float32x2_t *a5, unsigned int a6, _QWORD *a7)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  float32x4_t v22;
  float32x4_t *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  float32x4_t v42;
  float32x4_t *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  uint64_t *v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string::value_type *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  BOOL v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string::size_type v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  _BOOL8 v128;
  BOOL v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  __int32 v152;
  unsigned __int32 v153;
  const void *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  size_t v160;
  void *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  __int32 v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  __int32 v200;
  std::string::size_type v201;
  uint64_t v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v220;
  void ***v222;
  uint64_t v224;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  std::string v237;
  _QWORD *(**v238)(_QWORD *);
  __int128 v239;
  std::string v240;
  std::string v241;
  __int128 v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  void *v246;
  _BYTE v247[32];
  float32x4_t v248;
  float32x4_t v249;
  _DWORD v250[2];
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  char v255;
  uint64_t v256;

  v256 = *MEMORY[0x24BDAC8D0];
  v222 = *(void ****)a1;
  sub_223227930((uint64_t *)&v246);
  sub_223226E78(*(void ****)a1, v10, v11, v12, v13, v14, &v244);
  kdebug_trace();
  sub_223226F40(*(void ****)a1, v15, v16, v17, v18, (uint64_t)&v242);
  *((_BYTE *)&v241.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v241, "SemantiRenderImpl");
  v19 = std::string::insert(&v241, 0, "Recon.", 6uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(_QWORD *)&v247[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)v247 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append((std::string *)v247, "BatchDrawMeshes.CommandBuffer", 0x1DuLL);
  v22 = *(float32x4_t *)&v21->__r_.__value_.__l.__data_;
  v252.i64[0] = v21->__r_.__value_.__r.__words[2];
  v251 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v252.i8[7] >= 0)
    v23 = &v251;
  else
    v23 = (float32x4_t *)v251.i64[0];
  if (v252.i8[7] >= 0)
    v24 = v252.u8[7];
  else
    v24 = v251.u64[1];
  sub_223CEECA4((uint64_t)&v242, (std::string::value_type *)v23, v24);
  if (v252.i8[7] < 0)
  {
    operator delete((void *)v251.i64[0]);
    if ((v247[23] & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v241.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_67:
      operator delete(v241.__r_.__value_.__l.__data_);
      if (a3[1] != *a3)
        goto LABEL_11;
      goto LABEL_68;
    }
  }
  else if ((v247[23] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)v247);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_67;
LABEL_10:
  if (a3[1] != *a3)
  {
LABEL_11:
    v25 = 0;
    v26 = 0;
    v220 = a7;
    do
    {
      sub_223226BC8((uint64_t)&v242, a1 + 88, (uint64_t)&v241);
      sub_2232284C8((uint64_t)&v241, (_QWORD **)(*(_QWORD *)a1 + 56), v27, v28, v29, v30);
      sub_223228474((uint64_t)&v241, *(_DWORD *)(*(_QWORD *)a1 + 24), v31, v32, v33, v34);
      sub_223228484((uint64_t)&v241, *(_DWORD *)(*(_QWORD *)a1 + 28), v35, v36, v37, v38);
      *((_BYTE *)&v240.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v240, "SemantiRenderImpl");
      v39 = std::string::insert(&v240, 0, "Recon.", 6uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      *(_QWORD *)&v247[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
      *(_OWORD *)v247 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append((std::string *)v247, "BatchDrawMeshes.RenderEncoder", 0x1DuLL);
      v42 = *(float32x4_t *)&v41->__r_.__value_.__l.__data_;
      v252.i64[0] = v41->__r_.__value_.__r.__words[2];
      v251 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v252.i8[7] >= 0)
        v43 = &v251;
      else
        v43 = (float32x4_t *)v251.i64[0];
      if (v252.i8[7] >= 0)
        v44 = v252.u8[7];
      else
        v44 = v251.u64[1];
      sub_223CEEDEC((uint64_t)&v241, (std::string::value_type *)v43, v44);
      if (v252.i8[7] < 0)
      {
        operator delete((void *)v251.i64[0]);
        if ((v247[23] & 0x80000000) != 0)
        {
LABEL_50:
          operator delete(*(void **)v247);
          if ((SHIBYTE(v240.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_21;
          goto LABEL_51;
        }
      }
      else if ((v247[23] & 0x80000000) != 0)
      {
        goto LABEL_50;
      }
      if ((SHIBYTE(v240.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_21;
LABEL_51:
      operator delete(v240.__r_.__value_.__l.__data_);
LABEL_21:
      v51 = (uint64_t *)(*a2 + 24 * v26);
      v52 = *v51;
      v53 = v51[1];
      v224 = v26;
      if (*v51 != v53)
      {
        v54 = (float32x4_t *)(*a3 + (v26 << 6));
        do
        {
          v55 = *(uint64_t **)v52;
          v227 = *(float32x4_t *)(v52 + 8);
          v228 = *(float32x4_t *)(v52 + 24);
          v229 = *v54;
          v230 = v54[1];
          v231 = *(float32x4_t *)(v52 + 40);
          v232 = v54[2];
          v233 = v54[3];
          v234 = *(float32x4_t *)(v52 + 56);
          sub_223CEC0BC(a5, (float *)(*(_QWORD *)a1 + 32), a4, (uint64_t)v247, v50);
          v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v229, v227.f32[0]), v230, *(float32x2_t *)v227.f32, 1), v232, v227, 2), v233, v227, 3);
          v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v229, v228.f32[0]), v230, *(float32x2_t *)v228.f32, 1), v232, v228, 2), v233, v228, 3);
          v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v229, v231.f32[0]), v230, *(float32x2_t *)v231.f32, 1), v232, v231, 2), v233, v231, 3);
          v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v229, v234.f32[0]), v230, *(float32x2_t *)v234.f32, 1), v232, v234, 2), v233, v234, 3);
          v61 = *a4;
          v251 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v247, v57.f32[0]), *(float32x4_t *)&v247[16], *(float32x2_t *)v57.f32, 1), v248, v57, 2), v249, v57, 3);
          v252 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v247, v58.f32[0]), *(float32x4_t *)&v247[16], *(float32x2_t *)v58.f32, 1), v248, v58, 2), v249, v58, 3);
          v253 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v247, v59.f32[0]), *(float32x4_t *)&v247[16], *(float32x2_t *)v59.f32, 1), v248, v59, 2), v249, v59, 3);
          v254 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v247, v60.f32[0]), *(float32x4_t *)&v247[16], *(float32x2_t *)v60.f32, 1), v248, v60, 2), v249, v60, 3);
          v255 = v61;
          v63 = *v55;
          v62 = v55[1];
          v239 = *(_OWORD *)&v241.__r_.__value_.__r.__words[1];
          if (v241.__r_.__value_.__r.__words[2])
          {
            v64 = (unint64_t *)(v241.__r_.__value_.__r.__words[2] + 8);
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          v238 = &off_24EC25F68;
          sub_223CD9F40(a1, (unint64_t)v55, a6, (uint64_t)&v251, (uint64_t)&v238, v56);
          v25 -= 1431655765 * ((v62 - v63) >> 2);
          sub_223226D74(&v238);
          v52 += 72;
        }
        while (v52 != v53);
      }
      sub_223226DF0((uint64_t)&v241, v45, v46, v47, v48, v49);
      sub_223226BBC((uint64_t)&v242, (uint64_t)&v251);
      a7 = v220;
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v237, "SemantiRenderImpl");
      v66 = std::string::insert(&v237, 0, "Recon.", 6uLL);
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v240, "BatchDrawMeshes.BlitEncoder", 0x1BuLL);
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      *(_QWORD *)&v247[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
      *(_OWORD *)v247 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      if (v247[23] >= 0)
        v70 = v247;
      else
        v70 = *(std::string::value_type **)v247;
      if (v247[23] >= 0)
        v71 = v247[23];
      else
        v71 = *(_QWORD *)&v247[8];
      sub_223CEF07C((uint64_t)&v251, v70, v71);
      if ((v247[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v247);
        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_53:
          operator delete(v240.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_36;
          goto LABEL_54;
        }
      }
      else if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_53;
      }
      if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_36;
LABEL_54:
      operator delete(v237.__r_.__value_.__l.__data_);
LABEL_36:
      v72 = *v220 + 80 * v224;
      *(_QWORD *)v247 = *(_QWORD *)(v72 + 56);
      v73 = *(_QWORD *)(v72 + 64);
      *(_QWORD *)&v247[8] = v73;
      if (v73)
      {
        v74 = (unint64_t *)(v73 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v76 = sub_223225C34(v247);
      v77 = v76;
      v78 = *(std::__shared_weak_count **)&v247[8];
      if (!*(_QWORD *)&v247[8])
        goto LABEL_43;
      v79 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
        if (!v77)
        {
LABEL_44:
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/include_private/Reconstruction/MeshUtil/MetalRenderer.h", 326, (uint64_t)"render_targets[i].Buffer()", 26, (uint64_t)"Buffer not present", 18, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
      }
      else
      {
LABEL_43:
        if (!v76)
          goto LABEL_44;
      }
      v240.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v240.__r_.__value_.__r.__words[1]) = 0;
      v81 = (std::string::size_type)v222[2];
      v237.__r_.__value_.__r.__words[0] = v81;
      LODWORD(v237.__r_.__value_.__r.__words[1]) = 1;
      v82 = *v220 + 80 * v224;
      *(_QWORD *)v247 = *(_QWORD *)(v82 + 56);
      v83 = *(_QWORD *)(v82 + 64);
      *(_QWORD *)&v247[8] = v83;
      if (v83)
      {
        v84 = (unint64_t *)(v83 + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        v86 = *((_DWORD *)v222 + 4);
      }
      else
      {
        v86 = v81;
      }
      sub_223225F60((uint64_t)&v251, (const char *)(a1 + 104), 0, 0, (uint64_t)&v240, (uint64_t)&v237, (_QWORD **)v247, 0, v86, 0);
      v92 = *(std::__shared_weak_count **)&v247[8];
      if (*(_QWORD *)&v247[8])
      {
        v93 = (unint64_t *)(*(_QWORD *)&v247[8] + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      sub_223226DF0((uint64_t)&v251, v87, v88, v89, v90, v91);
      sub_223226D74(&v251);
      sub_223226D74(&v241);
      v26 = v224 + 1;
    }
    while (v224 + 1 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 6));
  }
LABEL_68:
  v235 = v242;
  v236 = v243;
  if (v243)
  {
    p_shared_owners = (unint64_t *)&v243->__shared_owners_;
    do
      v96 = __ldxr(p_shared_owners);
    while (__stxr(v96 + 1, p_shared_owners));
  }
  kdebug_trace();
  v251.i64[0] = (uint64_t)&off_24EC63678;
  v252.i64[1] = (uint64_t)&v251;
  sub_2232268C4((uint64_t)&v235, (const char *)&v251, v97, v98, v99, v100);
  v106 = (float32x4_t *)v252.i64[1];
  if ((float32x4_t *)v252.i64[1] == &v251)
  {
    v107 = 4;
    v106 = &v251;
    goto LABEL_75;
  }
  if (v252.i64[1])
  {
    v107 = 5;
LABEL_75:
    (*(void (**)(void))(v106->i64[0] + 8 * v107))();
  }
  v108 = v236;
  if (v236)
  {
    v109 = (unint64_t *)&v236->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  sub_2232267C8((uint64_t)&v242, v101, v102, v103, v104, v105);
  sub_223226BB0((uint64_t)&v242, v111, v112, v113, v114, v115);
  v117 = *(_QWORD **)(a1 + 144);
  v116 = (_QWORD *)(a1 + 144);
  sub_223CD5140((uint64_t)(v116 - 1), v117);
  *(v116 - 1) = v116;
  *v116 = 0;
  v116[1] = 0;
  v124 = *a7;
  v123 = a7[1];
  if (*a7 != v123)
  {
    while (!*(_BYTE *)(v124 + 72))
    {
LABEL_83:
      v124 += 80;
      if (v124 == v123)
        goto LABEL_243;
    }
    v125 = sub_223226520((void ***)(v124 + 56), v118, v119, v120, v121, v122);
    v126 = *(_DWORD *)(v124 + 32);
    v127 = *(_DWORD *)(v124 + 36);
    v250[0] = v126;
    v250[1] = v127;
    v128 = v126 != 0;
    v129 = v127 == 0;
    if (v127)
      v130 = v126;
    else
      v130 = 0;
    *(_QWORD *)v247 = v125;
    v251.i64[0] = (uint64_t)&off_24EC21420;
    v131 = v129 || v126 == 0;
    v132 = v130 << 32;
    if (v131)
      v132 = 0;
    v241.__r_.__value_.__r.__words[0] = v132 | v128;
    sub_223CDCCE0(v247, v250, (uint64_t *)&v241, (uint64_t)&v251.i64[1]);
    v133 = v251.i64[1];
    if (!v251.i64[1])
      goto LABEL_110;
    v134 = (std::__shared_weak_count *)v252.i64[0];
    if (!v252.i64[0])
      goto LABEL_106;
    v135 = (unint64_t *)(v252.i64[0] + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    do
      v137 = __ldaxr(v135);
    while (__stlxr(v137 - 1, v135));
    if (v137)
    {
      v133 = v251.i64[1];
      v138 = (std::__shared_weak_count *)v252.i64[0];
      if (!v252.i64[0])
        goto LABEL_106;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
      v133 = v251.i64[1];
      v138 = (std::__shared_weak_count *)v252.i64[0];
      if (!v252.i64[0])
        goto LABEL_106;
    }
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
    do
      v141 = __ldaxr(v139);
    while (__stlxr(v141 - 1, v139));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
      if (v254.i8[1])
      {
LABEL_107:
        (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v133 + 96))(&v240, v133, 0);
        v142 = *(_QWORD *)(v124 + 8);
        if (!v142)
        {
LABEL_127:
          v237.__r_.__value_.__r.__words[0] = 0;
          v151 = v253.u32[0];
          v152 = v253.i32[3];
          if (v253.i32[3] != v253.i32[0])
            goto LABEL_154;
LABEL_128:
          if (v152 == *(_DWORD *)(v124 + 44))
          {
            v153 = v253.u32[1];
            v154 = (const void *)v252.i64[1];
            if (v254.i8[0] && v252.i64[1])
            {
              v155 = v251.i64[1];
              v156 = (std::__shared_weak_count *)v252.i64[0];
              if (v252.i64[0])
              {
                v157 = (unint64_t *)(v252.i64[0] + 8);
                do
                  v158 = __ldxr(v157);
                while (__stxr(v158 + 1, v157));
                do
                  v159 = __ldaxr(v157);
                while (__stlxr(v159 - 1, v157));
                if (!v159)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v155 + 88))(v155, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v154 = (const void *)v252.i64[1];
            }
            v160 = v153 * (unint64_t)v151;
            if (v160
              && !v154
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_256:
              abort();
            }
            v161 = *(void **)(v124 + 24);
            if (*(_BYTE *)(v124 + 48) && v161)
            {
              v162 = *(_QWORD *)(v124 + 8);
              v163 = *(std::__shared_weak_count **)(v124 + 16);
              if (v163)
              {
                v164 = (unint64_t *)&v163->__shared_owners_;
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
                do
                  v166 = __ldaxr(v164);
                while (__stlxr(v166 - 1, v164));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v162 + 88))(v162, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v161 = *(void **)(v124 + 24);
            }
            if (!v160 || v161)
            {
              if (!v160)
              {
LABEL_234:
                v203 = v237.__r_.__value_.__r.__words[0];
                v237.__r_.__value_.__r.__words[0] = 0;
                if (v203)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v203 + 8))(v203);
                v204 = v240.__r_.__value_.__r.__words[0];
                v240.__r_.__value_.__r.__words[0] = 0;
                if (v204)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v204 + 8))(v204);
                v205 = (std::__shared_weak_count *)v252.i64[0];
                if (v252.i64[0])
                {
                  v206 = (unint64_t *)(v252.i64[0] + 8);
                  do
                    v207 = __ldaxr(v206);
                  while (__stlxr(v207 - 1, v206));
                  if (!v207)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                goto LABEL_83;
              }
            }
            else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_256;
            }
            memmove(v161, v154, v160);
            goto LABEL_234;
          }
LABEL_154:
          v167 = v251.i64[1];
          if (!v251.i64[1])
            goto LABEL_173;
          v168 = (std::__shared_weak_count *)v252.i64[0];
          if (!v252.i64[0])
            goto LABEL_169;
          v169 = (unint64_t *)(v252.i64[0] + 8);
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 1, v169));
          do
            v171 = __ldaxr(v169);
          while (__stlxr(v171 - 1, v169));
          if (v171)
          {
            v167 = v251.i64[1];
            v172 = (std::__shared_weak_count *)v252.i64[0];
            if (!v252.i64[0])
              goto LABEL_169;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
            v167 = v251.i64[1];
            v172 = (std::__shared_weak_count *)v252.i64[0];
            if (!v252.i64[0])
              goto LABEL_169;
          }
          v173 = (unint64_t *)&v172->__shared_owners_;
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
          do
            v175 = __ldaxr(v173);
          while (__stlxr(v175 - 1, v173));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
            if (v254.i8[1])
            {
LABEL_170:
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v167 + 96))(v247, v167, 0);
              v176 = *(_QWORD *)(v124 + 8);
              if (!v176)
              {
LABEL_190:
                v241.__r_.__value_.__r.__words[0] = 0;
                if (!v253.i32[0])
                  goto LABEL_230;
                goto LABEL_191;
              }
LABEL_174:
              v177 = *(std::__shared_weak_count **)(v124 + 16);
              if (!v177)
                goto LABEL_186;
              v178 = (unint64_t *)&v177->__shared_owners_;
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
              do
                v180 = __ldaxr(v178);
              while (__stlxr(v180 - 1, v178));
              if (v180)
              {
                v176 = *(_QWORD *)(v124 + 8);
                v181 = *(std::__shared_weak_count **)(v124 + 16);
                if (!v181)
                  goto LABEL_186;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                std::__shared_weak_count::__release_weak(v177);
                v176 = *(_QWORD *)(v124 + 8);
                v181 = *(std::__shared_weak_count **)(v124 + 16);
                if (!v181)
                  goto LABEL_186;
              }
              v182 = (unint64_t *)&v181->__shared_owners_;
              do
                v183 = __ldxr(v182);
              while (__stxr(v183 + 1, v182));
              do
                v184 = __ldaxr(v182);
              while (__stlxr(v184 - 1, v182));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
                if (!*(_BYTE *)(v124 + 49))
                  goto LABEL_190;
LABEL_187:
                (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v176 + 96))(&v241, v176, 1);
                if (!v253.i32[0])
                  goto LABEL_230;
LABEL_191:
                v185 = v253.i32[1];
                if (v253.i32[1])
                {
                  v186 = v253.u32[3];
                  v187 = *(unsigned int *)(v124 + 44);
                  v188 = (char *)v252.i64[1];
                  if (v254.i8[0] && v252.i64[1])
                  {
                    v189 = v251.i64[1];
                    v190 = (std::__shared_weak_count *)v252.i64[0];
                    if (v252.i64[0])
                    {
                      v191 = (unint64_t *)(v252.i64[0] + 8);
                      do
                        v192 = __ldxr(v191);
                      while (__stxr(v192 + 1, v191));
                      do
                        v193 = __ldaxr(v191);
                      while (__stlxr(v193 - 1, v191));
                      if (!v193)
                      {
                        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                        std::__shared_weak_count::__release_weak(v190);
                      }
                    }
                    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v189 + 88))(v189, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v188 = (char *)v252.i64[1];
                  }
                  v194 = *(char **)(v124 + 24);
                  if (*(_BYTE *)(v124 + 48) && v194)
                  {
                    v195 = *(_QWORD *)(v124 + 8);
                    v196 = *(std::__shared_weak_count **)(v124 + 16);
                    if (v196)
                    {
                      v197 = (unint64_t *)&v196->__shared_owners_;
                      do
                        v198 = __ldxr(v197);
                      while (__stxr(v198 + 1, v197));
                      do
                        v199 = __ldaxr(v197);
                      while (__stlxr(v199 - 1, v197));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v195 + 88))(v195, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v194 = *(char **)(v124 + 24);
                  }
                  v200 = v185 - 1;
                  if (v200)
                  {
                    if ((_DWORD)v151)
                    {
                      while ((v188
                            || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))&& (v194|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)))
                      {
                        memmove(v194, v188, v151);
                        v188 += v186;
                        v194 += v187;
                        if (!--v200)
                          goto LABEL_219;
                      }
LABEL_254:
                      abort();
                    }
                    goto LABEL_230;
                  }
LABEL_219:
                  if ((_DWORD)v151 && !v188)
                  {
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_254;
                    }
                    if (!v194)
                      goto LABEL_226;
                    goto LABEL_229;
                  }
                  if ((_DWORD)v151 && !v194)
                  {
LABEL_226:
                    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                    {
                      goto LABEL_254;
                    }
                    v194 = 0;
                    goto LABEL_229;
                  }
                  if ((_DWORD)v151)
LABEL_229:
                    memmove(v194, v188, v151);
                }
LABEL_230:
                v201 = v241.__r_.__value_.__r.__words[0];
                v241.__r_.__value_.__r.__words[0] = 0;
                if (v201)
                  (*(void (**)(std::string::size_type))(*(_QWORD *)v201 + 8))(v201);
                v202 = *(_QWORD *)v247;
                *(_QWORD *)v247 = 0;
                if (v202)
                  (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
                goto LABEL_234;
              }
LABEL_186:
              if (!*(_BYTE *)(v124 + 49))
                goto LABEL_190;
              goto LABEL_187;
            }
LABEL_173:
            *(_QWORD *)v247 = 0;
            v176 = *(_QWORD *)(v124 + 8);
            if (!v176)
              goto LABEL_190;
            goto LABEL_174;
          }
LABEL_169:
          if (v254.i8[1])
            goto LABEL_170;
          goto LABEL_173;
        }
LABEL_111:
        v143 = *(std::__shared_weak_count **)(v124 + 16);
        if (!v143)
          goto LABEL_123;
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (v146)
        {
          v142 = *(_QWORD *)(v124 + 8);
          v147 = *(std::__shared_weak_count **)(v124 + 16);
          if (!v147)
            goto LABEL_123;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
          v142 = *(_QWORD *)(v124 + 8);
          v147 = *(std::__shared_weak_count **)(v124 + 16);
          if (!v147)
            goto LABEL_123;
        }
        v148 = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
        do
          v150 = __ldaxr(v148);
        while (__stlxr(v150 - 1, v148));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
          if (!*(_BYTE *)(v124 + 49))
            goto LABEL_127;
LABEL_124:
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v142 + 96))(&v237, v142, 1);
          v151 = v253.u32[0];
          v152 = v253.i32[3];
          if (v253.i32[3] != v253.i32[0])
            goto LABEL_154;
          goto LABEL_128;
        }
LABEL_123:
        if (!*(_BYTE *)(v124 + 49))
          goto LABEL_127;
        goto LABEL_124;
      }
LABEL_110:
      v240.__r_.__value_.__r.__words[0] = 0;
      v142 = *(_QWORD *)(v124 + 8);
      if (!v142)
        goto LABEL_127;
      goto LABEL_111;
    }
LABEL_106:
    if (v254.i8[1])
      goto LABEL_107;
    goto LABEL_110;
  }
LABEL_243:
  kdebug_trace();
  kdebug_trace();
  v213 = v243;
  if (v243)
  {
    v214 = (unint64_t *)&v243->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = v245;
  if (v245)
  {
    v217 = (unint64_t *)&v245->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  return sub_22322797C(&v246, v208, v209, v210, v211, v212);
}

void sub_223CE0930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223CE0A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *a66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  sub_223197300((uint64_t)&a61);
  sub_223167354((uint64_t)&a64);
  sub_22322797C(&a66, v67, v68, v69, v70, v71);
  _Unwind_Resume(a1);
}

void sub_223CE0B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (a51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a51 + 8))(a51);
    v62 = *(_QWORD *)(v60 - 256);
    *(_QWORD *)(v60 - 256) = 0;
    if (!v62)
    {
LABEL_3:
      v63 = a41;
      if (!a41)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v62 = *(_QWORD *)(v60 - 256);
    *(_QWORD *)(v60 - 256) = 0;
    if (!v62)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = a41;
  if (!a41)
  {
LABEL_4:
    v64 = a47;
    if (!a47)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = a47;
  if (!a47)
  {
LABEL_6:
    sub_2231BEEB4(v60 - 176);
    sub_223197300((uint64_t)&a55);
    sub_223167354((uint64_t)&a58);
    sub_22322797C(&a60, v65, v66, v67, v68, v69);
    _Unwind_Resume(a1);
  }
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  goto LABEL_6;
}

void sub_223CE0C30()
{
  JUMPOUT(0x223CE0C38);
}

void sub_223CE0C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_223226D74(&a51);
  JUMPOUT(0x223CE0C4CLL);
}

void sub_223CE0C6C(uint64_t a1, int a2, uint64_t a3, int a4, float32_t a5, float a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  double v25;
  float32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  double v33;
  double v34;
  double v35;
  int v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  double v57;
  double v58;
  double v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  _DWORD *v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  char *v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  float v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  char *v125;
  char *v126;
  unsigned int v127;
  unsigned int v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  int v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  unint64_t v152;
  uint64_t v153;
  BOOL v154;
  BOOL v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int8x16_t v160;
  int8x16_t v161;
  float32x4_t v162;
  unsigned int **v163;
  unsigned int **v164;
  unsigned int **v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  unint64_t v183;
  _BYTE *v184;
  unsigned int *v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  char *v190;
  unsigned int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  float32x4_t *v201;
  float32x4_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  void *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  char *v217;
  char v218;
  uint64_t *v219;
  char *v220;
  char *v221;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  char *__p;
  int __pa;
  int v229;
  char *v230;
  _QWORD *v231;
  char *v233;
  char *v234;
  _QWORD *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  void *v239;
  __int128 v240;
  char *v241;
  _DWORD *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  void *v247;
  unint64_t v248;
  unint64_t v249;

  v10 = *(_QWORD *)(a3 + 240);
  v11 = *(_QWORD *)(a3 + 248);
  if (v10 != v11
    && (*(_DWORD *)(a3 + 272) != 2
     || v11 - v10 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 2))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 196, (uint64_t)"(mesh.semantics.empty() || (mesh.semantics_type == kit::mesh::TriMeshMetadataType::PerFace && mesh.semantics.size() == mesh.faces.size()))", 138, (uint64_t)"The mesh can only contain PerFace semantics.", 44, (void (*)(void **))sub_22457406C)|| (v12 = *(_QWORD *)(a3 + 280), v13 = *(_QWORD *)(a3 + 288), v12 != v13)&& (*(_DWORD *)(a3 + 312) != 2|| v13 - v12 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 2))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 200, (uint64_t)"(mesh.materials.empty() || (mesh.materials_type == kit::mesh::TriMeshMetadataType::PerFace && mesh.materials.size() == mesh.faces.size()))", 138, (uint64_t)"The mesh can only contain PerFace materials.", 44,
         (void (*)(void **))sub_22457406C)
    || (v14 = *(_QWORD *)(a3 + 320), v15 = *(_QWORD *)(a3 + 328), v14 != v15)
    && (*(_DWORD *)(a3 + 352) != 1
     || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2) != (v15 - v14) >> 2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 204, (uint64_t)"(mesh.confidences.empty() || (mesh.confidences_type == kit::mesh::TriMeshMetadataType::PerVertex && mesh.confidences.size() == mesh.vertices.size()))", 149, (uint64_t)"The mesh can only contain PerVertex confidences.", 48, (void (*)(void **))sub_22457406C)|| *(_QWORD *)(a3 + 32) != *(_QWORD *)(a3 + 40)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 205, (uint64_t)"mesh.colors.empty()", 19, (uint64_t)"The mesh cannot contain colors.", 31, (void (*)(void **))sub_22457406C)|| *(_QWORD *)(a3 + 176) != *(_QWORD *)(a3 + 184)&& sub_224573870(
         "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp",
         206,
         (uint64_t)"mesh.tex_coords.empty()",
         23,
         (uint64_t)"The mesh cannot contain tex_coords.",
         35,
         (void (*)(void **))sub_22457406C)
    || *(_QWORD *)(a3 + 208) != *(_QWORD *)(a3 + 216)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 207, (uint64_t)"mesh.tex_faces.empty()", 22, (uint64_t)"The mesh cannot contain tex_faces.", 34, (void (*)(void **))sub_22457406C)|| (v16 = (_QWORD *)(a3 + 72), *(_QWORD *)(a3 + 72) != *(_QWORD *)(a3 + 80))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp", 208, (uint64_t)"mesh.normals.empty()", 20, (uint64_t)"The mesh cannot contain normals.", 32, (void (*)(void **))sub_22457406C)|| (v229 = a4, *(_QWORD *)(a3 + 144) != *(_QWORD *)(a3 + 152))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshSimplifier.cpp",
         209,
         (uint64_t)"mesh.edges.empty()",
         18,
         (uint64_t)"The mesh cannot contain edges.",
         30,
         (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223CE1F0C(&v239, a1 + 48);
  v17 = (uint64_t *)(a1 + 24);
  v18 = (_QWORD *)(a1 + 96);
  v19 = (_QWORD *)(a1 + 120);
  v20 = (_QWORD *)(a1 + 144);
  v219 = (uint64_t *)(a1 + 48);
  sub_223CD61CC((_QWORD *)a3, (uint64_t *)a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48), a1 + 72, (char **)(a1 + 96), a1 + 120, (_QWORD *)(a1 + 144));
  v27 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v27)
  {
    v28 = 0;
    v29 = v27 / 12;
    do
      sub_223CD6CD8(v28++, (_QWORD *)(a1 + 72), v219, v17, (_QWORD *)a1, v20, v18, v19, *(double *)v21.i64, *(double *)v22.i64, v23, v24, v25, v26, (uint64_t *)a3);
    while (v29 != v28);
  }
  v216 = (uint64_t *)(a1 + 120);
  v235 = (_QWORD *)a3;
  v236 = 0;
  v237 = 0;
  v238 = 0;
  if (a2)
  {
    sub_223CD8370((uint64_t *)a3, (char **)&v236, v21, v22, *(double *)v23.i64, *(double *)v24.i64, *(float32x2_t *)&v25);
    v30.f32[0] = a5;
    v36 = sub_223CD79E4(&v236, v17, (uint64_t *)a1, v219, v20, v19, v18, (uint64_t *)a3, v30, v31, v32, v33, v34, v35);
    if (a2 != 1)
    {
      if (v36)
      {
        v42 = 1;
        while (1)
        {
          v43 = -1431655765 * ((*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 2);
          v44 = *(_QWORD *)(a3 + 72);
          v45 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 80) - v44) >> 2);
          if (v43 <= v45)
          {
            if (v43 < v45)
              *(_QWORD *)(a3 + 80) = v44 + 12 * v43;
            if (!v43)
              goto LABEL_39;
          }
          else
          {
            sub_22317EF30((uint64_t)v16, v43 - v45);
          }
          v46 = 0;
          do
          {
            v48 = (unsigned int *)(*(_QWORD *)(a3 + 112) + v46);
            v49 = *(_QWORD *)a3 + 12 * *v48;
            v50 = *(_QWORD *)a3 + 12 * v48[1];
            v37.i64[0] = *(_QWORD *)v50;
            v37.i32[2] = *(_DWORD *)(v50 + 8);
            v51 = *(_QWORD *)a3 + 12 * v48[2];
            v38.i64[0] = *(_QWORD *)v49;
            v38.i32[2] = *(_DWORD *)(v49 + 8);
            v52 = (int8x16_t)vsubq_f32((float32x4_t)v37, v38);
            v39.i64[0] = *(_QWORD *)v51;
            v39.i32[2] = *(_DWORD *)(v51 + 8);
            v53 = (int8x16_t)vsubq_f32(v39, v38);
            v39 = (float32x4_t)vextq_s8(vextq_s8(v52, v52, 0xCuLL), v52, 8uLL);
            v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL);
            v37 = (int8x16_t)vmlsq_f32(vmulq_f32(v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL)), v41, (float32x4_t)vextq_s8(vextq_s8(v53, v53, 0xCuLL), v53, 8uLL));
            v40 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
            *(float32x2_t *)v39.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), *(float32x2_t *)v37.i8, 1), v40, v40);
            v38 = 0uLL;
            v40.i32[0] = 702623251;
            if (v39.f32[0] > 1.0e-13)
            {
              v38.f32[0] = sqrtf(v39.f32[0]);
              v38 = vdivq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0));
            }
            v47 = *v16 + v46;
            *(_QWORD *)v47 = v38.i64[0];
            *(_DWORD *)(v47 + 8) = v38.i32[2];
            v46 += 12;
            --v43;
          }
          while (v43);
LABEL_39:
          sub_223CD8370((uint64_t *)a3, (char **)&v236, (float32x4_t)v37, v38, *(double *)v39.i64, *(double *)&v40, *(float32x2_t *)v41.f32);
          v54.f32[0] = a5;
          if (sub_223CD79E4(&v236, v17, (uint64_t *)a1, v219, v20, v19, v18, (uint64_t *)a3, v54, v55, v56, v57, v58, v59))
          {
            if (++v42 != a2)
              continue;
          }
          break;
        }
      }
    }
  }
  v60 = (_QWORD *)a3;
  *(_QWORD *)(a3 + 152) = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(a3 + 72);
  if (v229)
  {
    v61 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v239;
    v239 = v61;
    v62 = v240;
    v63 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v240;
    v240 = v63;
    if (v62 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2))
    {
      v65 = *(_QWORD **)a1;
      v64 = *(_QWORD **)(a1 + 8);
      if (*(_QWORD **)a1 != v64)
      {
        while (1)
        {
          v66 = (char *)*v65;
          v67 = (char *)v65[1];
          v68 = (uint64_t)&v67[-*v65] >> 2;
          if (v67 == (char *)*v65)
          {
            v70 = 0;
          }
          else
          {
            v69 = 0;
            v70 = 0;
            v71 = *v216;
            do
            {
              v72 = *(unsigned int *)&v66[4 * v69];
              if (*(_BYTE *)(v71 + v72) == 1)
                *(_DWORD *)&v66[4 * v70++] = v72;
              ++v69;
            }
            while (v68 > v69);
          }
          if (v70 <= v68)
          {
            if (v70 < v68)
            {
              v67 = &v66[4 * v70];
              v65[1] = v67;
            }
          }
          else
          {
            sub_2237189C8((uint64_t)v65, v70 - v68);
            v67 = (char *)v65[1];
          }
          v73 = v65[2];
          if ((unint64_t)v67 >= v73)
            break;
          *(_DWORD *)v67 = -1;
          v74 = (uint64_t)(v67 + 4);
LABEL_77:
          v65[1] = v74;
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v65 += 3;
          if (v65 == v64)
            goto LABEL_78;
        }
        v75 = (char *)*v65;
        v76 = (uint64_t)&v67[-*v65];
        v77 = v76 >> 2;
        v78 = (v76 >> 2) + 1;
        if (v78 >> 62)
          sub_22316E078();
        v79 = v73 - (_QWORD)v75;
        if (v79 >> 1 > v78)
          v78 = v79 >> 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
          v80 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          if (v80 >> 62)
            sub_223174E94();
          v81 = operator new(4 * v80);
          v82 = &v81[4 * v77];
          *v82 = -1;
          v74 = (uint64_t)(v82 + 1);
          v83 = v67 - v75;
          if (v67 == v75)
            goto LABEL_75;
        }
        else
        {
          v81 = 0;
          v82 = (_DWORD *)(4 * v77);
          *(_DWORD *)(4 * v77) = -1;
          v74 = 4 * v77 + 4;
          v83 = v67 - v75;
          if (v67 == v75)
            goto LABEL_75;
        }
        v84 = v83 - 4;
        if (v84 >= 0x2C)
        {
          if ((unint64_t)(v67 - v81 - v76) >= 0x20)
          {
            v86 = (v84 >> 2) + 1;
            v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
            v85 = &v67[-v87];
            v82 = (_DWORD *)((char *)v82 - v87);
            v88 = &v81[4 * v77 - 16];
            v89 = v67 - 16;
            v90 = v86 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v91 = *(_OWORD *)v89;
              *(v88 - 1) = *((_OWORD *)v89 - 1);
              *v88 = v91;
              v88 -= 2;
              v89 -= 32;
              v90 -= 8;
            }
            while (v90);
            if (v86 == (v86 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_75:
              *v65 = v82;
              v65[1] = v74;
              v65[2] = &v81[4 * v80];
              if (v75)
                operator delete(v75);
              goto LABEL_77;
            }
          }
          else
          {
            v85 = v67;
          }
        }
        else
        {
          v85 = v67;
        }
        do
        {
          v92 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *--v82 = v92;
        }
        while (v85 != v75);
        goto LABEL_75;
      }
LABEL_78:
      v60 = (_QWORD *)a3;
      v94 = *(_QWORD *)(a3 + 112);
      v93 = v235[15];
      v248 = 0;
      v249 = 0;
      v247 = 0;
      v214 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v94) >> 2);
      if (v93 == v94)
      {
        v97 = 0;
      }
      else
      {
        if (v93 - v94 < 0)
          sub_2233DCD38();
        v95 = (v214 - 1) >> 6;
        v96 = operator new(8 * (v95 + 1));
        v97 = v96;
        v248 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v94) >> 2);
        v249 = v95 + 1;
        v247 = v96;
        if (v214 >= 0x41)
          v98 = (v214 - 1) >> 6;
        else
          v98 = 0;
        v96[v98] = 0;
        if (v214 >= 0x40)
          bzero(v96, 8 * (v214 >> 6));
        v60 = v235;
        if ((v214 & 0x3F) != 0)
          v97[v214 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v214 & 0x3F));
      }
      v99 = (char *)operator new(0x50uLL);
      v244 = v99;
      v245 = v99;
      v246 = v99 + 80;
      v241 = 0;
      v242 = 0;
      v243 = 0;
      if (v93 == v94)
        goto LABEL_220;
      __p = 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v94) >> 2);
      do
      {
        if (((1 << v107) & v97[v107 >> 6]) == 0 && *(_BYTE *)(*v216 + v107))
        {
          *(_QWORD *)((char *)v97 + (((unint64_t)v107 >> 3) & 0x1FFFFFF8)) |= 1 << v107;
          v245 = v99;
          v215 = v107;
          if (v106 >= v243)
          {
            v111 = (v243 - v106) >> 1;
            if (v111 <= 1)
              v111 = 1;
            if ((unint64_t)(v243 - v106) >= 0x7FFFFFFFFFFFFFFCLL)
              v112 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v112 = v111;
            if (v112 >> 62)
              sub_223174E94();
            v103 = (char *)operator new(4 * v112);
            *(_DWORD *)v103 = v215;
            v109 = v103 + 4;
            v241 = v103;
            v242 = v103 + 4;
            v243 = &v103[4 * v112];
            if (!v106)
            {
              v110 = v99;
              v104 = v103;
              __p = v103;
LABEL_117:
              v218 = 0;
              v113 = 0.0;
              v221 = v246;
              v125 = v103;
              v126 = v104;
              v103 = v109;
              while (2)
              {
                v128 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                v127 = v128;
                v242 = v103;
                if (v110 < v221)
                {
                  *(_DWORD *)v110 = v127;
                  v129 = v110 + 4;
                  goto LABEL_137;
                }
                v230 = v125;
                v233 = v126;
                v130 = v244;
                v131 = (char *)(v110 - v244);
                v132 = (v110 - v244) >> 2;
                v133 = v132 + 1;
                if ((unint64_t)(v132 + 1) >> 62)
                  sub_22316E078();
                v134 = v110;
                if ((v221 - v244) >> 1 > v133)
                  v133 = (v221 - v244) >> 1;
                if ((unint64_t)(v221 - v244) >= 0x7FFFFFFFFFFFFFFCLL)
                  v135 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v135 = v133;
                if (v135)
                {
                  if (v135 >> 62)
                    sub_223174E94();
                  v136 = v103;
                  v137 = (char *)operator new(4 * v135);
                  v103 = v136;
                  v99 = &v137[4 * v132];
                  *(_DWORD *)v99 = v127;
                  v138 = (uint64_t)(v99 + 4);
                  v139 = v134 - v130;
                  if (v134 != v130)
                  {
LABEL_131:
                    v140 = v139 - 4;
                    if (v140 < 0xBC
                      || (v198 = (v134 - 4 - v130) & 0xFFFFFFFFFFFFFFFCLL,
                          &v131[(_QWORD)v137 - 4 - v198] > &v131[(_QWORD)v137 - 4])
                      || &v134[-v198 - 4] > v134 - 4
                      || (unint64_t)(v134 - v137 - (_QWORD)v131) < 0x20)
                    {
                      v141 = v134;
                      v60 = v235;
                    }
                    else
                    {
                      v199 = (v140 >> 2) + 1;
                      v200 = 4 * (v199 & 0x7FFFFFFFFFFFFFF8);
                      v141 = &v134[-v200];
                      v99 -= v200;
                      v201 = (float32x4_t *)&v137[4 * v132 - 16];
                      v202 = (float32x4_t *)(v134 - 16);
                      v203 = v199 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v101 = v202[-1];
                        v100 = *v202;
                        v201[-1] = v101;
                        *v201 = v100;
                        v201 -= 2;
                        v202 -= 2;
                        v203 -= 8;
                      }
                      while (v203);
                      v60 = v235;
                      if (v199 == (v199 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_134:
                        v244 = v99;
                        v221 = &v137[4 * v135];
                        v246 = v221;
                        if (v130)
                          goto LABEL_135;
                        goto LABEL_136;
                      }
                    }
                    do
                    {
                      v142 = *((_DWORD *)v141 - 1);
                      v141 -= 4;
                      *((_DWORD *)v99 - 1) = v142;
                      v99 -= 4;
                    }
                    while (v141 != v130);
                    goto LABEL_134;
                  }
                }
                else
                {
                  v137 = 0;
                  v99 = (char *)(4 * v132);
                  *(_DWORD *)(4 * v132) = v127;
                  v138 = 4 * v132 + 4;
                  v139 = v134 - v130;
                  if (v134 != v130)
                    goto LABEL_131;
                }
                v60 = v235;
                v244 = v99;
                v221 = &v137[4 * v135];
                v246 = v221;
                if (v130)
                {
LABEL_135:
                  v143 = v103;
                  operator delete(v130);
                  v103 = v143;
                }
LABEL_136:
                v129 = (char *)v138;
                v125 = v230;
                v126 = v233;
LABEL_137:
                v245 = v129;
                v144 = v60[14] + 12 * v127;
                v145 = *(unsigned int *)v144;
                v220 = v129;
                if (v218 & 1 | (v113 >= a6))
                {
                  LODWORD(v146) = *(_DWORD *)(v144 + 4);
                  LODWORD(v144) = *(_DWORD *)(v144 + 8);
                  goto LABEL_154;
                }
                v147 = *v219;
                v146 = *(unsigned int *)(v144 + 4);
                v148 = v146 >> 6;
                v149 = *(_QWORD *)(*v219 + ((v145 >> 3) & 0x1FFFFFF8)) & (1 << v145);
                if (v149)
                {
                  v150 = *(_QWORD *)(v147 + 8 * v148);
                  v151 = (v150 & (1 << v146)) != 0;
                  v144 = *(unsigned int *)(v144 + 8);
                  v152 = v144 >> 6;
                  if ((v150 & (1 << v146)) != 0)
                    goto LABEL_141;
LABEL_146:
                  v154 = 0;
                  v153 = *(_QWORD *)(v147 + 8 * v152) & (1 << v144);
                }
                else
                {
                  v151 = 0;
                  v144 = *(unsigned int *)(v144 + 8);
                  v152 = v144 >> 6;
                  if ((*(_QWORD *)(v147 + 8 * v148) & (1 << v146)) == 0)
                    goto LABEL_146;
LABEL_141:
                  v153 = *(_QWORD *)(v147 + 8 * v152) & (1 << v144);
                  v154 = v153 != 0;
                }
                if (v149)
                  v155 = v153 == 0;
                else
                  v155 = 1;
                v156 = !v155 || v154;
                v218 = v156 | v151;
                v157 = *v60 + 12 * v145;
                v158 = *v60 + 12 * v146;
                v100.i64[0] = *(_QWORD *)v158;
                v100.i32[2] = *(_DWORD *)(v158 + 8);
                v159 = *v60 + 12 * v144;
                v101.i64[0] = *(_QWORD *)v157;
                v101.i32[2] = *(_DWORD *)(v157 + 8);
                v160 = (int8x16_t)vsubq_f32(v100, v101);
                v102.i64[0] = *(_QWORD *)v159;
                v102.i32[2] = *(_DWORD *)(v159 + 8);
                v161 = (int8x16_t)vsubq_f32((float32x4_t)v102, v101);
                v162 = (float32x4_t)vextq_s8(vextq_s8(v160, v160, 0xCuLL), v160, 8uLL);
                v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v160, (int32x4_t)v160), v160, 0xCuLL);
                v102 = (int8x16_t)vmlsq_f32(vmulq_f32(v162, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161), v161, 0xCuLL)), v100, (float32x4_t)vextq_s8(vextq_s8(v161, v161, 0xCuLL), v161, 8uLL));
                v101 = (float32x4_t)vextq_s8(v102, v102, 8uLL);
                v113 = v113
                     + (float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1), *(float32x2_t *)v102.i8, 1), *(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0])* 0.5);
LABEL_154:
                v163 = (unsigned int **)(*(_QWORD *)a1 + 24 * v145);
                v164 = (unsigned int **)(*(_QWORD *)a1 + 24 * v146);
                v165 = (unsigned int **)(*(_QWORD *)a1 + 24 * v144);
                v166 = **v163;
                v167 = **v164;
                v168 = **v165;
                if (v168 >= v167)
                  v169 = **v164;
                else
                  v169 = **v165;
                if (v169 >= v166)
                  v170 = **v163;
                else
                  v170 = v169;
                if (v170 == -1)
                {
LABEL_119:
                  v126 = v125;
                  v104 = v103;
                  v105 = v103;
                  v60 = v235;
                  v110 = v220;
                  if (v125 == v103)
                    goto LABEL_106;
                  continue;
                }
                break;
              }
              v217 = v99;
              v171 = 0;
              v172 = 0;
              v173 = 0;
              v224 = *(_QWORD *)a1 + 24 * v146;
              v225 = *(_QWORD *)a1 + 24 * v145;
              v223 = *(_QWORD *)a1 + 24 * v144;
              while (2)
              {
                v174 = v167 == v170;
                if (v168 == v170)
                  ++v174;
                if (v166 <= v169)
                  ++v174;
                if (v174 < 2 || (v175 = (unint64_t)v170 >> 6, v176 = v97[v175], (v176 & (1 << v170)) != 0))
                {
                  if (v166 > v169)
                    goto LABEL_176;
LABEL_197:
                  v166 = (*v163)[++v173];
                  if (v167 == v170)
                  {
LABEL_198:
                    v167 = (*v164)[++v172];
                    if (v168 == v170)
                      goto LABEL_199;
                    goto LABEL_162;
                  }
LABEL_177:
                  if (v168 == v170)
LABEL_199:
                    v168 = (*v165)[++v171];
LABEL_162:
                  if (v168 >= v167)
                    v169 = v167;
                  else
                    v169 = v168;
                  if (v169 >= v166)
                    v170 = v166;
                  else
                    v170 = v169;
                  if (v170 == -1)
                  {
                    __p = v241;
                    v125 = v241;
                    v99 = v217;
                    goto LABEL_119;
                  }
                  continue;
                }
                break;
              }
              v97[v175] = v176 | (1 << v170);
              if (v103 < v243)
              {
                *(_DWORD *)v103 = v170;
                v103 += 4;
                v242 = v103;
                if (v166 <= v169)
                  goto LABEL_197;
LABEL_176:
                if (v167 == v170)
                  goto LABEL_198;
                goto LABEL_177;
              }
              v231 = v97;
              v177 = (char *)(v103 - v126);
              v178 = (v103 - v126) >> 2;
              v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62)
                sub_22316E078();
              v234 = v126;
              v180 = v243 - v126;
              if ((v243 - v126) >> 1 > v179)
                v179 = v180 >> 1;
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
                v181 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v181 = v179;
              v226 = v172;
              __pa = v171;
              if (v181)
              {
                if (v181 >> 62)
                  sub_223174E94();
                v182 = v103;
                v183 = v181;
                v184 = operator new(4 * v181);
                v103 = v182;
                v181 = v183;
                v185 = (unsigned int *)&v184[4 * v178];
                *v185 = v170;
                v186 = (uint64_t)(v185 + 1);
                v187 = (char *)(v103 - v234);
                if (v103 != v234)
                {
LABEL_191:
                  v188 = (unint64_t)(v187 - 4);
                  if (v188 < 0xBC
                    || (v192 = (v103 - 4 - v234) & 0xFFFFFFFFFFFFFFFCLL,
                        &v177[(_QWORD)v184 - 4 - v192] > &v177[(_QWORD)v184 - 4])
                    || &v103[-v192 - 4] > v103 - 4
                    || (unint64_t)(v103 - v184 - (_QWORD)v177) < 0x20)
                  {
                    v189 = v103;
                    v97 = v231;
                    v190 = v234;
                  }
                  else
                  {
                    v193 = (v188 >> 2) + 1;
                    v194 = 4 * (v193 & 0x7FFFFFFFFFFFFFF8);
                    v189 = &v103[-v194];
                    v185 = (unsigned int *)((char *)v185 - v194);
                    v195 = (float32x4_t *)&v184[4 * v178 - 16];
                    v196 = (float32x4_t *)(v103 - 16);
                    v197 = v193 & 0x7FFFFFFFFFFFFFF8;
                    v190 = v234;
                    do
                    {
                      v101 = v196[-1];
                      v100 = *v196;
                      v195[-1] = v101;
                      *v195 = v100;
                      v195 -= 2;
                      v196 -= 2;
                      v197 -= 8;
                    }
                    while (v197);
                    v97 = v231;
                    if (v193 == (v193 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_194:
                      v241 = (char *)v185;
                      v242 = (_DWORD *)v186;
                      v243 = &v184[4 * v181];
                      if (v190)
                        goto LABEL_195;
                      goto LABEL_196;
                    }
                  }
                  do
                  {
                    v191 = *((_DWORD *)v189 - 1);
                    v189 -= 4;
                    *--v185 = v191;
                  }
                  while (v189 != v190);
                  goto LABEL_194;
                }
              }
              else
              {
                v184 = 0;
                v185 = (unsigned int *)(4 * v178);
                *(_DWORD *)(4 * v178) = v170;
                v186 = 4 * v178 + 4;
                v187 = (char *)(v103 - v126);
                if (v103 != v126)
                  goto LABEL_191;
              }
              v97 = v231;
              v190 = v234;
              v241 = (char *)v185;
              v242 = (_DWORD *)v186;
              v243 = &v184[4 * v181];
              if (v234)
LABEL_195:
                operator delete(v190);
LABEL_196:
              v126 = (char *)v185;
              v164 = (unsigned int **)v224;
              v163 = (unsigned int **)v225;
              v165 = (unsigned int **)v223;
              v172 = v226;
              v171 = __pa;
              v242 = (_DWORD *)v186;
              v103 = (char *)v186;
              if (v166 <= v169)
                goto LABEL_197;
              goto LABEL_176;
            }
            operator delete(v106);
            v105 = v241;
            v103 = v241;
            v104 = v241;
            __p = v241;
            v242 = v109;
            if (v241 != v109)
            {
LABEL_96:
              v110 = v245;
              goto LABEL_117;
            }
          }
          else
          {
            *(_DWORD *)v106 = v107;
            v109 = v106 + 4;
            v242 = v106 + 4;
            if (v105 != v106 + 4)
              goto LABEL_96;
          }
          v218 = 0;
          v113 = 0.0;
LABEL_106:
          if (v113 >= a6)
          {
            v106 = v105;
            v108 = v214;
            v107 = v215;
          }
          else
          {
            v108 = v214;
            v107 = v215;
            if ((v218 & 1) == 0)
            {
              v99 = v244;
              v114 = v245;
              if (v244 != v245)
              {
                v115 = *v216;
                v116 = v245 - v244 - 4;
                v117 = v244;
                if (v116 < 4)
                  goto LABEL_249;
                v118 = 0;
                v119 = (v116 >> 2) + 1;
                v120 = v119 & 0x7FFFFFFFFFFFFFFELL;
                v117 = &v244[4 * (v119 & 0x7FFFFFFFFFFFFFFELL)];
                do
                {
                  v121 = &v99[4 * v118];
                  v123 = *(unsigned int *)v121;
                  v122 = *((unsigned int *)v121 + 1);
                  *(_BYTE *)(v115 + v123) = 0;
                  *(_BYTE *)(v115 + v122) = 0;
                  v118 += 2;
                }
                while (v120 != v118);
                if (v119 != v120)
                {
LABEL_249:
                  do
                  {
                    v124 = *(_DWORD *)v117;
                    v117 += 4;
                    *(_BYTE *)(v115 + v124) = 0;
                  }
                  while (v117 != v114);
                }
              }
            }
            v106 = v105;
          }
        }
        ++v107;
      }
      while (v107 != v108);
      if (__p)
      {
        v242 = __p;
        operator delete(__p);
      }
      v99 = v244;
      if (v244)
LABEL_220:
        operator delete(v99);
      if (v97)
        operator delete(v97);
    }
  }
  sub_223CE36F4(v216, (uint64_t)v60);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v205 = *(_QWORD *)(a1 + 24);
  v204 = *(_QWORD *)(a1 + 32);
  if (v204 != v205)
  {
    v206 = *(_QWORD *)(a1 + 32);
    do
    {
      v208 = *(void **)(v206 - 24);
      v206 -= 24;
      v207 = v208;
      if (v208)
      {
        *(_QWORD *)(v204 - 16) = v207;
        operator delete(v207);
      }
      v204 = v206;
    }
    while (v206 != v205);
  }
  *(_QWORD *)(a1 + 32) = v205;
  v210 = *(_QWORD *)a1;
  v209 = *(_QWORD *)(a1 + 8);
  if (v209 != *(_QWORD *)a1)
  {
    v211 = *(_QWORD *)(a1 + 8);
    do
    {
      v213 = *(void **)(v211 - 24);
      v211 -= 24;
      v212 = v213;
      if (v213)
      {
        *(_QWORD *)(v209 - 16) = v212;
        operator delete(v212);
      }
      v209 = v211;
    }
    while (v211 != v210);
  }
  *(_QWORD *)(a1 + 8) = v210;
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
  if (v239)
    operator delete(v239);
}

void sub_223CE1E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  void *v36;
  void *v37;

  if (v34)
  {
    operator delete(v34);
    v36 = __p;
    if (!__p)
    {
LABEL_3:
      v37 = a30;
      if (!a30)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v36 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v36);
  v37 = a30;
  if (!a30)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v37);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223CE1F0C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      sub_2233DCD38();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void sub_223CE2014(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t i;
  void *v12;
  char *v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _DWORD *v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  _QWORD *v92;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v4 <= v6)
  {
    if (v4 >= v6)
    {
      v7 = a2[1];
    }
    else
    {
      v7 = *a2 + 8 * ((uint64_t)(a1[1] - *a1) >> 2);
      if (v5 != v7)
      {
        v8 = a2[1];
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v5 - 16) = v9;
            operator delete(v9);
          }
          v5 = v8;
        }
        while (v8 != v7);
      }
      v2[1] = v7;
    }
  }
  else
  {
    sub_2232C7FD8((uint64_t)a2, v4 - v6);
    v7 = v2[1];
  }
  for (i = *v2; i != v7; i += 24)
  {
    v12 = *(void **)i;
    *(_QWORD *)(i + 8) = *(_QWORD *)i;
    if (*(_QWORD *)(i + 16) - (_QWORD)v12 <= 0x1FuLL)
    {
      v13 = (char *)operator new(0x20uLL);
      *(_QWORD *)i = v13;
      *(_QWORD *)(i + 8) = v13;
      *(_QWORD *)(i + 16) = v13 + 32;
      if (v12)
        operator delete(v12);
    }
  }
  v14 = (unsigned int *)a1[14];
  v91 = (unsigned int *)a1[15];
  if (v14 != v91)
  {
    v15 = 0;
    v92 = v2;
    while (1)
    {
      v17 = *v2 + 24 * *v14;
      v19 = (uint64_t *)(v17 + 8);
      v18 = *(char **)(v17 + 8);
      v20 = *(_QWORD *)(v17 + 16);
      if ((unint64_t)v18 < v20)
      {
        *(_DWORD *)v18 = v15;
        v21 = (uint64_t)(v18 + 4);
        goto LABEL_42;
      }
      v22 = *(char **)v17;
      v23 = (uint64_t)&v18[-*(_QWORD *)v17];
      v24 = v23 >> 2;
      v25 = (v23 >> 2) + 1;
      if (v25 >> 62)
        goto LABEL_87;
      v26 = v20 - (_QWORD)v22;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      v88 = v25;
      if (v25)
      {
        if (v25 >> 62)
          goto LABEL_88;
        v27 = operator new(4 * v25);
        v28 = &v27[4 * v24];
        *v28 = v15;
        v21 = (uint64_t)(v28 + 1);
        v29 = v18 - v22;
        if (v18 == v22)
        {
LABEL_34:
          v2 = v92;
          goto LABEL_40;
        }
      }
      else
      {
        v27 = 0;
        v28 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v15;
        v21 = 4 * v24 + 4;
        v29 = v18 - v22;
        if (v18 == v22)
          goto LABEL_34;
      }
      v30 = v29 - 4;
      if (v30 < 0x2C)
        break;
      v31 = v18 - v27 - v23;
      v2 = v92;
      if (v31 < 0x20)
        goto LABEL_39;
      v32 = (v30 >> 2) + 1;
      v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
      v34 = &v18[-v33];
      v28 = (_DWORD *)((char *)v28 - v33);
      v35 = &v27[4 * v24 - 16];
      v36 = v18 - 16;
      v37 = v32 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 8;
      }
      while (v37);
      v18 = v34;
      if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_39;
LABEL_40:
      *(_QWORD *)v17 = v28;
      *v19 = v21;
      *(_QWORD *)(v17 + 16) = &v27[4 * v88];
      if (v22)
        operator delete(v22);
LABEL_42:
      *v19 = v21;
      v40 = *v2 + 24 * v14[1];
      v42 = (uint64_t *)(v40 + 8);
      v41 = *(char **)(v40 + 8);
      v43 = *(_QWORD *)(v40 + 16);
      if ((unint64_t)v41 < v43)
      {
        *(_DWORD *)v41 = v15;
        v44 = (uint64_t)(v41 + 4);
        goto LABEL_63;
      }
      v45 = *(char **)v40;
      v46 = (uint64_t)&v41[-*(_QWORD *)v40];
      v47 = v46 >> 2;
      v48 = (v46 >> 2) + 1;
      if (v48 >> 62)
        goto LABEL_87;
      v49 = v43 - (_QWORD)v45;
      if (v49 >> 1 > v48)
        v48 = v49 >> 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      v89 = v48;
      if (v48)
      {
        if (v48 >> 62)
          goto LABEL_88;
        v50 = operator new(4 * v48);
        v51 = &v50[4 * v47];
        *v51 = v15;
        v44 = (uint64_t)(v51 + 1);
        v52 = v41 - v45;
        if (v41 == v45)
        {
LABEL_55:
          v2 = v92;
          v54 = v89;
          goto LABEL_61;
        }
      }
      else
      {
        v50 = 0;
        v51 = (_DWORD *)(4 * v47);
        *(_DWORD *)(4 * v47) = v15;
        v44 = 4 * v47 + 4;
        v52 = v41 - v45;
        if (v41 == v45)
          goto LABEL_55;
      }
      v53 = v52 - 4;
      v54 = v89;
      if (v53 < 0x2C)
      {
        v2 = v92;
        do
        {
LABEL_60:
          v63 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *--v51 = v63;
        }
        while (v41 != v45);
        goto LABEL_61;
      }
      v55 = v41 - &v50[v46];
      v2 = v92;
      if (v55 < 0x20)
        goto LABEL_60;
      v56 = (v53 >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v58 = &v41[-v57];
      v51 = (_DWORD *)((char *)v51 - v57);
      v59 = &v50[4 * v47 - 16];
      v60 = v41 - 16;
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 32;
        v61 -= 8;
      }
      while (v61);
      v41 = v58;
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_60;
LABEL_61:
      *(_QWORD *)v40 = v51;
      *v42 = v44;
      *(_QWORD *)(v40 + 16) = &v50[4 * v54];
      if (v45)
        operator delete(v45);
LABEL_63:
      *v42 = v44;
      v64 = *v2 + 24 * v14[2];
      v66 = (uint64_t *)(v64 + 8);
      v65 = *(char **)(v64 + 8);
      v67 = *(_QWORD *)(v64 + 16);
      if ((unint64_t)v65 >= v67)
      {
        v68 = *(char **)v64;
        v69 = (uint64_t)&v65[-*(_QWORD *)v64];
        v70 = v69 >> 2;
        v71 = (v69 >> 2) + 1;
        if (v71 >> 62)
LABEL_87:
          sub_22316E078();
        v72 = v67 - (_QWORD)v68;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v71 = 0x3FFFFFFFFFFFFFFFLL;
        v90 = v71;
        if (v71)
        {
          if (v71 >> 62)
LABEL_88:
            sub_223174E94();
          v73 = operator new(4 * v71);
          v74 = &v73[4 * v70];
          *v74 = v15;
          v16 = (uint64_t)(v74 + 1);
          v75 = v65 - v68;
          if (v65 != v68)
          {
LABEL_72:
            v76 = v75 - 4;
            if (v76 < 0x2C)
            {
              v2 = v92;
              goto LABEL_80;
            }
            v77 = v65 - &v73[v69];
            v2 = v92;
            if (v77 < 0x20)
              goto LABEL_91;
            v78 = (v76 >> 2) + 1;
            v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
            v80 = &v65[-v79];
            v74 = (_DWORD *)((char *)v74 - v79);
            v81 = &v73[4 * v70 - 16];
            v82 = v65 - 16;
            v83 = v78 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              *v81 = v84;
              v81 -= 2;
              v82 -= 32;
              v83 -= 8;
            }
            while (v83);
            v65 = v80;
            if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_91:
              do
              {
LABEL_80:
                v85 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *--v74 = v85;
              }
              while (v65 != v68);
            }
LABEL_81:
            *(_QWORD *)v64 = v74;
            *v66 = v16;
            *(_QWORD *)(v64 + 16) = &v73[4 * v90];
            if (v68)
              operator delete(v68);
            goto LABEL_20;
          }
        }
        else
        {
          v73 = 0;
          v74 = (_DWORD *)(4 * v70);
          *(_DWORD *)(4 * v70) = v15;
          v16 = 4 * v70 + 4;
          v75 = v65 - v68;
          if (v65 != v68)
            goto LABEL_72;
        }
        v2 = v92;
        goto LABEL_81;
      }
      *(_DWORD *)v65 = v15;
      v16 = (uint64_t)(v65 + 4);
LABEL_20:
      *v66 = v16;
      v14 += 3;
      ++v15;
      if (v14 == v91)
        goto LABEL_84;
    }
    v2 = v92;
    do
    {
LABEL_39:
      v39 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--v28 = v39;
    }
    while (v18 != v22);
    goto LABEL_40;
  }
LABEL_84:
  v86 = *v2;
  v87 = v2[1];
  if (*v2 != v87)
  {
    do
    {
      v86 += 24;
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    }
    while (v86 != v87);
  }
}

void sub_223CE25B8(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, unsigned __int8 a5)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  char *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  int *v80;
  int v81;
  int v82;
  _DWORD *v83;
  int v84;
  int v85;
  _DWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int v93;
  unsigned int *v95;
  char *__p;
  char *v97;
  char *v98;

  v7 = a3;
  v8 = a1[1] - *a1;
  a3[1] = *a3;
  v9 = (v8 >> 2);
  if ((v8 >> 2))
    sub_223CE87EC((uint64_t)a3, (v8 >> 2));
  v88 = a5;
  if (a5)
    sub_223A6BE84(a4, v9, 0);
  __p = 0;
  v98 = 0;
  v91 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  if ((_DWORD)v91)
  {
    v10 = 0;
    v11 = 0;
    v89 = v7;
    v90 = (_QWORD *)a4;
    while (1)
    {
      v12 = __p;
      v97 = __p;
      v13 = *a2;
      v14 = *(_QWORD *)(*a2 + 24 * v10 + 8) - *(_QWORD *)(*a2 + 24 * v10);
      v15 = v14 >> 1;
      v93 = v11;
      if (v14 >> 1 > (unint64_t)((v98 - __p) >> 2))
      {
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFFLL)
          sub_22316E078();
        __p = (char *)operator new(2 * v14);
        v97 = __p;
        v98 = &__p[4 * v15];
        if (v12)
        {
          operator delete(v12);
          v13 = *a2;
        }
      }
      v16 = (unsigned int **)(v13 + 24 * v10);
      v18 = *v16;
      v17 = v16[1];
      v95 = v17;
      while (v18 != v17)
      {
        v20 = (unsigned int *)(*a1 + 12 * *v18);
        v21 = *v20;
        if (v10 >= v21)
          goto LABEL_40;
        v22 = v97;
        if (v97 >= v98)
        {
          v24 = __p;
          v25 = (v97 - __p) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            goto LABEL_105;
          v27 = v98 - __p;
          if ((v98 - __p) >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 62)
              goto LABEL_106;
            v29 = operator new(4 * v28);
            v30 = &v29[4 * v25];
            *(_DWORD *)v30 = v21;
            v23 = (uint64_t)(v30 + 4);
            v31 = v97 - __p;
            if (v97 == __p)
              goto LABEL_37;
LABEL_31:
            v32 = v31 - 4;
            if (v32 < 0x2C)
              goto LABEL_110;
            if ((unint64_t)(__p - v29) < 0x20)
              goto LABEL_110;
            v33 = (v32 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v35 = &v97[-v34];
            v30 -= v34;
            v36 = &v29[4 * v25 - 16];
            v37 = v97 - 16;
            v38 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 32;
              v38 -= 8;
            }
            while (v38);
            v22 = v35;
            if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_110:
              do
              {
                v40 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v30 - 1) = v40;
                v30 -= 4;
              }
              while (v22 != __p);
            }
          }
          else
          {
            v29 = 0;
            v30 = (char *)(4 * v25);
            *(_DWORD *)(4 * v25) = v21;
            v23 = 4 * v25 + 4;
            v31 = v97 - __p;
            if (v97 != __p)
              goto LABEL_31;
          }
LABEL_37:
          __p = v30;
          v98 = &v29[4 * v28];
          if (v24)
            operator delete(v24);
          goto LABEL_39;
        }
        *(_DWORD *)v97 = v21;
        v23 = (uint64_t)(v97 + 4);
LABEL_39:
        v97 = (char *)v23;
LABEL_40:
        v41 = v20[1];
        if (v10 >= v41)
          goto LABEL_63;
        v42 = v97;
        if (v97 >= v98)
        {
          v44 = __p;
          v45 = (v97 - __p) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            goto LABEL_105;
          v47 = v98 - __p;
          if ((v98 - __p) >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 62)
              goto LABEL_106;
            v49 = operator new(4 * v48);
            v50 = &v49[4 * v45];
            *(_DWORD *)v50 = v41;
            v43 = (uint64_t)(v50 + 4);
            v51 = v97 - __p;
            if (v97 == __p)
              goto LABEL_60;
LABEL_54:
            v52 = v51 - 4;
            if (v52 < 0x2C)
              goto LABEL_111;
            if ((unint64_t)(__p - v49) < 0x20)
              goto LABEL_111;
            v53 = (v52 >> 2) + 1;
            v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            v55 = &v97[-v54];
            v50 -= v54;
            v56 = &v49[4 * v45 - 16];
            v57 = v97 - 16;
            v58 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 8;
            }
            while (v58);
            v42 = v55;
            if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_111:
              do
              {
                v60 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v60;
                v50 -= 4;
              }
              while (v42 != __p);
            }
          }
          else
          {
            v49 = 0;
            v50 = (char *)(4 * v45);
            *(_DWORD *)(4 * v45) = v41;
            v43 = 4 * v45 + 4;
            v51 = v97 - __p;
            if (v97 != __p)
              goto LABEL_54;
          }
LABEL_60:
          __p = v50;
          v98 = &v49[4 * v48];
          if (v44)
            operator delete(v44);
          goto LABEL_62;
        }
        *(_DWORD *)v97 = v41;
        v43 = (uint64_t)(v97 + 4);
LABEL_62:
        v97 = (char *)v43;
LABEL_63:
        v61 = v20[2];
        if (v10 < v61)
        {
          v62 = v97;
          if (v97 >= v98)
          {
            v63 = __p;
            v64 = (v97 - __p) >> 2;
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62)
LABEL_105:
              sub_22316E078();
            v66 = v98 - __p;
            if ((v98 - __p) >> 1 > v65)
              v65 = v66 >> 1;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
              v67 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              if (v67 >> 62)
LABEL_106:
                sub_223174E94();
              v68 = operator new(4 * v67);
              v69 = &v68[4 * v64];
              *(_DWORD *)v69 = v61;
              v19 = (uint64_t)(v69 + 4);
              v70 = v97 - __p;
              if (v97 == __p)
              {
LABEL_82:
                __p = v69;
                v98 = &v68[4 * v67];
                if (v63)
                  operator delete(v63);
                goto LABEL_14;
              }
            }
            else
            {
              v68 = 0;
              v69 = (char *)(4 * v64);
              *(_DWORD *)(4 * v64) = v61;
              v19 = 4 * v64 + 4;
              v70 = v97 - __p;
              if (v97 == __p)
                goto LABEL_82;
            }
            v71 = v70 - 4;
            if (v71 < 0x2C)
              goto LABEL_112;
            if ((unint64_t)(__p - v68) < 0x20)
              goto LABEL_112;
            v72 = (v71 >> 2) + 1;
            v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
            v74 = &v97[-v73];
            v69 -= v73;
            v75 = &v68[4 * v64 - 16];
            v76 = v97 - 16;
            v77 = v72 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              *v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            v62 = v74;
            if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_112:
              do
              {
                v79 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v69 - 1) = v79;
                v69 -= 4;
              }
              while (v62 != __p);
            }
            goto LABEL_82;
          }
          *(_DWORD *)v97 = v61;
          v19 = (uint64_t)(v97 + 4);
LABEL_14:
          v97 = (char *)v19;
        }
        ++v18;
        v17 = v95;
      }
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v7 = v89;
      a4 = (uint64_t)v90;
      v11 = v93;
      v80 = (int *)__p;
      if (__p != v97)
      {
        if (v88)
        {
          v81 = -1;
          do
          {
            while (1)
            {
              v82 = *v80;
              if (*v80 != v81)
                break;
              *(_QWORD *)(*v90 + (((unint64_t)(v11 - 1) >> 3) & 0x1FFFFFF8)) &= ~(1 << (v11 - 1));
              if (++v80 == (int *)v97)
                goto LABEL_7;
            }
            *(_QWORD *)(*v90 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
            v83 = (_DWORD *)(*v89 + 8 * v11);
            *v83 = v10;
            v83[1] = v82;
            ++v11;
            v81 = v82;
            ++v80;
          }
          while (v80 != (int *)v97);
        }
        else
        {
          v84 = -1;
          do
          {
            v85 = *v80;
            if (*v80 != v84)
            {
              v86 = (_DWORD *)(*v89 + 8 * v11);
              *v86 = v10;
              v86[1] = v85;
              ++v11;
              v84 = v85;
            }
            ++v80;
          }
          while (v80 != (int *)v97);
        }
      }
LABEL_7:
      if (++v10 == v91)
        goto LABEL_96;
    }
  }
  v11 = 0;
LABEL_96:
  v87 = (uint64_t)(v7[1] - *v7) >> 3;
  if (v11 <= v87)
  {
    if (v11 < v87)
      v7[1] = *v7 + 8 * v11;
  }
  else
  {
    sub_223CE87EC((uint64_t)v7, v11 - v87);
  }
  if (v88)
    sub_223A6BE84(a4, v11, 0);
  if (__p)
    operator delete(__p);
}

void sub_223CE2C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CE2C6C(unsigned int **a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _DWORD *v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unsigned int *v74;

  v3 = a3;
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v8 = a3[1];
    do
    {
      v10 = *(void **)(v8 - 24);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *(_QWORD *)(v6 - 16) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
    v6 = *v3;
  }
  v3[1] = v7;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
  if (a2 <= v11)
  {
    if (a2 < v11)
    {
      v12 = v6 + 24 * a2;
      if (v7 != v12)
      {
        v13 = v7;
        do
        {
          v15 = *(void **)(v13 - 24);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *(_QWORD *)(v7 - 16) = v14;
            operator delete(v14);
          }
          v7 = v13;
        }
        while (v13 != v12);
      }
      v3[1] = v12;
    }
  }
  else
  {
    sub_2232C7FD8((uint64_t)v3, a2 - v11);
  }
  if (a2)
  {
    v16 = 0;
    v17 = 24 * a2;
    do
    {
      v18 = *v3;
      v19 = *v3 + v16;
      v20 = *(void **)v19;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)v19;
      if (*(_QWORD *)(v19 + 16) - (_QWORD)v20 <= 0x1FuLL)
      {
        v21 = (char *)operator new(0x20uLL);
        *(_QWORD *)(v18 + v16) = v21;
        *(_QWORD *)(v19 + 8) = v21;
        *(_QWORD *)(v19 + 16) = v21 + 32;
        if (v20)
          operator delete(v20);
      }
      v16 += 24;
    }
    while (v17 != v16);
  }
  v22 = *a1;
  v74 = a1[1];
  if (*a1 != v74)
  {
    v23 = 0;
    v73 = v3;
    while (1)
    {
      v24 = *v3 + 24 * *v22;
      v26 = (uint64_t *)(v24 + 8);
      v25 = *(char **)(v24 + 8);
      v27 = *(_QWORD *)(v24 + 16);
      if ((unint64_t)v25 >= v27)
        break;
      *(_DWORD *)v25 = v23;
      v28 = (uint64_t)(v25 + 4);
LABEL_46:
      *v26 = v28;
      v48 = *v3 + 24 * v22[1];
      v50 = (uint64_t *)(v48 + 8);
      v49 = *(char **)(v48 + 8);
      v51 = *(_QWORD *)(v48 + 16);
      if ((unint64_t)v49 < v51)
      {
        *(_DWORD *)v49 = v23;
        *v50 = (uint64_t)(v49 + 4);
        ++v23;
        v22 += 2;
        if (v22 == v74)
          return;
      }
      else
      {
        v52 = *(char **)v48;
        v53 = (uint64_t)&v49[-*(_QWORD *)v48];
        v54 = v53 >> 2;
        v55 = (v53 >> 2) + 1;
        if (v55 >> 62)
LABEL_68:
          sub_22316E078();
        v56 = v51 - (_QWORD)v52;
        if (v56 >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        v72 = v55;
        if (v55)
        {
          if (v55 >> 62)
LABEL_69:
            sub_223174E94();
          v57 = operator new(4 * v55);
          v58 = &v57[4 * v54];
          *v58 = v23;
          v59 = (uint64_t)(v58 + 1);
          v60 = v49 - v52;
          if (v49 == v52)
          {
LABEL_58:
            v3 = v73;
            goto LABEL_64;
          }
        }
        else
        {
          v57 = 0;
          v58 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v23;
          v59 = 4 * v54 + 4;
          v60 = v49 - v52;
          if (v49 == v52)
            goto LABEL_58;
        }
        v61 = v60 - 4;
        if (v61 < 0x2C)
        {
          v3 = v73;
          do
          {
LABEL_63:
            v70 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--v58 = v70;
          }
          while (v49 != v52);
          goto LABEL_64;
        }
        v62 = v49 - &v57[v53];
        v3 = v73;
        if (v62 < 0x20)
          goto LABEL_63;
        v63 = (v61 >> 2) + 1;
        v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
        v65 = &v49[-v64];
        v58 = (_DWORD *)((char *)v58 - v64);
        v66 = &v57[4 * v54 - 16];
        v67 = v49 - 16;
        v68 = v63 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v69 = *(_OWORD *)v67;
          *(v66 - 1) = *((_OWORD *)v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 32;
          v68 -= 8;
        }
        while (v68);
        v49 = v65;
        if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_63;
LABEL_64:
        *(_QWORD *)v48 = v58;
        *v50 = v59;
        *(_QWORD *)(v48 + 16) = &v57[4 * v72];
        if (v52)
          operator delete(v52);
        *v50 = v59;
        ++v23;
        v22 += 2;
        if (v22 == v74)
          return;
      }
    }
    v29 = *(char **)v24;
    v30 = (uint64_t)&v25[-*(_QWORD *)v24];
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      goto LABEL_68;
    v33 = v27 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    v71 = v32;
    if (v32)
    {
      if (v32 >> 62)
        goto LABEL_69;
      v34 = operator new(4 * v32);
      v35 = &v34[4 * v31];
      *v35 = v23;
      v28 = (uint64_t)(v35 + 1);
      v36 = v25 - v29;
      if (v25 != v29)
      {
LABEL_35:
        v37 = v36 - 4;
        v38 = v71;
        if (v37 >= 0x2C)
        {
          v39 = v25 - v34 - v30;
          v3 = v73;
          if (v39 >= 0x20)
          {
            v40 = (v37 >> 2) + 1;
            v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
            v42 = &v25[-v41];
            v35 = (_DWORD *)((char *)v35 - v41);
            v43 = &v34[4 * v31 - 16];
            v44 = v25 - 16;
            v45 = v40 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v46 = *(_OWORD *)v44;
              *(v43 - 1) = *((_OWORD *)v44 - 1);
              *v43 = v46;
              v43 -= 2;
              v44 -= 32;
              v45 -= 8;
            }
            while (v45);
            v25 = v42;
            if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_44:
              *(_QWORD *)v24 = v35;
              *v26 = v28;
              *(_QWORD *)(v24 + 16) = &v34[4 * v38];
              if (v29)
                operator delete(v29);
              goto LABEL_46;
            }
          }
        }
        else
        {
          v3 = v73;
        }
        do
        {
          v47 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--v35 = v47;
        }
        while (v25 != v29);
        goto LABEL_44;
      }
    }
    else
    {
      v34 = 0;
      v35 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = v23;
      v28 = 4 * v31 + 4;
      v36 = v25 - v29;
      if (v25 != v29)
        goto LABEL_35;
    }
    v38 = v71;
    v3 = v73;
    goto LABEL_44;
  }
}

void sub_223CE30D8(uint64_t a1, uint64_t a2, size_t *a3)
{
  unint64_t v6;
  unsigned int v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  _QWORD *v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2;
  v7 = 1024;
  do
  {
    v8 = v7;
    v7 *= 2;
  }
  while (v6 > v8);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_223CE89F8(a1, v8);
  v9 = (char *)*a3;
  a3[1] = *a3;
  v10 = *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112);
  if (!v10)
    return;
  v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[2] - (_QWORD)v9) >> 3);
  if (v12 >= v11)
  {
    v15 = 24 * ((8 * (v10 >> 2) - 24) / 0x18uLL) + 24;
    memset(v9, 255, v15);
    a3[1] = (size_t)&v9[v15];
    v16 = *(_QWORD *)(a2 + 112);
    v54 = *(_QWORD *)(a2 + 120);
    if (v16 == v54)
      return;
    goto LABEL_17;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v13 = 0x5555555555555556 * ((uint64_t)(a3[2] - (_QWORD)v9) >> 3);
  if (v13 <= v11)
    v13 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
  if (v12 >= 0x555555555555555)
    v14 = 0xAAAAAAAAAAAAAAALL;
  else
    v14 = v13;
  if (v14 > 0xAAAAAAAAAAAAAAALL)
    sub_223174E94();
  v15 = (size_t)operator new(24 * v14);
  memset((void *)v15, 255, 24 * ((24 * v11 - 24) / 0x18) + 24);
  *a3 = v15;
  a3[1] = v15 + 24 * ((24 * v11 - 24) / 0x18) + 24;
  a3[2] = v15 + 24 * v14;
  if (v9)
    operator delete(v9);
  v16 = *(_QWORD *)(a2 + 112);
  v54 = *(_QWORD *)(a2 + 120);
  if (v16 != v54)
  {
LABEL_17:
    v17 = 0;
    v18 = 0;
    v56 = a3;
    v57 = (_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 8);
    do
    {
      v20 = 0;
      v55 = *a3 + 24 * v18;
      v58 = v18;
      v59 = v55 + 12;
      do
      {
        while (1)
        {
          LODWORD(v22) = *(_DWORD *)(v16 + 4 * v20);
          v23 = v20 + 1;
          if (v20 == 2)
            v24 = 0;
          else
            v24 = v20 + 1;
          v25 = *(_DWORD *)(v16 + 4 * v24);
          if (v25 >= v22)
            v26 = v22;
          else
            v26 = v25;
          if (v22 <= v25)
            v22 = v25;
          else
            v22 = v22;
          if (!v19)
          {
            v30 = v26 | (v22 << 32);
            v31 = (19349669 * (_DWORD)v22) ^ (73856093 * v26);
            goto LABEL_85;
          }
          v27 = (19349669 * (_DWORD)v22) ^ (73856093 * v26);
          v28 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
          v28.i16[0] = vaddlv_u8(v28);
          if (v28.u32[0] > 1uLL)
          {
            v29 = (19349669 * (_DWORD)v22) ^ (73856093 * v26);
            if (v19 <= v27)
              v29 = v27 % v19;
          }
          else
          {
            v29 = ((_DWORD)v19 - 1) & v27;
          }
          v32 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v29);
          if (!v32)
            break;
          v33 = *v32;
          if (!v33)
            break;
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              v35 = v33[1];
              if (v35 == v27)
              {
                if (*((_DWORD *)v33 + 4) == (_DWORD)v26 && *((_DWORD *)v33 + 5) == (_DWORD)v22)
                  goto LABEL_19;
              }
              else if ((v35 & (v19 - 1)) != v29)
              {
                goto LABEL_46;
              }
              v33 = (uint64_t *)*v33;
              if (!v33)
                goto LABEL_46;
            }
          }
          while (1)
          {
            v36 = v33[1];
            if (v36 == v27)
              break;
            if (v36 >= v19)
              v36 %= v19;
            if (v36 != v29)
              goto LABEL_46;
LABEL_49:
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_46;
          }
          if (*((_DWORD *)v33 + 4) != (_DWORD)v26 || *((_DWORD *)v33 + 5) != (_DWORD)v22)
            goto LABEL_49;
LABEL_19:
          v21 = 4 * v20;
          *(_DWORD *)(v55 + v21) = *((_DWORD *)v33 + 6);
          *(_DWORD *)(v59 + v21) = *((_DWORD *)v33 + 7);
          *(_DWORD *)(*v56 + 24 * *((unsigned int *)v33 + 6) + 4 * *((unsigned int *)v33 + 8)) = v18;
          ++v20;
          if (v23 == 3)
            goto LABEL_108;
        }
LABEL_46:
        v31 = (19349669 * (_DWORD)v22) ^ (73856093 * v26);
        if (v28.u32[0] > 1uLL)
        {
          v15 = (19349669 * (_DWORD)v22) ^ (73856093 * v26);
          if (v19 <= v31)
            v15 = v31 % v19;
        }
        else
        {
          v15 = v31 & (v19 + 0xFFFFFFFF);
        }
        v38 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v15);
        v30 = v26 | (v22 << 32);
        if (v38)
        {
          v39 = *v38;
          if (v39)
          {
            if (v28.u32[0] < 2uLL)
            {
              while (1)
              {
                v42 = v39[1];
                if (v42 == v31)
                {
                  if (*((_DWORD *)v39 + 4) == (_DWORD)v26 && *((_DWORD *)v39 + 5) == (_DWORD)v22)
                    goto LABEL_84;
                }
                else if ((v42 & (v19 - 1)) != v15)
                {
                  goto LABEL_85;
                }
                v39 = (uint64_t *)*v39;
                if (!v39)
                  goto LABEL_85;
              }
            }
            do
            {
              v40 = v39[1];
              if (v40 == v31)
              {
                if (*((_DWORD *)v39 + 4) == (_DWORD)v26 && *((_DWORD *)v39 + 5) == (_DWORD)v22)
                {
LABEL_84:
                  v18 = v58;
                  goto LABEL_107;
                }
              }
              else
              {
                if (v40 >= v19)
                  v40 %= v19;
                if (v40 != v15)
                  break;
              }
              v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
        }
LABEL_85:
        v44 = operator new(0x28uLL);
        *v44 = 0;
        v44[1] = v31;
        v44[2] = v30;
        v18 = v58;
        *((_DWORD *)v44 + 6) = v58;
        *((_DWORD *)v44 + 7) = v17;
        *((_DWORD *)v44 + 8) = v20;
        v45 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v46 = *(float *)(a1 + 32);
        if (v19 && (float)(v46 * (float)v19) >= v45)
        {
          v31 = v15;
        }
        else
        {
          v47 = (v19 & (v19 - 1)) != 0;
          if (v19 < 3)
            v47 = 1;
          v48 = v47 | (2 * v19);
          v49 = vcvtps_u32_f32(v45 / v46);
          if (v48 <= v49)
            v50 = v49;
          else
            v50 = v48;
          sub_223CE89F8(a1, v50);
          v19 = *(_QWORD *)(a1 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v19 <= v31)
              v31 %= v19;
          }
          else
          {
            v31 = ((_DWORD)v19 - 1) & v31;
          }
        }
        v51 = *(_QWORD *)a1;
        v52 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
        if (v52)
        {
          *v44 = *v52;
LABEL_105:
          *v52 = v44;
          goto LABEL_106;
        }
        *v44 = *v57;
        *v57 = v44;
        *(_QWORD *)(v51 + 8 * v31) = v57;
        if (*v44)
        {
          v53 = *(_QWORD *)(*v44 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v53 >= v19)
              v53 %= v19;
          }
          else
          {
            v53 &= v19 - 1;
          }
          v52 = (_QWORD *)(*(_QWORD *)a1 + 8 * v53);
          goto LABEL_105;
        }
LABEL_106:
        ++*(_QWORD *)(a1 + 24);
LABEL_107:
        *(_DWORD *)(v59 + 4 * v20++) = v17++;
      }
      while (v23 != 3);
LABEL_108:
      v16 += 12;
      ++v18;
      a3 = v56;
    }
    while (v16 != v54);
  }
}

void sub_223CE367C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223CE3690(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_223CE36C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223CE36E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223CE36F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a2 + 80)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 308, (uint64_t)"mesh.normals.empty()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v4 = *(_QWORD *)(a2 + 240), v5 = *(_QWORD *)(a2 + 248), v4 != v5)&& (*(_DWORD *)(a2 + 272) != 2|| v5 - v4 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 311, (uint64_t)"mesh.semantics.empty() || (mesh.semantics_type == kit::mesh::TriMeshMetadataType::PerFace && mesh.semantics.size() == mesh.faces.size())", 136, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)
    || (v6 = *(_QWORD *)(a2 + 280), v7 = *(_QWORD *)(a2 + 288), v6 != v7)
    && (*(_DWORD *)(a2 + 312) != 2
     || v7 - v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 314, (uint64_t)"mesh.materials.empty() || (mesh.materials_type == kit::mesh::TriMeshMetadataType::PerFace && mesh.materials.size() == mesh.faces.size())", 136, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v8 = *(_QWORD *)(a2 + 320), v9 = *(_QWORD *)(a2 + 328), v8 != v9)&& (*(_DWORD *)(a2 + 352) != 1|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) != (v9 - v8) >> 2)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 317, (uint64_t)"mesh.confidences.empty() || (mesh.confidences_type == kit::mesh::TriMeshMetadataType::PerVertex && mesh.confidences.size() == mesh.vertices.size())", 147, (uint64_t)"", 0,
         (void (*)(void **))sub_22457406C)
    || *(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 318, (uint64_t)"mesh.colors.empty()", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2) != a1[1] - *a1&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 320, (uint64_t)"mesh.faces.size() == face_state.size()", 38, (uint64_t)"face_state should be the same size as mesh.faces", 48, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v10 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v11 = -85 * v10;
  v12 = (-1431655765 * v10);
  if (-1431655765 * (_DWORD)v10)
  {
    v13 = operator new(4 * v12);
    bzero(v13, 4 * v12);
    v14 = operator new((((v12 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
    v15 = v14;
    v16 = (v12 - 1) >> 6;
    if (v12 < 0x41)
      v16 = 0;
    v14[v16] = 0;
    if (v12 >= 0x40)
      bzero(v14, 8 * (v12 >> 6));
    if ((v11 & 0x3F) != 0)
      v15[v12 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 & 0x3F));
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v17 = *(_QWORD *)(a2 + 112);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 120) - v17) >> 2);
  if (*(_QWORD *)(a2 + 120) != v17)
  {
    v19 = 0;
    v20 = *a1;
    v21 = (_DWORD *)(v17 + 8);
    do
    {
      if (*(_BYTE *)(v20 + v19) == 1)
      {
        v22 = *(v21 - 1);
        *(_QWORD *)((char *)v15 + (((unint64_t)*(v21 - 2) >> 3) & 0x1FFFFFF8)) |= 1 << *(v21 - 2);
        *(_QWORD *)((char *)v15 + ((v22 >> 3) & 0x1FFFFFF8)) |= 1 << v22;
        *(_QWORD *)((char *)v15 + (((unint64_t)*v21 >> 3) & 0x1FFFFFF8)) |= 1 << *v21;
      }
      ++v19;
      v21 += 3;
    }
    while (v18 > v19);
  }
  if (!v12)
  {
    v25 = 0;
    v30 = v18;
    if ((_DWORD)v18)
      goto LABEL_40;
LABEL_51:
    v42 = 0;
    v43 = v18 == 0;
    goto LABEL_52;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    if (((*(_QWORD *)((char *)v15 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
    {
      *((_DWORD *)v13 + v24) = v25;
      v26 = (uint64_t *)(*(_QWORD *)a2 + v23);
      v27 = *(_QWORD *)a2 + 12 * v25;
      v28 = *v26;
      *(_DWORD *)(v27 + 8) = *((_DWORD *)v26 + 2);
      *(_QWORD *)v27 = v28;
      v29 = *(_QWORD *)(a2 + 320);
      if (v29 != *(_QWORD *)(a2 + 328))
        *(_DWORD *)(v29 + 4 * v25) = *(_DWORD *)(v29 + 4 * v24);
      ++v25;
    }
    ++v24;
    v23 += 12;
  }
  while (v12 != v24);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 120) - v17) >> 2);
  v30 = -1431655765 * ((*(_QWORD *)(a2 + 120) - v17) >> 2);
  if (!(-1431655765 * ((*(_QWORD *)(a2 + 120) - v17) >> 2)))
    goto LABEL_51;
LABEL_40:
  v31 = 0;
  v32 = 0;
  v33 = 0;
  do
  {
    if (*(_BYTE *)(*a1 + v32) == 1)
    {
      v34 = *(_QWORD *)(a2 + 112);
      v35 = *(unsigned int *)(v34 + v31 + 4);
      v36 = *(unsigned int *)(v34 + v31 + 8);
      v37 = *((_DWORD *)v13 + *(unsigned int *)(v34 + v31));
      v38 = (_DWORD *)(v34 + 12 * v33);
      *v38 = v37;
      v38[1] = *((_DWORD *)v13 + v35);
      v38[2] = *((_DWORD *)v13 + v36);
      v39 = *(_QWORD *)(a2 + 240);
      if (v39 != *(_QWORD *)(a2 + 248))
        *(_BYTE *)(v39 + v33) = *(_BYTE *)(v39 + v32);
      v40 = *(_QWORD *)(a2 + 280);
      if (v40 != *(_QWORD *)(a2 + 288))
        *(_BYTE *)(v40 + v33) = *(_BYTE *)(v40 + v32);
      ++v33;
    }
    ++v32;
    v31 += 12;
  }
  while (v30 != v32);
  v17 = *(_QWORD *)(a2 + 112);
  v41 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 120) - v17) >> 2);
  v42 = v33;
  v43 = v33 >= v41;
  if (v33 > v41)
  {
    sub_22317F10C(a2 + 112, v33 - v41);
    goto LABEL_54;
  }
LABEL_52:
  if (!v43)
    *(_QWORD *)(a2 + 120) = v17 + 12 * v42;
LABEL_54:
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v25 <= v44)
  {
    if (v25 < v44)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v25;
  }
  else
  {
    sub_22317EF30(a2, v25 - v44);
  }
  v45 = *(_QWORD *)(a2 + 320);
  v46 = *(_QWORD *)(a2 + 328);
  if (v45 != v46)
  {
    v47 = (v46 - v45) >> 2;
    if (v25 <= v47)
    {
      if (v25 < v47)
        *(_QWORD *)(a2 + 328) = v45 + 4 * v25;
    }
    else
    {
      sub_22317F4CC(a2 + 320, v25 - v47);
    }
  }
  v48 = *(_QWORD *)(a2 + 240);
  v49 = *(_QWORD *)(a2 + 248);
  if (v48 != v49)
  {
    v50 = v49 - v48;
    if (v42 <= v50)
    {
      if (v42 < v50)
        *(_QWORD *)(a2 + 248) = v48 + v42;
    }
    else
    {
      sub_22317F2E8(a2 + 240, v42 - v50);
    }
  }
  v51 = *(_QWORD *)(a2 + 280);
  v52 = *(_QWORD *)(a2 + 288);
  if (v51 != v52)
  {
    v53 = v52 - v51;
    if (v42 <= v53)
    {
      if (v42 < v53)
        *(_QWORD *)(a2 + 288) = v51 + v42;
    }
    else
    {
      sub_22317F2E8(a2 + 280, v42 - v53);
    }
  }
  if (v15)
    operator delete(v15);
  if (v13)
    operator delete(v13);
}

void sub_223CE3D3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223CE3D50(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_223CE3D80(_QWORD *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  uint64_t j;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t m;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  uint64_t *v132;
  char *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _OWORD *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  void *v172;
  void *v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t *v185;
  unint64_t *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t *v191;
  char *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  int v196;
  char *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  int v201;
  _QWORD v202[2];

  v3 = a1;
  v4 = a1[4];
  v5 = a1[5];
  if (v4 != v5
    && v5 - v4 != a1[1] - *a1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 689, (uint64_t)"(mesh.colors.empty() || mesh.colors.size() == mesh.vertices.size())", 67, (uint64_t)"mesh must either lack any colors, or have one color per vertex", 62, (void (*)(void **))sub_22457406C)|| (v6 = v3[9], v7 = v3[10], v6 != v7)&& v7 - v6 != v3[1] - *v3&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 691, (uint64_t)"(mesh.normals.empty() || mesh.normals.size() == mesh.vertices.size())", 69, (uint64_t)"mesh must either lack any normals, or have one normal per vertex", 64, (void (*)(void **))sub_22457406C)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[15] - v3[14]) >> 2) != a2[1] - *a2&& sub_224573870(
         "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp",
         693,
         (uint64_t)"face_labels.size() == mesh.faces.size()",
         39,
         (uint64_t)"mesh.faces and face_labels must be the same size",
         48,
         (void (*)(void **))sub_22457406C)
    || v3[26] != v3[27]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 696, (uint64_t)"mesh.tex_faces.empty()", 22, (uint64_t)"currently mesh cannot contain texture faces", 43, (void (*)(void **))sub_22457406C)|| v3[22] != v3[23]&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 697, (uint64_t)"mesh.tex_coords.empty()", 23, (uint64_t)"currently mesh cannot contain texture coordinates", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (v3[14] == v3[15])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = v8 + 1;
    if (v8 + 1 != v9)
    {
      v11 = *v8;
      v12 = v8 + 1;
      do
      {
        v14 = *v12++;
        v13 = v14;
        v15 = v11 >= v14;
        if (v11 <= v14)
          v11 = v13;
        if (!v15)
          v8 = v10;
        v10 = v12;
      }
      while (v12 != v9);
    }
  }
  v16 = *v8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v175 = v16;
  if (v16 != -1)
  {
    v17 = 384 * (v16 + 1);
    v18 = (char *)operator new(v17);
    *a3 = (uint64_t)v18;
    a3[1] = (uint64_t)v18;
    v19 = &v18[v17];
    a3[2] = (uint64_t)&v18[v17];
    do
    {
      v18 = (char *)(sub_2241498F4((uint64_t)v18, 0) + 384);
      v17 -= 384;
    }
    while (v17);
    a3[1] = (uint64_t)v19;
  }
  v21 = *v3;
  v20 = v3[1];
  v198 = 0;
  v199 = 0;
  v197 = 0;
  v22 = v20 - v21;
  if (v22)
  {
    v23 = v22 >> 2;
    v24 = 0xAAAAAAAAAAAAAAABLL * v23;
    if (0xAAAAAAAAAAAAAAABLL * v23 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v25 = (char *)operator new(8 * v23);
    v197 = v25;
    v199 = &v25[24 * v24];
    bzero(v25, 24 * ((24 * v24 - 24) / 0x18) + 24);
    v198 = &v25[24 * ((24 * v24 - 24) / 0x18) + 24];
    v26 = (unsigned int *)v3[14];
    v174 = (unsigned int *)v3[15];
    if (v26 == v174)
      goto LABEL_199;
LABEL_32:
    v27 = 0;
    while (1)
    {
      v29 = (*a2)[v27];
      if (v29 > v175
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 717, (uint64_t)"0 <= region_index && region_index <= max_region", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v30 = 0;
      v178 = v27;
      v179 = *a3;
      v31 = *a3 + 384 * v29;
      v186 = (unint64_t *)(v31 + 72);
      v187 = v31 + 24;
      v182 = v31 + 96;
      v183 = (unsigned int *)(v31 + 100);
      v184 = v26;
      v190 = (unint64_t *)(v31 + 40);
      v191 = (unint64_t *)(v31 + 80);
      v185 = (unint64_t *)(v31 + 32);
      v188 = (unint64_t *)(v31 + 48);
      v189 = (unint64_t *)(v31 + 88);
      v193 = v31;
      v180 = v31 + 56;
      v181 = (unsigned int *)(v31 + 60);
      v32 = v26;
      do
      {
LABEL_40:
        v34 = *v32;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2) < v34)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 726, (uint64_t)"0 <= old_v_ix && old_v_ix <= mesh.vertices.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v35 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v56 = qword_255795648;
            for (i = qword_255795650; v56 != i; v56 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v56)(*(_QWORD *)(v56 + 8), "0 <= old_v_ix && old_v_ix <= mesh.vertices.size()", 49, "", 0);
          }
          v36 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "0 <= old_v_ix && old_v_ix <= mesh.vertices.size()", 49, "", 0);
          v34 = *v32;
        }
        v37 = v197;
        v38 = &v197[24 * v34];
        v39 = *((_QWORD *)v38 + 1);
        v194 = (uint64_t *)(v38 + 8);
        v40 = *(_QWORD *)v38;
        do
        {
          if (v39 == v40)
          {
            v192 = &v197[24 * v34];
            v42 = *(_QWORD *)(v193 + 8);
            *((_DWORD *)&v195 + v30) = -1431655765 * ((v42 - *(_QWORD *)v193) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2) <= v34)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 72, (uint64_t)"0 <= vertex_index && vertex_index < mesh_in.vertices.size()", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v48 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v58 = qword_255795648;
                for (j = qword_255795650; v58 != j; v58 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v58)(*(_QWORD *)(v58 + 8), "0 <= vertex_index && vertex_index < mesh_in.vertices.size()", 59, "", 0);
              }
              v49 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
LABEL_207:
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "0 <= vertex_index && vertex_index < mesh_in.vertices.size()", 59, "", 0);
              v43 = (_QWORD *)v193;
              v44 = *v3 + 12 * v34;
              v42 = *(_QWORD *)(v193 + 8);
              v45 = *(_QWORD *)(v193 + 16);
              if (v42 >= v45)
                goto LABEL_61;
LABEL_54:
              v46 = *(_QWORD *)v44;
              *(_DWORD *)(v42 + 8) = *(_DWORD *)(v44 + 8);
              *(_QWORD *)v42 = v46;
              v47 = v42 + 12;
            }
            else
            {
              v43 = (_QWORD *)v193;
              v44 = *v3 + 12 * v34;
              v45 = *(_QWORD *)(v193 + 16);
              if (v42 < v45)
                goto LABEL_54;
LABEL_61:
              v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v43) >> 2);
              v51 = v50 + 1;
              if (v50 + 1 > 0x1555555555555555)
                goto LABEL_215;
              v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *v43) >> 2);
              if (2 * v52 > v51)
                v51 = 2 * v52;
              if (v52 >= 0xAAAAAAAAAAAAAAALL)
                v51 = 0x1555555555555555;
              if (v51)
              {
                LODWORD(v202[0]) = v51;
                v53 = *(unsigned int *)(v193 + 28);
                if ((_DWORD)v53 == -1)
                  goto LABEL_209;
                v200 = v202;
                v54 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC636F8[v53])(&v200, v187);
              }
              else
              {
                v54 = 0;
                v55 = 0;
              }
              v60 = v54 + 12 * v50;
              v61 = *(_QWORD *)v44;
              *(_DWORD *)(v60 + 8) = *(_DWORD *)(v44 + 8);
              *(_QWORD *)v60 = v61;
              v63 = *(_QWORD *)v193;
              v62 = *(_QWORD *)(v193 + 8);
              v64 = v60;
              if (v62 == *(_QWORD *)v193)
              {
                v67 = v193;
              }
              else
              {
                do
                {
                  v65 = *(_QWORD *)(v62 - 12);
                  v62 -= 12;
                  v66 = *(_DWORD *)(v62 + 8);
                  *(_QWORD *)(v64 - 12) = v65;
                  v64 -= 12;
                  *(_DWORD *)(v64 + 8) = v66;
                }
                while (v62 != v63);
                v67 = v193;
                v62 = *(_QWORD *)v193;
              }
              v47 = v60 + 12;
              *(_QWORD *)v67 = v64;
              *(_QWORD *)(v67 + 8) = v60 + 12;
              v68 = *(_QWORD *)(v67 + 16);
              *(_QWORD *)(v67 + 16) = v54 + 12 * v55;
              if (v62)
              {
                v200 = (_QWORD *)v62;
                v201 = -1431655765 * ((unint64_t)(v68 - v62) >> 2);
                v69 = *(unsigned int *)(v67 + 28);
                if ((_DWORD)v69 == -1)
                  sub_22316DD70();
                v202[0] = &v200;
                ((void (*)(_QWORD *, uint64_t))off_24EC63708[v69])(v202, v187);
              }
            }
            *(_QWORD *)(v193 + 8) = v47;
            v70 = v3[9];
            v71 = v3[10];
            if (v70 != v71)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 2) <= v34)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 76, (uint64_t)"0 <= vertex_index && vertex_index < mesh_in.normals.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v72 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v83 = qword_255795648;
                  for (k = qword_255795650; v83 != k; v83 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v83)(*(_QWORD *)(v83 + 8), "0 <= vertex_index && vertex_index < mesh_in.normals.size()", 58, "", 0);
                }
                v73 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_207;
                qword_255795660(*(_QWORD *)algn_255795668, "0 <= vertex_index && vertex_index < mesh_in.normals.size()", 58, "", 0);
                v70 = v3[9];
              }
              v74 = (uint64_t *)(v70 + 12 * v34);
              v75 = *v191;
              if (*v191 >= *v189)
              {
                v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *v186) >> 2);
                v79 = v78 + 1;
                if (v78 + 1 > 0x1555555555555555)
                  goto LABEL_215;
                if (0x5555555555555556 * ((uint64_t)(*v189 - *v186) >> 2) > v79)
                  v79 = 0x5555555555555556 * ((uint64_t)(*v189 - *v186) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v189 - *v186) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v79 = 0x1555555555555555;
                if (v79)
                {
                  LODWORD(v202[0]) = v79;
                  v80 = *v183;
                  if ((_DWORD)v80 == -1)
                    goto LABEL_209;
                  v200 = v202;
                  v81 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC636F8[v80])(&v200, v182);
                }
                else
                {
                  v81 = 0;
                  v82 = 0;
                }
                v85 = v81 + 12 * v78;
                v86 = *v74;
                *(_DWORD *)(v85 + 8) = *((_DWORD *)v74 + 2);
                *(_QWORD *)v85 = v86;
                v87 = *v191;
                v88 = *v186;
                v89 = v85;
                if (*v191 != *v186)
                {
                  do
                  {
                    v90 = *(_QWORD *)(v87 - 12);
                    v87 -= 12;
                    v91 = *(_DWORD *)(v87 + 8);
                    *(_QWORD *)(v89 - 12) = v90;
                    v89 -= 12;
                    *(_DWORD *)(v89 + 8) = v91;
                  }
                  while (v87 != v88);
                  v87 = *v186;
                }
                v77 = v85 + 12;
                *v186 = v89;
                *v191 = v85 + 12;
                v92 = *v189;
                *v189 = v81 + 12 * v82;
                if (v87)
                {
                  v200 = (_QWORD *)v87;
                  v201 = -1431655765 * ((v92 - v87) >> 2);
                  v93 = *v183;
                  if ((_DWORD)v93 == -1)
                    sub_22316DD70();
                  v202[0] = &v200;
                  ((void (*)(_QWORD *, uint64_t))off_24EC63708[v93])(v202, v182);
                }
              }
              else
              {
                v76 = *v74;
                *(_DWORD *)(v75 + 8) = *((_DWORD *)v74 + 2);
                *(_QWORD *)v75 = v76;
                v77 = v75 + 12;
              }
              *v191 = v77;
            }
            v94 = v3[4];
            v95 = v3[5];
            if (v94 != v95)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v95 - v94) >> 2) <= v34)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 81, (uint64_t)"0 <= vertex_index && vertex_index < mesh_in.colors.size()", 57, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v96 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v107 = qword_255795648;
                  for (m = qword_255795650; v107 != m; v107 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v107)(*(_QWORD *)(v107 + 8), "0 <= vertex_index && vertex_index < mesh_in.colors.size()", 57, "", 0);
                }
                v97 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_207;
                qword_255795660(*(_QWORD *)algn_255795668, "0 <= vertex_index && vertex_index < mesh_in.colors.size()", 57, "", 0);
                v94 = v3[4];
              }
              v98 = (uint64_t *)(v94 + 12 * v34);
              v99 = *v190;
              if (*v190 >= *v188)
              {
                v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *v185) >> 2);
                v103 = v102 + 1;
                if (v102 + 1 > 0x1555555555555555)
LABEL_215:
                  sub_22316E078();
                if (0x5555555555555556 * ((uint64_t)(*v188 - *v185) >> 2) > v103)
                  v103 = 0x5555555555555556 * ((uint64_t)(*v188 - *v185) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v188 - *v185) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v103 = 0x1555555555555555;
                if (v103)
                {
                  LODWORD(v202[0]) = v103;
                  v104 = *v181;
                  if ((_DWORD)v104 == -1)
LABEL_209:
                    sub_22316DD70();
                  v200 = v202;
                  v105 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC636F8[v104])(&v200, v180);
                }
                else
                {
                  v105 = 0;
                  v106 = 0;
                }
                v109 = v105 + 12 * v102;
                v110 = *v98;
                *(_DWORD *)(v109 + 8) = *((_DWORD *)v98 + 2);
                *(_QWORD *)v109 = v110;
                v111 = *v190;
                v112 = *v185;
                v113 = v109;
                if (*v190 != *v185)
                {
                  do
                  {
                    v114 = *(_QWORD *)(v111 - 12);
                    v111 -= 12;
                    v115 = *(_DWORD *)(v111 + 8);
                    *(_QWORD *)(v113 - 12) = v114;
                    v113 -= 12;
                    *(_DWORD *)(v113 + 8) = v115;
                  }
                  while (v111 != v112);
                  v111 = *v185;
                }
                v101 = v109 + 12;
                *v185 = v113;
                *v190 = v109 + 12;
                v116 = *v188;
                *v188 = v105 + 12 * v106;
                if (v111)
                {
                  v200 = (_QWORD *)v111;
                  v201 = -1431655765 * ((v116 - v111) >> 2);
                  v117 = *v181;
                  if ((_DWORD)v117 == -1)
                    sub_22316DD70();
                  v202[0] = &v200;
                  ((void (*)(_QWORD *, uint64_t))off_24EC63708[v117])(v202, v180);
                }
              }
              else
              {
                v100 = *v98;
                *(_DWORD *)(v99 + 8) = *((_DWORD *)v98 + 2);
                *(_QWORD *)v99 = v100;
                v101 = v99 + 12;
              }
              *v190 = v101;
            }
            v118 = *((unsigned int *)&v195 + v30);
            v119 = (char *)*v194;
            v120 = &v37[24 * v34];
            v123 = *((_QWORD *)v120 + 2);
            v122 = v120 + 16;
            v121 = v123;
            if (*v194 >= v123)
            {
              v124 = v3;
              v125 = *(char **)v192;
              v126 = (uint64_t)&v119[-*(_QWORD *)v192];
              v127 = v126 >> 3;
              v128 = (v126 >> 3) + 1;
              if (v128 >> 61)
                sub_22316E078();
              v129 = v121 - (_QWORD)v125;
              if (v129 >> 2 > v128)
                v128 = v129 >> 2;
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v128;
              if (v130)
              {
                if (v130 >> 61)
                  sub_223174E94();
                v131 = operator new(8 * v130);
                v132 = (uint64_t *)&v131[8 * v127];
                *v132 = v29 | (v118 << 32);
                v33 = (uint64_t)(v132 + 1);
                v133 = (char *)(v119 - v125);
                if (v119 != v125)
                {
LABEL_151:
                  v134 = (unint64_t)(v133 - 8);
                  if (v134 < 0x58)
                  {
                    v26 = v184;
                    goto LABEL_159;
                  }
                  v136 = v119 - v131 - v126;
                  v26 = v184;
                  if (v136 < 0x20)
                    goto LABEL_226;
                  v137 = (v134 >> 3) + 1;
                  v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
                  v139 = &v119[-v138];
                  v132 = (uint64_t *)((char *)v132 - v138);
                  v140 = &v131[8 * v127 - 16];
                  v141 = v119 - 16;
                  v142 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v143 = *(_OWORD *)v141;
                    *(v140 - 1) = *((_OWORD *)v141 - 1);
                    *v140 = v143;
                    v140 -= 2;
                    v141 -= 32;
                    v142 -= 4;
                  }
                  while (v142);
                  v119 = v139;
                  if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_226:
                    do
                    {
LABEL_159:
                      v144 = *((_QWORD *)v119 - 1);
                      v119 -= 8;
                      *--v132 = v144;
                    }
                    while (v119 != v125);
                  }
                  v135 = v192;
                  v119 = *(char **)v192;
LABEL_161:
                  *v135 = v132;
                  *v194 = v33;
                  *v122 = &v131[8 * v130];
                  v3 = v124;
                  if (v119)
                    operator delete(v119);
LABEL_39:
                  *v194 = v33;
                  v32 = &v26[++v30];
                  if (v30 == 3)
                    goto LABEL_180;
                  goto LABEL_40;
                }
              }
              else
              {
                v131 = 0;
                v132 = (uint64_t *)(8 * v127);
                *(_QWORD *)(8 * v127) = v29 | (v118 << 32);
                v33 = 8 * v127 + 8;
                v133 = (char *)(v119 - v125);
                if (v119 != v125)
                  goto LABEL_151;
              }
              v26 = v184;
              v135 = v192;
              goto LABEL_161;
            }
            *(_QWORD *)v119 = v29 | (v118 << 32);
            v33 = (uint64_t)(v119 + 8);
            goto LABEL_39;
          }
          v41 = *(_DWORD *)(v39 - 8);
          v39 -= 8;
        }
        while (v41 != (_DWORD)v29);
        *((_DWORD *)&v195 + v30++) = *(_DWORD *)(v39 + 4);
        v32 = &v26[v30];
      }
      while (v30 != 3);
LABEL_180:
      v145 = v179 + 384 * v29;
      v148 = *(_QWORD *)(v145 + 128);
      v147 = (uint64_t *)(v145 + 128);
      v146 = v148;
      v150 = (unint64_t *)(v147 - 1);
      v149 = *(v147 - 1);
      if (v149 < v148)
      {
        *(_QWORD *)v149 = v195;
        *(_DWORD *)(v149 + 8) = v196;
        v28 = v149 + 12;
      }
      else
      {
        v151 = v179 + 384 * v29;
        v154 = *(_QWORD *)(v151 + 112);
        v153 = (unint64_t *)(v151 + 112);
        v152 = v154;
        v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - v154) >> 2);
        v156 = v155 + 1;
        if (v155 + 1 > 0x1555555555555555)
          sub_22316E078();
        v157 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - v152) >> 2);
        if (2 * v157 > v156)
          v156 = 2 * v157;
        if (v157 >= 0xAAAAAAAAAAAAAAALL)
          v158 = 0x1555555555555555;
        else
          v158 = v156;
        if (v158)
        {
          LODWORD(v202[0]) = v158;
          v159 = *(unsigned int *)(v179 + 384 * v29 + 140);
          if ((_DWORD)v159 == -1)
            sub_22316DD70();
          v200 = v202;
          v160 = ((uint64_t (*)(_QWORD **, unint64_t *))off_24EC63728[v159])(&v200, v153 + 3);
        }
        else
        {
          v160 = 0;
          v161 = 0;
        }
        v162 = v160 + 12 * v155;
        *(_QWORD *)v162 = v195;
        *(_DWORD *)(v162 + 8) = v196;
        v163 = *v150;
        v164 = *v153;
        v165 = v162;
        if (*v150 != *v153)
        {
          do
          {
            v166 = *(_QWORD *)(v163 - 12);
            v163 -= 12;
            v167 = *(_DWORD *)(v163 + 8);
            *(_QWORD *)(v165 - 12) = v166;
            v165 -= 12;
            *(_DWORD *)(v165 + 8) = v167;
          }
          while (v163 != v164);
          v163 = *v153;
        }
        v28 = v162 + 12;
        *v153 = v165;
        *v150 = v162 + 12;
        v168 = *v147;
        *v147 = v160 + 12 * v161;
        if (v163)
        {
          v200 = (_QWORD *)v163;
          v201 = -1431655765 * ((v168 - v163) >> 2);
          v169 = *(unsigned int *)(v179 + 384 * v29 + 140);
          if ((_DWORD)v169 == -1)
            sub_22316DD70();
          v202[0] = &v200;
          ((void (*)(_QWORD *, unint64_t *))off_24EC63738[v169])(v202, v153 + 3);
          v26 = v184;
        }
        else
        {
          v26 = v184;
        }
      }
      *v150 = v28;
      v26 += 3;
      v27 = v178 + 1;
      if (v26 == v174)
      {
        v25 = v197;
        goto LABEL_199;
      }
    }
  }
  v25 = 0;
  v26 = (unsigned int *)v3[14];
  v174 = (unsigned int *)v3[15];
  if (v26 != v174)
    goto LABEL_32;
LABEL_199:
  if (v25)
  {
    v170 = v198;
    if (v198 != v25)
    {
      v171 = v198;
      do
      {
        v173 = (void *)*((_QWORD *)v171 - 3);
        v171 -= 24;
        v172 = v173;
        if (v173)
        {
          *((_QWORD *)v170 - 2) = v172;
          operator delete(v172);
        }
        v170 = v171;
      }
      while (v171 != v25);
    }
    v198 = v25;
    operator delete(v25);
  }
}

void sub_223CE5140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  sub_2239997F4(a12);
  _Unwind_Resume(a1);
}

void sub_223CE5158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  sub_22317C838((void **)(v12 - 136));
  sub_2239997F4(a12);
  _Unwind_Resume(a1);
}

void sub_223CE51C4(_QWORD *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _BYTE *v24;
  _DWORD *v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  char *v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  int v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64_t v66;
  char *v67;
  unint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  _BYTE *v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v117;
  char *v118;

  v7 = (char *)operator new(4uLL);
  v8 = 0;
  v9 = 0;
  *(_DWORD *)v7 = a4;
  v10 = v7 + 4;
  *(_QWORD *)(*a3 + (((unint64_t)a4 >> 3) & 0x1FFFFFF8)) |= 1 << a4;
  v117 = v7 + 4;
  v114 = a2;
  v115 = a3;
  while (2)
  {
    v112 = v10;
    v113 = v7;
    v11 = v7;
    v12 = v8;
    v118 = v9;
    v7 = v8;
    do
    {
      v15 = *(char **)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v15 < v14)
      {
        *(_DWORD *)v15 = *(_DWORD *)v11;
        v16 = (uint64_t)(v15 + 4);
        goto LABEL_29;
      }
      v17 = *(char **)a2;
      v18 = (uint64_t)&v15[-*(_QWORD *)a2];
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        sub_22316E078();
      v21 = v14 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 62)
          sub_223174E94();
        v23 = v12;
        v24 = operator new(4 * v22);
        v12 = v23;
        v25 = &v24[4 * v19];
        *v25 = *(_DWORD *)v11;
        v16 = (uint64_t)(v25 + 1);
        v26 = v15 - v17;
        if (v15 == v17)
        {
LABEL_21:
          a3 = v115;
          goto LABEL_27;
        }
      }
      else
      {
        v24 = 0;
        v25 = (_DWORD *)(4 * v19);
        *(_DWORD *)(4 * v19) = *(_DWORD *)v11;
        v16 = 4 * v19 + 4;
        v26 = v15 - v17;
        if (v15 == v17)
          goto LABEL_21;
      }
      v27 = v26 - 4;
      if (v27 < 0x2C)
      {
        a3 = v115;
        do
        {
LABEL_26:
          v36 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *--v25 = v36;
        }
        while (v15 != v17);
        goto LABEL_27;
      }
      v28 = v15 - v24 - v18;
      a3 = v115;
      if (v28 < 0x20)
        goto LABEL_26;
      v29 = (v27 >> 2) + 1;
      v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
      v31 = &v15[-v30];
      v25 = (_DWORD *)((char *)v25 - v30);
      v32 = &v24[4 * v19 - 16];
      v33 = v15 - 16;
      v34 = v29 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 32;
        v34 -= 8;
      }
      while (v34);
      v15 = v31;
      if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_26;
LABEL_27:
      *(_QWORD *)a2 = v25;
      *(_QWORD *)(a2 + 8) = v16;
      *(_QWORD *)(a2 + 16) = &v24[4 * v22];
      if (v17)
      {
        v37 = v12;
        operator delete(v17);
        v12 = v37;
      }
LABEL_29:
      *(_QWORD *)(a2 + 8) = v16;
      v38 = (unsigned int *)(*a1 + 24 * *(unsigned int *)v11);
      v39 = *v38;
      if ((_DWORD)v39 == -1
        || (v40 = *a3, v41 = v39 >> 6, v42 = 1 << v39, (*(_QWORD *)(*a3 + 8 * (v39 >> 6)) & (1 << v39)) != 0))
      {
        v43 = v38[1];
        if ((_DWORD)v43 == -1)
          goto LABEL_70;
        goto LABEL_32;
      }
      if (v12 < v118)
      {
        *(_DWORD *)v12 = v39;
        v12 += 4;
        goto LABEL_52;
      }
      v48 = v12 - v7;
      v49 = (v12 - v7) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        goto LABEL_124;
      if ((v118 - v7) >> 1 > v50)
        v50 = (v118 - v7) >> 1;
      if ((unint64_t)(v118 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
      {
        if (v51 >> 62)
          goto LABEL_126;
        v52 = v12 - v7;
        v53 = v12;
        v54 = v51;
        v55 = operator new(4 * v51);
        v12 = v53;
        v51 = v54;
        v48 = v52;
        v42 = 1 << v39;
        v56 = &v55[4 * v49];
        *(_DWORD *)v56 = v39;
        v57 = (uint64_t)(v56 + 4);
        v58 = v12 - v7;
        if (v12 == v7)
        {
LABEL_89:
          a3 = v115;
          v118 = &v55[4 * v51];
          if (!v7)
            goto LABEL_51;
LABEL_50:
          operator delete(v7);
          v40 = *a3;
          goto LABEL_51;
        }
      }
      else
      {
        v55 = 0;
        v56 = (char *)(4 * v49);
        *(_DWORD *)(4 * v49) = v39;
        v57 = 4 * v49 + 4;
        v58 = v12 - v7;
        if (v12 == v7)
          goto LABEL_89;
      }
      v59 = v58 - 4;
      if (v59 < 0xBC
        || (v90 = (v12 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v55[v48 - 4 - v90] > &v55[v48 - 4])
        || &v12[-v90 - 4] > v12 - 4
        || (unint64_t)(v12 - v55 - v48) < 0x20)
      {
        v60 = v12;
        a3 = v115;
        do
        {
LABEL_48:
          v61 = *((_DWORD *)v60 - 1);
          v60 -= 4;
          *((_DWORD *)v56 - 1) = v61;
          v56 -= 4;
        }
        while (v60 != v7);
        goto LABEL_49;
      }
      v91 = (v59 >> 2) + 1;
      v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
      v60 = &v12[-v92];
      v56 -= v92;
      v93 = &v55[4 * v49 - 16];
      v94 = v12 - 16;
      v95 = v91 & 0x7FFFFFFFFFFFFFF8;
      a3 = v115;
      do
      {
        v96 = *(_OWORD *)v94;
        *(v93 - 1) = *((_OWORD *)v94 - 1);
        *v93 = v96;
        v93 -= 2;
        v94 -= 32;
        v95 -= 8;
      }
      while (v95);
      if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_48;
LABEL_49:
      v118 = &v55[4 * v51];
      if (v7)
        goto LABEL_50;
LABEL_51:
      v7 = v56;
      a2 = v114;
      v12 = (char *)v57;
LABEL_52:
      *(_QWORD *)(v40 + 8 * v41) |= v42;
      v43 = v38[1];
      if ((_DWORD)v43 == -1)
        goto LABEL_70;
LABEL_32:
      v44 = *a3;
      v45 = v43 >> 6;
      v46 = 1 << v43;
      if ((*(_QWORD *)(*a3 + 8 * (v43 >> 6)) & (1 << v43)) == 0)
      {
        if (v12 < v118)
        {
          *(_DWORD *)v12 = v43;
          v12 += 4;
          v47 = v7;
LABEL_69:
          *(_QWORD *)(v44 + 8 * v45) |= v46;
          v7 = v47;
          goto LABEL_70;
        }
        v62 = v12 - v7;
        v63 = (v12 - v7) >> 2;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62)
          goto LABEL_124;
        if ((v118 - v7) >> 1 > v64)
          v64 = (v118 - v7) >> 1;
        if ((unint64_t)(v118 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
          v65 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          if (v65 >> 62)
            goto LABEL_126;
          v66 = v12 - v7;
          v67 = v12;
          v68 = v65;
          v69 = operator new(4 * v65);
          v12 = v67;
          v65 = v68;
          v62 = v66;
          v45 = v43 >> 6;
          v46 = 1 << v43;
          v47 = &v69[4 * v63];
          *(_DWORD *)v47 = v43;
          v70 = (uint64_t)(v47 + 4);
          v71 = v12 - v7;
          if (v12 != v7)
          {
LABEL_63:
            v72 = v71 - 4;
            if (v72 < 0xBC
              || (v97 = (v12 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v69[v62 - 4 - v97] > &v69[v62 - 4])
              || &v12[-v97 - 4] > v12 - 4
              || (unint64_t)(v12 - v69 - v62) < 0x20)
            {
              v73 = v12;
              a2 = v114;
              a3 = v115;
            }
            else
            {
              v98 = (v72 >> 2) + 1;
              v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
              v73 = &v12[-v99];
              v47 -= v99;
              v100 = &v69[4 * v63 - 16];
              v101 = v12 - 16;
              v102 = v98 & 0x7FFFFFFFFFFFFFF8;
              a3 = v115;
              do
              {
                v103 = *(_OWORD *)v101;
                *(v100 - 1) = *((_OWORD *)v101 - 1);
                *v100 = v103;
                v100 -= 2;
                v101 -= 32;
                v102 -= 8;
              }
              while (v102);
              a2 = v114;
              if (v98 == (v98 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_66:
                v118 = &v69[4 * v65];
                if (!v7)
                {
LABEL_68:
                  v12 = (char *)v70;
                  goto LABEL_69;
                }
LABEL_67:
                operator delete(v7);
                v44 = *a3;
                goto LABEL_68;
              }
            }
            do
            {
              v74 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v47 - 1) = v74;
              v47 -= 4;
            }
            while (v73 != v7);
            goto LABEL_66;
          }
        }
        else
        {
          v69 = 0;
          v47 = (char *)(4 * v63);
          *(_DWORD *)(4 * v63) = v43;
          v70 = 4 * v63 + 4;
          v71 = v12 - v7;
          if (v12 != v7)
            goto LABEL_63;
        }
        a2 = v114;
        a3 = v115;
        v118 = &v69[4 * v65];
        if (!v7)
          goto LABEL_68;
        goto LABEL_67;
      }
LABEL_70:
      v75 = v38[2];
      if ((_DWORD)v75 != -1)
      {
        v76 = *a3;
        v77 = v75 >> 6;
        v78 = 1 << v75;
        if ((*(_QWORD *)(*a3 + 8 * (v75 >> 6)) & (1 << v75)) == 0)
        {
          if (v12 < v118)
          {
            *(_DWORD *)v12 = v75;
            v12 += 4;
            v13 = v7;
          }
          else
          {
            v79 = v12 - v7;
            v80 = (v12 - v7) >> 2;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
LABEL_124:
              sub_22316E078();
            if ((v118 - v7) >> 1 > v81)
              v81 = (v118 - v7) >> 1;
            if ((unint64_t)(v118 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v81;
            if (v82)
            {
              if (v82 >> 62)
LABEL_126:
                sub_223174E94();
              v83 = v12;
              v84 = operator new(4 * v82);
              v12 = v83;
              v13 = &v84[4 * v80];
              *(_DWORD *)v13 = v75;
              v85 = (uint64_t)(v13 + 4);
              v86 = v12 - v7;
              if (v12 != v7)
              {
LABEL_82:
                v87 = v86 - 4;
                if (v87 < 0xBC
                  || (v104 = (v12 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v84[v79 - 4 - v104] > &v84[v79 - 4])
                  || &v12[-v104 - 4] > v12 - 4
                  || (unint64_t)(v12 - v84 - v79) < 0x20)
                {
                  v88 = v12;
                  a2 = v114;
                  a3 = v115;
                }
                else
                {
                  v105 = (v87 >> 2) + 1;
                  v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                  v88 = &v12[-v106];
                  v13 -= v106;
                  v107 = &v84[4 * v80 - 16];
                  v108 = v12 - 16;
                  v109 = v105 & 0x7FFFFFFFFFFFFFF8;
                  a3 = v115;
                  do
                  {
                    v110 = *(_OWORD *)v108;
                    *(v107 - 1) = *((_OWORD *)v108 - 1);
                    *v107 = v110;
                    v107 -= 2;
                    v108 -= 32;
                    v109 -= 8;
                  }
                  while (v109);
                  a2 = v114;
                  if (v105 == (v105 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_85:
                    v118 = &v84[4 * v82];
                    if (v7)
                      goto LABEL_86;
                    goto LABEL_87;
                  }
                }
                do
                {
                  v89 = *((_DWORD *)v88 - 1);
                  v88 -= 4;
                  *((_DWORD *)v13 - 1) = v89;
                  v13 -= 4;
                }
                while (v88 != v7);
                goto LABEL_85;
              }
            }
            else
            {
              v84 = 0;
              v13 = (char *)(4 * v80);
              *(_DWORD *)(4 * v80) = v75;
              v85 = 4 * v80 + 4;
              v86 = v12 - v7;
              if (v12 != v7)
                goto LABEL_82;
            }
            a2 = v114;
            a3 = v115;
            v118 = &v84[4 * v82];
            if (v7)
            {
LABEL_86:
              operator delete(v7);
              v76 = *a3;
            }
LABEL_87:
            v12 = (char *)v85;
          }
          *(_QWORD *)(v76 + 8 * v77) |= v78;
          v7 = v13;
        }
      }
      v11 += 4;
    }
    while (v11 != v117);
    v9 = v112;
    v8 = v113;
    v117 = v12;
    v10 = v118;
    if (v7 != v12)
      continue;
    break;
  }
  if (v113)
  {
    v111 = v12;
    operator delete(v113);
    v12 = v111;
  }
  if (v12)
    operator delete(v12);
}

void sub_223CE5A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
  {
    operator delete(v20);
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!__p)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CE5ABC(uint64_t a1@<X0>, __int16 a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  __int32 *v18;
  __int32 *v19;
  unint64_t v20;
  int64_t v21;
  int8x16_t *v22;
  __int32 v23;
  int8x16_t *v24;
  __int32 *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  unint64_t v45;
  void *v46;
  void *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  const float *v67;
  unsigned __int128 *v68;
  const float *v69;
  unsigned __int128 v70;
  unsigned __int128 v71;
  int64_t v72;
  unint64_t v73;
  void **v74;
  void **v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  size_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  char *v86;
  void **v87;
  uint64_t v88;
  void *v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  unsigned int *v117;
  char *v118;
  _QWORD *v119;
  unsigned int *v120;
  unsigned int *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t i;
  unsigned __int8 v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  char *v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  char *v146;
  unsigned int *v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t j;
  unsigned __int8 v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  int64_t v161;
  unint64_t v162;
  char *v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  char *v172;
  unsigned int *v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  unsigned __int8 v177;
  uint64_t v178;
  uint64_t k;
  unsigned __int8 v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  int64_t v187;
  unint64_t v188;
  char *v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _OWORD *v201;
  char *v202;
  uint64_t v203;
  __int128 v204;
  char *v205;
  char **v206;
  char *v207;
  void *v208;
  unint64_t v209;
  unint64_t v210;
  void **v211;
  BOOL v212;
  char v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  double *v217;
  const double *v218;
  uint64_t v219;
  const double *v220;
  double *v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  unint64_t v225;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v231;
  char *v232;
  char *v233;
  unsigned int *v234;
  char *v235;
  unsigned int *v236;
  unsigned int *v237;
  unsigned int *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  void *v242;
  void *__p;
  void *v244[2];
  void *v245[2];
  __int128 v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  _QWORD v250[3];
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  void *v255;
  char *v256;
  float64x2x2_t v257;
  float64x2x2_t v258;

  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 120);
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v8 = (v7 - v6) / 12;
  v227 = v8;
  if (v7 == v6)
  {
    v11 = 0;
    if ((a2 & 0xFF00) == 0)
      goto LABEL_26;
LABEL_13:
    v14 = *(_QWORD *)(a1 + 240);
    v13 = *(_QWORD *)(a1 + 248);
    if (v14 != v13 && *(_DWORD *)(a1 + 272) != 2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1355, (uint64_t)"mesh.semantics.empty() || mesh.semantics_type == kmesh::TriMeshMetadataType::PerFace", 84, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_320;
      }
      v14 = *(_QWORD *)(a1 + 240);
      v13 = *(_QWORD *)(a1 + 248);
    }
    if (v13 - v14 == v8
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1356, (uint64_t)"mesh.semantics.size() == face_count", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      if (v7 != v6)
      {
        v16 = 0;
        v17 = *(_QWORD *)(a1 + 240);
        do
        {
          if (*(unsigned __int8 *)(v17 + v16) != a2)
            *(_QWORD *)((char *)v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          ++v16;
        }
        while (v8 != v16);
      }
      goto LABEL_26;
    }
LABEL_320:
    abort();
  }
  if (v7 - v6 < 0)
    sub_2233DCD38();
  v9 = (unint64_t)(v8 - 1) >> 6;
  v10 = operator new(8 * (v9 + 1));
  v11 = v10;
  v247 = v10;
  v248 = (v7 - v6) / 12;
  v249 = v9 + 1;
  if (v227 >= 0x41)
    v12 = v9;
  else
    v12 = 0;
  v8 = (v7 - v6) / 12;
  v10[v12] = 0;
  if (v227 >= 0x40)
    bzero(v10, 8 * (v227 >> 6));
  if ((v227 & 0x3F) != 0)
    v11[v227 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v227 & 0x3F));
  if ((a2 & 0xFF00) != 0)
    goto LABEL_13;
LABEL_26:
  if (!a3)
  {
    v251 = 0;
    v252 = 0;
    v253 = 0;
    sub_223CE30D8((uint64_t)&v242, a1, (size_t *)&v251);
    v42 = __p;
    if (__p)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        operator delete(v42);
        v42 = v43;
      }
      while (v43);
    }
    v44 = v242;
    v242 = 0;
    if (v44)
      operator delete(v44);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (v7 != v6)
    {
      v45 = 0;
      do
      {
        if (((*(_QWORD *)((char *)v11 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
        {
          v244[0] = 0;
          v244[1] = 0;
          v245[0] = 0;
          sub_223CE51C4(&v251, (uint64_t)v244, &v247, v45);
          v46 = v244[1];
          v254 = (char *)v244[0];
          v255 = v244[1];
          v47 = v245[0];
          v256 = (char *)v245[0];
          v48 = *(_QWORD *)(a4 + 8);
          if (v48 < *(_QWORD *)(a4 + 16))
          {
            *(void **)v48 = v244[0];
            *(_QWORD *)(v48 + 8) = v46;
            *(_QWORD *)(v48 + 16) = v47;
            *(_QWORD *)(a4 + 8) = v48 + 24;
          }
          else
          {
            v49 = sub_2232EA89C((char **)a4, (uint64_t)&v254);
            v50 = v254;
            *(_QWORD *)(a4 + 8) = v49;
            if (v50)
              operator delete(v50);
          }
        }
        ++v45;
      }
      while (v227 != v45);
    }
    if (v251)
      operator delete(v251);
    if (!v11)
      return;
LABEL_58:
    operator delete(v11);
    return;
  }
  *(_OWORD *)v245 = 0u;
  v246 = 0u;
  *(_OWORD *)v244 = 0u;
  v19 = *(__int32 **)(a1 + 112);
  v18 = *(__int32 **)(a1 + 120);
  if (v18 != v19)
  {
    v20 = v18 - v19;
    if (v20 >> 61)
      sub_22316E078();
    v21 = 8 * v20;
    v22 = (int8x16_t *)operator new(8 * v20);
    bzero(v22, v21);
    v23 = 0;
    v24 = v22;
    v25 = &v22->i32[3];
    do
    {
      *(v25 - 3) = *v19;
      *(v25 - 2) = v23;
      *(v25 - 1) = v19[1];
      *v25 = v23;
      v25[1] = v19[2];
      v25[2] = v23++;
      v25 += 6;
      v19 += 3;
    }
    while (v19 != v18);
    v26 = 126 - 2 * __clz(v21 >> 3);
    if (v21)
      v27 = v26;
    else
      v27 = 0;
    sub_223CE8C64(v22, (int8x16_t *)((char *)v22 + v21), v27, 1);
    v28 = *(unsigned int **)(a1 + 112);
    v29 = *(_QWORD *)(a1 + 120) - (_QWORD)v28;
    if (v29)
    {
      v30 = v29 / 12;
      v32 = v28 + 1;
      v31 = *v28;
      v33 = 12 * v30 - 4;
      v34 = v28 + 1;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v37 = v31 >= v36;
        if (v31 <= v36)
          v31 = v35;
        if (!v37)
          v28 = v32;
        v32 = v34;
        v33 -= 4;
      }
      while (v33);
    }
    v38 = *v28;
    v39 = v38 + 1;
    if (v38 == -1)
    {
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v51 = operator new(16 * v39);
      v41 = (char *)v51;
      v40 = (char *)&v51[v39];
      v52 = (v39 - 1) & 0xFFFFFFFFFFFFFFFLL;
      v53 = (char *)v51;
      if (v52 < 3)
        goto LABEL_326;
      v54 = v52 + 1;
      v53 = (char *)&v51[v54 & 0x1FFFFFFFFFFFFFFCLL];
      v55 = v51 + 2;
      v56 = v54 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v55 - 2) = xmmword_2245F5400;
        *(v55 - 1) = xmmword_2245F5400;
        *v55 = xmmword_2245F5400;
        v55[1] = xmmword_2245F5400;
        v55 += 4;
        v56 -= 4;
      }
      while (v56);
      if (v54 != (v54 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_326:
        do
        {
          *(_OWORD *)v53 = xmmword_2245F5400;
          v53 += 16;
        }
        while (v53 != v40);
      }
    }
    if (v21)
    {
      v57 = -(uint64_t)(-v21 & 0xFFFFFFFFFFFFFFF8);
      v58 = ~(-v21 >> 3);
      do
      {
        v59 = (uint64_t *)&v41[16 * *(unsigned int *)((char *)&v22->u32[-2] + v57)];
        v60 = v59[1] + 1;
        *v59 = v58;
        v59[1] = v60;
        --v58;
        v57 -= 8;
      }
      while (v57);
      sub_2237189C8((uint64_t)v244, v21 >> 3);
      v61 = v244[0];
      v62 = v21 - 8;
      if ((unint64_t)(v21 - 8) >= 0xA0
        && (v244[0] >= &v22->i8[v21] || (char *)v22->i64 + 4 >= (char *)v244[0] + (v62 >> 1) + 4))
      {
        v63 = (v62 >> 3) + 1;
        v64 = v63 & 7;
        if ((v63 & 7) == 0)
          v64 = 8;
        v65 = v63 - v64;
        v66 = (char *)v244[0] + 4 * v65;
        v24 = (int8x16_t *)((char *)v22 + 8 * v65);
        v67 = (const float *)&v22[2].i32[1];
        v68 = (unsigned __int128 *)((char *)v244[0] + 16);
        do
        {
          v69 = v67 - 8;
          v70 = (unsigned __int128)vld2q_f32(v69);
          v71 = (unsigned __int128)vld2q_f32(v67);
          *(v68 - 1) = v70;
          *v68 = v71;
          v67 += 16;
          v68 += 2;
          v65 -= 8;
        }
        while (v65);
        v61 = v66;
      }
      do
      {
        *v61++ = v24->i32[1];
        v24 = (int8x16_t *)((char *)v24 + 8);
      }
      while (v24 != (int8x16_t *)&v22->i8[v21]);
    }
    v240 = v7;
    v72 = v40 - v41;
    v73 = (v40 - v41) >> 4;
    v75 = (void **)v245[1];
    v74 = (void **)v246;
    v76 = (uint64_t)(v246 - (unint64_t)v245[1]) >> 4;
    v77 = v73 - v76;
    if (v73 <= v76)
    {
      if (v73 < v76)
        *(_QWORD *)&v246 = (char *)v245[1] + 16 * v73;
      if (v41 == v40)
        goto LABEL_101;
    }
    else if (v77 <= (uint64_t)(*((_QWORD *)&v246 + 1) - v246) >> 4)
    {
      bzero((void *)v246, 16 * v77);
      *(_QWORD *)&v246 = &v74[2 * v77];
      v75 = (void **)v245[1];
      if (v41 == v40)
        goto LABEL_101;
    }
    else
    {
      if (v72 < 0)
        sub_22316E078();
      v78 = *((_QWORD *)&v246 + 1) - (unint64_t)v245[1];
      if ((uint64_t)(*((_QWORD *)&v246 + 1) - (unint64_t)v245[1]) >> 3 > v73)
        v73 = v78 >> 3;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
        v79 = 0xFFFFFFFFFFFFFFFLL;
      else
        v79 = v73;
      if (v79 >> 60)
        sub_223174E94();
      v80 = (char *)operator new(16 * v79);
      v81 = &v80[16 * v76];
      v82 = 16 * v77;
      v83 = &v80[16 * v79];
      bzero(v81, v82);
      v84 = &v81[v82];
      if (v74 != v75)
      {
        do
        {
          *((_OWORD *)v81 - 1) = *((_OWORD *)v74 - 1);
          v81 -= 16;
          v74 -= 2;
        }
        while (v74 != v75);
        v74 = (void **)v245[1];
      }
      v245[1] = v81;
      *(_QWORD *)&v246 = v84;
      *((_QWORD *)&v246 + 1) = v83;
      if (v74)
        operator delete(v74);
      v75 = (void **)v245[1];
      if (v41 == v40)
        goto LABEL_101;
    }
    v85 = v72 - 16;
    if ((unint64_t)(v72 - 16) < 0xB0
      || ((v209 = (v85 & 0xFFFFFFFFFFFFFFF0) + 16,
           v210 = (unint64_t)v75 + v209,
           v211 = (void **)&v41[v209],
           v75 < &v244[1])
        ? (v212 = (unint64_t)v244 >= v210)
        : (v212 = 1),
          v212 ? (v213 = 0) : (v213 = 1),
          (unint64_t)v41 < v210 ? (v214 = v75 >= v211) : (v214 = 1),
          !v214 || (v213 & 1) != 0))
    {
      v86 = v41;
      v87 = v75;
    }
    else
    {
      v215 = (v85 >> 4) + 1;
      v216 = 2 * (v215 & 0x1FFFFFFFFFFFFFFCLL);
      v86 = &v41[v216 * 8];
      v87 = &v75[v216];
      v217 = (double *)(v75 + 4);
      v218 = (const double *)(v41 + 32);
      v219 = v215 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v220 = v218 - 4;
        v221 = v217 - 4;
        v257 = vld2q_f64(v220);
        v222 = (int64x2_t)vld1q_dup_f64((const double *)v244);
        v258 = vld2q_f64(v218);
        v223 = vaddq_s64(v222, vshlq_n_s64((int64x2_t)v257.val[0], 2uLL));
        vst2q_f64(v221, *(float64x2x2_t *)((char *)&v257 + 16));
        v224 = vaddq_s64(v222, vshlq_n_s64((int64x2_t)v258.val[0], 2uLL));
        vst2q_f64(v217, *(float64x2x2_t *)((char *)&v258 + 16));
        v217 += 8;
        v218 += 8;
        v219 -= 4;
      }
      while (v219);
      if (v215 == (v215 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_101;
    }
    do
    {
      v88 = *(_QWORD *)v86;
      v89 = (void *)*((_QWORD *)v86 + 1);
      v86 += 16;
      v90 = (char *)v244[0] + 4 * v88;
      *v87 = v89;
      v87[1] = v90;
      v87 += 2;
    }
    while (v86 != v40);
LABEL_101:
    if (v41)
      operator delete(v41);
    operator delete(v22);
    v7 = v240;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (v7 != v6)
  {
    v91 = 0;
    while (1)
    {
      v92 = v247;
      v93 = 1 << v91;
      if ((*(_QWORD *)((char *)v247 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v91)) == 0)
        break;
LABEL_107:
      if (++v91 == v227)
        goto LABEL_292;
    }
    v225 = v91;
    v251 = 0;
    v252 = 0;
    v253 = 0;
    v254 = 0;
    v255 = 0;
    v256 = 0;
    v94 = (char *)operator new(4uLL);
    v95 = 0;
    v96 = 0;
    v235 = 0;
    v97 = 0;
    *(_DWORD *)v94 = v225;
    v98 = v94 + 4;
    v92[v225 >> 6] |= v93;
    v99 = 0;
    v231 = v94 + 4;
LABEL_111:
    v100 = v99;
    v228 = v98;
    v101 = v94;
    v239 = (unint64_t)v100;
    v241 = v97;
    v98 = v100;
    v94 = v97;
    v229 = v101;
    v102 = v101;
LABEL_113:
    if (v235 < v96)
    {
      *(_DWORD *)v235 = *(_DWORD *)v102;
      v103 = v235 + 4;
LABEL_133:
      v232 = v102;
      v235 = v103;
      v252 = v103;
      v117 = (unsigned int *)(*(_QWORD *)(a1 + 112) + 12 * *(unsigned int *)v102);
      v118 = (char *)v245[1];
      v119 = (char *)v245[1] + 16 * *v117;
      v233 = v95;
      v234 = v117;
      if (!*v119)
        goto LABEL_181;
      v120 = (unsigned int *)v119[1];
      v121 = &v120[*v119];
      v236 = v121;
      while (1)
      {
        v123 = *v120;
        if ((_DWORD)v123 == -1)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1147, (uint64_t)"idx_adj_face != kInvalid", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v124 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v125 = qword_255795648;
            for (i = qword_255795650; v125 != i; v125 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v125)(*(_QWORD *)(v125 + 8), "idx_adj_face != kInvalid", 24, "", 0);
          }
          v127 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
LABEL_314:
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "idx_adj_face != kInvalid", 24, "", 0);
        }
        v128 = v247;
        if ((v247[v123 >> 6] & (1 << v123)) != 0)
          goto LABEL_137;
        if ((unint64_t)v241 >= v239)
          break;
        *(_DWORD *)v241 = v123;
        v122 = (uint64_t)(v241 + 4);
LABEL_136:
        v255 = (void *)v122;
        v128[v123 >> 6] |= 1 << v123;
        v241 = (char *)v122;
        v121 = v236;
LABEL_137:
        if (++v120 == v121)
        {
          v118 = (char *)v245[1];
          v117 = v234;
LABEL_181:
          v146 = &v118[16 * v117[1]];
          if (!*(_QWORD *)v146)
            goto LABEL_229;
          v147 = (unsigned int *)*((_QWORD *)v146 + 1);
          v237 = &v147[*(_QWORD *)v146];
          while (2)
          {
            v150 = *v147;
            if ((_DWORD)v150 == -1)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1147, (uint64_t)"idx_adj_face != kInvalid", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v151 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v152 = qword_255795648;
                for (j = qword_255795650; v152 != j; v152 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v152)(*(_QWORD *)(v152 + 8), "idx_adj_face != kInvalid", 24, "", 0);
              }
              v154 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_314;
              qword_255795660(*(_QWORD *)algn_255795668, "idx_adj_face != kInvalid", 24, "", 0);
            }
            v155 = v247;
            if ((v247[v150 >> 6] & (1 << v150)) != 0)
              goto LABEL_185;
            if ((unint64_t)v241 < v239)
            {
              *(_DWORD *)v241 = v150;
              v148 = (uint64_t)(v241 + 4);
              v149 = v94;
              goto LABEL_184;
            }
            v156 = (v241 - v94) >> 2;
            v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 62)
              goto LABEL_315;
            if ((uint64_t)(v239 - (_QWORD)v94) >> 1 > v157)
              v157 = (uint64_t)(v239 - (_QWORD)v94) >> 1;
            if (v239 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
              v158 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v158 = v157;
            if (!v158)
            {
              v160 = 0;
              v149 = (char *)(4 * v156);
              *(_DWORD *)(4 * v156) = v150;
              v148 = 4 * v156 + 4;
              v161 = v241 - v94;
              if (v241 == v94)
                goto LABEL_211;
LABEL_208:
              v162 = v161 - 4;
              if (v162 >= 0xBC)
              {
                v165 = (v241 - 4 - v94) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v160[v241 - v94 - 4 - v165] > &v160[v241 - v94 - 4])
                {
                  v163 = v241;
                }
                else if (&v241[-v165 - 4] > v241 - 4)
                {
                  v163 = v241;
                }
                else if ((unint64_t)(v94 - v160) >= 0x20)
                {
                  v166 = (v162 >> 2) + 1;
                  v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
                  v163 = &v241[-v167];
                  v149 -= v167;
                  v168 = &v160[4 * v156 - 16];
                  v169 = v241 - 16;
                  v170 = v166 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v171 = *(_OWORD *)v169;
                    *(v168 - 1) = *((_OWORD *)v169 - 1);
                    *v168 = v171;
                    v168 -= 2;
                    v169 -= 32;
                    v170 -= 8;
                  }
                  while (v170);
                  if (v166 == (v166 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_211;
                }
                else
                {
                  v163 = v241;
                }
              }
              else
              {
                v163 = v241;
              }
              do
              {
                v164 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v149 - 1) = v164;
                v149 -= 4;
              }
              while (v163 != v94);
              goto LABEL_211;
            }
            if (v158 >> 62)
              goto LABEL_316;
            v159 = v158;
            v160 = operator new(4 * v158);
            v158 = v159;
            v149 = &v160[4 * v156];
            *(_DWORD *)v149 = v150;
            v148 = (uint64_t)(v149 + 4);
            v161 = v241 - v94;
            if (v241 != v94)
              goto LABEL_208;
LABEL_211:
            v98 = &v160[4 * v158];
            v254 = v149;
            v256 = v98;
            if (v94)
            {
              operator delete(v94);
              v155 = v247;
            }
            v239 = (unint64_t)v98;
LABEL_184:
            v255 = (void *)v148;
            v155[v150 >> 6] |= 1 << v150;
            v94 = v149;
            v241 = (char *)v148;
LABEL_185:
            if (++v147 != v237)
              continue;
            break;
          }
          v118 = (char *)v245[1];
          v117 = v234;
LABEL_229:
          v172 = &v118[16 * v117[2]];
          if (*(_QWORD *)v172)
          {
            v173 = (unsigned int *)*((_QWORD *)v172 + 1);
            v238 = &v173[*(_QWORD *)v172];
            while (1)
            {
              v176 = *v173;
              if ((_DWORD)v176 == -1)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1147, (uint64_t)"idx_adj_face != kInvalid", 24, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                v177 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v177 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v178 = qword_255795648;
                  for (k = qword_255795650; v178 != k; v178 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v178)(*(_QWORD *)(v178 + 8), "idx_adj_face != kInvalid", 24, "", 0);
                }
                v180 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_314;
                qword_255795660(*(_QWORD *)algn_255795668, "idx_adj_face != kInvalid", 24, "", 0);
              }
              v181 = v247;
              if ((v247[v176 >> 6] & (1 << v176)) == 0)
                break;
LABEL_233:
              if (++v173 == v238)
                goto LABEL_112;
            }
            if (v241 < v98)
            {
              *(_DWORD *)v241 = v176;
              v174 = (uint64_t)(v241 + 4);
              v175 = v94;
            }
            else
            {
              v182 = (v241 - v94) >> 2;
              v183 = v182 + 1;
              if ((unint64_t)(v182 + 1) >> 62)
                goto LABEL_315;
              if ((v98 - v94) >> 1 > v183)
                v183 = (v98 - v94) >> 1;
              if ((unint64_t)(v98 - v94) >= 0x7FFFFFFFFFFFFFFCLL)
                v184 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                if (v184 >> 62)
                  goto LABEL_316;
                v185 = v184;
                v186 = operator new(4 * v184);
                v184 = v185;
                v175 = &v186[4 * v182];
                *(_DWORD *)v175 = v176;
                v174 = (uint64_t)(v175 + 4);
                v187 = v241 - v94;
                if (v241 == v94)
                  goto LABEL_259;
              }
              else
              {
                v186 = 0;
                v175 = (char *)(4 * v182);
                *(_DWORD *)(4 * v182) = v176;
                v174 = 4 * v182 + 4;
                v187 = v241 - v94;
                if (v241 == v94)
                  goto LABEL_259;
              }
              v188 = v187 - 4;
              if (v188 >= 0xBC)
              {
                v191 = (v241 - 4 - v94) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v186[v241 - v94 - 4 - v191] > &v186[v241 - v94 - 4])
                {
                  v189 = v241;
                }
                else if (&v241[-v191 - 4] > v241 - 4)
                {
                  v189 = v241;
                }
                else if ((unint64_t)(v94 - v186) >= 0x20)
                {
                  v192 = (v188 >> 2) + 1;
                  v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
                  v189 = &v241[-v193];
                  v175 -= v193;
                  v194 = &v186[4 * v182 - 16];
                  v195 = v241 - 16;
                  v196 = v192 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v197 = *(_OWORD *)v195;
                    *(v194 - 1) = *((_OWORD *)v195 - 1);
                    *v194 = v197;
                    v194 -= 2;
                    v195 -= 32;
                    v196 -= 8;
                  }
                  while (v196);
                  if (v192 == (v192 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_259;
                }
                else
                {
                  v189 = v241;
                }
              }
              else
              {
                v189 = v241;
              }
              do
              {
                v190 = *((_DWORD *)v189 - 1);
                v189 -= 4;
                *((_DWORD *)v175 - 1) = v190;
                v175 -= 4;
              }
              while (v189 != v94);
LABEL_259:
              v98 = &v186[4 * v184];
              v254 = v175;
              v256 = v98;
              if (v94)
              {
                operator delete(v94);
                v181 = v247;
              }
            }
            v255 = (void *)v174;
            v181[v176 >> 6] |= 1 << v176;
            v239 = (unint64_t)v98;
            v241 = (char *)v174;
            v94 = v175;
            goto LABEL_233;
          }
LABEL_112:
          v95 = v233;
          v102 = v232 + 4;
          if (v232 + 4 == v231)
          {
            v99 = v228;
            v97 = v229;
            v255 = v229;
            v256 = v228;
            v231 = v241;
            v254 = v229;
            if (v94 == v241)
            {
              if (v229)
                operator delete(v229);
              if (v94)
                operator delete(v94);
              v205 = v252;
              v250[0] = v251;
              v250[1] = v252;
              v250[2] = v96;
              v206 = *(char ***)(a4 + 8);
              if ((unint64_t)v206 < *(_QWORD *)(a4 + 16))
              {
                *v206 = v251;
                v206[1] = v205;
                v206[2] = v96;
                *(_QWORD *)(a4 + 8) = v206 + 3;
                v91 = v225;
              }
              else
              {
                v91 = v225;
                v207 = sub_2232EA89C((char **)a4, (uint64_t)v250);
                v208 = (void *)v250[0];
                *(_QWORD *)(a4 + 8) = v207;
                if (v208)
                  operator delete(v208);
              }
              goto LABEL_107;
            }
            goto LABEL_111;
          }
          goto LABEL_113;
        }
      }
      v129 = (v241 - v94) >> 2;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 62)
LABEL_315:
        sub_22316E078();
      if ((uint64_t)(v239 - (_QWORD)v94) >> 1 > v130)
        v130 = (uint64_t)(v239 - (_QWORD)v94) >> 1;
      if (v239 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
        v131 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v131 = v130;
      if (v131)
      {
        if (v131 >> 62)
LABEL_316:
          sub_223174E94();
        v132 = v131;
        v133 = operator new(4 * v131);
        v131 = v132;
        v134 = &v133[4 * v129];
        *(_DWORD *)v134 = v123;
        v122 = (uint64_t)(v134 + 4);
        v135 = v241 - v94;
        if (v241 == v94)
          goto LABEL_163;
      }
      else
      {
        v133 = 0;
        v134 = (char *)(4 * v129);
        *(_DWORD *)(4 * v129) = v123;
        v122 = 4 * v129 + 4;
        v135 = v241 - v94;
        if (v241 == v94)
          goto LABEL_163;
      }
      v136 = v135 - 4;
      if (v136 >= 0xBC)
      {
        v139 = (v241 - 4 - v94) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v133[v241 - v94 - 4 - v139] > &v133[v241 - v94 - 4])
        {
          v137 = v241;
        }
        else if (&v241[-v139 - 4] > v241 - 4)
        {
          v137 = v241;
        }
        else if ((unint64_t)(v94 - v133) >= 0x20)
        {
          v140 = (v136 >> 2) + 1;
          v141 = 4 * (v140 & 0x7FFFFFFFFFFFFFF8);
          v137 = &v241[-v141];
          v134 -= v141;
          v142 = &v133[4 * v129 - 16];
          v143 = v241 - 16;
          v144 = v140 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v145 = *(_OWORD *)v143;
            *(v142 - 1) = *((_OWORD *)v143 - 1);
            *v142 = v145;
            v142 -= 2;
            v143 -= 32;
            v144 -= 8;
          }
          while (v144);
          if (v140 == (v140 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_163;
        }
        else
        {
          v137 = v241;
        }
      }
      else
      {
        v137 = v241;
      }
      do
      {
        v138 = *((_DWORD *)v137 - 1);
        v137 -= 4;
        *((_DWORD *)v134 - 1) = v138;
        v134 -= 4;
      }
      while (v137 != v94);
LABEL_163:
      v98 = &v133[4 * v131];
      v254 = v134;
      v256 = v98;
      if (v94)
      {
        operator delete(v94);
        v128 = v247;
      }
      v239 = (unint64_t)v98;
      v94 = v134;
      goto LABEL_136;
    }
    v104 = v235 - v95;
    v105 = (v235 - v95) >> 2;
    v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 62)
      sub_22316E078();
    if ((v96 - v95) >> 1 > v106)
      v106 = (v96 - v95) >> 1;
    if ((unint64_t)(v96 - v95) >= 0x7FFFFFFFFFFFFFFCLL)
      v107 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v107 = v106;
    if (v107)
    {
      if (v107 >> 62)
        sub_223174E94();
      v108 = operator new(4 * v107);
      v109 = v98;
      v110 = v95;
    }
    else
    {
      v109 = v98;
      v110 = v95;
      v108 = 0;
    }
    v95 = &v108[4 * v105];
    v111 = v102;
    *(_DWORD *)v95 = *(_DWORD *)v102;
    v112 = v95 + 4;
    if (v235 == v110)
    {
      v115 = v110;
      v96 = &v108[4 * v107];
      v251 = &v108[4 * v105];
      v253 = v96;
      if (!v110)
        goto LABEL_132;
      goto LABEL_131;
    }
    v113 = v235 - v110 - 4;
    if (v113 < 0xBC
      || (v198 = (v235 - 4 - v110) & 0xFFFFFFFFFFFFFFFCLL, &v108[v104 - 4 - v198] > &v108[v104 - 4])
      || &v235[-v198 - 4] > v235 - 4)
    {
      v114 = v235;
    }
    else
    {
      if ((unint64_t)(v235 - v108 - v104) >= 0x20)
      {
        v199 = (v113 >> 2) + 1;
        v200 = 4 * (v199 & 0x7FFFFFFFFFFFFFF8);
        v114 = &v235[-v200];
        v95 -= v200;
        v201 = &v108[4 * v105 - 16];
        v202 = v235 - 16;
        v203 = v199 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v204 = *(_OWORD *)v202;
          *(v201 - 1) = *((_OWORD *)v202 - 1);
          *v201 = v204;
          v201 -= 2;
          v202 -= 32;
          v203 -= 8;
        }
        while (v203);
        v115 = v110;
        if (v199 == (v199 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_130:
          v96 = &v108[4 * v107];
          v251 = v95;
          v253 = v96;
          if (!v115)
          {
LABEL_132:
            v103 = v112;
            v102 = v111;
            v98 = v109;
            goto LABEL_133;
          }
LABEL_131:
          operator delete(v115);
          goto LABEL_132;
        }
        do
        {
LABEL_129:
          v116 = *((_DWORD *)v114 - 1);
          v114 -= 4;
          *((_DWORD *)v95 - 1) = v116;
          v95 -= 4;
        }
        while (v114 != v115);
        goto LABEL_130;
      }
      v114 = v235;
    }
    v115 = v110;
    goto LABEL_129;
  }
LABEL_292:
  if (v245[1])
  {
    *(void **)&v246 = v245[1];
    operator delete(v245[1]);
  }
  if (v244[0])
  {
    v244[1] = v244[0];
    operator delete(v244[0]);
  }
  v11 = v247;
  if (v247)
    goto LABEL_58;
}

void sub_223CE6FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  void *v33;
  uint64_t v34;
  void *v36;
  void *v37;

  operator delete(v33);
  if (__p)
  {
    operator delete(__p);
    v36 = a29;
    if (!a29)
    {
LABEL_6:
      v37 = *(void **)(v34 - 184);
      if (v37)
        operator delete(v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = a29;
    if (!a29)
      goto LABEL_6;
  }
  operator delete(v36);
  goto LABEL_6;
}

unint64_t sub_223CE71EC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unint64_t *a3@<X8>)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unsigned int v13;
  unsigned int v14;
  float32x4_t v15;
  int32x4_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  __float2 v22;
  float32x4_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t result;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  unsigned int v47;
  float32x4_t v48;
  uint64_t v49;
  __int32 v50;

  sub_2241498F4((uint64_t)a3, 0);
  v9 = *(unsigned __int8 *)(a1 + 20);
  if (v9 >= 3)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Geometry/src/Axis.cpp", 84, (uint64_t)&unk_2245A9627, 0, (uint64_t)"Invalid Axis value", 18, (void (*)(void **))sub_22457406C);
    abort();
  }
  v10 = (8 * v9) | 4;
  v6.i32[0] = *(_DWORD *)((char *)&unk_22466F484 + v10);
  v6.i32[1] = *(_DWORD *)((char *)&unk_22466F49C + v10);
  *(float32x2_t *)v6.f32 = vcvt_f32_s32(*(int32x2_t *)v6.f32);
  v7.f32[0] = (float)*(int *)((char *)&unk_22466F4B4 + v10);
  v11 = v6;
  v11.f32[2] = v7.f32[0];
  v8.i64[0] = *(_QWORD *)a1;
  v8.i32[2] = *(_DWORD *)(a1 + 8);
  v12 = vaddq_f32(v8, vmulq_n_f32(v11, *(float *)(a1 + 16)));
  v50 = v12.i32[2];
  v44 = v12;
  v49 = v12.i64[0];
  v48.i64[0] = *(_QWORD *)a1;
  v48.i32[2] = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    *(uint64_t *)((char *)v15.i64 + 4) = v6.i64[0];
    v43 = v15;
    v16 = vdupq_lane_s32(*(int32x2_t *)v6.f32, 1);
    v16.i32[1] = v7.i32[0];
    v16.i32[2] = v6.i32[0];
    v42 = (float32x4_t)v16;
    v17 = 2 * a2;
    do
    {
      v20 = (float)((float)v14 + (float)v14) * 3.14159265 / (double)a2;
      v21 = *(float *)(a1 + 12);
      v22 = __sincosf_stret(v20);
      v45 = vaddq_f32(vmulq_n_f32(v43, v21 * v22.__cosval), vmulq_n_f32(v42, v21 * v22.__sinval));
      v23 = vaddq_f32(v44, v45);
      v47 = v23.u32[2];
      v46 = v23.i64[0];
      v24 = a3[1];
      if (v24 >= a3[2])
      {
        v26 = sub_2233B2838(a3, &v46);
      }
      else
      {
        v25 = v46;
        *(_DWORD *)(v24 + 8) = v47;
        *(_QWORD *)v24 = v25;
        v26 = v24 + 12;
      }
      a3[1] = v26;
      v27 = vaddq_f32(v45, v48);
      v47 = v27.u32[2];
      v46 = v27.i64[0];
      if (v26 >= a3[2])
      {
        v29 = sub_2233B2838(a3, &v46);
      }
      else
      {
        v28 = v46;
        *(_DWORD *)(v26 + 8) = v47;
        *(_QWORD *)v26 = v28;
        v29 = v26 + 12;
      }
      a3[1] = v29;
      LODWORD(v46) = 2 * a2;
      HIDWORD(v46) = (v13 + 2) % v17;
      v47 = v13;
      v30 = a3[15];
      if (v30 >= a3[16])
      {
        v32 = sub_2233B29C0(a3 + 14, &v46);
      }
      else
      {
        v31 = v46;
        *(_DWORD *)(v30 + 8) = v47;
        *(_QWORD *)v30 = v31;
        v32 = v30 + 12;
      }
      a3[15] = v32;
      LODWORD(v46) = (2 * a2) | 1;
      HIDWORD(v46) = v13 + 1;
      v47 = (v13 + 3) % v17;
      if (v32 >= a3[16])
      {
        v34 = sub_2233B29C0(a3 + 14, &v46);
      }
      else
      {
        v33 = v46;
        *(_DWORD *)(v32 + 8) = v47;
        *(_QWORD *)v32 = v33;
        v34 = v32 + 12;
      }
      a3[15] = v34;
      LODWORD(v46) = v13 + 1;
      HIDWORD(v46) = v13;
      v47 = (v13 + 3) % v17;
      if (v34 >= a3[16])
      {
        v36 = sub_2233B29C0(a3 + 14, &v46);
      }
      else
      {
        v35 = v46;
        *(_DWORD *)(v34 + 8) = v47;
        *(_QWORD *)v34 = v35;
        v36 = v34 + 12;
      }
      a3[15] = v36;
      LODWORD(v46) = (v13 + 3) % v17;
      HIDWORD(v46) = v13;
      v47 = (v13 + 2) % v17;
      if (v36 < a3[16])
      {
        v18 = v46;
        *(_DWORD *)(v36 + 8) = v47;
        *(_QWORD *)v36 = v18;
        v19 = v36 + 12;
      }
      else
      {
        v19 = sub_2233B29C0(a3 + 14, &v46);
      }
      a3[15] = v19;
      ++v14;
      v13 += 2;
    }
    while (a2 != v14);
  }
  v37 = a3[1];
  if (v37 >= a3[2])
  {
    v39 = sub_2233B2B48(a3, &v49);
  }
  else
  {
    v38 = v49;
    *(_DWORD *)(v37 + 8) = v50;
    *(_QWORD *)v37 = v38;
    v39 = v37 + 12;
  }
  a3[1] = v39;
  if (v39 >= a3[2])
  {
    result = sub_2233B2B48(a3, (uint64_t *)&v48);
  }
  else
  {
    v40 = v48.i64[0];
    *(_DWORD *)(v39 + 8) = v48.i32[2];
    *(_QWORD *)v39 = v40;
    result = v39 + 12;
  }
  a3[1] = result;
  return result;
}

void sub_223CE75C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE75D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE75E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE75FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE7610(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE7624(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE7638(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE764C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223CE7660(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26[3];
  void *v27;
  unint64_t v28;
  void *__p;

  memset(v26, 0, sizeof(v26));
  sub_223CE30D8((uint64_t)&v27, a1, (size_t *)v26);
  v6 = __p;
  if (__p)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = v27;
  v27 = 0;
  if (v8)
    operator delete(v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v10 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v12 = 0;
    v27 = 0;
    v28 = 0;
    __p = 0;
    v17 = 0;
    goto LABEL_18;
  }
  v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 2);
  if (v12 >> 62)
    sub_22316E078();
  v13 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v11 >> 2));
  *a3 = (uint64_t)v13;
  a3[1] = (uint64_t)v13;
  a3[2] = (uint64_t)&v13[0xAAAAAAAAAAAAAAACLL * (v11 >> 2)];
  v27 = 0;
  v28 = 0;
  __p = 0;
  if (v11 < 0)
    sub_2233DCD38();
  v14 = (v12 - 1) >> 6;
  v15 = operator new(8 * (v14 + 1));
  v11 = (uint64_t)v15;
  v28 = v12;
  __p = (void *)(v14 + 1);
  v27 = v15;
  if (v12 >= 0x41)
    v16 = (v12 - 1) >> 6;
  else
    v16 = 0;
  *((_QWORD *)v15 + v16) = 0;
  if (v12 >= 0x40)
    bzero(v15, 8 * (v12 >> 6));
  if ((v12 & 0x3F) != 0)
    *(_QWORD *)(v11 + 8 * (v12 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 & 0x3F));
  v17 = v12 & 0x3F;
  if (v12 <= 0x3F)
  {
LABEL_18:
    if (!v17)
      goto LABEL_31;
  }
  v18 = 0;
  v19 = 0;
  v20 = (_QWORD *)(v11 + 8 * (v12 >> 6));
  v21 = (_QWORD *)v11;
  do
  {
    if (((*v21 >> v19) & 1) == 0)
    {
      v23 = *a3;
      v22 = a3[1];
      sub_223CE51C4(v26, (uint64_t)a3, &v27, v18);
      v24 = (v22 - v23) >> 2;
      v25 = (a3[1] - *a3) >> 2;
      if (v25 - v24 < a2)
      {
        if (v25 >= v24)
        {
          if (v25 > v24)
            a3[1] = *a3 + 4 * v24;
        }
        else
        {
          sub_2237189C8((uint64_t)a3, v24 - v25);
        }
      }
    }
    v21 += v19 == 63;
    if (v19 == 63)
      v19 = 0;
    else
      ++v19;
    ++v18;
  }
  while (v19 != v17 || v21 != v20);
LABEL_31:
  if (v11)
    operator delete((void *)v11);
  if (v26[0])
    operator delete(v26[0]);
}

void sub_223CE78A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CE7920(uint64_t a1, __int32 a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int64x2_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v64[2];
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  int v70;
  int64x2_t v71;
  char *v72;
  _QWORD v73[2];
  int v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;

  v68 = 0u;
  v69 = 0u;
  v70 = 728303332;
  kdebug_trace();
  v71.i32[0] = a2;
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    sub_223198474();
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t, int64x2_t *))(*(_QWORD *)v6 + 48))(&v66, v6, a1, &v71);
  v7 = v66;
  v8 = v67;
  if (v66 != v67)
  {
    v9 = HIDWORD(*(_QWORD *)(a1 + 24));
    if (v9 == 0xFFFFFFFFLL)
      v9 = -1;
    v64[0] = (uint64_t *)&v66;
    v64[1] = &v65;
    v65 = v9;
    if (v9 == 1)
    {
      v10 = 0x100000000;
    }
    else
    {
      if (v9 == 2)
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_22457406C);
        abort();
      }
      v10 = 0;
    }
    v11 = v67 - v66;
    v71 = 0uLL;
    v72 = 0;
    v73[0] = v10;
    if ((unint64_t)(v67 - v66) > 0x5555555555555554)
      sub_22316E078();
    v74 = (unint64_t)v11 >> 2;
    v75 = (unsigned int *)&v74;
    v12 = (*(void *(**)(unsigned int **))((char *)off_24EC63728 + (v10 >> 29)))(&v75);
    v14 = (char *)&v12[3 * v13];
    v15 = 3 * (v11 >> 2);
    v71.i64[0] = (uint64_t)v12;
    v71.i64[1] = (uint64_t)&v12[v15];
    v72 = v14;
    v16 = v67;
    if (v8 == v7 && v66 == v67)
    {
      v17 = vdupq_n_s64((unint64_t)&v12[v15]);
    }
    else
    {
      v18 = v66 + 4;
      v19 = v15 * 4 - 12;
      do
      {
        v20 = v18;
        v21 = v19;
        v22 = *(_QWORD *)(a1 + 112) + 12 * *((unsigned int *)v18 - 1);
        if (v12 != (_DWORD *)v22)
        {
          v23 = *(_QWORD *)v22;
          v12[2] = *(_DWORD *)(v22 + 8);
          *(_QWORD *)v12 = v23;
        }
        v12 += 3;
        v18 = v20 + 4;
        v19 = v21 - 12;
      }
      while (v21 || v20 != v16);
      v17 = v71;
      v14 = v72;
    }
    v24 = *(_QWORD *)(a1 + 112);
    *(int64x2_t *)(a1 + 112) = v17;
    v25 = *(char **)(a1 + 128);
    v26 = *(_QWORD *)(a1 + 136);
    v71.i64[0] = v24;
    v27 = v73[0];
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v27;
    v72 = v25;
    v73[0] = v26;
    if (v24)
    {
      v71.i64[1] = v24;
      v76 = v24;
      v77 = -1431655765 * ((unint64_t)&v25[-v24] >> 2);
      if (HIDWORD(v26) == 0xFFFFFFFF)
        sub_22316DD70();
      v78 = &v76;
      ((void (*)(uint64_t **, _QWORD *))off_24EC63738[HIDWORD(v26)])(&v78, v73);
    }
    if (*(_DWORD *)(a1 + 272) == 2)
      sub_223CE81AC(v64, (int64x2_t *)(a1 + 240));
    if (*(_DWORD *)(a1 + 312) == 2)
      sub_223CE81AC(v64, (int64x2_t *)(a1 + 280));
    v7 = v66;
    if (*(_DWORD *)(a1 + 64) != 2)
    {
LABEL_46:
      if (*(_DWORD *)(a1 + 352) != 2)
        goto LABEL_61;
      if (v65 == 1)
      {
        v46 = 0x100000000;
        v71 = 0uLL;
        v72 = 0;
        v73[0] = 0x100000000;
        if (v67 == v7)
        {
LABEL_50:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v7;
          goto LABEL_54;
        }
      }
      else
      {
        if (v65 == 2)
        {
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_22457406C);
          abort();
        }
        v46 = 0;
        v71 = 0uLL;
        v72 = 0;
        v73[0] = 0;
        if (v67 == v7)
          goto LABEL_50;
      }
      v51 = v67 - v7;
      if ((v51 & 0x8000000000000000) != 0)
        sub_22316E078();
      v74 = v51 >> 2;
      v75 = (unsigned int *)&v74;
      v49 = (char *)((uint64_t (*)(unsigned int **, _QWORD *))off_24EC63768[HIDWORD(v46)])(&v75, v73);
      v47 = &v49[4 * v52];
      bzero(v49, v51);
      v48 = &v49[v51];
      v7 = v66;
      v50 = v67;
      if (v49 != v48)
      {
LABEL_55:
        v53 = *(_QWORD *)(a1 + 320);
        v54 = v7 + 4;
        v55 = v49 + 4;
        do
        {
          do
          {
            v56 = v54;
            v57 = v55;
            *((_DWORD *)v55 - 1) = *(_DWORD *)(v53 + 4 * *((unsigned int *)v54 - 1));
            v54 += 4;
            v55 += 4;
          }
          while (v57 != v48);
        }
        while (v56 != v50);
LABEL_58:
        v58 = *(_QWORD *)(a1 + 320);
        *(_QWORD *)(a1 + 320) = v49;
        *(_QWORD *)(a1 + 328) = v48;
        v60 = *(char **)(a1 + 336);
        v59 = *(_QWORD *)(a1 + 344);
        v71.i64[0] = v58;
        v61 = v73[0];
        *(_QWORD *)(a1 + 336) = v47;
        *(_QWORD *)(a1 + 344) = v61;
        v72 = v60;
        v73[0] = v59;
        if (v58)
        {
          v62 = HIDWORD(v59);
          v71.i64[1] = v58;
          v76 = v58;
          v77 = (unint64_t)&v60[-v58] >> 2;
          if (v62 == 0xFFFFFFFF)
            sub_22316DD70();
          v78 = &v76;
          ((void (*)(uint64_t **, _QWORD *))off_24EC63778[v62])(&v78, v73);
          v7 = v66;
        }
        goto LABEL_61;
      }
LABEL_54:
      if (v7 == v50)
        goto LABEL_58;
      goto LABEL_55;
    }
    if (v65 == 1)
    {
      v28 = 0x100000000;
      v71 = 0uLL;
      v72 = 0;
      v73[0] = 0x100000000;
      if (v67 == v66)
      {
LABEL_32:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = v66;
LABEL_36:
        if (v32 == v7)
        {
          v35 = vdupq_n_s64(v30);
LABEL_42:
          v42 = *(_QWORD *)(a1 + 32);
          *(int64x2_t *)(a1 + 32) = v35;
          v43 = *(char **)(a1 + 48);
          v44 = *(_QWORD *)(a1 + 56);
          v71.i64[0] = v42;
          v45 = v73[0];
          *(_QWORD *)(a1 + 48) = v29;
          *(_QWORD *)(a1 + 56) = v45;
          v72 = v43;
          v73[0] = v44;
          if (v42)
          {
            v71.i64[1] = v42;
            v76 = v42;
            v77 = -1431655765 * ((unint64_t)&v43[-v42] >> 2);
            if (HIDWORD(v44) == 0xFFFFFFFF)
              sub_22316DD70();
            v78 = &v76;
            ((void (*)(uint64_t **, _QWORD *))off_24EC63708[HIDWORD(v44)])(&v78, v73);
          }
          v7 = v66;
          goto LABEL_46;
        }
LABEL_38:
        v36 = v32 + 4;
        v37 = v31 + 12;
        do
        {
          do
          {
            v38 = v36;
            v39 = v37;
            v40 = *(_QWORD *)(a1 + 32) + 12 * *((unsigned int *)v36 - 1);
            v41 = *(_QWORD *)v40;
            *(_DWORD *)(v39 - 4) = *(_DWORD *)(v40 + 8);
            *(_QWORD *)(v39 - 12) = v41;
            v36 = v38 + 4;
            v37 = v39 + 12;
          }
          while (v39 != v30);
        }
        while (v38 != v7);
        v35 = v71;
        v29 = (uint64_t)v72;
        goto LABEL_42;
      }
    }
    else
    {
      if (v65 == 2)
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_22457406C);
        abort();
      }
      v28 = 0;
      v71 = 0uLL;
      v72 = 0;
      v73[0] = 0;
      if (v67 == v66)
        goto LABEL_32;
    }
    v33 = v67 - v66;
    if ((unint64_t)(v67 - v66) > 0x5555555555555554)
      sub_22316E078();
    v74 = (unint64_t)v33 >> 2;
    v75 = (unsigned int *)&v74;
    v31 = ((uint64_t (*)(unsigned int **, _QWORD *))off_24EC636F8[HIDWORD(v28)])(&v75, v73);
    v29 = v31 + 12 * v34;
    v30 = v31 + 12 * (v33 >> 2);
    v71.i64[0] = v31;
    v71.i64[1] = v30;
    v72 = (char *)v29;
    v32 = v66;
    v7 = v67;
    if (v31 != v30)
      goto LABEL_38;
    goto LABEL_36;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
  if (*(_BYTE *)(a1 + 380))
    *(_BYTE *)(a1 + 380) = 0;
LABEL_61:
  if (v7)
  {
    v67 = v7;
    operator delete(v7);
  }
  return kdebug_trace();
}

void sub_223CE8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,unsigned int a25)
{
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;

  if (a21)
  {
    a22 = a21;
    v28 = (unint64_t)(a23 - a21) >> 2;
    *(_QWORD *)(v26 - 72) = a21;
    *(_DWORD *)(v26 - 64) = v28;
    v29 = a25;
    if (a25 == -1)
      sub_22316DD70();
    *(_QWORD *)(v26 - 56) = v26 - 72;
    ((void (*)(uint64_t, uint64_t))off_24EC63778[v29])(v26 - 56, v25);
  }
  if (__p)
  {
    operator delete(__p);
    sub_2231874DC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223CE81AC(uint64_t **a1, int64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD v27[2];
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  v5 = **a1;
  v4 = (*a1)[1];
  v6 = *a1[1];
  if (v6 == 1)
  {
    v7 = 0x100000000;
    v25 = 0uLL;
    v26 = 0;
    v27[0] = 0x100000000;
    if (v4 == v5)
    {
LABEL_4:
      v8 = 0;
      v9 = 0;
      v10 = v4;
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 == 2)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_22457406C);
      abort();
    }
    v7 = 0;
    v25 = 0uLL;
    v26 = 0;
    v27[0] = 0;
    if (v4 == v5)
      goto LABEL_4;
  }
  v11 = v4 - v5;
  if (v4 - v5 < 0)
    sub_22316E078();
  v28 = (unint64_t)v11 >> 2;
  v29 = &v28;
  v12 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC63748[HIDWORD(v7)])(&v29, v27);
  v13 = v11 >> 2;
  v25.i64[0] = (uint64_t)v12;
  v26 = &v12[v14];
  v8 = (unint64_t)&v12[v11 >> 2];
  bzero(v12, v13);
  v25.i64[1] = v8;
  v9 = v25.i64[0];
  v10 = **a1;
  v4 = (*a1)[1];
  if (v25.i64[0] != v8)
    goto LABEL_10;
LABEL_8:
  if (v10 != v4)
  {
LABEL_10:
    v16 = v10 + 4;
    v17 = v9 + 1;
    do
    {
      do
      {
        v18 = v16;
        v19 = v17;
        *(_BYTE *)(v17 - 1) = *(_BYTE *)(a2->i64[0] + *(unsigned int *)(v16 - 4));
        v16 += 4;
        ++v17;
      }
      while (v19 != v8);
    }
    while (v18 != v4);
    v15 = v25;
    goto LABEL_14;
  }
  v15 = vdupq_n_s64(v8);
LABEL_14:
  v20 = a2->i64[0];
  *a2 = v15;
  v21 = a2[1].i64[0];
  v22 = a2[1].u64[1];
  v23 = v27[0];
  v27[0] = v22;
  a2[1].i64[0] = (uint64_t)v26;
  a2[1].i64[1] = v23;
  if (v20)
  {
    v24 = HIDWORD(v22);
    v30 = v20;
    v31 = v21 - v20;
    if (v24 == 0xFFFFFFFF)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, _QWORD *))off_24EC63758[v24])(&v32, v27);
  }
}

void sub_223CE83B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a9)
  {
    a18 = a9;
    a19 = a11 - a9;
    if (a14 == -1)
      sub_22316DD70();
    *(_QWORD *)(v20 - 40) = &a18;
    ((void (*)(uint64_t, uint64_t))off_24EC63758[a14])(v20 - 40, v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_223CE8414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  unsigned int v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) != (uint64_t)(*(_QWORD *)(a1 + 328)
                                                                                               - *(_QWORD *)(a1 + 320)) >> 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/src/TriMeshUtils.cpp", 1546, (uint64_t)"mesh.confidences.size() == mesh.vertices.size()", 47, (uint64_t)"Confidences and Vertices size do not match.", 43, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_DWORD *)(a1 + 352) = 2;
  v3 = *(_QWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 120);
  HIDWORD(v20) = 0;
  v4 = v2 - v3;
  if (v4)
  {
    v5 = v4 / 12;
    if ((unint64_t)(v4 / 12) >> 62)
      sub_22316E078();
    v6 = (char *)operator new(4 * (v4 / 12));
    v7 = &v6[4 * v5];
    bzero(v6, 4 * v5);
    v8 = 0;
    v9 = &v6[4 * v5];
    v10 = *(_QWORD *)(a1 + 320);
    v11 = (unsigned int *)(v3 + 8);
    do
    {
      v12 = *(v11 - 1);
      v13 = *(float *)(v10 + 4 * *(v11 - 2));
      v14 = *v11;
      v11 += 3;
      v15 = *(float *)(v10 + 4 * v14);
      if (*(float *)(v10 + 4 * v12) < v13)
        v13 = *(float *)(v10 + 4 * v12);
      if (v15 < v13)
        v13 = v15;
      *(float *)&v6[4 * v8++] = v13;
    }
    while (v5 != v8);
  }
  else
  {
    v6 = 0;
    v9 = 0;
    v7 = 0;
    v10 = *(_QWORD *)(a1 + 320);
  }
  *(_QWORD *)(a1 + 320) = v6;
  *(_QWORD *)(a1 + 328) = v9;
  v17 = *(_QWORD *)(a1 + 336);
  v16 = *(_QWORD *)(a1 + 344);
  v18 = v20;
  *(_QWORD *)(a1 + 336) = v7;
  *(_QWORD *)(a1 + 344) = v18;
  v20 = v16;
  if (v10)
  {
    v19 = HIDWORD(v16);
    v21 = v10;
    v22 = (unint64_t)(v17 - v10) >> 2;
    if (v19 == 0xFFFFFFFF)
      sub_22316DD70();
    v23 = &v21;
    ((void (*)(uint64_t **, unint64_t *))off_24EC63778[v19])(&v23, &v20);
  }
}

void sub_223CE85DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, int a16, uint64_t *a17)
{
  if (a10)
  {
    a15 = a10;
    a16 = (unint64_t)(a12 - a10) >> 2;
    if (a14 == -1)
      sub_22316DD70();
    a17 = &a15;
    ((void (*)(uint64_t **, int *))off_24EC63778[a14])(&a17, &a13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_223CE8648@<X0>(float32x2_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  float32x2_t *i;
  float32x2_t *v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  _QWORD *v14;
  uint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t *v23;
  uint64_t v24;
  unsigned __int32 v25;

  result = sub_2241498F4(a2, 0);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 15)
  {
    v7 = (uint64_t)v6[2];
    if (v7)
    {
      result = sub_22414E9E0(a2, v7);
      if (v6[12].i8[0])
      {
        v14 = (_QWORD *)v6[2];
        v15 = v14[1] - *v14;
        if (v15)
        {
          v16 = (float32x2_t *)(*(_QWORD *)(a2 + 8) - 12);
          v17 = 12 * (v15 / -12);
          do
          {
            v9.i32[0] = v16[1].i32[0];
            v11.i32[0] = v6[5].i32[0];
            v12.i32[0] = v6[7].i32[0];
            v13.i32[0] = v6[9].i32[0];
            *(float32x2_t *)v10.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v6[4], COERCE_FLOAT(*v16)), v6[6], *v16, 1), v6[8], *(float *)v9.i32);
            v11 = vmla_f32(vmla_lane_f32(vmul_f32(v11, *v16), v12, *v16, 1), *(float32x2_t *)v9.i8, v13);
            *(float32x2_t *)&v10.u32[2] = v11;
            *(float32x2_t *)v8.f32 = v6[10];
            v8.i32[2] = v6[11].i32[0];
            v8 = vaddq_f32(v10, v8);
            v16[1].i32[0] = v8.i32[2];
            *v16 = *(float32x2_t *)v8.f32;
            v16 = (float32x2_t *)((char *)v16 - 12);
            v17 += 12;
          }
          while (v17);
          v14 = (_QWORD *)v6[2];
        }
        v18 = v14[10] - v14[9];
        if (v18)
        {
          *(float32x2_t *)v8.f32 = v6[4];
          v8.i32[2] = v6[5].i32[0];
          *(float32x2_t *)v9.i8 = v6[6];
          v9.i32[2] = v6[7].i32[0];
          v19 = v18 / -12;
          *(float32x2_t *)v10.f32 = v6[8];
          v10.i32[2] = v6[9].i32[0];
          v20 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
          v21 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
          v22 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
          v23 = (float32x2_t *)(*(_QWORD *)(a2 + 80) - 12);
          v24 = 12 * v19;
          do
          {
            v13.i32[0] = v23[1].i32[0];
            v25 = vmla_f32(vmla_lane_f32(vmul_f32(v20, *v23), v21, *v23, 1), v13, v22).u32[0];
            *v23 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v8.f32, COERCE_FLOAT(*v23)), *(float32x2_t *)v9.i8, *v23, 1), *(float32x2_t *)v10.f32, v13.f32[0]);
            v23[1].i32[0] = v25;
            v23 = (float32x2_t *)((char *)v23 - 12);
            v24 += 12;
          }
          while (v24);
        }
      }
    }
  }
  return result;
}

void sub_223CE87D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223CE87EC(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char **v32;

  v3 = result;
  v5 = *(char **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    *(_QWORD *)(result + 8) = &v5[8 * a2];
    return result;
  }
  v6 = *(char **)result;
  v7 = (uint64_t)&v5[-*(_QWORD *)result];
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + a2;
  if (v9 >> 61)
    sub_22316E078();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
  v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v9;
  if (!v12)
  {
    result = 0;
    v14 = 8 * v8;
    v16 = 0;
    v17 = 8 * v8 + 8 * a2;
    v18 = v5 - v6;
    if (v5 == v6)
      goto LABEL_10;
LABEL_14:
    v20 = v18 - 8;
    if (v20 >= 0x58)
    {
      if ((unint64_t)&v5[-result - v7] >= 0x20)
      {
        v22 = (v20 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[-v23];
        v14 -= v23;
        v24 = (_OWORD *)(result + 8 * v8 - 16);
        v25 = (__int128 *)(v5 - 16);
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          v6 = *(char **)v3;
          *(_QWORD *)v3 = v14;
          *(_QWORD *)(v3 + 8) = v17;
          v19 = *(_QWORD *)(v3 + 16);
          *(_QWORD *)(v3 + 16) = v16;
          if (!v6)
            return result;
          goto LABEL_23;
        }
      }
      else
      {
        v21 = v5;
      }
    }
    else
    {
      v21 = v5;
    }
    do
    {
      v28 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)(v14 - 8) = v28;
      v14 -= 8;
    }
    while (v21 != v6);
    goto LABEL_22;
  }
  LODWORD(v32) = v12;
  v13 = *(unsigned int *)(result + 28);
  if ((_DWORD)v13 == -1)
    sub_22316DD70();
  v30 = (char *)&v32;
  result = ((uint64_t (*)(char **, uint64_t))off_24EC63718[v13])(&v30, result + 24);
  v6 = *(char **)v3;
  v5 = *(char **)(v3 + 8);
  v14 = result + 8 * v8;
  v16 = result + 8 * v15;
  v17 = v14 + 8 * a2;
  v18 = (int64_t)&v5[-*(_QWORD *)v3];
  if (v5 != *(char **)v3)
    goto LABEL_14;
LABEL_10:
  *(_QWORD *)v3 = v14;
  *(_QWORD *)(v3 + 8) = v17;
  v19 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v16;
  if (!v6)
    return result;
LABEL_23:
  v30 = v6;
  v31 = (unint64_t)(v19 - (_QWORD)v6) >> 3;
  v29 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v29 == -1)
    sub_22316DD70();
  v32 = &v30;
  return ((uint64_t (*)(char ***, uint64_t))off_24EC636E8[v29])(&v32, v3 + 24);
}

void sub_223CE89F8(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void *v23;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v16);
      if (prime <= v22)
        prime = v22;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (prime <= v16)
        prime = v16;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    if (!prime)
    {
      v23 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v23)
        operator delete(v23);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_223174E94();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = v8[1];
    v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v12 = v10 & v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      while (1)
      {
        v13 = (_QWORD *)*v8;
        if (!*v8)
          break;
        v14 = v13[1] & v11;
        if (v14 == v12)
        {
          v8 = (_QWORD *)*v8;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
        {
          *v8 = *v13;
          v15 = 8 * v14;
          *v13 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v13;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
          v8 = v13;
          v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime)
      v10 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
    v19 = (_QWORD *)*v8;
    if (*v8)
    {
      while (1)
      {
        v21 = v19[1];
        if (v21 >= prime)
          v21 %= prime;
        if (v21 == v10)
          goto LABEL_34;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
        {
          *v8 = *v19;
          v20 = 8 * v21;
          *v19 = **(_QWORD **)(*(_QWORD *)a1 + v20);
          **(_QWORD **)(*(_QWORD *)a1 + v20) = v19;
          v19 = v8;
LABEL_34:
          v8 = v19;
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v8;
          v8 = v19;
          v19 = (_QWORD *)*v19;
          v10 = v21;
          if (!v19)
            return;
        }
      }
    }
  }
}

int8x16_t *sub_223CE8C64(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  uint64_t *v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t *v32;
  unsigned __int32 v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  int8x16_t *v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  unsigned int v63;
  int8x16_t *v64;
  int8x16_t *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned __int32 v72;
  unsigned __int32 v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  int8x16_t *v82;
  uint64_t *v83;
  unsigned __int32 v84;
  unsigned __int32 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  __int32 *v93;
  unsigned __int32 v94;
  unsigned int v95;
  __int32 *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  __int32 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int8x16_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int32 v117;
  unsigned __int32 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[2] < (unsigned __int32)v8->i32[0])
        {
          v71 = v8->i64[0];
          goto LABEL_106;
        }
        return result;
      case 3:
        v72 = v8->u32[2];
        v73 = a2[-1].u32[2];
        if (v72 < v8->i32[0])
        {
          v71 = v8->i64[0];
          if (v73 >= v72)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v71;
            if (a2[-1].i32[2] >= v71)
              return result;
            v8->i64[1] = a2[-1].i64[1];
          }
          else
          {
LABEL_106:
            v8->i64[0] = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v71;
          return result;
        }
        if (v73 < v72)
        {
          v114 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v114;
          if (v8->i32[2] < (unsigned __int32)v8->i32[0])
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 4:
        v74 = v8->u32[2];
        v75 = v8->i32[0];
        LODWORD(v76) = v8[1].i32[0];
        if (v74 >= v8->i32[0])
        {
          if (v76 < v74)
          {
            v76 = v8->i64[1];
            v115 = v8[1].i64[0];
            v8->i64[1] = v115;
            v8[1].i64[0] = v76;
            if (v75 > v115)
            {
              v116 = v8->i64[0];
              v8->i64[0] = v115;
              v8->i64[1] = v116;
            }
          }
        }
        else
        {
          v77 = v8->i64[0];
          if (v76 >= v74)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v77;
            if (v76 >= v77)
              goto LABEL_187;
            v8->i64[1] = v8[1].i64[0];
          }
          else
          {
            v8->i64[0] = v8[1].i64[0];
          }
          v8[1].i64[0] = v77;
          LODWORD(v76) = v77;
        }
LABEL_187:
        if (a2[-1].i32[2] < v76)
        {
          v122 = v8[1].i64[0];
          v8[1].i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v122;
          if (v8[1].i32[0] < (unsigned __int32)v8->i32[2])
          {
            v124 = v8->i64[1];
            v123 = v8[1].i64[0];
            v8->i64[1] = v123;
            v8[1].i64[0] = v124;
            if (v8->i32[0] > v123)
            {
              v125 = v8->i64[0];
              v8->i64[0] = v123;
              v8->i64[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (int8x16_t *)sub_223CE969C(v8->i64, &v8->u32[2], (unsigned int *)&v8[1], &v8[1].i64[1], &a2[-1].i64[1]);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v89 = (unint64_t)(v10 - 2) >> 1;
            v90 = v89;
            while (1)
            {
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = &v8->i32[2 * v92];
                if (2 * v90 + 2 >= v10)
                {
                  v96 = &v8->i32[2 * v90];
                  if (*v93 >= *v96)
                    goto LABEL_142;
                }
                else
                {
                  v94 = *v93;
                  v95 = v93[2];
                  if (*v93 <= v95)
                    v94 = v93[2];
                  if (*v93 < v95)
                  {
                    v93 += 2;
                    v92 = 2 * v90 + 2;
                  }
                  v96 = &v8->i32[2 * v90];
                  if (v94 >= *v96)
                  {
LABEL_142:
                    v97 = *(_QWORD *)v96;
                    while (1)
                    {
                      v100 = v96;
                      v96 = v93;
                      *(_QWORD *)v100 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v101 = (2 * v92) | 1;
                      v93 = &v8->i32[2 * v101];
                      v92 = 2 * v92 + 2;
                      if (v92 < v10)
                      {
                        v98 = *v93;
                        result = (int8x16_t *)(v93 + 2);
                        v99 = v93[2];
                        if (*v93 <= v99)
                          v98 = v93[2];
                        if (*v93 >= v99)
                          v92 = v101;
                        else
                          v93 += 2;
                        if (v98 < v97)
                          break;
                      }
                      else
                      {
                        v92 = v101;
                        if (*v93 < v97)
                          break;
                      }
                    }
                    *(_QWORD *)v96 = v97;
                  }
                }
              }
              v91 = v90-- <= 0;
              if (v91)
              {
                v102 = (unint64_t)v9 >> 3;
                do
                {
                  v103 = 0;
                  v104 = v8->i64[0];
                  v105 = (uint64_t *)v8;
                  do
                  {
                    v106 = (int8x16_t *)&v105[v103 + 1];
                    v107 = (2 * v103) | 1;
                    v108 = 2 * v103 + 2;
                    if (v108 < v102 && v106->i32[0] < (unsigned __int32)v106->i32[2])
                    {
                      v106 = (int8x16_t *)((char *)v106 + 8);
                      v107 = v108;
                    }
                    *v105 = v106->i64[0];
                    v105 = (uint64_t *)v106;
                    v103 = v107;
                  }
                  while (v107 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v106 == a2)
                  {
                    v106->i64[0] = v104;
                  }
                  else
                  {
                    v106->i64[0] = a2->i64[0];
                    a2->i64[0] = v104;
                    v109 = (char *)v106 - (char *)v8 + 8;
                    if (v109 >= 9)
                    {
                      v110 = (((unint64_t)v109 >> 3) - 2) >> 1;
                      v111 = &v8->i64[v110];
                      if (*(_DWORD *)v111 < v106->i32[0])
                      {
                        v112 = v106->i64[0];
                        do
                        {
                          v113 = (uint64_t *)v106;
                          v106 = (int8x16_t *)v111;
                          *v113 = *v111;
                          if (!v110)
                            break;
                          v110 = (v110 - 1) >> 1;
                          v111 = &v8->i64[v110];
                        }
                        while (*(_DWORD *)v111 < v112);
                        v106->i64[0] = v112;
                      }
                    }
                  }
                  v91 = v102-- <= 2;
                }
                while (!v91);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i64[(unint64_t)v10 >> 1];
          v13 = a2[-1].u32[2];
          if ((unint64_t)v9 < 0x401)
          {
            v16 = v8->i32[0];
            if (v8->i32[0] >= *(_DWORD *)v12)
            {
              if (v13 < v16)
              {
                v20 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v20;
                if (v8->i32[0] < *(_DWORD *)v12)
                {
                  v21 = *v12;
                  *v12 = v8->i64[0];
                  v8->i64[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *v12;
            if (v13 >= v16)
            {
              *v12 = v8->i64[0];
              v8->i64[0] = v17;
              if (a2[-1].i32[2] >= v17)
                goto LABEL_32;
              v8->i64[0] = a2[-1].i64[1];
            }
            else
            {
              *v12 = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *(_DWORD *)v12;
          if (*(_DWORD *)v12 >= v8->i32[0])
          {
            if (v13 < v14)
            {
              v18 = *v12;
              *v12 = a2[-1].i64[1];
              a2[-1].i64[1] = v18;
              if (*(_DWORD *)v12 < v8->i32[0])
              {
                v19 = v8->i64[0];
                v8->i64[0] = *v12;
                *v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i64[0];
            if (v13 >= v14)
            {
              v8->i64[0] = *v12;
              *v12 = v15;
              if (a2[-1].i32[2] >= v15)
                goto LABEL_23;
              *v12 = a2[-1].i64[1];
            }
            else
            {
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v15;
          }
LABEL_23:
          v22 = &v8->i8[8 * v11];
          v25 = *((_DWORD *)v22 - 2);
          v23 = (uint64_t *)(v22 - 8);
          v24 = v25;
          v26 = a2[-1].u32[0];
          if (v25 >= v8->i32[2])
          {
            if (v26 < v24)
            {
              v28 = *v23;
              *v23 = a2[-1].i64[0];
              a2[-1].i64[0] = v28;
              if (*(_DWORD *)v23 < v8->i32[2])
              {
                v29 = v8->i64[1];
                v8->i64[1] = *v23;
                *v23 = v29;
              }
            }
          }
          else
          {
            v27 = v8->i64[1];
            if (v26 >= v24)
            {
              v8->i64[1] = *v23;
              *v23 = v27;
              if (a2[-1].i32[0] >= v27)
                goto LABEL_37;
              *v23 = a2[-1].i64[0];
            }
            else
            {
              v8->i64[1] = a2[-1].i64[0];
            }
            a2[-1].i64[0] = v27;
          }
LABEL_37:
          v31 = &v8->i8[8 * v11];
          v34 = *((_DWORD *)v31 + 2);
          v32 = (uint64_t *)(v31 + 8);
          v33 = v34;
          v35 = a2[-2].u32[2];
          if (v34 >= v8[1].i32[0])
          {
            if (v35 < v33)
            {
              v37 = *v32;
              *v32 = a2[-2].i64[1];
              a2[-2].i64[1] = v37;
              if (*(_DWORD *)v32 < v8[1].i32[0])
              {
                v38 = v8[1].i64[0];
                v8[1].i64[0] = *v32;
                *v32 = v38;
              }
            }
          }
          else
          {
            v36 = v8[1].i64[0];
            if (v35 >= v33)
            {
              v8[1].i64[0] = *v32;
              *v32 = v36;
              if (a2[-2].i32[2] >= v36)
                goto LABEL_46;
              *v32 = a2[-2].i64[1];
            }
            else
            {
              v8[1].i64[0] = a2[-2].i64[1];
            }
            a2[-2].i64[1] = v36;
          }
LABEL_46:
          v39 = *(_DWORD *)v12;
          v40 = *(_DWORD *)v23;
          v41 = *(_DWORD *)v32;
          if (*(_DWORD *)v12 < *(_DWORD *)v23)
          {
            v42 = *v23;
            if (v41 < v39)
            {
              *v23 = *v32;
              *v32 = v42;
              v43 = v8->i64[0];
              v8->i64[0] = *v12;
              *v12 = v43;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *v23 = *v12;
            *v12 = v42;
            if (v41 < v42)
            {
              v47 = *v32;
              *v12 = *v32;
              *v32 = v42;
              v42 = v47;
            }
            goto LABEL_56;
          }
          v42 = *v12;
          if (v41 >= v39)
          {
LABEL_56:
            v48 = v8->i64[0];
            v8->i64[0] = v42;
            *v12 = v48;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v30 = v8->i64[0];
            if (v8[-1].i32[2] < (unsigned __int32)v8->i32[0])
              goto LABEL_58;
            if (a2[-1].i32[2] <= v30)
            {
              v64 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v64;
                if (v64 >= a2)
                  break;
                v64 = (int8x16_t *)((char *)v64 + 8);
              }
              while (v8->i32[0] <= v30);
            }
            else
            {
              do
              {
                v63 = v8->u32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v63 <= v30);
            }
            v65 = a2;
            if (v8 < a2)
            {
              v65 = a2;
              do
              {
                v66 = v65[-1].u32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v66 > v30);
            }
            while (v8 < v65)
            {
              v67 = v8->i64[0];
              v8->i64[0] = v65->i64[0];
              v65->i64[0] = v67;
              do
              {
                v68 = v8->u32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v68 <= v30);
              do
              {
                v69 = v65[-1].u32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v69 > v30);
            }
            v70 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v70;
            a4 = 0;
            *v70 = v30;
            continue;
          }
          v44 = *v32;
          *v12 = *v32;
          *v32 = v42;
          if (v40 > v44)
          {
            v45 = *v23;
            *v23 = v44;
            *v12 = v45;
            v46 = v8->i64[0];
            v8->i64[0] = v45;
            *v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v62 = v8->i64[0];
          v8->i64[0] = v44;
          *v12 = v62;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v30 = v8->i64[0];
LABEL_58:
          v49 = 0;
          do
          {
            v50 = v8->u32[v49 + 2];
            v49 += 2;
          }
          while (v50 < v30);
          v51 = &v8->i8[v49 * 4];
          v52 = a2;
          if (v49 == 2)
          {
            v52 = a2;
            do
            {
              if (v51 >= (char *)v52)
                break;
              v54 = v52[-1].u32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v54 >= v30);
          }
          else
          {
            do
            {
              v53 = v52[-1].u32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v53 >= v30);
          }
          if (v51 >= (char *)v52)
          {
            v60 = v51 - 8;
            if (v51 - 8 == (char *)v8)
              goto LABEL_76;
LABEL_75:
            v8->i64[0] = *(_QWORD *)v60;
            goto LABEL_76;
          }
          v55 = &v8->i8[v49 * 4];
          v56 = (char *)v52;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v56;
            *(_QWORD *)v56 = v57;
            do
            {
              v58 = *((_DWORD *)v55 + 2);
              v55 += 8;
            }
            while (v58 < v30);
            do
            {
              v59 = *((_DWORD *)v56 - 2);
              v56 -= 8;
            }
            while (v59 >= v30);
          }
          while (v55 < v56);
          v60 = v55 - 8;
          if (v55 - 8 != (char *)v8)
            goto LABEL_75;
LABEL_76:
          *(_QWORD *)v60 = v30;
          if (v51 < (char *)v52)
            goto LABEL_79;
          v61 = sub_223CE9810(v8, (int8x16_t *)v60);
          v8 = (int8x16_t *)(v60 + 8);
          result = (int8x16_t *)sub_223CE9810((int8x16_t *)(v60 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_79:
            result = (int8x16_t *)sub_223CE8C64(v7, v60, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v60 + 8);
            continue;
          }
          a2 = (int8x16_t *)v60;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v8->u64[1];
        v80 = v8 == a2 || v78 == a2;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = v8;
          while (1)
          {
            v84 = v82->u32[2];
            v85 = v82->i32[0];
            v82 = v78;
            if (v84 < v85)
            {
              v86 = v78->i64[0];
              v87 = v81;
              do
              {
                *(uint64_t *)((char *)&v8->i64[1] + v87) = *(uint64_t *)((char *)v8->i64 + v87);
                if (!v87)
                {
                  v83 = (uint64_t *)v8;
                  goto LABEL_122;
                }
                v88 = *(unsigned __int32 *)((char *)&v8->u32[-2] + v87);
                v87 -= 8;
              }
              while (v88 > v86);
              v83 = (uint64_t *)((char *)&v8->i64[1] + v87);
LABEL_122:
              *v83 = v86;
            }
            v78 = (int8x16_t *)&v82->u64[1];
            v81 += 8;
            if (&v82->u64[1] == (unint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v117 = v7->u32[2];
            v118 = v7->i32[0];
            v7 = v78;
            if (v117 < v118)
            {
              v119 = v78->i64[0];
              do
              {
                v120 = (uint64_t *)v78;
                v121 = v78[-1].i64[1];
                v78 = (int8x16_t *)((char *)v78 - 8);
                *v120 = v121;
              }
              while (*((_DWORD *)v120 - 4) > v119);
              v78->i64[0] = v119;
            }
            v78 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

uint64_t *sub_223CE969C(uint64_t *result, unsigned int *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v6 < v5)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        v6 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    v7 = *result;
    if (v6 < v5)
    {
      *result = *(_QWORD *)a3;
LABEL_9:
      *(_QWORD *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < v7)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < v6)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v10 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          v14 = *result;
          *result = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL sub_223CE9810(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= (unsigned __int32)a1->i32[0])
        return 1;
      v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      v9 = a1->u32[2];
      v10 = a2[-1].u32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < (unsigned __int32)a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      v11 = a1->u32[2];
      v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if (v13 < v11)
        {
          v13 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > v19)
          {
            v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        v14 = a1->i64[0];
        if (v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if (v13 >= v14)
            goto LABEL_44;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= v13)
        return 1;
      v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= (unsigned __int32)a1->i32[2])
        return 1;
      v29 = a1->i64[1];
      v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= v28)
        return 1;
      v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_223CE969C(a1->i64, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v3 = a1 + 1;
      v4 = a1[1].u32[0];
      v5 = a1->u32[2];
      v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          v16 = a1->i64[1];
          v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > v15)
          {
            v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= v7)
            goto LABEL_28;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2)
      return 1;
  }
  v24 = *(_QWORD *)v21;
  v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8)
        goto LABEL_37;
      return v21 + 2 == (__int32 *)a2;
    }
    v26 = *(unsigned __int32 *)((char *)&a1->u32[2] + v25);
    v25 -= 8;
  }
  while (v26 > v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8)
    goto LABEL_37;
  return v21 + 2 == (__int32 *)a2;
}

void sub_223CE9B34(uint64_t a1, void ***a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  std::string::size_type v77;
  void *v78[2];
  char v79;
  void **v80;
  std::__shared_weak_count *v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::string v88;
  void *__p;
  uint64_t *v90;
  char v91;
  char v92;
  __int128 v93;
  char v94;

  kdebug_trace();
  if (!sub_223225C34(a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Computing.cpp", 41, (uint64_t)"device", 6, (uint64_t)"Invalid device", 14, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)(a1 + 8) = 0x800000010;
  *(_DWORD *)(a1 + 16) = 1;
  LOBYTE(v93) = 0;
  v94 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1);
  if (v92)
  {
    sub_223CEF6A8(a2, (std::string::size_type)&__p, &v88);
    if (v94 == v88.__r_.__value_.__s.__data_[16])
    {
      if (!v94)
        goto LABEL_26;
      v4 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      v93 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v88.__r_.__value_.__s.__data_[16])
            goto LABEL_26;
LABEL_20:
          size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
          if (v88.__r_.__value_.__l.__size_)
          {
            v12 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v94)
      {
        v93 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
        v94 = 1;
        if (v88.__r_.__value_.__s.__data_[16])
          goto LABEL_20;
        goto LABEL_26;
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
      if (*((_QWORD *)&v93 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v94 = 0;
    }
    if (v88.__r_.__value_.__s.__data_[16])
      goto LABEL_20;
LABEL_26:
    if (v92 && v91 < 0)
      operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&__p, a1);
  sub_223CEF1C4(a2, (std::string::size_type)&__p, &v86);
  if (v91 < 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&__p, a1);
  v17 = (uint64_t *)__p;
  v18 = v90;
  if (__p != v90)
  {
    while (1)
    {
      sub_2232280C8(&v86, (uint64_t)v17, v14, v15, v16, &v84);
      if (!sub_223225C34(&v84))
      {
        sub_223CEA2E0(&v88, v17);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v88;
        else
          v74 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v75 = v88.__r_.__value_.__l.__size_;
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Computing.cpp", 56, (uint64_t)"", 0, (uint64_t)v74, v75, (void (*)(void **))sub_22457406C);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        abort();
      }
      sub_22322727C(&v82);
      sub_2232272F8(&v82, &v84, v19, v20, v21, v22);
      sub_22322730C(&v82, *((unsigned __int8 *)v17 + 24), v23, v24, v25, v26);
      if (v94)
        sub_22322731C(&v82, (const char *)&v93, v27, v28, v29, v30);
      sub_223227CCC(&v80);
      nullsub_30(a2);
      sub_223227548(&v88, a2, &v82, 0, &v80);
      v31 = sub_223CEA42C((uint64_t **)(a1 + 24), (const void **)v17, (uint64_t)v17);
      v32 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
      v33 = (std::__shared_weak_count *)v31[8];
      *(_OWORD *)(v31 + 7) = v32;
      if (!v33)
        goto LABEL_41;
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v36 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
        if (!v88.__r_.__value_.__l.__size_)
          goto LABEL_47;
      }
      else
      {
LABEL_41:
        v36 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
        if (!v88.__r_.__value_.__l.__size_)
          goto LABEL_47;
      }
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
LABEL_47:
      v39 = sub_223CEA42C((uint64_t **)(a1 + 24), (const void **)v17, (uint64_t)v17);
      if (!sub_223225C34(v39 + 7))
      {
        sub_223227CD4(&v80, v40, v41, v42, v43, v44, (uint64_t)v78);
        sub_223CEA370(&v88, v17, (uint64_t *)v78);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v88;
        else
          v76 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v77 = v88.__r_.__value_.__l.__size_;
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Computing.cpp", 82, (uint64_t)"", 0, (uint64_t)v76, v77, (void (*)(void **))sub_22457406C);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v79 < 0)
          operator delete(v78[0]);
        abort();
      }
      v45 = sub_2237FB848(a1 + 24, (const void **)v17);
      *(_DWORD *)(a1 + 8) = sub_22322756C((void ***)v45, v46, v47, v48, v49, v50);
      v51 = sub_2237FB848(a1 + 24, (const void **)v17);
      *(_DWORD *)(a1 + 12) = sub_223227550((void ***)v51, v52, v53, v54, v55, v56) / *(_DWORD *)(a1 + 8);
      v57 = v81;
      if (!v81)
        goto LABEL_52;
      v58 = (unint64_t *)&v81->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        v60 = v83;
        if (v83)
        {
LABEL_53:
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      else
      {
LABEL_52:
        v60 = v83;
        if (v83)
          goto LABEL_53;
      }
      v63 = v85;
      if (v85)
      {
        v64 = (unint64_t *)&v85->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v17 += 4;
      if (v17 == v18)
      {
        v17 = (uint64_t *)__p;
        break;
      }
    }
  }
  if (v17)
  {
    v66 = v90;
    v67 = v17;
    if (v90 != v17)
    {
      do
      {
        if (*((char *)v66 - 9) < 0)
          operator delete((void *)*(v66 - 4));
        v66 -= 4;
      }
      while (v66 != v17);
      v67 = __p;
    }
    v90 = v17;
    operator delete(v67);
  }
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 16))(a1, a2);
  kdebug_trace();
  v68 = v87;
  if (v87)
  {
    v69 = (unint64_t *)&v87->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v94)
  {
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    if (*((_QWORD *)&v93 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
}

void sub_223CEA190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  if (a37)
  {
    if (a36 < 0)
    {
      operator delete(__p);
      sub_223224234(v37 - 96);
      _Unwind_Resume(a1);
    }
  }
  sub_223224234(v37 - 96);
  _Unwind_Resume(a1);
}

void sub_223CEA2E0(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid function: ";
  v4[1] = 18;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_223CEA370(std::string *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7[0] = "Invalid compute pipeline state ";
  v7[1] = 31;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = " : ";
  v7[5] = 3;
  v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = a3;
  else
    v6 = (uint64_t *)*a3;
  if ((v5 & 0x80u) != 0)
    v5 = a3[1];
  v7[6] = v6;
  v7[7] = v5;
  sub_2231A9820((uint64_t)v7, (uint64_t)&v8, 0, 0, a1);
}

uint64_t *sub_223CEA42C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x48uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x48uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_223197FA4(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_2231A9A8C(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_223CEA5AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223CEA5C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC637E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223CEA6B8(uint64_t a1, void ***a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::string *p_p;
  std::string::size_type size;
  std::string *v166;
  std::string::size_type v167;
  std::string *v168;
  std::string::size_type v169;
  void **v170;
  std::__shared_weak_count *v171;
  uint64_t *v172;
  std::__shared_weak_count *v173;
  void **v174;
  std::__shared_weak_count *v175;
  void *v176[2];
  char v177;
  char v178;
  std::string __p;
  char v180;
  __int128 v181;
  char v182;

  kdebug_trace();
  if (!sub_223225C34(a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 42, (uint64_t)"device", 6, (uint64_t)"Invalid device", 14, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LOBYTE(v181) = 0;
  v182 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1);
  if (v180)
  {
    sub_223CEF6A8(a2, (std::string::size_type)&__p, v176);
    if (v182 == v177)
    {
      if (!v182)
        goto LABEL_26;
      v4 = *(_OWORD *)v176;
      v176[0] = 0;
      v176[1] = 0;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
      v181 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v177)
            goto LABEL_26;
LABEL_20:
          v11 = (std::__shared_weak_count *)v176[1];
          if (v176[1])
          {
            v12 = (unint64_t *)((char *)v176[1] + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v182)
      {
        v181 = *(_OWORD *)v176;
        v176[0] = 0;
        v176[1] = 0;
        v182 = 1;
        if (v177)
          goto LABEL_20;
        goto LABEL_26;
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
      if (*((_QWORD *)&v181 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v182 = 0;
    }
    if (v177)
      goto LABEL_20;
LABEL_26:
    if (v180 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&__p, a1);
  sub_223CEF1C4(a2, (std::string::size_type)&__p, &v174);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&__p, a1);
  sub_2232280C8(&v174, (uint64_t)&__p, v14, v15, v16, v176);
  v17 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v176;
  v176[0] = 0;
  v176[1] = 0;
  if (!v17)
    goto LABEL_35;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)v176[1];
    if (!v176[1])
      goto LABEL_39;
  }
  else
  {
LABEL_35:
    v20 = (std::__shared_weak_count *)v176[1];
    if (!v176[1])
      goto LABEL_39;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_39:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_40:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_41:
  if (!sub_223225C34((_QWORD *)(a1 + 24)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(v176, a1);
    sub_223CEB280(&__p, (uint64_t *)v176);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 54, (uint64_t)"", 0, (uint64_t)p_p, size, (void (*)(void **))sub_22457406C);
LABEL_150:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v178 < 0)
      operator delete(v176[0]);
    abort();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&__p, a1);
  sub_2232280C8(&v174, (uint64_t)&__p, v23, v24, v25, v176);
  v26 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v176;
  v176[0] = 0;
  v176[1] = 0;
  if (!v26)
    goto LABEL_46;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)v176[1];
    if (!v176[1])
      goto LABEL_50;
  }
  else
  {
LABEL_46:
    v29 = (std::__shared_weak_count *)v176[1];
    if (!v176[1])
      goto LABEL_50;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
  {
LABEL_50:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  if (!sub_223225C34((_QWORD *)(a1 + 8)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(v176, a1);
    sub_2238E1790("Invalid fragment shader function ", (uint64_t *)v176, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v166 = &__p;
    else
      v166 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v167 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v167 = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 58, (uint64_t)"", 0, (uint64_t)v166, v167, (void (*)(void **))sub_22457406C);
    goto LABEL_150;
  }
  sub_223228A48(&v172);
  sub_223228B98(&v172, (_QWORD **)(a1 + 24), v32, v33, v34, v35);
  sub_223228BAC(&v172, (_QWORD **)(a1 + 8), v36, v37, v38, v39);
  sub_223228BC0(&v172, *(unsigned __int16 *)(a1 + 76), v40, v41, v42, v43);
  v44 = *(_DWORD *)(a1 + 56);
  sub_223228AC4((void ***)&v172, 0, v45, v46, v47, v48, &__p);
  sub_2232289C8(&__p, v44, v49, v50, v51, v52);
  v57 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v58 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v53, v54, v55, v56, &__p);
  sub_2232289D8(&__p, *(unsigned __int8 *)(a1 + 78), v60, v61, v62, v63);
  v68 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v69 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v64, v65, v66, v67, &__p);
  sub_223228A08(&__p, 0, v71, v72, v73, v74);
  v79 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v75, v76, v77, v78, &__p);
  sub_223228A38(&__p, 0, v82, v83, v84, v85);
  v90 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v91 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v86, v87, v88, v89, &__p);
  sub_2232289E8(&__p, 4, v93, v94, v95, v96);
  v101 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v102 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v97, v98, v99, v100, &__p);
  sub_223228A18(&__p, 4, v104, v105, v106, v107);
  v112 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v113 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v108, v109, v110, v111, &__p);
  sub_2232289F8(&__p, 5, v115, v116, v117, v118);
  v123 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v124 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  sub_223228AC4((void ***)&v172, 0, v119, v120, v121, v122, &__p);
  sub_223228A28(&__p, 5, v126, v127, v128, v129);
  v134 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v135 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  sub_223228BD0(&v172, *(_DWORD *)(a1 + 60), v130, v131, v132, v133);
  if (v182)
    sub_22322731C(&v172, (const char *)&v181, v137, v138, v139, v140);
  sub_223227CCC(&v170);
  nullsub_30(a2);
  sub_223228DC8(&__p, a2, &v172, 0, &v170);
  v141 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (v141)
  {
    v142 = (unint64_t *)&v141->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v145 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  if (!sub_223225C34((_QWORD *)(a1 + 40)))
  {
    sub_223227CD4(&v170, v147, v148, v149, v150, v151, (uint64_t)v176);
    sub_223CEB310(&__p, (uint64_t *)v176);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v168 = &__p;
    else
      v168 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v169 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v169 = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 102, (uint64_t)"", 0, (uint64_t)v168, v169, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v178 < 0)
      operator delete(v176[0]);
    abort();
  }
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 16))(a1, a2);
  kdebug_trace();
  v152 = v171;
  if (v171)
  {
    v153 = (unint64_t *)&v171->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v173;
  if (v173)
  {
    v156 = (unint64_t *)&v173->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v175;
  if (!v175)
    goto LABEL_120;
  v159 = (unint64_t *)&v175->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    if (!v182)
      return;
  }
  else
  {
LABEL_120:
    if (!v182)
      return;
  }
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v162 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
}

void sub_223CEB0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a27 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a13);
  sub_223224234(v28 - 80);
  _Unwind_Resume(a1);
}

void sub_223CEB280(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid vertex shader function ";
  v4[1] = 31;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_223CEB310(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid render pipeline state ";
  v4[1] = 30;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

_QWORD *sub_223CEB3A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = off_24EC63830;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223CEB49C(uint64_t a1, void ***a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::string *p_p;
  std::string::size_type size;
  std::string *v164;
  std::string::size_type v165;
  std::string *v166;
  std::string::size_type v167;
  void **v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  uint64_t *v171;
  std::__shared_weak_count *v172;
  void **v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  char v177;
  std::string __p;
  char v179;
  __int128 v180;
  char v181;

  kdebug_trace();
  if (!sub_223225C34(a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 42, (uint64_t)"device", 6, (uint64_t)"Invalid device", 14, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LOBYTE(v180) = 0;
  v181 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1);
  if (v179)
  {
    sub_223CEF6A8(a2, (std::string::size_type)&__p, v175);
    if (v181 == v176)
    {
      if (!v181)
        goto LABEL_26;
      v4 = *(_OWORD *)v175;
      v175[0] = 0;
      v175[1] = 0;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
      v180 = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v176)
            goto LABEL_26;
LABEL_20:
          v11 = (std::__shared_weak_count *)v175[1];
          if (v175[1])
          {
            v12 = (unint64_t *)((char *)v175[1] + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (!v181)
      {
        v180 = *(_OWORD *)v175;
        v175[0] = 0;
        v175[1] = 0;
        v181 = 1;
        if (v176)
          goto LABEL_20;
        goto LABEL_26;
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
      if (*((_QWORD *)&v180 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v181 = 0;
    }
    if (v176)
      goto LABEL_20;
LABEL_26:
    if (v179 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&__p, a1);
  sub_223CEF1C4(a2, (std::string::size_type)&__p, &v173);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&__p, a1);
  sub_2232280C8(&v173, (uint64_t)&__p, v14, v15, v16, v175);
  v17 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  if (!v17)
    goto LABEL_35;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)v175[1];
    if (!v175[1])
      goto LABEL_39;
  }
  else
  {
LABEL_35:
    v20 = (std::__shared_weak_count *)v175[1];
    if (!v175[1])
      goto LABEL_39;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_39:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_40:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_41:
  if (!sub_223225C34((_QWORD *)(a1 + 24)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(v175, a1);
    sub_223CEB280(&__p, (uint64_t *)v175);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 54, (uint64_t)"", 0, (uint64_t)p_p, size, (void (*)(void **))sub_22457406C);
LABEL_152:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v177 < 0)
      operator delete(v175[0]);
    abort();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&__p, a1);
  sub_2232280C8(&v173, (uint64_t)&__p, v23, v24, v25, v175);
  v26 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  if (!v26)
    goto LABEL_46;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)v175[1];
    if (!v175[1])
      goto LABEL_50;
  }
  else
  {
LABEL_46:
    v29 = (std::__shared_weak_count *)v175[1];
    if (!v175[1])
      goto LABEL_50;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
  {
LABEL_50:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_51:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  if (!sub_223225C34((_QWORD *)(a1 + 8)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(v175, a1);
    sub_2238E1790("Invalid fragment shader function ", (uint64_t *)v175, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &__p;
    else
      v164 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v165 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v165 = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 58, (uint64_t)"", 0, (uint64_t)v164, v165, (void (*)(void **))sub_22457406C);
    goto LABEL_152;
  }
  sub_223228A48(&v171);
  sub_223228B98(&v171, (_QWORD **)(a1 + 24), v32, v33, v34, v35);
  sub_223228BAC(&v171, (_QWORD **)(a1 + 8), v36, v37, v38, v39);
  sub_223228BC0(&v171, *(unsigned __int16 *)(a1 + 80), v40, v41, v42, v43);
  v48 = 0;
  v49 = 0;
  v170 = *(_QWORD *)(a1 + 56);
  do
  {
    v50 = v48;
    sub_223228AC4((void ***)&v171, (const char *)v49, v44, v45, v46, v47, &__p);
    sub_2232289C8(&__p, *((_DWORD *)&v170 + v49), v51, v52, v53, v54);
    v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v55, v56, v57, v58, &__p);
    sub_2232289D8(&__p, *(unsigned __int8 *)(a1 + 82), v62, v63, v64, v65);
    v70 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v71 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v66, v67, v68, v69, &__p);
    sub_223228A08(&__p, 0, v73, v74, v75, v76);
    v81 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v82 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v77, v78, v79, v80, &__p);
    sub_223228A38(&__p, 0, v84, v85, v86, v87);
    v92 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v93 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v88, v89, v90, v91, &__p);
    sub_2232289E8(&__p, 4, v95, v96, v97, v98);
    v103 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v104 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v99, v100, v101, v102, &__p);
    sub_223228A18(&__p, 4, v106, v107, v108, v109);
    v114 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v115 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v110, v111, v112, v113, &__p);
    sub_2232289F8(&__p, 5, v117, v118, v119, v120);
    v125 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v126 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    sub_223228AC4((void ***)&v171, (const char *)v49, v121, v122, v123, v124, &__p);
    sub_223228A28(&__p, 5, v128, v129, v130, v131);
    v132 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v133 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v48 = 1;
    v49 = 1;
  }
  while ((v50 & 1) == 0);
  sub_223228BD0(&v171, *(_DWORD *)(a1 + 64), v44, v45, v46, v47);
  if (v181)
    sub_22322731C(&v171, (const char *)&v180, v135, v136, v137, v138);
  sub_223227CCC(&v168);
  nullsub_30(a2);
  sub_223228DC8(&__p, a2, &v171, 0, &v168);
  v139 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v143 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (!sub_223225C34((_QWORD *)(a1 + 40)))
  {
    sub_223227CD4(&v168, v145, v146, v147, v148, v149, (uint64_t)v175);
    sub_223CEB310(&__p, (uint64_t *)v175);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v166 = &__p;
    else
      v166 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v167 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v167 = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/include_private/Reconstruction/Gpu/Rendering.hpp", 102, (uint64_t)"", 0, (uint64_t)v166, v167, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v177 < 0)
      operator delete(v175[0]);
    abort();
  }
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 16))(a1, a2);
  kdebug_trace();
  v150 = v169;
  if (v169)
  {
    v151 = (unint64_t *)&v169->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v172;
  if (v172)
  {
    v154 = (unint64_t *)&v172->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v174;
  if (!v174)
    goto LABEL_122;
  v157 = (unint64_t *)&v174->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    if (!v181)
      return;
  }
  else
  {
LABEL_122:
    if (!v181)
      return;
  }
  v159 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v160 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
}

void sub_223CEBEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a15);
  sub_223224234(v30 - 80);
  _Unwind_Resume(a1);
}

int8x16_t sub_223CEC0BC@<Q0>(float32x2_t *a1@<X0>, float *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>, unint64_t a5@<D7>)
{
  unint64_t v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int64x2_t v49;
  int64x2_t v50;
  float64x2_t v51;
  int64x2_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64x2_t v55;
  int8x16_t result;
  double v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float32x2_t v61;
  uint64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  int64x2_t v70;
  double v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float64x2_t v78;
  int8x16_t v79;
  std::string *v81;
  std::string::size_type size;
  std::string v83;

  if (*a3 == 1)
  {
    v57 = *a2;
    v58 = a2[1] - v57;
    v59 = vcvtq_f64_f32(a1[2]);
    v60 = vcvtq_f64_f32(a1[3]);
    v61 = a1[11];
    v62.i64[0] = v61.u32[0];
    v62.i64[1] = v61.u32[1];
    __asm { FMOV            V5.2D, #-0.5 }
    v64 = vaddq_f64(vsubq_f64(vcvtq_f64_u64(v62), v60), _Q5);
    v65 = vdivq_f64(vaddq_f64(v64, v64), v59);
    v66 = vsubq_f64(_Q5, v60);
    v67 = vdivq_f64(vaddq_f64(v66, v66), v59);
    v68 = vsubq_f64(v65, v67);
    v69 = 2.0 / v68.f64[0];
    v70 = (int64x2_t)vdivq_f64(vnegq_f64(vaddq_f64(v67, v65)), v68);
    v71 = -v57 / v58;
    _Q5.f64[0] = 0.0;
    _Q5.f64[1] = -1.0 / v58;
    v72 = vnegq_f64((float64x2_t)COERCE_UNSIGNED_INT64(2.0 / v68.f64[1]));
    v73 = vnegq_f64(_Q5);
    v74 = (float64x2_t)vdupq_lane_s64(0x8000000000000000, 0);
    v74.f64[0] = v69;
    *(float32x2_t *)&v74.f64[0] = vcvt_f32_f64(v74);
    LODWORD(v65.f64[0]) = LODWORD(v74.f64[0]);
    v75 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&v74.f64[0], v72);
    v76 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)0x8000000080000000, v73);
    __asm { FMOV            V3.2D, #1.0 }
    *(_QWORD *)&v78.f64[0] = vdupq_laneq_s64(v70, 1).u64[0];
    v78.f64[1] = v71;
    v79 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip1q_s64(_Q3, v70)), v78);
    __asm { FMOV            V2.4S, #1.0 }
    *(int8x16_t *)(a4 + 32) = vextq_s8(v76, v79, 4uLL);
    *(int8x16_t *)(a4 + 48) = vextq_s8(v79, vextq_s8(_Q2, _Q2, 0xCuLL), 4uLL);
    result = vextq_s8(v75, v76, 4uLL);
    *(_OWORD *)a4 = LODWORD(v65.f64[0]);
    *(int8x16_t *)(a4 + 16) = result;
  }
  else
  {
    if (*a3)
    {
      sub_223CEC4C8((uint64_t)&v83, a3);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v83;
      else
        v81 = (std::string *)v83.__r_.__value_.__r.__words[0];
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        size = v83.__r_.__value_.__l.__size_;
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Rendering.cpp", 173, (uint64_t)"", 0, (uint64_t)v81, size, (void (*)(void **))sub_22457406C);
      std::string::~string(&v83);
      abort();
    }
    v6 = a2[1];
    v7 = v6 - *a2;
    v8 = a1[2].f32[0];
    v9 = a1[2].f32[1];
    v10 = a1[3].f32[0];
    v11 = a1[3].f32[1];
    LODWORD(a5) = a1[11].i32[0];
    LODWORD(v5) = a1[11].i32[1];
    v12 = *a2;
    v13 = ((double)a5 - v10 + -0.5) * v12 / v8;
    v14 = (-0.5 - v10) * v12 / v8;
    v15 = ((double)v5 - v11 + -0.5) * v12 / v9;
    v16 = (-0.5 - v11) * v12 / v9;
    *(double *)&v17 = (v12 + v12) / (v13 - v14);
    v18 = (v14 + v13) / (v13 - v14);
    v19 = v15 - v16;
    v20 = (v12 + v12) / (v15 - v16);
    v21 = v16 + v15;
    v22 = v21 / v19;
    v23.f64[0] = (float)((float)-(float)(v6 + *a2) / v7);
    v24 = v6 * -2.0 * v12 / v7;
    *(double *)&v25 = v21 / v12;
    v26.f64[0] = 0.0;
    v26.f64[1] = v20;
    v27 = vmulq_f64((float64x2_t)v17, (float64x2_t)0);
    v28 = vmlaq_f64(vmlaq_f64((float64x2_t)v17, (float64x2_t)0, v26), (float64x2_t)0, (float64x2_t)0);
    v29 = v18;
    v30 = v22;
    v31 = vaddq_f64(v28, (float64x2_t)0);
    v32 = vmulq_f64((float64x2_t)*(unint64_t *)&v29, (float64x2_t)0);
    v23.f64[1] = v24;
    v33 = vaddq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)*(unint64_t *)&v29, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v30), (float64x2_t)0, v23), (float64x2_t)xmmword_22466F4F0);
    v34 = vaddq_f64(vmlaq_f64(vaddq_f64(v26, v27), (float64x2_t)0, (float64x2_t)0), (float64x2_t)0);
    v35 = vaddq_f64(vmlaq_f64(vaddq_f64((float64x2_t)*(unint64_t *)&v30, v32), (float64x2_t)0, v23), (float64x2_t)xmmword_22466F4F0);
    v36 = vmlaq_f64(v27, (float64x2_t)0, v26);
    __asm { FMOV            V3.2D, #0.5 }
    v42 = vaddq_f64(vmlaq_f64(v36, (float64x2_t)0, _Q3), (float64x2_t)0);
    v43 = vmlaq_f64(v32, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v30);
    v44 = vaddq_f64(vmlaq_f64(v43, _Q3, v23), (float64x2_t)xmmword_22466F500);
    v45 = vaddq_f64(vmlaq_f64(v36, (float64x2_t)0, (float64x2_t)0), (float64x2_t)0);
    v46 = vaddq_f64(vmlaq_f64(v43, (float64x2_t)0, v23), (float64x2_t)xmmword_224649990);
    v47 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v31.f64[0]), (float64x2_t)xmmword_2246499A0, v31, 1), (float64x2_t)0, v33.f64[0]), (float64x2_t)0, v33, 1);
    v48 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v31.f64[0]), (float64x2_t)v25, v31, 1), (float64x2_t)xmmword_224649990, v33.f64[0]), (float64x2_t)xmmword_224649980, v33, 1);
    v49 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v34.f64[0]), (float64x2_t)xmmword_2246499A0, v34, 1), (float64x2_t)0, v35.f64[0]), (float64x2_t)0, v35, 1);
    v50 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v34.f64[0]), (float64x2_t)v25, v34, 1), (float64x2_t)xmmword_224649990, v35.f64[0]), (float64x2_t)xmmword_224649980, v35, 1);
    v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v42.f64[0]), (float64x2_t)xmmword_2246499A0, v42, 1), (float64x2_t)0, v44.f64[0]), (float64x2_t)0, v44, 1);
    v52 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v42.f64[0]), (float64x2_t)v25, v42, 1), (float64x2_t)xmmword_224649990, v44.f64[0]), (float64x2_t)xmmword_224649980, v44, 1);
    v53 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2245F5CB0, v45.f64[0]), (float64x2_t)xmmword_2246499A0, v45, 1), (float64x2_t)0, v46.f64[0]), (float64x2_t)0, v46, 1);
    v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v45.f64[0]), (float64x2_t)v25, v45, 1), (float64x2_t)xmmword_224649990, v46.f64[0]), (float64x2_t)xmmword_224649980, v46, 1);
    result.i64[0] = *(_QWORD *)&v54.f64[1];
    *(float32x2_t *)a4 = vcvt_f32_f64((float64x2_t)vzip1q_s64(v47, v49));
    *(float *)v31.f64 = v51.f64[0];
    *(_DWORD *)(a4 + 8) = LODWORD(v31.f64[0]);
    v55 = (float64x2_t)vextq_s8(v53, v48, 8uLL);
    v53.i64[1] = v47.i64[1];
    v47.i64[0] = vdupq_laneq_s64(v49, 1).u64[0];
    v47.i64[1] = *(_QWORD *)&v51.f64[1];
    *(float32x4_t *)(a4 + 12) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v53), (float64x2_t)v47);
    *(_QWORD *)&v54.f64[1] = v48.i64[1];
    v48.i64[0] = vdupq_laneq_s64(v50, 1).u64[0];
    v48.i64[1] = v52.i64[1];
    *(float32x4_t *)(a4 + 28) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v55), (float64x2_t)vzip1q_s64(v50, v52));
    *(float32x4_t *)(a4 + 44) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v54), (float64x2_t)v48);
    *(float *)result.i32 = *(double *)result.i64;
    *(_DWORD *)(a4 + 60) = result.i32[0];
  }
  return result;
}

void sub_223CEC4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CEC4C8(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _DWORD v19[6];
  int v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v20 = 0;
  sub_223714EB8(v19, "Unsupported rendering projection type: ");
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_223195210(v3);
  v23[0] = v3;
  if (*a2)
    v4 = "OrthographicProjection";
  else
    v4 = "PerspectiveProjection";
  if (*a2)
    v5 = 22;
  else
    v5 = 21;
  sub_2231813E8((_QWORD *)(v3 + 16), (uint64_t)v4, v5);
  v6 = *(_DWORD *)(v3 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v3 + 112);
    v10 = *(_QWORD *)(v3 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v3 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v3 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_32;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v22) = 0;
      v8 = __dst;
      goto LABEL_20;
    }
    v11 = *(const void **)(v3 + 40);
    v7 = *(_QWORD *)(v3 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_32:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v22 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_19;
  }
  HIBYTE(v22) = v7;
  v8 = __dst;
  if (v7)
LABEL_19:
    memmove(v8, v11, v7);
LABEL_20:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v23[0];
  if (v23[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v23[0] = v19;
  v23[1] = __dst;
  v23[2] = v19;
  v23[3] = __dst;
  v23[4] = __dst;
  if (v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, _DWORD *))off_24EC638A0[v20])(&v24, v19);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v20 == -1)
    sub_22316DD70();
  v23[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC638B8[v20])(v23, v19);
  if (v20 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC63888[v20])(v23, v19);
  return result;
}

void sub_223CEC798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v2, 0x10B2C40EED050F3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEC7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEC7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22319B964((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223CEC820(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t *v50;

  *(_QWORD *)a1 = &off_24EC638E0;
  *(_QWORD *)(a1 + 88) = &unk_24EC63930;
  v2 = *(_QWORD *)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    v3 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 328) - v2) >> 2);
    v48 = v2;
    v49 = v3;
    v4 = *(unsigned int *)(a1 + 340);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v50 = &v48;
    ((void (*)(uint64_t **, uint64_t))off_24EC63998[v4])(&v50, a1 + 336);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 304);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 288);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 272);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 256);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 240);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 224);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 208);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(std::__shared_weak_count **)(a1 + 192);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 176);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)(a1 + 160);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(std::__shared_weak_count **)(a1 + 144);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(_QWORD *)(a1 + 88) = off_24EC63798;
  sub_22323DFE4(a1 + 112, *(_QWORD *)(a1 + 120));
  *(_QWORD *)a1 = off_24EC63830;
  v38 = *(std::__shared_weak_count **)(a1 + 48);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(std::__shared_weak_count **)(a1 + 32);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v44)
    return a1;
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (v46)
    return a1;
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  return a1;
}

uint64_t sub_223CECC0C(uint64_t a1)
{
  return sub_223CEC820(a1 - 88);
}

void sub_223CECC14(uint64_t a1)
{
  sub_223CEC820(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223CECC38(uint64_t a1)
{
  sub_223CEC820(a1 - 88);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223CECC60(uint64_t a1)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 56) = 0x3700000037;
  *(_OWORD *)(a1 + 64) = xmmword_22466F550;
  *(_WORD *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 82) = 0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)a1 = &off_24EC638E0;
  *(_QWORD *)(a1 + 88) = &unk_24EC63930;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_2232285F8((_QWORD *)(a1 + 136));
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_2232291A8((_QWORD *)(a1 + 168));
  sub_2232291A8((_QWORD *)(a1 + 184));
  sub_2232291A8((_QWORD *)(a1 + 200));
  sub_2232291A8((_QWORD *)(a1 + 216));
  sub_2232291A8((_QWORD *)(a1 + 232));
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 336) = xmmword_22466EC90;
  return a1;
}

void sub_223CECD68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v6;
  sub_223167354(v9);
  sub_223167354(v8);
  sub_223167354(v7);
  sub_223167354(v5);
  sub_223167354(v4);
  sub_223167354(v3);
  v1[11] = off_24EC63798;
  sub_22323DFE4(v2, v1[15]);
  sub_223CEB3A4(v1);
  _Unwind_Resume(a1);
}

void sub_223CECDE8()
{
  JUMPOUT(0x223CECDC0);
}

void **sub_223CECDF0(uint64_t a1, void ***a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t *v81;
  uint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  float *v125;
  uint64_t v126;
  unsigned int v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v141;
  uint64_t *v142;
  std::__shared_weak_count *v143;
  _QWORD *v144;
  std::__shared_weak_count *v145;
  _QWORD *v146;
  std::__shared_weak_count *v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  void *v150;
  int64x2_t v151;
  int64x2_t v152;
  uint64_t v153;
  float32x4x3_t v154;
  float32x4x3_t v155;

  v153 = *MEMORY[0x24BDAC8D0];
  sub_223227930((uint64_t *)&v150);
  if (!sub_223225C34(a2)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/TriangleWarping.cpp", 44, (uint64_t)"device", 6, (uint64_t)"Expected a valid metal device!", 30, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_BYTE *)(a1 + 82) = 0;
  sub_223CEB49C(a1, a2);
  sub_223CE9B34(a1 + 88, a2);
  sub_223228674((void ***)(a1 + 136), 0, v6, v7, v8, v9, &v148);
  sub_2232285B8(&v148, 2, v10, v11, v12, v13);
  sub_2232285C8(&v148, 1, v14, v15, v16, v17);
  v151 = vdupq_n_s64(0xC0EFFC0000000000);
  v152 = v151;
  sub_2232285D8(&v148, (uint64_t)&v151, v18, v19, v20, v21);
  sub_223228674((void ***)(a1 + 136), (const char *)1, v22, v23, v24, v25, &v146);
  sub_2232285B8(&v146, 2, v26, v27, v28, v29);
  sub_2232285C8(&v146, 1, v30, v31, v32, v33);
  v151 = 0u;
  v152 = 0u;
  sub_2232285D8(&v146, (uint64_t)&v151, v34, v35, v36, v37);
  sub_223228784((void ***)(a1 + 136), v38, v39, v40, v41, v42, &v144);
  sub_2232285B8(&v144, 2, v43, v44, v45, v46);
  sub_2232285C8(&v144, 0, v47, v48, v49, v50);
  sub_2232285EC(&v144, v51, v52, v53, v54, v55);
  sub_223227778(&v142);
  sub_223227804(&v142, 1, v56, v57, v58, v59);
  sub_2232277F4(&v142, 3, v60, v61, v62, v63);
  nullsub_30(a2);
  sub_223227814(&v151, a2, &v142, v64, v65, v66);
  v67 = v151;
  v151 = 0uLL;
  v68 = *(std::__shared_weak_count **)(a1 + 160);
  *(int64x2_t *)(a1 + 152) = v67;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)v151.i64[1];
  if (v151.i64[1])
  {
    v72 = (unint64_t *)(v151.i64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_223EA6BF8(a1 + 312, *a3, a3[1]);
  v74 = *(_QWORD *)(a1 + 312);
  v75 = *(_QWORD *)(a1 + 320);
  nullsub_30(a2);
  v152.i64[1] = 0;
  sub_2232264FC(&v141, a2, v74, (((v75 - v74) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, &v151);
  v81 = (int64x2_t *)v152.i64[1];
  if ((int64x2_t *)v152.i64[1] == &v151)
  {
    v82 = 4;
    v81 = &v151;
    goto LABEL_17;
  }
  if (v152.i64[1])
  {
    v82 = 5;
LABEL_17:
    (*(void (**)(void))(v81->i64[0] + 8 * v82))();
  }
  v83 = v141;
  v141 = 0uLL;
  v84 = *(std::__shared_weak_count **)(a1 + 288);
  *(_OWORD *)(a1 + 280) = v83;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = sub_223226504((void ***)(a1 + 280), v76, v77, v78, v79, v80);
  nullsub_30(a2);
  sub_223226080(&v151, a2, v90, 0, v91, v92);
  v98 = *(std::__shared_weak_count **)(a1 + 304);
  *(int64x2_t *)(a1 + 296) = v151;
  v151 = 0uLL;
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = (std::__shared_weak_count *)v151.i64[1];
  if (v151.i64[1])
  {
    v102 = (unint64_t *)(v151.i64[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v109 = sub_223226520((void ***)(a1 + 296), v93, v94, v95, v96, v97);
  v111 = *(_QWORD *)(a1 + 312);
  v110 = *(_QWORD *)(a1 + 320);
  if (!v109
    && v110 != v111
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (v110 != v111)
  {
    v112 = (v110 - v111) / 12;
    v113 = 12 * v112 - 12;
    if (v113 < 0x54)
    {
      LODWORD(v114) = 0;
      v115 = v109;
LABEL_47:
      v126 = v109 + 12 * v112;
      v127 = 4 * v114;
      do
      {
        *(_DWORD *)v115 = v127;
        *(int8x8_t *)(v115 + 4) = vorr_s8((int8x8_t)vdup_n_s32(v127), (int8x8_t)0x200000001);
        v127 += 4;
        v115 += 12;
      }
      while (v115 != v126);
      goto LABEL_49;
    }
    v116 = v113 / 0xC + 1;
    v114 = v116 & 0x3FFFFFFFFFFFFFF8;
    v115 = v109 + 12 * (v116 & 0x3FFFFFFFFFFFFFF8);
    v117 = (int32x4_t)xmmword_2246499B0;
    v118.i64[0] = 0x1000000010;
    v118.i64[1] = 0x1000000010;
    v119.i64[0] = 0x1100000011;
    v119.i64[1] = 0x1100000011;
    v120.i64[0] = 0x1200000012;
    v120.i64[1] = 0x1200000012;
    v121.i64[0] = 0x800000008;
    v121.i64[1] = 0x800000008;
    v122 = v116 & 0x3FFFFFFFFFFFFFF8;
    v123 = (float *)v109;
    do
    {
      v154.val[0] = (float32x4_t)vshlq_n_s32(v117, 2uLL);
      v154.val[1] = (float32x4_t)(*(_OWORD *)v154.val | __PAIR128__(0x100000001, 0x100000001));
      v154.val[2] = (float32x4_t)(*(_OWORD *)v154.val | __PAIR128__(0x200000002, 0x200000002));
      v155.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v154.val[0], v118);
      v155.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v154.val[0], v119);
      v155.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v154.val[0], v120);
      v124 = v123 + 24;
      vst3q_f32(v123, v154);
      v125 = v123 + 12;
      vst3q_f32(v125, v155);
      v117 = vaddq_s32(v117, v121);
      v123 = v124;
      v122 -= 8;
    }
    while (v122);
    if (v116 != v114)
      goto LABEL_47;
  }
LABEL_49:
  *(_QWORD *)(a1 + 344) = *(_QWORD *)a3;
  v128 = v143;
  if (v143)
  {
    v129 = (unint64_t *)&v143->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v145;
  if (v145)
  {
    v132 = (unint64_t *)&v145->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v147;
  if (v147)
  {
    v135 = (unint64_t *)&v147->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v149;
  if (v149)
  {
    v138 = (unint64_t *)&v149->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  return sub_22322797C(&v150, v104, v105, v106, v107, v108);
}

void sub_223CED408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v24;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a24;
  if (a24 == v24)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a16);
  sub_223167354((uint64_t)&a18);
  sub_22322797C(&a20, v28, v29, v30, v31, v32);
  _Unwind_Resume(a1);
}

void sub_223CED4E4(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_223CED4F8(uint64_t a1, const char *a2, uint64_t a3, void ***a4, void ***a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  uint64_t v58;
  unsigned int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _QWORD v151[2];
  void **v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  uint32x2_t v155;
  int v156;
  char __p[20];
  char v158;
  char *v159;
  uint64_t v160;
  float32x4x3_t v161;
  float32x4x3_t v162;

  v160 = *MEMORY[0x24BDAC8D0];
  v11 = a1 + 264;
  if (*(_DWORD *)(a3 + 88) == *(_DWORD *)(a1 + 344) && *(_DWORD *)(a3 + 92) == *(_DWORD *)(a1 + 348))
    goto LABEL_44;
  sub_2232265F4((uint64_t)a2, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, &v152);
  sub_223EA6BF8(a1 + 312, *(_DWORD *)(a3 + 88), *(_DWORD *)(a3 + 92));
  v12 = *(_QWORD *)(a1 + 312);
  v13 = *(_QWORD *)(a1 + 320);
  nullsub_30(&v152);
  v159 = 0;
  sub_2232264FC(&v154, &v152, v12, (((v13 - v12) & 0xFFFFFFFC) + 4095) & 0xFFFFF000, 0, __p);
  v19 = v159;
  if (v159 == __p)
  {
    v20 = 4;
    v19 = __p;
    goto LABEL_7;
  }
  if (v159)
  {
    v20 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  }
  v21 = *(std::__shared_weak_count **)(a1 + 288);
  *(_OWORD *)(v11 + 16) = v154;
  v154 = 0uLL;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = sub_223226504((void ***)(v11 + 16), v14, v15, v16, v17, v18);
  nullsub_30(&v152);
  sub_223226080(__p, &v152, v27, 0, v28, v29);
  v35 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)__p;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v39 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = sub_223226520((void ***)(v11 + 32), v30, v31, v32, v33, v34);
  v43 = *(_QWORD *)(a1 + 312);
  v42 = *(_QWORD *)(a1 + 320);
  if (!v41
    && v42 != v43
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (v42 == v43)
    goto LABEL_39;
  v44 = (v42 - v43) / 12;
  v45 = 12 * v44 - 12;
  if (v45 < 0x54)
  {
    LODWORD(v46) = 0;
    v47 = v41;
LABEL_37:
    v58 = v41 + 12 * v44;
    v59 = 4 * v46;
    do
    {
      *(_DWORD *)v47 = v59;
      *(int8x8_t *)(v47 + 4) = vorr_s8((int8x8_t)vdup_n_s32(v59), (int8x8_t)0x200000001);
      v59 += 4;
      v47 += 12;
    }
    while (v47 != v58);
    goto LABEL_39;
  }
  v48 = v45 / 0xC + 1;
  v46 = v48 & 0x3FFFFFFFFFFFFFF8;
  v47 = v41 + 12 * (v48 & 0x3FFFFFFFFFFFFFF8);
  v49 = (int32x4_t)xmmword_2246499B0;
  v50.i64[0] = 0x1000000010;
  v50.i64[1] = 0x1000000010;
  v51.i64[0] = 0x1100000011;
  v51.i64[1] = 0x1100000011;
  v52.i64[0] = 0x1200000012;
  v52.i64[1] = 0x1200000012;
  v53.i64[0] = 0x800000008;
  v53.i64[1] = 0x800000008;
  v54 = v48 & 0x3FFFFFFFFFFFFFF8;
  v55 = (float *)v41;
  do
  {
    v161.val[0] = (float32x4_t)vshlq_n_s32(v49, 2uLL);
    v161.val[1] = (float32x4_t)(*(_OWORD *)v161.val | __PAIR128__(0x100000001, 0x100000001));
    v161.val[2] = (float32x4_t)(*(_OWORD *)v161.val | __PAIR128__(0x200000002, 0x200000002));
    v162.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v161.val[0], v50);
    v162.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v161.val[0], v51);
    v162.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v161.val[0], v52);
    v56 = v55 + 24;
    vst3q_f32(v55, v161);
    v57 = v55 + 12;
    vst3q_f32(v57, v162);
    v49 = vaddq_s32(v49, v53);
    v55 = v56;
    v54 -= 8;
  }
  while (v54);
  if (v48 != v46)
    goto LABEL_37;
LABEL_39:
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a3 + 88);
  v60 = v153;
  if (v153)
  {
    v61 = (unint64_t *)&v153->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_44:
  sub_2232265F4((uint64_t)a2, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, &v154);
  v68 = *(unsigned int *)(a1 + 344) * (unint64_t)*(unsigned int *)(a1 + 348);
  v69 = 12 * v68;
  if (!sub_223225C34((_QWORD *)(a1 + 248))
    || v69 != sub_223226504((void ***)(a1 + 248), v63, v64, v65, v66, v67))
  {
    nullsub_30(&v154);
    sub_223226080(__p, (void ***)&v154, v69, 0x20u, v70, v71);
    v72 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v73 = *(std::__shared_weak_count **)(a1 + 256);
    *(_OWORD *)(a1 + 248) = v72;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v77 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
  }
  if (!sub_223225C34((_QWORD *)v11) || 4 * v68 != sub_223226504((void ***)v11, v79, v80, v81, v82, v83))
  {
    nullsub_30(&v154);
    sub_223226080(__p, (void ***)&v154, 4 * v68, 0x20u, v84, v85);
    v86 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v87 = *(std::__shared_weak_count **)(a1 + 272);
    *(_OWORD *)v11 = v86;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v91 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
  sub_223226BD8((uint64_t)a2, (uint64_t)&v152);
  v93 = *(_QWORD *)(a3 + 40);
  v151[0] = *(_QWORD *)(a3 + 32);
  v151[1] = v93;
  if ((!sub_223225C34(a4) || !sub_223225C34(a5))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/TriangleWarping.cpp", 237, (uint64_t)"depth && confidence", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v99 = sub_223229314(a4, v94, v95, v96, v97, v98), v99 != sub_223229314(a5, v100, v101, v102, v103, v104))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/TriangleWarping.cpp", 238, (uint64_t)"depth.width() == confidence.width()", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v110 = sub_223229330(a4, v105, v106, v107, v108, v109), v110 != sub_223229330(a5, v111, v112, v113, v114, v115))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/TriangleWarping.cpp", 239, (uint64_t)"depth.height() == confidence.height()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223CEEF34((uint64_t)&v152, "Keyframing.SurfaceWarpFuser.TriangulateDepthImage", 0x31uLL);
  v158 = 19;
  strcpy(__p, "UnprojectDepthImage");
  v116 = sub_2237FB848(a1 + 112, (const void **)__p);
  sub_22322712C((uint64_t)&v152, (_QWORD **)v116, v117, v118, v119, v120);
  if (v158 < 0)
    operator delete(*(void **)__p);
  sub_223227140((uint64_t)&v152, (uint64_t)v151, 0x10u, 0, 0, v121);
  sub_223227180((uint64_t)&v152, a4, 0, 0, v122, v123);
  sub_223227180((uint64_t)&v152, a5, 1u, 0, v124, v125);
  sub_22322715C((uint64_t)&v152, (_QWORD **)(a1 + 248), 0, 1u, 1, v126);
  sub_22322715C((uint64_t)&v152, (_QWORD **)v11, 0, 2u, 1, v127);
  v133 = sub_223229314(a4, v128, v129, v130, v131, v132);
  v139 = sub_223229330(a4, v134, v135, v136, v137, v138);
  *(_OWORD *)__p = xmmword_22464FC70;
  v155 = vcvt_u32_f32(vrndp_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(v139, v133)), (float32x2_t)vdup_n_s32(0x3D800000u))));
  v156 = 1;
  sub_2232271B4((uint64_t)&v152, (uint64_t)&v155, (uint64_t)__p, v140, v141, v142);
  sub_223226DF0((uint64_t)&v152, v143, v144, v145, v146, v147);
  sub_223226D74(&v152);
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
}

void sub_223CEDCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void **a25)
{
  void **v25;
  void **p_p;
  uint64_t v28;

  p_p = a25;
  if (a25 == v25)
  {
    v28 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a25)
    {
      sub_223167354((uint64_t)&a12);
      _Unwind_Resume(a1);
    }
    v28 = 5;
  }
  (*((void (**)(void))*p_p + v28))();
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_223CEDDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEDDE8(uint64_t a1, void ***a2, unsigned int *a3)
{
  void ***v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void ***v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void ***v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  uint64_t *v137;
  std::__shared_weak_count *v138;

  v6 = (void ***)(a1 + 168);
  if (sub_223225C34((_QWORD *)(a1 + 168))
    && sub_223229314(v6, v7, v8, v9, v10, v11) == *a3
    && sub_223229330(v6, v12, v13, v14, v15, v16) == a3[1])
  {
    goto LABEL_23;
  }
  sub_2232290AC(0x37u, (const char *)*a3, a3[1], 0, &v137);
  sub_223229188(&v137, 2, v17, v18, v19, v20);
  sub_223229198(&v137, 5u, v21, v22, v23, v24);
  nullsub_30(a2);
  sub_223229208(&v136, a2, &v137, v25, v26, v27);
  v32 = v136;
  v136 = 0uLL;
  v33 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v32;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_223228674((void ***)(a1 + 136), 0, v28, v29, v30, v31, &v136);
  sub_2232285A4((_QWORD **)&v136, v6, v39, v40, v41, v42);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v138;
  if (!v138)
    goto LABEL_23;
  v47 = (unint64_t *)&v138->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_23:
    v49 = (void ***)(a1 + 184);
    if (sub_223225C34((_QWORD *)(a1 + 184)))
    {
LABEL_24:
      if (sub_223229314(v49, v50, v51, v52, v53, v54) == *a3
        && sub_223229330(v49, v55, v56, v57, v58, v59) == a3[1])
      {
        goto LABEL_47;
      }
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v49 = (void ***)(a1 + 184);
    if (sub_223225C34((_QWORD *)(a1 + 184)))
      goto LABEL_24;
  }
  sub_2232290AC(0x37u, (const char *)*a3, a3[1], 0, &v137);
  sub_223229188(&v137, 2, v60, v61, v62, v63);
  sub_223229198(&v137, 5u, v64, v65, v66, v67);
  nullsub_30(a2);
  sub_223229208(&v136, a2, &v137, v68, v69, v70);
  v75 = v136;
  v136 = 0uLL;
  v76 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v75;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  sub_223228674((void ***)(a1 + 136), (const char *)1, v71, v72, v73, v74, &v136);
  sub_2232285A4((_QWORD **)&v136, v49, v82, v83, v84, v85);
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v138;
  if (v138)
  {
    v90 = (unint64_t *)&v138->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      v92 = (void ***)(a1 + 232);
      if (sub_223225C34((_QWORD *)(a1 + 232)))
        goto LABEL_48;
      goto LABEL_52;
    }
  }
LABEL_47:
  v92 = (void ***)(a1 + 232);
  if (sub_223225C34((_QWORD *)(a1 + 232)))
  {
LABEL_48:
    if (sub_223229314(v92, v93, v94, v95, v96, v97) == *a3
      && sub_223229330(v92, v98, v99, v100, v101, v102) == a3[1])
    {
      return;
    }
  }
LABEL_52:
  sub_2232290AC(0xFCu, (const char *)*a3, a3[1], 0, &v137);
  sub_223229188(&v137, 2, v103, v104, v105, v106);
  sub_223229198(&v137, 4u, v107, v108, v109, v110);
  nullsub_30(a2);
  sub_223229208(&v136, a2, &v137, v111, v112, v113);
  v119 = v136;
  v136 = 0uLL;
  v120 = *(std::__shared_weak_count **)(a1 + 240);
  *(_OWORD *)(a1 + 232) = v119;
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  sub_223228784((void ***)(a1 + 136), v114, v115, v116, v117, v118, &v136);
  sub_2232285A4((_QWORD **)&v136, v92, v126, v127, v128, v129);
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v138;
  if (v138)
  {
    v134 = (unint64_t *)&v138->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
}

void sub_223CEE2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223CEE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223CEE34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE3D8(uint64_t a1, const char *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _OWORD v43[4];
  void **v44;
  std::__shared_weak_count *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;

  sub_2232265F4((uint64_t)a2, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, &v44);
  sub_223CEC0BC(a4, flt_22466F560, byte_22466F568, (uint64_t)&v46, v10);
  v11 = *(float32x4_t *)a3[6].f32;
  v12 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v47, a3[2], 1), v48, *(float32x4_t *)a3[2].f32, 2), v49, *(float32x4_t *)a3[2].f32, 3);
  v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v47, a3[4], 1), v48, *(float32x4_t *)a3[4].f32, 2), v49, *(float32x4_t *)a3[4].f32, 3);
  v43[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)a3->f32)), v47, *a3, 1), v48, *(float32x4_t *)a3->f32, 2), v49, *(float32x4_t *)a3->f32, 3);
  v43[1] = v12;
  v43[2] = v13;
  v43[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, v11.f32[0]), v47, *(float32x2_t *)v11.f32, 1), v48, v11, 2), v49, v11, 3);
  sub_223CEDDE8(a1, &v44, (unsigned int *)&a4[11]);
  sub_223226BC8((uint64_t)a2, a1 + 136, (uint64_t)&v46);
  sub_223CEEDEC((uint64_t)&v46, "Keyframing.SurfaceWarpFuser.RenderTriangles", 0x2BuLL);
  sub_2232284C8((uint64_t)&v46, (_QWORD **)(a1 + 152), v14, v15, v16, v17);
  sub_223228484((uint64_t)&v46, 0, v18, v19, v20, v21);
  sub_223228474((uint64_t)&v46, 1, v22, v23, v24, v25);
  sub_223228420((uint64_t)&v46, (_QWORD **)(a1 + 40), v26, v27, v28, v29);
  sub_223228434((uint64_t)&v46, (uint64_t)v43, 0x40u, 0, 0, v30);
  sub_223228450((uint64_t)&v46, (_QWORD **)(a1 + 248), 0, 1u, 1, v31);
  sub_223228450((uint64_t)&v46, (_QWORD **)(a1 + 264), 0, 2u, 1, v32);
  sub_223228450((uint64_t)&v46, (_QWORD **)(a1 + 280), 0, 3u, 1, v33);
  sub_2232284A4((uint64_t)&v46, (_QWORD **)(a1 + 248), 0, 0, 1, v34);
  sub_2232284FC((uint64_t)&v46, 3, (*(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312)) >> 2, 1, (_QWORD **)(a1 + 296));
  sub_223226DF0((uint64_t)&v46, v35, v36, v37, v38, v39);
  sub_223226D74(&v46);
  v40 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_223CEE5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CEE618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_223226D74((uint64_t *)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_223CEE638@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_223CEE68C@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_223CEE6E8(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "NewMeshDepthVS");
}

void sub_223CEE710(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "NewMeshDepthFS");
}

void sub_223CEE738(_QWORD *a1@<X8>)
{
  char __p[20];
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2 = 275;
  strcpy(__p, "UnprojectDepthImage");
  sub_223800880(a1, (uint64_t)__p, 1uLL);
  if ((char)v2 < 0)
    operator delete(*(void **)__p);
}

void sub_223CEE7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223CEE7EC@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Shaders.metallib");
  return result;
}

char *sub_223CEE840@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_2245C65C0;
  strcpy(result, "Reconstruction_Gpu_Archive.metallib");
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_223CEE89C(_QWORD *a1@<X8>)
{
  char __p[20];
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2 = 275;
  strcpy(__p, "UnprojectDepthImage");
  sub_223800880(a1, (uint64_t)__p, 1uLL);
  if ((char)v2 < 0)
    operator delete(*(void **)__p);
}

void sub_223CEE930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CEE94C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t i;
  uint64_t v46;
  _QWORD **v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD **v51;
  int v52;
  _QWORD *v53;

  v5 = (_QWORD **)*a1;
  v6 = (a2 - *a1) / 12;
  v7 = *a1 + 12 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = a1[1];
  v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 2)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v7) >> 2)) >= a5)
    {
      v20 = (uint64_t *)((char *)a3 + 12 * a5);
      v21 = a1[1];
    }
    else
    {
      v20 = (uint64_t *)((char *)a3 + 4 * ((uint64_t)(v12 - v7) >> 2));
      v21 = a1[1];
      if (v20 != a4)
      {
        v22 = (uint64_t *)((char *)a3 + 4 * ((uint64_t)(v12 - v7) >> 2));
        v23 = a1[1];
        do
        {
          v24 = *v22;
          *(_DWORD *)(v23 + 8) = *((_DWORD *)v22 + 2);
          *(_QWORD *)v23 = v24;
          v23 += 12;
          v22 = (uint64_t *)((char *)v22 + 12);
          v21 += 12;
        }
        while (v22 != a4);
      }
      a1[1] = v21;
      if ((uint64_t)(v12 - v7) < 1)
        return v7;
    }
    v25 = v7 + 12 * a5;
    v26 = (uint64_t *)(v21 - 12 * a5);
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *v26;
        *(_DWORD *)(v27 + 8) = *((_DWORD *)v26 + 2);
        *(_QWORD *)v27 = v28;
        v27 += 12;
        v26 = (uint64_t *)((char *)v26 + 12);
      }
      while ((unint64_t)v26 < v12);
    }
    a1[1] = v27;
    if (v21 != v25)
    {
      v29 = v21 - 12;
      v30 = 4 * ((v21 - v25) >> 2);
      v31 = (uint64_t)v5 + 12 * v6 - 12;
      do
      {
        v32 = *(_QWORD *)(v31 + v30);
        *(_DWORD *)(v29 + 8) = *(_DWORD *)(v31 + v30 + 8);
        *(_QWORD *)v29 = v32;
        v29 -= 12;
        v30 -= 12;
      }
      while (v30);
    }
    if (v20 != a3)
    {
      v33 = v7;
      do
      {
        v34 = *v9;
        *(_DWORD *)(v33 + 8) = *((_DWORD *)v9 + 2);
        *(_QWORD *)v33 = v34;
        v33 += 12;
        v9 = (uint64_t *)((char *)v9 + 12);
      }
      while (v9 != v20);
    }
    return v7;
  }
  v13 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (_QWORD)v5) >> 2);
  if (v13 > 0x1555555555555555)
    sub_22316E078();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0xAAAAAAAAAAAAAAALL)
    v16 = 0x1555555555555555;
  else
    v16 = v15;
  if (v16)
  {
    LODWORD(v53) = v16;
    v17 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v17 == -1)
      sub_22316DD70();
    v51 = &v53;
    v18 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24EC639A8[v17])(&v51, a1 + 3);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v35 = v18 + 12 * v6;
  v36 = 12 * a5;
  v37 = v35 + 12 * a5;
  v38 = v35;
  do
  {
    v39 = *v9;
    *(_DWORD *)(v38 + 8) = *((_DWORD *)v9 + 2);
    *(_QWORD *)v38 = v39;
    v38 += 12;
    v9 = (uint64_t *)((char *)v9 + 12);
    v36 -= 12;
  }
  while (v36);
  v40 = (_QWORD **)*a1;
  v41 = v35;
  if (*a1 != v7)
  {
    v42 = v7;
    v41 = v35;
    do
    {
      v43 = *(_QWORD *)(v42 - 12);
      v42 -= 12;
      v44 = *(_DWORD *)(v42 + 8);
      *(_QWORD *)(v41 - 12) = v43;
      v41 -= 12;
      *(_DWORD *)(v41 + 8) = v44;
    }
    while ((_QWORD **)v42 != v40);
  }
  for (i = a1[1]; v7 != i; v7 += 12)
  {
    v46 = *(_QWORD *)v7;
    *(_DWORD *)(v37 + 8) = *(_DWORD *)(v7 + 8);
    *(_QWORD *)v37 = v46;
    v37 += 12;
  }
  v47 = (_QWORD **)*a1;
  *a1 = v41;
  a1[1] = v37;
  v48 = a1[2];
  a1[2] = v18 + 12 * v19;
  if (v47)
  {
    v51 = v47;
    v52 = -1431655765 * ((unint64_t)(v48 - (_QWORD)v47) >> 2);
    v49 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v49 == -1)
      sub_22316DD70();
    v53 = &v51;
    ((void (*)(_QWORD **, uint64_t *))off_24EC639B8[v49])(&v53, a1 + 3);
  }
  return v35;
}

void sub_223CEECA4(uint64_t a1, std::string::value_type *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;

  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_content())
  {
    sub_223FE32D0(a2, __dst);
    sub_223226784(a1, (uint64_t)__dst, v11, v12, v13, v14);
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (a3 >= 0x17)
  {
    v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v15 = a3 | 7;
    v16 = v15 + 1;
    v10 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)a3;
    v18 = v16 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v18) = a3;
    v10 = __dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v10, a2, a3);
LABEL_11:
  *((_BYTE *)v10 + a3) = 0;
  sub_223226784(a1, (uint64_t)__dst, v6, v7, v8, v9);
LABEL_12:
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_223CEEDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CEEDEC(uint64_t a1, std::string::value_type *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;

  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_content())
  {
    sub_223FE32D0(a2, __dst);
    sub_223226784(a1, (uint64_t)__dst, v11, v12, v13, v14);
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (a3 >= 0x17)
  {
    v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v15 = a3 | 7;
    v16 = v15 + 1;
    v10 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)a3;
    v18 = v16 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v18) = a3;
    v10 = __dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v10, a2, a3);
LABEL_11:
  *((_BYTE *)v10 + a3) = 0;
  sub_223226784(a1, (uint64_t)__dst, v6, v7, v8, v9);
LABEL_12:
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_223CEEF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CEEF34(uint64_t a1, std::string::value_type *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;

  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_content())
  {
    sub_223FE32D0(a2, __dst);
    sub_223226784(a1, (uint64_t)__dst, v11, v12, v13, v14);
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (a3 >= 0x17)
  {
    v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v15 = a3 | 7;
    v16 = v15 + 1;
    v10 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)a3;
    v18 = v16 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v18) = a3;
    v10 = __dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v10, a2, a3);
LABEL_11:
  *((_BYTE *)v10 + a3) = 0;
  sub_223226784(a1, (uint64_t)__dst, v6, v7, v8, v9);
LABEL_12:
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_223CEF05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CEF07C(uint64_t a1, std::string::value_type *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;

  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_content())
  {
    sub_223FE32D0(a2, __dst);
    sub_223226784(a1, (uint64_t)__dst, v11, v12, v13, v14);
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (a3 >= 0x17)
  {
    v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v15 = a3 | 7;
    v16 = v15 + 1;
    v10 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)a3;
    v18 = v16 | 0x8000000000000000;
    __dst[0] = v10;
  }
  else
  {
    HIBYTE(v18) = a3;
    v10 = __dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v10, a2, a3);
LABEL_11:
  *((_BYTE *)v10 + a3) = 0;
  sub_223226784(a1, (uint64_t)__dst, v6, v7, v8, v9);
LABEL_12:
  if (SHIBYTE(v18) < 0)
    operator delete(__dst[0]);
}

void sub_223CEF1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CEF1C4@<X0>(void ***a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  void *v20[2];
  char v21;
  void **v22;
  std::__shared_weak_count *v23;
  std::string v24;
  std::string __p;
  std::string v26;
  char v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  sub_223195210((uint64_t)v28);
  sub_223CEFFD4(a2, v29, 1, &v26);
  if (!v27)
  {
    sub_2236AC340(v28, &v24);
    sub_223CEF540(&__p, (uint64_t *)&v24);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Utils.cpp", 40, (uint64_t)"", 0, (uint64_t)p_p, size, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    abort();
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    sub_223197FA4(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    __p = v26;
  sub_223227CCC(&v22);
  nullsub_30(a1);
  sub_223227F90(a3, a1, (uint64_t)&__p, &v22);
  if (!sub_223225C34(a3))
  {
    sub_223227CD4(&v22, v6, v7, v8, v9, v10, (uint64_t)v20);
    sub_223CEF5D0(&v24, "Invalid library ", (uint64_t *)&__p, (uint64_t *)v20);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v24;
    else
      v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      v19 = v24.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Utils.cpp", 47, (uint64_t)"", 0, (uint64_t)v18, v19, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (v21 < 0)
      operator delete(v20[0]);
    abort();
  }
  v11 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_11:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_12:
  if (v27 && SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v28[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v29[0] = v14;
  v29[1] = MEMORY[0x24BEDB848] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v31);
}

void sub_223CEF458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  sub_223167354(v39);
  sub_223167354((uint64_t)&a15);
  if (a28 < 0)
    operator delete(a23);
  if (a35)
  {
    if (a34 < 0)
      operator delete(a29);
  }
  sub_223195348((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_223CEF540(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid resource path: ";
  v4[1] = 23;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_223CEF5D0(std::string *a1, char *__s, uint64_t *a3, uint64_t *a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12[0] = __s;
  v7 = strlen(__s);
  v8 = *((unsigned __int8 *)a3 + 23);
  v9 = (uint64_t *)*a3;
  if ((v8 & 0x80u) != 0)
    v8 = a3[1];
  else
    v9 = a3;
  v12[1] = v7;
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = " : ";
  v10 = *((unsigned __int8 *)a4 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a4;
  else
    v11 = (uint64_t *)*a4;
  if ((v10 & 0x80u) != 0)
    v10 = a4[1];
  v12[5] = 3;
  v12[6] = v11;
  v12[7] = v10;
  sub_2231A9820((uint64_t)v12, (uint64_t)&v13, 0, 0, a1);
}

void sub_223CEF6A8(void ***a1@<X0>, std::string::size_type a2@<X1>, _BYTE *a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *p_p;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  void **v41;
  std::__shared_weak_count *v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  void *v45[2];
  char v46;
  std::string __p;
  std::string v48;
  char v49;
  _QWORD v50[2];
  _QWORD v51[11];
  char v52;
  uint64_t v53;
  __int128 v54;
  char v55;

  LOBYTE(v54) = 0;
  v55 = 0;
  if (!sub_223CEFC14())
  {
    *a3 = 0;
    a3[16] = 0;
    if (!v55)
      return;
    goto LABEL_43;
  }
  sub_223195210((uint64_t)v50);
  sub_223CEFFD4(a2, v51, 1, &v48);
  if (!v49)
  {
    sub_2236AC340(v50, v45);
    sub_223CEFCC4(&__p, (uint64_t *)v45);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Utils.cpp", 71, (uint64_t)"", 0, (uint64_t)p_p, size, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v46 < 0)
      operator delete(v45[0]);
    abort();
  }
  sub_223225968(&v43);
  memset(&__p, 0, sizeof(__p));
  v6 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v48;
  else
    v7 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = v48.__r_.__value_.__l.__size_;
  sub_2231816F0(&__p, v7, (std::string *)((char *)v7 + v6));
  sub_2232259E4(&v43, (uint64_t)&__p, v8, v9, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_223227CCC(&v41);
  nullsub_30(a1);
  sub_223225C30(&__p, a1, &v43, &v41, v12, v13);
  v14 = __p.__r_.__value_.__r.__words[0];
  if (v55)
  {
    v15 = __p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v54 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v55 = 1;
  }
  v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!sub_223225C34(&v54))
  {
    sub_223227CD4(&v41, v22, v23, v24, v25, v26, (uint64_t)v45);
    sub_223CEF5D0(&__p, "Invalid archive ", (uint64_t *)&v48, (uint64_t *)v45);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v40 = __p.__r_.__value_.__l.__size_;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Gpu/src/Utils.cpp", 80, (uint64_t)"", 0, (uint64_t)v39, v40, (void (*)(void **))sub_22457406C);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v46 < 0)
      operator delete(v45[0]);
    abort();
  }
  *a3 = 0;
  a3[16] = 0;
  if (v55)
  {
    *(_OWORD *)a3 = v54;
    v54 = 0uLL;
    a3[16] = 1;
  }
  v27 = v42;
  if (v42)
  {
    v28 = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v50[0] = *MEMORY[0x24BEDB7F0];
  v33 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v50 + *(_QWORD *)(v50[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v51[0] = v33;
  v51[1] = MEMORY[0x24BEDB848] + 16;
  if (v52 < 0)
    operator delete((void *)v51[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v53);
  if (v55)
  {
LABEL_43:
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

void sub_223CEFAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  if (a32)
  {
    if (a31 < 0)
      operator delete(a26);
  }
  sub_223195348((uint64_t)&a34);
  sub_223224234(v36 - 80);
  _Unwind_Resume(a1);
}

void sub_223CEFC00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223224234(v1 - 80);
  _Unwind_Resume(a1);
}

BOOL sub_223CEFC14()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v10;
  std::__shared_weak_count *v11;
  void *v12;

  sub_223227930((uint64_t *)&v12);
  sub_223CEFED0(&v10);
  v5 = sub_223225C34(&v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_22322797C(&v12, v0, v1, v2, v3, v4);
  return v5;
}

void sub_223CEFC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_22322797C((void **)va1, v3, v4, v5, v6, v7);
  _Unwind_Resume(a1);
}

void sub_223CEFCB0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_223CEFCC4(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "Invalid archive path: ";
  v4[1] = 22;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_2231A9820((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

uint64_t sub_223CEFD54(void ***a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char *i;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  __darwin_ct_rune_t v17;
  __darwin_ct_rune_t v18;
  __darwin_ct_rune_t v19;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v23;

  sub_223227C90(a1, a2, a3, a4, a5, a6, __p);
  v11 = v23;
  if ((v23 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v23 & 0x80u) != 0)
    v11 = (uint64_t)__p[1];
  v13 = v11 - 5;
  if (v11 < 5 || (void **)((char *)v12 + v11 - 4) == v12)
    goto LABEL_19;
  for (i = (char *)v12 + 2; ; ++i)
  {
    v15 = __tolower(*(i - 2));
    if (v15 == __tolower(105))
    {
      v16 = __tolower(*(i - 1));
      if (v16 == __tolower(110))
      {
        v17 = __tolower(*i);
        if (v17 == __tolower(116))
        {
          v18 = __tolower(i[1]);
          if (v18 == __tolower(101))
          {
            v19 = __tolower(i[2]);
            if (v19 == __tolower(108))
              break;
          }
        }
      }
    }
    if (!v13)
      goto LABEL_19;
    --v13;
  }
  if (v13 == -5)
  {
LABEL_19:
    v20 = sub_223227CBC(a1, 0x3EFu, v7, v8, v9, v10);
    if ((char)v23 < 0)
      goto LABEL_18;
  }
  else
  {
    v20 = 0;
    if ((char)v23 < 0)
    {
LABEL_18:
      operator delete(__p[0]);
      return v20;
    }
  }
  return v20;
}

void sub_223CEFEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223CEFED0(void ***a1@<X8>)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void ***v7;
  void ***v8;
  void **v9;
  unint64_t *v10;
  unint64_t v11;
  void ***v12;
  void ***v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  void ***v19;

  sub_223227A84(&__p);
  v7 = (void ***)__p;
  v8 = v19;
  if (__p == v19)
  {
LABEL_4:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    while (!sub_223CEFD54(v7, v2, v3, v4, v5, v6))
    {
      v7 += 2;
      if (v7 == v8)
        goto LABEL_4;
    }
    v9 = v7[1];
    *a1 = *v7;
    a1[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 1);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  v12 = (void ***)__p;
  if (__p)
  {
    v13 = v19;
    v14 = __p;
    if (v19 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*(v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 2;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v19 = v12;
    operator delete(v14);
  }
}

void sub_223CEFFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231B888C((void **)va);
  _Unwind_Resume(a1);
}

void sub_223CEFFD4(std::string::size_type a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, std::string *a4@<X8>)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  void **p_dst;
  uint64_t v39;
  uint64_t v40;
  int v41;
  size_t v42;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  unsigned __int8 v48;
  int v49;
  unsigned __int8 v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void **v55;
  uint64_t v56;
  _QWORD *v57;
  size_t v58;
  void *v59;
  unint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  size_t v66;
  const char *v67;
  _QWORD *v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  std::string::size_type *p_size;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  size_t v80;
  void *v81;
  _QWORD *v82;
  size_t v83;
  size_t v84;
  _QWORD *v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::string::size_type v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::string::size_type v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  void **v139;
  uint64_t v140;
  std::string::size_type v141;
  std::string::size_type size;
  std::string *v143;
  unsigned __int8 v144;
  int v145;
  _QWORD *v146;
  std::string *v147;
  std::string::size_type v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char v153;
  unint64_t v154;
  char *__s;
  void **__dst;
  size_t v157;
  int64_t v158;
  void *v159[2];
  char v160;
  char v161;
  _QWORD v162[3];
  int v163;
  const char *v164;
  int v165;
  const char *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  void *__p[2];
  int64_t v170;
  uint64_t v171;
  std::string v172;
  char *v173;
  std::__shared_weak_count *v174;
  _QWORD *v175;
  __int128 v176;
  std::__fs::filesystem::path v177;
  uint64_t v178;
  uint64_t v179;
  const void *v180;
  uint64_t v181;
  const void *v182;
  unint64_t v183;
  void *v184;
  char v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  std::string v189;
  __int128 v190;
  void *v191[2];
  unint64_t v192;
  char v193;
  _QWORD v194[5];

  v194[2] = *MEMORY[0x24BDAC8D0];
  sub_2245671EC((uint64_t)v159);
  if (!v161
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Resource/src/Resource.cpp", 87, (uint64_t)"wrapper_path", 12, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12 = (void *)MEMORY[0x24BDD1488];
  if (v160 >= 0)
    v13 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v8, (uint64_t)v159, v9, v10, v11);
  else
    v13 = objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v8, (uint64_t)v159[0], v9, v10, v11);
  v23 = (void *)objc_msgSend_bundleWithPath_(v12, v14, v13, v15, v16, v17);
  if (!v23
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Resource/src/Resource.cpp", 90, (uint64_t)"bundle", 6, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!objc_msgSend_bundlePath(v23, v18, v19, v20, v21, v22)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Resource/src/Resource.cpp", 92, (uint64_t)"bundle_path", 11, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v34 = (void *)objc_msgSend_resourcePath(v23, v24, v25, v26, v27, v28);
  if (!v34
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Resource/src/Resource.cpp", 94, (uint64_t)"resources_path", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v35 = (const char *)objc_msgSend_UTF8String(v34, v29, v30, v31, v32, v33);
  v36 = strlen(v35);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    p_dst = (void **)operator new(v39 + 1);
    v157 = v37;
    v158 = v40 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v158) = v36;
  p_dst = (void **)&__dst;
  if (v36)
LABEL_19:
    memmove(p_dst, v35, v37);
  *((_BYTE *)p_dst + v37) = 0;
  v41 = SHIBYTE(v158);
  if (v158 >= 0)
    v42 = HIBYTE(v158);
  else
    v42 = v157;
  v43 = v42 + 10;
  if (v42 + 10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v44 = (std::string *)operator new(v45 + 1);
    v189.__r_.__value_.__l.__size_ = v42 + 10;
    v189.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  }
  else
  {
    memset(&v189, 0, sizeof(v189));
    v44 = &v189;
    *((_BYTE *)&v189.__r_.__value_.__s + 23) = v42 + 10;
    if (!v42)
      goto LABEL_34;
  }
  if (v41 >= 0)
    v47 = (void **)&__dst;
  else
    v47 = __dst;
  memmove(v44, v47, v42);
LABEL_34:
  strcpy((char *)v44 + v42, "/.disabled");
  v177.__pn_ = v189;
  std::__fs::filesystem::__status(&v177, 0);
  v48 = v162[0];
  if (SHIBYTE(v177.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v177.__pn_.__r_.__value_.__l.__data_);
    v49 = v48;
    if (!v48)
      goto LABEL_184;
  }
  else
  {
    v49 = LOBYTE(v162[0]);
    if (!LOBYTE(v162[0]))
      goto LABEL_184;
  }
  if (v49 != 255)
  {
    v50 = atomic_load((unsigned __int8 *)&qword_2540CDF88);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDF88))
    {
      sub_22455F53C(&v189);
      sub_223174DE4(&v177, "cv3d.esn.resource");
      sub_2232300E0((uint64_t **)&v189, (uint64_t)&v177, &qword_2540CDF80);
      if (SHIBYTE(v177.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__pn_.__r_.__value_.__l.__data_);
      __cxa_guard_release(&qword_2540CDF88);
    }
    v171 = qword_2540CDF80;
    if (**(int **)(qword_2540CDF80 + 56) <= 4)
    {
      v51 = *(unsigned __int8 *)(qword_2540CDF80 + 72);
      v52 = sub_22322F254(qword_2540CDF80, "OSLogSurrogateAppender", 1, 0);
      v53 = v52;
      if (v51 || v52)
      {
        sub_223195210((uint64_t)&v177);
        v54 = sub_2231813E8(&v177.__pn_.__r_.__value_.__r.__words[2], (uint64_t)"Accessing resource path in:\n\t'", 30);
        if (v158 >= 0)
          v55 = (void **)&__dst;
        else
          v55 = __dst;
        if (v158 >= 0)
          v56 = HIBYTE(v158);
        else
          v56 = v157;
        v57 = sub_2231813E8(v54, (uint64_t)v55, v56);
        sub_2231813E8(v57, (uint64_t)"'\nResource access in this folder may fail, as the target has not been ENABLED for execution.", 92);
        v152 = v51;
        v154 = v53;
        if ((v187 & 0x10) != 0)
        {
          v60 = v186;
          if (v186 < v183)
          {
            v186 = v183;
            v60 = v183;
          }
          v61 = v182;
          v58 = v60 - (_QWORD)v182;
          if (v60 - (unint64_t)v182 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_106;
        }
        else
        {
          if ((v187 & 8) == 0)
          {
            v58 = 0;
            HIBYTE(v170) = 0;
            v59 = __p;
            goto LABEL_62;
          }
          v61 = v180;
          v58 = v181 - (_QWORD)v180;
          if ((unint64_t)(v181 - (_QWORD)v180) > 0x7FFFFFFFFFFFFFF7)
LABEL_106:
            sub_22316DBC0();
        }
        if (v58 >= 0x17)
        {
          v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v62 = v58 | 7;
          v63 = v62 + 1;
          v59 = operator new(v62 + 1);
          __p[1] = (void *)v58;
          v170 = v63 | 0x8000000000000000;
          __p[0] = v59;
        }
        else
        {
          HIBYTE(v170) = v58;
          v59 = __p;
          if (!v58)
          {
LABEL_62:
            *((_BYTE *)v59 + v58) = 0;
            v162[0] = &v171;
            v162[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v162[2] = std::chrono::system_clock::now().__d_.__rep_;
            v163 = 4;
            v164 = "unknown file";
            v165 = 60;
            v167 = 0;
            v168 = 0;
            v166 = "unknown function";
            v64 = __p;
            if (v170 < 0)
              v64 = (void **)__p[0];
            __s = (char *)v64;
            v65 = *(_QWORD *)v162[0];
            v153 = a3;
            if (*(char *)(*(_QWORD *)v162[0] + 39) < 0)
            {
              v67 = *(const char **)(v65 + 16);
              v66 = *(_QWORD *)(v65 + 24);
              v150 = *(_QWORD *)v162[0] + 16;
              v151 = *(_QWORD *)v162[0];
              v68 = a2;
              v70 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v70 & 1) != 0)
                goto LABEL_68;
            }
            else
            {
              v66 = *(unsigned __int8 *)(*(_QWORD *)v162[0] + 39);
              v67 = (const char *)(*(_QWORD *)v162[0] + 16);
              v150 = (uint64_t)v67;
              v151 = *(_QWORD *)v162[0];
              v68 = a2;
              v69 = atomic_load((unsigned __int8 *)&qword_255788F58);
              if ((v69 & 1) != 0)
                goto LABEL_68;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&v189);
              sub_223199C58("com.apple.cv3d", (unint64_t)&v189, &xmmword_255788F40);
              if ((_BYTE)v190 && SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v189.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_68:
            if (byte_255788F57 >= 0)
              v71 = (const char *)&xmmword_255788F40;
            else
              v71 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v72 = byte_255788F57;
            else
              v72 = *((_QWORD *)&xmmword_255788F40 + 1);
            v189.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v71, v67);
            p_size = &v189.__r_.__value_.__l.__size_;
            if (v72 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v72 >= 0x17)
            {
              v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v72 | 7) != 0x17)
                v74 = v72 | 7;
              v75 = v74 + 1;
              p_size = (std::string::size_type *)operator new(v74 + 1);
              v189.__r_.__value_.__r.__words[2] = v72;
              *(_QWORD *)&v190 = v75 | 0x8000000000000000;
              v189.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            }
            else
            {
              BYTE7(v190) = v72;
              if (!v72)
              {
LABEL_82:
                *((_BYTE *)p_size + v72) = 0;
                BYTE8(v190) = 1;
                v76 = v191;
                if (v66 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                a2 = v68;
                if (v66 >= 0x17)
                {
                  v77 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v66 | 7) != 0x17)
                    v77 = v66 | 7;
                  v78 = v77 + 1;
                  a3 = v153;
                  v76 = (void **)operator new(v77 + 1);
                  v191[1] = (void *)v66;
                  v192 = v78 | 0x8000000000000000;
                  v191[0] = v76;
                }
                else
                {
                  HIBYTE(v192) = v66;
                  a3 = v153;
                  if (!v66)
                  {
LABEL_90:
                    *((_BYTE *)v76 + v66) = 0;
                    v193 = 1;
                    v79 = v189.__r_.__value_.__r.__words[0];
                    if (SHIBYTE(v192) < 0)
                      operator delete(v191[0]);
                    if (BYTE8(v190) && SBYTE7(v190) < 0)
                      operator delete((void *)v189.__r_.__value_.__l.__size_);
                    if (v189.__r_.__value_.__r.__words[0])

                    if (!v154 || !*(_QWORD *)(v154 + 24))
                    {
                      os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
                      LODWORD(v189.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v189.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                      v86 = (void *)_os_log_send_and_compose_impl();
                      v87 = v152;
                      if (v86)
                        free(v86);
                      goto LABEL_170;
                    }
                    v80 = _os_log_pack_size();
                    v81 = operator new(v80, (std::align_val_t)8uLL);
                    v82 = (_QWORD *)operator new();
                    *v82 = &off_24EC1F7F0;
                    v82[1] = 0;
                    v82[2] = 0;
                    v82[3] = v81;
                    v172.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
                    v172.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
                    v173 = 0;
                    v174 = 0;
                    v172.__r_.__value_.__r.__words[2] = (std::string::size_type)v82;
                    v83 = strlen(__s);
                    if (v83 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v84 = v83;
                    if (v83 >= 0x17)
                    {
                      v88 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v83 | 7) != 0x17)
                        v88 = v83 | 7;
                      v89 = v88 + 1;
                      v85 = operator new(v88 + 1);
                      *(_QWORD *)&v176 = v84;
                      *((_QWORD *)&v176 + 1) = v89 | 0x8000000000000000;
                      v175 = v85;
                    }
                    else
                    {
                      HIBYTE(v176) = v83;
                      v85 = &v175;
                      if (!v83)
                      {
LABEL_111:
                        *((_BYTE *)v85 + v84) = 0;
                        v90 = v175;
                        v194[0] = v176;
                        *(_QWORD *)((char *)v194 + 7) = *(_QWORD *)((char *)&v176 + 7);
                        v91 = HIBYTE(v176);
                        v92 = operator new(0x38uLL);
                        v92[1] = 0;
                        v92[2] = 0;
                        v92[3] = off_24EC1FA48;
                        *v92 = &off_24EC1F9F8;
                        v93 = v194[0];
                        v92[4] = v90;
                        v92[5] = v93;
                        *(_QWORD *)((char *)v92 + 47) = *(_QWORD *)((char *)v194 + 7);
                        *((_BYTE *)v92 + 55) = v91;
                        v194[0] = 0;
                        *(_QWORD *)((char *)v194 + 7) = 0;
                        v94 = v174;
                        v173 = (char *)(v92 + 3);
                        v174 = (std::__shared_weak_count *)v92;
                        if (v94)
                        {
                          p_shared_owners = (unint64_t *)&v94->__shared_owners_;
                          do
                            v96 = __ldaxr(p_shared_owners);
                          while (__stlxr(v96 - 1, p_shared_owners));
                          if (!v96)
                          {
                            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                            std::__shared_weak_count::__release_weak(v94);
                          }
                        }
                        v189 = v172;
                        v97 = v173;
                        if (v172.__r_.__value_.__r.__words[2])
                        {
                          v98 = (unint64_t *)(v172.__r_.__value_.__r.__words[2] + 8);
                          do
                            v99 = __ldxr(v98);
                          while (__stxr(v99 + 1, v98));
                        }
                        v100 = v174;
                        *(_QWORD *)&v190 = v97;
                        *((_QWORD *)&v190 + 1) = v174;
                        if (v174)
                        {
                          v101 = (unint64_t *)&v174->__shared_owners_;
                          do
                            v102 = __ldxr(v101);
                          while (__stxr(v102 + 1, v101));
                          v191[0] = v97;
                          do
                            v103 = __ldaxr(v101);
                          while (__stlxr(v103 - 1, v101));
                          if (!v103)
                          {
                            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                            std::__shared_weak_count::__release_weak(v100);
                          }
                        }
                        else
                        {
                          v191[0] = v97;
                        }
                        v104 = (std::__shared_weak_count *)v172.__r_.__value_.__r.__words[2];
                        if (v172.__r_.__value_.__r.__words[2])
                        {
                          v105 = (unint64_t *)(v172.__r_.__value_.__r.__words[2] + 8);
                          do
                            v106 = __ldaxr(v105);
                          while (__stlxr(v106 - 1, v105));
                          if (!v106)
                          {
                            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                            std::__shared_weak_count::__release_weak(v104);
                          }
                        }
                        v107 = v189.__r_.__value_.__r.__words[0];
                        if (*((char *)v191[0] + 31) >= 0)
                          v108 = (char *)v191[0] + 8;
                        else
                          v108 = (char *)*((_QWORD *)v191[0] + 1);
                        v109 = _os_log_pack_fill();
                        *(_DWORD *)v109 = 136315138;
                        *(_QWORD *)(v109 + 4) = v108;
                        v110 = operator new();
                        v111 = *(unsigned __int8 *)(v151 + 39);
                        v112 = v150;
                        if ((v111 & 0x80u) != 0)
                        {
                          v112 = *(_QWORD *)(v151 + 16);
                          v111 = *(_QWORD *)(v151 + 24);
                        }
                        *(_QWORD *)v110 = v107;
                        *(_OWORD *)(v110 + 8) = *(_OWORD *)&v189.__r_.__value_.__r.__words[1];
                        *(_OWORD *)&v189.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v110 + 24) = v190;
                        v190 = 0uLL;
                        *(_QWORD *)(v110 + 40) = v112;
                        *(_QWORD *)(v110 + 48) = v111;
                        *(_BYTE *)(v110 + 56) = 16;
                        v175 = 0;
                        v172.__r_.__value_.__r.__words[0] = v110;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v154 + 24) + 40))(*(_QWORD *)(v154 + 24), &v172);
                        v87 = v152;
                        v113 = v172.__r_.__value_.__r.__words[0];
                        v172.__r_.__value_.__r.__words[0] = 0;
                        if (v113)
                        {
                          v114 = *(std::__shared_weak_count **)(v113 + 32);
                          if (v114)
                          {
                            v115 = (unint64_t *)&v114->__shared_owners_;
                            do
                              v116 = __ldaxr(v115);
                            while (__stlxr(v116 - 1, v115));
                            if (!v116)
                            {
                              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                              std::__shared_weak_count::__release_weak(v114);
                            }
                          }
                          v117 = *(std::__shared_weak_count **)(v113 + 16);
                          if (v117)
                          {
                            v118 = (unint64_t *)&v117->__shared_owners_;
                            do
                              v119 = __ldaxr(v118);
                            while (__stlxr(v119 - 1, v118));
                            if (!v119)
                            {
                              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                              std::__shared_weak_count::__release_weak(v117);
                            }
                          }
                          MEMORY[0x227684CE8](v113, 0x10F0C40B62ED6C6);
                          v120 = v175;
                          v175 = 0;
                          if (v120)
                          {
                            v121 = (std::__shared_weak_count *)v120[4];
                            if (v121)
                            {
                              v122 = (unint64_t *)&v121->__shared_owners_;
                              do
                                v123 = __ldaxr(v122);
                              while (__stlxr(v123 - 1, v122));
                              if (!v123)
                              {
                                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                                std::__shared_weak_count::__release_weak(v121);
                              }
                            }
                            v124 = (std::__shared_weak_count *)v120[2];
                            if (v124)
                            {
                              v125 = (unint64_t *)&v124->__shared_owners_;
                              do
                                v126 = __ldaxr(v125);
                              while (__stlxr(v126 - 1, v125));
                              if (!v126)
                              {
                                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                                std::__shared_weak_count::__release_weak(v124);
                              }
                            }
                            MEMORY[0x227684CE8](v120, 0x10F0C40B62ED6C6);
                          }
                        }
                        v127 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
                        if (*((_QWORD *)&v190 + 1))
                        {
                          v128 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
                          do
                            v129 = __ldaxr(v128);
                          while (__stlxr(v129 - 1, v128));
                          if (!v129)
                          {
                            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                            std::__shared_weak_count::__release_weak(v127);
                          }
                        }
                        v130 = (std::__shared_weak_count *)v189.__r_.__value_.__r.__words[2];
                        if (v189.__r_.__value_.__r.__words[2])
                        {
                          v131 = (unint64_t *)(v189.__r_.__value_.__r.__words[2] + 8);
                          do
                            v132 = __ldaxr(v131);
                          while (__stlxr(v132 - 1, v131));
                          if (!v132)
                          {
                            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                            std::__shared_weak_count::__release_weak(v130);
                          }
                        }
LABEL_170:
                        if (v87)
                        {
                          v133 = __p;
                          if (v170 < 0)
                            v133 = (void **)__p[0];
                          sub_22322C138((uint64_t)v162, "%s", (const char *)v133);
                          sub_223182C08((uint64_t)v162);
                        }
                        sub_223182C08((uint64_t)v162);
                        v134 = v168;
                        if (v168)
                        {
                          v135 = (unint64_t *)&v168->__shared_owners_;
                          do
                            v136 = __ldaxr(v135);
                          while (__stlxr(v136 - 1, v135));
                          if (!v136)
                          {
                            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                            std::__shared_weak_count::__release_weak(v134);
                          }
                        }
                        if (SHIBYTE(v170) < 0)
                          operator delete(__p[0]);
                        v177.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                        v137 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(std::string::size_type *)((char *)v177.__pn_.__r_.__value_.__r.__words
                                                  + *(_QWORD *)(v177.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v177.__pn_.__r_.__value_.__r.__words[2] = v137;
                        v178 = MEMORY[0x24BEDB848] + 16;
                        if (v185 < 0)
                          operator delete(v184);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x227684BE0](&v188);
                        goto LABEL_184;
                      }
                    }
                    memcpy(v85, __s, v84);
                    goto LABEL_111;
                  }
                }
                memmove(v76, v67, v66);
                goto LABEL_90;
              }
            }
            memmove(p_size, v71, v72);
            goto LABEL_82;
          }
        }
        memmove(v59, v61, v58);
        goto LABEL_62;
      }
    }
  }
LABEL_184:
  v138 = HIBYTE(v158);
  v139 = (void **)&__dst;
  if (v158 < 0)
  {
    v139 = __dst;
    v138 = v157;
  }
  v177.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
  v177.__pn_.__r_.__value_.__l.__size_ = v138;
  v140 = *(unsigned __int8 *)(a1 + 23);
  if ((v140 & 0x80u) == 0)
    v141 = a1;
  else
    v141 = *(_QWORD *)a1;
  if ((v140 & 0x80u) != 0)
    v140 = *(_QWORD *)(a1 + 8);
  v177.__pn_.__r_.__value_.__r.__words[2] = v141;
  v178 = v140;
  sub_2231A9820((uint64_t)&v177, (uint64_t)&v179, "/", 1uLL, &v189);
  memset(&v177, 0, sizeof(v177));
  size = HIBYTE(v189.__r_.__value_.__r.__words[2]);
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = &v189;
  else
    v143 = (std::string *)v189.__r_.__value_.__r.__words[0];
  if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v189.__r_.__value_.__l.__size_;
  sub_2231816F0(&v177.__pn_, v143, (std::string *)((char *)v143 + size));
  std::__fs::filesystem::__status(&v177, 0);
  v144 = v162[0];
  if (SHIBYTE(v177.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v177.__pn_.__r_.__value_.__l.__data_);
    v145 = v144;
    if (!v144)
      goto LABEL_201;
  }
  else
  {
    v145 = LOBYTE(v162[0]);
    if (!LOBYTE(v162[0]))
      goto LABEL_201;
  }
  if (v145 != 255)
  {
    *a4 = v189;
    a4[1].__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(v158) < 0)
      goto LABEL_214;
    goto LABEL_211;
  }
LABEL_201:
  if (a3)
  {
    v146 = sub_2231813E8(a2, (uint64_t)"Resource at '", 13);
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v147 = &v189;
    else
      v147 = (std::string *)v189.__r_.__value_.__r.__words[0];
    if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v148 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
    else
      v148 = v189.__r_.__value_.__l.__size_;
    v149 = sub_2231813E8(v146, (uint64_t)v147, v148);
    sub_2231813E8(v149, (uint64_t)"' does not exist.", 17);
  }
  a4->__r_.__value_.__s.__data_[0] = 0;
  a4[1].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v158) & 0x80000000) == 0)
      goto LABEL_211;
LABEL_214:
    operator delete(__dst);
    if (!v161)
      return;
    goto LABEL_215;
  }
  operator delete(v189.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158) < 0)
    goto LABEL_214;
LABEL_211:
  if (!v161)
    return;
LABEL_215:
  if (v160 < 0)
    operator delete(v159[0]);
}

void sub_223CF0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (*(_BYTE *)(v62 - 168) && *(char *)(v62 - 169) < 0)
    operator delete(*(void **)(v62 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  if (a47 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a57);
  if (a22 < 0)
    operator delete(a17);
  if (a29)
  {
    if (a28 < 0)
      operator delete(a23);
  }
  _Unwind_Resume(a1);
}

float32x4_t sub_223CF1130(uint64_t a1, uint64_t a2, int a3, __int8 *a4, uint64_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  int8x16_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  _BYTE *v26;
  unint64_t v27;
  unsigned __int16 v28;
  int v29;
  char *v30;
  char *v31;
  float32x4_t v32;
  int v33;
  _DWORD *v34;
  int v35;
  _DWORD *v36;
  _BYTE *v37;
  float32x4_t v38;
  int v39;
  unint64_t v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  float32x4_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float32x4_t result;
  float32x4_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  __int32 v58;
  uint64_t v59;
  __int32 v60;
  uint64_t v61;
  __int32 v62;
  uint64_t v63;
  __int32 v64;
  uint64_t v65;
  __int32 v66;
  uint64_t v67;
  __int32 v68;
  uint64_t v69;
  __int32 v70;
  uint64_t v71;
  __int32 v72;
  _BYTE v73[144];
  uint64_t v74;

  a8.i64[0] = *(_QWORD *)a2;
  a8.i32[2] = *(_DWORD *)(a2 + 8);
  a7.i64[0] = *(_QWORD *)a1;
  a7.i32[2] = *(_DWORD *)(a1 + 8);
  v10 = (int8x16_t)vsubq_f32(a8, a7);
  v11 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  *(float *)v10.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), v11, v11).f32[0])/ 1.7321;
  v12 = vmlaq_n_f32(a7, (float32x4_t)0, *(float *)v10.i32);
  v58 = v12.i32[2];
  v13 = vmlaq_n_f32(a7, (float32x4_t)xmmword_2245F4CE0, *(float *)v10.i32);
  v60 = v13.i32[2];
  v15 = *(_QWORD *)a5;
  v14 = *(_QWORD *)(a5 + 8);
  v57 = v12.i64[0];
  v59 = v13.i64[0];
  v16 = -1431655765 * ((v14 - v15) >> 2);
  v17 = vmlaq_n_f32(a7, (float32x4_t)xmmword_224660820, *(float *)v10.i32);
  v62 = v17.i32[2];
  v61 = v17.i64[0];
  v18 = vmlaq_n_f32(a7, (float32x4_t)xmmword_2245F4CF0, *(float *)v10.i32);
  v64 = v18.i32[2];
  v63 = v18.i64[0];
  v19 = vmlaq_n_f32(a7, (float32x4_t)xmmword_2245C76E0, *(float *)v10.i32);
  v66 = v19.i32[2];
  v65 = v19.i64[0];
  v20 = vmlaq_n_f32(a7, (float32x4_t)xmmword_224660830, *(float *)v10.i32);
  v68 = v20.i32[2];
  v67 = v20.i64[0];
  v21 = vaddq_f32(a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0));
  v70 = v21.i32[2];
  v69 = v21.i64[0];
  v22 = vmlaq_n_f32(a7, (float32x4_t)xmmword_224657E50, *(float *)v10.i32);
  v72 = v22.i32[2];
  v71 = v22.i64[0];
  v23 = a5 + 112;
  v24 = 0;
  if (a3)
  {
    a6.f32[0] = a6.f32[0] * 0.333;
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
    v53 = v25;
    v26 = v73;
    do
    {
      while (1)
      {
        v27 = (unint64_t)word_22466F58C[v24] >> 8;
        v28 = word_22466F58C[v24];
        if ((_BYTE)v28)
        {
          v29 = word_22466F58C[v24];
          v30 = (char *)&v57 + 12 * v28;
          v25.i64[0] = *(_QWORD *)v30;
          v25.i32[2] = *((_DWORD *)v30 + 2);
          v31 = (char *)&v57 + 12 * v27;
          v32.i64[0] = 0x3F0000003F000000;
          v32.i64[1] = 0x3F0000003F000000;
          v22.i64[0] = *(_QWORD *)v31;
          v22.i32[2] = *((_DWORD *)v31 + 2);
          v22 = vmulq_f32(v22, v32);
          v25 = vaddq_f32(vmulq_f32(v25, v32), v22);
        }
        else
        {
          v25.i64[0] = v57;
          v25.i32[2] = v58;
          v29 = word_22466F58C[v24];
          v22.i32[3] = v53.i32[3];
          v25 = vaddq_f32(v53, v25);
        }
        *((_DWORD *)v26 + 2) = v25.i32[2];
        *(_QWORD *)v26 = v25.i64[0];
        v33 = v29 + v16;
        v55 = v27 + v16;
        v56 = v33;
        v54 = v16 + 8 + v24;
        v34 = *(_DWORD **)(a5 + 120);
        if ((unint64_t)v34 < *(_QWORD *)(a5 + 128))
          break;
        *(_QWORD *)(a5 + 120) = sub_223A9EF0C(v23, &v56, &v55, &v54);
        ++v24;
        v26 += 12;
        if (v24 == 12)
          goto LABEL_14;
      }
      *v34 = v33;
      v35 = v54;
      v34[1] = v55;
      v34[2] = v35;
      *(_QWORD *)(a5 + 120) = v34 + 3;
      ++v24;
      v26 += 12;
    }
    while (v24 != 12);
  }
  else
  {
    v36 = *(_DWORD **)(a5 + 120);
    v37 = v73;
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    do
    {
      while (1)
      {
        v40 = (unint64_t)word_22466F58C[v24] >> 8;
        v41 = word_22466F58C[v24];
        v42 = (char *)&v57 + 12 * word_22466F58C[v24];
        v43 = (char *)&v57 + 12 * v40;
        a6.i64[0] = *(_QWORD *)v42;
        a6.i32[2] = *((_DWORD *)v42 + 2);
        v22.i64[0] = *(_QWORD *)v43;
        v22.i32[2] = *((_DWORD *)v43 + 2);
        v22 = vmulq_f32(v22, v38);
        a6 = vaddq_f32(vmulq_f32(a6, v38), v22);
        *((_DWORD *)v37 + 2) = a6.i32[2];
        *(_QWORD *)v37 = a6.i64[0];
        v44 = v41 + v16;
        v55 = v40 + v16;
        v56 = v44;
        v54 = v16 + 8 + v24;
        if ((unint64_t)v36 >= *(_QWORD *)(a5 + 128))
          break;
        *v36 = v44;
        v39 = v54;
        v36[1] = v55;
        v36[2] = v39;
        v36 += 3;
        *(_QWORD *)(a5 + 120) = v36;
        ++v24;
        v37 += 12;
        if (v24 == 12)
          goto LABEL_14;
      }
      v36 = sub_223A9EF0C(v23, &v56, &v55, &v54);
      v38.i64[0] = 0x3F0000003F000000;
      v38.i64[1] = 0x3F0000003F000000;
      *(_QWORD *)(a5 + 120) = v36;
      ++v24;
      v37 += 12;
    }
    while (v24 != 12);
  }
LABEL_14:
  sub_223CEE94C((uint64_t *)a5, *(_QWORD *)(a5 + 8), &v57, &v74, 20);
  v48 = *(_QWORD *)(a5 + 32);
  v49 = v16 + 20;
  v50 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a5 + 40) - v48) >> 2);
  if (v49 <= v50)
  {
    if (v49 < v50)
      *(_QWORD *)(a5 + 40) = v48 + 12 * v49;
  }
  else
  {
    sub_22317EF30(a5 + 32, v49 - v50);
    v48 = *(_QWORD *)(a5 + 32);
  }
  v45.i8[0] = *a4;
  v45.f32[0] = (float)v45.u32[0];
  LOBYTE(v46) = a4[1];
  LOBYTE(v47) = a4[2];
  v45.f32[1] = (float)v46;
  v45.f32[2] = (float)v47;
  v51 = v48 + 12 * v16;
  result = vdivq_f32(v45, (float32x4_t)vdupq_n_s32(0x437F0000u));
  *(_DWORD *)(v51 + 8) = result.i32[2];
  *(_QWORD *)v51 = result.i64[0];
  *(_DWORD *)(v51 + 20) = result.i32[2];
  *(_DWORD *)(v51 + 32) = result.i32[2];
  *(_QWORD *)(v51 + 12) = result.i64[0];
  *(_QWORD *)(v51 + 24) = result.i64[0];
  *(_DWORD *)(v51 + 44) = result.i32[2];
  *(_QWORD *)(v51 + 36) = result.i64[0];
  *(_DWORD *)(v51 + 56) = result.i32[2];
  *(_DWORD *)(v51 + 68) = result.i32[2];
  *(_QWORD *)(v51 + 48) = result.i64[0];
  *(_QWORD *)(v51 + 60) = result.i64[0];
  *(_DWORD *)(v51 + 80) = result.i32[2];
  *(_QWORD *)(v51 + 72) = result.i64[0];
  *(_DWORD *)(v51 + 92) = result.i32[2];
  *(_DWORD *)(v51 + 104) = result.i32[2];
  *(_QWORD *)(v51 + 84) = result.i64[0];
  *(_QWORD *)(v51 + 96) = result.i64[0];
  *(_DWORD *)(v51 + 116) = result.i32[2];
  *(_QWORD *)(v51 + 108) = result.i64[0];
  *(_DWORD *)(v51 + 128) = result.i32[2];
  *(_DWORD *)(v51 + 140) = result.i32[2];
  *(_QWORD *)(v51 + 120) = result.i64[0];
  *(_QWORD *)(v51 + 132) = result.i64[0];
  *(_DWORD *)(v51 + 152) = result.i32[2];
  *(_QWORD *)(v51 + 144) = result.i64[0];
  *(_DWORD *)(v51 + 164) = result.i32[2];
  *(_DWORD *)(v51 + 176) = result.i32[2];
  *(_QWORD *)(v51 + 156) = result.i64[0];
  *(_QWORD *)(v51 + 168) = result.i64[0];
  *(_DWORD *)(v51 + 188) = result.i32[2];
  *(_QWORD *)(v51 + 180) = result.i64[0];
  *(_DWORD *)(v51 + 200) = result.i32[2];
  *(_DWORD *)(v51 + 212) = result.i32[2];
  *(_QWORD *)(v51 + 192) = result.i64[0];
  *(_QWORD *)(v51 + 204) = result.i64[0];
  *(_DWORD *)(v51 + 224) = result.i32[2];
  *(_QWORD *)(v51 + 216) = result.i64[0];
  *(_DWORD *)(v51 + 236) = result.i32[2];
  *(_QWORD *)(v51 + 228) = result.i64[0];
  *(_DWORD *)(a5 + 64) = 1;
  return result;
}

int32x2_t *sub_223CF1628(int32x2_t *result, unsigned int a2, __int8 *a3, uint64_t a4, float a5, float32x4_t a6)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  unsigned int v12;
  float32x4_t v13;
  unsigned int v14;
  float32x4_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t **v49;
  __int32 v50;
  uint64_t *v51;
  __int32 v52;

  v7 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2;
  if (a2)
  {
    v9 = 0;
    *(float32x2_t *)a6.f32 = vcvt_f32_s32(*result);
    a6.f32[2] = (float)result[1].i32[0];
    v46 = (float)a2 * a5;
    v47 = vmulq_n_f32(a6, a5);
    v10 = a2;
    v44 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v45 = (int8x16_t)vdupq_n_s64(1uLL);
    do
    {
      while (1)
      {
        v11.i64[0] = v9;
        v11.i64[1] = v9 >> 1;
        v12 = LODWORD(v46);
        v13 = (float32x4_t)vcvtq_f64_u64((uint64x2_t)vandq_s8(v11, v45));
        *(float32x2_t *)v13.f32 = vmul_n_f32(vcvt_f32_f64((float64x2_t)v13), v46);
        v13.f32[2] = v46 * (float)((v9 >> 2) & 1);
        v14 = v47.i32[0];
        v15 = vaddq_f32(v47, v13);
        v52 = v15.i32[2];
        v51 = (uint64_t *)v15.i64[0];
        v16 = *(_QWORD *)(a4 + 8);
        if (v16 >= *(_QWORD *)(a4 + 16))
        {
          v18 = sub_2233B2B48((unint64_t *)a4, (uint64_t *)&v51);
        }
        else
        {
          v17 = (uint64_t)v51;
          *(_DWORD *)(v16 + 8) = v52;
          *(_QWORD *)v16 = v17;
          v18 = v16 + 12;
        }
        *(_QWORD *)(a4 + 8) = v18;
        v15.i8[0] = *a3;
        v15.f32[0] = (float)v15.u32[0];
        LOBYTE(v14) = a3[1];
        LOBYTE(v12) = a3[2];
        v15.f32[1] = (float)v14;
        v15.f32[2] = (float)v12;
        v19 = vdivq_f32(v15, v44);
        v50 = v19.i32[2];
        v49 = (uint64_t **)v19.i64[0];
        v20 = *(_QWORD *)(a4 + 40);
        if (v20 < *(_QWORD *)(a4 + 48))
          break;
        result = (int32x2_t *)sub_2233B2838((unint64_t *)(a4 + 32), (uint64_t *)&v49);
        *(_QWORD *)(a4 + 40) = result;
        *(_DWORD *)(a4 + 64) = 1;
        if (v10 == ++v9)
          goto LABEL_9;
      }
      v21 = (uint64_t)v49;
      *(_DWORD *)(v20 + 8) = v50;
      *(_QWORD *)v20 = v21;
      result = (int32x2_t *)(v20 + 12);
      *(_QWORD *)(a4 + 40) = v20 + 12;
      *(_DWORD *)(a4 + 64) = 1;
      ++v9;
    }
    while (v10 != v9);
  }
LABEL_9:
  v22 = 0;
  v23 = -1431655765 * v7;
  v24 = (uint64_t *)(a4 + 112);
  v25 = *(_DWORD **)(a4 + 120);
  v48 = a4 + 136;
  do
  {
    while (1)
    {
      v26 = (_DWORD *)((char *)&unk_22466F5A4 + 12 * v22);
      v27 = v23 + *v26;
      v28 = v23 + v26[1];
      v29 = v23 + v26[2];
      v30 = *(_QWORD *)(a4 + 128);
      if ((unint64_t)v25 >= v30)
        break;
      *v25 = v27;
      v25[1] = v28;
      v25[2] = v29;
      v25 += 3;
      *(_QWORD *)(a4 + 120) = v25;
      if (++v22 == 12)
        return result;
    }
    v31 = *v24;
    v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *v24) >> 2);
    v33 = v32 + 1;
    if (v32 + 1 > 0x1555555555555555)
      sub_22316E078();
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v31) >> 2);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0xAAAAAAAAAAAAAAALL)
      v35 = 0x1555555555555555;
    else
      v35 = v33;
    if (v35)
    {
      LODWORD(v49) = v35;
      v36 = *(unsigned int *)(a4 + 140);
      if ((_DWORD)v36 == -1)
        sub_22316DD70();
      v51 = (uint64_t *)&v49;
      result = (int32x2_t *)((uint64_t (*)(uint64_t **, uint64_t))off_24EC639C8[v36])(&v51, v48);
      v31 = *(_QWORD *)(a4 + 112);
      v25 = *(_DWORD **)(a4 + 120);
      v38 = (_DWORD *)result + 3 * v32;
      *v38 = v27;
      v38[1] = v28;
      v38[2] = v29;
      v39 = (uint64_t)v38;
      if (v25 == (_DWORD *)v31)
      {
LABEL_21:
        v25 = v38 + 3;
        *(_QWORD *)(a4 + 112) = v39;
        *(_QWORD *)(a4 + 120) = v38 + 3;
        v40 = *(_QWORD *)(a4 + 128);
        *(_QWORD *)(a4 + 128) = (char *)result + 12 * v37;
        if (!v31)
          goto LABEL_28;
LABEL_26:
        v51 = (uint64_t *)v31;
        v52 = -1431655765 * ((unint64_t)(v40 - v31) >> 2);
        v43 = *(unsigned int *)(a4 + 140);
        if ((_DWORD)v43 == -1)
          sub_22316DD70();
        v49 = &v51;
        result = (int32x2_t *)((uint64_t (*)(uint64_t ***, uint64_t))off_24EC639D8[v43])(&v49, v48);
        goto LABEL_28;
      }
    }
    else
    {
      result = 0;
      v37 = 0;
      v38 = (_DWORD *)(4 * (((uint64_t)v25 - *v24) >> 2));
      *v38 = v27;
      v38[1] = v28;
      v38[2] = v29;
      v39 = 12 * v32;
      if (v25 == (_DWORD *)v31)
        goto LABEL_21;
    }
    do
    {
      v41 = *(_QWORD *)(v25 - 3);
      v25 -= 3;
      v42 = v25[2];
      *(_QWORD *)(v39 - 12) = v41;
      v39 -= 12;
      *(_DWORD *)(v39 + 8) = v42;
    }
    while (v25 != (_DWORD *)v31);
    v31 = *v24;
    v25 = v38 + 3;
    *(_QWORD *)(a4 + 112) = v39;
    *(_QWORD *)(a4 + 120) = v38 + 3;
    v40 = *(_QWORD *)(a4 + 128);
    *(_QWORD *)(a4 + 128) = (char *)result + 12 * v37;
    if (v31)
      goto LABEL_26;
LABEL_28:
    *(_QWORD *)(a4 + 120) = v25;
    ++v22;
  }
  while (v22 != 12);
  return result;
}

uint64_t *sub_223CF19D8(uint64_t a1, _QWORD *a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  float *v10;
  char v11;
  uint64_t v12;
  float v13;
  char v14;
  float v15;
  int v16;
  float v17;
  float *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  _DWORD *v65;
  int v66;
  char v67;
  int v68;
  float *v69;
  float *v70;
  unint64_t v71;
  _BYTE v72[4];
  int v73;
  _DWORD v74[20];
  _DWORD *v75;
  _DWORD *v76;
  unint64_t v77;
  _BYTE v78[4];
  int v79;
  _QWORD **v80;
  int v81;
  _QWORD *v82;
  _DWORD v83[2];
  _DWORD v84[2];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v6 = a2[1] - *a2;
  sub_2241498F4((uint64_t)&v69, 0);
  sub_22339E3C8((uint64_t)&v69, 1431655768 * (v6 >> 2));
  sub_22339E528((uint64_t)&v75, v6 & 0xFFFFFFFC);
  v7 = (_DWORD *)*a2;
  v65 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v65)
  {
    do
    {
      v8 = 0;
      v9 = 0;
      v10 = v70;
      v66 = -1431655765 * ((unint64_t)((char *)v70 - (char *)v69) >> 2);
      v84[0] = *v7;
      v84[1] = v84[0] + a4;
      do
      {
        v11 = 0;
        v12 = 0;
        v67 = v8;
        v13 = (float)(int)v84[v9];
        v83[0] = v7[1];
        v83[1] = v83[0] + a4;
        do
        {
          v14 = v11;
          v15 = (float)(int)v83[v12];
          v16 = v7[2];
          v17 = (float)v16;
          if ((unint64_t)v10 >= v71)
          {
            v19 = 0xAAAAAAAAAAAAAAABLL * (v10 - v69);
            v20 = v19 + 1;
            if (v19 + 1 > 0x1555555555555555)
              goto LABEL_65;
            if (0x5555555555555556 * ((uint64_t)(v71 - (_QWORD)v69) >> 2) > v20)
              v20 = 0x5555555555555556 * ((uint64_t)(v71 - (_QWORD)v69) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v69) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v21 = 0x1555555555555555;
            else
              v21 = v20;
            if (v21)
            {
              LODWORD(v82) = v21;
              if (v73 == -1)
                goto LABEL_66;
              v80 = &v82;
              v22 = ((uint64_t (*)(_QWORD ***, _BYTE *))off_24EC63A08[v73])(&v80, v72);
            }
            else
            {
              v22 = 0;
              v23 = 0;
            }
            v24 = (float *)(v22 + 12 * v19);
            *v24 = v13;
            v24[1] = v15;
            v24[2] = v17;
            v26 = (uint64_t)v69;
            v25 = (uint64_t)v70;
            v27 = (uint64_t)v24;
            if (v70 != v69)
            {
              do
              {
                v28 = *(_QWORD *)(v25 - 12);
                v25 -= 12;
                v29 = *(_DWORD *)(v25 + 8);
                *(_QWORD *)(v27 - 12) = v28;
                v27 -= 12;
                *(_DWORD *)(v27 + 8) = v29;
              }
              while (v25 != v26);
              v25 = (uint64_t)v69;
            }
            v18 = v24 + 3;
            v69 = (float *)v27;
            v70 = v24 + 3;
            v30 = v71;
            v71 = v22 + 12 * v23;
            if (v25)
            {
              v80 = (_QWORD **)v25;
              v81 = -1431655765 * ((v30 - v25) >> 2);
              if (v73 == -1)
                goto LABEL_67;
              v82 = &v80;
              ((void (*)(_QWORD **, _BYTE *))off_24EC639F8[v73])(&v82, v72);
            }
          }
          else
          {
            *v10 = v13;
            v10[1] = v15;
            v18 = v10 + 3;
            v10[2] = v17;
          }
          v70 = v18;
          v31 = (float)(v16 + a4);
          if ((unint64_t)v18 < v71)
          {
            *v18 = v13;
            v18[1] = v15;
            v10 = v18 + 3;
            v18[2] = v31;
          }
          else
          {
            v32 = 0xAAAAAAAAAAAAAAABLL * (v18 - v69);
            v33 = v32 + 1;
            if (v32 + 1 > 0x1555555555555555)
LABEL_65:
              sub_22316E078();
            if (0x5555555555555556 * ((uint64_t)(v71 - (_QWORD)v69) >> 2) > v33)
              v33 = 0x5555555555555556 * ((uint64_t)(v71 - (_QWORD)v69) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v69) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v34 = 0x1555555555555555;
            else
              v34 = v33;
            if (v34)
            {
              LODWORD(v82) = v34;
              if (v73 == -1)
LABEL_66:
                sub_22316DD70();
              v80 = &v82;
              v35 = ((uint64_t (*)(_QWORD ***, _BYTE *))off_24EC63A08[v73])(&v80, v72);
            }
            else
            {
              v35 = 0;
              v36 = 0;
            }
            v37 = (float *)(v35 + 12 * v32);
            *v37 = v13;
            v37[1] = v15;
            v37[2] = v31;
            v39 = (uint64_t)v69;
            v38 = (uint64_t)v70;
            v40 = (uint64_t)v37;
            if (v70 != v69)
            {
              do
              {
                v41 = *(_QWORD *)(v38 - 12);
                v38 -= 12;
                v42 = *(_DWORD *)(v38 + 8);
                *(_QWORD *)(v40 - 12) = v41;
                v40 -= 12;
                *(_DWORD *)(v40 + 8) = v42;
              }
              while (v38 != v39);
              v38 = (uint64_t)v69;
            }
            v10 = v37 + 3;
            v69 = (float *)v40;
            v70 = v37 + 3;
            v43 = v71;
            v71 = v35 + 12 * v36;
            if (v38)
            {
              v80 = (_QWORD **)v38;
              v81 = -1431655765 * ((v43 - v38) >> 2);
              if (v73 == -1)
LABEL_67:
                sub_22316DD70();
              v82 = &v80;
              ((void (*)(_QWORD **, _BYTE *))off_24EC639F8[v73])(&v82, v72);
            }
          }
          v70 = v10;
          v11 = 1;
          v12 = 1;
        }
        while ((v14 & 1) == 0);
        v8 = 1;
        v9 = 1;
      }
      while ((v67 & 1) == 0);
      v44 = 0;
      v45 = v76;
      do
      {
        v46 = (_DWORD *)((char *)&unk_22466F634 + 12 * v44);
        v47 = *v46 + v66;
        v48 = v46[1] + v66;
        v49 = v46[2] + v66;
        if ((unint64_t)v45 < v77)
        {
          *v45 = v47;
          v45[1] = v48;
          v45[2] = v49;
          v45 += 3;
        }
        else
        {
          v50 = 0xAAAAAAAAAAAAAAABLL * (v45 - v75);
          v51 = v50 + 1;
          if (v50 + 1 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)v75) >> 2) > v51)
            v51 = 0x5555555555555556 * ((uint64_t)(v77 - (_QWORD)v75) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)v75) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v52 = 0x1555555555555555;
          else
            v52 = v51;
          if (v52)
          {
            LODWORD(v82) = v52;
            if (v79 == -1)
              sub_22316DD70();
            v68 = v47;
            v80 = &v82;
            v53 = ((uint64_t (*)(_QWORD ***, _BYTE *))off_24EC63A18[v79])(&v80, v78);
            v47 = v68;
          }
          else
          {
            v53 = 0;
            v54 = 0;
          }
          v55 = (_DWORD *)(v53 + 12 * v50);
          *v55 = v47;
          v55[1] = v48;
          v55[2] = v49;
          v57 = v75;
          v56 = v76;
          v58 = v55;
          if (v76 != v75)
          {
            do
            {
              v59 = *(_QWORD *)(v56 - 3);
              v56 -= 3;
              v60 = v56[2];
              *(_QWORD *)(v58 - 3) = v59;
              v58 -= 3;
              v58[2] = v60;
            }
            while (v56 != v57);
            v56 = v75;
          }
          v45 = v55 + 3;
          v75 = v58;
          v76 = v55 + 3;
          v61 = v77;
          v77 = v53 + 12 * v54;
          if (v56)
          {
            v80 = (_QWORD **)v56;
            v81 = -1431655765 * ((v61 - (unint64_t)v56) >> 2);
            if (v79 == -1)
              sub_22316DD70();
            v82 = &v80;
            ((void (*)(_QWORD **, _BYTE *))off_24EC639E8[v79])(&v82, v78);
          }
        }
        v76 = v45;
        ++v44;
      }
      while (v44 != 12);
      v7 += 3;
    }
    while (v7 != v65);
  }
  sub_22339E688((uint64_t)v74, 0xAAAAAAAAAAAAAAABLL * (v70 - v69), a3);
  v74[8] = 1;
  sub_22414E9E0(a1, (uint64_t)&v69);
  return sub_22316F8F4((uint64_t *)&v69);
}

void sub_223CF1FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_22316F8F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223CF2048@<X0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, int32x2_t *a4@<X3>, int32x2_t *a5@<X4>, int **a6@<X8>, float a7@<S0>)
{
  uint64_t result;
  float32x2_t v13;
  float32x2_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x4_t v25;
  int *v26;
  float32x2_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  int8x16_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int8x16_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  __int32 v39;
  int v40;
  __int32 v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float *v45;
  int **v46;
  int v48;
  float32x4_t v49;
  int v50;
  int *v51;
  float32x4_t v52;
  int8x16_t v53;
  unint64_t v55;
  float32x2_t v56;
  double v57;
  int32x2_t v60;
  unint64_t v65;
  int *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  __int32 v77;
  __int32 v78;
  int32x2_t *v79;
  float32x2_t *v80;
  float32x2_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  uint64_t v86;
  float32x2_t v87;
  int32x4_t v89;
  int v90;
  float32x4_t v91;
  _BYTE v92[20];
  __int32 v93;

  result = kdebug_trace();
  if (a3->f32[0] < 0.0 || (result = (uint64_t)a3, a3->f32[1] < 0.0))
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return result;
  }
  v80 = a3;
  sub_223EA5FD0(a3, a2, a1, (uint64_t)v92, v13, v14);
  v18 = a7;
  v19 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v92, 1.0 / a7);
  v20.i64[0] = *(_QWORD *)&v92[12];
  v20.i32[2] = v93;
  v21 = (int8x16_t)vmulq_n_f32(v20, 1.0 / a7);
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  v22 = vcvtms_s32_f32(*(float *)v19.i32);
  v76 = vcvtms_s32_f32(*(float *)v21.i32);
  if (v76 + 1 != v22)
  {
    v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
    v25 = (int32x4_t)vextq_s8(v21, v21, 8uLL);
    v21.i32[0] = v25.i32[0];
    *(float32x2_t *)v25.i8 = vrndm_f32(*(float32x2_t *)v21.i8);
    v23 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v19.i8));
    v24 = vcvt_s32_f32(*(float32x2_t *)v25.i8);
    *(int32x2_t *)v25.i8 = vceq_s32(vadd_s32(v24, (int32x2_t)0x100000001), v23);
    if (((v25.i32[1] | v25.i32[0]) & 1) == 0)
    {
      v26 = 0;
      *(float32x2_t *)v25.i8 = *a2;
      *(float32x2_t *)v15.i8 = a2[2];
      v27 = (float32x2_t)vzip1q_s32(v25, v15).u64[0];
      v28 = v25;
      v28.i32[2] = a2[1].i32[0];
      v29 = v15;
      v29.i32[2] = a2[3].i32[0];
      v30 = (float32x2_t)vzip1_s32((int32x2_t)*a2, *(int32x2_t *)v15.i8);
      v15.i32[0] = a2[5].i32[0];
      *(float32x2_t *)v16.f32 = a2[6];
      v16.i32[2] = a2[7].i32[0];
      *(float32x2_t *)v17.i8 = a2[4];
      v31 = (int8x16_t)vnegq_f32(v16);
      v32 = vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v31.i8);
      v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1);
      v34 = v17;
      v34.i32[2] = v15.i32[0];
      v35 = vtrn2q_s32(v28, v29);
      v36 = (float32x2_t)vzip2q_s32(v28, v29).u64[0];
      *(float32x2_t *)v38.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v30, *(float *)v31.i32), *(float32x2_t *)v35.i8, *(float32x2_t *)v16.f32, 1), v36, v16, 2);
      v37 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1), 0xCuLL).u64[0];
      *(float32x2_t *)&v38.u32[2] = vmla_f32(vmls_lane_f32(v32, v33, *(float32x2_t *)v16.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v15.i8);
      v75 = v23.i32[1];
      v39 = v24.i32[1];
      v40 = v23.i32[0];
      v41 = v24.i32[0];
      v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1);
      v43 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
      v44.i64[0] = 0x3F0000003F000000;
      v44.i64[1] = 0x3F0000003F000000;
      v45 = (float *)a3;
      v46 = a6;
      v86 = v34.i64[0];
      v87 = v27;
      v84 = v38;
      v85 = v36;
      v82 = v43;
      v83 = v37;
      v77 = v23.i32[0];
      v78 = v24.i32[1];
      v79 = a5;
      do
      {
        *(float *)v35.i32 = (float)v22;
        v48 = v75;
        v90 = v22;
        v89 = v35;
        do
        {
          v49 = (float32x4_t)v35;
          v49.f32[1] = (float)v48;
          v49.i32[2] = v35.i32[2];
          v50 = v40;
          do
          {
            v52 = v49;
            v52.f32[2] = (float)v50;
            v53 = (int8x16_t)vmulq_n_f32(vaddq_f32(v52, v44), v18);
            *(float32x2_t *)v52.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v27, *(float *)v53.i32), v37, *(float32x2_t *)v53.i8, 1), v36, (float32x4_t)v53, 2);
            *(float32x2_t *)&v52.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v53.i8), v42, *(float32x2_t *)v53.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), v43);
            _Q1 = (int32x4_t)vaddq_f32(v38, v52);
            if (*(float *)&_Q1.i32[2] > 0.000001)
            {
              v55 = (unint64_t)vmul_f32(*(float32x2_t *)_Q1.i8, a1[2]);
              v56 = vadd_f32(a1[3], vdiv_f32((float32x2_t)v55, (float32x2_t)vdup_laneq_s32(_Q1, 2)));
              LODWORD(v55) = a1[11].i32[0];
              v57 = (double)v55 + -0.5;
              *(float *)&v57 = v57;
              if (v56.f32[0] >= -0.5 && v56.f32[0] < *(float *)&v57)
              {
                LODWORD(v57) = a1[11].i32[1];
                *(float *)&v57 = (double)*(unint64_t *)&v57 + -0.5;
                if (v56.f32[1] >= -0.5 && v56.f32[1] < *(float *)&v57)
                {
                  v60 = (int32x2_t)vcvt_u32_f32(vrndm_f32(vadd_f32(v56, (float32x2_t)0x3F0000003F000000)));
                  *(int32x2_t *)_Q1.i8 = vmul_s32(a4[5], v60);
                  _Q1.i16[0] = *(_WORD *)(*(_QWORD *)&a4[3]
                                        + 2
                                        * vadd_s32(vdup_lane_s32(*(int32x2_t *)_Q1.i8, 1), *(int32x2_t *)_Q1.i8).u32[0]);
                  __asm { FCVT            S1, H1 }
                  if (*(float *)_Q1.i32 > -65504.0)
                  {
                    _D2 = vmul_s32(a5[5], v60);
                    _D2.i16[0] = *(_WORD *)(*(_QWORD *)&a5[3] + 2 * vadd_s32(vdup_lane_s32(_D2, 1), _D2).u32[0]);
                    __asm { FCVT            S2, H2 }
                    if (*(float *)_D2.i32 > 0.0
                      && (float)(*(float *)&_Q1.i32[2] - *(float *)_Q1.i32) <= v18
                      && *v45 <= *(float *)_Q1.i32)
                    {
                      v65 = (unint64_t)v46[2];
                      if ((unint64_t)v26 < v65)
                      {
                        *v26 = v22;
                        v26[1] = v48;
                        v51 = v26 + 3;
                        v26[2] = v50;
                      }
                      else
                      {
                        v66 = *v46;
                        v67 = 0xAAAAAAAAAAAAAAABLL * (v26 - v66) + 1;
                        if (v67 > 0x1555555555555555)
                          sub_22316E078();
                        v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v66) >> 2);
                        if (2 * v68 > v67)
                          v67 = 2 * v68;
                        if (v68 >= 0xAAAAAAAAAAAAAAALL)
                          v69 = 0x1555555555555555;
                        else
                          v69 = v67;
                        v91 = v49;
                        if (v69)
                        {
                          if (v69 > 0x1555555555555555)
                            sub_223174E94();
                          v70 = (char *)operator new(12 * v69);
                          v27 = v87;
                          v18 = a7;
                          v22 = v90;
                          v36 = v85;
                          v34.i64[0] = v86;
                          v37 = v83;
                          v38 = v84;
                          v43 = v82;
                          v44.i64[0] = 0x3F0000003F000000;
                          v44.i64[1] = 0x3F0000003F000000;
                          v35 = v89;
                          v49 = v91;
                        }
                        else
                        {
                          v70 = 0;
                        }
                        v71 = (int *)&v70[4 * (v26 - v66)];
                        *v71 = v22;
                        v71[1] = v48;
                        v71[2] = v50;
                        v72 = v71;
                        if (v26 == v66)
                        {
                          v46 = a6;
                          v51 = v71 + 3;
                          *a6 = v71;
                          a6[1] = v71 + 3;
                          a6[2] = (int *)&v70[12 * v69];
                          if (v26)
                            goto LABEL_47;
                        }
                        else
                        {
                          do
                          {
                            v73 = *(_QWORD *)(v26 - 3);
                            v26 -= 3;
                            v74 = v26[2];
                            *(_QWORD *)(v72 - 3) = v73;
                            v72 -= 3;
                            v72[2] = v74;
                          }
                          while (v26 != v66);
                          v46 = a6;
                          v26 = *a6;
                          v51 = v71 + 3;
                          *a6 = v72;
                          a6[1] = v71 + 3;
                          a6[2] = (int *)&v70[12 * v69];
                          if (v26)
                          {
LABEL_47:
                            operator delete(v26);
                            v49 = v91;
                            v18 = a7;
                            v35 = v89;
                            v44.i64[0] = 0x3F0000003F000000;
                            v44.i64[1] = 0x3F0000003F000000;
                            v43 = v82;
                            v37 = v83;
                            v38 = v84;
                            v36 = v85;
                            v34.i64[0] = v86;
                            v27 = v87;
                            v22 = v90;
                          }
                        }
                        a5 = v79;
                        v45 = (float *)v80;
                        v40 = v77;
                        v39 = v78;
                      }
                      v46[1] = v51;
                      v26 = v51;
                    }
                  }
                }
              }
            }
            _ZF = v50++ == v41;
          }
          while (!_ZF);
          _ZF = v48++ == v39;
        }
        while (!_ZF);
        _ZF = v22++ == v76;
      }
      while (!_ZF);
    }
  }
  return kdebug_trace();
}

void sub_223CF25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (v14)
  {
    *(_QWORD *)(a14 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_223CF25F4(_QWORD *a1, int *a2, int a3, int a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t j;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  int *v40;
  int v41;
  BOOL v42;
  int v43;
  int v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v65[3];
  int v66[3];

  v5 = -(unsigned __int16)a4;
  v6 = *a2;
  v7 = a2[1];
  v8 = *a2 & v5;
  v9 = v7 & v5;
  v10 = a2[2];
  v11 = v10 & v5;
  v66[0] = v8;
  v66[1] = v7 & v5;
  v66[2] = v10 & v5;
  v12 = v6 + a3 - (v6 & v5);
  _ZF = v12 == a4;
  v13 = v12 != a4;
  v14 = _ZF;
  v63 = v6 & v5;
  v15 = v6 != v8 && v13;
  if (v6 == v8)
    v16 = -1;
  else
    v16 = v14;
  v17 = v7 + a3 - v9;
  if (v7 == v9)
    v18 = -1;
  else
    v18 = v17 == a4;
  if (v10 == (_DWORD)v11)
  {
    v19 = -1;
    goto LABEL_31;
  }
  v20 = v10 + a3 - v11;
  _ZF = v7 == v9 || v17 == a4;
  if (_ZF)
    v15 = 0;
  v19 = v20 == a4;
  if (v20 == a4 || !v15)
  {
LABEL_31:
    v37 = 0;
    v59 = v7;
    v38 = (19349669 * v7) ^ (73856093 * v6) ^ (83492791 * v10);
    v60 = (v38 >> 7) ^ 0x13701D;
    v61 = 0x101010101010101 * (v38 & 0x7F);
    v39 = &byte_22466F714;
LABEL_32:
    v62 = v37;
    while (1)
    {
      v40 = (int *)((char *)&unk_22466F730 + 12 * *v39);
      v41 = *v40;
      if (*v40)
        v42 = v41 == v16;
      else
        v42 = 1;
      if (v42)
      {
        v43 = v40[1];
        if (!v43 || v43 == v18)
        {
          v45 = v40[2];
          if (!v45 || v45 == v19)
          {
            v65[0] = v63 + v41 * a4;
            v65[1] = v9 + v43 * a4;
            v47 = v11;
            v65[2] = v11 + v45 * a4;
            v48 = sub_2239942A0(a1, v65);
            if (v48)
            {
              v49 = 0;
              _X9 = v48[4];
              __asm { PRFM            #4, [X9] }
              v52 = v48[7];
              for (i = v60; ; i = v49 + v54)
              {
                v54 = i & v52;
                v55 = *(_QWORD *)(_X9 + v54);
                v56 = ((v55 ^ v61) - 0x101010101010101) & ~(v55 ^ v61) & 0x8080808080808080;
                if (v56)
                  break;
LABEL_57:
                if ((v55 & (~v55 << 6) & 0x8080808080808080) != 0)
                {
                  v11 = v47;
                  v37 = v62;
                  goto LABEL_62;
                }
                v49 += 8;
              }
              while (1)
              {
                v57 = (_DWORD *)(v48[5] + 16 * ((v54 + (__clz(__rbit64(v56)) >> 3)) & v52));
                if (*v57 == v6 && v57[1] == v59 && v57[2] == v10)
                  break;
                v56 &= v56 - 1;
                if (!v56)
                  goto LABEL_57;
              }
              v11 = v47;
              v37 = (_X9 != 0) + v62;
              if (v37 > 1)
                return v37 > 1;
LABEL_62:
              if (++v39 != (char *)&unk_22466F72F)
                goto LABEL_32;
              return v37 > 1;
            }
            v11 = v47;
          }
        }
      }
      if (++v39 == (char *)&unk_22466F72F)
      {
        v37 = v62;
        return v37 > 1;
      }
    }
  }
  v22 = sub_2239942A0(a1, v66);
  if (v22)
  {
    v23 = 0;
    _X9 = v22[4];
    __asm { PRFM            #4, [X9] }
    v29 = (19349669 * v7) ^ (73856093 * v6) ^ (83492791 * v10);
    v30 = (v29 >> 7) ^ 0x13701D;
    v31 = 0x101010101010101 * (v29 & 0x7F);
    v32 = v22[7];
    while (1)
    {
      v33 = v30 & v32;
      v34 = *(_QWORD *)(_X9 + v33);
      for (j = ((v34 ^ v31) - 0x101010101010101) & ~(v34 ^ v31) & 0x8080808080808080; j; j &= j - 1)
      {
        v36 = (_DWORD *)(v22[5] + 16 * ((v33 + (__clz(__rbit64(j)) >> 3)) & v32));
        if (*v36 == v6 && v36[1] == v7 && v36[2] == v10)
        {
          v37 = _X9 != 0;
          return v37 > 1;
        }
      }
      if ((v34 & (~v34 << 6) & 0x8080808080808080) != 0)
        break;
      v23 += 8;
      v30 = v23 + v33;
    }
  }
  v37 = 0;
  return v37 > 1;
}

char *sub_223CF29C4(uint64_t *a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = (19349669 * v8) ^ (73856093 * *a2) ^ (83492791 * v9);
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (19349669 * v8) ^ (73856093 * v7) ^ (83492791 * v9);
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_27;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == v8 && *((_DWORD *)v14 + 6) == v9)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_27:
  v17 = a1 + 2;
  v14 = (char *)operator new(0x48uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  v18 = **a4;
  *((_DWORD *)v14 + 6) = *((_DWORD *)*a4 + 2);
  *((_QWORD *)v14 + 2) = v18;
  *((_QWORD *)v14 + 4) = &unk_2245C5160;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = a1[1];
    }
    if (prime > v11)
    {
LABEL_41:
      if (prime >> 61)
        sub_223174E94();
      v27 = operator new(8 * prime);
      v28 = (void *)*a1;
      *a1 = (uint64_t)v27;
      if (v28)
        operator delete(v28);
      v29 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v29++) = 0;
      while (prime != v29);
      v30 = (_QWORD *)*v17;
      if (!*v17)
        goto LABEL_73;
      v31 = v30[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*a1 + 8 * v33) = v17;
        for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v30 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v35))
          {
            *v30 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*a1 + v36);
            **(_QWORD **)(*a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v35) = v30;
            v30 = i;
            v33 = v35;
          }
        }
        goto LABEL_73;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*a1 + 8 * v31) = v17;
      v40 = (_QWORD *)*v30;
      if (!*v30)
      {
LABEL_73:
        v11 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_74;
        goto LABEL_89;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_67;
        if (*(_QWORD *)(*a1 + 8 * v42))
        {
          *v30 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*a1 + v41);
          **(_QWORD **)(*a1 + v41) = v40;
          v40 = v30;
LABEL_67:
          v30 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v42) = v30;
          v30 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_73;
        }
      }
    }
    if (prime < v11)
    {
      v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v11)
      {
        if (!prime)
        {
          v44 = (void *)*a1;
          *a1 = 0;
          if (v44)
            operator delete(v44);
          v11 = 0;
          a1[1] = 0;
          v43 = -1;
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      v11 = a1[1];
    }
    v43 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_74:
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_30;
      }
      else
      {
        v4 = v10;
        v21 = *a1;
        v22 = *(_QWORD **)(*a1 + 8 * v10);
        if (v22)
          goto LABEL_30;
      }
      goto LABEL_90;
    }
LABEL_89:
    v4 = v43 & v10;
    v21 = *a1;
    v22 = *(_QWORD **)(*a1 + 8 * (v43 & v10));
    if (v22)
      goto LABEL_30;
    goto LABEL_90;
  }
  v21 = *a1;
  v22 = *(_QWORD **)(*a1 + 8 * v4);
  if (v22)
  {
LABEL_30:
    *(_QWORD *)v14 = *v22;
LABEL_96:
    *v22 = v14;
    goto LABEL_97;
  }
LABEL_90:
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v21 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    v22 = (_QWORD *)(*a1 + 8 * v45);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  return v14;
}

void sub_223CF2F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223CF2F14((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223CF2F14(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(_QWORD *)(v2 + 56))
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_223CF2F60(uint64_t *a1, int *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  float v57;
  float v58;
  uint64_t v59;
  _QWORD *v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  size_t v69;
  size_t v70;
  size_t v71;
  _QWORD *j;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  int v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  void **v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  float v102;
  float v103;
  uint64_t v104;
  _QWORD *v105;
  _BOOL8 v106;
  unint64_t v107;
  unint64_t v108;
  size_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  size_t v114;
  size_t v115;
  size_t v116;
  _QWORD *v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *result;
  void *v131;
  _QWORD *v134;

  v7 = -(uint64_t)*((unsigned __int16 *)a1 + 40);
  v8 = a2[1];
  v9 = *a2;
  v10 = *a2 & v7;
  v11 = v8 & v7;
  v12 = a2[2];
  v13 = v12 & v7;
  v14 = (19349669 * (int)(v8 & v7)) ^ (73856093 * v10) ^ (83492791 * (int)(v12 & v7));
  v15 = a1[1];
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v4 = (19349669 * (int)(v8 & v7)) ^ (73856093 * (int)(*a2 & v7)) ^ (83492791 * (int)(v12 & v7));
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = v14 & (v15 - 1);
    }
    v17 = *(void ***)(*a1 + 8 * v4);
    if (v17)
    {
      v18 = (char *)*v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = *((_QWORD *)v18 + 1);
            if (v20 == v14)
            {
              if (*((_DWORD *)v18 + 4) == v10 && *((_DWORD *)v18 + 5) == v11 && *((_DWORD *)v18 + 6) == v13)
                goto LABEL_98;
            }
            else if ((v20 & (v15 - 1)) != v4)
            {
              goto LABEL_27;
            }
            v18 = *(char **)v18;
            if (!v18)
              goto LABEL_27;
          }
        }
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v10 && *((_DWORD *)v18 + 5) == v11 && *((_DWORD *)v18 + 6) == v13)
              goto LABEL_98;
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v4)
              break;
          }
          v18 = *(char **)v18;
        }
        while (v18);
      }
    }
  }
LABEL_27:
  v21 = a1 + 2;
  v18 = (char *)operator new(0x48uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v14;
  *((_DWORD *)v18 + 4) = v10;
  *((_DWORD *)v18 + 5) = v11;
  *((_DWORD *)v18 + 6) = v13;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_DWORD *)v18 + 16) = 1065353216;
  v22 = (float)(unint64_t)(a1[3] + 1);
  v23 = *((float *)a1 + 8);
  if (!v15 || (float)(v23 * (float)v15) < v22)
  {
    v26 = 1;
    if (v15 >= 3)
      v26 = (v15 & (v15 - 1)) != 0;
    v27 = v26 | (2 * v15);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = a1[1];
    }
    if (prime > v15)
    {
LABEL_41:
      if (prime >> 61)
        sub_223174E94();
      v30 = operator new(8 * prime);
      v31 = (void *)*a1;
      *a1 = (uint64_t)v30;
      if (v31)
        operator delete(v31);
      v32 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v32++) = 0;
      while (prime != v32);
      v33 = (_QWORD *)*v21;
      if (!*v21)
        goto LABEL_73;
      v34 = v33[1];
      v35 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v36 = v34 & v35;
        *(_QWORD *)(*a1 + 8 * v36) = v21;
        for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
        {
          v38 = i[1] & v35;
          if (v38 == v36)
          {
            v33 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v38))
          {
            *v33 = *i;
            v39 = 8 * v38;
            *i = **(_QWORD **)(*a1 + v39);
            **(_QWORD **)(*a1 + v39) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v38) = v33;
            v33 = i;
            v36 = v38;
          }
        }
        goto LABEL_73;
      }
      if (v34 >= prime)
        v34 %= prime;
      *(_QWORD *)(*a1 + 8 * v34) = v21;
      v43 = (_QWORD *)*v33;
      if (!*v33)
      {
LABEL_73:
        v15 = prime;
        v46 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_74;
        goto LABEL_89;
      }
      while (1)
      {
        v45 = v43[1];
        if (v45 >= prime)
          v45 %= prime;
        if (v45 == v34)
          goto LABEL_67;
        if (*(_QWORD *)(*a1 + 8 * v45))
        {
          *v33 = *v43;
          v44 = 8 * v45;
          *v43 = **(_QWORD **)(*a1 + v44);
          **(_QWORD **)(*a1 + v44) = v43;
          v43 = v33;
LABEL_67:
          v33 = v43;
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_73;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v45) = v33;
          v33 = v43;
          v43 = (_QWORD *)*v43;
          v34 = v45;
          if (!v43)
            goto LABEL_73;
        }
      }
    }
    if (prime < v15)
    {
      v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v15 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v15)
      {
        if (!prime)
        {
          v47 = (void *)*a1;
          *a1 = 0;
          if (v47)
            operator delete(v47);
          v15 = 0;
          a1[1] = 0;
          v46 = -1;
          goto LABEL_89;
        }
        goto LABEL_41;
      }
      v15 = a1[1];
    }
    v46 = v15 - 1;
    if ((v15 & (v15 - 1)) != 0)
    {
LABEL_74:
      if (v14 >= v15)
      {
        v4 = v14 % v15;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * (v14 % v15));
        if (v25)
          goto LABEL_30;
      }
      else
      {
        v4 = v14;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * v14);
        if (v25)
          goto LABEL_30;
      }
      goto LABEL_90;
    }
LABEL_89:
    v4 = v46 & v14;
    v24 = *a1;
    v25 = *(_QWORD **)(*a1 + 8 * (v46 & v14));
    if (v25)
      goto LABEL_30;
    goto LABEL_90;
  }
  v24 = *a1;
  v25 = *(_QWORD **)(*a1 + 8 * v4);
  if (v25)
  {
LABEL_30:
    *(_QWORD *)v18 = *v25;
LABEL_96:
    *v25 = v18;
    goto LABEL_97;
  }
LABEL_90:
  *(_QWORD *)v18 = *v21;
  *v21 = v18;
  *(_QWORD *)(v24 + 8 * v4) = v21;
  if (*(_QWORD *)v18)
  {
    v48 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v48 >= v15)
        v48 %= v15;
    }
    else
    {
      v48 &= v15 - 1;
    }
    v25 = (_QWORD *)(*a1 + 8 * v48);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  v9 = *a2;
  v8 = a2[1];
  v12 = a2[2];
LABEL_98:
  v49 = (19349669 * v8) ^ (73856093 * v9) ^ (83492791 * v12);
  v50 = *((_QWORD *)v18 + 5);
  if (v50)
  {
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      v15 = (19349669 * v8) ^ (73856093 * v9) ^ (83492791 * v12);
      if (v49 >= v50)
        v15 = v49 % v50;
    }
    else
    {
      v15 = v49 & (v50 - 1);
    }
    v52 = *(void ***)(*((_QWORD *)v18 + 4) + 8 * v15);
    if (v52)
    {
      v53 = *v52;
      if (*v52)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            v55 = v53[1];
            if (v55 == v49)
            {
              if (*((_DWORD *)v53 + 4) == v9 && *((_DWORD *)v53 + 5) == v8 && *((_DWORD *)v53 + 6) == v12)
                goto LABEL_195;
            }
            else if ((v55 & (v50 - 1)) != v15)
            {
              goto LABEL_124;
            }
            v53 = (_QWORD *)*v53;
            if (!v53)
              goto LABEL_124;
          }
        }
        do
        {
          v54 = v53[1];
          if (v54 == v49)
          {
            if (*((_DWORD *)v53 + 4) == v9 && *((_DWORD *)v53 + 5) == v8 && *((_DWORD *)v53 + 6) == v12)
              goto LABEL_195;
          }
          else
          {
            if (v54 >= v50)
              v54 %= v50;
            if (v54 != v15)
              break;
          }
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
    }
  }
LABEL_124:
  v56 = v18 + 48;
  v53 = operator new(0x38uLL);
  *v53 = 0;
  v53[1] = v49;
  v53[2] = *(_QWORD *)a2;
  *((_DWORD *)v53 + 6) = a2[2];
  v53[5] = 0;
  v53[4] = v53 + 5;
  v53[6] = 0;
  v57 = (float)(unint64_t)(*((_QWORD *)v18 + 7) + 1);
  v58 = *((float *)v18 + 16);
  if (!v50 || (float)(v58 * (float)v50) < v57)
  {
    v61 = 1;
    if (v50 >= 3)
      v61 = (v50 & (v50 - 1)) != 0;
    v62 = v61 | (2 * v50);
    v63 = vcvtps_u32_f32(v57 / v58);
    if (v62 <= v63)
      v64 = v63;
    else
      v64 = v62;
    if (v64 == 1)
    {
      v64 = 2;
    }
    else if ((v64 & (v64 - 1)) != 0)
    {
      v64 = std::__next_prime(v64);
      v50 = *((_QWORD *)v18 + 5);
    }
    if (v64 > v50)
    {
LABEL_138:
      if (v64 >> 61)
        sub_223174E94();
      v65 = operator new(8 * v64);
      v66 = (void *)*((_QWORD *)v18 + 4);
      *((_QWORD *)v18 + 4) = v65;
      if (v66)
        operator delete(v66);
      v67 = 0;
      *((_QWORD *)v18 + 5) = v64;
      do
        *(_QWORD *)(*((_QWORD *)v18 + 4) + 8 * v67++) = 0;
      while (v64 != v67);
      v68 = (_QWORD *)*v56;
      if (!*v56)
        goto LABEL_170;
      v69 = v68[1];
      v70 = v64 - 1;
      if ((v64 & (v64 - 1)) == 0)
      {
        v71 = v69 & v70;
        *(_QWORD *)(*((_QWORD *)v18 + 4) + 8 * v71) = v56;
        for (j = (_QWORD *)*v68; *v68; j = (_QWORD *)*v68)
        {
          v73 = j[1] & v70;
          if (v73 == v71)
          {
            v68 = j;
          }
          else
          {
            v74 = *((_QWORD *)v18 + 4);
            if (*(_QWORD *)(v74 + 8 * v73))
            {
              *v68 = *j;
              v75 = 8 * v73;
              *j = **(_QWORD **)(*((_QWORD *)v18 + 4) + v75);
              **(_QWORD **)(*((_QWORD *)v18 + 4) + v75) = j;
            }
            else
            {
              *(_QWORD *)(v74 + 8 * v73) = v68;
              v68 = j;
              v71 = v73;
            }
          }
        }
        goto LABEL_170;
      }
      if (v69 >= v64)
        v69 %= v64;
      *(_QWORD *)(*((_QWORD *)v18 + 4) + 8 * v69) = v56;
      v79 = (_QWORD *)*v68;
      if (!*v68)
      {
LABEL_170:
        v50 = v64;
        v83 = v64 - 1;
        if ((v64 & (v64 - 1)) != 0)
          goto LABEL_171;
        goto LABEL_186;
      }
      while (1)
      {
        v81 = v79[1];
        if (v81 >= v64)
          v81 %= v64;
        if (v81 == v69)
          goto LABEL_164;
        v82 = *((_QWORD *)v18 + 4);
        if (*(_QWORD *)(v82 + 8 * v81))
        {
          *v68 = *v79;
          v80 = 8 * v81;
          *v79 = **(_QWORD **)(*((_QWORD *)v18 + 4) + v80);
          **(_QWORD **)(*((_QWORD *)v18 + 4) + v80) = v79;
          v79 = v68;
LABEL_164:
          v68 = v79;
          v79 = (_QWORD *)*v79;
          if (!v79)
            goto LABEL_170;
        }
        else
        {
          *(_QWORD *)(v82 + 8 * v81) = v68;
          v68 = v79;
          v79 = (_QWORD *)*v79;
          v69 = v81;
          if (!v79)
            goto LABEL_170;
        }
      }
    }
    if (v64 < v50)
    {
      v76 = vcvtps_u32_f32((float)*((unint64_t *)v18 + 7) / *((float *)v18 + 16));
      if (v50 < 3 || (v77 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
      {
        v76 = std::__next_prime(v76);
      }
      else
      {
        v78 = 1 << -(char)__clz(v76 - 1);
        if (v76 >= 2)
          v76 = v78;
      }
      if (v64 <= v76)
        v64 = v76;
      if (v64 < v50)
      {
        if (!v64)
        {
          v84 = (void *)*((_QWORD *)v18 + 4);
          *((_QWORD *)v18 + 4) = 0;
          if (v84)
            operator delete(v84);
          v50 = 0;
          *((_QWORD *)v18 + 5) = 0;
          v83 = -1;
          goto LABEL_186;
        }
        goto LABEL_138;
      }
      v50 = *((_QWORD *)v18 + 5);
    }
    v83 = v50 - 1;
    if ((v50 & (v50 - 1)) != 0)
    {
LABEL_171:
      if (v49 >= v50)
      {
        v15 = v49 % v50;
        v59 = *((_QWORD *)v18 + 4);
        v60 = *(_QWORD **)(v59 + 8 * (v49 % v50));
        if (v60)
          goto LABEL_127;
      }
      else
      {
        v15 = v49;
        v59 = *((_QWORD *)v18 + 4);
        v60 = *(_QWORD **)(v59 + 8 * v49);
        if (v60)
          goto LABEL_127;
      }
      goto LABEL_187;
    }
LABEL_186:
    v15 = v83 & v49;
    v59 = *((_QWORD *)v18 + 4);
    v60 = *(_QWORD **)(v59 + 8 * (v83 & v49));
    if (v60)
      goto LABEL_127;
    goto LABEL_187;
  }
  v59 = *((_QWORD *)v18 + 4);
  v60 = *(_QWORD **)(v59 + 8 * v15);
  if (v60)
  {
LABEL_127:
    *v53 = *v60;
LABEL_193:
    *v60 = v53;
    goto LABEL_194;
  }
LABEL_187:
  *v53 = *v56;
  *v56 = v53;
  *(_QWORD *)(v59 + 8 * v15) = v56;
  if (*v53)
  {
    v85 = *(_QWORD *)(*v53 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v85 >= v50)
        v85 %= v50;
    }
    else
    {
      v85 &= v50 - 1;
    }
    v60 = (_QWORD *)(*((_QWORD *)v18 + 4) + 8 * v85);
    goto LABEL_193;
  }
LABEL_194:
  ++*((_QWORD *)v18 + 7);
LABEL_195:
  v87 = (unint64_t)(v53 + 5);
  v86 = v53[5];
  if (v86)
  {
    while (1)
    {
      while (1)
      {
        v88 = (uint64_t *)v86;
        v89 = *(_DWORD *)(v86 + 28);
        if (v89 <= a3)
          break;
        v86 = *v88;
        v87 = (unint64_t)v88;
        if (!*v88)
          goto LABEL_202;
      }
      if (v89 >= a3)
        break;
      v86 = v88[1];
      if (!v86)
      {
        v87 = (unint64_t)(v88 + 1);
        goto LABEL_202;
      }
    }
  }
  else
  {
    v88 = v53 + 5;
LABEL_202:
    v90 = operator new(0x20uLL);
    v90[7] = a3;
    *(_QWORD *)v90 = 0;
    *((_QWORD *)v90 + 1) = 0;
    *((_QWORD *)v90 + 2) = v88;
    *(_QWORD *)v87 = v90;
    v91 = *(_QWORD *)v53[4];
    if (v91)
    {
      v53[4] = v91;
      v92 = *(uint64_t **)v87;
    }
    else
    {
      v92 = (uint64_t *)v90;
    }
    sub_2231A9A8C((uint64_t *)v53[5], v92);
    ++v53[6];
  }
  v93 = a3;
  v94 = a1[6];
  if (!v94)
    goto LABEL_228;
  v95 = (uint8x8_t)vcnt_s8((int8x8_t)v94);
  v95.i16[0] = vaddlv_u8(v95);
  if (v95.u32[0] > 1uLL)
  {
    v87 = a3;
    if (v94 <= a3)
      v87 = a3 % v94;
  }
  else
  {
    v87 = (v94 - 1) & a3;
  }
  v96 = *(void ***)(a1[5] + 8 * v87);
  if (!v96 || (v97 = (char *)*v96) == 0)
  {
LABEL_228:
    v101 = a1 + 7;
    v97 = (char *)operator new(0x40uLL);
    *(_QWORD *)v97 = 0;
    *((_QWORD *)v97 + 1) = a3;
    *((_DWORD *)v97 + 4) = a3;
    *(_OWORD *)(v97 + 24) = 0u;
    *(_OWORD *)(v97 + 40) = 0u;
    *((_DWORD *)v97 + 14) = 1065353216;
    v102 = (float)(unint64_t)(a1[8] + 1);
    v103 = *((float *)a1 + 18);
    if (v94 && (float)(v103 * (float)v94) >= v102)
    {
      v100 = a4;
      v104 = a1[5];
      v105 = *(_QWORD **)(v104 + 8 * v87);
      if (v105)
      {
LABEL_231:
        *(_QWORD *)v97 = *v105;
        goto LABEL_282;
      }
LABEL_276:
      *(_QWORD *)v97 = *v101;
      *v101 = v97;
      *(_QWORD *)(v104 + 8 * v87) = v101;
      if (!*(_QWORD *)v97)
      {
LABEL_283:
        ++a1[8];
        goto LABEL_284;
      }
      v129 = *(_QWORD *)(*(_QWORD *)v97 + 8);
      if ((v94 & (v94 - 1)) != 0)
      {
        if (v129 >= v94)
          v129 %= v94;
      }
      else
      {
        v129 &= v94 - 1;
      }
      v105 = (_QWORD *)(a1[5] + 8 * v129);
LABEL_282:
      *v105 = v97;
      goto LABEL_283;
    }
    v106 = 1;
    if (v94 >= 3)
      v106 = (v94 & (v94 - 1)) != 0;
    v107 = v106 | (2 * v94);
    v108 = vcvtps_u32_f32(v102 / v103);
    if (v107 <= v108)
      v109 = v108;
    else
      v109 = v107;
    if (v109 == 1)
    {
      v109 = 2;
    }
    else if ((v109 & (v109 - 1)) != 0)
    {
      v109 = std::__next_prime(v109);
      v94 = a1[6];
    }
    if (v109 > v94)
      goto LABEL_242;
    if (v109 >= v94)
      goto LABEL_274;
    v121 = vcvtps_u32_f32((float)(unint64_t)a1[8] / *((float *)a1 + 18));
    if (v94 < 3 || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v94), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
    {
      v121 = std::__next_prime(v121);
    }
    else
    {
      v123 = 1 << -(char)__clz(v121 - 1);
      if (v121 >= 2)
        v121 = v123;
    }
    if (v109 <= v121)
      v109 = v121;
    if (v109 >= v94)
    {
      v94 = a1[6];
      v100 = a4;
      v128 = v94 - 1;
      if ((v94 & (v94 - 1)) != 0)
        goto LABEL_294;
    }
    else
    {
      if (v109)
      {
LABEL_242:
        if (v109 >> 61)
          sub_223174E94();
        v110 = operator new(8 * v109);
        v111 = (void *)a1[5];
        a1[5] = (uint64_t)v110;
        if (v111)
          operator delete(v111);
        v112 = 0;
        a1[6] = v109;
        do
          *(_QWORD *)(a1[5] + 8 * v112++) = 0;
        while (v109 != v112);
        v113 = (_QWORD *)*v101;
        if (!*v101)
          goto LABEL_273;
        v114 = v113[1];
        v115 = v109 - 1;
        if ((v109 & (v109 - 1)) == 0)
        {
          v116 = v114 & v115;
          *(_QWORD *)(a1[5] + 8 * v116) = v101;
          while (1)
          {
            v117 = (_QWORD *)*v113;
            if (!*v113)
              break;
            v118 = v117[1] & v115;
            if (v118 == v116)
            {
              v113 = (_QWORD *)*v113;
            }
            else
            {
              v119 = a1[5];
              if (*(_QWORD *)(v119 + 8 * v118))
              {
                *v113 = *v117;
                v120 = 8 * v118;
                *v117 = **(_QWORD **)(a1[5] + v120);
                **(_QWORD **)(a1[5] + v120) = v117;
              }
              else
              {
                *(_QWORD *)(v119 + 8 * v118) = v113;
                v113 = v117;
                v116 = v118;
              }
            }
          }
LABEL_273:
          v94 = v109;
LABEL_274:
          v100 = a4;
          v128 = v94 - 1;
          if ((v94 & (v94 - 1)) == 0)
            goto LABEL_275;
LABEL_294:
          if (v94 <= v93)
          {
            v87 = v93 % v94;
            v104 = a1[5];
            v105 = *(_QWORD **)(v104 + 8 * (v93 % v94));
            if (v105)
              goto LABEL_231;
          }
          else
          {
            v87 = v93;
            v104 = a1[5];
            v105 = *(_QWORD **)(v104 + 8 * v93);
            if (v105)
              goto LABEL_231;
          }
          goto LABEL_276;
        }
        if (v114 >= v109)
          v114 %= v109;
        *(_QWORD *)(a1[5] + 8 * v114) = v101;
        v124 = (_QWORD *)*v113;
        if (!*v113)
          goto LABEL_273;
        while (1)
        {
          v126 = v124[1];
          if (v126 >= v109)
            v126 %= v109;
          if (v126 == v114)
            goto LABEL_267;
          v127 = a1[5];
          if (*(_QWORD *)(v127 + 8 * v126))
          {
            *v113 = *v124;
            v125 = 8 * v126;
            *v124 = **(_QWORD **)(a1[5] + v125);
            **(_QWORD **)(a1[5] + v125) = v124;
            v124 = v113;
LABEL_267:
            v113 = v124;
            v124 = (_QWORD *)*v124;
            if (!v124)
              goto LABEL_273;
          }
          else
          {
            *(_QWORD *)(v127 + 8 * v126) = v113;
            v113 = v124;
            v124 = (_QWORD *)*v124;
            v114 = v126;
            if (!v124)
              goto LABEL_273;
          }
        }
      }
      v131 = (void *)a1[5];
      a1[5] = 0;
      v100 = a4;
      if (v131)
        operator delete(v131);
      v94 = 0;
      a1[6] = 0;
      v128 = -1;
    }
LABEL_275:
    v87 = v128 & v93;
    v104 = a1[5];
    v105 = *(_QWORD **)(v104 + 8 * (v128 & v93));
    if (v105)
      goto LABEL_231;
    goto LABEL_276;
  }
  if (v95.u32[0] < 2uLL)
  {
    while (1)
    {
      v99 = *((_QWORD *)v97 + 1);
      if (v99 == a3)
      {
        if (*((_DWORD *)v97 + 4) == a3)
          goto LABEL_227;
      }
      else if ((v99 & (v94 - 1)) != v87)
      {
        goto LABEL_228;
      }
      v97 = *(char **)v97;
      if (!v97)
        goto LABEL_228;
    }
  }
  while (1)
  {
    v98 = *((_QWORD *)v97 + 1);
    if (v98 == a3)
      break;
    if (v98 >= v94)
      v98 %= v94;
    if (v98 != v87)
      goto LABEL_228;
LABEL_217:
    v97 = *(char **)v97;
    if (!v97)
      goto LABEL_228;
  }
  if (*((_DWORD *)v97 + 4) != a3)
    goto LABEL_217;
LABEL_227:
  v100 = a4;
LABEL_284:
  v134 = a2;
  result = sub_223A1AD44((uint64_t)(v97 + 24), a2, (uint64_t)&unk_2245BA939, &v134);
  *((_DWORD *)result + 7) = v100;
  return result;
}

void sub_223CF3EE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v4 = (_QWORD *)v1[5];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    operator delete(v6);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223CF3F8C(uint64_t a1, int *a2, int a3)
{
  int8x8_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  unint64_t v42;
  int8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint8x8_t v53;
  unint64_t v54;
  void **v55;
  int8x8_t *v56;
  unint64_t v57;
  unint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  int8x8_t **v67;
  int8x8_t *v68;
  uint64_t v69;
  int8x8_t v70;
  unint64_t v71;
  unint64_t v72;
  int8x8_t v73;
  int8x8_t *v74;
  int8x8_t *v75;
  unint64_t v76;
  unint64_t v77;
  int8x8_t v78;
  unint64_t v79;
  int8x8_t v80;
  int8x8_t v81;
  uint8x8_t v82;
  uint64_t v83;
  int8x8_t *v84;
  int8x8_t *v85;
  unint64_t v86;
  unint64_t v87;
  int8x8_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  int8x8_t v93;
  uint64_t v94;
  unint64_t v95;
  uint8x8_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD **v102;
  _QWORD *v103;
  void *v104;

  v6 = *(int8x8_t *)(a1 + 8);
  if (v6)
  {
    v7 = -(uint64_t)*(unsigned __int16 *)(a1 + 80);
    v8 = a2[1];
    v9 = *a2;
    v10 = *a2 & v7;
    v11 = v8 & v7;
    v12 = a2[2];
    v13 = v12 & v7;
    v14 = (19349669 * v11) ^ (73856093 * v10) ^ (83492791 * v13);
    v15 = (uint8x8_t)vcnt_s8(v6);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = (19349669 * v11) ^ (73856093 * v10) ^ (83492791 * v13);
      if (v14 >= *(_QWORD *)&v6)
        v16 = v14 % *(_QWORD *)&v6;
    }
    else
    {
      v16 = v14 & (*(_QWORD *)&v6 - 1);
    }
    v17 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v21 == v14)
            {
              if (*((_DWORD *)v18 + 4) == v10 && *((_DWORD *)v18 + 5) == v11 && *((_DWORD *)v18 + 6) == v13)
                goto LABEL_28;
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_26;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_26;
          }
        }
        do
        {
          v20 = v18[1];
          if (v20 == v14)
          {
            if (*((_DWORD *)v18 + 4) == v10 && *((_DWORD *)v18 + 5) == v11 && *((_DWORD *)v18 + 6) == v13)
              goto LABEL_28;
          }
          else
          {
            if (v20 >= *(_QWORD *)&v6)
              v20 %= *(_QWORD *)&v6;
            if (v20 != v16)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_26:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/ChunkBlockBundleIndex.cpp", 36, (uint64_t)"iter_chunk != chunk_block_bundle.end() && \"Can only erase an added block!\"", 74, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_240;
  }
  v18 = 0;
  v9 = *a2;
  v8 = a2[1];
  v12 = a2[2];
LABEL_28:
  v22 = (int8x8_t)v18[5];
  if (v22)
  {
    v23 = (19349669 * v8) ^ (73856093 * v9) ^ (83492791 * v12);
    v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = (19349669 * v8) ^ (73856093 * v9) ^ (83492791 * v12);
      if (v23 >= *(_QWORD *)&v22)
        v25 = v23 % *(_QWORD *)&v22;
    }
    else
    {
      v25 = v23 & (*(_QWORD *)&v22 - 1);
    }
    v26 = *(_QWORD ***)(v18[4] + 8 * v25);
    if (v26)
    {
      v27 = *v26;
      if (*v26)
      {
        if (v24.u32[0] < 2uLL)
        {
          v28 = *(_QWORD *)&v22 - 1;
          while (1)
          {
            v30 = v27[1];
            if (v30 == v23)
            {
              if (*((_DWORD *)v27 + 4) == v9 && *((_DWORD *)v27 + 5) == v8 && *((_DWORD *)v27 + 6) == v12)
                goto LABEL_54;
            }
            else if ((v30 & v28) != v25)
            {
              goto LABEL_53;
            }
            v27 = (_QWORD *)*v27;
            if (!v27)
              goto LABEL_53;
          }
        }
        do
        {
          v29 = v27[1];
          if (v29 == v23)
          {
            if (*((_DWORD *)v27 + 4) == v9 && *((_DWORD *)v27 + 5) == v8 && *((_DWORD *)v27 + 6) == v12)
              goto LABEL_54;
          }
          else
          {
            if (v29 >= *(_QWORD *)&v22)
              v29 %= *(_QWORD *)&v22;
            if (v29 != v25)
              break;
          }
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_53:
  v27 = 0;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/ChunkBlockBundleIndex.cpp", 40, (uint64_t)"iter_chunk_block != iter_chunk->second.end() && \"Can only erase an added block!\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_240:
    abort();
  }
LABEL_54:
  v31 = (uint64_t *)v27[5];
  v32 = v27 + 4;
  if (v31)
  {
    v33 = v27 + 5;
    v34 = v27[5];
    do
    {
      v35 = *(_DWORD *)(v34 + 28);
      v36 = v35 < a3;
      if (v35 >= a3)
        v37 = (uint64_t *)v34;
      else
        v37 = (uint64_t *)(v34 + 8);
      if (!v36)
        v33 = (_QWORD *)v34;
      v34 = *v37;
    }
    while (*v37);
    if (v33 != v27 + 5 && *((_DWORD *)v33 + 7) <= a3)
    {
      v38 = (_QWORD *)v33[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        v40 = v33;
        do
        {
          v39 = (_QWORD *)v40[2];
          v41 = *v39 == (_QWORD)v40;
          v40 = v39;
        }
        while (!v41);
      }
      if ((_QWORD *)*v32 == v33)
        *v32 = v39;
      --v27[6];
      sub_2231AFE60(v31, v33);
      operator delete(v33);
    }
  }
  if (v27[6])
  {
    v42 = *(_QWORD *)(a1 + 48);
    if (!v42)
      goto LABEL_122;
  }
  else
  {
    v43 = (int8x8_t)v18[5];
    v44 = v27[1];
    v45 = (uint8x8_t)vcnt_s8(v43);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.u32[0] > 1uLL)
    {
      if (v44 >= *(_QWORD *)&v43)
        v44 %= *(_QWORD *)&v43;
    }
    else
    {
      v44 &= *(_QWORD *)&v43 - 1;
    }
    v46 = v18[4];
    v47 = *(_QWORD **)(v46 + 8 * v44);
    do
    {
      v48 = v47;
      v47 = (_QWORD *)*v47;
    }
    while (v47 != v27);
    if (v48 == v18 + 6)
      goto LABEL_93;
    v49 = v48[1];
    if (v45.u32[0] > 1uLL)
    {
      if (v49 >= *(_QWORD *)&v43)
        v49 %= *(_QWORD *)&v43;
    }
    else
    {
      v49 &= *(_QWORD *)&v43 - 1;
    }
    if (v49 != v44)
    {
LABEL_93:
      if (!*v27)
        goto LABEL_94;
      v50 = *(_QWORD *)(*v27 + 8);
      if (v45.u32[0] > 1uLL)
      {
        if (v50 >= *(_QWORD *)&v43)
          v50 %= *(_QWORD *)&v43;
      }
      else
      {
        v50 &= *(_QWORD *)&v43 - 1;
      }
      if (v50 != v44)
LABEL_94:
        *(_QWORD *)(v46 + 8 * v44) = 0;
    }
    v51 = *v27;
    if (*v27)
    {
      v52 = *(_QWORD *)(v51 + 8);
      if (v45.u32[0] > 1uLL)
      {
        if (v52 >= *(_QWORD *)&v43)
          v52 %= *(_QWORD *)&v43;
      }
      else
      {
        v52 &= *(_QWORD *)&v43 - 1;
      }
      if (v52 != v44)
      {
        *(_QWORD *)(v18[4] + 8 * v52) = v48;
        v51 = *v27;
      }
    }
    *v48 = v51;
    *v27 = 0;
    --v18[7];
    sub_223198030((uint64_t)(v27 + 4), (_QWORD *)v27[5]);
    operator delete(v27);
    v42 = *(_QWORD *)(a1 + 48);
    if (!v42)
      goto LABEL_122;
  }
  v53 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
  v53.i16[0] = vaddlv_u8(v53);
  if (v53.u32[0] > 1uLL)
  {
    v54 = a3;
    if (v42 <= a3)
      v54 = a3 % v42;
  }
  else
  {
    v54 = (v42 - 1) & a3;
  }
  v55 = *(void ***)(*(_QWORD *)(a1 + 40) + 8 * v54);
  if (v55)
  {
    v56 = (int8x8_t *)*v55;
    if (*v55)
    {
      if (v53.u32[0] < 2uLL)
      {
        v57 = v42 - 1;
        while (1)
        {
          v59 = v56[1];
          if (*(_QWORD *)&v59 == a3)
          {
            if (v56[2].i32[0] == a3)
              goto LABEL_123;
          }
          else if ((*(_QWORD *)&v59 & v57) != v54)
          {
            goto LABEL_122;
          }
          v56 = (int8x8_t *)*v56;
          if (!v56)
            goto LABEL_122;
        }
      }
      do
      {
        v58 = (unint64_t)v56[1];
        if (v58 == a3)
        {
          if (v56[2].i32[0] == a3)
            goto LABEL_123;
        }
        else
        {
          if (v58 >= v42)
            v58 %= v42;
          if (v58 != v54)
            break;
        }
        v56 = (int8x8_t *)*v56;
      }
      while (v56);
    }
  }
LABEL_122:
  v56 = 0;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/ChunkBlockBundleIndex.cpp", 50, (uint64_t)"iter_bid != bundle_block_index.end() && \"Bundle not found\"", 58, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_240;
  }
LABEL_123:
  v60 = v56[4];
  if (v60)
  {
    v61 = *a2;
    v62 = a2[1];
    v63 = a2[2];
    v64 = (19349669 * v62) ^ (73856093 * *a2) ^ (83492791 * v63);
    v65 = (uint8x8_t)vcnt_s8(v60);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      v66 = (19349669 * v62) ^ (73856093 * v61) ^ (83492791 * v63);
      if (v64 >= *(_QWORD *)&v60)
        v66 = v64 % *(_QWORD *)&v60;
    }
    else
    {
      v66 = v64 & (*(_QWORD *)&v60 - 1);
    }
    v67 = *(int8x8_t ***)(*(_QWORD *)&v56[3] + 8 * v66);
    if (v67)
    {
      v68 = *v67;
      if (*v67)
      {
        v69 = *(_QWORD *)&v60 - 1;
        if (v65.u32[0] < 2uLL)
        {
          while (1)
          {
            v70 = v68[1];
            if (*(_QWORD *)&v70 == v64)
            {
              if (v68[2].i32[0] == v61 && v68[2].i32[1] == v62 && v68[3].i32[0] == v63)
                goto LABEL_138;
            }
            else if ((*(_QWORD *)&v70 & v69) != v66)
            {
              goto LABEL_174;
            }
            v68 = (int8x8_t *)*v68;
            if (!v68)
              goto LABEL_174;
          }
        }
        do
        {
          v72 = (unint64_t)v68[1];
          if (v72 == v64)
          {
            if (v68[2].i32[0] == v61 && v68[2].i32[1] == v62 && v68[3].i32[0] == v63)
            {
LABEL_138:
              v71 = (unint64_t)v68[1];
              if (v65.u32[0] > 1uLL)
              {
                if (v71 >= *(_QWORD *)&v60)
                  v71 %= *(_QWORD *)&v60;
              }
              else
              {
                v71 &= v69;
              }
              v73 = v56[3];
              v74 = *(int8x8_t **)(*(_QWORD *)&v73 + 8 * v71);
              do
              {
                v75 = v74;
                v74 = (int8x8_t *)*v74;
              }
              while (v74 != v68);
              if (v75 == &v56[5])
                goto LABEL_164;
              v76 = (unint64_t)v75[1];
              if (v65.u32[0] > 1uLL)
              {
                if (v76 >= *(_QWORD *)&v60)
                  v76 %= *(_QWORD *)&v60;
              }
              else
              {
                v76 &= v69;
              }
              if (v76 != v71)
              {
LABEL_164:
                if (!*(_QWORD *)v68)
                  goto LABEL_165;
                v77 = *(_QWORD *)(*(_QWORD *)v68 + 8);
                if (v65.u32[0] > 1uLL)
                {
                  if (v77 >= *(_QWORD *)&v60)
                    v77 %= *(_QWORD *)&v60;
                }
                else
                {
                  v77 &= v69;
                }
                if (v77 != v71)
LABEL_165:
                  *(_QWORD *)(*(_QWORD *)&v73 + 8 * v71) = 0;
              }
              v78 = *v68;
              if (*v68)
              {
                v79 = *(_QWORD *)(*(_QWORD *)&v78 + 8);
                if (v65.u32[0] > 1uLL)
                {
                  if (v79 >= *(_QWORD *)&v60)
                    v79 %= *(_QWORD *)&v60;
                }
                else
                {
                  v79 &= v69;
                }
                if (v79 != v71)
                {
                  *(_QWORD *)(*(_QWORD *)&v56[3] + 8 * v79) = v75;
                  v78 = *v68;
                }
              }
              *v75 = v78;
              *v68 = 0;
              --*(_QWORD *)&v56[6];
              operator delete(v68);
              break;
            }
          }
          else
          {
            if (v72 >= *(_QWORD *)&v60)
              v72 %= *(_QWORD *)&v60;
            if (v72 != v66)
              break;
          }
          v68 = (int8x8_t *)*v68;
        }
        while (v68);
      }
    }
  }
LABEL_174:
  if (v56[6])
  {
    if (v18[7])
      return;
LABEL_208:
    v93 = *(int8x8_t *)(a1 + 8);
    v94 = *v18;
    v95 = v18[1];
    v96 = (uint8x8_t)vcnt_s8(v93);
    v96.i16[0] = vaddlv_u8(v96);
    if (v96.u32[0] > 1uLL)
    {
      if (v95 >= *(_QWORD *)&v93)
        v95 %= *(_QWORD *)&v93;
    }
    else
    {
      v95 &= *(_QWORD *)&v93 - 1;
    }
    v97 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v95);
    do
    {
      v98 = v97;
      v97 = (_QWORD *)*v97;
    }
    while (v97 != v18);
    if (v98 == (_QWORD *)(a1 + 16))
      goto LABEL_225;
    v99 = v98[1];
    if (v96.u32[0] > 1uLL)
    {
      if (v99 >= *(_QWORD *)&v93)
        v99 %= *(_QWORD *)&v93;
    }
    else
    {
      v99 &= *(_QWORD *)&v93 - 1;
    }
    if (v99 != v95)
    {
LABEL_225:
      if (v94)
      {
        v100 = *(_QWORD *)(v94 + 8);
        if (v96.u32[0] > 1uLL)
        {
          v101 = *(_QWORD *)(v94 + 8);
          if (v100 >= *(_QWORD *)&v93)
            v101 = v100 % *(_QWORD *)&v93;
        }
        else
        {
          v101 = v100 & (*(_QWORD *)&v93 - 1);
        }
        if (v101 == v95)
          goto LABEL_229;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v95) = 0;
      v94 = *v18;
    }
    if (!v94)
    {
LABEL_235:
      *v98 = v94;
      *v18 = 0;
      --*(_QWORD *)(a1 + 24);
      v102 = (_QWORD **)v18[6];
      if (v102)
      {
        do
        {
          v103 = *v102;
          sub_223198030((uint64_t)(v102 + 4), v102[5]);
          operator delete(v102);
          v102 = (_QWORD **)v103;
        }
        while (v103);
      }
      v104 = (void *)v18[4];
      v18[4] = 0;
      if (v104)
        operator delete(v104);
      operator delete(v18);
      return;
    }
    v100 = *(_QWORD *)(v94 + 8);
LABEL_229:
    if (v96.u32[0] > 1uLL)
    {
      if (v100 >= *(_QWORD *)&v93)
        v100 %= *(_QWORD *)&v93;
    }
    else
    {
      v100 &= *(_QWORD *)&v93 - 1;
    }
    if (v100 != v95)
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v100) = v98;
      v94 = *v18;
    }
    goto LABEL_235;
  }
  v80 = *(int8x8_t *)(a1 + 48);
  v81 = v56[1];
  v82 = (uint8x8_t)vcnt_s8(v80);
  v82.i16[0] = vaddlv_u8(v82);
  if (v82.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v81 >= *(_QWORD *)&v80)
      *(_QWORD *)&v81 %= *(_QWORD *)&v80;
  }
  else
  {
    *(_QWORD *)&v81 &= *(_QWORD *)&v80 - 1;
  }
  v83 = *(_QWORD *)(a1 + 40);
  v84 = *(int8x8_t **)(v83 + 8 * *(_QWORD *)&v81);
  do
  {
    v85 = v84;
    v84 = (int8x8_t *)*v84;
  }
  while (v84 != v56);
  if (v85 == (int8x8_t *)(a1 + 56))
    goto LABEL_194;
  v86 = (unint64_t)v85[1];
  if (v82.u32[0] > 1uLL)
  {
    if (v86 >= *(_QWORD *)&v80)
      v86 %= *(_QWORD *)&v80;
  }
  else
  {
    v86 &= *(_QWORD *)&v80 - 1;
  }
  if (v86 != *(_QWORD *)&v81)
  {
LABEL_194:
    if (!*(_QWORD *)v56)
      goto LABEL_195;
    v87 = *(_QWORD *)(*(_QWORD *)v56 + 8);
    if (v82.u32[0] > 1uLL)
    {
      if (v87 >= *(_QWORD *)&v80)
        v87 %= *(_QWORD *)&v80;
    }
    else
    {
      v87 &= *(_QWORD *)&v80 - 1;
    }
    if (v87 != *(_QWORD *)&v81)
LABEL_195:
      *(_QWORD *)(v83 + 8 * *(_QWORD *)&v81) = 0;
  }
  v88 = *v56;
  if (*v56)
  {
    v89 = *(_QWORD *)(*(_QWORD *)&v88 + 8);
    if (v82.u32[0] > 1uLL)
    {
      if (v89 >= *(_QWORD *)&v80)
        v89 %= *(_QWORD *)&v80;
    }
    else
    {
      v89 &= *(_QWORD *)&v80 - 1;
    }
    if (v89 != *(_QWORD *)&v81)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v89) = v85;
      v88 = *v56;
    }
  }
  *v85 = v88;
  *v56 = 0;
  --*(_QWORD *)(a1 + 64);
  v90 = (_QWORD *)v56[5];
  if (v90)
  {
    do
    {
      v91 = (_QWORD *)*v90;
      operator delete(v90);
      v90 = v91;
    }
    while (v91);
  }
  v92 = (void *)v56[3];
  v56[3] = 0;
  if (v92)
    operator delete(v92);
  operator delete(v56);
  if (!v18[7])
    goto LABEL_208;
}

void sub_223CF4AB4(_QWORD *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t i;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *j;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  void **v42;
  char *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  BOOL v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  int8x8_t **v73;
  int8x8_t *v74;
  uint64_t v75;
  int8x8_t v76;
  int8x8_t v77;
  uint64_t *v78;
  int8x8_t v79;
  int v80;
  int v81;
  int v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  int8x8_t *v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t k;
  unsigned __int8 v95;
  unint64_t v96;
  unint64_t v97;
  uint8x8_t v98;
  void **v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  uint64_t v105;
  _QWORD *v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  size_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  _QWORD *v114;
  size_t v115;
  size_t v116;
  size_t v117;
  _QWORD *m;
  size_t v119;
  uint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  size_t v129;
  unint64_t v130;
  void **v131;
  unsigned int v132;
  _QWORD *v133;
  unsigned int v134;
  _DWORD *v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD **v152;
  _QWORD *v153;
  int8x8_t *v155;
  _QWORD *v156;
  uint64_t *v157;
  void *__p[2];
  __int128 v159;
  float v160;
  _QWORD *v161;
  __int128 *v162;
  char v163;

  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 8) = 1065353216;
  *(_OWORD *)__p = 0u;
  v159 = 0u;
  v160 = 1.0;
  v5 = sub_2239942A0(a1, a2);
  if (v5)
  {
    for (i = v5[6]; i; i = *(_QWORD *)i)
    {
      v7 = *(_QWORD **)(i + 32);
      if (v7 == (_QWORD *)(i + 40))
        continue;
      v8 = (unint64_t)__p[1];
      do
      {
        v9 = *((int *)v7 + 7);
        if (v8)
        {
          v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
          v10.i16[0] = vaddlv_u8(v10);
          if (v10.u32[0] > 1uLL)
          {
            v3 = *((int *)v7 + 7);
            if (v8 <= v9)
              v3 = v9 % v8;
          }
          else
          {
            v3 = (v8 - 1) & v9;
          }
          v11 = (void **)*((_QWORD *)__p[0] + v3);
          if (v11)
          {
            v12 = *v11;
            if (*v11)
            {
              if (v10.u32[0] < 2uLL)
              {
                while (1)
                {
                  v14 = v12[1];
                  if (v14 == v9)
                  {
                    if (*((_DWORD *)v12 + 4) == (_DWORD)v9)
                      goto LABEL_101;
                  }
                  else if ((v14 & (v8 - 1)) != v3)
                  {
                    goto LABEL_28;
                  }
                  v12 = (_QWORD *)*v12;
                  if (!v12)
                    goto LABEL_28;
                }
              }
              do
              {
                v13 = v12[1];
                if (v13 == v9)
                {
                  if (*((_DWORD *)v12 + 4) == (_DWORD)v9)
                    goto LABEL_101;
                }
                else
                {
                  if (v13 >= v8)
                    v13 %= v8;
                  if (v13 != v3)
                    break;
                }
                v12 = (_QWORD *)*v12;
              }
              while (v12);
            }
          }
        }
LABEL_28:
        v12 = operator new(0x30uLL);
        v161 = v12;
        v162 = &v159;
        *v12 = 0;
        v12[1] = v9;
        *((_DWORD *)v12 + 4) = *((_DWORD *)v7 + 7);
        v12[5] = 0;
        v12[4] = 0;
        v12[3] = v12 + 4;
        v163 = 1;
        v15 = (float)(unint64_t)(*((_QWORD *)&v159 + 1) + 1);
        if (!v8 || (float)(v160 * (float)v8) < v15)
        {
          v18 = (v8 & (v8 - 1)) != 0;
          if (v8 < 3)
            v18 = 1;
          v19 = v18 | (2 * v8);
          v20 = vcvtps_u32_f32(v15 / v160);
          if (v19 <= v20)
            prime = v20;
          else
            prime = v19;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v8 = (unint64_t)__p[1];
          }
          if (prime <= v8)
          {
            if (prime >= v8)
              goto LABEL_78;
            v32 = vcvtps_u32_f32((float)*((unint64_t *)&v159 + 1) / v160);
            if (v8 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
            {
              v32 = std::__next_prime(v32);
            }
            else
            {
              v34 = 1 << -(char)__clz(v32 - 1);
              if (v32 >= 2)
                v32 = v34;
            }
            if (prime <= v32)
              prime = v32;
            if (prime < v8)
            {
              if (prime)
                goto LABEL_42;
              v36 = __p[0];
              __p[0] = 0;
              if (v36)
                operator delete(v36);
              v8 = 0;
              __p[1] = 0;
              v37 = -1;
              goto LABEL_79;
            }
            v8 = (unint64_t)__p[1];
            v37 = (uint64_t)__p[1] - 1;
            if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) == 0)
              goto LABEL_79;
            goto LABEL_91;
          }
LABEL_42:
          if (prime >> 61)
            sub_223174E94();
          v22 = operator new(8 * prime);
          v23 = __p[0];
          __p[0] = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v24++) = 0;
          while (prime != v24);
          v25 = (_QWORD **)v159;
          if (!(_QWORD)v159)
          {
LABEL_90:
            v8 = prime;
            v37 = prime - 1;
            if ((prime & (prime - 1)) == 0)
              goto LABEL_79;
            goto LABEL_91;
          }
          v26 = *(_QWORD *)(v159 + 8);
          v27 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v28 = v26 & v27;
            *((_QWORD *)__p[0] + v28) = &v159;
            for (j = *v25; *v25; j = *v25)
            {
              v30 = j[1] & v27;
              if (v30 == v28)
              {
                v25 = (_QWORD **)j;
              }
              else if (*((_QWORD *)__p[0] + v30))
              {
                *v25 = (_QWORD *)*j;
                v31 = 8 * v30;
                *j = **(_QWORD **)((char *)__p[0] + v31);
                **(_QWORD **)((char *)__p[0] + v31) = j;
              }
              else
              {
                *((_QWORD *)__p[0] + v30) = v25;
                v25 = (_QWORD **)j;
                v28 = v30;
              }
            }
            goto LABEL_90;
          }
          if (v26 < prime)
          {
            *((_QWORD *)__p[0] + v26) = &v159;
            v35 = *v25;
            if (*v25)
              goto LABEL_85;
LABEL_77:
            v8 = prime;
LABEL_78:
            v37 = v8 - 1;
            if ((v8 & (v8 - 1)) == 0)
            {
LABEL_79:
              v3 = v37 & v9;
              v16 = __p[0];
              v17 = (_QWORD *)*((_QWORD *)__p[0] + (v37 & v9));
              if (!v17)
                goto LABEL_80;
              goto LABEL_31;
            }
LABEL_91:
            if (v8 <= v9)
            {
              v3 = v9 % v8;
              v16 = __p[0];
              v17 = (_QWORD *)*((_QWORD *)__p[0] + v9 % v8);
              if (!v17)
                goto LABEL_80;
            }
            else
            {
              v3 = v9;
              v16 = __p[0];
              v17 = (_QWORD *)*((_QWORD *)__p[0] + v9);
              if (!v17)
                goto LABEL_80;
            }
LABEL_31:
            *v12 = *v17;
LABEL_99:
            *v17 = v12;
            goto LABEL_100;
          }
          v26 %= prime;
          *((_QWORD *)__p[0] + v26) = &v159;
          v35 = *v25;
          if (!*v25)
            goto LABEL_77;
          while (1)
          {
LABEL_85:
            v40 = v35[1];
            if (v40 >= prime)
              v40 %= prime;
            if (v40 == v26)
              goto LABEL_84;
            if (*((_QWORD *)__p[0] + v40))
              break;
            *((_QWORD *)__p[0] + v40) = v25;
            v25 = (_QWORD **)v35;
            v35 = (_QWORD *)*v35;
            v26 = v40;
            if (!v35)
              goto LABEL_90;
          }
          *v25 = (_QWORD *)*v35;
          v39 = 8 * v40;
          *v35 = **(_QWORD **)((char *)__p[0] + v39);
          **(_QWORD **)((char *)__p[0] + v39) = v35;
          v35 = v25;
LABEL_84:
          v25 = (_QWORD **)v35;
          v35 = (_QWORD *)*v35;
          if (!v35)
            goto LABEL_90;
          goto LABEL_85;
        }
        v16 = __p[0];
        v17 = (_QWORD *)*((_QWORD *)__p[0] + v3);
        if (v17)
          goto LABEL_31;
LABEL_80:
        *v12 = v159;
        *(_QWORD *)&v159 = v12;
        v16[v3] = &v159;
        if (*v12)
        {
          v38 = *(_QWORD *)(*v12 + 8);
          if ((v8 & (v8 - 1)) != 0)
          {
            if (v38 >= v8)
              v38 %= v8;
          }
          else
          {
            v38 &= v8 - 1;
          }
          v17 = (char *)__p[0] + 8 * v38;
          goto LABEL_99;
        }
LABEL_100:
        ++*((_QWORD *)&v159 + 1);
LABEL_101:
        v42 = (void **)(v12 + 4);
        v41 = (char *)v12[4];
        v3 = (unint64_t)(v12 + 4);
        v43 = (char *)(v12 + 4);
        if (v41)
        {
          v44 = *(_DWORD *)(i + 16);
          v45 = *(_DWORD *)(i + 20);
          v46 = *(_DWORD *)(i + 24);
          while (1)
          {
            while (1)
            {
              v43 = v41;
              v47 = *((_DWORD *)v41 + 7);
              if (v44 == v47)
                break;
              if (v44 >= v47)
              {
                if (v47 >= v44)
                  goto LABEL_141;
                goto LABEL_114;
              }
LABEL_103:
              v41 = *(char **)v43;
              v3 = (unint64_t)v43;
              if (!*(_QWORD *)v43)
                goto LABEL_116;
            }
            v48 = *((_DWORD *)v43 + 8);
            if (v45 != v48)
            {
              if (v45 >= v48)
              {
                if (v48 >= v45)
                  goto LABEL_141;
                goto LABEL_114;
              }
              goto LABEL_103;
            }
            v49 = *((_DWORD *)v43 + 9);
            if (v46 < v49)
              goto LABEL_103;
            if (v49 >= v46)
              goto LABEL_141;
LABEL_114:
            v41 = (char *)*((_QWORD *)v43 + 1);
            if (!v41)
            {
              v3 = (unint64_t)(v43 + 8);
              break;
            }
          }
        }
LABEL_116:
        v50 = (char *)operator new(0x28uLL);
        v51 = *(_QWORD *)(i + 16);
        *((_DWORD *)v50 + 9) = *(_DWORD *)(i + 24);
        *(_QWORD *)(v50 + 28) = v51;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
        *((_QWORD *)v50 + 2) = v43;
        *(_QWORD *)v3 = v50;
        v52 = *(_QWORD *)v12[3];
        if (v52)
        {
          v12[3] = v52;
          v50 = *(char **)v3;
        }
        v53 = (char *)*v42;
        v54 = v50 == *v42;
        v50[24] = v54;
        if (!v54)
        {
          do
          {
            v55 = *((_QWORD *)v50 + 2);
            if (*(_BYTE *)(v55 + 24))
              break;
            v56 = *(char **)(v55 + 16);
            v57 = *(_QWORD *)v56;
            if (*(_QWORD *)v56 == v55)
            {
              v60 = *((_QWORD *)v56 + 1);
              if (!v60 || (v61 = *(unsigned __int8 *)(v60 + 24), v58 = (_BYTE *)(v60 + 24), v61))
              {
                if (*(char **)v55 == v50)
                {
                  *(_BYTE *)(v55 + 24) = 1;
                  v56[24] = 0;
                  v64 = *(_QWORD *)(v55 + 8);
                  *(_QWORD *)v56 = v64;
                  if (v64)
                    goto LABEL_133;
                }
                else
                {
                  v62 = *(uint64_t **)(v55 + 8);
                  v63 = *v62;
                  *(_QWORD *)(v55 + 8) = *v62;
                  if (v63)
                  {
                    *(_QWORD *)(v63 + 16) = v55;
                    v56 = *(char **)(v55 + 16);
                  }
                  v62[2] = (uint64_t)v56;
                  *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v62;
                  *v62 = v55;
                  *(_QWORD *)(v55 + 16) = v62;
                  v56 = (char *)v62[2];
                  v55 = *(_QWORD *)v56;
                  *((_BYTE *)v62 + 24) = 1;
                  v56[24] = 0;
                  v64 = *(_QWORD *)(v55 + 8);
                  *(_QWORD *)v56 = v64;
                  if (v64)
LABEL_133:
                    *(_QWORD *)(v64 + 16) = v56;
                }
                *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
                *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v55;
                *(_QWORD *)(v55 + 8) = v56;
LABEL_139:
                *((_QWORD *)v56 + 2) = v55;
                break;
              }
            }
            else if (!v57 || (v59 = *(unsigned __int8 *)(v57 + 24), v58 = (_BYTE *)(v57 + 24), v59))
            {
              if (*(char **)v55 == v50)
              {
                v68 = *((_QWORD *)v50 + 1);
                *(_QWORD *)v55 = v68;
                if (v68)
                {
                  *(_QWORD *)(v68 + 16) = v55;
                  v56 = *(char **)(v55 + 16);
                }
                *((_QWORD *)v50 + 2) = v56;
                *(_QWORD *)(*(_QWORD *)(v55 + 16) + 8 * (**(_QWORD **)(v55 + 16) != v55)) = v50;
                *((_QWORD *)v50 + 1) = v55;
                *(_QWORD *)(v55 + 16) = v50;
                v56 = (char *)*((_QWORD *)v50 + 2);
                v50[24] = 1;
                v56[24] = 0;
                v55 = *((_QWORD *)v56 + 1);
                v65 = *(char **)v55;
                *((_QWORD *)v56 + 1) = *(_QWORD *)v55;
                if (v65)
LABEL_137:
                  *((_QWORD *)v65 + 2) = v56;
              }
              else
              {
                *(_BYTE *)(v55 + 24) = 1;
                v56[24] = 0;
                v55 = *((_QWORD *)v56 + 1);
                v65 = *(char **)v55;
                *((_QWORD *)v56 + 1) = *(_QWORD *)v55;
                if (v65)
                  goto LABEL_137;
              }
              *(_QWORD *)(v55 + 16) = *((_QWORD *)v56 + 2);
              *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * (**((_QWORD **)v56 + 2) != (_QWORD)v56)) = v55;
              *(_QWORD *)v55 = v56;
              goto LABEL_139;
            }
            *(_BYTE *)(v55 + 24) = 1;
            v50 = v56;
            v56[24] = v56 == v53;
            *v58 = 1;
          }
          while (v56 != v53);
        }
        ++v12[5];
LABEL_141:
        v66 = (_QWORD *)v7[1];
        if (v66)
        {
          do
          {
            v67 = v66;
            v66 = (_QWORD *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            v67 = (_QWORD *)v7[2];
            v54 = *v67 == (_QWORD)v7;
            v7 = v67;
          }
          while (!v54);
        }
        v7 = v67;
      }
      while (v67 != (_QWORD *)(i + 40));
    }
    v157 = (uint64_t *)v159;
    if ((_QWORD)v159)
    {
      v156 = a3 + 2;
LABEL_156:
      v69 = (int8x8_t)a1[6];
      if (v69)
      {
        v70 = *((int *)v157 + 4);
        v71 = (uint8x8_t)vcnt_s8(v69);
        v71.i16[0] = vaddlv_u8(v71);
        if (v71.u32[0] > 1uLL)
        {
          v72 = *((int *)v157 + 4);
          if (*(_QWORD *)&v69 <= v70)
            v72 = v70 % *(_QWORD *)&v69;
        }
        else
        {
          v72 = (*(_QWORD *)&v69 - 1) & v70;
        }
        v73 = *(int8x8_t ***)(a1[5] + 8 * v72);
        if (v73)
        {
          v74 = *v73;
          if (*v73)
          {
            if (v71.u32[0] < 2uLL)
            {
              v75 = *(_QWORD *)&v69 - 1;
              while (1)
              {
                v77 = v74[1];
                if (*(_QWORD *)&v77 == v70)
                {
                  if (v74[2].i32[0] == (_DWORD)v70)
                    goto LABEL_178;
                }
                else if ((*(_QWORD *)&v77 & v75) != v72)
                {
                  goto LABEL_176;
                }
                v74 = (int8x8_t *)*v74;
                if (!v74)
                  goto LABEL_176;
              }
            }
            do
            {
              v76 = v74[1];
              if (*(_QWORD *)&v76 == v70)
              {
                if (v74[2].i32[0] == (_DWORD)v70)
                  goto LABEL_178;
              }
              else
              {
                if (*(_QWORD *)&v76 >= *(_QWORD *)&v69)
                  *(_QWORD *)&v76 %= *(_QWORD *)&v69;
                if (*(_QWORD *)&v76 != v72)
                  break;
              }
              v74 = (int8x8_t *)*v74;
            }
            while (v74);
          }
        }
      }
LABEL_176:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/ChunkBlockBundleIndex.cpp", 87, (uint64_t)"iter_bid != bundle_block_index.end()", 36, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v74 = 0;
LABEL_178:
      v78 = (uint64_t *)v157[3];
      v155 = v74;
      if (v78 == v157 + 4)
        goto LABEL_155;
      while (1)
      {
        v79 = v74[4];
        if (v79)
        {
          v80 = *((_DWORD *)v78 + 7);
          v81 = *((_DWORD *)v78 + 8);
          v82 = *((_DWORD *)v78 + 9);
          v83 = (19349669 * v81) ^ (73856093 * v80) ^ (83492791 * v82);
          v84 = (uint8x8_t)vcnt_s8(v79);
          v84.i16[0] = vaddlv_u8(v84);
          if (v84.u32[0] > 1uLL)
          {
            v85 = (19349669 * v81) ^ (73856093 * v80) ^ (83492791 * v82);
            v86 = v155;
            if (v83 >= *(_QWORD *)&v79)
              v85 = v83 % *(_QWORD *)&v79;
          }
          else
          {
            v85 = v83 & (*(_QWORD *)&v79 - 1);
            v86 = v155;
          }
          v87 = *(uint64_t ***)(*(_QWORD *)&v86[3] + 8 * v85);
          if (v87)
          {
            v88 = *v87;
            if (*v87)
            {
              if (v84.u32[0] < 2uLL)
              {
                v89 = *(_QWORD *)&v79 - 1;
                while (1)
                {
                  v91 = v88[1];
                  if (v83 == v91)
                  {
                    if (*((_DWORD *)v88 + 4) == v80 && *((_DWORD *)v88 + 5) == v81 && *((_DWORD *)v88 + 6) == v82)
                      goto LABEL_214;
                  }
                  else if ((v91 & v89) != v85)
                  {
                    goto LABEL_206;
                  }
                  v88 = (uint64_t *)*v88;
                  if (!v88)
                    goto LABEL_206;
                }
              }
              do
              {
                v90 = v88[1];
                if (v83 == v90)
                {
                  if (*((_DWORD *)v88 + 4) == v80 && *((_DWORD *)v88 + 5) == v81 && *((_DWORD *)v88 + 6) == v82)
                    goto LABEL_214;
                }
                else
                {
                  if (v90 >= *(_QWORD *)&v79)
                    v90 %= *(_QWORD *)&v79;
                  if (v90 != v85)
                    break;
                }
                v88 = (uint64_t *)*v88;
              }
              while (v88);
            }
          }
        }
LABEL_206:
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/ChunkBlockBundleIndex.cpp", 90, (uint64_t)"iter_bid_block != iter_bid->second.end()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v92 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v93 = qword_255795648;
          for (k = qword_255795650; v93 != k; v93 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v93)(*(_QWORD *)(v93 + 8), "iter_bid_block != iter_bid->second.end()", 40, "", 0);
        }
        v95 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "iter_bid_block != iter_bid->second.end()", 40, "", 0);
        v88 = 0;
LABEL_214:
        v96 = *((int *)v157 + 4);
        v97 = a3[1];
        if (v97)
        {
          v98 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
          v98.i16[0] = vaddlv_u8(v98);
          if (v98.u32[0] > 1uLL)
          {
            v3 = *((int *)v157 + 4);
            if (v97 <= v96)
              v3 = v96 % v97;
          }
          else
          {
            v3 = (v97 - 1) & v96;
          }
          v99 = *(void ***)(*a3 + 8 * v3);
          if (v99)
          {
            v100 = *v99;
            if (*v99)
            {
              if (v98.u32[0] < 2uLL)
              {
                while (1)
                {
                  v102 = v100[1];
                  if (v102 == v96)
                  {
                    if (*((_DWORD *)v100 + 4) == (_DWORD)v96)
                      goto LABEL_307;
                  }
                  else if ((v102 & (v97 - 1)) != v3)
                  {
                    goto LABEL_234;
                  }
                  v100 = (_QWORD *)*v100;
                  if (!v100)
                    goto LABEL_234;
                }
              }
              do
              {
                v101 = v100[1];
                if (v101 == v96)
                {
                  if (*((_DWORD *)v100 + 4) == (_DWORD)v96)
                    goto LABEL_307;
                }
                else
                {
                  if (v101 >= v97)
                    v101 %= v97;
                  if (v101 != v3)
                    break;
                }
                v100 = (_QWORD *)*v100;
              }
              while (v100);
            }
          }
        }
LABEL_234:
        v100 = operator new(0x30uLL);
        v161 = v100;
        v162 = (__int128 *)(a3 + 2);
        *v100 = 0;
        v100[1] = v96;
        *((_DWORD *)v100 + 4) = *((_DWORD *)v157 + 4);
        v100[5] = 0;
        v100[4] = 0;
        v100[3] = v100 + 4;
        v163 = 1;
        v103 = (float)(unint64_t)(a3[3] + 1);
        v104 = *((float *)a3 + 8);
        if (!v97 || (float)(v104 * (float)v97) < v103)
          break;
        v105 = *a3;
        v106 = *(_QWORD **)(*a3 + 8 * v3);
        if (v106)
          goto LABEL_237;
LABEL_286:
        *v100 = *v156;
        *v156 = v100;
        *(_QWORD *)(v105 + 8 * v3) = v156;
        if (*v100)
        {
          v127 = *(_QWORD *)(*v100 + 8);
          if ((v97 & (v97 - 1)) != 0)
          {
            if (v127 >= v97)
              v127 %= v97;
          }
          else
          {
            v127 &= v97 - 1;
          }
          v106 = (_QWORD *)(*a3 + 8 * v127);
          goto LABEL_305;
        }
LABEL_306:
        ++a3[3];
LABEL_307:
        v131 = (void **)(v100 + 4);
        v130 = v100[4];
        v132 = *((_DWORD *)v88 + 7);
        v133 = v100 + 4;
        v3 = (unint64_t)(v100 + 4);
        if (v130)
        {
          while (1)
          {
            while (1)
            {
              v3 = v130;
              v134 = *(_DWORD *)(v130 + 28);
              if (v132 >= v134)
                break;
              v130 = *(_QWORD *)v3;
              v133 = (_QWORD *)v3;
              if (!*(_QWORD *)v3)
                goto LABEL_314;
            }
            if (v134 >= v132)
              break;
            v130 = *(_QWORD *)(v3 + 8);
            if (!v130)
            {
              v133 = (_QWORD *)(v3 + 8);
              goto LABEL_314;
            }
          }
        }
        else
        {
LABEL_314:
          v135 = operator new(0x20uLL);
          v135[7] = v132;
          *(_QWORD *)v135 = 0;
          *((_QWORD *)v135 + 1) = 0;
          *((_QWORD *)v135 + 2) = v3;
          *v133 = v135;
          v136 = *(_QWORD *)v100[3];
          if (v136)
          {
            v100[3] = v136;
            v135 = (_DWORD *)*v133;
          }
          v137 = *v131;
          v54 = v135 == *v131;
          *((_BYTE *)v135 + 24) = v54;
          if (!v54)
          {
            do
            {
              v138 = *((_QWORD *)v135 + 2);
              if (*(_BYTE *)(v138 + 24))
                break;
              v139 = *(_BYTE **)(v138 + 16);
              v140 = *(_QWORD *)v139;
              if (*(_QWORD *)v139 == v138)
              {
                v143 = *((_QWORD *)v139 + 1);
                if (!v143 || (v144 = *(unsigned __int8 *)(v143 + 24), v141 = (_BYTE *)(v143 + 24), v144))
                {
                  if (*(_DWORD **)v138 == v135)
                  {
                    *(_BYTE *)(v138 + 24) = 1;
                    v139[24] = 0;
                    v147 = *(_QWORD *)(v138 + 8);
                    *(_QWORD *)v139 = v147;
                    if (v147)
                      goto LABEL_331;
                  }
                  else
                  {
                    v145 = *(uint64_t **)(v138 + 8);
                    v146 = *v145;
                    *(_QWORD *)(v138 + 8) = *v145;
                    if (v146)
                    {
                      *(_QWORD *)(v146 + 16) = v138;
                      v139 = *(_BYTE **)(v138 + 16);
                    }
                    v145[2] = (uint64_t)v139;
                    *(_QWORD *)(*(_QWORD *)(v138 + 16) + 8 * (**(_QWORD **)(v138 + 16) != v138)) = v145;
                    *v145 = v138;
                    *(_QWORD *)(v138 + 16) = v145;
                    v139 = (_BYTE *)v145[2];
                    v138 = *(_QWORD *)v139;
                    *((_BYTE *)v145 + 24) = 1;
                    v139[24] = 0;
                    v147 = *(_QWORD *)(v138 + 8);
                    *(_QWORD *)v139 = v147;
                    if (v147)
LABEL_331:
                      *(_QWORD *)(v147 + 16) = v139;
                  }
                  *(_QWORD *)(v138 + 16) = *((_QWORD *)v139 + 2);
                  *(_QWORD *)(*((_QWORD *)v139 + 2) + 8 * (**((_QWORD **)v139 + 2) != (_QWORD)v139)) = v138;
                  *(_QWORD *)(v138 + 8) = v139;
LABEL_337:
                  *((_QWORD *)v139 + 2) = v138;
                  break;
                }
              }
              else if (!v140 || (v142 = *(unsigned __int8 *)(v140 + 24), v141 = (_BYTE *)(v140 + 24), v142))
              {
                if (*(_DWORD **)v138 == v135)
                {
                  v151 = *((_QWORD *)v135 + 1);
                  *(_QWORD *)v138 = v151;
                  if (v151)
                  {
                    *(_QWORD *)(v151 + 16) = v138;
                    v139 = *(_BYTE **)(v138 + 16);
                  }
                  *((_QWORD *)v135 + 2) = v139;
                  *(_QWORD *)(*(_QWORD *)(v138 + 16) + 8 * (**(_QWORD **)(v138 + 16) != v138)) = v135;
                  *((_QWORD *)v135 + 1) = v138;
                  *(_QWORD *)(v138 + 16) = v135;
                  v139 = (_BYTE *)*((_QWORD *)v135 + 2);
                  *((_BYTE *)v135 + 24) = 1;
                  v139[24] = 0;
                  v138 = *((_QWORD *)v139 + 1);
                  v148 = *(_DWORD **)v138;
                  *((_QWORD *)v139 + 1) = *(_QWORD *)v138;
                  if (v148)
LABEL_335:
                    *((_QWORD *)v148 + 2) = v139;
                }
                else
                {
                  *(_BYTE *)(v138 + 24) = 1;
                  v139[24] = 0;
                  v138 = *((_QWORD *)v139 + 1);
                  v148 = *(_DWORD **)v138;
                  *((_QWORD *)v139 + 1) = *(_QWORD *)v138;
                  if (v148)
                    goto LABEL_335;
                }
                *(_QWORD *)(v138 + 16) = *((_QWORD *)v139 + 2);
                *(_QWORD *)(*((_QWORD *)v139 + 2) + 8 * (**((_QWORD **)v139 + 2) != (_QWORD)v139)) = v138;
                *(_QWORD *)v138 = v139;
                goto LABEL_337;
              }
              *(_BYTE *)(v138 + 24) = 1;
              v135 = v139;
              v139[24] = v139 == (_BYTE *)v137;
              *v141 = 1;
            }
            while (v139 != (_BYTE *)v137);
          }
          ++v100[5];
        }
        v149 = (uint64_t *)v78[1];
        if (v149)
        {
          do
          {
            v150 = v149;
            v149 = (uint64_t *)*v149;
          }
          while (v149);
        }
        else
        {
          do
          {
            v150 = (uint64_t *)v78[2];
            v54 = *v150 == (_QWORD)v78;
            v78 = v150;
          }
          while (!v54);
        }
        v78 = v150;
        v74 = v155;
        if (v150 == v157 + 4)
        {
LABEL_155:
          v157 = (uint64_t *)*v157;
          if (!v157)
            goto LABEL_355;
          goto LABEL_156;
        }
      }
      v107 = (v97 & (v97 - 1)) != 0;
      if (v97 < 3)
        v107 = 1;
      v108 = v107 | (2 * v97);
      v109 = vcvtps_u32_f32(v103 / v104);
      if (v108 <= v109)
        v110 = v109;
      else
        v110 = v108;
      if (v110 == 1)
      {
        v110 = 2;
      }
      else if ((v110 & (v110 - 1)) != 0)
      {
        v110 = std::__next_prime(v110);
        v97 = a3[1];
      }
      if (v110 <= v97)
      {
        if (v110 >= v97)
          goto LABEL_284;
        v121 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
        if (v97 < 3 || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
        {
          v121 = std::__next_prime(v121);
        }
        else
        {
          v123 = 1 << -(char)__clz(v121 - 1);
          if (v121 >= 2)
            v121 = v123;
        }
        if (v110 <= v121)
          v110 = v121;
        if (v110 >= v97)
        {
          v97 = a3[1];
          v126 = v97 - 1;
          if ((v97 & (v97 - 1)) == 0)
            goto LABEL_285;
LABEL_297:
          if (v97 <= v96)
          {
            v3 = v96 % v97;
            v105 = *a3;
            v106 = *(_QWORD **)(*a3 + 8 * (v96 % v97));
            if (!v106)
              goto LABEL_286;
          }
          else
          {
            v3 = v96;
            v105 = *a3;
            v106 = *(_QWORD **)(*a3 + 8 * v96);
            if (!v106)
              goto LABEL_286;
          }
LABEL_237:
          *v100 = *v106;
LABEL_305:
          *v106 = v100;
          goto LABEL_306;
        }
        if (!v110)
        {
          v125 = (void *)*a3;
          *a3 = 0;
          if (v125)
            operator delete(v125);
          v97 = 0;
          a3[1] = 0;
          v126 = -1;
          goto LABEL_285;
        }
      }
      if (v110 >> 61)
        sub_223174E94();
      v111 = operator new(8 * v110);
      v112 = (void *)*a3;
      *a3 = (uint64_t)v111;
      if (v112)
        operator delete(v112);
      v113 = 0;
      a3[1] = v110;
      do
        *(_QWORD *)(*a3 + 8 * v113++) = 0;
      while (v110 != v113);
      v114 = (_QWORD *)*v156;
      if (!*v156)
      {
LABEL_296:
        v97 = v110;
        v126 = v110 - 1;
        if ((v110 & (v110 - 1)) != 0)
          goto LABEL_297;
LABEL_285:
        v3 = v126 & v96;
        v105 = *a3;
        v106 = *(_QWORD **)(*a3 + 8 * (v126 & v96));
        if (!v106)
          goto LABEL_286;
        goto LABEL_237;
      }
      v115 = v114[1];
      v116 = v110 - 1;
      if ((v110 & (v110 - 1)) == 0)
      {
        v117 = v115 & v116;
        *(_QWORD *)(*a3 + 8 * v117) = v156;
        for (m = (_QWORD *)*v114; *v114; m = (_QWORD *)*v114)
        {
          v119 = m[1] & v116;
          if (v119 == v117)
          {
            v114 = m;
          }
          else if (*(_QWORD *)(*a3 + 8 * v119))
          {
            *v114 = *m;
            v120 = 8 * v119;
            *m = **(_QWORD **)(*a3 + v120);
            **(_QWORD **)(*a3 + v120) = m;
          }
          else
          {
            *(_QWORD *)(*a3 + 8 * v119) = v114;
            v114 = m;
            v117 = v119;
          }
        }
        goto LABEL_296;
      }
      if (v115 < v110)
      {
        *(_QWORD *)(*a3 + 8 * v115) = v156;
        v124 = (_QWORD *)*v114;
        if (*v114)
          goto LABEL_291;
        goto LABEL_283;
      }
      v115 %= v110;
      *(_QWORD *)(*a3 + 8 * v115) = v156;
      v124 = (_QWORD *)*v114;
      if (!*v114)
      {
LABEL_283:
        v97 = v110;
LABEL_284:
        v126 = v97 - 1;
        if ((v97 & (v97 - 1)) != 0)
          goto LABEL_297;
        goto LABEL_285;
      }
      while (1)
      {
LABEL_291:
        v129 = v124[1];
        if (v129 >= v110)
          v129 %= v110;
        if (v129 == v115)
          goto LABEL_290;
        if (*(_QWORD *)(*a3 + 8 * v129))
        {
          *v114 = *v124;
          v128 = 8 * v129;
          *v124 = **(_QWORD **)(*a3 + v128);
          **(_QWORD **)(*a3 + v128) = v124;
          v124 = v114;
LABEL_290:
          v114 = v124;
          v124 = (_QWORD *)*v124;
          if (!v124)
            goto LABEL_296;
        }
        else
        {
          *(_QWORD *)(*a3 + 8 * v129) = v114;
          v114 = v124;
          v124 = (_QWORD *)*v124;
          v115 = v129;
          if (!v124)
            goto LABEL_296;
        }
      }
    }
  }
LABEL_355:
  v152 = (_QWORD **)v159;
  if ((_QWORD)v159)
  {
    do
    {
      v153 = *v152;
      sub_223198030((uint64_t)(v152 + 3), v152[4]);
      operator delete(v152);
      v152 = (_QWORD **)v153;
    }
    while (v153);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_223CF5E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_223A31484((uint64_t)va);
  sub_223A31484(v7);
  _Unwind_Resume(a1);
}

uint64_t *sub_223CF5E88@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t **a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v7;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *i;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t *v29;

  a4[1] = 0;
  v4 = a4 + 1;
  a4[2] = 0;
  *a4 = (uint64_t *)(a4 + 1);
  v5 = result[6];
  if (!v5)
    return result;
  v7 = result;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = a3;
    if (v5 <= a3)
      v10 = a3 % v5;
  }
  else
  {
    v10 = (v5 - 1) & a3;
  }
  v11 = *(uint64_t ***)(result[5] + 8 * v10);
  if (!v11)
    return result;
  v12 = *v11;
  if (!v12)
    return result;
  if (v9.u32[0] < 2uLL)
  {
    v13 = v5 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v15 == a3)
      {
        if (*((_DWORD *)v12 + 4) == a3)
          goto LABEL_22;
      }
      else if ((v15 & v13) != v10)
      {
        return result;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        return result;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v14 == a3)
      break;
    if (v14 >= v5)
      v14 %= v5;
    if (v14 != v10)
      return result;
LABEL_11:
    v12 = (uint64_t *)*v12;
    if (!v12)
      return result;
  }
  if (*((_DWORD *)v12 + 4) != a3)
    goto LABEL_11;
LABEL_22:
  for (i = (uint64_t *)v12[5]; i; i = (uint64_t *)*i)
  {
    v17 = -*((unsigned __int16 *)v7 + 40);
    v18 = i[2] & v17;
    v19 = *((_DWORD *)i + 5) & v17;
    v20 = i[3] & v17;
    if (v18 == *a2 && v19 == a2[1] && v20 == a2[2])
    {
      v23 = *((_DWORD *)i + 7);
      v24 = v4;
      v25 = v4;
      if (*v4)
      {
        v26 = *v4;
        while (1)
        {
          while (1)
          {
            v25 = (_QWORD *)v26;
            v27 = *(_DWORD *)(v26 + 28);
            if (v23 >= v27)
              break;
            v26 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_41;
          }
          if (v27 >= v23)
            break;
          v26 = v25[1];
          if (!v26)
          {
            v24 = v25 + 1;
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        v28 = operator new(0x20uLL);
        v28[7] = v23;
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = v25;
        *v24 = v28;
        v29 = (uint64_t *)**a4;
        if (v29)
        {
          *a4 = v29;
          v28 = (_DWORD *)*v24;
        }
        result = sub_2231A9A8C(a4[1], (uint64_t *)v28);
        a4[2] = (uint64_t *)((char *)a4[2] + 1);
      }
    }
  }
  return result;
}

void sub_223CF6088(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_223198030(v1, v2);
  _Unwind_Resume(a1);
}

_QWORD **sub_223CF60A0@<X0>(_QWORD **result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = (unint64_t)result[6];
  if (!v4)
    goto LABEL_21;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v4 <= a2)
      v6 = a2 % v4;
  }
  else
  {
    v6 = (v4 - 1) & a2;
  }
  v7 = (uint64_t **)result[5][v6];
  if (!v7 || (v8 = *v7) == 0)
  {
LABEL_21:
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)a4 = a4 + 8;
    return result;
  }
  if (v5.u32[0] < 2uLL)
  {
    v9 = v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == a2)
      {
        if (*((_DWORD *)v8 + 4) == a2)
          return sub_223CF6258((_QWORD **)a4, (uint64_t *)v8[5], a3, 0);
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == a2)
      break;
    if (v10 >= v4)
      v10 %= v4;
    if (v10 != v6)
      goto LABEL_21;
LABEL_11:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_11;
  return sub_223CF6258((_QWORD **)a4, (uint64_t *)v8[5], a3, 0);
}

void sub_223CF61B8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  sub_223CF639C(a1);
  if (a1[8])
  {
    v2 = (_QWORD *)a1[7];
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (_QWORD *)v2[5];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v2[3];
        v2[3] = 0;
        if (v8)
          operator delete(v8);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[7] = 0;
    v3 = a1[6];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(a1[5] + 8 * i) = 0;
    }
    a1[8] = 0;
  }
}

_QWORD **sub_223CF6258(_QWORD **a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;

  a1[1] = 0;
  v5 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a4)
  {
    v7 = a2;
    do
    {
      v13 = *((_DWORD *)v7 + 7);
      v8 = sub_223A3C618(a1, v5, &v15, &v14, &v13);
      if (!*v8)
      {
        v9 = operator new(0x20uLL);
        v9[7] = v13;
        v10 = v15;
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = v10;
        *v8 = (uint64_t)v9;
        v11 = (_QWORD *)**a1;
        if (v11)
        {
          *a1 = v11;
          v9 = (_DWORD *)*v8;
        }
        sub_2231A9A8C(a1[1], (uint64_t *)v9);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7 != a4);
  }
  return a1;
}

void sub_223CF633C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223198030(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_223CF6354(uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_223198030((uint64_t)(v2 + 3), v2[4]);
    operator delete(v2);
  }
  return a1;
}

void sub_223CF639C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v7;
  void *v8;

  if (a1[3])
  {
    v2 = (_QWORD *)a1[2];
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (_QWORD **)v2[6];
        if (v6)
        {
          do
          {
            v7 = *v6;
            sub_223198030((uint64_t)(v6 + 4), v6[5]);
            operator delete(v6);
            v6 = (_QWORD **)v7;
          }
          while (v7);
        }
        v8 = (void *)v2[4];
        v2[4] = 0;
        if (v8)
          operator delete(v8);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

uint64_t sub_223CF6450@<X0>(_QWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  BOOL v58;
  BOOL v59;
  unsigned int v60;
  char *v61;
  _OWORD v62[2];
  __int128 v63;
  _OWORD v64[2];

  v3 = a1[2];
  if (v3)
  {
    v4 = *a1;
    *(_QWORD *)&v62[0] = *(_QWORD *)(*a1 + 28);
    DWORD2(v62[0]) = *(_DWORD *)(v4 + 36);
    v5 = a1[3];
    *(_QWORD *)((char *)v62 + 12) = *(_QWORD *)(v5 + 28);
    DWORD1(v62[1]) = *(_DWORD *)(v5 + 36);
    v6 = a1[6];
    *((_QWORD *)&v62[1] + 1) = *(_QWORD *)(v6 + 28);
    LODWORD(v63) = *(_DWORD *)(v6 + 36);
    v7 = a1 + 1;
    v8 = a1[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = v7[2];
        v10 = *(_QWORD *)v9 == (_QWORD)v7;
        v7 = (_QWORD *)v9;
      }
      while (v10);
    }
    v11 = *(_QWORD *)(v9 + 28);
    HIDWORD(v63) = *(_DWORD *)(v9 + 36);
    *(_QWORD *)((char *)&v63 + 4) = v11;
    v12 = a1 + 4;
    v13 = a1[4];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = v12[2];
        v10 = *(_QWORD *)v14 == (_QWORD)v12;
        v12 = (_QWORD *)v14;
      }
      while (v10);
    }
    v15 = *(_QWORD *)(v14 + 28);
    DWORD2(v64[0]) = *(_DWORD *)(v14 + 36);
    *(_QWORD *)&v64[0] = v15;
    v18 = a1[7];
    v16 = a1 + 7;
    v17 = v18;
    if (v18)
    {
      do
      {
        v19 = v17;
        v17 = *(_QWORD *)(v17 + 8);
      }
      while (v17);
    }
    else
    {
      do
      {
        v19 = v16[2];
        v10 = *(_QWORD *)v19 == (_QWORD)v16;
        v16 = (_QWORD *)v19;
      }
      while (v10);
    }
    v3 = *(int *)(v19 + 36);
    *(_QWORD *)((char *)v64 + 12) = *(_QWORD *)(v19 + 28);
    DWORD1(v64[1]) = v3;
    v21 = SDWORD2(v62[1]);
    v20 = SHIDWORD(v62[1]);
    v22 = (int)v63;
    v23 = SDWORD1(v63);
    v25 = SDWORD2(v63);
    v24 = SHIDWORD(v63);
    v27 = SLODWORD(v64[0]);
    v26 = SDWORD1(v64[0]);
    v28 = SHIDWORD(v64[0]);
    v29 = SDWORD2(v64[0]);
    v30 = SLODWORD(v64[1]);
    v31.i64[0] = SLODWORD(v62[0]);
    v31.i64[1] = SHIDWORD(v62[0]);
    v32 = v31;
    v31.i64[0] = SDWORD1(v62[0]);
    v31.i64[1] = SLODWORD(v62[1]);
    v33 = v31;
    v31.i64[0] = SDWORD2(v62[0]);
    v31.i64[1] = SDWORD1(v62[1]);
    v34 = v31;
  }
  else
  {
    v30 = 0;
    v28 = 0;
    v29 = 0;
    v26 = 0;
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v22 = 0;
    v20 = 0;
    v21 = 0;
    v32 = 0uLL;
    v63 = 0u;
    memset(v64, 0, 24);
    memset(v62, 0, sizeof(v62));
    v33 = 0uLL;
    v34 = 0uLL;
  }
  v35 = *a2;
  v36 = a2[1];
  v37 = a2[2];
  v38 = vabsq_s64(vsubq_s64(v32, vdupq_n_s64(v35)));
  v39 = vabsq_s64(vsubq_s64(v33, vdupq_n_s64(v36)));
  v40 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v38, v39), (int8x16_t)v38, (int8x16_t)v39);
  v41 = vabsq_s64(vsubq_s64(v34, vdupq_n_s64(v37)));
  v42 = vbslq_s8((int8x16_t)vcgtq_s64(v40, v41), (int8x16_t)v40, (int8x16_t)v41);
  v43 = v21 - v35;
  if (v43 < 0)
    v43 = -v43;
  v44 = v20 - v36;
  if (v44 < 0)
    v44 = -v44;
  if (v43 > v44)
    v44 = v43;
  result = v22 - v37;
  if (result < 0)
    result = -result;
  if (v44 > result)
    result = v44;
  v46 = v23 - v35;
  if (v46 < 0)
    v46 = -v46;
  v47 = v25 - v36;
  if (v47 < 0)
    v47 = -v47;
  if (v46 > v47)
    v47 = v46;
  v48 = v24 - v37;
  if (v48 < 0)
    v48 = -v48;
  if (v47 > v48)
    v48 = v47;
  v49 = v27 - v35;
  if (v49 < 0)
    v49 = -v49;
  v50 = v26 - v36;
  if (v50 < 0)
    v50 = -v50;
  if (v49 > v50)
    v50 = v49;
  v51 = v29 - v37;
  if (v51 < 0)
    v51 = -v51;
  if (v50 > v51)
    v51 = v50;
  v52 = v28 - v35;
  if (v52 < 0)
    v52 = -v52;
  v53 = v30 - v36;
  if (v53 < 0)
    v53 = -v53;
  if (v52 > v53)
    v53 = v52;
  v54 = v3 - v37;
  if (v54 < 0)
    v54 = -v54;
  if (v53 > v54)
    v54 = v53;
  v55 = v42.u64[1];
  if (v42.i64[0] > v42.i64[1])
    v55 = v42.i64[0];
  v56 = v55 >= result;
  if ((uint64_t)v55 <= result)
    v55 = result;
  v57 = 2;
  if (v56)
    v57 = v42.i64[0] < (unint64_t)v42.i64[1];
  v58 = v55 >= v48;
  if ((uint64_t)v55 <= v48)
    v55 = v48;
  if (!v58)
    v57 = 3;
  v59 = v55 >= v51;
  if ((uint64_t)v55 <= v51)
    v55 = v51;
  if (!v59)
    v57 = 4;
  v56 = v55 >= v54;
  v60 = 5;
  if (v56)
    v60 = v57;
  v61 = (char *)v62 + 12 * v60;
  *(_QWORD *)a3 = *(_QWORD *)v61;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v61 + 2);
  return result;
}

char *sub_223CF6738(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v8 = a2[1];
    v7 = a2[2];
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = v5;
        v11 = *((_DWORD *)v5 + 8);
        if (v8 == v11)
          break;
        if (v8 < v11)
          goto LABEL_3;
        if (v11 >= v8)
          return (char *)v10;
LABEL_14:
        v5 = (uint64_t *)v10[1];
        if (!v5)
        {
          v6 = (uint64_t **)(v10 + 1);
          goto LABEL_17;
        }
      }
      v12 = *((_DWORD *)v10 + 9);
      if (v7 != v12)
      {
        if (v7 < v12)
          goto LABEL_3;
        if (v12 >= v7)
          return (char *)v10;
        goto LABEL_14;
      }
      v13 = *((_DWORD *)v10 + 7);
      if (v9 >= v13)
      {
        if (v13 >= v9)
          return (char *)v10;
        goto LABEL_14;
      }
LABEL_3:
      v5 = (uint64_t *)*v10;
      v6 = (uint64_t **)v10;
      if (!*v10)
        goto LABEL_17;
    }
  }
  v10 = (uint64_t *)(a1 + 1);
LABEL_17:
  v14 = v10;
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v15 + 28) = *(_QWORD *)a3;
  *((_DWORD *)v15 + 9) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v14;
  *v6 = (uint64_t *)v15;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v15;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  sub_2231A9A8C(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v15;
}

char *sub_223CF686C(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v8 = a2[1];
    v7 = a2[2];
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = v5;
        v11 = *((_DWORD *)v5 + 9);
        if (v7 == v11)
          break;
        if (v7 < v11)
          goto LABEL_3;
        if (v11 >= v7)
          return (char *)v10;
LABEL_14:
        v5 = (uint64_t *)v10[1];
        if (!v5)
        {
          v6 = (uint64_t **)(v10 + 1);
          goto LABEL_17;
        }
      }
      v12 = *((_DWORD *)v10 + 7);
      if (v9 != v12)
      {
        if (v9 < v12)
          goto LABEL_3;
        if (v12 >= v9)
          return (char *)v10;
        goto LABEL_14;
      }
      v13 = *((_DWORD *)v10 + 8);
      if (v8 >= v13)
      {
        if (v13 >= v8)
          return (char *)v10;
        goto LABEL_14;
      }
LABEL_3:
      v5 = (uint64_t *)*v10;
      v6 = (uint64_t **)v10;
      if (!*v10)
        goto LABEL_17;
    }
  }
  v10 = (uint64_t *)(a1 + 1);
LABEL_17:
  v14 = v10;
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v15 + 28) = *(_QWORD *)a3;
  *((_DWORD *)v15 + 9) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v14;
  *v6 = (uint64_t *)v15;
  v16 = (uint64_t *)**a1;
  v17 = (uint64_t *)v15;
  if (v16)
  {
    *a1 = v16;
    v17 = *v6;
  }
  sub_2231A9A8C(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v15;
}

uint64_t sub_223CF69A0(_QWORD *a1, int *a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = a1 + 1;
  result = a1[1];
  if (!result)
    return result;
  v6 = a2[1];
  v5 = a2[2];
  v7 = v4;
  v8 = (_DWORD *)result;
  v9 = *a2;
  do
  {
    v13 = v8[8];
    v14 = v13 < v6;
    if (v13 == v6)
    {
      v15 = v8[9];
      v14 = v15 < v5;
      if (v15 == v5)
        v14 = v8[7] < v9;
    }
    v10 = v14;
    v11 = v10 == 0;
    if (v10)
      v12 = v8 + 2;
    else
      v12 = v8;
    if (v11)
      v7 = v8;
    v8 = (_DWORD *)*v12;
  }
  while (*v12);
  if (v7 == (_DWORD *)v4)
    return 0;
  v16 = v7[8];
  v17 = v6 < v16;
  if (v6 == v16)
  {
    v18 = v7[9];
    v17 = v5 < v18;
    if (v5 == v18)
    {
      if (v9 < v7[7])
        return 0;
      goto LABEL_25;
    }
  }
  if (v17)
    return 0;
LABEL_25:
  v19 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (v19)
  {
    do
    {
      v20 = v19;
      v19 = (_QWORD *)*v19;
    }
    while (v19);
  }
  else
  {
    v21 = v7;
    do
    {
      v20 = (_QWORD *)v21[2];
      v11 = *v20 == (_QWORD)v21;
      v21 = v20;
    }
    while (!v11);
  }
  if ((_DWORD *)*a1 == v7)
    *a1 = v20;
  --a1[2];
  sub_2231AFE60((uint64_t *)result, (uint64_t *)v7);
  operator delete(v7);
  return 1;
}

uint64_t sub_223CF6ACC(_QWORD *a1, int *a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = a1 + 1;
  result = a1[1];
  if (!result)
    return result;
  v5 = a2[1];
  v6 = a2[2];
  v7 = v4;
  v8 = (_DWORD *)result;
  v9 = *a2;
  do
  {
    v13 = v8[9];
    v14 = v13 < v6;
    if (v13 == v6)
    {
      v15 = v8[7];
      v14 = v15 < v9;
      if (v15 == v9)
        v14 = v8[8] < v5;
    }
    v10 = v14;
    v11 = v10 == 0;
    if (v10)
      v12 = v8 + 2;
    else
      v12 = v8;
    if (v11)
      v7 = v8;
    v8 = (_DWORD *)*v12;
  }
  while (*v12);
  if (v7 == (_DWORD *)v4)
    return 0;
  v16 = v7[9];
  v17 = v6 < v16;
  if (v6 == v16)
  {
    v18 = v7[7];
    v17 = v9 < v18;
    if (v9 == v18)
    {
      if (v5 < v7[8])
        return 0;
      goto LABEL_25;
    }
  }
  if (v17)
    return 0;
LABEL_25:
  v19 = (_QWORD *)*((_QWORD *)v7 + 1);
  if (v19)
  {
    do
    {
      v20 = v19;
      v19 = (_QWORD *)*v19;
    }
    while (v19);
  }
  else
  {
    v21 = v7;
    do
    {
      v20 = (_QWORD *)v21[2];
      v11 = *v20 == (_QWORD)v21;
      v21 = v20;
    }
    while (!v11);
  }
  if ((_DWORD *)*a1 == v7)
    *a1 = v20;
  --a1[2];
  sub_2231AFE60((uint64_t *)result, (uint64_t *)v7);
  operator delete(v7);
  return 1;
}

uint64_t sub_223CF6BF8(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _WORD *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v18 = *a2;
  v19 = *((_DWORD *)a2 + 2);
  v20 = *a3;
  v21 = *((_DWORD *)a3 + 2);
  if (a4 == 255)
  {
    v8 = 3;
  }
  else
  {
    if (a4 >= 0x2A
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v8 = byte_224693EA5[a4];
  }
  ++*(_DWORD *)(a1 + 4 * v8 + 292);
  v9 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v10 + 1;
  if (v9 <= 9)
  {
    v11 = a1 + 28 * v9;
    *(_DWORD *)(a1 + 4) = v9 + 1;
    *(_QWORD *)(v11 + 12) = v18;
    *(_DWORD *)(v11 + 20) = v19;
    *(_QWORD *)(v11 + 24) = v20;
    *(_DWORD *)(v11 + 32) = v21;
    v12 = (_WORD *)(v11 + 36);
LABEL_13:
    *v12 = a4 | ((_WORD)a5 << 8);
    result = 1;
    *(_BYTE *)(a1 + 320) = 1;
    *(_BYTE *)(a1 + 336) |= *(unsigned __int8 *)(a1 + 338) != a4;
    *(_BYTE *)(a1 + 337) |= *(unsigned __int8 *)(a1 + 339) != a5;
    return result;
  }
  if (v10 >= 0x7FFF)
    v13 = 0x7FFF;
  else
    v13 = v10;
  v14 = 214013 * *(_DWORD *)a1 + 2531011;
  *(_DWORD *)a1 = v14;
  v15 = (HIWORD(v14) & 0x7FFF) % (v13 + 1);
  if (v15 <= 9)
  {
    v16 = a1 + 28 * v15;
    *(_QWORD *)(v16 + 12) = v18;
    *(_DWORD *)(v16 + 20) = v19;
    *(_QWORD *)(v16 + 24) = v20;
    *(_DWORD *)(v16 + 32) = v21;
    v12 = (_WORD *)(v16 + 36);
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_223CF6DD0(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;

  if (!*(_DWORD *)(a1 + 4)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/PointCloudBlock.cpp", 124, (uint64_t)"points_.Count() > 0", 19, (uint64_t)"No points in block to compute mean", 34, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 320))
  {
    *(_BYTE *)(a1 + 320) = 0;
    v4 = (_QWORD *)(a1 + 324);
    *(_DWORD *)(a1 + 324) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    v5 = *(_DWORD *)(a1 + 4);
    a2.i64[0] = *(_QWORD *)(a1 + 324);
    a2.i32[2] = *(_DWORD *)(a1 + 332);
    if (v5)
    {
      v6 = a1 + 12;
      v7 = *(unsigned int *)(a1 + 4);
      do
      {
        a3.i64[0] = *(_QWORD *)v6;
        a3.i32[2] = *(_DWORD *)(v6 + 8);
        a2 = vaddq_f32(a2, a3);
        *(_DWORD *)(a1 + 332) = a2.i32[2];
        *v4 = a2.i64[0];
        v6 += 28;
        --v7;
      }
      while (v7);
    }
    a3.f32[0] = (float)v5;
    v8 = vdivq_f32(a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0));
    *(_DWORD *)(a1 + 332) = v8.i32[2];
    *v4 = v8.i64[0];
  }
  return a1 + 324;
}

uint64_t sub_223CF6EA4(float32x2_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, float32x2_t a6)
{
  uint64_t v7;
  unint64_t v9;
  float32x2_t *v10;
  uint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  unsigned int v15;
  unint64_t v16;

  v7 = a1->u32[1];
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = a1 + 3;
    do
    {
      a3.i64[0] = *(_QWORD *)a2;
      a3.i32[2] = *(_DWORD *)(a2 + 8);
      *(float32x2_t *)a4.f32 = *(float32x2_t *)((char *)v10 - 12);
      a4.i32[2] = v10[-1].i32[1];
      a3 = vsubq_f32(a3, a4);
      a4 = (float32x4_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL);
      a6.i32[0] = v10[1].i32[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *v10), (float32x2_t)vdup_lane_s32((int32x2_t)*v10, 1), *(float32x2_t *)a3.f32, 1), a6, *(float32x2_t *)a4.f32).f32[0] >= 0.0)v9 = sub_223A4EC9C(v9, ((unint64_t)v10[1].u8[4] << 8) | 1, 0xFFu);
      v10 = (float32x2_t *)((char *)v10 + 28);
      --v7;
    }
    while (v7);
    if ((_BYTE)v9 && BYTE1(v9) != 0xFF)
      return BYTE1(v9);
  }
  if (!a1[42].i8[0])
    return a1[42].u8[2];
  a1[42].i8[0] = 0;
  v12 = a1->u32[1];
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (float32x2_t *)((char *)a1 + 36);
    do
    {
      v15 = v14->u8[0];
      v14 = (float32x2_t *)((char *)v14 + 28);
      v13 = sub_223A4EC9C(v13, ((unint64_t)v15 << 8) | 1, 0xFFu);
      --v12;
    }
    while (v12);
    v16 = v13 >> 8;
    if (!(_BYTE)v13)
      LOBYTE(v16) = -1;
  }
  else
  {
    LOBYTE(v16) = -1;
  }
  a1[42].i8[2] = v16;
  return v16;
}

uint64_t sub_223CF6FF0(float32x2_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, float32x2_t a6)
{
  uint64_t v7;
  unint64_t v9;
  float32x2_t *v10;
  uint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  unsigned int v15;
  unint64_t v16;

  v7 = a1->u32[1];
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = a1 + 3;
    do
    {
      a3.i64[0] = *(_QWORD *)a2;
      a3.i32[2] = *(_DWORD *)(a2 + 8);
      *(float32x2_t *)a4.f32 = *(float32x2_t *)((char *)v10 - 12);
      a4.i32[2] = v10[-1].i32[1];
      a3 = vsubq_f32(a3, a4);
      a4 = (float32x4_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL);
      a6.i32[0] = v10[1].i32[0];
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *v10), (float32x2_t)vdup_lane_s32((int32x2_t)*v10, 1), *(float32x2_t *)a3.f32, 1), a6, *(float32x2_t *)a4.f32).f32[0] >= 0.0)v9 = sub_223A4EC9C(v9, ((unint64_t)v10[1].u8[5] << 8) | 1, 0xFFu);
      v10 = (float32x2_t *)((char *)v10 + 28);
      --v7;
    }
    while (v7);
    if ((_BYTE)v9 && BYTE1(v9) != 0xFF)
      return BYTE1(v9);
  }
  if (!a1[42].i8[1])
    return a1[42].u8[3];
  a1[42].i8[1] = 0;
  v12 = a1->u32[1];
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (float32x2_t *)((char *)a1 + 37);
    do
    {
      v15 = v14->u8[0];
      v14 = (float32x2_t *)((char *)v14 + 28);
      v13 = sub_223A4EC9C(v13, ((unint64_t)v15 << 8) | 1, 0xFFu);
      --v12;
    }
    while (v12);
    v16 = v13 >> 8;
    if (!(_BYTE)v13)
      LOBYTE(v16) = -1;
  }
  else
  {
    LOBYTE(v16) = -1;
  }
  a1[42].i8[3] = v16;
  return v16;
}

uint64_t sub_223CF713C(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  float v6;
  int v7;
  uint64_t v8;
  BOOL v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t i;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  void *v26;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24EC63AC8;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = (float)a3 * a4;
  v28[0] = &off_24EC63B70;
  v28[1] = a1;
  v29 = v28;
  sub_223E8A268(a1 + 16, 8u, 8u, v6);
  v7 = a2 >> 6;
  if (a2 >> 6 <= 0x20)
    v7 = 32;
  *(_QWORD *)(a1 + 16) = &off_24EC63B00;
  *(_DWORD *)(a1 + 288) = 0x80000000;
  *(_DWORD *)(a1 + 292) = v7;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_QWORD *)(a1 + 2392) = a1 + 2400;
  v8 = (uint64_t)v29;
  if (!v29)
    goto LABEL_6;
  if (v29 != v28)
  {
    v8 = (*(uint64_t (**)(void))(*v29 + 16))();
LABEL_6:
    *(_QWORD *)(a1 + 2440) = v8;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 2440) = a1 + 2416;
  (*(void (**)(_QWORD *, uint64_t))(v28[0] + 24))(v28, a1 + 2416);
LABEL_8:
  v10 = (SLODWORD(v6) <= -1 || ((LODWORD(v6) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F)
     && (LODWORD(v6) - 1) >= 0x7FFFFF;
  if (v10
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 38, (uint64_t)"math::IsFinite(voxel_size) && voxel_size > 0", 44, (uint64_t)"Invalid voxel size", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v11 = *(unsigned int *)(a1 + 292);
  if ((_DWORD)v11)
  {
    v12 = *(_BYTE **)(a1 + 2344);
    if (v11 > (uint64_t)(*(_QWORD *)(a1 + 2360) - (_QWORD)v12) >> 11)
    {
      v13 = *(_BYTE **)(a1 + 2352);
      v14 = (char *)operator new(v11 << 11);
      v15 = &v14[2048 * v11];
      v16 = (v13 - v12) & 0xFFFFFFFFFFFFF800;
      v17 = &v14[v16];
      v18 = &v14[v16];
      if (v13 != v12)
      {
        v18 = &v14[v16];
        do
        {
          v13 -= 2048;
          v18 -= 2048;
          memcpy(v18, v13, 0x800uLL);
        }
        while (v13 != v12);
      }
      *(_QWORD *)(a1 + 2344) = v18;
      *(_QWORD *)(a1 + 2352) = v17;
      *(_QWORD *)(a1 + 2360) = v15;
      if (v12)
        operator delete(v12);
    }
  }
  v19 = 296;
  for (i = 513; i > 1; --i)
  {
    *(_DWORD *)(a1 + v19) = *(_DWORD *)(a1 + 288);
    v19 += 4;
  }
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
    goto LABEL_30;
  }
  if (v29)
  {
    v22 = 5;
LABEL_30:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  *(_QWORD *)(a1 + 2464) = 0;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_DWORD *)(a1 + 2472) = a2;
  *(_QWORD *)(a1 + 2480) = 0;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_QWORD *)(a1 + 2504) = a1 + 2512;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_QWORD *)(a1 + 2528) = a1 + 2536;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  if (a2)
  {
    v23 = a2;
    v24 = (char *)operator new(520 * a2);
    v25 = sub_223D024AC(0, 0, 0, 0, (uint64_t)v24, (uint64_t)v24);
    v26 = *(void **)(a1 + 2448);
    *(_QWORD *)(a1 + 2448) = v25;
    *(_QWORD *)(a1 + 2456) = v24;
    *(_QWORD *)(a1 + 2464) = &v24[520 * v23];
    if (v26)
      operator delete(v26);
  }
  return a1;
}

void sub_223CF7460(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  _QWORD **v7;
  void *v9;
  void *v10;

  sub_223198030(v3, 0);
  sub_223198030(v4, *v7);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 2488) = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 2456) = v10;
    operator delete(v10);
  }
  sub_223CF75A8(v2);
  _Unwind_Resume(a1);
}

void sub_223CF74AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  void *v17;
  void *v18;

  sub_223198030(v13 + 2392, *(_QWORD **)(v13 + 2400));
  v17 = *(void **)(v13 + 2368);
  if (v17)
  {
    *(_QWORD *)(v13 + 2376) = v17;
    operator delete(v17);
    v18 = *v15;
    if (!*v15)
    {
LABEL_4:
      sub_223E8A464(v14);
      if (a13 == &a10)
      {
        (*(void (**)(void))(a10 + 32))();
        _Unwind_Resume(a1);
      }
      if (!a13)
        _Unwind_Resume(a1);
      (*(void (**)(void))(*a13 + 40))();
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = *v15;
    if (!*v15)
      goto LABEL_4;
  }
  *(_QWORD *)(v13 + 2352) = v18;
  operator delete(v18);
  goto LABEL_4;
}

_QWORD *sub_223CF75A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_24EC63B00;
  v2 = (_QWORD *)(a1 + 2400);
  v3 = *(_QWORD **)(a1 + 2424);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_223198030(a1 + 2376, *(_QWORD **)(a1 + 2384));
  v5 = *(void **)(a1 + 2352);
  if (v5)
  {
    *(_QWORD *)(a1 + 2360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2328);
  if (v6)
  {
    *(_QWORD *)(a1 + 2336) = v6;
    operator delete(v6);
  }
  return sub_223E8A464((_QWORD *)a1);
}

uint64_t sub_223CF7630(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &off_24EC63AC8;
  sub_223198030(a1 + 2528, *(_QWORD **)(a1 + 2536));
  sub_223198030(a1 + 2504, *(_QWORD **)(a1 + 2512));
  v2 = *(void **)(a1 + 2480);
  if (v2)
  {
    *(_QWORD *)(a1 + 2488) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2448);
  if (v3)
  {
    *(_QWORD *)(a1 + 2456) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 16) = &off_24EC63B00;
  v4 = *(_QWORD **)(a1 + 2440);
  if (v4 == (_QWORD *)(a1 + 2416))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 2416);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  sub_223198030(a1 + 2392, *(_QWORD **)(a1 + 2400));
  v6 = *(void **)(a1 + 2368);
  if (v6)
  {
    *(_QWORD *)(a1 + 2376) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 2344);
  if (v7)
  {
    *(_QWORD *)(a1 + 2352) = v7;
    operator delete(v7);
  }
  sub_223E8A464((_QWORD *)(a1 + 16));
  return a1;
}

void sub_223CF770C(uint64_t a1)
{
  sub_223CF7630(a1);
  JUMPOUT(0x227684CE8);
}

double sub_223CF7730(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 192) = 0x80000000;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 2352) = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 2376) = *(_QWORD *)(a1 + 2368);
  sub_223198030(a1 + 2392, *(_QWORD **)(a1 + 2400));
  *(_QWORD *)(a1 + 2392) = a1 + 2400;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2456) = *(_QWORD *)(a1 + 2448);
  *(_QWORD *)(a1 + 2488) = *(_QWORD *)(a1 + 2480);
  sub_223198030(a1 + 2504, *(_QWORD **)(a1 + 2512));
  *(_QWORD *)(a1 + 2504) = a1 + 2512;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  return result;
}

void sub_223CF7804(uint64_t a1)
{
  *(_QWORD *)(a1 + 176) = 0x80000000;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 2336) = *(_QWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a1 + 2352);
  sub_223198030(a1 + 2376, *(_QWORD **)(a1 + 2384));
  *(_QWORD *)(a1 + 2376) = a1 + 2384;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2384) = 0;
}

void sub_223CF789C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, _QWORD *a6, double a7, float32x4_t a8)
{
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  int8x16_t v17;
  unsigned int v18;
  unint64_t v19;
  signed __int32 v20;
  signed __int32 v21;
  uint64_t v22;
  int *v23;
  int v24;
  signed __int32 v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  signed int v30;
  signed __int32 v31;
  signed __int32 v32;
  _DWORD *v33;
  BOOL v34;
  signed __int32 v36;
  int v37;
  int i;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  _BYTE v74[12];

  v14 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v14 = (*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v14 = (*(_DWORD *)(a2 + 8) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v14)
    return;
  v15 = (*(_DWORD *)a3 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)a3 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v15 = (*(_DWORD *)(a3 + 4) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a3 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v15 = (*(_DWORD *)(a3 + 8) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v15)
    return;
  v16 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v16 = (*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v16 = (*(_DWORD *)(a2 + 8) & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v16
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_76;
  }
  a8.i64[0] = *(_QWORD *)a2;
  a8.i32[2] = *(_DWORD *)(a2 + 8);
  v17 = (int8x16_t)vmulq_n_f32(a8, *(float *)(a1 + 148));
  v18 = vcvtms_s32_f32(*(float *)v17.i32);
  *(_DWORD *)v74 = v18;
  *(int32x2_t *)a8.f32 = vcvt_s32_f32(vrndm_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL)));
  *(_QWORD *)&v74[4] = a8.i64[0];
  v19 = *(unsigned int *)(a1 + 192);
  if ((v19 & 0x80000000) == 0)
  {
    v20 = a8.i32[0] & 0xFFFFFFF8;
    v21 = a8.i32[1] & 0xFFFFFFF8;
    v22 = *(_QWORD *)(a1 + 200);
    v23 = (int *)(v22 + 4488 * (v19 & 0xFFFFFFFFCFFFFFFFLL));
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = (v18 & 0xFFFFFFF8) - *v23;
    v28 = (int)(v18 & 0xFFFFFFF8) < *v23 || v20 < v25;
    if (!v28 && v21 >= v26)
    {
      v30 = v23[3];
      v33 = v23 + 4;
      v32 = v23[4];
      v31 = v33[1];
      v34 = (int)(v18 & 0xFFFFFFF8) < v30 && v20 < v32;
      if (v34 && v21 < v31)
      {
        v36 = v20 - v25;
        v37 = v21 - v26;
        for (i = v30 - v24; ; v37 -= i & v37)
        {
          i >>= 1;
          v19 = *(unsigned int *)(v22
                                + 4488 * (v19 & 0xCFFFFFFF)
                                + 4 * ((4 * ((i & v27) != 0)) | (2 * ((i & v36) != 0)) | ((i & v37) != 0))
                                + 24);
          if (i == *(_DWORD *)(a1 + 152) || v19 >> 30)
            break;
          v27 -= i & v27;
          v36 -= i & v36;
        }
        if ((v19 & 0x80000000) == 0)
        {
          v39 = *(_QWORD *)(a1 + 2344);
          if (v19 < (*(_QWORD *)(a1 + 2352) - v39) >> 11)
          {
LABEL_38:
            v40 = v39 + (v19 << 11);
            goto LABEL_40;
          }
          v66 = a8;
          if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
          {
            v39 = *(_QWORD *)(a1 + 2344);
            a8 = v66;
            goto LABEL_38;
          }
LABEL_76:
          abort();
        }
      }
    }
  }
  v40 = a1 + 296;
LABEL_40:
  v41 = (int8x8_t)vshl_u32(*(uint32x2_t *)a8.f32, (uint32x2_t)0x600000003);
  a8.i64[0] = 0x1C000000038;
  v42 = COERCE_DOUBLE(vand_s8(v41, (int8x8_t)0x1C000000038));
  v43 = *(unsigned int *)(v40 + 4 * (LODWORD(v42) | v18 & 7 | HIDWORD(v42)));
  if ((v43 & 0x20000000) != 0)
  {
    if (!(v43 >> 30))
      sub_223CF7DE8(a1, v43);
  }
  else if (!(v43 >> 29))
  {
    v44 = v43 & 0xCFFFFFFF;
    v45 = *(_QWORD *)(a1 + 2448);
    v46 = v45 + 520 * (v43 & 0xFFFFFFFFCFFFFFFFLL);
    *(_QWORD *)(v46 + 312) = *a6;
    v47 = *(unsigned int *)(v46 + 4);
    if (a4 == 254)
    {
      v48 = v45 + 520 * v44;
      if (*(_BYTE *)(v48 + 336))
      {
        *(_BYTE *)(v48 + 336) = 0;
        if ((_DWORD)v47)
        {
          v49 = 0;
          v64 = v45;
          v67 = v47;
          v50 = (unsigned __int8 *)(v45 + 520 * v44 + 36);
          do
          {
            v51 = *v50;
            v50 += 28;
            v49 = sub_223A4EC9C(v49, ((unint64_t)v51 << 8) | 1, 0xFFu);
            --v47;
          }
          while (v47);
          if ((_BYTE)v49)
            LOBYTE(a4) = BYTE1(v49);
          else
            LOBYTE(a4) = -1;
          v45 = v64;
          LODWORD(v47) = v67;
        }
        else
        {
          LOBYTE(a4) = -1;
        }
        *(_BYTE *)(v45 + 520 * v44 + 338) = a4;
      }
      else
      {
        LOBYTE(a4) = *(_BYTE *)(v45 + 520 * v44 + 338);
      }
    }
    if (a5 == 254)
    {
      v58 = v45 + 520 * v44;
      if (*(_BYTE *)(v58 + 337))
      {
        *(_BYTE *)(v58 + 337) = 0;
        v59 = *(unsigned int *)(v46 + 4);
        if ((_DWORD)v59)
        {
          v65 = v45;
          v60 = 0;
          v61 = (unsigned __int8 *)(520 * v44 + v45 + 37);
          do
          {
            v62 = *v61;
            v61 += 28;
            v60 = sub_223A4EC9C(v60, ((unint64_t)v62 << 8) | 1, 0xFFu);
            --v59;
          }
          while (v59);
          if ((_BYTE)v60)
            LOBYTE(a5) = BYTE1(v60);
          else
            LOBYTE(a5) = -1;
          v45 = v65;
        }
        else
        {
          LOBYTE(a5) = -1;
        }
        *(_BYTE *)(v45 + 520 * v44 + 339) = a5;
      }
      else
      {
        LOBYTE(a5) = *(_BYTE *)(v45 + 520 * v44 + 339);
      }
    }
    v63 = sub_223CF6BF8(v46, (uint64_t *)a2, (uint64_t *)a3, a4, a5);
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(v46 + 4) - v47;
    if (v63)
    {
      v68 = *(_QWORD *)v74;
      v69 = *(_DWORD *)&v74[8];
      v53 = (int *)&v68;
      v54 = a1;
      v55 = v43;
      v56 = v43;
      goto LABEL_74;
    }
    return;
  }
  v52 = sub_223CF872C(a1, (uint64_t *)a2, (uint64_t *)a3, a4, a5, a6, 1, v42, a8);
  if (HIDWORD(v52))
  {
    v57 = v52;
    v72 = *(_QWORD *)v74;
    v73 = *(_DWORD *)&v74[8];
    sub_223CF89D8(a1, (int *)&v72, v43, v52);
    *(_DWORD *)sub_223CF8CFC(a1 + 16, (int *)v74) = v57;
    return;
  }
  if ((v43 & 0x60000000) != 0)
  {
    *(_DWORD *)sub_223CF8CFC(a1 + 16, (int *)v74) = 0x80000000;
    v70 = *(_QWORD *)v74;
    v71 = *(_DWORD *)&v74[8];
    v53 = (int *)&v70;
    v54 = a1;
    v55 = v43;
    v56 = 0x80000000;
LABEL_74:
    sub_223CF89D8(v54, v53, v55, v56);
  }
}

void sub_223CF7DE8(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned int *v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  _OWORD *v79;
  unsigned int *v80;
  uint64_t v81;
  __int128 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[3];
  int v87;
  const char *v88;
  int v89;
  const char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  void *object;
  void *v95[2];
  __int128 v96;
  void *__p[2];
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;

  v3 = a2 & 0xCFFFFFFF;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 2448) + 520 * (a2 & 0xCFFFFFFF) + 4);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
  {
    sub_223CF9954(&v93);
    if (**(int **)(v93 + 56) > 4
      || ((v8 = *(unsigned __int8 *)(v93 + 72), v9 = sub_22322F254(v93, "OSLogSurrogateAppender", 1, 0), !v8)
        ? (v10 = v9 == 0)
        : (v10 = 0),
          v10))
    {
LABEL_92:
      v7 = 0;
      goto LABEL_93;
    }
    v11 = v9;
    v86[0] = &v93;
    v86[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v86[2] = std::chrono::system_clock::now().__d_.__rep_;
    v87 = 4;
    v88 = "unknown file";
    v89 = 483;
    v91 = 0;
    v92 = 0;
    v90 = "unknown function";
    v85 = v93;
    if (*(char *)(v93 + 39) < 0)
    {
      v13 = *(const char **)(v93 + 16);
      v12 = *(_QWORD *)(v93 + 24);
      v84 = v93 + 16;
      v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v15 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v93 + 39);
      v13 = (const char *)(v93 + 16);
      v84 = v93 + 16;
      v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v14 & 1) != 0)
        goto LABEL_11;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v96 && SHIBYTE(v95[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_11:
    if (byte_255788F57 >= 0)
      v16 = (const char *)&xmmword_255788F40;
    else
      v16 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v17 = byte_255788F57;
    else
      v17 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v16, v13);
    v18 = v95;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v17 >= 0x17)
    {
      v19 = v11;
      v20 = v13;
      v21 = v8;
      v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v22 = v17 | 7;
      v23 = v22 + 1;
      v18 = operator new(v22 + 1);
      v95[1] = (void *)v17;
      *(_QWORD *)&v96 = v23 | 0x8000000000000000;
      v95[0] = v18;
      v8 = v21;
      v13 = v20;
      v11 = v19;
    }
    else
    {
      BYTE7(v96) = v17;
      if (!v17)
      {
LABEL_25:
        *((_BYTE *)v18 + v17) = 0;
        BYTE8(v96) = 1;
        v24 = __p;
        if (v12 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v12 >= 0x17)
        {
          v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v25 = v12 | 7;
          v26 = v25 + 1;
          v24 = operator new(v25 + 1);
          __p[1] = (void *)v12;
          v98 = v26 | 0x8000000000000000;
          __p[0] = v24;
        }
        else
        {
          HIBYTE(v98) = v12;
          if (!v12)
            goto LABEL_33;
        }
        memmove(v24, v13, v12);
LABEL_33:
        *((_BYTE *)v24 + v12) = 0;
        v99 = 1;
        v27 = object;
        if (SHIBYTE(v98) < 0)
          operator delete(__p[0]);
        if (BYTE8(v96) && SBYTE7(v96) < 0)
          operator delete(v95[0]);
        if (object)
          os_release(object);
        if (v11 && *(_QWORD *)(v11 + 24))
        {
          v28 = _os_log_pack_size();
          v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
          v30 = (std::__shared_weak_count *)operator new();
          v31 = v30;
          v30->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v30->__shared_weak_owners_ = 0;
          v30[1].__vftable = v29;
          object = v29;
          v95[0] = v29;
          v95[1] = v30;
          do
            v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
          v96 = 0uLL;
          __p[0] = 0;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
          }
          v35 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v36 = operator new();
          v37 = *(unsigned __int8 *)(v85 + 39);
          v38 = v84;
          if ((v37 & 0x80u) != 0)
          {
            v38 = *(_QWORD *)(v85 + 16);
            v37 = *(_QWORD *)(v85 + 24);
          }
          *(_QWORD *)v36 = v35;
          *(_OWORD *)(v36 + 8) = *(_OWORD *)v95;
          v95[0] = 0;
          v95[1] = 0;
          *(_OWORD *)(v36 + 24) = v96;
          v96 = 0uLL;
          *(_QWORD *)(v36 + 40) = v38;
          *(_QWORD *)(v36 + 48) = v37;
          *(_BYTE *)(v36 + 56) = 16;
          v100 = 0;
          v101 = v36;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v101);
          v39 = v101;
          v101 = 0;
          if (v39)
          {
            v40 = *(std::__shared_weak_count **)(v39 + 32);
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v43 = *(std::__shared_weak_count **)(v39 + 16);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            MEMORY[0x227684CE8](v39, 0x10F0C40B62ED6C6);
            v46 = v100;
            v100 = 0;
            if (v46)
            {
              v47 = *(std::__shared_weak_count **)(v46 + 32);
              if (v47)
              {
                v48 = (unint64_t *)&v47->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              v50 = *(std::__shared_weak_count **)(v46 + 16);
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              MEMORY[0x227684CE8](v46, 0x10F0C40B62ED6C6);
            }
          }
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v56 = (std::__shared_weak_count *)v95[1];
          if (v95[1])
          {
            v57 = (unint64_t *)((char *)v95[1] + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
        }
        else
        {
          os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v59 = (void *)_os_log_send_and_compose_impl();
          if (v59)
            free(v59);
        }
        if (v8)
        {
          sub_22322C138((uint64_t)v86, "Invalid point count during point cloud block deallocation");
          sub_223182C08((uint64_t)v86);
        }
        sub_223182C08((uint64_t)v86);
        v60 = v92;
        if (v92)
        {
          v61 = (unint64_t *)&v92->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_92;
      }
    }
    memmove(v18, v16, v17);
    goto LABEL_25;
  }
LABEL_93:
  *(_DWORD *)(a1 + 8) = v7;
  v63 = *(unsigned int **)(a1 + 2488);
  v64 = *(_QWORD *)(a1 + 2496);
  if ((unint64_t)v63 < v64)
  {
    *v63 = v3;
    v65 = (uint64_t)(v63 + 1);
    goto LABEL_114;
  }
  v66 = *(unsigned int **)(a1 + 2480);
  v67 = v63 - v66;
  v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 62)
    sub_22316E078();
  v69 = v64 - (_QWORD)v66;
  if (v69 >> 1 > v68)
    v68 = v69 >> 1;
  if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
    v70 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v70 = v68;
  if (v70)
  {
    if (v70 >> 62)
      sub_223174E94();
    v71 = operator new(4 * v70);
    v72 = (unsigned int *)&v71[4 * v67];
    v73 = &v71[4 * v70];
    *v72 = v3;
    v65 = (uint64_t)(v72 + 1);
    v74 = (char *)v63 - (char *)v66;
    if (v63 == v66)
      goto LABEL_112;
    goto LABEL_106;
  }
  v71 = 0;
  v72 = (unsigned int *)(4 * v67);
  v73 = 0;
  *(_DWORD *)(4 * v67) = v3;
  v65 = 4 * v67 + 4;
  v74 = (char *)v63 - (char *)v66;
  if (v63 != v66)
  {
LABEL_106:
    v75 = v74 - 4;
    if (v75 < 0x2C)
      goto LABEL_126;
    if ((unint64_t)((char *)v66 - v71) < 0x20)
      goto LABEL_126;
    v76 = (v75 >> 2) + 1;
    v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
    v78 = &v63[v77 / 0xFFFFFFFFFFFFFFFCLL];
    v72 = (unsigned int *)((char *)v72 - v77);
    v79 = &v71[4 * v67 - 16];
    v80 = v63 - 4;
    v81 = v76 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v82 = *(_OWORD *)v80;
      *(v79 - 1) = *((_OWORD *)v80 - 1);
      *v79 = v82;
      v79 -= 2;
      v80 -= 8;
      v81 -= 8;
    }
    while (v81);
    v63 = v78;
    if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_126:
      do
      {
        v83 = *--v63;
        *--v72 = v83;
      }
      while (v63 != v66);
    }
  }
LABEL_112:
  *(_QWORD *)(a1 + 2480) = v72;
  *(_QWORD *)(a1 + 2488) = v65;
  *(_QWORD *)(a1 + 2496) = v73;
  if (v66)
    operator delete(v66);
LABEL_114:
  *(_QWORD *)(a1 + 2488) = v65;
}

void sub_223CF8618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223CF8658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v5 - 96));
  sub_22319A054((uint64_t *)(v5 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CF868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x227684CE8](v5, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CF86B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CF86D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CF86E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

unint64_t sub_223CF872C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, _QWORD *a6, int a7, double a8, float32x4_t a9)
{
  uint64_t *v13;
  _BOOL4 v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  int v35;
  uint64_t *v36;

  v13 = a3;
  v16 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v16 = (*((_DWORD *)a2 + 1) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*((_DWORD *)a2 + 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v16 = ((_DWORD)a2[1] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v16)
    goto LABEL_40;
  v17 = (*(_DWORD *)a3 & 0x7FFFFFFFu) < 0x7F800000;
  if ((*(_DWORD *)a3 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v17 = (*((_DWORD *)a3 + 1) & 0x7FFFFFFFu) < 0x7F800000;
    if ((*((_DWORD *)a3 + 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v17 = ((_DWORD)a3[1] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v17)
  {
LABEL_40:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/src/PointCloudStore.cpp", 296, (uint64_t)"math::IsFinite(point) && math::IsFinite(normal)", 47, (uint64_t)"Adding non-finite point", 23, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v18 = sub_223CF8EC4(a1, a2, a7, a8, a9);
  v19 = v18;
  if (HIDWORD(v18))
  {
    v20 = v18 & 0xCFFFFFFF;
    v21 = *(_QWORD *)(a1 + 2448);
    v22 = v21 + 520 * (v18 & 0xCFFFFFFF);
    *(_QWORD *)(v22 + 312) = *a6;
    v23 = *(unsigned int *)(v22 + 4);
    if (a4 == 254)
    {
      v24 = v21 + 520 * v20;
      if (*(_BYTE *)(v24 + 336))
      {
        *(_BYTE *)(v24 + 336) = 0;
        if ((_DWORD)v23)
        {
          v36 = v13;
          v25 = 0;
          v26 = (unsigned __int8 *)(v21 + 520 * v20 + 36);
          v27 = v23;
          do
          {
            v28 = *v26;
            v26 += 28;
            v25 = sub_223A4EC9C(v25, ((unint64_t)v28 << 8) | 1, 0xFFu);
            --v27;
          }
          while (v27);
          if ((_BYTE)v25)
            LOBYTE(a4) = BYTE1(v25);
          else
            LOBYTE(a4) = -1;
          v13 = v36;
        }
        else
        {
          LOBYTE(a4) = -1;
        }
        *(_BYTE *)(v21 + 520 * v20 + 338) = a4;
      }
      else
      {
        LOBYTE(a4) = *(_BYTE *)(v21 + 520 * v20 + 338);
      }
    }
    if (a5 == 254)
    {
      v29 = v21 + 520 * v20;
      if (*(_BYTE *)(v29 + 337))
      {
        *(_BYTE *)(v29 + 337) = 0;
        v30 = *(unsigned int *)(v22 + 4);
        if ((_DWORD)v30)
        {
          v35 = v23;
          v31 = 0;
          v32 = (unsigned __int8 *)(v21 + 520 * v20 + 37);
          do
          {
            v33 = *v32;
            v32 += 28;
            v31 = sub_223A4EC9C(v31, ((unint64_t)v33 << 8) | 1, 0xFFu);
            --v30;
          }
          while (v30);
          if ((_BYTE)v31)
            LOBYTE(a5) = BYTE1(v31);
          else
            LOBYTE(a5) = -1;
          LODWORD(v23) = v35;
        }
        else
        {
          LOBYTE(a5) = -1;
        }
        *(_BYTE *)(v21 + 520 * v20 + 339) = a5;
      }
      else
      {
        LOBYTE(a5) = *(_BYTE *)(v21 + 520 * v20 + 339);
      }
    }
    sub_223CF6BF8(v21 + 520 * (v19 & 0xCFFFFFFF), a2, v13, a4, a5);
    *(_DWORD *)(a1 + 8) += *(_DWORD *)(v22 + 4) - v23;
  }
  return v19;
}

void sub_223CF89D8(uint64_t a1, int *a2, unsigned int a3, unsigned int a4)
{
  int v8;
  _BOOL4 v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  _BOOL4 v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t i;
  int *v26;
  int v27;
  BOOL v28;
  int v29;
  int v31;
  BOOL v32;
  _BOOL4 v34;
  uint64_t k;
  int *v36;
  int v37;
  BOOL v38;
  int v39;
  int v41;
  uint64_t j;
  int *v44;
  int v45;
  BOOL v46;
  int v47;
  int v49;
  uint64_t **v51;
  uint64_t **v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56[3];

  if (a3 == a4)
  {
    if (a3 >> 30)
      return;
    sub_223CF9B1C((_DWORD *)a1, a3, a3);
  }
  else
  {
    sub_223CF9B1C((_DWORD *)a1, a3, a4);
    v8 = a4 | a3;
    if (((a4 | a3) & 0x80000000) != 0)
      goto LABEL_8;
  }
  if (((a3 ^ a4) & 0x20000000) != 0)
  {
    v9 = 1;
    v10 = 1;
    goto LABEL_9;
  }
  v8 = a4 | a3;
LABEL_8:
  v11 = v8 & 0x20000000;
  v9 = (v8 & 0x20000000) == 0;
  v10 = v11 >> 29;
LABEL_9:
  v13 = *a2;
  v12 = a2[1];
  v14 = *a2 & 0xFFFFFFF8;
  v15 = v12 & 0xFFFFFFF8;
  v16 = a2[2];
  v17 = v16 & 0xFFFFFFF8;
  v56[0] = v14;
  v56[1] = v12 & 0xFFFFFFF8;
  v56[2] = v16 & 0xFFFFFFF8;
  v18 = v13 - v14 == 7;
  v19 = v13 == v14;
  v20 = v13 != v14 && v13 - v14 != 7;
  if (v19)
    v21 = -1;
  else
    v21 = v18;
  if (v12 == v15)
    v22 = -1;
  else
    v22 = v12 - v15 == 7;
  v23 = v16 - v17;
  if (!v23)
  {
    v24 = -1;
    goto LABEL_20;
  }
  v34 = v12 != v15 && v12 - v15 != 7 && v20;
  v24 = v23 == 7;
  if (v23 == 7 || !v34)
  {
LABEL_20:
    v52 = (uint64_t **)(a1 + 2528);
    if (v9)
    {
      v51 = (uint64_t **)(a1 + 2504);
      if (v10)
      {
        for (i = 0; i != 27; ++i)
        {
          v26 = (int *)((char *)&unk_22466FAC0 + 12 * byte_22466FAA4[i]);
          v27 = *v26;
          if (*v26)
            v28 = v27 == v21;
          else
            v28 = 1;
          if (v28)
          {
            v29 = v26[1];
            if (!v29 || v29 == v22)
            {
              v31 = v26[2];
              if (v31)
                v32 = v31 == v24;
              else
                v32 = 1;
              if (v32)
              {
                v53 = v14 + 8 * v27;
                v54 = v15 + 8 * v29;
                v55 = v17 + 8 * v31;
                sub_22397FD34(v51, (int *)&v53, (uint64_t)&v53);
                sub_22397FD34(v52, (int *)&v53, (uint64_t)&v53);
              }
            }
          }
        }
      }
      else
      {
        for (j = 0; j != 27; ++j)
        {
          v44 = (int *)((char *)&unk_22466FAC0 + 12 * byte_22466FAA4[j]);
          v45 = *v44;
          if (*v44)
            v46 = v45 == v21;
          else
            v46 = 1;
          if (v46)
          {
            v47 = v44[1];
            if (!v47 || v47 == v22)
            {
              v49 = v44[2];
              if (!v49 || v49 == v24)
              {
                v53 = v14 + 8 * v45;
                v54 = v15 + 8 * v47;
                v55 = v17 + 8 * v49;
                sub_22397FD34(v51, (int *)&v53, (uint64_t)&v53);
              }
            }
          }
        }
      }
    }
    else if (v10)
    {
      for (k = 0; k != 27; ++k)
      {
        v36 = (int *)((char *)&unk_22466FAC0 + 12 * byte_22466FAA4[k]);
        v37 = *v36;
        if (*v36)
          v38 = v37 == v21;
        else
          v38 = 1;
        if (v38)
        {
          v39 = v36[1];
          if (!v39 || v39 == v22)
          {
            v41 = v36[2];
            if (!v41 || v41 == v24)
            {
              v53 = v14 + 8 * v37;
              v54 = v15 + 8 * v39;
              v55 = v17 + 8 * v41;
              sub_22397FD34(v52, (int *)&v53, (uint64_t)&v53);
            }
          }
        }
      }
    }
    return;
  }
  if (v9)
    sub_22397FD34((uint64_t **)(a1 + 2504), v56, (uint64_t)v56);
  if (v10)
    sub_22397FD34((uint64_t **)(a1 + 2528), v56, (uint64_t)v56);
}

uint64_t sub_223CF8CFC(uint64_t a1, int *a2)
{
  signed int v4;
  signed int v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  signed int v11;
  signed int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  signed int v16;
  signed int v17;
  signed int v18;
  _DWORD *v19;
  BOOL v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  int v27;
  int i;
  int v29[3];

  v4 = *a2 & 0xFFFFFFF8;
  v5 = a2[1] & 0xFFFFFFF8;
  v6 = a2[2] & 0xFFFFFFF8;
  v29[0] = v4;
  v29[1] = v5;
  v29[2] = v6;
  v7 = *(unsigned int *)(a1 + 176);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_16;
  v8 = *(_QWORD *)(a1 + 184);
  v9 = (int *)(v8 + 4488 * (v7 & 0xFFFFFFFFCFFFFFFFLL));
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v4 - *v9;
  v14 = v4 < *v9 || v5 < v11;
  v15 = v14 || v6 < v12;
  if (v15
    || ((v16 = v9[3], v19 = v9 + 4, v18 = v9[4], v17 = v19[1], v4 < v16) ? (v20 = v5 < v18) : (v20 = 0),
        v20 ? (v21 = v6 < v17) : (v21 = 0),
        !v21))
  {
LABEL_16:
    v7 = 0x80000000;
  }
  else
  {
    v26 = v5 - v11;
    v27 = v6 - v12;
    for (i = v16 - v10; ; v27 -= i & v27)
    {
      i >>= 1;
      v7 = *(unsigned int *)(v8
                           + 4488 * (v7 & 0xCFFFFFFF)
                           + 4 * ((4 * ((i & v13) != 0)) | (2 * ((i & v26) != 0)) | ((i & v27) != 0))
                           + 24);
      if (i == *(_DWORD *)(a1 + 136) || v7 >> 30)
        break;
      v13 -= i & v13;
      v26 -= i & v26;
    }
  }
  v22 = sub_223D02A44(a1, v29, v7);
  if ((v22 & 0x80000000) != 0
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 629, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_27;
  }
  v23 = *(_QWORD *)(a1 + 2328);
  if (v22 >= (unint64_t)((*(_QWORD *)(a1 + 2336) - v23) >> 11))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 630, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v23 = *(_QWORD *)(a1 + 2328);
      goto LABEL_22;
    }
LABEL_27:
    abort();
  }
LABEL_22:
  v24 = v23 + ((unint64_t)v22 << 11);
  sub_223D03114((char *)a1, a2);
  return v24 + 4 * (*a2 & 7 | (8 * (a2[1] & 7)) & 0x3F | ((a2[2] & 7u) << 6));
}

uint64_t sub_223CF8EC4(uint64_t a1, _DWORD *a2, int a3, double a4, float32x4_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  float32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  int32x2_t v31;
  unsigned int v32;
  int32x2_t v33;
  char v34;

  v6 = *(_QWORD *)(a1 + 2480);
  v7 = *(_QWORD *)(a1 + 2488);
  if (v6 == v7)
  {
    v13 = *(_QWORD *)(a1 + 2456);
    v14 = *(_QWORD *)(a1 + 2448);
    v15 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v13 - v14) >> 3);
    if (v15 == *(_DWORD *)(a1 + 2472))
    {
      if (a3)
      {
        v17 = *(_QWORD *)(a1 + 2480);
        while (((unint64_t)(v17 - v6) >> 2) + 1057222719 * ((v13 - v14) >> 3) == 1057222719 * ((unint64_t)(*(_QWORD *)(a1 + 2464) - v14) >> 3))
        {
          v18 = (*a2 & 0x7FFFFFFFu) < 0x7F800000;
          if ((*a2 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v18 = (a2[1] & 0x7FFFFFFFu) < 0x7F800000;
            if ((a2[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              v18 = (a2[2] & 0x7FFFFFFFu) < 0x7F800000;
          }
          if (!v18
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          a5.i64[0] = *(_QWORD *)a2;
          a5.i32[2] = a2[2];
          v19 = vmulq_n_f32(a5, *(float *)(a1 + 148));
          v31 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v19.f32));
          v32 = vcvtms_s32_f32(v19.f32[2]);
          sub_223973C90(a1 + 16, (int *)&v31, &v33);
          if (!v34)
            goto LABEL_16;
          v14 = *(_QWORD *)(a1 + 2448);
          v13 = *(_QWORD *)(a1 + 2456);
          v17 = *(_QWORD *)(a1 + 2488);
          v6 = *(_QWORD *)(a1 + 2480);
        }
        v8 = sub_223CF8EC4(a1, a2, 1);
        v11 = v8 & 0xFFFFFF00;
        v12 = v8 & 0x100000000;
      }
      else
      {
LABEL_16:
        v12 = 0;
        LOBYTE(v8) = 0;
        v11 = 0;
      }
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 2464);
      if (v13 >= v20)
      {
        v22 = v15 + 1;
        if ((unint64_t)(v15 + 1) > 0x7E07E07E07E07ELL)
          sub_22316E078();
        v23 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v20 - v14) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x3F03F03F03F03FLL)
          v24 = 0x7E07E07E07E07ELL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 > 0x7E07E07E07E07ELL)
            sub_223174E94();
          v25 = (char *)operator new(520 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t)&v25[8 * ((uint64_t)(v13 - v14) >> 3)];
        *(_BYTE *)(v26 + 516) = 1;
        *(_QWORD *)v26 = 12345;
        *(_DWORD *)(v26 + 8) = 0;
        v27 = &v25[520 * v24];
        *(_QWORD *)(v26 + 328) = 0;
        *(_DWORD *)(v26 + 324) = 0;
        *(_QWORD *)(v26 + 300) = 0;
        *(_QWORD *)(v26 + 308) = 0;
        *(_QWORD *)(v26 + 292) = 0;
        *(_QWORD *)(v26 + 313) = 0;
        *(_DWORD *)(v26 + 336) = -65536;
        *(_QWORD *)(v26 + 508) = 0x3F80000000000000;
        v21 = v26 + 520;
        v28 = sub_223D024AC(v13, v13, v14, v14, v26, v26);
        v29 = *(void **)(a1 + 2448);
        *(_QWORD *)(a1 + 2448) = v28;
        *(_QWORD *)(a1 + 2456) = v21;
        *(_QWORD *)(a1 + 2464) = v27;
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_BYTE *)(v13 + 516) = 1;
        *(_QWORD *)v13 = 12345;
        *(_DWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 324) = 0;
        *(_QWORD *)(v13 + 328) = 0;
        *(_QWORD *)(v13 + 300) = 0;
        *(_QWORD *)(v13 + 308) = 0;
        *(_QWORD *)(v13 + 292) = 0;
        *(_QWORD *)(v13 + 313) = 0;
        *(_DWORD *)(v13 + 336) = -65536;
        v21 = v13 + 520;
        *(_QWORD *)(v13 + 508) = 0x3F80000000000000;
      }
      *(_QWORD *)(a1 + 2456) = v21;
      LODWORD(v8) = -1057222719 * ((unint64_t)(v21 - *(_QWORD *)(a1 + 2448)) >> 3) - 1;
      v11 = v8 & 0xFFFFFF00;
      v12 = 0x100000000;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v7 - 4);
    LOBYTE(v8) = v9;
    *(_QWORD *)(a1 + 2488) = v7 - 4;
    v10 = *(_QWORD *)(a1 + 2448) + 520 * v9;
    *(_DWORD *)(v10 + 4) = 0;
    *(_DWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 328) = 0;
    *(_DWORD *)(v10 + 324) = 0;
    *(_QWORD *)(v10 + 300) = 0;
    *(_QWORD *)(v10 + 308) = 0;
    *(_QWORD *)(v10 + 292) = 0;
    *(_QWORD *)(v10 + 313) = 0;
    *(_DWORD *)(v10 + 336) = -65536;
    *(_QWORD *)(v10 + 508) = 0x3F80000000000000;
    v11 = v9 & 0xFFFFFF00;
    v12 = 0x100000000;
  }
  return v12 | v11 | v8;
}

void sub_223CF9284(char *a1, uint64_t *a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char *v39;
  void *v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  char *v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  int8x8_t v49;
  float32x2_t v50;
  int8x8_t v51;
  float32x2_t v52;
  float32x4_t v53;
  double v54;
  double v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int v62;
  int v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  _QWORD v80[7];
  void *__p;
  char *v82;
  char *v83;
  float v84;
  float v85[3];
  char v86;
  char v87;
  char v88;
  char *v89;
  unsigned int *v90;
  unsigned int *v91;
  char *v92;
  char **v93;
  _QWORD *v94;
  char *v95;
  char v96;
  float32x2_t v97;
  _QWORD v98[2];
  char v99;
  unsigned int v100;
  unsigned int v101;
  char *v102;
  _QWORD v103[2];
  _QWORD v104[3];
  _QWORD v105[3];
  _QWORD v106[3];
  _QWORD v107[2];
  char v108;
  _QWORD v109[4];

  v88 = a4;
  v87 = a5;
  v86 = a6;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return;
  v10 = 0;
  v11 = *(unsigned int *)(v8 + 104);
  v12 = (float)(int)dword_22466F978[v11];
  v13 = (float)(int)dword_22466F990[v11];
  v85[0] = (float)(int)dword_22466F960[v11];
  v85[1] = v12;
  v85[2] = v13;
  v14 = *((float *)a1 + 36);
  v84 = v14 * 0.5;
  v15 = v14
      * (float)(floorf((float)((float)(*(float *)(v8 + 96)+ (float)((float)(*(float *)(v8 + 96) + *(float *)(v8 + 100))+ (float)(*(float *)(v8 + 96) + *(float *)(v8 + 100))))/ 3.0)/ v14)+ 0.5);
  __p = 0;
  v82 = 0;
  v83 = 0;
  v75 = v8;
  do
  {
    v18 = *(_DWORD *)(v8 + 104);
    if (v10 < v83)
    {
      sub_223EB22AC((uint64_t)v10, v8, *(_DWORD *)(v8 + 104), v15, 0.01);
      v10 += 144;
      goto LABEL_4;
    }
    v19 = 0x8E38E38E38E38E39 * ((v10 - (_BYTE *)__p) >> 4);
    v20 = v19 + 1;
    if (v19 + 1 > 0x1C71C71C71C71C7)
      sub_22316E078();
    if (0x1C71C71C71C71C72 * ((v83 - (_BYTE *)__p) >> 4) > v20)
      v20 = 0x1C71C71C71C71C72 * ((v83 - (_BYTE *)__p) >> 4);
    if (0x8E38E38E38E38E39 * ((v83 - (_BYTE *)__p) >> 4) >= 0xE38E38E38E38E3)
      v21 = 0x1C71C71C71C71C7;
    else
      v21 = v20;
    v93 = &v83;
    if (v21)
    {
      if (v21 > 0x1C71C71C71C71C7)
        sub_223174E94();
      v22 = (char *)operator new(144 * v21);
    }
    else
    {
      v22 = 0;
    }
    v89 = v22;
    v90 = (unsigned int *)&v22[144 * v19];
    v91 = v90;
    v92 = &v22[144 * v21];
    sub_223EB22AC((uint64_t)v90, v8, v18, v15, 0.01);
    v23 = (char *)v90;
    v10 = (char *)(v91 + 36);
    v24 = (char *)__p;
    v25 = v82;
    if (v82 == __p)
    {
      __p = v90;
      v82 = (char *)(v91 + 36);
      v83 = v92;
      if (!v25)
        goto LABEL_4;
LABEL_35:
      operator delete(v25);
      goto LABEL_4;
    }
    do
    {
      *((_QWORD *)v23 - 18) = 0;
      *((_QWORD *)v23 - 17) = 0;
      v23 -= 144;
      *((_QWORD *)v23 + 2) = 0;
      v26 = *((_OWORD *)v25 - 9);
      v25 -= 144;
      *(_OWORD *)v23 = v26;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v25 + 2);
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = 0;
      *((_QWORD *)v23 + 3) = 0;
      *((_QWORD *)v23 + 4) = 0;
      *((_QWORD *)v23 + 5) = 0;
      *(_OWORD *)(v23 + 24) = *(_OWORD *)(v25 + 24);
      *((_QWORD *)v23 + 5) = *((_QWORD *)v25 + 5);
      *((_QWORD *)v25 + 3) = 0;
      *((_QWORD *)v25 + 4) = 0;
      *((_QWORD *)v25 + 5) = 0;
      *((_QWORD *)v23 + 6) = 0;
      *((_QWORD *)v23 + 7) = 0;
      *((_QWORD *)v23 + 8) = 0;
      *((_OWORD *)v23 + 3) = *((_OWORD *)v25 + 3);
      *((_QWORD *)v23 + 8) = *((_QWORD *)v25 + 8);
      *((_QWORD *)v25 + 6) = 0;
      *((_QWORD *)v25 + 7) = 0;
      *((_QWORD *)v25 + 8) = 0;
      v27 = *((_QWORD *)v25 + 9);
      *((_DWORD *)v23 + 20) = *((_DWORD *)v25 + 20);
      *((_QWORD *)v23 + 9) = v27;
      v28 = *(_QWORD *)(v25 + 84);
      *((_DWORD *)v23 + 23) = *((_DWORD *)v25 + 23);
      *(_QWORD *)(v23 + 84) = v28;
      v29 = *((_QWORD *)v25 + 12);
      *((_DWORD *)v23 + 26) = *((_DWORD *)v25 + 26);
      *((_QWORD *)v23 + 12) = v29;
      v30 = *(_OWORD *)(v25 + 108);
      v16 = *(float32x4_t *)(v25 + 124);
      *((_DWORD *)v23 + 35) = *((_DWORD *)v25 + 35);
      *(float32x4_t *)(v23 + 124) = v16;
      *(_OWORD *)(v23 + 108) = v30;
    }
    while (v25 != v24);
    v25 = (char *)__p;
    v31 = v82;
    __p = v23;
    v82 = v10;
    v83 = v92;
    if (v31 != v25)
    {
      do
      {
        v32 = (void *)*((_QWORD *)v31 - 12);
        if (v32)
        {
          *((_QWORD *)v31 - 11) = v32;
          operator delete(v32);
        }
        v33 = *((_QWORD *)v31 - 15);
        if (v33)
        {
          v34 = *((_QWORD *)v31 - 14);
          v35 = (void *)*((_QWORD *)v31 - 15);
          if (v34 != v33)
          {
            v36 = *((_QWORD *)v31 - 14);
            do
            {
              v38 = *(void **)(v36 - 24);
              v36 -= 24;
              v37 = v38;
              if (v38)
              {
                *(_QWORD *)(v34 - 16) = v37;
                operator delete(v37);
              }
              v34 = v36;
            }
            while (v36 != v33);
            v35 = (void *)*((_QWORD *)v31 - 15);
          }
          *((_QWORD *)v31 - 14) = v33;
          operator delete(v35);
        }
        v39 = v31 - 144;
        v40 = (void *)*((_QWORD *)v31 - 18);
        if (v40)
        {
          *((_QWORD *)v31 - 17) = v40;
          operator delete(v40);
        }
        v31 -= 144;
      }
      while (v39 != v25);
    }
    if (v25)
      goto LABEL_35;
LABEL_4:
    v82 = v10;
    v8 += 144;
  }
  while (v8 != v9);
  v41 = vcvtms_s32_f32(v15 / v14);
  v42 = *(float *)(v75 + 96);
  v43 = vcvtms_s32_f32((float)(v42 + *(float *)(v75 + 100)) / v14);
  v80[0] = a1;
  v80[1] = v75;
  v80[2] = &v84;
  v80[3] = &v86;
  v80[4] = &v87;
  v80[5] = &v88;
  v80[6] = v85;
  v103[0] = a7;
  v103[1] = a8;
  v102 = a1;
  v100 = v41 - vcvtms_s32_f32(v42 / v14);
  v101 = v43 - v41;
  v99 = a3;
  v44 = (char *)__p;
  if (__p == v10)
    goto LABEL_41;
  v17.i64[0] = 0xFF7FFFFF7F7FFFFFLL;
  v45 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v16.i64[0] = 0x80000000800000;
  do
  {
    v46 = *(float32x2_t *)(v44 + 72);
    v47 = *(float32x2_t *)(v44 + 84);
    v48 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v45, v46), (int8x8_t)v46, (int8x8_t)v45);
    v45 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v48, v47), (int8x8_t)v47, (int8x8_t)v48);
    v49 = (int8x8_t)vrev64_s32((int32x2_t)v46);
    v50.i32[1] = v17.i32[1];
    v50.i32[0] = *((_DWORD *)v44 + 20);
    v49.i32[0] = v50.i32[0];
    *(int8x8_t *)v17.f32 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v49.u32[1], v17.u32[0]), v50), v49, *(int8x8_t *)v17.f32);
    v53 = v17;
    v53.i32[0] = *((_DWORD *)v44 + 23);
    v51 = (int8x8_t)vrev64_s32((int32x2_t)v47);
    v51.i32[0] = v53.i32[0];
    *(int8x8_t *)v17.f32 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v51.u32[1], v17.u32[0]), *(float32x2_t *)v53.f32), v51, *(int8x8_t *)v17.f32);
    v52 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v44 + 76), *(float32x2_t *)v16.f32), *(int8x8_t *)(v44 + 76), *(int8x8_t *)v16.f32);
    v53.i64[0] = *((_QWORD *)v44 + 11);
    *(int8x8_t *)v16.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v53.f32, v52), *(int8x8_t *)v53.f32, (int8x8_t)v52);
    v44 += 144;
  }
  while (v44 != v10);
  v97 = v45;
  v98[0] = v17.i64[0];
  v98[1] = v16.i64[0];
  sub_223E977E8((uint64_t)(a1 + 16), (uint64_t)&v97, (uint64_t)v98 + 4, *(double *)&v45, v16, *(double *)v17.i64, v53);
  v10 = (char *)__p;
  v96 = 3 * dword_22466F978[*((unsigned int *)__p + 26)]
      + 9 * dword_22466F960[*((unsigned int *)__p + 26)]
      + dword_22466F990[*((unsigned int *)__p + 26)]
      + 13;
  v89 = a1;
  v90 = &v101;
  v91 = &v100;
  v92 = &v96;
  v93 = &v102;
  v94 = v80;
  v95 = &v99;
  v104[0] = a1;
  v104[1] = v103;
  v104[2] = &__p;
  v105[0] = a1 + 16;
  v107[0] = a1 + 16;
  v107[1] = &v89;
  v106[0] = a1;
  v106[1] = v103;
  v106[2] = &__p;
  v105[1] = v107;
  v105[2] = v104;
  v108 = 1;
  v62 = *((_DWORD *)a1 + 48);
  if (v62 < 0
    || (v63 = *((_DWORD *)a1 + 49),
        v109[0] = v106,
        v109[1] = v105,
        v109[2] = &v108,
        sub_223D03650((uint64_t)(a1 + 16), v63, v62, 0, v109, v54, v55, v56, v57, v58, v59, v60, v61),
        (v10 = (char *)__p) != 0))
  {
LABEL_41:
    v64 = v82;
    v65 = v10;
    if (v82 != v10)
    {
      do
      {
        v66 = (void *)*((_QWORD *)v64 - 12);
        if (v66)
        {
          *((_QWORD *)v64 - 11) = v66;
          operator delete(v66);
        }
        v67 = *((_QWORD *)v64 - 15);
        if (v67)
        {
          v68 = *((_QWORD *)v64 - 14);
          v69 = (void *)*((_QWORD *)v64 - 15);
          if (v68 != v67)
          {
            v70 = *((_QWORD *)v64 - 14);
            do
            {
              v72 = *(void **)(v70 - 24);
              v70 -= 24;
              v71 = v72;
              if (v72)
              {
                *(_QWORD *)(v68 - 16) = v71;
                operator delete(v71);
              }
              v68 = v70;
            }
            while (v70 != v67);
            v69 = (void *)*((_QWORD *)v64 - 15);
          }
          *((_QWORD *)v64 - 14) = v67;
          operator delete(v69);
        }
        v73 = v64 - 144;
        v74 = (void *)*((_QWORD *)v64 - 18);
        if (v74)
        {
          *((_QWORD *)v64 - 17) = v74;
          operator delete(v74);
        }
        v64 -= 144;
      }
      while (v73 != v10);
      v65 = __p;
    }
    v82 = v10;
    operator delete(v65);
  }
}

void sub_223CF98E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22391786C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CF98F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22391786C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CF990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_2239360CC(&a27);
  sub_22391786C(&a21);
  _Unwind_Resume(a1);
}

void sub_223CF9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22391786C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CF9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_22391786C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223CF9954(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDF98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDF98))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.block");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDF90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDF98);
  }
  *a1 = qword_2540CDF90;
}

void sub_223CF99F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDF98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDF98);
  _Unwind_Resume(a1);
}

uint64_t *sub_223CF9A48@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double v5;
  float32_t v6;
  float v7;
  int v8;
  int v9;
  uint64_t v11[48];
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  _QWORD v15[2];
  char v16;
  _QWORD v17[3];

  sub_2241498F4(a2, 0);
  sub_2241498F4((uint64_t)v11, 0);
  v4 = a1[2];
  sub_22339E3C8(a2, v4);
  sub_22339E3C8(a2 + 32, v4);
  *(_DWORD *)(a2 + 64) = 1;
  v12 = a2;
  v13[0] = a1;
  v13[1] = &v12;
  v15[0] = a1 + 4;
  v15[1] = v13;
  v14 = 1;
  v8 = a1[48];
  if ((v8 & 0x80000000) == 0)
  {
    v9 = a1[49];
    v17[0] = &v16;
    v17[1] = v15;
    v17[2] = &v14;
    sub_223D0C9A8((uint64_t)(a1 + 4), v9, v8, (uint64_t)v17, v5, v6, v7);
  }
  return sub_22316F8F4(v11);
}

void sub_223CF9B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  sub_22316F8F4(&a9);
  sub_22316F8F4(v9);
  _Unwind_Resume(a1);
}

void sub_223CF9B1C(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  void *object;
  void *v72[2];
  __int128 v73;
  void *__p[2];
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  if (((a2 >> 30) & 1) == (a3 & 0x40000000) >> 30)
  {
    if ((a2 & 0x40000000) != 0)
      goto LABEL_6;
  }
  else
  {
    v6 = a1[645];
    if ((a2 & 0x40000000) != 0)
    {
      if (v6)
      {
        a1[645] = v6 - 1;
        goto LABEL_6;
      }
      sub_223CFA3BC(&v70);
      if (**(int **)(v70 + 56) <= 4)
      {
        v7 = *(unsigned __int8 *)(v70 + 72);
        v8 = sub_22322F254(v70, "OSLogSurrogateAppender", 1, 0);
        if (v7 || v8 != 0)
        {
          v10 = v8;
          v63[0] = &v70;
          v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v63[2] = std::chrono::system_clock::now().__d_.__rep_;
          v64 = 4;
          v65 = "unknown file";
          v66 = 647;
          v68 = 0;
          v69 = 0;
          v67 = "unknown function";
          v62 = v70;
          if (*(char *)(v70 + 39) < 0)
          {
            v12 = *(const char **)(v70 + 16);
            v11 = *(_QWORD *)(v70 + 24);
          }
          else
          {
            v11 = *(unsigned __int8 *)(v70 + 39);
            v12 = (const char *)(v70 + 16);
          }
          v61 = v70 + 16;
          v13 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&object);
            sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
            if ((_BYTE)v73 && SHIBYTE(v72[1]) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v14 = (const char *)&xmmword_255788F40;
          else
            v14 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v15 = byte_255788F57;
          else
            v15 = *((_QWORD *)&xmmword_255788F40 + 1);
          object = os_log_create(v14, v12);
          v16 = v72;
          if (v15 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v15 >= 0x17)
          {
            v60 = v12;
            v17 = v10;
            v18 = v7;
            v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v15 | 7) != 0x17)
              v19 = v15 | 7;
            v20 = v19 + 1;
            v16 = operator new(v19 + 1);
            v72[1] = (void *)v15;
            *(_QWORD *)&v73 = v20 | 0x8000000000000000;
            v72[0] = v16;
            v7 = v18;
            v10 = v17;
            v12 = v60;
          }
          else
          {
            BYTE7(v73) = v15;
            if (!v15)
            {
LABEL_48:
              *((_BYTE *)v16 + v15) = 0;
              BYTE8(v73) = 1;
              v21 = __p;
              if (v11 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v11 >= 0x17)
              {
                v22 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v11 | 7) != 0x17)
                  v22 = v11 | 7;
                v23 = v22 + 1;
                v21 = operator new(v22 + 1);
                __p[1] = (void *)v11;
                v75 = v23 | 0x8000000000000000;
                __p[0] = v21;
              }
              else
              {
                HIBYTE(v75) = v11;
                if (!v11)
                  goto LABEL_56;
              }
              memmove(v21, v12, v11);
LABEL_56:
              *((_BYTE *)v21 + v11) = 0;
              v76 = 1;
              v24 = object;
              if (SHIBYTE(v75) < 0)
                operator delete(__p[0]);
              if (BYTE8(v73) && SBYTE7(v73) < 0)
                operator delete(v72[0]);
              if (object)
                os_release(object);
              if (v10 && *(_QWORD *)(v10 + 24))
              {
                v25 = _os_log_pack_size();
                v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
                v27 = (std::__shared_weak_count *)operator new();
                v28 = v27;
                v27->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v27->__shared_weak_owners_ = 0;
                v27[1].__vftable = v26;
                object = v26;
                v72[0] = v26;
                v72[1] = v27;
                do
                  v30 = __ldxr(p_shared_owners);
                while (__stxr(v30 + 1, p_shared_owners));
                v73 = 0uLL;
                __p[0] = 0;
                do
                  v31 = __ldaxr(p_shared_owners);
                while (__stlxr(v31 - 1, p_shared_owners));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v28);
                }
                v32 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v33 = operator new();
                v34 = *(unsigned __int8 *)(v62 + 39);
                v35 = v61;
                if ((v34 & 0x80u) != 0)
                {
                  v35 = *(_QWORD *)(v62 + 16);
                  v34 = *(_QWORD *)(v62 + 24);
                }
                *(_QWORD *)v33 = v32;
                *(_OWORD *)(v33 + 8) = *(_OWORD *)v72;
                v72[0] = 0;
                v72[1] = 0;
                *(_OWORD *)(v33 + 24) = v73;
                v73 = 0uLL;
                *(_QWORD *)(v33 + 40) = v35;
                *(_QWORD *)(v33 + 48) = v34;
                *(_BYTE *)(v33 + 56) = 16;
                v77 = 0;
                v78 = v33;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v78);
                v36 = v78;
                v78 = 0;
                if (v36)
                {
                  v37 = *(std::__shared_weak_count **)(v36 + 32);
                  if (v37)
                  {
                    v38 = (unint64_t *)&v37->__shared_owners_;
                    do
                      v39 = __ldaxr(v38);
                    while (__stlxr(v39 - 1, v38));
                    if (!v39)
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                  }
                  v40 = *(std::__shared_weak_count **)(v36 + 16);
                  if (v40)
                  {
                    v41 = (unint64_t *)&v40->__shared_owners_;
                    do
                      v42 = __ldaxr(v41);
                    while (__stlxr(v42 - 1, v41));
                    if (!v42)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v40);
                    }
                  }
                  MEMORY[0x227684CE8](v36, 0x10F0C40B62ED6C6);
                  v43 = v77;
                  v77 = 0;
                  if (v43)
                  {
                    v44 = *(std::__shared_weak_count **)(v43 + 32);
                    if (v44)
                    {
                      v45 = (unint64_t *)&v44->__shared_owners_;
                      do
                        v46 = __ldaxr(v45);
                      while (__stlxr(v46 - 1, v45));
                      if (!v46)
                      {
                        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                        std::__shared_weak_count::__release_weak(v44);
                      }
                    }
                    v47 = *(std::__shared_weak_count **)(v43 + 16);
                    if (v47)
                    {
                      v48 = (unint64_t *)&v47->__shared_owners_;
                      do
                        v49 = __ldaxr(v48);
                      while (__stlxr(v49 - 1, v48));
                      if (!v49)
                      {
                        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                        std::__shared_weak_count::__release_weak(v47);
                      }
                    }
                    MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
                  }
                }
                v50 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
                if (*((_QWORD *)&v73 + 1))
                {
                  v51 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                v53 = (std::__shared_weak_count *)v72[1];
                if (v72[1])
                {
                  v54 = (unint64_t *)((char *)v72[1] + 8);
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
                LOWORD(object) = 0;
                v56 = (void *)_os_log_send_and_compose_impl();
                if (v56)
                  free(v56);
              }
              if (v7)
              {
                sub_22322C138((uint64_t)v63, "Pcs fbc out of sync");
                sub_223182C08((uint64_t)v63);
              }
              sub_223182C08((uint64_t)v63);
              v57 = v69;
              if (v69)
              {
                v58 = (unint64_t *)&v69->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              goto LABEL_6;
            }
          }
          memmove(v16, v14, v15);
          goto LABEL_48;
        }
      }
LABEL_6:
      if ((a3 & 0x80000000) != 0)
      {
        ++a1[643];
      }
      else if (!(a3 >> 30))
      {
        ++a1[642];
      }
      goto LABEL_15;
    }
    a1[645] = v6 + 1;
  }
  if (a2 >> 30)
  {
LABEL_15:
    if ((a2 & 0x80000000) != 0)
    {
      if (a3 >> 30)
      {
        if ((a3 & 0x40000000) != 0)
          ++a1[639];
      }
      else
      {
        ++a1[638];
      }
    }
    goto LABEL_28;
  }
  if ((a3 & 0x80000000) != 0)
  {
    ++a1[641];
  }
  else if ((a3 & 0x40000000) != 0)
  {
    ++a1[640];
  }
LABEL_28:
  if ((a2 & 0x20000000) != 0 && (a3 & 0x20000000) == 0)
    ++a1[644];
}

void sub_223CFA2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223CFA2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v7 - 96));
  sub_22319A054((uint64_t *)(v7 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFA31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFA348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFA364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFA378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_223CFA3BC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CDFA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CDFA8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CDFA0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CDFA8);
  }
  *a1 = qword_2540CDFA0;
}

void sub_223CFA458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CDFA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CDFA8);
  _Unwind_Resume(a1);
}

uint64_t *sub_223CFA4B0(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x4_t a8, double a9, float32x4_t a10, double a11, double a12, double a13, float32x4_t a14, float32x4_t a15)
{
  int v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float v39;
  _BOOL4 v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  BOOL v47;
  float32x4_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  unsigned int v53;
  int8x16_t v54;
  float v55;
  float32x2_t v56;
  float32x2_t v57;
  __int32 v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  double v63;
  double v64;
  float32x4_t v65;
  BOOL v66;
  float32x4_t v67;
  float32x4_t v68;
  signed __int32 v69;
  signed int v70;
  signed int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  unsigned int v75;
  signed __int32 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  signed __int32 v81;
  int v82;
  uint64_t v83;
  __int8 v84;
  __int8 v85;
  char v86;
  float32x4_t v87;
  signed __int32 v88;
  signed __int32 v89;
  signed int v90;
  unint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  signed __int32 v97;
  signed int v98;
  signed __int32 v99;
  BOOL v100;
  BOOL v101;
  signed __int32 v102;
  signed __int32 v103;
  signed int v104;
  _DWORD *v105;
  BOOL v106;
  BOOL v107;
  signed __int32 v108;
  int v109;
  int i;
  unsigned int v111;
  float32x4_t v112;
  int v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  unsigned int v120;
  unsigned int *v121;
  _QWORD v122[10];
  uint64_t v123;
  uint64_t v124;
  int v125;
  float v126;
  unsigned __int32 v127;
  unint64_t v128;
  _QWORD v129[11];
  char v130;
  unsigned __int32 v131;
  unint64_t v132;
  unsigned __int32 v133;
  uint64_t v134;
  __int32 v135;
  int32x2_t v136;
  unsigned int v137;
  int32x2_t v138;
  unsigned int v139;
  float v140;
  uint64_t *v141;
  unsigned int v142;
  int32x2_t v143;
  unsigned int v144;
  _BYTE v145[240];
  unsigned int *v146[3];
  unsigned int *v147[4];

  v128 = a8.i64[0];
  if (a2)
  {
    v19 = a3;
    v20 = result;
    v21 = 0;
    v22 = 0;
    v121 = (unsigned int *)(result + 2);
    v23 = a2;
    result = &v123;
    __asm
    {
      FMOV            V11.2S, #1.0
      FMOV            V12.2S, #-1.0
    }
    v115 = a2;
    v116 = a5;
    v117 = a6;
    while (1)
    {
      v29 = v19 + 12 * v21;
      v30 = a4 + 48 * v21;
      a8.i64[0] = *(_QWORD *)v30;
      a8.i32[2] = *(_DWORD *)(v30 + 8);
      a14.i64[0] = *(_QWORD *)v29;
      a14.i32[2] = *(_DWORD *)(v29 + 8);
      v31 = (int8x16_t)vsubq_f32(a8, a14);
      v32 = (float32x4_t)vextq_s8(v31, v31, 8uLL);
      v33 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1), *(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0];
      if (v33 < 0.01 || *(_BYTE *)(v30 + 31) == 0)
        goto LABEL_5;
      v35 = a4 + 48 * v21;
      v38 = *(_DWORD *)(v35 + 36);
      v36 = v35 + 36;
      v37 = v38;
      if ((v22 & ((_DWORD)v16 == v38)) == 0)
        break;
      if ((_DWORD)a7 != *(_DWORD *)(v36 + 4))
      {
        a7 = *(unsigned int *)(v36 + 4);
        goto LABEL_16;
      }
      if (v15 != *(_DWORD *)(v36 + 8))
        goto LABEL_16;
LABEL_4:
      v22 = 1;
LABEL_5:
      if (++v21 == v23)
        return result;
    }
    a7 = *(unsigned int *)(v36 + 4);
    v16 = v37;
LABEL_16:
    v15 = *(_DWORD *)(v36 + 8);
    a15.f32[0] = *((float *)v20 + 36) * 0.5;
    v39 = v33 * 0.25;
    if ((float)(v33 * 0.25) < 1.0)
      v39 = 1.0;
    v126 = v39 * (float)(a15.f32[0] * a15.f32[0]);
    v127 = a15.i32[0];
    v123 = 0;
    v124 = 0;
    v125 = 0;
    v122[0] = v20;
    v122[1] = &v124;
    v122[2] = &v123;
    v122[3] = a6;
    v122[4] = v19 + 12 * v21;
    v122[5] = a4 + 48 * v21;
    v122[6] = &v127;
    v122[7] = &v126;
    v122[8] = a5;
    v122[9] = &v128;
    v141 = v20;
    v140 = v33;
    v40 = (*(_DWORD *)v29 & 0x7FFFFFFFu) < 0x7F800000;
    if ((*(_DWORD *)v29 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v40 = (*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) < 0x7F800000;
      if ((*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        v40 = (*(_DWORD *)(v29 + 8) & 0x7FFFFFFFu) < 0x7F800000;
    }
    if (v40)
    {
      v41 = (*(_DWORD *)v30 & 0x7FFFFFFFu) < 0x7F800000;
      if ((*(_DWORD *)v30 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v41 = (*(_DWORD *)(v30 + 4) & 0x7FFFFFFFu) < 0x7F800000;
        if ((*(_DWORD *)(v30 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v41 = (*(_DWORD *)(v30 + 8) & 0x7FFFFFFFu) < 0x7F800000;
      }
      if (v41)
      {
        v42 = (*(_DWORD *)v29 & 0x7FFFFFFFu) < 0x7F800000;
        if ((*(_DWORD *)v29 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v42 = (*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) < 0x7F800000;
          if ((*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            v42 = (*(_DWORD *)(v29 + 8) & 0x7FFFFFFFu) < 0x7F800000;
        }
        v118 = a15;
        if (!v42)
        {
          v43 = v15;
          v44 = v16;
          v45 = a7;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_106;
          }
          a14.i64[0] = *(_QWORD *)v29;
          a14.i32[2] = *(_DWORD *)(v29 + 8);
          result = &v123;
          a7 = v45;
          v16 = v44;
          v15 = v43;
          v19 = a3;
          v23 = v115;
          a5 = v116;
          a6 = v117;
          a15 = v118;
        }
        v17.i32[0] = *((_DWORD *)v20 + 37);
        v46 = vmulq_n_f32(a14, v17.f32[0]);
        v138 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v46.f32));
        v139 = vcvtms_s32_f32(v46.f32[2]);
        v47 = (*(_DWORD *)v30 & 0x7FFFFFFFu) < 0x7F800000;
        if ((*(_DWORD *)v30 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v47 = (*(_DWORD *)(v30 + 4) & 0x7FFFFFFFu) < 0x7F800000;
          if ((*(_DWORD *)(v30 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            v47 = (*(_DWORD *)(v30 + 8) & 0x7FFFFFFFu) < 0x7F800000;
        }
        if (v47)
        {
          v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0);
        }
        else
        {
          v49 = v15;
          v50 = v16;
          v51 = a7;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_106;
          }
          v17.i32[0] = *((_DWORD *)v20 + 37);
          a14.i64[0] = *(_QWORD *)v29;
          a14.i32[2] = *(_DWORD *)(v29 + 8);
          v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0);
          result = &v123;
          a7 = v51;
          v16 = v50;
          v15 = v49;
          v19 = a3;
          v23 = v115;
          a5 = v116;
          a6 = v117;
          a15 = v118;
        }
        v31.i64[0] = *(_QWORD *)v30;
        v31.i32[2] = *(_DWORD *)(v30 + 8);
        v52 = vmulq_f32(v48, (float32x4_t)v31);
        v136 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v52.f32));
        v53 = vcvtms_s32_f32(v52.f32[2]);
        v54 = (int8x16_t)vsubq_f32((float32x4_t)v31, a14);
        v31.i32[0] = v54.i32[2];
        v135 = v54.i32[2];
        v134 = v54.i64[0];
        *(int8x8_t *)a10.f32 = vbsl_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v54.i8), _D12, _D11);
        v55 = *(float *)&v54.i32[2] >= 0.0 ? 1.0 : -1.0;
        a10.f32[2] = v55;
        *(int32x2_t *)v32.f32 = vdup_lane_s32(*(int32x2_t *)v54.i8, 1);
        v56 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
        v57 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), *(float32x2_t *)v32.f32, *(float32x2_t *)v54.i8, 1);
        v32.i32[0] = v54.i32[1];
        v58 = v54.i32[0];
        a8 = vmulq_n_f32(a10, a15.f32[0]);
        v137 = v53;
        v133 = a8.u32[2];
        v132 = a8.i64[0];
        v131 = vmla_f32(v57, v56, v56).u32[0];
        v130 = 0;
        v129[0] = &v138;
        v129[1] = &v136;
        v129[2] = &v130;
        v129[3] = v20;
        v129[4] = &v132;
        v129[5] = v29;
        v129[6] = &v140;
        v129[7] = &v134;
        v129[8] = &v131;
        v129[9] = v122;
        v129[10] = &v141;
        v59 = v58 & 0x7FFFFFFF;
        v60 = (v58 & 0x7FFFFFFFu) < 0x7F800000;
        v61 = (v32.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF
            ? (v31.i32[0] & 0x7FFFFFFFu) < 0x7F800000
            : (v32.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
        if (v59 <= 2139095039 ? v61 : v60)
        {
          v112 = v17;
          v119 = a14;
          v111 = a7;
          sub_223E89E18((uint64_t)v145, v29, v30, *((float *)v20 + 36), (float32x4_t)v31, *(double *)a10.i64, v32);
          v66 = (*(_DWORD *)v29 & 0x7FFFFFFFu) < 0x7F800000;
          if ((*(_DWORD *)v29 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v66 = (*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) < 0x7F800000;
            if ((*(_DWORD *)(v29 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              v66 = (*(_DWORD *)(v29 + 8) & 0x7FFFFFFFu) < 0x7F800000;
          }
          v67 = v119;
          v68 = v112;
          if (!v66)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
            {
LABEL_106:
              abort();
            }
            v68.i32[0] = *((_DWORD *)v20 + 37);
            v67.i64[0] = *(_QWORD *)v29;
            v67.i32[2] = *(_DWORD *)(v29 + 8);
          }
          v113 = v15;
          a8 = vmulq_n_f32(v67, v68.f32[0]);
          *(int32x2_t *)v68.f32 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)a8.f32));
          v143 = *(int32x2_t *)v68.f32;
          a8.i32[0] = a8.i32[2];
          v144 = vcvtms_s32_f32(a8.f32[2]);
          v69 = v68.i32[0] & 0xFFFFFFF8;
          v70 = v68.i32[1] & 0xFFFFFFF8;
          v71 = v144 & 0xFFFFFFF8;
          v72 = *((unsigned int *)v20 + 48);
          if ((v72 & 0x80000000) != 0)
          {
            v75 = 0x80000000;
          }
          else
          {
            v73 = v20[25];
            v74 = (_DWORD *)(v73 + 4488 * (v72 & 0xFFFFFFFFCFFFFFFFLL));
            v75 = 0x80000000;
            v76 = v69 - *v74;
            if (v69 >= *v74)
            {
              v77 = v74[1];
              _VF = __OFSUB__(v70, v77);
              v78 = v70 - v77;
              if (v78 < 0 == _VF)
              {
                v79 = v74[2];
                _VF = __OFSUB__(v71, v79);
                v80 = v71 - v79;
                if (v80 < 0 == _VF)
                {
                  v81 = v74[3];
                  if (v69 < v81 && v70 < v74[4] && v71 < v74[5])
                  {
                    v82 = v81 - *v74;
                    v75 = *((_DWORD *)v20 + 48);
                    while (1)
                    {
                      v82 >>= 1;
                      v75 = *(_DWORD *)(v73
                                      + 4488 * (v75 & 0xCFFFFFFF)
                                      + 4
                                      * ((4 * ((v82 & v76) != 0)) | (2 * ((v82 & v78) != 0)) | ((v82 & v80) != 0))
                                      + 24);
                      if (v82 == *((_DWORD *)v20 + 38) || v75 >> 30)
                        break;
                      v76 -= v82 & v76;
                      v78 -= v82 & v78;
                      v80 -= v82 & v80;
                    }
                  }
                }
              }
            }
          }
          v120 = v16;
          v142 = v75;
          while (2)
          {
            v84 = v143.i8[0];
            v85 = v143.i8[4];
            v88 = v143.i32[0] & 0xFFFFFFF8;
            v89 = v143.i32[1] & 0xFFFFFFF8;
            v86 = v144;
            v90 = v144 & 0xFFFFFFF8;
            if ((v143.i32[0] & 0xFFFFFFF8) == v69 && v89 == v70 && v90 == v71)
            {
              v93 = v142;
              if ((v142 & 0x80000000) == 0)
                goto LABEL_95;
            }
            else
            {
              v93 = *((unsigned int *)v20 + 48);
              if ((v93 & 0x80000000) != 0)
                goto LABEL_93;
              v94 = v20[25];
              v95 = (int *)(v94 + 4488 * (v93 & 0xFFFFFFFFCFFFFFFFLL));
              v96 = *v95;
              v97 = v95[1];
              v98 = v95[2];
              v99 = v88 - *v95;
              v100 = v88 < *v95 || v89 < v97;
              v101 = v100 || v90 < v98;
              if (v101
                || ((v102 = v95[3], v105 = v95 + 4, v103 = v95[4], v104 = v105[1], v88 < v102)
                  ? (v106 = v89 < v103)
                  : (v106 = 0),
                    v106 ? (v107 = v90 < v104) : (v107 = 0),
                    !v107))
              {
LABEL_93:
                v93 = 0x80000000;
              }
              else
              {
                v108 = v89 - v97;
                v109 = v90 - v98;
                for (i = v102 - v96; ; v109 -= i & v109)
                {
                  i >>= 1;
                  v93 = *(unsigned int *)(v94
                                        + 4488 * (v93 & 0xCFFFFFFF)
                                        + 4 * ((4 * ((i & v99) != 0)) | (2 * ((i & v108) != 0)) | ((i & v109) != 0))
                                        + 24);
                  if (i == *((_DWORD *)v20 + 38) || v93 >> 30)
                    break;
                  v99 -= i & v99;
                  v108 -= i & v108;
                }
              }
              v142 = v93;
              v71 = v144 & 0xFFFFFFF8;
              v70 = v143.i32[1] & 0xFFFFFFF8;
              v69 = v143.i32[0] & 0xFFFFFFF8;
              if ((v93 & 0x80000000) == 0)
              {
LABEL_95:
                v83 = v20[293];
                if (v93 >= (v20[294] - v83) >> 11)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_106;
                  }
                  v83 = v20[293];
                  v84 = v143.i8[0];
                  v85 = v143.i8[4];
                  v86 = v144;
                }
                v146[0] = &v142;
                v146[1] = v121;
                v146[2] = (unsigned int *)&v143;
                if (!sub_223D4033C((uint64_t)v129, &v143, *(_DWORD *)(v83+ (v93 << 11)+ 4* (v84 & 7 | (8 * (v85 & 7)) & 0x3F | ((v86 & 7) << 6))), v146, a8, v68, *(double *)a10.i64, v63, v64, v65, (int8x16_t)a14, a15))goto LABEL_3;
LABEL_70:
                if (!sub_223E8A0B8((uint64_t)v145, (uint64_t)&v143, a8, v87, a10))
                  goto LABEL_3;
                continue;
              }
            }
            break;
          }
          v147[0] = &v142;
          v147[1] = v121;
          v147[2] = (unsigned int *)&v143;
          if ((sub_223D4033C((uint64_t)v129, &v143, *((_DWORD *)v20 + 72), v147, a8, v68, *(double *)a10.i64, v63, v64, v65, (int8x16_t)a14, a15) & 1) == 0)
          {
LABEL_3:
            a5 = v116;
            a6 = v117;
            v23 = v115;
            result = &v123;
            a7 = v111;
            v15 = v113;
            v16 = v120;
            goto LABEL_4;
          }
          goto LABEL_70;
        }
      }
    }
    goto LABEL_4;
  }
  return result;
}

void sub_223CFADA8(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t (**v7)();
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  int v21;
  uint64_t v24;
  uint64_t (**v25)();
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  int v39;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::mutex *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  int v54;
  float32x4_t v55;
  char *v56;
  char *v57;
  const float *v58;
  float32x4_t v59;
  const char **v60;
  const char *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (**v91)();
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  int v96;
  float32x4_t v97;
  char *v98;
  char *v99;
  const float *v100;
  float32x4_t v101;
  const char **v102;
  const char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::string v126;
  __int128 v127;
  __int128 v128;
  int v129;
  __int128 v130;
  __int128 __p;
  _BYTE v132[9];
  uint64_t v133;
  __int128 v134;
  std::string v135;
  _QWORD v136[2];
  __int128 v137;
  char v138;
  unsigned int *v139;
  __int128 *v140;
  char v141;
  const char *v142;
  uint64_t v143;
  uint64_t (**v144)();
  _OWORD v145[22];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v142 = "cv3d.recon.";
  v143 = 11;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (uint64_t (**)())a2;
  else
    v7 = *(uint64_t (***)())a2;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  v144 = v7;
  *(_QWORD *)&v145[0] = v6;
  sub_2231A9820((uint64_t)&v142, (uint64_t)v145 + 8, 0, 0, &v135);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v8[2];
    }
    v10 = *(_QWORD *)(v9 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      sub_2241471F8();
      v14 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
        v127 = 0u;
        v128 = 0u;
        v129 = 728325608;
        kdebug_trace();
        sub_223CF9A48(a1, (uint64_t)&v142);
        v15 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v132[7] = 6;
          strcpy((char *)&__p, "points");
          v133 = (uint64_t)((double)v15 / 1000000000.0 * 1000000000.0);
          *(_QWORD *)&v134 = 2;
          v16 = sub_2241471F8();
          sub_223452794((uint64_t)v16, v14, (uint64_t)&v142, (uint64_t)&__p, (__int128 *)&v133);
          if ((v132[7] & 0x80000000) != 0)
            operator delete((void *)__p);
        }
        sub_22316F8F4((uint64_t *)&v142);
        kdebug_trace();
      }
    }
  }
  v127 = 0u;
  v128 = 0u;
  v129 = 728325624;
  kdebug_trace();
  size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v135.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v18 = &v135;
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v135.__r_.__value_.__r.__words[0];
    v19 = v18->__r_.__value_.__r.__words[0];
    v20 = v18->__r_.__value_.__l.__size_;
    v21 = v18->__r_.__value_.__s.__data_[16];
    if (v19 == 0x6365722E64337663 && v20 == 0x73746174532E6E6FLL && v21 == 46)
    {
      sub_223187510();
      sub_223CF9A48(a1, (uint64_t)&v142);
      sub_22316F8F4((uint64_t *)&v142);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  v142 = "cv3d.recon.";
  v143 = 11;
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (uint64_t (**)())a2;
  else
    v25 = *(uint64_t (***)())a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  v144 = v25;
  *(_QWORD *)&v145[0] = v24;
  sub_2231A9820((uint64_t)&v142, (uint64_t)v145 + 8, 0, 0, &v135);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v26 = sub_2241471F8();
    v27 = v26[2];
    if (!v27)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v27 = v26[2];
    }
    v28 = *(_QWORD *)(v27 + 64);
    v29 = (std::mutex *)(v28 + 32);
    std::mutex::lock((std::mutex *)(v28 + 32));
    v31 = *(_QWORD *)(v28 + 96);
    v30 = *(_QWORD *)(v28 + 104);
    std::mutex::unlock(v29);
    if (v31 != v30)
    {
      sub_2241471F8();
      v32 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
      {
        v127 = 0u;
        v128 = 0u;
        v129 = 728325608;
        kdebug_trace();
        sub_223CFBFA4((uint64_t)a1, (uint64_t)&v142);
        v33 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
        {
          v132[7] = 8;
          strcpy((char *)&__p, "occupied");
          v133 = (uint64_t)((double)v33 / 1000000000.0 * 1000000000.0);
          *(_QWORD *)&v134 = 2;
          v34 = sub_2241471F8();
          sub_223452794((uint64_t)v34, v32, (uint64_t)&v142, (uint64_t)&__p, (__int128 *)&v133);
          if ((v132[7] & 0x80000000) != 0)
            operator delete((void *)__p);
        }
        sub_22316F8F4((uint64_t *)&v142);
        kdebug_trace();
      }
    }
  }
  v127 = 0u;
  v128 = 0u;
  v129 = 728325624;
  kdebug_trace();
  v35 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = v135.__r_.__value_.__l.__size_;
  if (v35 >= 0x11)
  {
    v36 = &v135;
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v135.__r_.__value_.__r.__words[0];
    v37 = v36->__r_.__value_.__r.__words[0];
    v38 = v36->__r_.__value_.__l.__size_;
    v39 = v36->__r_.__value_.__s.__data_[16];
    if (v37 == 0x6365722E64337663 && v38 == 0x73746174532E6E6FLL && v39 == 46)
    {
      sub_223187510();
      sub_223CFBFA4((uint64_t)a1, (uint64_t)&v142);
      sub_22316F8F4((uint64_t *)&v142);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v42 = sub_2241471F8();
    v43 = v42[2];
    if (!v43)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v43 = v42[2];
    }
    v44 = *(_QWORD *)(v43 + 64);
    v45 = (std::mutex *)(v44 + 32);
    std::mutex::lock((std::mutex *)(v44 + 32));
    v47 = *(_QWORD *)(v44 + 96);
    v46 = *(_QWORD *)(v44 + 104);
    std::mutex::unlock(v45);
    if (v47 != v46)
    {
      v142 = "cv3d.recon.";
      v143 = 11;
      v48 = *(unsigned __int8 *)(a2 + 23);
      if ((v48 & 0x80u) == 0)
        v49 = (uint64_t (**)())a2;
      else
        v49 = *(uint64_t (***)())a2;
      if ((v48 & 0x80u) != 0)
        v48 = *(_QWORD *)(a2 + 8);
      v144 = v49;
      *(_QWORD *)&v145[0] = v48;
      sub_2231A9820((uint64_t)&v142, (uint64_t)v145 + 8, 0, 0, &v126);
      sub_2241471F8();
      v50 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
      {
        v127 = 0u;
        v128 = 0u;
        v129 = 728325616;
        kdebug_trace();
        v51 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
        {
          *(_QWORD *)&v137 = (uint64_t)((double)v51 / 1000000000.0 * 1000000000.0);
          *((_QWORD *)&v137 + 1) = 2;
          v52 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
          {
            sub_2241498F4((uint64_t)&v142, 0);
            memset(&v135, 0, sizeof(v135));
            *(_QWORD *)&v130 = &v135;
            v136[0] = &v130;
            v139 = a1 + 4;
            v140 = (__int128 *)v136;
            v138 = 1;
            v53 = a1[48];
            if ((v53 & 0x80000000) == 0)
            {
              v54 = a1[49];
              *(_QWORD *)&__p = &v141;
              *((_QWORD *)&__p + 1) = &v139;
              *(_QWORD *)v132 = &v138;
              sub_223D41048((uint64_t)(a1 + 4), v54, v53, (uint64_t)&__p);
            }
            *(_QWORD *)&__p = 0;
            DWORD2(__p) = 1065353216;
            sub_223CF19D8((uint64_t)&v142, &v135, (uint64_t *)&__p, 1);
            v56 = (char *)v142;
            v57 = (char *)v143;
            if (v142 != (const char *)v143)
            {
              v58 = (const float *)(a1 + 36);
              v59 = vld1q_dup_f32(v58);
              do
              {
                v55.i64[0] = *(_QWORD *)v56;
                v55.i32[2] = *((_DWORD *)v56 + 2);
                v55 = vmulq_f32(v59, v55);
                *((_DWORD *)v56 + 2) = v55.i32[2];
                *(_QWORD *)v56 = v55.i64[0];
                v56 += 12;
              }
              while (v56 != v57);
            }
            if (v135.__r_.__value_.__r.__words[0])
            {
              v135.__r_.__value_.__l.__size_ = v135.__r_.__value_.__r.__words[0];
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            *(_QWORD *)&__p = 1701147238;
            *(_WORD *)&v132[7] = 260;
            sub_22329F414((uint64_t)&v142, &__p, &v137, &v133);
            if (v132[8] && (v132[7] & 0x80000000) != 0)
              operator delete((void *)__p);
            sub_22316F8F4((uint64_t *)&v142);
            v60 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 56))(v50);
            v61 = *v60;
            v62 = (std::__shared_weak_count *)v60[1];
            if (v62)
            {
              p_shared_owners = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldxr(p_shared_owners);
              while (__stxr(v64 + 1, p_shared_owners));
            }
            v65 = v134;
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = v134;
            v134 = 0uLL;
            v142 = v61;
            v143 = (uint64_t)v62;
            if (v62)
            {
              v66 = (unint64_t *)&v62->__shared_owners_;
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            v144 = &off_24EC6A3B8;
            v145[0] = v65;
            if (*((_QWORD *)&v65 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            (*(void (**)(uint64_t *, const char **))(*v52 + 16))(v52, &v142);
            v70 = (std::__shared_weak_count *)*((_QWORD *)&v145[0] + 1);
            if (*((_QWORD *)&v145[0] + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v145[0] + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v73 = (std::__shared_weak_count *)v143;
            if (v143)
            {
              v74 = (unint64_t *)(v143 + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = (std::__shared_weak_count *)v135.__r_.__value_.__r.__words[2];
            if (v135.__r_.__value_.__r.__words[2])
            {
              v77 = (unint64_t *)(v135.__r_.__value_.__r.__words[2] + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            if (v62)
            {
              v79 = (unint64_t *)&v62->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
            if (*((_QWORD *)&v134 + 1))
            {
              v82 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v84 = sub_2241471F8();
    v85 = v84[2];
    if (!v85)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v85 = v84[2];
    }
    v86 = *(_QWORD *)(v85 + 64);
    v87 = (std::mutex *)(v86 + 32);
    std::mutex::lock((std::mutex *)(v86 + 32));
    v89 = *(_QWORD *)(v86 + 96);
    v88 = *(_QWORD *)(v86 + 104);
    std::mutex::unlock(v87);
    if (v89 != v88)
    {
      v142 = "cv3d.recon.";
      v143 = 11;
      v90 = *(unsigned __int8 *)(a2 + 23);
      if ((v90 & 0x80u) == 0)
        v91 = (uint64_t (**)())a2;
      else
        v91 = *(uint64_t (***)())a2;
      if ((v90 & 0x80u) != 0)
        v90 = *(_QWORD *)(a2 + 8);
      v144 = v91;
      *(_QWORD *)&v145[0] = v90;
      sub_2231A9820((uint64_t)&v142, (uint64_t)v145 + 8, 0, 0, &v126);
      sub_2241471F8();
      v92 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92))
      {
        v127 = 0u;
        v128 = 0u;
        v129 = 728325616;
        kdebug_trace();
        v93 = *a3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92))
        {
          *(_QWORD *)&v130 = (uint64_t)((double)v93 / 1000000000.0 * 1000000000.0);
          *((_QWORD *)&v130 + 1) = 2;
          v94 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92))
          {
            sub_2241498F4((uint64_t)&v142, 0);
            memset(&v135, 0, sizeof(v135));
            v136[0] = a3;
            v136[1] = &v135;
            *(_QWORD *)&v137 = a1;
            *((_QWORD *)&v137 + 1) = v136;
            v139 = a1 + 4;
            v140 = &v137;
            v138 = 1;
            v95 = a1[48];
            if ((v95 & 0x80000000) == 0)
            {
              v96 = a1[49];
              *(_QWORD *)&__p = &v141;
              *((_QWORD *)&__p + 1) = &v139;
              *(_QWORD *)v132 = &v138;
              sub_223D45BE8((uint64_t)(a1 + 4), v96, v95, (uint64_t)&__p);
            }
            *(_QWORD *)&__p = 0x3F80000000000000;
            DWORD2(__p) = 1065353216;
            sub_223CF19D8((uint64_t)&v142, &v135, (uint64_t *)&__p, 1);
            v98 = (char *)v142;
            v99 = (char *)v143;
            if (v142 != (const char *)v143)
            {
              v100 = (const float *)(a1 + 36);
              v101 = vld1q_dup_f32(v100);
              do
              {
                v97.i64[0] = *(_QWORD *)v98;
                v97.i32[2] = *((_DWORD *)v98 + 2);
                v97 = vmulq_f32(v101, v97);
                *((_DWORD *)v98 + 2) = v97.i32[2];
                *(_QWORD *)v98 = v97.i64[0];
                v98 += 12;
              }
              while (v98 != v99);
            }
            if (v135.__r_.__value_.__r.__words[0])
            {
              v135.__r_.__value_.__l.__size_ = v135.__r_.__value_.__r.__words[0];
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            strcpy((char *)&__p, "reflective");
            *(_WORD *)&v132[7] = 266;
            sub_22329F414((uint64_t)&v142, &__p, &v130, &v133);
            if (v132[8] && (v132[7] & 0x80000000) != 0)
              operator delete((void *)__p);
            sub_22316F8F4((uint64_t *)&v142);
            v102 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 56))(v92);
            v103 = *v102;
            v104 = (std::__shared_weak_count *)v102[1];
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = v134;
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = v134;
            v134 = 0uLL;
            v142 = v103;
            v143 = (uint64_t)v104;
            if (v104)
            {
              v108 = (unint64_t *)&v104->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            v144 = &off_24EC6A3B8;
            v145[0] = v107;
            if (*((_QWORD *)&v107 + 1))
            {
              v110 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            (*(void (**)(uint64_t *, const char **))(*v94 + 16))(v94, &v142);
            v112 = (std::__shared_weak_count *)*((_QWORD *)&v145[0] + 1);
            if (*((_QWORD *)&v145[0] + 1))
            {
              v113 = (unint64_t *)(*((_QWORD *)&v145[0] + 1) + 8);
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            v115 = (std::__shared_weak_count *)v143;
            if (v143)
            {
              v116 = (unint64_t *)(v143 + 8);
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v118 = (std::__shared_weak_count *)v135.__r_.__value_.__r.__words[2];
            if (v135.__r_.__value_.__r.__words[2])
            {
              v119 = (unint64_t *)(v135.__r_.__value_.__r.__words[2] + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            if (v104)
            {
              v121 = (unint64_t *)&v104->__shared_owners_;
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v123 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
            if (*((_QWORD *)&v134 + 1))
            {
              v124 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223CFBD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_22316F8F4(&a50);
  sub_2231874DC((uint64_t)&a16);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223CFBFA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  const float *v9;
  float32x4_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  __int128 *v37;
  unint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  _BYTE *v44;
  char *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  __int128 *v60;
  unint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  _QWORD v72[3];
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  _BYTE *v80;
  uint64_t v81;
  _QWORD v82[2];
  char v83;
  _QWORD v84[2];
  char v85;
  char *v86;
  _QWORD *v87;
  char *v88;

  sub_2241498F4(a2, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82[0] = a1;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  __p = 0;
  v74 = 0;
  v75 = 0;
  v72[0] = &v79;
  v72[1] = &v76;
  v72[2] = &__p;
  v82[1] = v72;
  v84[0] = a1 + 16;
  v84[1] = v82;
  v83 = 1;
  v4 = *(_DWORD *)(a1 + 192);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 196);
    v86 = &v85;
    v87 = v84;
    v88 = &v83;
    sub_223D4A7AC(a1 + 16, v5, v4, (uint64_t)&v86);
    if (v79 != v80)
    {
      v70 = 1065353216;
      v71 = 0;
      sub_223CF19D8(a2, &v79, &v70, 1);
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 != v8)
      {
        v9 = (const float *)(a1 + 144);
        v10 = vld1q_dup_f32(v9);
        do
        {
          v6.i64[0] = *(_QWORD *)v7;
          v6.i32[2] = *(_DWORD *)(v7 + 8);
          v6 = vmulq_f32(v10, v6);
          *(_DWORD *)(v7 + 8) = v6.i32[2];
          *(_QWORD *)v7 = v6.i64[0];
          v7 += 12;
        }
        while (v7 != v8);
      }
      v69 = (_QWORD *)(a2 + 240);
      sub_223674E10(a2 + 240, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2));
      *(_DWORD *)(a2 + 272) = 2;
      v11 = (_QWORD *)(a2 + 280);
      sub_223674E10(a2 + 280, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2));
      *(_DWORD *)(a2 + 312) = 2;
      if (v80 != v79)
      {
        v65 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)v79) >> 2);
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2) / v65;
        if ((_DWORD)v12)
        {
          v13 = 0;
          v67 = a2 + 304;
          v68 = a2 + 264;
          do
          {
            v14 = 0;
            v66 = v13;
            v15 = v13;
            do
            {
              v17 = *((_BYTE *)v76 + v15);
              v19 = *(_BYTE **)(a2 + 248);
              v18 = *(_QWORD *)(a2 + 256);
              if ((unint64_t)v19 < v18)
              {
                *v19 = v17;
                v20 = (uint64_t)(v19 + 1);
                goto LABEL_35;
              }
              v21 = (char *)*v69;
              v22 = &v19[-*v69];
              v23 = (unint64_t)(v22 + 1);
              if ((uint64_t)(v22 + 1) < 0)
                sub_22316E078();
              v24 = v18 - (_QWORD)v21;
              if (2 * v24 > v23)
                v23 = 2 * v24;
              v25 = v24 >= 0x3FFFFFFFFFFFFFFFLL;
              v26 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v25)
                v26 = v23;
              if (v26)
              {
                LODWORD(v84[0]) = v26;
                v27 = *(unsigned int *)(a2 + 268);
                if ((_DWORD)v27 == -1)
                  sub_22316DD70();
                v86 = (char *)v84;
                v28 = ((uint64_t (*)(char **, uint64_t))off_24EC63B50[v27])(&v86, v68);
                v30 = &v22[v28];
                v22[v28] = v17;
                v20 = (uint64_t)&v22[v28 + 1];
                v31 = *(_BYTE **)(a2 + 240);
                v32 = *(char **)(a2 + 248);
                v33 = v32 - v31;
                if (v32 == v31)
                {
LABEL_23:
                  *(_QWORD *)(a2 + 240) = v30;
                  *(_QWORD *)(a2 + 248) = v20;
                  v34 = *(_QWORD *)(a2 + 256);
                  *(_QWORD *)(a2 + 256) = v28 + v29;
                  if (!v32)
                    goto LABEL_35;
LABEL_33:
                  v86 = v32;
                  LODWORD(v87) = v34 - (_DWORD)v32;
                  v41 = *(unsigned int *)(a2 + 268);
                  if ((_DWORD)v41 == -1)
                    sub_22316DD70();
                  v84[0] = &v86;
                  ((void (*)(_QWORD *, uint64_t))off_24EC63B40[v41])(v84, v68);
                  goto LABEL_35;
                }
              }
              else
              {
                v28 = 0;
                v29 = 0;
                v30 = &v19[-*v69];
                *v22 = v17;
                v20 = (uint64_t)(v22 + 1);
                v31 = *(_BYTE **)(a2 + 240);
                v32 = *(char **)(a2 + 248);
                v33 = v32 - v31;
                if (v32 == v31)
                  goto LABEL_23;
              }
              if (v33 < 0x20)
                goto LABEL_71;
              if ((unint64_t)&v32[v21 - &v19[v28]] < 0x20)
                goto LABEL_71;
              v35 = &v32[-(v33 & 0xFFFFFFFFFFFFFFE0)];
              v30 -= v33 & 0xFFFFFFFFFFFFFFE0;
              v36 = &v22[v28 - 16];
              v37 = (__int128 *)(v32 - 16);
              v38 = v33 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v39 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *v36 = v39;
                v36 -= 2;
                v37 -= 2;
                v38 -= 32;
              }
              while (v38);
              v32 = v35;
              if (v33 != (v33 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_71:
                do
                {
                  v40 = *--v32;
                  *--v30 = v40;
                }
                while (v32 != v31);
              }
              v32 = (char *)*v69;
              *(_QWORD *)(a2 + 240) = v30;
              *(_QWORD *)(a2 + 248) = v20;
              v34 = *(_QWORD *)(a2 + 256);
              *(_QWORD *)(a2 + 256) = v28 + v29;
              if (v32)
                goto LABEL_33;
LABEL_35:
              *(_QWORD *)(a2 + 248) = v20;
              v42 = *((_BYTE *)__p + v15);
              v44 = *(_BYTE **)(a2 + 288);
              v43 = *(_QWORD *)(a2 + 296);
              if ((unint64_t)v44 < v43)
              {
                *v44 = v42;
                v16 = (uint64_t)(v44 + 1);
                goto LABEL_12;
              }
              v45 = (char *)*v11;
              v46 = &v44[-*v11];
              v47 = (unint64_t)(v46 + 1);
              if ((uint64_t)(v46 + 1) < 0)
                sub_22316E078();
              v48 = v43 - (_QWORD)v45;
              if (2 * v48 > v47)
                v47 = 2 * v48;
              v25 = v48 >= 0x3FFFFFFFFFFFFFFFLL;
              v49 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v25)
                v49 = v47;
              if (v49)
              {
                LODWORD(v84[0]) = v49;
                v50 = *(unsigned int *)(a2 + 308);
                if ((_DWORD)v50 == -1)
                  sub_22316DD70();
                v86 = (char *)v84;
                v51 = ((uint64_t (*)(char **, uint64_t))off_24EC63B50[v50])(&v86, v67);
                v53 = &v46[v51];
                v46[v51] = v42;
                v16 = (uint64_t)&v46[v51 + 1];
                v54 = *(_BYTE **)(a2 + 280);
                v55 = *(char **)(a2 + 288);
                v56 = v55 - v54;
                if (v55 == v54)
                {
LABEL_44:
                  *(_QWORD *)(a2 + 280) = v53;
                  *(_QWORD *)(a2 + 288) = v16;
                  v57 = *(_QWORD *)(a2 + 296);
                  *(_QWORD *)(a2 + 296) = v51 + v52;
                  if (!v55)
                    goto LABEL_12;
LABEL_54:
                  v86 = v55;
                  LODWORD(v87) = v57 - (_DWORD)v55;
                  v64 = *(unsigned int *)(a2 + 308);
                  if ((_DWORD)v64 == -1)
                    sub_22316DD70();
                  v84[0] = &v86;
                  ((void (*)(_QWORD *, uint64_t))off_24EC63B40[v64])(v84, v67);
                  goto LABEL_12;
                }
              }
              else
              {
                v51 = 0;
                v52 = 0;
                v53 = &v44[-*v11];
                *v46 = v42;
                v16 = (uint64_t)(v46 + 1);
                v54 = *(_BYTE **)(a2 + 280);
                v55 = *(char **)(a2 + 288);
                v56 = v55 - v54;
                if (v55 == v54)
                  goto LABEL_44;
              }
              if (v56 < 0x20)
                goto LABEL_72;
              if ((unint64_t)&v55[v45 - &v44[v51]] < 0x20)
                goto LABEL_72;
              v58 = &v55[-(v56 & 0xFFFFFFFFFFFFFFE0)];
              v53 -= v56 & 0xFFFFFFFFFFFFFFE0;
              v59 = &v46[v51 - 16];
              v60 = (__int128 *)(v55 - 16);
              v61 = v56 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v62 = *v60;
                *(v59 - 1) = *(v60 - 1);
                *v59 = v62;
                v59 -= 2;
                v60 -= 2;
                v61 -= 32;
              }
              while (v61);
              v55 = v58;
              if (v56 != (v56 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_72:
                do
                {
                  v63 = *--v55;
                  *--v53 = v63;
                }
                while (v55 != v54);
              }
              v55 = (char *)*v11;
              *(_QWORD *)(a2 + 280) = v53;
              *(_QWORD *)(a2 + 288) = v16;
              v57 = *(_QWORD *)(a2 + 296);
              *(_QWORD *)(a2 + 296) = v51 + v52;
              if (v55)
                goto LABEL_54;
LABEL_12:
              *(_QWORD *)(a2 + 288) = v16;
              ++v14;
            }
            while (v14 != (_DWORD)v12);
            v13 = v66 + 1;
          }
          while (v66 + 1 != v65);
        }
      }
    }
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
}

void sub_223CFC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t *v27;
  void *v29;
  void *v30;

  if (__p)
  {
    operator delete(__p);
    v29 = a23;
    if (!a23)
    {
LABEL_3:
      v30 = a26;
      if (!a26)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v29 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a26;
  if (!a26)
  {
LABEL_4:
    sub_22316F8F4(v27);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v30);
  sub_22316F8F4(v27);
  _Unwind_Resume(a1);
}

void sub_223CFC5B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v15;
  std::string::size_type v16;
  int v17;
  __n128 *v20;
  std::string *v21;
  size_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::mutex *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int v36;
  __n128 *v39;
  std::string *v40;
  size_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  int v56;
  __n128 *v59;
  std::string *v60;
  size_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  std::mutex *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  int v76;
  __n128 *v79;
  std::string *v80;
  size_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::string::size_type v91;
  std::string *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  int v95;
  __n128 *v98;
  std::string *v99;
  size_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  std::mutex *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string *v111;
  std::string::size_type v112;
  std::string::size_type v113;
  int v114;
  __n128 *v117;
  std::string *v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  const char *v126;
  size_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  size_t v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  std::string::size_type v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  int v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  const char *__src;
  std::string __p;
  int v193;
  const char *v194;
  int v195;
  const char *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::string v200;
  __int128 v201;
  _BYTE v202[40];
  void *v203[2];
  unint64_t v204;
  char v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  *(_QWORD *)&v202[16] = v5;
  *(_QWORD *)&v202[24] = v4;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        LODWORD(v200.__r_.__value_.__l.__data_) = -1057222719 * ((*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3)
                                                - ((*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2);
        sub_223CFE13C(v12, (int *)&v200, "allocated point blocks");
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v15 = p_p->__r_.__value_.__r.__words[0];
    v16 = p_p->__r_.__value_.__l.__size_;
    v17 = p_p->__r_.__value_.__s.__data_[16];
    if (v15 == 0x6365722E64337663 && v16 == 0x73746174532E6E6FLL && v17 == 46)
    {
      v20 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      else
        v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v22 = __p.__r_.__value_.__l.__size_;
      LODWORD(v200.__r_.__value_.__l.__data_) = -1057222719 * ((*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3)
                                              - ((*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2);
      sub_223532E4C(v20, v21, v22, (unsigned int *)&v200, (uint64_t)"allocated point blocks", 22);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v23 = *((unsigned __int8 *)a2 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = a2;
  else
    v24 = (uint64_t *)*a2;
  if ((v23 & 0x80u) != 0)
    v23 = a2[1];
  *(_QWORD *)&v202[16] = v24;
  *(_QWORD *)&v202[24] = v23;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v25 = sub_2241471F8();
    v26 = v25[2];
    if (!v26)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v26 = v25[2];
    }
    v27 = *(_QWORD *)(v26 + 64);
    v28 = (std::mutex *)(v27 + 32);
    std::mutex::lock((std::mutex *)(v27 + 32));
    v30 = *(_QWORD *)(v27 + 96);
    v29 = *(_QWORD *)(v27 + 104);
    std::mutex::unlock(v28);
    if (v30 != v29)
    {
      sub_2241471F8();
      v31 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        LODWORD(v200.__r_.__value_.__l.__data_) = -1959913775 * ((*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3)
                                                - ((*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 2);
        sub_223CFE13C(v31, (int *)&v200, "allocated octree nodes");
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = __p.__r_.__value_.__l.__size_;
  if (v32 >= 0x11)
  {
    v33 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v34 = v33->__r_.__value_.__r.__words[0];
    v35 = v33->__r_.__value_.__l.__size_;
    v36 = v33->__r_.__value_.__s.__data_[16];
    if (v34 == 0x6365722E64337663 && v35 == 0x73746174532E6E6FLL && v36 == 46)
    {
      v39 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &__p;
      else
        v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v41 = __p.__r_.__value_.__l.__size_;
      LODWORD(v200.__r_.__value_.__l.__data_) = -1959913775 * ((*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3)
                                              - ((*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 2);
      sub_223532E4C(v39, v40, v41, (unsigned int *)&v200, (uint64_t)"allocated octree nodes", 22);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v42 = *((unsigned __int8 *)a2 + 23);
  if ((v42 & 0x80u) == 0)
    v43 = a2;
  else
    v43 = (uint64_t *)*a2;
  if ((v42 & 0x80u) != 0)
    v42 = a2[1];
  *(_QWORD *)&v202[16] = v43;
  *(_QWORD *)&v202[24] = v42;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &v200);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v44 = sub_2241471F8();
    v45 = v44[2];
    if (!v45)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v45 = v44[2];
    }
    v46 = *(_QWORD *)(v45 + 64);
    v47 = (std::mutex *)(v46 + 32);
    std::mutex::lock((std::mutex *)(v46 + 32));
    v49 = *(_QWORD *)(v46 + 96);
    v48 = *(_QWORD *)(v46 + 104);
    std::mutex::unlock(v47);
    if (v49 != v48)
    {
      sub_2241471F8();
      v50 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        LODWORD(v199) = -1057222719 * ((*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3)
                      - ((*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
          strcpy((char *)&__p, "occupied blocks");
          *(_QWORD *)&v201 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v201 + 1) = 2;
          v51 = sub_2241471F8();
          sub_2235352BC((uint64_t)v51, v50, (int *)&v199, (uint64_t)&__p, &v201);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  v52 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = v200.__r_.__value_.__l.__size_;
  if (v52 >= 0x11)
  {
    v53 = &v200;
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::string *)v200.__r_.__value_.__r.__words[0];
    v54 = v53->__r_.__value_.__r.__words[0];
    v55 = v53->__r_.__value_.__l.__size_;
    v56 = v53->__r_.__value_.__s.__data_[16];
    if (v54 == 0x6365722E64337663 && v55 == 0x73746174532E6E6FLL && v56 == 46)
    {
      v59 = sub_223187510();
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v200;
      else
        v60 = (std::string *)v200.__r_.__value_.__r.__words[0];
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
      else
        v61 = v200.__r_.__value_.__l.__size_;
      LODWORD(__p.__r_.__value_.__l.__data_) = -1057222719 * ((*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3)
                                             - ((*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2);
      sub_223532E4C(v59, v60, v61, (unsigned int *)&__p, (uint64_t)"occupied blocks", 15);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v62 = *((unsigned __int8 *)a2 + 23);
  if ((v62 & 0x80u) == 0)
    v63 = a2;
  else
    v63 = (uint64_t *)*a2;
  if ((v62 & 0x80u) != 0)
    v62 = a2[1];
  *(_QWORD *)&v202[16] = v63;
  *(_QWORD *)&v202[24] = v62;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &v200);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v64 = sub_2241471F8();
    v65 = v64[2];
    if (!v65)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v65 = v64[2];
    }
    v66 = *(_QWORD *)(v65 + 64);
    v67 = (std::mutex *)(v66 + 32);
    std::mutex::lock((std::mutex *)(v66 + 32));
    v69 = *(_QWORD *)(v66 + 96);
    v68 = *(_QWORD *)(v66 + 104);
    std::mutex::unlock(v67);
    if (v69 != v68)
    {
      sub_2241471F8();
      v70 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        LODWORD(v199) = *(_DWORD *)(a1 + 2580);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&__p, "free blocks");
          *(_QWORD *)&v201 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v201 + 1) = 2;
          v71 = sub_2241471F8();
          sub_2235352BC((uint64_t)v71, v70, (int *)&v199, (uint64_t)&__p, &v201);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  v72 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = v200.__r_.__value_.__l.__size_;
  if (v72 >= 0x11)
  {
    v73 = &v200;
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v73 = (std::string *)v200.__r_.__value_.__r.__words[0];
    v74 = v73->__r_.__value_.__r.__words[0];
    v75 = v73->__r_.__value_.__l.__size_;
    v76 = v73->__r_.__value_.__s.__data_[16];
    if (v74 == 0x6365722E64337663 && v75 == 0x73746174532E6E6FLL && v76 == 46)
    {
      v79 = sub_223187510();
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v200;
      else
        v80 = (std::string *)v200.__r_.__value_.__r.__words[0];
      if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
      else
        v81 = v200.__r_.__value_.__l.__size_;
      LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 2580);
      sub_223532E4C(v79, v80, v81, (unsigned int *)&__p, (uint64_t)"free blocks", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v82 = *((unsigned __int8 *)a2 + 23);
  if ((v82 & 0x80u) == 0)
    v83 = a2;
  else
    v83 = (uint64_t *)*a2;
  if ((v82 & 0x80u) != 0)
    v82 = a2[1];
  *(_QWORD *)&v202[16] = v83;
  *(_QWORD *)&v202[24] = v82;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v84 = sub_2241471F8();
    v85 = v84[2];
    if (!v85)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v85 = v84[2];
    }
    v86 = *(_QWORD *)(v85 + 64);
    v87 = (std::mutex *)(v86 + 32);
    std::mutex::lock((std::mutex *)(v86 + 32));
    v89 = *(_QWORD *)(v86 + 96);
    v88 = *(_QWORD *)(v86 + 104);
    std::mutex::unlock(v87);
    if (v89 != v88)
    {
      sub_2241471F8();
      v90 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        v200.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2;
        sub_223B843EC((double *)&qword_255788F20, v90, (uint64_t *)&v200, "deallocated blocks");
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v91 = __p.__r_.__value_.__l.__size_;
  if (v91 >= 0x11)
  {
    v92 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v93 = v92->__r_.__value_.__r.__words[0];
    v94 = v92->__r_.__value_.__l.__size_;
    v95 = v92->__r_.__value_.__s.__data_[16];
    if (v93 == 0x6365722E64337663 && v94 == 0x73746174532E6E6FLL && v95 == 46)
    {
      v98 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = &__p;
      else
        v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v100 = __p.__r_.__value_.__l.__size_;
      v200.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 2;
      sub_22318760C((uint64_t *)v98, v99, v100, (uint64_t *)&v200, (uint64_t)"deallocated blocks", 18);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v202 = "cv3d.recon.";
  *(_QWORD *)&v202[8] = 11;
  v101 = *((unsigned __int8 *)a2 + 23);
  if ((v101 & 0x80u) == 0)
    v102 = a2;
  else
    v102 = (uint64_t *)*a2;
  if ((v101 & 0x80u) != 0)
    v101 = a2[1];
  *(_QWORD *)&v202[16] = v102;
  *(_QWORD *)&v202[24] = v101;
  sub_2231A9820((uint64_t)v202, (uint64_t)&v202[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v103 = sub_2241471F8();
    v104 = v103[2];
    if (!v104)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v104 = v103[2];
    }
    v105 = *(_QWORD *)(v104 + 64);
    v106 = (std::mutex *)(v105 + 32);
    std::mutex::lock((std::mutex *)(v105 + 32));
    v108 = *(_QWORD *)(v105 + 96);
    v107 = *(_QWORD *)(v105 + 104);
    std::mutex::unlock(v106);
    if (v108 != v107)
    {
      sub_2241471F8();
      v109 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109))
      {
        memset(v202, 0, 32);
        *(_DWORD *)&v202[32] = 728325608;
        kdebug_trace();
        v200.__r_.__value_.__r.__words[0] = 0xFC0FC0FC0FC0FC1
                                          * ((uint64_t)(*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3);
        sub_223875C34((double *)&qword_255788F20, v109, (uint64_t *)&v200, "allocated blocks");
        kdebug_trace();
      }
    }
  }
  memset(v202, 0, 32);
  *(_DWORD *)&v202[32] = 728325624;
  kdebug_trace();
  v110 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v110 = __p.__r_.__value_.__l.__size_;
  if (v110 >= 0x11)
  {
    v111 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v112 = v111->__r_.__value_.__r.__words[0];
    v113 = v111->__r_.__value_.__l.__size_;
    v114 = v111->__r_.__value_.__s.__data_[16];
    if (v112 == 0x6365722E64337663 && v113 == 0x73746174532E6E6FLL && v114 == 46)
    {
      v117 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v118 = &__p;
      else
        v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v119 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v119 = __p.__r_.__value_.__l.__size_;
      v200.__r_.__value_.__r.__words[0] = 0xFC0FC0FC0FC0FC1
                                        * ((uint64_t)(*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3);
      sub_22318760C((uint64_t *)v117, v118, v119, (uint64_t *)&v200, (uint64_t)"allocated blocks", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v120 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3);
  v121 = *(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480);
  if (v120 - ((unint64_t)v121 >> 2) + (v121 >> 2) != v120)
  {
    sub_223CFA3BC(&v199);
    if (**(int **)(v199 + 56) <= 4)
    {
      v122 = *(unsigned __int8 *)(v199 + 72);
      v123 = sub_22322F254(v199, "OSLogSurrogateAppender", 1, 0);
      v124 = v123;
      if (v122 || v123)
      {
        v188 = v122;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v193 = 4;
        v194 = "unknown file";
        v195 = 980;
        v197 = 0;
        v198 = 0;
        v196 = "unknown function";
        v125 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v126 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        v186 = v126;
        v187 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v126 = *(const char **)(v125 + 16);
          v127 = *(_QWORD *)(v125 + 24);
        }
        else
        {
          v127 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
        }
        v128 = *(_QWORD *)(a1 + 2456);
        v129 = *(_QWORD *)(a1 + 2488);
        v189 = *(_QWORD *)(a1 + 2448);
        v190 = *(_QWORD *)(a1 + 2480);
        v130 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v202);
          sub_223199C58("com.apple.cv3d", (unint64_t)v202, &xmmword_255788F40);
          if (v202[24] && (v202[23] & 0x80000000) != 0)
            operator delete(*(void **)v202);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v131 = (const char *)&xmmword_255788F40;
        else
          v131 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v132 = byte_255788F57;
        else
          v132 = *((_QWORD *)&xmmword_255788F40 + 1);
        __src = v126;
        *(_QWORD *)v202 = os_log_create(v131, v126);
        v133 = &v202[8];
        if (v132 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v132 >= 0x17)
        {
          v134 = v128;
          v135 = v124;
          v136 = v129;
          v137 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v132 | 7) != 0x17)
            v137 = v132 | 7;
          v138 = v137 + 1;
          v133 = operator new(v137 + 1);
          *(_QWORD *)&v202[16] = v132;
          *(_QWORD *)&v202[24] = v138 | 0x8000000000000000;
          *(_QWORD *)&v202[8] = v133;
          v129 = v136;
          v124 = v135;
          v128 = v134;
        }
        else
        {
          v202[31] = v132;
          if (!v132)
          {
LABEL_233:
            v133[v132] = 0;
            v202[32] = 1;
            v139 = v203;
            if (v127 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v127 >= 0x17)
            {
              v140 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v127 | 7) != 0x17)
                v140 = v127 | 7;
              v141 = v140 + 1;
              v139 = (void **)operator new(v140 + 1);
              v203[1] = (void *)v127;
              v204 = v141 | 0x8000000000000000;
              v203[0] = v139;
            }
            else
            {
              HIBYTE(v204) = v127;
              if (!v127)
                goto LABEL_241;
            }
            memmove(v139, __src, v127);
LABEL_241:
            *((_BYTE *)v139 + v127) = 0;
            v205 = 1;
            v142 = *(NSObject **)v202;
            if (SHIBYTE(v204) < 0)
              operator delete(v203[0]);
            if (v202[32] && (v202[31] & 0x80000000) != 0)
              operator delete(*(void **)&v202[8]);
            if (*(_QWORD *)v202)
              os_release(*(void **)v202);
            v143 = v129 - v190;
            v144 = 0xFC0FC0FC0FC0FC1 * ((v128 - v189) >> 3);
            v145 = v144 - ((unint64_t)(v129 - v190) >> 2);
            v146 = v143 >> 2;
            if (v124 && *(_QWORD *)(v124 + 24))
            {
              v147 = _os_log_pack_size();
              v148 = (std::__shared_weak_count_vtbl *)operator new(v147, (std::align_val_t)8uLL);
              v149 = (std::__shared_weak_count *)operator new();
              v150 = v149;
              v149->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v149->__shared_owners_;
              v149->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v149->__shared_weak_owners_ = 0;
              v149[1].__vftable = v148;
              *(_QWORD *)v202 = v148;
              *(_QWORD *)&v202[8] = v148;
              *(_QWORD *)&v202[16] = v149;
              do
                v152 = __ldxr(p_shared_owners);
              while (__stxr(v152 + 1, p_shared_owners));
              *(_QWORD *)&v202[24] = 0;
              *(_QWORD *)&v202[32] = 0;
              v203[0] = 0;
              do
                v153 = __ldaxr(p_shared_owners);
              while (__stlxr(v153 - 1, p_shared_owners));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v150);
              }
              v154 = *(_QWORD *)v202;
              v155 = _os_log_pack_fill();
              *(_DWORD *)v155 = 67109632;
              *(_DWORD *)(v155 + 4) = v145;
              *(_WORD *)(v155 + 8) = 2048;
              *(_QWORD *)(v155 + 10) = v146;
              *(_WORD *)(v155 + 18) = 2048;
              *(_QWORD *)(v155 + 20) = v144;
              v156 = operator new();
              v157 = *(unsigned __int8 *)(v187 + 39);
              v158 = v186;
              if ((v157 & 0x80u) != 0)
              {
                v158 = *(const char **)(v187 + 16);
                v157 = *(_QWORD *)(v187 + 24);
              }
              *(_QWORD *)v156 = v154;
              *(_OWORD *)(v156 + 8) = *(_OWORD *)&v202[8];
              *(_QWORD *)&v202[8] = 0;
              *(_QWORD *)&v202[16] = 0;
              *(_OWORD *)(v156 + 24) = *(_OWORD *)&v202[24];
              *(_QWORD *)&v202[24] = 0;
              *(_QWORD *)&v202[32] = 0;
              *(_QWORD *)(v156 + 40) = v158;
              *(_QWORD *)(v156 + 48) = v157;
              *(_BYTE *)(v156 + 56) = 16;
              *(_QWORD *)&v201 = 0;
              v200.__r_.__value_.__r.__words[0] = v156;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v124 + 24) + 40))(*(_QWORD *)(v124 + 24), &v200);
              v159 = v200.__r_.__value_.__r.__words[0];
              v200.__r_.__value_.__r.__words[0] = 0;
              if (v159)
              {
                v160 = *(std::__shared_weak_count **)(v159 + 32);
                if (v160)
                {
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                v163 = *(std::__shared_weak_count **)(v159 + 16);
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                MEMORY[0x227684CE8](v159, 0x10F0C40B62ED6C6);
                v166 = v201;
                *(_QWORD *)&v201 = 0;
                if (v166)
                {
                  v167 = *(std::__shared_weak_count **)(v166 + 32);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)(v166 + 16);
                  if (v170)
                  {
                    v171 = (unint64_t *)&v170->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  MEMORY[0x227684CE8](v166, 0x10F0C40B62ED6C6);
                }
              }
              v173 = *(std::__shared_weak_count **)&v202[32];
              v174 = v188;
              if (*(_QWORD *)&v202[32])
              {
                v175 = (unint64_t *)(*(_QWORD *)&v202[32] + 8);
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
              v177 = *(std::__shared_weak_count **)&v202[16];
              if (*(_QWORD *)&v202[16])
              {
                v178 = (unint64_t *)(*(_QWORD *)&v202[16] + 8);
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
            }
            else
            {
              os_log_type_enabled(v142, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v202 = 67109632;
              *(_DWORD *)&v202[4] = v145;
              *(_WORD *)&v202[8] = 2048;
              *(_QWORD *)&v202[10] = v146;
              *(_WORD *)&v202[18] = 2048;
              *(_QWORD *)&v202[20] = 0xFC0FC0FC0FC0FC1 * ((v128 - v189) >> 3);
              v180 = (void *)_os_log_send_and_compose_impl();
              v174 = v188;
              if (v180)
                free(v180);
            }
            if (v174)
            {
              v181 = *(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480);
              v185 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(*(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448)) >> 3);
              sub_22322C138((uint64_t)&__p, "Ocp store allocated blocks %i + %lu != %lu", v185 - ((unint64_t)v181 >> 2), v181 >> 2, v185);
              sub_223182C08((uint64_t)&__p);
            }
            sub_223182C08((uint64_t)&__p);
            v182 = v198;
            if (v198)
            {
              v183 = (unint64_t *)&v198->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            return;
          }
        }
        memmove(v133, v131, v132);
        goto LABEL_233;
      }
    }
  }
}

void sub_223CFDEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  if (*(_BYTE *)(v10 - 152))
  {
    if (*(char *)(v10 - 153) < 0)
      operator delete(*(void **)(v10 - 176));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFDEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_22319A054(&a28);
  sub_22319A054(&a31);
  sub_223199DE8(v31 - 176);
  sub_223182DAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_223CFDF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_223199DE8(v10 - 176);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFDF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  MEMORY[0x227684CE8](v10, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFDF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223CFDF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223CFE13C(uint64_t a1, int *a2, const char *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *__dst[2];
  unint64_t v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = strlen(a3);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_10:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        *(_QWORD *)&v12 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
        *((_QWORD *)&v12 + 1) = 2;
        v11 = sub_2241471F8();
        sub_2235352BC((uint64_t)v11, a1, a2, (uint64_t)__dst, &v12);
        if (SHIBYTE(v14) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v8, a3, (size_t)v7);
    goto LABEL_10;
  }
}

void sub_223CFE268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CFE284(uint64_t a1, float32x2_t *a2, _QWORD *a3, int a4, double a5, float32x4_t a6)
{
  BOOL v10;
  int8x16_t v11;
  unsigned int v12;
  uint32x2_t v13;
  unint64_t v14;
  signed __int32 v15;
  signed int v16;
  uint64_t v17;
  int *v18;
  int v19;
  signed __int32 v20;
  signed int v21;
  unsigned int v22;
  BOOL v23;
  signed int v25;
  signed int v26;
  signed __int32 v27;
  _DWORD *v28;
  BOOL v29;
  signed __int32 v31;
  int v32;
  int i;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  float32x2_t *v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x2_t v58;
  unint64_t v59;
  uint64_t *v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v69;
  const char *v70;
  size_t v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  NSObject *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  const char *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _DWORD *v106;
  const char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint32x2_t v113;
  unint64_t v114;
  _QWORD v115[3];
  int v116;
  const char *v117;
  int v118;
  const char *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  void *object;
  void *v124[2];
  unint64_t v125;
  char v126;
  void *__p[2];
  unint64_t v128;
  char v129;
  __int128 v130;
  uint64_t v131;
  char v132;

  v10 = (a2->i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  if ((a2->i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v10 = (a2->i32[1] & 0x7FFFFFFFu) < 0x7F800000;
    if ((a2->i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v10 = (a2[1].i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  }
  if (!v10
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_123;
  }
  *(float32x2_t *)a6.f32 = *a2;
  a6.i32[2] = a2[1].i32[0];
  v11 = (int8x16_t)vmulq_n_f32(a6, *(float *)(a1 + 148));
  v12 = vcvtms_s32_f32(*(float *)v11.i32);
  v13 = (uint32x2_t)vcvt_s32_f32(vrndm_f32((float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 4uLL)));
  v14 = *(unsigned int *)(a1 + 192);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_31;
  v15 = v13.i32[0] & 0xFFFFFFF8;
  v16 = v13.i32[1] & 0xFFFFFFF8;
  v17 = *(_QWORD *)(a1 + 200);
  v18 = (int *)(v17 + 4488 * (v14 & 0xFFFFFFFFCFFFFFFFLL));
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  v22 = (v12 & 0xFFFFFFF8) - *v18;
  v23 = (int)(v12 & 0xFFFFFFF8) < *v18 || v15 < v20;
  if (v23 || v16 < v21)
    goto LABEL_31;
  v25 = v18[3];
  v28 = v18 + 4;
  v27 = v18[4];
  v26 = v28[1];
  v29 = (int)(v12 & 0xFFFFFFF8) < v25 && v15 < v27;
  if (!v29 || v16 >= v26)
    goto LABEL_31;
  v31 = v15 - v20;
  v32 = v16 - v21;
  for (i = v25 - v19; ; v32 -= i & v32)
  {
    i >>= 1;
    v14 = *(unsigned int *)(v17
                          + 4488 * (v14 & 0xCFFFFFFF)
                          + 4 * ((4 * ((i & v22) != 0)) | (2 * ((i & v31) != 0)) | ((i & v32) != 0))
                          + 24);
    if (i == *(_DWORD *)(a1 + 152) || v14 >> 30)
      break;
    v22 -= i & v22;
    v31 -= i & v31;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_31:
    v35 = a1 + 296;
    goto LABEL_32;
  }
  v34 = *(_QWORD *)(a1 + 2344);
  if (v14 >= (*(_QWORD *)(a1 + 2352) - v34) >> 11)
  {
    v113 = v13;
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v34 = *(_QWORD *)(a1 + 2344);
      v13 = v113;
      goto LABEL_30;
    }
LABEL_123:
    abort();
  }
LABEL_30:
  v35 = v34 + (v14 << 11);
LABEL_32:
  v36 = vand_s8((int8x8_t)vshl_u32(v13, (uint32x2_t)0x600000003), (int8x8_t)0x1C000000038);
  v37 = *(_DWORD *)(v35 + 4 * (v36.i32[0] | v12 & 7 | v36.i32[1]));
  if ((v37 & 0x10000000) != 0)
    v38 = 0x40000000;
  else
    v38 = 0x80000000;
  if ((v37 & 0x20000000) != 0)
    v39 = v38;
  else
    v39 = v37 & 0xCFFFFFFF;
  if (v39 >> 30)
    return ~(v39 >> 29) & 2;
  if (!a4)
    return 1;
  v40 = *(_QWORD *)(a1 + 2448);
  v41 = v40 + 520 * v39;
  v42 = *(unsigned int *)(v41 + 508);
  if (!(_DWORD)v42)
    return 1;
  v43 = 0;
  v44 = v40 + 520 * v39;
  v45 = v44 + 364;
  v46 = v44 + 340;
  v110 = v44 + 364;
  v106 = (_DWORD *)(v41 + 508);
  v109 = a3;
  v111 = v44 + 340;
  do
  {
    v59 = *(unsigned __int16 *)(v46 + 2 * v43);
    v60 = sub_2239942A0(a3, (int *)(v45 + 12 * v43));
    if (!v60)
      goto LABEL_43;
    v65 = v60[18];
    if (0xAAAAAAAAAAAAAAABLL * ((v60[19] - v65) >> 2) <= v59)
    {
      sub_223CF9954(&v122);
      if (**(int **)(v122 + 56) > 5)
        goto LABEL_43;
      v66 = *(unsigned __int8 *)(v122 + 72);
      v67 = sub_22322F254(v122, "OSLogSurrogateAppender", 1, 0);
      v114 = v67;
      if (!v66 && v67 == 0)
        goto LABEL_43;
      v115[0] = &v122;
      v115[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v115[2] = std::chrono::system_clock::now().__d_.__rep_;
      v116 = 5;
      v117 = "unknown file";
      v118 = 1041;
      v119 = "unknown function";
      v120 = 0;
      v121 = 0;
      v69 = *(_QWORD *)v115[0];
      v70 = (const char *)(*(_QWORD *)v115[0] + 16);
      v107 = v70;
      if (*(char *)(*(_QWORD *)v115[0] + 39) < 0)
      {
        v70 = *(const char **)(v69 + 16);
        v71 = *(_QWORD *)(v69 + 24);
        v108 = *(_QWORD *)v115[0];
        v112 = v66;
        v73 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v73 & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v71 = *(unsigned __int8 *)(*(_QWORD *)v115[0] + 39);
        v108 = *(_QWORD *)v115[0];
        v112 = v66;
        v72 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v72 & 1) != 0)
          goto LABEL_55;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v130);
        if (v132)
        {
          *(_OWORD *)byte_255788F40 = v130;
          *(_QWORD *)&byte_255788F40[16] = v131;
        }
        else
        {
          byte_255788F40[23] = 14;
          strcpy(byte_255788F40, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_55:
      if (byte_255788F40[23] >= 0)
        v74 = byte_255788F40;
      else
        v74 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v75 = byte_255788F40[23];
      else
        v75 = *(_QWORD *)&byte_255788F40[8];
      object = os_log_create(v74, v70);
      if (v75 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v75 >= 0x17)
      {
        v77 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v75 | 7) != 0x17)
          v77 = v75 | 7;
        v78 = v77 + 1;
        v76 = operator new(v77 + 1);
        v124[1] = (void *)v75;
        v125 = v78 | 0x8000000000000000;
        v124[0] = v76;
      }
      else
      {
        HIBYTE(v125) = v75;
        v76 = v124;
        if (!v75)
        {
LABEL_69:
          *((_BYTE *)v76 + v75) = 0;
          v126 = 1;
          if (v71 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v71 >= 0x17)
          {
            v82 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v71 | 7) != 0x17)
              v82 = v71 | 7;
            v83 = v82 + 1;
            v79 = operator new(v82 + 1);
            __p[1] = (void *)v71;
            v128 = v83 | 0x8000000000000000;
            __p[0] = v79;
            v45 = v110;
          }
          else
          {
            HIBYTE(v128) = v71;
            v79 = __p;
            v45 = v110;
            if (!v71)
            {
              LOBYTE(__p[0]) = 0;
              v129 = 1;
              v80 = object;
              if ((SHIBYTE(v128) & 0x80000000) == 0)
                goto LABEL_73;
              goto LABEL_79;
            }
          }
          memmove(v79, v70, v71);
          *((_BYTE *)v79 + v71) = 0;
          v129 = 1;
          v80 = object;
          if ((SHIBYTE(v128) & 0x80000000) == 0)
          {
LABEL_73:
            v46 = v111;
            v81 = v114;
            if (!v126)
              goto LABEL_82;
            goto LABEL_80;
          }
LABEL_79:
          operator delete(__p[0]);
          v46 = v111;
          v81 = v114;
          if (!v126)
          {
LABEL_82:
            if (object)
              os_release(object);
            if (v81 && *(_QWORD *)(v81 + 24))
            {
              v84 = _os_log_pack_size();
              v85 = (std::__shared_weak_count_vtbl *)operator new(v84, (std::align_val_t)8uLL);
              v86 = (std::__shared_weak_count *)operator new();
              v87 = v86;
              v86->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v86->__shared_owners_;
              v86->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v86->__shared_weak_owners_ = 0;
              v86[1].__vftable = v85;
              do
                v89 = __ldxr(p_shared_owners);
              while (__stxr(v89 + 1, p_shared_owners));
              do
                v90 = __ldaxr(p_shared_owners);
              while (__stlxr(v90 - 1, p_shared_owners));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v87);
              }
              *(_WORD *)_os_log_pack_fill() = 0;
              v91 = (_QWORD *)operator new();
              v92 = *(unsigned __int8 *)(v108 + 39);
              v93 = v107;
              if ((v92 & 0x80u) != 0)
              {
                v93 = *(const char **)(v108 + 16);
                v92 = *(_QWORD *)(v108 + 24);
              }
              *v91 = v85;
              v91[1] = v85;
              v91[2] = v87;
              v91[3] = 0;
              v91[4] = 0;
              v91[5] = v93;
              v91[6] = v92;
              *((_BYTE *)v91 + 56) = 16;
              object = v91;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v114 + 24) + 40))(*(_QWORD *)(v114 + 24), &object);
              v94 = object;
              object = 0;
              v46 = v111;
              if (v94)
              {
                v95 = (std::__shared_weak_count *)*((_QWORD *)v94 + 4);
                if (v95)
                {
                  v96 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
                v98 = (std::__shared_weak_count *)*((_QWORD *)v94 + 2);
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                MEMORY[0x227684CE8](v94, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v101 = (void *)_os_log_send_and_compose_impl();
              if (v101)
                free(v101);
            }
            a3 = v109;
            if (v112)
            {
              sub_22322C138((uint64_t)v115, "PointCloudBlock is referencing a face with an out of bounds index");
              sub_223182C08((uint64_t)v115);
            }
            sub_223182C08((uint64_t)v115);
            v102 = v121;
            if (v121)
            {
              v103 = (unint64_t *)&v121->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            goto LABEL_43;
          }
LABEL_80:
          if (SHIBYTE(v125) < 0)
            operator delete(v124[0]);
          goto LABEL_82;
        }
      }
      memmove(v76, v74, v75);
      goto LABEL_69;
    }
    v47 = (unsigned int *)(v65 + 12 * v59);
    v48 = v60[4];
    v49 = (float32x2_t *)(v48 + 12 * *v47);
    v50 = v48 + 12 * v47[1];
    v61.i64[0] = *(_QWORD *)v50;
    v61.i32[2] = *(_DWORD *)(v50 + 8);
    v62.i32[0] = v49[1].i32[0];
    *(float32x2_t *)v63.f32 = *v49;
    v51 = v63;
    v51.i32[2] = v62.i32[0];
    v52 = v48 + 12 * v47[2];
    v53 = (int8x16_t)vsubq_f32(v61, v51);
    v64.i64[0] = *(_QWORD *)v52;
    v64.i32[2] = *(_DWORD *)(v52 + 8);
    v54 = (int8x16_t)vsubq_f32(v64, v51);
    v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), v54, 0xCuLL);
    v56 = (float32x4_t)vextq_s8(vextq_s8(v54, v54, 0xCuLL), v54, 8uLL);
    v57 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v53, v53, 0xCuLL), v53, 8uLL), v55), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL), v56);
    *(int32x2_t *)v51.f32 = vdup_lane_s32(*(int32x2_t *)v57.i8, 1);
    v58 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
    v56.i32[0] = a2[1].i32[0];
    if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*a2, *(float32x2_t *)v57.i8), *(float32x2_t *)v51.f32, *a2, 1), v58, *(float32x2_t *)v56.f32), vmla_f32(vmla_lane_f32(vmul_f32(*v49, *(float32x2_t *)v57.i8), *(float32x2_t *)v51.f32, *v49, 1), v58, v62)).f32[0] <= 0.0)return 1;
LABEL_43:
    ++v43;
  }
  while (v43 != v42);
  return !*v106;
}

void sub_223CFEC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a23);
  v41 = a31;
  if (a31)
  {
    p_shared_owners = (unint64_t *)&a31->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223CFEDD4(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  float v9;
  int v10;
  int *v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  BOOL v26;
  int v28;
  unsigned __int8 v30;
  char v31;
  _QWORD v32[2];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD v35[2];
  _QWORD v36[2];
  char v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v30 = 0;
  v8 = *(unsigned int *)(a1 + 192);
  if ((v8 & 0x80000000) != 0)
    return 2;
  v9 = *(float *)(a2 + 12);
  LODWORD(a4) = *(_DWORD *)a2;
  v10 = (int)(float)(*(float *)a2 - v9);
  v11 = (int *)(*(_QWORD *)(a1 + 200) + 4488 * (v8 & 0xFFFFFFFFCFFFFFFFLL));
  v12 = *v11;
  if (*v11 > v10)
    return 2;
  v13 = *(float *)(a2 + 4);
  v14 = (int)(float)(v13 - v9);
  v15 = v11[1];
  if (v15 > v14)
    return 2;
  a6.i32[0] = *(_DWORD *)(a2 + 8);
  v16 = v11[2];
  if (v16 > (int)a6.f32[0])
    return 2;
  v17 = v11[3];
  v18 = v11[4];
  if (v17 <= v10 || v18 <= v14)
    return 2;
  v20 = v11[5];
  if (v20 <= (int)a6.f32[0])
    return 2;
  LODWORD(a7) = *(_DWORD *)(a2 + 16);
  a5.f32[0] = v9 + v13;
  v21 = (int)(float)(v9 + *(float *)&a4);
  v22 = (int)a5.f32[0];
  v23 = (int)(float)(*(float *)&a7 + a6.f32[0]);
  v24 = v12 <= v21 && v15 <= v22;
  if (!v24 || v16 > v23)
    return 2;
  v26 = v17 <= v21 || v18 <= v22;
  if (v26 || v20 <= v23)
    return 2;
  v32[0] = &v30;
  v32[1] = &v31;
  v33 = v32;
  v34[0] = a1 + 16;
  v36[0] = a1;
  v36[1] = a2;
  v35[0] = a1 + 16;
  v35[1] = &v33;
  v34[1] = v35;
  v34[2] = v36;
  v38[0] = a1;
  v38[1] = a2;
  v37 = 1;
  v28 = *(_DWORD *)(a1 + 196);
  v39[0] = v38;
  v39[1] = v34;
  v39[2] = &v37;
  *(float *)&a3 = *(float *)&a7 + a6.f32[0];
  sub_223D4F77C(a1 + 16, v28, v8, 0, (uint64_t)v39, a3, a4, a5, a6, a7, a8);
  return v30;
}

uint64_t sub_223CFEF24(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, double a5, double a6, float32x4_t a7)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;
  float32x4_t v21;
  int v22;
  BOOL v23;
  BOOL v25;
  int v27;
  unsigned __int8 v29;
  char v30;
  int v31;
  _QWORD v32[2];
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[2];
  char v38;
  _QWORD v39[3];

  v29 = 0;
  v7 = *(unsigned int *)(a1 + 192);
  if ((v7 & 0x80000000) != 0)
    return 2;
  a4.i64[0] = *(_QWORD *)a2;
  a4.i32[2] = *(_DWORD *)(a2 + 8);
  v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v9 = vsubq_f32(a4, v8);
  v10 = (int)v9.f32[0];
  v11 = (int *)(*(_QWORD *)(a1 + 200) + 4488 * (v7 & 0xFFFFFFFFCFFFFFFFLL));
  v12 = *v11;
  if (*v11 > (int)v9.f32[0])
    return 2;
  a7.i32[0] = v9.i32[1];
  v13 = v11[1];
  if (v13 > (int)v9.f32[1])
    return 2;
  v9.i32[0] = v9.i32[2];
  v14 = v11[2];
  if (v14 > (int)v9.f32[2])
    return 2;
  v15 = v11[3];
  v16 = v11[4];
  if (v15 <= v10 || v16 <= (int)v9.f32[1])
    return 2;
  v18 = v11[5];
  if (v18 <= (int)v9.f32[2])
    return 2;
  v21 = vaddq_f32(v8, a4);
  v19 = (int)v21.f32[0];
  v8.i32[0] = v21.i32[1];
  v20 = (int)v21.f32[1];
  v21.i32[0] = v21.i32[2];
  v22 = (int)v21.f32[2];
  v23 = v12 <= v19 && v13 <= v20;
  if (!v23 || v14 > v22)
    return 2;
  v25 = v15 <= v19 || v16 <= v20;
  if (v25 || v18 <= v22)
    return 2;
  v32[0] = &v29;
  v32[1] = &v30;
  v31 = LODWORD(a3);
  v34 = v32;
  v35[0] = a1 + 16;
  v33[0] = a1;
  v33[1] = a2;
  v33[2] = &v31;
  v37[0] = a1 + 16;
  v37[1] = &v34;
  v36[0] = a1;
  v36[1] = a2;
  v36[2] = &v31;
  v35[1] = v37;
  v35[2] = v33;
  v38 = 1;
  v27 = *(_DWORD *)(a1 + 196);
  v39[0] = v36;
  v39[1] = v35;
  v39[2] = &v38;
  sub_223D5864C(a1 + 16, v27, v7, 0, (uint64_t)v39, a3, *(double *)v21.i64, *(double *)v8.i64, v9, a7);
  return v29;
}

uint64_t sub_223CFF088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float32x4_t a6)
{
  int v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t result;
  double v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  double v28;
  float32x4_t v29;
  int v30;
  int v31;
  _QWORD v32[3];
  float v33;
  int8x16_t v34;
  float v35;
  _QWORD *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD v39[2];
  _QWORD v40[2];
  char v41;
  _QWORD v42[2];
  __int128 v43;
  char *v44;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)&v43 = *(_QWORD *)a2;
  DWORD2(v43) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)&v37 = *(_QWORD *)a2;
  DWORD2(v37) = *(_DWORD *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a2 + 20);
  v11 = *(float *)(a2 + 12);
  *((float *)&v37 + *(unsigned __int8 *)(a2 + 20)) = *(float *)(a2 + 16)
                                                   + *((float *)&v37 + *(unsigned __int8 *)(a2 + 20));
  v12 = v10 + 1 - 3 * ((1431655766 * (unint64_t)(v10 + 1)) >> 32);
  if (v12 == 2)
    v13 = 0;
  else
    v13 = v12 + 1;
  v14 = 4 * v12;
  *(float *)((char *)&v43 + v14) = *(float *)((char *)&v43 + v14) - v11;
  v15 = 4 * v13;
  *(float *)((char *)&v43 + v15) = *(float *)((char *)&v43 + v15) - v11;
  *(float *)((char *)&v37 + v14) = v11 + *(float *)((char *)&v37 + v14);
  *(float *)((char *)&v37 + v15) = v11 + *(float *)((char *)&v37 + v15);
  a6.i32[0] = v43;
  if (*(float *)&v37 >= *(float *)&v43)
    v16 = *(float *)&v43;
  else
    v16 = *(float *)&v37;
  v17.i64[0] = *(_QWORD *)((char *)&v37 + 4);
  v18 = *((float *)&v43 + 2);
  if (*((float *)&v43 + 2) < *((float *)&v37 + 2))
    v18 = *((float *)&v37 + 2);
  v33 = v16;
  v19.i64[0] = *(_QWORD *)((char *)&v43 + 4);
  v19.i64[1] = v37;
  v20.i64[0] = *(_QWORD *)((char *)&v37 + 4);
  v20.i64[1] = v37;
  v17.i64[1] = v43;
  v21 = (int8x16_t)vcgtq_f32(v19, v17);
  v19.i64[0] = *(_QWORD *)((char *)&v43 + 4);
  v19.i64[1] = v43;
  v34 = vbslq_s8(v21, v20, (int8x16_t)v19);
  v35 = v18;
  v22 = a1 + 16;
  result = sub_223E977E8(a1 + 16, (uint64_t)&v33, (uint64_t)&v34.i64[1], *(double *)v34.i64, a6, *(double *)((char *)&v43 + 4), v17);
  v32[0] = a1;
  v32[1] = a4;
  v32[2] = a3;
  v36 = v32;
  *(_QWORD *)&v37 = v22;
  v40[0] = a1;
  v40[1] = a2;
  v39[0] = v22;
  v39[1] = &v36;
  *((_QWORD *)&v37 + 1) = v39;
  v38 = v40;
  v42[0] = a1;
  v42[1] = a2;
  v41 = 1;
  v30 = *(_DWORD *)(a1 + 192);
  if ((v30 & 0x80000000) == 0)
  {
    v31 = *(_DWORD *)(a1 + 196);
    *(_QWORD *)&v43 = v42;
    *((_QWORD *)&v43 + 1) = &v37;
    v44 = &v41;
    return sub_223D5A284(v22, v31, v30, 0, &v43, v24, v25, v26, v27, v28, v29);
  }
  return result;
}

void sub_223CFF258(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, float *a5, float *a6, _BYTE *a7, _BYTE *a8, double a9, float32x4_t a10, float32x4_t a11, double a12, float32x4_t a13, float32x2_t a14, float32x4_t a15, float32x2_t a16, _BYTE *a17, uint64_t a18, char a19)
{
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  float v29;
  unsigned __int32 *v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  _QWORD v49[8];
  _OWORD v50[3];
  int v51;
  _OWORD v52[3];
  int v53;
  _OWORD v54[3];
  int v55;
  uint64_t v56;
  __int32 v57;
  unsigned __int32 v58;
  float v59;
  char v60;
  float v61;
  uint64_t v62;
  int v63;
  _DWORD v64[101];
  uint64_t v65;
  int v66;
  _DWORD v67[101];
  _QWORD v68[3];
  char v69;
  _QWORD v70[3];
  _QWORD v71[2];
  _QWORD v72[2];
  char v73;
  _QWORD v74[2];
  void *v75[2];
  char *v76;

  *a7 = -1;
  *a8 = -1;
  v65 = 12345;
  v66 = 0;
  v62 = 12345;
  v63 = 0;
  a14.i32[0] = a2[1].i32[0];
  *(float32x2_t *)a15.f32 = *a2;
  v24 = a15;
  v24.i32[2] = a14.i32[0];
  a16.i32[0] = a3[1].i32[0];
  *(float32x2_t *)a13.f32 = *a3;
  a13.i32[2] = a16.i32[0];
  LODWORD(v61) = vmla_f32(vmla_lane_f32(vmul_f32(*a2, *a3), (float32x2_t)vdup_lane_s32((int32x2_t)*a3, 1), *a2, 1), a16, a14).u32[0];
  v25 = vmlsq_lane_f32(v24, a13, *(float32x2_t *)&a9, 0);
  v26 = vabsq_f32(a13);
  v27 = v26.f32[1];
  v28 = v26.f32[1] > v26.f32[0];
  if (v26.f32[1] <= v26.f32[0])
    v27 = v26.f32[0];
  v26.i32[0] = v26.i32[2];
  if (v27 < v26.f32[2])
    v28 = 2;
  if (v28)
  {
    if (v28 == 1)
    {
      a13.i32[0] = a13.i32[1];
      v57 = v25.i32[2];
      v29 = *(float *)&a9 + a10.f32[0];
      v56 = v25.i64[0];
      v58 = a11.i32[0];
      v59 = v29;
      LODWORD(v28) = 1;
      if (a13.f32[1] >= 0.0)
        goto LABEL_12;
LABEL_10:
      v60 = v28;
      v30 = (unsigned __int32 *)((unint64_t)&v56 | (4 * v28));
      a10.i32[0] = *v30;
      *(float *)v30 = *(float *)v30 - v29;
      goto LABEL_13;
    }
    a13.i32[0] = a3->i32[v28];
    v57 = v25.i32[2];
    v29 = *(float *)&a9 + a10.f32[0];
    v56 = v25.i64[0];
    v58 = a11.i32[0];
    v59 = v29;
    LODWORD(v28) = 2;
    if (a13.f32[0] < 0.0)
      goto LABEL_10;
  }
  else
  {
    v29 = *(float *)&a9 + a10.f32[0];
    v57 = v25.i32[2];
    v56 = v25.i64[0];
    v58 = a11.i32[0];
    v59 = v29;
    if (a13.f32[0] < 0.0)
      goto LABEL_10;
  }
LABEL_12:
  v60 = v28;
LABEL_13:
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v49[0] = a3;
  v49[1] = a2;
  v49[2] = &v61;
  v49[3] = &v65;
  v49[4] = v54;
  v49[5] = &v62;
  v49[6] = v52;
  v49[7] = v50;
  v68[0] = &v69;
  v68[1] = a1;
  v68[2] = v49;
  v72[0] = a1;
  v72[1] = &v56;
  v71[0] = a1 + 16;
  v71[1] = v68;
  v70[0] = a1 + 16;
  v70[1] = v71;
  v70[2] = v72;
  v74[0] = a1;
  v74[1] = &v56;
  v73 = 1;
  v31 = *(_DWORD *)(a1 + 192);
  if (v31 < 0)
  {
    v33 = 0;
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 196);
    v75[0] = v74;
    v75[1] = v70;
    v76 = &v73;
    sub_223D84F84(a1 + 16, v32, v31, 0, v75, 0.0, a10, a11, v25, *(double *)a13.i64, v26);
    v33 = HIDWORD(v65);
  }
  *a17 = sub_223CFF6E0((unsigned __int16 *)v50);
  v34 = 126 - 2 * __clz(v33);
  if (v33)
    v35 = v34;
  else
    v35 = 0;
  sub_223D879D0((uint64_t)v67, (float *)&v67[v33], v35, 1);
  v36 = HIDWORD(v65);
  v37 = 9 * HIDWORD(v65) / 0xAu;
  v38 = HIDWORD(v65) / 0xA;
  v39 = v61;
  v40 = v61 + -1.5;
  *a4 = v61 + -1.5;
  *a5 = v40;
  if (v37 < v36)
  {
    v41 = v39 + -0.1;
    if (*(float *)&v67[v37] < (float)(v39 + -0.1))
      v41 = *(float *)&v67[v37];
    *a4 = v41;
    *a7 = sub_223CFF6E0((unsigned __int16 *)v54);
  }
  if (v38 < v36)
  {
    v42 = v39 + -0.1;
    if (*(float *)&v67[v38] < (float)(v39 + -0.1))
      v42 = *(float *)&v67[v38];
    *a5 = v42;
  }
  v43 = 126 - 2 * __clz(HIDWORD(v62));
  if (HIDWORD(v62))
    v44 = v43;
  else
    v44 = 0;
  sub_223D88808((uint64_t)v64, (float *)&v64[HIDWORD(v62)], v44, 1);
  v45 = HIDWORD(v62);
  v46 = HIDWORD(v62) / 0xA;
  v47 = v61;
  *a6 = v61 + 1.5;
  if (v46 < v45)
  {
    v48 = v47 + 0.5;
    if ((float)(v47 + 0.5) < *(float *)&v64[v46])
      v48 = *(float *)&v64[v46];
    *a6 = v48;
    *a8 = sub_223CFF6E0((unsigned __int16 *)v52);
  }
  HIBYTE(v76) = 5;
  strcpy((char *)v75, "Floor");
  sub_223CFF9B8(a18, a19, (uint64_t *)v75, (uint64_t)&v65, *a4, v47, v47 + -1.5, v47 + -0.1);
  if (SHIBYTE(v76) < 0)
    operator delete(v75[0]);
  HIBYTE(v76) = 7;
  strcpy((char *)v75, "Ceiling");
  sub_223CFF9B8(a18, a19, (uint64_t *)v75, (uint64_t)&v62, *a6, v61, v61 + 1.5, v61 + 0.5);
  if (SHIBYTE(v76) < 0)
    operator delete(v75[0]);
}

void sub_223CFF6C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t sub_223CFF6E0(unsigned __int16 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  unsigned int v57;

  v1 = *a1;
  v2 = (_DWORD)a1 + 2;
  v3 = a1[1];
  v4 = v1 >= v3;
  v5 = v1 < v3;
  if (v1 <= v3)
    v1 = a1[1];
  v6 = a1[2];
  v7 = 2 * v5;
  if (v4)
    v2 = (int)a1;
  v8 = v1 >= v6;
  if (v1 <= v6)
    v1 = a1[2];
  if (!v8)
    v7 = 4;
  v9 = a1[3];
  if (!v8)
    v2 = (_DWORD)a1 + 4;
  v10 = v1 >= v9;
  if (v1 <= v9)
    v1 = a1[3];
  v11 = 6;
  if (v10)
    v11 = v7;
  v12 = a1[4];
  if (!v10)
    v2 = (_DWORD)a1 + 6;
  v13 = v1 >= v12;
  if (v1 <= v12)
    v1 = a1[4];
  v14 = a1[5];
  if (!v13)
  {
    v11 = 8;
    v2 = (_DWORD)a1 + 8;
  }
  v15 = v1 >= v14;
  if (v1 <= v14)
    v1 = a1[5];
  if (!v15)
    v11 = 10;
  v16 = a1[6];
  if (!v15)
    v2 = (_DWORD)a1 + 10;
  v17 = v1 >= v16;
  if (v1 <= v16)
    v1 = a1[6];
  if (!v17)
    v11 = 12;
  v18 = a1[7];
  if (!v17)
    v2 = (_DWORD)a1 + 12;
  v19 = v1 >= v18;
  if (v1 <= v18)
    v1 = a1[7];
  v20 = a1[8];
  if (!v19)
  {
    v11 = 14;
    v2 = (_DWORD)a1 + 14;
  }
  v21 = v1 >= v20;
  if (v1 <= v20)
    v1 = a1[8];
  if (!v21)
    v11 = 16;
  v22 = a1[9];
  if (!v21)
    v2 = (_DWORD)a1 + 16;
  v23 = v1 >= v22;
  if (v1 <= v22)
    v1 = a1[9];
  if (!v23)
    v11 = 18;
  v24 = a1[10];
  if (!v23)
    v2 = (_DWORD)a1 + 18;
  v25 = v1 >= v24;
  if (v1 <= v24)
    v1 = a1[10];
  v26 = a1[11];
  if (!v25)
  {
    v11 = 20;
    v2 = (_DWORD)a1 + 20;
  }
  v27 = v1 >= v26;
  if (v1 <= v26)
    v1 = a1[11];
  if (!v27)
    v11 = 22;
  v28 = a1[12];
  if (!v27)
    v2 = (_DWORD)a1 + 22;
  v29 = v1 >= v28;
  if (v1 <= v28)
    v1 = a1[12];
  if (!v29)
    v11 = 24;
  v30 = a1[13];
  if (!v29)
    v2 = (_DWORD)a1 + 24;
  v31 = v1 >= v30;
  if (v1 <= v30)
    v1 = a1[13];
  v32 = a1[14];
  if (!v31)
  {
    v11 = 26;
    v2 = (_DWORD)a1 + 26;
  }
  v33 = v1 >= v32;
  if (v1 <= v32)
    v1 = a1[14];
  if (!v33)
    v11 = 28;
  v34 = a1[15];
  if (!v33)
    v2 = (_DWORD)a1 + 28;
  v35 = v1 >= v34;
  if (v1 <= v34)
    v1 = a1[15];
  if (!v35)
    v11 = 30;
  v36 = a1[16];
  if (!v35)
    v2 = (_DWORD)a1 + 30;
  v37 = v1 >= v36;
  if (v1 <= v36)
    v1 = a1[16];
  v38 = a1[17];
  if (!v37)
  {
    v11 = 32;
    v2 = (_DWORD)a1 + 32;
  }
  v39 = v1 >= v38;
  if (v1 <= v38)
    v1 = a1[17];
  if (!v39)
    v11 = 34;
  v40 = a1[18];
  if (!v39)
    v2 = (_DWORD)a1 + 34;
  v41 = v1 >= v40;
  if (v1 <= v40)
    v1 = a1[18];
  if (!v41)
    v11 = 36;
  v42 = a1[19];
  if (!v41)
    v2 = (_DWORD)a1 + 36;
  v43 = v1 >= v42;
  if (v1 <= v42)
    v1 = a1[19];
  v44 = a1[20];
  if (!v43)
  {
    v11 = 38;
    v2 = (_DWORD)a1 + 38;
  }
  v45 = v1 >= v44;
  if (v1 <= v44)
    v1 = a1[20];
  if (!v45)
    v11 = 40;
  v46 = a1[21];
  if (!v45)
    v2 = (_DWORD)a1 + 40;
  v47 = v1 >= v46;
  if (v1 <= v46)
    v1 = a1[21];
  if (!v47)
    v11 = 42;
  v48 = a1[22];
  if (!v47)
    v2 = (_DWORD)a1 + 42;
  v49 = v1 >= v48;
  if (v1 <= v48)
    v1 = a1[22];
  v50 = a1[23];
  if (!v49)
  {
    v11 = 44;
    v2 = (_DWORD)a1 + 44;
  }
  v51 = v1 >= v50;
  if (v1 <= v50)
    v1 = a1[23];
  if (!v51)
    v11 = 46;
  v52 = a1[24];
  if (!v51)
    v2 = (_DWORD)a1 + 46;
  v53 = v1 >= v52;
  if (v1 <= v52)
    v1 = a1[24];
  if (!v53)
  {
    v11 = 48;
    v2 = (_DWORD)a1 + 48;
  }
  v54 = v1 >= a1[25];
  v55 = 50;
  if (v54)
    v55 = v11;
  v56 = *(unsigned __int16 *)((char *)a1 + v55);
  if (!v54)
    v2 = (_DWORD)a1 + 50;
  v57 = (v2 - (_DWORD)a1) >> 1;
  if (v56)
    return v57;
  else
    return -1;
}

void sub_223CFF9B8(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t *v10;
  std::string::size_type size;
  std::string *v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::mutex *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  __n128 *v29;
  std::string *v30;
  size_t v31;
  uint64_t *v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::mutex *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  int v47;
  __n128 *v50;
  std::string *v51;
  size_t v52;
  std::string::size_type v53;
  std::string *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::mutex *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int v67;
  __n128 *v70;
  std::string *v71;
  size_t v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  std::mutex *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  __n128 *v90;
  std::string *v91;
  size_t v92;
  std::string::size_type v93;
  std::string *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::mutex *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  int v107;
  __n128 *v110;
  std::string *v111;
  size_t v112;
  unsigned int v113;
  std::string::size_type v114;
  std::string *v115;
  unsigned int v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  std::mutex *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t *v126;
  std::string::size_type v127;
  std::string *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  int v131;
  BOOL v132;
  __n128 *v134;
  std::string *v135;
  size_t v136;
  unsigned int v137;
  unsigned int v138;
  std::string *p_p;
  std::string::size_type v140;
  uint64_t v141;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  float v147;
  float v148;
  float v149;
  float v150;
  __int128 v151;
  std::string __p;
  __int128 v153;
  __int128 v154;
  int v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  v149 = a6;
  v150 = a5;
  v147 = a8;
  v148 = a7;
  if (!a2)
    return;
  if (*((char *)a3 + 23) >= 0)
    v10 = a3;
  else
    v10 = (uint64_t *)*a3;
  sub_22456D250("Stats.PRR.FloorAndCeilingEstimation.%s.Samples", &v146, v10);
  *(_QWORD *)&v153 = "cv3d.recon.";
  *((_QWORD *)&v153 + 1) = 11;
  size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v146;
  else
    v12 = (std::string *)v146.__r_.__value_.__r.__words[0];
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v146.__r_.__value_.__l.__size_;
  *(_QWORD *)&v154 = v12;
  *((_QWORD *)&v154 + 1) = size;
  sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v145);
  sub_224569D7C();
  sub_224569A80();
  v13 = (double)a1 / 1000000000.0;
  if (os_variant_has_internal_diagnostics())
  {
    v14 = sub_2241471F8();
    v15 = v14[2];
    if (!v15)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v14[2];
    }
    v16 = *(_QWORD *)(v15 + 64);
    v17 = (std::mutex *)(v16 + 32);
    std::mutex::lock((std::mutex *)(v16 + 32));
    v19 = *(_QWORD *)(v16 + 96);
    v18 = *(_QWORD *)(v16 + 104);
    std::mutex::unlock(v17);
    if (v19 != v18)
    {
      sub_2241471F8();
      v20 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20))
      {
        v153 = 0u;
        v154 = 0u;
        v155 = 728325608;
        kdebug_trace();
        LODWORD(v143.__r_.__value_.__l.__data_) = *(_DWORD *)(a4 + 8);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "Samples");
          v144.__r_.__value_.__r.__words[0] = (uint64_t)(v13 * 1000000000.0);
          v144.__r_.__value_.__l.__size_ = 2;
          v21 = sub_2241471F8();
          sub_2235352BC((uint64_t)v21, v20, (int *)&v143, (uint64_t)&__p, (__int128 *)&v144);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v153 = 0u;
  v154 = 0u;
  v155 = 728325624;
  kdebug_trace();
  v22 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = v145.__r_.__value_.__l.__size_;
  if (v22 >= 0x11)
  {
    v23 = &v145;
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)v145.__r_.__value_.__r.__words[0];
    v24 = v23->__r_.__value_.__r.__words[0];
    v25 = v23->__r_.__value_.__l.__size_;
    v26 = v23->__r_.__value_.__s.__data_[16];
    if (v24 == 0x6365722E64337663 && v25 == 0x73746174532E6E6FLL && v26 == 46)
    {
      v29 = sub_223187510();
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v145;
      else
        v30 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      else
        v31 = v145.__r_.__value_.__l.__size_;
      LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(a4 + 8);
      sub_223532E4C(v29, v30, v31, (unsigned int *)&__p, (uint64_t)"Samples", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (*((char *)a3 + 23) >= 0)
    v32 = a3;
  else
    v32 = (uint64_t *)*a3;
  sub_22456D250("Stats.PRR.FloorAndCeilingEstimation.%s.Height", &v145, v32);
  *(_QWORD *)&v153 = "cv3d.recon.";
  *((_QWORD *)&v153 + 1) = 11;
  v33 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v145;
  else
    v34 = (std::string *)v145.__r_.__value_.__r.__words[0];
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v145.__r_.__value_.__l.__size_;
  *(_QWORD *)&v154 = v34;
  *((_QWORD *)&v154 + 1) = v33;
  sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v144);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v35 = sub_2241471F8();
    v36 = v35[2];
    if (!v36)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36 = v35[2];
    }
    v37 = *(_QWORD *)(v36 + 64);
    v38 = (std::mutex *)(v37 + 32);
    std::mutex::lock((std::mutex *)(v37 + 32));
    v40 = *(_QWORD *)(v37 + 96);
    v39 = *(_QWORD *)(v37 + 104);
    std::mutex::unlock(v38);
    if (v40 != v39)
    {
      sub_2241471F8();
      v41 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41))
      {
        v153 = 0u;
        v154 = 0u;
        v155 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
          strcpy((char *)&__p, "Estimated height");
          v143.__r_.__value_.__r.__words[0] = (uint64_t)(v13 * 1000000000.0);
          v143.__r_.__value_.__l.__size_ = 2;
          v42 = sub_2241471F8();
          sub_2231AF940((uint64_t)v42, v41, &v150, (uint64_t)&__p, (__int128 *)&v143);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v153 = 0u;
  v154 = 0u;
  v155 = 728325624;
  kdebug_trace();
  v43 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = v144.__r_.__value_.__l.__size_;
  if (v43 >= 0x11)
  {
    v44 = &v144;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v45 = v44->__r_.__value_.__r.__words[0];
    v46 = v44->__r_.__value_.__l.__size_;
    v47 = v44->__r_.__value_.__s.__data_[16];
    if (v45 == 0x6365722E64337663 && v46 == 0x73746174532E6E6FLL && v47 == 46)
    {
      v50 = sub_223187510();
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v144;
      else
        v51 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v52 = v144.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v50, v51, v52, &v150, (uint64_t)"Estimated height", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  *(_QWORD *)&v153 = "cv3d.recon.";
  *((_QWORD *)&v153 + 1) = 11;
  v53 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  v54 = &v145;
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v53 = v145.__r_.__value_.__l.__size_;
    v54 = (std::string *)v145.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)&v154 = v54;
  *((_QWORD *)&v154 + 1) = v53;
  sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v144);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v55 = sub_2241471F8();
    v56 = v55[2];
    if (!v56)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v56 = v55[2];
    }
    v57 = *(_QWORD *)(v56 + 64);
    v58 = (std::mutex *)(v57 + 32);
    std::mutex::lock((std::mutex *)(v57 + 32));
    v60 = *(_QWORD *)(v57 + 96);
    v59 = *(_QWORD *)(v57 + 104);
    std::mutex::unlock(v58);
    if (v60 != v59)
    {
      sub_2241471F8();
      v61 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61))
      {
        v153 = 0u;
        v154 = 0u;
        v155 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 24))(v61))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&__p, "User height");
          v143.__r_.__value_.__r.__words[0] = (uint64_t)(v13 * 1000000000.0);
          v143.__r_.__value_.__l.__size_ = 2;
          v62 = sub_2241471F8();
          sub_2231AF940((uint64_t)v62, v61, &v149, (uint64_t)&__p, (__int128 *)&v143);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v153 = 0u;
  v154 = 0u;
  v155 = 728325624;
  kdebug_trace();
  v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = v144.__r_.__value_.__l.__size_;
  if (v63 >= 0x11)
  {
    v64 = &v144;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v65 = v64->__r_.__value_.__r.__words[0];
    v66 = v64->__r_.__value_.__l.__size_;
    v67 = v64->__r_.__value_.__s.__data_[16];
    if (v65 == 0x6365722E64337663 && v66 == 0x73746174532E6E6FLL && v67 == 46)
    {
      v70 = sub_223187510();
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v144;
      else
        v71 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v72 = v144.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v70, v71, v72, &v149, (uint64_t)"User height", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  *(_QWORD *)&v153 = "cv3d.recon.";
  *((_QWORD *)&v153 + 1) = 11;
  v73 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  v74 = &v145;
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v73 = v145.__r_.__value_.__l.__size_;
    v74 = (std::string *)v145.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)&v154 = v74;
  *((_QWORD *)&v154 + 1) = v73;
  sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v144);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v75 = sub_2241471F8();
    v76 = v75[2];
    if (!v76)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v76 = v75[2];
    }
    v77 = *(_QWORD *)(v76 + 64);
    v78 = (std::mutex *)(v77 + 32);
    std::mutex::lock((std::mutex *)(v77 + 32));
    v80 = *(_QWORD *)(v77 + 96);
    v79 = *(_QWORD *)(v77 + 104);
    std::mutex::unlock(v78);
    if (v80 != v79)
    {
      sub_2241471F8();
      v81 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
      {
        v153 = 0u;
        v154 = 0u;
        v155 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
          strcpy((char *)&__p, "Assumed height");
          v143.__r_.__value_.__r.__words[0] = (uint64_t)(v13 * 1000000000.0);
          v143.__r_.__value_.__l.__size_ = 2;
          v82 = sub_2241471F8();
          sub_2231AF940((uint64_t)v82, v81, &v148, (uint64_t)&__p, (__int128 *)&v143);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v153 = 0u;
  v154 = 0u;
  v155 = 728325624;
  kdebug_trace();
  v83 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v83 = v144.__r_.__value_.__l.__size_;
  if (v83 >= 0x11)
  {
    v84 = &v144;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v84 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v85 = v84->__r_.__value_.__r.__words[0];
    v86 = v84->__r_.__value_.__l.__size_;
    v87 = v84->__r_.__value_.__s.__data_[16];
    if (v85 == 0x6365722E64337663 && v86 == 0x73746174532E6E6FLL && v87 == 46)
    {
      v90 = sub_223187510();
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = &v144;
      else
        v91 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v92 = v144.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v90, v91, v92, &v148, (uint64_t)"Assumed height", 14);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  *(_QWORD *)&v153 = "cv3d.recon.";
  *((_QWORD *)&v153 + 1) = 11;
  v93 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  v94 = &v145;
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v93 = v145.__r_.__value_.__l.__size_;
    v94 = (std::string *)v145.__r_.__value_.__r.__words[0];
  }
  *(_QWORD *)&v154 = v94;
  *((_QWORD *)&v154 + 1) = v93;
  sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v144);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v95 = sub_2241471F8();
    v96 = v95[2];
    if (!v96)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v96 = v95[2];
    }
    v97 = *(_QWORD *)(v96 + 64);
    v98 = (std::mutex *)(v97 + 32);
    std::mutex::lock((std::mutex *)(v97 + 32));
    v100 = *(_QWORD *)(v97 + 96);
    v99 = *(_QWORD *)(v97 + 104);
    std::mutex::unlock(v98);
    if (v100 != v99)
    {
      sub_2241471F8();
      v101 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
      {
        v153 = 0u;
        v154 = 0u;
        v155 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2245B9420;
          strcpy(__p.__r_.__value_.__l.__data_, "Minimum height from user");
          v143.__r_.__value_.__r.__words[0] = (uint64_t)(v13 * 1000000000.0);
          v143.__r_.__value_.__l.__size_ = 2;
          v102 = sub_2241471F8();
          sub_2231AF940((uint64_t)v102, v101, &v147, (uint64_t)&__p, (__int128 *)&v143);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v153 = 0u;
  v154 = 0u;
  v155 = 728325624;
  kdebug_trace();
  v103 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v103 = v144.__r_.__value_.__l.__size_;
  if (v103 >= 0x11)
  {
    v104 = &v144;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v104 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v105 = v104->__r_.__value_.__r.__words[0];
    v106 = v104->__r_.__value_.__l.__size_;
    v107 = v104->__r_.__value_.__s.__data_[16];
    if (v105 == 0x6365722E64337663 && v106 == 0x73746174532E6E6FLL && v107 == 46)
    {
      v110 = sub_223187510();
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = &v144;
      else
        v111 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v112 = v144.__r_.__value_.__l.__size_;
      sub_2231897A8((uint64_t *)v110, v111, v112, &v147, (uint64_t)"Minimum height from user", 24);
    }
  }
  kdebug_trace();
  if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a4 + 4))
      goto LABEL_240;
    goto LABEL_186;
  }
  operator delete(v144.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a4 + 4))
  {
LABEL_186:
    v113 = -10;
    v141 = a4 + 12;
    while (1)
    {
      *(_QWORD *)&v153 = "cv3d.recon.";
      *((_QWORD *)&v153 + 1) = 11;
      v114 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = &v145;
      else
        v115 = (std::string *)v145.__r_.__value_.__r.__words[0];
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v114 = v145.__r_.__value_.__l.__size_;
      *(_QWORD *)&v154 = v115;
      *((_QWORD *)&v154 + 1) = v114;
      sub_2231A9820((uint64_t)&v153, (uint64_t)&v155, 0, 0, &v144);
      sub_224569D7C();
      sub_224569A80();
      v116 = v113 + 10;
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_206;
      v117 = sub_2241471F8();
      v118 = v117[2];
      if (!v118)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v118 = v117[2];
      }
      v119 = *(_QWORD *)(v118 + 64);
      v120 = (std::mutex *)(v119 + 32);
      std::mutex::lock((std::mutex *)(v119 + 32));
      v122 = *(_QWORD *)(v119 + 96);
      v121 = *(_QWORD *)(v119 + 104);
      std::mutex::unlock(v120);
      if (v122 == v121)
        goto LABEL_206;
      sub_2241471F8();
      v123 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
        goto LABEL_206;
      v153 = 0u;
      v154 = 0u;
      v155 = 728325608;
      kdebug_trace();
      v124 = *(_DWORD *)(a4 + 4);
      v125 = (v124 - 1) * v116 / 0x64;
      if (v124 <= v125
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_22456D250("%dth percentile", &v143, v113 + 10);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
      {
        __p = v143;
        memset(&v143, 0, sizeof(v143));
        *(_QWORD *)&v151 = (uint64_t)(v13 * 1000000000.0);
        *((_QWORD *)&v151 + 1) = 2;
        v126 = sub_2241471F8();
        sub_22361FE58((uint64_t)v126, v123, (int *)(v141 + 4 * v125), (uint64_t)&__p, &v151);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          break;
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_204;
LABEL_205:
      kdebug_trace();
LABEL_206:
      v153 = 0u;
      v154 = 0u;
      v155 = 728325624;
      kdebug_trace();
      v127 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v127 = v144.__r_.__value_.__l.__size_;
      if (v127 >= 0x11)
      {
        v128 = (v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v144
             : (std::string *)v144.__r_.__value_.__r.__words[0];
        v129 = v128->__r_.__value_.__r.__words[0];
        v130 = v128->__r_.__value_.__l.__size_;
        v131 = v128->__r_.__value_.__s.__data_[16];
        v132 = v129 == 0x6365722E64337663 && v130 == 0x73746174532E6E6FLL;
        if (v132 && v131 == 46)
        {
          v134 = sub_223187510();
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v135 = &v144;
          else
            v135 = (std::string *)v144.__r_.__value_.__r.__words[0];
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v136 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
          else
            v136 = v144.__r_.__value_.__l.__size_;
          v137 = *(_DWORD *)(a4 + 4);
          v138 = (v137 - 1) * v116 / 0x64;
          if (v137 <= v138
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/include/Reconstruction/Common/SampledVector.h", 113, (uint64_t)"index < num_elements_", 21, (uint64_t)"Access element out of bounds", 28, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          sub_22456D250("%dth percentile", &__p, v113 + 10);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v140 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v140 = __p.__r_.__value_.__l.__size_;
          sub_2231897A8((uint64_t *)v134, v135, v136, (float *)(v141 + 4 * v138), (uint64_t)p_p, v140);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      v113 += 10;
      if (v113 >= 0x5B)
        goto LABEL_240;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_205;
LABEL_204:
    operator delete(v143.__r_.__value_.__l.__data_);
    goto LABEL_205;
  }
LABEL_240:
  if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_244:
    operator delete(v146.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_244;
}

void sub_223D00E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223D01024(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t a5, uint64_t *a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t *v56;
  char *v57;
  void *v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  _DWORD *v64;
  _QWORD v65[7];
  uint64_t v66;
  int v67;
  _QWORD v68[4];
  _QWORD v69[3];
  _QWORD v70[2];
  _QWORD v71[2];
  void *__p;
  __int128 v73;
  __int128 v74;
  void *v75[6];
  __int128 v76;
  uint64_t v77;
  _QWORD v78[2];
  _QWORD v79[2];
  __int128 v80;
  unsigned __int8 v81;
  uint64_t v82;
  int v83;
  uint64_t *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  char v90;
  _QWORD v91[2];
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t **v97;
  __int128 *v98;
  unsigned __int8 **v99;
  unsigned __int8 **v100;
  _QWORD *v101;
  char *v102;
  _QWORD *v103;
  _QWORD v104[3];
  __int128 v105;
  _DWORD *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t **v109;
  __int128 *v110;
  unsigned __int8 **v111;
  unsigned __int8 **v112;
  _QWORD *v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116[3];
  _QWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[5];

  v120[2] = *MEMORY[0x24BDAC8D0];
  v81 = a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  *(_QWORD *)(a5 + 40) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 80) = *(_QWORD *)(a5 + 72);
  v12 = a5 + 112;
  *(_QWORD *)(a5 + 120) = *(_QWORD *)(a5 + 112);
  *(_QWORD *)(a5 + 152) = *(_QWORD *)(a5 + 144);
  *(_QWORD *)(a5 + 184) = *(_QWORD *)(a5 + 176);
  *(_QWORD *)(a5 + 216) = *(_QWORD *)(a5 + 208);
  v13 = a5 + 240;
  *(_QWORD *)(a5 + 248) = *(_QWORD *)(a5 + 240);
  *(_QWORD *)(a5 + 288) = *(_QWORD *)(a5 + 280);
  *(_QWORD *)(a5 + 328) = *(_QWORD *)(a5 + 320);
  if (*(_BYTE *)(a5 + 380))
    *(_BYTE *)(a5 + 380) = 0;
  *(_QWORD *)&v80 = &v81;
  *((_QWORD *)&v80 + 1) = a1;
  v79[0] = &v81;
  v79[1] = a1;
  v78[0] = &v81;
  v78[1] = a1;
  v76 = xmmword_224656660;
  v77 = 0x80000000800000;
  sub_22339E3C8(a5, 0x190uLL);
  sub_223674C80(a5 + 320, 0x190uLL);
  *(_DWORD *)(a5 + 352) = 1;
  sub_22339E528(v12, 0x320uLL);
  sub_223674E10(v13, 0x320uLL);
  *(_DWORD *)(a5 + 272) = 2;
  sub_223674E10(a5 + 280, 0x320uLL);
  *(_DWORD *)(a5 + 312) = 2;
  v75[0] = &unk_2245C5160;
  memset(&v75[1], 0, 32);
  __p = &unk_2245C5160;
  v73 = 0u;
  v74 = 0u;
  sub_223B26AA0((char **)v75, (char *)0x1FF);
  sub_223B26AA0((char **)&__p, (char *)0x3F);
  v71[0] = a5;
  v71[1] = &v76;
  v70[0] = v71;
  v70[1] = &__p;
  v69[0] = v71;
  v69[1] = v75;
  v69[2] = &v80;
  v68[0] = a5;
  v68[1] = &v81;
  v68[2] = a1;
  v68[3] = a2;
  v14 = *(_QWORD *)a2;
  v65[6] = a5;
  v66 = v14;
  v67 = *(_DWORD *)(a2 + 8);
  v65[0] = v70;
  v65[1] = v69;
  v65[2] = v68;
  v65[3] = a1;
  v65[4] = v79;
  v65[5] = v78;
  v94 = v80;
  v93 = &v81;
  v92 = &v81;
  v91[0] = &v81;
  v91[1] = a1;
  v90 = a3;
  v15 = sub_223E974E0(a1 + 16, (int *)&v66, (unsigned int *)&v84);
  if ((v15 & 0x80000000) == 0)
  {
    v16 = v15;
    v17 = *(_QWORD *)(a1 + 2344);
    if (v15 >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v17) >> 11))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_141;
      }
      v17 = *(_QWORD *)(a1 + 2344);
    }
    v82 = 16;
    v83 = 0;
    v118 = 0;
    v119 = 0;
    memset(v120, 0, 11);
    v18 = v87;
    if ((v87 & 0x80000000) != 0)
    {
      v19 = v17;
      v20 = *(_DWORD *)(a1 + 2312);
      v21 = v81;
      if (v81)
        goto LABEL_12;
    }
    else
    {
      v19 = v17;
      if (v87 >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v17) >> 11))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_141;
        }
        v19 = *(_QWORD *)(a1 + 2344);
      }
      v20 = *(_DWORD *)(v19 + (v18 << 11) + 2016);
      v21 = v81;
      if (v81)
      {
LABEL_12:
        BYTE2(v120[0]) = (v20 & 0x40000000) != 0;
        v22 = v88;
        if ((v88 & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_37;
      }
    }
    if ((v20 & 0x10000000) != 0)
      v30 = 0x40000000;
    else
      v30 = 0x80000000;
    if ((v20 & 0x20000000) != 0)
      v31 = v30;
    else
      v31 = v20 & 0xCFFFFFFF;
    BYTE2(v120[0]) = (v31 & 0x40000000) != 0;
    v22 = v88;
    if ((v88 & 0x80000000) == 0)
    {
LABEL_13:
      if (v22 >= (*(_QWORD *)(a1 + 2352) - v19) >> 11)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_141;
        }
        v19 = *(_QWORD *)(a1 + 2344);
        v21 = v81;
      }
      v23 = *(_DWORD *)(v19 + (v22 << 11) + 224);
      if (v21)
      {
LABEL_17:
        *(_WORD *)((char *)v120 + 3) = (v23 & 0x40000000) != 0;
        v24 = v89;
        if ((v89 & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_45;
      }
LABEL_38:
      if ((v23 & 0x10000000) != 0)
        v32 = 0x40000000;
      else
        v32 = 0x80000000;
      if ((v23 & 0x20000000) != 0)
        v33 = v32;
      else
        v33 = v23 & 0xCFFFFFFF;
      *(_WORD *)((char *)v120 + 3) = (v33 & 0x40000000) != 0;
      v24 = v89;
      if ((v89 & 0x80000000) == 0)
      {
LABEL_18:
        if (v24 >= (*(_QWORD *)(a1 + 2352) - v19) >> 11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_141;
          }
          v19 = *(_QWORD *)(a1 + 2344);
          v21 = v81;
        }
        v25 = (_DWORD *)(v17 + (v16 << 11));
        v26 = *(_DWORD *)(v19 + (v24 << 11) + 1792);
        v64 = v25;
        if (v21)
        {
LABEL_22:
          BYTE5(v120[0]) = (v26 & 0x40000000) != 0;
          v27 = (*v25 >> 30) & 1;
          BYTE6(v120[0]) = (*v25 & 0x40000000) != 0;
          HIBYTE(v120[0]) = 0;
          v28 = v89;
          if ((v89 & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_55;
        }
LABEL_46:
        if ((v26 & 0x20000000) != 0)
          v26 *= 4;
        BYTE5(v120[0]) = (v26 & 0x40000000) != 0;
        v34 = *v25;
        v35 = *v25 & 0xCFFFFFFF;
        if ((*v25 & 0x10000000) != 0)
          v36 = 0x40000000;
        else
          v36 = 0x80000000;
        if ((v34 & 0x20000000) != 0)
          v37 = v36;
        else
          v37 = v35;
        v27 = (v37 >> 30) & 1;
        BYTE6(v120[0]) = (v37 & 0x40000000) != 0;
        HIBYTE(v120[0]) = 0;
        v28 = v89;
        if ((v89 & 0x80000000) == 0)
        {
LABEL_23:
          if (v28 >= (*(_QWORD *)(a1 + 2352) - v19) >> 11)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_141;
            }
            v19 = *(_QWORD *)(a1 + 2344);
            v21 = v81;
          }
          v29 = *(_DWORD *)(v19 + (v28 << 11) + 1824);
          if (v21)
            goto LABEL_27;
          goto LABEL_56;
        }
LABEL_55:
        v29 = *(_DWORD *)(a1 + 2120);
        if (v21)
        {
LABEL_27:
          LOBYTE(v120[1]) = (v29 & 0x40000000) != 0;
          *(_WORD *)((char *)&v120[1] + 1) = 0;
          if (!v27)
            goto LABEL_119;
LABEL_63:
          v40 = v84;
          if ((v84 & 0x80000000) != 0)
          {
            v41 = *(_DWORD *)(a1 + 2340);
            if (v21)
              goto LABEL_74;
          }
          else
          {
            if (v84 >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v19) >> 11))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_141;
              }
              v19 = *(_QWORD *)(a1 + 2344);
              v21 = v81;
            }
            v41 = *(_DWORD *)(v19 + (v40 << 11) + 2044);
            if (v21)
            {
LABEL_74:
              BYTE1(v119) = (v41 & 0x40000000) != 0;
              v43 = HIDWORD(v84);
              if ((HIDWORD(v84) & 0x80000000) != 0)
              {
                v44 = *(_DWORD *)(a1 + 548);
                if (v21)
                  goto LABEL_85;
              }
              else
              {
                if (HIDWORD(v84) >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v19) >> 11))
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_141;
                  }
                  v19 = *(_QWORD *)(a1 + 2344);
                  v21 = v81;
                }
                v44 = *(_DWORD *)(v19 + (v43 << 11) + 252);
                if (v21)
                {
LABEL_85:
                  WORD1(v119) = (v44 & 0x40000000) != 0;
                  v46 = v85;
                  if ((v85 & 0x80000000) != 0)
                  {
                    v47 = *(_DWORD *)(a1 + 2116);
                    if (v21)
                      goto LABEL_96;
                  }
                  else
                  {
                    if (v85 >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v19) >> 11))
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                      {
                        goto LABEL_141;
                      }
                      v19 = *(_QWORD *)(a1 + 2344);
                      v21 = v81;
                    }
                    v47 = *(_DWORD *)(v19 + (v46 << 11) + 1820);
                    if (v21)
                    {
LABEL_96:
                      BYTE4(v119) = (v47 & 0x40000000) != 0;
                      v49 = v86;
                      if ((v86 & 0x80000000) != 0)
                      {
                        v50 = *(_DWORD *)(a1 + 324);
                        if (!v21)
                        {
LABEL_101:
                          if ((v50 & 0x10000000) != 0)
                            v51 = 0x40000000;
                          else
                            v51 = 0x80000000;
                          if ((v50 & 0x20000000) != 0)
                            v50 = v51;
                          else
                            v50 &= 0xCFFFFFFF;
                        }
                      }
                      else
                      {
                        if (v86 >= (unint64_t)((*(_QWORD *)(a1 + 2352) - v19) >> 11))
                        {
                          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                          {
                            goto LABEL_141;
                          }
                          v19 = *(_QWORD *)(a1 + 2344);
                          v21 = v81;
                        }
                        v50 = *(_DWORD *)(v19 + (v49 << 11) + 28);
                        if (!v21)
                          goto LABEL_101;
                      }
                      *(_WORD *)((char *)&v119 + 5) = (v50 & 0x40000000) != 0;
                      v52 = v85;
                      if ((v85 & 0x80000000) != 0)
                      {
                        v53 = *(_DWORD *)(a1 + 2148);
                        if (!v21)
                          goto LABEL_112;
                        goto LABEL_118;
                      }
                      if (v85 < (unint64_t)((*(_QWORD *)(a1 + 2352) - v19) >> 11))
                      {
LABEL_111:
                        v53 = *(_DWORD *)(v19 + (v52 << 11) + 1852);
                        if (!v21)
                        {
LABEL_112:
                          if ((v53 & 0x10000000) != 0)
                            v54 = 0x40000000;
                          else
                            v54 = 0x80000000;
                          if ((v53 & 0x20000000) != 0)
                            v53 = v54;
                          else
                            v53 &= 0xCFFFFFFF;
                        }
LABEL_118:
                        HIBYTE(v119) = (v53 & 0x40000000) != 0;
                        LOWORD(v120[0]) = 0;
LABEL_119:
                        v117[0] = &v93;
                        v117[1] = a1 + 16;
                        v117[2] = v64;
                        v116[0] = a1 + 16;
                        v116[1] = (uint64_t)&v84;
                        v116[2] = (uint64_t)&v93;
                        *(_QWORD *)&v107 = &v66;
                        *((_QWORD *)&v107 + 1) = &v82;
                        v108 = a1 + 16;
                        v109 = &v84;
                        v110 = &v94;
                        v111 = &v93;
                        v112 = &v92;
                        v113 = v91;
                        v114 = &v90;
                        v115 = v65;
                        sub_223D89640((unint64_t)&v118, (uint64_t)v117, v116, &v107);
                        *(_QWORD *)&v105 = &v93;
                        *((_QWORD *)&v105 + 1) = a1 + 16;
                        v106 = v64;
                        v104[0] = a1 + 16;
                        v104[1] = &v84;
                        v104[2] = &v93;
                        *(_QWORD *)&v95 = &v66;
                        *((_QWORD *)&v95 + 1) = &v82;
                        v96 = a1 + 16;
                        v97 = &v84;
                        v98 = &v94;
                        v99 = &v93;
                        v100 = &v92;
                        v101 = v91;
                        v102 = &v90;
                        v103 = v65;
                        sub_223D8D47C(&v105, v104, &v95);
                        goto LABEL_120;
                      }
                      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                      {
                        v19 = *(_QWORD *)(a1 + 2344);
                        v21 = v81;
                        goto LABEL_111;
                      }
LABEL_141:
                      abort();
                    }
                  }
                  if ((v47 & 0x10000000) != 0)
                    v48 = 0x40000000;
                  else
                    v48 = 0x80000000;
                  if ((v47 & 0x20000000) != 0)
                    v47 = v48;
                  else
                    v47 &= 0xCFFFFFFF;
                  goto LABEL_96;
                }
              }
              if ((v44 & 0x10000000) != 0)
                v45 = 0x40000000;
              else
                v45 = 0x80000000;
              if ((v44 & 0x20000000) != 0)
                v44 = v45;
              else
                v44 &= 0xCFFFFFFF;
              goto LABEL_85;
            }
          }
          if ((v41 & 0x10000000) != 0)
            v42 = 0x40000000;
          else
            v42 = 0x80000000;
          if ((v41 & 0x20000000) != 0)
            v41 = v42;
          else
            v41 &= 0xCFFFFFFF;
          goto LABEL_74;
        }
LABEL_56:
        if ((v29 & 0x10000000) != 0)
          v38 = 0x40000000;
        else
          v38 = 0x80000000;
        if ((v29 & 0x20000000) != 0)
          v39 = v38;
        else
          v39 = v29 & 0xCFFFFFFF;
        LOBYTE(v120[1]) = (v39 & 0x40000000) != 0;
        *(_WORD *)((char *)&v120[1] + 1) = 0;
        if (!v27)
          goto LABEL_119;
        goto LABEL_63;
      }
LABEL_45:
      v25 = (_DWORD *)(v17 + (v16 << 11));
      v26 = *(_DWORD *)(a1 + 2088);
      v64 = v25;
      if (v21)
        goto LABEL_22;
      goto LABEL_46;
    }
LABEL_37:
    v23 = *(_DWORD *)(a1 + 520);
    if (v21)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_120:
  v55 = *(unsigned __int8 *)(a5 + 380);
  *(_QWORD *)(a5 + 356) = v76;
  *(_DWORD *)(a5 + 364) = DWORD2(v76);
  *(_QWORD *)(a5 + 368) = *(_QWORD *)((unint64_t)&v76 | 0xC);
  *(_DWORD *)(a5 + 376) = *(_DWORD *)(((unint64_t)&v76 | 0xC) + 8);
  if (v55)
  {
    v56 = (uint64_t *)a2;
    if (!a7)
      goto LABEL_126;
  }
  else
  {
    *(_BYTE *)(a5 + 380) = 1;
    v56 = (uint64_t *)a2;
    if (!a7)
      goto LABEL_126;
  }
  v84 = v56;
  v57 = sub_223CF29C4(a6, (int *)v56, (uint64_t)&unk_2245BA939, &v84);
  v58 = v75[4];
  v59 = (void *)*((_QWORD *)v57 + 4);
  v60 = *(_OWORD *)v75;
  v75[0] = &unk_2245C5160;
  memset(&v75[1], 0, 32);
  v61 = *((_QWORD *)v57 + 7);
  v62 = *(_OWORD *)&v75[2];
  *((_OWORD *)v57 + 2) = v60;
  *((_OWORD *)v57 + 3) = v62;
  *((_QWORD *)v57 + 8) = v58;
  if (v61)
    operator delete(v59);
LABEL_126:
  if ((_QWORD)v74)
    operator delete(__p);
  if (v75[3])
    operator delete(v75[0]);
}

void sub_223D01A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a37)
    operator delete(__p);
  if (!a42)
    _Unwind_Resume(exception_object);
  operator delete(a39);
  _Unwind_Resume(exception_object);
}

void sub_223D01AA0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  float32x2_t v7;
  uint64_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t *v12;
  int8x16_t v13;
  float32x2_t v14;
  int8x16_t v15;
  int16x4_t v16;
  int8x8_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  const char *v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  const char *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  float *v62;
  float *v63;
  float v64;
  int v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  const char *__src;
  unint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int32x2_t v78;
  int v79;
  uint64_t *v80;
  _QWORD *rep;
  _QWORD *v82;
  int v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _BYTE v89[24];
  void *object;
  void *v91;
  char *v92;
  unint64_t v93;
  char v94;
  void *__p[2];
  unint64_t v96;
  char v97;
  __int128 v98;
  uint64_t *v99;
  char v100;
  uint64_t v101;
  char v102;
  _QWORD v103[2];
  _QWORD v104[2];
  char v105;
  uint64_t v106[3];

  v2 = *(_QWORD **)(a1 + 2504);
  v3 = (_QWORD *)(a1 + 2512);
  if (v2 != (_QWORD *)(a1 + 2512))
  {
    v4 = a2;
    v6 = a1 + 16;
    v7 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    while (1)
    {
      v76 = *(_QWORD *)((char *)v2 + 28);
      v77 = *((_DWORD *)v2 + 9);
      v78 = vadd_s32(*(int32x2_t *)((char *)v2 + 28), (int32x2_t)0x800000008);
      v79 = v77 + 8;
      v8 = sub_2239942A0(v4, (int *)&v76);
      if (v8)
      {
        v12 = v8;
        if (v8[18] != v8[19])
          break;
      }
LABEL_91:
      v67 = (_QWORD *)v2[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v2[2];
          v69 = *v68 == (_QWORD)v2;
          v2 = v68;
        }
        while (!v69);
      }
      v2 = v68;
      if (v68 == v3)
        return;
    }
    v13 = (int8x16_t)xmmword_224656660;
    *(_OWORD *)v89 = xmmword_224656660;
    *(_QWORD *)&v89[16] = 0x80000000800000;
    if (*((_BYTE *)v8 + 412))
    {
      v13.i32[0] = *((_DWORD *)v8 + 99);
      v9.i32[0] = *((_DWORD *)v8 + 102);
      v10.i64[0] = *(uint64_t *)((char *)v8 + 388);
      v11.i64[0] = v8[50];
      v14 = vminnm_f32(*(float32x2_t *)v10.i8, v7);
      v15 = vextq_s8(vextq_s8(v13, v13, 4uLL), v10, 0xCuLL);
      v15.i32[3] = v15.i32[0];
      v16 = vmovn_s32(vcgtq_f32((float32x4_t)v15, (float32x4_t)xmmword_22466F8E0));
      v16.i16[0] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_22466F8E0, (float32x4_t)v15)).u16[0];
      v17 = vbsl_s8((int8x8_t)vcgt_f32(v14, *(float32x2_t *)v11.i8), *(int8x8_t *)v11.i8, (int8x8_t)v14);
      v18 = vbslq_s8((int8x16_t)vmovl_s16(v16), v15, (int8x16_t)xmmword_22466F8E0);
      v19 = (float32x4_t)v18;
      v19.i32[0] = v9.i32[0];
      *(int8x8_t *)v89 = v17;
      v20 = (float32x4_t)vextq_s8(vextq_s8(v18, v18, 4uLL), v11, 0xCuLL);
      v20.i32[3] = v9.i32[0];
      v21 = (int8x16_t)vcgtq_f32(v20, v19);
      v22 = vextq_s8(vextq_s8(v9, v9, 4uLL), v11, 0xCuLL);
      v22.i32[3] = v22.i32[0];
      v23 = vbslq_s8(v21, v22, v18);
      *(int8x16_t *)&v89[8] = v23;
LABEL_89:
      v101 = a1;
      *(_QWORD *)&v98 = &v102;
      *((_QWORD *)&v98 + 1) = a1;
      v99 = &v101;
      v104[0] = a1;
      v104[1] = v89;
      v103[0] = v6;
      v103[1] = &v98;
      v80 = (uint64_t *)v6;
      rep = v103;
      v82 = v104;
      v106[0] = a1;
      v106[1] = (uint64_t)v89;
      v105 = 1;
      v65 = *(_DWORD *)(a1 + 192);
      if ((v65 & 0x80000000) == 0)
      {
        v66 = *(_DWORD *)(a1 + 196);
        object = v106;
        v91 = &v80;
        v92 = &v105;
        sub_223E61440(v6, v66, v65, 0, &object, *(double *)v23.i64, *(double *)v22.i64, (float32x4_t)v21, *(double *)v11.i64, v19);
      }
      goto LABEL_91;
    }
    sub_223CF9954(v106);
    if (**(int **)(v106[0] + 56) > 4
      || (v24 = *(unsigned __int8 *)(v106[0] + 72),
          v25 = sub_22322F254(v106[0], "OSLogSurrogateAppender", 1, 0),
          (v75 = v24) == 0)
      && !v25)
    {
LABEL_74:
      v62 = (float *)v12[4];
      v63 = (float *)v12[5];
      if (v62 != v63)
      {
        v22.i32[0] = *(_DWORD *)&v89[4];
        v23.i32[0] = *(_DWORD *)v89;
        v21.i32[0] = *(_DWORD *)&v89[12];
        v11.i32[0] = *(_DWORD *)&v89[8];
        v64 = *(float *)&v89[20];
        v19.i32[0] = *(_DWORD *)&v89[16];
        do
        {
          if (*v62 < *(float *)v23.i32)
            v23.i32[0] = *(__int32 *)v62;
          *(_DWORD *)v89 = v23.i32[0];
          if (*(float *)v21.i32 < *v62)
            v21.i32[0] = *(__int32 *)v62;
          *(_DWORD *)&v89[12] = v21.i32[0];
          if (v62[1] < *(float *)v22.i32)
            v22.i32[0] = (__int32)v62[1];
          *(_DWORD *)&v89[4] = v22.i32[0];
          if (v19.f32[0] < v62[1])
            v19.f32[0] = v62[1];
          *(_DWORD *)&v89[16] = v19.i32[0];
          if (v62[2] < *(float *)v11.i32)
            v11.i32[0] = (__int32)v62[2];
          *(_DWORD *)&v89[8] = v11.i32[0];
          if (v64 < v62[2])
            v64 = v62[2];
          *(float *)&v89[20] = v64;
          v62 += 3;
        }
        while (v62 != v63);
      }
      goto LABEL_89;
    }
    v74 = v25;
    v80 = v106;
    rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
    v82 = (_QWORD *)std::chrono::system_clock::now().__d_.__rep_;
    v83 = 4;
    v84 = "unknown file";
    v85 = 1523;
    v86 = "unknown function";
    v87 = 0;
    v88 = 0;
    v26 = *v80;
    if (*(char *)(*v80 + 39) < 0)
    {
      v28 = *(const char **)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      v70 = *v80 + 16;
      v71 = *v80;
      v30 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v30 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v27 = *(unsigned __int8 *)(*v80 + 39);
      v28 = (const char *)(*v80 + 16);
      v70 = (uint64_t)v28;
      v71 = *v80;
      v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v29 & 1) != 0)
        goto LABEL_15;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&v98);
      if (v100)
      {
        xmmword_255788F40 = v98;
        unk_255788F50 = v99;
      }
      else
      {
        byte_255788F57 = 14;
        strcpy((char *)&xmmword_255788F40, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_15:
    if (byte_255788F57 >= 0)
      v31 = (const char *)&xmmword_255788F40;
    else
      v31 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v32 = byte_255788F57;
    else
      v32 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v31, v28);
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    __src = v28;
    if (v32 >= 0x17)
    {
      v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v34 = v32 | 7;
      v35 = v34 + 1;
      v33 = operator new(v34 + 1);
      v92 = (char *)v32;
      v93 = v35 | 0x8000000000000000;
      v91 = v33;
    }
    else
    {
      HIBYTE(v93) = v32;
      v33 = &v91;
      if (!v32)
      {
LABEL_29:
        *((_BYTE *)v33 + v32) = 0;
        v94 = 1;
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v4 = a2;
        if (v27 >= 0x17)
        {
          v39 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v39 = v27 | 7;
          v40 = v39 + 1;
          v36 = operator new(v39 + 1);
          __p[1] = (void *)v27;
          v96 = v40 | 0x8000000000000000;
          __p[0] = v36;
        }
        else
        {
          HIBYTE(v96) = v27;
          v36 = __p;
          if (!v27)
          {
            LOBYTE(__p[0]) = 0;
            v97 = 1;
            v37 = object;
            if ((SHIBYTE(v96) & 0x80000000) == 0)
              goto LABEL_33;
            goto LABEL_39;
          }
        }
        memmove(v36, __src, v27);
        *((_BYTE *)v36 + v27) = 0;
        v97 = 1;
        v37 = object;
        if ((SHIBYTE(v96) & 0x80000000) == 0)
        {
LABEL_33:
          v38 = v74;
          if (!v94)
            goto LABEL_42;
          goto LABEL_40;
        }
LABEL_39:
        operator delete(__p[0]);
        v38 = v74;
        if (!v94)
        {
LABEL_42:
          if (object)
            os_release(object);
          if (v38 && *(_QWORD *)(v38 + 24))
          {
            v41 = _os_log_pack_size();
            v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
            v43 = (std::__shared_weak_count *)operator new();
            v44 = v43;
            v43->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v43->__shared_weak_owners_ = 0;
            v43[1].__vftable = v42;
            do
              v46 = __ldxr(p_shared_owners);
            while (__stxr(v46 + 1, p_shared_owners));
            do
              v47 = __ldaxr(p_shared_owners);
            while (__stlxr(v47 - 1, p_shared_owners));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
            *(_WORD *)_os_log_pack_fill() = 0;
            v48 = (_QWORD *)operator new();
            v49 = *(unsigned __int8 *)(v71 + 39);
            v50 = v70;
            if ((v49 & 0x80u) != 0)
            {
              v50 = *(_QWORD *)(v71 + 16);
              v49 = *(_QWORD *)(v71 + 24);
            }
            *v48 = v42;
            v48[1] = v42;
            v48[2] = v44;
            v48[3] = 0;
            v48[4] = 0;
            v48[5] = v50;
            v48[6] = v49;
            *((_BYTE *)v48 + 56) = 16;
            object = v48;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v74 + 24) + 40))(*(_QWORD *)(v74 + 24), &object);
            v51 = object;
            object = 0;
            if (v51)
            {
              v52 = (std::__shared_weak_count *)*((_QWORD *)v51 + 4);
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = (std::__shared_weak_count *)*((_QWORD *)v51 + 2);
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              MEMORY[0x227684CE8](v51, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            LOWORD(object) = 0;
            v58 = (void *)_os_log_send_and_compose_impl();
            if (v58)
              free(v58);
          }
          if (v75)
          {
            sub_22322C138((uint64_t)&v80, "Chunk mesh does not contain a bounding box");
            sub_223182C08((uint64_t)&v80);
          }
          sub_223182C08((uint64_t)&v80);
          v59 = v88;
          if (v88)
          {
            v60 = (unint64_t *)&v88->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          goto LABEL_74;
        }
LABEL_40:
        if (SHIBYTE(v93) < 0)
          operator delete(v91);
        goto LABEL_42;
      }
    }
    memmove(v33, v31, v32);
    goto LABEL_29;
  }
}

void sub_223D022F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  __cxa_guard_abort(&qword_255788F58);
  sub_223182C08((uint64_t)&a28);
  v49 = a36;
  if (a36)
  {
    p_shared_owners = (unint64_t *)&a36->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223D024AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  result = a6;
  if (a2 != a4)
  {
    v7 = 0;
    do
    {
      v8 = a6 + v7;
      v9 = a6 + v7 - 520;
      v10 = *(_QWORD *)(a2 + v7 - 520);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 - 512);
      *(_QWORD *)v9 = v10;
      v11 = a6 + v7 - 508;
      v12 = *(_QWORD *)(a2 + v7 - 508);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 + v7 - 500);
      *(_QWORD *)v11 = v12;
      v13 = a6 + v7 - 496;
      v14 = *(_QWORD *)(a2 + v7 - 496);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + v7 - 488);
      *(_QWORD *)v13 = v14;
      v15 = a6 + v7 - 480;
      *(_WORD *)(a6 + v7 - 484) = *(_WORD *)(a2 + v7 - 484);
      v16 = *(_QWORD *)(a2 + v7 - 480);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + v7 - 472);
      v17 = a6 + v7 - 468;
      *(_QWORD *)v15 = v16;
      v18 = *(_QWORD *)(a2 + v7 - 468);
      *(_DWORD *)(v17 + 8) = *(_DWORD *)(a2 + v7 - 460);
      *(_QWORD *)v17 = v18;
      *(_WORD *)(a6 + v7 - 456) = *(_WORD *)(a2 + v7 - 456);
      v19 = a6 + v7 - 452;
      v20 = *(_QWORD *)(a2 + v7 - 452);
      *(_DWORD *)(v19 + 8) = *(_DWORD *)(a2 + v7 - 444);
      *(_QWORD *)v19 = v20;
      v21 = a6 + v7 - 440;
      v22 = *(_QWORD *)(a2 + v7 - 440);
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(a2 + v7 - 432);
      *(_QWORD *)v21 = v22;
      *(_WORD *)(a6 + v7 - 428) = *(_WORD *)(a2 + v7 - 428);
      v23 = a6 + v7 - 424;
      v24 = *(_QWORD *)(a2 + v7 - 424);
      *(_DWORD *)(v23 + 8) = *(_DWORD *)(a2 + v7 - 416);
      *(_QWORD *)v23 = v24;
      v25 = a6 + v7 - 412;
      v26 = *(_QWORD *)(a2 + v7 - 412);
      *(_DWORD *)(v25 + 8) = *(_DWORD *)(a2 + v7 - 404);
      *(_QWORD *)v25 = v26;
      v27 = a6 + v7 - 396;
      *(_WORD *)(a6 + v7 - 400) = *(_WORD *)(a2 + v7 - 400);
      v28 = *(_QWORD *)(a2 + v7 - 396);
      *(_DWORD *)(v27 + 8) = *(_DWORD *)(a2 + v7 - 388);
      v29 = a6 + v7 - 384;
      *(_QWORD *)v27 = v28;
      v30 = *(_QWORD *)(a2 + v7 - 384);
      *(_DWORD *)(v29 + 8) = *(_DWORD *)(a2 + v7 - 376);
      *(_QWORD *)v29 = v30;
      *(_WORD *)(a6 + v7 - 372) = *(_WORD *)(a2 + v7 - 372);
      v31 = a6 + v7 - 368;
      v32 = *(_QWORD *)(a2 + v7 - 368);
      *(_DWORD *)(v31 + 8) = *(_DWORD *)(a2 + v7 - 360);
      *(_QWORD *)v31 = v32;
      v33 = a6 + v7 - 356;
      v34 = *(_QWORD *)(a2 + v7 - 356);
      *(_DWORD *)(v33 + 8) = *(_DWORD *)(a2 + v7 - 348);
      *(_QWORD *)v33 = v34;
      *(_WORD *)(a6 + v7 - 344) = *(_WORD *)(a2 + v7 - 344);
      v35 = a6 + v7 - 340;
      v36 = *(_QWORD *)(a2 + v7 - 340);
      *(_DWORD *)(v35 + 8) = *(_DWORD *)(a2 + v7 - 332);
      *(_QWORD *)v35 = v36;
      v37 = a6 + v7 - 328;
      v38 = *(_QWORD *)(a2 + v7 - 328);
      *(_DWORD *)(v37 + 8) = *(_DWORD *)(a2 + v7 - 320);
      *(_QWORD *)v37 = v38;
      v39 = a6 + v7 - 312;
      *(_WORD *)(a6 + v7 - 316) = *(_WORD *)(a2 + v7 - 316);
      v40 = *(_QWORD *)(a2 + v7 - 312);
      *(_DWORD *)(v39 + 8) = *(_DWORD *)(a2 + v7 - 304);
      v41 = a6 + v7 - 300;
      *(_QWORD *)v39 = v40;
      v42 = *(_QWORD *)(a2 + v7 - 300);
      *(_DWORD *)(v41 + 8) = *(_DWORD *)(a2 + v7 - 292);
      *(_QWORD *)v41 = v42;
      *(_WORD *)(a6 + v7 - 288) = *(_WORD *)(a2 + v7 - 288);
      v43 = a6 + v7 - 284;
      v44 = *(_QWORD *)(a2 + v7 - 284);
      *(_DWORD *)(v43 + 8) = *(_DWORD *)(a2 + v7 - 276);
      *(_QWORD *)v43 = v44;
      v45 = a6 + v7 - 272;
      v46 = *(_QWORD *)(a2 + v7 - 272);
      *(_DWORD *)(v45 + 8) = *(_DWORD *)(a2 + v7 - 264);
      *(_QWORD *)v45 = v46;
      *(_WORD *)(a6 + v7 - 260) = *(_WORD *)(a2 + v7 - 260);
      v47 = *(_QWORD *)(a2 + v7 - 256);
      *(_DWORD *)(v8 - 248) = *(_DWORD *)(a2 + v7 - 248);
      *(_QWORD *)(v8 - 256) = v47;
      v48 = *(_QWORD *)(a2 + v7 - 244);
      *(_DWORD *)(v8 - 236) = *(_DWORD *)(a2 + v7 - 236);
      *(_QWORD *)(v8 - 244) = v48;
      *(_WORD *)(v8 - 232) = *(_WORD *)(a2 + v7 - 232);
      v49 = *(_OWORD *)(a2 + v7 - 228);
      *(_OWORD *)(v8 - 215) = *(_OWORD *)(a2 + v7 - 215);
      *(_OWORD *)(v8 - 228) = v49;
      v50 = *(_QWORD *)(a2 + v7 - 196);
      *(_DWORD *)(v8 - 188) = *(_DWORD *)(a2 + v7 - 188);
      *(_QWORD *)(v8 - 196) = v50;
      v51 = *(_OWORD *)(a2 + v7 - 184);
      *(_OWORD *)(v8 - 172) = *(_OWORD *)(a2 + v7 - 172);
      *(_OWORD *)(v8 - 184) = v51;
      v52 = *(_QWORD *)(a2 + v7 - 156);
      *(_DWORD *)(v8 - 148) = *(_DWORD *)(a2 + v7 - 148);
      *(_QWORD *)(v8 - 156) = v52;
      v53 = *(_QWORD *)(a2 + v7 - 144);
      *(_DWORD *)(v8 - 136) = *(_DWORD *)(a2 + v7 - 136);
      *(_QWORD *)(v8 - 144) = v53;
      v54 = *(_QWORD *)(a2 + v7 - 132);
      *(_DWORD *)(v8 - 124) = *(_DWORD *)(a2 + v7 - 124);
      *(_QWORD *)(v8 - 132) = v54;
      v55 = *(_QWORD *)(a2 + v7 - 120);
      *(_DWORD *)(v8 - 112) = *(_DWORD *)(a2 + v7 - 112);
      *(_QWORD *)(v8 - 120) = v55;
      v56 = *(_QWORD *)(a2 + v7 - 108);
      *(_DWORD *)(v8 - 100) = *(_DWORD *)(a2 + v7 - 100);
      *(_QWORD *)(v8 - 108) = v56;
      v57 = *(_QWORD *)(a2 + v7 - 96);
      *(_DWORD *)(v8 - 88) = *(_DWORD *)(a2 + v7 - 88);
      *(_QWORD *)(v8 - 96) = v57;
      v58 = *(_QWORD *)(a2 + v7 - 84);
      *(_DWORD *)(v8 - 76) = *(_DWORD *)(a2 + v7 - 76);
      *(_QWORD *)(v8 - 84) = v58;
      v59 = *(_QWORD *)(a2 + v7 - 72);
      *(_DWORD *)(v8 - 64) = *(_DWORD *)(a2 + v7 - 64);
      *(_QWORD *)(v8 - 72) = v59;
      v60 = *(_QWORD *)(a2 + v7 - 60);
      *(_DWORD *)(v8 - 52) = *(_DWORD *)(a2 + v7 - 52);
      *(_QWORD *)(v8 - 60) = v60;
      v61 = *(_QWORD *)(a2 + v7 - 48);
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(a2 + v7 - 40);
      *(_QWORD *)(v8 - 48) = v61;
      v62 = *(_QWORD *)(a2 + v7 - 36);
      *(_DWORD *)(v8 - 28) = *(_DWORD *)(a2 + v7 - 28);
      *(_QWORD *)(v8 - 36) = v62;
      v63 = *(_QWORD *)(a2 + v7 - 24);
      *(_DWORD *)(v8 - 16) = *(_DWORD *)(a2 + v7 - 16);
      *(_QWORD *)(v8 - 24) = v63;
      v64 = *(_QWORD *)(a2 + v7 - 12);
      *(_BYTE *)(v8 - 4) = *(_BYTE *)(a2 + v7 - 4);
      *(_QWORD *)(v8 - 12) = v64;
      v7 -= 520;
    }
    while (a2 + v7 != a4);
    return a6 + v7;
  }
  return result;
}

void sub_223D0285C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_24EC63B00;
  v2 = (_QWORD *)(a1 + 2400);
  v3 = *(_QWORD **)(a1 + 2424);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  sub_223198030(a1 + 2376, *(_QWORD **)(a1 + 2384));
  v5 = *(void **)(a1 + 2352);
  if (v5)
  {
    *(_QWORD *)(a1 + 2360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2328);
  if (v6)
  {
    *(_QWORD *)(a1 + 2336) = v6;
    operator delete(v6);
  }
  sub_223E8A464((_QWORD *)a1);
  JUMPOUT(0x227684CE8);
}

void sub_223D028FC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223D02910(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC63B70;
  result[1] = v3;
  return result;
}

uint64_t sub_223D02944(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC63B70;
  a2[1] = v2;
  return result;
}

void sub_223D02960(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  sub_223CF89D8(v3, (int *)&v5, v4, 0x80000000);
  if (!(v4 >> 30))
    sub_223CF7DE8(v3, v4);
}

uint64_t sub_223D029CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon5block15PointCloudStoreC1EfjjE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon5block15PointCloudStoreC1EfjjE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon5block15PointCloudStoreC1EfjjE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon5block15PointCloudStoreC1EfjjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223D02A38()
{
  return &unk_24EC63BE0;
}

uint64_t sub_223D02A44(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  const char *v13;
  size_t v14;
  void *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  float *v42;
  const float *v43;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  unint64_t i;
  unsigned int v49;
  const char *v51;
  _QWORD v52[3];
  int v53;
  const char *v54;
  int v55;
  const char *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  void *object;
  void *v61;
  size_t v62;
  unint64_t v63;
  char v64;
  void *__p[2];
  unint64_t v66;
  char v67;

  v3 = a3;
  if ((a3 & 0x80000000) == 0)
    return v3;
  if (*(_DWORD *)(a1 + 276))
  {
    if (((uint64_t)(*(_QWORD *)(a1 + 2344) - *(_QWORD *)(a1 + 2328)) >> 11)
       + ((uint64_t)(*(_QWORD *)(a1 + 2360) - *(_QWORD *)(a1 + 2352)) >> 2) < (unint64_t)(((uint64_t)(*(_QWORD *)(a1 + 2336) - *(_QWORD *)(a1 + 2328)) >> 11)
                                                                                              + 1))
    {
      sub_223973C90(a1, a2, (int32x2_t *)&object);
      if (!BYTE4(v61))
      {
        sub_223CFA3BC(&v59);
        if (**(int **)(v59 + 56) <= 4)
        {
          v6 = *(unsigned __int8 *)(v59 + 72);
          v7 = sub_22322F254(v59, "OSLogSurrogateAppender", 1, 0);
          v8 = v7 ? v7 + 16 : 0;
          if (v6 || v7)
          {
            v52[0] = &v59;
            v52[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v52[2] = std::chrono::system_clock::now().__d_.__rep_;
            v53 = 4;
            v54 = "unknown file";
            v55 = 664;
            v57 = 0;
            v58 = 0;
            v56 = "unknown function";
            v9 = (uint64_t *)(v59 + 16);
            if (*(char *)(v59 + 39) < 0)
            {
              v11 = *(const char **)(v59 + 16);
              v10 = *(_QWORD *)(v59 + 24);
            }
            else
            {
              v10 = *(unsigned __int8 *)(v59 + 39);
              v11 = (const char *)(*(_QWORD *)v52[0] + 16);
            }
            v12 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)&object);
              sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
              if ((_BYTE)v63 && SHIBYTE(v62) < 0)
                operator delete(object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
            if (byte_255788F57 >= 0)
              v13 = (const char *)&xmmword_255788F40;
            else
              v13 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v14 = byte_255788F57;
            else
              v14 = *((_QWORD *)&xmmword_255788F40 + 1);
            object = os_log_create(v13, v11);
            v15 = &v61;
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v14 >= 0x17)
            {
              v51 = v11;
              v16 = v6;
              v17 = v9;
              v18 = v8;
              v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v19 = v14 | 7;
              v20 = v19 + 1;
              v15 = operator new(v19 + 1);
              v62 = v14;
              v63 = v20 | 0x8000000000000000;
              v61 = v15;
              v8 = v18;
              v9 = v17;
              v6 = v16;
              v11 = v51;
            }
            else
            {
              HIBYTE(v63) = v14;
              if (!v14)
              {
LABEL_29:
                *((_BYTE *)v15 + v14) = 0;
                v64 = 1;
                v21 = __p;
                if (v10 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v10 >= 0x17)
                {
                  v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v10 | 7) != 0x17)
                    v22 = v10 | 7;
                  v23 = v22 + 1;
                  v21 = operator new(v22 + 1);
                  __p[1] = (void *)v10;
                  v66 = v23 | 0x8000000000000000;
                  __p[0] = v21;
                }
                else
                {
                  HIBYTE(v66) = v10;
                  if (!v10)
                    goto LABEL_37;
                }
                memmove(v21, v11, v10);
LABEL_37:
                *((_BYTE *)v21 + v10) = 0;
                v67 = 1;
                v24 = object;
                if (SHIBYTE(v66) < 0)
                  operator delete(__p[0]);
                if (v64 && SHIBYTE(v63) < 0)
                  operator delete(v61);
                if (object)
                  os_release(object);
                sub_223D03264(v8, v9, v24, OS_LOG_TYPE_ERROR);
                if (v6)
                {
                  sub_22322C138((uint64_t)v52, "Vs couldn't deallocate");
                  sub_223182C08((uint64_t)v52);
                }
                sub_223182C08((uint64_t)v52);
                v25 = v58;
                if (v58)
                {
                  p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                  do
                    v27 = __ldaxr(p_shared_owners);
                  while (__stlxr(v27 - 1, p_shared_owners));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                goto LABEL_51;
              }
            }
            memmove(v15, v13, v14);
            goto LABEL_29;
          }
        }
      }
    }
  }
LABEL_51:
  v28 = *(_QWORD *)(a1 + 2360);
  if (*(_QWORD *)(a1 + 2352) == v28)
  {
    v30 = *(char **)(a1 + 2336);
    v31 = *(_QWORD *)(a1 + 2344);
    if ((unint64_t)v30 >= v31)
    {
      v33 = *(_BYTE **)(a1 + 2328);
      v34 = (v30 - v33) >> 11;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 53)
        sub_22316E078();
      v36 = v31 - (_QWORD)v33;
      if (v36 >> 10 > v35)
        v35 = v36 >> 10;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFF800)
        v37 = 0x1FFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 53)
          sub_223174E94();
        v38 = (char *)operator new(v37 << 11);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[2048 * v34];
      v40 = &v38[2048 * v37];
      bzero(v39, 0x800uLL);
      v32 = v39 + 2048;
      if (v30 != v33)
      {
        do
        {
          v30 -= 2048;
          v39 -= 2048;
          memcpy(v39, v30, 0x800uLL);
        }
        while (v30 != v33);
        v30 = *(char **)(a1 + 2328);
      }
      *(_QWORD *)(a1 + 2328) = v39;
      *(_QWORD *)(a1 + 2336) = v32;
      *(_QWORD *)(a1 + 2344) = v40;
      if (v30)
        operator delete(v30);
    }
    else
    {
      bzero(*(void **)(a1 + 2336), 0x800uLL);
      v32 = v30 + 2048;
    }
    *(_QWORD *)(a1 + 2336) = v32;
    v3 = ((unint64_t)&v32[-*(_QWORD *)(a1 + 2328)] >> 11) - 1;
    if ((v3 & 0x80000000) == 0)
      goto LABEL_74;
  }
  else
  {
    v29 = *(_DWORD *)(v28 - 4);
    v3 = v29;
    *(_QWORD *)(a1 + 2360) = v28 - 4;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_74;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 680, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(allocated_index)", 49, (uint64_t)"Allocation failed", 17, (void (*)(void **))sub_22457406C)|| sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 629, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_88;
  }
LABEL_74:
  v41 = *(_QWORD *)(a1 + 2328);
  if (v3 >= (unint64_t)((*(_QWORD *)(a1 + 2336) - v41) >> 11))
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 630, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      v41 = *(_QWORD *)(a1 + 2328);
      goto LABEL_77;
    }
LABEL_88:
    abort();
  }
LABEL_77:
  v42 = (float *)(v41 + ((unint64_t)v3 << 11));
  v43 = (const float *)(a1 + 272);
  if ((unint64_t)v42 >= a1 + 276 || v43 >= v42 + 512)
  {
    v45 = 0;
    v46 = vld1q_dup_f32(v43);
    do
    {
      v47 = (float32x4_t *)&v42[v45];
      *v47 = v46;
      v47[1] = v46;
      v45 += 8;
    }
    while (v45 != 512);
  }
  else
  {
    for (i = 513; i > 1; --i)
      *v42++ = *v43;
  }
  v49 = a2[2] & 0xFFFFFFF8;
  object = (void *)(*(_QWORD *)a2 & 0xFFFFFFF8FFFFFFF8);
  LODWORD(v61) = v49;
  sub_223E8AD00(a1, (int8x8_t *)&object, v3);
  return v3;
}

void sub_223D03070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223D030B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223D030D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_223D03114(char *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v17;
  uint64_t **v18;
  int *v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  BOOL v25;
  unsigned int v26;
  int v27[3];
  int v28[3];

  v3 = *a2;
  v2 = a2[1];
  v4 = v2 & 7;
  if ((v2 & 7) != 0)
    v5 = (v2 & 7) == 7;
  else
    v5 = -1;
  v6 = *a2 & 7;
  v7 = v2 & 0xFFFFFFF8;
  v8 = a2[2];
  v9 = v8 & 0xFFFFFFF8;
  v26 = v3 & 0xFFFFFFF8;
  v28[0] = v3 & 0xFFFFFFF8;
  v28[1] = v7;
  v28[2] = v8 & 0xFFFFFFF8;
  if ((v3 & 7) != 0)
    v10 = (v3 & 7) == 7;
  else
    v10 = -1;
  v11 = v8 & 7;
  if (v11)
  {
    v12 = v11 == 7;
    if (v11 != 7 && v6 != 0 && v6 != 7 && v4 != 0 && v4 != 7)
      return sub_22397FD34((uint64_t **)result + 297, v28, (uint64_t)v28);
  }
  else
  {
    v12 = -1;
  }
  v17 = 0;
  v18 = (uint64_t **)(result + 2376);
  do
  {
    v19 = (int *)((char *)&unk_22466FAC0 + 12 * byte_22466FAA4[v17]);
    v20 = *v19;
    if (*v19)
      v21 = v20 == v10;
    else
      v21 = 1;
    if (v21)
    {
      v22 = v19[1];
      if (!v22 || v22 == v5)
      {
        v24 = v19[2];
        if (v24)
          v25 = v24 == v12;
        else
          v25 = 1;
        if (v25)
        {
          v27[0] = v26 + 8 * v20;
          v27[1] = v7 + 8 * v22;
          v27[2] = v9 + 8 * v24;
          result = sub_22397FD34(v18, v27, (uint64_t)v27);
        }
      }
    }
    ++v17;
  }
  while (v17 != 27);
  return result;
}

void sub_223D03264(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x227684CE8](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_223D035F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223D03618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223D0362C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_223D03650(uint64_t a1, int a2, int a3, char a4, _QWORD *a5, double a6, double a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, int8x16_t a12, int8x16_t a13)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  double v21;
  double v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int v29;
  uint64_t v30;
  double v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  double v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  double v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  double v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  double v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  double v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  double v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[12];
  int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  char v105;
  char v106;
  uint64_t v107;
  int v108;
  char v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  int v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  char v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  uint64_t v131;
  int v132;
  char v133;
  char v134;
  uint64_t v135;
  int v136;
  char v137;
  char v138;
  uint64_t v139;
  int v140;
  char v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  char v146;
  uint64_t v147;
  int v148;
  char v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  char v154;
  int v155;
  uint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  int v160;
  char v161;
  char v162;
  int v163;
  uint64_t v164;
  char v165;
  char v166;
  uint64_t v167;
  int v168;
  char v169;
  char v170;
  int v171;
  uint64_t v172;
  char v173;
  char v174;
  uint64_t v175;
  int v176;
  char v177;
  char v178;
  int v179;
  uint64_t v180;
  char v181;
  char v182;
  uint64_t v183;
  int v184;
  char v185;
  char v186;
  int v187;
  uint64_t v188;
  char v189;
  char v190;
  uint64_t v191;
  int v192;
  char v193;
  char v194;
  int v195;
  uint64_t v196;
  char v197;
  char v198;
  uint64_t v199;
  int v200;
  char v201;
  char v202;
  int v203;
  uint64_t v204;
  char v205;
  _BYTE v206[12];
  uint64_t v207;
  int v208;

  v16 = a3 & 0xCFFFFFFF;
  v17 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v18 = *(_QWORD *)v17;
  *(_DWORD *)&v206[8] = *(_DWORD *)(v17 + 8);
  *(_QWORD *)v206 = v18;
  v19 = *(_QWORD *)(v17 + 12);
  v208 = *(_DWORD *)(v17 + 20);
  v207 = v19;
  v99[0] = 1;
  *(_QWORD *)&v99[4] = -1;
  v100 = -1;
  LOBYTE(v101) = 8;
  LOBYTE(v102) = 1;
  v103 = -1;
  v104 = -1;
  v105 = 8;
  v106 = 1;
  v107 = -1;
  v108 = -1;
  v109 = 8;
  v110 = 1;
  v111 = -1;
  v112 = -1;
  v113 = 8;
  v114 = 1;
  v115 = -1;
  v116 = -1;
  v117 = 8;
  v118 = 1;
  v119 = -1;
  v120 = -1;
  v121 = 8;
  v122 = 1;
  v123 = -1;
  v124 = -1;
  v125 = 8;
  v126 = 1;
  v127 = -1;
  v128 = -1;
  v129 = 8;
  v130 = 1;
  v131 = -1;
  v132 = -1;
  v133 = 8;
  v134 = 1;
  v135 = -1;
  v136 = -1;
  v137 = 8;
  v138 = 1;
  v139 = -1;
  v140 = -1;
  v141 = 8;
  v142 = 1;
  v143 = -1;
  v144 = -1;
  v145 = 8;
  v146 = 1;
  v147 = -1;
  v148 = -1;
  v149 = 8;
  v150 = 1;
  v151 = -1;
  v152 = -1;
  v153 = 8;
  v154 = 1;
  v155 = -1;
  v156 = -1;
  v157 = 8;
  v158 = 1;
  v159 = -1;
  v160 = -1;
  v161 = 8;
  v162 = 1;
  v163 = -1;
  v164 = -1;
  v165 = 8;
  v166 = 1;
  v167 = -1;
  v168 = -1;
  v169 = 8;
  v170 = 1;
  v171 = -1;
  v172 = -1;
  v173 = 8;
  v174 = 1;
  v175 = -1;
  v176 = -1;
  v177 = 8;
  v178 = 1;
  v179 = -1;
  v180 = -1;
  v181 = 8;
  v182 = 1;
  v183 = -1;
  v184 = -1;
  v185 = 8;
  v186 = 1;
  v187 = -1;
  v188 = -1;
  v189 = 8;
  v190 = 1;
  v191 = -1;
  v192 = -1;
  v193 = 8;
  v194 = 1;
  v195 = -1;
  v196 = -1;
  v197 = 8;
  v198 = 1;
  v199 = -1;
  v200 = -1;
  v201 = 8;
  v202 = 1;
  v203 = -1;
  v204 = -1;
  v205 = 8;
  result = sub_223D03EF0(a5, a4, a2, 0, (uint64_t)v206, (uint64_t)v99, NAN, a7, a8, a9, a10, a11, a12, a13);
  if (a2)
  {
    v29 = result;
    if ((_DWORD)result != 3)
    {
      v30 = (a2 - 1);
      if ((_DWORD)v30)
      {
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 24) & 0x80000000) != 0)
        {
          v89 = (v207 - *(_DWORD *)v206) >> 1;
          *(_QWORD *)v99 = *(_QWORD *)v206;
          *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8];
          v100 = v89 + *(_DWORD *)v206;
          v101 = *(_DWORD *)&v206[4] + v89;
          v102 = *(_DWORD *)&v206[8] + v89;
          v97 = *(_OWORD *)a5;
          v98 = a5[2];
          sub_223D050B0(v30, (unsigned int *)v99, (_DWORD)result == 2, &v97, *(double *)&v97, v22, v23, v24, v25, v26, v27, v28);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 28) & 0x80000000) == 0)
          {
LABEL_6:
            sub_223D03650(a1, v30);
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 32) & 0x80000000) == 0)
              goto LABEL_7;
            goto LABEL_20;
          }
        }
        else
        {
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 28) & 0x80000000) == 0)
            goto LABEL_6;
        }
        v90 = (v207 - *(_DWORD *)v206) >> 1;
        *(_QWORD *)v99 = *(_QWORD *)v206;
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v90;
        v100 = v90 + *(_DWORD *)v206;
        v101 = *(_DWORD *)&v206[4] + v90;
        v102 = *(_DWORD *)&v206[8] + v90 + v90;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v31, v32, v33, v34, v35, v36, v37);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 32) & 0x80000000) == 0)
        {
LABEL_7:
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 36) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_21;
        }
LABEL_20:
        v91 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = *(_DWORD *)v206;
        *(_DWORD *)&v99[4] = v91 + *(_DWORD *)&v206[4];
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8];
        v100 = v91 + *(_DWORD *)v206;
        v101 = v91 + *(_DWORD *)&v206[4] + v91;
        v102 = *(_DWORD *)&v206[8] + v91;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v38, v39, v40, v41, v42, v43, v44);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 36) & 0x80000000) == 0)
        {
LABEL_8:
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 40) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_22;
        }
LABEL_21:
        v92 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = *(_DWORD *)v206;
        *(_DWORD *)&v99[4] = v92 + *(_DWORD *)&v206[4];
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v92;
        v100 = v92 + *(_DWORD *)v206;
        v101 = v92 + *(_DWORD *)&v206[4] + v92;
        v102 = *(_DWORD *)&v206[8] + v92 + v92;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v45, v46, v47, v48, v49, v50, v51);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 40) & 0x80000000) == 0)
        {
LABEL_9:
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 44) & 0x80000000) == 0)
            goto LABEL_10;
          goto LABEL_23;
        }
LABEL_22:
        v93 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = v93 + *(_DWORD *)v206;
        *(_QWORD *)&v99[4] = *(_QWORD *)&v206[4];
        v100 = v93 + *(_DWORD *)v206 + v93;
        v101 = *(_DWORD *)&v206[4] + v93;
        v102 = *(_DWORD *)&v206[8] + v93;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v52, v53, v54, v55, v56, v57, v58);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 44) & 0x80000000) == 0)
        {
LABEL_10:
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 48) & 0x80000000) == 0)
            goto LABEL_11;
          goto LABEL_24;
        }
LABEL_23:
        v94 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = v94 + *(_DWORD *)v206;
        *(_DWORD *)&v99[4] = *(_DWORD *)&v206[4];
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v94;
        v100 = v94 + *(_DWORD *)v206 + v94;
        v101 = *(_DWORD *)&v206[4] + v94;
        v102 = *(_DWORD *)&v206[8] + v94 + v94;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v59, v60, v61, v62, v63, v64, v65);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 48) & 0x80000000) == 0)
        {
LABEL_11:
          sub_223D03650(a1, v30);
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 52) & 0x80000000) == 0)
            return sub_223D03650(a1, v30);
          goto LABEL_25;
        }
LABEL_24:
        v95 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = v95 + *(_DWORD *)v206;
        *(_DWORD *)&v99[4] = v95 + *(_DWORD *)&v206[4];
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8];
        v100 = v95 + *(_DWORD *)v206 + v95;
        v101 = v95 + *(_DWORD *)&v206[4] + v95;
        v102 = *(_DWORD *)&v206[8] + v95;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v66, v67, v68, v69, v70, v71, v72);
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 4488 * v16 + 52) & 0x80000000) == 0)
          return sub_223D03650(a1, v30);
LABEL_25:
        v96 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = v96 + *(_DWORD *)v206;
        *(_DWORD *)&v99[4] = v96 + *(_DWORD *)&v206[4];
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v96;
        v100 = v96 + *(_DWORD *)v206 + v96;
        v101 = v96 + *(_DWORD *)&v206[4] + v96;
        v102 = *(_DWORD *)&v206[8] + v96 + v96;
        v97 = *(_OWORD *)a5;
        v98 = a5[2];
        return sub_223D050B0(v30, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v73, v74, v75, v76, v77, v78, v79);
      }
      for (i = 0; i != 8; ++i)
      {
        while (1)
        {
          v82 = byte_22466FA9C[i];
          v83 = *(_QWORD *)(a1 + 184);
          v84 = *(_DWORD *)(v83 + 4488 * v16 + 4 * v82 + 24);
          v85 = (v82 >> 2) & 1;
          v86 = (v82 >> 1) & 1;
          v87 = v82 & 1;
          if ((v84 & 0x80000000) == 0)
            break;
          v81 = (v207 - *(_DWORD *)v206) >> 1;
          *(_DWORD *)v99 = *(_DWORD *)v206 + v81 * v85;
          *(_DWORD *)&v99[4] = *(_DWORD *)&v206[4] + v81 * v86;
          *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v81 * v87;
          v100 = *(_DWORD *)v99 + v81;
          v101 = *(_DWORD *)&v99[4] + v81;
          v102 = *(_DWORD *)&v99[8] + v81;
          v97 = *(_OWORD *)a5;
          v98 = a5[2];
          result = sub_223D050B0(0, (unsigned int *)v99, v29 == 2, &v97, *(double *)&v97, v22, v23, v24, v25, v26, v27, v28);
          if (++i == 8)
            return result;
        }
        v88 = (v207 - *(_DWORD *)v206) >> 1;
        *(_DWORD *)v99 = *(_DWORD *)v206 + v88 * v85;
        *(_DWORD *)&v99[4] = *(_DWORD *)&v206[4] + v88 * v86;
        *(_DWORD *)&v99[8] = *(_DWORD *)&v206[8] + v88 * v87;
        v100 = *(_DWORD *)v99 + v88;
        v101 = *(_DWORD *)&v99[4] + v88;
        v102 = *(_DWORD *)&v99[8] + v88;
        result = sub_223D03EF0(a5, v29 == 2, 0, v84, (uint64_t)v99, v83 + 4488 * v16 + 540 * v82 + 68, v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
  }
  return result;
}

uint64_t sub_223D03EF0(_QWORD *a1, char a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, double a7, double a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, int8x16_t a13, int8x16_t a14)
{
  uint64_t v14;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t *v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BOOL4 v42;
  __int128 *v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 v51;
  double v52;
  double v53;
  float32x4_t v54;
  double v55;
  double v56;
  float32x4_t v57;
  double v58;
  double v59;
  float32x4_t v60;
  double v61;
  double v62;
  float32x4_t v63;
  double v64;
  double v65;
  float32x4_t v66;
  double v67;
  double v68;
  float32x4_t v69;
  double v70;
  double v71;
  float32x4_t v72;
  int v73;
  double v74;
  double v75;
  double v76;
  float32x4_t v77;
  double v78;
  double v79;
  float32x4_t v80;
  double v81;
  double v82;
  float32x4_t v83;
  double v84;
  double v85;
  float32x4_t v86;
  double v87;
  double v88;
  float32x4_t v89;
  double v90;
  double v91;
  float32x4_t v92;
  double v93;
  double v94;
  float32x4_t v95;
  double v96;
  double v97;
  float32x4_t v98;
  int v99;
  double v100;
  double v101;
  double v102;
  float32x4_t v103;
  double v104;
  double v105;
  float32x4_t v106;
  double v107;
  float32x4_t v108;
  double v109;
  float32x4_t v110;
  double v111;
  float32x4_t v112;
  double v113;
  float32x4_t v114;
  double v115;
  float32x4_t v116;
  double v117;
  float32x4_t v118;
  int v119;
  double v120;
  double v121;
  double v122;
  float32x4_t v123;
  double v124;
  float32x4_t v125;
  double v126;
  float32x4_t v127;
  double v128;
  float32x4_t v129;
  double v130;
  float32x4_t v131;
  double v132;
  float32x4_t v133;
  double v134;
  float32x4_t v135;
  double v136;
  float32x4_t v137;
  int v138;
  double v139;
  double v140;
  double v141;
  float32x4_t v142;
  double v143;
  float32x4_t v144;
  double v145;
  float32x4_t v146;
  double v147;
  float32x4_t v148;
  double v149;
  float32x4_t v150;
  double v151;
  float32x4_t v152;
  double v153;
  float32x4_t v154;
  double v155;
  float32x4_t v156;
  int v157;
  double v158;
  double v159;
  double v160;
  float32x4_t v161;
  double v162;
  float32x4_t v163;
  double v164;
  float32x4_t v165;
  double v166;
  float32x4_t v167;
  double v168;
  float32x4_t v169;
  double v170;
  float32x4_t v171;
  double v172;
  float32x4_t v173;
  double v174;
  float32x4_t v175;
  int v176;
  double v177;
  double v178;
  double v179;
  float32x4_t v180;
  double v181;
  float32x4_t v182;
  double v183;
  float32x4_t v184;
  double v185;
  float32x4_t v186;
  double v187;
  float32x4_t v188;
  double v189;
  float32x4_t v190;
  double v191;
  float32x4_t v192;
  double v193;
  float32x4_t v194;
  int v195;
  double v196;
  double v197;
  double v198;
  float32x4_t v199;
  double v200;
  float32x4_t v201;
  double v202;
  float32x4_t v203;
  double v204;
  float32x4_t v205;
  double v206;
  float32x4_t v207;
  double v208;
  float32x4_t v209;
  double v210;
  float32x4_t v211;
  double v212;
  float32x4_t v213;
  double v214;
  double v215;
  float32x4_t v216;
  int v217;
  double v218;
  double v219;
  double v220;
  float32x4_t v221;
  int v222;
  double v223;
  double v224;
  double v225;
  float32x4_t v226;
  int v227;
  double v228;
  double v229;
  double v230;
  float32x4_t v231;
  int v232;
  double v233;
  double v234;
  double v235;
  float32x4_t v236;
  int v237;
  double v238;
  double v239;
  double v240;
  float32x4_t v241;
  int v242;
  double v243;
  double v244;
  double v245;
  float32x4_t v246;
  int v247;
  double v248;
  double v249;
  double v250;
  float32x4_t v251;
  double v252;
  double v253;
  float32x4_t v254;
  double v255;
  double v256;
  float32x4_t v257;
  double v258;
  double v259;
  float32x4_t v260;
  double v261;
  double v262;
  float32x4_t v263;
  double v264;
  double v265;
  float32x4_t v266;
  double v267;
  double v268;
  float32x4_t v269;
  double v270;
  double v271;
  float32x4_t v272;
  double v273;
  double v274;
  float32x4_t v275;
  double v276;
  double v277;
  float32x4_t v278;
  double v279;
  double v280;
  float32x4_t v281;
  double v282;
  float32x4_t v283;
  double v284;
  double v285;
  double v286;
  float32x4_t v287;
  _QWORD *v288;
  unsigned int v290;
  float32x4_t v291;
  int v292;
  char v293;
  _QWORD v294[2];
  __int128 v295;
  uint64_t v296;
  _BYTE v297[20];
  int v298;
  __int128 v299;
  __int128 v300;
  BOOL *v301;
  BOOL v302;
  int32x2_t v303;
  int v304;
  _BYTE v305[32];
  __int128 v306;
  uint64_t v307;

  v14 = a6;
  v17 = 2;
  v292 = 2;
  v18 = 1;
  v293 = 1;
  memset(v294, 0, 13);
  if ((a2 & 1) != 0)
  {
    v19 = 2;
  }
  else
  {
    v20 = *a1;
    a11.i32[0] = *(_DWORD *)(*(_QWORD *)*a1 + 144);
    *(float *)&a7 = a11.f32[0] * 0.25;
    *(float32x2_t *)a9.f32 = vcvt_f32_s32(*(int32x2_t *)a5);
    a9.f32[2] = (float)*(int *)(a5 + 8);
    a10.f32[0] = a11.f32[0] * (float)((float)(int)(*(_DWORD *)(a5 + 12) - *(_QWORD *)a5) + 0.5);
    v291 = a11;
    v21 = vsubq_f32(vmulq_n_f32(a9, a11.f32[0]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0));
    *(_DWORD *)&v305[8] = v21.i32[2];
    *(_QWORD *)v305 = v21.i64[0];
    v22 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 0), v21);
    *(_DWORD *)&v305[20] = v22.i32[2];
    *(_QWORD *)&v305[12] = v22.i64[0];
    v23 = *(uint64_t **)(v20 + 8);
    v290 = a4;
    if (!*((_BYTE *)v23 + 8))
      goto LABEL_10;
    v24 = *v23;
    a9.i64[0] = *(_QWORD *)(v24 + 12);
    a9.i32[2] = *(_DWORD *)(v24 + 20);
    v25 = (int8x16_t)vsubq_f32(v21, a9);
    if (*(float *)v25.i32 > 0.0)
      goto LABEL_19;
    a9 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
    v25.i32[0] = a9.i32[0];
    *(int32x2_t *)v25.i8 = vcgtz_f32(*(float32x2_t *)v25.i8);
    if ((v25.i8[4] & 1) != 0
      || (v25.i8[0] & 1) != 0
      || (v25.i64[0] = *(_QWORD *)v24,
          v25.i32[2] = *(_DWORD *)(v24 + 8),
          v26 = (int8x16_t)vsubq_f32((float32x4_t)v25, v22),
          *(float *)v26.i32 > 0.0)
      || (v26.i32[0] = vextq_s8(v26, v26, 8uLL).u32[0],
          *(int8x8_t *)v26.i8 = vmvn_s8((int8x8_t)vcgtz_f32(*(float32x2_t *)v26.i8)),
          (v26.i8[4] & 1) == 0)
      || (v26.i8[0] & 1) == 0)
    {
LABEL_19:
      v31 = 0;
      v18 = 0;
      v17 = 0;
      *(_DWORD *)((char *)&v299 + 11) = 0;
      *(_QWORD *)((char *)&v299 + 3) = 0;
    }
    else
    {
LABEL_10:
      v288 = a1;
      *(_DWORD *)&v297[11] = 0;
      *(_QWORD *)&v297[3] = 0;
      v27 = *(uint64_t **)(v20 + 16);
      v28 = *v27;
      v29 = v27[1];
      if (*v27 != v29)
      {
        v30 = 0;
        v18 = 0;
        v31 = 0;
        while (1)
        {
          sub_223E99E04((uint64_t)v305, v28, (uint64_t)&v299, v291, a10, a11, a12, a13, a14);
          v17 = v299;
          if ((_DWORD)v299)
          {
            v18 = BYTE4(v299);
            *(_QWORD *)&v297[3] = *((_QWORD *)&v299 + 1);
            *(_DWORD *)&v297[11] = v300;
            v31 = BYTE4(v300);
            if (!BYTE4(v299))
              goto LABEL_21;
          }
          else if (BYTE4(v300) != 0 && v30 == 0)
          {
            v31 = 1;
            v17 = 0;
          }
          else
          {
            v17 = v30;
          }
          v28 += 144;
          v30 = v17;
          if (v28 == v29)
            goto LABEL_21;
        }
      }
      v31 = 0;
      v18 = 0;
      v17 = 0;
LABEL_21:
      *(_QWORD *)((char *)&v299 + 3) = *(_QWORD *)&v297[3];
      *(_DWORD *)((char *)&v299 + 11) = *(_DWORD *)&v297[11];
      v14 = a6;
      a1 = v288;
    }
    v292 = v17;
    v293 = v18;
    v294[0] = *(_QWORD *)((char *)&v299 + 3);
    LODWORD(v294[1]) = *(_DWORD *)((char *)&v299 + 11);
    BYTE4(v294[1]) = v31;
    if (!v31 || v17)
    {
      v19 = v17;
      a4 = v290;
      if (!v17)
        return 3;
    }
    else
    {
      v19 = 1;
      a4 = v290;
    }
  }
  if (!a3)
  {
    v33 = (uint64_t *)a1[1];
    v302 = (a4 & 0x80000000) == 0;
    v34 = *v33;
    if ((a4 & 0x80000000) != 0)
    {
      v37 = (unsigned int *)(v34 + 280);
    }
    else
    {
      v35 = a4;
      v36 = *(_QWORD *)(v34 + 2328);
      if (a4 >= (unint64_t)((*(_QWORD *)(v34 + 2336) - v36) >> 11))
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v36 = *(_QWORD *)(v34 + 2328);
      }
      v37 = (unsigned int *)(v36 + (v35 << 11));
    }
    *(_QWORD *)&v299 = v34;
    *((_QWORD *)&v299 + 1) = v37;
    v38 = v33[1];
    *(_QWORD *)&v300 = v38;
    *((_QWORD *)&v300 + 1) = v14;
    v301 = &v302;
    if (v17 == 2)
    {
      *(_QWORD *)&v295 = &v299;
      *((_QWORD *)&v295 + 1) = &v292;
      v303 = *(int32x2_t *)a5;
      v304 = *(_DWORD *)(a5 + 8);
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *v37;
      v41 = *(_QWORD *)v39;
      if (v18)
        v42 = 0;
      else
        v42 = **(_BYTE **)(v39 + 48) != 0;
      *(_DWORD *)&v297[8] = v294[1];
      *(_QWORD *)v297 = v294[0];
      v297[12] = 1;
      v44 = **(_DWORD **)(v39 + 8);
      v45 = **(_DWORD **)(v39 + 16);
      v46 = **(_BYTE **)(v39 + 24);
      v47 = **(_QWORD **)(v39 + 32);
      v48 = *(_QWORD *)(v39 + 40);
      v49 = *(float32x4_t *)v48;
      v50 = *(float32x4_t *)(v48 + 16);
      v51 = *(_OWORD *)(v48 + 32);
      v307 = *(_QWORD *)(v48 + 48);
      *(float32x4_t *)&v305[16] = v50;
      v306 = v51;
      *(float32x4_t *)v305 = v49;
      sub_223D06424(v41, &v303, v40, 1, v42, (uint64_t)v297, v44, v45, v49, v50, *(double *)&v51, a10, v46, v47, (uint64_t)v305);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 1;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 1u, *(double *)&v305[4], v52, v53, v54);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 2;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 2u, *(double *)&v305[4], v55, v56, v57);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 3;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 3u, *(double *)&v305[4], v58, v59, v60);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 4;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 4u, *(double *)&v305[4], v61, v62, v63);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 5;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 5u, *(double *)&v305[4], v64, v65, v66);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 6;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 6u, *(double *)&v305[4], v67, v68, v69);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 7;
      *(_QWORD *)&v305[4] = *(_QWORD *)(a5 + 4);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 7u, *(double *)&v305[4], v70, v71, v72);
      v73 = *(_DWORD *)(a5 + 4) + 1;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v73;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 8u, v74, v75, v76, v77);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 9u, *(double *)v305, v78, v79, v80);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xAu, *(double *)v305, v81, v82, v83);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xBu, *(double *)v305, v84, v85, v86);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xCu, *(double *)v305, v87, v88, v89);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xDu, *(double *)v305, v90, v91, v92);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xEu, *(double *)v305, v93, v94, v95);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0xFu, *(double *)v305, v96, v97, v98);
      v99 = *(_DWORD *)(a5 + 4) + 2;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v99;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x10u, v100, v101, v102, v103);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x11u, *(double *)v305, v104, v105, v106);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x12u, *(double *)v305, COERCE_DOUBLE(0x200000002), v107, v108);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x13u, *(double *)v305, COERCE_DOUBLE(0x200000003), v109, v110);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x14u, *(double *)v305, COERCE_DOUBLE(0x200000004), v111, v112);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x15u, *(double *)v305, COERCE_DOUBLE(0x200000005), v113, v114);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x16u, *(double *)v305, COERCE_DOUBLE(0x200000006), v115, v116);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x17u, *(double *)v305, COERCE_DOUBLE(0x200000007), v117, v118);
      v119 = *(_DWORD *)(a5 + 4) + 3;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v119;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x18u, v120, v121, v122, v123);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x19u, *(double *)v305, COERCE_DOUBLE(0x300000001), v124, v125);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Au, *(double *)v305, COERCE_DOUBLE(0x300000002), v126, v127);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Bu, *(double *)v305, COERCE_DOUBLE(0x300000003), v128, v129);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Cu, *(double *)v305, COERCE_DOUBLE(0x300000004), v130, v131);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Du, *(double *)v305, COERCE_DOUBLE(0x300000005), v132, v133);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Eu, *(double *)v305, COERCE_DOUBLE(0x300000006), v134, v135);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x300000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x1Fu, *(double *)v305, COERCE_DOUBLE(0x300000007), v136, v137);
      v138 = *(_DWORD *)(a5 + 4) + 4;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v138;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x20u, v139, v140, v141, v142);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x21u, *(double *)v305, COERCE_DOUBLE(0x400000001), v143, v144);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x22u, *(double *)v305, COERCE_DOUBLE(0x400000002), v145, v146);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x23u, *(double *)v305, COERCE_DOUBLE(0x400000003), v147, v148);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x24u, *(double *)v305, COERCE_DOUBLE(0x400000004), v149, v150);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x25u, *(double *)v305, COERCE_DOUBLE(0x400000005), v151, v152);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x26u, *(double *)v305, COERCE_DOUBLE(0x400000006), v153, v154);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x400000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x27u, *(double *)v305, COERCE_DOUBLE(0x400000007), v155, v156);
      v157 = *(_DWORD *)(a5 + 4) + 5;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v157;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x28u, v158, v159, v160, v161);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x29u, *(double *)v305, COERCE_DOUBLE(0x500000001), v162, v163);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Au, *(double *)v305, COERCE_DOUBLE(0x500000002), v164, v165);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Bu, *(double *)v305, COERCE_DOUBLE(0x500000003), v166, v167);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Cu, *(double *)v305, COERCE_DOUBLE(0x500000004), v168, v169);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Du, *(double *)v305, COERCE_DOUBLE(0x500000005), v170, v171);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Eu, *(double *)v305, COERCE_DOUBLE(0x500000006), v172, v173);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x500000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x2Fu, *(double *)v305, COERCE_DOUBLE(0x500000007), v174, v175);
      v176 = *(_DWORD *)(a5 + 4) + 6;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v176;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x30u, v177, v178, v179, v180);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x31u, *(double *)v305, COERCE_DOUBLE(0x600000001), v181, v182);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x32u, *(double *)v305, COERCE_DOUBLE(0x600000002), v183, v184);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x33u, *(double *)v305, COERCE_DOUBLE(0x600000003), v185, v186);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x34u, *(double *)v305, COERCE_DOUBLE(0x600000004), v187, v188);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x35u, *(double *)v305, COERCE_DOUBLE(0x600000005), v189, v190);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x36u, *(double *)v305, COERCE_DOUBLE(0x600000006), v191, v192);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x600000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x37u, *(double *)v305, COERCE_DOUBLE(0x600000007), v193, v194);
      v195 = *(_DWORD *)(a5 + 4) + 7;
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(_DWORD *)&v305[4] = v195;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x38u, v196, v197, v198, v199);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x39u, *(double *)v305, COERCE_DOUBLE(0x700000001), v200, v201);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Au, *(double *)v305, COERCE_DOUBLE(0x700000002), v202, v203);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Bu, *(double *)v305, COERCE_DOUBLE(0x700000003), v204, v205);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Cu, *(double *)v305, COERCE_DOUBLE(0x700000004), v206, v207);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Du, *(double *)v305, COERCE_DOUBLE(0x700000005), v208, v209);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Eu, *(double *)v305, COERCE_DOUBLE(0x700000006), v210, v211);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x700000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x3Fu, *(double *)v305, COERCE_DOUBLE(0x700000007), v212, v213);
      *(_QWORD *)v305 = *(_QWORD *)a5;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x40u, *(double *)v305, v214, v215, v216);
      v217 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 1;
      *(_DWORD *)&v305[4] = v217;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x41u, v218, v219, v220, v221);
      v222 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 2;
      *(_DWORD *)&v305[4] = v222;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x42u, v223, v224, v225, v226);
      v227 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 3;
      *(_DWORD *)&v305[4] = v227;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x43u, v228, v229, v230, v231);
      v232 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 4;
      *(_DWORD *)&v305[4] = v232;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x44u, v233, v234, v235, v236);
      v237 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 5;
      *(_DWORD *)&v305[4] = v237;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x45u, v238, v239, v240, v241);
      v242 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 6;
      *(_DWORD *)&v305[4] = v242;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x46u, v243, v244, v245, v246);
      v247 = *(_DWORD *)(a5 + 4);
      *(_DWORD *)v305 = *(_DWORD *)a5 + 7;
      *(_DWORD *)&v305[4] = v247;
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x47u, v248, v249, v250, v251);
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(int32x2_t *)&v305[4] = vadd_s32(*(int32x2_t *)(a5 + 4), (int32x2_t)0x100000001);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x48u, *(double *)&v305[4], v252, v253, v254);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x49u, *(double *)v305, v255, v256, v257);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Au, *(double *)v305, v258, v259, v260);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000003);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Bu, *(double *)v305, v261, v262, v263);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000004);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Cu, *(double *)v305, v264, v265, v266);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000005);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Du, *(double *)v305, v267, v268, v269);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000006);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Eu, *(double *)v305, v270, v271, v272);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x100000007);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x4Fu, *(double *)v305, v273, v274, v275);
      *(_DWORD *)v305 = *(_DWORD *)a5;
      *(int32x2_t *)&v305[4] = vadd_s32(*(int32x2_t *)(a5 + 4), (int32x2_t)0x100000002);
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x50u, *(double *)&v305[4], v276, v277, v278);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000001);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x51u, *(double *)v305, v279, v280, v281);
      *(int32x2_t *)v305 = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x200000002);
      *(_DWORD *)&v305[8] = *(_DWORD *)(a5 + 8) + 1;
      sub_223D0629C(v295, *((uint64_t *)&v295 + 1), (int32x2_t *)v305, 0x52u, *(double *)v305, COERCE_DOUBLE(0x200000002), v282, v283);
      sub_223D07DA0((uint64_t *)&v295, a5, v284, v285, v286, v287);
    }
    else
    {
      *(_QWORD *)v297 = *(_QWORD *)a5;
      *(_DWORD *)&v297[8] = *(_DWORD *)(a5 + 8);
      *(int32x2_t *)&v297[12] = vadd_s32(*(int32x2_t *)a5, (int32x2_t)0x800000008);
      v298 = *(_DWORD *)&v297[8] + 8;
      v43 = (__int128 *)v33[2];
      v295 = *v43;
      v296 = *((_QWORD *)v43 + 2);
      *(_QWORD *)&v306 = v301;
      *(_OWORD *)v305 = v299;
      *(_OWORD *)&v305[16] = v300;
      sub_223D05574(a5, 3, (int *)v297, &v295, (uint64_t)v305, *(double *)&v300, *(double *)&v299, a9, a10, a11, a12, a13, a14);
    }
    return 3;
  }
  if (v19 == 1)
    return 1;
  else
    return 2;
}

uint64_t sub_223D050B0(int a1, unsigned int *a2, char a3, _QWORD *a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, int8x16_t a11, int8x16_t a12)
{
  uint64_t result;
  _BOOL8 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  char v95;
  char v96;
  uint64_t v97;
  int v98;
  char v99;
  char v100;
  int v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  int v106;
  char v107;
  char v108;
  int v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  int v114;
  char v115;
  char v116;
  int v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  int v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  int v130;
  char v131;
  char v132;
  int v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  int v138;
  char v139;
  char v140;
  int v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  int v146;
  char v147;
  char v148;
  int v149;
  uint64_t v150;
  char v151;

  LOBYTE(v44) = 1;
  v45 = -1;
  v46 = -1;
  LOBYTE(v47) = 8;
  LOBYTE(v48) = 1;
  v49 = -1;
  v50 = -1;
  v51 = 8;
  v52 = 1;
  v53 = -1;
  v54 = -1;
  v55 = 8;
  v56 = 1;
  v57 = -1;
  v58 = -1;
  v59 = 8;
  v60 = 1;
  v61 = -1;
  v62 = -1;
  v63 = 8;
  v64 = 1;
  v65 = -1;
  v66 = -1;
  v67 = 8;
  v68 = 1;
  v69 = -1;
  v70 = -1;
  v71 = 8;
  v72 = 1;
  v73 = -1;
  v74 = -1;
  v75 = 8;
  v76 = 1;
  v77 = -1;
  v78 = -1;
  v79 = 8;
  v80 = 1;
  v81 = -1;
  v82 = -1;
  v83 = 8;
  v84 = 1;
  v85 = -1;
  v86 = -1;
  v87 = 8;
  v88 = 1;
  v89 = -1;
  v90 = -1;
  v91 = 8;
  v92 = 1;
  v93 = -1;
  v94 = -1;
  v95 = 8;
  v96 = 1;
  v97 = -1;
  v98 = -1;
  v99 = 8;
  v100 = 1;
  v101 = -1;
  v102 = -1;
  v103 = 8;
  v104 = 1;
  v105 = -1;
  v106 = -1;
  v107 = 8;
  v108 = 1;
  v109 = -1;
  v110 = -1;
  v111 = 8;
  v112 = 1;
  v113 = -1;
  v114 = -1;
  v115 = 8;
  v116 = 1;
  v117 = -1;
  v118 = -1;
  v119 = 8;
  v120 = 1;
  v121 = -1;
  v122 = -1;
  v123 = 8;
  v124 = 1;
  v125 = -1;
  v126 = -1;
  v127 = 8;
  v128 = 1;
  v129 = -1;
  v130 = -1;
  v131 = 8;
  v132 = 1;
  v133 = -1;
  v134 = -1;
  v135 = 8;
  v136 = 1;
  v137 = -1;
  v138 = -1;
  v139 = 8;
  v140 = 1;
  v141 = -1;
  v142 = -1;
  v143 = 8;
  v144 = 1;
  v145 = -1;
  v146 = -1;
  v147 = 8;
  v148 = 1;
  v149 = -1;
  v150 = -1;
  v151 = 8;
  result = sub_223D03EF0(a4, a3, a1, 0x80000000, (uint64_t)a2, (uint64_t)&v44, NAN, a6, a7, a8, a9, a10, a11, a12);
  if (a1)
  {
    if ((_DWORD)result != 3)
    {
      v16 = (_DWORD)result == 2;
      v17 = (a1 - 1);
      v18 = a2[1];
      v19 = a2[2];
      v20 = (a2[3] - *a2) >> 1;
      v44 = *a2;
      v45 = __PAIR64__(v19, v18);
      v46 = v20 + v44;
      v47 = v18 + v20;
      v48 = v19 + v20;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v21 = a2[1];
      v22 = a2[2];
      v23 = (a2[3] - *a2) >> 1;
      v44 = *a2;
      LODWORD(v45) = v21;
      HIDWORD(v45) = v22 + v23;
      v46 = v23 + v44;
      v47 = v21 + v23;
      v48 = v22 + v23 + v23;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v24 = a2[2];
      v25 = (a2[3] - *a2) >> 1;
      v26 = v25 + a2[1];
      v44 = *a2;
      v45 = __PAIR64__(v24, v26);
      v46 = v25 + v44;
      v47 = v26 + v25;
      v48 = v24 + v25;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v27 = a2[2];
      v28 = (a2[3] - *a2) >> 1;
      v29 = v28 + a2[1];
      v44 = *a2;
      LODWORD(v45) = v29;
      HIDWORD(v45) = v27 + v28;
      v46 = v28 + v44;
      v47 = v29 + v28;
      v48 = v27 + v28 + v28;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v30 = a2[1];
      v31 = a2[2];
      v32 = (a2[3] - *a2) >> 1;
      v44 = v32 + *a2;
      v45 = __PAIR64__(v31, v30);
      v46 = v44 + v32;
      v47 = v30 + v32;
      v48 = v31 + v32;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v33 = a2[1];
      v34 = a2[2];
      v35 = (a2[3] - *a2) >> 1;
      v44 = v35 + *a2;
      LODWORD(v45) = v33;
      HIDWORD(v45) = v34 + v35;
      v46 = v44 + v35;
      v47 = v33 + v35;
      v48 = v34 + v35 + v35;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v36 = a2[2];
      v37 = (a2[3] - *a2) >> 1;
      v38 = v37 + a2[1];
      v44 = v37 + *a2;
      v45 = __PAIR64__(v36, v38);
      v46 = v44 + v37;
      v47 = v38 + v37;
      v48 = v36 + v37;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      sub_223D050B0(v17, &v44, v16, &v42);
      v39 = a2[2];
      v40 = (a2[3] - *a2) >> 1;
      v41 = v40 + a2[1];
      v44 = v40 + *a2;
      LODWORD(v45) = v41;
      HIDWORD(v45) = v39 + v40;
      v46 = v44 + v40;
      v47 = v41 + v40;
      v48 = v39 + v40 + v40;
      v42 = *(_OWORD *)a4;
      v43 = a4[2];
      return sub_223D050B0(v17, &v44, v16, &v42);
    }
  }
  return result;
}

uint64_t sub_223D05574(uint64_t result, int a2, int *a3, _QWORD *a4, uint64_t a5, double a6, double a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, int8x16_t a12, int8x16_t a13)
{
  uint64_t *v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  __int8 v25;
  char v26;
  __int32 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  int v51;
  int v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  __int128 v64;
  __int128 v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;
  int32x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  __int32 v77;
  __int32 v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  __int128 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _DWORD *v110;
  uint64_t v111;
  double v112;
  float32x4_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  __int32 v122;
  __int32 v123;
  __int32 v124;
  __int32 v125;
  int v126;
  int v127;
  __int32 v128;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  float32x4_t v134;
  int v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int32 v141;
  __int8 v142;
  uint64_t v143;
  __int32 v144;
  char v145;
  unint64_t v146;
  int v147;
  __int128 v148;
  float32x4_t v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[16];
  float32x4_t v153;
  char *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  _BYTE *v158;
  _BYTE *v159;
  char *v160;
  _BYTE *v161;
  unsigned int *v162;
  _BYTE *v163;
  __int128 *v164;
  _QWORD *v165;
  _BYTE v166[32];
  __int128 v167;
  _BYTE *v168;
  _BYTE *v169;
  char *v170;
  _BYTE *v171;
  unsigned int *v172;
  _BYTE *v173;
  __int128 *v174;
  _QWORD *v175;
  _BYTE v176[3];
  unsigned int v177;
  int32x2_t v178;
  int v179;
  _DWORD v180[3];
  unsigned int v181;
  int v182;
  int v183;
  int32x2_t v184;
  int v185;
  _DWORD v186[3];
  unsigned int v187;
  int v188;
  int v189;
  int32x2_t v190;
  int v191;
  _DWORD v192[2];
  int v193;
  char v194;
  char v195;
  _QWORD v196[3];

  v130 = result;
  v15 = (uint64_t *)a4[1];
  a10.i32[0] = *(_DWORD *)(*a4 + 144);
  *(float *)&a6 = a10.f32[0] * 0.25;
  *(float32x2_t *)a8.f32 = vcvt_f32_s32(*(int32x2_t *)a3);
  a9.f32[0] = (float)(int)(a3[3] - *(_QWORD *)a3);
  a8.f32[2] = (float)a3[2];
  v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
  v17 = (int8x16_t)vsubq_f32(vmulq_n_f32(a8, a10.f32[0]), v16);
  *(_DWORD *)&v166[8] = v17.i32[2];
  v134 = a10;
  v16.f32[0] = a10.f32[0] * (float)(a9.f32[0] + 0.5);
  *(_QWORD *)v166 = v17.i64[0];
  v18 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0), (float32x4_t)v17);
  *(_DWORD *)&v166[20] = v18.i32[2];
  *(_QWORD *)&v166[12] = v18.i64[0];
  if (!*((_BYTE *)v15 + 8))
    goto LABEL_8;
  v19 = a5;
  v20 = *v15;
  a8.i64[0] = *(_QWORD *)(v20 + 12);
  a8.i32[2] = *(_DWORD *)(v20 + 20);
  v17 = (int8x16_t)vsubq_f32((float32x4_t)v17, a8);
  if (*(float *)v17.i32 > 0.0)
    goto LABEL_17;
  a8.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
  v17.i32[0] = a8.i32[0];
  *(int32x2_t *)v17.i8 = vcgtz_f32(*(float32x2_t *)v17.i8);
  if ((v17.i8[4] & 1) != 0
    || (v17.i8[0] & 1) != 0
    || (v17.i64[0] = *(_QWORD *)v20,
        v17.i32[2] = *(_DWORD *)(v20 + 8),
        v18 = (int8x16_t)vsubq_f32((float32x4_t)v17, (float32x4_t)v18),
        *(float *)v18.i32 > 0.0)
    || (v17.i64[0] = vextq_s8(v18, v18, 8uLL).u64[0],
        v18.i32[0] = v17.i32[0],
        *(int8x8_t *)v18.i8 = vmvn_s8((int8x8_t)vcgtz_f32(*(float32x2_t *)v18.i8)),
        (v18.i8[4] & 1) == 0)
    || (v18.i8[0] & 1) == 0)
  {
LABEL_17:
    v26 = 0;
    v25 = 0;
    v27 = 0;
    *(__int32 *)((char *)&v153.i32[2] + 3) = 0;
    *(uint64_t *)((char *)v153.i64 + 3) = 0;
  }
  else
  {
LABEL_8:
    v132 = a2;
    *(_DWORD *)((char *)&v148 + 11) = 0;
    *(_QWORD *)((char *)&v148 + 3) = 0;
    v21 = (uint64_t *)a4[2];
    v22 = *v21;
    v23 = v21[1];
    if (*v21 != v23)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      while (1)
      {
        result = sub_223E99E04((uint64_t)v166, v22, (uint64_t)&v153, v134, a9, a10, a11, a12, a13);
        v27 = v153.i32[0];
        if (v153.i32[0])
        {
          v25 = v153.i8[4];
          *(_QWORD *)((char *)&v148 + 3) = v153.i64[1];
          *(_DWORD *)((char *)&v148 + 11) = (_DWORD)v154;
          v26 = BYTE4(v154);
          if (!v153.i8[4])
            goto LABEL_19;
        }
        else if (BYTE4(v154) != 0 && v24 == 0)
        {
          v26 = 1;
          v27 = 0;
        }
        else
        {
          v27 = v24;
        }
        v22 += 144;
        v24 = v27;
        if (v22 == v23)
          goto LABEL_19;
      }
    }
    v26 = 0;
    v25 = 0;
    v27 = 0;
LABEL_19:
    *(uint64_t *)((char *)v153.i64 + 3) = *(_QWORD *)((char *)&v148 + 3);
    *(__int32 *)((char *)&v153.i32[2] + 3) = *(_DWORD *)((char *)&v148 + 11);
    v19 = a5;
    a2 = v132;
  }
  v141 = v27;
  v142 = v25;
  v143 = *(uint64_t *)((char *)v153.i64 + 3);
  v144 = *(__int32 *)((char *)&v153.i32[2] + 3);
  v145 = v26;
  if (v27)
    v28 = 1;
  else
    v28 = v26 == 0;
  if (!v28)
    v27 = 1;
  if (v27)
  {
    if (a2)
    {
      if (v27 == 1)
      {
        v29 = v19;
        v30 = (a2 - 1);
        v31 = a3[1];
        v32 = a3[2];
        v33 = (a3[3] - *a3) >> 1;
        *(_DWORD *)v166 = *a3;
        *(_DWORD *)&v166[4] = v31;
        *(_DWORD *)&v166[8] = v32;
        *(_DWORD *)&v166[12] = v33 + *(_DWORD *)v166;
        *(_DWORD *)&v166[16] = v31 + v33;
        *(_DWORD *)&v166[20] = v32 + v33;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v34 = *(_OWORD *)v29;
        v35 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v34;
        v137 = v35;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v36 = a3[1];
        v37 = a3[2];
        v38 = (a3[3] - *a3) >> 1;
        *(_DWORD *)v166 = *a3;
        *(_DWORD *)&v166[4] = v36;
        *(_DWORD *)&v166[8] = v37 + v38;
        *(_DWORD *)&v166[12] = v38 + *(_DWORD *)v166;
        *(_DWORD *)&v166[16] = v36 + v38;
        *(_DWORD *)&v166[20] = v37 + v38 + v38;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v39 = *(_OWORD *)v29;
        v40 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v39;
        v137 = v40;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v41 = a3[2];
        v42 = (a3[3] - *a3) >> 1;
        v43 = v42 + a3[1];
        *(_DWORD *)v166 = *a3;
        *(_DWORD *)&v166[4] = v43;
        *(_DWORD *)&v166[8] = v41;
        *(_DWORD *)&v166[12] = v42 + *(_DWORD *)v166;
        *(_DWORD *)&v166[16] = v43 + v42;
        *(_DWORD *)&v166[20] = v41 + v42;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v44 = *(_OWORD *)v29;
        v45 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v44;
        v137 = v45;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v46 = a3[2];
        v47 = (a3[3] - *a3) >> 1;
        v48 = v47 + a3[1];
        *(_DWORD *)v166 = *a3;
        *(_DWORD *)&v166[4] = v48;
        *(_DWORD *)&v166[8] = v46 + v47;
        *(_DWORD *)&v166[12] = v47 + *(_DWORD *)v166;
        *(_DWORD *)&v166[16] = v48 + v47;
        *(_DWORD *)&v166[20] = v46 + v47 + v47;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v49 = *(_OWORD *)v29;
        v50 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v49;
        v137 = v50;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v51 = a3[1];
        v52 = a3[2];
        v53 = (a3[3] - *a3) >> 1;
        *(_DWORD *)v166 = v53 + *a3;
        *(_DWORD *)&v166[4] = v51;
        *(_DWORD *)&v166[8] = v52;
        *(_DWORD *)&v166[12] = *(_DWORD *)v166 + v53;
        *(_DWORD *)&v166[16] = v51 + v53;
        *(_DWORD *)&v166[20] = v52 + v53;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v54 = *(_OWORD *)v29;
        v55 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v54;
        v137 = v55;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v56 = a3[1];
        v57 = a3[2];
        v58 = (a3[3] - *a3) >> 1;
        *(_DWORD *)v166 = v58 + *a3;
        *(_DWORD *)&v166[4] = v56;
        *(_DWORD *)&v166[8] = v57 + v58;
        *(_DWORD *)&v166[12] = *(_DWORD *)v166 + v58;
        *(_DWORD *)&v166[16] = v56 + v58;
        *(_DWORD *)&v166[20] = v57 + v58 + v58;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v59 = *(_OWORD *)v29;
        v60 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v59;
        v137 = v60;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v61 = a3[2];
        v62 = (a3[3] - *a3) >> 1;
        v63 = v62 + a3[1];
        *(_DWORD *)v166 = v62 + *a3;
        *(_DWORD *)&v166[4] = v63;
        *(_DWORD *)&v166[8] = v61;
        *(_DWORD *)&v166[12] = *(_DWORD *)v166 + v62;
        *(_DWORD *)&v166[16] = v63 + v62;
        *(_DWORD *)&v166[20] = v61 + v62;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v64 = *(_OWORD *)v29;
        v65 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v64;
        v137 = v65;
        sub_223D05574(v130, v30, v166, &v139, &v136);
        v66 = a3[2];
        v67 = (a3[3] - *a3) >> 1;
        v68 = v67 + a3[1];
        *(_DWORD *)v166 = v67 + *a3;
        *(_DWORD *)&v166[4] = v68;
        *(_DWORD *)&v166[8] = v66 + v67;
        *(_DWORD *)&v166[12] = *(_DWORD *)v166 + v67;
        *(_DWORD *)&v166[16] = v68 + v67;
        *(_DWORD *)&v166[20] = v66 + v67 + v67;
        v139 = *(_OWORD *)a4;
        v140 = a4[2];
        v69 = *(_OWORD *)v29;
        v70 = *(_OWORD *)(v29 + 16);
        v138 = *(_QWORD *)(v29 + 32);
        v136 = v69;
        v137 = v70;
        return sub_223D05574(v130, v30, v166, &v139, &v136);
      }
      else
      {
        v71 = *a3;
        if (*(_DWORD *)v130 > *a3)
          v71 = *(_DWORD *)v130;
        v72 = *(_DWORD *)v130 + 8;
        if (a3[3] < v72)
          v72 = a3[3];
        v127 = v72 - v71;
        if (v72 > v71)
        {
          v73 = *(int32x2_t *)(v130 + 4);
          v74 = vmax_s32(v73, *(int32x2_t *)(a3 + 1));
          v75 = vmin_s32(*(int32x2_t *)(a3 + 4), vadd_s32(v73, (int32x2_t)0x800000008));
          v76 = vcgt_s32(v75, v74);
          if ((v76.i8[0] & 1) != 0 && (v76.i8[4] & 1) != 0)
          {
            v77 = v74.i32[1];
            v122 = v75.i32[1];
            v123 = v74.i32[0];
            v125 = v75.i32[0];
            v126 = v71 & 7;
            do
            {
              v124 = v77;
              v131 = v77 & 7;
              v78 = v123;
              do
              {
                v128 = v78;
                v79 = v78 & 7;
                v80 = v126;
                v81 = (v131 << 6) | (8 * v79) | v126;
                v133 = v127 + v81;
                v135 = v79;
                do
                {
                  if (v80 >= 8)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 483, (uint64_t)"RelativePositionIsValid(pos)", 28, (uint64_t)"Invalid grid position", 21, (void (*)(void **))sub_22457406C);
                    v92 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v114 = qword_255795648;
                      v115 = qword_255795650;
                      while (v114 != v115)
                      {
                        v117 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v114;
                        v116 = *(_QWORD *)(v114 + 8);
                        v114 += 16;
                        v117(v116, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
                      }
                    }
                    v93 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
LABEL_79:
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "RelativePositionIsValid(pos)", 28, "Invalid grid position", 21);
                  }
                  v94 = *(_QWORD *)(v19 + 8);
                  v95 = *(_DWORD *)(v130 + 8);
                  v96 = *(_DWORD *)v130 + v80;
                  v97 = *(_DWORD *)(v130 + 4) + v135;
                  v146 = __PAIR64__(v97, v96);
                  v98 = v95 + v131;
                  v147 = v95 + v131;
                  if (v81 >= 0x200)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C);
                    v99 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v118 = qword_255795648;
                      v119 = qword_255795650;
                      while (v118 != v119)
                      {
                        v121 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v118;
                        v120 = *(_QWORD *)(v118 + 8);
                        v118 += 16;
                        v121(v120, "index < voxel_block.size()", 26, "Invalid grid index", 18);
                      }
                    }
                    v100 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    v19 = a5;
                    if (!byte_255795670)
                      goto LABEL_79;
                    qword_255795660(*(_QWORD *)algn_255795668, "index < voxel_block.size()", 26, "Invalid grid index", 18);
                  }
                  v101 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8);
                  result = *(_QWORD *)v101;
                  if (v141)
                  {
                    if (v142)
                      v82 = 0;
                    else
                      v82 = **(_BYTE **)(v101 + 48) != 0;
                    v83 = *(_DWORD *)(v94 + 4 * v81);
                    v153.i32[2] = v144;
                    v153.i64[0] = v143;
                    v153.i8[12] = 1;
                    v84 = **(_DWORD **)(v101 + 8);
                    v85 = **(_DWORD **)(v101 + 16);
                    v86 = **(_BYTE **)(v101 + 24);
                    v87 = **(_QWORD **)(v101 + 32);
                    v88 = *(_QWORD *)(v101 + 40);
                    v89 = *(float32x4_t *)v88;
                    v90 = *(float32x4_t *)(v88 + 16);
                    v91 = *(_OWORD *)(v88 + 32);
                    v168 = *(_BYTE **)(v88 + 48);
                    *(float32x4_t *)&v166[16] = v90;
                    v167 = v91;
                    *(float32x4_t *)v166 = v89;
                    result = sub_223D06424(result, (int32x2_t *)&v146, v83, 1, v82, (uint64_t)&v153, v84, v85, v89, v90, *(double *)&v91, a9, v86, v87, (uint64_t)v166);
                  }
                  else if (v145)
                  {
                    v152[0] = 0;
                    v152[12] = 0;
                    v102 = **(_DWORD **)(v101 + 8);
                    v103 = **(_DWORD **)(v101 + 16);
                    v104 = **(unsigned __int8 **)(v101 + 24);
                    v105 = **(_QWORD **)(v101 + 32);
                    v106 = *(__int128 **)(v101 + 40);
                    v107 = *((_QWORD *)v106 + 6);
                    v108 = *v106;
                    v109 = v106[2];
                    v149 = (float32x4_t)v106[1];
                    v150 = v109;
                    v148 = v108;
                    v151 = v107;
                    v196[0] = v105;
                    v195 = 0;
                    v194 = v104;
                    v110 = &dword_22466FAC0[3 * v104];
                    LODWORD(v105) = v110[1];
                    v192[0] = *v110;
                    v192[1] = v105;
                    v193 = v110[2];
                    v190.i32[0] = v96 - v192[0];
                    v190.i32[1] = v97 - v105;
                    v191 = v98 - v193;
                    v187 = v96 + v192[0] * v102;
                    v188 = v97 + v105 * v102;
                    v189 = v98 + v193 * v102;
                    v186[0] = v187 + v192[0];
                    v186[1] = v188 + v105;
                    v186[2] = v189 + v193;
                    v184.i32[0] = v187 + 2 * v192[0];
                    v184.i32[1] = v188 + 2 * v105;
                    v185 = v189 + 2 * v193;
                    v181 = v96 - v192[0] * v103;
                    v182 = v97 - v105 * v103;
                    v183 = v98 - v193 * v103;
                    v180[0] = v181 - v192[0];
                    v180[1] = v182 - v105;
                    v180[2] = v183 - v193;
                    v178.i32[0] = v181 - 2 * v192[0];
                    v178.i32[1] = v182 - 2 * v105;
                    v179 = v183 - 2 * v193;
                    v111 = result + 16;
                    *(float *)&v108 = 2.0 / *(float *)(result + 144);
                    v177 = vcvtms_s32_f32(*(float *)&v108);
                    memset(v176, 0, sizeof(v176));
                    *(_QWORD *)v166 = &v187;
                    *(_QWORD *)&v166[8] = &v181;
                    *(_QWORD *)&v166[16] = &v194;
                    *(_QWORD *)&v166[24] = v192;
                    *(_QWORD *)&v167 = v186;
                    *((_QWORD *)&v167 + 1) = v180;
                    v168 = v176;
                    v169 = &v176[1];
                    v170 = &v195;
                    v171 = &v176[2];
                    v172 = &v177;
                    v173 = v152;
                    v174 = &v148;
                    v175 = v196;
                    sub_223D06B18(result + 16, (int32x2_t *)&v146, &v184, (float32x4_t *)v166, *(double *)&v108, v149);
                    *(_WORD *)v176 = 0;
                    v153.i64[0] = (uint64_t)&v187;
                    v153.i64[1] = (uint64_t)&v181;
                    v154 = &v194;
                    v155 = v192;
                    v156 = v186;
                    v157 = v180;
                    v158 = v176;
                    v159 = &v176[1];
                    v160 = &v195;
                    v161 = &v176[2];
                    v162 = &v177;
                    v163 = v152;
                    v164 = &v148;
                    v165 = v196;
                    result = sub_223D06B18(v111, &v190, &v178, &v153, v112, v113);
                  }
                  ++v80;
                  ++v81;
                }
                while (v81 != v133);
                v78 = v128 + 1;
              }
              while (v128 + 1 != v125);
              v77 = v124 + 1;
            }
            while (v124 + 1 != v122);
          }
        }
      }
    }
    else
    {
      return sub_223D0629C(v19, (uint64_t)&v141, (int32x2_t *)a3, *a3 & 7 | (8 * (a3[1] & 7)) & 0x3F | ((a3[2] & 7u) << 6), *(double *)v18.i64, *(double *)v17.i64, *(double *)a8.i64, a9);
    }
  }
  return result;
}

uint64_t sub_223D0629C(uint64_t a1, uint64_t a2, int32x2_t *a3, unsigned int a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  _BOOL4 v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  __int128 v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;

  v12 = *(_QWORD *)(a1 + 8);
  if (a4 >= 0x200
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 499, (uint64_t)"index < voxel_block.size()", 26, (uint64_t)"Invalid grid index", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v14 = *(_DWORD *)(v12 + 4 * a4);
  result = *(_QWORD *)v13;
  if (*(_DWORD *)a2)
  {
    if (*(_BYTE *)(a2 + 4))
      v16 = 0;
    else
      v16 = **(_BYTE **)(v13 + 48) != 0;
    v38 = *(_DWORD *)(a2 + 16);
    v37 = *(_QWORD *)(a2 + 8);
    v39 = 1;
    v25 = **(_DWORD **)(v13 + 8);
    v26 = **(_DWORD **)(v13 + 16);
    v27 = **(_BYTE **)(v13 + 24);
    v28 = **(_QWORD **)(v13 + 32);
    v29 = *(_QWORD *)(v13 + 40);
    v30 = *(float32x4_t *)v29;
    v31 = *(float32x4_t *)(v29 + 16);
    v32 = *(_OWORD *)(v29 + 32);
    v36 = *(_QWORD *)(v29 + 48);
    v34 = v31;
    v35 = v32;
    v33 = v30;
    return sub_223D06424(result, a3, v14, 1, v16, (uint64_t)&v37, v25, v26, v30, v31, *(double *)&v32, a8, v27, v28, (uint64_t)&v33);
  }
  else if (*(_BYTE *)(a2 + 20))
  {
    LOBYTE(v37) = 0;
    v39 = 0;
    v17 = **(_DWORD **)(v13 + 8);
    v18 = **(_DWORD **)(v13 + 16);
    v19 = **(_BYTE **)(v13 + 24);
    v20 = **(_QWORD **)(v13 + 32);
    v21 = *(_QWORD *)(v13 + 40);
    v22 = *(_QWORD *)(v21 + 48);
    v23 = *(float32x4_t *)v21;
    v24 = *(_OWORD *)(v21 + 32);
    v34 = *(float32x4_t *)(v21 + 16);
    v35 = v24;
    v33 = v23;
    v36 = v22;
    return sub_223D06424(result, a3, v14, 0, 0, (uint64_t)&v37, v17, v18, v23, v34, *(double *)&v24, a8, v19, v20, (uint64_t)&v33);
  }
  return result;
}

uint64_t sub_223D06424(uint64_t a1, int32x2_t *a2, unsigned int a3, char a4, int a5, uint64_t a6, int a7, int a8, float32x4_t a9, float32x4_t a10, double a11, float32x4_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  _DWORD *v18;
  int v19;
  __int32 v20;
  __int32 v21;
  __int32 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  BOOL v33;
  float32x4_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  _DWORD *v53;
  BOOL v54;
  BOOL v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v60;
  int v61;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v72;
  int *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  BOOL v78;
  BOOL v79;
  int v80;
  int v81;
  int v82;
  _DWORD *v83;
  BOOL v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  char v90;
  int v91;
  int v92;
  int j;
  uint64_t v94;
  char v95;
  uint64_t v96;
  double v97;
  float32x4_t v98;
  int v100;
  int v101;
  int i;
  unsigned int v103;
  char v104;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  __int32 v112;
  uint64_t v113;
  float32x4_t v114;
  int v115;
  float32x4_t v116;
  unsigned __int8 *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  unint64_t *v121;
  _BYTE *v122;
  unsigned __int8 *v123;
  char *v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  float32x4_t v129;
  unsigned __int8 *v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  unint64_t *v134;
  _BYTE *v135;
  unsigned __int8 *v136;
  char *v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  char v142;
  unsigned int v143;
  int32x2_t v144;
  int v145;
  _DWORD v146[3];
  _DWORD v147[3];
  int32x2_t v148;
  int v149;
  _DWORD v150[3];
  _DWORD v151[3];
  int32x2_t v152;
  int v153;
  _DWORD v154[2];
  int v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  __int32 v159;
  uint64_t v160;
  __int32 v161;
  unint64_t v162;
  unsigned int v163;
  _BYTE v164[248];

  v17 = a1;
  v157 = a14;
  v156 = a5;
  v18 = &dword_22466FAC0[3 * a13];
  v19 = v18[1];
  v154[0] = *v18;
  v154[1] = v19;
  v155 = v18[2];
  v20 = a2->i32[0];
  v21 = a2->i32[1];
  v152.i32[0] = a2->i32[0] - v154[0];
  v152.i32[1] = v21 - v19;
  v22 = a2[1].i32[0];
  v153 = v22 - v155;
  v23 = v20 + v154[0] * a7;
  v24 = v21 + v19 * a7;
  v151[0] = v23;
  v151[1] = v24;
  v25 = v22 + v155 * a7;
  v151[2] = v25;
  v150[0] = v23 + v154[0];
  v150[1] = v24 + v19;
  v150[2] = v25 + v155;
  v148.i32[0] = v23 + 2 * v154[0];
  v148.i32[1] = v24 + 2 * v19;
  v149 = v25 + 2 * v155;
  v26 = v20 - v154[0] * a8;
  v27 = v21 - v19 * a8;
  v147[0] = v26;
  v147[1] = v27;
  v28 = v22 - v155 * a8;
  v147[2] = v28;
  v146[0] = v26 - v154[0];
  v146[1] = v27 - v19;
  v146[2] = v28 - v155;
  v144.i32[0] = v26 - 2 * v154[0];
  v144.i32[1] = v27 - 2 * v19;
  v145 = v28 - 2 * v155;
  a9.i32[0] = *(_DWORD *)(a1 + 144);
  a10.f32[0] = 2.0 / a9.f32[0];
  v143 = vcvtms_s32_f32(2.0 / a9.f32[0]);
  v142 = 0;
  if (!a5)
    goto LABEL_100;
  a10.f32[0] = (float)v26;
  v112 = v22 - v155 * a8;
  a10.f32[1] = (float)v27;
  a10.f32[2] = (float)v28;
  v32.i64[0] = 0x3F0000003F000000;
  v32.i64[1] = 0x3F0000003F000000;
  v29 = vaddq_f32(a10, v32);
  v30 = vmulq_n_f32(v29, a9.f32[0]);
  v161 = v30.i32[2];
  v160 = v30.i64[0];
  v29.f32[0] = (float)v23;
  v29.f32[1] = (float)v24;
  v29.f32[2] = (float)v25;
  v31 = vmulq_n_f32(vaddq_f32(v29, v32), a9.f32[0]);
  v159 = v31.i32[2];
  v158 = v31.i64[0];
  v114 = v30;
  a10 = vsubq_f32(v31, v30);
  v32.i32[0] = a10.i32[1];
  a12.i32[0] = a10.i32[2];
  v33 = (a10.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      ? (a10.i32[2] & 0x7FFFFFFFu) < 0x7F800000
      : (a10.i32[1] & 0x7FFFFFFFu) < 0x7F800000;
  if (!((a10.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF ? v33 : (a10.i32[0] & 0x7FFFFFFFu) < 0x7F800000))
    goto LABEL_100;
  sub_223E89E18((uint64_t)v164, (uint64_t)&v160, (uint64_t)&v158, a9.f32[0], a10, *(double *)v32.i64, a12);
  v36 = (v160 & 0x7FFFFFFF) < 0x7F800000;
  if ((v160 & 0x7FFFFFFF) <= 0x7F7FFFFF)
  {
    v36 = (HIDWORD(v160) & 0x7FFFFFFFu) < 0x7F800000;
    if ((HIDWORD(v160) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      v36 = (v161 & 0x7FFFFFFFu) < 0x7F800000;
  }
  v109 = v27;
  v110 = v26;
  v111 = v25;
  if (!v36
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
  {
LABEL_108:
    abort();
  }
  a10.i64[1] = v114.i64[1];
  a9 = vmulq_n_f32(v114, *(float *)(v17 + 148));
  *(int32x2_t *)a10.f32 = vcvt_s32_f32(vrndm_f32(*(float32x2_t *)a9.f32));
  v162 = a10.i64[0];
  a9.i32[0] = a9.i32[2];
  v163 = vcvtms_s32_f32(a9.f32[2]);
  v37 = a10.i32[0] & 0xFFFFFFF8;
  v38 = a10.i32[1] & 0xFFFFFFF8;
  v39 = v17;
  v40 = v163 & 0xFFFFFFF8;
  v41 = *(unsigned int *)(v39 + 192);
  v113 = v39;
  v103 = a3;
  v104 = a4;
  v107 = v24;
  v108 = v23;
  if ((v41 & 0x80000000) != 0)
    goto LABEL_29;
  v42 = *(_QWORD *)(v39 + 200);
  v43 = (int *)(v42 + 4488 * (v41 & 0xFFFFFFFFCFFFFFFFLL));
  v45 = *v43;
  v44 = v43[1];
  v46 = v43[2];
  v47 = v37 - *v43;
  v48 = (int)v37 < *v43 || (int)v38 < v44;
  v49 = v48 || (int)v40 < v46;
  if (v49
    || ((v50 = v43[3], v53 = v43 + 4, v51 = v43[4], v52 = v53[1], (int)v37 < v50) ? (v54 = (int)v38 < v51) : (v54 = 0),
        v54 ? (v55 = (int)v40 < v52) : (v55 = 0),
        !v55))
  {
LABEL_29:
    v41 = 0x80000000;
  }
  else
  {
    v100 = v38 - v44;
    v101 = v40 - v46;
    for (i = v50 - v45; ; v101 -= i & v101)
    {
      i >>= 1;
      v41 = *(unsigned int *)(v42
                            + 4488 * (v41 & 0xCFFFFFFF)
                            + 4 * ((4 * ((i & v47) != 0)) | (2 * ((i & v100) != 0)) | ((i & v101) != 0))
                            + 24);
      if (i == *(_DWORD *)(v113 + 152) || v41 >> 30)
        break;
      v47 -= i & v47;
      v100 -= i & v100;
    }
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v115 = 1;
  do
  {
    v64 = v162;
    v65 = HIDWORD(v162);
    v66 = v162 & 0xFFFFFFF8;
    v67 = HIDWORD(v162) & 0xFFFFFFF8;
    v68 = v163;
    v69 = v163 & 0xFFFFFFF8;
    v70 = (_DWORD)v66 == (_DWORD)v37 && (_DWORD)v67 == (_DWORD)v38;
    if (v70 && (_DWORD)v69 == (_DWORD)v40)
    {
      v66 = v37;
      v67 = v38;
      v69 = v40;
      if ((v41 & 0x80000000) != 0)
        goto LABEL_77;
    }
    else
    {
      v41 = *(unsigned int *)(v113 + 192);
      if ((v41 & 0x80000000) != 0)
        goto LABEL_70;
      v72 = *(_QWORD *)(v113 + 200);
      v73 = (int *)(v72 + 4488 * (v41 & 0xFFFFFFFFCFFFFFFFLL));
      v75 = *v73;
      v74 = v73[1];
      v76 = v73[2];
      v77 = v66 - *v73;
      v78 = (int)v66 < *v73 || (int)v67 < v74;
      v79 = v78 || (int)v69 < v76;
      if (v79
        || ((v80 = v73[3], v83 = v73 + 4, v82 = v73[4], v81 = v83[1], (int)v66 < v80)
          ? (v84 = (int)v67 < v82)
          : (v84 = 0),
            v84 ? (v85 = (int)v69 < v81) : (v85 = 0),
            !v85))
      {
LABEL_70:
        v41 = 0x80000000;
LABEL_71:
        v37 = v162 & 0xFFFFFFF8;
        v38 = HIDWORD(v162) & 0xFFFFFFF8;
        v40 = v163 & 0xFFFFFFF8;
LABEL_77:
        v87 = v113 + 296;
        goto LABEL_78;
      }
      v91 = v67 - v74;
      v92 = v69 - v76;
      for (j = v80 - v75; ; v92 -= j & v92)
      {
        j >>= 1;
        v41 = *(unsigned int *)(v72
                              + 4488 * (v41 & 0xCFFFFFFF)
                              + 4 * ((4 * ((j & v77) != 0)) | (2 * ((j & v91) != 0)) | ((j & v92) != 0))
                              + 24);
        if (j == *(_DWORD *)(v113 + 152) || v41 >> 30)
          break;
        v77 -= j & v77;
        v91 -= j & v91;
      }
      if ((v41 & 0x80000000) != 0)
        goto LABEL_71;
    }
    v86 = *(_QWORD *)(v113 + 2344);
    if (v41 >= (*(_QWORD *)(v113 + 2352) - v86) >> 11)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_108;
      }
      v86 = *(_QWORD *)(v113 + 2344);
      v64 = v162;
      v65 = HIDWORD(v162);
      v68 = v163;
    }
    v37 = v66;
    v38 = v67;
    v40 = v69;
    v87 = v86 + (v41 << 11);
LABEL_78:
    v88 = *(_DWORD *)(v87 + 4 * (v64 & 7 | (8 * (v65 & 7)) & 0x3F | ((v68 & 7) << 6)));
    if ((v88 & 0x20000000) != 0)
      v88 *= 4;
    if ((v88 & 0x40000000) == 0)
    {
      v60 = v68 == v112 && v65 == v109 && v64 == v110;
      v61 = v115;
      if (!v60)
        v61 = 0;
      v115 = v61;
      if (v68 != v111 || v65 != v107 || v64 != v108)
        v57 = 0;
      continue;
    }
    ++v58;
    ++v57;
    if ((_BYTE)v115)
      ++v56;
    v89 = v58 > 5 || v56 > 3;
    v90 = v89;
    v142 = v90;
    if (v89)
      break;
  }
  while (sub_223E8A0B8((uint64_t)v164, (uint64_t)&v162, a9, a10, v35));
  v17 = v113;
  a3 = v103;
  a4 = v104;
  if (v57 >= 4)
    v142 = 1;
LABEL_100:
  v94 = a15;
  if (v156 | (a3 >> 29))
    v95 = a4;
  else
    v95 = 0;
  v164[0] = v95;
  LOBYTE(v162) = 0;
  v96 = v17 + 16;
  v129.i64[0] = (uint64_t)v151;
  v129.i64[1] = (uint64_t)v147;
  v130 = &a13;
  v131 = v154;
  v132 = v150;
  v133 = v146;
  v134 = &v162;
  v135 = v164;
  v136 = &v156;
  v137 = &v142;
  v138 = &v143;
  v139 = a6;
  v140 = a15;
  v141 = &v157;
  sub_223D06B18(v96, a2, &v148, &v129, *(double *)a9.i64, a10);
  v164[0] = v95;
  LOBYTE(v162) = 0;
  v116.i64[0] = (uint64_t)v151;
  v116.i64[1] = (uint64_t)v147;
  v117 = &a13;
  v118 = v154;
  v119 = v150;
  v120 = v146;
  v121 = &v162;
  v122 = v164;
  v123 = &v156;
  v124 = &v142;
  v125 = &v143;
  v126 = a6;
  v127 = v94;
  v128 = &v157;
  return sub_223D06B18(v96, &v152, &v144, &v116, v97, v98);
}

uint64_t sub_223D06B18(uint64_t result, int32x2_t *a2, int32x2_t *a3, float32x4_t *a4, double a5, float32x4_t a6)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  int8x16_t v19;
  BOOL v20;
  float32x4_t v21;
  double v22;
  float32x4_t v23;
  signed int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  signed int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  signed int v47;
  signed int v48;
  signed int v49;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  signed int v55;
  int v56;
  signed int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  signed int v61;
  signed int v62;
  signed int v63;
  _DWORD *v64;
  BOOL v65;
  BOOL v66;
  int v67;
  int v68;
  int i;
  uint64_t v70;
  unsigned int v71;
  float32x4_t v72;
  signed int v73;
  _OWORD v74[7];
  uint64_t v75;
  __int32 v76;
  uint64_t v77;
  __int32 v78;
  BOOL v79;
  unsigned int v80;
  _BYTE __dst[540];
  double v82;
  unsigned int v83;
  _BYTE v84[240];
  _QWORD v85[5];
  unsigned int *v86[3];
  _QWORD v87[5];
  unsigned int *v88[5];

  v6 = *(float *)(result + 128);
  *(float32x2_t *)a6.f32 = vcvt_f32_s32(*a2);
  a6.f32[2] = (float)a2[1].i32[0];
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vaddq_f32(a6, v7);
  v9 = vmulq_n_f32(v8, v6);
  v78 = v9.i32[2];
  v77 = v9.i64[0];
  *(float32x2_t *)v8.f32 = vcvt_f32_s32(*a3);
  v8.f32[2] = (float)a3[1].i32[0];
  v10 = vmulq_n_f32(vaddq_f32(v8, v7), v6);
  v76 = v10.i32[2];
  v75 = v10.i64[0];
  v11 = a4[5];
  v74[4] = a4[4];
  v74[5] = v11;
  v74[6] = a4[6];
  v12 = a4[1];
  v74[0] = *a4;
  v74[1] = v12;
  v15 = a4[2];
  v14 = a4[3];
  v74[2] = v15;
  v74[3] = v14;
  v72 = v9;
  v13 = vsubq_f32(v10, v9);
  v14.i32[0] = v13.i32[1];
  v15.i32[0] = v13.i32[2];
  if ((v13.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v16 = (v13.i32[2] & 0x7FFFFFFFu) < 0x7F800000;
  else
    v16 = (v13.i32[1] & 0x7FFFFFFFu) < 0x7F800000;
  if ((v13.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v17 = v16;
  else
    v17 = (v13.i32[0] & 0x7FFFFFFFu) < 0x7F800000;
  if (v17)
  {
    v18 = result;
    sub_223E89E18((uint64_t)v84, (uint64_t)&v77, (uint64_t)&v75, v6, v13, *(double *)v14.i64, v15);
    v20 = (v77 & 0x7FFFFFFF) < 0x7F800000;
    if ((v77 & 0x7FFFFFFF) <= 0x7F7FFFFF)
    {
      v20 = (HIDWORD(v77) & 0x7FFFFFFFu) < 0x7F800000;
      if ((HIDWORD(v77) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        v20 = (v78 & 0x7FFFFFFFu) < 0x7F800000;
    }
    if (!v20
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.h", 372, (uint64_t)"math::IsFinite(pos)", 19, (uint64_t)"Converting nan value to voxel position", 38, (void (*)(void **))sub_22457406C))
    {
LABEL_68:
      abort();
    }
    v21 = vmulq_n_f32(v72, *(float *)(v18 + 132));
    v22 = COERCE_DOUBLE(vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v21.f32)));
    v82 = v22;
    v83 = vcvtms_s32_f32(v21.f32[2]);
    __dst[0] = 1;
    v23.i64[0] = -1;
    v23.i64[1] = -1;
    *(_QWORD *)&__dst[4] = -1;
    *(_DWORD *)&__dst[12] = -1;
    __dst[16] = 8;
    __dst[20] = 1;
    *(_QWORD *)&__dst[24] = -1;
    *(_DWORD *)&__dst[32] = -1;
    __dst[36] = 8;
    __dst[40] = 1;
    *(_QWORD *)&__dst[44] = -1;
    *(_DWORD *)&__dst[52] = -1;
    __dst[56] = 8;
    __dst[60] = 1;
    *(_QWORD *)&__dst[64] = -1;
    *(_DWORD *)&__dst[72] = -1;
    __dst[76] = 8;
    __dst[80] = 1;
    *(_QWORD *)&__dst[84] = -1;
    *(_DWORD *)&__dst[92] = -1;
    __dst[96] = 8;
    __dst[100] = 1;
    *(_QWORD *)&__dst[104] = -1;
    *(_DWORD *)&__dst[112] = -1;
    __dst[116] = 8;
    __dst[120] = 1;
    *(_QWORD *)&__dst[124] = -1;
    *(_DWORD *)&__dst[132] = -1;
    __dst[136] = 8;
    __dst[140] = 1;
    *(_QWORD *)&__dst[144] = -1;
    *(_DWORD *)&__dst[152] = -1;
    __dst[156] = 8;
    __dst[160] = 1;
    *(_QWORD *)&__dst[164] = -1;
    *(_DWORD *)&__dst[172] = -1;
    __dst[176] = 8;
    __dst[180] = 1;
    *(_QWORD *)&__dst[184] = -1;
    *(_DWORD *)&__dst[192] = -1;
    __dst[196] = 8;
    __dst[200] = 1;
    *(_QWORD *)&__dst[204] = -1;
    *(_DWORD *)&__dst[212] = -1;
    __dst[216] = 8;
    __dst[220] = 1;
    *(_QWORD *)&__dst[224] = -1;
    *(_DWORD *)&__dst[232] = -1;
    __dst[236] = 8;
    __dst[240] = 1;
    *(_QWORD *)&__dst[244] = -1;
    *(_DWORD *)&__dst[252] = -1;
    __dst[256] = 8;
    __dst[260] = 1;
    *(_QWORD *)&__dst[264] = -1;
    *(_DWORD *)&__dst[272] = -1;
    __dst[276] = 8;
    __dst[280] = 1;
    *(_DWORD *)&__dst[284] = -1;
    *(_QWORD *)&__dst[288] = -1;
    __dst[296] = 8;
    __dst[300] = 1;
    *(_QWORD *)&__dst[304] = -1;
    *(_DWORD *)&__dst[312] = -1;
    __dst[316] = 8;
    __dst[320] = 1;
    *(_DWORD *)&__dst[324] = -1;
    *(_QWORD *)&__dst[328] = -1;
    __dst[336] = 8;
    __dst[340] = 1;
    *(_QWORD *)&__dst[344] = -1;
    *(_DWORD *)&__dst[352] = -1;
    __dst[356] = 8;
    __dst[360] = 1;
    *(_DWORD *)&__dst[364] = -1;
    *(_QWORD *)&__dst[368] = -1;
    __dst[376] = 8;
    __dst[380] = 1;
    *(_QWORD *)&__dst[384] = -1;
    *(_DWORD *)&__dst[392] = -1;
    __dst[396] = 8;
    __dst[400] = 1;
    *(_DWORD *)&__dst[404] = -1;
    *(_QWORD *)&__dst[408] = -1;
    __dst[416] = 8;
    __dst[420] = 1;
    *(_QWORD *)&__dst[424] = -1;
    *(_DWORD *)&__dst[432] = -1;
    __dst[436] = 8;
    __dst[440] = 1;
    *(_DWORD *)&__dst[444] = -1;
    *(_QWORD *)&__dst[448] = -1;
    __dst[456] = 8;
    __dst[460] = 1;
    *(_QWORD *)&__dst[464] = -1;
    *(_DWORD *)&__dst[472] = -1;
    __dst[476] = 8;
    __dst[480] = 1;
    *(_DWORD *)&__dst[484] = -1;
    *(_QWORD *)&__dst[488] = -1;
    __dst[496] = 8;
    __dst[500] = 1;
    *(_QWORD *)&__dst[504] = -1;
    *(_DWORD *)&__dst[512] = -1;
    __dst[516] = 8;
    __dst[520] = 1;
    *(_DWORD *)&__dst[524] = -1;
    *(_QWORD *)&__dst[528] = -1;
    __dst[536] = 8;
    v24 = LODWORD(v22) & 0xFFFFFFF8;
    v73 = HIDWORD(v22) & 0xFFFFFFF8;
    v25 = v83 & 0xFFFFFFF8;
    v26 = *(unsigned int *)(v18 + 176);
    if ((v26 & 0x80000000) != 0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v27 = *(_QWORD *)(v18 + 184);
      v28 = (_DWORD *)(v27 + 4488 * (v26 & 0xFFFFFFFFCFFFFFFFLL));
      v29 = 0x80000000;
      v30 = v24 - *v28;
      if (v24 >= *v28)
      {
        v31 = v28[1];
        v32 = __OFSUB__(v73, v31);
        v33 = v73 - v31;
        if (v33 < 0 == v32)
        {
          v34 = v28[2];
          v32 = __OFSUB__(v25, v34);
          v35 = v25 - v34;
          if (v35 < 0 == v32)
          {
            v36 = v28[3];
            if (v24 < v36 && v73 < v28[4] && v25 < v28[5])
            {
              v37 = v36 - *v28;
              v29 = *(_DWORD *)(v18 + 176);
              while (1)
              {
                v37 >>= 1;
                v38 = (4 * ((v37 & v30) != 0)) | (2 * ((v37 & v33) != 0)) | ((v37 & v35) != 0);
                v39 = v29 & 0xCFFFFFFF;
                v29 = *(_DWORD *)(v27 + 4488 * (v29 & 0xCFFFFFFF) + 4 * v38 + 24);
                if (v37 == *(_DWORD *)(v18 + 136) || v29 >> 30)
                  break;
                v30 -= v37 & v30;
                v33 -= v37 & v33;
                v35 -= v37 & v35;
              }
              if ((v29 & 0x80000000) == 0)
                memcpy(__dst, (const void *)(v27 + 4488 * v39 + 540 * v38 + 68), sizeof(__dst));
            }
          }
        }
      }
    }
    v80 = v29;
    v79 = (v29 & 0x80000000) == 0;
    do
    {
      v41 = LOBYTE(v82);
      v42 = BYTE4(v82);
      v47 = LODWORD(v82) & 0xFFFFFFF8;
      v48 = HIDWORD(v82) & 0xFFFFFFF8;
      v43 = v83;
      v49 = v83 & 0xFFFFFFF8;
      if ((LODWORD(v82) & 0xFFFFFFF8) == v24 && v48 == v73 && v49 == v25)
      {
        v52 = v80;
        if ((v80 & 0x80000000) != 0)
          goto LABEL_55;
      }
      else
      {
        v52 = *(unsigned int *)(v18 + 176);
        if ((v52 & 0x80000000) != 0)
          goto LABEL_53;
        v53 = *(_QWORD *)(v18 + 184);
        v54 = (int *)(v53 + 4488 * (v52 & 0xFFFFFFFFCFFFFFFFLL));
        v56 = *v54;
        v55 = v54[1];
        v57 = v54[2];
        v58 = v47 - *v54;
        v59 = v47 < *v54 || v48 < v55;
        v60 = v59 || v49 < v57;
        if (v60
          || ((v61 = v54[3], v64 = v54 + 4, v62 = v54[4], v63 = v64[1], v47 < v61) ? (v65 = v48 < v62) : (v65 = 0),
              v65 ? (v66 = v49 < v63) : (v66 = 0),
              !v66))
        {
LABEL_53:
          v52 = 0x80000000;
        }
        else
        {
          v67 = v48 - v55;
          v68 = v49 - v57;
          for (i = v61 - v56; ; v68 -= i & v68)
          {
            i >>= 1;
            v70 = (4 * ((i & v58) != 0)) | (2 * ((i & v67) != 0)) | ((i & v68) != 0);
            v71 = v52 & 0xCFFFFFFF;
            v52 = *(unsigned int *)(v53 + 4488 * (v52 & 0xCFFFFFFF) + 4 * v70 + 24);
            if (i == *(_DWORD *)(v18 + 136) || v52 >> 30)
              break;
            v58 -= i & v58;
            v67 -= i & v67;
          }
          if ((v52 & 0x80000000) == 0)
            memcpy(__dst, (const void *)(v53 + 4488 * v71 + 540 * v70 + 68), sizeof(__dst));
        }
        v80 = v52;
        v79 = (v52 & 0x80000000) == 0;
        v24 = LODWORD(v82) & 0xFFFFFFF8;
        v73 = HIDWORD(v82) & 0xFFFFFFF8;
        v25 = v83 & 0xFFFFFFF8;
        if ((v52 & 0x80000000) != 0)
        {
LABEL_55:
          v88[0] = &v80;
          v88[1] = (unsigned int *)v18;
          v88[2] = (unsigned int *)&v82;
          v87[0] = v18;
          v87[1] = &v80;
          v87[2] = &v82;
          v87[3] = __dst;
          v87[4] = &v79;
          result = sub_223D0721C((int **)v74, (unsigned int *)&v82, (int *)(v18 + 272), v88, (uint64_t)v87, v23, v22, v19);
          if ((result & 1) == 0)
            return result;
          goto LABEL_30;
        }
      }
      v40 = *(_QWORD *)(v18 + 2328);
      if (v52 >= (*(_QWORD *)(v18 + 2336) - v40) >> 11)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_68;
        }
        v40 = *(_QWORD *)(v18 + 2328);
        v41 = LOBYTE(v82);
        v42 = BYTE4(v82);
        v43 = v83;
      }
      v86[0] = &v80;
      v86[1] = (unsigned int *)v18;
      v86[2] = (unsigned int *)&v82;
      v85[0] = v18;
      v85[1] = &v80;
      v85[2] = &v82;
      v85[3] = __dst;
      v85[4] = &v79;
      result = sub_223D0721C((int **)v74, (unsigned int *)&v82, (int *)(v40 + (v52 << 11) + 4* (v41 & 7 | (8 * (v42 & 7)) & 0x3F | ((v43 & 7) << 6))), v86, (uint64_t)v85, v23, v22, v19);
      if (!(_DWORD)result)
        return result;
LABEL_30:
      result = sub_223E8A0B8((uint64_t)v84, (uint64_t)&v82, v44, v45, v46);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_223D0721C(int **a1, unsigned int *a2, int *a3, unsigned int **a4, uint64_t a5, float32x4_t a6, double a7, int8x16_t a8)
{
  float32x2_t v8;
  unsigned int **v10;
  int *v11;
  int v14;
  unsigned int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  int *v30;
  unsigned int v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  BOOL *v43;
  int *v44;
  int v45;
  _BOOL4 v47;
  unsigned int v48;
  int v49;
  int v50;
  int *v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  _BOOL4 v71;
  uint64_t v72;
  float v73;
  float v74;
  int8x16_t v75;
  unsigned __int8 **v76;
  int v77;
  float32x4_t v78;
  float32x2_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x2_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t v108;
  int v109;
  int v110;
  uint64_t v111;
  float32x4_t v112;
  unsigned int v113;
  uint64_t v114;
  int *v115;
  int v116;
  int v117;
  unsigned int **v118;
  unsigned int **v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  __int32 v125;

  v10 = a4;
  v11 = a3;
  v14 = *a3;
  if ((*a3 & 0x10000000) != 0)
    v15 = 0x40000000;
  else
    v15 = 0x80000000;
  if ((v14 & 0x20000000) != 0)
    v16 = v15;
  else
    v16 = *a3 & 0xCFFFFFFF;
  v17 = *a1;
  v18 = *a2;
  v19 = **a1;
  if (*a2 == v19 && a2[1] == v17[1] && a2[2] == v17[2])
  {
    if ((v16 & 0x40000000) != 0)
      goto LABEL_11;
  }
  else
  {
    v25 = a1[1];
    if (v18 != *v25 || (v26 = a2[1], v26 != v25[1]) || (v27 = a2[2], v27 != v25[2]))
    {
      v29 = 0;
      v28 = 0;
      v30 = a1[4];
      v31 = *a2;
      if (*a2 != *v30)
        goto LABEL_49;
      goto LABEL_23;
    }
    if ((v16 & 0x40000000) != 0)
    {
      if (v18 != v19 || v26 != v17[1] || v27 != v17[2])
      {
        v113 = v15;
        v115 = a3;
        v118 = a4;
        v32 = &dword_22466FAC0[3 * *(unsigned __int8 *)a1[2]];
        v20 = 247 * *v32 + 253 * v32[1] - v32[2] + 13;
        v21 = *(_QWORD *)a5;
        v22 = **(unsigned int **)(a5 + 8);
        v116 = v16;
        if ((v22 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_30;
      }
LABEL_11:
      v113 = v15;
      v115 = a3;
      v118 = a4;
      LOBYTE(v20) = *(_BYTE *)a1[2];
      v21 = *(_QWORD *)a5;
      v22 = **(unsigned int **)(a5 + 8);
      v116 = v16;
      if ((v22 & 0x80000000) == 0)
      {
LABEL_12:
        v23 = *(_QWORD *)(v21 + 2328);
        if (v22 >= (*(_QWORD *)(v21 + 2336) - v23) >> 11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_137;
          }
          v23 = *(_QWORD *)(v21 + 2328);
        }
        v24 = v23 + (v22 << 11);
LABEL_31:
        v33 = *(_DWORD *)sub_223D07BB4(v21, v20, *(_DWORD **)(a5 + 16), v24, *(_QWORD *)(a5 + 24), **(unsigned __int8 **)(a5 + 32));
        if ((v33 & 0x20000000) != 0)
          v33 = ~(8 * v33);
        if (v33 < 0)
        {
          v29 = 1;
          v28 = 1;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v37 = byte_22466FAA4[v34];
            if (v37 != 13
              && !(*a1[3] * dword_22466FAC0[3 * byte_22466FAA4[v34]]
                 + a1[3][1] * dword_22466FAC0[3 * byte_22466FAA4[v34] + 1]
                 + dword_22466FAC0[3 * byte_22466FAA4[v34] + 2] * a1[3][2]))
            {
              v38 = *(_QWORD *)a5;
              v39 = **(unsigned int **)(a5 + 8);
              if ((v39 & 0x80000000) != 0)
              {
                v36 = v38 + 280;
              }
              else
              {
                v40 = *(_QWORD *)(v38 + 2328);
                if (v39 >= (*(_QWORD *)(v38 + 2336) - v40) >> 11)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
                  {
                    goto LABEL_137;
                  }
                  v40 = *(_QWORD *)(v38 + 2328);
                }
                v36 = v40 + (v39 << 11);
              }
              if (!(*(_DWORD *)sub_223D07BB4(v38, v37, *(_DWORD **)(a5 + 16), v36, *(_QWORD *)(a5 + 24), **(unsigned __int8 **)(a5 + 32)) >> 29))++v35;
            }
            ++v34;
          }
          while (v34 != 27);
          v28 = v35 > 4;
          v29 = 1;
        }
        v16 = v116;
        v10 = v118;
        v11 = v115;
        v15 = v113;
        v30 = a1[4];
        v31 = *a2;
        if (*a2 != *v30)
          goto LABEL_49;
        goto LABEL_23;
      }
LABEL_30:
      v24 = v21 + 280;
      goto LABEL_31;
    }
  }
  v28 = 0;
  v29 = 1;
  v30 = a1[4];
  v31 = *a2;
  if (*a2 != *v30)
    goto LABEL_49;
LABEL_23:
  if (a2[1] == v30[1] && a2[2] == v30[2])
    goto LABEL_52;
LABEL_49:
  v41 = a1[5];
  if (v31 == *v41 && a2[1] == v41[1] && a2[2] == v41[2])
LABEL_52:
    *(_BYTE *)a1[6] = 1;
  if (!*(_BYTE *)a1[6])
  {
    v43 = (BOOL *)a1[7];
    if (!*v43)
      goto LABEL_127;
    v44 = a1[8];
    v45 = *(unsigned __int8 *)v44;
    if (*(_BYTE *)v44)
    {
      v47 = (v16 & 0xC0000000) != 0 && *(_BYTE *)a1[9] == 0;
      v48 = a2[1];
      v49 = a2[2];
      if (v45)
      {
LABEL_65:
        v50 = *(unsigned __int8 *)a1[9];
        if (*(_BYTE *)a1[9])
          v50 = (int)(*a1[3] * (v31 - *a1[1]) + a1[3][1] * (v48 - a1[1][1]) + a1[3][2] * (v49 - a1[1][2])) > *a1[10]
             && v16 < 0;
        if (!v29)
          goto LABEL_76;
LABEL_73:
        v29 = v16 < 0 || v28;
LABEL_76:
        if ((((v47 | v50) & 1) != 0 || v29) && (v52 = a1[11], *((_BYTE *)v52 + 12)))
        {
          if (v29)
          {
            v53 = *a1;
            if (v31 == **a1 && v48 == v53[1])
            {
              if (v49 == v53[2])
                v54 = 3;
              else
                v54 = 1;
            }
            else
            {
              v54 = 1;
            }
          }
          else
          {
            v54 = 2;
          }
          v56 = a1[12];
          v120.i64[0] = *(_QWORD *)v52;
          v120.i32[2] = v52[2];
          v57 = *v11;
          v59 = *(_QWORD *)v56;
          v58 = *((_QWORD *)v56 + 1);
          *(float32x2_t *)a6.f32 = vcvt_f32_s32((int32x2_t)__PAIR64__(v48, v31));
          a6.f32[2] = (float)v49;
          v60 = 0x3F0000003F000000;
          v65.i64[1] = 0x3F0000003F000000;
          v61 = vaddq_f32(a6, (float32x4_t)v65);
          v62.i32[0] = *(_DWORD *)(v58 + 116);
          v65.i64[0] = *(_QWORD *)(v58 + 108);
          a6.i64[0] = *(_QWORD *)(v58 + 120);
          v63 = (float32x2_t)vzip1_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)a6.f32);
          v64 = (float32x2_t)vzip2_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)a6.f32);
          v65.i32[2] = v62.i32[0];
          a6.i32[2] = *(_DWORD *)(v58 + 128);
          v66 = (int8x16_t)vmulq_n_f32(v61, *(float *)(*(_QWORD *)v56 + 144));
          v8.i32[0] = *(_DWORD *)(v58 + 140);
          a8.i64[0] = *(_QWORD *)(v58 + 132);
          a8.i32[2] = v8.i32[0];
          v62.i32[1] = a6.i32[2];
          *(float32x2_t *)v67.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v63, v120.f32[0]), v64, *(float32x2_t *)v120.f32, 1), v62, v120, 2);
          *(float32x2_t *)v68.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v63, *(float *)v66.i32), v64, *(float32x2_t *)v66.i8, 1), v62, (float32x4_t)v66, 2);
          *(float32x2_t *)&v68.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v66.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1), *(float32x2_t *)a8.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), v8);
          v67.i64[1] = v68.i64[1];
          v69 = vsubq_f32(v67, v68);
          v70 = vabdq_f32(v67, v68);
          v125 = v70.i32[2];
          v124 = v70.i64[0];
          v71 = v70.f32[1] > v70.f32[0];
          if (v70.f32[1] > v70.f32[0])
            v70.f32[0] = v70.f32[1];
          v72 = 4 * v71;
          if (v70.f32[0] < v70.f32[2])
            v72 = 8;
          v73 = *(float *)((unint64_t)&v124 | v72);
          v74 = **((float **)v56 + 2);
          if (v74 >= v73)
            v73 = **((float **)v56 + 2);
          v75 = (int8x16_t)vmlaq_n_f32(v68, v69, (float)(v74 / v73) + -0.001);
          if (v54 == 3)
          {
            *(float *)&v75.i32[2] = *(float *)(v58 + 96) + *(float *)(v58 + 100);
            v76 = (unsigned __int8 **)(v56 + 8);
          }
          else if (v54 == 1)
          {
            v75.i32[2] = *(_DWORD *)(v58 + 96);
            v76 = (unsigned __int8 **)(v56 + 10);
          }
          else
          {
            v76 = (unsigned __int8 **)(v56 + 6);
          }
          v77 = **v76;
          *(float32x2_t *)v78.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v65.i8, *(float *)v75.i32), *(float32x2_t *)a6.f32, *(float32x2_t *)v75.i8, 1), *(float32x2_t *)a8.i8, (float32x4_t)v75, 2);
          v79 = vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), *(float32x2_t *)v75.i8), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL), *(float32x2_t *)v75.i8, 1);
          v80 = vextq_s8(a8, a8, 8uLL);
          v81 = (float32x4_t)vextq_s8(v75, v75, 8uLL);
          v82 = vmla_f32(v79, *(float32x2_t *)v81.f32, *(float32x2_t *)v80.i8);
          v120.i64[0] = v78.i64[0];
          v120.i32[2] = v82.i32[0];
          if (v57 >> 30)
            goto LABEL_119;
          v119 = v10;
          v83 = v57 & 0xFFFFFFFFCFFFFFFFLL;
          v114 = v59;
          v84 = *(_QWORD *)(v59 + 2448);
          v85 = v84 + 520 * (v57 & 0xFFFFFFFFCFFFFFFFLL);
          if (*(_BYTE *)(v85 + 336))
          {
            v117 = v16;
            *(_BYTE *)(v85 + 336) = 0;
            v86 = *(unsigned int *)(v85 + 4);
            if ((_DWORD)v86)
            {
              v108 = v82;
              v111 = v78.i64[0];
              v109 = v77;
              v110 = v54;
              v87 = 0;
              v88 = (unsigned __int8 *)(v84 + 520 * v83 + 36);
              do
              {
                v89 = *v88;
                v88 += 28;
                v87 = sub_223A4EC9C(v87, ((unint64_t)v89 << 8) | 1, 0xFFu);
                --v86;
              }
              while (v86);
              v90 = v87 >> 8;
              if (!(_BYTE)v87)
                LOBYTE(v90) = -1;
              v77 = v109;
              v54 = v110;
              v78.i64[0] = v111;
              v82 = v108;
            }
            else
            {
              LOBYTE(v90) = -1;
            }
            *(_BYTE *)(v84 + 520 * v83 + 338) = v90;
            v16 = v117;
          }
          else
          {
            LOBYTE(v90) = *(_BYTE *)(v84 + 520 * v83 + 338);
          }
          v10 = v119;
          v59 = v114;
          if (v54 != v90)
            goto LABEL_119;
          *(float32x2_t *)&v78.u32[2] = v82;
          v112 = v78;
          v91 = v85;
          v92 = v77;
          v93 = sub_223CF6DD0(v91, (float32x4_t)v80, v81);
          v77 = v92;
          v94.i64[0] = *(_QWORD *)v93;
          v94.i32[2] = *(_DWORD *)(v93 + 8);
          v95 = (int8x16_t)vsubq_f32(v94, v112);
          v96 = (float32x2_t *)*((_QWORD *)v56 + 6);
          v81 = (float32x4_t)vextq_s8(v95, v95, 8uLL);
          v97.i32[0] = v96[1].i32[0];
          *(float32x2_t *)v98.f32 = *v96;
          v98.i32[2] = v97.i32[0];
          v80 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v95, v98, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v95.i8, *v96), (float32x2_t)vdup_lane_s32((int32x2_t)*v96, 1), *(float32x2_t *)v95.i8, 1), v97, *(float32x2_t *)v81.f32), 0);
          *(int32x2_t *)v81.f32 = vdup_lane_s32(*(int32x2_t *)v80.i8, 1);
          v99 = (float32x2_t)vextq_s8(v80, v80, 8uLL).u64[0];
          v98.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8), *(float32x2_t *)v81.f32, *(float32x2_t *)v80.i8, 1), v99, v99).f32[0];
          v80.i32[0] = 992204555;
          if (v98.f32[0] >= 0.0025)
          {
LABEL_119:
            v121 = 0;
            v122 = 0;
            v123 = 0;
            v100 = sub_223CF872C(v59, (uint64_t *)&v120, &v122, v54, v77, &v121, 0, *(double *)v80.i64, v81);
            if (HIDWORD(v100))
            {
              *(_DWORD *)(*(_QWORD *)(v59 + 2448) + 520 * (v100 & 0xCFFFFFFF) + 512) = 0;
              LODWORD(v57) = v100;
            }
            else
            {
              LODWORD(v57) = 0x40000000;
            }
          }
          if ((v16 & 0x40000000) != 0)
            v101 = 805306368;
          else
            v101 = 0x20000000;
          v55 = v57 | v101;
          v43 = (BOOL *)a1[7];
          v45 = *(unsigned __int8 *)a1[8];
        }
        else if (v16 < 0)
        {
          if ((*((_BYTE *)v11 + 3) & 0x40) != 0)
            v55 = v14;
          else
            v55 = 1610612736;
        }
        else
        {
          v55 = v16;
        }
        *v43 = (v45 | (v16 >> 30)) != 0;
        v16 = v55;
        goto LABEL_127;
      }
    }
    else
    {
      v47 = 0;
      v48 = a2[1];
      v49 = a2[2];
      if (v45)
        goto LABEL_65;
    }
    v50 = 0;
    if (!v29)
      goto LABEL_76;
    goto LABEL_73;
  }
  v16 = v15;
  if ((v14 & 0x20000000) == 0)
    return 0;
LABEL_127:
  v102 = *v11;
  if (*v11 != v16)
  {
    v103 = (uint64_t)v10[1];
    v104 = sub_223D02A44(v103, (int *)v10[2], **v10);
    **v10 = v104;
    if ((v104 & 0x80000000) == 0
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 629, (uint64_t)"!VoxelBlockOctreeNode::IsUnknown(block_index)", 45, (uint64_t)"Unknown block index", 19, (void (*)(void **))sub_22457406C))
    {
      v105 = *(_QWORD *)(v103 + 2328);
      if (v104 < (unint64_t)((*(_QWORD *)(v103 + 2336) - v105) >> 11))
      {
LABEL_133:
        v106 = v105 + ((unint64_t)v104 << 11);
        sub_223D03114((char *)v103, (int *)v10[2]);
        *(_DWORD *)(v106 + 4 * (*v10[2] & 7 | (8 * (v10[2][1] & 7)) & 0x3F | ((v10[2][2] & 7) << 6))) = v16;
        v107 = *(_QWORD *)a1[13];
        if (!(v102 >> 30))
          sub_223CF7DE8(v107, v102);
        v124 = *(_QWORD *)a2;
        v125 = a2[2];
        sub_223CF89D8(v107, (int *)&v124, v102, v16);
        return 1;
      }
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 630, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
        v105 = *(_QWORD *)(v103 + 2328);
        goto LABEL_133;
      }
    }
LABEL_137:
    abort();
  }
  return 1;
}

uint64_t sub_223D07BB4(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  signed int v15;
  signed int v16;
  signed int v17;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  signed int v28;
  signed int v29;
  int v30;
  BOOL v31;
  signed int v33;
  signed int v34;
  signed int v35;
  _DWORD *v36;
  BOOL v37;
  int v40;
  int v41;
  int i;

  v6 = a3[1];
  v7 = *a3 & 0xFFFFFFF8;
  v8 = v6 & 0xFFFFFFF8;
  v9 = a3[2];
  v10 = v9 & 0xFFFFFFF8;
  v11 = (_DWORD *)((char *)&unk_22466FAC0 + 12 * a2);
  v12 = *v11 + *a3;
  v13 = v11[1] + v6;
  v14 = v11[2] + v9;
  v15 = v12 & 0xFFFFFFF8;
  v16 = v13 & 0xFFFFFFF8;
  v17 = v14 & 0xFFFFFFF8;
  if ((v12 & 0xFFFFFFF8) == v7 && v16 == v8 && v17 == v10)
    return a4 + 4 * (v12 & 7 | (8 * (v13 & 7)) & 0x3F | ((v14 & 7) << 6));
  if (a6)
  {
    v21 = ((v12 & 0xF8)
                          - v7
                          + (((v12 & 0xFFFFFFF8) - v7) >> 3)
                          + ((v16 - v8) >> 2)
                          + ((v16 - v8) >> 3)
                          + ((v17 - v10) >> 3)
                          + 13);
    if (*(_BYTE *)(a5 + 20 * v21))
    {
LABEL_31:
      a4 = a1 + 280;
      return a4 + 4 * (v12 & 7 | (8 * (v13 & 7)) & 0x3F | ((v14 & 7) << 6));
    }
    LODWORD(v22) = *(_DWORD *)(a5 + 20 * v21 + 12);
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 176);
    if ((v22 & 0x80000000) != 0)
      goto LABEL_31;
    v25 = *(_QWORD *)(a1 + 184);
    v26 = (int *)(v25 + 4488 * (v22 & 0xFFFFFFFFCFFFFFFFLL));
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v15 - *v26;
    v31 = v15 < *v26 || v16 < v28;
    if (v31 || v17 < v29)
      goto LABEL_31;
    v33 = v26[3];
    v36 = v26 + 4;
    v34 = v26[4];
    v35 = v36[1];
    v37 = v15 < v33 && v16 < v34;
    if (!v37 || v17 >= v35)
      goto LABEL_31;
    v40 = v16 - v28;
    v41 = v17 - v29;
    for (i = v33 - v27; ; v41 -= i & v41)
    {
      i >>= 1;
      LODWORD(v22) = *(_DWORD *)(v25
                               + 4488 * (v22 & 0xCFFFFFFF)
                               + 4 * ((4 * ((i & v30) != 0)) | (2 * ((i & v40) != 0)) | ((i & v41) != 0))
                               + 24);
      if (i == *(_DWORD *)(a1 + 136) || v22 >> 30)
        break;
      v30 -= i & v30;
      v40 -= i & v40;
    }
  }
  if ((v22 & 0x80000000) != 0)
    goto LABEL_31;
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 2328);
  if (v23 >= (*(_QWORD *)(a1 + 2336) - v24) >> 11)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v24 = *(_QWORD *)(a1 + 2328);
  }
  a4 = v24 + (v23 << 11);
  return a4 + 4 * (v12 & 7 | (8 * (v13 & 7)) & 0x3F | ((v14 & 7) << 6));
}

uint64_t sub_223D07DA0(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float32x4_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float32x4_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  float32x4_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  float32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  float32x4_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  float32x4_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  float32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  float32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  float32x4_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  float32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  float32x4_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  float32x4_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  float32x4_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  float32x4_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  float32x4_t v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  double v190;
  float32x4_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  double v195;
  double v196;
  double v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  double v202;
  double v203;
  double v204;
  float32x4_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  double v209;
  double v210;
  double v211;
  float32x4_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  double v216;
  double v217;
  double v218;
  float32x4_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  double v223;
  double v224;
  double v225;
  float32x4_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  double v230;
  double v231;
  double v232;
  float32x4_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  double v237;
  double v238;
  double v239;
  float32x4_t v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  double v244;
  float32x4_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  float32x4_t v249;
  uint64_t v250;
  uint64_t v251;
  double v252;
  float32x4_t v253;
  uint64_t v254;
  uint64_t v255;
  double v256;
  double v257;
  float32x4_t v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  double v262;
  float32x4_t v263;
  uint64_t v264;
  uint64_t v265;
  double v266;
  double v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  double v272;
  float32x4_t v273;
  uint64_t v274;
  uint64_t v275;
  double v276;
  double v277;
  float32x4_t v278;
  uint64_t v279;
  uint64_t v280;
  double v281;
  float32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  double v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  uint64_t v293;
  uint64_t v294;
  double v295;
  double v296;
  float32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  double v300;
  double v301;
  float32x4_t v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  double v306;
  float32x4_t v307;
  uint64_t v308;
  uint64_t v309;
  double v310;
  double v311;
  float32x4_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  double v316;
  float32x4_t v317;
  uint64_t v318;
  uint64_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  double v325;
  double v326;
  float32x4_t v327;
  uint64_t v328;
  uint64_t v329;
  double v330;
  double v331;
  float32x4_t v332;
  uint64_t v333;
  uint64_t v334;
  double v335;
  float32x4_t v336;
  uint64_t v337;
  uint64_t v338;
  double v339;
  double v340;
  float32x4_t v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  float32x4_t v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  float32x4_t v349;
  uint64_t v350;
  uint64_t v351;
  double v352;
  float32x4_t v353;
  uint64_t v354;
  uint64_t v355;
  double v356;
  double v357;
  float32x4_t v358;
  uint64_t v359;
  uint64_t v360;
  double v361;
  float32x4_t v362;
  uint64_t v363;
  uint64_t v364;
  double v365;
  float32x4_t v366;
  uint64_t v367;
  uint64_t v368;
  double v369;
  float32x4_t v370;
  uint64_t v371;
  uint64_t v372;
  double v373;
  float32x4_t v374;
  uint64_t v375;
  uint64_t v376;
  double v377;
  float32x4_t v378;
  uint64_t v379;
  uint64_t v380;
  double v381;
  float32x4_t v382;
  uint64_t v383;
  uint64_t v384;
  double v385;
  float32x4_t v386;
  uint64_t v387;
  uint64_t v388;
  double v389;
  double v390;
  float32x4_t v391;
  uint64_t v392;
  uint64_t v393;
  double v394;
  float32x4_t v395;
  uint64_t v396;
  uint64_t v397;
  double v398;
  float32x4_t v399;
  uint64_t v400;
  uint64_t v401;
  double v402;
  float32x4_t v403;
  uint64_t v404;
  uint64_t v405;
  double v406;
  float32x4_t v407;
  uint64_t v408;
  uint64_t v409;
  double v410;
  float32x4_t v411;
  uint64_t v412;
  uint64_t v413;
  double v414;
  float32x4_t v415;
  uint64_t v416;
  uint64_t v417;
  double v418;
  float32x4_t v419;
  uint64_t v420;
  uint64_t v421;
  double v422;
  double v423;
  float32x4_t v424;
  uint64_t v425;
  uint64_t v426;
  double v427;
  float32x4_t v428;
  uint64_t v429;
  uint64_t v430;
  double v431;
  float32x4_t v432;
  uint64_t v433;
  uint64_t v434;
  double v435;
  float32x4_t v436;
  uint64_t v437;
  uint64_t v438;
  double v439;
  float32x4_t v440;
  uint64_t v441;
  uint64_t v442;
  double v443;
  float32x4_t v444;
  uint64_t v445;
  uint64_t v446;
  double v447;
  float32x4_t v448;
  uint64_t v449;
  uint64_t v450;
  double v451;
  float32x4_t v452;
  uint64_t v453;
  uint64_t v454;
  double v455;
  double v456;
  float32x4_t v457;
  uint64_t v458;
  uint64_t v459;
  double v460;
  float32x4_t v461;
  uint64_t v462;
  uint64_t v463;
  double v464;
  float32x4_t v465;
  uint64_t v466;
  uint64_t v467;
  double v468;
  float32x4_t v469;
  uint64_t v470;
  uint64_t v471;
  double v472;
  float32x4_t v473;
  uint64_t v474;
  uint64_t v475;
  double v476;
  float32x4_t v477;
  uint64_t v478;
  uint64_t v479;
  double v480;
  float32x4_t v481;
  uint64_t v482;
  uint64_t v483;
  double v484;
  float32x4_t v485;
  uint64_t v486;
  uint64_t v487;
  double v488;
  double v489;
  float32x4_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  double v494;
  double v495;
  double v496;
  float32x4_t v497;
  uint64_t v498;
  uint64_t v499;
  int v500;
  double v501;
  double v502;
  double v503;
  float32x4_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  double v508;
  double v509;
  double v510;
  float32x4_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  double v515;
  double v516;
  double v517;
  float32x4_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  double v522;
  double v523;
  double v524;
  float32x4_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  double v529;
  double v530;
  double v531;
  float32x4_t v532;
  uint64_t v533;
  uint64_t v534;
  int v535;
  double v536;
  double v537;
  double v538;
  float32x4_t v539;
  uint64_t v540;
  uint64_t v541;
  double v542;
  double v543;
  float32x4_t v544;
  uint64_t v545;
  uint64_t v546;
  double v547;
  float32x4_t v548;
  uint64_t v549;
  uint64_t v550;
  double v551;
  float32x4_t v552;
  uint64_t v553;
  uint64_t v554;
  double v555;
  float32x4_t v556;
  uint64_t v557;
  uint64_t v558;
  double v559;
  float32x4_t v560;
  uint64_t v561;
  uint64_t v562;
  double v563;
  float32x4_t v564;
  uint64_t v565;
  uint64_t v566;
  double v567;
  float32x4_t v568;
  uint64_t v569;
  uint64_t v570;
  double v571;
  float32x4_t v572;
  uint64_t v573;
  uint64_t v574;
  double v575;
  double v576;
  float32x4_t v577;
  uint64_t v578;
  uint64_t v579;
  double v580;
  double v581;
  float32x4_t v582;
  uint64_t v583;
  uint64_t v584;
  double v585;
  float32x4_t v586;
  uint64_t v587;
  uint64_t v588;
  double v589;
  float32x4_t v590;
  uint64_t v591;
  uint64_t v592;
  double v593;
  float32x4_t v594;
  uint64_t v595;
  uint64_t v596;
  double v597;
  double v598;
  float32x4_t v599;
  uint64_t v600;
  uint64_t v601;
  double v602;
  double v603;
  float32x4_t v604;
  uint64_t v605;
  uint64_t v606;
  double v607;
  double v608;
  float32x4_t v609;
  uint64_t v610;
  uint64_t v611;
  double v612;
  double v613;
  float32x4_t v614;
  uint64_t v615;
  uint64_t v616;
  double v617;
  double v618;
  float32x4_t v619;
  uint64_t v620;
  uint64_t v621;
  double v622;
  double v623;
  float32x4_t v624;
  uint64_t v625;
  uint64_t v626;
  double v627;
  double v628;
  float32x4_t v629;
  uint64_t v630;
  uint64_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  uint64_t v635;
  uint64_t v636;
  double v637;
  float32x4_t v638;
  uint64_t v639;
  uint64_t v640;
  double v641;
  float32x4_t v642;
  uint64_t v643;
  uint64_t v644;
  double v645;
  float32x4_t v646;
  uint64_t v647;
  uint64_t v648;
  double v649;
  double v650;
  float32x4_t v651;
  uint64_t v652;
  uint64_t v653;
  double v654;
  float32x4_t v655;
  double v656;
  double v657;
  double v658;
  float32x4_t v659;
  _BYTE v661[12];

  v8 = *a1;
  v9 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v8, v9, (int32x2_t *)v661, 0x53u, *(double *)v661, COERCE_DOUBLE(0x200000003), a5, a6);
  v10 = *a1;
  v11 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v10, v11, (int32x2_t *)v661, 0x54u, *(double *)v661, COERCE_DOUBLE(0x200000004), v12, v13);
  v14 = *a1;
  v15 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v14, v15, (int32x2_t *)v661, 0x55u, *(double *)v661, COERCE_DOUBLE(0x200000005), v16, v17);
  v18 = *a1;
  v19 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v18, v19, (int32x2_t *)v661, 0x56u, *(double *)v661, COERCE_DOUBLE(0x200000006), v20, v21);
  v22 = *a1;
  v23 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v22, v23, (int32x2_t *)v661, 0x57u, *(double *)v661, v24, v25, v26);
  v27 = *a1;
  v28 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000003);
  sub_223D0629C(v27, v28, (int32x2_t *)v661, 0x58u, *(double *)&v661[4], COERCE_DOUBLE(0x100000003), v29, v30);
  v31 = *a1;
  v32 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v31, v32, (int32x2_t *)v661, 0x59u, *(double *)v661, COERCE_DOUBLE(0x300000001), v33, v34);
  v35 = *a1;
  v36 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v35, v36, (int32x2_t *)v661, 0x5Au, *(double *)v661, COERCE_DOUBLE(0x300000002), v37, v38);
  v39 = *a1;
  v40 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v39, v40, (int32x2_t *)v661, 0x5Bu, *(double *)v661, COERCE_DOUBLE(0x300000003), v41, v42);
  v43 = *a1;
  v44 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v43, v44, (int32x2_t *)v661, 0x5Cu, *(double *)v661, COERCE_DOUBLE(0x300000004), v45, v46);
  v47 = *a1;
  v48 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v47, v48, (int32x2_t *)v661, 0x5Du, *(double *)v661, COERCE_DOUBLE(0x300000005), v49, v50);
  v51 = *a1;
  v52 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v51, v52, (int32x2_t *)v661, 0x5Eu, *(double *)v661, COERCE_DOUBLE(0x300000006), v53, v54);
  v55 = *a1;
  v56 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v55, v56, (int32x2_t *)v661, 0x5Fu, *(double *)v661, COERCE_DOUBLE(0x300000007), v57, v58);
  v59 = *a1;
  v60 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000004);
  sub_223D0629C(v59, v60, (int32x2_t *)v661, 0x60u, *(double *)&v661[4], COERCE_DOUBLE(0x100000004), v61, v62);
  v63 = *a1;
  v64 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v63, v64, (int32x2_t *)v661, 0x61u, *(double *)v661, COERCE_DOUBLE(0x400000001), v65, v66);
  v67 = *a1;
  v68 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v67, v68, (int32x2_t *)v661, 0x62u, *(double *)v661, COERCE_DOUBLE(0x400000002), v69, v70);
  v71 = *a1;
  v72 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v71, v72, (int32x2_t *)v661, 0x63u, *(double *)v661, COERCE_DOUBLE(0x400000003), v73, v74);
  v75 = *a1;
  v76 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v75, v76, (int32x2_t *)v661, 0x64u, *(double *)v661, COERCE_DOUBLE(0x400000004), v77, v78);
  v79 = *a1;
  v80 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v79, v80, (int32x2_t *)v661, 0x65u, *(double *)v661, COERCE_DOUBLE(0x400000005), v81, v82);
  v83 = *a1;
  v84 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v83, v84, (int32x2_t *)v661, 0x66u, *(double *)v661, COERCE_DOUBLE(0x400000006), v85, v86);
  v87 = *a1;
  v88 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v87, v88, (int32x2_t *)v661, 0x67u, *(double *)v661, COERCE_DOUBLE(0x400000007), v89, v90);
  v91 = *a1;
  v92 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000005);
  sub_223D0629C(v91, v92, (int32x2_t *)v661, 0x68u, *(double *)&v661[4], COERCE_DOUBLE(0x100000005), v93, v94);
  v95 = *a1;
  v96 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v95, v96, (int32x2_t *)v661, 0x69u, *(double *)v661, COERCE_DOUBLE(0x500000001), v97, v98);
  v99 = *a1;
  v100 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v99, v100, (int32x2_t *)v661, 0x6Au, *(double *)v661, COERCE_DOUBLE(0x500000002), v101, v102);
  v103 = *a1;
  v104 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v103, v104, (int32x2_t *)v661, 0x6Bu, *(double *)v661, COERCE_DOUBLE(0x500000003), v105, v106);
  v107 = *a1;
  v108 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v107, v108, (int32x2_t *)v661, 0x6Cu, *(double *)v661, COERCE_DOUBLE(0x500000004), v109, v110);
  v111 = *a1;
  v112 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v111, v112, (int32x2_t *)v661, 0x6Du, *(double *)v661, COERCE_DOUBLE(0x500000005), v113, v114);
  v115 = *a1;
  v116 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v115, v116, (int32x2_t *)v661, 0x6Eu, *(double *)v661, COERCE_DOUBLE(0x500000006), v117, v118);
  v119 = *a1;
  v120 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v119, v120, (int32x2_t *)v661, 0x6Fu, *(double *)v661, COERCE_DOUBLE(0x500000007), v121, v122);
  v123 = *a1;
  v124 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000006);
  sub_223D0629C(v123, v124, (int32x2_t *)v661, 0x70u, *(double *)&v661[4], COERCE_DOUBLE(0x100000006), v125, v126);
  v127 = *a1;
  v128 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v127, v128, (int32x2_t *)v661, 0x71u, *(double *)v661, COERCE_DOUBLE(0x600000001), v129, v130);
  v131 = *a1;
  v132 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v131, v132, (int32x2_t *)v661, 0x72u, *(double *)v661, COERCE_DOUBLE(0x600000002), v133, v134);
  v135 = *a1;
  v136 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v135, v136, (int32x2_t *)v661, 0x73u, *(double *)v661, COERCE_DOUBLE(0x600000003), v137, v138);
  v139 = *a1;
  v140 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v139, v140, (int32x2_t *)v661, 0x74u, *(double *)v661, COERCE_DOUBLE(0x600000004), v141, v142);
  v143 = *a1;
  v144 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v143, v144, (int32x2_t *)v661, 0x75u, *(double *)v661, COERCE_DOUBLE(0x600000005), v145, v146);
  v147 = *a1;
  v148 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v147, v148, (int32x2_t *)v661, 0x76u, *(double *)v661, COERCE_DOUBLE(0x600000006), v149, v150);
  v151 = *a1;
  v152 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v151, v152, (int32x2_t *)v661, 0x77u, *(double *)v661, COERCE_DOUBLE(0x600000007), v153, v154);
  v155 = *a1;
  v156 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x100000007);
  sub_223D0629C(v155, v156, (int32x2_t *)v661, 0x78u, *(double *)&v661[4], COERCE_DOUBLE(0x100000007), v157, v158);
  v159 = *a1;
  v160 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v159, v160, (int32x2_t *)v661, 0x79u, *(double *)v661, COERCE_DOUBLE(0x700000001), v161, v162);
  v163 = *a1;
  v164 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v163, v164, (int32x2_t *)v661, 0x7Au, *(double *)v661, COERCE_DOUBLE(0x700000002), v165, v166);
  v167 = *a1;
  v168 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v167, v168, (int32x2_t *)v661, 0x7Bu, *(double *)v661, COERCE_DOUBLE(0x700000003), v169, v170);
  v171 = *a1;
  v172 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v171, v172, (int32x2_t *)v661, 0x7Cu, *(double *)v661, COERCE_DOUBLE(0x700000004), v173, v174);
  v175 = *a1;
  v176 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v175, v176, (int32x2_t *)v661, 0x7Du, *(double *)v661, COERCE_DOUBLE(0x700000005), v177, v178);
  v179 = *a1;
  v180 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v179, v180, (int32x2_t *)v661, 0x7Eu, *(double *)v661, COERCE_DOUBLE(0x700000006), v181, v182);
  v183 = *a1;
  v184 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 1;
  sub_223D0629C(v183, v184, (int32x2_t *)v661, 0x7Fu, *(double *)v661, COERCE_DOUBLE(0x700000007), v185, v186);
  v187 = *a1;
  v188 = a1[1];
  *(_QWORD *)v661 = *(_QWORD *)a2;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v187, v188, (int32x2_t *)v661, 0x80u, *(double *)v661, v189, v190, v191);
  v192 = *a1;
  v193 = a1[1];
  v194 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v661[4] = v194;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v192, v193, (int32x2_t *)v661, 0x81u, v195, v196, v197, v198);
  v199 = *a1;
  v200 = a1[1];
  v201 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v661[4] = v201;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v199, v200, (int32x2_t *)v661, 0x82u, v202, v203, v204, v205);
  v206 = *a1;
  v207 = a1[1];
  v208 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v661[4] = v208;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v206, v207, (int32x2_t *)v661, 0x83u, v209, v210, v211, v212);
  v213 = *a1;
  v214 = a1[1];
  v215 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v661[4] = v215;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v213, v214, (int32x2_t *)v661, 0x84u, v216, v217, v218, v219);
  v220 = *a1;
  v221 = a1[1];
  v222 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v661[4] = v222;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v220, v221, (int32x2_t *)v661, 0x85u, v223, v224, v225, v226);
  v227 = *a1;
  v228 = a1[1];
  v229 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v661[4] = v229;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v227, v228, (int32x2_t *)v661, 0x86u, v230, v231, v232, v233);
  v234 = *a1;
  v235 = a1[1];
  v236 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v661[4] = v236;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v234, v235, (int32x2_t *)v661, 0x87u, v237, v238, v239, v240);
  v241 = *a1;
  v242 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000001);
  sub_223D0629C(v241, v242, (int32x2_t *)v661, 0x88u, *(double *)&v661[4], v243, v244, v245);
  v246 = *a1;
  v247 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v246, v247, (int32x2_t *)v661, 0x89u, *(double *)v661, COERCE_DOUBLE(0x100000001), v248, v249);
  v250 = *a1;
  v251 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v250, v251, (int32x2_t *)v661, 0x8Au, *(double *)v661, COERCE_DOUBLE(0x100000002), v252, v253);
  v254 = *a1;
  v255 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v254, v255, (int32x2_t *)v661, 0x8Bu, *(double *)v661, v256, v257, v258);
  v259 = *a1;
  v260 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v259, v260, (int32x2_t *)v661, 0x8Cu, *(double *)v661, v261, v262, v263);
  v264 = *a1;
  v265 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v264, v265, (int32x2_t *)v661, 0x8Du, *(double *)v661, v266, v267, v268);
  v269 = *a1;
  v270 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v269, v270, (int32x2_t *)v661, 0x8Eu, *(double *)v661, v271, v272, v273);
  v274 = *a1;
  v275 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v274, v275, (int32x2_t *)v661, 0x8Fu, *(double *)v661, v276, v277, v278);
  v279 = *a1;
  v280 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000002);
  sub_223D0629C(v279, v280, (int32x2_t *)v661, 0x90u, *(double *)&v661[4], COERCE_DOUBLE(0x200000002), v281, v282);
  v283 = *a1;
  v284 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v283, v284, (int32x2_t *)v661, 0x91u, *(double *)v661, v285, v286, v287);
  v288 = *a1;
  v289 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v288, v289, (int32x2_t *)v661, 0x92u, *(double *)v661, v290, v291, v292);
  v293 = *a1;
  v294 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v293, v294, (int32x2_t *)v661, 0x93u, *(double *)v661, v295, v296, v297);
  v298 = *a1;
  v299 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v298, v299, (int32x2_t *)v661, 0x94u, *(double *)v661, v300, v301, v302);
  v303 = *a1;
  v304 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v303, v304, (int32x2_t *)v661, 0x95u, *(double *)v661, v305, v306, v307);
  v308 = *a1;
  v309 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v308, v309, (int32x2_t *)v661, 0x96u, *(double *)v661, v310, v311, v312);
  v313 = *a1;
  v314 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v313, v314, (int32x2_t *)v661, 0x97u, *(double *)v661, v315, v316, v317);
  v318 = *a1;
  v319 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000003);
  sub_223D0629C(v318, v319, (int32x2_t *)v661, 0x98u, *(double *)&v661[4], v320, v321, v322);
  v323 = *a1;
  v324 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v323, v324, (int32x2_t *)v661, 0x99u, *(double *)v661, v325, v326, v327);
  v328 = *a1;
  v329 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v328, v329, (int32x2_t *)v661, 0x9Au, *(double *)v661, v330, v331, v332);
  v333 = *a1;
  v334 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v333, v334, (int32x2_t *)v661, 0x9Bu, *(double *)v661, COERCE_DOUBLE(0x300000003), v335, v336);
  v337 = *a1;
  v338 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v337, v338, (int32x2_t *)v661, 0x9Cu, *(double *)v661, v339, v340, v341);
  v342 = *a1;
  v343 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v342, v343, (int32x2_t *)v661, 0x9Du, *(double *)v661, COERCE_DOUBLE(0x300000005), v344, v345);
  v346 = *a1;
  v347 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v346, v347, (int32x2_t *)v661, 0x9Eu, *(double *)v661, COERCE_DOUBLE(0x300000006), v348, v349);
  v350 = *a1;
  v351 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v350, v351, (int32x2_t *)v661, 0x9Fu, *(double *)v661, COERCE_DOUBLE(0x300000007), v352, v353);
  v354 = *a1;
  v355 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000004);
  sub_223D0629C(v354, v355, (int32x2_t *)v661, 0xA0u, *(double *)&v661[4], v356, v357, v358);
  v359 = *a1;
  v360 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v359, v360, (int32x2_t *)v661, 0xA1u, *(double *)v661, COERCE_DOUBLE(0x400000001), v361, v362);
  v363 = *a1;
  v364 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v363, v364, (int32x2_t *)v661, 0xA2u, *(double *)v661, COERCE_DOUBLE(0x400000002), v365, v366);
  v367 = *a1;
  v368 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v367, v368, (int32x2_t *)v661, 0xA3u, *(double *)v661, COERCE_DOUBLE(0x400000003), v369, v370);
  v371 = *a1;
  v372 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v371, v372, (int32x2_t *)v661, 0xA4u, *(double *)v661, COERCE_DOUBLE(0x400000004), v373, v374);
  v375 = *a1;
  v376 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v375, v376, (int32x2_t *)v661, 0xA5u, *(double *)v661, COERCE_DOUBLE(0x400000005), v377, v378);
  v379 = *a1;
  v380 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v379, v380, (int32x2_t *)v661, 0xA6u, *(double *)v661, COERCE_DOUBLE(0x400000006), v381, v382);
  v383 = *a1;
  v384 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v383, v384, (int32x2_t *)v661, 0xA7u, *(double *)v661, COERCE_DOUBLE(0x400000007), v385, v386);
  v387 = *a1;
  v388 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000005);
  sub_223D0629C(v387, v388, (int32x2_t *)v661, 0xA8u, *(double *)&v661[4], v389, v390, v391);
  v392 = *a1;
  v393 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v392, v393, (int32x2_t *)v661, 0xA9u, *(double *)v661, COERCE_DOUBLE(0x500000001), v394, v395);
  v396 = *a1;
  v397 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v396, v397, (int32x2_t *)v661, 0xAAu, *(double *)v661, COERCE_DOUBLE(0x500000002), v398, v399);
  v400 = *a1;
  v401 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v400, v401, (int32x2_t *)v661, 0xABu, *(double *)v661, COERCE_DOUBLE(0x500000003), v402, v403);
  v404 = *a1;
  v405 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v404, v405, (int32x2_t *)v661, 0xACu, *(double *)v661, COERCE_DOUBLE(0x500000004), v406, v407);
  v408 = *a1;
  v409 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v408, v409, (int32x2_t *)v661, 0xADu, *(double *)v661, COERCE_DOUBLE(0x500000005), v410, v411);
  v412 = *a1;
  v413 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v412, v413, (int32x2_t *)v661, 0xAEu, *(double *)v661, COERCE_DOUBLE(0x500000006), v414, v415);
  v416 = *a1;
  v417 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v416, v417, (int32x2_t *)v661, 0xAFu, *(double *)v661, COERCE_DOUBLE(0x500000007), v418, v419);
  v420 = *a1;
  v421 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000006);
  sub_223D0629C(v420, v421, (int32x2_t *)v661, 0xB0u, *(double *)&v661[4], v422, v423, v424);
  v425 = *a1;
  v426 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v425, v426, (int32x2_t *)v661, 0xB1u, *(double *)v661, COERCE_DOUBLE(0x600000001), v427, v428);
  v429 = *a1;
  v430 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v429, v430, (int32x2_t *)v661, 0xB2u, *(double *)v661, COERCE_DOUBLE(0x600000002), v431, v432);
  v433 = *a1;
  v434 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v433, v434, (int32x2_t *)v661, 0xB3u, *(double *)v661, COERCE_DOUBLE(0x600000003), v435, v436);
  v437 = *a1;
  v438 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v437, v438, (int32x2_t *)v661, 0xB4u, *(double *)v661, COERCE_DOUBLE(0x600000004), v439, v440);
  v441 = *a1;
  v442 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v441, v442, (int32x2_t *)v661, 0xB5u, *(double *)v661, COERCE_DOUBLE(0x600000005), v443, v444);
  v445 = *a1;
  v446 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v445, v446, (int32x2_t *)v661, 0xB6u, *(double *)v661, COERCE_DOUBLE(0x600000006), v447, v448);
  v449 = *a1;
  v450 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v449, v450, (int32x2_t *)v661, 0xB7u, *(double *)v661, COERCE_DOUBLE(0x600000007), v451, v452);
  v453 = *a1;
  v454 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x200000007);
  sub_223D0629C(v453, v454, (int32x2_t *)v661, 0xB8u, *(double *)&v661[4], v455, v456, v457);
  v458 = *a1;
  v459 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v458, v459, (int32x2_t *)v661, 0xB9u, *(double *)v661, COERCE_DOUBLE(0x700000001), v460, v461);
  v462 = *a1;
  v463 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v462, v463, (int32x2_t *)v661, 0xBAu, *(double *)v661, COERCE_DOUBLE(0x700000002), v464, v465);
  v466 = *a1;
  v467 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v466, v467, (int32x2_t *)v661, 0xBBu, *(double *)v661, COERCE_DOUBLE(0x700000003), v468, v469);
  v470 = *a1;
  v471 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v470, v471, (int32x2_t *)v661, 0xBCu, *(double *)v661, COERCE_DOUBLE(0x700000004), v472, v473);
  v474 = *a1;
  v475 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v474, v475, (int32x2_t *)v661, 0xBDu, *(double *)v661, COERCE_DOUBLE(0x700000005), v476, v477);
  v478 = *a1;
  v479 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v478, v479, (int32x2_t *)v661, 0xBEu, *(double *)v661, COERCE_DOUBLE(0x700000006), v480, v481);
  v482 = *a1;
  v483 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 2;
  sub_223D0629C(v482, v483, (int32x2_t *)v661, 0xBFu, *(double *)v661, COERCE_DOUBLE(0x700000007), v484, v485);
  v486 = *a1;
  v487 = a1[1];
  *(_QWORD *)v661 = *(_QWORD *)a2;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v486, v487, (int32x2_t *)v661, 0xC0u, *(double *)v661, v488, v489, v490);
  v491 = *a1;
  v492 = a1[1];
  v493 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v661[4] = v493;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v491, v492, (int32x2_t *)v661, 0xC1u, v494, v495, v496, v497);
  v498 = *a1;
  v499 = a1[1];
  v500 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v661[4] = v500;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v498, v499, (int32x2_t *)v661, 0xC2u, v501, v502, v503, v504);
  v505 = *a1;
  v506 = a1[1];
  v507 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v661[4] = v507;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v505, v506, (int32x2_t *)v661, 0xC3u, v508, v509, v510, v511);
  v512 = *a1;
  v513 = a1[1];
  v514 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v661[4] = v514;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v512, v513, (int32x2_t *)v661, 0xC4u, v515, v516, v517, v518);
  v519 = *a1;
  v520 = a1[1];
  v521 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v661[4] = v521;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v519, v520, (int32x2_t *)v661, 0xC5u, v522, v523, v524, v525);
  v526 = *a1;
  v527 = a1[1];
  v528 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v661[4] = v528;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v526, v527, (int32x2_t *)v661, 0xC6u, v529, v530, v531, v532);
  v533 = *a1;
  v534 = a1[1];
  v535 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v661 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v661[4] = v535;
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v533, v534, (int32x2_t *)v661, 0xC7u, v536, v537, v538, v539);
  v540 = *a1;
  v541 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000001);
  sub_223D0629C(v540, v541, (int32x2_t *)v661, 0xC8u, *(double *)&v661[4], v542, v543, v544);
  v545 = *a1;
  v546 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v545, v546, (int32x2_t *)v661, 0xC9u, *(double *)v661, COERCE_DOUBLE(0x100000001), v547, v548);
  v549 = *a1;
  v550 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v549, v550, (int32x2_t *)v661, 0xCAu, *(double *)v661, COERCE_DOUBLE(0x100000002), v551, v552);
  v553 = *a1;
  v554 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v553, v554, (int32x2_t *)v661, 0xCBu, *(double *)v661, COERCE_DOUBLE(0x100000003), v555, v556);
  v557 = *a1;
  v558 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v557, v558, (int32x2_t *)v661, 0xCCu, *(double *)v661, COERCE_DOUBLE(0x100000004), v559, v560);
  v561 = *a1;
  v562 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v561, v562, (int32x2_t *)v661, 0xCDu, *(double *)v661, COERCE_DOUBLE(0x100000005), v563, v564);
  v565 = *a1;
  v566 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v565, v566, (int32x2_t *)v661, 0xCEu, *(double *)v661, COERCE_DOUBLE(0x100000006), v567, v568);
  v569 = *a1;
  v570 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v569, v570, (int32x2_t *)v661, 0xCFu, *(double *)v661, COERCE_DOUBLE(0x100000007), v571, v572);
  v573 = *a1;
  v574 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000002);
  sub_223D0629C(v573, v574, (int32x2_t *)v661, 0xD0u, *(double *)&v661[4], v575, v576, v577);
  v578 = *a1;
  v579 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v578, v579, (int32x2_t *)v661, 0xD1u, *(double *)v661, v580, v581, v582);
  v583 = *a1;
  v584 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v583, v584, (int32x2_t *)v661, 0xD2u, *(double *)v661, COERCE_DOUBLE(0x200000002), v585, v586);
  v587 = *a1;
  v588 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v587, v588, (int32x2_t *)v661, 0xD3u, *(double *)v661, COERCE_DOUBLE(0x200000003), v589, v590);
  v591 = *a1;
  v592 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v591, v592, (int32x2_t *)v661, 0xD4u, *(double *)v661, COERCE_DOUBLE(0x200000004), v593, v594);
  v595 = *a1;
  v596 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v595, v596, (int32x2_t *)v661, 0xD5u, *(double *)v661, v597, v598, v599);
  v600 = *a1;
  v601 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v600, v601, (int32x2_t *)v661, 0xD6u, *(double *)v661, v602, v603, v604);
  v605 = *a1;
  v606 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v605, v606, (int32x2_t *)v661, 0xD7u, *(double *)v661, v607, v608, v609);
  v610 = *a1;
  v611 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000003);
  sub_223D0629C(v610, v611, (int32x2_t *)v661, 0xD8u, *(double *)&v661[4], v612, v613, v614);
  v615 = *a1;
  v616 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v615, v616, (int32x2_t *)v661, 0xD9u, *(double *)v661, v617, v618, v619);
  v620 = *a1;
  v621 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v620, v621, (int32x2_t *)v661, 0xDAu, *(double *)v661, v622, v623, v624);
  v625 = *a1;
  v626 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v625, v626, (int32x2_t *)v661, 0xDBu, *(double *)v661, v627, v628, v629);
  v630 = *a1;
  v631 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v630, v631, (int32x2_t *)v661, 0xDCu, *(double *)v661, v632, v633, v634);
  v635 = *a1;
  v636 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v635, v636, (int32x2_t *)v661, 0xDDu, *(double *)v661, COERCE_DOUBLE(0x300000005), v637, v638);
  v639 = *a1;
  v640 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v639, v640, (int32x2_t *)v661, 0xDEu, *(double *)v661, COERCE_DOUBLE(0x300000006), v641, v642);
  v643 = *a1;
  v644 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v643, v644, (int32x2_t *)v661, 0xDFu, *(double *)v661, COERCE_DOUBLE(0x300000007), v645, v646);
  v647 = *a1;
  v648 = a1[1];
  *(_DWORD *)v661 = *(_DWORD *)a2;
  *(int32x2_t *)&v661[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000004);
  sub_223D0629C(v647, v648, (int32x2_t *)v661, 0xE0u, *(double *)&v661[4], v649, v650, v651);
  v652 = *a1;
  v653 = a1[1];
  *(int32x2_t *)v661 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v661[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v652, v653, (int32x2_t *)v661, 0xE1u, *(double *)v661, COERCE_DOUBLE(0x400000001), v654, v655);
  return sub_223D09704(a1, a2, v656, v657, v658, v659);
}

uint64_t sub_223D09704(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float32x4_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  float32x4_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  double v135;
  double v136;
  double v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  double v142;
  double v143;
  double v144;
  float32x4_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  double v149;
  double v150;
  double v151;
  float32x4_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  double v156;
  double v157;
  double v158;
  float32x4_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  double v163;
  double v164;
  double v165;
  float32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  double v170;
  double v171;
  double v172;
  float32x4_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  double v177;
  double v178;
  double v179;
  float32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  float32x4_t v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  float32x4_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  float32x4_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  float32x4_t v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  float32x4_t v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  float32x4_t v204;
  uint64_t v205;
  uint64_t v206;
  double v207;
  float32x4_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  float32x4_t v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  double v216;
  float32x4_t v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  float32x4_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  float32x4_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  float32x4_t v237;
  uint64_t v238;
  uint64_t v239;
  double v240;
  float32x4_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  float32x4_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  double v249;
  float32x4_t v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  float32x4_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  float32x4_t v258;
  uint64_t v259;
  uint64_t v260;
  double v261;
  float32x4_t v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  double v266;
  float32x4_t v267;
  uint64_t v268;
  uint64_t v269;
  double v270;
  double v271;
  float32x4_t v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  double v276;
  float32x4_t v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  double v281;
  float32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  double v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  double v291;
  float32x4_t v292;
  uint64_t v293;
  uint64_t v294;
  double v295;
  double v296;
  float32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  double v300;
  double v301;
  float32x4_t v302;
  uint64_t v303;
  uint64_t v304;
  double v305;
  double v306;
  float32x4_t v307;
  uint64_t v308;
  uint64_t v309;
  double v310;
  double v311;
  float32x4_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  double v316;
  float32x4_t v317;
  uint64_t v318;
  uint64_t v319;
  double v320;
  double v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  double v325;
  double v326;
  float32x4_t v327;
  uint64_t v328;
  uint64_t v329;
  double v330;
  double v331;
  float32x4_t v332;
  uint64_t v333;
  uint64_t v334;
  double v335;
  double v336;
  float32x4_t v337;
  uint64_t v338;
  uint64_t v339;
  double v340;
  double v341;
  float32x4_t v342;
  uint64_t v343;
  uint64_t v344;
  double v345;
  double v346;
  float32x4_t v347;
  uint64_t v348;
  uint64_t v349;
  double v350;
  float32x4_t v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  double v355;
  float32x4_t v356;
  uint64_t v357;
  uint64_t v358;
  double v359;
  float32x4_t v360;
  uint64_t v361;
  uint64_t v362;
  double v363;
  double v364;
  float32x4_t v365;
  uint64_t v366;
  uint64_t v367;
  double v368;
  float32x4_t v369;
  uint64_t v370;
  uint64_t v371;
  double v372;
  float32x4_t v373;
  uint64_t v374;
  uint64_t v375;
  double v376;
  float32x4_t v377;
  uint64_t v378;
  uint64_t v379;
  double v380;
  float32x4_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  float32x4_t v385;
  uint64_t v386;
  uint64_t v387;
  double v388;
  float32x4_t v389;
  uint64_t v390;
  uint64_t v391;
  double v392;
  float32x4_t v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  double v397;
  float32x4_t v398;
  uint64_t v399;
  uint64_t v400;
  double v401;
  float32x4_t v402;
  uint64_t v403;
  uint64_t v404;
  double v405;
  float32x4_t v406;
  uint64_t v407;
  uint64_t v408;
  double v409;
  float32x4_t v410;
  uint64_t v411;
  uint64_t v412;
  double v413;
  float32x4_t v414;
  uint64_t v415;
  uint64_t v416;
  double v417;
  float32x4_t v418;
  uint64_t v419;
  uint64_t v420;
  double v421;
  float32x4_t v422;
  uint64_t v423;
  uint64_t v424;
  double v425;
  float32x4_t v426;
  uint64_t v427;
  uint64_t v428;
  double v429;
  double v430;
  float32x4_t v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  double v435;
  double v436;
  double v437;
  float32x4_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  double v442;
  double v443;
  double v444;
  float32x4_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  double v449;
  double v450;
  double v451;
  float32x4_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  double v456;
  double v457;
  double v458;
  float32x4_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  double v463;
  double v464;
  double v465;
  float32x4_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  double v470;
  double v471;
  double v472;
  float32x4_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  double v477;
  double v478;
  double v479;
  float32x4_t v480;
  uint64_t v481;
  uint64_t v482;
  double v483;
  double v484;
  float32x4_t v485;
  uint64_t v486;
  uint64_t v487;
  double v488;
  float32x4_t v489;
  uint64_t v490;
  uint64_t v491;
  double v492;
  float32x4_t v493;
  uint64_t v494;
  uint64_t v495;
  double v496;
  float32x4_t v497;
  uint64_t v498;
  uint64_t v499;
  double v500;
  float32x4_t v501;
  uint64_t v502;
  uint64_t v503;
  double v504;
  float32x4_t v505;
  uint64_t v506;
  uint64_t v507;
  double v508;
  float32x4_t v509;
  uint64_t v510;
  uint64_t v511;
  double v512;
  float32x4_t v513;
  uint64_t v514;
  uint64_t v515;
  double v516;
  double v517;
  float32x4_t v518;
  uint64_t v519;
  uint64_t v520;
  double v521;
  float32x4_t v522;
  uint64_t v523;
  uint64_t v524;
  double v525;
  float32x4_t v526;
  uint64_t v527;
  uint64_t v528;
  double v529;
  float32x4_t v530;
  uint64_t v531;
  uint64_t v532;
  double v533;
  float32x4_t v534;
  uint64_t v535;
  uint64_t v536;
  double v537;
  float32x4_t v538;
  uint64_t v539;
  uint64_t v540;
  double v541;
  float32x4_t v542;
  uint64_t v543;
  uint64_t v544;
  double v545;
  float32x4_t v546;
  uint64_t v547;
  uint64_t v548;
  double v549;
  double v550;
  float32x4_t v551;
  uint64_t v552;
  uint64_t v553;
  double v554;
  float32x4_t v555;
  uint64_t v556;
  uint64_t v557;
  double v558;
  float32x4_t v559;
  uint64_t v560;
  uint64_t v561;
  double v562;
  float32x4_t v563;
  uint64_t v564;
  uint64_t v565;
  double v566;
  double v567;
  float32x4_t v568;
  uint64_t v569;
  uint64_t v570;
  double v571;
  float32x4_t v572;
  uint64_t v573;
  uint64_t v574;
  double v575;
  float32x4_t v576;
  uint64_t v577;
  uint64_t v578;
  double v579;
  float32x4_t v580;
  uint64_t v581;
  uint64_t v582;
  double v583;
  double v584;
  float32x4_t v585;
  uint64_t v586;
  uint64_t v587;
  double v588;
  float32x4_t v589;
  uint64_t v590;
  uint64_t v591;
  double v592;
  float32x4_t v593;
  uint64_t v594;
  uint64_t v595;
  double v596;
  float32x4_t v597;
  uint64_t v598;
  uint64_t v599;
  double v600;
  float32x4_t v601;
  uint64_t v602;
  uint64_t v603;
  double v604;
  float32x4_t v605;
  uint64_t v606;
  uint64_t v607;
  double v608;
  float32x4_t v609;
  uint64_t v610;
  uint64_t v611;
  double v612;
  double v613;
  float32x4_t v614;
  uint64_t v615;
  uint64_t v616;
  double v617;
  double v618;
  float32x4_t v619;
  uint64_t v620;
  uint64_t v621;
  double v622;
  double v623;
  float32x4_t v624;
  uint64_t v625;
  uint64_t v626;
  double v627;
  double v628;
  float32x4_t v629;
  uint64_t v630;
  uint64_t v631;
  double v632;
  double v633;
  float32x4_t v634;
  uint64_t v635;
  uint64_t v636;
  double v637;
  double v638;
  float32x4_t v639;
  uint64_t v640;
  uint64_t v641;
  double v642;
  double v643;
  float32x4_t v644;
  uint64_t v645;
  uint64_t v646;
  double v647;
  double v648;
  float32x4_t v649;
  uint64_t v650;
  uint64_t v651;
  double v652;
  float32x4_t v653;
  uint64_t v654;
  uint64_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  double v659;
  double v660;
  double v661;
  float32x4_t v662;
  _BYTE v664[12];

  v8 = *a1;
  v9 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v8, v9, (int32x2_t *)v664, 0xE2u, *(double *)v664, COERCE_DOUBLE(0x400000002), a5, a6);
  v10 = *a1;
  v11 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v10, v11, (int32x2_t *)v664, 0xE3u, *(double *)v664, COERCE_DOUBLE(0x400000003), v12, v13);
  v14 = *a1;
  v15 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v14, v15, (int32x2_t *)v664, 0xE4u, *(double *)v664, COERCE_DOUBLE(0x400000004), v16, v17);
  v18 = *a1;
  v19 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v18, v19, (int32x2_t *)v664, 0xE5u, *(double *)v664, COERCE_DOUBLE(0x400000005), v20, v21);
  v22 = *a1;
  v23 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v22, v23, (int32x2_t *)v664, 0xE6u, *(double *)v664, COERCE_DOUBLE(0x400000006), v24, v25);
  v26 = *a1;
  v27 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v26, v27, (int32x2_t *)v664, 0xE7u, *(double *)v664, COERCE_DOUBLE(0x400000007), v28, v29);
  v30 = *a1;
  v31 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000005);
  sub_223D0629C(v30, v31, (int32x2_t *)v664, 0xE8u, *(double *)&v664[4], COERCE_DOUBLE(0x300000005), v32, v33);
  v34 = *a1;
  v35 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v34, v35, (int32x2_t *)v664, 0xE9u, *(double *)v664, COERCE_DOUBLE(0x500000001), v36, v37);
  v38 = *a1;
  v39 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v38, v39, (int32x2_t *)v664, 0xEAu, *(double *)v664, COERCE_DOUBLE(0x500000002), v40, v41);
  v42 = *a1;
  v43 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v42, v43, (int32x2_t *)v664, 0xEBu, *(double *)v664, COERCE_DOUBLE(0x500000003), v44, v45);
  v46 = *a1;
  v47 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v46, v47, (int32x2_t *)v664, 0xECu, *(double *)v664, COERCE_DOUBLE(0x500000004), v48, v49);
  v50 = *a1;
  v51 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v50, v51, (int32x2_t *)v664, 0xEDu, *(double *)v664, COERCE_DOUBLE(0x500000005), v52, v53);
  v54 = *a1;
  v55 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v54, v55, (int32x2_t *)v664, 0xEEu, *(double *)v664, COERCE_DOUBLE(0x500000006), v56, v57);
  v58 = *a1;
  v59 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v58, v59, (int32x2_t *)v664, 0xEFu, *(double *)v664, COERCE_DOUBLE(0x500000007), v60, v61);
  v62 = *a1;
  v63 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000006);
  sub_223D0629C(v62, v63, (int32x2_t *)v664, 0xF0u, *(double *)&v664[4], COERCE_DOUBLE(0x300000006), v64, v65);
  v66 = *a1;
  v67 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v66, v67, (int32x2_t *)v664, 0xF1u, *(double *)v664, COERCE_DOUBLE(0x600000001), v68, v69);
  v70 = *a1;
  v71 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v70, v71, (int32x2_t *)v664, 0xF2u, *(double *)v664, COERCE_DOUBLE(0x600000002), v72, v73);
  v74 = *a1;
  v75 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v74, v75, (int32x2_t *)v664, 0xF3u, *(double *)v664, COERCE_DOUBLE(0x600000003), v76, v77);
  v78 = *a1;
  v79 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v78, v79, (int32x2_t *)v664, 0xF4u, *(double *)v664, COERCE_DOUBLE(0x600000004), v80, v81);
  v82 = *a1;
  v83 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v82, v83, (int32x2_t *)v664, 0xF5u, *(double *)v664, COERCE_DOUBLE(0x600000005), v84, v85);
  v86 = *a1;
  v87 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v86, v87, (int32x2_t *)v664, 0xF6u, *(double *)v664, COERCE_DOUBLE(0x600000006), v88, v89);
  v90 = *a1;
  v91 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v90, v91, (int32x2_t *)v664, 0xF7u, *(double *)v664, COERCE_DOUBLE(0x600000007), v92, v93);
  v94 = *a1;
  v95 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x300000007);
  sub_223D0629C(v94, v95, (int32x2_t *)v664, 0xF8u, *(double *)&v664[4], v96, v97, v98);
  v99 = *a1;
  v100 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v99, v100, (int32x2_t *)v664, 0xF9u, *(double *)v664, COERCE_DOUBLE(0x700000001), v101, v102);
  v103 = *a1;
  v104 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v103, v104, (int32x2_t *)v664, 0xFAu, *(double *)v664, COERCE_DOUBLE(0x700000002), v105, v106);
  v107 = *a1;
  v108 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v107, v108, (int32x2_t *)v664, 0xFBu, *(double *)v664, COERCE_DOUBLE(0x700000003), v109, v110);
  v111 = *a1;
  v112 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v111, v112, (int32x2_t *)v664, 0xFCu, *(double *)v664, COERCE_DOUBLE(0x700000004), v113, v114);
  v115 = *a1;
  v116 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v115, v116, (int32x2_t *)v664, 0xFDu, *(double *)v664, COERCE_DOUBLE(0x700000005), v117, v118);
  v119 = *a1;
  v120 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v119, v120, (int32x2_t *)v664, 0xFEu, *(double *)v664, COERCE_DOUBLE(0x700000006), v121, v122);
  v123 = *a1;
  v124 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 3;
  sub_223D0629C(v123, v124, (int32x2_t *)v664, 0xFFu, *(double *)v664, COERCE_DOUBLE(0x700000007), v125, v126);
  v127 = *a1;
  v128 = a1[1];
  *(_QWORD *)v664 = *(_QWORD *)a2;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v127, v128, (int32x2_t *)v664, 0x100u, *(double *)v664, v129, v130, v131);
  v132 = *a1;
  v133 = a1[1];
  v134 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v664[4] = v134;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v132, v133, (int32x2_t *)v664, 0x101u, v135, v136, v137, v138);
  v139 = *a1;
  v140 = a1[1];
  v141 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v664[4] = v141;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v139, v140, (int32x2_t *)v664, 0x102u, v142, v143, v144, v145);
  v146 = *a1;
  v147 = a1[1];
  v148 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v664[4] = v148;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v146, v147, (int32x2_t *)v664, 0x103u, v149, v150, v151, v152);
  v153 = *a1;
  v154 = a1[1];
  v155 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v664[4] = v155;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v153, v154, (int32x2_t *)v664, 0x104u, v156, v157, v158, v159);
  v160 = *a1;
  v161 = a1[1];
  v162 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v664[4] = v162;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v160, v161, (int32x2_t *)v664, 0x105u, v163, v164, v165, v166);
  v167 = *a1;
  v168 = a1[1];
  v169 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v664[4] = v169;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v167, v168, (int32x2_t *)v664, 0x106u, v170, v171, v172, v173);
  v174 = *a1;
  v175 = a1[1];
  v176 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v664[4] = v176;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v174, v175, (int32x2_t *)v664, 0x107u, v177, v178, v179, v180);
  v181 = *a1;
  v182 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000001);
  sub_223D0629C(v181, v182, (int32x2_t *)v664, 0x108u, *(double *)&v664[4], COERCE_DOUBLE(0x400000001), v183, v184);
  v185 = *a1;
  v186 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v185, v186, (int32x2_t *)v664, 0x109u, *(double *)v664, COERCE_DOUBLE(0x100000001), v187, v188);
  v189 = *a1;
  v190 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v189, v190, (int32x2_t *)v664, 0x10Au, *(double *)v664, COERCE_DOUBLE(0x100000002), v191, v192);
  v193 = *a1;
  v194 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v193, v194, (int32x2_t *)v664, 0x10Bu, *(double *)v664, COERCE_DOUBLE(0x100000003), v195, v196);
  v197 = *a1;
  v198 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v197, v198, (int32x2_t *)v664, 0x10Cu, *(double *)v664, COERCE_DOUBLE(0x100000004), v199, v200);
  v201 = *a1;
  v202 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v201, v202, (int32x2_t *)v664, 0x10Du, *(double *)v664, COERCE_DOUBLE(0x100000005), v203, v204);
  v205 = *a1;
  v206 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v205, v206, (int32x2_t *)v664, 0x10Eu, *(double *)v664, COERCE_DOUBLE(0x100000006), v207, v208);
  v209 = *a1;
  v210 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v209, v210, (int32x2_t *)v664, 0x10Fu, *(double *)v664, COERCE_DOUBLE(0x100000007), v211, v212);
  v213 = *a1;
  v214 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000002);
  sub_223D0629C(v213, v214, (int32x2_t *)v664, 0x110u, *(double *)&v664[4], v215, v216, v217);
  v218 = *a1;
  v219 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v218, v219, (int32x2_t *)v664, 0x111u, *(double *)v664, COERCE_DOUBLE(0x200000001), v220, v221);
  v222 = *a1;
  v223 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v222, v223, (int32x2_t *)v664, 0x112u, *(double *)v664, COERCE_DOUBLE(0x200000002), v224, v225);
  v226 = *a1;
  v227 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v226, v227, (int32x2_t *)v664, 0x113u, *(double *)v664, COERCE_DOUBLE(0x200000003), v228, v229);
  v230 = *a1;
  v231 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v230, v231, (int32x2_t *)v664, 0x114u, *(double *)v664, COERCE_DOUBLE(0x200000004), v232, v233);
  v234 = *a1;
  v235 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v234, v235, (int32x2_t *)v664, 0x115u, *(double *)v664, COERCE_DOUBLE(0x200000005), v236, v237);
  v238 = *a1;
  v239 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v238, v239, (int32x2_t *)v664, 0x116u, *(double *)v664, COERCE_DOUBLE(0x200000006), v240, v241);
  v242 = *a1;
  v243 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v242, v243, (int32x2_t *)v664, 0x117u, *(double *)v664, COERCE_DOUBLE(0x200000007), v244, v245);
  v246 = *a1;
  v247 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000003);
  sub_223D0629C(v246, v247, (int32x2_t *)v664, 0x118u, *(double *)&v664[4], v248, v249, v250);
  v251 = *a1;
  v252 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v251, v252, (int32x2_t *)v664, 0x119u, *(double *)v664, COERCE_DOUBLE(0x300000001), v253, v254);
  v255 = *a1;
  v256 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v255, v256, (int32x2_t *)v664, 0x11Au, *(double *)v664, COERCE_DOUBLE(0x300000002), v257, v258);
  v259 = *a1;
  v260 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v259, v260, (int32x2_t *)v664, 0x11Bu, *(double *)v664, COERCE_DOUBLE(0x300000003), v261, v262);
  v263 = *a1;
  v264 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v263, v264, (int32x2_t *)v664, 0x11Cu, *(double *)v664, v265, v266, v267);
  v268 = *a1;
  v269 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v268, v269, (int32x2_t *)v664, 0x11Du, *(double *)v664, v270, v271, v272);
  v273 = *a1;
  v274 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v273, v274, (int32x2_t *)v664, 0x11Eu, *(double *)v664, v275, v276, v277);
  v278 = *a1;
  v279 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v278, v279, (int32x2_t *)v664, 0x11Fu, *(double *)v664, v280, v281, v282);
  v283 = *a1;
  v284 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000004);
  sub_223D0629C(v283, v284, (int32x2_t *)v664, 0x120u, *(double *)&v664[4], v285, v286, v287);
  v288 = *a1;
  v289 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v288, v289, (int32x2_t *)v664, 0x121u, *(double *)v664, v290, v291, v292);
  v293 = *a1;
  v294 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v293, v294, (int32x2_t *)v664, 0x122u, *(double *)v664, v295, v296, v297);
  v298 = *a1;
  v299 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v298, v299, (int32x2_t *)v664, 0x123u, *(double *)v664, v300, v301, v302);
  v303 = *a1;
  v304 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v303, v304, (int32x2_t *)v664, 0x124u, *(double *)v664, v305, v306, v307);
  v308 = *a1;
  v309 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v308, v309, (int32x2_t *)v664, 0x125u, *(double *)v664, v310, v311, v312);
  v313 = *a1;
  v314 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v313, v314, (int32x2_t *)v664, 0x126u, *(double *)v664, v315, v316, v317);
  v318 = *a1;
  v319 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v318, v319, (int32x2_t *)v664, 0x127u, *(double *)v664, v320, v321, v322);
  v323 = *a1;
  v324 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000005);
  sub_223D0629C(v323, v324, (int32x2_t *)v664, 0x128u, *(double *)&v664[4], v325, v326, v327);
  v328 = *a1;
  v329 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v328, v329, (int32x2_t *)v664, 0x129u, *(double *)v664, v330, v331, v332);
  v333 = *a1;
  v334 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v333, v334, (int32x2_t *)v664, 0x12Au, *(double *)v664, v335, v336, v337);
  v338 = *a1;
  v339 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v338, v339, (int32x2_t *)v664, 0x12Bu, *(double *)v664, v340, v341, v342);
  v343 = *a1;
  v344 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v343, v344, (int32x2_t *)v664, 0x12Cu, *(double *)v664, v345, v346, v347);
  v348 = *a1;
  v349 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v348, v349, (int32x2_t *)v664, 0x12Du, *(double *)v664, COERCE_DOUBLE(0x500000005), v350, v351);
  v352 = *a1;
  v353 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v352, v353, (int32x2_t *)v664, 0x12Eu, *(double *)v664, v354, v355, v356);
  v357 = *a1;
  v358 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v357, v358, (int32x2_t *)v664, 0x12Fu, *(double *)v664, COERCE_DOUBLE(0x500000007), v359, v360);
  v361 = *a1;
  v362 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000006);
  sub_223D0629C(v361, v362, (int32x2_t *)v664, 0x130u, *(double *)&v664[4], v363, v364, v365);
  v366 = *a1;
  v367 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v366, v367, (int32x2_t *)v664, 0x131u, *(double *)v664, COERCE_DOUBLE(0x600000001), v368, v369);
  v370 = *a1;
  v371 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v370, v371, (int32x2_t *)v664, 0x132u, *(double *)v664, COERCE_DOUBLE(0x600000002), v372, v373);
  v374 = *a1;
  v375 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v374, v375, (int32x2_t *)v664, 0x133u, *(double *)v664, COERCE_DOUBLE(0x600000003), v376, v377);
  v378 = *a1;
  v379 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v378, v379, (int32x2_t *)v664, 0x134u, *(double *)v664, COERCE_DOUBLE(0x600000004), v380, v381);
  v382 = *a1;
  v383 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v382, v383, (int32x2_t *)v664, 0x135u, *(double *)v664, COERCE_DOUBLE(0x600000005), v384, v385);
  v386 = *a1;
  v387 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v386, v387, (int32x2_t *)v664, 0x136u, *(double *)v664, COERCE_DOUBLE(0x600000006), v388, v389);
  v390 = *a1;
  v391 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v390, v391, (int32x2_t *)v664, 0x137u, *(double *)v664, COERCE_DOUBLE(0x600000007), v392, v393);
  v394 = *a1;
  v395 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x400000007);
  sub_223D0629C(v394, v395, (int32x2_t *)v664, 0x138u, *(double *)&v664[4], v396, v397, v398);
  v399 = *a1;
  v400 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v399, v400, (int32x2_t *)v664, 0x139u, *(double *)v664, COERCE_DOUBLE(0x700000001), v401, v402);
  v403 = *a1;
  v404 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v403, v404, (int32x2_t *)v664, 0x13Au, *(double *)v664, COERCE_DOUBLE(0x700000002), v405, v406);
  v407 = *a1;
  v408 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v407, v408, (int32x2_t *)v664, 0x13Bu, *(double *)v664, COERCE_DOUBLE(0x700000003), v409, v410);
  v411 = *a1;
  v412 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v411, v412, (int32x2_t *)v664, 0x13Cu, *(double *)v664, COERCE_DOUBLE(0x700000004), v413, v414);
  v415 = *a1;
  v416 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v415, v416, (int32x2_t *)v664, 0x13Du, *(double *)v664, COERCE_DOUBLE(0x700000005), v417, v418);
  v419 = *a1;
  v420 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v419, v420, (int32x2_t *)v664, 0x13Eu, *(double *)v664, COERCE_DOUBLE(0x700000006), v421, v422);
  v423 = *a1;
  v424 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 4;
  sub_223D0629C(v423, v424, (int32x2_t *)v664, 0x13Fu, *(double *)v664, COERCE_DOUBLE(0x700000007), v425, v426);
  v427 = *a1;
  v428 = a1[1];
  *(_QWORD *)v664 = *(_QWORD *)a2;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v427, v428, (int32x2_t *)v664, 0x140u, *(double *)v664, v429, v430, v431);
  v432 = *a1;
  v433 = a1[1];
  v434 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v664[4] = v434;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v432, v433, (int32x2_t *)v664, 0x141u, v435, v436, v437, v438);
  v439 = *a1;
  v440 = a1[1];
  v441 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v664[4] = v441;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v439, v440, (int32x2_t *)v664, 0x142u, v442, v443, v444, v445);
  v446 = *a1;
  v447 = a1[1];
  v448 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v664[4] = v448;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v446, v447, (int32x2_t *)v664, 0x143u, v449, v450, v451, v452);
  v453 = *a1;
  v454 = a1[1];
  v455 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v664[4] = v455;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v453, v454, (int32x2_t *)v664, 0x144u, v456, v457, v458, v459);
  v460 = *a1;
  v461 = a1[1];
  v462 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v664[4] = v462;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v460, v461, (int32x2_t *)v664, 0x145u, v463, v464, v465, v466);
  v467 = *a1;
  v468 = a1[1];
  v469 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v664[4] = v469;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v467, v468, (int32x2_t *)v664, 0x146u, v470, v471, v472, v473);
  v474 = *a1;
  v475 = a1[1];
  v476 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v664 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v664[4] = v476;
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v474, v475, (int32x2_t *)v664, 0x147u, v477, v478, v479, v480);
  v481 = *a1;
  v482 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000001);
  sub_223D0629C(v481, v482, (int32x2_t *)v664, 0x148u, *(double *)&v664[4], v483, v484, v485);
  v486 = *a1;
  v487 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v486, v487, (int32x2_t *)v664, 0x149u, *(double *)v664, COERCE_DOUBLE(0x100000001), v488, v489);
  v490 = *a1;
  v491 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v490, v491, (int32x2_t *)v664, 0x14Au, *(double *)v664, COERCE_DOUBLE(0x100000002), v492, v493);
  v494 = *a1;
  v495 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v494, v495, (int32x2_t *)v664, 0x14Bu, *(double *)v664, COERCE_DOUBLE(0x100000003), v496, v497);
  v498 = *a1;
  v499 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v498, v499, (int32x2_t *)v664, 0x14Cu, *(double *)v664, COERCE_DOUBLE(0x100000004), v500, v501);
  v502 = *a1;
  v503 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v502, v503, (int32x2_t *)v664, 0x14Du, *(double *)v664, COERCE_DOUBLE(0x100000005), v504, v505);
  v506 = *a1;
  v507 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v506, v507, (int32x2_t *)v664, 0x14Eu, *(double *)v664, COERCE_DOUBLE(0x100000006), v508, v509);
  v510 = *a1;
  v511 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v510, v511, (int32x2_t *)v664, 0x14Fu, *(double *)v664, COERCE_DOUBLE(0x100000007), v512, v513);
  v514 = *a1;
  v515 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000002);
  sub_223D0629C(v514, v515, (int32x2_t *)v664, 0x150u, *(double *)&v664[4], v516, v517, v518);
  v519 = *a1;
  v520 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v519, v520, (int32x2_t *)v664, 0x151u, *(double *)v664, COERCE_DOUBLE(0x200000001), v521, v522);
  v523 = *a1;
  v524 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v523, v524, (int32x2_t *)v664, 0x152u, *(double *)v664, COERCE_DOUBLE(0x200000002), v525, v526);
  v527 = *a1;
  v528 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v527, v528, (int32x2_t *)v664, 0x153u, *(double *)v664, COERCE_DOUBLE(0x200000003), v529, v530);
  v531 = *a1;
  v532 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v531, v532, (int32x2_t *)v664, 0x154u, *(double *)v664, COERCE_DOUBLE(0x200000004), v533, v534);
  v535 = *a1;
  v536 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v535, v536, (int32x2_t *)v664, 0x155u, *(double *)v664, COERCE_DOUBLE(0x200000005), v537, v538);
  v539 = *a1;
  v540 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v539, v540, (int32x2_t *)v664, 0x156u, *(double *)v664, COERCE_DOUBLE(0x200000006), v541, v542);
  v543 = *a1;
  v544 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v543, v544, (int32x2_t *)v664, 0x157u, *(double *)v664, COERCE_DOUBLE(0x200000007), v545, v546);
  v547 = *a1;
  v548 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000003);
  sub_223D0629C(v547, v548, (int32x2_t *)v664, 0x158u, *(double *)&v664[4], v549, v550, v551);
  v552 = *a1;
  v553 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v552, v553, (int32x2_t *)v664, 0x159u, *(double *)v664, COERCE_DOUBLE(0x300000001), v554, v555);
  v556 = *a1;
  v557 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v556, v557, (int32x2_t *)v664, 0x15Au, *(double *)v664, COERCE_DOUBLE(0x300000002), v558, v559);
  v560 = *a1;
  v561 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v560, v561, (int32x2_t *)v664, 0x15Bu, *(double *)v664, COERCE_DOUBLE(0x300000003), v562, v563);
  v564 = *a1;
  v565 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v564, v565, (int32x2_t *)v664, 0x15Cu, *(double *)v664, v566, v567, v568);
  v569 = *a1;
  v570 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v569, v570, (int32x2_t *)v664, 0x15Du, *(double *)v664, COERCE_DOUBLE(0x300000005), v571, v572);
  v573 = *a1;
  v574 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v573, v574, (int32x2_t *)v664, 0x15Eu, *(double *)v664, COERCE_DOUBLE(0x300000006), v575, v576);
  v577 = *a1;
  v578 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v577, v578, (int32x2_t *)v664, 0x15Fu, *(double *)v664, COERCE_DOUBLE(0x300000007), v579, v580);
  v581 = *a1;
  v582 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000004);
  sub_223D0629C(v581, v582, (int32x2_t *)v664, 0x160u, *(double *)&v664[4], v583, v584, v585);
  v586 = *a1;
  v587 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v586, v587, (int32x2_t *)v664, 0x161u, *(double *)v664, COERCE_DOUBLE(0x400000001), v588, v589);
  v590 = *a1;
  v591 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v590, v591, (int32x2_t *)v664, 0x162u, *(double *)v664, COERCE_DOUBLE(0x400000002), v592, v593);
  v594 = *a1;
  v595 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v594, v595, (int32x2_t *)v664, 0x163u, *(double *)v664, COERCE_DOUBLE(0x400000003), v596, v597);
  v598 = *a1;
  v599 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v598, v599, (int32x2_t *)v664, 0x164u, *(double *)v664, COERCE_DOUBLE(0x400000004), v600, v601);
  v602 = *a1;
  v603 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v602, v603, (int32x2_t *)v664, 0x165u, *(double *)v664, COERCE_DOUBLE(0x400000005), v604, v605);
  v606 = *a1;
  v607 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v606, v607, (int32x2_t *)v664, 0x166u, *(double *)v664, COERCE_DOUBLE(0x400000006), v608, v609);
  v610 = *a1;
  v611 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v610, v611, (int32x2_t *)v664, 0x167u, *(double *)v664, v612, v613, v614);
  v615 = *a1;
  v616 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  *(int32x2_t *)&v664[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000005);
  sub_223D0629C(v615, v616, (int32x2_t *)v664, 0x168u, *(double *)&v664[4], v617, v618, v619);
  v620 = *a1;
  v621 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v620, v621, (int32x2_t *)v664, 0x169u, *(double *)v664, v622, v623, v624);
  v625 = *a1;
  v626 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v625, v626, (int32x2_t *)v664, 0x16Au, *(double *)v664, v627, v628, v629);
  v630 = *a1;
  v631 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v630, v631, (int32x2_t *)v664, 0x16Bu, *(double *)v664, v632, v633, v634);
  v635 = *a1;
  v636 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v635, v636, (int32x2_t *)v664, 0x16Cu, *(double *)v664, v637, v638, v639);
  v640 = *a1;
  v641 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v640, v641, (int32x2_t *)v664, 0x16Du, *(double *)v664, v642, v643, v644);
  v645 = *a1;
  v646 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v645, v646, (int32x2_t *)v664, 0x16Eu, *(double *)v664, v647, v648, v649);
  v650 = *a1;
  v651 = a1[1];
  *(int32x2_t *)v664 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v664[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v650, v651, (int32x2_t *)v664, 0x16Fu, *(double *)v664, COERCE_DOUBLE(0x500000007), v652, v653);
  v654 = *a1;
  v655 = a1[1];
  *(_DWORD *)v664 = *(_DWORD *)a2;
  sub_223D0629C(v654, v655, (int32x2_t *)v664, 0x170u, COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000006)), v656, v657, v658);
  return sub_223D0B064(a1, a2, v659, v660, v661, v662);
}

uint64_t sub_223D0B064(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  float32x4_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  double v78;
  double v79;
  double v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  double v85;
  double v86;
  double v87;
  float32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  double v92;
  double v93;
  double v94;
  float32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  double v99;
  double v100;
  double v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  double v106;
  double v107;
  double v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  double v113;
  double v114;
  double v115;
  float32x4_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  double v120;
  double v121;
  double v122;
  float32x4_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  double v127;
  float32x4_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  float32x4_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  float32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  float32x4_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  float32x4_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  float32x4_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  float32x4_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  float32x4_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  double v160;
  float32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  float32x4_t v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  float32x4_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  float32x4_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  float32x4_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  float32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  float32x4_t v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  double v193;
  float32x4_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  double v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  float32x4_t v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  float32x4_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  float32x4_t v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  float32x4_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  float32x4_t v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  double v226;
  float32x4_t v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  float32x4_t v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  float32x4_t v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  float32x4_t v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  float32x4_t v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  float32x4_t v247;
  uint64_t v248;
  uint64_t v249;
  double v250;
  float32x4_t v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  float32x4_t v255;
  uint64_t v256;
  uint64_t v257;
  double v258;
  double v259;
  float32x4_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  float32x4_t v264;
  uint64_t v265;
  uint64_t v266;
  double v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  float32x4_t v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  float32x4_t v276;
  uint64_t v277;
  uint64_t v278;
  double v279;
  float32x4_t v280;
  uint64_t v281;
  uint64_t v282;
  double v283;
  double v284;
  float32x4_t v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  double v289;
  float32x4_t v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  double v294;
  float32x4_t v295;
  uint64_t v296;
  uint64_t v297;
  double v298;
  double v299;
  float32x4_t v300;
  uint64_t v301;
  uint64_t v302;
  double v303;
  double v304;
  float32x4_t v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  double v309;
  float32x4_t v310;
  uint64_t v311;
  uint64_t v312;
  double v313;
  double v314;
  float32x4_t v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  double v319;
  float32x4_t v320;
  uint64_t v321;
  uint64_t v322;
  double v323;
  double v324;
  float32x4_t v325;
  uint64_t v326;
  uint64_t v327;
  double v328;
  double v329;
  float32x4_t v330;
  uint64_t v331;
  uint64_t v332;
  double v333;
  double v334;
  float32x4_t v335;
  uint64_t v336;
  uint64_t v337;
  double v338;
  double v339;
  float32x4_t v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  double v344;
  float32x4_t v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  double v349;
  float32x4_t v350;
  uint64_t v351;
  uint64_t v352;
  double v353;
  double v354;
  float32x4_t v355;
  uint64_t v356;
  uint64_t v357;
  double v358;
  double v359;
  float32x4_t v360;
  uint64_t v361;
  uint64_t v362;
  double v363;
  float32x4_t v364;
  uint64_t v365;
  uint64_t v366;
  double v367;
  float32x4_t v368;
  uint64_t v369;
  uint64_t v370;
  double v371;
  double v372;
  float32x4_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  double v377;
  double v378;
  double v379;
  float32x4_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  double v384;
  double v385;
  double v386;
  float32x4_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  double v391;
  double v392;
  double v393;
  float32x4_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  double v398;
  double v399;
  double v400;
  float32x4_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  double v405;
  double v406;
  double v407;
  float32x4_t v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  double v412;
  double v413;
  double v414;
  float32x4_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  double v419;
  double v420;
  double v421;
  float32x4_t v422;
  uint64_t v423;
  uint64_t v424;
  double v425;
  double v426;
  float32x4_t v427;
  uint64_t v428;
  uint64_t v429;
  double v430;
  float32x4_t v431;
  uint64_t v432;
  uint64_t v433;
  double v434;
  float32x4_t v435;
  uint64_t v436;
  uint64_t v437;
  double v438;
  float32x4_t v439;
  uint64_t v440;
  uint64_t v441;
  double v442;
  float32x4_t v443;
  uint64_t v444;
  uint64_t v445;
  double v446;
  float32x4_t v447;
  uint64_t v448;
  uint64_t v449;
  double v450;
  float32x4_t v451;
  uint64_t v452;
  uint64_t v453;
  double v454;
  float32x4_t v455;
  uint64_t v456;
  uint64_t v457;
  double v458;
  double v459;
  float32x4_t v460;
  uint64_t v461;
  uint64_t v462;
  double v463;
  float32x4_t v464;
  uint64_t v465;
  uint64_t v466;
  double v467;
  float32x4_t v468;
  uint64_t v469;
  uint64_t v470;
  double v471;
  float32x4_t v472;
  uint64_t v473;
  uint64_t v474;
  double v475;
  float32x4_t v476;
  uint64_t v477;
  uint64_t v478;
  double v479;
  float32x4_t v480;
  uint64_t v481;
  uint64_t v482;
  double v483;
  float32x4_t v484;
  uint64_t v485;
  uint64_t v486;
  double v487;
  float32x4_t v488;
  uint64_t v489;
  uint64_t v490;
  double v491;
  double v492;
  float32x4_t v493;
  uint64_t v494;
  uint64_t v495;
  double v496;
  float32x4_t v497;
  uint64_t v498;
  uint64_t v499;
  double v500;
  float32x4_t v501;
  uint64_t v502;
  uint64_t v503;
  double v504;
  float32x4_t v505;
  uint64_t v506;
  uint64_t v507;
  double v508;
  float32x4_t v509;
  uint64_t v510;
  uint64_t v511;
  double v512;
  float32x4_t v513;
  uint64_t v514;
  uint64_t v515;
  double v516;
  float32x4_t v517;
  uint64_t v518;
  uint64_t v519;
  double v520;
  float32x4_t v521;
  uint64_t v522;
  uint64_t v523;
  double v524;
  double v525;
  float32x4_t v526;
  uint64_t v527;
  uint64_t v528;
  double v529;
  float32x4_t v530;
  uint64_t v531;
  uint64_t v532;
  double v533;
  float32x4_t v534;
  uint64_t v535;
  uint64_t v536;
  double v537;
  float32x4_t v538;
  uint64_t v539;
  uint64_t v540;
  double v541;
  float32x4_t v542;
  uint64_t v543;
  uint64_t v544;
  double v545;
  float32x4_t v546;
  uint64_t v547;
  uint64_t v548;
  double v549;
  float32x4_t v550;
  uint64_t v551;
  uint64_t v552;
  double v553;
  float32x4_t v554;
  uint64_t v555;
  uint64_t v556;
  double v557;
  double v558;
  float32x4_t v559;
  uint64_t v560;
  uint64_t v561;
  double v562;
  float32x4_t v563;
  uint64_t v564;
  uint64_t v565;
  double v566;
  float32x4_t v567;
  uint64_t v568;
  uint64_t v569;
  double v570;
  float32x4_t v571;
  uint64_t v572;
  uint64_t v573;
  double v574;
  float32x4_t v575;
  uint64_t v576;
  uint64_t v577;
  double v578;
  float32x4_t v579;
  uint64_t v580;
  uint64_t v581;
  double v582;
  double v583;
  float32x4_t v584;
  uint64_t v585;
  uint64_t v586;
  double v587;
  float32x4_t v588;
  uint64_t v589;
  uint64_t v590;
  double v591;
  double v592;
  float32x4_t v593;
  uint64_t v594;
  uint64_t v595;
  double v596;
  float32x4_t v597;
  uint64_t v598;
  uint64_t v599;
  double v600;
  double v601;
  float32x4_t v602;
  uint64_t v603;
  uint64_t v604;
  double v605;
  float32x4_t v606;
  uint64_t v607;
  uint64_t v608;
  double v609;
  float32x4_t v610;
  uint64_t v611;
  uint64_t v612;
  double v613;
  float32x4_t v614;
  uint64_t v615;
  uint64_t v616;
  double v617;
  float32x4_t v618;
  uint64_t v619;
  uint64_t v620;
  double v621;
  double v622;
  float32x4_t v623;
  uint64_t v624;
  uint64_t v625;
  double v626;
  double v627;
  float32x4_t v628;
  uint64_t v629;
  uint64_t v630;
  double v631;
  double v632;
  float32x4_t v633;
  uint64_t v634;
  uint64_t v635;
  double v636;
  double v637;
  float32x4_t v638;
  uint64_t v639;
  uint64_t v640;
  double v641;
  double v642;
  float32x4_t v643;
  uint64_t v644;
  uint64_t v645;
  double v646;
  double v647;
  float32x4_t v648;
  uint64_t v649;
  uint64_t v650;
  double v651;
  double v652;
  float32x4_t v653;
  uint64_t v654;
  uint64_t v655;
  double v656;
  double v657;
  float32x4_t v658;
  uint64_t v659;
  uint64_t v660;
  double v661;
  double v662;
  float32x4_t v663;
  _BYTE v665[12];

  v8 = *a1;
  v9 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v8, v9, (int32x2_t *)v665, 0x171u, *(double *)v665, COERCE_DOUBLE(0x600000001), a5, a6);
  v10 = *a1;
  v11 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v10, v11, (int32x2_t *)v665, 0x172u, *(double *)v665, v12, v13, v14);
  v15 = *a1;
  v16 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v15, v16, (int32x2_t *)v665, 0x173u, *(double *)v665, v17, v18, v19);
  v20 = *a1;
  v21 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v20, v21, (int32x2_t *)v665, 0x174u, *(double *)v665, v22, v23, v24);
  v25 = *a1;
  v26 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v25, v26, (int32x2_t *)v665, 0x175u, *(double *)v665, v27, v28, v29);
  v30 = *a1;
  v31 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v30, v31, (int32x2_t *)v665, 0x176u, *(double *)v665, COERCE_DOUBLE(0x600000006), v32, v33);
  v34 = *a1;
  v35 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v34, v35, (int32x2_t *)v665, 0x177u, *(double *)v665, COERCE_DOUBLE(0x600000007), v36, v37);
  v38 = *a1;
  v39 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x500000007);
  sub_223D0629C(v38, v39, (int32x2_t *)v665, 0x178u, *(double *)&v665[4], COERCE_DOUBLE(0x500000007), v40, v41);
  v42 = *a1;
  v43 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v42, v43, (int32x2_t *)v665, 0x179u, *(double *)v665, COERCE_DOUBLE(0x700000001), v44, v45);
  v46 = *a1;
  v47 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v46, v47, (int32x2_t *)v665, 0x17Au, *(double *)v665, COERCE_DOUBLE(0x700000002), v48, v49);
  v50 = *a1;
  v51 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v50, v51, (int32x2_t *)v665, 0x17Bu, *(double *)v665, COERCE_DOUBLE(0x700000003), v52, v53);
  v54 = *a1;
  v55 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v54, v55, (int32x2_t *)v665, 0x17Cu, *(double *)v665, COERCE_DOUBLE(0x700000004), v56, v57);
  v58 = *a1;
  v59 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v58, v59, (int32x2_t *)v665, 0x17Du, *(double *)v665, COERCE_DOUBLE(0x700000005), v60, v61);
  v62 = *a1;
  v63 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v62, v63, (int32x2_t *)v665, 0x17Eu, *(double *)v665, COERCE_DOUBLE(0x700000006), v64, v65);
  v66 = *a1;
  v67 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 5;
  sub_223D0629C(v66, v67, (int32x2_t *)v665, 0x17Fu, *(double *)v665, COERCE_DOUBLE(0x700000007), v68, v69);
  v70 = *a1;
  v71 = a1[1];
  *(_QWORD *)v665 = *(_QWORD *)a2;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v70, v71, (int32x2_t *)v665, 0x180u, *(double *)v665, v72, v73, v74);
  v75 = *a1;
  v76 = a1[1];
  v77 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v665[4] = v77;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v75, v76, (int32x2_t *)v665, 0x181u, v78, v79, v80, v81);
  v82 = *a1;
  v83 = a1[1];
  v84 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v665[4] = v84;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v82, v83, (int32x2_t *)v665, 0x182u, v85, v86, v87, v88);
  v89 = *a1;
  v90 = a1[1];
  v91 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v665[4] = v91;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v89, v90, (int32x2_t *)v665, 0x183u, v92, v93, v94, v95);
  v96 = *a1;
  v97 = a1[1];
  v98 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v665[4] = v98;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v96, v97, (int32x2_t *)v665, 0x184u, v99, v100, v101, v102);
  v103 = *a1;
  v104 = a1[1];
  v105 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v665[4] = v105;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v103, v104, (int32x2_t *)v665, 0x185u, v106, v107, v108, v109);
  v110 = *a1;
  v111 = a1[1];
  v112 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v665[4] = v112;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v110, v111, (int32x2_t *)v665, 0x186u, v113, v114, v115, v116);
  v117 = *a1;
  v118 = a1[1];
  v119 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v665[4] = v119;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v117, v118, (int32x2_t *)v665, 0x187u, v120, v121, v122, v123);
  v124 = *a1;
  v125 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000001);
  sub_223D0629C(v124, v125, (int32x2_t *)v665, 0x188u, *(double *)&v665[4], v126, v127, v128);
  v129 = *a1;
  v130 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v129, v130, (int32x2_t *)v665, 0x189u, *(double *)v665, COERCE_DOUBLE(0x100000001), v131, v132);
  v133 = *a1;
  v134 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v133, v134, (int32x2_t *)v665, 0x18Au, *(double *)v665, COERCE_DOUBLE(0x100000002), v135, v136);
  v137 = *a1;
  v138 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v137, v138, (int32x2_t *)v665, 0x18Bu, *(double *)v665, COERCE_DOUBLE(0x100000003), v139, v140);
  v141 = *a1;
  v142 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v141, v142, (int32x2_t *)v665, 0x18Cu, *(double *)v665, COERCE_DOUBLE(0x100000004), v143, v144);
  v145 = *a1;
  v146 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v145, v146, (int32x2_t *)v665, 0x18Du, *(double *)v665, COERCE_DOUBLE(0x100000005), v147, v148);
  v149 = *a1;
  v150 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v149, v150, (int32x2_t *)v665, 0x18Eu, *(double *)v665, COERCE_DOUBLE(0x100000006), v151, v152);
  v153 = *a1;
  v154 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v153, v154, (int32x2_t *)v665, 0x18Fu, *(double *)v665, COERCE_DOUBLE(0x100000007), v155, v156);
  v157 = *a1;
  v158 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000002);
  sub_223D0629C(v157, v158, (int32x2_t *)v665, 0x190u, *(double *)&v665[4], v159, v160, v161);
  v162 = *a1;
  v163 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v162, v163, (int32x2_t *)v665, 0x191u, *(double *)v665, COERCE_DOUBLE(0x200000001), v164, v165);
  v166 = *a1;
  v167 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v166, v167, (int32x2_t *)v665, 0x192u, *(double *)v665, COERCE_DOUBLE(0x200000002), v168, v169);
  v170 = *a1;
  v171 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v170, v171, (int32x2_t *)v665, 0x193u, *(double *)v665, COERCE_DOUBLE(0x200000003), v172, v173);
  v174 = *a1;
  v175 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v174, v175, (int32x2_t *)v665, 0x194u, *(double *)v665, COERCE_DOUBLE(0x200000004), v176, v177);
  v178 = *a1;
  v179 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v178, v179, (int32x2_t *)v665, 0x195u, *(double *)v665, COERCE_DOUBLE(0x200000005), v180, v181);
  v182 = *a1;
  v183 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v182, v183, (int32x2_t *)v665, 0x196u, *(double *)v665, COERCE_DOUBLE(0x200000006), v184, v185);
  v186 = *a1;
  v187 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v186, v187, (int32x2_t *)v665, 0x197u, *(double *)v665, COERCE_DOUBLE(0x200000007), v188, v189);
  v190 = *a1;
  v191 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000003);
  sub_223D0629C(v190, v191, (int32x2_t *)v665, 0x198u, *(double *)&v665[4], v192, v193, v194);
  v195 = *a1;
  v196 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v195, v196, (int32x2_t *)v665, 0x199u, *(double *)v665, COERCE_DOUBLE(0x300000001), v197, v198);
  v199 = *a1;
  v200 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v199, v200, (int32x2_t *)v665, 0x19Au, *(double *)v665, COERCE_DOUBLE(0x300000002), v201, v202);
  v203 = *a1;
  v204 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v203, v204, (int32x2_t *)v665, 0x19Bu, *(double *)v665, COERCE_DOUBLE(0x300000003), v205, v206);
  v207 = *a1;
  v208 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v207, v208, (int32x2_t *)v665, 0x19Cu, *(double *)v665, COERCE_DOUBLE(0x300000004), v209, v210);
  v211 = *a1;
  v212 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v211, v212, (int32x2_t *)v665, 0x19Du, *(double *)v665, COERCE_DOUBLE(0x300000005), v213, v214);
  v215 = *a1;
  v216 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v215, v216, (int32x2_t *)v665, 0x19Eu, *(double *)v665, COERCE_DOUBLE(0x300000006), v217, v218);
  v219 = *a1;
  v220 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v219, v220, (int32x2_t *)v665, 0x19Fu, *(double *)v665, COERCE_DOUBLE(0x300000007), v221, v222);
  v223 = *a1;
  v224 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000004);
  sub_223D0629C(v223, v224, (int32x2_t *)v665, 0x1A0u, *(double *)&v665[4], v225, v226, v227);
  v228 = *a1;
  v229 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v228, v229, (int32x2_t *)v665, 0x1A1u, *(double *)v665, COERCE_DOUBLE(0x400000001), v230, v231);
  v232 = *a1;
  v233 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v232, v233, (int32x2_t *)v665, 0x1A2u, *(double *)v665, COERCE_DOUBLE(0x400000002), v234, v235);
  v236 = *a1;
  v237 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v236, v237, (int32x2_t *)v665, 0x1A3u, *(double *)v665, COERCE_DOUBLE(0x400000003), v238, v239);
  v240 = *a1;
  v241 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v240, v241, (int32x2_t *)v665, 0x1A4u, *(double *)v665, COERCE_DOUBLE(0x400000004), v242, v243);
  v244 = *a1;
  v245 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v244, v245, (int32x2_t *)v665, 0x1A5u, *(double *)v665, COERCE_DOUBLE(0x400000005), v246, v247);
  v248 = *a1;
  v249 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v248, v249, (int32x2_t *)v665, 0x1A6u, *(double *)v665, COERCE_DOUBLE(0x400000006), v250, v251);
  v252 = *a1;
  v253 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v252, v253, (int32x2_t *)v665, 0x1A7u, *(double *)v665, COERCE_DOUBLE(0x400000007), v254, v255);
  v256 = *a1;
  v257 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000005);
  sub_223D0629C(v256, v257, (int32x2_t *)v665, 0x1A8u, *(double *)&v665[4], v258, v259, v260);
  v261 = *a1;
  v262 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v261, v262, (int32x2_t *)v665, 0x1A9u, *(double *)v665, COERCE_DOUBLE(0x500000001), v263, v264);
  v265 = *a1;
  v266 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v265, v266, (int32x2_t *)v665, 0x1AAu, *(double *)v665, COERCE_DOUBLE(0x500000002), v267, v268);
  v269 = *a1;
  v270 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v269, v270, (int32x2_t *)v665, 0x1ABu, *(double *)v665, COERCE_DOUBLE(0x500000003), v271, v272);
  v273 = *a1;
  v274 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v273, v274, (int32x2_t *)v665, 0x1ACu, *(double *)v665, COERCE_DOUBLE(0x500000004), v275, v276);
  v277 = *a1;
  v278 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v277, v278, (int32x2_t *)v665, 0x1ADu, *(double *)v665, COERCE_DOUBLE(0x500000005), v279, v280);
  v281 = *a1;
  v282 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v281, v282, (int32x2_t *)v665, 0x1AEu, *(double *)v665, v283, v284, v285);
  v286 = *a1;
  v287 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v286, v287, (int32x2_t *)v665, 0x1AFu, *(double *)v665, v288, v289, v290);
  v291 = *a1;
  v292 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000006);
  sub_223D0629C(v291, v292, (int32x2_t *)v665, 0x1B0u, *(double *)&v665[4], v293, v294, v295);
  v296 = *a1;
  v297 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v296, v297, (int32x2_t *)v665, 0x1B1u, *(double *)v665, v298, v299, v300);
  v301 = *a1;
  v302 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v301, v302, (int32x2_t *)v665, 0x1B2u, *(double *)v665, v303, v304, v305);
  v306 = *a1;
  v307 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v306, v307, (int32x2_t *)v665, 0x1B3u, *(double *)v665, v308, v309, v310);
  v311 = *a1;
  v312 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v311, v312, (int32x2_t *)v665, 0x1B4u, *(double *)v665, v313, v314, v315);
  v316 = *a1;
  v317 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v316, v317, (int32x2_t *)v665, 0x1B5u, *(double *)v665, v318, v319, v320);
  v321 = *a1;
  v322 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v321, v322, (int32x2_t *)v665, 0x1B6u, *(double *)v665, v323, v324, v325);
  v326 = *a1;
  v327 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v326, v327, (int32x2_t *)v665, 0x1B7u, *(double *)v665, v328, v329, v330);
  v331 = *a1;
  v332 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x600000007);
  sub_223D0629C(v331, v332, (int32x2_t *)v665, 0x1B8u, *(double *)&v665[4], v333, v334, v335);
  v336 = *a1;
  v337 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v336, v337, (int32x2_t *)v665, 0x1B9u, *(double *)v665, v338, v339, v340);
  v341 = *a1;
  v342 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v341, v342, (int32x2_t *)v665, 0x1BAu, *(double *)v665, v343, v344, v345);
  v346 = *a1;
  v347 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v346, v347, (int32x2_t *)v665, 0x1BBu, *(double *)v665, v348, v349, v350);
  v351 = *a1;
  v352 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v351, v352, (int32x2_t *)v665, 0x1BCu, *(double *)v665, v353, v354, v355);
  v356 = *a1;
  v357 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v356, v357, (int32x2_t *)v665, 0x1BDu, *(double *)v665, v358, v359, v360);
  v361 = *a1;
  v362 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v361, v362, (int32x2_t *)v665, 0x1BEu, *(double *)v665, COERCE_DOUBLE(0x700000006), v363, v364);
  v365 = *a1;
  v366 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 6;
  sub_223D0629C(v365, v366, (int32x2_t *)v665, 0x1BFu, *(double *)v665, COERCE_DOUBLE(0x700000007), v367, v368);
  v369 = *a1;
  v370 = a1[1];
  *(_QWORD *)v665 = *(_QWORD *)a2;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v369, v370, (int32x2_t *)v665, 0x1C0u, *(double *)v665, v371, v372, v373);
  v374 = *a1;
  v375 = a1[1];
  v376 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 1;
  *(_DWORD *)&v665[4] = v376;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v374, v375, (int32x2_t *)v665, 0x1C1u, v377, v378, v379, v380);
  v381 = *a1;
  v382 = a1[1];
  v383 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 2;
  *(_DWORD *)&v665[4] = v383;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v381, v382, (int32x2_t *)v665, 0x1C2u, v384, v385, v386, v387);
  v388 = *a1;
  v389 = a1[1];
  v390 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 3;
  *(_DWORD *)&v665[4] = v390;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v388, v389, (int32x2_t *)v665, 0x1C3u, v391, v392, v393, v394);
  v395 = *a1;
  v396 = a1[1];
  v397 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 4;
  *(_DWORD *)&v665[4] = v397;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v395, v396, (int32x2_t *)v665, 0x1C4u, v398, v399, v400, v401);
  v402 = *a1;
  v403 = a1[1];
  v404 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 5;
  *(_DWORD *)&v665[4] = v404;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v402, v403, (int32x2_t *)v665, 0x1C5u, v405, v406, v407, v408);
  v409 = *a1;
  v410 = a1[1];
  v411 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 6;
  *(_DWORD *)&v665[4] = v411;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v409, v410, (int32x2_t *)v665, 0x1C6u, v412, v413, v414, v415);
  v416 = *a1;
  v417 = a1[1];
  v418 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)v665 = *(_DWORD *)a2 + 7;
  *(_DWORD *)&v665[4] = v418;
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v416, v417, (int32x2_t *)v665, 0x1C7u, v419, v420, v421, v422);
  v423 = *a1;
  v424 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000001);
  sub_223D0629C(v423, v424, (int32x2_t *)v665, 0x1C8u, *(double *)&v665[4], v425, v426, v427);
  v428 = *a1;
  v429 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v428, v429, (int32x2_t *)v665, 0x1C9u, *(double *)v665, COERCE_DOUBLE(0x100000001), v430, v431);
  v432 = *a1;
  v433 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v432, v433, (int32x2_t *)v665, 0x1CAu, *(double *)v665, COERCE_DOUBLE(0x100000002), v434, v435);
  v436 = *a1;
  v437 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v436, v437, (int32x2_t *)v665, 0x1CBu, *(double *)v665, COERCE_DOUBLE(0x100000003), v438, v439);
  v440 = *a1;
  v441 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v440, v441, (int32x2_t *)v665, 0x1CCu, *(double *)v665, COERCE_DOUBLE(0x100000004), v442, v443);
  v444 = *a1;
  v445 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v444, v445, (int32x2_t *)v665, 0x1CDu, *(double *)v665, COERCE_DOUBLE(0x100000005), v446, v447);
  v448 = *a1;
  v449 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v448, v449, (int32x2_t *)v665, 0x1CEu, *(double *)v665, COERCE_DOUBLE(0x100000006), v450, v451);
  v452 = *a1;
  v453 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x100000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v452, v453, (int32x2_t *)v665, 0x1CFu, *(double *)v665, COERCE_DOUBLE(0x100000007), v454, v455);
  v456 = *a1;
  v457 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000002);
  sub_223D0629C(v456, v457, (int32x2_t *)v665, 0x1D0u, *(double *)&v665[4], v458, v459, v460);
  v461 = *a1;
  v462 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v461, v462, (int32x2_t *)v665, 0x1D1u, *(double *)v665, COERCE_DOUBLE(0x200000001), v463, v464);
  v465 = *a1;
  v466 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v465, v466, (int32x2_t *)v665, 0x1D2u, *(double *)v665, COERCE_DOUBLE(0x200000002), v467, v468);
  v469 = *a1;
  v470 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v469, v470, (int32x2_t *)v665, 0x1D3u, *(double *)v665, COERCE_DOUBLE(0x200000003), v471, v472);
  v473 = *a1;
  v474 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v473, v474, (int32x2_t *)v665, 0x1D4u, *(double *)v665, COERCE_DOUBLE(0x200000004), v475, v476);
  v477 = *a1;
  v478 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v477, v478, (int32x2_t *)v665, 0x1D5u, *(double *)v665, COERCE_DOUBLE(0x200000005), v479, v480);
  v481 = *a1;
  v482 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v481, v482, (int32x2_t *)v665, 0x1D6u, *(double *)v665, COERCE_DOUBLE(0x200000006), v483, v484);
  v485 = *a1;
  v486 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x200000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v485, v486, (int32x2_t *)v665, 0x1D7u, *(double *)v665, COERCE_DOUBLE(0x200000007), v487, v488);
  v489 = *a1;
  v490 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000003);
  sub_223D0629C(v489, v490, (int32x2_t *)v665, 0x1D8u, *(double *)&v665[4], v491, v492, v493);
  v494 = *a1;
  v495 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v494, v495, (int32x2_t *)v665, 0x1D9u, *(double *)v665, COERCE_DOUBLE(0x300000001), v496, v497);
  v498 = *a1;
  v499 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v498, v499, (int32x2_t *)v665, 0x1DAu, *(double *)v665, COERCE_DOUBLE(0x300000002), v500, v501);
  v502 = *a1;
  v503 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v502, v503, (int32x2_t *)v665, 0x1DBu, *(double *)v665, COERCE_DOUBLE(0x300000003), v504, v505);
  v506 = *a1;
  v507 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v506, v507, (int32x2_t *)v665, 0x1DCu, *(double *)v665, COERCE_DOUBLE(0x300000004), v508, v509);
  v510 = *a1;
  v511 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v510, v511, (int32x2_t *)v665, 0x1DDu, *(double *)v665, COERCE_DOUBLE(0x300000005), v512, v513);
  v514 = *a1;
  v515 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v514, v515, (int32x2_t *)v665, 0x1DEu, *(double *)v665, COERCE_DOUBLE(0x300000006), v516, v517);
  v518 = *a1;
  v519 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x300000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v518, v519, (int32x2_t *)v665, 0x1DFu, *(double *)v665, COERCE_DOUBLE(0x300000007), v520, v521);
  v522 = *a1;
  v523 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000004);
  sub_223D0629C(v522, v523, (int32x2_t *)v665, 0x1E0u, *(double *)&v665[4], v524, v525, v526);
  v527 = *a1;
  v528 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v527, v528, (int32x2_t *)v665, 0x1E1u, *(double *)v665, COERCE_DOUBLE(0x400000001), v529, v530);
  v531 = *a1;
  v532 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v531, v532, (int32x2_t *)v665, 0x1E2u, *(double *)v665, COERCE_DOUBLE(0x400000002), v533, v534);
  v535 = *a1;
  v536 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v535, v536, (int32x2_t *)v665, 0x1E3u, *(double *)v665, COERCE_DOUBLE(0x400000003), v537, v538);
  v539 = *a1;
  v540 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v539, v540, (int32x2_t *)v665, 0x1E4u, *(double *)v665, COERCE_DOUBLE(0x400000004), v541, v542);
  v543 = *a1;
  v544 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v543, v544, (int32x2_t *)v665, 0x1E5u, *(double *)v665, COERCE_DOUBLE(0x400000005), v545, v546);
  v547 = *a1;
  v548 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v547, v548, (int32x2_t *)v665, 0x1E6u, *(double *)v665, COERCE_DOUBLE(0x400000006), v549, v550);
  v551 = *a1;
  v552 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x400000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v551, v552, (int32x2_t *)v665, 0x1E7u, *(double *)v665, COERCE_DOUBLE(0x400000007), v553, v554);
  v555 = *a1;
  v556 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000005);
  sub_223D0629C(v555, v556, (int32x2_t *)v665, 0x1E8u, *(double *)&v665[4], v557, v558, v559);
  v560 = *a1;
  v561 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v560, v561, (int32x2_t *)v665, 0x1E9u, *(double *)v665, COERCE_DOUBLE(0x500000001), v562, v563);
  v564 = *a1;
  v565 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v564, v565, (int32x2_t *)v665, 0x1EAu, *(double *)v665, COERCE_DOUBLE(0x500000002), v566, v567);
  v568 = *a1;
  v569 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v568, v569, (int32x2_t *)v665, 0x1EBu, *(double *)v665, COERCE_DOUBLE(0x500000003), v570, v571);
  v572 = *a1;
  v573 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v572, v573, (int32x2_t *)v665, 0x1ECu, *(double *)v665, COERCE_DOUBLE(0x500000004), v574, v575);
  v576 = *a1;
  v577 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v576, v577, (int32x2_t *)v665, 0x1EDu, *(double *)v665, COERCE_DOUBLE(0x500000005), v578, v579);
  v580 = *a1;
  v581 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v580, v581, (int32x2_t *)v665, 0x1EEu, *(double *)v665, v582, v583, v584);
  v585 = *a1;
  v586 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x500000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v585, v586, (int32x2_t *)v665, 0x1EFu, *(double *)v665, COERCE_DOUBLE(0x500000007), v587, v588);
  v589 = *a1;
  v590 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000006);
  sub_223D0629C(v589, v590, (int32x2_t *)v665, 0x1F0u, *(double *)&v665[4], v591, v592, v593);
  v594 = *a1;
  v595 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v594, v595, (int32x2_t *)v665, 0x1F1u, *(double *)v665, COERCE_DOUBLE(0x600000001), v596, v597);
  v598 = *a1;
  v599 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v598, v599, (int32x2_t *)v665, 0x1F2u, *(double *)v665, v600, v601, v602);
  v603 = *a1;
  v604 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v603, v604, (int32x2_t *)v665, 0x1F3u, *(double *)v665, COERCE_DOUBLE(0x600000003), v605, v606);
  v607 = *a1;
  v608 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v607, v608, (int32x2_t *)v665, 0x1F4u, *(double *)v665, COERCE_DOUBLE(0x600000004), v609, v610);
  v611 = *a1;
  v612 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v611, v612, (int32x2_t *)v665, 0x1F5u, *(double *)v665, COERCE_DOUBLE(0x600000005), v613, v614);
  v615 = *a1;
  v616 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v615, v616, (int32x2_t *)v665, 0x1F6u, *(double *)v665, COERCE_DOUBLE(0x600000006), v617, v618);
  v619 = *a1;
  v620 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x600000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v619, v620, (int32x2_t *)v665, 0x1F7u, *(double *)v665, v621, v622, v623);
  v624 = *a1;
  v625 = a1[1];
  *(_DWORD *)v665 = *(_DWORD *)a2;
  *(int32x2_t *)&v665[4] = vadd_s32(*(int32x2_t *)(a2 + 4), (int32x2_t)0x700000007);
  sub_223D0629C(v624, v625, (int32x2_t *)v665, 0x1F8u, *(double *)&v665[4], v626, v627, v628);
  v629 = *a1;
  v630 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000001);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v629, v630, (int32x2_t *)v665, 0x1F9u, *(double *)v665, v631, v632, v633);
  v634 = *a1;
  v635 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000002);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v634, v635, (int32x2_t *)v665, 0x1FAu, *(double *)v665, v636, v637, v638);
  v639 = *a1;
  v640 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000003);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v639, v640, (int32x2_t *)v665, 0x1FBu, *(double *)v665, v641, v642, v643);
  v644 = *a1;
  v645 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000004);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v644, v645, (int32x2_t *)v665, 0x1FCu, *(double *)v665, v646, v647, v648);
  v649 = *a1;
  v650 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000005);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v649, v650, (int32x2_t *)v665, 0x1FDu, *(double *)v665, v651, v652, v653);
  v654 = *a1;
  v655 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000006);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  sub_223D0629C(v654, v655, (int32x2_t *)v665, 0x1FEu, *(double *)v665, v656, v657, v658);
  v659 = *a1;
  v660 = a1[1];
  *(int32x2_t *)v665 = vadd_s32(*(int32x2_t *)a2, (int32x2_t)0x700000007);
  *(_DWORD *)&v665[8] = *(_DWORD *)(a2 + 8) + 7;
  return sub_223D0629C(v659, v660, (int32x2_t *)v665, 0x1FFu, *(double *)v665, v661, v662, v663);
}

uint64_t sub_223D0C9A8(uint64_t a1, int a2, int a3, uint64_t a4, double a5, float32_t a6, float a7)
{
  unsigned int v10;
  uint64_t v11;
  int32x2_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t result;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t v24;
  _BYTE v25[12];
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  uint64_t v64;
  int v65;
  char v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  char v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  char v79;
  int v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  int v85;
  char v86;
  char v87;
  int v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  int v93;
  char v94;
  char v95;
  int v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  int v101;
  char v102;
  char v103;
  int v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  int v109;
  char v110;
  char v111;
  int v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  int v117;
  char v118;
  char v119;
  int v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  int v125;
  char v126;
  char v127;
  int v128;
  uint64_t v129;
  char v130;
  int32x2_t v131;
  int v132;
  uint64_t v133;
  int v134;

  v10 = a3 & 0xCFFFFFFF;
  v11 = *(_QWORD *)(a1 + 184) + 4488 * (a3 & 0xCFFFFFFF);
  v12 = *(int32x2_t *)v11;
  v132 = *(_DWORD *)(v11 + 8);
  v131 = v12;
  v13 = *(_QWORD *)(v11 + 12);
  v134 = *(_DWORD *)(v11 + 20);
  v133 = v13;
  v25[0] = 1;
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  *(_QWORD *)&v25[4] = -1;
  LODWORD(v26) = -1;
  BYTE4(v26) = 8;
  LOBYTE(v27) = 1;
  v28 = -1;
  v29 = -1;
  v30 = 8;
  v31 = 1;
  v32 = -1;
  v33 = -1;
  v34 = 8;
  v35 = 1;
  v36 = -1;
  v37 = -1;
  v38 = 8;
  v39 = 1;
  v40 = -1;
  v41 = -1;
  v42 = 8;
  v43 = 1;
  v44 = -1;
  v45 = -1;
  v46 = 8;
  v47 = 1;
  v48 = -1;
  v49 = -1;
  v50 = 8;
  v51 = 1;
  v52 = -1;
  v53 = -1;
  v54 = 8;
  v55 = 1;
  v56 = -1;
  v57 = -1;
  v58 = 8;
  v59 = 1;
  v60 = -1;
  v61 = -1;
  v62 = 8;
  v63 = 1;
  v64 = -1;
  v65 = -1;
  v66 = 8;
  v67 = 1;
  v68 = -1;
  v69 = -1;
  v70 = 8;
  v71 = 1;
  v72 = -1;
  v73 = -1;
  v74 = 8;
  v75 = 1;
  v76 = -1;
  v77 = -1;
  v78 = 8;
  v79 = 1;
  v80 = -1;
  v81 = -1;
  v82 = 8;
  v83 = 1;
  v84 = -1;
  v85 = -1;
  v86 = 8;
  v87 = 1;
  v88 = -1;
  v89 = -1;
  v90 = 8;
  v91 = 1;
  v92 = -1;
  v93 = -1;
  v94 = 8;
  v95 = 1;
  v96 = -1;
  v97 = -1;
  v98 = 8;
  v99 = 1;
  v100 = -1;
  v101 = -1;
  v102 = 8;
  v103 = 1;
  v104 = -1;
  v105 = -1;
  v106 = 8;
  v107 = 1;
  v108 = -1;
  v109 = -1;
  v110 = 8;
  v111 = 1;
  v112 = -1;
  v113 = -1;
  v114 = 8;
  v115 = 1;
  v116 = -1;
  v117 = -1;
  v118 = 8;
  v119 = 1;
  v120 = -1;
  v121 = -1;
  v122 = 8;
  v123 = 1;
  v124 = -1;
  v125 = -1;
  v126 = 8;
  v127 = 1;
  v128 = -1;
  v129 = -1;
  v130 = 8;
  result = sub_223D0CE6C(a4, a2, 0, v14, a6, a7, (uint64_t)&v131, *(_DWORD *)(v11 + 64), (uint64_t)v25);
  if (a2 && (_DWORD)result != 3)
  {
    v17 = (a2 - 1);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a1 + 184);
      if ((*(_DWORD *)(v18 + 4488 * v10 + 24) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 28) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 32) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 36) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 40) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 44) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 48) & 0x80000000) == 0)
      {
        result = sub_223D0C9A8(a1, v17);
        v18 = *(_QWORD *)(a1 + 184);
      }
      if ((*(_DWORD *)(v18 + 4488 * v10 + 52) & 0x80000000) == 0)
        return sub_223D0C9A8(a1, v17);
    }
    else
    {
      for (i = 0; i != 8; ++i)
      {
        v20 = byte_22466FA9C[i];
        v21 = *(_QWORD *)(a1 + 184);
        v22 = *(_DWORD *)(v21 + 4488 * v10 + 4 * v20 + 24);
        if ((v22 & 0x80000000) == 0)
        {
          v23 = (v133 - v131.i32[0]) >> 1;
          v24 = vdup_n_s32(v23);
          *(int32x2_t *)v25 = vmla_s32(v131, v24, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vdup_n_s32(v20), (uint32x2_t)-2) & 0xFFFFFF01FFFFFF01));
          *(_DWORD *)&v25[8] = v132 + v23 * (v20 & 1);
          *(int32x2_t *)v16.f32 = vadd_s32(*(int32x2_t *)v25, v24);
          v26 = v16.i64[0];
          v27 = *(_DWORD *)&v25[8] + v23;
          result = sub_223D0CE6C(a4, 0, v22, v16, *(float32_t *)v25, *(float *)v24.i32, (uint64_t)v25, v22 >> 30 == 0, v21 + 4488 * v10 + 540 * v20 + 68);
        }
      }
    }
  }
  return result;
}

uint64_t sub_223D0CE6C(uint64_t a1, int a2, unsigned int a3, float32x4_t a4, float32_t a5, float a6, uint64_t a7, int a8, uint64_t a9)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD **v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t *v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t *v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  uint64_t *v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t *v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned __int8 *v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t *v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  _QWORD **v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  _QWORD v137[5];
  char v138;
  unint64_t v139;
  unsigned __int32 v140;

  if (a8)
  {
    if (a2)
      return 2;
    v11 = *(_QWORD **)(a1 + 8);
    v138 = 1;
    v12 = *v11;
    v13 = a3;
    v14 = *(_QWORD *)(*v11 + 2328);
    if (a3 >= (unint64_t)((*(_QWORD *)(*v11 + 2336) - v14) >> 11))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/VoxelStore.hpp", 640, (uint64_t)"block_index < allocated_voxel_blocks_.size()", 44, (uint64_t)"Invalid block index", 19, (void (*)(void **))sub_22457406C))
      {
LABEL_146:
        abort();
      }
      v14 = *(_QWORD *)(v12 + 2328);
    }
    v15 = (_DWORD *)(v14 + (v13 << 11));
    v137[0] = v12;
    v137[1] = v15;
    v137[2] = a9;
    v137[3] = &v138;
    v16 = (_QWORD **)v11[1];
    v137[4] = v16;
    v17 = *v15;
    v18 = *(_DWORD *)(v12 + 272);
    if (*v15 >> 30)
      v19 = 1;
    else
      v19 = v17 == v18;
    v128 = v16;
    v127 = v15;
    if (!v19)
    {
      v20 = v17 & 0xCFFFFFFF;
      v21 = (*v16)[306];
      v22 = *(unsigned int *)(v21 + 520 * v20 + 4);
      if ((_DWORD)v22)
      {
        v23 = (unint64_t *)*v16[1];
        v24 = (uint64_t *)(v21 + 520 * v20 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v129 = a4;
        do
        {
          while (1)
          {
            v25 = *(unsigned __int8 *)v24;
            if ((v25 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v25 = *(unsigned __int8 *)v24;
            }
            v26 = v23[1];
            if (v26 >= v23[2])
            {
              v28 = sub_2233B2B48(v23, v24 - 3);
            }
            else
            {
              v27 = *(v24 - 3);
              *(_DWORD *)(v26 + 8) = *((_DWORD *)v24 - 4);
              *(_QWORD *)v26 = v27;
              v28 = v26 + 12;
            }
            v23[1] = v28;
            v29 = (unsigned __int8 *)&byte_2245C3FE4[3 * v25];
            if (v25 >= 0x2A)
              v29 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v29;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v29[1];
            LOBYTE(a6) = v29[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v129.f32[0];
            a4 = vdivq_f32(a4, v129);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v30 = v23[5];
            if (v30 < v23[6])
              break;
            v23[5] = sub_2233B2B48(v23 + 4, (uint64_t *)&v139);
            v24 = (uint64_t *)((char *)v24 + 28);
            if (!--v22)
              goto LABEL_24;
          }
          v31 = v139;
          *(_DWORD *)(v30 + 8) = v140;
          *(_QWORD *)v30 = v31;
          v23[5] = v30 + 12;
          v24 = (uint64_t *)((char *)v24 + 28);
          --v22;
        }
        while (v22);
LABEL_24:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v32 = v15[1];
    if (v32 >> 30)
      v33 = 1;
    else
      v33 = v32 == v18;
    if (!v33)
    {
      v34 = v32 & 0xCFFFFFFF;
      v35 = (*v16)[306];
      v36 = *(unsigned int *)(v35 + 520 * v34 + 4);
      if ((_DWORD)v36)
      {
        v37 = (unint64_t *)*v16[1];
        v38 = (uint64_t *)(v35 + 520 * v34 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v130 = a4;
        do
        {
          while (1)
          {
            v39 = *(unsigned __int8 *)v38;
            if ((v39 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v39 = *(unsigned __int8 *)v38;
            }
            v40 = v37[1];
            if (v40 >= v37[2])
            {
              v42 = sub_2233B2B48(v37, v38 - 3);
            }
            else
            {
              v41 = *(v38 - 3);
              *(_DWORD *)(v40 + 8) = *((_DWORD *)v38 - 4);
              *(_QWORD *)v40 = v41;
              v42 = v40 + 12;
            }
            v37[1] = v42;
            v43 = (unsigned __int8 *)&byte_2245C3FE4[3 * v39];
            if (v39 >= 0x2A)
              v43 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v43;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v43[1];
            LOBYTE(a6) = v43[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v130.f32[0];
            a4 = vdivq_f32(a4, v130);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v44 = v37[5];
            if (v44 < v37[6])
              break;
            v37[5] = sub_2233B2B48(v37 + 4, (uint64_t *)&v139);
            v38 = (uint64_t *)((char *)v38 + 28);
            if (!--v36)
              goto LABEL_42;
          }
          v45 = v139;
          *(_DWORD *)(v44 + 8) = v140;
          *(_QWORD *)v44 = v45;
          v37[5] = v44 + 12;
          v38 = (uint64_t *)((char *)v38 + 28);
          --v36;
        }
        while (v36);
LABEL_42:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v46 = v15[2];
    if (v46 >> 30)
      v47 = 1;
    else
      v47 = v46 == v18;
    if (!v47)
    {
      v48 = v46 & 0xCFFFFFFF;
      v49 = (*v16)[306];
      v50 = *(unsigned int *)(v49 + 520 * v48 + 4);
      if ((_DWORD)v50)
      {
        v51 = (unint64_t *)*v16[1];
        v52 = (uint64_t *)(v49 + 520 * v48 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v131 = a4;
        do
        {
          while (1)
          {
            v53 = *(unsigned __int8 *)v52;
            if ((v53 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v53 = *(unsigned __int8 *)v52;
            }
            v54 = v51[1];
            if (v54 >= v51[2])
            {
              v56 = sub_2233B2B48(v51, v52 - 3);
            }
            else
            {
              v55 = *(v52 - 3);
              *(_DWORD *)(v54 + 8) = *((_DWORD *)v52 - 4);
              *(_QWORD *)v54 = v55;
              v56 = v54 + 12;
            }
            v51[1] = v56;
            v57 = (unsigned __int8 *)&byte_2245C3FE4[3 * v53];
            if (v53 >= 0x2A)
              v57 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v57;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v57[1];
            LOBYTE(a6) = v57[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v131.f32[0];
            a4 = vdivq_f32(a4, v131);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v58 = v51[5];
            if (v58 < v51[6])
              break;
            v51[5] = sub_2233B2B48(v51 + 4, (uint64_t *)&v139);
            v52 = (uint64_t *)((char *)v52 + 28);
            if (!--v50)
              goto LABEL_60;
          }
          v59 = v139;
          *(_DWORD *)(v58 + 8) = v140;
          *(_QWORD *)v58 = v59;
          v51[5] = v58 + 12;
          v52 = (uint64_t *)((char *)v52 + 28);
          --v50;
        }
        while (v50);
LABEL_60:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v60 = v15[3];
    if (v60 >> 30)
      v61 = 1;
    else
      v61 = v60 == v18;
    if (!v61)
    {
      v62 = v60 & 0xCFFFFFFF;
      v63 = (*v16)[306];
      v64 = *(unsigned int *)(v63 + 520 * v62 + 4);
      if ((_DWORD)v64)
      {
        v65 = (unint64_t *)*v16[1];
        v66 = (uint64_t *)(v63 + 520 * v62 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v132 = a4;
        do
        {
          while (1)
          {
            v67 = *(unsigned __int8 *)v66;
            if ((v67 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v67 = *(unsigned __int8 *)v66;
            }
            v68 = v65[1];
            if (v68 >= v65[2])
            {
              v70 = sub_2233B2B48(v65, v66 - 3);
            }
            else
            {
              v69 = *(v66 - 3);
              *(_DWORD *)(v68 + 8) = *((_DWORD *)v66 - 4);
              *(_QWORD *)v68 = v69;
              v70 = v68 + 12;
            }
            v65[1] = v70;
            v71 = (unsigned __int8 *)&byte_2245C3FE4[3 * v67];
            if (v67 >= 0x2A)
              v71 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v71;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v71[1];
            LOBYTE(a6) = v71[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v132.f32[0];
            a4 = vdivq_f32(a4, v132);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v72 = v65[5];
            if (v72 < v65[6])
              break;
            v65[5] = sub_2233B2B48(v65 + 4, (uint64_t *)&v139);
            v66 = (uint64_t *)((char *)v66 + 28);
            if (!--v64)
              goto LABEL_78;
          }
          v73 = v139;
          *(_DWORD *)(v72 + 8) = v140;
          *(_QWORD *)v72 = v73;
          v65[5] = v72 + 12;
          v66 = (uint64_t *)((char *)v66 + 28);
          --v64;
        }
        while (v64);
LABEL_78:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v74 = v15[4];
    if (v74 >> 30)
      v75 = 1;
    else
      v75 = v74 == v18;
    if (!v75)
    {
      v76 = v74 & 0xCFFFFFFF;
      v77 = (*v16)[306];
      v78 = *(unsigned int *)(v77 + 520 * v76 + 4);
      if ((_DWORD)v78)
      {
        v79 = (unint64_t *)*v16[1];
        v80 = (uint64_t *)(v77 + 520 * v76 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v133 = a4;
        do
        {
          while (1)
          {
            v81 = *(unsigned __int8 *)v80;
            if ((v81 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v81 = *(unsigned __int8 *)v80;
            }
            v82 = v79[1];
            if (v82 >= v79[2])
            {
              v84 = sub_2233B2B48(v79, v80 - 3);
            }
            else
            {
              v83 = *(v80 - 3);
              *(_DWORD *)(v82 + 8) = *((_DWORD *)v80 - 4);
              *(_QWORD *)v82 = v83;
              v84 = v82 + 12;
            }
            v79[1] = v84;
            v85 = (unsigned __int8 *)&byte_2245C3FE4[3 * v81];
            if (v81 >= 0x2A)
              v85 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v85;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v85[1];
            LOBYTE(a6) = v85[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v133.f32[0];
            a4 = vdivq_f32(a4, v133);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v86 = v79[5];
            if (v86 < v79[6])
              break;
            v79[5] = sub_2233B2B48(v79 + 4, (uint64_t *)&v139);
            v80 = (uint64_t *)((char *)v80 + 28);
            if (!--v78)
              goto LABEL_96;
          }
          v87 = v139;
          *(_DWORD *)(v86 + 8) = v140;
          *(_QWORD *)v86 = v87;
          v79[5] = v86 + 12;
          v80 = (uint64_t *)((char *)v80 + 28);
          --v78;
        }
        while (v78);
LABEL_96:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v88 = v15[5];
    if (!(v88 >> 30) && v88 != v18)
    {
      v89 = v88 & 0xCFFFFFFF;
      v90 = (*v16)[306];
      v91 = *(unsigned int *)(v90 + 520 * v89 + 4);
      if ((_DWORD)v91)
      {
        v92 = (unint64_t *)*v16[1];
        v93 = (uint64_t *)(v90 + 520 * v89 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v134 = a4;
        do
        {
          while (1)
          {
            v94 = *(unsigned __int8 *)v93;
            if ((v94 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v94 = *(unsigned __int8 *)v93;
            }
            v95 = v92[1];
            if (v95 >= v92[2])
            {
              v97 = sub_2233B2B48(v92, v93 - 3);
            }
            else
            {
              v96 = *(v93 - 3);
              *(_DWORD *)(v95 + 8) = *((_DWORD *)v93 - 4);
              *(_QWORD *)v95 = v96;
              v97 = v95 + 12;
            }
            v92[1] = v97;
            v98 = (unsigned __int8 *)&byte_2245C3FE4[3 * v94];
            if (v94 >= 0x2A)
              v98 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v98;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v98[1];
            LOBYTE(a6) = v98[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v134.f32[0];
            a4 = vdivq_f32(a4, v134);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v99 = v92[5];
            if (v99 < v92[6])
              break;
            v92[5] = sub_2233B2B48(v92 + 4, (uint64_t *)&v139);
            v93 = (uint64_t *)((char *)v93 + 28);
            if (!--v91)
              goto LABEL_112;
          }
          v100 = v139;
          *(_DWORD *)(v99 + 8) = v140;
          *(_QWORD *)v99 = v100;
          v92[5] = v99 + 12;
          v93 = (uint64_t *)((char *)v93 + 28);
          --v91;
        }
        while (v91);
LABEL_112:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v101 = v15[6];
    if (!(v101 >> 30) && v101 != v18)
    {
      v102 = v101 & 0xCFFFFFFF;
      v103 = (*v16)[306];
      v104 = *(unsigned int *)(v103 + 520 * v102 + 4);
      if ((_DWORD)v104)
      {
        v105 = (unint64_t *)*v16[1];
        v106 = (uint64_t *)(v103 + 520 * v102 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v135 = a4;
        do
        {
          while (1)
          {
            v107 = *(unsigned __int8 *)v106;
            if ((v107 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v107 = *(unsigned __int8 *)v106;
            }
            v108 = v105[1];
            if (v108 >= v105[2])
            {
              v110 = sub_2233B2B48(v105, v106 - 3);
            }
            else
            {
              v109 = *(v106 - 3);
              *(_DWORD *)(v108 + 8) = *((_DWORD *)v106 - 4);
              *(_QWORD *)v108 = v109;
              v110 = v108 + 12;
            }
            v105[1] = v110;
            v111 = (unsigned __int8 *)&byte_2245C3FE4[3 * v107];
            if (v107 >= 0x2A)
              v111 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v111;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v111[1];
            LOBYTE(a6) = v111[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v135.f32[0];
            a4 = vdivq_f32(a4, v135);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v112 = v105[5];
            if (v112 < v105[6])
              break;
            v105[5] = sub_2233B2B48(v105 + 4, (uint64_t *)&v139);
            v106 = (uint64_t *)((char *)v106 + 28);
            if (!--v104)
              goto LABEL_128;
          }
          v113 = v139;
          *(_DWORD *)(v112 + 8) = v140;
          *(_QWORD *)v112 = v113;
          v105[5] = v112 + 12;
          v106 = (uint64_t *)((char *)v106 + 28);
          --v104;
        }
        while (v104);
LABEL_128:
        v16 = v128;
        v18 = *(_DWORD *)(v12 + 272);
        v15 = v127;
      }
    }
    v114 = v15[7];
    if (!(v114 >> 30) && v114 != v18)
    {
      v115 = v114 & 0xCFFFFFFF;
      v116 = (*v16)[306];
      v117 = *(unsigned int *)(v116 + 520 * v115 + 4);
      if ((_DWORD)v117)
      {
        v118 = (unint64_t *)*v16[1];
        v119 = (uint64_t *)(v116 + 520 * v115 + 36);
        a4 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v136 = a4;
        do
        {
          while (1)
          {
            v120 = *(unsigned __int8 *)v119;
            if ((v120 + 1) >= 0x2Bu)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_146;
              }
              v120 = *(unsigned __int8 *)v119;
            }
            v121 = v118[1];
            if (v121 >= v118[2])
            {
              v123 = sub_2233B2B48(v118, v119 - 3);
            }
            else
            {
              v122 = *(v119 - 3);
              *(_DWORD *)(v121 + 8) = *((_DWORD *)v119 - 4);
              *(_QWORD *)v121 = v122;
              v123 = v121 + 12;
            }
            v118[1] = v123;
            v124 = (unsigned __int8 *)&byte_2245C3FE4[3 * v120];
            if (v120 >= 0x2A)
              v124 = (unsigned __int8 *)&byte_2245C9FE2;
            a4.i8[0] = *v124;
            a4.f32[0] = (float)a4.u32[0];
            LOBYTE(a5) = v124[1];
            LOBYTE(a6) = v124[2];
            a6 = (float)LODWORD(a6);
            a4.f32[1] = (float)LODWORD(a5);
            a4.f32[2] = a6;
            a5 = v136.f32[0];
            a4 = vdivq_f32(a4, v136);
            v140 = a4.u32[2];
            v139 = a4.i64[0];
            v125 = v118[5];
            if (v125 < v118[6])
              break;
            v118[5] = sub_2233B2B48(v118 + 4, (uint64_t *)&v139);
            v119 = (uint64_t *)((char *)v119 + 28);
            if (!--v117)
              goto LABEL_144;
          }
          v126 = v139;
          *(_DWORD *)(v125 + 8) = v140;
          *(_QWORD *)v125 = v126;
          v118[5] = v125 + 12;
          v119 = (uint64_t *)((char *)v119 + 28);
          --v117;
        }
        while (v117);
      }
    }
LABEL_144:
    sub_223D0DBF0(v137, a4, a5, a6);
  }
  return 3;
}

_QWORD *sub_223D0DBF0(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[8];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[9];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[10];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[11];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[12];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[13];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[14];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[15];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[16];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[17];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[18];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[19];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[20];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[21];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[22];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[23];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[24];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[25];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[26];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[27];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[28];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[29];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[30];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[31];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[32];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[33];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[34];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[35];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[36];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[37];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[38];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[39];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[40];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[41];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[42];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[43];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[44];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[45];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[46];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[47];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[48];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[49];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D11F38(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D11F38(v642, a2, a3, a4);
}

_QWORD *sub_223D11F38(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[50];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[51];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[52];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[53];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[54];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[55];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[56];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[57];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[58];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[59];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[60];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[61];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[62];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[63];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[64];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[65];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[66];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[67];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[68];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[69];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[70];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[71];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[72];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[73];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[74];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[75];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[76];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[77];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[78];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[79];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[80];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[81];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[82];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[83];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[84];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[85];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[86];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[87];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[88];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[89];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[90];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[91];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D16280(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D16280(v642, a2, a3, a4);
}

_QWORD *sub_223D16280(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[92];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[93];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[94];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[95];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[96];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[97];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[98];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[99];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[100];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[101];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[102];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[103];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[104];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[105];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[106];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[107];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[108];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[109];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[110];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[111];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[112];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[113];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[114];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[115];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[116];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[117];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[118];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[119];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[120];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[121];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[122];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[123];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[124];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[125];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[126];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[127];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[128];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[129];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[130];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[131];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[132];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[133];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D1A5C8(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D1A5C8(v642, a2, a3, a4);
}

_QWORD *sub_223D1A5C8(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[134];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[135];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[136];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[137];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[138];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[139];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[140];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[141];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[142];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[143];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[144];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[145];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[146];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[147];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[148];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[149];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[150];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[151];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[152];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[153];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[154];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[155];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[156];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[157];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[158];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[159];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[160];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[161];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[162];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[163];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[164];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[165];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[166];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[167];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[168];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[169];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[170];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[171];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[172];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[173];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[174];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[175];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D1E910(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D1E910(v642, a2, a3, a4);
}

_QWORD *sub_223D1E910(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[176];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[177];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[178];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[179];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[180];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[181];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[182];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[183];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[184];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[185];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[186];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[187];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[188];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[189];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[190];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[191];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[192];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[193];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[194];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[195];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[196];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[197];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[198];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[199];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[200];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[201];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[202];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[203];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[204];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[205];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[206];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[207];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[208];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[209];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[210];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[211];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[212];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[213];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[214];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[215];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[216];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[217];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D22C58(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D22C58(v642, a2, a3, a4);
}

_QWORD *sub_223D22C58(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[218];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[219];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[220];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[221];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[222];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[223];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[224];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[225];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[226];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[227];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[228];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[229];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[230];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[231];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[232];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[233];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[234];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[235];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[236];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[237];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[238];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[239];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[240];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[241];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[242];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[243];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[244];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[245];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[246];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[247];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[248];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[249];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[250];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[251];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[252];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[253];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[254];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[255];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[256];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[257];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[258];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[259];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D26FA0(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D26FA0(v642, a2, a3, a4);
}

_QWORD *sub_223D26FA0(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[260];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[261];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[262];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[263];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[264];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[265];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[266];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[267];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[268];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[269];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[270];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[271];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[272];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[273];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[274];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[275];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[276];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[277];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[278];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[279];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[280];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[281];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[282];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[283];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[284];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[285];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[286];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[287];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[288];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[289];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[290];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[291];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[292];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[293];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[294];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[295];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[296];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[297];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[298];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[299];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[300];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[301];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D2B2E8(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D2B2E8(v642, a2, a3, a4);
}

_QWORD *sub_223D2B2E8(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[302];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[303];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[304];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[305];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[306];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[307];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[308];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[309];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[310];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[311];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[312];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[313];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[314];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[315];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[316];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[317];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[318];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[319];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[320];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[321];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[322];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[323];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[324];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[325];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[326];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[327];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[328];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[329];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[330];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[331];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[332];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[333];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[334];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[335];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[336];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[337];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[338];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[339];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[340];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[341];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[342];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[343];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D2F630(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D2F630(v642, a2, a3, a4);
}

_QWORD *sub_223D2F630(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[344];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[345];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[346];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[347];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[348];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[349];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[350];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[351];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[352];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[353];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[354];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[355];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[356];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[357];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[358];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[359];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[360];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[361];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[362];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[363];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[364];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[365];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[366];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[367];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[368];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[369];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[370];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[371];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[372];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[373];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[374];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[375];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[376];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[377];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[378];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[379];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[380];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[381];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[382];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[383];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[384];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[385];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D33978(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D33978(v642, a2, a3, a4);
}

_QWORD *sub_223D33978(_QWORD *a1, float32x4_t a2, float32_t a3, float a4)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _QWORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  _QWORD **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  _QWORD **v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  _QWORD **v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t *v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD **v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t *v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD **v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  uint64_t *v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD **v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD **v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t *v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unsigned __int8 *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD **v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  uint64_t *v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD **v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t *v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unsigned __int8 *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD **v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD **v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t *v269;
  unsigned int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  unsigned int v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD **v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  _QWORD **v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  uint64_t *v311;
  unsigned int v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unsigned __int8 *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  _QWORD **v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t *v325;
  unsigned int v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD **v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  uint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _QWORD **v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t *v352;
  uint64_t *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unsigned __int8 *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  _QWORD **v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t *v367;
  unsigned int v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  _QWORD **v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned __int8 *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD **v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t *v395;
  unsigned int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD **v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unsigned __int8 *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  _QWORD **v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t *v422;
  uint64_t *v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unsigned __int8 *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD **v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t *v436;
  uint64_t *v437;
  unsigned int v438;
  unint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unsigned __int8 *v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  _QWORD **v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  uint64_t *v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unsigned __int8 *v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  _QWORD **v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  uint64_t *v465;
  unsigned int v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unsigned __int8 *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  _QWORD **v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t *v479;
  unsigned int v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  _QWORD **v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t *v492;
  uint64_t *v493;
  unsigned int v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD **v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  uint64_t *v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unsigned __int8 *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _QWORD **v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t *v520;
  uint64_t *v521;
  unsigned int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unsigned __int8 *v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  _QWORD **v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t *v534;
  uint64_t *v535;
  unsigned int v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned __int8 *v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD **v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t *v549;
  unsigned int v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  unsigned __int8 *v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  _QWORD **v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  uint64_t *v563;
  unsigned int v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  uint64_t v571;
  _QWORD **v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t *v576;
  uint64_t *v577;
  unsigned int v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unsigned __int8 *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD **v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t *v590;
  uint64_t *v591;
  unsigned int v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  unint64_t v597;
  unint64_t v598;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  _QWORD *v642;
  unint64_t v643;
  unsigned __int32 v644;

  v4 = (unsigned int *)a1[1];
  v5 = v4[386];
  v6 = *(_DWORD *)(*a1 + 272);
  if (v5 >> 30)
    v7 = 1;
  else
    v7 = (_DWORD)v5 == v6;
  v642 = a1;
  if (!v7)
  {
    v8 = (_QWORD **)a1[4];
    v9 = v5 & 0xFFFFFFFFCFFFFFFFLL;
    v10 = (*v8)[306];
    v11 = *(unsigned int *)(v10 + 520 * v9 + 4);
    if ((_DWORD)v11)
    {
      v12 = (unint64_t *)*v8[1];
      v13 = (uint64_t *)(v10 + 520 * v9 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v600 = a2;
      do
      {
        while (1)
        {
          v14 = *(unsigned __int8 *)v13;
          if ((v14 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
LABEL_683:
              abort();
            }
            v14 = *(unsigned __int8 *)v13;
          }
          v15 = v12[1];
          if (v15 >= v12[2])
          {
            v17 = sub_2233B2B48(v12, v13 - 3);
          }
          else
          {
            v16 = *(v13 - 3);
            *(_DWORD *)(v15 + 8) = *((_DWORD *)v13 - 4);
            *(_QWORD *)v15 = v16;
            v17 = v15 + 12;
          }
          v12[1] = v17;
          v18 = (unsigned __int8 *)&byte_2245C3FE4[3 * v14];
          if (v14 >= 0x2A)
            v18 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v18;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v18[1];
          LOBYTE(a4) = v18[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v600.f32[0];
          a2 = vdivq_f32(a2, v600);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v19 = v12[5];
          if (v19 < v12[6])
            break;
          v12[5] = sub_2233B2B48(v12 + 4, (uint64_t *)&v643);
          v13 = (uint64_t *)((char *)v13 + 28);
          if (!--v11)
            goto LABEL_18;
        }
        v20 = v643;
        *(_DWORD *)(v19 + 8) = v644;
        *(_QWORD *)v19 = v20;
        v12[5] = v19 + 12;
        v13 = (uint64_t *)((char *)v13 + 28);
        --v11;
      }
      while (v11);
LABEL_18:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v21 = v4[387];
  if (v21 >> 30)
    v22 = 1;
  else
    v22 = (_DWORD)v21 == v6;
  if (!v22)
  {
    v23 = (_QWORD **)a1[4];
    v24 = v21 & 0xFFFFFFFFCFFFFFFFLL;
    v25 = (*v23)[306];
    v26 = *(unsigned int *)(v25 + 520 * v24 + 4);
    if ((_DWORD)v26)
    {
      v27 = (unint64_t *)*v23[1];
      v28 = (uint64_t *)(v25 + 520 * v24 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v601 = a2;
      do
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)v28;
          if ((v29 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v29 = *(unsigned __int8 *)v28;
          }
          v30 = v27[1];
          if (v30 >= v27[2])
          {
            v32 = sub_2233B2B48(v27, v28 - 3);
          }
          else
          {
            v31 = *(v28 - 3);
            *(_DWORD *)(v30 + 8) = *((_DWORD *)v28 - 4);
            *(_QWORD *)v30 = v31;
            v32 = v30 + 12;
          }
          v27[1] = v32;
          v33 = (unsigned __int8 *)&byte_2245C3FE4[3 * v29];
          if (v29 >= 0x2A)
            v33 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v33;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v33[1];
          LOBYTE(a4) = v33[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v601.f32[0];
          a2 = vdivq_f32(a2, v601);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v34 = v27[5];
          if (v34 < v27[6])
            break;
          v27[5] = sub_2233B2B48(v27 + 4, (uint64_t *)&v643);
          v28 = (uint64_t *)((char *)v28 + 28);
          if (!--v26)
            goto LABEL_36;
        }
        v35 = v643;
        *(_DWORD *)(v34 + 8) = v644;
        *(_QWORD *)v34 = v35;
        v27[5] = v34 + 12;
        v28 = (uint64_t *)((char *)v28 + 28);
        --v26;
      }
      while (v26);
LABEL_36:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v36 = v4[388];
  if (v36 >> 30)
    v37 = 1;
  else
    v37 = (_DWORD)v36 == v6;
  if (!v37)
  {
    v38 = (_QWORD **)a1[4];
    v39 = v36 & 0xFFFFFFFFCFFFFFFFLL;
    v40 = (*v38)[306];
    v41 = *(unsigned int *)(v40 + 520 * v39 + 4);
    if ((_DWORD)v41)
    {
      v42 = (unint64_t *)*v38[1];
      v43 = (uint64_t *)(v40 + 520 * v39 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v602 = a2;
      do
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)v43;
          if ((v44 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v44 = *(unsigned __int8 *)v43;
          }
          v45 = v42[1];
          if (v45 >= v42[2])
          {
            v47 = sub_2233B2B48(v42, v43 - 3);
          }
          else
          {
            v46 = *(v43 - 3);
            *(_DWORD *)(v45 + 8) = *((_DWORD *)v43 - 4);
            *(_QWORD *)v45 = v46;
            v47 = v45 + 12;
          }
          v42[1] = v47;
          v48 = (unsigned __int8 *)&byte_2245C3FE4[3 * v44];
          if (v44 >= 0x2A)
            v48 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v48;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v48[1];
          LOBYTE(a4) = v48[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v602.f32[0];
          a2 = vdivq_f32(a2, v602);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v49 = v42[5];
          if (v49 < v42[6])
            break;
          v42[5] = sub_2233B2B48(v42 + 4, (uint64_t *)&v643);
          v43 = (uint64_t *)((char *)v43 + 28);
          if (!--v41)
            goto LABEL_54;
        }
        v50 = v643;
        *(_DWORD *)(v49 + 8) = v644;
        *(_QWORD *)v49 = v50;
        v42[5] = v49 + 12;
        v43 = (uint64_t *)((char *)v43 + 28);
        --v41;
      }
      while (v41);
LABEL_54:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v51 = v4[389];
  if (v51 >> 30)
    v52 = 1;
  else
    v52 = (_DWORD)v51 == v6;
  if (!v52)
  {
    v53 = (_QWORD **)a1[4];
    v54 = v51 & 0xFFFFFFFFCFFFFFFFLL;
    v55 = (*v53)[306];
    v56 = *(unsigned int *)(v55 + 520 * v54 + 4);
    if ((_DWORD)v56)
    {
      v57 = (unint64_t *)*v53[1];
      v58 = (uint64_t *)(v55 + 520 * v54 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v603 = a2;
      do
      {
        while (1)
        {
          v59 = *(unsigned __int8 *)v58;
          if ((v59 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v59 = *(unsigned __int8 *)v58;
          }
          v60 = v57[1];
          if (v60 >= v57[2])
          {
            v62 = sub_2233B2B48(v57, v58 - 3);
          }
          else
          {
            v61 = *(v58 - 3);
            *(_DWORD *)(v60 + 8) = *((_DWORD *)v58 - 4);
            *(_QWORD *)v60 = v61;
            v62 = v60 + 12;
          }
          v57[1] = v62;
          v63 = (unsigned __int8 *)&byte_2245C3FE4[3 * v59];
          if (v59 >= 0x2A)
            v63 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v63;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v63[1];
          LOBYTE(a4) = v63[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v603.f32[0];
          a2 = vdivq_f32(a2, v603);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v64 = v57[5];
          if (v64 < v57[6])
            break;
          v57[5] = sub_2233B2B48(v57 + 4, (uint64_t *)&v643);
          v58 = (uint64_t *)((char *)v58 + 28);
          if (!--v56)
            goto LABEL_72;
        }
        v65 = v643;
        *(_DWORD *)(v64 + 8) = v644;
        *(_QWORD *)v64 = v65;
        v57[5] = v64 + 12;
        v58 = (uint64_t *)((char *)v58 + 28);
        --v56;
      }
      while (v56);
LABEL_72:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v66 = v4[390];
  if (v66 >> 30)
    v67 = 1;
  else
    v67 = (_DWORD)v66 == v6;
  if (!v67)
  {
    v68 = (_QWORD **)a1[4];
    v69 = v66 & 0xFFFFFFFFCFFFFFFFLL;
    v70 = (*v68)[306];
    v71 = *(unsigned int *)(v70 + 520 * v69 + 4);
    if ((_DWORD)v71)
    {
      v72 = (unint64_t *)*v68[1];
      v73 = (uint64_t *)(v70 + 520 * v69 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v604 = a2;
      do
      {
        while (1)
        {
          v74 = *(unsigned __int8 *)v73;
          if ((v74 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v74 = *(unsigned __int8 *)v73;
          }
          v75 = v72[1];
          if (v75 >= v72[2])
          {
            v77 = sub_2233B2B48(v72, v73 - 3);
          }
          else
          {
            v76 = *(v73 - 3);
            *(_DWORD *)(v75 + 8) = *((_DWORD *)v73 - 4);
            *(_QWORD *)v75 = v76;
            v77 = v75 + 12;
          }
          v72[1] = v77;
          v78 = (unsigned __int8 *)&byte_2245C3FE4[3 * v74];
          if (v74 >= 0x2A)
            v78 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v78;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v78[1];
          LOBYTE(a4) = v78[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v604.f32[0];
          a2 = vdivq_f32(a2, v604);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v79 = v72[5];
          if (v79 < v72[6])
            break;
          v72[5] = sub_2233B2B48(v72 + 4, (uint64_t *)&v643);
          v73 = (uint64_t *)((char *)v73 + 28);
          if (!--v71)
            goto LABEL_90;
        }
        v80 = v643;
        *(_DWORD *)(v79 + 8) = v644;
        *(_QWORD *)v79 = v80;
        v72[5] = v79 + 12;
        v73 = (uint64_t *)((char *)v73 + 28);
        --v71;
      }
      while (v71);
LABEL_90:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v81 = v4[391];
  if (!(v81 >> 30) && (_DWORD)v81 != v6)
  {
    v82 = (_QWORD **)a1[4];
    v83 = v81 & 0xFFFFFFFFCFFFFFFFLL;
    v84 = (*v82)[306];
    v85 = *(unsigned int *)(v84 + 520 * v83 + 4);
    if ((_DWORD)v85)
    {
      v86 = (unint64_t *)*v82[1];
      v87 = (uint64_t *)(v84 + 520 * v83 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v605 = a2;
      do
      {
        while (1)
        {
          v88 = *(unsigned __int8 *)v87;
          if ((v88 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v88 = *(unsigned __int8 *)v87;
          }
          v89 = v86[1];
          if (v89 >= v86[2])
          {
            v91 = sub_2233B2B48(v86, v87 - 3);
          }
          else
          {
            v90 = *(v87 - 3);
            *(_DWORD *)(v89 + 8) = *((_DWORD *)v87 - 4);
            *(_QWORD *)v89 = v90;
            v91 = v89 + 12;
          }
          v86[1] = v91;
          v92 = (unsigned __int8 *)&byte_2245C3FE4[3 * v88];
          if (v88 >= 0x2A)
            v92 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v92;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v92[1];
          LOBYTE(a4) = v92[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v605.f32[0];
          a2 = vdivq_f32(a2, v605);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v93 = v86[5];
          if (v93 < v86[6])
            break;
          v86[5] = sub_2233B2B48(v86 + 4, (uint64_t *)&v643);
          v87 = (uint64_t *)((char *)v87 + 28);
          if (!--v85)
            goto LABEL_106;
        }
        v94 = v643;
        *(_DWORD *)(v93 + 8) = v644;
        *(_QWORD *)v93 = v94;
        v86[5] = v93 + 12;
        v87 = (uint64_t *)((char *)v87 + 28);
        --v85;
      }
      while (v85);
LABEL_106:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v95 = v4[392];
  if (!(v95 >> 30) && (_DWORD)v95 != v6)
  {
    v96 = (_QWORD **)a1[4];
    v97 = v95 & 0xFFFFFFFFCFFFFFFFLL;
    v98 = (*v96)[306];
    v99 = *(unsigned int *)(v98 + 520 * v97 + 4);
    if ((_DWORD)v99)
    {
      v100 = (unint64_t *)*v96[1];
      v101 = (uint64_t *)(v98 + 520 * v97 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v606 = a2;
      do
      {
        while (1)
        {
          v102 = *(unsigned __int8 *)v101;
          if ((v102 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v102 = *(unsigned __int8 *)v101;
          }
          v103 = v100[1];
          if (v103 >= v100[2])
          {
            v105 = sub_2233B2B48(v100, v101 - 3);
          }
          else
          {
            v104 = *(v101 - 3);
            *(_DWORD *)(v103 + 8) = *((_DWORD *)v101 - 4);
            *(_QWORD *)v103 = v104;
            v105 = v103 + 12;
          }
          v100[1] = v105;
          v106 = (unsigned __int8 *)&byte_2245C3FE4[3 * v102];
          if (v102 >= 0x2A)
            v106 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v106;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v106[1];
          LOBYTE(a4) = v106[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v606.f32[0];
          a2 = vdivq_f32(a2, v606);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v107 = v100[5];
          if (v107 < v100[6])
            break;
          v100[5] = sub_2233B2B48(v100 + 4, (uint64_t *)&v643);
          v101 = (uint64_t *)((char *)v101 + 28);
          if (!--v99)
            goto LABEL_122;
        }
        v108 = v643;
        *(_DWORD *)(v107 + 8) = v644;
        *(_QWORD *)v107 = v108;
        v100[5] = v107 + 12;
        v101 = (uint64_t *)((char *)v101 + 28);
        --v99;
      }
      while (v99);
LABEL_122:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v109 = v4[393];
  if (!(v109 >> 30) && (_DWORD)v109 != v6)
  {
    v110 = (_QWORD **)a1[4];
    v111 = v109 & 0xFFFFFFFFCFFFFFFFLL;
    v112 = (*v110)[306];
    v113 = *(unsigned int *)(v112 + 520 * v111 + 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)*v110[1];
      v115 = (uint64_t *)(v112 + 520 * v111 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v607 = a2;
      do
      {
        while (1)
        {
          v116 = *(unsigned __int8 *)v115;
          if ((v116 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v116 = *(unsigned __int8 *)v115;
          }
          v117 = v114[1];
          if (v117 >= v114[2])
          {
            v119 = sub_2233B2B48(v114, v115 - 3);
          }
          else
          {
            v118 = *(v115 - 3);
            *(_DWORD *)(v117 + 8) = *((_DWORD *)v115 - 4);
            *(_QWORD *)v117 = v118;
            v119 = v117 + 12;
          }
          v114[1] = v119;
          v120 = (unsigned __int8 *)&byte_2245C3FE4[3 * v116];
          if (v116 >= 0x2A)
            v120 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v120;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v120[1];
          LOBYTE(a4) = v120[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v607.f32[0];
          a2 = vdivq_f32(a2, v607);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v121 = v114[5];
          if (v121 < v114[6])
            break;
          v114[5] = sub_2233B2B48(v114 + 4, (uint64_t *)&v643);
          v115 = (uint64_t *)((char *)v115 + 28);
          if (!--v113)
            goto LABEL_138;
        }
        v122 = v643;
        *(_DWORD *)(v121 + 8) = v644;
        *(_QWORD *)v121 = v122;
        v114[5] = v121 + 12;
        v115 = (uint64_t *)((char *)v115 + 28);
        --v113;
      }
      while (v113);
LABEL_138:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v123 = v4[394];
  if (!(v123 >> 30) && (_DWORD)v123 != v6)
  {
    v124 = (_QWORD **)a1[4];
    v125 = v123 & 0xFFFFFFFFCFFFFFFFLL;
    v126 = (*v124)[306];
    v127 = *(unsigned int *)(v126 + 520 * v125 + 4);
    if ((_DWORD)v127)
    {
      v128 = (unint64_t *)*v124[1];
      v129 = (uint64_t *)(v126 + 520 * v125 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v608 = a2;
      do
      {
        while (1)
        {
          v130 = *(unsigned __int8 *)v129;
          if ((v130 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v130 = *(unsigned __int8 *)v129;
          }
          v131 = v128[1];
          if (v131 >= v128[2])
          {
            v133 = sub_2233B2B48(v128, v129 - 3);
          }
          else
          {
            v132 = *(v129 - 3);
            *(_DWORD *)(v131 + 8) = *((_DWORD *)v129 - 4);
            *(_QWORD *)v131 = v132;
            v133 = v131 + 12;
          }
          v128[1] = v133;
          v134 = (unsigned __int8 *)&byte_2245C3FE4[3 * v130];
          if (v130 >= 0x2A)
            v134 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v134;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v134[1];
          LOBYTE(a4) = v134[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v608.f32[0];
          a2 = vdivq_f32(a2, v608);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v135 = v128[5];
          if (v135 < v128[6])
            break;
          v128[5] = sub_2233B2B48(v128 + 4, (uint64_t *)&v643);
          v129 = (uint64_t *)((char *)v129 + 28);
          if (!--v127)
            goto LABEL_154;
        }
        v136 = v643;
        *(_DWORD *)(v135 + 8) = v644;
        *(_QWORD *)v135 = v136;
        v128[5] = v135 + 12;
        v129 = (uint64_t *)((char *)v129 + 28);
        --v127;
      }
      while (v127);
LABEL_154:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v137 = v4[395];
  if (!(v137 >> 30) && (_DWORD)v137 != v6)
  {
    v138 = (_QWORD **)a1[4];
    v139 = v137 & 0xFFFFFFFFCFFFFFFFLL;
    v140 = (*v138)[306];
    v141 = *(unsigned int *)(v140 + 520 * v139 + 4);
    if ((_DWORD)v141)
    {
      v142 = (unint64_t *)*v138[1];
      v143 = (uint64_t *)(v140 + 520 * v139 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v609 = a2;
      do
      {
        while (1)
        {
          v144 = *(unsigned __int8 *)v143;
          if ((v144 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v144 = *(unsigned __int8 *)v143;
          }
          v145 = v142[1];
          if (v145 >= v142[2])
          {
            v147 = sub_2233B2B48(v142, v143 - 3);
          }
          else
          {
            v146 = *(v143 - 3);
            *(_DWORD *)(v145 + 8) = *((_DWORD *)v143 - 4);
            *(_QWORD *)v145 = v146;
            v147 = v145 + 12;
          }
          v142[1] = v147;
          v148 = (unsigned __int8 *)&byte_2245C3FE4[3 * v144];
          if (v144 >= 0x2A)
            v148 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v148;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v148[1];
          LOBYTE(a4) = v148[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v609.f32[0];
          a2 = vdivq_f32(a2, v609);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v149 = v142[5];
          if (v149 < v142[6])
            break;
          v142[5] = sub_2233B2B48(v142 + 4, (uint64_t *)&v643);
          v143 = (uint64_t *)((char *)v143 + 28);
          if (!--v141)
            goto LABEL_170;
        }
        v150 = v643;
        *(_DWORD *)(v149 + 8) = v644;
        *(_QWORD *)v149 = v150;
        v142[5] = v149 + 12;
        v143 = (uint64_t *)((char *)v143 + 28);
        --v141;
      }
      while (v141);
LABEL_170:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v151 = v4[396];
  if (!(v151 >> 30) && (_DWORD)v151 != v6)
  {
    v152 = (_QWORD **)a1[4];
    v153 = v151 & 0xFFFFFFFFCFFFFFFFLL;
    v154 = (*v152)[306];
    v155 = *(unsigned int *)(v154 + 520 * v153 + 4);
    if ((_DWORD)v155)
    {
      v156 = (unint64_t *)*v152[1];
      v157 = (uint64_t *)(v154 + 520 * v153 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v610 = a2;
      do
      {
        while (1)
        {
          v158 = *(unsigned __int8 *)v157;
          if ((v158 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v158 = *(unsigned __int8 *)v157;
          }
          v159 = v156[1];
          if (v159 >= v156[2])
          {
            v161 = sub_2233B2B48(v156, v157 - 3);
          }
          else
          {
            v160 = *(v157 - 3);
            *(_DWORD *)(v159 + 8) = *((_DWORD *)v157 - 4);
            *(_QWORD *)v159 = v160;
            v161 = v159 + 12;
          }
          v156[1] = v161;
          v162 = (unsigned __int8 *)&byte_2245C3FE4[3 * v158];
          if (v158 >= 0x2A)
            v162 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v162;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v162[1];
          LOBYTE(a4) = v162[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v610.f32[0];
          a2 = vdivq_f32(a2, v610);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v163 = v156[5];
          if (v163 < v156[6])
            break;
          v156[5] = sub_2233B2B48(v156 + 4, (uint64_t *)&v643);
          v157 = (uint64_t *)((char *)v157 + 28);
          if (!--v155)
            goto LABEL_186;
        }
        v164 = v643;
        *(_DWORD *)(v163 + 8) = v644;
        *(_QWORD *)v163 = v164;
        v156[5] = v163 + 12;
        v157 = (uint64_t *)((char *)v157 + 28);
        --v155;
      }
      while (v155);
LABEL_186:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v165 = v4[397];
  if (!(v165 >> 30) && (_DWORD)v165 != v6)
  {
    v166 = (_QWORD **)a1[4];
    v167 = v165 & 0xFFFFFFFFCFFFFFFFLL;
    v168 = (*v166)[306];
    v169 = *(unsigned int *)(v168 + 520 * v167 + 4);
    if ((_DWORD)v169)
    {
      v170 = (unint64_t *)*v166[1];
      v171 = (uint64_t *)(v168 + 520 * v167 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v611 = a2;
      do
      {
        while (1)
        {
          v172 = *(unsigned __int8 *)v171;
          if ((v172 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v172 = *(unsigned __int8 *)v171;
          }
          v173 = v170[1];
          if (v173 >= v170[2])
          {
            v175 = sub_2233B2B48(v170, v171 - 3);
          }
          else
          {
            v174 = *(v171 - 3);
            *(_DWORD *)(v173 + 8) = *((_DWORD *)v171 - 4);
            *(_QWORD *)v173 = v174;
            v175 = v173 + 12;
          }
          v170[1] = v175;
          v176 = (unsigned __int8 *)&byte_2245C3FE4[3 * v172];
          if (v172 >= 0x2A)
            v176 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v176;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v176[1];
          LOBYTE(a4) = v176[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v611.f32[0];
          a2 = vdivq_f32(a2, v611);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v177 = v170[5];
          if (v177 < v170[6])
            break;
          v170[5] = sub_2233B2B48(v170 + 4, (uint64_t *)&v643);
          v171 = (uint64_t *)((char *)v171 + 28);
          if (!--v169)
            goto LABEL_202;
        }
        v178 = v643;
        *(_DWORD *)(v177 + 8) = v644;
        *(_QWORD *)v177 = v178;
        v170[5] = v177 + 12;
        v171 = (uint64_t *)((char *)v171 + 28);
        --v169;
      }
      while (v169);
LABEL_202:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v179 = v4[398];
  if (!(v179 >> 30) && (_DWORD)v179 != v6)
  {
    v180 = (_QWORD **)a1[4];
    v181 = v179 & 0xFFFFFFFFCFFFFFFFLL;
    v182 = (*v180)[306];
    v183 = *(unsigned int *)(v182 + 520 * v181 + 4);
    if ((_DWORD)v183)
    {
      v184 = (unint64_t *)*v180[1];
      v185 = (uint64_t *)(v182 + 520 * v181 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v612 = a2;
      do
      {
        while (1)
        {
          v186 = *(unsigned __int8 *)v185;
          if ((v186 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v186 = *(unsigned __int8 *)v185;
          }
          v187 = v184[1];
          if (v187 >= v184[2])
          {
            v189 = sub_2233B2B48(v184, v185 - 3);
          }
          else
          {
            v188 = *(v185 - 3);
            *(_DWORD *)(v187 + 8) = *((_DWORD *)v185 - 4);
            *(_QWORD *)v187 = v188;
            v189 = v187 + 12;
          }
          v184[1] = v189;
          v190 = (unsigned __int8 *)&byte_2245C3FE4[3 * v186];
          if (v186 >= 0x2A)
            v190 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v190;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v190[1];
          LOBYTE(a4) = v190[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v612.f32[0];
          a2 = vdivq_f32(a2, v612);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v191 = v184[5];
          if (v191 < v184[6])
            break;
          v184[5] = sub_2233B2B48(v184 + 4, (uint64_t *)&v643);
          v185 = (uint64_t *)((char *)v185 + 28);
          if (!--v183)
            goto LABEL_218;
        }
        v192 = v643;
        *(_DWORD *)(v191 + 8) = v644;
        *(_QWORD *)v191 = v192;
        v184[5] = v191 + 12;
        v185 = (uint64_t *)((char *)v185 + 28);
        --v183;
      }
      while (v183);
LABEL_218:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v193 = v4[399];
  if (!(v193 >> 30) && (_DWORD)v193 != v6)
  {
    v194 = (_QWORD **)a1[4];
    v195 = v193 & 0xFFFFFFFFCFFFFFFFLL;
    v196 = (*v194)[306];
    v197 = *(unsigned int *)(v196 + 520 * v195 + 4);
    if ((_DWORD)v197)
    {
      v198 = (unint64_t *)*v194[1];
      v199 = (uint64_t *)(v196 + 520 * v195 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v613 = a2;
      do
      {
        while (1)
        {
          v200 = *(unsigned __int8 *)v199;
          if ((v200 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v200 = *(unsigned __int8 *)v199;
          }
          v201 = v198[1];
          if (v201 >= v198[2])
          {
            v203 = sub_2233B2B48(v198, v199 - 3);
          }
          else
          {
            v202 = *(v199 - 3);
            *(_DWORD *)(v201 + 8) = *((_DWORD *)v199 - 4);
            *(_QWORD *)v201 = v202;
            v203 = v201 + 12;
          }
          v198[1] = v203;
          v204 = (unsigned __int8 *)&byte_2245C3FE4[3 * v200];
          if (v200 >= 0x2A)
            v204 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v204;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v204[1];
          LOBYTE(a4) = v204[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v613.f32[0];
          a2 = vdivq_f32(a2, v613);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v205 = v198[5];
          if (v205 < v198[6])
            break;
          v198[5] = sub_2233B2B48(v198 + 4, (uint64_t *)&v643);
          v199 = (uint64_t *)((char *)v199 + 28);
          if (!--v197)
            goto LABEL_234;
        }
        v206 = v643;
        *(_DWORD *)(v205 + 8) = v644;
        *(_QWORD *)v205 = v206;
        v198[5] = v205 + 12;
        v199 = (uint64_t *)((char *)v199 + 28);
        --v197;
      }
      while (v197);
LABEL_234:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v207 = v4[400];
  if (!(v207 >> 30) && (_DWORD)v207 != v6)
  {
    v208 = (_QWORD **)a1[4];
    v209 = v207 & 0xFFFFFFFFCFFFFFFFLL;
    v210 = (*v208)[306];
    v211 = *(unsigned int *)(v210 + 520 * v209 + 4);
    if ((_DWORD)v211)
    {
      v212 = (unint64_t *)*v208[1];
      v213 = (uint64_t *)(v210 + 520 * v209 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v614 = a2;
      do
      {
        while (1)
        {
          v214 = *(unsigned __int8 *)v213;
          if ((v214 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v214 = *(unsigned __int8 *)v213;
          }
          v215 = v212[1];
          if (v215 >= v212[2])
          {
            v217 = sub_2233B2B48(v212, v213 - 3);
          }
          else
          {
            v216 = *(v213 - 3);
            *(_DWORD *)(v215 + 8) = *((_DWORD *)v213 - 4);
            *(_QWORD *)v215 = v216;
            v217 = v215 + 12;
          }
          v212[1] = v217;
          v218 = (unsigned __int8 *)&byte_2245C3FE4[3 * v214];
          if (v214 >= 0x2A)
            v218 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v218;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v218[1];
          LOBYTE(a4) = v218[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v614.f32[0];
          a2 = vdivq_f32(a2, v614);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v219 = v212[5];
          if (v219 < v212[6])
            break;
          v212[5] = sub_2233B2B48(v212 + 4, (uint64_t *)&v643);
          v213 = (uint64_t *)((char *)v213 + 28);
          if (!--v211)
            goto LABEL_250;
        }
        v220 = v643;
        *(_DWORD *)(v219 + 8) = v644;
        *(_QWORD *)v219 = v220;
        v212[5] = v219 + 12;
        v213 = (uint64_t *)((char *)v213 + 28);
        --v211;
      }
      while (v211);
LABEL_250:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v221 = v4[401];
  if (!(v221 >> 30) && (_DWORD)v221 != v6)
  {
    v222 = (_QWORD **)a1[4];
    v223 = v221 & 0xFFFFFFFFCFFFFFFFLL;
    v224 = (*v222)[306];
    v225 = *(unsigned int *)(v224 + 520 * v223 + 4);
    if ((_DWORD)v225)
    {
      v226 = (unint64_t *)*v222[1];
      v227 = (uint64_t *)(v224 + 520 * v223 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v615 = a2;
      do
      {
        while (1)
        {
          v228 = *(unsigned __int8 *)v227;
          if ((v228 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v228 = *(unsigned __int8 *)v227;
          }
          v229 = v226[1];
          if (v229 >= v226[2])
          {
            v231 = sub_2233B2B48(v226, v227 - 3);
          }
          else
          {
            v230 = *(v227 - 3);
            *(_DWORD *)(v229 + 8) = *((_DWORD *)v227 - 4);
            *(_QWORD *)v229 = v230;
            v231 = v229 + 12;
          }
          v226[1] = v231;
          v232 = (unsigned __int8 *)&byte_2245C3FE4[3 * v228];
          if (v228 >= 0x2A)
            v232 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v232;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v232[1];
          LOBYTE(a4) = v232[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v615.f32[0];
          a2 = vdivq_f32(a2, v615);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v233 = v226[5];
          if (v233 < v226[6])
            break;
          v226[5] = sub_2233B2B48(v226 + 4, (uint64_t *)&v643);
          v227 = (uint64_t *)((char *)v227 + 28);
          if (!--v225)
            goto LABEL_266;
        }
        v234 = v643;
        *(_DWORD *)(v233 + 8) = v644;
        *(_QWORD *)v233 = v234;
        v226[5] = v233 + 12;
        v227 = (uint64_t *)((char *)v227 + 28);
        --v225;
      }
      while (v225);
LABEL_266:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v235 = v4[402];
  if (!(v235 >> 30) && (_DWORD)v235 != v6)
  {
    v236 = (_QWORD **)a1[4];
    v237 = v235 & 0xFFFFFFFFCFFFFFFFLL;
    v238 = (*v236)[306];
    v239 = *(unsigned int *)(v238 + 520 * v237 + 4);
    if ((_DWORD)v239)
    {
      v240 = (unint64_t *)*v236[1];
      v241 = (uint64_t *)(v238 + 520 * v237 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v616 = a2;
      do
      {
        while (1)
        {
          v242 = *(unsigned __int8 *)v241;
          if ((v242 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v242 = *(unsigned __int8 *)v241;
          }
          v243 = v240[1];
          if (v243 >= v240[2])
          {
            v245 = sub_2233B2B48(v240, v241 - 3);
          }
          else
          {
            v244 = *(v241 - 3);
            *(_DWORD *)(v243 + 8) = *((_DWORD *)v241 - 4);
            *(_QWORD *)v243 = v244;
            v245 = v243 + 12;
          }
          v240[1] = v245;
          v246 = (unsigned __int8 *)&byte_2245C3FE4[3 * v242];
          if (v242 >= 0x2A)
            v246 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v246;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v246[1];
          LOBYTE(a4) = v246[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v616.f32[0];
          a2 = vdivq_f32(a2, v616);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v247 = v240[5];
          if (v247 < v240[6])
            break;
          v240[5] = sub_2233B2B48(v240 + 4, (uint64_t *)&v643);
          v241 = (uint64_t *)((char *)v241 + 28);
          if (!--v239)
            goto LABEL_282;
        }
        v248 = v643;
        *(_DWORD *)(v247 + 8) = v644;
        *(_QWORD *)v247 = v248;
        v240[5] = v247 + 12;
        v241 = (uint64_t *)((char *)v241 + 28);
        --v239;
      }
      while (v239);
LABEL_282:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v249 = v4[403];
  if (!(v249 >> 30) && (_DWORD)v249 != v6)
  {
    v250 = (_QWORD **)a1[4];
    v251 = v249 & 0xFFFFFFFFCFFFFFFFLL;
    v252 = (*v250)[306];
    v253 = *(unsigned int *)(v252 + 520 * v251 + 4);
    if ((_DWORD)v253)
    {
      v254 = (unint64_t *)*v250[1];
      v255 = (uint64_t *)(v252 + 520 * v251 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v617 = a2;
      do
      {
        while (1)
        {
          v256 = *(unsigned __int8 *)v255;
          if ((v256 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v256 = *(unsigned __int8 *)v255;
          }
          v257 = v254[1];
          if (v257 >= v254[2])
          {
            v259 = sub_2233B2B48(v254, v255 - 3);
          }
          else
          {
            v258 = *(v255 - 3);
            *(_DWORD *)(v257 + 8) = *((_DWORD *)v255 - 4);
            *(_QWORD *)v257 = v258;
            v259 = v257 + 12;
          }
          v254[1] = v259;
          v260 = (unsigned __int8 *)&byte_2245C3FE4[3 * v256];
          if (v256 >= 0x2A)
            v260 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v260;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v260[1];
          LOBYTE(a4) = v260[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v617.f32[0];
          a2 = vdivq_f32(a2, v617);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v261 = v254[5];
          if (v261 < v254[6])
            break;
          v254[5] = sub_2233B2B48(v254 + 4, (uint64_t *)&v643);
          v255 = (uint64_t *)((char *)v255 + 28);
          if (!--v253)
            goto LABEL_298;
        }
        v262 = v643;
        *(_DWORD *)(v261 + 8) = v644;
        *(_QWORD *)v261 = v262;
        v254[5] = v261 + 12;
        v255 = (uint64_t *)((char *)v255 + 28);
        --v253;
      }
      while (v253);
LABEL_298:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v263 = v4[404];
  if (!(v263 >> 30) && (_DWORD)v263 != v6)
  {
    v264 = (_QWORD **)a1[4];
    v265 = v263 & 0xFFFFFFFFCFFFFFFFLL;
    v266 = (*v264)[306];
    v267 = *(unsigned int *)(v266 + 520 * v265 + 4);
    if ((_DWORD)v267)
    {
      v268 = (unint64_t *)*v264[1];
      v269 = (uint64_t *)(v266 + 520 * v265 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v618 = a2;
      do
      {
        while (1)
        {
          v270 = *(unsigned __int8 *)v269;
          if ((v270 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v270 = *(unsigned __int8 *)v269;
          }
          v271 = v268[1];
          if (v271 >= v268[2])
          {
            v273 = sub_2233B2B48(v268, v269 - 3);
          }
          else
          {
            v272 = *(v269 - 3);
            *(_DWORD *)(v271 + 8) = *((_DWORD *)v269 - 4);
            *(_QWORD *)v271 = v272;
            v273 = v271 + 12;
          }
          v268[1] = v273;
          v274 = (unsigned __int8 *)&byte_2245C3FE4[3 * v270];
          if (v270 >= 0x2A)
            v274 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v274;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v274[1];
          LOBYTE(a4) = v274[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v618.f32[0];
          a2 = vdivq_f32(a2, v618);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v275 = v268[5];
          if (v275 < v268[6])
            break;
          v268[5] = sub_2233B2B48(v268 + 4, (uint64_t *)&v643);
          v269 = (uint64_t *)((char *)v269 + 28);
          if (!--v267)
            goto LABEL_314;
        }
        v276 = v643;
        *(_DWORD *)(v275 + 8) = v644;
        *(_QWORD *)v275 = v276;
        v268[5] = v275 + 12;
        v269 = (uint64_t *)((char *)v269 + 28);
        --v267;
      }
      while (v267);
LABEL_314:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v277 = v4[405];
  if (!(v277 >> 30) && (_DWORD)v277 != v6)
  {
    v278 = (_QWORD **)a1[4];
    v279 = v277 & 0xFFFFFFFFCFFFFFFFLL;
    v280 = (*v278)[306];
    v281 = *(unsigned int *)(v280 + 520 * v279 + 4);
    if ((_DWORD)v281)
    {
      v282 = (unint64_t *)*v278[1];
      v283 = (uint64_t *)(v280 + 520 * v279 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v619 = a2;
      do
      {
        while (1)
        {
          v284 = *(unsigned __int8 *)v283;
          if ((v284 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v284 = *(unsigned __int8 *)v283;
          }
          v285 = v282[1];
          if (v285 >= v282[2])
          {
            v287 = sub_2233B2B48(v282, v283 - 3);
          }
          else
          {
            v286 = *(v283 - 3);
            *(_DWORD *)(v285 + 8) = *((_DWORD *)v283 - 4);
            *(_QWORD *)v285 = v286;
            v287 = v285 + 12;
          }
          v282[1] = v287;
          v288 = (unsigned __int8 *)&byte_2245C3FE4[3 * v284];
          if (v284 >= 0x2A)
            v288 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v288;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v288[1];
          LOBYTE(a4) = v288[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v619.f32[0];
          a2 = vdivq_f32(a2, v619);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v289 = v282[5];
          if (v289 < v282[6])
            break;
          v282[5] = sub_2233B2B48(v282 + 4, (uint64_t *)&v643);
          v283 = (uint64_t *)((char *)v283 + 28);
          if (!--v281)
            goto LABEL_330;
        }
        v290 = v643;
        *(_DWORD *)(v289 + 8) = v644;
        *(_QWORD *)v289 = v290;
        v282[5] = v289 + 12;
        v283 = (uint64_t *)((char *)v283 + 28);
        --v281;
      }
      while (v281);
LABEL_330:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v291 = v4[406];
  if (!(v291 >> 30) && (_DWORD)v291 != v6)
  {
    v292 = (_QWORD **)a1[4];
    v293 = v291 & 0xFFFFFFFFCFFFFFFFLL;
    v294 = (*v292)[306];
    v295 = *(unsigned int *)(v294 + 520 * v293 + 4);
    if ((_DWORD)v295)
    {
      v296 = (unint64_t *)*v292[1];
      v297 = (uint64_t *)(v294 + 520 * v293 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v620 = a2;
      do
      {
        while (1)
        {
          v298 = *(unsigned __int8 *)v297;
          if ((v298 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v298 = *(unsigned __int8 *)v297;
          }
          v299 = v296[1];
          if (v299 >= v296[2])
          {
            v301 = sub_2233B2B48(v296, v297 - 3);
          }
          else
          {
            v300 = *(v297 - 3);
            *(_DWORD *)(v299 + 8) = *((_DWORD *)v297 - 4);
            *(_QWORD *)v299 = v300;
            v301 = v299 + 12;
          }
          v296[1] = v301;
          v302 = (unsigned __int8 *)&byte_2245C3FE4[3 * v298];
          if (v298 >= 0x2A)
            v302 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v302;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v302[1];
          LOBYTE(a4) = v302[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v620.f32[0];
          a2 = vdivq_f32(a2, v620);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v303 = v296[5];
          if (v303 < v296[6])
            break;
          v296[5] = sub_2233B2B48(v296 + 4, (uint64_t *)&v643);
          v297 = (uint64_t *)((char *)v297 + 28);
          if (!--v295)
            goto LABEL_346;
        }
        v304 = v643;
        *(_DWORD *)(v303 + 8) = v644;
        *(_QWORD *)v303 = v304;
        v296[5] = v303 + 12;
        v297 = (uint64_t *)((char *)v297 + 28);
        --v295;
      }
      while (v295);
LABEL_346:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v305 = v4[407];
  if (!(v305 >> 30) && (_DWORD)v305 != v6)
  {
    v306 = (_QWORD **)a1[4];
    v307 = v305 & 0xFFFFFFFFCFFFFFFFLL;
    v308 = (*v306)[306];
    v309 = *(unsigned int *)(v308 + 520 * v307 + 4);
    if ((_DWORD)v309)
    {
      v310 = (unint64_t *)*v306[1];
      v311 = (uint64_t *)(v308 + 520 * v307 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v621 = a2;
      do
      {
        while (1)
        {
          v312 = *(unsigned __int8 *)v311;
          if ((v312 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v312 = *(unsigned __int8 *)v311;
          }
          v313 = v310[1];
          if (v313 >= v310[2])
          {
            v315 = sub_2233B2B48(v310, v311 - 3);
          }
          else
          {
            v314 = *(v311 - 3);
            *(_DWORD *)(v313 + 8) = *((_DWORD *)v311 - 4);
            *(_QWORD *)v313 = v314;
            v315 = v313 + 12;
          }
          v310[1] = v315;
          v316 = (unsigned __int8 *)&byte_2245C3FE4[3 * v312];
          if (v312 >= 0x2A)
            v316 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v316;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v316[1];
          LOBYTE(a4) = v316[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v621.f32[0];
          a2 = vdivq_f32(a2, v621);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v317 = v310[5];
          if (v317 < v310[6])
            break;
          v310[5] = sub_2233B2B48(v310 + 4, (uint64_t *)&v643);
          v311 = (uint64_t *)((char *)v311 + 28);
          if (!--v309)
            goto LABEL_362;
        }
        v318 = v643;
        *(_DWORD *)(v317 + 8) = v644;
        *(_QWORD *)v317 = v318;
        v310[5] = v317 + 12;
        v311 = (uint64_t *)((char *)v311 + 28);
        --v309;
      }
      while (v309);
LABEL_362:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v319 = v4[408];
  if (!(v319 >> 30) && (_DWORD)v319 != v6)
  {
    v320 = (_QWORD **)a1[4];
    v321 = v319 & 0xFFFFFFFFCFFFFFFFLL;
    v322 = (*v320)[306];
    v323 = *(unsigned int *)(v322 + 520 * v321 + 4);
    if ((_DWORD)v323)
    {
      v324 = (unint64_t *)*v320[1];
      v325 = (uint64_t *)(v322 + 520 * v321 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v622 = a2;
      do
      {
        while (1)
        {
          v326 = *(unsigned __int8 *)v325;
          if ((v326 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v326 = *(unsigned __int8 *)v325;
          }
          v327 = v324[1];
          if (v327 >= v324[2])
          {
            v329 = sub_2233B2B48(v324, v325 - 3);
          }
          else
          {
            v328 = *(v325 - 3);
            *(_DWORD *)(v327 + 8) = *((_DWORD *)v325 - 4);
            *(_QWORD *)v327 = v328;
            v329 = v327 + 12;
          }
          v324[1] = v329;
          v330 = (unsigned __int8 *)&byte_2245C3FE4[3 * v326];
          if (v326 >= 0x2A)
            v330 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v330;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v330[1];
          LOBYTE(a4) = v330[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v622.f32[0];
          a2 = vdivq_f32(a2, v622);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v331 = v324[5];
          if (v331 < v324[6])
            break;
          v324[5] = sub_2233B2B48(v324 + 4, (uint64_t *)&v643);
          v325 = (uint64_t *)((char *)v325 + 28);
          if (!--v323)
            goto LABEL_378;
        }
        v332 = v643;
        *(_DWORD *)(v331 + 8) = v644;
        *(_QWORD *)v331 = v332;
        v324[5] = v331 + 12;
        v325 = (uint64_t *)((char *)v325 + 28);
        --v323;
      }
      while (v323);
LABEL_378:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v333 = v4[409];
  if (!(v333 >> 30) && (_DWORD)v333 != v6)
  {
    v334 = (_QWORD **)a1[4];
    v335 = v333 & 0xFFFFFFFFCFFFFFFFLL;
    v336 = (*v334)[306];
    v337 = *(unsigned int *)(v336 + 520 * v335 + 4);
    if ((_DWORD)v337)
    {
      v338 = (unint64_t *)*v334[1];
      v339 = (uint64_t *)(v336 + 520 * v335 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v623 = a2;
      do
      {
        while (1)
        {
          v340 = *(unsigned __int8 *)v339;
          if ((v340 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v340 = *(unsigned __int8 *)v339;
          }
          v341 = v338[1];
          if (v341 >= v338[2])
          {
            v343 = sub_2233B2B48(v338, v339 - 3);
          }
          else
          {
            v342 = *(v339 - 3);
            *(_DWORD *)(v341 + 8) = *((_DWORD *)v339 - 4);
            *(_QWORD *)v341 = v342;
            v343 = v341 + 12;
          }
          v338[1] = v343;
          v344 = (unsigned __int8 *)&byte_2245C3FE4[3 * v340];
          if (v340 >= 0x2A)
            v344 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v344;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v344[1];
          LOBYTE(a4) = v344[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v623.f32[0];
          a2 = vdivq_f32(a2, v623);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v345 = v338[5];
          if (v345 < v338[6])
            break;
          v338[5] = sub_2233B2B48(v338 + 4, (uint64_t *)&v643);
          v339 = (uint64_t *)((char *)v339 + 28);
          if (!--v337)
            goto LABEL_394;
        }
        v346 = v643;
        *(_DWORD *)(v345 + 8) = v644;
        *(_QWORD *)v345 = v346;
        v338[5] = v345 + 12;
        v339 = (uint64_t *)((char *)v339 + 28);
        --v337;
      }
      while (v337);
LABEL_394:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v347 = v4[410];
  if (!(v347 >> 30) && (_DWORD)v347 != v6)
  {
    v348 = (_QWORD **)a1[4];
    v349 = v347 & 0xFFFFFFFFCFFFFFFFLL;
    v350 = (*v348)[306];
    v351 = *(unsigned int *)(v350 + 520 * v349 + 4);
    if ((_DWORD)v351)
    {
      v352 = (unint64_t *)*v348[1];
      v353 = (uint64_t *)(v350 + 520 * v349 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v624 = a2;
      do
      {
        while (1)
        {
          v354 = *(unsigned __int8 *)v353;
          if ((v354 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v354 = *(unsigned __int8 *)v353;
          }
          v355 = v352[1];
          if (v355 >= v352[2])
          {
            v357 = sub_2233B2B48(v352, v353 - 3);
          }
          else
          {
            v356 = *(v353 - 3);
            *(_DWORD *)(v355 + 8) = *((_DWORD *)v353 - 4);
            *(_QWORD *)v355 = v356;
            v357 = v355 + 12;
          }
          v352[1] = v357;
          v358 = (unsigned __int8 *)&byte_2245C3FE4[3 * v354];
          if (v354 >= 0x2A)
            v358 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v358;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v358[1];
          LOBYTE(a4) = v358[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v624.f32[0];
          a2 = vdivq_f32(a2, v624);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v359 = v352[5];
          if (v359 < v352[6])
            break;
          v352[5] = sub_2233B2B48(v352 + 4, (uint64_t *)&v643);
          v353 = (uint64_t *)((char *)v353 + 28);
          if (!--v351)
            goto LABEL_410;
        }
        v360 = v643;
        *(_DWORD *)(v359 + 8) = v644;
        *(_QWORD *)v359 = v360;
        v352[5] = v359 + 12;
        v353 = (uint64_t *)((char *)v353 + 28);
        --v351;
      }
      while (v351);
LABEL_410:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v361 = v4[411];
  if (!(v361 >> 30) && (_DWORD)v361 != v6)
  {
    v362 = (_QWORD **)a1[4];
    v363 = v361 & 0xFFFFFFFFCFFFFFFFLL;
    v364 = (*v362)[306];
    v365 = *(unsigned int *)(v364 + 520 * v363 + 4);
    if ((_DWORD)v365)
    {
      v366 = (unint64_t *)*v362[1];
      v367 = (uint64_t *)(v364 + 520 * v363 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v625 = a2;
      do
      {
        while (1)
        {
          v368 = *(unsigned __int8 *)v367;
          if ((v368 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v368 = *(unsigned __int8 *)v367;
          }
          v369 = v366[1];
          if (v369 >= v366[2])
          {
            v371 = sub_2233B2B48(v366, v367 - 3);
          }
          else
          {
            v370 = *(v367 - 3);
            *(_DWORD *)(v369 + 8) = *((_DWORD *)v367 - 4);
            *(_QWORD *)v369 = v370;
            v371 = v369 + 12;
          }
          v366[1] = v371;
          v372 = (unsigned __int8 *)&byte_2245C3FE4[3 * v368];
          if (v368 >= 0x2A)
            v372 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v372;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v372[1];
          LOBYTE(a4) = v372[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v625.f32[0];
          a2 = vdivq_f32(a2, v625);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v373 = v366[5];
          if (v373 < v366[6])
            break;
          v366[5] = sub_2233B2B48(v366 + 4, (uint64_t *)&v643);
          v367 = (uint64_t *)((char *)v367 + 28);
          if (!--v365)
            goto LABEL_426;
        }
        v374 = v643;
        *(_DWORD *)(v373 + 8) = v644;
        *(_QWORD *)v373 = v374;
        v366[5] = v373 + 12;
        v367 = (uint64_t *)((char *)v367 + 28);
        --v365;
      }
      while (v365);
LABEL_426:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v375 = v4[412];
  if (!(v375 >> 30) && (_DWORD)v375 != v6)
  {
    v376 = (_QWORD **)a1[4];
    v377 = v375 & 0xFFFFFFFFCFFFFFFFLL;
    v378 = (*v376)[306];
    v379 = *(unsigned int *)(v378 + 520 * v377 + 4);
    if ((_DWORD)v379)
    {
      v380 = (unint64_t *)*v376[1];
      v381 = (uint64_t *)(v378 + 520 * v377 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v626 = a2;
      do
      {
        while (1)
        {
          v382 = *(unsigned __int8 *)v381;
          if ((v382 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v382 = *(unsigned __int8 *)v381;
          }
          v383 = v380[1];
          if (v383 >= v380[2])
          {
            v385 = sub_2233B2B48(v380, v381 - 3);
          }
          else
          {
            v384 = *(v381 - 3);
            *(_DWORD *)(v383 + 8) = *((_DWORD *)v381 - 4);
            *(_QWORD *)v383 = v384;
            v385 = v383 + 12;
          }
          v380[1] = v385;
          v386 = (unsigned __int8 *)&byte_2245C3FE4[3 * v382];
          if (v382 >= 0x2A)
            v386 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v386;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v386[1];
          LOBYTE(a4) = v386[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v626.f32[0];
          a2 = vdivq_f32(a2, v626);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v387 = v380[5];
          if (v387 < v380[6])
            break;
          v380[5] = sub_2233B2B48(v380 + 4, (uint64_t *)&v643);
          v381 = (uint64_t *)((char *)v381 + 28);
          if (!--v379)
            goto LABEL_442;
        }
        v388 = v643;
        *(_DWORD *)(v387 + 8) = v644;
        *(_QWORD *)v387 = v388;
        v380[5] = v387 + 12;
        v381 = (uint64_t *)((char *)v381 + 28);
        --v379;
      }
      while (v379);
LABEL_442:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v389 = v4[413];
  if (!(v389 >> 30) && (_DWORD)v389 != v6)
  {
    v390 = (_QWORD **)a1[4];
    v391 = v389 & 0xFFFFFFFFCFFFFFFFLL;
    v392 = (*v390)[306];
    v393 = *(unsigned int *)(v392 + 520 * v391 + 4);
    if ((_DWORD)v393)
    {
      v394 = (unint64_t *)*v390[1];
      v395 = (uint64_t *)(v392 + 520 * v391 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v627 = a2;
      do
      {
        while (1)
        {
          v396 = *(unsigned __int8 *)v395;
          if ((v396 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v396 = *(unsigned __int8 *)v395;
          }
          v397 = v394[1];
          if (v397 >= v394[2])
          {
            v399 = sub_2233B2B48(v394, v395 - 3);
          }
          else
          {
            v398 = *(v395 - 3);
            *(_DWORD *)(v397 + 8) = *((_DWORD *)v395 - 4);
            *(_QWORD *)v397 = v398;
            v399 = v397 + 12;
          }
          v394[1] = v399;
          v400 = (unsigned __int8 *)&byte_2245C3FE4[3 * v396];
          if (v396 >= 0x2A)
            v400 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v400;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v400[1];
          LOBYTE(a4) = v400[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v627.f32[0];
          a2 = vdivq_f32(a2, v627);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v401 = v394[5];
          if (v401 < v394[6])
            break;
          v394[5] = sub_2233B2B48(v394 + 4, (uint64_t *)&v643);
          v395 = (uint64_t *)((char *)v395 + 28);
          if (!--v393)
            goto LABEL_458;
        }
        v402 = v643;
        *(_DWORD *)(v401 + 8) = v644;
        *(_QWORD *)v401 = v402;
        v394[5] = v401 + 12;
        v395 = (uint64_t *)((char *)v395 + 28);
        --v393;
      }
      while (v393);
LABEL_458:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v403 = v4[414];
  if (!(v403 >> 30) && (_DWORD)v403 != v6)
  {
    v404 = (_QWORD **)a1[4];
    v405 = v403 & 0xFFFFFFFFCFFFFFFFLL;
    v406 = (*v404)[306];
    v407 = *(unsigned int *)(v406 + 520 * v405 + 4);
    if ((_DWORD)v407)
    {
      v408 = (unint64_t *)*v404[1];
      v409 = (uint64_t *)(v406 + 520 * v405 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v628 = a2;
      do
      {
        while (1)
        {
          v410 = *(unsigned __int8 *)v409;
          if ((v410 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v410 = *(unsigned __int8 *)v409;
          }
          v411 = v408[1];
          if (v411 >= v408[2])
          {
            v413 = sub_2233B2B48(v408, v409 - 3);
          }
          else
          {
            v412 = *(v409 - 3);
            *(_DWORD *)(v411 + 8) = *((_DWORD *)v409 - 4);
            *(_QWORD *)v411 = v412;
            v413 = v411 + 12;
          }
          v408[1] = v413;
          v414 = (unsigned __int8 *)&byte_2245C3FE4[3 * v410];
          if (v410 >= 0x2A)
            v414 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v414;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v414[1];
          LOBYTE(a4) = v414[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v628.f32[0];
          a2 = vdivq_f32(a2, v628);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v415 = v408[5];
          if (v415 < v408[6])
            break;
          v408[5] = sub_2233B2B48(v408 + 4, (uint64_t *)&v643);
          v409 = (uint64_t *)((char *)v409 + 28);
          if (!--v407)
            goto LABEL_474;
        }
        v416 = v643;
        *(_DWORD *)(v415 + 8) = v644;
        *(_QWORD *)v415 = v416;
        v408[5] = v415 + 12;
        v409 = (uint64_t *)((char *)v409 + 28);
        --v407;
      }
      while (v407);
LABEL_474:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v417 = v4[415];
  if (!(v417 >> 30) && (_DWORD)v417 != v6)
  {
    v418 = (_QWORD **)a1[4];
    v419 = v417 & 0xFFFFFFFFCFFFFFFFLL;
    v420 = (*v418)[306];
    v421 = *(unsigned int *)(v420 + 520 * v419 + 4);
    if ((_DWORD)v421)
    {
      v422 = (unint64_t *)*v418[1];
      v423 = (uint64_t *)(v420 + 520 * v419 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v629 = a2;
      do
      {
        while (1)
        {
          v424 = *(unsigned __int8 *)v423;
          if ((v424 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v424 = *(unsigned __int8 *)v423;
          }
          v425 = v422[1];
          if (v425 >= v422[2])
          {
            v427 = sub_2233B2B48(v422, v423 - 3);
          }
          else
          {
            v426 = *(v423 - 3);
            *(_DWORD *)(v425 + 8) = *((_DWORD *)v423 - 4);
            *(_QWORD *)v425 = v426;
            v427 = v425 + 12;
          }
          v422[1] = v427;
          v428 = (unsigned __int8 *)&byte_2245C3FE4[3 * v424];
          if (v424 >= 0x2A)
            v428 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v428;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v428[1];
          LOBYTE(a4) = v428[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v629.f32[0];
          a2 = vdivq_f32(a2, v629);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v429 = v422[5];
          if (v429 < v422[6])
            break;
          v422[5] = sub_2233B2B48(v422 + 4, (uint64_t *)&v643);
          v423 = (uint64_t *)((char *)v423 + 28);
          if (!--v421)
            goto LABEL_490;
        }
        v430 = v643;
        *(_DWORD *)(v429 + 8) = v644;
        *(_QWORD *)v429 = v430;
        v422[5] = v429 + 12;
        v423 = (uint64_t *)((char *)v423 + 28);
        --v421;
      }
      while (v421);
LABEL_490:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v431 = v4[416];
  if (!(v431 >> 30) && (_DWORD)v431 != v6)
  {
    v432 = (_QWORD **)a1[4];
    v433 = v431 & 0xFFFFFFFFCFFFFFFFLL;
    v434 = (*v432)[306];
    v435 = *(unsigned int *)(v434 + 520 * v433 + 4);
    if ((_DWORD)v435)
    {
      v436 = (unint64_t *)*v432[1];
      v437 = (uint64_t *)(v434 + 520 * v433 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v630 = a2;
      do
      {
        while (1)
        {
          v438 = *(unsigned __int8 *)v437;
          if ((v438 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v438 = *(unsigned __int8 *)v437;
          }
          v439 = v436[1];
          if (v439 >= v436[2])
          {
            v441 = sub_2233B2B48(v436, v437 - 3);
          }
          else
          {
            v440 = *(v437 - 3);
            *(_DWORD *)(v439 + 8) = *((_DWORD *)v437 - 4);
            *(_QWORD *)v439 = v440;
            v441 = v439 + 12;
          }
          v436[1] = v441;
          v442 = (unsigned __int8 *)&byte_2245C3FE4[3 * v438];
          if (v438 >= 0x2A)
            v442 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v442;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v442[1];
          LOBYTE(a4) = v442[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v630.f32[0];
          a2 = vdivq_f32(a2, v630);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v443 = v436[5];
          if (v443 < v436[6])
            break;
          v436[5] = sub_2233B2B48(v436 + 4, (uint64_t *)&v643);
          v437 = (uint64_t *)((char *)v437 + 28);
          if (!--v435)
            goto LABEL_506;
        }
        v444 = v643;
        *(_DWORD *)(v443 + 8) = v644;
        *(_QWORD *)v443 = v444;
        v436[5] = v443 + 12;
        v437 = (uint64_t *)((char *)v437 + 28);
        --v435;
      }
      while (v435);
LABEL_506:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v445 = v4[417];
  if (!(v445 >> 30) && (_DWORD)v445 != v6)
  {
    v446 = (_QWORD **)a1[4];
    v447 = v445 & 0xFFFFFFFFCFFFFFFFLL;
    v448 = (*v446)[306];
    v449 = *(unsigned int *)(v448 + 520 * v447 + 4);
    if ((_DWORD)v449)
    {
      v450 = (unint64_t *)*v446[1];
      v451 = (uint64_t *)(v448 + 520 * v447 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v631 = a2;
      do
      {
        while (1)
        {
          v452 = *(unsigned __int8 *)v451;
          if ((v452 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v452 = *(unsigned __int8 *)v451;
          }
          v453 = v450[1];
          if (v453 >= v450[2])
          {
            v455 = sub_2233B2B48(v450, v451 - 3);
          }
          else
          {
            v454 = *(v451 - 3);
            *(_DWORD *)(v453 + 8) = *((_DWORD *)v451 - 4);
            *(_QWORD *)v453 = v454;
            v455 = v453 + 12;
          }
          v450[1] = v455;
          v456 = (unsigned __int8 *)&byte_2245C3FE4[3 * v452];
          if (v452 >= 0x2A)
            v456 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v456;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v456[1];
          LOBYTE(a4) = v456[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v631.f32[0];
          a2 = vdivq_f32(a2, v631);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v457 = v450[5];
          if (v457 < v450[6])
            break;
          v450[5] = sub_2233B2B48(v450 + 4, (uint64_t *)&v643);
          v451 = (uint64_t *)((char *)v451 + 28);
          if (!--v449)
            goto LABEL_522;
        }
        v458 = v643;
        *(_DWORD *)(v457 + 8) = v644;
        *(_QWORD *)v457 = v458;
        v450[5] = v457 + 12;
        v451 = (uint64_t *)((char *)v451 + 28);
        --v449;
      }
      while (v449);
LABEL_522:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v459 = v4[418];
  if (!(v459 >> 30) && (_DWORD)v459 != v6)
  {
    v460 = (_QWORD **)a1[4];
    v461 = v459 & 0xFFFFFFFFCFFFFFFFLL;
    v462 = (*v460)[306];
    v463 = *(unsigned int *)(v462 + 520 * v461 + 4);
    if ((_DWORD)v463)
    {
      v464 = (unint64_t *)*v460[1];
      v465 = (uint64_t *)(v462 + 520 * v461 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632 = a2;
      do
      {
        while (1)
        {
          v466 = *(unsigned __int8 *)v465;
          if ((v466 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v466 = *(unsigned __int8 *)v465;
          }
          v467 = v464[1];
          if (v467 >= v464[2])
          {
            v469 = sub_2233B2B48(v464, v465 - 3);
          }
          else
          {
            v468 = *(v465 - 3);
            *(_DWORD *)(v467 + 8) = *((_DWORD *)v465 - 4);
            *(_QWORD *)v467 = v468;
            v469 = v467 + 12;
          }
          v464[1] = v469;
          v470 = (unsigned __int8 *)&byte_2245C3FE4[3 * v466];
          if (v466 >= 0x2A)
            v470 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v470;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v470[1];
          LOBYTE(a4) = v470[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v632.f32[0];
          a2 = vdivq_f32(a2, v632);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v471 = v464[5];
          if (v471 < v464[6])
            break;
          v464[5] = sub_2233B2B48(v464 + 4, (uint64_t *)&v643);
          v465 = (uint64_t *)((char *)v465 + 28);
          if (!--v463)
            goto LABEL_538;
        }
        v472 = v643;
        *(_DWORD *)(v471 + 8) = v644;
        *(_QWORD *)v471 = v472;
        v464[5] = v471 + 12;
        v465 = (uint64_t *)((char *)v465 + 28);
        --v463;
      }
      while (v463);
LABEL_538:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v473 = v4[419];
  if (!(v473 >> 30) && (_DWORD)v473 != v6)
  {
    v474 = (_QWORD **)a1[4];
    v475 = v473 & 0xFFFFFFFFCFFFFFFFLL;
    v476 = (*v474)[306];
    v477 = *(unsigned int *)(v476 + 520 * v475 + 4);
    if ((_DWORD)v477)
    {
      v478 = (unint64_t *)*v474[1];
      v479 = (uint64_t *)(v476 + 520 * v475 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v633 = a2;
      do
      {
        while (1)
        {
          v480 = *(unsigned __int8 *)v479;
          if ((v480 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v480 = *(unsigned __int8 *)v479;
          }
          v481 = v478[1];
          if (v481 >= v478[2])
          {
            v483 = sub_2233B2B48(v478, v479 - 3);
          }
          else
          {
            v482 = *(v479 - 3);
            *(_DWORD *)(v481 + 8) = *((_DWORD *)v479 - 4);
            *(_QWORD *)v481 = v482;
            v483 = v481 + 12;
          }
          v478[1] = v483;
          v484 = (unsigned __int8 *)&byte_2245C3FE4[3 * v480];
          if (v480 >= 0x2A)
            v484 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v484;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v484[1];
          LOBYTE(a4) = v484[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v633.f32[0];
          a2 = vdivq_f32(a2, v633);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v485 = v478[5];
          if (v485 < v478[6])
            break;
          v478[5] = sub_2233B2B48(v478 + 4, (uint64_t *)&v643);
          v479 = (uint64_t *)((char *)v479 + 28);
          if (!--v477)
            goto LABEL_554;
        }
        v486 = v643;
        *(_DWORD *)(v485 + 8) = v644;
        *(_QWORD *)v485 = v486;
        v478[5] = v485 + 12;
        v479 = (uint64_t *)((char *)v479 + 28);
        --v477;
      }
      while (v477);
LABEL_554:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v487 = v4[420];
  if (!(v487 >> 30) && (_DWORD)v487 != v6)
  {
    v488 = (_QWORD **)a1[4];
    v489 = v487 & 0xFFFFFFFFCFFFFFFFLL;
    v490 = (*v488)[306];
    v491 = *(unsigned int *)(v490 + 520 * v489 + 4);
    if ((_DWORD)v491)
    {
      v492 = (unint64_t *)*v488[1];
      v493 = (uint64_t *)(v490 + 520 * v489 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v634 = a2;
      do
      {
        while (1)
        {
          v494 = *(unsigned __int8 *)v493;
          if ((v494 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v494 = *(unsigned __int8 *)v493;
          }
          v495 = v492[1];
          if (v495 >= v492[2])
          {
            v497 = sub_2233B2B48(v492, v493 - 3);
          }
          else
          {
            v496 = *(v493 - 3);
            *(_DWORD *)(v495 + 8) = *((_DWORD *)v493 - 4);
            *(_QWORD *)v495 = v496;
            v497 = v495 + 12;
          }
          v492[1] = v497;
          v498 = (unsigned __int8 *)&byte_2245C3FE4[3 * v494];
          if (v494 >= 0x2A)
            v498 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v498;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v498[1];
          LOBYTE(a4) = v498[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v634.f32[0];
          a2 = vdivq_f32(a2, v634);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v499 = v492[5];
          if (v499 < v492[6])
            break;
          v492[5] = sub_2233B2B48(v492 + 4, (uint64_t *)&v643);
          v493 = (uint64_t *)((char *)v493 + 28);
          if (!--v491)
            goto LABEL_570;
        }
        v500 = v643;
        *(_DWORD *)(v499 + 8) = v644;
        *(_QWORD *)v499 = v500;
        v492[5] = v499 + 12;
        v493 = (uint64_t *)((char *)v493 + 28);
        --v491;
      }
      while (v491);
LABEL_570:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v501 = v4[421];
  if (!(v501 >> 30) && (_DWORD)v501 != v6)
  {
    v502 = (_QWORD **)a1[4];
    v503 = v501 & 0xFFFFFFFFCFFFFFFFLL;
    v504 = (*v502)[306];
    v505 = *(unsigned int *)(v504 + 520 * v503 + 4);
    if ((_DWORD)v505)
    {
      v506 = (unint64_t *)*v502[1];
      v507 = (uint64_t *)(v504 + 520 * v503 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v635 = a2;
      do
      {
        while (1)
        {
          v508 = *(unsigned __int8 *)v507;
          if ((v508 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v508 = *(unsigned __int8 *)v507;
          }
          v509 = v506[1];
          if (v509 >= v506[2])
          {
            v511 = sub_2233B2B48(v506, v507 - 3);
          }
          else
          {
            v510 = *(v507 - 3);
            *(_DWORD *)(v509 + 8) = *((_DWORD *)v507 - 4);
            *(_QWORD *)v509 = v510;
            v511 = v509 + 12;
          }
          v506[1] = v511;
          v512 = (unsigned __int8 *)&byte_2245C3FE4[3 * v508];
          if (v508 >= 0x2A)
            v512 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v512;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v512[1];
          LOBYTE(a4) = v512[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v635.f32[0];
          a2 = vdivq_f32(a2, v635);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v513 = v506[5];
          if (v513 < v506[6])
            break;
          v506[5] = sub_2233B2B48(v506 + 4, (uint64_t *)&v643);
          v507 = (uint64_t *)((char *)v507 + 28);
          if (!--v505)
            goto LABEL_586;
        }
        v514 = v643;
        *(_DWORD *)(v513 + 8) = v644;
        *(_QWORD *)v513 = v514;
        v506[5] = v513 + 12;
        v507 = (uint64_t *)((char *)v507 + 28);
        --v505;
      }
      while (v505);
LABEL_586:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v515 = v4[422];
  if (!(v515 >> 30) && (_DWORD)v515 != v6)
  {
    v516 = (_QWORD **)a1[4];
    v517 = v515 & 0xFFFFFFFFCFFFFFFFLL;
    v518 = (*v516)[306];
    v519 = *(unsigned int *)(v518 + 520 * v517 + 4);
    if ((_DWORD)v519)
    {
      v520 = (unint64_t *)*v516[1];
      v521 = (uint64_t *)(v518 + 520 * v517 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v636 = a2;
      do
      {
        while (1)
        {
          v522 = *(unsigned __int8 *)v521;
          if ((v522 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v522 = *(unsigned __int8 *)v521;
          }
          v523 = v520[1];
          if (v523 >= v520[2])
          {
            v525 = sub_2233B2B48(v520, v521 - 3);
          }
          else
          {
            v524 = *(v521 - 3);
            *(_DWORD *)(v523 + 8) = *((_DWORD *)v521 - 4);
            *(_QWORD *)v523 = v524;
            v525 = v523 + 12;
          }
          v520[1] = v525;
          v526 = (unsigned __int8 *)&byte_2245C3FE4[3 * v522];
          if (v522 >= 0x2A)
            v526 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v526;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v526[1];
          LOBYTE(a4) = v526[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v636.f32[0];
          a2 = vdivq_f32(a2, v636);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v527 = v520[5];
          if (v527 < v520[6])
            break;
          v520[5] = sub_2233B2B48(v520 + 4, (uint64_t *)&v643);
          v521 = (uint64_t *)((char *)v521 + 28);
          if (!--v519)
            goto LABEL_602;
        }
        v528 = v643;
        *(_DWORD *)(v527 + 8) = v644;
        *(_QWORD *)v527 = v528;
        v520[5] = v527 + 12;
        v521 = (uint64_t *)((char *)v521 + 28);
        --v519;
      }
      while (v519);
LABEL_602:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v529 = v4[423];
  if (!(v529 >> 30) && (_DWORD)v529 != v6)
  {
    v530 = (_QWORD **)a1[4];
    v531 = v529 & 0xFFFFFFFFCFFFFFFFLL;
    v532 = (*v530)[306];
    v533 = *(unsigned int *)(v532 + 520 * v531 + 4);
    if ((_DWORD)v533)
    {
      v534 = (unint64_t *)*v530[1];
      v535 = (uint64_t *)(v532 + 520 * v531 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v637 = a2;
      do
      {
        while (1)
        {
          v536 = *(unsigned __int8 *)v535;
          if ((v536 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v536 = *(unsigned __int8 *)v535;
          }
          v537 = v534[1];
          if (v537 >= v534[2])
          {
            v539 = sub_2233B2B48(v534, v535 - 3);
          }
          else
          {
            v538 = *(v535 - 3);
            *(_DWORD *)(v537 + 8) = *((_DWORD *)v535 - 4);
            *(_QWORD *)v537 = v538;
            v539 = v537 + 12;
          }
          v534[1] = v539;
          v540 = (unsigned __int8 *)&byte_2245C3FE4[3 * v536];
          if (v536 >= 0x2A)
            v540 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v540;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v540[1];
          LOBYTE(a4) = v540[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v637.f32[0];
          a2 = vdivq_f32(a2, v637);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v541 = v534[5];
          if (v541 < v534[6])
            break;
          v534[5] = sub_2233B2B48(v534 + 4, (uint64_t *)&v643);
          v535 = (uint64_t *)((char *)v535 + 28);
          if (!--v533)
            goto LABEL_618;
        }
        v542 = v643;
        *(_DWORD *)(v541 + 8) = v644;
        *(_QWORD *)v541 = v542;
        v534[5] = v541 + 12;
        v535 = (uint64_t *)((char *)v535 + 28);
        --v533;
      }
      while (v533);
LABEL_618:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v543 = v4[424];
  if (!(v543 >> 30) && (_DWORD)v543 != v6)
  {
    v544 = (_QWORD **)a1[4];
    v545 = v543 & 0xFFFFFFFFCFFFFFFFLL;
    v546 = (*v544)[306];
    v547 = *(unsigned int *)(v546 + 520 * v545 + 4);
    if ((_DWORD)v547)
    {
      v548 = (unint64_t *)*v544[1];
      v549 = (uint64_t *)(v546 + 520 * v545 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v638 = a2;
      do
      {
        while (1)
        {
          v550 = *(unsigned __int8 *)v549;
          if ((v550 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v550 = *(unsigned __int8 *)v549;
          }
          v551 = v548[1];
          if (v551 >= v548[2])
          {
            v553 = sub_2233B2B48(v548, v549 - 3);
          }
          else
          {
            v552 = *(v549 - 3);
            *(_DWORD *)(v551 + 8) = *((_DWORD *)v549 - 4);
            *(_QWORD *)v551 = v552;
            v553 = v551 + 12;
          }
          v548[1] = v553;
          v554 = (unsigned __int8 *)&byte_2245C3FE4[3 * v550];
          if (v550 >= 0x2A)
            v554 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v554;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v554[1];
          LOBYTE(a4) = v554[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v638.f32[0];
          a2 = vdivq_f32(a2, v638);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v555 = v548[5];
          if (v555 < v548[6])
            break;
          v548[5] = sub_2233B2B48(v548 + 4, (uint64_t *)&v643);
          v549 = (uint64_t *)((char *)v549 + 28);
          if (!--v547)
            goto LABEL_634;
        }
        v556 = v643;
        *(_DWORD *)(v555 + 8) = v644;
        *(_QWORD *)v555 = v556;
        v548[5] = v555 + 12;
        v549 = (uint64_t *)((char *)v549 + 28);
        --v547;
      }
      while (v547);
LABEL_634:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v557 = v4[425];
  if (!(v557 >> 30) && (_DWORD)v557 != v6)
  {
    v558 = (_QWORD **)a1[4];
    v559 = v557 & 0xFFFFFFFFCFFFFFFFLL;
    v560 = (*v558)[306];
    v561 = *(unsigned int *)(v560 + 520 * v559 + 4);
    if ((_DWORD)v561)
    {
      v562 = (unint64_t *)*v558[1];
      v563 = (uint64_t *)(v560 + 520 * v559 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v639 = a2;
      do
      {
        while (1)
        {
          v564 = *(unsigned __int8 *)v563;
          if ((v564 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v564 = *(unsigned __int8 *)v563;
          }
          v565 = v562[1];
          if (v565 >= v562[2])
          {
            v567 = sub_2233B2B48(v562, v563 - 3);
          }
          else
          {
            v566 = *(v563 - 3);
            *(_DWORD *)(v565 + 8) = *((_DWORD *)v563 - 4);
            *(_QWORD *)v565 = v566;
            v567 = v565 + 12;
          }
          v562[1] = v567;
          v568 = (unsigned __int8 *)&byte_2245C3FE4[3 * v564];
          if (v564 >= 0x2A)
            v568 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v568;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v568[1];
          LOBYTE(a4) = v568[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v639.f32[0];
          a2 = vdivq_f32(a2, v639);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v569 = v562[5];
          if (v569 < v562[6])
            break;
          v562[5] = sub_2233B2B48(v562 + 4, (uint64_t *)&v643);
          v563 = (uint64_t *)((char *)v563 + 28);
          if (!--v561)
            goto LABEL_650;
        }
        v570 = v643;
        *(_DWORD *)(v569 + 8) = v644;
        *(_QWORD *)v569 = v570;
        v562[5] = v569 + 12;
        v563 = (uint64_t *)((char *)v563 + 28);
        --v561;
      }
      while (v561);
LABEL_650:
      a1 = v642;
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v571 = v4[426];
  if (!(v571 >> 30) && (_DWORD)v571 != v6)
  {
    v572 = (_QWORD **)a1[4];
    v573 = v571 & 0xFFFFFFFFCFFFFFFFLL;
    v574 = (*v572)[306];
    v575 = *(unsigned int *)(v574 + 520 * v573 + 4);
    if ((_DWORD)v575)
    {
      v576 = (unint64_t *)*v572[1];
      v577 = (uint64_t *)(v574 + 520 * v573 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v640 = a2;
      do
      {
        while (1)
        {
          v578 = *(unsigned __int8 *)v577;
          if ((v578 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v578 = *(unsigned __int8 *)v577;
          }
          v579 = v576[1];
          if (v579 >= v576[2])
          {
            v581 = sub_2233B2B48(v576, v577 - 3);
          }
          else
          {
            v580 = *(v577 - 3);
            *(_DWORD *)(v579 + 8) = *((_DWORD *)v577 - 4);
            *(_QWORD *)v579 = v580;
            v581 = v579 + 12;
          }
          v576[1] = v581;
          v582 = (unsigned __int8 *)&byte_2245C3FE4[3 * v578];
          if (v578 >= 0x2A)
            v582 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v582;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v582[1];
          LOBYTE(a4) = v582[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v640.f32[0];
          a2 = vdivq_f32(a2, v640);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v583 = v576[5];
          if (v583 < v576[6])
            break;
          v576[5] = sub_2233B2B48(v576 + 4, (uint64_t *)&v643);
          v577 = (uint64_t *)((char *)v577 + 28);
          if (!--v575)
            goto LABEL_666;
        }
        v584 = v643;
        *(_DWORD *)(v583 + 8) = v644;
        *(_QWORD *)v583 = v584;
        v576[5] = v583 + 12;
        v577 = (uint64_t *)((char *)v577 + 28);
        --v575;
      }
      while (v575);
LABEL_666:
      v4 = (unsigned int *)v642[1];
      v6 = *(_DWORD *)(*v642 + 272);
    }
  }
  v585 = v4[427];
  if (!(v585 >> 30) && (_DWORD)v585 != v6)
  {
    v586 = (_QWORD **)v642[4];
    v587 = v585 & 0xFFFFFFFFCFFFFFFFLL;
    v588 = (*v586)[306];
    v589 = *(unsigned int *)(v588 + 520 * v587 + 4);
    if ((_DWORD)v589)
    {
      v590 = (unint64_t *)*v586[1];
      v591 = (uint64_t *)(v588 + 520 * v587 + 36);
      a2 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v641 = a2;
      do
      {
        while (1)
        {
          v592 = *(unsigned __int8 *)v591;
          if ((v592 + 1) >= 0x2Bu)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/SemanticsTypes.cpp", 91, (uint64_t)"semantic_label < kNumSemanticLabels", 35, (uint64_t)&unk_2245ADD25, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_683;
            }
            v592 = *(unsigned __int8 *)v591;
          }
          v593 = v590[1];
          if (v593 >= v590[2])
          {
            v595 = sub_2233B2B48(v590, v591 - 3);
          }
          else
          {
            v594 = *(v591 - 3);
            *(_DWORD *)(v593 + 8) = *((_DWORD *)v591 - 4);
            *(_QWORD *)v593 = v594;
            v595 = v593 + 12;
          }
          v590[1] = v595;
          v596 = (unsigned __int8 *)&byte_2245C3FE4[3 * v592];
          if (v592 >= 0x2A)
            v596 = (unsigned __int8 *)&byte_2245C9FE2;
          a2.i8[0] = *v596;
          a2.f32[0] = (float)a2.u32[0];
          LOBYTE(a3) = v596[1];
          LOBYTE(a4) = v596[2];
          a4 = (float)LODWORD(a4);
          a2.f32[1] = (float)LODWORD(a3);
          a2.f32[2] = a4;
          a3 = v641.f32[0];
          a2 = vdivq_f32(a2, v641);
          v644 = a2.u32[2];
          v643 = a2.i64[0];
          v597 = v590[5];
          if (v597 < v590[6])
            break;
          v590[5] = sub_2233B2B48(v590 + 4, (uint64_t *)&v643);
          v591 = (uint64_t *)((char *)v591 + 28);
          if (!--v589)
            return sub_223D37CC0(v642, a2, a3, a4);
        }
        v598 = v643;
        *(_DWORD *)(v597 + 8) = v644;
        *(_QWORD *)v597 = v598;
        v590[5] = v597 + 12;
        v591 = (uint64_t *)((char *)v591 + 28);
        --v589;
      }
      while (v589);
    }
  }
  return sub_223D37CC0(v642, a2, a3, a4);
}

