__n128 sub_2233EE968(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, int a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  __n128 result;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v16 = a2[1];
  v17 = a2[2];
  v18 = a2[3];
  v19 = a2[4];
  v20 = *(_QWORD *)(a1 + 64);
  v21 = v19 - v20;
  if (v19 < v18 && v21 < v18)
  {
    v23 = *a2 - 8 * v20;
  }
  else
  {
    v23 = a2[2];
    if (v21 <= v18)
      v23 = v16 + 8 * (v21 % v18);
  }
  *a3 = v23;
  a3[1] = v16;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v21;
  v24 = a2[1];
  v25 = a2[2];
  v26 = a2[3];
  v27 = a2[4];
  v28 = *(_QWORD *)(a1 + 72);
  v29 = v27 - v28;
  if (v27 >= v26 || v29 >= v26)
  {
    v30 = a2[2];
    if (v29 <= v26)
      v30 = v24 + 8 * (v29 % v26);
  }
  else
  {
    v30 = *a2 - 8 * v28;
  }
  v31 = v29 - 1;
  if (v29 >= v26 || v31 >= v26)
  {
    v32 = a2[2];
    if (v31 <= v26)
      v32 = v24 + 8 * (v31 % v26);
  }
  else
  {
    v32 = v30 - 8;
  }
  *a5 = v32;
  a5[1] = v24;
  a5[2] = v25;
  a5[3] = v26;
  a5[4] = v31;
  v53 = *(_OWORD *)a3;
  v55 = *((_OWORD *)a3 + 1);
  v33 = a3[3];
  v57 = a3[4];
  v34 = v57 - 1;
  a3[4] = v57 - 1;
  if (v57 >= v33)
  {
    if (v34 <= v33)
      v35 = a3[1] + 8 * (v34 % v33);
    else
      v35 = a3[2];
  }
  else
  {
    v35 = *a3 - 8;
  }
  *a3 = v35;
  *(_OWORD *)a4 = v53;
  *(_OWORD *)(a4 + 16) = v55;
  *(_QWORD *)(a4 + 32) = v57;
  for (i = a3[4]; i != a5[4]; i = a3[4])
  {
    v40 = a3[3];
    if (i >= v40)
    {
      v42 = i - 1;
      if (v42 <= v40)
        v41 = (float *)(a3[1] + 8 * (v42 % v40));
      else
        v41 = (float *)a3[2];
    }
    else
    {
      v41 = (float *)(*a3 - 8);
    }
    v43 = (float)((float)(v41[1] - *(float *)(a10 + 4)) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 16);
    if (v43 >= 0.0)
      v44 = 0.5;
    else
      v44 = -0.5;
    sub_2233DC31C(v43 + v44);
    v45 = (float)((float)(*v41 - *(float *)a10) * *(float *)(a10 + 24)) + (float)*(uint64_t *)(a10 + 8);
    if (v45 >= 0.0)
      v46 = 0.5;
    else
      v46 = -0.5;
    v47 = v45 + v46;
    sub_2233DC31C(v45 + v46);
    v48 = ceilf(v47);
    v49 = floorf(v47);
    if (v47 >= 0.0)
      v48 = v49;
    v50 = (uint64_t)v48;
    if (a8 == 1)
    {
      if (*a9 <= v50)
        break;
    }
    else if (a8 != -1 || a9[2] >= v50)
    {
      break;
    }
    v54 = *(_OWORD *)a3;
    v56 = *((_OWORD *)a3 + 1);
    v51 = a3[3];
    v58 = a3[4];
    v52 = v58 - 1;
    a3[4] = v58 - 1;
    if (v58 < v51)
    {
      v39 = *a3 - 8;
    }
    else if (v52 <= v51)
    {
      v39 = a3[1] + 8 * (v52 % v51);
    }
    else
    {
      v39 = a3[2];
    }
    *a3 = v39;
    *(_OWORD *)a4 = v54;
    *(_OWORD *)(a4 + 16) = v56;
    *(_QWORD *)(a4 + 32) = v58;
    ++*a6;
    ++*a7;
  }
  result = *(__n128 *)a4;
  v38 = *(_OWORD *)(a4 + 16);
  a3[4] = *(_QWORD *)(a4 + 32);
  *(__n128 *)a3 = result;
  *((_OWORD *)a3 + 1) = v38;
  return result;
}

char **sub_2233EEC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[32];
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];
  char v38;
  _QWORD v39[6];
  char v40;
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _DWORD v48[7];
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  float *v55[2];
  float *v56[2];

  v54 = a6;
  v32[0] = a1;
  v32[1] = a2;
  v11 = sub_2233E29A4((uint64_t)&v33, a1, a2, a5);
  v37[0] = a1;
  v37[1] = a5;
  v37[2] = v11;
  v37[3] = &v34;
  v38 = 0;
  v39[0] = a2;
  v39[1] = a5;
  v39[2] = &v35;
  v39[3] = &v36;
  v40 = 0;
  v41[1] = v37;
  v41[2] = v39;
  v42[1] = v39;
  v42[2] = v37;
  v12 = *(float **)(a1 + 24);
  v13 = *(float **)(a2 + 16);
  v14 = *(float **)(a2 + 24);
  v56[0] = *(float **)(a1 + 16);
  v56[1] = v12;
  v55[0] = v13;
  v55[1] = v14;
  *(_OWORD *)&v23[8] = xmmword_2245F5410;
  *(_QWORD *)&v23[24] = 0;
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = 1;
  *(_QWORD *)&v25 = 0;
  *(float *)&v22 = *v12 - *v56[0];
  *(float *)v23 = *v14 - *v13;
  *((float *)&v22 + 1) = v12[1] - v56[0][1];
  *(float *)&v23[4] = v14[1] - v13[1];
  sub_2233E2FB8((uint64_t)&v22, v56, v55, (uint64_t)v37, (uint64_t)v39, (uint64_t)v43);
  v52 = a4;
  v53 = a5;
  if (LOBYTE(v48[0]) != 100)
  {
    v22 = *(_QWORD *)a3;
    v29 = *(_OWORD *)(a3 + 136);
    *(_OWORD *)v30 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)&v30[16] = *(_OWORD *)(a3 + 168);
    v31 = *(_QWORD *)(a3 + 184);
    v15 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)v26 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v26[16] = v15;
    v16 = *(_OWORD *)(a3 + 120);
    v27 = *(_OWORD *)(a3 + 104);
    v28 = v16;
    v17 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)v23 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)&v23[16] = v17;
    v18 = *(_OWORD *)(a3 + 56);
    v24 = *(_OWORD *)(a3 + 40);
    v25 = v18;
    switch(LOBYTE(v48[0]))
    {
      case 'c':
        if (!BYTE1(v48[0]))
        {
          if (v50)
          {
            sub_2233F02E8(a1, a2, (uint64_t)&v22, (uint64_t)v43, (uint64_t)v48, (uint64_t)v41);
          }
          else
          {
            sub_2233F0870(a1, a2, (uint64_t)&v22, (uint64_t)v43, (uint64_t)v48, (uint64_t)v41);
            *(_DWORD *)v23 = 5;
          }
          goto LABEL_19;
        }
        sub_2233F0628(a1, a2, &v22, &v54, (uint64_t)v32, (uint64_t)v41);
        return v54;
      case 'i':
        *(_DWORD *)v23 = 2;
        v22 = v43[1];
        *(_QWORD *)&v26[24] = v45;
        *(_OWORD *)&v26[8] = v44;
        *(_OWORD *)&v30[8] = v46;
        *(_QWORD *)&v30[24] = v47;
        v19 = v49 == 1;
        *(_DWORD *)&v23[80 * (v49 != 1) + 24] = 1;
        v20 = v19;
        *(_DWORD *)&v23[80 * v20 + 24] = 2;
        goto LABEL_19;
      case 'm':
        if (v51 == 1)
          sub_2233EEFEC(a1, a2, (uint64_t)&v22, (uint64_t)v43, v48, (uint64_t)v41);
        else
          sub_2233EF740(a2, a1, (uint64_t)&v22, (uint64_t)v43, v48, (uint64_t)v42);
        goto LABEL_19;
      case 't':
        sub_2233EFC4C(a1, a2, (uint64_t)&v22, (uint64_t)v43, v48, (uint64_t)v41);
        goto LABEL_19;
      default:
        if (LOBYTE(v48[0]) != 101 || BYTE1(v48[0]))
          return v54;
        sub_2233F0870(a1, a2, (uint64_t)&v22, (uint64_t)v43, (uint64_t)v48, (uint64_t)v41);
LABEL_19:
        v56[0] = (float *)v54;
        sub_2233EF4F8((char ***)v56, (uint64_t)&v22);
        break;
    }
  }
  return v54;
}

void sub_2233EEFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 176) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v11;
  }
LABEL_11:
  v12 = a5[7];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233F0E88(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 112) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    *(_DWORD *)(a3 + 32) = 1;
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 112) = v35;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 == 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 80 * v36) = 1;
      *(_DWORD *)(v52 + 80 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233F0E88(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 == 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 112) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 32) = v43;
    *(_DWORD *)(a3 + 112) = 3;
  }
}

char ***sub_2233EF4F8(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v17 = *v4;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 6);
    v19 = v18 + 1;
    if (v18 + 1 > 0x155555555555555)
      sub_2233DCD38();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v17) >> 6);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0xAAAAAAAAAAAAAALL)
      v21 = 0x155555555555555;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x155555555555555)
        sub_223174E94();
      v22 = (char *)operator new(192 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[192 * v18];
    *(_QWORD *)v23 = *(_QWORD *)a2;
    *(_OWORD *)(v23 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(v23 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(v23 + 168) = *(_OWORD *)(a2 + 168);
    *((_QWORD *)v23 + 23) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(v23 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v23 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v23 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(v23 + 40) = *(_OWORD *)(a2 + 40);
    v24 = *(_OWORD *)(a2 + 56);
    v16 = v23 + 192;
    *(_OWORD *)(v23 + 56) = v24;
    if (v6 != v17)
    {
      do
      {
        v25 = *((_QWORD *)v6 - 24);
        v6 -= 192;
        *((_QWORD *)v23 - 24) = v25;
        v23 -= 192;
        v26 = *(_OWORD *)(v6 + 8);
        v27 = *(_OWORD *)(v6 + 24);
        v28 = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v23 + 56) = *(_OWORD *)(v6 + 56);
        *(_OWORD *)(v23 + 40) = v28;
        *(_OWORD *)(v23 + 24) = v27;
        *(_OWORD *)(v23 + 8) = v26;
        v29 = *(_OWORD *)(v6 + 72);
        v30 = *(_OWORD *)(v6 + 88);
        v31 = *(_OWORD *)(v6 + 104);
        *(_OWORD *)(v23 + 120) = *(_OWORD *)(v6 + 120);
        *(_OWORD *)(v23 + 104) = v31;
        *(_OWORD *)(v23 + 88) = v30;
        *(_OWORD *)(v23 + 72) = v29;
        v32 = *(_OWORD *)(v6 + 136);
        v33 = *(_OWORD *)(v6 + 152);
        v34 = *(_OWORD *)(v6 + 168);
        *((_QWORD *)v23 + 23) = *((_QWORD *)v6 + 23);
        *(_OWORD *)(v23 + 168) = v34;
        *(_OWORD *)(v23 + 152) = v33;
        *(_OWORD *)(v23 + 136) = v32;
      }
      while (v6 != v17);
      v6 = *v4;
    }
    *v4 = v23;
    v4[1] = v16;
    v4[2] = &v22[192 * v21];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v6 + 40) = v9;
    *(_OWORD *)(v6 + 24) = v8;
    *(_OWORD *)(v6 + 8) = v7;
    v10 = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(v6 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v6 + 104) = v12;
    *(_OWORD *)(v6 + 88) = v11;
    *(_OWORD *)(v6 + 72) = v10;
    v13 = *(_OWORD *)(a2 + 136);
    v14 = *(_OWORD *)(a2 + 152);
    v15 = *(_OWORD *)(a2 + 168);
    *((_QWORD *)v6 + 23) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(v6 + 168) = v15;
    *(_OWORD *)(v6 + 152) = v14;
    *(_OWORD *)(v6 + 136) = v13;
    v16 = v6 + 192;
  }
  v4[1] = v16;
  return a1;
}

void sub_2233EF740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  double v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  double v49;
  int v50;
  double v51;
  uint64_t v52;
  double v53;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 176) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 96) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v11;
  }
LABEL_11:
  v12 = a5[5];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v53 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v53);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v53 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 32;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(v21);
  v53 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v53);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v53 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_2233F0E88(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v53 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v53);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v53 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 112) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 32) = v35;
    *(_DWORD *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 != -1)
    {
LABEL_93:
      v52 = a3 + 32;
      *(_DWORD *)(v52 + 80 * v36) = 1;
      *(_DWORD *)(v52 + 80 * (v36 ^ 1)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v37 = *(_QWORD *)(a6 + 8);
    v38 = *(uint64_t **)(v37 + 16);
    v39 = *(uint64_t **)(v37 + 24);
    v40 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v41 = sub_2233E3FAC(v38, v39, v40, &v53);
    if (v41 == 0.0)
      goto LABEL_61;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
    }
    else
    {
      v44 = fabs(v41);
      if (v41 > 0.0)
        v42 = 1;
      else
        v42 = -1;
      if (v44 <= v53 * 2.22044605e-16)
LABEL_61:
        v42 = 0;
    }
    v45 = *(_QWORD *)(a6 + 8);
    v46 = *(uint64_t **)(v45 + 24);
    v47 = (uint64_t *)sub_2233F0E88(v45);
    v48 = *(uint64_t **)(*(_QWORD *)(a6 + 16) + 24);
    v53 = 1.0;
    v49 = sub_2233E3FAC(v46, v47, v48, &v53);
    if (v49 == 0.0)
    {
LABEL_80:
      v50 = 0;
      goto LABEL_90;
    }
    if ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
    }
    else
    {
      v51 = fabs(v49);
      if (v49 > 0.0)
        v50 = 1;
      else
        v50 = -1;
      if (v51 <= v53 * 2.22044605e-16)
        goto LABEL_80;
    }
LABEL_90:
    if (v50 * v42 == 1 && sub_2233E5CAC(a6) * v33 == -1)
      v36 = (v26 == 1) == (v33 != 0);
    goto LABEL_93;
  }
  if (v18)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 112) = 4;
  }
  else
  {
    if (v26 == 1)
      v43 = 2;
    else
      v43 = 1;
    *(_DWORD *)(a3 + 112) = v43;
    *(_DWORD *)(a3 + 32) = 3;
  }
}

void sub_2233EFC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  double v38;
  int v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  double v54;
  int v55;
  double v56;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  BOOL v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  double v80;

  *(_DWORD *)(a3 + 8) = 3;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 80) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 96) = 0;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 80) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 96) = 0x412E848000000000;
    v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 160) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 176) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 80) = v11;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 160) = xmmword_2245F5410;
    *(_QWORD *)(a3 + 176) = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a4 + 48);
    *(_QWORD *)(a3 + 176) = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 160) = v12;
  }
LABEL_11:
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_22;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v80 * 2.22044605e-16)
      goto LABEL_12;
  }
LABEL_22:
  v20 = a5[7];
  v21 = *(_QWORD *)(a6 + 8);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 16));
  v80 = 1.0;
  v25 = sub_2233E3FAC(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    v26 = 0;
    goto LABEL_33;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v26 * v20 != -1)
      goto LABEL_33;
LABEL_24:
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *(uint64_t **)(v27 + 24);
    v30 = (uint64_t *)sub_2233F0E88(v27);
    v80 = 1.0;
    v31 = sub_2233E3FAC(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0)
          v32 = 1;
        else
          v32 = -1;
        if (v32 != v20)
          goto LABEL_139;
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 32) = 3;
          v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1)
            v42 = 1;
          else
            v42 = 2;
          *(_DWORD *)(a3 + 32) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          v69 = *(_QWORD *)(a6 + 16);
          v70 = *(uint64_t **)(v69 + 24);
          v71 = (uint64_t *)sub_2233F0E88(v69);
          v72 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
          v80 = 1.0;
          v73 = sub_2233E3FAC(v70, v71, v72, &v80);
          if (v73 == 0.0)
            goto LABEL_141;
          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
          }
          else
          {
            v75 = fabs(v73);
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
            if (v75 <= v80 * 2.22044605e-16)
              goto LABEL_141;
          }
          if (v76 == v26)
          {
            if (v26 == 1)
              v78 = 1;
            else
              v78 = 2;
            *(_DWORD *)(a3 + 32) = v78;
            if (v26 == 1)
              v42 = 2;
            else
              v42 = 1;
            goto LABEL_165;
          }
        }
        v74 = v26 == 1;
        if (v26 == 1)
          v79 = 2;
        else
          v79 = 1;
        *(_DWORD *)(a3 + 32) = v79;
LABEL_170:
        if (v74)
          v62 = 1;
        else
          v62 = 2;
        goto LABEL_173;
      }
      v41 = fabs(v31);
      if (v31 > 0.0)
        v32 = 1;
      else
        v32 = -1;
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20)
          goto LABEL_139;
        goto LABEL_52;
      }
    }
    v32 = 0;
    if (v20)
      goto LABEL_139;
    goto LABEL_52;
  }
  v33 = fabs(v25);
  if (v25 > 0.0)
    v26 = 1;
  else
    v26 = -1;
  if (v33 <= v80 * 2.22044605e-16)
    goto LABEL_23;
  if (v26 * v20 == -1)
    goto LABEL_24;
LABEL_33:
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(uint64_t **)(v34 + 24);
  v36 = (uint64_t *)sub_2233F0E88(v34);
  v37 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v38 = sub_2233E3FAC(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    v39 = 0;
    goto LABEL_61;
  }
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
  }
  else
  {
    v40 = fabs(v38);
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
    if (v40 <= v80 * 2.22044605e-16)
      goto LABEL_34;
  }
LABEL_61:
  v43 = *(_QWORD *)(a6 + 8);
  v44 = *(uint64_t **)(v43 + 16);
  v45 = *(uint64_t **)(v43 + 24);
  v46 = (uint64_t *)sub_2233F0E88(v43);
  v80 = 1.0;
  v47 = sub_2233E3FAC(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_72;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > v80 * 2.22044605e-16)
      goto LABEL_72;
  }
  v48 = 0;
LABEL_72:
  v50 = *(_QWORD *)(a6 + 16);
  v51 = *(uint64_t **)(v50 + 16);
  v52 = *(uint64_t **)(v50 + 24);
  v53 = (uint64_t *)sub_2233F0E88(v50);
  v80 = 1.0;
  v54 = sub_2233E3FAC(v51, v52, v53, &v80);
  if (v54 == 0.0)
    goto LABEL_73;
  if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0)
      v55 = 1;
    else
      v55 = -1;
    goto LABEL_83;
  }
  v56 = fabs(v54);
  v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16)
LABEL_73:
    v55 = 0;
LABEL_83:
  if (v26)
    v57 = 1;
  else
    v57 = v55 * v20 == 1;
  v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39)
      v59 = 1;
    else
      v59 = v58;
    if ((v59 & 1) != 0)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 32) = 3;
        if (v55 == 1)
          v66 = 2;
        else
          v66 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v66;
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1)
          v60 = 1;
        else
          v60 = 2;
        *(_DWORD *)(a3 + 32) = v60;
        if (v55 == 1)
          v61 = 2;
        else
          v61 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v61;
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        v67 = v55 == 1;
        if (v55 == 1)
          v68 = 2;
        else
          v68 = 1;
        *(_DWORD *)(a3 + 32) = v68;
        if (v67)
          v42 = 1;
        else
          v42 = 2;
LABEL_165:
        *(_DWORD *)(a3 + 112) = v42;
        *(_BYTE *)(a3 + 12) = 1;
        return;
      }
      if (v18 != -v55)
        return;
      if (v55 == 1)
        v77 = 2;
      else
        v77 = 1;
      *(_DWORD *)(a3 + 32) = v77;
      *(_DWORD *)(a3 + 112) = v77;
      if (v58)
      {
        v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
LABEL_141:
    v62 = 4;
    *(_DWORD *)(a3 + 32) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 112) = v62;
    return;
  }
  if (v55 == 1)
    v63 = 2;
  else
    v63 = 1;
  *(_DWORD *)(a3 + 32) = v63;
  if (v26 == 1 || v20 == 1)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v65 = 3;
  *(_DWORD *)(a3 + 112) = v65;
  if ((v58 & 1) == 0)
    goto LABEL_121;
}

void sub_2233F02E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  double v28;
  int v29;
  double v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;

  v12 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 8) = 5;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v12 + 8);
  v14 = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v13 + 40);
  *(_OWORD *)(a3 + 80) = v14;
  v15 = *(_QWORD *)(v13 + 64);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v13 + 48);
  *(_QWORD *)(a3 + 176) = v15;
  v16 = *(_DWORD *)(a5 + 36);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(uint64_t **)(v17 + 16);
  v19 = *(uint64_t **)(v17 + 24);
  v20 = (uint64_t *)sub_2233F0E88(v17);
  v54 = 1.0;
  v21 = sub_2233E3FAC(v18, v19, v20, &v54);
  if (v21 != 0.0)
  {
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      goto LABEL_12;
    }
    v23 = fabs(v21);
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v23 > v54 * 2.22044605e-16)
      goto LABEL_12;
  }
  v22 = 0;
LABEL_12:
  v24 = *(_QWORD *)(a6 + 16);
  v25 = *(uint64_t **)(v24 + 16);
  v26 = *(uint64_t **)(v24 + 24);
  v27 = (uint64_t *)sub_2233F0E88(v24);
  v54 = 1.0;
  v28 = sub_2233E3FAC(v25, v26, v27, &v54);
  if (v28 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v28 > 0.0)
      v29 = 1;
    else
      v29 = -1;
    goto LABEL_23;
  }
  v30 = fabs(v28);
  v29 = v28 > 0.0 ? 1 : -1;
  if (v30 <= v54 * 2.22044605e-16)
LABEL_13:
    v29 = 0;
LABEL_23:
  if (v16 == 1)
    v31 = v22;
  else
    v31 = v29;
  v32 = v31 * v16;
  if (v32 == 1)
    v33 = 1;
  else
    v33 = 2;
  if (v32 == 1)
    v34 = 2;
  else
    v34 = 1;
  if (v32)
  {
    v35 = v34;
  }
  else
  {
    v33 = 4;
    v35 = 4;
  }
  *(_DWORD *)(a3 + 32) = v33;
  *(_DWORD *)(a3 + 112) = v35;
  if (v22)
  {
    v36 = *(float **)(a1 + 24);
    v37 = *(float *)a3;
    v38 = *(float *)(a3 + 4);
    v39 = *v36;
    v40 = v36[1];
  }
  else
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v39 = *(float *)(a1 + 160);
      v40 = *(float *)(a1 + 164);
    }
    else
    {
      sub_2233F0AD0(a1, *(float **)(a1 + 24), a1 + 32);
      v41 = *(_QWORD *)(a1 + 56);
      v42 = *(_QWORD *)(a1 + 64);
      if (v42 >= v41)
      {
        v44 = v42 - 1;
        if (v44 <= v41)
          v43 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8 * (v44 % v41));
        else
          v43 = *(uint64_t **)(a1 + 48);
      }
      else
      {
        v43 = (uint64_t *)(*(_QWORD *)(a1 + 32) - 8);
      }
      v45 = *v43;
      *(_QWORD *)(a1 + 160) = v45;
      *(_BYTE *)(a1 + 168) = 1;
      v40 = *((float *)&v45 + 1);
      v39 = *(float *)&v45;
    }
    v37 = *(float *)a3;
    v38 = *(float *)(a3 + 4);
  }
  *(float *)(a3 + 104) = (float)((float)(v37 - v39) * (float)(v37 - v39))
                       + (float)((float)(v38 - v40) * (float)(v38 - v40));
  if (v29)
  {
    v46 = (float)((float)(v37 - **(float **)(a2 + 24)) * (float)(v37 - **(float **)(a2 + 24)))
        + (float)((float)(v38 - *(float *)(*(_QWORD *)(a2 + 24) + 4))
                * (float)(v38 - *(float *)(*(_QWORD *)(a2 + 24) + 4)));
  }
  else
  {
    if (*(_BYTE *)(a2 + 168))
    {
      v47 = *(float *)(a2 + 160);
      v48 = *(float *)(a2 + 164);
    }
    else
    {
      sub_2233F0AD0(a2, *(float **)(a2 + 24), a2 + 32);
      v49 = *(_QWORD *)(a2 + 56);
      v50 = *(_QWORD *)(a2 + 64);
      if (v50 >= v49)
      {
        v52 = v50 - 1;
        if (v52 <= v49)
          v51 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8 * (v52 % v49));
        else
          v51 = *(uint64_t **)(a2 + 48);
      }
      else
      {
        v51 = (uint64_t *)(*(_QWORD *)(a2 + 32) - 8);
      }
      v53 = *v51;
      *(_QWORD *)(a2 + 160) = v53;
      *(_BYTE *)(a2 + 168) = 1;
      v47 = *(float *)&v53;
      v37 = *(float *)a3;
      v38 = *(float *)(a3 + 4);
      v48 = *((float *)&v53 + 1);
    }
    v46 = (float)((float)(v38 - v48) * (float)(v38 - v48)) + (float)((float)(v37 - v47) * (float)(v37 - v47));
  }
  *(float *)(a3 + 184) = v46;
}

void sub_2233F0628(uint64_t a1, uint64_t a2, uint64_t *a3, char ***a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  double v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];
  uint64_t v40;
  double v41;

  v30 = *a3;
  v38 = *(_OWORD *)(a3 + 17);
  *(_OWORD *)v39 = *(_OWORD *)(a3 + 19);
  *(_OWORD *)&v39[16] = *(_OWORD *)(a3 + 21);
  v40 = a3[23];
  v9 = *(_OWORD *)(a3 + 11);
  *(_OWORD *)v35 = *(_OWORD *)(a3 + 9);
  *(_OWORD *)&v35[16] = v9;
  v10 = *(_OWORD *)(a3 + 15);
  v36 = *(_OWORD *)(a3 + 13);
  v37 = v10;
  v11 = *(_OWORD *)(a3 + 3);
  v31 = *(_OWORD *)(a3 + 1);
  v32 = v11;
  v12 = *(_OWORD *)(a3 + 7);
  v33 = *(_OWORD *)(a3 + 5);
  v34 = v12;
  v13 = *(_DWORD *)(a5 + 480);
  if (*(_DWORD *)(a5 + 476) == 1)
  {
    v14 = *(_QWORD *)(a6 + 8);
    v15 = *(uint64_t **)(v14 + 16);
    v16 = *(uint64_t **)(v14 + 24);
    v17 = (uint64_t *)sub_2233F0E88(v14);
    v41 = 1.0;
    v18 = sub_2233E3FAC(v15, v16, v17, &v41);
    if (v18 != 0.0
      && ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v18) > v41 * 2.22044605e-16))
    {
      if (v18 <= 0.0)
        v19 = 1;
      else
        v19 = 2;
      DWORD2(v36) = 3;
      DWORD2(v32) = v19;
      LODWORD(v31) = 5;
      v30 = *(_QWORD *)(a5 + 320);
      v20 = *(_QWORD *)(a5 + 400);
      *(_OWORD *)&v35[8] = *(_OWORD *)(a5 + 384);
      *(_QWORD *)&v35[24] = v20;
      v21 = *(_QWORD *)(a5 + 424);
      *(_OWORD *)&v39[8] = *(_OWORD *)(a5 + 408);
      *(_QWORD *)&v39[24] = v21;
      v41 = *(double *)a4;
      sub_2233EF4F8((char ***)&v41, (uint64_t)&v30);
    }
  }
  if (v13 == 1)
  {
    v22 = *(_QWORD *)(a6 + 16);
    v23 = *(uint64_t **)(v22 + 16);
    v24 = *(uint64_t **)(v22 + 24);
    v25 = (uint64_t *)sub_2233F0E88(v22);
    v41 = 1.0;
    v26 = sub_2233E3FAC(v23, v24, v25, &v41);
    if (v26 != 0.0
      && ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v26) > v41 * 2.22044605e-16))
    {
      if (v26 <= 0.0)
        v27 = 1;
      else
        v27 = 2;
      DWORD2(v36) = v27;
      DWORD2(v32) = 3;
      LODWORD(v31) = 5;
      v30 = *(_QWORD *)(a5 + 312);
      v28 = *(_QWORD *)(a5 + 344);
      *(_OWORD *)&v35[8] = *(_OWORD *)(a5 + 328);
      *(_QWORD *)&v35[24] = v28;
      v29 = *(_QWORD *)(a5 + 368);
      *(_OWORD *)&v39[8] = *(_OWORD *)(a5 + 352);
      *(_QWORD *)&v39[24] = v29;
      v41 = *(double *)a4;
      sub_2233EF4F8((char ***)&v41, (uint64_t)&v30);
    }
  }
}

void sub_2233F0870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;

  v9 = sub_2233E5070((double *)(a4 + 48), (double *)(a4 + 104));
  v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8 * v9 + 8);
  v11 = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v10 + 40);
  *(_OWORD *)(a3 + 80) = v11;
  v12 = *(_QWORD *)(v10 + 64);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v10 + 48);
  *(_QWORD *)(a3 + 176) = v12;
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (uint64_t *)sub_2233F0E88(v13);
  v16 = (uint64_t *)sub_2233F0E88(*(_QWORD *)(a6 + 8));
  v38 = 1.0;
  v17 = sub_2233E3FAC(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v38 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v20 = *(_QWORD *)(a6 + 8);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *(uint64_t **)(v20 + 24);
  v23 = (uint64_t *)sub_2233F0E88(v20);
  v38 = 1.0;
  v24 = sub_2233E3FAC(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    v25 = 0;
    goto LABEL_23;
  }
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
  }
  else
  {
    v26 = fabs(v24);
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v26 <= v38 * 2.22044605e-16)
      goto LABEL_13;
  }
LABEL_23:
  v28 = *(_QWORD *)(a6 + 8);
  v27 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 16);
  v30 = *(uint64_t **)(v28 + 24);
  v31 = (uint64_t *)sub_2233F0E88(v27);
  v38 = 1.0;
  v32 = sub_2233E3FAC(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    v33 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 > v38 * 2.22044605e-16)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (v32 > 0.0)
    v33 = 1;
  else
    v33 = -1;
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1)
      v36 = v25 == -1;
    else
      v36 = v18 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 32) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 32) = 4;
  }
  *(_DWORD *)(a3 + 112) = v35;
}

void sub_2233F0AD0(uint64_t a1, float *a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  _OWORD *v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v6 = (float)((float)(a2[1] - *(float *)(a1 + 180)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 192);
  if (v6 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  v8 = v6 + v7;
  sub_2233DC31C(v6 + v7);
  v9 = ceilf(v8);
  v10 = floorf(v8);
  if (v8 >= 0.0)
    v9 = v10;
  v11 = (uint64_t)v9;
  v12 = (float)((float)(*a2 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
  if (v12 >= 0.0)
    v13 = 0.5;
  else
    v13 = -0.5;
  v14 = v12 + v13;
  sub_2233DC31C(v12 + v13);
  v15 = ceilf(v14);
  v16 = floorf(v14);
  if (v14 >= 0.0)
    v15 = v16;
  v17 = (uint64_t)v15;
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(a3 + 32);
  if (v19 >= v18)
  {
    v21 = v19 - 1;
    if (v21 <= v18)
      v20 = (float *)(*(_QWORD *)(a3 + 8) + 8 * (v21 % v18));
    else
      v20 = *(float **)(a3 + 16);
  }
  else
  {
    v20 = (float *)(*(_QWORD *)a3 - 8);
  }
  v22 = (float)((float)(v20[1] - *(float *)(a1 + 180)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 192);
  if (v22 >= 0.0)
    v23 = 0.5;
  else
    v23 = -0.5;
  v24 = v22 + v23;
  sub_2233DC31C(v22 + v23);
  v25 = ceilf(v24);
  v26 = floorf(v24);
  if (v24 >= 0.0)
    v27 = v26;
  else
    v27 = v25;
  v28 = (float)((float)(*v20 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
  if (v28 >= 0.0)
    v29 = 0.5;
  else
    v29 = -0.5;
  v30 = v28 + v29;
  sub_2233DC31C(v28 + v29);
  v31 = ceilf(v30);
  v32 = floorf(v30);
  if (v30 >= 0.0)
    v31 = v32;
  if (v17 == (uint64_t)v31 && v11 == (uint64_t)v27)
  {
    v34 = (_OWORD *)(a3 + 40);
    v35 = -1;
    do
    {
      if ((unint64_t)++v35 >= *(_QWORD *)(*(_QWORD *)a1 + 88))
        return;
      v49 = *(_QWORD *)(a3 + 24);
      v50 = *(_QWORD *)(a3 + 32);
      v51 = v50 - 1;
      *(_QWORD *)(a3 + 32) = v50 - 1;
      if (v50 >= v49)
      {
        if (v51 <= v49)
        {
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 8) + 8 * (v51 % v49);
          if (v51 != *(_QWORD *)(a3 + 112))
            goto LABEL_68;
        }
        else
        {
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
          if (v51 != *(_QWORD *)(a3 + 112))
            goto LABEL_68;
        }
      }
      else
      {
        *(_QWORD *)a3 -= 8;
        if (v51 != *(_QWORD *)(a3 + 112))
          goto LABEL_68;
      }
      v52 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)a3 = *v34;
      *(_OWORD *)(a3 + 16) = v52;
      v53 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 32) = v53;
      v49 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(a3 + 120))
      {
        v51 = v53 - 1;
        *(_QWORD *)(a3 + 32) = v53 - 1;
        if (v53 < v49)
        {
          *(_QWORD *)a3 -= 8;
          if (v53 != v50)
            goto LABEL_68;
          goto LABEL_67;
        }
        if (v51 > v49)
        {
          *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
          if (v53 != v50)
            goto LABEL_68;
LABEL_67:
          v54 = *(_OWORD *)(a3 + 56);
          *(_OWORD *)a3 = *v34;
          *(_OWORD *)(a3 + 16) = v54;
          v51 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)(a3 + 32) = v51;
          v49 = *(_QWORD *)(a3 + 24);
          goto LABEL_68;
        }
        *(_QWORD *)a3 = *(_QWORD *)(a3 + 8) + 8 * (v51 % v49);
        if (v53 == v50)
          goto LABEL_67;
      }
      else
      {
        v51 = v53;
      }
LABEL_68:
      if (v51 < v49)
      {
        v36 = (float *)(*(_QWORD *)a3 - 8);
      }
      else
      {
        v55 = v51 - 1;
        if (v55 <= v49)
          v36 = (float *)(*(_QWORD *)(a3 + 8) + 8 * (v55 % v49));
        else
          v36 = *(float **)(a3 + 16);
      }
      v37 = (float)((float)(v36[1] - *(float *)(a1 + 180)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 192);
      if (v37 >= 0.0)
        v38 = 0.5;
      else
        v38 = -0.5;
      v39 = v37 + v38;
      sub_2233DC31C(v37 + v38);
      v40 = ceilf(v39);
      v41 = floorf(v39);
      if (v39 >= 0.0)
        v42 = v41;
      else
        v42 = v40;
      v43 = (float)((float)(*v36 - *(float *)(a1 + 176)) * *(float *)(a1 + 200)) + (float)*(uint64_t *)(a1 + 184);
      if (v43 >= 0.0)
        v44 = 0.5;
      else
        v44 = -0.5;
      v45 = v43 + v44;
      sub_2233DC31C(v43 + v44);
      v46 = ceilf(v45);
      v47 = floorf(v45);
      if (v45 >= 0.0)
        v46 = v47;
    }
    while (v17 == (uint64_t)v46 && v11 == (uint64_t)v42);
  }
}

uint64_t sub_2233F0E88(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  if (!*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 168))
    {
      v3 = *(float *)(v2 + 164);
    }
    else
    {
      sub_2233F0AD0(*(_QWORD *)a1, *(float **)(v2 + 24), v2 + 32);
      v4 = *(_QWORD *)(v2 + 56);
      v5 = *(_QWORD *)(v2 + 64);
      if (v5 >= v4)
      {
        v7 = v5 - 1;
        if (v7 <= v4)
          v6 = (uint64_t *)(*(_QWORD *)(v2 + 40) + 8 * (v7 % v4));
        else
          v6 = *(uint64_t **)(v2 + 48);
      }
      else
      {
        v6 = (uint64_t *)(*(_QWORD *)(v2 + 32) - 8);
      }
      v8 = *v6;
      *(_QWORD *)(v2 + 160) = v8;
      *(_BYTE *)(v2 + 168) = 1;
      v3 = *((float *)&v8 + 1);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (float)((float)(v3 - *(float *)(v9 + 4)) * *(float *)(v9 + 24)) + (float)*(uint64_t *)(v9 + 16);
    if (v10 >= 0.0)
      v11 = 0.5;
    else
      v11 = -0.5;
    v12 = v10 + v11;
    sub_2233DC31C(v10 + v11);
    v13 = ceilf(v12);
    v14 = floorf(v12);
    if (v12 >= 0.0)
      v13 = v14;
    *(_QWORD *)(a1 + 40) = (uint64_t)v13;
    v15 = (float)((float)(*(float *)(v2 + 160) - *(float *)v9) * *(float *)(v9 + 24)) + (float)*(uint64_t *)(v9 + 8);
    if (v15 >= 0.0)
      v16 = 0.5;
    else
      v16 = -0.5;
    v17 = v15 + v16;
    sub_2233DC31C(v15 + v16);
    v18 = ceilf(v17);
    v19 = floorf(v17);
    if (v17 >= 0.0)
      v18 = v19;
    *(_QWORD *)(a1 + 32) = (uint64_t)v18;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1 + 32;
}

uint64_t sub_2233F0FEC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t *v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v7 = result;
LABEL_2:
  v8 = (uint64_t)(a2 - 24);
  v9 = v7;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v7 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v9) >> 6);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 19);
        v44 = *(_QWORD *)(v9 + 40);
        if (v43 == v44)
        {
          v45 = *(a2 - 18);
          v46 = *(_QWORD *)(v9 + 48);
          v47 = v45 < v46;
          if (v45 == v46)
          {
            v48 = *(a2 - 17);
            v49 = *(_QWORD *)(v9 + 56);
            v47 = v48 < v49;
            if (v48 == v49)
              v47 = *((_OWORD *)a2 - 8) < *(_OWORD *)(v9 + 64);
          }
          if (!v47)
          {
            if (*(a2 - 16) != *(_QWORD *)(v9 + 64))
              return result;
            if (*(a2 - 17) != *(_QWORD *)(v9 + 56))
              return result;
            if (v45 != v46)
              return result;
            if (*(a2 - 15) != *(_QWORD *)(v9 + 72))
              return result;
            result = sub_2233F3E20(v8, v9);
            if (!(_DWORD)result)
              return result;
          }
        }
        else if (v43 >= v44)
        {
          return result;
        }
        v50 = *(_QWORD *)v9;
        v84 = *(_QWORD *)(v9 + 184);
        v80 = *(_OWORD *)(v9 + 152);
        v82 = *(_OWORD *)(v9 + 168);
        v78 = *(_OWORD *)(v9 + 136);
        v66 = *(_OWORD *)(v9 + 40);
        v68 = *(_OWORD *)(v9 + 56);
        v62 = *(_OWORD *)(v9 + 8);
        v64 = *(_OWORD *)(v9 + 24);
        v74 = *(_OWORD *)(v9 + 104);
        v76 = *(_OWORD *)(v9 + 120);
        v70 = *(_OWORD *)(v9 + 72);
        v72 = *(_OWORD *)(v9 + 88);
        *(_QWORD *)v9 = *(a2 - 24);
        v51 = *(_OWORD *)(a2 - 23);
        v52 = *(_OWORD *)(a2 - 21);
        v53 = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v9 + 40) = v53;
        *(_OWORD *)(v9 + 24) = v52;
        *(_OWORD *)(v9 + 8) = v51;
        v54 = *(_OWORD *)(a2 - 15);
        v55 = *(_OWORD *)(a2 - 13);
        v56 = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v9 + 104) = v56;
        *(_OWORD *)(v9 + 88) = v55;
        *(_OWORD *)(v9 + 72) = v54;
        v57 = *(_OWORD *)(a2 - 7);
        v58 = *(_OWORD *)(a2 - 5);
        v59 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v9 + 184) = *(a2 - 1);
        *(_OWORD *)(v9 + 168) = v59;
        *(_OWORD *)(v9 + 152) = v58;
        *(_OWORD *)(v9 + 136) = v57;
        *(a2 - 24) = v50;
        *(_OWORD *)(a2 - 7) = v78;
        *(_OWORD *)(a2 - 5) = v80;
        *(_OWORD *)(a2 - 3) = v82;
        *(a2 - 1) = v84;
        *(_OWORD *)(a2 - 15) = v70;
        *(_OWORD *)(a2 - 13) = v72;
        *(_OWORD *)(a2 - 11) = v74;
        *(_OWORD *)(a2 - 9) = v76;
        *(_OWORD *)(a2 - 23) = v62;
        *(_OWORD *)(a2 - 21) = v64;
        *(_OWORD *)(a2 - 19) = v66;
        *(_OWORD *)(a2 - 17) = v68;
        return result;
      case 3uLL:
        return sub_2233F1CCC(v9, v9 + 192, v8);
      case 4uLL:
        return sub_2233F4110(v9, v9 + 192, v9 + 384, v8);
      case 5uLL:
        return sub_2233F4628(v9, v9 + 192, v9 + 384, v9 + 576, v8);
      default:
        if (v12 <= 4607)
        {
          if ((a5 & 1) != 0)
            return sub_2233F1680(v9, (uint64_t)a2);
          else
            return sub_2233F1A18(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 192 * (v13 >> 1));
          if ((unint64_t)v12 <= 0x6000)
          {
            sub_2233F1CCC(v9 + 192 * v14, v9, v8);
            if ((a5 & 1) != 0)
              goto LABEL_23;
          }
          else
          {
            sub_2233F1CCC(v9, v9 + 192 * v14, v8);
            v16 = v8;
            v17 = 192 * v14;
            v18 = v9 + 192 * v14;
            sub_2233F1CCC(v9 + 192, v18 - 192, (uint64_t)(a2 - 48));
            v19 = v9 + 384;
            v20 = v9 + 192 + v17;
            v8 = v16;
            sub_2233F1CCC(v19, v20, (uint64_t)(a2 - 72));
            sub_2233F1CCC(v18 - 192, (uint64_t)v15, v20);
            v21 = *(_QWORD *)v7;
            v83 = *(_QWORD *)(v7 + 184);
            v79 = *(_OWORD *)(v7 + 152);
            v81 = *(_OWORD *)(v7 + 168);
            v77 = *(_OWORD *)(v7 + 136);
            v65 = *(_OWORD *)(v7 + 40);
            v67 = *(_OWORD *)(v7 + 56);
            v61 = *(_OWORD *)(v7 + 8);
            v63 = *(_OWORD *)(v7 + 24);
            v73 = *(_OWORD *)(v7 + 104);
            v75 = *(_OWORD *)(v7 + 120);
            v69 = *(_OWORD *)(v7 + 72);
            v71 = *(_OWORD *)(v7 + 88);
            *(_QWORD *)v7 = *v15;
            v22 = *(_OWORD *)(v18 + 24);
            v23 = *(_OWORD *)(v18 + 40);
            v24 = *(_OWORD *)(v18 + 56);
            *(_OWORD *)(v7 + 8) = *(_OWORD *)(v18 + 8);
            *(_OWORD *)(v7 + 56) = v24;
            *(_OWORD *)(v7 + 40) = v23;
            *(_OWORD *)(v7 + 24) = v22;
            v25 = *(_OWORD *)(v18 + 88);
            v26 = *(_OWORD *)(v18 + 104);
            v27 = *(_OWORD *)(v18 + 120);
            *(_OWORD *)(v7 + 72) = *(_OWORD *)(v18 + 72);
            *(_OWORD *)(v7 + 120) = v27;
            *(_OWORD *)(v7 + 104) = v26;
            *(_OWORD *)(v7 + 88) = v25;
            v28 = *(_OWORD *)(v18 + 152);
            v29 = *(_OWORD *)(v18 + 168);
            v30 = *(_QWORD *)(v18 + 184);
            *(_OWORD *)(v7 + 136) = *(_OWORD *)(v18 + 136);
            *(_QWORD *)(v7 + 184) = v30;
            *(_OWORD *)(v7 + 168) = v29;
            *(_OWORD *)(v7 + 152) = v28;
            *v15 = v21;
            *(_OWORD *)(v18 + 56) = v67;
            *(_OWORD *)(v18 + 40) = v65;
            *(_OWORD *)(v18 + 24) = v63;
            *(_OWORD *)(v18 + 8) = v61;
            *(_OWORD *)(v18 + 120) = v75;
            *(_OWORD *)(v18 + 104) = v73;
            *(_OWORD *)(v18 + 88) = v71;
            *(_OWORD *)(v18 + 72) = v69;
            *(_QWORD *)(v18 + 184) = v83;
            *(_OWORD *)(v18 + 168) = v81;
            *(_OWORD *)(v18 + 152) = v79;
            *(_OWORD *)(v18 + 136) = v77;
            if ((a5 & 1) != 0)
              goto LABEL_23;
          }
          v31 = *(_QWORD *)(v7 - 152);
          v32 = *(_QWORD *)(v7 + 40);
          if (v31 == v32)
          {
            v33 = *(_QWORD *)(v7 - 144);
            v34 = *(_QWORD *)(v7 + 48);
            v35 = v33 < v34;
            if (v33 == v34)
            {
              v36 = *(_QWORD *)(v7 - 136);
              v37 = *(_QWORD *)(v7 + 56);
              v35 = v36 < v37;
              if (v36 == v37)
                v35 = *(_OWORD *)(v7 - 128) < *(_OWORD *)(v7 + 64);
            }
            if (!v35
              && (*(_QWORD *)(v7 - 128) != *(_QWORD *)(v7 + 64)
               || *(_QWORD *)(v7 - 136) != *(_QWORD *)(v7 + 56)
               || v33 != v34
               || *(_QWORD *)(v7 - 120) != *(_QWORD *)(v7 + 72)
               || (sub_2233F3E20(v7 - 192, v7) & 1) == 0))
            {
LABEL_27:
              result = sub_2233F2598((uint64_t *)v7, (unint64_t)a2);
              v9 = result;
              goto LABEL_28;
            }
          }
          else if (v31 >= v32)
          {
            goto LABEL_27;
          }
LABEL_23:
          v39 = sub_2233F2F30((uint64_t *)v7, (unint64_t)a2);
          v40 = (uint64_t *)v38;
          if ((v41 & 1) == 0)
            goto LABEL_26;
          v42 = sub_2233F3838(v7, v38);
          v9 = (uint64_t)(v40 + 24);
          result = sub_2233F3838((uint64_t)(v40 + 24), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v42)
              continue;
LABEL_26:
            result = sub_2233F0FEC(v7, v40, a3, -v11, a5 & 1, v39);
            v9 = (uint64_t)(v40 + 24);
LABEL_28:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v40;
          if (v42)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return sub_2233F4CE0(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

uint64_t sub_2233F1680(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (result != a2)
  {
    v53 = v2;
    v54 = v3;
    v5 = result;
    v6 = result + 192;
    if (result + 192 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = v8;
        v8 = v6;
        v21 = *(_QWORD *)(v10 + 232);
        v22 = *(_QWORD *)(v10 + 40);
        if (v21 == v22)
        {
          v23 = *(_QWORD *)(v10 + 240);
          v24 = *(_QWORD *)(v10 + 48);
          v25 = v23 < v24;
          if (v23 == v24
            && (v26 = *(_QWORD *)(v10 + 248), v27 = *(_QWORD *)(v10 + 56), v25 = v26 < v27, v26 == v27)
            && (v28 = *(_QWORD *)(v10 + 264), v29 = *(_QWORD *)(v10 + 72), v25 = v28 < v29, v28 == v29))
          {
            if (*(_QWORD *)(v10 + 256) >= *(_QWORD *)(v10 + 64))
              goto LABEL_32;
          }
          else if (!v25)
          {
LABEL_32:
            if (*(_QWORD *)(v10 + 256) != *(_QWORD *)(v10 + 64))
              goto LABEL_7;
            if (*(_QWORD *)(v10 + 248) != *(_QWORD *)(v10 + 56))
              goto LABEL_7;
            if (v23 != v24)
              goto LABEL_7;
            if (*(_QWORD *)(v10 + 264) != *(_QWORD *)(v10 + 72))
              goto LABEL_7;
            result = sub_2233F3E20(v8, v10);
            if (!(_DWORD)result)
              goto LABEL_7;
          }
        }
        else if (v21 >= v22)
        {
          goto LABEL_7;
        }
        v11 = *(_QWORD *)(v10 + 192);
        v42 = v11;
        v52 = *(_QWORD *)(v10 + 376);
        v30 = *(_OWORD *)(v10 + 312);
        v47 = *(_OWORD *)(v10 + 296);
        v48 = v30;
        v31 = *(_OWORD *)(v10 + 280);
        *(_OWORD *)&v45[32] = *(_OWORD *)(v10 + 264);
        v46 = v31;
        v32 = *(_OWORD *)(v10 + 360);
        v33 = *(_OWORD *)(v10 + 328);
        v50 = *(_OWORD *)(v10 + 344);
        v51 = v32;
        v49 = v33;
        v34 = *(_OWORD *)(v10 + 216);
        v43 = *(_OWORD *)(v10 + 200);
        v44 = v34;
        v35 = *(_OWORD *)(v10 + 248);
        *(_OWORD *)v45 = *(_OWORD *)(v10 + 232);
        *(_OWORD *)&v45[16] = v35;
        *(_QWORD *)(v10 + 192) = *(_QWORD *)v10;
        v9 = v10 + 8;
        *(_OWORD *)(v8 + 136) = *(_OWORD *)(v10 + 136);
        *(_OWORD *)(v8 + 152) = *(_OWORD *)(v10 + 152);
        *(_OWORD *)(v8 + 168) = *(_OWORD *)(v10 + 168);
        *(_QWORD *)(v8 + 184) = *(_QWORD *)(v10 + 184);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v10 + 72);
        *(_OWORD *)(v8 + 88) = *(_OWORD *)(v10 + 88);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(v10 + 104);
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v10 + 120);
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v10 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v10 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v10 + 56);
        if (v10 == v5)
        {
          v10 = v5;
          goto LABEL_6;
        }
        v36 = v7;
        while (1)
        {
          v38 = *(_QWORD *)(v5 + v36 - 152);
          if (*(_QWORD *)v45 == v38)
            break;
          if (*(uint64_t *)v45 >= v38)
            goto LABEL_5;
LABEL_21:
          v9 = v10 - 184;
          v10 -= 192;
          v37 = v5 + v36;
          *(_QWORD *)v37 = *(_QWORD *)(v5 + v36 - 192);
          *(_OWORD *)(v37 + 136) = *(_OWORD *)(v5 + v36 - 56);
          *(_OWORD *)(v37 + 152) = *(_OWORD *)(v5 + v36 - 40);
          *(_OWORD *)(v37 + 168) = *(_OWORD *)(v5 + v36 - 24);
          *(_QWORD *)(v37 + 184) = *(_QWORD *)(v5 + v36 - 8);
          *(_OWORD *)(v37 + 72) = *(_OWORD *)(v5 + v36 - 120);
          *(_OWORD *)(v37 + 88) = *(_OWORD *)(v5 + v36 - 104);
          *(_OWORD *)(v37 + 104) = *(_OWORD *)(v5 + v36 - 88);
          *(_OWORD *)(v37 + 120) = *(_OWORD *)(v5 + v36 - 72);
          *(_OWORD *)(v37 + 8) = *(_OWORD *)(v5 + v36 - 184);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v5 + v36 - 168);
          *(_OWORD *)(v37 + 40) = *(_OWORD *)(v5 + v36 - 152);
          *(_OWORD *)(v37 + 56) = *(_OWORD *)(v5 + v36 - 136);
          v36 -= 192;
          if (!v36)
          {
            v9 = v5 + 8;
            v10 = v5;
            goto LABEL_5;
          }
        }
        v39 = *(_QWORD *)(v5 + v36 - 144);
        v40 = *(_QWORD *)&v45[8] < v39;
        if (*(_QWORD *)&v45[8] == v39)
        {
          v41 = *(_QWORD *)(v5 + v36 - 136);
          v40 = *(_QWORD *)&v45[16] < v41;
          if (*(_QWORD *)&v45[16] == v41)
            v40 = *(_OWORD *)&v45[24] < *(_OWORD *)(v5 + v36 - 128);
        }
        if (v40)
          goto LABEL_21;
        if (*(_QWORD *)&v45[24] != *(_QWORD *)(v5 + v36 - 128)
          || *(_OWORD *)&v45[8] != *(_OWORD *)(v5 + v36 - 144)
          || *(_QWORD *)&v45[32] != *(_QWORD *)(v5 + v36 - 120))
        {
          goto LABEL_5;
        }
        result = sub_2233F3E20((uint64_t)&v42, v5 + v36 - 192);
        if ((_DWORD)result)
          goto LABEL_21;
        v10 = v5 + v36;
        v9 = v5 + v36 + 8;
LABEL_5:
        v11 = v42;
LABEL_6:
        *(_QWORD *)v10 = v11;
        v12 = v43;
        v13 = v44;
        v14 = *(_OWORD *)&v45[16];
        *(_OWORD *)(v9 + 32) = *(_OWORD *)v45;
        *(_OWORD *)(v9 + 48) = v14;
        *(_OWORD *)v9 = v12;
        *(_OWORD *)(v9 + 16) = v13;
        v15 = *(_OWORD *)&v45[32];
        v16 = v46;
        v17 = v48;
        *(_OWORD *)(v9 + 96) = v47;
        *(_OWORD *)(v9 + 112) = v17;
        *(_OWORD *)(v9 + 64) = v15;
        *(_OWORD *)(v9 + 80) = v16;
        v18 = v49;
        v19 = v50;
        v20 = v51;
        *(_QWORD *)(v9 + 176) = v52;
        *(_OWORD *)(v9 + 144) = v19;
        *(_OWORD *)(v9 + 160) = v20;
        *(_OWORD *)(v9 + 128) = v18;
LABEL_7:
        v6 = v8 + 192;
        v7 += 192;
      }
      while (v8 + 192 != a2);
    }
  }
  return result;
}

uint64_t sub_2233F1A18(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[48];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if ((uint64_t *)result != a2)
  {
    v48 = v2;
    v49 = v3;
    v5 = (uint64_t *)result;
    v6 = (uint64_t *)(result + 192);
    if ((uint64_t *)(result + 192) != a2)
    {
      v7 = result - 192;
      do
      {
        v13 = (uint64_t)v5;
        v5 = v6;
        v14 = *(_QWORD *)(v13 + 232);
        v15 = *(_QWORD *)(v13 + 40);
        if (v14 == v15)
        {
          v16 = *(_QWORD *)(v13 + 240);
          v17 = *(_QWORD *)(v13 + 48);
          v18 = v16 < v17;
          if (v16 == v17)
          {
            v19 = *(_QWORD *)(v13 + 248);
            v20 = *(_QWORD *)(v13 + 56);
            v18 = v19 < v20;
            if (v19 == v20)
              v18 = *(_OWORD *)(v13 + 256) < *(_OWORD *)(v13 + 64);
          }
          if (v18
            || *(_QWORD *)(v13 + 256) == *(_QWORD *)(v13 + 64)
            && *(_QWORD *)(v13 + 248) == *(_QWORD *)(v13 + 56)
            && v16 == v17
            && *(_QWORD *)(v13 + 264) == *(_QWORD *)(v13 + 72)
            && (result = sub_2233F3E20((uint64_t)v5, v13), (_DWORD)result))
          {
LABEL_18:
            v37 = *v5;
            v47 = *(_QWORD *)(v13 + 376);
            v21 = *(_OWORD *)(v13 + 216);
            v38 = *(_OWORD *)(v13 + 200);
            v39 = v21;
            v22 = *(_OWORD *)(v13 + 248);
            *(_OWORD *)v40 = *(_OWORD *)(v13 + 232);
            *(_OWORD *)&v40[16] = v22;
            v23 = *(_OWORD *)(v13 + 344);
            v44 = *(_OWORD *)(v13 + 328);
            v45 = v23;
            v46 = *(_OWORD *)(v13 + 360);
            v24 = *(_OWORD *)(v13 + 280);
            *(_OWORD *)&v40[32] = *(_OWORD *)(v13 + 264);
            v41 = v24;
            v25 = *(_OWORD *)(v13 + 296);
            v26 = *(_OWORD *)(v13 + 312);
            v27 = v7;
            v42 = v25;
            v43 = v26;
            while (1)
            {
              *(_QWORD *)(v27 + 384) = *(_QWORD *)(v27 + 192);
              *(_QWORD *)(v27 + 568) = *(_QWORD *)(v27 + 376);
              v28 = *(_OWORD *)(v27 + 216);
              *(_OWORD *)(v27 + 392) = *(_OWORD *)(v27 + 200);
              *(_OWORD *)(v27 + 408) = v28;
              v29 = *(_OWORD *)(v27 + 248);
              *(_OWORD *)(v27 + 424) = *(_OWORD *)(v27 + 232);
              *(_OWORD *)(v27 + 440) = v29;
              v30 = *(_OWORD *)(v27 + 344);
              *(_OWORD *)(v27 + 520) = *(_OWORD *)(v27 + 328);
              *(_OWORD *)(v27 + 536) = v30;
              *(_OWORD *)(v27 + 552) = *(_OWORD *)(v27 + 360);
              v31 = *(_OWORD *)(v27 + 280);
              *(_OWORD *)(v27 + 456) = *(_OWORD *)(v27 + 264);
              *(_OWORD *)(v27 + 472) = v31;
              v32 = *(_OWORD *)(v27 + 312);
              *(_OWORD *)(v27 + 488) = *(_OWORD *)(v27 + 296);
              *(_OWORD *)(v27 + 504) = v32;
              v33 = *(_QWORD *)(v27 + 40);
              if (*(_QWORD *)v40 == v33)
              {
                v34 = *(_QWORD *)(v27 + 48);
                v35 = *(_QWORD *)&v40[8] < v34;
                if (*(_QWORD *)&v40[8] == v34)
                {
                  v36 = *(_QWORD *)(v27 + 56);
                  v35 = *(_QWORD *)&v40[16] < v36;
                  if (*(_QWORD *)&v40[16] == v36)
                    v35 = *(_OWORD *)&v40[24] < *(_OWORD *)(v27 + 64);
                }
                if (!v35)
                {
                  if (*(_QWORD *)&v40[24] != *(_QWORD *)(v27 + 64)
                    || *(_OWORD *)&v40[8] != *(_OWORD *)(v27 + 48)
                    || *(_QWORD *)&v40[32] != *(_QWORD *)(v27 + 72)
                    || (result = sub_2233F3E20((uint64_t)&v37, v27), !(_DWORD)result))
                  {
LABEL_4:
                    v8 = v45;
                    *(_OWORD *)(v27 + 328) = v44;
                    *(_OWORD *)(v27 + 344) = v8;
                    *(_OWORD *)(v27 + 360) = v46;
                    v9 = v41;
                    *(_OWORD *)(v27 + 264) = *(_OWORD *)&v40[32];
                    *(_OWORD *)(v27 + 280) = v9;
                    v10 = v43;
                    *(_OWORD *)(v27 + 296) = v42;
                    *(_OWORD *)(v27 + 312) = v10;
                    v11 = v39;
                    *(_OWORD *)(v27 + 200) = v38;
                    *(_OWORD *)(v27 + 216) = v11;
                    v12 = *(_OWORD *)&v40[16];
                    *(_OWORD *)(v27 + 232) = *(_OWORD *)v40;
                    *(_QWORD *)(v27 + 192) = v37;
                    *(_QWORD *)(v27 + 376) = v47;
                    *(_OWORD *)(v27 + 248) = v12;
                    break;
                  }
                }
              }
              else if (*(uint64_t *)v40 >= v33)
              {
                goto LABEL_4;
              }
              v27 -= 192;
            }
          }
        }
        else if (v14 < v15)
        {
          goto LABEL_18;
        }
        v6 = v5 + 24;
        v7 += 192;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2233F1CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  if (v6 != v7)
  {
    if (v6 >= v7)
      goto LABEL_11;
LABEL_18:
    v22 = *(_QWORD *)(a3 + 40);
    if (v22 == v6)
    {
      v23 = *(_QWORD *)(a3 + 48);
      v24 = *(_QWORD *)(a2 + 48);
      v25 = v23 < v24;
      if (v23 == v24)
      {
        v26 = *(_QWORD *)(a3 + 56);
        v27 = *(_QWORD *)(a2 + 56);
        v25 = v26 < v27;
        if (v26 == v27)
        {
          v28 = *(_QWORD *)(a3 + 72);
          v29 = *(_QWORD *)(a2 + 72);
          v25 = v28 < v29;
          if (v28 == v29)
          {
            if (*(_QWORD *)(a3 + 64) < *(_QWORD *)(a2 + 64))
              goto LABEL_31;
            goto LABEL_40;
          }
        }
      }
      if (!v25)
      {
LABEL_40:
        if (*(_QWORD *)(a3 + 64) == *(_QWORD *)(a2 + 64)
          && *(_QWORD *)(a3 + 56) == *(_QWORD *)(a2 + 56)
          && v23 == v24
          && *(_QWORD *)(a3 + 72) == *(_QWORD *)(a2 + 72)
          && sub_2233F3E20(a3, a2))
        {
          goto LABEL_31;
        }
LABEL_45:
        v60 = *(_QWORD *)a1;
        v138 = *(_OWORD *)(a1 + 136);
        v143 = *(_OWORD *)(a1 + 152);
        v148 = *(_OWORD *)(a1 + 168);
        v153 = *(_QWORD *)(a1 + 184);
        v118 = *(_OWORD *)(a1 + 72);
        v123 = *(_OWORD *)(a1 + 88);
        v128 = *(_OWORD *)(a1 + 104);
        v133 = *(_OWORD *)(a1 + 120);
        v98 = *(_OWORD *)(a1 + 8);
        v103 = *(_OWORD *)(a1 + 24);
        v108 = *(_OWORD *)(a1 + 40);
        v113 = *(_OWORD *)(a1 + 56);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v61 = *(_OWORD *)(a2 + 8);
        v62 = *(_OWORD *)(a2 + 24);
        v63 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v63;
        *(_OWORD *)(a1 + 24) = v62;
        *(_OWORD *)(a1 + 8) = v61;
        v64 = *(_OWORD *)(a2 + 72);
        v65 = *(_OWORD *)(a2 + 88);
        v66 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v66;
        *(_OWORD *)(a1 + 88) = v65;
        *(_OWORD *)(a1 + 72) = v64;
        v67 = *(_OWORD *)(a2 + 136);
        v68 = *(_OWORD *)(a2 + 152);
        v69 = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = v69;
        *(_OWORD *)(a1 + 152) = v68;
        *(_OWORD *)(a1 + 136) = v67;
        *(_QWORD *)a2 = v60;
        *(_OWORD *)(a2 + 136) = v138;
        *(_OWORD *)(a2 + 152) = v143;
        *(_OWORD *)(a2 + 168) = v148;
        *(_QWORD *)(a2 + 184) = v153;
        *(_OWORD *)(a2 + 72) = v118;
        *(_OWORD *)(a2 + 88) = v123;
        *(_OWORD *)(a2 + 104) = v128;
        *(_OWORD *)(a2 + 120) = v133;
        *(_OWORD *)(a2 + 8) = v98;
        *(_OWORD *)(a2 + 24) = v103;
        *(_OWORD *)(a2 + 40) = v108;
        *(_OWORD *)(a2 + 56) = v113;
        v70 = *(_QWORD *)(a3 + 40);
        v71 = *(_QWORD *)(a2 + 40);
        if (v70 == v71)
        {
          v72 = *(_QWORD *)(a3 + 48);
          v73 = *(_QWORD *)(a2 + 48);
          v74 = v72 < v73;
          if (v72 == v73)
          {
            v75 = *(_QWORD *)(a3 + 56);
            v76 = *(_QWORD *)(a2 + 56);
            v74 = v75 < v76;
            if (v75 == v76)
              v74 = *(_OWORD *)(a3 + 64) < *(_OWORD *)(a2 + 64);
          }
          if (!v74)
          {
            if (*(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64))
              return 1;
            result = 1;
            if (*(_QWORD *)(a3 + 56) != *(_QWORD *)(a2 + 56)
              || v72 != v73
              || *(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72))
            {
              return result;
            }
            if (!sub_2233F3E20(a3, a2))
              return 1;
            v60 = *(_QWORD *)a2;
          }
        }
        else if (v70 >= v71)
        {
          return 1;
        }
        v139 = *(_OWORD *)(a2 + 136);
        v144 = *(_OWORD *)(a2 + 152);
        v149 = *(_OWORD *)(a2 + 168);
        v154 = *(_QWORD *)(a2 + 184);
        v119 = *(_OWORD *)(a2 + 72);
        v124 = *(_OWORD *)(a2 + 88);
        v129 = *(_OWORD *)(a2 + 104);
        v134 = *(_OWORD *)(a2 + 120);
        v99 = *(_OWORD *)(a2 + 8);
        v104 = *(_OWORD *)(a2 + 24);
        v109 = *(_OWORD *)(a2 + 40);
        v114 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v77 = *(_OWORD *)(a3 + 8);
        v78 = *(_OWORD *)(a3 + 24);
        v79 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 56) = v79;
        *(_OWORD *)(a2 + 8) = v77;
        *(_OWORD *)(a2 + 24) = v78;
        v80 = *(_OWORD *)(a3 + 72);
        v81 = *(_OWORD *)(a3 + 88);
        v82 = *(_OWORD *)(a3 + 120);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
        *(_OWORD *)(a2 + 120) = v82;
        *(_OWORD *)(a2 + 72) = v80;
        *(_OWORD *)(a2 + 88) = v81;
        v83 = *(_OWORD *)(a3 + 136);
        v84 = *(_OWORD *)(a3 + 152);
        v85 = *(_OWORD *)(a3 + 168);
        *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
        *(_OWORD *)(a2 + 152) = v84;
        *(_OWORD *)(a2 + 168) = v85;
        *(_OWORD *)(a2 + 136) = v83;
        *(_QWORD *)a3 = v60;
        *(_OWORD *)(a3 + 136) = v139;
        *(_OWORD *)(a3 + 152) = v144;
        *(_OWORD *)(a3 + 168) = v149;
        *(_QWORD *)(a3 + 184) = v154;
        *(_OWORD *)(a3 + 72) = v119;
        *(_OWORD *)(a3 + 88) = v124;
        *(_OWORD *)(a3 + 104) = v129;
        *(_OWORD *)(a3 + 120) = v134;
        *(_OWORD *)(a3 + 8) = v99;
        *(_OWORD *)(a3 + 24) = v104;
        *(_OWORD *)(a3 + 40) = v109;
        result = 2;
        *(_OWORD *)(a3 + 56) = v114;
        return result;
      }
    }
    else if (v22 >= v6)
    {
      goto LABEL_45;
    }
LABEL_31:
    v31 = *(_QWORD *)a1;
    v136 = *(_OWORD *)(a1 + 136);
    v141 = *(_OWORD *)(a1 + 152);
    v146 = *(_OWORD *)(a1 + 168);
    v151 = *(_QWORD *)(a1 + 184);
    v116 = *(_OWORD *)(a1 + 72);
    v121 = *(_OWORD *)(a1 + 88);
    v126 = *(_OWORD *)(a1 + 104);
    v131 = *(_OWORD *)(a1 + 120);
    v96 = *(_OWORD *)(a1 + 8);
    v101 = *(_OWORD *)(a1 + 24);
    v106 = *(_OWORD *)(a1 + 40);
    v111 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a3;
    v32 = *(_OWORD *)(a3 + 8);
    v33 = *(_OWORD *)(a3 + 24);
    v34 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a1 + 40) = v34;
    *(_OWORD *)(a1 + 24) = v33;
    *(_OWORD *)(a1 + 8) = v32;
    v35 = *(_OWORD *)(a3 + 72);
    v36 = *(_OWORD *)(a3 + 88);
    v37 = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a1 + 104) = v37;
    *(_OWORD *)(a1 + 88) = v36;
    *(_OWORD *)(a1 + 72) = v35;
    v38 = *(_OWORD *)(a3 + 136);
    v39 = *(_OWORD *)(a3 + 152);
    v40 = *(_OWORD *)(a3 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a3 + 184);
    *(_OWORD *)(a1 + 168) = v40;
    *(_OWORD *)(a1 + 152) = v39;
    *(_OWORD *)(a1 + 136) = v38;
    *(_QWORD *)a3 = v31;
    *(_OWORD *)(a3 + 136) = v136;
    *(_OWORD *)(a3 + 152) = v141;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v151;
    *(_OWORD *)(a3 + 72) = v116;
    *(_OWORD *)(a3 + 88) = v121;
    *(_OWORD *)(a3 + 104) = v126;
    *(_OWORD *)(a3 + 120) = v131;
    *(_OWORD *)(a3 + 8) = v96;
    *(_OWORD *)(a3 + 24) = v101;
    *(_OWORD *)(a3 + 40) = v106;
    result = 1;
    *(_OWORD *)(a3 + 56) = v111;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = v8 < v9;
  if (v8 == v9)
  {
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a1 + 56);
    v10 = v11 < v12;
    if (v11 == v12)
      v10 = *(_OWORD *)(a2 + 64) < *(_OWORD *)(a1 + 64);
  }
  if (v10)
    goto LABEL_18;
  if (*(_QWORD *)(a2 + 64) == *(_QWORD *)(a1 + 64)
    && *(_QWORD *)(a2 + 56) == *(_QWORD *)(a1 + 56)
    && v8 == v9
    && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a1 + 72))
  {
    v13 = sub_2233F3E20(a2, a1);
    v6 = *(_QWORD *)(a2 + 40);
    if ((v13 & 1) != 0)
      goto LABEL_18;
  }
LABEL_11:
  v14 = *(_QWORD *)(a3 + 40);
  if (v14 == v6)
  {
    v15 = *(_QWORD *)(a3 + 48);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = v15 < v16;
    if (v15 == v16
      && (v18 = *(_QWORD *)(a3 + 56), v19 = *(_QWORD *)(a2 + 56), v17 = v18 < v19, v18 == v19)
      && (v20 = *(_QWORD *)(a3 + 72), v21 = *(_QWORD *)(a2 + 72), v17 = v20 < v21, v20 == v21))
    {
      if (*(_QWORD *)(a3 + 64) < *(_QWORD *)(a2 + 64))
        goto LABEL_34;
    }
    else if (v17)
    {
      goto LABEL_34;
    }
    if (*(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64) || *(_QWORD *)(a3 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
    result = 0;
    if (v15 != v16)
      return result;
    if (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72))
      return result;
    result = sub_2233F3E20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v14 >= v6)
  {
    return 0;
  }
LABEL_34:
  v41 = *(_QWORD *)a2;
  v137 = *(_OWORD *)(a2 + 136);
  v142 = *(_OWORD *)(a2 + 152);
  v147 = *(_OWORD *)(a2 + 168);
  v152 = *(_QWORD *)(a2 + 184);
  v117 = *(_OWORD *)(a2 + 72);
  v122 = *(_OWORD *)(a2 + 88);
  v127 = *(_OWORD *)(a2 + 104);
  v132 = *(_OWORD *)(a2 + 120);
  v97 = *(_OWORD *)(a2 + 8);
  v102 = *(_OWORD *)(a2 + 24);
  v107 = *(_OWORD *)(a2 + 40);
  v112 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v42 = *(_OWORD *)(a3 + 8);
  v43 = *(_OWORD *)(a3 + 24);
  v44 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v44;
  *(_OWORD *)(a2 + 24) = v43;
  *(_OWORD *)(a2 + 8) = v42;
  v45 = *(_OWORD *)(a3 + 72);
  v46 = *(_OWORD *)(a3 + 88);
  v47 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v47;
  *(_OWORD *)(a2 + 88) = v46;
  *(_OWORD *)(a2 + 72) = v45;
  v48 = *(_OWORD *)(a3 + 136);
  v49 = *(_OWORD *)(a3 + 152);
  v50 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v50;
  *(_OWORD *)(a2 + 152) = v49;
  *(_OWORD *)(a2 + 136) = v48;
  *(_QWORD *)a3 = v41;
  *(_OWORD *)(a3 + 136) = v137;
  *(_OWORD *)(a3 + 152) = v142;
  *(_OWORD *)(a3 + 168) = v147;
  *(_QWORD *)(a3 + 184) = v152;
  *(_OWORD *)(a3 + 72) = v117;
  *(_OWORD *)(a3 + 88) = v122;
  *(_OWORD *)(a3 + 104) = v127;
  *(_OWORD *)(a3 + 120) = v132;
  *(_OWORD *)(a3 + 8) = v97;
  *(_OWORD *)(a3 + 24) = v102;
  *(_OWORD *)(a3 + 40) = v107;
  *(_OWORD *)(a3 + 56) = v112;
  v51 = *(_QWORD *)(a2 + 40);
  v52 = *(_QWORD *)(a1 + 40);
  if (v51 != v52)
  {
    if (v51 < v52)
      goto LABEL_68;
    return 1;
  }
  v53 = *(_QWORD *)(a2 + 48);
  v54 = *(_QWORD *)(a1 + 48);
  v55 = v53 < v54;
  if (v53 == v54
    && (v56 = *(_QWORD *)(a2 + 56), v57 = *(_QWORD *)(a1 + 56), v55 = v56 < v57, v56 == v57)
    && (v58 = *(_QWORD *)(a2 + 72), v59 = *(_QWORD *)(a1 + 72), v55 = v58 < v59, v58 == v59))
  {
    if (*(_QWORD *)(a2 + 64) < *(_QWORD *)(a1 + 64))
      goto LABEL_68;
  }
  else if (v55)
  {
    goto LABEL_68;
  }
  if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a1 + 64))
    return 1;
  result = 1;
  if (*(_QWORD *)(a2 + 56) == *(_QWORD *)(a1 + 56) && v53 == v54 && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a1 + 72))
  {
    if (!sub_2233F3E20(a2, a1))
      return 1;
LABEL_68:
    v86 = *(_QWORD *)a1;
    v140 = *(_OWORD *)(a1 + 136);
    v145 = *(_OWORD *)(a1 + 152);
    v150 = *(_OWORD *)(a1 + 168);
    v155 = *(_QWORD *)(a1 + 184);
    v120 = *(_OWORD *)(a1 + 72);
    v125 = *(_OWORD *)(a1 + 88);
    v130 = *(_OWORD *)(a1 + 104);
    v135 = *(_OWORD *)(a1 + 120);
    v100 = *(_OWORD *)(a1 + 8);
    v105 = *(_OWORD *)(a1 + 24);
    v110 = *(_OWORD *)(a1 + 40);
    v115 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v87 = *(_OWORD *)(a2 + 8);
    v88 = *(_OWORD *)(a2 + 24);
    v89 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v89;
    *(_OWORD *)(a1 + 24) = v88;
    *(_OWORD *)(a1 + 8) = v87;
    v90 = *(_OWORD *)(a2 + 72);
    v91 = *(_OWORD *)(a2 + 88);
    v92 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v92;
    *(_OWORD *)(a1 + 88) = v91;
    *(_OWORD *)(a1 + 72) = v90;
    v93 = *(_OWORD *)(a2 + 136);
    v94 = *(_OWORD *)(a2 + 152);
    v95 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v95;
    *(_OWORD *)(a1 + 152) = v94;
    *(_OWORD *)(a1 + 136) = v93;
    *(_QWORD *)a2 = v86;
    *(_OWORD *)(a2 + 136) = v140;
    *(_OWORD *)(a2 + 152) = v145;
    *(_OWORD *)(a2 + 168) = v150;
    *(_QWORD *)(a2 + 184) = v155;
    *(_OWORD *)(a2 + 72) = v120;
    *(_OWORD *)(a2 + 88) = v125;
    *(_OWORD *)(a2 + 104) = v130;
    *(_OWORD *)(a2 + 120) = v135;
    *(_OWORD *)(a2 + 8) = v100;
    *(_OWORD *)(a2 + 24) = v105;
    result = 2;
    *(_OWORD *)(a2 + 40) = v110;
    *(_OWORD *)(a2 + 56) = v115;
  }
  return result;
}

unint64_t sub_2233F2598(uint64_t *a1, unint64_t a2)
{
  unint64_t j;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t v73;
  unint64_t v74;
  int64x2_t v75;
  int64x2_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64x2_t v82;
  int64x2_t v83;
  unint64_t v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;

  j = a2;
  v110 = *a1;
  v118 = *(_OWORD *)(a1 + 17);
  v119 = *(_OWORD *)(a1 + 19);
  v120 = *(_OWORD *)(a1 + 21);
  v121 = a1[23];
  *(_OWORD *)v115 = *(_OWORD *)(a1 + 9);
  *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 11);
  v116 = *(_OWORD *)(a1 + 13);
  v117 = *(_OWORD *)(a1 + 15);
  v111 = *(_OWORD *)(a1 + 1);
  v112 = *(_OWORD *)(a1 + 3);
  v113 = *(_OWORD *)(a1 + 5);
  v114 = *(_OWORD *)(a1 + 7);
  v4 = a2 - 192;
  v5 = *(_QWORD *)(a2 - 152);
  if ((_QWORD)v113 != v5)
  {
    if ((uint64_t)v113 >= v5)
      goto LABEL_10;
LABEL_25:
    for (i = (unint64_t)(a1 + 24); ; i += 192)
    {
      v14 = *(_QWORD *)(i + 40);
      if ((_QWORD)v113 == v14)
      {
        v15 = *(_QWORD *)(i + 48);
        v16 = *((_QWORD *)&v113 + 1) < v15;
        if (*((_QWORD *)&v113 + 1) == v15)
        {
          v17 = *(_QWORD *)(i + 56);
          v16 = (uint64_t)v114 < v17;
          if ((_QWORD)v114 == v17)
            v16 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(i + 64);
        }
        if (v16
          || v114 == *(_OWORD *)(i + 56)
          && *((_QWORD *)&v113 + 1) == v15
          && *(_QWORD *)v115 == *(_QWORD *)(i + 72)
          && (sub_2233F3E20((uint64_t)&v110, i) & 1) != 0)
        {
          goto LABEL_37;
        }
      }
      else if ((uint64_t)v113 < v14)
      {
        goto LABEL_37;
      }
    }
  }
  v6 = *(_QWORD *)(a2 - 144);
  v7 = *((_QWORD *)&v113 + 1) < v6;
  if (*((_QWORD *)&v113 + 1) == v6)
  {
    v8 = *(_QWORD *)(a2 - 136);
    v7 = (uint64_t)v114 < v8;
    if ((_QWORD)v114 == v8)
      v7 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(a2 - 128);
  }
  if (v7
    || v114 == *(_OWORD *)(a2 - 136)
    && *((_QWORD *)&v113 + 1) == v6
    && *(_QWORD *)v115 == *(_QWORD *)(a2 - 120)
    && sub_2233F3E20((uint64_t)&v110, a2 - 192))
  {
    goto LABEL_25;
  }
LABEL_10:
  for (i = (unint64_t)(a1 + 24); i < j; i += 192)
  {
    v10 = *(_QWORD *)(i + 40);
    if ((_QWORD)v113 == v10)
    {
      v11 = *(_QWORD *)(i + 48);
      v12 = *((_QWORD *)&v113 + 1) < v11;
      if (*((_QWORD *)&v113 + 1) == v11)
      {
        v13 = *(_QWORD *)(i + 56);
        v12 = (uint64_t)v114 < v13;
        if ((_QWORD)v114 == v13)
          v12 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(i + 64);
      }
      if (v12
        || v114 == *(_OWORD *)(i + 56)
        && *((_QWORD *)&v113 + 1) == v11
        && *(_QWORD *)v115 == *(_QWORD *)(i + 72)
        && (sub_2233F3E20((uint64_t)&v110, i) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v113 < v10)
    {
      break;
    }
  }
LABEL_37:
  if (i < j)
  {
    for (j = v4; ; j -= 192)
    {
      v18 = *(_QWORD *)(j + 40);
      if ((_QWORD)v113 == v18)
      {
        v19 = *(_QWORD *)(j + 48);
        v20 = *((_QWORD *)&v113 + 1) < v19;
        if (*((_QWORD *)&v113 + 1) == v19)
        {
          v21 = *(_QWORD *)(j + 56);
          v20 = (uint64_t)v114 < v21;
          if ((_QWORD)v114 == v21)
            v20 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(j + 64);
        }
        if (!v20
          && (v114 != *(_OWORD *)(j + 56)
           || *((_QWORD *)&v113 + 1) != v19
           || *(_QWORD *)v115 != *(_QWORD *)(j + 72)
           || !sub_2233F3E20((uint64_t)&v110, j)))
        {
          break;
        }
      }
      else if ((uint64_t)v113 >= v18)
      {
        break;
      }
    }
  }
  while (i < j)
  {
    v22 = *(_QWORD *)i;
    v23 = *(_OWORD *)(i + 136);
    v24 = *(_OWORD *)(i + 152);
    v25 = *(_OWORD *)(i + 168);
    v133 = *(_QWORD *)(i + 184);
    v131 = v24;
    v132 = v25;
    v130 = v23;
    v26 = *(_OWORD *)(i + 8);
    v27 = *(_OWORD *)(i + 24);
    v28 = *(_OWORD *)(i + 56);
    v124 = *(_OWORD *)(i + 40);
    v125 = v28;
    v122 = v26;
    v123 = v27;
    v29 = *(_OWORD *)(i + 72);
    v30 = *(_OWORD *)(i + 88);
    v31 = *(_OWORD *)(i + 120);
    v128 = *(_OWORD *)(i + 104);
    v129 = v31;
    v126 = v29;
    v127 = v30;
    *(_QWORD *)i = *(_QWORD *)j;
    v32 = *(_OWORD *)(j + 8);
    v33 = *(_OWORD *)(j + 24);
    v34 = *(_OWORD *)(j + 40);
    *(_OWORD *)(i + 56) = *(_OWORD *)(j + 56);
    *(_OWORD *)(i + 40) = v34;
    *(_OWORD *)(i + 24) = v33;
    *(_OWORD *)(i + 8) = v32;
    v35 = *(_OWORD *)(j + 72);
    v36 = *(_OWORD *)(j + 88);
    v37 = *(_OWORD *)(j + 104);
    *(_OWORD *)(i + 120) = *(_OWORD *)(j + 120);
    *(_OWORD *)(i + 104) = v37;
    *(_OWORD *)(i + 88) = v36;
    *(_OWORD *)(i + 72) = v35;
    v38 = *(_OWORD *)(j + 136);
    v39 = *(_OWORD *)(j + 152);
    v40 = *(_OWORD *)(j + 168);
    *(_QWORD *)(i + 184) = *(_QWORD *)(j + 184);
    *(_OWORD *)(i + 168) = v40;
    *(_OWORD *)(i + 152) = v39;
    *(_OWORD *)(i + 136) = v38;
    *(_QWORD *)j = v22;
    v41 = v130;
    v42 = v131;
    v43 = v132;
    *(_QWORD *)(j + 184) = v133;
    v44 = v122;
    v45 = v123;
    v46 = v124;
    *(_OWORD *)(j + 56) = v125;
    *(_OWORD *)(j + 40) = v46;
    *(_OWORD *)(j + 24) = v45;
    *(_OWORD *)(j + 8) = v44;
    v47 = v126;
    v48 = v127;
    v49 = v128;
    *(_OWORD *)(j + 120) = v129;
    *(_OWORD *)(j + 104) = v49;
    *(_OWORD *)(j + 88) = v48;
    *(_OWORD *)(j + 72) = v47;
    *(_OWORD *)(j + 168) = v43;
    *(_OWORD *)(j + 152) = v42;
    *(_OWORD *)(j + 136) = v41;
    do
    {
      while (1)
      {
        i += 192;
        v50 = *(_QWORD *)(i + 40);
        if ((_QWORD)v113 == v50)
          break;
        if ((uint64_t)v113 < v50)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(i + 48);
      v52 = *((_QWORD *)&v113 + 1) < v51;
      if (*((_QWORD *)&v113 + 1) == v51)
      {
        v53 = *(_QWORD *)(i + 56);
        v52 = (uint64_t)v114 < v53;
        if ((_QWORD)v114 == v53)
          v52 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(i + 64);
      }
    }
    while (!v52
         && (v114 != *(_OWORD *)(i + 56)
          || *((_QWORD *)&v113 + 1) != v51
          || *(_QWORD *)v115 != *(_QWORD *)(i + 72)
          || (sub_2233F3E20((uint64_t)&v110, i) & 1) == 0));
    while (1)
    {
      do
      {
LABEL_66:
        while (1)
        {
          v54 = j;
          j -= 192;
          v55 = *(_QWORD *)(v54 - 152);
          if ((_QWORD)v113 == v55)
            break;
          if ((uint64_t)v113 >= v55)
            goto LABEL_52;
        }
        v56 = *(_QWORD *)(v54 - 144);
        v57 = *((_QWORD *)&v113 + 1) < v56;
        if (*((_QWORD *)&v113 + 1) == v56)
        {
          v58 = *(_QWORD *)(v54 - 136);
          v57 = (uint64_t)v114 < v58;
          if ((_QWORD)v114 == v58)
            v57 = (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1)) < *(_OWORD *)(v54 - 128);
        }
      }
      while (v57);
      if (v114 != *(_OWORD *)(v54 - 136) || *((_QWORD *)&v113 + 1) != v56 || *(_QWORD *)v115 != *(_QWORD *)(v54 - 120))
        break;
      if (vabdd_f64(*(double *)&v115[24], *(double *)(v54 - 96)) >= 50.0)
        goto LABEL_97;
      v122 = *(_OWORD *)&v115[8];
      sub_2233E5290((int64_t)&v122);
      v134 = *(_OWORD *)(v54 - 112);
      sub_2233E5290((int64_t)&v134);
      if (v122 != v134)
        goto LABEL_97;
      v59 = *(float *)j;
      if (*(float *)&v110 != *(float *)j)
      {
        if ((v110 & 0x7FFFFFFF) > 0x7F7FFFFF || (LODWORD(v59) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_97;
        v61 = vabds_f32(*(float *)&v110, v59);
        v62 = fabsf(*(float *)&v110);
        v63 = fabsf(v59);
        if (v62 < v63)
          v62 = v63;
        v64 = v62 >= 1.0 ? v62 * 0.00000011921 : 0.00000011921;
        if (v61 > v64)
          goto LABEL_97;
      }
      v60 = *(float *)(v54 - 188);
      if (*((float *)&v110 + 1) == v60)
        goto LABEL_78;
      if ((HIDWORD(v110) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v60) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_97;
      v65 = vabds_f32(*((float *)&v110 + 1), v60);
      v66 = fabsf(*((float *)&v110 + 1));
      v67 = fabsf(v60);
      if (v66 < v67)
        v66 = v67;
      v68 = v66 >= 1.0 ? v66 * 0.00000011921 : 0.00000011921;
      if (v65 <= v68)
      {
LABEL_78:
        if ((sub_2233F3FAC((uint64_t)&unk_25578BB58, (uint64_t)&v110, j) & 1) == 0)
          break;
      }
      else
      {
LABEL_97:
        v69 = *(double *)(v54 - 96);
        if (vabdd_f64(*(double *)&v115[24], v69) >= 50.0)
        {
          if (*(double *)&v115[24] >= v69)
            break;
        }
        else
        {
          v122 = *(_OWORD *)&v115[8];
          sub_2233E5290((int64_t)&v122);
          v134 = *(_OWORD *)(v54 - 112);
          sub_2233E5290((int64_t)&v134);
          v70 = *((_QWORD *)&v122 + 1);
          v71 = (uint64_t)v122 / *((_QWORD *)&v122 + 1);
          v72 = (uint64_t)v122 % *((_QWORD *)&v122 + 1);
          if ((uint64_t)v122 % *((_QWORD *)&v122 + 1) < 0)
          {
            v74 = ((unint64_t)(*((_QWORD *)&v122 + 1) + v72) >> 63)
                + (((*((_QWORD *)&v122 + 1) + v72) & ~((*((_QWORD *)&v122 + 1) + v72) >> 63))
                 - (((unint64_t)(*((_QWORD *)&v122 + 1) + v72) >> 63)
                  + *((_QWORD *)&v122 + 1)
                  + v72))
                / *((_QWORD *)&v122 + 1)
                + 1;
            v73.i64[0] = -1;
            v73.i64[1] = -1;
            if (v74 < 4)
              goto LABEL_131;
            v72 += (v74 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v122 + 1);
            v75 = 0uLL;
            v76 = (int64x2_t)(unint64_t)((uint64_t)v122 / *((_QWORD *)&v122 + 1));
            v77 = v74 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v76 = vaddq_s64(v76, v73);
              v75 = vaddq_s64(v75, v73);
              v77 -= 4;
            }
            while (v77);
            v71 = vaddvq_s64(vaddq_s64(v75, v76));
            if (v74 != (v74 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_131:
              do
              {
                v72 += *((_QWORD *)&v122 + 1);
                --v71;
              }
              while (v72 < 0);
            }
          }
          else
          {
            v73.i64[0] = -1;
            v73.i64[1] = -1;
          }
          v78 = *((_QWORD *)&v134 + 1);
          v79 = (uint64_t)v134 / *((_QWORD *)&v134 + 1);
          v80 = (uint64_t)v134 % *((_QWORD *)&v134 + 1);
          if ((uint64_t)v134 % *((_QWORD *)&v134 + 1) < 0)
          {
            v81 = ((unint64_t)(*((_QWORD *)&v134 + 1) + v80) >> 63)
                + (((*((_QWORD *)&v134 + 1) + v80) & ~((*((_QWORD *)&v134 + 1) + v80) >> 63))
                 - (((unint64_t)(*((_QWORD *)&v134 + 1) + v80) >> 63)
                  + *((_QWORD *)&v134 + 1)
                  + v80))
                / *((_QWORD *)&v134 + 1)
                + 1;
            if (v81 < 4)
              goto LABEL_132;
            v80 += (v81 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v134 + 1);
            v82 = 0uLL;
            v83 = (int64x2_t)(unint64_t)((uint64_t)v134 / *((_QWORD *)&v134 + 1));
            v84 = v81 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v83 = vaddq_s64(v83, v73);
              v82 = vaddq_s64(v82, v73);
              v84 -= 4;
            }
            while (v84);
            v79 = vaddvq_s64(vaddq_s64(v82, v83));
            if (v81 != (v81 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_132:
              do
              {
                v80 += *((_QWORD *)&v134 + 1);
                --v79;
              }
              while (v80 < 0);
            }
          }
          v85 = v71 < v79;
          if (v71 == v79)
          {
            v86 = 0;
            do
            {
              v87 = v72;
              v88 = v80;
              v86 ^= 1u;
              if (!v72 || !v80)
              {
                if (v72 != v80 && (v86 != 0) != (v72 != 0))
                  goto LABEL_66;
                goto LABEL_52;
              }
              v89 = v70 / v72;
              v72 = v70 % v72;
              v90 = v78 / v80;
              v80 = v78 % v80;
              v78 = v88;
              v70 = v87;
            }
            while (v89 == v90);
            v85 = v89 < v90;
            if (!v86)
              goto LABEL_121;
            if (v89 > v90)
              goto LABEL_66;
            break;
          }
LABEL_121:
          if (!v85)
            break;
        }
      }
    }
LABEL_52:
    ;
  }
  if ((uint64_t *)(i - 192) != a1)
  {
    *a1 = *(_QWORD *)(i - 192);
    v91 = *(_OWORD *)(i - 184);
    v92 = *(_OWORD *)(i - 168);
    v93 = *(_OWORD *)(i - 136);
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(i - 152);
    *(_OWORD *)(a1 + 7) = v93;
    *(_OWORD *)(a1 + 1) = v91;
    *(_OWORD *)(a1 + 3) = v92;
    v94 = *(_OWORD *)(i - 120);
    v95 = *(_OWORD *)(i - 104);
    v96 = *(_OWORD *)(i - 72);
    *(_OWORD *)(a1 + 13) = *(_OWORD *)(i - 88);
    *(_OWORD *)(a1 + 15) = v96;
    *(_OWORD *)(a1 + 9) = v94;
    *(_OWORD *)(a1 + 11) = v95;
    v97 = *(_OWORD *)(i - 56);
    v98 = *(_OWORD *)(i - 40);
    v99 = *(_OWORD *)(i - 24);
    a1[23] = *(_QWORD *)(i - 8);
    *(_OWORD *)(a1 + 19) = v98;
    *(_OWORD *)(a1 + 21) = v99;
    *(_OWORD *)(a1 + 17) = v97;
  }
  *(_QWORD *)(i - 192) = v110;
  v100 = v111;
  v101 = v112;
  v102 = v113;
  *(_OWORD *)(i - 136) = v114;
  *(_OWORD *)(i - 152) = v102;
  *(_OWORD *)(i - 168) = v101;
  *(_OWORD *)(i - 184) = v100;
  v103 = *(_OWORD *)v115;
  v104 = *(_OWORD *)&v115[16];
  v105 = v116;
  *(_OWORD *)(i - 72) = v117;
  *(_OWORD *)(i - 88) = v105;
  *(_OWORD *)(i - 104) = v104;
  *(_OWORD *)(i - 120) = v103;
  v106 = v118;
  v107 = v119;
  v108 = v120;
  *(_QWORD *)(i - 8) = v121;
  *(_OWORD *)(i - 24) = v108;
  *(_OWORD *)(i - 40) = v107;
  *(_OWORD *)(i - 56) = v106;
  return i;
}

__n128 sub_2233F2F30(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  unint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  unint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __n128 result;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[32];
  __int128 v116;
  __int128 v117;
  __n128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134[4];

  v4 = 0;
  v110 = *a1;
  v118 = *(__n128 *)(a1 + 17);
  v119 = *(_OWORD *)(a1 + 19);
  v120 = *(_OWORD *)(a1 + 21);
  v121 = a1[23];
  v5 = a1 + 1;
  *(_OWORD *)v115 = *(_OWORD *)(a1 + 9);
  *(_OWORD *)&v115[16] = *(_OWORD *)(a1 + 11);
  v116 = *(_OWORD *)(a1 + 13);
  v117 = *(_OWORD *)(a1 + 15);
  v111 = *(_OWORD *)(a1 + 1);
  v112 = *(_OWORD *)(a1 + 3);
  v113 = *(_OWORD *)(a1 + 5);
  v114 = *(_OWORD *)(a1 + 7);
  while (1)
  {
    v6 = &a1[v4];
    v7 = a1[v4 + 29];
    if (v7 == (_QWORD)v113)
      break;
    if (v7 >= (uint64_t)v113)
      goto LABEL_13;
LABEL_3:
    v4 += 24;
  }
  v8 = v6[30];
  v9 = v8 < *((_QWORD *)&v113 + 1);
  if (v8 == *((_QWORD *)&v113 + 1))
  {
    v10 = a1[v4 + 31];
    v9 = v10 < (uint64_t)v114;
    if (v10 == (_QWORD)v114)
      v9 = *(_OWORD *)&a1[v4 + 32] < (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1));
  }
  if (v9
    || *(_OWORD *)&a1[v4 + 31] == v114
    && v8 == *((_QWORD *)&v113 + 1)
    && a1[v4 + 33] == *(_QWORD *)v115
    && sub_2233F3E20((uint64_t)(v6 + 24), (uint64_t)&v110))
  {
    goto LABEL_3;
  }
LABEL_13:
  v11 = (unint64_t)&a1[v4 + 24];
  if (v4 * 8)
  {
    do
    {
      while (1)
      {
        a2 -= 192;
        v12 = *(_QWORD *)(a2 + 40);
        if (v12 == (_QWORD)v113)
          break;
        if (v12 < (uint64_t)v113)
          goto LABEL_42;
      }
      v13 = *(_QWORD *)(a2 + 48);
      v14 = v13 < *((_QWORD *)&v113 + 1);
      if (v13 == *((_QWORD *)&v113 + 1))
      {
        v15 = *(_QWORD *)(a2 + 56);
        v14 = v15 < (uint64_t)v114;
        if (v15 == (_QWORD)v114)
          v14 = *(_OWORD *)(a2 + 64) < (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1));
      }
    }
    while (!v14
         && (*(_OWORD *)(a2 + 56) != v114
          || v13 != *((_QWORD *)&v113 + 1)
          || *(_QWORD *)(a2 + 72) != *(_QWORD *)v115
          || (sub_2233F3E20(a2, (uint64_t)&v110) & 1) == 0));
  }
  else
  {
    do
    {
      if (v11 >= a2)
        break;
      while (1)
      {
        a2 -= 192;
        v16 = *(_QWORD *)(a2 + 40);
        if (v16 == (_QWORD)v113)
          break;
        if (v16 < (uint64_t)v113 || v11 >= a2)
          goto LABEL_42;
      }
      v18 = *(_QWORD *)(a2 + 48);
      v19 = v18 < *((_QWORD *)&v113 + 1);
      if (v18 == *((_QWORD *)&v113 + 1))
      {
        v20 = *(_QWORD *)(a2 + 56);
        v19 = v20 < (uint64_t)v114;
        if (v20 == (_QWORD)v114)
          v19 = *(_OWORD *)(a2 + 64) < (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1));
      }
    }
    while (!v19
         && (*(_OWORD *)(a2 + 56) != v114
          || v18 != *((_QWORD *)&v113 + 1)
          || *(_QWORD *)(a2 + 72) != *(_QWORD *)v115
          || (sub_2233F3E20(a2, (uint64_t)&v110) & 1) == 0));
  }
LABEL_42:
  if (v11 >= a2)
  {
    v21 = (unint64_t)&a1[v4 + 24];
  }
  else
  {
    v21 = (unint64_t)&a1[v4 + 24];
    v22 = a2;
    do
    {
      v23 = *(_QWORD *)v21;
      v24 = *(_OWORD *)(v21 + 24);
      v25 = *(_OWORD *)(v21 + 56);
      v26 = *(_OWORD *)(v21 + 8);
      v124 = *(_OWORD *)(v21 + 40);
      v125 = v25;
      v122 = v26;
      v123 = v24;
      v27 = *(_OWORD *)(v21 + 88);
      v28 = *(_OWORD *)(v21 + 120);
      v29 = *(_OWORD *)(v21 + 72);
      v128 = *(_OWORD *)(v21 + 104);
      v129 = v28;
      v126 = v29;
      v127 = v27;
      v30 = *(_OWORD *)(v21 + 136);
      v31 = *(_OWORD *)(v21 + 152);
      v32 = *(_OWORD *)(v21 + 168);
      v133 = *(_QWORD *)(v21 + 184);
      v131 = v31;
      v132 = v32;
      v130 = v30;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v33 = *(_OWORD *)(v22 + 8);
      v34 = *(_OWORD *)(v22 + 24);
      v35 = *(_OWORD *)(v22 + 40);
      *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
      *(_OWORD *)(v21 + 40) = v35;
      *(_OWORD *)(v21 + 24) = v34;
      *(_OWORD *)(v21 + 8) = v33;
      v36 = *(_OWORD *)(v22 + 72);
      v37 = *(_OWORD *)(v22 + 88);
      v38 = *(_OWORD *)(v22 + 104);
      *(_OWORD *)(v21 + 120) = *(_OWORD *)(v22 + 120);
      *(_OWORD *)(v21 + 104) = v38;
      *(_OWORD *)(v21 + 88) = v37;
      *(_OWORD *)(v21 + 72) = v36;
      v39 = *(_OWORD *)(v22 + 136);
      v40 = *(_OWORD *)(v22 + 152);
      v41 = *(_OWORD *)(v22 + 168);
      *(_QWORD *)(v21 + 184) = *(_QWORD *)(v22 + 184);
      *(_OWORD *)(v21 + 168) = v41;
      *(_OWORD *)(v21 + 152) = v40;
      *(_OWORD *)(v21 + 136) = v39;
      *(_QWORD *)v22 = v23;
      v42 = v130;
      v43 = v131;
      v44 = v132;
      *(_QWORD *)(v22 + 184) = v133;
      v45 = v122;
      v46 = v123;
      v47 = v124;
      *(_OWORD *)(v22 + 56) = v125;
      *(_OWORD *)(v22 + 40) = v47;
      *(_OWORD *)(v22 + 24) = v46;
      *(_OWORD *)(v22 + 8) = v45;
      v48 = v126;
      v49 = v127;
      v50 = v128;
      *(_OWORD *)(v22 + 120) = v129;
      *(_OWORD *)(v22 + 104) = v50;
      *(_OWORD *)(v22 + 88) = v49;
      *(_OWORD *)(v22 + 72) = v48;
      *(_OWORD *)(v22 + 168) = v44;
      *(_OWORD *)(v22 + 152) = v43;
      *(_OWORD *)(v22 + 136) = v42;
      while (1)
      {
        do
        {
LABEL_47:
          while (1)
          {
            v51 = v21;
            v21 += 192;
            v52 = *(_QWORD *)(v51 + 232);
            if (v52 == (_QWORD)v113)
              break;
            if (v52 >= (uint64_t)v113)
              goto LABEL_108;
          }
          v53 = *(_QWORD *)(v51 + 240);
          v54 = v53 < *((_QWORD *)&v113 + 1);
          if (v53 == *((_QWORD *)&v113 + 1))
          {
            v55 = *(_QWORD *)(v51 + 248);
            v54 = v55 < (uint64_t)v114;
            if (v55 == (_QWORD)v114)
              v54 = *(_OWORD *)(v51 + 256) < (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1));
          }
        }
        while (v54);
        if (*(_OWORD *)(v51 + 248) != v114
          || v53 != *((_QWORD *)&v113 + 1)
          || *(_QWORD *)(v51 + 264) != *(_QWORD *)v115)
        {
          break;
        }
        if (vabdd_f64(*(double *)(v51 + 288), *(double *)&v115[24]) >= 50.0)
          goto LABEL_78;
        v122 = *(_OWORD *)(v51 + 272);
        sub_2233E5290((int64_t)&v122);
        *(_OWORD *)v134 = *(_OWORD *)&v115[8];
        sub_2233E5290((int64_t)v134);
        if (v122 != *(_OWORD *)v134)
          goto LABEL_78;
        v56 = *(float *)v21;
        if (*(float *)v21 != *(float *)&v110)
        {
          if ((LODWORD(v56) & 0x7FFFFFFFu) > 0x7F7FFFFF || (v110 & 0x7FFFFFFF) > 0x7F7FFFFF)
            goto LABEL_78;
          v58 = vabds_f32(v56, *(float *)&v110);
          v59 = fabsf(v56);
          v60 = fabsf(*(float *)&v110);
          if (v59 < v60)
            v59 = v60;
          v61 = v59 >= 1.0 ? v59 * 0.00000011921 : 0.00000011921;
          if (v58 > v61)
            goto LABEL_78;
        }
        v57 = *(float *)(v51 + 196);
        if (v57 == *((float *)&v110 + 1))
          goto LABEL_59;
        if ((LODWORD(v57) & 0x7FFFFFFFu) > 0x7F7FFFFF || (HIDWORD(v110) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_78;
        v62 = vabds_f32(v57, *((float *)&v110 + 1));
        v63 = fabsf(v57);
        v64 = fabsf(*((float *)&v110 + 1));
        if (v63 < v64)
          v63 = v64;
        v65 = v63 >= 1.0 ? v63 * 0.00000011921 : 0.00000011921;
        if (v62 <= v65)
        {
LABEL_59:
          if ((sub_2233F3FAC((uint64_t)&unk_25578BB58, v21, (uint64_t)&v110) & 1) == 0)
            goto LABEL_108;
        }
        else
        {
LABEL_78:
          v66 = *(double *)(v51 + 288);
          if (vabdd_f64(v66, *(double *)&v115[24]) >= 50.0)
          {
            if (v66 >= *(double *)&v115[24])
              goto LABEL_108;
          }
          else
          {
            v122 = *(_OWORD *)(v51 + 272);
            sub_2233E5290((int64_t)&v122);
            *(_OWORD *)v134 = *(_OWORD *)&v115[8];
            sub_2233E5290((int64_t)v134);
            v67 = *((_QWORD *)&v122 + 1);
            v68 = (uint64_t)v122 / *((_QWORD *)&v122 + 1);
            v69 = (uint64_t)v122 % *((_QWORD *)&v122 + 1);
            if ((uint64_t)v122 % *((_QWORD *)&v122 + 1) < 0)
            {
              v71 = ((unint64_t)(*((_QWORD *)&v122 + 1) + v69) >> 63)
                  + (((*((_QWORD *)&v122 + 1) + v69) & ~((*((_QWORD *)&v122 + 1) + v69) >> 63))
                   - (((unint64_t)(*((_QWORD *)&v122 + 1) + v69) >> 63)
                    + *((_QWORD *)&v122 + 1)
                    + v69))
                  / *((_QWORD *)&v122 + 1)
                  + 1;
              v70.i64[0] = -1;
              v70.i64[1] = -1;
              if (v71 < 4)
                goto LABEL_124;
              v69 += (v71 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v122 + 1);
              v72 = 0uLL;
              v73 = (int64x2_t)(unint64_t)((uint64_t)v122 / *((_QWORD *)&v122 + 1));
              v74 = v71 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v73 = vaddq_s64(v73, v70);
                v72 = vaddq_s64(v72, v70);
                v74 -= 4;
              }
              while (v74);
              v68 = vaddvq_s64(vaddq_s64(v72, v73));
              if (v71 != (v71 & 0xFFFFFFFFFFFFFFFCLL))
              {
LABEL_124:
                do
                {
                  v69 += *((_QWORD *)&v122 + 1);
                  --v68;
                }
                while (v69 < 0);
              }
            }
            else
            {
              v70.i64[0] = -1;
              v70.i64[1] = -1;
            }
            v75 = v134[1];
            v76 = v134[0] / v134[1];
            v77 = v134[0] % v134[1];
            if (v134[0] % v134[1] < 0)
            {
              v78 = ((unint64_t)(v134[1] + v77) >> 63)
                  + (((v134[1] + v77) & ~((v134[1] + v77) >> 63))
                   - (((unint64_t)(v134[1] + v77) >> 63)
                    + v134[1]
                    + v77))
                  / v134[1]
                  + 1;
              if (v78 < 4)
                goto LABEL_125;
              v77 += (v78 & 0xFFFFFFFFFFFFFFFCLL) * v134[1];
              v79 = 0uLL;
              v80 = (int64x2_t)(unint64_t)(v134[0] / v134[1]);
              v81 = v78 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v80 = vaddq_s64(v80, v70);
                v79 = vaddq_s64(v79, v70);
                v81 -= 4;
              }
              while (v81);
              v76 = vaddvq_s64(vaddq_s64(v79, v80));
              if (v78 != (v78 & 0xFFFFFFFFFFFFFFFCLL))
              {
LABEL_125:
                do
                {
                  v77 += v134[1];
                  --v76;
                }
                while (v77 < 0);
              }
            }
            v82 = v68 < v76;
            if (v68 == v76)
            {
              v83 = 0;
              do
              {
                v84 = v69;
                v85 = v77;
                v83 ^= 1u;
                if (!v69 || !v77)
                {
                  if (v69 == v77 || (v83 != 0) == (v69 != 0))
                    goto LABEL_108;
                  goto LABEL_47;
                }
                v86 = v67 / v69;
                v69 = v67 % v69;
                v87 = v75 / v77;
                v77 = v75 % v77;
                v75 = v85;
                v67 = v84;
              }
              while (v86 == v87);
              v82 = v86 < v87;
              if (!v83)
                goto LABEL_102;
              if (v86 <= v87)
                goto LABEL_108;
            }
            else
            {
LABEL_102:
              if (!v82)
                goto LABEL_108;
            }
          }
        }
      }
      do
      {
LABEL_108:
        while (1)
        {
          v22 -= 192;
          v88 = *(_QWORD *)(v22 + 40);
          if (v88 == (_QWORD)v113)
            break;
          if (v88 < (uint64_t)v113)
            goto LABEL_44;
        }
        v89 = *(_QWORD *)(v22 + 48);
        v90 = v89 < *((_QWORD *)&v113 + 1);
        if (v89 == *((_QWORD *)&v113 + 1))
        {
          v91 = *(_QWORD *)(v22 + 56);
          v90 = v91 < (uint64_t)v114;
          if (v91 == (_QWORD)v114)
            v90 = *(_OWORD *)(v22 + 64) < (__int128)__PAIR128__(*(unint64_t *)v115, *((unint64_t *)&v114 + 1));
        }
      }
      while (!v90
           && (*(_OWORD *)(v22 + 56) != v114
            || v89 != *((_QWORD *)&v113 + 1)
            || *(_QWORD *)(v22 + 72) != *(_QWORD *)v115
            || (sub_2233F3E20(v22, (uint64_t)&v110) & 1) == 0));
LABEL_44:
      ;
    }
    while (v21 < v22);
  }
  if ((uint64_t *)(v21 - 192) != a1)
  {
    *a1 = *(_QWORD *)(v21 - 192);
    v92 = *(_OWORD *)(v21 - 184);
    v93 = *(_OWORD *)(v21 - 168);
    v94 = *(_OWORD *)(v21 - 136);
    *((_OWORD *)v5 + 2) = *(_OWORD *)(v21 - 152);
    *((_OWORD *)v5 + 3) = v94;
    *(_OWORD *)v5 = v92;
    *((_OWORD *)v5 + 1) = v93;
    v95 = *(_OWORD *)(v21 - 120);
    v96 = *(_OWORD *)(v21 - 104);
    v97 = *(_OWORD *)(v21 - 72);
    *((_OWORD *)v5 + 6) = *(_OWORD *)(v21 - 88);
    *((_OWORD *)v5 + 7) = v97;
    *((_OWORD *)v5 + 4) = v95;
    *((_OWORD *)v5 + 5) = v96;
    v98 = *(_OWORD *)(v21 - 56);
    v99 = *(_OWORD *)(v21 - 40);
    v100 = *(_OWORD *)(v21 - 24);
    v5[22] = *(_QWORD *)(v21 - 8);
    *((_OWORD *)v5 + 9) = v99;
    *((_OWORD *)v5 + 10) = v100;
    *((_OWORD *)v5 + 8) = v98;
  }
  *(_QWORD *)(v21 - 192) = v110;
  v101 = v111;
  v102 = v112;
  v103 = v113;
  *(_OWORD *)(v21 - 136) = v114;
  *(_OWORD *)(v21 - 152) = v103;
  *(_OWORD *)(v21 - 168) = v102;
  *(_OWORD *)(v21 - 184) = v101;
  v104 = *(_OWORD *)v115;
  v105 = *(_OWORD *)&v115[16];
  v106 = v116;
  *(_OWORD *)(v21 - 72) = v117;
  *(_OWORD *)(v21 - 88) = v106;
  *(_OWORD *)(v21 - 104) = v105;
  *(_OWORD *)(v21 - 120) = v104;
  result = v118;
  v108 = v119;
  v109 = v120;
  *(_QWORD *)(v21 - 8) = v121;
  *(_OWORD *)(v21 - 24) = v109;
  *(_OWORD *)(v21 - 40) = v108;
  *(__n128 *)(v21 - 56) = result;
  return result;
}

BOOL sub_2233F3838(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[184];
  uint64_t v77;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 6);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 152);
      v7 = *(_QWORD *)(a1 + 40);
      if (v6 != v7)
      {
        if (v6 >= v7)
          return result;
        goto LABEL_50;
      }
      v8 = *(_QWORD *)(a2 - 144);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = v8 < v9;
      if (v8 == v9
        && (v11 = *(_QWORD *)(a2 - 136), v12 = *(_QWORD *)(a1 + 56), v10 = v11 < v12, v11 == v12)
        && (v13 = *(_QWORD *)(a2 - 120), v14 = *(_QWORD *)(a1 + 72), v10 = v13 < v14, v13 == v14))
      {
        if (*(_QWORD *)(a2 - 128) < *(_QWORD *)(a1 + 64))
          goto LABEL_50;
      }
      else if (v10)
      {
LABEL_50:
        v56 = *(_QWORD *)a1;
        v57 = *(_OWORD *)(a1 + 152);
        *(_OWORD *)&v76[128] = *(_OWORD *)(a1 + 136);
        *(_OWORD *)&v76[144] = v57;
        *(_OWORD *)&v76[160] = *(_OWORD *)(a1 + 168);
        *(_QWORD *)&v76[176] = *(_QWORD *)(a1 + 184);
        v58 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)&v76[64] = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v76[80] = v58;
        v59 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)&v76[96] = *(_OWORD *)(a1 + 104);
        *(_OWORD *)&v76[112] = v59;
        v60 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)v76 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)&v76[16] = v60;
        v61 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)&v76[32] = *(_OWORD *)(a1 + 40);
        *(_OWORD *)&v76[48] = v61;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 192);
        v62 = *(_OWORD *)(a2 - 184);
        v63 = *(_OWORD *)(a2 - 168);
        v64 = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 40) = v64;
        *(_OWORD *)(a1 + 24) = v63;
        *(_OWORD *)(a1 + 8) = v62;
        v65 = *(_OWORD *)(a2 - 120);
        v66 = *(_OWORD *)(a2 - 104);
        v67 = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 104) = v67;
        *(_OWORD *)(a1 + 88) = v66;
        *(_OWORD *)(a1 + 72) = v65;
        v68 = *(_OWORD *)(a2 - 56);
        v69 = *(_OWORD *)(a2 - 40);
        v70 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 168) = v70;
        *(_OWORD *)(a1 + 152) = v69;
        *(_OWORD *)(a1 + 136) = v68;
        *(_QWORD *)(a2 - 192) = v56;
        v71 = *(_OWORD *)&v76[144];
        *(_OWORD *)(a2 - 56) = *(_OWORD *)&v76[128];
        *(_OWORD *)(a2 - 40) = v71;
        *(_OWORD *)(a2 - 24) = *(_OWORD *)&v76[160];
        *(_QWORD *)(a2 - 8) = *(_QWORD *)&v76[176];
        v72 = *(_OWORD *)&v76[80];
        *(_OWORD *)(a2 - 120) = *(_OWORD *)&v76[64];
        *(_OWORD *)(a2 - 104) = v72;
        v73 = *(_OWORD *)&v76[112];
        *(_OWORD *)(a2 - 88) = *(_OWORD *)&v76[96];
        *(_OWORD *)(a2 - 72) = v73;
        v74 = *(_OWORD *)&v76[16];
        *(_OWORD *)(a2 - 184) = *(_OWORD *)v76;
        *(_OWORD *)(a2 - 168) = v74;
        v75 = *(_OWORD *)&v76[48];
        *(_OWORD *)(a2 - 152) = *(_OWORD *)&v76[32];
        result = 1;
        *(_OWORD *)(a2 - 136) = v75;
        return result;
      }
      if (*(_QWORD *)(a2 - 128) == *(_QWORD *)(a1 + 64)
        && *(_QWORD *)(a2 - 136) == *(_QWORD *)(a1 + 56)
        && v8 == v9
        && *(_QWORD *)(a2 - 120) == *(_QWORD *)(a1 + 72))
      {
        if (!sub_2233F3E20(a2 - 192, a1))
          return 1;
        goto LABEL_50;
      }
      return result;
    case 3uLL:
      sub_2233F1CCC(a1, a1 + 192, a2 - 192);
      return 1;
    case 4uLL:
      sub_2233F4110(a1, a1 + 192, a1 + 384, a2 - 192);
      return 1;
    case 5uLL:
      sub_2233F4628(a1, a1 + 192, a1 + 384, a1 + 576, a2 - 192);
      return 1;
    default:
      v15 = a1 + 384;
      sub_2233F1CCC(a1, a1 + 192, a1 + 384);
      v16 = a1 + 576;
      if (a1 + 576 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      while (2)
      {
        v30 = *(_QWORD *)(v16 + 40);
        v31 = *(_QWORD *)(v15 + 40);
        if (v30 == v31)
        {
          v32 = *(_QWORD *)(v16 + 48);
          v33 = *(_QWORD *)(v15 + 48);
          v34 = v32 < v33;
          if (v32 == v33)
          {
            v35 = *(_QWORD *)(v16 + 56);
            v36 = *(_QWORD *)(v15 + 56);
            v34 = v35 < v36;
            if (v35 == v36)
              v34 = *(_OWORD *)(v16 + 64) < *(_OWORD *)(v15 + 64);
          }
          if (!v34
            && (*(_QWORD *)(v16 + 64) != *(_QWORD *)(v15 + 64)
             || *(_QWORD *)(v16 + 56) != *(_QWORD *)(v15 + 56)
             || v32 != v33
             || *(_QWORD *)(v16 + 72) != *(_QWORD *)(v15 + 72)
             || !sub_2233F3E20(v16, v15)))
          {
            goto LABEL_14;
          }
        }
        else if (v30 >= v31)
        {
          goto LABEL_14;
        }
        v20 = *(_QWORD *)v16;
        *(_QWORD *)v76 = *(_QWORD *)v16;
        v37 = *(_OWORD *)(v16 + 120);
        *(_OWORD *)&v76[104] = *(_OWORD *)(v16 + 104);
        *(_OWORD *)&v76[120] = v37;
        v38 = *(_OWORD *)(v16 + 88);
        *(_OWORD *)&v76[72] = *(_OWORD *)(v16 + 72);
        *(_OWORD *)&v76[88] = v38;
        v77 = *(_QWORD *)(v16 + 184);
        v39 = *(_OWORD *)(v16 + 168);
        v40 = *(_OWORD *)(v16 + 136);
        *(_OWORD *)&v76[152] = *(_OWORD *)(v16 + 152);
        *(_OWORD *)&v76[168] = v39;
        *(_OWORD *)&v76[136] = v40;
        v41 = *(_OWORD *)(v16 + 24);
        *(_OWORD *)&v76[8] = *(_OWORD *)(v16 + 8);
        *(_OWORD *)&v76[24] = v41;
        v42 = *(_OWORD *)(v16 + 56);
        *(_OWORD *)&v76[40] = *(_OWORD *)(v16 + 40);
        *(_OWORD *)&v76[56] = v42;
        *(_QWORD *)v16 = *(_QWORD *)v15;
        v19 = v15 + 8;
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(v15 + 136);
        *(_OWORD *)(v16 + 152) = *(_OWORD *)(v15 + 152);
        *(_OWORD *)(v16 + 168) = *(_OWORD *)(v15 + 168);
        *(_QWORD *)(v16 + 184) = *(_QWORD *)(v15 + 184);
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(v15 + 72);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v15 + 88);
        *(_OWORD *)(v16 + 104) = *(_OWORD *)(v15 + 104);
        *(_OWORD *)(v16 + 120) = *(_OWORD *)(v15 + 120);
        *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v15 + 24);
        *(_OWORD *)(v16 + 40) = *(_OWORD *)(v15 + 40);
        *(_OWORD *)(v16 + 56) = *(_OWORD *)(v15 + 56);
        if (v15 == a1)
        {
          v15 = a1;
          goto LABEL_13;
        }
        v43 = v17;
        while (2)
        {
          v51 = (_QWORD *)(a1 + v43);
          v52 = *(_QWORD *)(a1 + v43 + 232);
          if (*(_QWORD *)&v76[40] != v52)
          {
            if (*(uint64_t *)&v76[40] >= v52)
              goto LABEL_12;
            goto LABEL_30;
          }
          v53 = v51[30];
          v54 = *(_QWORD *)&v76[48] < v53;
          if (*(_QWORD *)&v76[48] == v53)
          {
            v55 = *(_QWORD *)(a1 + v43 + 248);
            v54 = *(_QWORD *)&v76[56] < v55;
            if (*(_QWORD *)&v76[56] == v55)
              v54 = *(_OWORD *)&v76[64] < *(_OWORD *)(a1 + v43 + 256);
          }
          if (v54)
            goto LABEL_30;
          if (*(_QWORD *)&v76[64] != *(_QWORD *)(a1 + v43 + 256)
            || *(_OWORD *)&v76[48] != __PAIR128__(*(_QWORD *)(a1 + v43 + 248), v53)
            || *(_QWORD *)&v76[72] != *(_QWORD *)(a1 + v43 + 264))
          {
            goto LABEL_12;
          }
          if (sub_2233F3E20((uint64_t)v76, (uint64_t)(v51 + 24)))
          {
LABEL_30:
            v19 = v15 - 184;
            v15 -= 192;
            v51[48] = v51[24];
            v44 = (_OWORD *)(a1 + v43 + 392);
            *(_QWORD *)(a1 + v43 + 568) = *(_QWORD *)(a1 + v43 + 376);
            v45 = *(_OWORD *)(a1 + v43 + 216);
            *v44 = *(_OWORD *)(a1 + v43 + 200);
            v44[1] = v45;
            v46 = *(_OWORD *)(a1 + v43 + 248);
            v44[2] = *(_OWORD *)(a1 + v43 + 232);
            v44[3] = v46;
            v47 = *(_OWORD *)(a1 + v43 + 344);
            v44[8] = *(_OWORD *)(a1 + v43 + 328);
            v44[9] = v47;
            v44[10] = *(_OWORD *)(a1 + v43 + 360);
            v48 = *(_OWORD *)(a1 + v43 + 280);
            v44[4] = *(_OWORD *)(a1 + v43 + 264);
            v44[5] = v48;
            v49 = *(_OWORD *)(a1 + v43 + 296);
            v50 = *(_OWORD *)(a1 + v43 + 312);
            v43 -= 192;
            v44[6] = v49;
            v44[7] = v50;
            if (v43 == -384)
            {
              v19 = a1 + 8;
              v15 = a1;
              goto LABEL_12;
            }
            continue;
          }
          break;
        }
        v19 = a1 + v43 + 392;
        v15 = a1 + v43 + 384;
LABEL_12:
        v20 = *(_QWORD *)v76;
LABEL_13:
        *(_QWORD *)v15 = v20;
        v21 = *(_OWORD *)&v76[8];
        v22 = *(_OWORD *)&v76[24];
        v23 = *(_OWORD *)&v76[56];
        *(_OWORD *)(v19 + 32) = *(_OWORD *)&v76[40];
        *(_OWORD *)(v19 + 48) = v23;
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v24 = *(_OWORD *)&v76[72];
        v25 = *(_OWORD *)&v76[88];
        v26 = *(_OWORD *)&v76[120];
        *(_OWORD *)(v19 + 96) = *(_OWORD *)&v76[104];
        *(_OWORD *)(v19 + 112) = v26;
        *(_OWORD *)(v19 + 64) = v24;
        *(_OWORD *)(v19 + 80) = v25;
        v27 = *(_OWORD *)&v76[136];
        v28 = *(_OWORD *)&v76[152];
        v29 = *(_OWORD *)&v76[168];
        *(_QWORD *)(v19 + 176) = v77;
        *(_OWORD *)(v19 + 144) = v28;
        *(_OWORD *)(v19 + 160) = v29;
        *(_OWORD *)(v19 + 128) = v27;
        if (++v18 == 8)
          return v16 + 192 == a2;
LABEL_14:
        v15 = v16;
        v17 += 192;
        v16 += 192;
        if (v16 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t sub_2233F3E20(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;

  v2 = (double *)(a1 + 80);
  v3 = (double *)(a2 + 80);
  if (vabdd_f64(*(double *)(a1 + 96), *(double *)(a2 + 96)) >= 50.0)
    return sub_2233E5070(v2, v3);
  v21 = *(_OWORD *)v2;
  sub_2233E5290((int64_t)&v21);
  v20 = *(_OWORD *)v3;
  sub_2233E5290((int64_t)&v20);
  if ((_QWORD)v21 != (_QWORD)v20 || *((_QWORD *)&v21 + 1) != *((_QWORD *)&v20 + 1))
    return sub_2233E5070(v2, v3);
  v8 = *(float *)a1;
  v9 = *(float *)a2;
  if (*(float *)a1 != *(float *)a2)
  {
    if ((LODWORD(v8) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v9) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      return sub_2233E5070(v2, v3);
    v12 = vabds_f32(v8, v9);
    v13 = fabsf(v8);
    v14 = fabsf(v9);
    if (v13 < v14)
      v13 = v14;
    v15 = v13 >= 1.0 ? v13 * 0.00000011921 : 0.00000011921;
    if (v12 > v15)
      return sub_2233E5070(v2, v3);
  }
  v10 = *(float *)(a1 + 4);
  v11 = *(float *)(a2 + 4);
  if (v10 == v11)
    return sub_2233F3FAC((uint64_t)&unk_25578BB58, a1, a2);
  if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return sub_2233E5070(v2, v3);
  v16 = vabds_f32(v10, v11);
  v17 = fabsf(v10);
  v18 = fabsf(v11);
  if (v17 < v18)
    v17 = v18;
  v19 = v17 >= 1.0 ? v17 * 0.00000011921 : 0.00000011921;
  if (v16 <= v19)
    return sub_2233F3FAC((uint64_t)&unk_25578BB58, a1, a2);
  else
    return sub_2233E5070(v2, v3);
}

uint64_t sub_2233F3FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;

  if (*(_QWORD *)(a2 + 128) != *(_QWORD *)(a3 + 128))
  {
    v9 = *(int *)(a2 + 32);
    v10 = dword_2245F5748;
    if (v9 > 5)
    {
      v11 = -1;
      v12 = *(int *)(a3 + 32);
      if (v12 <= 5)
        return v11 < v10[v12];
    }
    else
    {
      v11 = dword_2245F5748[v9];
      v12 = *(int *)(a3 + 32);
      if (v12 <= 5)
        return v11 < v10[v12];
    }
    return v11 < -1;
  }
  v3 = *(_QWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a3 + 136);
  if (v3 != v4)
  {
    if (v3 == -1)
    {
      v13 = *(_DWORD *)(a2 + 32);
      if (v13 == 1)
        return 0;
      if (v13 != 2)
      {
LABEL_18:
        v10 = dword_2245F5730;
        if (v13 > 5)
        {
          v11 = -1;
          v12 = *(int *)(a3 + 32);
          if (v12 > 5)
            return v11 < -1;
        }
        else
        {
          v11 = dword_2245F5730[v13];
          v12 = *(int *)(a3 + 32);
          if (v12 > 5)
            return v11 < -1;
        }
        return v11 < v10[v12];
      }
    }
    else
    {
      if (v4 != -1)
      {
LABEL_11:
        v13 = *(_DWORD *)(a2 + 32);
        goto LABEL_18;
      }
      v14 = *(_DWORD *)(a3 + 32);
      if (v14 != 1)
      {
        if (v14 != 2)
          goto LABEL_11;
        return 0;
      }
    }
    return 1;
  }
  v5 = *(int *)(a2 + 32);
  if (v5 > 5)
  {
    v6 = -1;
    v7 = *(int *)(a3 + 32);
    if (v7 > 5)
      return v6 < -1;
  }
  else
  {
    v6 = dword_2245F5748[v5];
    v7 = *(int *)(a3 + 32);
    if (v7 > 5)
      return v6 < -1;
  }
  return v6 < dword_2245F5748[v7];
}

uint64_t sub_2233F4110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  result = sub_2233F1CCC(a1, a2, a3);
  v9 = *(_QWORD *)(a4 + 40);
  v10 = *(_QWORD *)(a3 + 40);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a4 + 48);
    v12 = *(_QWORD *)(a3 + 48);
    v13 = v11 < v12;
    if (v11 == v12
      && (v14 = *(_QWORD *)(a4 + 56), v15 = *(_QWORD *)(a3 + 56), v13 = v14 < v15, v14 == v15)
      && (v16 = *(_QWORD *)(a4 + 72), v17 = *(_QWORD *)(a3 + 72), v13 = v16 < v17, v16 == v17))
    {
      if (*(_QWORD *)(a4 + 64) < *(_QWORD *)(a3 + 64))
        goto LABEL_11;
    }
    else if (v13)
    {
      goto LABEL_11;
    }
    if (*(_QWORD *)(a4 + 64) != *(_QWORD *)(a3 + 64))
      return result;
    if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a3 + 56))
      return result;
    if (v11 != v12)
      return result;
    if (*(_QWORD *)(a4 + 72) != *(_QWORD *)(a3 + 72))
      return result;
    result = sub_2233F3E20(a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if (v9 >= v10)
  {
    return result;
  }
LABEL_11:
  v18 = *(_QWORD *)a3;
  v88 = *(_OWORD *)(a3 + 136);
  v91 = *(_OWORD *)(a3 + 152);
  v94 = *(_OWORD *)(a3 + 168);
  v97 = *(_QWORD *)(a3 + 184);
  v76 = *(_OWORD *)(a3 + 72);
  v79 = *(_OWORD *)(a3 + 88);
  v82 = *(_OWORD *)(a3 + 104);
  v85 = *(_OWORD *)(a3 + 120);
  v64 = *(_OWORD *)(a3 + 8);
  v67 = *(_OWORD *)(a3 + 24);
  v70 = *(_OWORD *)(a3 + 40);
  v73 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v19 = *(_OWORD *)(a4 + 8);
  v20 = *(_OWORD *)(a4 + 24);
  v21 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a3 + 40) = v21;
  *(_OWORD *)(a3 + 24) = v20;
  *(_OWORD *)(a3 + 8) = v19;
  v22 = *(_OWORD *)(a4 + 72);
  v23 = *(_OWORD *)(a4 + 88);
  v24 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a4 + 120);
  *(_OWORD *)(a3 + 104) = v24;
  *(_OWORD *)(a3 + 88) = v23;
  *(_OWORD *)(a3 + 72) = v22;
  v25 = *(_OWORD *)(a4 + 136);
  v26 = *(_OWORD *)(a4 + 152);
  v27 = *(_OWORD *)(a4 + 168);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
  *(_OWORD *)(a3 + 168) = v27;
  *(_OWORD *)(a3 + 152) = v26;
  *(_OWORD *)(a3 + 136) = v25;
  *(_QWORD *)a4 = v18;
  *(_OWORD *)(a4 + 136) = v88;
  *(_OWORD *)(a4 + 152) = v91;
  *(_OWORD *)(a4 + 168) = v94;
  *(_QWORD *)(a4 + 184) = v97;
  *(_OWORD *)(a4 + 72) = v76;
  *(_OWORD *)(a4 + 88) = v79;
  *(_OWORD *)(a4 + 104) = v82;
  *(_OWORD *)(a4 + 120) = v85;
  *(_OWORD *)(a4 + 8) = v64;
  *(_OWORD *)(a4 + 24) = v67;
  *(_OWORD *)(a4 + 40) = v70;
  *(_OWORD *)(a4 + 56) = v73;
  v28 = *(_QWORD *)(a3 + 40);
  v29 = *(_QWORD *)(a2 + 40);
  if (v28 == v29)
  {
    v30 = *(_QWORD *)(a3 + 48);
    v31 = *(_QWORD *)(a2 + 48);
    v32 = v30 < v31;
    if (v30 == v31
      && (v33 = *(_QWORD *)(a3 + 56), v34 = *(_QWORD *)(a2 + 56), v32 = v33 < v34, v33 == v34)
      && (v35 = *(_QWORD *)(a3 + 72), v36 = *(_QWORD *)(a2 + 72), v32 = v35 < v36, v35 == v36))
    {
      if (*(_QWORD *)(a3 + 64) < *(_QWORD *)(a2 + 64))
        goto LABEL_27;
    }
    else if (v32)
    {
      goto LABEL_27;
    }
    if (*(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64))
      return result;
    if (*(_QWORD *)(a3 + 56) != *(_QWORD *)(a2 + 56))
      return result;
    if (v30 != v31)
      return result;
    if (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72))
      return result;
    result = sub_2233F3E20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v28 >= v29)
  {
    return result;
  }
LABEL_27:
  v37 = *(_QWORD *)a2;
  v89 = *(_OWORD *)(a2 + 136);
  v92 = *(_OWORD *)(a2 + 152);
  v95 = *(_OWORD *)(a2 + 168);
  v98 = *(_QWORD *)(a2 + 184);
  v77 = *(_OWORD *)(a2 + 72);
  v80 = *(_OWORD *)(a2 + 88);
  v83 = *(_OWORD *)(a2 + 104);
  v86 = *(_OWORD *)(a2 + 120);
  v65 = *(_OWORD *)(a2 + 8);
  v68 = *(_OWORD *)(a2 + 24);
  v71 = *(_OWORD *)(a2 + 40);
  v74 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v38 = *(_OWORD *)(a3 + 8);
  v39 = *(_OWORD *)(a3 + 24);
  v40 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v40;
  *(_OWORD *)(a2 + 24) = v39;
  *(_OWORD *)(a2 + 8) = v38;
  v41 = *(_OWORD *)(a3 + 72);
  v42 = *(_OWORD *)(a3 + 88);
  v43 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v43;
  *(_OWORD *)(a2 + 88) = v42;
  *(_OWORD *)(a2 + 72) = v41;
  v44 = *(_OWORD *)(a3 + 136);
  v45 = *(_OWORD *)(a3 + 152);
  v46 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v46;
  *(_OWORD *)(a2 + 152) = v45;
  *(_OWORD *)(a2 + 136) = v44;
  *(_QWORD *)a3 = v37;
  *(_OWORD *)(a3 + 136) = v89;
  *(_OWORD *)(a3 + 152) = v92;
  *(_OWORD *)(a3 + 168) = v95;
  *(_QWORD *)(a3 + 184) = v98;
  *(_OWORD *)(a3 + 72) = v77;
  *(_OWORD *)(a3 + 88) = v80;
  *(_OWORD *)(a3 + 104) = v83;
  *(_OWORD *)(a3 + 120) = v86;
  *(_OWORD *)(a3 + 8) = v65;
  *(_OWORD *)(a3 + 24) = v68;
  *(_OWORD *)(a3 + 40) = v71;
  *(_OWORD *)(a3 + 56) = v74;
  v47 = *(_QWORD *)(a2 + 40);
  v48 = *(_QWORD *)(a1 + 40);
  if (v47 != v48)
  {
    if (v47 >= v48)
      return result;
    goto LABEL_39;
  }
  v49 = *(_QWORD *)(a2 + 48);
  v50 = *(_QWORD *)(a1 + 48);
  v51 = v49 < v50;
  if (v49 == v50)
  {
    v52 = *(_QWORD *)(a2 + 56);
    v53 = *(_QWORD *)(a1 + 56);
    v51 = v52 < v53;
    if (v52 == v53)
      v51 = *(_OWORD *)(a2 + 64) < *(_OWORD *)(a1 + 64);
  }
  if (v51
    || *(_QWORD *)(a2 + 64) == *(_QWORD *)(a1 + 64)
    && *(_QWORD *)(a2 + 56) == *(_QWORD *)(a1 + 56)
    && v49 == v50
    && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a1 + 72)
    && (result = sub_2233F3E20(a2, a1), (_DWORD)result))
  {
LABEL_39:
    v54 = *(_QWORD *)a1;
    v90 = *(_OWORD *)(a1 + 136);
    v93 = *(_OWORD *)(a1 + 152);
    v96 = *(_OWORD *)(a1 + 168);
    v99 = *(_QWORD *)(a1 + 184);
    v78 = *(_OWORD *)(a1 + 72);
    v81 = *(_OWORD *)(a1 + 88);
    v84 = *(_OWORD *)(a1 + 104);
    v87 = *(_OWORD *)(a1 + 120);
    v66 = *(_OWORD *)(a1 + 8);
    v69 = *(_OWORD *)(a1 + 24);
    v72 = *(_OWORD *)(a1 + 40);
    v75 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v55 = *(_OWORD *)(a2 + 8);
    v56 = *(_OWORD *)(a2 + 24);
    v57 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v57;
    *(_OWORD *)(a1 + 24) = v56;
    *(_OWORD *)(a1 + 8) = v55;
    v58 = *(_OWORD *)(a2 + 72);
    v59 = *(_OWORD *)(a2 + 88);
    v60 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v60;
    *(_OWORD *)(a1 + 88) = v59;
    *(_OWORD *)(a1 + 72) = v58;
    v61 = *(_OWORD *)(a2 + 136);
    v62 = *(_OWORD *)(a2 + 152);
    v63 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v63;
    *(_OWORD *)(a1 + 152) = v62;
    *(_OWORD *)(a1 + 136) = v61;
    *(_QWORD *)a2 = v54;
    *(_OWORD *)(a2 + 136) = v90;
    *(_OWORD *)(a2 + 152) = v93;
    *(_OWORD *)(a2 + 168) = v96;
    *(_QWORD *)(a2 + 184) = v99;
    *(_OWORD *)(a2 + 72) = v78;
    *(_OWORD *)(a2 + 88) = v81;
    *(_OWORD *)(a2 + 104) = v84;
    *(_OWORD *)(a2 + 120) = v87;
    *(_OWORD *)(a2 + 8) = v66;
    *(_OWORD *)(a2 + 24) = v69;
    *(_OWORD *)(a2 + 40) = v72;
    *(_OWORD *)(a2 + 56) = v75;
  }
  return result;
}

uint64_t sub_2233F4628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  result = sub_2233F4110(a1, a2, a3, a4);
  v11 = *(_QWORD *)(a5 + 40);
  v12 = *(_QWORD *)(a4 + 40);
  if (v11 == v12)
  {
    v13 = *(_QWORD *)(a5 + 48);
    v14 = *(_QWORD *)(a4 + 48);
    v15 = v13 < v14;
    if (v13 == v14
      && (v16 = *(_QWORD *)(a5 + 56), v17 = *(_QWORD *)(a4 + 56), v15 = v16 < v17, v16 == v17)
      && (v18 = *(_QWORD *)(a5 + 72), v19 = *(_QWORD *)(a4 + 72), v15 = v18 < v19, v18 == v19))
    {
      if (*(_QWORD *)(a5 + 64) < *(_QWORD *)(a4 + 64))
        goto LABEL_11;
    }
    else if (v15)
    {
      goto LABEL_11;
    }
    if (*(_QWORD *)(a5 + 64) != *(_QWORD *)(a4 + 64))
      return result;
    if (*(_QWORD *)(a5 + 56) != *(_QWORD *)(a4 + 56))
      return result;
    if (v13 != v14)
      return result;
    if (*(_QWORD *)(a5 + 72) != *(_QWORD *)(a4 + 72))
      return result;
    result = sub_2233F3E20(a5, a4);
    if (!(_DWORD)result)
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
LABEL_11:
  v20 = *(_QWORD *)a4;
  v117 = *(_OWORD *)(a4 + 136);
  v121 = *(_OWORD *)(a4 + 152);
  v125 = *(_OWORD *)(a4 + 168);
  v129 = *(_QWORD *)(a4 + 184);
  v101 = *(_OWORD *)(a4 + 72);
  v105 = *(_OWORD *)(a4 + 88);
  v109 = *(_OWORD *)(a4 + 104);
  v113 = *(_OWORD *)(a4 + 120);
  v85 = *(_OWORD *)(a4 + 8);
  v89 = *(_OWORD *)(a4 + 24);
  v93 = *(_OWORD *)(a4 + 40);
  v97 = *(_OWORD *)(a4 + 56);
  *(_QWORD *)a4 = *(_QWORD *)a5;
  v21 = *(_OWORD *)(a5 + 8);
  v22 = *(_OWORD *)(a5 + 24);
  v23 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a4 + 40) = v23;
  *(_OWORD *)(a4 + 24) = v22;
  *(_OWORD *)(a4 + 8) = v21;
  v24 = *(_OWORD *)(a5 + 72);
  v25 = *(_OWORD *)(a5 + 88);
  v26 = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a4 + 104) = v26;
  *(_OWORD *)(a4 + 88) = v25;
  *(_OWORD *)(a4 + 72) = v24;
  v27 = *(_OWORD *)(a5 + 136);
  v28 = *(_OWORD *)(a5 + 152);
  v29 = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(a5 + 184);
  *(_OWORD *)(a4 + 168) = v29;
  *(_OWORD *)(a4 + 152) = v28;
  *(_OWORD *)(a4 + 136) = v27;
  *(_QWORD *)a5 = v20;
  *(_OWORD *)(a5 + 136) = v117;
  *(_OWORD *)(a5 + 152) = v121;
  *(_OWORD *)(a5 + 168) = v125;
  *(_QWORD *)(a5 + 184) = v129;
  *(_OWORD *)(a5 + 72) = v101;
  *(_OWORD *)(a5 + 88) = v105;
  *(_OWORD *)(a5 + 104) = v109;
  *(_OWORD *)(a5 + 120) = v113;
  *(_OWORD *)(a5 + 8) = v85;
  *(_OWORD *)(a5 + 24) = v89;
  *(_OWORD *)(a5 + 40) = v93;
  *(_OWORD *)(a5 + 56) = v97;
  v30 = *(_QWORD *)(a4 + 40);
  v31 = *(_QWORD *)(a3 + 40);
  if (v30 == v31)
  {
    v32 = *(_QWORD *)(a4 + 48);
    v33 = *(_QWORD *)(a3 + 48);
    v34 = v32 < v33;
    if (v32 == v33
      && (v35 = *(_QWORD *)(a4 + 56), v36 = *(_QWORD *)(a3 + 56), v34 = v35 < v36, v35 == v36)
      && (v37 = *(_QWORD *)(a4 + 72), v38 = *(_QWORD *)(a3 + 72), v34 = v37 < v38, v37 == v38))
    {
      if (*(_QWORD *)(a4 + 64) < *(_QWORD *)(a3 + 64))
        goto LABEL_27;
    }
    else if (v34)
    {
      goto LABEL_27;
    }
    if (*(_QWORD *)(a4 + 64) != *(_QWORD *)(a3 + 64))
      return result;
    if (*(_QWORD *)(a4 + 56) != *(_QWORD *)(a3 + 56))
      return result;
    if (v32 != v33)
      return result;
    if (*(_QWORD *)(a4 + 72) != *(_QWORD *)(a3 + 72))
      return result;
    result = sub_2233F3E20(a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if (v30 >= v31)
  {
    return result;
  }
LABEL_27:
  v39 = *(_QWORD *)a3;
  v118 = *(_OWORD *)(a3 + 136);
  v122 = *(_OWORD *)(a3 + 152);
  v126 = *(_OWORD *)(a3 + 168);
  v130 = *(_QWORD *)(a3 + 184);
  v102 = *(_OWORD *)(a3 + 72);
  v106 = *(_OWORD *)(a3 + 88);
  v110 = *(_OWORD *)(a3 + 104);
  v114 = *(_OWORD *)(a3 + 120);
  v86 = *(_OWORD *)(a3 + 8);
  v90 = *(_OWORD *)(a3 + 24);
  v94 = *(_OWORD *)(a3 + 40);
  v98 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v40 = *(_OWORD *)(a4 + 8);
  v41 = *(_OWORD *)(a4 + 24);
  v42 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a3 + 40) = v42;
  *(_OWORD *)(a3 + 24) = v41;
  *(_OWORD *)(a3 + 8) = v40;
  v43 = *(_OWORD *)(a4 + 72);
  v44 = *(_OWORD *)(a4 + 88);
  v45 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a4 + 120);
  *(_OWORD *)(a3 + 104) = v45;
  *(_OWORD *)(a3 + 88) = v44;
  *(_OWORD *)(a3 + 72) = v43;
  v46 = *(_OWORD *)(a4 + 136);
  v47 = *(_OWORD *)(a4 + 152);
  v48 = *(_OWORD *)(a4 + 168);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
  *(_OWORD *)(a3 + 168) = v48;
  *(_OWORD *)(a3 + 152) = v47;
  *(_OWORD *)(a3 + 136) = v46;
  *(_QWORD *)a4 = v39;
  *(_OWORD *)(a4 + 136) = v118;
  *(_OWORD *)(a4 + 152) = v122;
  *(_OWORD *)(a4 + 168) = v126;
  *(_QWORD *)(a4 + 184) = v130;
  *(_OWORD *)(a4 + 72) = v102;
  *(_OWORD *)(a4 + 88) = v106;
  *(_OWORD *)(a4 + 104) = v110;
  *(_OWORD *)(a4 + 120) = v114;
  *(_OWORD *)(a4 + 8) = v86;
  *(_OWORD *)(a4 + 24) = v90;
  *(_OWORD *)(a4 + 40) = v94;
  *(_OWORD *)(a4 + 56) = v98;
  v49 = *(_QWORD *)(a3 + 40);
  v50 = *(_QWORD *)(a2 + 40);
  if (v49 == v50)
  {
    v51 = *(_QWORD *)(a3 + 48);
    v52 = *(_QWORD *)(a2 + 48);
    v53 = v51 < v52;
    if (v51 == v52
      && (v54 = *(_QWORD *)(a3 + 56), v55 = *(_QWORD *)(a2 + 56), v53 = v54 < v55, v54 == v55)
      && (v56 = *(_QWORD *)(a3 + 72), v57 = *(_QWORD *)(a2 + 72), v53 = v56 < v57, v56 == v57))
    {
      if (*(_QWORD *)(a3 + 64) < *(_QWORD *)(a2 + 64))
        goto LABEL_43;
    }
    else if (v53)
    {
      goto LABEL_43;
    }
    if (*(_QWORD *)(a3 + 64) != *(_QWORD *)(a2 + 64))
      return result;
    if (*(_QWORD *)(a3 + 56) != *(_QWORD *)(a2 + 56))
      return result;
    if (v51 != v52)
      return result;
    if (*(_QWORD *)(a3 + 72) != *(_QWORD *)(a2 + 72))
      return result;
    result = sub_2233F3E20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v49 >= v50)
  {
    return result;
  }
LABEL_43:
  v58 = *(_QWORD *)a2;
  v119 = *(_OWORD *)(a2 + 136);
  v123 = *(_OWORD *)(a2 + 152);
  v127 = *(_OWORD *)(a2 + 168);
  v131 = *(_QWORD *)(a2 + 184);
  v103 = *(_OWORD *)(a2 + 72);
  v107 = *(_OWORD *)(a2 + 88);
  v111 = *(_OWORD *)(a2 + 104);
  v115 = *(_OWORD *)(a2 + 120);
  v87 = *(_OWORD *)(a2 + 8);
  v91 = *(_OWORD *)(a2 + 24);
  v95 = *(_OWORD *)(a2 + 40);
  v99 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v59 = *(_OWORD *)(a3 + 8);
  v60 = *(_OWORD *)(a3 + 24);
  v61 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v61;
  *(_OWORD *)(a2 + 24) = v60;
  *(_OWORD *)(a2 + 8) = v59;
  v62 = *(_OWORD *)(a3 + 72);
  v63 = *(_OWORD *)(a3 + 88);
  v64 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v64;
  *(_OWORD *)(a2 + 88) = v63;
  *(_OWORD *)(a2 + 72) = v62;
  v65 = *(_OWORD *)(a3 + 136);
  v66 = *(_OWORD *)(a3 + 152);
  v67 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v67;
  *(_OWORD *)(a2 + 152) = v66;
  *(_OWORD *)(a2 + 136) = v65;
  *(_QWORD *)a3 = v58;
  *(_OWORD *)(a3 + 136) = v119;
  *(_OWORD *)(a3 + 152) = v123;
  *(_OWORD *)(a3 + 168) = v127;
  *(_QWORD *)(a3 + 184) = v131;
  *(_OWORD *)(a3 + 72) = v103;
  *(_OWORD *)(a3 + 88) = v107;
  *(_OWORD *)(a3 + 104) = v111;
  *(_OWORD *)(a3 + 120) = v115;
  *(_OWORD *)(a3 + 8) = v87;
  *(_OWORD *)(a3 + 24) = v91;
  *(_OWORD *)(a3 + 40) = v95;
  *(_OWORD *)(a3 + 56) = v99;
  v68 = *(_QWORD *)(a2 + 40);
  v69 = *(_QWORD *)(a1 + 40);
  if (v68 != v69)
  {
    if (v68 >= v69)
      return result;
    goto LABEL_55;
  }
  v70 = *(_QWORD *)(a2 + 48);
  v71 = *(_QWORD *)(a1 + 48);
  v72 = v70 < v71;
  if (v70 == v71)
  {
    v73 = *(_QWORD *)(a2 + 56);
    v74 = *(_QWORD *)(a1 + 56);
    v72 = v73 < v74;
    if (v73 == v74)
      v72 = *(_OWORD *)(a2 + 64) < *(_OWORD *)(a1 + 64);
  }
  if (v72
    || *(_QWORD *)(a2 + 64) == *(_QWORD *)(a1 + 64)
    && *(_QWORD *)(a2 + 56) == *(_QWORD *)(a1 + 56)
    && v70 == v71
    && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a1 + 72)
    && (result = sub_2233F3E20(a2, a1), (_DWORD)result))
  {
LABEL_55:
    v75 = *(_QWORD *)a1;
    v120 = *(_OWORD *)(a1 + 136);
    v124 = *(_OWORD *)(a1 + 152);
    v128 = *(_OWORD *)(a1 + 168);
    v132 = *(_QWORD *)(a1 + 184);
    v104 = *(_OWORD *)(a1 + 72);
    v108 = *(_OWORD *)(a1 + 88);
    v112 = *(_OWORD *)(a1 + 104);
    v116 = *(_OWORD *)(a1 + 120);
    v88 = *(_OWORD *)(a1 + 8);
    v92 = *(_OWORD *)(a1 + 24);
    v96 = *(_OWORD *)(a1 + 40);
    v100 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v76 = *(_OWORD *)(a2 + 8);
    v77 = *(_OWORD *)(a2 + 24);
    v78 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v78;
    *(_OWORD *)(a1 + 24) = v77;
    *(_OWORD *)(a1 + 8) = v76;
    v79 = *(_OWORD *)(a2 + 72);
    v80 = *(_OWORD *)(a2 + 88);
    v81 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v81;
    *(_OWORD *)(a1 + 88) = v80;
    *(_OWORD *)(a1 + 72) = v79;
    v82 = *(_OWORD *)(a2 + 136);
    v83 = *(_OWORD *)(a2 + 152);
    v84 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v84;
    *(_OWORD *)(a1 + 152) = v83;
    *(_OWORD *)(a1 + 136) = v82;
    *(_QWORD *)a2 = v75;
    *(_OWORD *)(a2 + 136) = v120;
    *(_OWORD *)(a2 + 152) = v124;
    *(_OWORD *)(a2 + 168) = v128;
    *(_QWORD *)(a2 + 184) = v132;
    *(_OWORD *)(a2 + 72) = v104;
    *(_OWORD *)(a2 + 88) = v108;
    *(_OWORD *)(a2 + 104) = v112;
    *(_OWORD *)(a2 + 120) = v116;
    *(_OWORD *)(a2 + 8) = v88;
    *(_OWORD *)(a2 + 24) = v92;
    *(_OWORD *)(a2 + 40) = v96;
    *(_OWORD *)(a2 + 56) = v100;
  }
  return result;
}

uint64_t sub_2233F4CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 192;
    if (a2 - a1 >= 193)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 192 * v10;
      do
      {
        sub_2233F511C(a1, a4, v9, v12);
        v12 -= 192;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (__int128 *)(a1 + 8);
      v15 = a2;
      while (1)
      {
        v26 = *(_QWORD *)(v15 + 40);
        v27 = *(_QWORD *)(a1 + 40);
        if (v26 == v27)
        {
          v28 = *(_QWORD *)(v15 + 48);
          v29 = *(_QWORD *)(a1 + 48);
          v30 = v28 < v29;
          if (v28 == v29)
          {
            v31 = *(_QWORD *)(v15 + 56);
            v32 = *(_QWORD *)(a1 + 56);
            v30 = v31 < v32;
            if (v31 == v32)
              v30 = *(_OWORD *)(v15 + 64) < *(_OWORD *)(a1 + 64);
          }
          if (!v30
            && (*(_QWORD *)(v15 + 64) != *(_QWORD *)(a1 + 64)
             || *(_QWORD *)(v15 + 56) != *(_QWORD *)(a1 + 56)
             || v28 != v29
             || *(_QWORD *)(v15 + 72) != *(_QWORD *)(a1 + 72)
             || !sub_2233F3E20(v15, a1)))
          {
            goto LABEL_8;
          }
        }
        else if (v26 >= v27)
        {
          goto LABEL_8;
        }
        v16 = *(_QWORD *)v15;
        v63 = *(_OWORD *)(v15 + 136);
        v65 = *(_OWORD *)(v15 + 152);
        v67 = *(_OWORD *)(v15 + 168);
        v69 = *(_QWORD *)(v15 + 184);
        v55 = *(_OWORD *)(v15 + 72);
        v57 = *(_OWORD *)(v15 + 88);
        v59 = *(_OWORD *)(v15 + 104);
        v61 = *(_OWORD *)(v15 + 120);
        v47 = *(_OWORD *)(v15 + 8);
        v49 = *(_OWORD *)(v15 + 24);
        v51 = *(_OWORD *)(v15 + 40);
        v53 = *(_OWORD *)(v15 + 56);
        *(_QWORD *)v15 = *(_QWORD *)a1;
        v17 = *v14;
        v18 = *(_OWORD *)(a1 + 24);
        v19 = *(_OWORD *)(a1 + 40);
        *(_OWORD *)(v15 + 56) = *(_OWORD *)(a1 + 56);
        *(_OWORD *)(v15 + 40) = v19;
        *(_OWORD *)(v15 + 24) = v18;
        *(_OWORD *)(v15 + 8) = v17;
        v20 = *(_OWORD *)(a1 + 72);
        v21 = *(_OWORD *)(a1 + 88);
        v22 = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(v15 + 120) = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(v15 + 104) = v22;
        *(_OWORD *)(v15 + 88) = v21;
        *(_OWORD *)(v15 + 72) = v20;
        v23 = *(_OWORD *)(a1 + 136);
        v24 = *(_OWORD *)(a1 + 152);
        v25 = *(_OWORD *)(a1 + 168);
        *(_QWORD *)(v15 + 184) = *(_QWORD *)(a1 + 184);
        *(_OWORD *)(v15 + 168) = v25;
        *(_OWORD *)(v15 + 152) = v24;
        *(_OWORD *)(v15 + 136) = v23;
        *(_QWORD *)a1 = v16;
        *(_OWORD *)(a1 + 136) = v63;
        *(_OWORD *)(a1 + 152) = v65;
        *(_OWORD *)(a1 + 168) = v67;
        *(_QWORD *)(a1 + 184) = v69;
        *(_OWORD *)(a1 + 72) = v55;
        *(_OWORD *)(a1 + 88) = v57;
        *(_OWORD *)(a1 + 104) = v59;
        *(_OWORD *)(a1 + 120) = v61;
        *v14 = v47;
        *(_OWORD *)(a1 + 24) = v49;
        *(_OWORD *)(a1 + 40) = v51;
        *(_OWORD *)(a1 + 56) = v53;
        sub_2233F511C(a1, a4, v9, a1);
LABEL_8:
        v15 += 192;
        if (v15 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 193)
    {
      v33 = v8 / 0xC0uLL;
      v34 = a2 - 192;
      do
      {
        while (1)
        {
          v35 = *(_QWORD *)a1;
          v64 = *(_OWORD *)(a1 + 136);
          v66 = *(_OWORD *)(a1 + 152);
          v68 = *(_OWORD *)(a1 + 168);
          v70 = *(_QWORD *)(a1 + 184);
          v56 = *(_OWORD *)(a1 + 72);
          v58 = *(_OWORD *)(a1 + 88);
          v60 = *(_OWORD *)(a1 + 104);
          v62 = *(_OWORD *)(a1 + 120);
          v48 = *(_OWORD *)(a1 + 8);
          v50 = *(_OWORD *)(a1 + 24);
          v52 = *(_OWORD *)(a1 + 40);
          v54 = *(_OWORD *)(a1 + 56);
          v36 = sub_2233F5670(a1, a4, v33);
          if (v34 != v36)
            break;
          *(_OWORD *)(v36 + 136) = v64;
          *(_OWORD *)(v36 + 152) = v66;
          *(_OWORD *)(v36 + 168) = v68;
          *(_OWORD *)(v36 + 72) = v56;
          *(_OWORD *)(v36 + 88) = v58;
          *(_OWORD *)(v36 + 104) = v60;
          *(_OWORD *)(v36 + 120) = v62;
          *(_OWORD *)(v36 + 8) = v48;
          *(_OWORD *)(v36 + 24) = v50;
          *(_OWORD *)(v36 + 40) = v52;
          *(_QWORD *)v36 = v35;
          *(_QWORD *)(v36 + 184) = v70;
          *(_OWORD *)(v36 + 56) = v54;
          v34 -= 192;
          v30 = v33-- <= 2;
          if (v30)
            return v13;
        }
        *(_QWORD *)v36 = *(_QWORD *)v34;
        v37 = *(_OWORD *)(v34 + 8);
        v38 = *(_OWORD *)(v34 + 24);
        v39 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v36 + 56) = *(_OWORD *)(v34 + 56);
        *(_OWORD *)(v36 + 40) = v39;
        *(_OWORD *)(v36 + 24) = v38;
        *(_OWORD *)(v36 + 8) = v37;
        v40 = *(_OWORD *)(v34 + 72);
        v41 = *(_OWORD *)(v34 + 88);
        v42 = *(_OWORD *)(v34 + 104);
        *(_OWORD *)(v36 + 120) = *(_OWORD *)(v34 + 120);
        *(_OWORD *)(v36 + 104) = v42;
        *(_OWORD *)(v36 + 88) = v41;
        *(_OWORD *)(v36 + 72) = v40;
        v43 = *(_OWORD *)(v34 + 136);
        v44 = *(_OWORD *)(v34 + 152);
        v45 = *(_OWORD *)(v34 + 168);
        *(_QWORD *)(v36 + 184) = *(_QWORD *)(v34 + 184);
        *(_OWORD *)(v36 + 168) = v45;
        *(_OWORD *)(v36 + 152) = v44;
        *(_OWORD *)(v36 + 136) = v43;
        *(_QWORD *)v34 = v35;
        *(_OWORD *)(v34 + 136) = v64;
        *(_OWORD *)(v34 + 152) = v66;
        *(_OWORD *)(v34 + 168) = v68;
        *(_QWORD *)(v34 + 184) = v70;
        *(_OWORD *)(v34 + 72) = v56;
        *(_OWORD *)(v34 + 88) = v58;
        *(_OWORD *)(v34 + 104) = v60;
        *(_OWORD *)(v34 + 120) = v62;
        *(_OWORD *)(v34 + 8) = v48;
        *(_OWORD *)(v34 + 24) = v50;
        *(_OWORD *)(v34 + 40) = v52;
        *(_OWORD *)(v34 + 56) = v54;
        sub_2233F582C(a1, v36 + 192, a4, 0xAAAAAAAAAAAAAAABLL * ((v36 + 192 - a1) >> 6));
        v34 -= 192;
        v30 = v33-- <= 2;
      }
      while (!v30);
    }
    return v13;
  }
  return a3;
}

__n128 sub_2233F511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  __n128 result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __n128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v6 = a3 - 2;
  if (a3 < 2)
    return result;
  v100 = v4;
  v101 = v5;
  v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 6)))
    return result;
  v11 = (0x5555555555555556 * ((a4 - a1) >> 6)) | 1;
  v12 = a1 + 192 * v11;
  v13 = 0x5555555555555556 * ((a4 - a1) >> 6) + 2;
  if (v13 >= a3)
    goto LABEL_20;
  v14 = *(_QWORD *)(a1 + 192 * v11 + 40);
  v15 = *(_QWORD *)(v12 + 232);
  if (v14 == v15)
  {
    v16 = *(_QWORD *)(a1 + 192 * v11 + 48);
    v17 = *(_QWORD *)(v12 + 240);
    v18 = v16 < v17;
    if (v16 == v17)
    {
      v19 = *(_QWORD *)(a1 + 192 * v11 + 56);
      v20 = *(_QWORD *)(v12 + 248);
      v18 = v19 < v20;
      if (v19 == v20)
        v18 = *(_OWORD *)(a1 + 192 * v11 + 64) < *(_OWORD *)(v12 + 256);
    }
    if (!v18)
    {
      if (*(_QWORD *)(a1 + 192 * v11 + 64) != *(_QWORD *)(v12 + 256)
        || *(_QWORD *)(a1 + 192 * v11 + 56) != *(_QWORD *)(v12 + 248))
      {
        goto LABEL_20;
      }
      if (v16 != v17 || *(_QWORD *)(a1 + 192 * v11 + 72) != *(_QWORD *)(v12 + 264))
        goto LABEL_20;
      v22 = v9;
      v23 = sub_2233F3E20(a1 + 192 * v11, v12 + 192);
      v9 = v22;
      if (!v23)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 192;
    v11 = v13;
  }
LABEL_20:
  v25 = *(_QWORD *)(v12 + 40);
  v26 = *(_QWORD *)(a4 + 40);
  if (v25 == v26)
  {
    v27 = *(_QWORD *)(v12 + 48);
    v28 = *(_QWORD *)(a4 + 48);
    v29 = v27 < v28;
    if (v27 == v28)
    {
      v30 = *(_QWORD *)(v12 + 56);
      v31 = *(_QWORD *)(a4 + 56);
      v29 = v30 < v31;
      if (v30 == v31)
        v29 = *(_OWORD *)(v12 + 64) < *(_OWORD *)(a4 + 64);
    }
    if (v29)
      return result;
    if (*(_QWORD *)(v12 + 64) == *(_QWORD *)(a4 + 64)
      && *(_QWORD *)(v12 + 56) == *(_QWORD *)(a4 + 56)
      && v27 == v28
      && *(_QWORD *)(v12 + 72) == *(_QWORD *)(a4 + 72))
    {
      v33 = v9;
      v34 = sub_2233F3E20(v12, a4);
      v9 = v33;
      if ((v34 & 1) != 0)
        return result;
    }
  }
  else if (v25 < v26)
  {
    return result;
  }
  v35 = *(_QWORD *)a4;
  v87 = *(_QWORD *)a4;
  v96 = *(__n128 *)(a4 + 136);
  v97 = *(_OWORD *)(a4 + 152);
  v98 = *(_OWORD *)(a4 + 168);
  v99 = *(_QWORD *)(a4 + 184);
  v36 = *(_OWORD *)(a4 + 88);
  v92 = *(_OWORD *)(a4 + 72);
  v93 = v36;
  v37 = *(_OWORD *)(a4 + 120);
  v94 = *(_OWORD *)(a4 + 104);
  v95 = v37;
  v38 = *(_OWORD *)(a4 + 24);
  v88 = *(_OWORD *)(a4 + 8);
  v89 = v38;
  v39 = *(_OWORD *)(a4 + 56);
  v90 = *(_OWORD *)(a4 + 40);
  v91 = v39;
  *(_QWORD *)a4 = *(_QWORD *)v12;
  v40 = v12 + 8;
  v41 = *(_OWORD *)(v12 + 8);
  v42 = *(_OWORD *)(v12 + 24);
  v43 = *(_OWORD *)(v12 + 40);
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(a4 + 40) = v43;
  *(_OWORD *)(a4 + 24) = v42;
  *(_OWORD *)(a4 + 8) = v41;
  v44 = *(_OWORD *)(v12 + 72);
  v45 = *(_OWORD *)(v12 + 88);
  v46 = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(v12 + 120);
  *(_OWORD *)(a4 + 104) = v46;
  *(_OWORD *)(a4 + 88) = v45;
  *(_OWORD *)(a4 + 72) = v44;
  v47 = *(_OWORD *)(v12 + 136);
  v48 = *(_OWORD *)(v12 + 152);
  v49 = *(_OWORD *)(v12 + 168);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(v12 + 184);
  *(_OWORD *)(a4 + 168) = v49;
  *(_OWORD *)(a4 + 152) = v48;
  *(_OWORD *)(a4 + 136) = v47;
  if (v9 < v11)
    goto LABEL_70;
  while (1)
  {
    v59 = v12;
    v60 = 2 * v11;
    v11 = (2 * v11) | 1;
    v12 = a1 + 192 * v11;
    v61 = v60 + 2;
    if (v60 + 2 >= a3)
      goto LABEL_56;
    v62 = *(_QWORD *)(a1 + 192 * v11 + 40);
    v63 = *(_QWORD *)(v12 + 232);
    if (v62 != v63)
    {
      if (v62 >= v63)
        goto LABEL_56;
LABEL_55:
      v12 += 192;
      v11 = v61;
      goto LABEL_56;
    }
    v64 = *(_QWORD *)(a1 + 192 * v11 + 48);
    v65 = *(_QWORD *)(v12 + 240);
    v66 = v64 < v65;
    if (v64 == v65)
    {
      v67 = *(_QWORD *)(a1 + 192 * v11 + 56);
      v68 = *(_QWORD *)(v12 + 248);
      v66 = v67 < v68;
      if (v67 == v68)
        v66 = *(_OWORD *)(a1 + 192 * v11 + 64) < *(_OWORD *)(v12 + 256);
    }
    if (v66)
      goto LABEL_55;
    if (*(_QWORD *)(a1 + 192 * v11 + 64) == *(_QWORD *)(v12 + 256)
      && *(_QWORD *)(a1 + 192 * v11 + 56) == *(_QWORD *)(v12 + 248)
      && v64 == v65
      && *(_QWORD *)(a1 + 192 * v11 + 72) == *(_QWORD *)(v12 + 264))
    {
      v86 = v9;
      v70 = sub_2233F3E20(a1 + 192 * v11, v12 + 192);
      v9 = v86;
      if (v70)
        goto LABEL_55;
    }
LABEL_56:
    v71 = *(_QWORD *)(v12 + 40);
    if (v71 == (_QWORD)v90)
      break;
    if (v71 < (uint64_t)v90)
      goto LABEL_68;
LABEL_38:
    *(_QWORD *)v59 = *(_QWORD *)v12;
    v40 = v12 + 8;
    v50 = *(_OWORD *)(v12 + 8);
    v51 = *(_OWORD *)(v12 + 24);
    v52 = *(_OWORD *)(v12 + 40);
    *(_OWORD *)(v59 + 56) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)(v59 + 40) = v52;
    *(_OWORD *)(v59 + 24) = v51;
    *(_OWORD *)(v59 + 8) = v50;
    v53 = *(_OWORD *)(v12 + 72);
    v54 = *(_OWORD *)(v12 + 88);
    v55 = *(_OWORD *)(v12 + 104);
    *(_OWORD *)(v59 + 120) = *(_OWORD *)(v12 + 120);
    *(_OWORD *)(v59 + 104) = v55;
    *(_OWORD *)(v59 + 88) = v54;
    *(_OWORD *)(v59 + 72) = v53;
    v56 = *(_OWORD *)(v12 + 136);
    v57 = *(_OWORD *)(v12 + 152);
    v58 = *(_OWORD *)(v12 + 168);
    *(_QWORD *)(v59 + 184) = *(_QWORD *)(v12 + 184);
    *(_OWORD *)(v59 + 168) = v58;
    *(_OWORD *)(v59 + 152) = v57;
    *(_OWORD *)(v59 + 136) = v56;
    if (v9 < v11)
      goto LABEL_69;
  }
  v72 = *(_QWORD *)(v12 + 48);
  v73 = v72 < *((_QWORD *)&v90 + 1);
  if (v72 == *((_QWORD *)&v90 + 1))
  {
    v74 = *(_QWORD *)(v12 + 56);
    v73 = v74 < (uint64_t)v91;
    if (v74 == (_QWORD)v91)
      v73 = *(_OWORD *)(v12 + 64) < (__int128)__PAIR128__(v92, *((unint64_t *)&v91 + 1));
  }
  if (!v73)
  {
    if (*(_OWORD *)(v12 + 56) != v91)
      goto LABEL_38;
    if (v72 != *((_QWORD *)&v90 + 1) || *(_QWORD *)(v12 + 72) != (_QWORD)v92)
      goto LABEL_38;
    v76 = v9;
    v77 = sub_2233F3E20(v12, (uint64_t)&v87);
    v9 = v76;
    if ((v77 & 1) == 0)
      goto LABEL_38;
  }
LABEL_68:
  v12 = v59;
LABEL_69:
  v35 = v87;
LABEL_70:
  *(_QWORD *)v12 = v35;
  v78 = v88;
  v79 = v89;
  v80 = v91;
  *(_OWORD *)(v40 + 32) = v90;
  *(_OWORD *)(v40 + 48) = v80;
  *(_OWORD *)v40 = v78;
  *(_OWORD *)(v40 + 16) = v79;
  v81 = v92;
  v82 = v93;
  v83 = v95;
  *(_OWORD *)(v40 + 96) = v94;
  *(_OWORD *)(v40 + 112) = v83;
  *(_OWORD *)(v40 + 64) = v81;
  *(_OWORD *)(v40 + 80) = v82;
  result = v96;
  v84 = v97;
  v85 = v98;
  *(_QWORD *)(v40 + 176) = v99;
  *(_OWORD *)(v40 + 144) = v84;
  *(_OWORD *)(v40 + 160) = v85;
  *(__n128 *)(v40 + 128) = result;
  return result;
}

uint64_t sub_2233F5670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v17 = a1;
    v18 = v5 + 1;
    a1 += 192 * (v5 + 1);
    v19 = 2 * v5;
    v5 = (2 * v5) | 1;
    v20 = v19 + 2;
    if (v19 + 2 < a3)
    {
      v21 = *(_QWORD *)(v17 + 192 * v18 + 40);
      v22 = *(_QWORD *)(a1 + 232);
      if (v21 == v22)
      {
        v23 = *(_QWORD *)(v17 + 192 * v18 + 48);
        v24 = *(_QWORD *)(a1 + 240);
        v25 = v23 < v24;
        if (v23 == v24)
        {
          v26 = *(_QWORD *)(v17 + 192 * v18 + 56);
          v27 = *(_QWORD *)(a1 + 248);
          v25 = v26 < v27;
          if (v26 == v27)
            v25 = *(_OWORD *)(v17 + 192 * v18 + 64) < *(_OWORD *)(a1 + 256);
        }
        if (v25
          || *(_QWORD *)(v17 + 192 * v18 + 64) == *(_QWORD *)(a1 + 256)
          && *(_QWORD *)(v17 + 192 * v18 + 56) == *(_QWORD *)(a1 + 248)
          && ((v28 = *(_QWORD *)(v17 + 192 * v18 + 72), v23 == v24) ? (v29 = v28 == *(_QWORD *)(a1 + 264)) : (v29 = 0),
              v29 && sub_2233F3E20(a1, a1 + 192)))
        {
LABEL_4:
          a1 += 192;
          v5 = v20;
        }
      }
      else if (v21 < v22)
      {
        goto LABEL_4;
      }
    }
    *(_QWORD *)v17 = *(_QWORD *)a1;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a1 + 24);
    v10 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(v17 + 40) = v10;
    *(_OWORD *)(v17 + 24) = v9;
    *(_OWORD *)(v17 + 8) = v8;
    v11 = *(_OWORD *)(a1 + 72);
    v12 = *(_OWORD *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v17 + 104) = v13;
    *(_OWORD *)(v17 + 88) = v12;
    *(_OWORD *)(v17 + 72) = v11;
    v14 = *(_OWORD *)(a1 + 136);
    v15 = *(_OWORD *)(a1 + 152);
    v16 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(v17 + 184) = *(_QWORD *)(a1 + 184);
    *(_OWORD *)(v17 + 168) = v16;
    *(_OWORD *)(v17 + 152) = v15;
    *(_OWORD *)(v17 + 136) = v14;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_2233F582C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v7 = v4 >> 1;
  v8 = (_QWORD *)(a1 + 192 * (v4 >> 1));
  v9 = v8[5];
  v10 = *(_QWORD *)(a2 - 152);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a1 + 192 * v7 + 48);
    v12 = *(_QWORD *)(a2 - 144);
    v13 = v11 < v12;
    if (v11 == v12)
    {
      v14 = *(_QWORD *)(a1 + 192 * v7 + 56);
      v15 = *(_QWORD *)(a2 - 136);
      v13 = v14 < v15;
      if (v14 == v15)
        v13 = *(_OWORD *)(a1 + 192 * v7 + 64) < *(_OWORD *)(a2 - 128);
    }
    if (!v13)
    {
      if (*(_QWORD *)(a1 + 192 * v7 + 64) != *(_QWORD *)(a2 - 128)
        || *(_QWORD *)(a1 + 192 * v7 + 56) != *(_QWORD *)(a2 - 136))
      {
        return result;
      }
      v16 = v11 == v12 && *(_QWORD *)(a1 + 192 * v7 + 72) == *(_QWORD *)(a2 - 120);
      if (!v16 || !sub_2233F3E20(a1 + 192 * (v4 >> 1), a2 - 192))
        return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v18 = *(_QWORD *)(a2 - 192);
  v55 = v18;
  v64 = *(__n128 *)(a2 - 56);
  v65 = *(_OWORD *)(a2 - 40);
  v66 = *(_OWORD *)(a2 - 24);
  v67 = *(_QWORD *)(a2 - 8);
  v60 = *(_OWORD *)(a2 - 120);
  v61 = *(_OWORD *)(a2 - 104);
  v62 = *(_OWORD *)(a2 - 88);
  v63 = *(_OWORD *)(a2 - 72);
  v56 = *(_OWORD *)(a2 - 184);
  v57 = *(_OWORD *)(a2 - 168);
  v58 = *(_OWORD *)(a2 - 152);
  v59 = *(_OWORD *)(a2 - 136);
  *(_QWORD *)(a2 - 192) = *v8;
  v19 = a1 + 192 * v7;
  v20 = v19 + 8;
  v21 = *(_OWORD *)(v19 + 8);
  v22 = *(_OWORD *)(v19 + 24);
  v23 = *(_OWORD *)(v19 + 40);
  *(_OWORD *)(a2 - 136) = *(_OWORD *)(v19 + 56);
  *(_OWORD *)(a2 - 152) = v23;
  *(_OWORD *)(a2 - 168) = v22;
  *(_OWORD *)(a2 - 184) = v21;
  v24 = *(_OWORD *)(v19 + 72);
  v25 = *(_OWORD *)(v19 + 88);
  v26 = *(_OWORD *)(v19 + 104);
  *(_OWORD *)(a2 - 72) = *(_OWORD *)(v19 + 120);
  *(_OWORD *)(a2 - 88) = v26;
  *(_OWORD *)(a2 - 104) = v25;
  *(_OWORD *)(a2 - 120) = v24;
  v27 = *(_OWORD *)(v19 + 136);
  v28 = *(_OWORD *)(v19 + 152);
  v29 = *(_OWORD *)(v19 + 168);
  *(_QWORD *)(a2 - 8) = *(_QWORD *)(v19 + 184);
  *(_OWORD *)(a2 - 24) = v29;
  *(_OWORD *)(a2 - 40) = v28;
  *(_OWORD *)(a2 - 56) = v27;
  if (v4 < 2)
    goto LABEL_35;
  while (1)
  {
    v40 = v8;
    v41 = v7 - 1;
    v7 = (v7 - 1) >> 1;
    v8 = (_QWORD *)(a1 + 192 * v7);
    v42 = v8[5];
    if (v42 == (_QWORD)v58)
      break;
    if (v42 >= (uint64_t)v58)
      goto LABEL_33;
LABEL_20:
    *v40 = *v8;
    v30 = a1 + 192 * v7;
    v20 = v30 + 8;
    v31 = *(_OWORD *)(v30 + 24);
    v32 = *(_OWORD *)(v30 + 40);
    v33 = *(_OWORD *)(v30 + 56);
    *(_OWORD *)(v40 + 1) = *(_OWORD *)(v30 + 8);
    *(_OWORD *)(v40 + 7) = v33;
    *(_OWORD *)(v40 + 5) = v32;
    *(_OWORD *)(v40 + 3) = v31;
    v34 = *(_OWORD *)(v30 + 88);
    v35 = *(_OWORD *)(v30 + 104);
    v36 = *(_OWORD *)(v30 + 120);
    *(_OWORD *)(v40 + 9) = *(_OWORD *)(v30 + 72);
    *(_OWORD *)(v40 + 15) = v36;
    *(_OWORD *)(v40 + 13) = v35;
    *(_OWORD *)(v40 + 11) = v34;
    v37 = *(_OWORD *)(v30 + 152);
    v38 = *(_OWORD *)(v30 + 168);
    v39 = *(_QWORD *)(v30 + 184);
    *(_OWORD *)(v40 + 17) = *(_OWORD *)(v30 + 136);
    v40[23] = v39;
    *(_OWORD *)(v40 + 21) = v38;
    *(_OWORD *)(v40 + 19) = v37;
    if (v41 <= 1)
      goto LABEL_34;
  }
  v43 = *(_QWORD *)(a1 + 192 * v7 + 48);
  v44 = v43 < *((_QWORD *)&v58 + 1);
  if (v43 == *((_QWORD *)&v58 + 1))
  {
    v45 = *(_QWORD *)(a1 + 192 * v7 + 56);
    v44 = v45 < (uint64_t)v59;
    if (v45 == (_QWORD)v59)
      v44 = *(_OWORD *)(a1 + 192 * v7 + 64) < (__int128)__PAIR128__(v60, *((unint64_t *)&v59 + 1));
  }
  if (v44)
    goto LABEL_20;
  if (*(_OWORD *)(a1 + 192 * v7 + 56) == v59)
  {
    v46 = v43 == *((_QWORD *)&v58 + 1) && *(_QWORD *)(a1 + 192 * v7 + 72) == (_QWORD)v60;
    if (v46 && sub_2233F3E20(a1 + 192 * v7, (uint64_t)&v55))
      goto LABEL_20;
  }
LABEL_33:
  v8 = v40;
LABEL_34:
  v18 = v55;
LABEL_35:
  *v8 = v18;
  v47 = v56;
  v48 = v57;
  v49 = v59;
  *(_OWORD *)(v20 + 32) = v58;
  *(_OWORD *)(v20 + 48) = v49;
  *(_OWORD *)v20 = v47;
  *(_OWORD *)(v20 + 16) = v48;
  v50 = v60;
  v51 = v61;
  v52 = v63;
  *(_OWORD *)(v20 + 96) = v62;
  *(_OWORD *)(v20 + 112) = v52;
  *(_OWORD *)(v20 + 64) = v50;
  *(_OWORD *)(v20 + 80) = v51;
  result = v64;
  v53 = v65;
  v54 = v66;
  *(_QWORD *)(v20 + 176) = v67;
  *(_OWORD *)(v20 + 144) = v53;
  *(_OWORD *)(v20 + 160) = v54;
  *(__n128 *)(v20 + 128) = result;
  return result;
}

uint64_t sub_2233F5BD4(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float **v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  char v20;

  if (*(_DWORD *)(result + 40) != 7)
  {
    v1 = result;
    v2 = **(float ***)result;
    if (v2 != *(float **)(*(_QWORD *)result + 8))
    {
      v3 = *(float ***)(result + 8);
      v5 = *v3;
      v4 = v3[1];
      v6 = (char *)v4 - (char *)*v3;
      if ((unint64_t)v6 < 0x18)
        goto LABEL_32;
      v7 = v6 >> 3;
      v8 = v4 == v5 ? 0 : v7 + 1;
      v19 = 0;
      v20 = 0;
      v9 = v8 - 1;
      if (v8 >= v7)
      {
        v10 = v4;
        if (v9 <= v7)
          v10 = &v5[2 * (v9 % v7)];
      }
      else
      {
        v10 = v4 - 2;
      }
      if (v8 == 1)
        goto LABEL_32;
      v11 = v4;
      do
      {
        if (v9 + 1 >= v7)
        {
          v12 = v4;
          if (v9 <= v7)
            v12 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v12 = v11 - 2;
        }
        v13 = v9 - 1;
        if (v9 >= v7)
        {
          v14 = v4;
          if (v13 <= v7)
            v14 = &v5[2 * (v13 % v7)];
        }
        else
        {
          v14 = v10 - 2;
        }
        result = sub_2233E62E4(v2, v12, v14, (uint64_t)&v19);
        if (!(_DWORD)result)
          break;
        if (v9 + 1 >= v7)
        {
          v11 = v4;
          if (v9 <= v7)
            v11 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v11 -= 2;
        }
        if (v9 < v7)
        {
          v10 -= 2;
        }
        else
        {
          v10 = v4;
          if (v13 <= v7)
            v10 = &v5[2 * (v13 % v7)];
        }
        --v9;
      }
      while (v13);
      if (v20 || !v19)
      {
LABEL_32:
        v15 = *(_DWORD *)(v1 + 40) | 2;
        *(_DWORD *)(v1 + 40) = v15;
        if (v15 != 7)
        {
LABEL_40:
          v16 = *(_BYTE *)(*(_QWORD *)(v1 + 24) + 9) != 0;
          goto LABEL_41;
        }
      }
      else
      {
        v17 = *(unsigned __int8 **)(v1 + 24);
        if (*v17 - 58 <= 0xFFFFFFF7)
        {
          *v17 = 50;
          v17 = *(unsigned __int8 **)(v1 + 24);
        }
        v18 = *(_DWORD *)(v1 + 40) | 1;
        *(_DWORD *)(v1 + 40) = v18;
        if (v17[3] - 58 <= 0xFFFFFFF6)
        {
          v17[3] = 49;
          v18 = *(_DWORD *)(v1 + 40);
        }
        *(_DWORD *)(v1 + 40) = v18 | 4;
        if ((v18 | 4) != 7)
          goto LABEL_40;
      }
      v16 = 1;
LABEL_41:
      *(_BYTE *)(v1 + 16) = v16;
    }
  }
  return result;
}

uint64_t sub_2233F5DEC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t *v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v7 = result;
LABEL_2:
  v8 = (uint64_t)(a2 - 24);
  v9 = v7;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v7 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v9) >> 6);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 9);
        v44 = *(_QWORD *)(v9 + 120);
        if (v43 == v44)
        {
          v45 = *(a2 - 8);
          v46 = *(_QWORD *)(v9 + 128);
          v47 = v45 < v46;
          if (v45 == v46)
          {
            v48 = *(a2 - 7);
            v49 = *(_QWORD *)(v9 + 136);
            v47 = v48 < v49;
            if (v48 == v49)
              v47 = *((_OWORD *)a2 - 3) < *(_OWORD *)(v9 + 144);
          }
          if (!v47)
          {
            if (*(a2 - 6) != *(_QWORD *)(v9 + 144))
              return result;
            if (*(a2 - 7) != *(_QWORD *)(v9 + 136))
              return result;
            if (v45 != v46)
              return result;
            if (*(a2 - 5) != *(_QWORD *)(v9 + 152))
              return result;
            result = sub_2233F8C20(v8, v9);
            if (!(_DWORD)result)
              return result;
          }
        }
        else if (v43 >= v44)
        {
          return result;
        }
        v50 = *(_QWORD *)v9;
        v84 = *(_QWORD *)(v9 + 184);
        v80 = *(_OWORD *)(v9 + 152);
        v82 = *(_OWORD *)(v9 + 168);
        v78 = *(_OWORD *)(v9 + 136);
        v66 = *(_OWORD *)(v9 + 40);
        v68 = *(_OWORD *)(v9 + 56);
        v62 = *(_OWORD *)(v9 + 8);
        v64 = *(_OWORD *)(v9 + 24);
        v74 = *(_OWORD *)(v9 + 104);
        v76 = *(_OWORD *)(v9 + 120);
        v70 = *(_OWORD *)(v9 + 72);
        v72 = *(_OWORD *)(v9 + 88);
        *(_QWORD *)v9 = *(a2 - 24);
        v51 = *(_OWORD *)(a2 - 23);
        v52 = *(_OWORD *)(a2 - 21);
        v53 = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v9 + 40) = v53;
        *(_OWORD *)(v9 + 24) = v52;
        *(_OWORD *)(v9 + 8) = v51;
        v54 = *(_OWORD *)(a2 - 15);
        v55 = *(_OWORD *)(a2 - 13);
        v56 = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v9 + 104) = v56;
        *(_OWORD *)(v9 + 88) = v55;
        *(_OWORD *)(v9 + 72) = v54;
        v57 = *(_OWORD *)(a2 - 7);
        v58 = *(_OWORD *)(a2 - 5);
        v59 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v9 + 184) = *(a2 - 1);
        *(_OWORD *)(v9 + 168) = v59;
        *(_OWORD *)(v9 + 152) = v58;
        *(_OWORD *)(v9 + 136) = v57;
        *(a2 - 24) = v50;
        *(_OWORD *)(a2 - 7) = v78;
        *(_OWORD *)(a2 - 5) = v80;
        *(_OWORD *)(a2 - 3) = v82;
        *(a2 - 1) = v84;
        *(_OWORD *)(a2 - 15) = v70;
        *(_OWORD *)(a2 - 13) = v72;
        *(_OWORD *)(a2 - 11) = v74;
        *(_OWORD *)(a2 - 9) = v76;
        *(_OWORD *)(a2 - 23) = v62;
        *(_OWORD *)(a2 - 21) = v64;
        *(_OWORD *)(a2 - 19) = v66;
        *(_OWORD *)(a2 - 17) = v68;
        return result;
      case 3uLL:
        return sub_2233F6ACC(v9, v9 + 192, v8);
      case 4uLL:
        return sub_2233F8F10(v9, v9 + 192, v9 + 384, v8);
      case 5uLL:
        return sub_2233F9428(v9, v9 + 192, v9 + 384, v9 + 576, v8);
      default:
        if (v12 <= 4607)
        {
          if ((a5 & 1) != 0)
            return sub_2233F6480(v9, (uint64_t)a2);
          else
            return sub_2233F6818(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 192 * (v13 >> 1));
          if ((unint64_t)v12 <= 0x6000)
          {
            sub_2233F6ACC(v9 + 192 * v14, v9, v8);
            if ((a5 & 1) != 0)
              goto LABEL_23;
          }
          else
          {
            sub_2233F6ACC(v9, v9 + 192 * v14, v8);
            v16 = v8;
            v17 = 192 * v14;
            v18 = v9 + 192 * v14;
            sub_2233F6ACC(v9 + 192, v18 - 192, (uint64_t)(a2 - 48));
            v19 = v9 + 384;
            v20 = v9 + 192 + v17;
            v8 = v16;
            sub_2233F6ACC(v19, v20, (uint64_t)(a2 - 72));
            sub_2233F6ACC(v18 - 192, (uint64_t)v15, v20);
            v21 = *(_QWORD *)v7;
            v83 = *(_QWORD *)(v7 + 184);
            v79 = *(_OWORD *)(v7 + 152);
            v81 = *(_OWORD *)(v7 + 168);
            v77 = *(_OWORD *)(v7 + 136);
            v65 = *(_OWORD *)(v7 + 40);
            v67 = *(_OWORD *)(v7 + 56);
            v61 = *(_OWORD *)(v7 + 8);
            v63 = *(_OWORD *)(v7 + 24);
            v73 = *(_OWORD *)(v7 + 104);
            v75 = *(_OWORD *)(v7 + 120);
            v69 = *(_OWORD *)(v7 + 72);
            v71 = *(_OWORD *)(v7 + 88);
            *(_QWORD *)v7 = *v15;
            v22 = *(_OWORD *)(v18 + 24);
            v23 = *(_OWORD *)(v18 + 40);
            v24 = *(_OWORD *)(v18 + 56);
            *(_OWORD *)(v7 + 8) = *(_OWORD *)(v18 + 8);
            *(_OWORD *)(v7 + 56) = v24;
            *(_OWORD *)(v7 + 40) = v23;
            *(_OWORD *)(v7 + 24) = v22;
            v25 = *(_OWORD *)(v18 + 88);
            v26 = *(_OWORD *)(v18 + 104);
            v27 = *(_OWORD *)(v18 + 120);
            *(_OWORD *)(v7 + 72) = *(_OWORD *)(v18 + 72);
            *(_OWORD *)(v7 + 120) = v27;
            *(_OWORD *)(v7 + 104) = v26;
            *(_OWORD *)(v7 + 88) = v25;
            v28 = *(_OWORD *)(v18 + 152);
            v29 = *(_OWORD *)(v18 + 168);
            v30 = *(_QWORD *)(v18 + 184);
            *(_OWORD *)(v7 + 136) = *(_OWORD *)(v18 + 136);
            *(_QWORD *)(v7 + 184) = v30;
            *(_OWORD *)(v7 + 168) = v29;
            *(_OWORD *)(v7 + 152) = v28;
            *v15 = v21;
            *(_OWORD *)(v18 + 56) = v67;
            *(_OWORD *)(v18 + 40) = v65;
            *(_OWORD *)(v18 + 24) = v63;
            *(_OWORD *)(v18 + 8) = v61;
            *(_OWORD *)(v18 + 120) = v75;
            *(_OWORD *)(v18 + 104) = v73;
            *(_OWORD *)(v18 + 88) = v71;
            *(_OWORD *)(v18 + 72) = v69;
            *(_QWORD *)(v18 + 184) = v83;
            *(_OWORD *)(v18 + 168) = v81;
            *(_OWORD *)(v18 + 152) = v79;
            *(_OWORD *)(v18 + 136) = v77;
            if ((a5 & 1) != 0)
              goto LABEL_23;
          }
          v31 = *(_QWORD *)(v7 - 72);
          v32 = *(_QWORD *)(v7 + 120);
          if (v31 == v32)
          {
            v33 = *(_QWORD *)(v7 - 64);
            v34 = *(_QWORD *)(v7 + 128);
            v35 = v33 < v34;
            if (v33 == v34)
            {
              v36 = *(_QWORD *)(v7 - 56);
              v37 = *(_QWORD *)(v7 + 136);
              v35 = v36 < v37;
              if (v36 == v37)
                v35 = *(_OWORD *)(v7 - 48) < *(_OWORD *)(v7 + 144);
            }
            if (!v35
              && (*(_QWORD *)(v7 - 48) != *(_QWORD *)(v7 + 144)
               || *(_QWORD *)(v7 - 56) != *(_QWORD *)(v7 + 136)
               || v33 != v34
               || *(_QWORD *)(v7 - 40) != *(_QWORD *)(v7 + 152)
               || (sub_2233F8C20(v7 - 192, v7) & 1) == 0))
            {
LABEL_27:
              result = sub_2233F7398((uint64_t *)v7, (unint64_t)a2);
              v9 = result;
              goto LABEL_28;
            }
          }
          else if (v31 >= v32)
          {
            goto LABEL_27;
          }
LABEL_23:
          v39 = sub_2233F7D30((uint64_t *)v7, (unint64_t)a2);
          v40 = (uint64_t *)v38;
          if ((v41 & 1) == 0)
            goto LABEL_26;
          v42 = sub_2233F8638(v7, v38);
          v9 = (uint64_t)(v40 + 24);
          result = sub_2233F8638((uint64_t)(v40 + 24), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v42)
              continue;
LABEL_26:
            result = sub_2233F5DEC(v7, v40, a3, -v11, a5 & 1, v39);
            v9 = (uint64_t)(v40 + 24);
LABEL_28:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v40;
          if (v42)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return sub_2233F9AE0(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

uint64_t sub_2233F6480(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (result != a2)
  {
    v53 = v2;
    v54 = v3;
    v5 = result;
    v6 = result + 192;
    if (result + 192 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = v8;
        v8 = v6;
        v21 = *(_QWORD *)(v10 + 312);
        v22 = *(_QWORD *)(v10 + 120);
        if (v21 == v22)
        {
          v23 = *(_QWORD *)(v10 + 320);
          v24 = *(_QWORD *)(v10 + 128);
          v25 = v23 < v24;
          if (v23 == v24
            && (v26 = *(_QWORD *)(v10 + 328), v27 = *(_QWORD *)(v10 + 136), v25 = v26 < v27, v26 == v27)
            && (v28 = *(_QWORD *)(v10 + 344), v29 = *(_QWORD *)(v10 + 152), v25 = v28 < v29, v28 == v29))
          {
            if (*(_QWORD *)(v10 + 336) >= *(_QWORD *)(v10 + 144))
              goto LABEL_32;
          }
          else if (!v25)
          {
LABEL_32:
            if (*(_QWORD *)(v10 + 336) != *(_QWORD *)(v10 + 144))
              goto LABEL_7;
            if (*(_QWORD *)(v10 + 328) != *(_QWORD *)(v10 + 136))
              goto LABEL_7;
            if (v23 != v24)
              goto LABEL_7;
            if (*(_QWORD *)(v10 + 344) != *(_QWORD *)(v10 + 152))
              goto LABEL_7;
            result = sub_2233F8C20(v8, v10);
            if (!(_DWORD)result)
              goto LABEL_7;
          }
        }
        else if (v21 >= v22)
        {
          goto LABEL_7;
        }
        v11 = *(_QWORD *)(v10 + 192);
        v42 = v11;
        v52 = *(_QWORD *)(v10 + 376);
        v30 = *(_OWORD *)(v10 + 312);
        v49 = *(_OWORD *)(v10 + 296);
        *(_OWORD *)v50 = v30;
        v31 = *(_OWORD *)(v10 + 280);
        v47 = *(_OWORD *)(v10 + 264);
        v48 = v31;
        v32 = *(_OWORD *)(v10 + 360);
        v33 = *(_OWORD *)(v10 + 328);
        *(_OWORD *)&v50[32] = *(_OWORD *)(v10 + 344);
        v51 = v32;
        *(_OWORD *)&v50[16] = v33;
        v34 = *(_OWORD *)(v10 + 216);
        v43 = *(_OWORD *)(v10 + 200);
        v44 = v34;
        v35 = *(_OWORD *)(v10 + 248);
        v45 = *(_OWORD *)(v10 + 232);
        v46 = v35;
        *(_QWORD *)(v10 + 192) = *(_QWORD *)v10;
        v9 = v10 + 8;
        *(_OWORD *)(v8 + 136) = *(_OWORD *)(v10 + 136);
        *(_OWORD *)(v8 + 152) = *(_OWORD *)(v10 + 152);
        *(_OWORD *)(v8 + 168) = *(_OWORD *)(v10 + 168);
        *(_QWORD *)(v8 + 184) = *(_QWORD *)(v10 + 184);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v10 + 72);
        *(_OWORD *)(v8 + 88) = *(_OWORD *)(v10 + 88);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(v10 + 104);
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v10 + 120);
        *(_OWORD *)(v8 + 8) = *(_OWORD *)(v10 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v10 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v10 + 56);
        if (v10 == v5)
        {
          v10 = v5;
          goto LABEL_6;
        }
        v36 = v7;
        while (1)
        {
          v38 = *(_QWORD *)(v5 + v36 - 72);
          if (*(_QWORD *)v50 == v38)
            break;
          if (*(uint64_t *)v50 >= v38)
            goto LABEL_5;
LABEL_21:
          v9 = v10 - 184;
          v10 -= 192;
          v37 = v5 + v36;
          *(_QWORD *)v37 = *(_QWORD *)(v5 + v36 - 192);
          *(_OWORD *)(v37 + 136) = *(_OWORD *)(v5 + v36 - 56);
          *(_OWORD *)(v37 + 152) = *(_OWORD *)(v5 + v36 - 40);
          *(_OWORD *)(v37 + 168) = *(_OWORD *)(v5 + v36 - 24);
          *(_QWORD *)(v37 + 184) = *(_QWORD *)(v5 + v36 - 8);
          *(_OWORD *)(v37 + 72) = *(_OWORD *)(v5 + v36 - 120);
          *(_OWORD *)(v37 + 88) = *(_OWORD *)(v5 + v36 - 104);
          *(_OWORD *)(v37 + 104) = *(_OWORD *)(v5 + v36 - 88);
          *(_OWORD *)(v37 + 120) = *(_OWORD *)(v5 + v36 - 72);
          *(_OWORD *)(v37 + 8) = *(_OWORD *)(v5 + v36 - 184);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v5 + v36 - 168);
          *(_OWORD *)(v37 + 40) = *(_OWORD *)(v5 + v36 - 152);
          *(_OWORD *)(v37 + 56) = *(_OWORD *)(v5 + v36 - 136);
          v36 -= 192;
          if (!v36)
          {
            v9 = v5 + 8;
            v10 = v5;
            goto LABEL_5;
          }
        }
        v39 = *(_QWORD *)(v5 + v36 - 64);
        v40 = *(_QWORD *)&v50[8] < v39;
        if (*(_QWORD *)&v50[8] == v39)
        {
          v41 = *(_QWORD *)(v5 + v36 - 56);
          v40 = *(_QWORD *)&v50[16] < v41;
          if (*(_QWORD *)&v50[16] == v41)
            v40 = *(_OWORD *)&v50[24] < *(_OWORD *)(v5 + v36 - 48);
        }
        if (v40)
          goto LABEL_21;
        if (*(_QWORD *)&v50[24] != *(_QWORD *)(v5 + v36 - 48)
          || *(_OWORD *)&v50[8] != *(_OWORD *)(v5 + v36 - 64)
          || *(_QWORD *)&v50[32] != *(_QWORD *)(v5 + v36 - 40))
        {
          goto LABEL_5;
        }
        result = sub_2233F8C20((uint64_t)&v42, v5 + v36 - 192);
        if ((_DWORD)result)
          goto LABEL_21;
        v10 = v5 + v36;
        v9 = v5 + v36 + 8;
LABEL_5:
        v11 = v42;
LABEL_6:
        *(_QWORD *)v10 = v11;
        v12 = v43;
        v13 = v44;
        v14 = v46;
        *(_OWORD *)(v9 + 32) = v45;
        *(_OWORD *)(v9 + 48) = v14;
        *(_OWORD *)v9 = v12;
        *(_OWORD *)(v9 + 16) = v13;
        v15 = v47;
        v16 = v48;
        v17 = *(_OWORD *)v50;
        *(_OWORD *)(v9 + 96) = v49;
        *(_OWORD *)(v9 + 112) = v17;
        *(_OWORD *)(v9 + 64) = v15;
        *(_OWORD *)(v9 + 80) = v16;
        v18 = *(_OWORD *)&v50[16];
        v19 = *(_OWORD *)&v50[32];
        v20 = v51;
        *(_QWORD *)(v9 + 176) = v52;
        *(_OWORD *)(v9 + 144) = v19;
        *(_OWORD *)(v9 + 160) = v20;
        *(_OWORD *)(v9 + 128) = v18;
LABEL_7:
        v6 = v8 + 192;
        v7 += 192;
      }
      while (v8 + 192 != a2);
    }
  }
  return result;
}

uint64_t sub_2233F6818(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[48];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if ((uint64_t *)result != a2)
  {
    v48 = v2;
    v49 = v3;
    v5 = (uint64_t *)result;
    v6 = (uint64_t *)(result + 192);
    if ((uint64_t *)(result + 192) != a2)
    {
      v7 = result - 192;
      do
      {
        v13 = (uint64_t)v5;
        v5 = v6;
        v14 = *(_QWORD *)(v13 + 312);
        v15 = *(_QWORD *)(v13 + 120);
        if (v14 == v15)
        {
          v16 = *(_QWORD *)(v13 + 320);
          v17 = *(_QWORD *)(v13 + 128);
          v18 = v16 < v17;
          if (v16 == v17)
          {
            v19 = *(_QWORD *)(v13 + 328);
            v20 = *(_QWORD *)(v13 + 136);
            v18 = v19 < v20;
            if (v19 == v20)
              v18 = *(_OWORD *)(v13 + 336) < *(_OWORD *)(v13 + 144);
          }
          if (v18
            || *(_QWORD *)(v13 + 336) == *(_QWORD *)(v13 + 144)
            && *(_QWORD *)(v13 + 328) == *(_QWORD *)(v13 + 136)
            && v16 == v17
            && *(_QWORD *)(v13 + 344) == *(_QWORD *)(v13 + 152)
            && (result = sub_2233F8C20((uint64_t)v5, v13), (_DWORD)result))
          {
LABEL_18:
            v37 = *v5;
            v47 = *(_QWORD *)(v13 + 376);
            v21 = *(_OWORD *)(v13 + 216);
            v38 = *(_OWORD *)(v13 + 200);
            v39 = v21;
            v22 = *(_OWORD *)(v13 + 248);
            v40 = *(_OWORD *)(v13 + 232);
            v41 = v22;
            v23 = *(_OWORD *)(v13 + 344);
            *(_OWORD *)&v45[16] = *(_OWORD *)(v13 + 328);
            *(_OWORD *)&v45[32] = v23;
            v46 = *(_OWORD *)(v13 + 360);
            v24 = *(_OWORD *)(v13 + 280);
            v42 = *(_OWORD *)(v13 + 264);
            v43 = v24;
            v25 = *(_OWORD *)(v13 + 296);
            v26 = *(_OWORD *)(v13 + 312);
            v27 = v7;
            v44 = v25;
            *(_OWORD *)v45 = v26;
            while (1)
            {
              *(_QWORD *)(v27 + 384) = *(_QWORD *)(v27 + 192);
              *(_QWORD *)(v27 + 568) = *(_QWORD *)(v27 + 376);
              v28 = *(_OWORD *)(v27 + 216);
              *(_OWORD *)(v27 + 392) = *(_OWORD *)(v27 + 200);
              *(_OWORD *)(v27 + 408) = v28;
              v29 = *(_OWORD *)(v27 + 248);
              *(_OWORD *)(v27 + 424) = *(_OWORD *)(v27 + 232);
              *(_OWORD *)(v27 + 440) = v29;
              v30 = *(_OWORD *)(v27 + 344);
              *(_OWORD *)(v27 + 520) = *(_OWORD *)(v27 + 328);
              *(_OWORD *)(v27 + 536) = v30;
              *(_OWORD *)(v27 + 552) = *(_OWORD *)(v27 + 360);
              v31 = *(_OWORD *)(v27 + 280);
              *(_OWORD *)(v27 + 456) = *(_OWORD *)(v27 + 264);
              *(_OWORD *)(v27 + 472) = v31;
              v32 = *(_OWORD *)(v27 + 312);
              *(_OWORD *)(v27 + 488) = *(_OWORD *)(v27 + 296);
              *(_OWORD *)(v27 + 504) = v32;
              v33 = *(_QWORD *)(v27 + 120);
              if (*(_QWORD *)v45 == v33)
              {
                v34 = *(_QWORD *)(v27 + 128);
                v35 = *(_QWORD *)&v45[8] < v34;
                if (*(_QWORD *)&v45[8] == v34)
                {
                  v36 = *(_QWORD *)(v27 + 136);
                  v35 = *(_QWORD *)&v45[16] < v36;
                  if (*(_QWORD *)&v45[16] == v36)
                    v35 = *(_OWORD *)&v45[24] < *(_OWORD *)(v27 + 144);
                }
                if (!v35)
                {
                  if (*(_QWORD *)&v45[24] != *(_QWORD *)(v27 + 144)
                    || *(_OWORD *)&v45[8] != *(_OWORD *)(v27 + 128)
                    || *(_QWORD *)&v45[32] != *(_QWORD *)(v27 + 152)
                    || (result = sub_2233F8C20((uint64_t)&v37, v27), !(_DWORD)result))
                  {
LABEL_4:
                    v8 = *(_OWORD *)&v45[32];
                    *(_OWORD *)(v27 + 328) = *(_OWORD *)&v45[16];
                    *(_OWORD *)(v27 + 344) = v8;
                    *(_OWORD *)(v27 + 360) = v46;
                    v9 = v43;
                    *(_OWORD *)(v27 + 264) = v42;
                    *(_OWORD *)(v27 + 280) = v9;
                    v10 = *(_OWORD *)v45;
                    *(_OWORD *)(v27 + 296) = v44;
                    *(_OWORD *)(v27 + 312) = v10;
                    v11 = v39;
                    *(_OWORD *)(v27 + 200) = v38;
                    *(_OWORD *)(v27 + 216) = v11;
                    v12 = v41;
                    *(_OWORD *)(v27 + 232) = v40;
                    *(_QWORD *)(v27 + 192) = v37;
                    *(_QWORD *)(v27 + 376) = v47;
                    *(_OWORD *)(v27 + 248) = v12;
                    break;
                  }
                }
              }
              else if (*(uint64_t *)v45 >= v33)
              {
                goto LABEL_4;
              }
              v27 -= 192;
            }
          }
        }
        else if (v14 < v15)
        {
          goto LABEL_18;
        }
        v6 = v5 + 24;
        v7 += 192;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2233F6ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 120);
  if (v6 != v7)
  {
    if (v6 >= v7)
      goto LABEL_11;
LABEL_18:
    v22 = *(_QWORD *)(a3 + 120);
    if (v22 == v6)
    {
      v23 = *(_QWORD *)(a3 + 128);
      v24 = *(_QWORD *)(a2 + 128);
      v25 = v23 < v24;
      if (v23 == v24)
      {
        v26 = *(_QWORD *)(a3 + 136);
        v27 = *(_QWORD *)(a2 + 136);
        v25 = v26 < v27;
        if (v26 == v27)
        {
          v28 = *(_QWORD *)(a3 + 152);
          v29 = *(_QWORD *)(a2 + 152);
          v25 = v28 < v29;
          if (v28 == v29)
          {
            if (*(_QWORD *)(a3 + 144) < *(_QWORD *)(a2 + 144))
              goto LABEL_31;
            goto LABEL_40;
          }
        }
      }
      if (!v25)
      {
LABEL_40:
        if (*(_QWORD *)(a3 + 144) == *(_QWORD *)(a2 + 144)
          && *(_QWORD *)(a3 + 136) == *(_QWORD *)(a2 + 136)
          && v23 == v24
          && *(_QWORD *)(a3 + 152) == *(_QWORD *)(a2 + 152)
          && sub_2233F8C20(a3, a2))
        {
          goto LABEL_31;
        }
LABEL_45:
        v60 = *(_QWORD *)a1;
        v138 = *(_OWORD *)(a1 + 136);
        v143 = *(_OWORD *)(a1 + 152);
        v148 = *(_OWORD *)(a1 + 168);
        v153 = *(_QWORD *)(a1 + 184);
        v118 = *(_OWORD *)(a1 + 72);
        v123 = *(_OWORD *)(a1 + 88);
        v128 = *(_OWORD *)(a1 + 104);
        v133 = *(_OWORD *)(a1 + 120);
        v98 = *(_OWORD *)(a1 + 8);
        v103 = *(_OWORD *)(a1 + 24);
        v108 = *(_OWORD *)(a1 + 40);
        v113 = *(_OWORD *)(a1 + 56);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v61 = *(_OWORD *)(a2 + 8);
        v62 = *(_OWORD *)(a2 + 24);
        v63 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v63;
        *(_OWORD *)(a1 + 24) = v62;
        *(_OWORD *)(a1 + 8) = v61;
        v64 = *(_OWORD *)(a2 + 72);
        v65 = *(_OWORD *)(a2 + 88);
        v66 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v66;
        *(_OWORD *)(a1 + 88) = v65;
        *(_OWORD *)(a1 + 72) = v64;
        v67 = *(_OWORD *)(a2 + 136);
        v68 = *(_OWORD *)(a2 + 152);
        v69 = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = v69;
        *(_OWORD *)(a1 + 152) = v68;
        *(_OWORD *)(a1 + 136) = v67;
        *(_QWORD *)a2 = v60;
        *(_OWORD *)(a2 + 136) = v138;
        *(_OWORD *)(a2 + 152) = v143;
        *(_OWORD *)(a2 + 168) = v148;
        *(_QWORD *)(a2 + 184) = v153;
        *(_OWORD *)(a2 + 72) = v118;
        *(_OWORD *)(a2 + 88) = v123;
        *(_OWORD *)(a2 + 104) = v128;
        *(_OWORD *)(a2 + 120) = v133;
        *(_OWORD *)(a2 + 8) = v98;
        *(_OWORD *)(a2 + 24) = v103;
        *(_OWORD *)(a2 + 40) = v108;
        *(_OWORD *)(a2 + 56) = v113;
        v70 = *(_QWORD *)(a3 + 120);
        v71 = *(_QWORD *)(a2 + 120);
        if (v70 == v71)
        {
          v72 = *(_QWORD *)(a3 + 128);
          v73 = *(_QWORD *)(a2 + 128);
          v74 = v72 < v73;
          if (v72 == v73)
          {
            v75 = *(_QWORD *)(a3 + 136);
            v76 = *(_QWORD *)(a2 + 136);
            v74 = v75 < v76;
            if (v75 == v76)
              v74 = *(_OWORD *)(a3 + 144) < *(_OWORD *)(a2 + 144);
          }
          if (!v74)
          {
            if (*(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144))
              return 1;
            result = 1;
            if (*(_QWORD *)(a3 + 136) != *(_QWORD *)(a2 + 136)
              || v72 != v73
              || *(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152))
            {
              return result;
            }
            if (!sub_2233F8C20(a3, a2))
              return 1;
            v60 = *(_QWORD *)a2;
          }
        }
        else if (v70 >= v71)
        {
          return 1;
        }
        v139 = *(_OWORD *)(a2 + 136);
        v144 = *(_OWORD *)(a2 + 152);
        v149 = *(_OWORD *)(a2 + 168);
        v154 = *(_QWORD *)(a2 + 184);
        v119 = *(_OWORD *)(a2 + 72);
        v124 = *(_OWORD *)(a2 + 88);
        v129 = *(_OWORD *)(a2 + 104);
        v134 = *(_OWORD *)(a2 + 120);
        v99 = *(_OWORD *)(a2 + 8);
        v104 = *(_OWORD *)(a2 + 24);
        v109 = *(_OWORD *)(a2 + 40);
        v114 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v77 = *(_OWORD *)(a3 + 8);
        v78 = *(_OWORD *)(a3 + 24);
        v79 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 56) = v79;
        *(_OWORD *)(a2 + 8) = v77;
        *(_OWORD *)(a2 + 24) = v78;
        v80 = *(_OWORD *)(a3 + 72);
        v81 = *(_OWORD *)(a3 + 88);
        v82 = *(_OWORD *)(a3 + 120);
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
        *(_OWORD *)(a2 + 120) = v82;
        *(_OWORD *)(a2 + 72) = v80;
        *(_OWORD *)(a2 + 88) = v81;
        v83 = *(_OWORD *)(a3 + 136);
        v84 = *(_OWORD *)(a3 + 152);
        v85 = *(_OWORD *)(a3 + 168);
        *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
        *(_OWORD *)(a2 + 152) = v84;
        *(_OWORD *)(a2 + 168) = v85;
        *(_OWORD *)(a2 + 136) = v83;
        *(_QWORD *)a3 = v60;
        *(_OWORD *)(a3 + 136) = v139;
        *(_OWORD *)(a3 + 152) = v144;
        *(_OWORD *)(a3 + 168) = v149;
        *(_QWORD *)(a3 + 184) = v154;
        *(_OWORD *)(a3 + 72) = v119;
        *(_OWORD *)(a3 + 88) = v124;
        *(_OWORD *)(a3 + 104) = v129;
        *(_OWORD *)(a3 + 120) = v134;
        *(_OWORD *)(a3 + 8) = v99;
        *(_OWORD *)(a3 + 24) = v104;
        *(_OWORD *)(a3 + 40) = v109;
        result = 2;
        *(_OWORD *)(a3 + 56) = v114;
        return result;
      }
    }
    else if (v22 >= v6)
    {
      goto LABEL_45;
    }
LABEL_31:
    v31 = *(_QWORD *)a1;
    v136 = *(_OWORD *)(a1 + 136);
    v141 = *(_OWORD *)(a1 + 152);
    v146 = *(_OWORD *)(a1 + 168);
    v151 = *(_QWORD *)(a1 + 184);
    v116 = *(_OWORD *)(a1 + 72);
    v121 = *(_OWORD *)(a1 + 88);
    v126 = *(_OWORD *)(a1 + 104);
    v131 = *(_OWORD *)(a1 + 120);
    v96 = *(_OWORD *)(a1 + 8);
    v101 = *(_OWORD *)(a1 + 24);
    v106 = *(_OWORD *)(a1 + 40);
    v111 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a3;
    v32 = *(_OWORD *)(a3 + 8);
    v33 = *(_OWORD *)(a3 + 24);
    v34 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(a1 + 40) = v34;
    *(_OWORD *)(a1 + 24) = v33;
    *(_OWORD *)(a1 + 8) = v32;
    v35 = *(_OWORD *)(a3 + 72);
    v36 = *(_OWORD *)(a3 + 88);
    v37 = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a1 + 104) = v37;
    *(_OWORD *)(a1 + 88) = v36;
    *(_OWORD *)(a1 + 72) = v35;
    v38 = *(_OWORD *)(a3 + 136);
    v39 = *(_OWORD *)(a3 + 152);
    v40 = *(_OWORD *)(a3 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a3 + 184);
    *(_OWORD *)(a1 + 168) = v40;
    *(_OWORD *)(a1 + 152) = v39;
    *(_OWORD *)(a1 + 136) = v38;
    *(_QWORD *)a3 = v31;
    *(_OWORD *)(a3 + 136) = v136;
    *(_OWORD *)(a3 + 152) = v141;
    *(_OWORD *)(a3 + 168) = v146;
    *(_QWORD *)(a3 + 184) = v151;
    *(_OWORD *)(a3 + 72) = v116;
    *(_OWORD *)(a3 + 88) = v121;
    *(_OWORD *)(a3 + 104) = v126;
    *(_OWORD *)(a3 + 120) = v131;
    *(_OWORD *)(a3 + 8) = v96;
    *(_OWORD *)(a3 + 24) = v101;
    *(_OWORD *)(a3 + 40) = v106;
    result = 1;
    *(_OWORD *)(a3 + 56) = v111;
    return result;
  }
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = v8 < v9;
  if (v8 == v9)
  {
    v11 = *(_QWORD *)(a2 + 136);
    v12 = *(_QWORD *)(a1 + 136);
    v10 = v11 < v12;
    if (v11 == v12)
      v10 = *(_OWORD *)(a2 + 144) < *(_OWORD *)(a1 + 144);
  }
  if (v10)
    goto LABEL_18;
  if (*(_QWORD *)(a2 + 144) == *(_QWORD *)(a1 + 144)
    && *(_QWORD *)(a2 + 136) == *(_QWORD *)(a1 + 136)
    && v8 == v9
    && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a1 + 152))
  {
    v13 = sub_2233F8C20(a2, a1);
    v6 = *(_QWORD *)(a2 + 120);
    if ((v13 & 1) != 0)
      goto LABEL_18;
  }
LABEL_11:
  v14 = *(_QWORD *)(a3 + 120);
  if (v14 == v6)
  {
    v15 = *(_QWORD *)(a3 + 128);
    v16 = *(_QWORD *)(a2 + 128);
    v17 = v15 < v16;
    if (v15 == v16
      && (v18 = *(_QWORD *)(a3 + 136), v19 = *(_QWORD *)(a2 + 136), v17 = v18 < v19, v18 == v19)
      && (v20 = *(_QWORD *)(a3 + 152), v21 = *(_QWORD *)(a2 + 152), v17 = v20 < v21, v20 == v21))
    {
      if (*(_QWORD *)(a3 + 144) < *(_QWORD *)(a2 + 144))
        goto LABEL_34;
    }
    else if (v17)
    {
      goto LABEL_34;
    }
    if (*(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144) || *(_QWORD *)(a3 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
    result = 0;
    if (v15 != v16)
      return result;
    if (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152))
      return result;
    result = sub_2233F8C20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v14 >= v6)
  {
    return 0;
  }
LABEL_34:
  v41 = *(_QWORD *)a2;
  v137 = *(_OWORD *)(a2 + 136);
  v142 = *(_OWORD *)(a2 + 152);
  v147 = *(_OWORD *)(a2 + 168);
  v152 = *(_QWORD *)(a2 + 184);
  v117 = *(_OWORD *)(a2 + 72);
  v122 = *(_OWORD *)(a2 + 88);
  v127 = *(_OWORD *)(a2 + 104);
  v132 = *(_OWORD *)(a2 + 120);
  v97 = *(_OWORD *)(a2 + 8);
  v102 = *(_OWORD *)(a2 + 24);
  v107 = *(_OWORD *)(a2 + 40);
  v112 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v42 = *(_OWORD *)(a3 + 8);
  v43 = *(_OWORD *)(a3 + 24);
  v44 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v44;
  *(_OWORD *)(a2 + 24) = v43;
  *(_OWORD *)(a2 + 8) = v42;
  v45 = *(_OWORD *)(a3 + 72);
  v46 = *(_OWORD *)(a3 + 88);
  v47 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v47;
  *(_OWORD *)(a2 + 88) = v46;
  *(_OWORD *)(a2 + 72) = v45;
  v48 = *(_OWORD *)(a3 + 136);
  v49 = *(_OWORD *)(a3 + 152);
  v50 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v50;
  *(_OWORD *)(a2 + 152) = v49;
  *(_OWORD *)(a2 + 136) = v48;
  *(_QWORD *)a3 = v41;
  *(_OWORD *)(a3 + 136) = v137;
  *(_OWORD *)(a3 + 152) = v142;
  *(_OWORD *)(a3 + 168) = v147;
  *(_QWORD *)(a3 + 184) = v152;
  *(_OWORD *)(a3 + 72) = v117;
  *(_OWORD *)(a3 + 88) = v122;
  *(_OWORD *)(a3 + 104) = v127;
  *(_OWORD *)(a3 + 120) = v132;
  *(_OWORD *)(a3 + 8) = v97;
  *(_OWORD *)(a3 + 24) = v102;
  *(_OWORD *)(a3 + 40) = v107;
  *(_OWORD *)(a3 + 56) = v112;
  v51 = *(_QWORD *)(a2 + 120);
  v52 = *(_QWORD *)(a1 + 120);
  if (v51 != v52)
  {
    if (v51 < v52)
      goto LABEL_68;
    return 1;
  }
  v53 = *(_QWORD *)(a2 + 128);
  v54 = *(_QWORD *)(a1 + 128);
  v55 = v53 < v54;
  if (v53 == v54
    && (v56 = *(_QWORD *)(a2 + 136), v57 = *(_QWORD *)(a1 + 136), v55 = v56 < v57, v56 == v57)
    && (v58 = *(_QWORD *)(a2 + 152), v59 = *(_QWORD *)(a1 + 152), v55 = v58 < v59, v58 == v59))
  {
    if (*(_QWORD *)(a2 + 144) < *(_QWORD *)(a1 + 144))
      goto LABEL_68;
  }
  else if (v55)
  {
    goto LABEL_68;
  }
  if (*(_QWORD *)(a2 + 144) != *(_QWORD *)(a1 + 144))
    return 1;
  result = 1;
  if (*(_QWORD *)(a2 + 136) == *(_QWORD *)(a1 + 136) && v53 == v54 && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a1 + 152))
  {
    if (!sub_2233F8C20(a2, a1))
      return 1;
LABEL_68:
    v86 = *(_QWORD *)a1;
    v140 = *(_OWORD *)(a1 + 136);
    v145 = *(_OWORD *)(a1 + 152);
    v150 = *(_OWORD *)(a1 + 168);
    v155 = *(_QWORD *)(a1 + 184);
    v120 = *(_OWORD *)(a1 + 72);
    v125 = *(_OWORD *)(a1 + 88);
    v130 = *(_OWORD *)(a1 + 104);
    v135 = *(_OWORD *)(a1 + 120);
    v100 = *(_OWORD *)(a1 + 8);
    v105 = *(_OWORD *)(a1 + 24);
    v110 = *(_OWORD *)(a1 + 40);
    v115 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v87 = *(_OWORD *)(a2 + 8);
    v88 = *(_OWORD *)(a2 + 24);
    v89 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v89;
    *(_OWORD *)(a1 + 24) = v88;
    *(_OWORD *)(a1 + 8) = v87;
    v90 = *(_OWORD *)(a2 + 72);
    v91 = *(_OWORD *)(a2 + 88);
    v92 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v92;
    *(_OWORD *)(a1 + 88) = v91;
    *(_OWORD *)(a1 + 72) = v90;
    v93 = *(_OWORD *)(a2 + 136);
    v94 = *(_OWORD *)(a2 + 152);
    v95 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v95;
    *(_OWORD *)(a1 + 152) = v94;
    *(_OWORD *)(a1 + 136) = v93;
    *(_QWORD *)a2 = v86;
    *(_OWORD *)(a2 + 136) = v140;
    *(_OWORD *)(a2 + 152) = v145;
    *(_OWORD *)(a2 + 168) = v150;
    *(_QWORD *)(a2 + 184) = v155;
    *(_OWORD *)(a2 + 72) = v120;
    *(_OWORD *)(a2 + 88) = v125;
    *(_OWORD *)(a2 + 104) = v130;
    *(_OWORD *)(a2 + 120) = v135;
    *(_OWORD *)(a2 + 8) = v100;
    *(_OWORD *)(a2 + 24) = v105;
    result = 2;
    *(_OWORD *)(a2 + 40) = v110;
    *(_OWORD *)(a2 + 56) = v115;
  }
  return result;
}

unint64_t sub_2233F7398(uint64_t *a1, unint64_t a2)
{
  unint64_t j;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t v73;
  unint64_t v74;
  int64x2_t v75;
  int64x2_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64x2_t v82;
  int64x2_t v83;
  unint64_t v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[32];
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;

  j = a2;
  v110 = *a1;
  v119 = *(_OWORD *)(a1 + 17);
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 19);
  *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 21);
  v121 = a1[23];
  v115 = *(_OWORD *)(a1 + 9);
  v116 = *(_OWORD *)(a1 + 11);
  v117 = *(_OWORD *)(a1 + 13);
  v118 = *(_OWORD *)(a1 + 15);
  v111 = *(_OWORD *)(a1 + 1);
  v112 = *(_OWORD *)(a1 + 3);
  v113 = *(_OWORD *)(a1 + 5);
  v114 = *(_OWORD *)(a1 + 7);
  v4 = a2 - 192;
  v5 = *(_QWORD *)(a2 - 72);
  if ((_QWORD)v118 != v5)
  {
    if ((uint64_t)v118 >= v5)
      goto LABEL_10;
LABEL_25:
    for (i = (unint64_t)(a1 + 24); ; i += 192)
    {
      v14 = *(_QWORD *)(i + 120);
      if ((_QWORD)v118 == v14)
      {
        v15 = *(_QWORD *)(i + 128);
        v16 = *((_QWORD *)&v118 + 1) < v15;
        if (*((_QWORD *)&v118 + 1) == v15)
        {
          v17 = *(_QWORD *)(i + 136);
          v16 = (uint64_t)v119 < v17;
          if ((_QWORD)v119 == v17)
            v16 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(i + 144);
        }
        if (v16
          || v119 == *(_OWORD *)(i + 136)
          && *((_QWORD *)&v118 + 1) == v15
          && *(_QWORD *)v120 == *(_QWORD *)(i + 152)
          && (sub_2233F8C20((uint64_t)&v110, i) & 1) != 0)
        {
          goto LABEL_37;
        }
      }
      else if ((uint64_t)v118 < v14)
      {
        goto LABEL_37;
      }
    }
  }
  v6 = *(_QWORD *)(a2 - 64);
  v7 = *((_QWORD *)&v118 + 1) < v6;
  if (*((_QWORD *)&v118 + 1) == v6)
  {
    v8 = *(_QWORD *)(a2 - 56);
    v7 = (uint64_t)v119 < v8;
    if ((_QWORD)v119 == v8)
      v7 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(a2 - 48);
  }
  if (v7
    || v119 == *(_OWORD *)(a2 - 56)
    && *((_QWORD *)&v118 + 1) == v6
    && *(_QWORD *)v120 == *(_QWORD *)(a2 - 40)
    && sub_2233F8C20((uint64_t)&v110, a2 - 192))
  {
    goto LABEL_25;
  }
LABEL_10:
  for (i = (unint64_t)(a1 + 24); i < j; i += 192)
  {
    v10 = *(_QWORD *)(i + 120);
    if ((_QWORD)v118 == v10)
    {
      v11 = *(_QWORD *)(i + 128);
      v12 = *((_QWORD *)&v118 + 1) < v11;
      if (*((_QWORD *)&v118 + 1) == v11)
      {
        v13 = *(_QWORD *)(i + 136);
        v12 = (uint64_t)v119 < v13;
        if ((_QWORD)v119 == v13)
          v12 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(i + 144);
      }
      if (v12
        || v119 == *(_OWORD *)(i + 136)
        && *((_QWORD *)&v118 + 1) == v11
        && *(_QWORD *)v120 == *(_QWORD *)(i + 152)
        && (sub_2233F8C20((uint64_t)&v110, i) & 1) != 0)
      {
        break;
      }
    }
    else if ((uint64_t)v118 < v10)
    {
      break;
    }
  }
LABEL_37:
  if (i < j)
  {
    for (j = v4; ; j -= 192)
    {
      v18 = *(_QWORD *)(j + 120);
      if ((_QWORD)v118 == v18)
      {
        v19 = *(_QWORD *)(j + 128);
        v20 = *((_QWORD *)&v118 + 1) < v19;
        if (*((_QWORD *)&v118 + 1) == v19)
        {
          v21 = *(_QWORD *)(j + 136);
          v20 = (uint64_t)v119 < v21;
          if ((_QWORD)v119 == v21)
            v20 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(j + 144);
        }
        if (!v20
          && (v119 != *(_OWORD *)(j + 136)
           || *((_QWORD *)&v118 + 1) != v19
           || *(_QWORD *)v120 != *(_QWORD *)(j + 152)
           || !sub_2233F8C20((uint64_t)&v110, j)))
        {
          break;
        }
      }
      else if ((uint64_t)v118 >= v18)
      {
        break;
      }
    }
  }
  while (i < j)
  {
    v22 = *(_QWORD *)i;
    v23 = *(_OWORD *)(i + 136);
    v24 = *(_OWORD *)(i + 152);
    v25 = *(_OWORD *)(i + 168);
    v133 = *(_QWORD *)(i + 184);
    v131 = v24;
    v132 = v25;
    v130 = v23;
    v26 = *(_OWORD *)(i + 8);
    v27 = *(_OWORD *)(i + 24);
    v28 = *(_OWORD *)(i + 56);
    v124 = *(_OWORD *)(i + 40);
    v125 = v28;
    v122 = v26;
    v123 = v27;
    v29 = *(_OWORD *)(i + 72);
    v30 = *(_OWORD *)(i + 88);
    v31 = *(_OWORD *)(i + 120);
    v128 = *(_OWORD *)(i + 104);
    v129 = v31;
    v126 = v29;
    v127 = v30;
    *(_QWORD *)i = *(_QWORD *)j;
    v32 = *(_OWORD *)(j + 8);
    v33 = *(_OWORD *)(j + 24);
    v34 = *(_OWORD *)(j + 40);
    *(_OWORD *)(i + 56) = *(_OWORD *)(j + 56);
    *(_OWORD *)(i + 40) = v34;
    *(_OWORD *)(i + 24) = v33;
    *(_OWORD *)(i + 8) = v32;
    v35 = *(_OWORD *)(j + 72);
    v36 = *(_OWORD *)(j + 88);
    v37 = *(_OWORD *)(j + 104);
    *(_OWORD *)(i + 120) = *(_OWORD *)(j + 120);
    *(_OWORD *)(i + 104) = v37;
    *(_OWORD *)(i + 88) = v36;
    *(_OWORD *)(i + 72) = v35;
    v38 = *(_OWORD *)(j + 136);
    v39 = *(_OWORD *)(j + 152);
    v40 = *(_OWORD *)(j + 168);
    *(_QWORD *)(i + 184) = *(_QWORD *)(j + 184);
    *(_OWORD *)(i + 168) = v40;
    *(_OWORD *)(i + 152) = v39;
    *(_OWORD *)(i + 136) = v38;
    *(_QWORD *)j = v22;
    v41 = v130;
    v42 = v131;
    v43 = v132;
    *(_QWORD *)(j + 184) = v133;
    v44 = v122;
    v45 = v123;
    v46 = v124;
    *(_OWORD *)(j + 56) = v125;
    *(_OWORD *)(j + 40) = v46;
    *(_OWORD *)(j + 24) = v45;
    *(_OWORD *)(j + 8) = v44;
    v47 = v126;
    v48 = v127;
    v49 = v128;
    *(_OWORD *)(j + 120) = v129;
    *(_OWORD *)(j + 104) = v49;
    *(_OWORD *)(j + 88) = v48;
    *(_OWORD *)(j + 72) = v47;
    *(_OWORD *)(j + 168) = v43;
    *(_OWORD *)(j + 152) = v42;
    *(_OWORD *)(j + 136) = v41;
    do
    {
      while (1)
      {
        i += 192;
        v50 = *(_QWORD *)(i + 120);
        if ((_QWORD)v118 == v50)
          break;
        if ((uint64_t)v118 < v50)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(i + 128);
      v52 = *((_QWORD *)&v118 + 1) < v51;
      if (*((_QWORD *)&v118 + 1) == v51)
      {
        v53 = *(_QWORD *)(i + 136);
        v52 = (uint64_t)v119 < v53;
        if ((_QWORD)v119 == v53)
          v52 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(i + 144);
      }
    }
    while (!v52
         && (v119 != *(_OWORD *)(i + 136)
          || *((_QWORD *)&v118 + 1) != v51
          || *(_QWORD *)v120 != *(_QWORD *)(i + 152)
          || (sub_2233F8C20((uint64_t)&v110, i) & 1) == 0));
    while (1)
    {
      do
      {
LABEL_66:
        while (1)
        {
          v54 = j;
          j -= 192;
          v55 = *(_QWORD *)(v54 - 72);
          if ((_QWORD)v118 == v55)
            break;
          if ((uint64_t)v118 >= v55)
            goto LABEL_52;
        }
        v56 = *(_QWORD *)(v54 - 64);
        v57 = *((_QWORD *)&v118 + 1) < v56;
        if (*((_QWORD *)&v118 + 1) == v56)
        {
          v58 = *(_QWORD *)(v54 - 56);
          v57 = (uint64_t)v119 < v58;
          if ((_QWORD)v119 == v58)
            v57 = (__int128)__PAIR128__(*(unint64_t *)v120, *((unint64_t *)&v119 + 1)) < *(_OWORD *)(v54 - 48);
        }
      }
      while (v57);
      if (v119 != *(_OWORD *)(v54 - 56) || *((_QWORD *)&v118 + 1) != v56 || *(_QWORD *)v120 != *(_QWORD *)(v54 - 40))
        break;
      if (vabdd_f64(*(double *)&v120[24], *(double *)(v54 - 16)) >= 50.0)
        goto LABEL_97;
      v122 = *(_OWORD *)&v120[8];
      sub_2233E5290((int64_t)&v122);
      v134 = *(_OWORD *)(v54 - 32);
      sub_2233E5290((int64_t)&v134);
      if (v122 != v134)
        goto LABEL_97;
      v59 = *(float *)j;
      if (*(float *)&v110 != *(float *)j)
      {
        if ((v110 & 0x7FFFFFFF) > 0x7F7FFFFF || (LODWORD(v59) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_97;
        v61 = vabds_f32(*(float *)&v110, v59);
        v62 = fabsf(*(float *)&v110);
        v63 = fabsf(v59);
        if (v62 < v63)
          v62 = v63;
        v64 = v62 >= 1.0 ? v62 * 0.00000011921 : 0.00000011921;
        if (v61 > v64)
          goto LABEL_97;
      }
      v60 = *(float *)(v54 - 188);
      if (*((float *)&v110 + 1) == v60)
        goto LABEL_78;
      if ((HIDWORD(v110) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v60) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        goto LABEL_97;
      v65 = vabds_f32(*((float *)&v110 + 1), v60);
      v66 = fabsf(*((float *)&v110 + 1));
      v67 = fabsf(v60);
      if (v66 < v67)
        v66 = v67;
      v68 = v66 >= 1.0 ? v66 * 0.00000011921 : 0.00000011921;
      if (v65 <= v68)
      {
LABEL_78:
        if ((sub_2233F8DAC((uint64_t)&unk_25578BB59, (uint64_t)&v110, j) & 1) == 0)
          break;
      }
      else
      {
LABEL_97:
        v69 = *(double *)(v54 - 16);
        if (vabdd_f64(*(double *)&v120[24], v69) >= 50.0)
        {
          if (*(double *)&v120[24] >= v69)
            break;
        }
        else
        {
          v122 = *(_OWORD *)&v120[8];
          sub_2233E5290((int64_t)&v122);
          v134 = *(_OWORD *)(v54 - 32);
          sub_2233E5290((int64_t)&v134);
          v70 = *((_QWORD *)&v122 + 1);
          v71 = (uint64_t)v122 / *((_QWORD *)&v122 + 1);
          v72 = (uint64_t)v122 % *((_QWORD *)&v122 + 1);
          if ((uint64_t)v122 % *((_QWORD *)&v122 + 1) < 0)
          {
            v74 = ((unint64_t)(*((_QWORD *)&v122 + 1) + v72) >> 63)
                + (((*((_QWORD *)&v122 + 1) + v72) & ~((*((_QWORD *)&v122 + 1) + v72) >> 63))
                 - (((unint64_t)(*((_QWORD *)&v122 + 1) + v72) >> 63)
                  + *((_QWORD *)&v122 + 1)
                  + v72))
                / *((_QWORD *)&v122 + 1)
                + 1;
            v73.i64[0] = -1;
            v73.i64[1] = -1;
            if (v74 < 4)
              goto LABEL_131;
            v72 += (v74 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v122 + 1);
            v75 = 0uLL;
            v76 = (int64x2_t)(unint64_t)((uint64_t)v122 / *((_QWORD *)&v122 + 1));
            v77 = v74 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v76 = vaddq_s64(v76, v73);
              v75 = vaddq_s64(v75, v73);
              v77 -= 4;
            }
            while (v77);
            v71 = vaddvq_s64(vaddq_s64(v75, v76));
            if (v74 != (v74 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_131:
              do
              {
                v72 += *((_QWORD *)&v122 + 1);
                --v71;
              }
              while (v72 < 0);
            }
          }
          else
          {
            v73.i64[0] = -1;
            v73.i64[1] = -1;
          }
          v78 = *((_QWORD *)&v134 + 1);
          v79 = (uint64_t)v134 / *((_QWORD *)&v134 + 1);
          v80 = (uint64_t)v134 % *((_QWORD *)&v134 + 1);
          if ((uint64_t)v134 % *((_QWORD *)&v134 + 1) < 0)
          {
            v81 = ((unint64_t)(*((_QWORD *)&v134 + 1) + v80) >> 63)
                + (((*((_QWORD *)&v134 + 1) + v80) & ~((*((_QWORD *)&v134 + 1) + v80) >> 63))
                 - (((unint64_t)(*((_QWORD *)&v134 + 1) + v80) >> 63)
                  + *((_QWORD *)&v134 + 1)
                  + v80))
                / *((_QWORD *)&v134 + 1)
                + 1;
            if (v81 < 4)
              goto LABEL_132;
            v80 += (v81 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v134 + 1);
            v82 = 0uLL;
            v83 = (int64x2_t)(unint64_t)((uint64_t)v134 / *((_QWORD *)&v134 + 1));
            v84 = v81 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v83 = vaddq_s64(v83, v73);
              v82 = vaddq_s64(v82, v73);
              v84 -= 4;
            }
            while (v84);
            v79 = vaddvq_s64(vaddq_s64(v82, v83));
            if (v81 != (v81 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_132:
              do
              {
                v80 += *((_QWORD *)&v134 + 1);
                --v79;
              }
              while (v80 < 0);
            }
          }
          v85 = v71 < v79;
          if (v71 == v79)
          {
            v86 = 0;
            do
            {
              v87 = v72;
              v88 = v80;
              v86 ^= 1u;
              if (!v72 || !v80)
              {
                if (v72 != v80 && (v86 != 0) != (v72 != 0))
                  goto LABEL_66;
                goto LABEL_52;
              }
              v89 = v70 / v72;
              v72 = v70 % v72;
              v90 = v78 / v80;
              v80 = v78 % v80;
              v78 = v88;
              v70 = v87;
            }
            while (v89 == v90);
            v85 = v89 < v90;
            if (!v86)
              goto LABEL_121;
            if (v89 > v90)
              goto LABEL_66;
            break;
          }
LABEL_121:
          if (!v85)
            break;
        }
      }
    }
LABEL_52:
    ;
  }
  if ((uint64_t *)(i - 192) != a1)
  {
    *a1 = *(_QWORD *)(i - 192);
    v91 = *(_OWORD *)(i - 184);
    v92 = *(_OWORD *)(i - 168);
    v93 = *(_OWORD *)(i - 136);
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(i - 152);
    *(_OWORD *)(a1 + 7) = v93;
    *(_OWORD *)(a1 + 1) = v91;
    *(_OWORD *)(a1 + 3) = v92;
    v94 = *(_OWORD *)(i - 120);
    v95 = *(_OWORD *)(i - 104);
    v96 = *(_OWORD *)(i - 72);
    *(_OWORD *)(a1 + 13) = *(_OWORD *)(i - 88);
    *(_OWORD *)(a1 + 15) = v96;
    *(_OWORD *)(a1 + 9) = v94;
    *(_OWORD *)(a1 + 11) = v95;
    v97 = *(_OWORD *)(i - 56);
    v98 = *(_OWORD *)(i - 40);
    v99 = *(_OWORD *)(i - 24);
    a1[23] = *(_QWORD *)(i - 8);
    *(_OWORD *)(a1 + 19) = v98;
    *(_OWORD *)(a1 + 21) = v99;
    *(_OWORD *)(a1 + 17) = v97;
  }
  *(_QWORD *)(i - 192) = v110;
  v100 = v111;
  v101 = v112;
  v102 = v113;
  *(_OWORD *)(i - 136) = v114;
  *(_OWORD *)(i - 152) = v102;
  *(_OWORD *)(i - 168) = v101;
  *(_OWORD *)(i - 184) = v100;
  v103 = v115;
  v104 = v116;
  v105 = v117;
  *(_OWORD *)(i - 72) = v118;
  *(_OWORD *)(i - 88) = v105;
  *(_OWORD *)(i - 104) = v104;
  *(_OWORD *)(i - 120) = v103;
  v106 = v119;
  v107 = *(_OWORD *)v120;
  v108 = *(_OWORD *)&v120[16];
  *(_QWORD *)(i - 8) = v121;
  *(_OWORD *)(i - 24) = v108;
  *(_OWORD *)(i - 40) = v107;
  *(_OWORD *)(i - 56) = v106;
  return i;
}

__n128 sub_2233F7D30(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  unint64_t v71;
  int64x2_t v72;
  int64x2_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  unint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __n128 result;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  _BYTE v120[32];
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134[4];

  v4 = 0;
  v110 = *a1;
  v119 = *(__n128 *)(a1 + 17);
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 19);
  *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 21);
  v121 = a1[23];
  v5 = a1 + 1;
  v115 = *(_OWORD *)(a1 + 9);
  v116 = *(_OWORD *)(a1 + 11);
  v117 = *(_OWORD *)(a1 + 13);
  v118 = *(_OWORD *)(a1 + 15);
  v111 = *(_OWORD *)(a1 + 1);
  v112 = *(_OWORD *)(a1 + 3);
  v113 = *(_OWORD *)(a1 + 5);
  v114 = *(_OWORD *)(a1 + 7);
  while (1)
  {
    v6 = &a1[v4];
    v7 = a1[v4 + 39];
    if (v7 == (_QWORD)v118)
      break;
    if (v7 >= (uint64_t)v118)
      goto LABEL_13;
LABEL_3:
    v4 += 24;
  }
  v8 = v6[40];
  v9 = v8 < *((_QWORD *)&v118 + 1);
  if (v8 == *((_QWORD *)&v118 + 1))
  {
    v10 = a1[v4 + 41];
    v9 = v10 < (int64_t)v119.n128_u64[0];
    if (v10 == v119.n128_u64[0])
      v9 = *(_OWORD *)&a1[v4 + 42] < (__int128)__PAIR128__(*(unint64_t *)v120, v119.n128_u64[1]);
  }
  if (v9
    || *(_OWORD *)&a1[v4 + 41] == *(_OWORD *)&v119
    && v8 == *((_QWORD *)&v118 + 1)
    && a1[v4 + 43] == *(_QWORD *)v120
    && sub_2233F8C20((uint64_t)(v6 + 24), (uint64_t)&v110))
  {
    goto LABEL_3;
  }
LABEL_13:
  v11 = (unint64_t)&a1[v4 + 24];
  if (v4 * 8)
  {
    do
    {
      while (1)
      {
        a2 -= 192;
        v12 = *(_QWORD *)(a2 + 120);
        if (v12 == (_QWORD)v118)
          break;
        if (v12 < (uint64_t)v118)
          goto LABEL_42;
      }
      v13 = *(_QWORD *)(a2 + 128);
      v14 = v13 < *((_QWORD *)&v118 + 1);
      if (v13 == *((_QWORD *)&v118 + 1))
      {
        v15 = *(_QWORD *)(a2 + 136);
        v14 = v15 < (int64_t)v119.n128_u64[0];
        if (v15 == v119.n128_u64[0])
          v14 = *(_OWORD *)(a2 + 144) < (__int128)__PAIR128__(*(unint64_t *)v120, v119.n128_u64[1]);
      }
    }
    while (!v14
         && (*(_OWORD *)(a2 + 136) != *(_OWORD *)&v119
          || v13 != *((_QWORD *)&v118 + 1)
          || *(_QWORD *)(a2 + 152) != *(_QWORD *)v120
          || (sub_2233F8C20(a2, (uint64_t)&v110) & 1) == 0));
  }
  else
  {
    do
    {
      if (v11 >= a2)
        break;
      while (1)
      {
        a2 -= 192;
        v16 = *(_QWORD *)(a2 + 120);
        if (v16 == (_QWORD)v118)
          break;
        if (v16 < (uint64_t)v118 || v11 >= a2)
          goto LABEL_42;
      }
      v18 = *(_QWORD *)(a2 + 128);
      v19 = v18 < *((_QWORD *)&v118 + 1);
      if (v18 == *((_QWORD *)&v118 + 1))
      {
        v20 = *(_QWORD *)(a2 + 136);
        v19 = v20 < (int64_t)v119.n128_u64[0];
        if (v20 == v119.n128_u64[0])
          v19 = *(_OWORD *)(a2 + 144) < (__int128)__PAIR128__(*(unint64_t *)v120, v119.n128_u64[1]);
      }
    }
    while (!v19
         && (*(_OWORD *)(a2 + 136) != *(_OWORD *)&v119
          || v18 != *((_QWORD *)&v118 + 1)
          || *(_QWORD *)(a2 + 152) != *(_QWORD *)v120
          || (sub_2233F8C20(a2, (uint64_t)&v110) & 1) == 0));
  }
LABEL_42:
  if (v11 >= a2)
  {
    v21 = (unint64_t)&a1[v4 + 24];
  }
  else
  {
    v21 = (unint64_t)&a1[v4 + 24];
    v22 = a2;
    do
    {
      v23 = *(_QWORD *)v21;
      v24 = *(_OWORD *)(v21 + 24);
      v25 = *(_OWORD *)(v21 + 56);
      v26 = *(_OWORD *)(v21 + 8);
      v124 = *(_OWORD *)(v21 + 40);
      v125 = v25;
      v122 = v26;
      v123 = v24;
      v27 = *(_OWORD *)(v21 + 88);
      v28 = *(_OWORD *)(v21 + 120);
      v29 = *(_OWORD *)(v21 + 72);
      v128 = *(_OWORD *)(v21 + 104);
      v129 = v28;
      v126 = v29;
      v127 = v27;
      v30 = *(_OWORD *)(v21 + 136);
      v31 = *(_OWORD *)(v21 + 152);
      v32 = *(_OWORD *)(v21 + 168);
      v133 = *(_QWORD *)(v21 + 184);
      v131 = v31;
      v132 = v32;
      v130 = v30;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v33 = *(_OWORD *)(v22 + 8);
      v34 = *(_OWORD *)(v22 + 24);
      v35 = *(_OWORD *)(v22 + 40);
      *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
      *(_OWORD *)(v21 + 40) = v35;
      *(_OWORD *)(v21 + 24) = v34;
      *(_OWORD *)(v21 + 8) = v33;
      v36 = *(_OWORD *)(v22 + 72);
      v37 = *(_OWORD *)(v22 + 88);
      v38 = *(_OWORD *)(v22 + 104);
      *(_OWORD *)(v21 + 120) = *(_OWORD *)(v22 + 120);
      *(_OWORD *)(v21 + 104) = v38;
      *(_OWORD *)(v21 + 88) = v37;
      *(_OWORD *)(v21 + 72) = v36;
      v39 = *(_OWORD *)(v22 + 136);
      v40 = *(_OWORD *)(v22 + 152);
      v41 = *(_OWORD *)(v22 + 168);
      *(_QWORD *)(v21 + 184) = *(_QWORD *)(v22 + 184);
      *(_OWORD *)(v21 + 168) = v41;
      *(_OWORD *)(v21 + 152) = v40;
      *(_OWORD *)(v21 + 136) = v39;
      *(_QWORD *)v22 = v23;
      v42 = v130;
      v43 = v131;
      v44 = v132;
      *(_QWORD *)(v22 + 184) = v133;
      v45 = v122;
      v46 = v123;
      v47 = v124;
      *(_OWORD *)(v22 + 56) = v125;
      *(_OWORD *)(v22 + 40) = v47;
      *(_OWORD *)(v22 + 24) = v46;
      *(_OWORD *)(v22 + 8) = v45;
      v48 = v126;
      v49 = v127;
      v50 = v128;
      *(_OWORD *)(v22 + 120) = v129;
      *(_OWORD *)(v22 + 104) = v50;
      *(_OWORD *)(v22 + 88) = v49;
      *(_OWORD *)(v22 + 72) = v48;
      *(_OWORD *)(v22 + 168) = v44;
      *(_OWORD *)(v22 + 152) = v43;
      *(_OWORD *)(v22 + 136) = v42;
      while (1)
      {
        do
        {
LABEL_47:
          while (1)
          {
            v51 = v21;
            v21 += 192;
            v52 = *(_QWORD *)(v51 + 312);
            if (v52 == (_QWORD)v118)
              break;
            if (v52 >= (uint64_t)v118)
              goto LABEL_108;
          }
          v53 = *(_QWORD *)(v51 + 320);
          v54 = v53 < *((_QWORD *)&v118 + 1);
          if (v53 == *((_QWORD *)&v118 + 1))
          {
            v55 = *(_QWORD *)(v51 + 328);
            v54 = v55 < (int64_t)v119.n128_u64[0];
            if (v55 == v119.n128_u64[0])
              v54 = *(_OWORD *)(v51 + 336) < (__int128)__PAIR128__(*(unint64_t *)v120, v119.n128_u64[1]);
          }
        }
        while (v54);
        if (*(_OWORD *)(v51 + 328) != *(_OWORD *)&v119
          || v53 != *((_QWORD *)&v118 + 1)
          || *(_QWORD *)(v51 + 344) != *(_QWORD *)v120)
        {
          break;
        }
        if (vabdd_f64(*(double *)(v51 + 368), *(double *)&v120[24]) >= 50.0)
          goto LABEL_78;
        v122 = *(_OWORD *)(v51 + 352);
        sub_2233E5290((int64_t)&v122);
        *(_OWORD *)v134 = *(_OWORD *)&v120[8];
        sub_2233E5290((int64_t)v134);
        if (v122 != *(_OWORD *)v134)
          goto LABEL_78;
        v56 = *(float *)v21;
        if (*(float *)v21 != *(float *)&v110)
        {
          if ((LODWORD(v56) & 0x7FFFFFFFu) > 0x7F7FFFFF || (v110 & 0x7FFFFFFF) > 0x7F7FFFFF)
            goto LABEL_78;
          v58 = vabds_f32(v56, *(float *)&v110);
          v59 = fabsf(v56);
          v60 = fabsf(*(float *)&v110);
          if (v59 < v60)
            v59 = v60;
          v61 = v59 >= 1.0 ? v59 * 0.00000011921 : 0.00000011921;
          if (v58 > v61)
            goto LABEL_78;
        }
        v57 = *(float *)(v51 + 196);
        if (v57 == *((float *)&v110 + 1))
          goto LABEL_59;
        if ((LODWORD(v57) & 0x7FFFFFFFu) > 0x7F7FFFFF || (HIDWORD(v110) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_78;
        v62 = vabds_f32(v57, *((float *)&v110 + 1));
        v63 = fabsf(v57);
        v64 = fabsf(*((float *)&v110 + 1));
        if (v63 < v64)
          v63 = v64;
        v65 = v63 >= 1.0 ? v63 * 0.00000011921 : 0.00000011921;
        if (v62 <= v65)
        {
LABEL_59:
          if ((sub_2233F8DAC((uint64_t)&unk_25578BB59, v21, (uint64_t)&v110) & 1) == 0)
            goto LABEL_108;
        }
        else
        {
LABEL_78:
          v66 = *(double *)(v51 + 368);
          if (vabdd_f64(v66, *(double *)&v120[24]) >= 50.0)
          {
            if (v66 >= *(double *)&v120[24])
              goto LABEL_108;
          }
          else
          {
            v122 = *(_OWORD *)(v51 + 352);
            sub_2233E5290((int64_t)&v122);
            *(_OWORD *)v134 = *(_OWORD *)&v120[8];
            sub_2233E5290((int64_t)v134);
            v67 = *((_QWORD *)&v122 + 1);
            v68 = (uint64_t)v122 / *((_QWORD *)&v122 + 1);
            v69 = (uint64_t)v122 % *((_QWORD *)&v122 + 1);
            if ((uint64_t)v122 % *((_QWORD *)&v122 + 1) < 0)
            {
              v71 = ((unint64_t)(*((_QWORD *)&v122 + 1) + v69) >> 63)
                  + (((*((_QWORD *)&v122 + 1) + v69) & ~((*((_QWORD *)&v122 + 1) + v69) >> 63))
                   - (((unint64_t)(*((_QWORD *)&v122 + 1) + v69) >> 63)
                    + *((_QWORD *)&v122 + 1)
                    + v69))
                  / *((_QWORD *)&v122 + 1)
                  + 1;
              v70.i64[0] = -1;
              v70.i64[1] = -1;
              if (v71 < 4)
                goto LABEL_124;
              v69 += (v71 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v122 + 1);
              v72 = 0uLL;
              v73 = (int64x2_t)(unint64_t)((uint64_t)v122 / *((_QWORD *)&v122 + 1));
              v74 = v71 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v73 = vaddq_s64(v73, v70);
                v72 = vaddq_s64(v72, v70);
                v74 -= 4;
              }
              while (v74);
              v68 = vaddvq_s64(vaddq_s64(v72, v73));
              if (v71 != (v71 & 0xFFFFFFFFFFFFFFFCLL))
              {
LABEL_124:
                do
                {
                  v69 += *((_QWORD *)&v122 + 1);
                  --v68;
                }
                while (v69 < 0);
              }
            }
            else
            {
              v70.i64[0] = -1;
              v70.i64[1] = -1;
            }
            v75 = v134[1];
            v76 = v134[0] / v134[1];
            v77 = v134[0] % v134[1];
            if (v134[0] % v134[1] < 0)
            {
              v78 = ((unint64_t)(v134[1] + v77) >> 63)
                  + (((v134[1] + v77) & ~((v134[1] + v77) >> 63))
                   - (((unint64_t)(v134[1] + v77) >> 63)
                    + v134[1]
                    + v77))
                  / v134[1]
                  + 1;
              if (v78 < 4)
                goto LABEL_125;
              v77 += (v78 & 0xFFFFFFFFFFFFFFFCLL) * v134[1];
              v79 = 0uLL;
              v80 = (int64x2_t)(unint64_t)(v134[0] / v134[1]);
              v81 = v78 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v80 = vaddq_s64(v80, v70);
                v79 = vaddq_s64(v79, v70);
                v81 -= 4;
              }
              while (v81);
              v76 = vaddvq_s64(vaddq_s64(v79, v80));
              if (v78 != (v78 & 0xFFFFFFFFFFFFFFFCLL))
              {
LABEL_125:
                do
                {
                  v77 += v134[1];
                  --v76;
                }
                while (v77 < 0);
              }
            }
            v82 = v68 < v76;
            if (v68 == v76)
            {
              v83 = 0;
              do
              {
                v84 = v69;
                v85 = v77;
                v83 ^= 1u;
                if (!v69 || !v77)
                {
                  if (v69 == v77 || (v83 != 0) == (v69 != 0))
                    goto LABEL_108;
                  goto LABEL_47;
                }
                v86 = v67 / v69;
                v69 = v67 % v69;
                v87 = v75 / v77;
                v77 = v75 % v77;
                v75 = v85;
                v67 = v84;
              }
              while (v86 == v87);
              v82 = v86 < v87;
              if (!v83)
                goto LABEL_102;
              if (v86 <= v87)
                goto LABEL_108;
            }
            else
            {
LABEL_102:
              if (!v82)
                goto LABEL_108;
            }
          }
        }
      }
      do
      {
LABEL_108:
        while (1)
        {
          v22 -= 192;
          v88 = *(_QWORD *)(v22 + 120);
          if (v88 == (_QWORD)v118)
            break;
          if (v88 < (uint64_t)v118)
            goto LABEL_44;
        }
        v89 = *(_QWORD *)(v22 + 128);
        v90 = v89 < *((_QWORD *)&v118 + 1);
        if (v89 == *((_QWORD *)&v118 + 1))
        {
          v91 = *(_QWORD *)(v22 + 136);
          v90 = v91 < (int64_t)v119.n128_u64[0];
          if (v91 == v119.n128_u64[0])
            v90 = *(_OWORD *)(v22 + 144) < (__int128)__PAIR128__(*(unint64_t *)v120, v119.n128_u64[1]);
        }
      }
      while (!v90
           && (*(_OWORD *)(v22 + 136) != *(_OWORD *)&v119
            || v89 != *((_QWORD *)&v118 + 1)
            || *(_QWORD *)(v22 + 152) != *(_QWORD *)v120
            || (sub_2233F8C20(v22, (uint64_t)&v110) & 1) == 0));
LABEL_44:
      ;
    }
    while (v21 < v22);
  }
  if ((uint64_t *)(v21 - 192) != a1)
  {
    *a1 = *(_QWORD *)(v21 - 192);
    v92 = *(_OWORD *)(v21 - 184);
    v93 = *(_OWORD *)(v21 - 168);
    v94 = *(_OWORD *)(v21 - 136);
    *((_OWORD *)v5 + 2) = *(_OWORD *)(v21 - 152);
    *((_OWORD *)v5 + 3) = v94;
    *(_OWORD *)v5 = v92;
    *((_OWORD *)v5 + 1) = v93;
    v95 = *(_OWORD *)(v21 - 120);
    v96 = *(_OWORD *)(v21 - 104);
    v97 = *(_OWORD *)(v21 - 72);
    *((_OWORD *)v5 + 6) = *(_OWORD *)(v21 - 88);
    *((_OWORD *)v5 + 7) = v97;
    *((_OWORD *)v5 + 4) = v95;
    *((_OWORD *)v5 + 5) = v96;
    v98 = *(_OWORD *)(v21 - 56);
    v99 = *(_OWORD *)(v21 - 40);
    v100 = *(_OWORD *)(v21 - 24);
    v5[22] = *(_QWORD *)(v21 - 8);
    *((_OWORD *)v5 + 9) = v99;
    *((_OWORD *)v5 + 10) = v100;
    *((_OWORD *)v5 + 8) = v98;
  }
  *(_QWORD *)(v21 - 192) = v110;
  v101 = v111;
  v102 = v112;
  v103 = v113;
  *(_OWORD *)(v21 - 136) = v114;
  *(_OWORD *)(v21 - 152) = v103;
  *(_OWORD *)(v21 - 168) = v102;
  *(_OWORD *)(v21 - 184) = v101;
  v104 = v115;
  v105 = v116;
  v106 = v117;
  *(_OWORD *)(v21 - 72) = v118;
  *(_OWORD *)(v21 - 88) = v106;
  *(_OWORD *)(v21 - 104) = v105;
  *(_OWORD *)(v21 - 120) = v104;
  result = v119;
  v108 = *(_OWORD *)v120;
  v109 = *(_OWORD *)&v120[16];
  *(_QWORD *)(v21 - 8) = v121;
  *(_OWORD *)(v21 - 24) = v109;
  *(_OWORD *)(v21 - 40) = v108;
  *(__n128 *)(v21 - 56) = result;
  return result;
}

BOOL sub_2233F8638(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[184];
  uint64_t v77;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 6);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 72);
      v7 = *(_QWORD *)(a1 + 120);
      if (v6 != v7)
      {
        if (v6 >= v7)
          return result;
        goto LABEL_50;
      }
      v8 = *(_QWORD *)(a2 - 64);
      v9 = *(_QWORD *)(a1 + 128);
      v10 = v8 < v9;
      if (v8 == v9
        && (v11 = *(_QWORD *)(a2 - 56), v12 = *(_QWORD *)(a1 + 136), v10 = v11 < v12, v11 == v12)
        && (v13 = *(_QWORD *)(a2 - 40), v14 = *(_QWORD *)(a1 + 152), v10 = v13 < v14, v13 == v14))
      {
        if (*(_QWORD *)(a2 - 48) < *(_QWORD *)(a1 + 144))
          goto LABEL_50;
      }
      else if (v10)
      {
LABEL_50:
        v56 = *(_QWORD *)a1;
        v57 = *(_OWORD *)(a1 + 152);
        *(_OWORD *)&v76[128] = *(_OWORD *)(a1 + 136);
        *(_OWORD *)&v76[144] = v57;
        *(_OWORD *)&v76[160] = *(_OWORD *)(a1 + 168);
        *(_QWORD *)&v76[176] = *(_QWORD *)(a1 + 184);
        v58 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)&v76[64] = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v76[80] = v58;
        v59 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)&v76[96] = *(_OWORD *)(a1 + 104);
        *(_OWORD *)&v76[112] = v59;
        v60 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)v76 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)&v76[16] = v60;
        v61 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)&v76[32] = *(_OWORD *)(a1 + 40);
        *(_OWORD *)&v76[48] = v61;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 192);
        v62 = *(_OWORD *)(a2 - 184);
        v63 = *(_OWORD *)(a2 - 168);
        v64 = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 40) = v64;
        *(_OWORD *)(a1 + 24) = v63;
        *(_OWORD *)(a1 + 8) = v62;
        v65 = *(_OWORD *)(a2 - 120);
        v66 = *(_OWORD *)(a2 - 104);
        v67 = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 104) = v67;
        *(_OWORD *)(a1 + 88) = v66;
        *(_OWORD *)(a1 + 72) = v65;
        v68 = *(_OWORD *)(a2 - 56);
        v69 = *(_OWORD *)(a2 - 40);
        v70 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 168) = v70;
        *(_OWORD *)(a1 + 152) = v69;
        *(_OWORD *)(a1 + 136) = v68;
        *(_QWORD *)(a2 - 192) = v56;
        v71 = *(_OWORD *)&v76[144];
        *(_OWORD *)(a2 - 56) = *(_OWORD *)&v76[128];
        *(_OWORD *)(a2 - 40) = v71;
        *(_OWORD *)(a2 - 24) = *(_OWORD *)&v76[160];
        *(_QWORD *)(a2 - 8) = *(_QWORD *)&v76[176];
        v72 = *(_OWORD *)&v76[80];
        *(_OWORD *)(a2 - 120) = *(_OWORD *)&v76[64];
        *(_OWORD *)(a2 - 104) = v72;
        v73 = *(_OWORD *)&v76[112];
        *(_OWORD *)(a2 - 88) = *(_OWORD *)&v76[96];
        *(_OWORD *)(a2 - 72) = v73;
        v74 = *(_OWORD *)&v76[16];
        *(_OWORD *)(a2 - 184) = *(_OWORD *)v76;
        *(_OWORD *)(a2 - 168) = v74;
        v75 = *(_OWORD *)&v76[48];
        *(_OWORD *)(a2 - 152) = *(_OWORD *)&v76[32];
        result = 1;
        *(_OWORD *)(a2 - 136) = v75;
        return result;
      }
      if (*(_QWORD *)(a2 - 48) == *(_QWORD *)(a1 + 144)
        && *(_QWORD *)(a2 - 56) == *(_QWORD *)(a1 + 136)
        && v8 == v9
        && *(_QWORD *)(a2 - 40) == *(_QWORD *)(a1 + 152))
      {
        if (!sub_2233F8C20(a2 - 192, a1))
          return 1;
        goto LABEL_50;
      }
      return result;
    case 3uLL:
      sub_2233F6ACC(a1, a1 + 192, a2 - 192);
      return 1;
    case 4uLL:
      sub_2233F8F10(a1, a1 + 192, a1 + 384, a2 - 192);
      return 1;
    case 5uLL:
      sub_2233F9428(a1, a1 + 192, a1 + 384, a1 + 576, a2 - 192);
      return 1;
    default:
      v15 = a1 + 384;
      sub_2233F6ACC(a1, a1 + 192, a1 + 384);
      v16 = a1 + 576;
      if (a1 + 576 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      while (2)
      {
        v30 = *(_QWORD *)(v16 + 120);
        v31 = *(_QWORD *)(v15 + 120);
        if (v30 == v31)
        {
          v32 = *(_QWORD *)(v16 + 128);
          v33 = *(_QWORD *)(v15 + 128);
          v34 = v32 < v33;
          if (v32 == v33)
          {
            v35 = *(_QWORD *)(v16 + 136);
            v36 = *(_QWORD *)(v15 + 136);
            v34 = v35 < v36;
            if (v35 == v36)
              v34 = *(_OWORD *)(v16 + 144) < *(_OWORD *)(v15 + 144);
          }
          if (!v34
            && (*(_QWORD *)(v16 + 144) != *(_QWORD *)(v15 + 144)
             || *(_QWORD *)(v16 + 136) != *(_QWORD *)(v15 + 136)
             || v32 != v33
             || *(_QWORD *)(v16 + 152) != *(_QWORD *)(v15 + 152)
             || !sub_2233F8C20(v16, v15)))
          {
            goto LABEL_14;
          }
        }
        else if (v30 >= v31)
        {
          goto LABEL_14;
        }
        v20 = *(_QWORD *)v16;
        *(_QWORD *)v76 = *(_QWORD *)v16;
        v37 = *(_OWORD *)(v16 + 120);
        *(_OWORD *)&v76[104] = *(_OWORD *)(v16 + 104);
        *(_OWORD *)&v76[120] = v37;
        v38 = *(_OWORD *)(v16 + 88);
        *(_OWORD *)&v76[72] = *(_OWORD *)(v16 + 72);
        *(_OWORD *)&v76[88] = v38;
        v77 = *(_QWORD *)(v16 + 184);
        v39 = *(_OWORD *)(v16 + 168);
        v40 = *(_OWORD *)(v16 + 136);
        *(_OWORD *)&v76[152] = *(_OWORD *)(v16 + 152);
        *(_OWORD *)&v76[168] = v39;
        *(_OWORD *)&v76[136] = v40;
        v41 = *(_OWORD *)(v16 + 24);
        *(_OWORD *)&v76[8] = *(_OWORD *)(v16 + 8);
        *(_OWORD *)&v76[24] = v41;
        v42 = *(_OWORD *)(v16 + 56);
        *(_OWORD *)&v76[40] = *(_OWORD *)(v16 + 40);
        *(_OWORD *)&v76[56] = v42;
        *(_QWORD *)v16 = *(_QWORD *)v15;
        v19 = v15 + 8;
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(v15 + 136);
        *(_OWORD *)(v16 + 152) = *(_OWORD *)(v15 + 152);
        *(_OWORD *)(v16 + 168) = *(_OWORD *)(v15 + 168);
        *(_QWORD *)(v16 + 184) = *(_QWORD *)(v15 + 184);
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(v15 + 72);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v15 + 88);
        *(_OWORD *)(v16 + 104) = *(_OWORD *)(v15 + 104);
        *(_OWORD *)(v16 + 120) = *(_OWORD *)(v15 + 120);
        *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v15 + 24);
        *(_OWORD *)(v16 + 40) = *(_OWORD *)(v15 + 40);
        *(_OWORD *)(v16 + 56) = *(_OWORD *)(v15 + 56);
        if (v15 == a1)
        {
          v15 = a1;
          goto LABEL_13;
        }
        v43 = v17;
        while (2)
        {
          v51 = (_QWORD *)(a1 + v43);
          v52 = *(_QWORD *)(a1 + v43 + 312);
          if (*(_QWORD *)&v76[120] != v52)
          {
            if (*(uint64_t *)&v76[120] >= v52)
              goto LABEL_12;
            goto LABEL_30;
          }
          v53 = v51[40];
          v54 = *(_QWORD *)&v76[128] < v53;
          if (*(_QWORD *)&v76[128] == v53)
          {
            v55 = *(_QWORD *)(a1 + v43 + 328);
            v54 = *(_QWORD *)&v76[136] < v55;
            if (*(_QWORD *)&v76[136] == v55)
              v54 = *(_OWORD *)&v76[144] < *(_OWORD *)(a1 + v43 + 336);
          }
          if (v54)
            goto LABEL_30;
          if (*(_QWORD *)&v76[144] != *(_QWORD *)(a1 + v43 + 336)
            || *(_OWORD *)&v76[128] != __PAIR128__(*(_QWORD *)(a1 + v43 + 328), v53)
            || *(_QWORD *)&v76[152] != *(_QWORD *)(a1 + v43 + 344))
          {
            goto LABEL_12;
          }
          if (sub_2233F8C20((uint64_t)v76, (uint64_t)(v51 + 24)))
          {
LABEL_30:
            v19 = v15 - 184;
            v15 -= 192;
            v51[48] = v51[24];
            v44 = (_OWORD *)(a1 + v43 + 392);
            *(_QWORD *)(a1 + v43 + 568) = *(_QWORD *)(a1 + v43 + 376);
            v45 = *(_OWORD *)(a1 + v43 + 216);
            *v44 = *(_OWORD *)(a1 + v43 + 200);
            v44[1] = v45;
            v46 = *(_OWORD *)(a1 + v43 + 248);
            v44[2] = *(_OWORD *)(a1 + v43 + 232);
            v44[3] = v46;
            v47 = *(_OWORD *)(a1 + v43 + 344);
            v44[8] = *(_OWORD *)(a1 + v43 + 328);
            v44[9] = v47;
            v44[10] = *(_OWORD *)(a1 + v43 + 360);
            v48 = *(_OWORD *)(a1 + v43 + 280);
            v44[4] = *(_OWORD *)(a1 + v43 + 264);
            v44[5] = v48;
            v49 = *(_OWORD *)(a1 + v43 + 296);
            v50 = *(_OWORD *)(a1 + v43 + 312);
            v43 -= 192;
            v44[6] = v49;
            v44[7] = v50;
            if (v43 == -384)
            {
              v19 = a1 + 8;
              v15 = a1;
              goto LABEL_12;
            }
            continue;
          }
          break;
        }
        v19 = a1 + v43 + 392;
        v15 = a1 + v43 + 384;
LABEL_12:
        v20 = *(_QWORD *)v76;
LABEL_13:
        *(_QWORD *)v15 = v20;
        v21 = *(_OWORD *)&v76[8];
        v22 = *(_OWORD *)&v76[24];
        v23 = *(_OWORD *)&v76[56];
        *(_OWORD *)(v19 + 32) = *(_OWORD *)&v76[40];
        *(_OWORD *)(v19 + 48) = v23;
        *(_OWORD *)v19 = v21;
        *(_OWORD *)(v19 + 16) = v22;
        v24 = *(_OWORD *)&v76[72];
        v25 = *(_OWORD *)&v76[88];
        v26 = *(_OWORD *)&v76[120];
        *(_OWORD *)(v19 + 96) = *(_OWORD *)&v76[104];
        *(_OWORD *)(v19 + 112) = v26;
        *(_OWORD *)(v19 + 64) = v24;
        *(_OWORD *)(v19 + 80) = v25;
        v27 = *(_OWORD *)&v76[136];
        v28 = *(_OWORD *)&v76[152];
        v29 = *(_OWORD *)&v76[168];
        *(_QWORD *)(v19 + 176) = v77;
        *(_OWORD *)(v19 + 144) = v28;
        *(_OWORD *)(v19 + 160) = v29;
        *(_OWORD *)(v19 + 128) = v27;
        if (++v18 == 8)
          return v16 + 192 == a2;
LABEL_14:
        v15 = v16;
        v17 += 192;
        v16 += 192;
        if (v16 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t sub_2233F8C20(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  __int128 v20;
  __int128 v21;

  v2 = (double *)(a1 + 160);
  v3 = (double *)(a2 + 160);
  if (vabdd_f64(*(double *)(a1 + 176), *(double *)(a2 + 176)) >= 50.0)
    return sub_2233E5070(v2, v3);
  v21 = *(_OWORD *)v2;
  sub_2233E5290((int64_t)&v21);
  v20 = *(_OWORD *)v3;
  sub_2233E5290((int64_t)&v20);
  if ((_QWORD)v21 != (_QWORD)v20 || *((_QWORD *)&v21 + 1) != *((_QWORD *)&v20 + 1))
    return sub_2233E5070(v2, v3);
  v8 = *(float *)a1;
  v9 = *(float *)a2;
  if (*(float *)a1 != *(float *)a2)
  {
    if ((LODWORD(v8) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v9) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      return sub_2233E5070(v2, v3);
    v12 = vabds_f32(v8, v9);
    v13 = fabsf(v8);
    v14 = fabsf(v9);
    if (v13 < v14)
      v13 = v14;
    v15 = v13 >= 1.0 ? v13 * 0.00000011921 : 0.00000011921;
    if (v12 > v15)
      return sub_2233E5070(v2, v3);
  }
  v10 = *(float *)(a1 + 4);
  v11 = *(float *)(a2 + 4);
  if (v10 == v11)
    return sub_2233F8DAC((uint64_t)&unk_25578BB59, a1, a2);
  if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    return sub_2233E5070(v2, v3);
  v16 = vabds_f32(v10, v11);
  v17 = fabsf(v10);
  v18 = fabsf(v11);
  if (v17 < v18)
    v17 = v18;
  v19 = v17 >= 1.0 ? v17 * 0.00000011921 : 0.00000011921;
  if (v16 <= v19)
    return sub_2233F8DAC((uint64_t)&unk_25578BB59, a1, a2);
  else
    return sub_2233E5070(v2, v3);
}

uint64_t sub_2233F8DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;

  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a3 + 48))
  {
    v9 = *(int *)(a2 + 112);
    v10 = dword_2245F5748;
    if (v9 > 5)
    {
      v11 = -1;
      v12 = *(int *)(a3 + 112);
      if (v12 <= 5)
        return v11 < v10[v12];
    }
    else
    {
      v11 = dword_2245F5748[v9];
      v12 = *(int *)(a3 + 112);
      if (v12 <= 5)
        return v11 < v10[v12];
    }
    return v11 < -1;
  }
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a3 + 56);
  if (v3 != v4)
  {
    if (v3 == -1)
    {
      v13 = *(_DWORD *)(a2 + 112);
      if (v13 == 1)
        return 0;
      if (v13 != 2)
      {
LABEL_18:
        v10 = dword_2245F5730;
        if (v13 > 5)
        {
          v11 = -1;
          v12 = *(int *)(a3 + 112);
          if (v12 > 5)
            return v11 < -1;
        }
        else
        {
          v11 = dword_2245F5730[v13];
          v12 = *(int *)(a3 + 112);
          if (v12 > 5)
            return v11 < -1;
        }
        return v11 < v10[v12];
      }
    }
    else
    {
      if (v4 != -1)
      {
LABEL_11:
        v13 = *(_DWORD *)(a2 + 112);
        goto LABEL_18;
      }
      v14 = *(_DWORD *)(a3 + 112);
      if (v14 != 1)
      {
        if (v14 != 2)
          goto LABEL_11;
        return 0;
      }
    }
    return 1;
  }
  v5 = *(int *)(a2 + 112);
  if (v5 > 5)
  {
    v6 = -1;
    v7 = *(int *)(a3 + 112);
    if (v7 > 5)
      return v6 < -1;
  }
  else
  {
    v6 = dword_2245F5748[v5];
    v7 = *(int *)(a3 + 112);
    if (v7 > 5)
      return v6 < -1;
  }
  return v6 < dword_2245F5748[v7];
}

uint64_t sub_2233F8F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  result = sub_2233F6ACC(a1, a2, a3);
  v9 = *(_QWORD *)(a4 + 120);
  v10 = *(_QWORD *)(a3 + 120);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a4 + 128);
    v12 = *(_QWORD *)(a3 + 128);
    v13 = v11 < v12;
    if (v11 == v12
      && (v14 = *(_QWORD *)(a4 + 136), v15 = *(_QWORD *)(a3 + 136), v13 = v14 < v15, v14 == v15)
      && (v16 = *(_QWORD *)(a4 + 152), v17 = *(_QWORD *)(a3 + 152), v13 = v16 < v17, v16 == v17))
    {
      if (*(_QWORD *)(a4 + 144) < *(_QWORD *)(a3 + 144))
        goto LABEL_11;
    }
    else if (v13)
    {
      goto LABEL_11;
    }
    if (*(_QWORD *)(a4 + 144) != *(_QWORD *)(a3 + 144))
      return result;
    if (*(_QWORD *)(a4 + 136) != *(_QWORD *)(a3 + 136))
      return result;
    if (v11 != v12)
      return result;
    if (*(_QWORD *)(a4 + 152) != *(_QWORD *)(a3 + 152))
      return result;
    result = sub_2233F8C20(a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if (v9 >= v10)
  {
    return result;
  }
LABEL_11:
  v18 = *(_QWORD *)a3;
  v88 = *(_OWORD *)(a3 + 136);
  v91 = *(_OWORD *)(a3 + 152);
  v94 = *(_OWORD *)(a3 + 168);
  v97 = *(_QWORD *)(a3 + 184);
  v76 = *(_OWORD *)(a3 + 72);
  v79 = *(_OWORD *)(a3 + 88);
  v82 = *(_OWORD *)(a3 + 104);
  v85 = *(_OWORD *)(a3 + 120);
  v64 = *(_OWORD *)(a3 + 8);
  v67 = *(_OWORD *)(a3 + 24);
  v70 = *(_OWORD *)(a3 + 40);
  v73 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v19 = *(_OWORD *)(a4 + 8);
  v20 = *(_OWORD *)(a4 + 24);
  v21 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a3 + 40) = v21;
  *(_OWORD *)(a3 + 24) = v20;
  *(_OWORD *)(a3 + 8) = v19;
  v22 = *(_OWORD *)(a4 + 72);
  v23 = *(_OWORD *)(a4 + 88);
  v24 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a4 + 120);
  *(_OWORD *)(a3 + 104) = v24;
  *(_OWORD *)(a3 + 88) = v23;
  *(_OWORD *)(a3 + 72) = v22;
  v25 = *(_OWORD *)(a4 + 136);
  v26 = *(_OWORD *)(a4 + 152);
  v27 = *(_OWORD *)(a4 + 168);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
  *(_OWORD *)(a3 + 168) = v27;
  *(_OWORD *)(a3 + 152) = v26;
  *(_OWORD *)(a3 + 136) = v25;
  *(_QWORD *)a4 = v18;
  *(_OWORD *)(a4 + 136) = v88;
  *(_OWORD *)(a4 + 152) = v91;
  *(_OWORD *)(a4 + 168) = v94;
  *(_QWORD *)(a4 + 184) = v97;
  *(_OWORD *)(a4 + 72) = v76;
  *(_OWORD *)(a4 + 88) = v79;
  *(_OWORD *)(a4 + 104) = v82;
  *(_OWORD *)(a4 + 120) = v85;
  *(_OWORD *)(a4 + 8) = v64;
  *(_OWORD *)(a4 + 24) = v67;
  *(_OWORD *)(a4 + 40) = v70;
  *(_OWORD *)(a4 + 56) = v73;
  v28 = *(_QWORD *)(a3 + 120);
  v29 = *(_QWORD *)(a2 + 120);
  if (v28 == v29)
  {
    v30 = *(_QWORD *)(a3 + 128);
    v31 = *(_QWORD *)(a2 + 128);
    v32 = v30 < v31;
    if (v30 == v31
      && (v33 = *(_QWORD *)(a3 + 136), v34 = *(_QWORD *)(a2 + 136), v32 = v33 < v34, v33 == v34)
      && (v35 = *(_QWORD *)(a3 + 152), v36 = *(_QWORD *)(a2 + 152), v32 = v35 < v36, v35 == v36))
    {
      if (*(_QWORD *)(a3 + 144) < *(_QWORD *)(a2 + 144))
        goto LABEL_27;
    }
    else if (v32)
    {
      goto LABEL_27;
    }
    if (*(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144))
      return result;
    if (*(_QWORD *)(a3 + 136) != *(_QWORD *)(a2 + 136))
      return result;
    if (v30 != v31)
      return result;
    if (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152))
      return result;
    result = sub_2233F8C20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v28 >= v29)
  {
    return result;
  }
LABEL_27:
  v37 = *(_QWORD *)a2;
  v89 = *(_OWORD *)(a2 + 136);
  v92 = *(_OWORD *)(a2 + 152);
  v95 = *(_OWORD *)(a2 + 168);
  v98 = *(_QWORD *)(a2 + 184);
  v77 = *(_OWORD *)(a2 + 72);
  v80 = *(_OWORD *)(a2 + 88);
  v83 = *(_OWORD *)(a2 + 104);
  v86 = *(_OWORD *)(a2 + 120);
  v65 = *(_OWORD *)(a2 + 8);
  v68 = *(_OWORD *)(a2 + 24);
  v71 = *(_OWORD *)(a2 + 40);
  v74 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v38 = *(_OWORD *)(a3 + 8);
  v39 = *(_OWORD *)(a3 + 24);
  v40 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v40;
  *(_OWORD *)(a2 + 24) = v39;
  *(_OWORD *)(a2 + 8) = v38;
  v41 = *(_OWORD *)(a3 + 72);
  v42 = *(_OWORD *)(a3 + 88);
  v43 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v43;
  *(_OWORD *)(a2 + 88) = v42;
  *(_OWORD *)(a2 + 72) = v41;
  v44 = *(_OWORD *)(a3 + 136);
  v45 = *(_OWORD *)(a3 + 152);
  v46 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v46;
  *(_OWORD *)(a2 + 152) = v45;
  *(_OWORD *)(a2 + 136) = v44;
  *(_QWORD *)a3 = v37;
  *(_OWORD *)(a3 + 136) = v89;
  *(_OWORD *)(a3 + 152) = v92;
  *(_OWORD *)(a3 + 168) = v95;
  *(_QWORD *)(a3 + 184) = v98;
  *(_OWORD *)(a3 + 72) = v77;
  *(_OWORD *)(a3 + 88) = v80;
  *(_OWORD *)(a3 + 104) = v83;
  *(_OWORD *)(a3 + 120) = v86;
  *(_OWORD *)(a3 + 8) = v65;
  *(_OWORD *)(a3 + 24) = v68;
  *(_OWORD *)(a3 + 40) = v71;
  *(_OWORD *)(a3 + 56) = v74;
  v47 = *(_QWORD *)(a2 + 120);
  v48 = *(_QWORD *)(a1 + 120);
  if (v47 != v48)
  {
    if (v47 >= v48)
      return result;
    goto LABEL_39;
  }
  v49 = *(_QWORD *)(a2 + 128);
  v50 = *(_QWORD *)(a1 + 128);
  v51 = v49 < v50;
  if (v49 == v50)
  {
    v52 = *(_QWORD *)(a2 + 136);
    v53 = *(_QWORD *)(a1 + 136);
    v51 = v52 < v53;
    if (v52 == v53)
      v51 = *(_OWORD *)(a2 + 144) < *(_OWORD *)(a1 + 144);
  }
  if (v51
    || *(_QWORD *)(a2 + 144) == *(_QWORD *)(a1 + 144)
    && *(_QWORD *)(a2 + 136) == *(_QWORD *)(a1 + 136)
    && v49 == v50
    && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a1 + 152)
    && (result = sub_2233F8C20(a2, a1), (_DWORD)result))
  {
LABEL_39:
    v54 = *(_QWORD *)a1;
    v90 = *(_OWORD *)(a1 + 136);
    v93 = *(_OWORD *)(a1 + 152);
    v96 = *(_OWORD *)(a1 + 168);
    v99 = *(_QWORD *)(a1 + 184);
    v78 = *(_OWORD *)(a1 + 72);
    v81 = *(_OWORD *)(a1 + 88);
    v84 = *(_OWORD *)(a1 + 104);
    v87 = *(_OWORD *)(a1 + 120);
    v66 = *(_OWORD *)(a1 + 8);
    v69 = *(_OWORD *)(a1 + 24);
    v72 = *(_OWORD *)(a1 + 40);
    v75 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v55 = *(_OWORD *)(a2 + 8);
    v56 = *(_OWORD *)(a2 + 24);
    v57 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v57;
    *(_OWORD *)(a1 + 24) = v56;
    *(_OWORD *)(a1 + 8) = v55;
    v58 = *(_OWORD *)(a2 + 72);
    v59 = *(_OWORD *)(a2 + 88);
    v60 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v60;
    *(_OWORD *)(a1 + 88) = v59;
    *(_OWORD *)(a1 + 72) = v58;
    v61 = *(_OWORD *)(a2 + 136);
    v62 = *(_OWORD *)(a2 + 152);
    v63 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v63;
    *(_OWORD *)(a1 + 152) = v62;
    *(_OWORD *)(a1 + 136) = v61;
    *(_QWORD *)a2 = v54;
    *(_OWORD *)(a2 + 136) = v90;
    *(_OWORD *)(a2 + 152) = v93;
    *(_OWORD *)(a2 + 168) = v96;
    *(_QWORD *)(a2 + 184) = v99;
    *(_OWORD *)(a2 + 72) = v78;
    *(_OWORD *)(a2 + 88) = v81;
    *(_OWORD *)(a2 + 104) = v84;
    *(_OWORD *)(a2 + 120) = v87;
    *(_OWORD *)(a2 + 8) = v66;
    *(_OWORD *)(a2 + 24) = v69;
    *(_OWORD *)(a2 + 40) = v72;
    *(_OWORD *)(a2 + 56) = v75;
  }
  return result;
}

uint64_t sub_2233F9428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  result = sub_2233F8F10(a1, a2, a3, a4);
  v11 = *(_QWORD *)(a5 + 120);
  v12 = *(_QWORD *)(a4 + 120);
  if (v11 == v12)
  {
    v13 = *(_QWORD *)(a5 + 128);
    v14 = *(_QWORD *)(a4 + 128);
    v15 = v13 < v14;
    if (v13 == v14
      && (v16 = *(_QWORD *)(a5 + 136), v17 = *(_QWORD *)(a4 + 136), v15 = v16 < v17, v16 == v17)
      && (v18 = *(_QWORD *)(a5 + 152), v19 = *(_QWORD *)(a4 + 152), v15 = v18 < v19, v18 == v19))
    {
      if (*(_QWORD *)(a5 + 144) < *(_QWORD *)(a4 + 144))
        goto LABEL_11;
    }
    else if (v15)
    {
      goto LABEL_11;
    }
    if (*(_QWORD *)(a5 + 144) != *(_QWORD *)(a4 + 144))
      return result;
    if (*(_QWORD *)(a5 + 136) != *(_QWORD *)(a4 + 136))
      return result;
    if (v13 != v14)
      return result;
    if (*(_QWORD *)(a5 + 152) != *(_QWORD *)(a4 + 152))
      return result;
    result = sub_2233F8C20(a5, a4);
    if (!(_DWORD)result)
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
LABEL_11:
  v20 = *(_QWORD *)a4;
  v117 = *(_OWORD *)(a4 + 136);
  v121 = *(_OWORD *)(a4 + 152);
  v125 = *(_OWORD *)(a4 + 168);
  v129 = *(_QWORD *)(a4 + 184);
  v101 = *(_OWORD *)(a4 + 72);
  v105 = *(_OWORD *)(a4 + 88);
  v109 = *(_OWORD *)(a4 + 104);
  v113 = *(_OWORD *)(a4 + 120);
  v85 = *(_OWORD *)(a4 + 8);
  v89 = *(_OWORD *)(a4 + 24);
  v93 = *(_OWORD *)(a4 + 40);
  v97 = *(_OWORD *)(a4 + 56);
  *(_QWORD *)a4 = *(_QWORD *)a5;
  v21 = *(_OWORD *)(a5 + 8);
  v22 = *(_OWORD *)(a5 + 24);
  v23 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a4 + 40) = v23;
  *(_OWORD *)(a4 + 24) = v22;
  *(_OWORD *)(a4 + 8) = v21;
  v24 = *(_OWORD *)(a5 + 72);
  v25 = *(_OWORD *)(a5 + 88);
  v26 = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a4 + 104) = v26;
  *(_OWORD *)(a4 + 88) = v25;
  *(_OWORD *)(a4 + 72) = v24;
  v27 = *(_OWORD *)(a5 + 136);
  v28 = *(_OWORD *)(a5 + 152);
  v29 = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(a5 + 184);
  *(_OWORD *)(a4 + 168) = v29;
  *(_OWORD *)(a4 + 152) = v28;
  *(_OWORD *)(a4 + 136) = v27;
  *(_QWORD *)a5 = v20;
  *(_OWORD *)(a5 + 136) = v117;
  *(_OWORD *)(a5 + 152) = v121;
  *(_OWORD *)(a5 + 168) = v125;
  *(_QWORD *)(a5 + 184) = v129;
  *(_OWORD *)(a5 + 72) = v101;
  *(_OWORD *)(a5 + 88) = v105;
  *(_OWORD *)(a5 + 104) = v109;
  *(_OWORD *)(a5 + 120) = v113;
  *(_OWORD *)(a5 + 8) = v85;
  *(_OWORD *)(a5 + 24) = v89;
  *(_OWORD *)(a5 + 40) = v93;
  *(_OWORD *)(a5 + 56) = v97;
  v30 = *(_QWORD *)(a4 + 120);
  v31 = *(_QWORD *)(a3 + 120);
  if (v30 == v31)
  {
    v32 = *(_QWORD *)(a4 + 128);
    v33 = *(_QWORD *)(a3 + 128);
    v34 = v32 < v33;
    if (v32 == v33
      && (v35 = *(_QWORD *)(a4 + 136), v36 = *(_QWORD *)(a3 + 136), v34 = v35 < v36, v35 == v36)
      && (v37 = *(_QWORD *)(a4 + 152), v38 = *(_QWORD *)(a3 + 152), v34 = v37 < v38, v37 == v38))
    {
      if (*(_QWORD *)(a4 + 144) < *(_QWORD *)(a3 + 144))
        goto LABEL_27;
    }
    else if (v34)
    {
      goto LABEL_27;
    }
    if (*(_QWORD *)(a4 + 144) != *(_QWORD *)(a3 + 144))
      return result;
    if (*(_QWORD *)(a4 + 136) != *(_QWORD *)(a3 + 136))
      return result;
    if (v32 != v33)
      return result;
    if (*(_QWORD *)(a4 + 152) != *(_QWORD *)(a3 + 152))
      return result;
    result = sub_2233F8C20(a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if (v30 >= v31)
  {
    return result;
  }
LABEL_27:
  v39 = *(_QWORD *)a3;
  v118 = *(_OWORD *)(a3 + 136);
  v122 = *(_OWORD *)(a3 + 152);
  v126 = *(_OWORD *)(a3 + 168);
  v130 = *(_QWORD *)(a3 + 184);
  v102 = *(_OWORD *)(a3 + 72);
  v106 = *(_OWORD *)(a3 + 88);
  v110 = *(_OWORD *)(a3 + 104);
  v114 = *(_OWORD *)(a3 + 120);
  v86 = *(_OWORD *)(a3 + 8);
  v90 = *(_OWORD *)(a3 + 24);
  v94 = *(_OWORD *)(a3 + 40);
  v98 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v40 = *(_OWORD *)(a4 + 8);
  v41 = *(_OWORD *)(a4 + 24);
  v42 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
  *(_OWORD *)(a3 + 40) = v42;
  *(_OWORD *)(a3 + 24) = v41;
  *(_OWORD *)(a3 + 8) = v40;
  v43 = *(_OWORD *)(a4 + 72);
  v44 = *(_OWORD *)(a4 + 88);
  v45 = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a4 + 120);
  *(_OWORD *)(a3 + 104) = v45;
  *(_OWORD *)(a3 + 88) = v44;
  *(_OWORD *)(a3 + 72) = v43;
  v46 = *(_OWORD *)(a4 + 136);
  v47 = *(_OWORD *)(a4 + 152);
  v48 = *(_OWORD *)(a4 + 168);
  *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 184);
  *(_OWORD *)(a3 + 168) = v48;
  *(_OWORD *)(a3 + 152) = v47;
  *(_OWORD *)(a3 + 136) = v46;
  *(_QWORD *)a4 = v39;
  *(_OWORD *)(a4 + 136) = v118;
  *(_OWORD *)(a4 + 152) = v122;
  *(_OWORD *)(a4 + 168) = v126;
  *(_QWORD *)(a4 + 184) = v130;
  *(_OWORD *)(a4 + 72) = v102;
  *(_OWORD *)(a4 + 88) = v106;
  *(_OWORD *)(a4 + 104) = v110;
  *(_OWORD *)(a4 + 120) = v114;
  *(_OWORD *)(a4 + 8) = v86;
  *(_OWORD *)(a4 + 24) = v90;
  *(_OWORD *)(a4 + 40) = v94;
  *(_OWORD *)(a4 + 56) = v98;
  v49 = *(_QWORD *)(a3 + 120);
  v50 = *(_QWORD *)(a2 + 120);
  if (v49 == v50)
  {
    v51 = *(_QWORD *)(a3 + 128);
    v52 = *(_QWORD *)(a2 + 128);
    v53 = v51 < v52;
    if (v51 == v52
      && (v54 = *(_QWORD *)(a3 + 136), v55 = *(_QWORD *)(a2 + 136), v53 = v54 < v55, v54 == v55)
      && (v56 = *(_QWORD *)(a3 + 152), v57 = *(_QWORD *)(a2 + 152), v53 = v56 < v57, v56 == v57))
    {
      if (*(_QWORD *)(a3 + 144) < *(_QWORD *)(a2 + 144))
        goto LABEL_43;
    }
    else if (v53)
    {
      goto LABEL_43;
    }
    if (*(_QWORD *)(a3 + 144) != *(_QWORD *)(a2 + 144))
      return result;
    if (*(_QWORD *)(a3 + 136) != *(_QWORD *)(a2 + 136))
      return result;
    if (v51 != v52)
      return result;
    if (*(_QWORD *)(a3 + 152) != *(_QWORD *)(a2 + 152))
      return result;
    result = sub_2233F8C20(a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if (v49 >= v50)
  {
    return result;
  }
LABEL_43:
  v58 = *(_QWORD *)a2;
  v119 = *(_OWORD *)(a2 + 136);
  v123 = *(_OWORD *)(a2 + 152);
  v127 = *(_OWORD *)(a2 + 168);
  v131 = *(_QWORD *)(a2 + 184);
  v103 = *(_OWORD *)(a2 + 72);
  v107 = *(_OWORD *)(a2 + 88);
  v111 = *(_OWORD *)(a2 + 104);
  v115 = *(_OWORD *)(a2 + 120);
  v87 = *(_OWORD *)(a2 + 8);
  v91 = *(_OWORD *)(a2 + 24);
  v95 = *(_OWORD *)(a2 + 40);
  v99 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v59 = *(_OWORD *)(a3 + 8);
  v60 = *(_OWORD *)(a3 + 24);
  v61 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v61;
  *(_OWORD *)(a2 + 24) = v60;
  *(_OWORD *)(a2 + 8) = v59;
  v62 = *(_OWORD *)(a3 + 72);
  v63 = *(_OWORD *)(a3 + 88);
  v64 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v64;
  *(_OWORD *)(a2 + 88) = v63;
  *(_OWORD *)(a2 + 72) = v62;
  v65 = *(_OWORD *)(a3 + 136);
  v66 = *(_OWORD *)(a3 + 152);
  v67 = *(_OWORD *)(a3 + 168);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v67;
  *(_OWORD *)(a2 + 152) = v66;
  *(_OWORD *)(a2 + 136) = v65;
  *(_QWORD *)a3 = v58;
  *(_OWORD *)(a3 + 136) = v119;
  *(_OWORD *)(a3 + 152) = v123;
  *(_OWORD *)(a3 + 168) = v127;
  *(_QWORD *)(a3 + 184) = v131;
  *(_OWORD *)(a3 + 72) = v103;
  *(_OWORD *)(a3 + 88) = v107;
  *(_OWORD *)(a3 + 104) = v111;
  *(_OWORD *)(a3 + 120) = v115;
  *(_OWORD *)(a3 + 8) = v87;
  *(_OWORD *)(a3 + 24) = v91;
  *(_OWORD *)(a3 + 40) = v95;
  *(_OWORD *)(a3 + 56) = v99;
  v68 = *(_QWORD *)(a2 + 120);
  v69 = *(_QWORD *)(a1 + 120);
  if (v68 != v69)
  {
    if (v68 >= v69)
      return result;
    goto LABEL_55;
  }
  v70 = *(_QWORD *)(a2 + 128);
  v71 = *(_QWORD *)(a1 + 128);
  v72 = v70 < v71;
  if (v70 == v71)
  {
    v73 = *(_QWORD *)(a2 + 136);
    v74 = *(_QWORD *)(a1 + 136);
    v72 = v73 < v74;
    if (v73 == v74)
      v72 = *(_OWORD *)(a2 + 144) < *(_OWORD *)(a1 + 144);
  }
  if (v72
    || *(_QWORD *)(a2 + 144) == *(_QWORD *)(a1 + 144)
    && *(_QWORD *)(a2 + 136) == *(_QWORD *)(a1 + 136)
    && v70 == v71
    && *(_QWORD *)(a2 + 152) == *(_QWORD *)(a1 + 152)
    && (result = sub_2233F8C20(a2, a1), (_DWORD)result))
  {
LABEL_55:
    v75 = *(_QWORD *)a1;
    v120 = *(_OWORD *)(a1 + 136);
    v124 = *(_OWORD *)(a1 + 152);
    v128 = *(_OWORD *)(a1 + 168);
    v132 = *(_QWORD *)(a1 + 184);
    v104 = *(_OWORD *)(a1 + 72);
    v108 = *(_OWORD *)(a1 + 88);
    v112 = *(_OWORD *)(a1 + 104);
    v116 = *(_OWORD *)(a1 + 120);
    v88 = *(_OWORD *)(a1 + 8);
    v92 = *(_OWORD *)(a1 + 24);
    v96 = *(_OWORD *)(a1 + 40);
    v100 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v76 = *(_OWORD *)(a2 + 8);
    v77 = *(_OWORD *)(a2 + 24);
    v78 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v78;
    *(_OWORD *)(a1 + 24) = v77;
    *(_OWORD *)(a1 + 8) = v76;
    v79 = *(_OWORD *)(a2 + 72);
    v80 = *(_OWORD *)(a2 + 88);
    v81 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v81;
    *(_OWORD *)(a1 + 88) = v80;
    *(_OWORD *)(a1 + 72) = v79;
    v82 = *(_OWORD *)(a2 + 136);
    v83 = *(_OWORD *)(a2 + 152);
    v84 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v84;
    *(_OWORD *)(a1 + 152) = v83;
    *(_OWORD *)(a1 + 136) = v82;
    *(_QWORD *)a2 = v75;
    *(_OWORD *)(a2 + 136) = v120;
    *(_OWORD *)(a2 + 152) = v124;
    *(_OWORD *)(a2 + 168) = v128;
    *(_QWORD *)(a2 + 184) = v132;
    *(_OWORD *)(a2 + 72) = v104;
    *(_OWORD *)(a2 + 88) = v108;
    *(_OWORD *)(a2 + 104) = v112;
    *(_OWORD *)(a2 + 120) = v116;
    *(_OWORD *)(a2 + 8) = v88;
    *(_OWORD *)(a2 + 24) = v92;
    *(_OWORD *)(a2 + 40) = v96;
    *(_OWORD *)(a2 + 56) = v100;
  }
  return result;
}

uint64_t sub_2233F9AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 192;
    if (a2 - a1 >= 193)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 192 * v10;
      do
      {
        sub_2233F9F1C(a1, a4, v9, v12);
        v12 -= 192;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (__int128 *)(a1 + 8);
      v15 = a2;
      while (1)
      {
        v26 = *(_QWORD *)(v15 + 120);
        v27 = *(_QWORD *)(a1 + 120);
        if (v26 == v27)
        {
          v28 = *(_QWORD *)(v15 + 128);
          v29 = *(_QWORD *)(a1 + 128);
          v30 = v28 < v29;
          if (v28 == v29)
          {
            v31 = *(_QWORD *)(v15 + 136);
            v32 = *(_QWORD *)(a1 + 136);
            v30 = v31 < v32;
            if (v31 == v32)
              v30 = *(_OWORD *)(v15 + 144) < *(_OWORD *)(a1 + 144);
          }
          if (!v30
            && (*(_QWORD *)(v15 + 144) != *(_QWORD *)(a1 + 144)
             || *(_QWORD *)(v15 + 136) != *(_QWORD *)(a1 + 136)
             || v28 != v29
             || *(_QWORD *)(v15 + 152) != *(_QWORD *)(a1 + 152)
             || !sub_2233F8C20(v15, a1)))
          {
            goto LABEL_8;
          }
        }
        else if (v26 >= v27)
        {
          goto LABEL_8;
        }
        v16 = *(_QWORD *)v15;
        v63 = *(_OWORD *)(v15 + 136);
        v65 = *(_OWORD *)(v15 + 152);
        v67 = *(_OWORD *)(v15 + 168);
        v69 = *(_QWORD *)(v15 + 184);
        v55 = *(_OWORD *)(v15 + 72);
        v57 = *(_OWORD *)(v15 + 88);
        v59 = *(_OWORD *)(v15 + 104);
        v61 = *(_OWORD *)(v15 + 120);
        v47 = *(_OWORD *)(v15 + 8);
        v49 = *(_OWORD *)(v15 + 24);
        v51 = *(_OWORD *)(v15 + 40);
        v53 = *(_OWORD *)(v15 + 56);
        *(_QWORD *)v15 = *(_QWORD *)a1;
        v17 = *v14;
        v18 = *(_OWORD *)(a1 + 24);
        v19 = *(_OWORD *)(a1 + 40);
        *(_OWORD *)(v15 + 56) = *(_OWORD *)(a1 + 56);
        *(_OWORD *)(v15 + 40) = v19;
        *(_OWORD *)(v15 + 24) = v18;
        *(_OWORD *)(v15 + 8) = v17;
        v20 = *(_OWORD *)(a1 + 72);
        v21 = *(_OWORD *)(a1 + 88);
        v22 = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(v15 + 120) = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(v15 + 104) = v22;
        *(_OWORD *)(v15 + 88) = v21;
        *(_OWORD *)(v15 + 72) = v20;
        v23 = *(_OWORD *)(a1 + 136);
        v24 = *(_OWORD *)(a1 + 152);
        v25 = *(_OWORD *)(a1 + 168);
        *(_QWORD *)(v15 + 184) = *(_QWORD *)(a1 + 184);
        *(_OWORD *)(v15 + 168) = v25;
        *(_OWORD *)(v15 + 152) = v24;
        *(_OWORD *)(v15 + 136) = v23;
        *(_QWORD *)a1 = v16;
        *(_OWORD *)(a1 + 136) = v63;
        *(_OWORD *)(a1 + 152) = v65;
        *(_OWORD *)(a1 + 168) = v67;
        *(_QWORD *)(a1 + 184) = v69;
        *(_OWORD *)(a1 + 72) = v55;
        *(_OWORD *)(a1 + 88) = v57;
        *(_OWORD *)(a1 + 104) = v59;
        *(_OWORD *)(a1 + 120) = v61;
        *v14 = v47;
        *(_OWORD *)(a1 + 24) = v49;
        *(_OWORD *)(a1 + 40) = v51;
        *(_OWORD *)(a1 + 56) = v53;
        sub_2233F9F1C(a1, a4, v9, a1);
LABEL_8:
        v15 += 192;
        if (v15 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 193)
    {
      v33 = v8 / 0xC0uLL;
      v34 = a2 - 192;
      do
      {
        while (1)
        {
          v35 = *(_QWORD *)a1;
          v64 = *(_OWORD *)(a1 + 136);
          v66 = *(_OWORD *)(a1 + 152);
          v68 = *(_OWORD *)(a1 + 168);
          v70 = *(_QWORD *)(a1 + 184);
          v56 = *(_OWORD *)(a1 + 72);
          v58 = *(_OWORD *)(a1 + 88);
          v60 = *(_OWORD *)(a1 + 104);
          v62 = *(_OWORD *)(a1 + 120);
          v48 = *(_OWORD *)(a1 + 8);
          v50 = *(_OWORD *)(a1 + 24);
          v52 = *(_OWORD *)(a1 + 40);
          v54 = *(_OWORD *)(a1 + 56);
          v36 = sub_2233FA470(a1, a4, v33);
          if (v34 != v36)
            break;
          *(_OWORD *)(v36 + 136) = v64;
          *(_OWORD *)(v36 + 152) = v66;
          *(_OWORD *)(v36 + 168) = v68;
          *(_OWORD *)(v36 + 72) = v56;
          *(_OWORD *)(v36 + 88) = v58;
          *(_OWORD *)(v36 + 104) = v60;
          *(_OWORD *)(v36 + 120) = v62;
          *(_OWORD *)(v36 + 8) = v48;
          *(_OWORD *)(v36 + 24) = v50;
          *(_OWORD *)(v36 + 40) = v52;
          *(_QWORD *)v36 = v35;
          *(_QWORD *)(v36 + 184) = v70;
          *(_OWORD *)(v36 + 56) = v54;
          v34 -= 192;
          v30 = v33-- <= 2;
          if (v30)
            return v13;
        }
        *(_QWORD *)v36 = *(_QWORD *)v34;
        v37 = *(_OWORD *)(v34 + 8);
        v38 = *(_OWORD *)(v34 + 24);
        v39 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v36 + 56) = *(_OWORD *)(v34 + 56);
        *(_OWORD *)(v36 + 40) = v39;
        *(_OWORD *)(v36 + 24) = v38;
        *(_OWORD *)(v36 + 8) = v37;
        v40 = *(_OWORD *)(v34 + 72);
        v41 = *(_OWORD *)(v34 + 88);
        v42 = *(_OWORD *)(v34 + 104);
        *(_OWORD *)(v36 + 120) = *(_OWORD *)(v34 + 120);
        *(_OWORD *)(v36 + 104) = v42;
        *(_OWORD *)(v36 + 88) = v41;
        *(_OWORD *)(v36 + 72) = v40;
        v43 = *(_OWORD *)(v34 + 136);
        v44 = *(_OWORD *)(v34 + 152);
        v45 = *(_OWORD *)(v34 + 168);
        *(_QWORD *)(v36 + 184) = *(_QWORD *)(v34 + 184);
        *(_OWORD *)(v36 + 168) = v45;
        *(_OWORD *)(v36 + 152) = v44;
        *(_OWORD *)(v36 + 136) = v43;
        *(_QWORD *)v34 = v35;
        *(_OWORD *)(v34 + 136) = v64;
        *(_OWORD *)(v34 + 152) = v66;
        *(_OWORD *)(v34 + 168) = v68;
        *(_QWORD *)(v34 + 184) = v70;
        *(_OWORD *)(v34 + 72) = v56;
        *(_OWORD *)(v34 + 88) = v58;
        *(_OWORD *)(v34 + 104) = v60;
        *(_OWORD *)(v34 + 120) = v62;
        *(_OWORD *)(v34 + 8) = v48;
        *(_OWORD *)(v34 + 24) = v50;
        *(_OWORD *)(v34 + 40) = v52;
        *(_OWORD *)(v34 + 56) = v54;
        sub_2233FA62C(a1, v36 + 192, a4, 0xAAAAAAAAAAAAAAABLL * ((v36 + 192 - a1) >> 6));
        v34 -= 192;
        v30 = v33-- <= 2;
      }
      while (!v30);
    }
    return v13;
  }
  return a3;
}

__n128 sub_2233F9F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  __n128 result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[32];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v6 = a3 - 2;
  if (a3 < 2)
    return result;
  v99 = v4;
  v100 = v5;
  v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 6)))
    return result;
  v11 = (0x5555555555555556 * ((a4 - a1) >> 6)) | 1;
  v12 = a1 + 192 * v11;
  v13 = 0x5555555555555556 * ((a4 - a1) >> 6) + 2;
  if (v13 >= a3)
    goto LABEL_20;
  v14 = *(_QWORD *)(a1 + 192 * v11 + 120);
  v15 = *(_QWORD *)(v12 + 312);
  if (v14 == v15)
  {
    v16 = *(_QWORD *)(a1 + 192 * v11 + 128);
    v17 = *(_QWORD *)(v12 + 320);
    v18 = v16 < v17;
    if (v16 == v17)
    {
      v19 = *(_QWORD *)(a1 + 192 * v11 + 136);
      v20 = *(_QWORD *)(v12 + 328);
      v18 = v19 < v20;
      if (v19 == v20)
        v18 = *(_OWORD *)(a1 + 192 * v11 + 144) < *(_OWORD *)(v12 + 336);
    }
    if (!v18)
    {
      if (*(_QWORD *)(a1 + 192 * v11 + 144) != *(_QWORD *)(v12 + 336)
        || *(_QWORD *)(a1 + 192 * v11 + 136) != *(_QWORD *)(v12 + 328))
      {
        goto LABEL_20;
      }
      if (v16 != v17 || *(_QWORD *)(a1 + 192 * v11 + 152) != *(_QWORD *)(v12 + 344))
        goto LABEL_20;
      v22 = v9;
      v23 = sub_2233F8C20(a1 + 192 * v11, v12 + 192);
      v9 = v22;
      if (!v23)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v14 < v15)
  {
LABEL_19:
    v12 += 192;
    v11 = v13;
  }
LABEL_20:
  v25 = *(_QWORD *)(v12 + 120);
  v26 = *(_QWORD *)(a4 + 120);
  if (v25 == v26)
  {
    v27 = *(_QWORD *)(v12 + 128);
    v28 = *(_QWORD *)(a4 + 128);
    v29 = v27 < v28;
    if (v27 == v28)
    {
      v30 = *(_QWORD *)(v12 + 136);
      v31 = *(_QWORD *)(a4 + 136);
      v29 = v30 < v31;
      if (v30 == v31)
        v29 = *(_OWORD *)(v12 + 144) < *(_OWORD *)(a4 + 144);
    }
    if (v29)
      return result;
    if (*(_QWORD *)(v12 + 144) == *(_QWORD *)(a4 + 144)
      && *(_QWORD *)(v12 + 136) == *(_QWORD *)(a4 + 136)
      && v27 == v28
      && *(_QWORD *)(v12 + 152) == *(_QWORD *)(a4 + 152))
    {
      v33 = v9;
      v34 = sub_2233F8C20(v12, a4);
      v9 = v33;
      if ((v34 & 1) != 0)
        return result;
    }
  }
  else if (v25 < v26)
  {
    return result;
  }
  v35 = *(_QWORD *)a4;
  v87 = *(_QWORD *)a4;
  *(_OWORD *)v96 = *(_OWORD *)(a4 + 136);
  *(_OWORD *)&v96[16] = *(_OWORD *)(a4 + 152);
  v97 = *(_OWORD *)(a4 + 168);
  v98 = *(_QWORD *)(a4 + 184);
  v36 = *(_OWORD *)(a4 + 88);
  v92 = *(_OWORD *)(a4 + 72);
  v93 = v36;
  v37 = *(_OWORD *)(a4 + 120);
  v94 = *(_OWORD *)(a4 + 104);
  v95 = v37;
  v38 = *(_OWORD *)(a4 + 24);
  v88 = *(_OWORD *)(a4 + 8);
  v89 = v38;
  v39 = *(_OWORD *)(a4 + 56);
  v90 = *(_OWORD *)(a4 + 40);
  v91 = v39;
  *(_QWORD *)a4 = *(_QWORD *)v12;
  v40 = v12 + 8;
  v41 = *(_OWORD *)(v12 + 8);
  v42 = *(_OWORD *)(v12 + 24);
  v43 = *(_OWORD *)(v12 + 40);
  *(_OWORD *)(a4 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(a4 + 40) = v43;
  *(_OWORD *)(a4 + 24) = v42;
  *(_OWORD *)(a4 + 8) = v41;
  v44 = *(_OWORD *)(v12 + 72);
  v45 = *(_OWORD *)(v12 + 88);
  v46 = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(v12 + 120);
  *(_OWORD *)(a4 + 104) = v46;
  *(_OWORD *)(a4 + 88) = v45;
  *(_OWORD *)(a4 + 72) = v44;
  v47 = *(_OWORD *)(v12 + 136);
  v48 = *(_OWORD *)(v12 + 152);
  v49 = *(_OWORD *)(v12 + 168);
  *(_QWORD *)(a4 + 184) = *(_QWORD *)(v12 + 184);
  *(_OWORD *)(a4 + 168) = v49;
  *(_OWORD *)(a4 + 152) = v48;
  *(_OWORD *)(a4 + 136) = v47;
  if (v9 < v11)
    goto LABEL_71;
  while (1)
  {
    v59 = v12;
    v60 = 2 * v11;
    v11 = (2 * v11) | 1;
    v12 = a1 + 192 * v11;
    v61 = v60 + 2;
    if (v60 + 2 >= a3)
      goto LABEL_56;
    v62 = *(_QWORD *)(a1 + 192 * v11 + 120);
    v63 = *(_QWORD *)(v12 + 312);
    if (v62 != v63)
    {
      if (v62 >= v63)
        goto LABEL_56;
LABEL_55:
      v12 += 192;
      v11 = v61;
      goto LABEL_56;
    }
    v64 = *(_QWORD *)(a1 + 192 * v11 + 128);
    v65 = *(_QWORD *)(v12 + 320);
    v66 = v64 < v65;
    if (v64 == v65)
    {
      v67 = *(_QWORD *)(a1 + 192 * v11 + 136);
      v68 = *(_QWORD *)(v12 + 328);
      v66 = v67 < v68;
      if (v67 == v68)
        v66 = *(_OWORD *)(a1 + 192 * v11 + 144) < *(_OWORD *)(v12 + 336);
    }
    if (v66)
      goto LABEL_55;
    if (*(_QWORD *)(a1 + 192 * v11 + 144) == *(_QWORD *)(v12 + 336)
      && *(_QWORD *)(a1 + 192 * v11 + 136) == *(_QWORD *)(v12 + 328)
      && v64 == v65
      && *(_QWORD *)(a1 + 192 * v11 + 152) == *(_QWORD *)(v12 + 344))
    {
      v86 = v9;
      v70 = sub_2233F8C20(a1 + 192 * v11, v12 + 192);
      v9 = v86;
      if (v70)
        goto LABEL_55;
    }
LABEL_56:
    v71 = *(_QWORD *)(v12 + 120);
    if (v71 == (_QWORD)v95)
      break;
    if (v71 < (uint64_t)v95)
      goto LABEL_69;
LABEL_38:
    *(_QWORD *)v59 = *(_QWORD *)v12;
    v40 = v12 + 8;
    v50 = *(_OWORD *)(v12 + 8);
    v51 = *(_OWORD *)(v12 + 24);
    v52 = *(_OWORD *)(v12 + 40);
    *(_OWORD *)(v59 + 56) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)(v59 + 40) = v52;
    *(_OWORD *)(v59 + 24) = v51;
    *(_OWORD *)(v59 + 8) = v50;
    v53 = *(_OWORD *)(v12 + 72);
    v54 = *(_OWORD *)(v12 + 88);
    v55 = *(_OWORD *)(v12 + 104);
    *(_OWORD *)(v59 + 120) = *(_OWORD *)(v12 + 120);
    *(_OWORD *)(v59 + 104) = v55;
    *(_OWORD *)(v59 + 88) = v54;
    *(_OWORD *)(v59 + 72) = v53;
    v56 = *(_OWORD *)(v12 + 136);
    v57 = *(_OWORD *)(v12 + 152);
    v58 = *(_OWORD *)(v12 + 168);
    *(_QWORD *)(v59 + 184) = *(_QWORD *)(v12 + 184);
    *(_OWORD *)(v59 + 168) = v58;
    *(_OWORD *)(v59 + 152) = v57;
    *(_OWORD *)(v59 + 136) = v56;
    if (v9 < v11)
      goto LABEL_70;
  }
  v72 = *(_QWORD *)(v12 + 128);
  v73 = v72 < *((_QWORD *)&v95 + 1);
  if (v72 == *((_QWORD *)&v95 + 1))
  {
    v74 = *(_QWORD *)(v12 + 136);
    v73 = v74 < *(_QWORD *)v96;
    if (v74 == *(_QWORD *)v96)
      v73 = *(_OWORD *)(v12 + 144) < *(_OWORD *)&v96[8];
  }
  if (!v73)
  {
    if (*(_QWORD *)(v12 + 144) != *(_QWORD *)&v96[8] || *(_QWORD *)(v12 + 136) != *(_QWORD *)v96)
      goto LABEL_38;
    if (v72 != *((_QWORD *)&v95 + 1) || *(_QWORD *)(v12 + 152) != *(_QWORD *)&v96[16])
      goto LABEL_38;
    v76 = v9;
    v77 = sub_2233F8C20(v12, (uint64_t)&v87);
    v9 = v76;
    if ((v77 & 1) == 0)
      goto LABEL_38;
  }
LABEL_69:
  v12 = v59;
LABEL_70:
  v35 = v87;
LABEL_71:
  *(_QWORD *)v12 = v35;
  v78 = v88;
  v79 = v89;
  v80 = v91;
  *(_OWORD *)(v40 + 32) = v90;
  *(_OWORD *)(v40 + 48) = v80;
  *(_OWORD *)v40 = v78;
  *(_OWORD *)(v40 + 16) = v79;
  v81 = v92;
  v82 = v93;
  v83 = v95;
  *(_OWORD *)(v40 + 96) = v94;
  *(_OWORD *)(v40 + 112) = v83;
  *(_OWORD *)(v40 + 64) = v81;
  *(_OWORD *)(v40 + 80) = v82;
  result = *(__n128 *)v96;
  v84 = *(_OWORD *)&v96[16];
  v85 = v97;
  *(_QWORD *)(v40 + 176) = v98;
  *(_OWORD *)(v40 + 144) = v84;
  *(_OWORD *)(v40 + 160) = v85;
  *(__n128 *)(v40 + 128) = result;
  return result;
}

uint64_t sub_2233FA470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v17 = a1;
    v18 = v5 + 1;
    a1 += 192 * (v5 + 1);
    v19 = 2 * v5;
    v5 = (2 * v5) | 1;
    v20 = v19 + 2;
    if (v19 + 2 < a3)
    {
      v21 = *(_QWORD *)(v17 + 192 * v18 + 120);
      v22 = *(_QWORD *)(a1 + 312);
      if (v21 == v22)
      {
        v23 = *(_QWORD *)(v17 + 192 * v18 + 128);
        v24 = *(_QWORD *)(a1 + 320);
        v25 = v23 < v24;
        if (v23 == v24)
        {
          v26 = *(_QWORD *)(v17 + 192 * v18 + 136);
          v27 = *(_QWORD *)(a1 + 328);
          v25 = v26 < v27;
          if (v26 == v27)
            v25 = *(_OWORD *)(v17 + 192 * v18 + 144) < *(_OWORD *)(a1 + 336);
        }
        if (v25
          || *(_QWORD *)(v17 + 192 * v18 + 144) == *(_QWORD *)(a1 + 336)
          && *(_QWORD *)(v17 + 192 * v18 + 136) == *(_QWORD *)(a1 + 328)
          && ((v28 = *(_QWORD *)(v17 + 192 * v18 + 152), v23 == v24) ? (v29 = v28 == *(_QWORD *)(a1 + 344)) : (v29 = 0),
              v29 && sub_2233F8C20(a1, a1 + 192)))
        {
LABEL_4:
          a1 += 192;
          v5 = v20;
        }
      }
      else if (v21 < v22)
      {
        goto LABEL_4;
      }
    }
    *(_QWORD *)v17 = *(_QWORD *)a1;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a1 + 24);
    v10 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(v17 + 40) = v10;
    *(_OWORD *)(v17 + 24) = v9;
    *(_OWORD *)(v17 + 8) = v8;
    v11 = *(_OWORD *)(a1 + 72);
    v12 = *(_OWORD *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v17 + 104) = v13;
    *(_OWORD *)(v17 + 88) = v12;
    *(_OWORD *)(v17 + 72) = v11;
    v14 = *(_OWORD *)(a1 + 136);
    v15 = *(_OWORD *)(a1 + 152);
    v16 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(v17 + 184) = *(_QWORD *)(a1 + 184);
    *(_OWORD *)(v17 + 168) = v16;
    *(_OWORD *)(v17 + 152) = v15;
    *(_OWORD *)(v17 + 136) = v14;
  }
  while (v5 <= v7);
  return a1;
}

__n128 sub_2233FA62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v7 = v4 >> 1;
  v8 = (_QWORD *)(a1 + 192 * (v4 >> 1));
  v9 = v8[15];
  v10 = *(_QWORD *)(a2 - 72);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(a1 + 192 * v7 + 128);
    v12 = *(_QWORD *)(a2 - 64);
    v13 = v11 < v12;
    if (v11 == v12)
    {
      v14 = *(_QWORD *)(a1 + 192 * v7 + 136);
      v15 = *(_QWORD *)(a2 - 56);
      v13 = v14 < v15;
      if (v14 == v15)
        v13 = *(_OWORD *)(a1 + 192 * v7 + 144) < *(_OWORD *)(a2 - 48);
    }
    if (!v13)
    {
      if (*(_QWORD *)(a1 + 192 * v7 + 144) != *(_QWORD *)(a2 - 48)
        || *(_QWORD *)(a1 + 192 * v7 + 136) != *(_QWORD *)(a2 - 56))
      {
        return result;
      }
      v16 = v11 == v12 && *(_QWORD *)(a1 + 192 * v7 + 152) == *(_QWORD *)(a2 - 40);
      if (!v16 || !sub_2233F8C20(a1 + 192 * (v4 >> 1), a2 - 192))
        return result;
    }
  }
  else if (v9 >= v10)
  {
    return result;
  }
  v18 = *(_QWORD *)(a2 - 192);
  v55 = v18;
  v64 = *(__n128 *)(a2 - 56);
  v65 = *(_OWORD *)(a2 - 40);
  v66 = *(_OWORD *)(a2 - 24);
  v67 = *(_QWORD *)(a2 - 8);
  v60 = *(_OWORD *)(a2 - 120);
  v61 = *(_OWORD *)(a2 - 104);
  v62 = *(_OWORD *)(a2 - 88);
  v63 = *(_OWORD *)(a2 - 72);
  v56 = *(_OWORD *)(a2 - 184);
  v57 = *(_OWORD *)(a2 - 168);
  v58 = *(_OWORD *)(a2 - 152);
  v59 = *(_OWORD *)(a2 - 136);
  *(_QWORD *)(a2 - 192) = *v8;
  v19 = a1 + 192 * v7;
  v20 = v19 + 8;
  v21 = *(_OWORD *)(v19 + 8);
  v22 = *(_OWORD *)(v19 + 24);
  v23 = *(_OWORD *)(v19 + 40);
  *(_OWORD *)(a2 - 136) = *(_OWORD *)(v19 + 56);
  *(_OWORD *)(a2 - 152) = v23;
  *(_OWORD *)(a2 - 168) = v22;
  *(_OWORD *)(a2 - 184) = v21;
  v24 = *(_OWORD *)(v19 + 72);
  v25 = *(_OWORD *)(v19 + 88);
  v26 = *(_OWORD *)(v19 + 104);
  *(_OWORD *)(a2 - 72) = *(_OWORD *)(v19 + 120);
  *(_OWORD *)(a2 - 88) = v26;
  *(_OWORD *)(a2 - 104) = v25;
  *(_OWORD *)(a2 - 120) = v24;
  v27 = *(_OWORD *)(v19 + 136);
  v28 = *(_OWORD *)(v19 + 152);
  v29 = *(_OWORD *)(v19 + 168);
  *(_QWORD *)(a2 - 8) = *(_QWORD *)(v19 + 184);
  *(_OWORD *)(a2 - 24) = v29;
  *(_OWORD *)(a2 - 40) = v28;
  *(_OWORD *)(a2 - 56) = v27;
  if (v4 < 2)
    goto LABEL_35;
  while (1)
  {
    v40 = v8;
    v41 = v7 - 1;
    v7 = (v7 - 1) >> 1;
    v8 = (_QWORD *)(a1 + 192 * v7);
    v42 = v8[15];
    if (v42 == (_QWORD)v63)
      break;
    if (v42 >= (uint64_t)v63)
      goto LABEL_33;
LABEL_20:
    *v40 = *v8;
    v30 = a1 + 192 * v7;
    v20 = v30 + 8;
    v31 = *(_OWORD *)(v30 + 24);
    v32 = *(_OWORD *)(v30 + 40);
    v33 = *(_OWORD *)(v30 + 56);
    *(_OWORD *)(v40 + 1) = *(_OWORD *)(v30 + 8);
    *(_OWORD *)(v40 + 7) = v33;
    *(_OWORD *)(v40 + 5) = v32;
    *(_OWORD *)(v40 + 3) = v31;
    v34 = *(_OWORD *)(v30 + 88);
    v35 = *(_OWORD *)(v30 + 104);
    v36 = *(_OWORD *)(v30 + 120);
    *(_OWORD *)(v40 + 9) = *(_OWORD *)(v30 + 72);
    *(_OWORD *)(v40 + 15) = v36;
    *(_OWORD *)(v40 + 13) = v35;
    *(_OWORD *)(v40 + 11) = v34;
    v37 = *(_OWORD *)(v30 + 152);
    v38 = *(_OWORD *)(v30 + 168);
    v39 = *(_QWORD *)(v30 + 184);
    *(_OWORD *)(v40 + 17) = *(_OWORD *)(v30 + 136);
    v40[23] = v39;
    *(_OWORD *)(v40 + 21) = v38;
    *(_OWORD *)(v40 + 19) = v37;
    if (v41 <= 1)
      goto LABEL_34;
  }
  v43 = *(_QWORD *)(a1 + 192 * v7 + 128);
  v44 = v43 < *((_QWORD *)&v63 + 1);
  if (v43 == *((_QWORD *)&v63 + 1))
  {
    v45 = *(_QWORD *)(a1 + 192 * v7 + 136);
    v44 = v45 < (int64_t)v64.n128_u64[0];
    if (v45 == v64.n128_u64[0])
      v44 = *(_OWORD *)(a1 + 192 * v7 + 144) < (__int128)__PAIR128__(v65, v64.n128_u64[1]);
  }
  if (v44)
    goto LABEL_20;
  if (*(_OWORD *)(a1 + 192 * v7 + 136) == *(_OWORD *)&v64)
  {
    v46 = v43 == *((_QWORD *)&v63 + 1) && *(_QWORD *)(a1 + 192 * v7 + 152) == (_QWORD)v65;
    if (v46 && sub_2233F8C20(a1 + 192 * v7, (uint64_t)&v55))
      goto LABEL_20;
  }
LABEL_33:
  v8 = v40;
LABEL_34:
  v18 = v55;
LABEL_35:
  *v8 = v18;
  v47 = v56;
  v48 = v57;
  v49 = v59;
  *(_OWORD *)(v20 + 32) = v58;
  *(_OWORD *)(v20 + 48) = v49;
  *(_OWORD *)v20 = v47;
  *(_OWORD *)(v20 + 16) = v48;
  v50 = v60;
  v51 = v61;
  v52 = v63;
  *(_OWORD *)(v20 + 96) = v62;
  *(_OWORD *)(v20 + 112) = v52;
  *(_OWORD *)(v20 + 64) = v50;
  *(_OWORD *)(v20 + 80) = v51;
  result = v64;
  v53 = v65;
  v54 = v66;
  *(_QWORD *)(v20 + 176) = v67;
  *(_OWORD *)(v20 + 144) = v53;
  *(_OWORD *)(v20 + 160) = v54;
  *(__n128 *)(v20 + 128) = result;
  return result;
}

uint64_t sub_2233FA9D4(uint64_t result)
{
  uint64_t v1;
  float *v2;
  float **v3;
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  char v20;

  if (*(_DWORD *)(result + 40) != 7)
  {
    v1 = result;
    v2 = **(float ***)result;
    if (v2 != *(float **)(*(_QWORD *)result + 8))
    {
      v3 = *(float ***)(result + 8);
      v5 = *v3;
      v4 = v3[1];
      v6 = (char *)v4 - (char *)*v3;
      if ((unint64_t)v6 < 0x18)
        goto LABEL_32;
      v7 = v6 >> 3;
      v8 = v4 == v5 ? 0 : v7 + 1;
      v19 = 0;
      v20 = 0;
      v9 = v8 - 1;
      if (v8 >= v7)
      {
        v10 = v4;
        if (v9 <= v7)
          v10 = &v5[2 * (v9 % v7)];
      }
      else
      {
        v10 = v4 - 2;
      }
      if (v8 == 1)
        goto LABEL_32;
      v11 = v4;
      do
      {
        if (v9 + 1 >= v7)
        {
          v12 = v4;
          if (v9 <= v7)
            v12 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v12 = v11 - 2;
        }
        v13 = v9 - 1;
        if (v9 >= v7)
        {
          v14 = v4;
          if (v13 <= v7)
            v14 = &v5[2 * (v13 % v7)];
        }
        else
        {
          v14 = v10 - 2;
        }
        result = sub_2233E62E4(v2, v12, v14, (uint64_t)&v19);
        if (!(_DWORD)result)
          break;
        if (v9 + 1 >= v7)
        {
          v11 = v4;
          if (v9 <= v7)
            v11 = &v5[2 * (v9 % v7)];
        }
        else
        {
          v11 -= 2;
        }
        if (v9 < v7)
        {
          v10 -= 2;
        }
        else
        {
          v10 = v4;
          if (v13 <= v7)
            v10 = &v5[2 * (v13 % v7)];
        }
        --v9;
      }
      while (v13);
      if (v20 || !v19)
      {
LABEL_32:
        v15 = *(_DWORD *)(v1 + 40) | 2;
        *(_DWORD *)(v1 + 40) = v15;
        if (v15 != 7)
        {
LABEL_40:
          v16 = *(_BYTE *)(*(_QWORD *)(v1 + 24) + 9) != 0;
          goto LABEL_41;
        }
      }
      else
      {
        v17 = *(unsigned __int8 **)(v1 + 24);
        if (*v17 - 58 <= 0xFFFFFFF7)
        {
          *v17 = 50;
          v17 = *(unsigned __int8 **)(v1 + 24);
        }
        v18 = *(_DWORD *)(v1 + 40) | 1;
        *(_DWORD *)(v1 + 40) = v18;
        if (v17[1] - 58 <= 0xFFFFFFF6)
        {
          v17[1] = 49;
          v18 = *(_DWORD *)(v1 + 40);
        }
        *(_DWORD *)(v1 + 40) = v18 | 4;
        if ((v18 | 4) != 7)
          goto LABEL_40;
      }
      v16 = 1;
LABEL_41:
      *(_BYTE *)(v1 + 16) = v16;
    }
  }
  return result;
}

uint64_t *sub_2233FABEC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;

  v5 = result;
  v6 = result[5];
  v7 = v6 + 24 * *(_QWORD *)(a2 + 32);
  v9 = (uint64_t **)(v7 + 8);
  v8 = *(uint64_t **)(v7 + 8);
  if (v8)
  {
    v10 = *(_QWORD *)(a3 + 32);
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v8;
        v12 = *(_QWORD *)(v8[4] + 32);
        if (v10 >= v12)
          break;
        v8 = *v11;
        v9 = v11;
        if (!*v11)
          goto LABEL_9;
      }
      if (v12 >= v10)
        break;
      v8 = v11[1];
      if (!v8)
      {
        v9 = v11 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v11 = (uint64_t **)(v7 + 8);
LABEL_9:
    v13 = (uint64_t *)operator new(0x28uLL);
    v13[4] = a3;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v9 = v13;
    v14 = **(_QWORD **)v7;
    if (v14)
    {
      *(_QWORD *)v7 = v14;
      v15 = *v9;
    }
    else
    {
      v15 = v13;
    }
    result = sub_2231A9A8C(*(uint64_t **)(v7 + 8), v15);
    ++*(_QWORD *)(v7 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v6 = v5[5];
  }
  v16 = v6 + 24 * v10;
  v18 = (uint64_t **)(v16 + 8);
  v17 = *(uint64_t **)(v16 + 8);
  if (v17)
  {
    v19 = *(_QWORD *)(a2 + 32);
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t **)v17;
        v21 = *(_QWORD *)(v17[4] + 32);
        if (v19 >= v21)
          break;
        v17 = *v20;
        v18 = v20;
        if (!*v20)
          goto LABEL_21;
      }
      if (v21 >= v19)
        break;
      v17 = v20[1];
      if (!v17)
      {
        v18 = v20 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    v20 = (uint64_t **)(v16 + 8);
LABEL_21:
    v22 = (uint64_t *)operator new(0x28uLL);
    v22[4] = a2;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v20;
    *v18 = v22;
    v23 = **(_QWORD **)v16;
    if (v23)
    {
      *(_QWORD *)v16 = v23;
      v24 = *v18;
    }
    else
    {
      v24 = v22;
    }
    result = sub_2231A9A8C(*(uint64_t **)(v16 + 8), v24);
    ++*(_QWORD *)(v16 + 16);
  }
  return result;
}

uint64_t sub_2233FAD70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_2233FADDC(*(_QWORD **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  sub_2233FADDC(*(_QWORD **)(a1 + 24));
  return a1;
}

void sub_2233FADDC(_QWORD *a1)
{
  if (a1)
  {
    sub_2233FADDC(*a1);
    sub_2233FADDC(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_2233FAE14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2233FAE50(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_223174E94();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_223174E94();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_223174E94();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_2233FB4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233FB4D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233FB4E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233FB500(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2233FB518(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 10;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 21;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2233FB5DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, BOOL *a5)
{
  char *v10;
  char *v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  _QWORD v21[2];
  float *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL *v26;
  int v27;
  char v28;
  void *__p;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;

  v10 = 0;
  v11 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = *(float **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (v13 - *(_QWORD *)a1) >> 3;
  if (v13 == *(_QWORD *)a1)
    v15 = 0;
  else
    v15 = v14 + 1;
  if (v15 >= 2)
  {
    v22 = *(float **)a1;
    v23 = (uint64_t)v12;
    v24 = v13;
    v25 = (_QWORD *)v14;
    v26 = 0;
    v32.i64[0] = v13;
    v32.i64[1] = (uint64_t)v12;
    v33.i64[0] = v13;
    v33.i64[1] = v14;
    v34 = v15;
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = -1;
    v36 = -1;
    sub_2233DC448(&__p, &v22, (uint64_t)&v32, a3, a2, &v35, 0xAuLL);
    v11 = (char *)__p;
    v10 = v30;
  }
  v22 = (float *)a1;
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = 0;
  v28 = 1;
  v21[0] = a2;
  v21[1] = a2;
  if (0xEEEEEEEEEEEEEEEFLL * ((v10 - v11) >> 3) <= 0x10)
  {
LABEL_9:
    while (v11 != v10)
    {
      v16 = (uint64_t)v11;
      v11 += 120;
      if (v11 != v10)
      {
        v17 = (uint64_t)v11;
        while (1)
        {
          if (*(_QWORD *)(v16 + 48) >= *(_QWORD *)(v17 + 32) && *(_QWORD *)(v16 + 32) <= *(_QWORD *)(v17 + 48))
          {
            v18 = *(_QWORD *)(v16 + 56) >= *(_QWORD *)(v17 + 40) && *(_QWORD *)(v16 + 40) <= *(_QWORD *)(v17 + 56);
            v19 = v18 && *(_BYTE *)(v16 + 96) == 0;
            if (v19 && *(_BYTE *)(v17 + 96) == 0)
            {
              if (!sub_2233FDC8C(v27, *(_QWORD *)v22, *((_QWORD *)v22 + 1), v16, v27, *(_QWORD *)v22, *((_QWORD *)v22 + 1), v17, v28, v23, v24, v25, v26))goto LABEL_28;
              v10 = v30;
            }
          }
          v17 += 120;
          if ((char *)v17 == v10)
            goto LABEL_9;
        }
      }
    }
  }
  else
  {
    v35 = 0uLL;
    v36 = 0;
    v32 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v33 = vdupq_n_s64(0x8000000000000000);
    sub_2233DCD4C(&__p, v32.i64, (char **)&v35);
    sub_2233FB848(&v32, &v35, 0, (uint64_t)&v22, (uint64_t)v21);
    if ((_QWORD)v35)
    {
      *((_QWORD *)&v35 + 1) = v35;
      operator delete((void *)v35);
    }
  }
LABEL_28:
  if (__p)
  {
    v30 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2233FB7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233FB848(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t **v20;
  int8x16_t v21;
  int8x16_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  __int128 v61[2];
  void *__p;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71[2];
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v8 = *a1;
  v9 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v10 = *a1;
  else
    v10 = v8 + 1;
  v11 = v10 >> 1;
  if (v9 >= 0)
    v12 = a1[2];
  else
    v12 = v9 + 1;
  v13 = v12 >> 1;
  v14 = *((_OWORD *)a1 + 1);
  v15 = v9 - 2 * v13 + v8 - 2 * v11;
  v72 = *(_OWORD *)a1;
  v74 = *((_QWORD *)&v14 + 1);
  *((_QWORD *)&v71[0] + 1) = *((_QWORD *)&v72 + 1);
  v71[1] = v14;
  v73 = v13 + v11 + ((v15 + ((v15 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v71[0] = v73;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_2233DD4BC(&v72, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v17 = (uint64_t *)__p;
  v16 = v63;
  if (__p != v63)
  {
    v18 = vdupq_n_s64(0x8000000000000000);
    v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v20 = (int64x2_t **)__p;
    v21 = (int8x16_t)v19;
    v22 = (int8x16_t)v18;
    do
    {
      v23 = *v20++;
      v24 = v23[2];
      v25 = v23[3];
      v26 = (int8x16_t)vcgtq_s64(v19, v24);
      v27 = vbslq_s8(v26, (int8x16_t)v24, v21);
      v28 = (int64x2_t)vbslq_s8(v26, (int8x16_t)v24, (int8x16_t)v19);
      v29 = (int8x16_t)vcgtq_s64(v28, v25);
      v21 = vbslq_s8(v29, (int8x16_t)v25, v27);
      v19 = (int64x2_t)vbslq_s8(v29, (int8x16_t)v25, (int8x16_t)v28);
      v30 = (int8x16_t)vcgtq_s64(v24, v18);
      v31 = vbslq_s8(v30, (int8x16_t)v24, v22);
      v32 = (int64x2_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)v18);
      v33 = (int8x16_t)vcgtq_s64(v25, v32);
      v22 = vbslq_s8(v33, (int8x16_t)v25, v31);
      v18 = (int64x2_t)vbslq_s8(v33, (int8x16_t)v25, (int8x16_t)v32);
    }
    while (v20 != (int64x2_t **)v63);
    v61[0] = (__int128)v21;
    v61[1] = (__int128)v22;
    if (a3 > 0x63 || (unint64_t)((char *)v63 - (_BYTE *)__p) < 0x79)
    {
      do
      {
        v36 = v17 + 1;
        if (v17 + 1 != v16)
        {
          for (i = v17 + 1; i != v16; ++i)
          {
            v38 = *v17;
            v39 = *i;
            if (*(_QWORD *)(*v17 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
            {
              v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
              v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
              if (v41 && *(_BYTE *)(v39 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v38, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v39, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
                v16 = v63;
              }
            }
          }
        }
        ++v17;
      }
      while (v36 != v16);
    }
    else if (!sub_2233FBECC(v61, &__p, a3 + 1, a4, a5))
    {
LABEL_81:
      v52 = 0;
      goto LABEL_82;
    }
    if (!sub_2233FBD50(v61, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5)
      || (sub_2233FBD50(v61, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5) & 1) == 0)
    {
      goto LABEL_81;
    }
  }
  v35 = (uint64_t *)v68;
  v34 = v69;
  if (a3 > 0x63 || (unint64_t)((char *)v69 - (_BYTE *)v68) < 0x79)
  {
LABEL_56:
    while (v35 != v34)
    {
      v43 = v35++;
      if (v35 != v34)
      {
        v44 = v35;
        while (1)
        {
          v45 = *v43;
          v46 = *v44;
          if (*(_QWORD *)(*v43 + 48) >= *(_QWORD *)(*v44 + 32) && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
          {
            v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
            v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
            if (v48 && *(_BYTE *)(v46 + 96) == 0)
            {
              if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v45, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v46, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
              v34 = v69;
            }
          }
          if (++v44 == v34)
            goto LABEL_56;
        }
      }
    }
  }
  else if (!sub_2233FBECC(&v72, &v68, a3 + 1, a4, a5))
  {
    goto LABEL_81;
  }
  v51 = (uint64_t *)v65;
  v50 = v66;
  if (a3 > 0x63 || (unint64_t)((char *)v66 - (_BYTE *)v65) < 0x79)
  {
    if (v65 == v66)
    {
      v52 = 1;
    }
    else
    {
      do
      {
        v53 = v51++;
        if (v51 != v50)
        {
          for (j = v51; j != v50; ++j)
          {
            v55 = *v53;
            v56 = *j;
            if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v55, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v56, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
                v50 = v66;
              }
            }
          }
        }
        v52 = 1;
      }
      while (v51 != v50);
    }
  }
  else
  {
    v52 = sub_2233FBECC(v71, &v65, a3 + 1, a4, a5);
  }
LABEL_82:
  if (__p)
  {
    v63 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (uint64_t *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (uint64_t *)v68;
    operator delete(v68);
  }
  return v52;
}

void sub_2233FBCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v28 = a23;
    if (!a23)
    {
LABEL_3:
      v29 = a26;
      if (!a26)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a26;
  if (!a26)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233FBD50(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_2233FD0EC(a1, a2, a3, a4 + 1, a5, a6, a6);
  }
  if (v10 != v9)
  {
    v12 = a3[1];
    if (*a3 != v12)
    {
      do
      {
        v13 = *a3;
        if (*a3 != v12)
        {
          do
          {
            v14 = *v10;
            v15 = *v13;
            if (*(_QWORD *)(*v10 + 48) >= *(_QWORD *)(*v13 + 32) && *(_QWORD *)(v14 + 32) <= *(_QWORD *)(v15 + 48))
            {
              v16 = *(_QWORD *)(v14 + 56) >= *(_QWORD *)(v15 + 40) && *(_QWORD *)(v14 + 40) <= *(_QWORD *)(v15 + 56);
              v17 = v16 && *(_BYTE *)(v14 + 96) == 0;
              if (v17 && *(_BYTE *)(v15 + 96) == 0)
              {
                result = sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v14, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v15, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v12 = a3[1];
              }
            }
            ++v13;
          }
          while (v13 != v12);
          v9 = a2[1];
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  return 1;
}

uint64_t sub_2233FBECC(__int128 *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __n128 v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __n128 v19;
  __n128 v20;
  int64x2_t **v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int64x2_t v33;
  int8x16_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *i;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *j;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  _OWORD v62[2];
  void *__p;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v9 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 1);
  if (v10 >= 0)
    v11 = *((_QWORD *)a1 + 1);
  else
    v11 = v10 + 1;
  v12 = v11 >> 1;
  if (v8 >= 0)
    v13 = *((_QWORD *)a1 + 3);
  else
    v13 = v8 + 1;
  v14 = *a1;
  v73 = a1[1];
  v74 = v14;
  v72[0] = v14;
  v75 = v9;
  v76 = (v13 >> 1)
      + v12
      + ((int)(((_DWORD)v8
              - 2 * (v13 >> 1)
              + (_DWORD)v10
              - 2 * (_DWORD)v12
              + (((v8 - 2 * (v13 >> 1) + (_DWORD)v10 - 2 * (_DWORD)v12) & 0x80) >> 7)) << 24) >> 25);
  v72[1] = v76;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_2233DD4BC(&v74, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v18 = (uint64_t *)__p;
  v17 = v64;
  if (__p != v64)
  {
    v19 = (__n128)vdupq_n_s64(0x8000000000000000);
    v20 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v21 = (int64x2_t **)__p;
    v22 = (int8x16_t)v20;
    v23 = (int8x16_t)v19;
    do
    {
      v24 = *v21++;
      v25 = v24[2];
      v26 = v24[3];
      v27 = (int8x16_t)vcgtq_s64((int64x2_t)v20, v25);
      v28 = vbslq_s8(v27, (int8x16_t)v25, v22);
      v29 = (int64x2_t)vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v20);
      v30 = (int8x16_t)vcgtq_s64(v29, v26);
      v22 = vbslq_s8(v30, (int8x16_t)v26, v28);
      v20 = (__n128)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v29);
      v31 = (int8x16_t)vcgtq_s64(v25, (int64x2_t)v19);
      v32 = vbslq_s8(v31, (int8x16_t)v25, v23);
      v33 = (int64x2_t)vbslq_s8(v31, (int8x16_t)v25, (int8x16_t)v19);
      v34 = (int8x16_t)vcgtq_s64(v26, v33);
      v23 = vbslq_s8(v34, (int8x16_t)v26, v32);
      v19 = (__n128)vbslq_s8(v34, (int8x16_t)v26, (int8x16_t)v33);
    }
    while (v21 != (int64x2_t **)v64);
    v62[0] = v22;
    v62[1] = v23;
    if (a3 > 0x63 || (unint64_t)((char *)v64 - (_BYTE *)__p) < 0x79)
    {
      do
      {
        v37 = v18 + 1;
        if (v18 + 1 != v17)
        {
          for (i = v18 + 1; i != v17; ++i)
          {
            v39 = *v18;
            v40 = *i;
            if (*(_QWORD *)(*v18 + 48) >= *(_QWORD *)(*i + 32) && *(_QWORD *)(v39 + 32) <= *(_QWORD *)(v40 + 48))
            {
              v41 = *(_QWORD *)(v39 + 56) >= *(_QWORD *)(v40 + 40) && *(_QWORD *)(v39 + 40) <= *(_QWORD *)(v40 + 56);
              v42 = v41 && *(_BYTE *)(v39 + 96) == 0;
              if (v42 && *(_BYTE *)(v40 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v39, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v40, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
                v17 = v64;
              }
            }
          }
        }
        ++v18;
      }
      while (v37 != v17);
    }
    else if (!sub_2233FB848(v62, &__p, a3 + 1, a4, a5, v19, v20))
    {
LABEL_81:
      v53 = 0;
      goto LABEL_82;
    }
    if (!sub_2233FC3D4((uint64_t *)v62, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5)
      || (sub_2233FC3D4((uint64_t *)v62, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5) & 1) == 0)
    {
      goto LABEL_81;
    }
  }
  v36 = (uint64_t *)v69;
  v35 = v70;
  if (a3 > 0x63 || (unint64_t)((char *)v70 - (_BYTE *)v69) < 0x79)
  {
LABEL_56:
    while (v36 != v35)
    {
      v44 = v36++;
      if (v36 != v35)
      {
        v45 = v36;
        while (1)
        {
          v46 = *v44;
          v47 = *v45;
          if (*(_QWORD *)(*v44 + 48) >= *(_QWORD *)(*v45 + 32) && *(_QWORD *)(v46 + 32) <= *(_QWORD *)(v47 + 48))
          {
            v48 = *(_QWORD *)(v46 + 56) >= *(_QWORD *)(v47 + 40) && *(_QWORD *)(v46 + 40) <= *(_QWORD *)(v47 + 56);
            v49 = v48 && *(_BYTE *)(v46 + 96) == 0;
            if (v49 && *(_BYTE *)(v47 + 96) == 0)
            {
              if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v46, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v47, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
              v35 = v70;
            }
          }
          if (++v45 == v35)
            goto LABEL_56;
        }
      }
    }
  }
  else if (!sub_2233FB848(&v74, &v69, a3 + 1, a4, a5, v15, v16))
  {
    goto LABEL_81;
  }
  v52 = (uint64_t *)v66;
  v51 = v67;
  if (a3 > 0x63 || (unint64_t)((char *)v67 - (_BYTE *)v66) < 0x79)
  {
    if (v66 == v67)
    {
      v53 = 1;
    }
    else
    {
      do
      {
        v54 = v52++;
        if (v52 != v51)
        {
          for (j = v52; j != v51; ++j)
          {
            v56 = *v54;
            v57 = *j;
            if (*(_QWORD *)(*v54 + 48) >= *(_QWORD *)(*j + 32) && *(_QWORD *)(v56 + 32) <= *(_QWORD *)(v57 + 48))
            {
              v58 = *(_QWORD *)(v56 + 56) >= *(_QWORD *)(v57 + 40) && *(_QWORD *)(v56 + 40) <= *(_QWORD *)(v57 + 56);
              v59 = v58 && *(_BYTE *)(v56 + 96) == 0;
              if (v59 && *(_BYTE *)(v57 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v56, *(_DWORD *)(a4 + 40), **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), v57, *(_BYTE *)(a4 + 44), *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD **)(a4 + 24), *(BOOL **)(a4 + 32)))goto LABEL_81;
                v51 = v67;
              }
            }
          }
        }
        v53 = 1;
      }
      while (v52 != v51);
    }
  }
  else
  {
    v53 = sub_2233FB848(v72, &v66, a3 + 1, a4, a5, v15, v16);
  }
LABEL_82:
  if (__p)
  {
    v64 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (uint64_t *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (uint64_t *)v69;
    operator delete(v69);
  }
  return v53;
}

void sub_2233FC370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v28 = a23;
    if (!a23)
    {
LABEL_3:
      v29 = a26;
      if (!a26)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = a26;
  if (!a26)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233FC3D4(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = *a2;
  v9 = a2[1];
  if ((unint64_t)((char *)v9 - (char *)*a2) >= 0x80
    && a4 <= 0x63
    && (unint64_t)((char *)a3[1] - (char *)*a3) >= 0x79)
  {
    return sub_2233FC550(a1, a2, a3, a4 + 1, a5, a6, a6);
  }
  if (v10 != v9)
  {
    v12 = a3[1];
    if (*a3 != v12)
    {
      do
      {
        v13 = *a3;
        if (*a3 != v12)
        {
          do
          {
            v14 = *v10;
            v15 = *v13;
            if (*(_QWORD *)(*v10 + 48) >= *(_QWORD *)(*v13 + 32) && *(_QWORD *)(v14 + 32) <= *(_QWORD *)(v15 + 48))
            {
              v16 = *(_QWORD *)(v14 + 56) >= *(_QWORD *)(v15 + 40) && *(_QWORD *)(v14 + 40) <= *(_QWORD *)(v15 + 56);
              v17 = v16 && *(_BYTE *)(v14 + 96) == 0;
              if (v17 && *(_BYTE *)(v15 + 96) == 0)
              {
                result = sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v14, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v15, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32));
                if (!(_DWORD)result)
                  return result;
                v12 = a3[1];
              }
            }
            ++v13;
          }
          while (v13 != v12);
          v9 = a2[1];
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  return 1;
}

uint64_t sub_2233FC550(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  int64x2_t **v26;
  __n128 v27;
  __n128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int64x2_t *v42;
  int64x2_t v43;
  int64x2_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int64x2_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  void *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  __n128 v75;
  __n128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int64x2_t *v79;
  int64x2_t v80;
  int64x2_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int64x2_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int64x2_t v88;
  int8x16_t v89;
  __n128 v90;
  __n128 v91;
  void *v92;
  int64x2_t **v93;
  uint64_t *v94;
  uint64_t *v95;
  __n128 v96;
  __n128 v97;
  int8x16_t v98;
  int8x16_t v99;
  int64x2_t *v100;
  int64x2_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int64x2_t v109;
  int8x16_t v110;
  __n128 v111;
  __n128 v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  BOOL v120;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  BOOL v129;
  void *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  void *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  BOOL v147;
  int8x16_t v150;
  int8x16_t v151;
  void *__p;
  _QWORD *v153;
  uint64_t v154;
  void *v155;
  _BYTE *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  void *v161;
  uint64_t *v162;
  uint64_t v163;
  void *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  _QWORD v170[2];
  __int128 v171;
  __int128 v172;
  __int128 v173;

  v12 = *a1;
  v13 = a1[2];
  if (*a1 >= 0)
    v14 = *a1;
  else
    v14 = v12 + 1;
  v15 = v14 >> 1;
  v17 = *(_OWORD *)a1;
  v16 = *((_OWORD *)a1 + 1);
  v172 = *(_OWORD *)a1;
  v173 = v16;
  if (v13 >= 0)
    v18 = v13;
  else
    v18 = v13 + 1;
  v19 = v18 >> 1;
  v170[1] = *((_QWORD *)&v17 + 1);
  v171 = v16;
  v20 = v13 - 2 * v19 + v12 - 2 * v15;
  *(_QWORD *)&v173 = v19 + v15 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v169 = 0;
  v170[0] = v173;
  v167 = 0;
  v168 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  __p = 0;
  v153 = 0;
  v154 = 0;
  sub_2233DD4BC(&v172, v170, a2, &v167, (char **)&v164, (char **)&v161);
  sub_2233DD4BC(&v172, v170, a3, &v158, (char **)&v155, (char **)&__p);
  v24 = (uint64_t *)v161;
  v23 = v162;
  if (v161 == v162)
    goto LABEL_98;
  v26 = (int64x2_t **)__p;
  v25 = v153;
  if ((unint64_t)((char *)v162 - (_BYTE *)v161) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v153 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v153)
    {
      do
      {
        v56 = (uint64_t *)__p;
        if (__p != v25)
        {
          do
          {
            v57 = *v24;
            v58 = *v56;
            if (*(_QWORD *)(*v24 + 48) >= *(_QWORD *)(*v56 + 32) && *(_QWORD *)(v57 + 32) <= *(_QWORD *)(v58 + 48))
            {
              v59 = *(_QWORD *)(v57 + 56) >= *(_QWORD *)(v58 + 40) && *(_QWORD *)(v57 + 40) <= *(_QWORD *)(v58 + 56);
              v60 = v59 && *(_BYTE *)(v57 + 96) == 0;
              if (v60 && *(_BYTE *)(v58 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v57, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v58, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v25 = v153;
              }
            }
            ++v56;
          }
          while (v56 != v25);
          v23 = v162;
        }
        ++v24;
      }
      while (v24 != v23);
    }
  }
  else
  {
    v27 = (__n128)vdupq_n_s64(0x8000000000000000);
    v28 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v29 = (int8x16_t)v28;
    v30 = (int8x16_t)v27;
    do
    {
      v31 = (int64x2_t *)*v24++;
      v32 = v31[2];
      v33 = v31[3];
      v34 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v32);
      v35 = vbslq_s8(v34, (int8x16_t)v32, v29);
      v36 = (int64x2_t)vbslq_s8(v34, (int8x16_t)v32, (int8x16_t)v28);
      v37 = (int8x16_t)vcgtq_s64(v36, v33);
      v29 = vbslq_s8(v37, (int8x16_t)v33, v35);
      v28 = (__n128)vbslq_s8(v37, (int8x16_t)v33, (int8x16_t)v36);
      v38 = (int8x16_t)vcgtq_s64(v32, (int64x2_t)v27);
      v39 = vbslq_s8(v38, (int8x16_t)v32, v30);
      v40 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v32, (int8x16_t)v27);
      v41 = (int8x16_t)vcgtq_s64(v33, v40);
      v30 = vbslq_s8(v41, (int8x16_t)v33, v39);
      v27 = (__n128)vbslq_s8(v41, (int8x16_t)v33, (int8x16_t)v40);
    }
    while (v24 != v162);
    v150 = v29;
    v151 = v30;
    if (__p != v153)
    {
      do
      {
        v42 = *v26++;
        v43 = v42[2];
        v44 = v42[3];
        v45 = (int8x16_t)vcgtq_s64((int64x2_t)v28, v43);
        v46 = vbslq_s8(v45, (int8x16_t)v43, v29);
        v47 = (int64x2_t)vbslq_s8(v45, (int8x16_t)v43, (int8x16_t)v28);
        v48 = (int8x16_t)vcgtq_s64(v47, v44);
        v29 = vbslq_s8(v48, (int8x16_t)v44, v46);
        v28 = (__n128)vbslq_s8(v48, (int8x16_t)v44, (int8x16_t)v47);
        v49 = (int8x16_t)vcgtq_s64(v43, (int64x2_t)v27);
        v50 = vbslq_s8(v49, (int8x16_t)v43, v30);
        v51 = (int64x2_t)vbslq_s8(v49, (int8x16_t)v43, (int8x16_t)v27);
        v52 = (int8x16_t)vcgtq_s64(v44, v51);
        v30 = vbslq_s8(v52, (int8x16_t)v44, v50);
        v27 = (__n128)vbslq_s8(v52, (int8x16_t)v44, (int8x16_t)v51);
      }
      while (v26 != v153);
      v150 = v29;
      v151 = v30;
    }
    if ((sub_2233FD0EC(&v150, &v161, &__p, a4 + 1, a5, a6, a7, v28, v27) & 1) == 0)
    {
LABEL_217:
      v141 = 0;
      v142 = __p;
      if (!__p)
        goto LABEL_219;
      goto LABEL_218;
    }
  }
  v53 = v159;
  if ((unint64_t)((_BYTE *)v159 - (_BYTE *)v158) > 0x7F)
  {
    v55 = (uint64_t *)v161;
    v54 = v162;
    if ((unint64_t)(v156 - (_BYTE *)v155) >= 0x80
      && a4 <= 0x63
      && (unint64_t)((char *)v162 - (_BYTE *)v161) >= 0x79)
    {
      v75 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v76 = (__n128)vdupq_n_s64(0x8000000000000000);
      v150 = (int8x16_t)v75;
      v151 = (int8x16_t)v76;
      if (v161 != v162)
      {
        v77 = (int8x16_t)v75;
        v78 = (int8x16_t)v76;
        do
        {
          v79 = (int64x2_t *)*v55++;
          v80 = v79[2];
          v81 = v79[3];
          v82 = (int8x16_t)vcgtq_s64((int64x2_t)v75, v80);
          v83 = vbslq_s8(v82, (int8x16_t)v80, v77);
          v84 = (int64x2_t)vbslq_s8(v82, (int8x16_t)v80, (int8x16_t)v75);
          v85 = (int8x16_t)vcgtq_s64(v84, v81);
          v77 = vbslq_s8(v85, (int8x16_t)v81, v83);
          v75 = (__n128)vbslq_s8(v85, (int8x16_t)v81, (int8x16_t)v84);
          v86 = (int8x16_t)vcgtq_s64(v80, (int64x2_t)v76);
          v87 = vbslq_s8(v86, (int8x16_t)v80, v78);
          v88 = (int64x2_t)vbslq_s8(v86, (int8x16_t)v80, (int8x16_t)v76);
          v89 = (int8x16_t)vcgtq_s64(v81, v88);
          v78 = vbslq_s8(v89, (int8x16_t)v81, v87);
          v76 = (__n128)vbslq_s8(v89, (int8x16_t)v81, (int8x16_t)v88);
        }
        while (v55 != v162);
        v150 = v77;
        v151 = v78;
      }
      if (!sub_2233FD0EC(&v150, &v161, &v158, a4 + 1, a5, a6, a7, v75, v76)
        || (sub_2233FD0EC(&v150, &v161, &v155, a4 + 1, a5, a6, a7, v90, v91) & 1) == 0)
      {
        goto LABEL_217;
      }
      goto LABEL_98;
    }
  }
  else
  {
    v55 = (uint64_t *)v161;
    v54 = v162;
  }
  if (v158 == v159 || v55 == v54)
  {
    if (v55 == v54)
      goto LABEL_98;
    goto LABEL_45;
  }
  do
  {
    v63 = (uint64_t *)v158;
    if (v158 != v53)
    {
      do
      {
        v64 = *v55;
        v65 = *v63;
        if (*(_QWORD *)(*v55 + 48) >= *(_QWORD *)(*v63 + 32) && *(_QWORD *)(v64 + 32) <= *(_QWORD *)(v65 + 48))
        {
          v66 = *(_QWORD *)(v64 + 56) >= *(_QWORD *)(v65 + 40) && *(_QWORD *)(v64 + 40) <= *(_QWORD *)(v65 + 56);
          v67 = v66 && *(_BYTE *)(v64 + 96) == 0;
          if (v67 && *(_BYTE *)(v65 + 96) == 0)
          {
            if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v64, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v65, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
            v53 = v159;
          }
        }
        ++v63;
      }
      while (v63 != v53);
      v54 = v162;
    }
    ++v55;
  }
  while (v55 != v54);
  v55 = (uint64_t *)v161;
  if (v161 != v54)
  {
LABEL_45:
    v62 = v156;
    if (v155 != v156)
    {
      do
      {
        v69 = (uint64_t *)v155;
        if (v155 != v62)
        {
          do
          {
            v70 = *v55;
            v71 = *v69;
            if (*(_QWORD *)(*v55 + 48) >= *(_QWORD *)(*v69 + 32) && *(_QWORD *)(v70 + 32) <= *(_QWORD *)(v71 + 48))
            {
              v72 = *(_QWORD *)(v70 + 56) >= *(_QWORD *)(v71 + 40) && *(_QWORD *)(v70 + 40) <= *(_QWORD *)(v71 + 56);
              v73 = v72 && *(_BYTE *)(v70 + 96) == 0;
              if (v73 && *(_BYTE *)(v71 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v70, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v71, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v62 = v156;
              }
            }
            ++v69;
          }
          while (v69 != v62);
          v54 = v162;
        }
        ++v55;
      }
      while (v55 != v54);
    }
  }
LABEL_98:
  v93 = (int64x2_t **)__p;
  v92 = v153;
  if (__p == v153)
    goto LABEL_141;
  v95 = v167;
  v94 = v168;
  if ((unint64_t)((char *)v168 - (char *)v167) < 0x80
    || (unint64_t)((char *)v165 - (_BYTE *)v164) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v153 - (_BYTE *)__p) < 0x79)
  {
    if (v167 == v168)
    {
      v114 = (uint64_t *)v164;
      v113 = v165;
      if (v164 == v165 || __p == v153)
        goto LABEL_141;
    }
    else
    {
      do
      {
        v116 = (uint64_t *)__p;
        if (__p != v92)
        {
          do
          {
            v117 = *v95;
            v118 = *v116;
            if (*(_QWORD *)(*v95 + 48) >= *(_QWORD *)(*v116 + 32) && *(_QWORD *)(v117 + 32) <= *(_QWORD *)(v118 + 48))
            {
              v119 = *(_QWORD *)(v117 + 56) >= *(_QWORD *)(v118 + 40)
                  && *(_QWORD *)(v117 + 40) <= *(_QWORD *)(v118 + 56);
              v120 = v119 && *(_BYTE *)(v117 + 96) == 0;
              if (v120 && *(_BYTE *)(v118 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v117, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v118, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v92 = v153;
              }
            }
            ++v116;
          }
          while (v116 != v92);
          v94 = v168;
        }
        ++v95;
      }
      while (v95 != v94);
      v114 = (uint64_t *)v164;
      v113 = v165;
      if (v164 == v165 || __p == v92)
        goto LABEL_141;
    }
    do
    {
      v125 = (uint64_t *)__p;
      if (__p != v92)
      {
        do
        {
          v126 = *v114;
          v127 = *v125;
          if (*(_QWORD *)(*v114 + 48) >= *(_QWORD *)(*v125 + 32) && *(_QWORD *)(v126 + 32) <= *(_QWORD *)(v127 + 48))
          {
            v128 = *(_QWORD *)(v126 + 56) >= *(_QWORD *)(v127 + 40) && *(_QWORD *)(v126 + 40) <= *(_QWORD *)(v127 + 56);
            v129 = v128 && *(_BYTE *)(v126 + 96) == 0;
            if (v129 && *(_BYTE *)(v127 + 96) == 0)
            {
              if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v126, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v127, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
              v92 = v153;
            }
          }
          ++v125;
        }
        while (v125 != v92);
        v113 = v165;
      }
      ++v114;
    }
    while (v114 != v113);
    goto LABEL_141;
  }
  v96 = (__n128)vdupq_n_s64(0x8000000000000000);
  v97 = (__n128)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v98 = (int8x16_t)v97;
  v99 = (int8x16_t)v96;
  do
  {
    v100 = *v93++;
    v101 = v100[2];
    v102 = v100[3];
    v103 = (int8x16_t)vcgtq_s64((int64x2_t)v97, v101);
    v104 = vbslq_s8(v103, (int8x16_t)v101, v98);
    v105 = (int64x2_t)vbslq_s8(v103, (int8x16_t)v101, (int8x16_t)v97);
    v106 = (int8x16_t)vcgtq_s64(v105, v102);
    v98 = vbslq_s8(v106, (int8x16_t)v102, v104);
    v97 = (__n128)vbslq_s8(v106, (int8x16_t)v102, (int8x16_t)v105);
    v107 = (int8x16_t)vcgtq_s64(v101, (int64x2_t)v96);
    v108 = vbslq_s8(v107, (int8x16_t)v101, v99);
    v109 = (int64x2_t)vbslq_s8(v107, (int8x16_t)v101, (int8x16_t)v96);
    v110 = (int8x16_t)vcgtq_s64(v102, v109);
    v99 = vbslq_s8(v110, (int8x16_t)v102, v108);
    v96 = (__n128)vbslq_s8(v110, (int8x16_t)v102, (int8x16_t)v109);
  }
  while (v93 != v153);
  v150 = v98;
  v151 = v99;
  if (!sub_2233FD0EC(&v150, &v167, &__p, a4 + 1, a5, a6, a7, v96, v97)
    || (sub_2233FD0EC(&v150, &v164, &__p, a4 + 1, a5, a6, a7, v111, v112) & 1) == 0)
  {
    goto LABEL_217;
  }
LABEL_141:
  v124 = v167;
  v123 = v168;
  if ((unint64_t)((char *)v168 - (char *)v167) < 0x80
    || a4 > 0x63
    || (unint64_t)((_BYTE *)v159 - (_BYTE *)v158) < 0x79)
  {
    if (v167 != v168)
    {
      v131 = v159;
      if (v158 != v159)
      {
        do
        {
          v134 = (uint64_t *)v158;
          if (v158 != v131)
          {
            do
            {
              v135 = *v124;
              v136 = *v134;
              if (*(_QWORD *)(*v124 + 48) >= *(_QWORD *)(*v134 + 32)
                && *(_QWORD *)(v135 + 32) <= *(_QWORD *)(v136 + 48))
              {
                v137 = *(_QWORD *)(v135 + 56) >= *(_QWORD *)(v136 + 40)
                    && *(_QWORD *)(v135 + 40) <= *(_QWORD *)(v136 + 56);
                v138 = v137 && *(_BYTE *)(v135 + 96) == 0;
                if (v138 && *(_BYTE *)(v136 + 96) == 0)
                {
                  if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v135, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v136, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                  v131 = v159;
                }
              }
              ++v134;
            }
            while (v134 != v131);
            v123 = v168;
          }
          ++v124;
        }
        while (v124 != v123);
      }
    }
  }
  else if ((sub_2233FD0EC(&v172, &v167, &v158, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_217;
  }
  v133 = (uint64_t *)v164;
  v132 = v165;
  if ((unint64_t)((char *)v165 - (_BYTE *)v164) < 0x80
    || a4 > 0x63
    || (unint64_t)(v156 - (_BYTE *)v155) < 0x79)
  {
    if (v164 != v165)
    {
      v140 = v156;
      if (v155 != v156)
      {
        do
        {
          v143 = (uint64_t *)v155;
          if (v155 != v140)
          {
            do
            {
              v144 = *v133;
              v145 = *v143;
              if (*(_QWORD *)(*v133 + 48) >= *(_QWORD *)(*v143 + 32)
                && *(_QWORD *)(v144 + 32) <= *(_QWORD *)(v145 + 48))
              {
                v146 = *(_QWORD *)(v144 + 56) >= *(_QWORD *)(v145 + 40)
                    && *(_QWORD *)(v144 + 40) <= *(_QWORD *)(v145 + 56);
                v147 = v146 && *(_BYTE *)(v144 + 96) == 0;
                if (v147 && *(_BYTE *)(v145 + 96) == 0)
                {
                  if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v144, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v145, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                  v140 = v156;
                }
              }
              ++v143;
            }
            while (v143 != v140);
            v132 = v165;
          }
          ++v133;
        }
        while (v133 != v132);
      }
    }
  }
  else if ((sub_2233FD0EC(v170, &v164, &v155, a4 + 1, a5, a6, a7, v21, v22) & 1) == 0)
  {
    goto LABEL_217;
  }
  v141 = 1;
  v142 = __p;
  if (__p)
  {
LABEL_218:
    v153 = v142;
    operator delete(v142);
  }
LABEL_219:
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = (uint64_t *)v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = (uint64_t *)v164;
    operator delete(v164);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  return v141;
}

void sub_2233FD028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a22;
    if (!a22)
    {
LABEL_3:
      v35 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a25;
  if (!a25)
  {
LABEL_4:
    v36 = a28;
    if (!a28)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a28;
  if (!a28)
  {
LABEL_5:
    v37 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_6:
    v38 = *(void **)(v32 - 152);
    if (!v38)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = *(void **)(v32 - 152);
  if (!v38)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v32 - 144) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233FD0EC(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  int64x2_t **v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  int8x16_t v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  int64x2_t v73;
  int64x2_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int64x2_t v86;
  int8x16_t v87;
  void *v88;
  int64x2_t **v89;
  uint64_t *v90;
  uint64_t *v91;
  int64x2_t v92;
  int64x2_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int64x2_t *v96;
  int64x2_t v97;
  int64x2_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int64x2_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int64x2_t v105;
  int8x16_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  BOOL v123;
  void *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  BOOL v132;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  BOOL v141;
  int8x16_t v144;
  int8x16_t v145;
  void *__p;
  _QWORD *v147;
  uint64_t v148;
  void *v149;
  _BYTE *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t *v156;
  uint64_t v157;
  void *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164[2];
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;

  v13 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 1);
  if (v14 >= 0)
    v15 = *((_QWORD *)a1 + 1);
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  v17 = *a1;
  v165 = a1[1];
  v166 = v17;
  if (v12 >= 0)
    v18 = v12;
  else
    v18 = v12 + 1;
  v19 = v18 >> 1;
  v164[0] = v17;
  v20 = v12 - 2 * v19 + v14 - 2 * v16;
  v167 = v13;
  v168 = v19 + v16 + ((v20 + ((v20 & 0x80) >> 7)) << 24 >> 25);
  v164[1] = v168;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  __p = 0;
  v147 = 0;
  v148 = 0;
  sub_2233DD4BC(&v166, v164, a2, &v161, (char **)&v158, (char **)&v155);
  sub_2233DD4BC(&v166, v164, a3, &v152, (char **)&v149, (char **)&__p);
  v22 = (uint64_t *)v155;
  v21 = v156;
  if (v155 == v156)
    goto LABEL_98;
  v24 = (int64x2_t **)__p;
  v23 = v147;
  if ((unint64_t)((char *)v156 - (_BYTE *)v155) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v147 - (_BYTE *)__p) < 0x79)
  {
    if (__p != v147)
    {
      do
      {
        v54 = (uint64_t *)__p;
        if (__p != v23)
        {
          do
          {
            v55 = *v22;
            v56 = *v54;
            if (*(_QWORD *)(*v22 + 48) >= *(_QWORD *)(*v54 + 32) && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
            {
              v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
              v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
              if (v58 && *(_BYTE *)(v56 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v55, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v56, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v23 = v147;
              }
            }
            ++v54;
          }
          while (v54 != v23);
          v21 = v156;
        }
        ++v22;
      }
      while (v22 != v21);
    }
  }
  else
  {
    v25 = vdupq_n_s64(0x8000000000000000);
    v26 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v27 = (int8x16_t)v26;
    v28 = (int8x16_t)v25;
    do
    {
      v29 = (int64x2_t *)*v22++;
      v30 = v29[2];
      v31 = v29[3];
      v32 = (int8x16_t)vcgtq_s64(v26, v30);
      v33 = vbslq_s8(v32, (int8x16_t)v30, v27);
      v34 = (int64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v26);
      v35 = (int8x16_t)vcgtq_s64(v34, v31);
      v27 = vbslq_s8(v35, (int8x16_t)v31, v33);
      v26 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v31, (int8x16_t)v34);
      v36 = (int8x16_t)vcgtq_s64(v30, v25);
      v37 = vbslq_s8(v36, (int8x16_t)v30, v28);
      v38 = (int64x2_t)vbslq_s8(v36, (int8x16_t)v30, (int8x16_t)v25);
      v39 = (int8x16_t)vcgtq_s64(v31, v38);
      v28 = vbslq_s8(v39, (int8x16_t)v31, v37);
      v25 = (int64x2_t)vbslq_s8(v39, (int8x16_t)v31, (int8x16_t)v38);
    }
    while (v22 != v156);
    v144 = v27;
    v145 = v28;
    if (__p != v147)
    {
      do
      {
        v40 = *v24++;
        v41 = v40[2];
        v42 = v40[3];
        v43 = (int8x16_t)vcgtq_s64(v26, v41);
        v44 = vbslq_s8(v43, (int8x16_t)v41, v27);
        v45 = (int64x2_t)vbslq_s8(v43, (int8x16_t)v41, (int8x16_t)v26);
        v46 = (int8x16_t)vcgtq_s64(v45, v42);
        v27 = vbslq_s8(v46, (int8x16_t)v42, v44);
        v26 = (int64x2_t)vbslq_s8(v46, (int8x16_t)v42, (int8x16_t)v45);
        v47 = (int8x16_t)vcgtq_s64(v41, v25);
        v48 = vbslq_s8(v47, (int8x16_t)v41, v28);
        v49 = (int64x2_t)vbslq_s8(v47, (int8x16_t)v41, (int8x16_t)v25);
        v50 = (int8x16_t)vcgtq_s64(v42, v49);
        v28 = vbslq_s8(v50, (int8x16_t)v42, v48);
        v25 = (int64x2_t)vbslq_s8(v50, (int8x16_t)v42, (int8x16_t)v49);
      }
      while (v24 != v147);
      v144 = v27;
      v145 = v28;
    }
    if ((sub_2233FC550(v144.i64, &v155, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
    {
LABEL_217:
      v135 = 0;
      v136 = __p;
      if (!__p)
        goto LABEL_219;
      goto LABEL_218;
    }
  }
  v51 = v153;
  if ((unint64_t)((_BYTE *)v153 - (_BYTE *)v152) > 0x7F)
  {
    v53 = (uint64_t *)v155;
    v52 = v156;
    if ((unint64_t)(v150 - (_BYTE *)v149) >= 0x80
      && a4 <= 0x63
      && (unint64_t)((char *)v156 - (_BYTE *)v155) >= 0x79)
    {
      v73 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      v74 = vdupq_n_s64(0x8000000000000000);
      v144 = (int8x16_t)v73;
      v145 = (int8x16_t)v74;
      if (v155 != v156)
      {
        v75 = (int8x16_t)v73;
        v76 = (int8x16_t)v74;
        do
        {
          v77 = (int64x2_t *)*v53++;
          v78 = v77[2];
          v79 = v77[3];
          v80 = (int8x16_t)vcgtq_s64(v73, v78);
          v81 = vbslq_s8(v80, (int8x16_t)v78, v75);
          v82 = (int64x2_t)vbslq_s8(v80, (int8x16_t)v78, (int8x16_t)v73);
          v83 = (int8x16_t)vcgtq_s64(v82, v79);
          v75 = vbslq_s8(v83, (int8x16_t)v79, v81);
          v73 = (int64x2_t)vbslq_s8(v83, (int8x16_t)v79, (int8x16_t)v82);
          v84 = (int8x16_t)vcgtq_s64(v78, v74);
          v85 = vbslq_s8(v84, (int8x16_t)v78, v76);
          v86 = (int64x2_t)vbslq_s8(v84, (int8x16_t)v78, (int8x16_t)v74);
          v87 = (int8x16_t)vcgtq_s64(v79, v86);
          v76 = vbslq_s8(v87, (int8x16_t)v79, v85);
          v74 = (int64x2_t)vbslq_s8(v87, (int8x16_t)v79, (int8x16_t)v86);
        }
        while (v53 != v156);
        v144 = v75;
        v145 = v76;
      }
      if (!sub_2233FC550(v144.i64, &v155, &v152, a4 + 1, a5, a6, a7)
        || (sub_2233FC550(v144.i64, &v155, &v149, a4 + 1, a5, a6, a7) & 1) == 0)
      {
        goto LABEL_217;
      }
      goto LABEL_98;
    }
  }
  else
  {
    v53 = (uint64_t *)v155;
    v52 = v156;
  }
  if (v152 == v153 || v53 == v52)
  {
    if (v53 == v52)
      goto LABEL_98;
    goto LABEL_45;
  }
  do
  {
    v61 = (uint64_t *)v152;
    if (v152 != v51)
    {
      do
      {
        v62 = *v53;
        v63 = *v61;
        if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*v61 + 32) && *(_QWORD *)(v62 + 32) <= *(_QWORD *)(v63 + 48))
        {
          v64 = *(_QWORD *)(v62 + 56) >= *(_QWORD *)(v63 + 40) && *(_QWORD *)(v62 + 40) <= *(_QWORD *)(v63 + 56);
          v65 = v64 && *(_BYTE *)(v62 + 96) == 0;
          if (v65 && *(_BYTE *)(v63 + 96) == 0)
          {
            if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v62, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v63, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
            v51 = v153;
          }
        }
        ++v61;
      }
      while (v61 != v51);
      v52 = v156;
    }
    ++v53;
  }
  while (v53 != v52);
  v53 = (uint64_t *)v155;
  if (v155 != v52)
  {
LABEL_45:
    v60 = v150;
    if (v149 != v150)
    {
      do
      {
        v67 = (uint64_t *)v149;
        if (v149 != v60)
        {
          do
          {
            v68 = *v53;
            v69 = *v67;
            if (*(_QWORD *)(*v53 + 48) >= *(_QWORD *)(*v67 + 32) && *(_QWORD *)(v68 + 32) <= *(_QWORD *)(v69 + 48))
            {
              v70 = *(_QWORD *)(v68 + 56) >= *(_QWORD *)(v69 + 40) && *(_QWORD *)(v68 + 40) <= *(_QWORD *)(v69 + 56);
              v71 = v70 && *(_BYTE *)(v68 + 96) == 0;
              if (v71 && *(_BYTE *)(v69 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v68, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v69, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v60 = v150;
              }
            }
            ++v67;
          }
          while (v67 != v60);
          v52 = v156;
        }
        ++v53;
      }
      while (v53 != v52);
    }
  }
LABEL_98:
  v89 = (int64x2_t **)__p;
  v88 = v147;
  if (__p == v147)
    goto LABEL_141;
  v91 = v161;
  v90 = v162;
  if ((unint64_t)((char *)v162 - (char *)v161) < 0x80
    || (unint64_t)((char *)v159 - (_BYTE *)v158) < 0x80
    || a4 > 0x63
    || (unint64_t)((char *)v147 - (_BYTE *)__p) < 0x79)
  {
    if (v161 == v162)
    {
      v108 = (uint64_t *)v158;
      v107 = v159;
      if (v158 == v159 || __p == v147)
        goto LABEL_141;
    }
    else
    {
      do
      {
        v110 = (uint64_t *)__p;
        if (__p != v88)
        {
          do
          {
            v111 = *v91;
            v112 = *v110;
            if (*(_QWORD *)(*v91 + 48) >= *(_QWORD *)(*v110 + 32) && *(_QWORD *)(v111 + 32) <= *(_QWORD *)(v112 + 48))
            {
              v113 = *(_QWORD *)(v111 + 56) >= *(_QWORD *)(v112 + 40)
                  && *(_QWORD *)(v111 + 40) <= *(_QWORD *)(v112 + 56);
              v114 = v113 && *(_BYTE *)(v111 + 96) == 0;
              if (v114 && *(_BYTE *)(v112 + 96) == 0)
              {
                if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v111, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v112, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                v88 = v147;
              }
            }
            ++v110;
          }
          while (v110 != v88);
          v90 = v162;
        }
        ++v91;
      }
      while (v91 != v90);
      v108 = (uint64_t *)v158;
      v107 = v159;
      if (v158 == v159 || __p == v88)
        goto LABEL_141;
    }
    do
    {
      v119 = (uint64_t *)__p;
      if (__p != v88)
      {
        do
        {
          v120 = *v108;
          v121 = *v119;
          if (*(_QWORD *)(*v108 + 48) >= *(_QWORD *)(*v119 + 32) && *(_QWORD *)(v120 + 32) <= *(_QWORD *)(v121 + 48))
          {
            v122 = *(_QWORD *)(v120 + 56) >= *(_QWORD *)(v121 + 40) && *(_QWORD *)(v120 + 40) <= *(_QWORD *)(v121 + 56);
            v123 = v122 && *(_BYTE *)(v120 + 96) == 0;
            if (v123 && *(_BYTE *)(v121 + 96) == 0)
            {
              if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v120, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v121, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
              v88 = v147;
            }
          }
          ++v119;
        }
        while (v119 != v88);
        v107 = v159;
      }
      ++v108;
    }
    while (v108 != v107);
    goto LABEL_141;
  }
  v92 = vdupq_n_s64(0x8000000000000000);
  v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v94 = (int8x16_t)v93;
  v95 = (int8x16_t)v92;
  do
  {
    v96 = *v89++;
    v97 = v96[2];
    v98 = v96[3];
    v99 = (int8x16_t)vcgtq_s64(v93, v97);
    v100 = vbslq_s8(v99, (int8x16_t)v97, v94);
    v101 = (int64x2_t)vbslq_s8(v99, (int8x16_t)v97, (int8x16_t)v93);
    v102 = (int8x16_t)vcgtq_s64(v101, v98);
    v94 = vbslq_s8(v102, (int8x16_t)v98, v100);
    v93 = (int64x2_t)vbslq_s8(v102, (int8x16_t)v98, (int8x16_t)v101);
    v103 = (int8x16_t)vcgtq_s64(v97, v92);
    v104 = vbslq_s8(v103, (int8x16_t)v97, v95);
    v105 = (int64x2_t)vbslq_s8(v103, (int8x16_t)v97, (int8x16_t)v92);
    v106 = (int8x16_t)vcgtq_s64(v98, v105);
    v95 = vbslq_s8(v106, (int8x16_t)v98, v104);
    v92 = (int64x2_t)vbslq_s8(v106, (int8x16_t)v98, (int8x16_t)v105);
  }
  while (v89 != v147);
  v144 = v94;
  v145 = v95;
  if (!sub_2233FC550(v144.i64, &v161, &__p, a4 + 1, a5, a6, a7)
    || (sub_2233FC550(v144.i64, &v158, &__p, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
LABEL_141:
  v118 = v161;
  v117 = v162;
  if ((unint64_t)((char *)v162 - (char *)v161) < 0x80
    || a4 > 0x63
    || (unint64_t)((_BYTE *)v153 - (_BYTE *)v152) < 0x79)
  {
    if (v161 != v162)
    {
      v125 = v153;
      if (v152 != v153)
      {
        do
        {
          v128 = (uint64_t *)v152;
          if (v152 != v125)
          {
            do
            {
              v129 = *v118;
              v130 = *v128;
              if (*(_QWORD *)(*v118 + 48) >= *(_QWORD *)(*v128 + 32)
                && *(_QWORD *)(v129 + 32) <= *(_QWORD *)(v130 + 48))
              {
                v131 = *(_QWORD *)(v129 + 56) >= *(_QWORD *)(v130 + 40)
                    && *(_QWORD *)(v129 + 40) <= *(_QWORD *)(v130 + 56);
                v132 = v131 && *(_BYTE *)(v129 + 96) == 0;
                if (v132 && *(_BYTE *)(v130 + 96) == 0)
                {
                  if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v129, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v130, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                  v125 = v153;
                }
              }
              ++v128;
            }
            while (v128 != v125);
            v117 = v162;
          }
          ++v118;
        }
        while (v118 != v117);
      }
    }
  }
  else if ((sub_2233FC550((uint64_t *)&v166, &v161, &v152, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
  v127 = (uint64_t *)v158;
  v126 = v159;
  if ((unint64_t)((char *)v159 - (_BYTE *)v158) < 0x80
    || a4 > 0x63
    || (unint64_t)(v150 - (_BYTE *)v149) < 0x79)
  {
    if (v158 != v159)
    {
      v134 = v150;
      if (v149 != v150)
      {
        do
        {
          v137 = (uint64_t *)v149;
          if (v149 != v134)
          {
            do
            {
              v138 = *v127;
              v139 = *v137;
              if (*(_QWORD *)(*v127 + 48) >= *(_QWORD *)(*v137 + 32)
                && *(_QWORD *)(v138 + 32) <= *(_QWORD *)(v139 + 48))
              {
                v140 = *(_QWORD *)(v138 + 56) >= *(_QWORD *)(v139 + 40)
                    && *(_QWORD *)(v138 + 40) <= *(_QWORD *)(v139 + 56);
                v141 = v140 && *(_BYTE *)(v138 + 96) == 0;
                if (v141 && *(_BYTE *)(v139 + 96) == 0)
                {
                  if (!sub_2233FDC8C(*(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v138, *(_DWORD *)(a5 + 40), **(_QWORD **)a5, *(_QWORD *)(*(_QWORD *)a5 + 8), v139, *(_BYTE *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(BOOL **)(a5 + 32)))goto LABEL_217;
                  v134 = v150;
                }
              }
              ++v137;
            }
            while (v137 != v134);
            v126 = v159;
          }
          ++v127;
        }
        while (v127 != v126);
      }
    }
  }
  else if ((sub_2233FC550(v164, &v158, &v149, a4 + 1, a5, a6, a7) & 1) == 0)
  {
    goto LABEL_217;
  }
  v135 = 1;
  v136 = __p;
  if (__p)
  {
LABEL_218:
    v147 = v136;
    operator delete(v136);
  }
LABEL_219:
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v155)
  {
    v156 = (uint64_t *)v155;
    operator delete(v155);
  }
  if (v158)
  {
    v159 = (uint64_t *)v158;
    operator delete(v158);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  return v135;
}

void sub_2233FDBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a22;
    if (!a22)
    {
LABEL_3:
      v35 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a25;
  if (!a25)
  {
LABEL_4:
    v36 = a28;
    if (!a28)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a28;
  if (!a28)
  {
LABEL_5:
    v37 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a31;
  if (!a31)
  {
LABEL_6:
    v38 = *(void **)(v32 - 152);
    if (!v38)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = *(void **)(v32 - 152);
  if (!v38)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v32 - 144) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233FDC8C(int a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, _QWORD *a12, BOOL *a13)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  double v82;
  int v83;
  _BOOL4 v84;
  char ***v85;
  float **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  double v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  __int128 *v124;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[2];
  float *v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  unsigned __int128 v150;
  uint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  __int128 v155;
  int v156;
  _OWORD v157[2];
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[2];
  float *v168;
  float *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  unsigned __int128 v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  __int128 v186;
  int v187;
  _OWORD v188[2];
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  unsigned __int128 v199;
  __int128 v200;
  unsigned __int128 v201;
  _QWORD v202[3];
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  unsigned __int128 v206;
  uint64_t v207;
  _QWORD v208[3];
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  unsigned __int128 v212;
  uint64_t v213;
  float *v214;
  float *v215;
  uint64_t v216;
  __int16 v217;
  _DWORD v218[2];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE v223[24];
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE v231[24];
  uint64_t v232;
  int v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD v239[6];
  char v240;
  _QWORD v241[6];
  char v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD v246[3];
  uint64_t v247;
  float *v248;
  float *v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  _DWORD v258[7];
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  float *v264[2];
  float *v265;
  int v266;
  float v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _BYTE v274[24];
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE v282[24];
  uint64_t v283;
  int v284;

  v13 = (_QWORD *)a8;
  v14 = (_QWORD *)a4;
  v15 = a3;
  v16 = a2;
  if (*(_BYTE *)(a4 + 96) && (unint64_t)(*(_QWORD *)(a4 + 80) + 1) < *(_QWORD *)(a4 + 88)
    || *(_BYTE *)(a8 + 96) && (unint64_t)(*(_QWORD *)(a8 + 80) + 1) < *(_QWORD *)(a8 + 88))
  {
    return 1;
  }
  v18 = a3 - a2;
  v19 = (uint64_t)(a3 - a2) >> 3;
  if (a3 == a2)
    v20 = 0;
  else
    v20 = v19 + 1;
  v208[0] = a2;
  v208[1] = a2;
  v208[2] = a3;
  v209 = (uint64_t)(a3 - a2) >> 3;
  v210 = 0;
  *(_QWORD *)&v211 = a3;
  *((_QWORD *)&v211 + 1) = a2;
  v212 = __PAIR128__(v209, a3);
  v118 = v20;
  v213 = v20;
  v21 = a7 - a6;
  if (a7 == a6)
    v22 = 0;
  else
    v22 = ((uint64_t)(a7 - a6) >> 3) + 1;
  v202[0] = a6;
  v202[1] = a6;
  v202[2] = a7;
  v203 = (uint64_t)(a7 - a6) >> 3;
  v204 = 0;
  *(_QWORD *)&v205 = a7;
  *((_QWORD *)&v205 + 1) = a6;
  v206 = __PAIR128__(v203, a7);
  v129 = v203;
  v134 = v22;
  v207 = v22;
  v200 = v211;
  v201 = v212;
  v198 = v205;
  v199 = __PAIR128__(v203, a7);
  v23 = *(_DWORD *)a4;
  v112 = *(_DWORD *)a8;
  v197 = *(_QWORD *)(a4 + 64);
  v196 = *(_QWORD *)(a4 + 104);
  v195 = 0;
  v194 = 0u;
  v193 = 0u;
  v192 = 0;
  v191 = 0u;
  v190 = 0u;
  v189 = 0;
  memset(v188, 0, sizeof(v188));
  v107 = (uint64_t *)(a8 + 32);
  sub_2233E07A8(a4, v208, (uint64_t *)&v193, (uint64_t)&v190, (uint64_t *)v188, &v197, &v196, v23, (uint64_t *)(a8 + 32), a11);
  v24 = v191;
  v25 = v192;
  v26 = v192 + 1;
  if (v192 + 1 >= *((uint64_t *)&v191 + 1))
  {
    v27 = v191;
    if (v192 < *((uint64_t *)&v191 + 1))
      v27 = *((_QWORD *)&v190 + 1) + 8 * (v26 % *((_QWORD *)&v191 + 1));
  }
  else
  {
    v27 = v190 + 8;
  }
  if (v26 == v118)
  {
    if (v18 < 9)
    {
      v27 = v15;
      if (v18 >= 1)
        v27 = v16 + 8 * (1 - v19);
    }
    else
    {
      v27 = v16 + 8;
    }
    v28 = v192 != 0;
    if (!v192)
      v27 = v16;
    v29 = (v15 - v16) >> 3;
    v116 = v16;
    v117 = v15;
  }
  else
  {
    v28 = v192 + 1;
    v29 = *((_QWORD *)&v191 + 1);
    v116 = *((_QWORD *)&v190 + 1);
    v117 = v191;
  }
  v234 = v190;
  v235 = v191;
  v236 = v192++;
  if (v26 >= *((uint64_t *)&v191 + 1))
  {
    if (v25 < *((uint64_t *)&v191 + 1))
      v24 = *((_QWORD *)&v190 + 1) + 8 * (v26 % *((_QWORD *)&v191 + 1));
  }
  else
  {
    v24 = v190 + 8;
  }
  *(_QWORD *)&v190 = v24;
  v193 = v234;
  v194 = v235;
  v195 = v236;
  v30 = v28 + 1;
  if (v28 + 1 >= v29)
  {
    v31 = v117;
    if (v28 >= v29)
    {
      if (v30 == v118)
        goto LABEL_37;
    }
    else
    {
      v31 = v116 + 8 * (v30 % v29);
      if (v30 == v118)
        goto LABEL_37;
    }
LABEL_31:
    result = 1;
    if (v26 == v189)
      return result;
LABEL_45:
    v119 = v14 + 4;
    v111 = -v23;
    v124 = (__int128 *)(a11 + 8);
    v33 = a6 + 8 * (1 - v129);
    if (v21 <= 0)
      v33 = a7;
    if (v21 > 8)
      v33 = a6 + 8;
    v120 = v33;
    if (v18 <= 0)
      v34 = v15;
    else
      v34 = v16 + 8 * (1 - v19);
    if (v18 > 8)
      v34 = v16 + 8;
    v106 = v34;
    v123 = -v112;
    v35 = (float *)v193;
    v109 = v16;
    v110 = v15;
    v108 = (v15 - v16) >> 3;
    v36 = v29;
    v37 = v31;
    v38 = v30;
    v121 = v14;
    v122 = v13;
    while (1)
    {
      v39 = (float)((float)(v35[1] - *(float *)(a11 + 4)) * *(float *)(a11 + 24)) + (float)*(uint64_t *)(a11 + 16);
      if (v39 >= 0.0)
        v40 = 0.5;
      else
        v40 = -0.5;
      sub_2233DC31C(v39 + v40);
      v41 = (float)((float)(*v35 - *(float *)a11) * *(float *)(a11 + 24)) + (float)*(uint64_t *)(a11 + 8);
      if (v41 >= 0.0)
        v42 = 0.5;
      else
        v42 = -0.5;
      v43 = v41 + v42;
      sub_2233DC31C(v41 + v42);
      v44 = ceilf(v43);
      v45 = floorf(v43);
      if (v43 >= 0.0)
        v44 = v45;
      v46 = (uint64_t)v44;
      if (v111 == 1)
      {
        if (*v107 > v46)
          return 1;
      }
      else if (v111 == -1 && v13[6] < v46)
      {
        return 1;
      }
      v180 = v200;
      v181 = v201;
      v167[0] = v14;
      v167[1] = v197;
      v168 = (float *)v193;
      v169 = (float *)v190;
      v170 = v37;
      v171 = v116;
      v172 = v117;
      v173 = v36;
      v174 = v38;
      v175 = v16;
      v176 = v16;
      v177 = v15;
      v178 = v19;
      v179 = 0;
      v182 = v118;
      v183 = 1;
      v184 = 0;
      v185 = *(_QWORD *)a11;
      v186 = *v124;
      v187 = *(_DWORD *)(a11 + 24);
      v166 = v13[8];
      v165 = v13[13];
      v164 = 0;
      v162 = 0u;
      v163 = 0u;
      v161 = 0;
      v159 = 0u;
      v160 = 0u;
      v158 = 0;
      memset(v157, 0, sizeof(v157));
      sub_2233E07A8((uint64_t)v13, v202, (uint64_t *)&v162, (uint64_t)&v159, (uint64_t *)v157, &v166, &v165, v112, v119, a11);
      v47 = v160;
      v48 = v161;
      v49 = v161 + 1;
      if (v161 + 1 >= *((uint64_t *)&v160 + 1))
      {
        v50 = v160;
        if (v161 < *((uint64_t *)&v160 + 1))
          v50 = *((_QWORD *)&v159 + 1) + 8 * (v49 % *((_QWORD *)&v160 + 1));
      }
      else
      {
        v50 = v159 + 8;
      }
      v113 = v38;
      v114 = v37;
      if (v49 == v134)
      {
        v51 = v161 != 0;
        v52 = a7;
        v50 = v120;
        if (!v161)
          v50 = a6;
        v53 = v129;
        v54 = a6;
      }
      else
      {
        v53 = *((_QWORD *)&v160 + 1);
        v51 = v161 + 1;
        v52 = v160;
        v54 = *((_QWORD *)&v159 + 1);
      }
      v234 = v159;
      v235 = v160;
      v236 = v161++;
      v115 = v36;
      if (v49 >= *((uint64_t *)&v160 + 1))
      {
        if (v48 < *((uint64_t *)&v160 + 1))
          v47 = *((_QWORD *)&v159 + 1) + 8 * (v49 % *((_QWORD *)&v160 + 1));
      }
      else
      {
        v47 = v159 + 8;
      }
      *(_QWORD *)&v159 = v47;
      v162 = v234;
      v163 = v235;
      v164 = v236;
      v55 = v51 + 1;
      if (v51 + 1 >= v53)
      {
        v135 = v52;
        if (v51 >= v53)
        {
          if (v55 != v134)
          {
LABEL_84:
            if (v49 != v158)
              break;
            goto LABEL_93;
          }
        }
        else
        {
          v135 = v54 + 8 * (v55 % v53);
          if (v55 != v134)
            goto LABEL_84;
        }
      }
      else
      {
        v135 = v50 + 8;
        if (v55 != v134)
          goto LABEL_84;
      }
      v55 = v51 != 0;
      v52 = a7;
      v56 = v120;
      if (!v51)
        v56 = a6;
      v135 = v56;
      v53 = v129;
      v54 = a6;
      if (v49 != v158)
        break;
LABEL_93:
      v57 = v195;
      v58 = v195 + 1;
      v195 = v58;
      if (v58 >= *((uint64_t *)&v194 + 1))
      {
        if (v57 >= *((uint64_t *)&v194 + 1))
          v35 = (float *)v194;
        else
          v35 = (float *)(*((_QWORD *)&v193 + 1) + 8 * (v58 % *((_QWORD *)&v194 + 1)));
      }
      else
      {
        v35 = (float *)(v193 + 8);
      }
      v16 = v109;
      v15 = v110;
      v19 = v108;
      v36 = v115;
      *(_QWORD *)&v193 = v35;
      v102 = v192;
      v103 = v192 + 1;
      v192 = v103;
      if (v103 >= *((uint64_t *)&v191 + 1))
      {
        if (v102 >= *((uint64_t *)&v191 + 1))
          v104 = v191;
        else
          v104 = *((_QWORD *)&v190 + 1) + 8 * (v103 % *((_QWORD *)&v191 + 1));
      }
      else
      {
        v104 = v190 + 8;
      }
      *(_QWORD *)&v190 = v104;
      ++v197;
      v105 = v113 + 1;
      if (v113 + 1 >= v115)
      {
        v37 = v117;
        if (v113 < v115)
          v37 = v116 + 8 * (v105 % v115);
      }
      else
      {
        v37 = v114 + 8;
      }
      if (v105 == v118)
      {
        v105 = v113 != 0;
        if (v113)
          v37 = v106;
        else
          v37 = v109;
        v36 = v108;
        v116 = v109;
        v117 = v110;
      }
      ++v196;
      v38 = v105;
      if (v103 == v189)
        return 1;
    }
    v59 = (float *)v162;
    while (1)
    {
      v60 = (float)((float)(v59[1] - *(float *)(a11 + 4)) * *(float *)(a11 + 24)) + (float)*(uint64_t *)(a11 + 16);
      if (v60 >= 0.0)
        v61 = 0.5;
      else
        v61 = -0.5;
      sub_2233DC31C(v60 + v61);
      v62 = (float)((float)(*v59 - *(float *)a11) * *(float *)(a11 + 24)) + (float)*(uint64_t *)(a11 + 8);
      if (v62 >= 0.0)
        v63 = 0.5;
      else
        v63 = -0.5;
      v64 = v62 + v63;
      sub_2233DC31C(v62 + v63);
      v65 = ceilf(v64);
      v66 = floorf(v64);
      if (v64 >= 0.0)
        v65 = v66;
      v67 = (uint64_t)v65;
      if (v123 == 1)
      {
        if (*v119 > v67)
          goto LABEL_93;
      }
      else if (v123 == -1 && v14[6] < v67)
      {
        goto LABEL_93;
      }
      if (a1 == a5)
      {
        v68 = v14[3];
        v70 = v13[2];
        v69 = v13[3];
        if (v14[2] == v70)
        {
          if (v68 == v69 && a9)
          {
            if (v165 == v196 + 1)
              goto LABEL_146;
            if (v197)
            {
              v69 = v14[3];
              v70 = v14[2];
            }
            else
            {
              v69 = v14[3];
              v70 = v14[2];
              if (v14[11] - 2 <= v166)
                goto LABEL_146;
            }
          }
          else
          {
            v70 = v14[2];
          }
        }
      }
      else
      {
        v68 = v14[3];
        v70 = v13[2];
        v69 = v13[3];
      }
      v127 = v69;
      v128 = v14[2];
      v71 = v166;
      v149 = v198;
      v150 = v199;
      v136[0] = v13;
      v136[1] = v166;
      v137 = (float *)v162;
      v138 = (float *)v159;
      v139 = v135;
      v132 = v55;
      v133 = v54;
      v140 = v54;
      v141 = v52;
      v142 = v53;
      v143 = v55;
      v144 = a6;
      v145 = a6;
      v146 = a7;
      v72 = a12;
      v147 = v129;
      v148 = 0;
      v151 = v134;
      v152 = 0;
      v153 = 0;
      v154 = *(_QWORD *)a11;
      v155 = *v124;
      v156 = *(_DWORD *)(a11 + 24);
      v73 = v197;
      v74 = *a12;
      v75 = a12[1];
      *(_QWORD *)&v234 = v167;
      *((_QWORD *)&v234 + 1) = v136;
      v76 = sub_2233E29A4((uint64_t)&v235, (uint64_t)v167, (uint64_t)v136, a11);
      v239[0] = v167;
      v239[1] = a11;
      v239[2] = v76;
      v239[3] = &v236;
      v240 = 0;
      v241[0] = v136;
      v241[1] = a11;
      v241[2] = &v237;
      v241[3] = &v238;
      v242 = 0;
      v244 = v239;
      v245 = v241;
      v246[1] = v241;
      v246[2] = v239;
      v214 = v168;
      v215 = v169;
      v264[0] = v137;
      v264[1] = v138;
      v268 = xmmword_2245F5410;
      v269 = 0;
      v270 = 0;
      v271 = 1;
      v272 = 0;
      *(float *)&v265 = *v169 - *v168;
      *(float *)&v266 = *v138 - *v137;
      *((float *)&v265 + 1) = v169[1] - v168[1];
      v267 = v138[1] - v137[1];
      sub_2233E2FB8((uint64_t)&v265, &v214, v264, (uint64_t)v239, (uint64_t)v241, (uint64_t)&v247);
      v262 = a10;
      v263 = a11;
      if (LOBYTE(v258[0]) != 100)
      {
        v77 = v74;
        LODWORD(v215) = 0;
        BYTE4(v215) = 0;
        v216 = -1;
        v217 = 0;
        v218[0] = 0;
        v219 = a1;
        v220 = v128;
        v221 = v68;
        v222 = v73;
        *(_OWORD *)v223 = xmmword_2245F5400;
        *(_QWORD *)&v223[16] = 1;
        v224 = 0;
        v225 = 0;
        v226 = 0;
        v227 = a5;
        v228 = v70;
        v229 = v127;
        v230 = v71;
        *(_OWORD *)v231 = xmmword_2245F5400;
        *(_QWORD *)&v231[16] = 1;
        v232 = 0;
        v233 = 0;
        switch(LOBYTE(v258[0]))
        {
          case 'c':
            if (!BYTE1(v258[0]))
            {
              if (v260)
              {
                sub_2233E2060((uint64_t)v167, (uint64_t)v136, (uint64_t)&v214, (uint64_t)&v247, (uint64_t)v258, (uint64_t)&v243);
              }
              else
              {
                sub_2233E2744((uint64_t)v167, (uint64_t)v136, (uint64_t)&v214, (uint64_t)&v247, (uint64_t)v258, (uint64_t)&v243);
                LODWORD(v215) = 5;
              }
              goto LABEL_141;
            }
            *(float *)&v266 = 0.0;
            LOBYTE(v267) = 0;
            *(_QWORD *)&v268 = -1;
            WORD4(v268) = 0;
            LODWORD(v269) = 0;
            v270 = a1;
            v271 = v128;
            v272 = v68;
            v273 = v73;
            *(_OWORD *)v274 = xmmword_2245F5400;
            *(_QWORD *)&v274[16] = 1;
            v275 = 0;
            v276 = 0;
            v277 = 0;
            v278 = a5;
            v279 = v70;
            v280 = v127;
            v281 = v71;
            *(_OWORD *)v282 = xmmword_2245F5400;
            *(_QWORD *)&v282[16] = 1;
            v283 = 0;
            v284 = 0;
            v78 = v261;
            if (v260 == 1)
            {
              v79 = (uint64_t *)v244[2];
              v80 = (uint64_t *)v244[3];
              v81 = (uint64_t *)sub_2233E3E84((uint64_t)v244);
              v264[0] = (float *)0x3FF0000000000000;
              v82 = sub_2233E3FAC(v79, v80, v81, (double *)v264);
              if (v82 != 0.0
                && ((*(_QWORD *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                 || fabs(v82) > *(double *)v264 * 2.22044605e-16))
              {
                if (v82 <= 0.0)
                  v83 = 1;
                else
                  v83 = 2;
                v277 = 3;
                LODWORD(v269) = v83;
                v266 = 5;
                v265 = v249;
                *(_OWORD *)&v274[8] = v254;
                v275 = v255;
                *(_OWORD *)&v282[8] = v256;
                v283 = v257;
                v264[0] = (float *)a12;
                sub_2233EF4F8((char ***)v264, (uint64_t)&v265);
              }
            }
            if (v78 == 1)
            {
              v97 = (uint64_t *)v245[2];
              v98 = (uint64_t *)v245[3];
              v99 = (uint64_t *)sub_2233E3E84((uint64_t)v245);
              v264[0] = (float *)0x3FF0000000000000;
              v100 = sub_2233E3FAC(v97, v98, v99, (double *)v264);
              if (v100 != 0.0
                && ((*(_QWORD *)&v100 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
                 || fabs(v100) > *(double *)v264 * 2.22044605e-16))
              {
                if (v100 <= 0.0)
                  v101 = 1;
                else
                  v101 = 2;
                v277 = v101;
                LODWORD(v269) = 3;
                v266 = 5;
                v265 = v248;
                *(_OWORD *)&v274[8] = v250;
                v275 = v251;
                *(_OWORD *)&v282[8] = v252;
                v283 = v253;
                v264[0] = (float *)a12;
                v85 = (char ***)v264;
                v86 = &v265;
                goto LABEL_142;
              }
            }
            goto LABEL_143;
          case 'i':
            LODWORD(v215) = 2;
            v214 = v248;
            *(_OWORD *)&v223[8] = v250;
            v224 = v251;
            *(_OWORD *)&v231[8] = v252;
            v232 = v253;
            v84 = v259 == 1;
            v218[20 * (v259 != 1)] = 1;
            v218[20 * v84] = 2;
            goto LABEL_141;
          case 'm':
            if (v261 == 1)
              sub_2233E0FAC((uint64_t)v167, (uint64_t)v136, (uint64_t)&v214, (uint64_t)&v247, v258, (uint64_t)&v243);
            else
              sub_2233E14B8((uint64_t)v136, (uint64_t)v167, (uint64_t)&v214, (uint64_t)&v247, v258, (uint64_t)v246);
            goto LABEL_141;
          case 't':
            sub_2233E19C4((uint64_t)v167, (uint64_t)v136, (uint64_t)&v214, (uint64_t)&v247, v258, (uint64_t)&v243);
            goto LABEL_141;
          default:
            if (LOBYTE(v258[0]) != 101 || BYTE1(v258[0]))
              goto LABEL_143;
            sub_2233E2744((uint64_t)v167, (uint64_t)v136, (uint64_t)&v214, (uint64_t)&v247, (uint64_t)v258, (uint64_t)&v243);
LABEL_141:
            v265 = (float *)a12;
            v85 = (char ***)&v265;
            v86 = &v214;
LABEL_142:
            sub_2233EF4F8(v85, (uint64_t)v86);
LABEL_143:
            v72 = a12;
            v74 = v77;
            break;
        }
      }
      v87 = v72[1];
      v88 = *v72 + ((v75 - v74) >> 6 << 6);
      v14 = v121;
      *a13 = v88 != v87;
      v13 = v122;
      v55 = v132;
      v54 = v133;
      if (v88 != v87)
        return 0;
LABEL_146:
      v89 = v164;
      v90 = v164 + 1;
      v164 = v90;
      if (v90 >= *((uint64_t *)&v163 + 1))
      {
        if (v89 >= *((uint64_t *)&v163 + 1))
          v59 = (float *)v163;
        else
          v59 = (float *)(*((_QWORD *)&v162 + 1) + 8 * (v90 % *((_QWORD *)&v163 + 1)));
      }
      else
      {
        v59 = (float *)(v162 + 8);
      }
      *(_QWORD *)&v162 = v59;
      v91 = v161;
      v92 = v161 + 1;
      v161 = v92;
      if (v92 >= *((uint64_t *)&v160 + 1))
      {
        if (v91 >= *((uint64_t *)&v160 + 1))
          v93 = v160;
        else
          v93 = *((_QWORD *)&v159 + 1) + 8 * (v92 % *((_QWORD *)&v160 + 1));
      }
      else
      {
        v93 = v159 + 8;
      }
      *(_QWORD *)&v159 = v93;
      ++v166;
      v94 = v55 + 1;
      if (v55 + 1 < v53)
      {
        v95 = v135 + 8;
LABEL_160:
        v135 = v95;
        goto LABEL_161;
      }
      v135 = v52;
      if (v55 < v53)
      {
        v95 = v54 + 8 * (v94 % v53);
        goto LABEL_160;
      }
LABEL_161:
      if (v94 == v134)
      {
        v94 = v55 != 0;
        v52 = a7;
        v96 = v120;
        if (!v55)
          v96 = a6;
        v135 = v96;
        v53 = v129;
        v54 = a6;
      }
      ++v165;
      v55 = v94;
      if (v92 == v158)
        goto LABEL_93;
    }
  }
  v31 = v27 + 8;
  if (v30 != v118)
    goto LABEL_31;
LABEL_37:
  if (v18 < 9)
  {
    v32 = v15;
    if (v18 >= 1)
      v32 = v16 + 8 * (1 - v19);
  }
  else
  {
    v32 = v16 + 8;
  }
  v30 = v28 != 0;
  if (v28)
    v31 = v32;
  else
    v31 = v16;
  v29 = (v15 - v16) >> 3;
  v116 = v16;
  v117 = v15;
  result = 1;
  if (v26 != v189)
    goto LABEL_45;
  return result;
}

uint64_t sub_2233FEE70(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2233FEEB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233FEEC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233FEEF0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_2233FEF08(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_2233FEF48(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2233FF4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2233FF4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233FF4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_2233FF54C(float **a1, uint64_t **a2, uint64_t a3)
{
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  int v29;
  char v30;

  result = sub_2233FF828(a1, a2, a3);
  if (result)
  {
    if (*a2 != a2[1])
    {
      v28 = **a2;
      v7 = *a1;
      v6 = a1[1];
      v8 = (char *)v6 - (char *)*a1;
      if ((unint64_t)v8 > 0x17)
      {
        v9 = v8 >> 3;
        v10 = v6 == v7 ? 0 : v9 + 1;
        v29 = 0;
        v30 = 0;
        v11 = v10 - 1;
        if (v10 >= v9)
        {
          v12 = v6;
          if (v11 <= v9)
            v12 = &v7[2 * (v11 % v9)];
        }
        else
        {
          v12 = v6 - 2;
        }
        if (v10 != 1)
        {
          v13 = v6;
          do
          {
            if (v11 + 1 >= v9)
            {
              v14 = v6;
              if (v11 <= v9)
                v14 = &v7[2 * (v11 % v9)];
            }
            else
            {
              v14 = v13 - 2;
            }
            v15 = v11 - 1;
            if (v11 >= v9)
            {
              v16 = v6;
              if (v15 <= v9)
                v16 = &v7[2 * (v15 % v9)];
            }
            else
            {
              v16 = v12 - 2;
            }
            if (!sub_2233E62E4((float *)&v28, v14, v16, (uint64_t)&v29))
              break;
            if (v11 + 1 >= v9)
            {
              v13 = v6;
              if (v11 <= v9)
                v13 = &v7[2 * (v11 % v9)];
            }
            else
            {
              v13 -= 2;
            }
            if (v11 < v9)
            {
              v12 -= 2;
            }
            else
            {
              v12 = v6;
              if (v15 <= v9)
                v12 = &v7[2 * (v15 % v9)];
            }
            --v11;
          }
          while (v15);
          if (v30 || v29)
            return 0;
        }
      }
    }
    if (*a1 == a1[1])
      return 1;
    v28 = *(_QWORD *)*a1;
    v19 = a2;
    v17 = (float *)*a2;
    v18 = (float *)v19[1];
    if ((unint64_t)((char *)v18 - (char *)v17) <= 0x17)
      return 1;
    v20 = ((char *)v18 - (char *)v17) >> 3;
    v21 = v18 == v17 ? 0 : v20 + 1;
    v29 = 0;
    v30 = 0;
    v22 = v21 - 1;
    if (v21 >= v20)
    {
      v23 = v18;
      if (v22 <= v20)
        v23 = &v17[2 * (v22 % v20)];
    }
    else
    {
      v23 = v18 - 2;
    }
    if (v21 == 1)
      return 1;
    v24 = v18;
    do
    {
      if (v22 + 1 >= v20)
      {
        v25 = v18;
        if (v22 <= v20)
          v25 = &v17[2 * (v22 % v20)];
      }
      else
      {
        v25 = v24 - 2;
      }
      v26 = v22 - 1;
      if (v22 >= v20)
      {
        v27 = v18;
        if (v26 <= v20)
          v27 = &v17[2 * (v26 % v20)];
      }
      else
      {
        v27 = v23 - 2;
      }
      if (!sub_2233E62E4((float *)&v28, v25, v27, (uint64_t)&v29))
        break;
      if (v22 + 1 >= v20)
      {
        v24 = v18;
        if (v22 <= v20)
          v24 = &v17[2 * (v22 % v20)];
      }
      else
      {
        v24 -= 2;
      }
      if (v22 < v20)
      {
        v23 -= 2;
      }
      else
      {
        v23 = v18;
        if (v26 <= v20)
          v23 = &v17[2 * (v26 % v20)];
      }
      --v22;
    }
    while (v26);
    return !v30 && !v29;
  }
  return result;
}

BOOL sub_2233FF828(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;
  unsigned __int8 v12;
  void *__p[2];
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__p = 0u;
  v12 = 0;
  sub_2233FF940(0, a1, 1, a2, a3, (uint64_t)&v11, (uint64_t)__p, (uint64_t)&v12);
  v3 = v12;
  v4 = (void **)__p[1];
  v5 = (void **)v14;
  *((_QWORD *)&v15 + 1) = 0;
  v6 = v14 - (unint64_t)__p[1];
  if ((unint64_t)v14 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v5 = (void **)v14;
      v4 = (void **)((char *)__p[1] + 8);
      __p[1] = v4;
      v6 = v14 - (_QWORD)v4;
    }
    while ((_QWORD)v14 - (_QWORD)v4 > 0x10uLL);
  }
  v7 = v6 >> 3;
  if (v7 == 1)
  {
    v8 = 12;
    goto LABEL_7;
  }
  if (v7 == 2)
  {
    v8 = 25;
LABEL_7:
    *(_QWORD *)&v15 = v8;
  }
  if (v4 != v5)
  {
    do
    {
      v9 = *v4++;
      operator delete(v9);
    }
    while (v4 != v5);
    if ((void *)v14 != __p[1])
      *(_QWORD *)&v14 = v14 + (((unint64_t)__p[1] - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v3 == 0;
}

void sub_2233FF92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2234095B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233FF940(int a1, _QWORD *a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *__p;
  float32x4_t *v53;
  uint64_t v54;
  void *v55;
  float32x4_t *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v55 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v16 = (_QWORD *)*a2;
  v17 = a2[1];
  v18 = (v17 - *a2) >> 3;
  if (v17 == *a2)
    v19 = 0;
  else
    v19 = v18 + 1;
  if (v19 > 1)
  {
    v44 = a2[1];
    v45 = v16;
    v46 = v17;
    v47 = (_QWORD *)v18;
    v48 = v19;
    v60 = (uint64_t)v16;
    v61 = v16;
    v62 = v17;
    v63 = v18;
    v64 = 0;
    *(_QWORD *)&v58 = 0;
    *((_QWORD *)&v58 + 1) = -1;
    v59 = -1;
    sub_2233FFB9C(&v55, &v44, (uint64_t)&v60, a6, a5, &v58, 0xAuLL);
    v20 = (float32x4_t *)v55;
    v21 = v56;
    if (v55 != v56)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v27.i64[0] = 0x3400000034000000;
      v27.i64[1] = 0x3400000034000000;
      do
      {
        v28 = v20[2];
        v29 = vabsq_f32(v28);
        v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q0, v29), (int8x16_t)v27, (int8x16_t)vmulq_f32(v29, v27));
        v31.i64[0] = vsubq_f32(v28, v30).u64[0];
        v31.i64[1] = vaddq_f32(v28, v30).i64[1];
        v20[2] = v31;
        v20 = (float32x4_t *)((char *)v20 + 104);
      }
      while (v20 != v21);
    }
  }
  v53 = 0;
  v32 = (_QWORD *)*a4;
  v33 = a4[1];
  v34 = (v33 - *a4) >> 3;
  if (v33 == *a4)
    v35 = 0;
  else
    v35 = v34 + 1;
  if (v35 > 1)
  {
    v44 = a4[1];
    v45 = v32;
    v46 = v33;
    v47 = (_QWORD *)v34;
    v48 = v35;
    v60 = (uint64_t)v32;
    v61 = v32;
    v62 = v33;
    v63 = v34;
    v64 = 0;
    *(_QWORD *)&v58 = 1;
    *((_QWORD *)&v58 + 1) = -1;
    v59 = -1;
    sub_2233FFB9C(&__p, &v44, (uint64_t)&v60, a6, a5, &v58, 0xAuLL);
    v36 = (float32x4_t *)__p;
    v37 = v53;
    if (__p != v53)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v39.i64[0] = 0x3400000034000000;
      v39.i64[1] = 0x3400000034000000;
      do
      {
        v40 = v36[2];
        v41 = vabsq_f32(v40);
        v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(_Q0, v41), (int8x16_t)v39, (int8x16_t)vmulq_f32(v41, v39));
        v43.i64[0] = vsubq_f32(v40, v42).u64[0];
        v43.i64[1] = vaddq_f32(v40, v42).i64[1];
        v36[2] = v43;
        v36 = (float32x4_t *)((char *)v36 + 104);
      }
      while (v36 != v37);
    }
  }
  LODWORD(v44) = a1;
  v45 = a2;
  LODWORD(v46) = a3;
  v47 = a4;
  v48 = a5;
  v49 = a6;
  v50 = a7;
  v51 = a8;
  v60 = a5;
  *(_QWORD *)&v58 = a5;
  sub_223400410((float **)&v55, (float **)&__p, (uint64_t)&v44, (uint64_t)&v60, (uint64_t)&v58, (uint64_t)&v60, (uint64_t)&v58, 0x10uLL);
  if (__p)
  {
    v53 = (float32x4_t *)__p;
    operator delete(__p);
  }
  if (v55)
  {
    v56 = (float32x4_t *)v55;
    operator delete(v55);
  }
}

void sub_2233FFB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v22 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2233FFB9C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float *v40;
  BOOL v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  unint64_t v102;
  char **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  float *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;

  v7 = a2[4];
  v8 = *(_QWORD *)(a3 + 32);
  v9 = v7 - v8;
  if (v7 == v8)
    return;
  v10 = (char **)a1;
  *((_QWORD *)&v119 + 1) = -1;
  v120 = -1;
  *(_QWORD *)&v119 = -1;
  v11 = (char *)a1[1];
  v12 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v11[-*a1] >> 3);
  v13 = a2[1];
  v14 = (float *)a2[2];
  v15 = a2[3];
  v16 = v7 - 1;
  if (v7 >= v15)
  {
    if (v16 <= v15)
    {
      v17 = (float *)(v13 + 8 * (v16 % v15));
      v18 = v17 + 1;
      if (v16 == v8)
        goto LABEL_126;
    }
    else
    {
      v18 = v14 + 1;
      v17 = (float *)a2[2];
      if (v16 == v8)
        goto LABEL_126;
    }
  }
  else
  {
    v17 = (float *)(*a2 - 8);
    v18 = (float *)(*a2 - 4);
    if (v16 == v8)
      goto LABEL_126;
  }
  v95 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v11[-*a1] >> 3);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = *v18;
  v28 = *v17;
  v29 = -1;
  v30 = 1;
  v31 = 3.4028e38;
  v32 = -3.4028e38;
  v33 = -1;
  v34 = -1;
  v35 = -3.4028e38;
  v36 = 3.4028e38;
  v102 = a7;
  v103 = v10;
  v100 = a3;
  v101 = a6;
  v98 = a2[1];
  v99 = v9;
  v96 = a2[3];
  v97 = (float *)a2[2];
  do
  {
    v37 = v28;
    v38 = v27;
    v39 = v16 - 1;
    if (v16 >= v15)
    {
      v40 = v14;
      if (v39 <= v15)
        v40 = (float *)(v13 + 8 * (v39 % v15));
    }
    else
    {
      v40 = v17 - 2;
    }
    v28 = *v40;
    v27 = v40[1];
    v41 = *v40 <= v37;
    if (*v40 >= v37)
      v42 = 0;
    else
      v42 = -1;
    if (v41)
      v43 = v42;
    else
      v43 = 1;
    if (v27 >= v38)
      v44 = 0;
    else
      v44 = -1;
    if (v27 > v38)
      v45 = 1;
    else
      v45 = v44;
    v117 = v33;
    if (!v43)
    {
      if (v37 == v28)
        goto LABEL_49;
      if ((LODWORD(v37) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v28) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v47 = vabds_f32(v37, v28);
        v48 = fabsf(v37);
        v49 = fabsf(v28);
        if (v48 < v49)
          v48 = v49;
        v50 = v48 >= 1.0 ? v48 * 0.00000011921 : 0.00000011921;
        if (v47 <= v50)
        {
LABEL_49:
          if (v38 == v27)
            goto LABEL_31;
          if ((LODWORD(v38) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v27) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v51 = vabds_f32(v38, v27);
            v52 = fabsf(v38);
            v53 = fabsf(v27);
            if (v52 < v53)
              v52 = v53;
            v54 = v52 >= 1.0 ? v52 * 0.00000011921 : 0.00000011921;
            if (v51 <= v54)
            {
LABEL_31:
              v46 = 1;
              v45 = 4294967197;
              v43 = -99;
              if (!v23)
                goto LABEL_90;
              goto LABEL_52;
            }
          }
        }
      }
      v43 = 0;
    }
    v46 = 0;
    if (!v23)
      goto LABEL_90;
LABEL_52:
    if (v43 != v22 || (_DWORD)v45 != (_DWORD)v21 || v23 > a7)
    {
      if (v25)
      {
        v115 = v43;
        v57 = (unint64_t)v10[2];
        if ((unint64_t)v11 < v57)
        {
LABEL_62:
          *(_QWORD *)v11 = v22 | (unint64_t)(v21 << 32);
          *((_QWORD *)v11 + 3) = v120;
          *(_OWORD *)(v11 + 8) = v119;
          *((float *)v11 + 8) = v36;
          *((float *)v11 + 9) = v31;
          *((float *)v11 + 10) = v35;
          *((float *)v11 + 11) = v32;
          *((_QWORD *)v11 + 6) = v29;
          *((_QWORD *)v11 + 7) = v117;
          *((_QWORD *)v11 + 8) = v23;
          *((_QWORD *)v11 + 9) = v24;
          v11[80] = v25;
          *((_QWORD *)v11 + 11) = v34;
          v11[96] = v26;
          v11[97] = 0;
          v58 = v11 + 104;
LABEL_89:
          v26 = 0;
          v10[1] = v58;
          v11 = v58;
          v43 = v115;
LABEL_90:
          v119 = *a6;
          v120 = *((_QWORD *)a6 + 2);
          if (!(v46 & 1 | ((v30 & 1) == 0)))
            v26 = 1;
          v30 &= v46;
          if (v28 >= v37)
            v36 = v37;
          else
            v36 = v28;
          if (v28 <= v37)
            v35 = v37;
          else
            v35 = v28;
          if (v27 >= v38)
            v31 = v38;
          else
            v31 = v27;
          v23 = 0;
          v34 = v19;
          v25 = v46;
          if (v27 > v38)
            v32 = v27;
          else
            v32 = v38;
          v24 = v9;
          v29 = v20;
          v22 = v43;
          v21 = v45;
          if (v16 < v15)
            goto LABEL_10;
          goto LABEL_105;
        }
      }
      else
      {
        v95 = 0x4EC4EC4EC4EC4EC5 * ((v11 - *v10) >> 3);
        v115 = v43;
        v57 = (unint64_t)v10[2];
        if ((unint64_t)v11 < v57)
          goto LABEL_62;
      }
      v110 = v45;
      v112 = v20;
      v59 = *v10;
      v60 = 0x4EC4EC4EC4EC4EC5 * ((v11 - *v10) >> 3);
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) > 0x276276276276276)
        sub_2233DCD38();
      v105 = v16 - 1;
      v106 = v19;
      v114 = v34;
      v107 = v30;
      v108 = v16;
      v109 = v17;
      v62 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x13B13B13B13B13BLL)
        v63 = 0x276276276276276;
      else
        v63 = v61;
      if (v63 > 0x276276276276276)
        goto LABEL_132;
      v64 = v29;
      v65 = v24;
      v66 = v25;
      v67 = v26;
      v104 = 104 * v63;
      v68 = (char *)operator new(104 * v63);
      v69 = &v68[104 * v60];
      *(_QWORD *)v69 = v22 | (unint64_t)(v21 << 32);
      *(_OWORD *)(v69 + 8) = v119;
      *((_QWORD *)v69 + 3) = v120;
      *((float *)v69 + 8) = v36;
      *((float *)v69 + 9) = v31;
      *((float *)v69 + 10) = v35;
      *((float *)v69 + 11) = v32;
      *((_QWORD *)v69 + 6) = v64;
      *((_QWORD *)v69 + 7) = v117;
      *((_QWORD *)v69 + 8) = v23;
      *((_QWORD *)v69 + 9) = v65;
      v69[80] = v66;
      *((_QWORD *)v69 + 11) = v114;
      v69[96] = v67;
      v69[97] = 0;
      if (v11 == v59)
      {
        v76 = &v68[104 * v60];
        v10 = v103;
        v20 = v112;
      }
      else
      {
        v70 = 0;
        v10 = v103;
        v20 = v112;
        do
        {
          v71 = &v69[v70];
          v72 = *(_OWORD *)&v11[v70 - 104];
          *(_OWORD *)(v71 - 88) = *(_OWORD *)&v11[v70 - 88];
          *(_OWORD *)(v71 - 104) = v72;
          *((_QWORD *)v71 - 9) = *(_QWORD *)&v11[v70 - 72];
          *((_QWORD *)v71 - 8) = *(_QWORD *)&v11[v70 - 64];
          v73 = *(_OWORD *)&v11[v70 - 56];
          v74 = *(_OWORD *)&v11[v70 - 40];
          v75 = *(_OWORD *)&v11[v70 - 24];
          *((_WORD *)v71 - 4) = *(_WORD *)&v11[v70 - 8];
          *(_OWORD *)(v71 - 24) = v75;
          *(_OWORD *)(v71 - 40) = v74;
          *(_OWORD *)(v71 - 56) = v73;
          v70 -= 104;
        }
        while (&v11[v70] != v59);
        v76 = &v69[v70];
        v11 = v59;
      }
      v58 = v69 + 104;
      *v10 = v76;
      v10[1] = v69 + 104;
      v10[2] = &v68[v104];
      v45 = v110;
      if (v11)
        operator delete(v11);
      a6 = v101;
      a7 = v102;
      v9 = v99;
      a3 = v100;
      v14 = v97;
      v13 = v98;
      v15 = v96;
      v16 = v108;
      v17 = v109;
      v30 = v107;
      v39 = v105;
      v19 = v106;
      goto LABEL_89;
    }
    if (v28 < v36)
      v36 = v28;
    if (v28 > v35)
      v35 = v28;
    if (v27 < v31)
      v31 = v27;
    if (v27 > v32)
      v32 = v27;
    if (v16 < v15)
    {
LABEL_10:
      v17 -= 2;
      goto LABEL_11;
    }
LABEL_105:
    v17 = v14;
    if (v39 <= v15)
      v17 = (float *)(v13 + 8 * (v39 % v15));
LABEL_11:
    ++v20;
    ++v23;
    v19 += v46 ^ 1u;
    v33 = v20;
    v16 = v39;
  }
  while (v39 != *(_QWORD *)(a3 + 32));
  if (v23)
  {
    if (v25)
    {
      v77 = (unint64_t)v10[2];
      if ((unint64_t)v11 < v77)
        goto LABEL_110;
LABEL_113:
      v79 = *v10;
      v80 = 0x4EC4EC4EC4EC4EC5 * ((v11 - *v10) >> 3);
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) > 0x276276276276276)
        sub_2233DCD38();
      v113 = v24;
      v111 = v29;
      v116 = v25;
      v118 = v26;
      v82 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v77 - (_QWORD)v79) >> 3);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0x13B13B13B13B13BLL)
        v83 = 0x276276276276276;
      else
        v83 = v81;
      if (v83 > 0x276276276276276)
LABEL_132:
        sub_223174E94();
      v84 = 104 * v83;
      v85 = (char *)operator new(104 * v83);
      v86 = &v85[104 * v80];
      *(_QWORD *)v86 = v22 | (unint64_t)(v21 << 32);
      *(_OWORD *)(v86 + 8) = v119;
      v87 = &v85[v84];
      *((_QWORD *)v86 + 3) = v120;
      *((float *)v86 + 8) = v36;
      *((float *)v86 + 9) = v31;
      *((float *)v86 + 10) = v35;
      *((float *)v86 + 11) = v32;
      *((_QWORD *)v86 + 6) = v111;
      *((_QWORD *)v86 + 7) = v20;
      *((_QWORD *)v86 + 8) = v23;
      *((_QWORD *)v86 + 9) = v113;
      v86[80] = v116;
      *((_QWORD *)v86 + 11) = v34;
      v86[96] = v118;
      v78 = v86 + 104;
      v86[97] = 0;
      if (v11 == v79)
      {
        v12 = v95;
        *v10 = v86;
        v10[1] = v78;
        v10[2] = v87;
        if (v11)
          goto LABEL_124;
      }
      else
      {
        v88 = 0;
        v12 = v95;
        do
        {
          v89 = &v86[v88];
          v90 = *(_OWORD *)&v11[v88 - 104];
          *(_OWORD *)(v89 - 88) = *(_OWORD *)&v11[v88 - 88];
          *(_OWORD *)(v89 - 104) = v90;
          *((_QWORD *)v89 - 9) = *(_QWORD *)&v11[v88 - 72];
          *((_QWORD *)v89 - 8) = *(_QWORD *)&v11[v88 - 64];
          v91 = *(_OWORD *)&v11[v88 - 56];
          v92 = *(_OWORD *)&v11[v88 - 40];
          v93 = *(_OWORD *)&v11[v88 - 24];
          *((_WORD *)v89 - 4) = *(_WORD *)&v11[v88 - 8];
          *(_OWORD *)(v89 - 24) = v93;
          *(_OWORD *)(v89 - 40) = v92;
          *(_OWORD *)(v89 - 56) = v91;
          v88 -= 104;
        }
        while (&v11[v88] != v79);
        v11 = v79;
        *v10 = &v86[v88];
        v10[1] = v78;
        v10[2] = v87;
        if (v79)
LABEL_124:
          operator delete(v11);
      }
    }
    else
    {
      v95 = 0x4EC4EC4EC4EC4EC5 * ((v11 - *v10) >> 3);
      v77 = (unint64_t)v10[2];
      if ((unint64_t)v11 >= v77)
        goto LABEL_113;
LABEL_110:
      *(_QWORD *)v11 = v22 | (unint64_t)(v21 << 32);
      *((_QWORD *)v11 + 3) = v120;
      *(_OWORD *)(v11 + 8) = v119;
      *((float *)v11 + 8) = v36;
      *((float *)v11 + 9) = v31;
      *((float *)v11 + 10) = v35;
      *((float *)v11 + 11) = v32;
      *((_QWORD *)v11 + 6) = v29;
      *((_QWORD *)v11 + 7) = v20;
      *((_QWORD *)v11 + 8) = v23;
      *((_QWORD *)v11 + 9) = v24;
      v11[80] = v25;
      *((_QWORD *)v11 + 11) = v34;
      v11[96] = v26;
      v11[97] = 0;
      v78 = v11 + 104;
      v12 = v95;
    }
    v10[1] = v78;
    v11 = v78;
  }
  else
  {
    v12 = v95;
  }
LABEL_126:
  v94 = *v10;
  if (v12 < 0x4EC4EC4EC4EC4EC5 * ((v11 - *v10) >> 3) && !v94[104 * v12 + 80])
    v94[104 * v12 + 97] = 1;
}

uint64_t sub_223400410(float **a1, float **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  float *v11;
  float *v12;
  uint64_t v18;
  float *v19;
  float *v20;
  __int128 v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;

  v12 = *a1;
  v11 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * (((char *)v11 - (char *)*a1) >> 3) <= a8
    || 0x4EC4EC4EC4EC4EC5 * (((char *)a2[1] - (char *)*a2) >> 3) <= a8)
  {
    if (v12 != v11)
    {
      v19 = a2[1];
      if (*a2 != v19)
      {
        do
        {
          v20 = *a2;
          if (*a2 != v19)
          {
            while (1)
            {
              if (v12[10] >= v20[8] && v12[8] <= v20[10] && v12[11] >= v20[9] && v12[9] <= v20[11])
              {
                if (!sub_223402A48(*(_DWORD *)a3, *(float ***)(a3 + 8), (int *)v12, *(_DWORD *)(a3 + 16), *(float ***)(a3 + 24), (int *)v20, 0, 0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD **)(a3 + 48), *(_BYTE **)(a3 + 56)))return 0;
                v19 = a2[1];
              }
              v20 += 26;
              if (v20 == v19)
              {
                v11 = a1[1];
                break;
              }
            }
          }
          v12 += 26;
        }
        while (v12 != v11);
      }
    }
    return 1;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    __p = 0;
    v24 = 0;
    v25 = 0;
    v22 = xmmword_2245F53F0;
    sub_223400650(a1, (float *)&v22, (char **)&v26);
    sub_223400650(a2, (float *)&v22, (char **)&__p);
    v18 = sub_2234008DC((float *)&v22, (float ***)&v26, (float ***)&__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v29);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  return v18;
}

void sub_223400614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v21 = a19;
    if (!a19)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v21 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void sub_223400650(float **a1, float *a2, char **a3)
{
  float *i;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  float **v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  float *v35;

  for (i = *a1; i != a1[1]; i += 26)
  {
    v8 = i[8];
    v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      v9 = v8;
      v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        v11 = i[9];
        v12 = a2[1];
        if (v11 >= v12)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = a2[2];
      if (v8 <= v10)
        goto LABEL_7;
    }
    a2[2] = v8;
    v10 = v8;
    v11 = i[9];
    v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      v13 = a2[3];
      if (v11 <= v13)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    v12 = v11;
    v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      v14 = i[10];
      if (v14 >= v9)
        goto LABEL_10;
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    v13 = v11;
    v14 = i[10];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10)
        goto LABEL_11;
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      v15 = i[11];
      if (v15 >= v12)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    v15 = i[11];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        goto LABEL_23;
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      v18 = *a3;
      v19 = v17 - *a3;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        sub_2233DCD38();
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_223174E94();
        v24 = operator new(8 * v23);
        v25 = (float **)&v24[8 * v20];
        *v25 = i;
        v7 = (uint64_t)(v25 + 1);
        v26 = (char *)(v17 - v18);
        if (v17 == v18)
          goto LABEL_41;
LABEL_34:
        v27 = (unint64_t)(v26 - 8);
        if (v27 < 0x58)
          goto LABEL_48;
        if ((unint64_t)(v17 - v24 - v19) < 0x20)
          goto LABEL_48;
        v28 = (v27 >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v17[-v29];
        v25 = (float **)((char *)v25 - v29);
        v31 = &v24[8 * v20 - 16];
        v32 = v17 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v17 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v35 = (float *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v25 = v35;
          }
          while (v17 != v18);
        }
        v17 = *a3;
      }
      else
      {
        v24 = 0;
        v25 = (float **)(8 * v20);
        *(_QWORD *)(8 * v20) = i;
        v7 = 8 * v20 + 8;
        v26 = (char *)(v17 - v18);
        if (v17 != v18)
          goto LABEL_34;
      }
LABEL_41:
      *a3 = (char *)v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17)
        operator delete(v17);
      goto LABEL_4;
    }
LABEL_3:
    *(_QWORD *)v17 = i;
    v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_2234008DC(float *a1, float ***a2, float ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  float v18;
  float **v19;
  float **v20;
  char *v21;
  float **v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  char *v37;
  float *v38;
  uint64_t v39;
  char *v40;
  float **v41;
  float **v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  char *v52;
  float *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  float **v57;
  float **v58;
  float **v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  char *v69;
  float *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v75;
  float *v76;
  uint64_t v77;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  float **v82;
  float **v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  float *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v97;
  void *__p;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  void *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  float **v108;
  uint64_t v109;
  void *v110;
  char *v111;
  uint64_t v112;
  float **v113;
  float **v114;
  uint64_t v115;
  float v116[2];
  uint64_t v117;
  uint64_t v118;
  float v119;
  int v120;

  v17 = *((_QWORD *)a1 + 1);
  v18 = (float)(*a1 + a1[2]) * 0.5;
  v118 = *(_QWORD *)a1;
  v120 = HIDWORD(v17);
  v116[1] = *((float *)&v118 + 1);
  v117 = v17;
  v119 = v18;
  v116[0] = v18;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  sub_22340170C((float *)&v118, v116, a2, &v113, &v110, &v107);
  sub_22340170C((float *)&v118, v116, a3, (float ***)&v104, &v101, &__p);
  v20 = (float **)v107;
  v19 = v108;
  if (v107 == v108)
    goto LABEL_100;
  v22 = (float **)__p;
  v21 = v99;
  if (a5 > ((char *)v108 - (_BYTE *)v107) >> 3 || a4 > 0x63 || (v99 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v99)
    {
      do
      {
        v37 = (char *)__p;
        if (__p != v21)
        {
          do
          {
            v38 = *v20;
            v39 = *(_QWORD *)v37;
            if ((*v20)[10] >= *(float *)(*(_QWORD *)v37 + 32)
              && v38[8] <= *(float *)(v39 + 40)
              && v38[11] >= *(float *)(v39 + 36)
              && v38[9] <= *(float *)(v39 + 44))
            {
              if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v38, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v39, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
              v21 = v99;
            }
            v37 += 8;
          }
          while (v37 != v21);
          v19 = v108;
        }
        ++v20;
      }
      while (v20 != v19);
    }
    goto LABEL_57;
  }
  v97 = xmmword_2245F53F0;
  v23 = 3.4028e38;
  v24 = -3.4028e38;
  v25 = -3.4028e38;
  v26 = 3.4028e38;
  do
  {
    v27 = *v20;
    v28 = (*v20)[8];
    if (v28 >= v26)
    {
      if (v28 <= v25)
      {
LABEL_9:
        v29 = v27[9];
        if (v29 < v23)
          goto LABEL_10;
        goto LABEL_18;
      }
    }
    else
    {
      *(float *)&v97 = (*v20)[8];
      v26 = v28;
      if (v28 <= v25)
        goto LABEL_9;
    }
    *((float *)&v97 + 2) = v28;
    v25 = v28;
    v29 = v27[9];
    if (v29 < v23)
    {
LABEL_10:
      *((float *)&v97 + 1) = v29;
      v23 = v29;
      if (v29 <= v24)
        goto LABEL_11;
      goto LABEL_19;
    }
LABEL_18:
    if (v29 <= v24)
    {
LABEL_11:
      v30 = v27[10];
      if (v30 < v26)
        goto LABEL_12;
      goto LABEL_20;
    }
LABEL_19:
    *((float *)&v97 + 3) = v29;
    v24 = v29;
    v30 = v27[10];
    if (v30 < v26)
    {
LABEL_12:
      *(float *)&v97 = v30;
      v26 = v30;
      if (v30 <= v25)
        goto LABEL_13;
      goto LABEL_21;
    }
LABEL_20:
    if (v30 <= v25)
    {
LABEL_13:
      v31 = v27[11];
      if (v31 >= v23)
        goto LABEL_22;
      goto LABEL_14;
    }
LABEL_21:
    *((float *)&v97 + 2) = v30;
    v25 = v30;
    v31 = v27[11];
    if (v31 >= v23)
    {
LABEL_22:
      if (v31 <= v24)
        goto LABEL_6;
      goto LABEL_23;
    }
LABEL_14:
    *((float *)&v97 + 1) = v31;
    v23 = v31;
    if (v31 <= v24)
      goto LABEL_6;
LABEL_23:
    *((float *)&v97 + 3) = v31;
    v24 = v31;
LABEL_6:
    ++v20;
  }
  while (v20 != v108);
  while (v22 != (float **)v99)
  {
    v32 = *v22;
    v33 = (*v22)[8];
    if (v33 >= v26)
    {
      if (v33 <= v25)
      {
LABEL_28:
        v34 = v32[9];
        if (v34 < v23)
          goto LABEL_29;
        goto LABEL_37;
      }
    }
    else
    {
      *(float *)&v97 = (*v22)[8];
      v26 = v33;
      if (v33 <= v25)
        goto LABEL_28;
    }
    *((float *)&v97 + 2) = v33;
    v25 = v33;
    v34 = v32[9];
    if (v34 < v23)
    {
LABEL_29:
      *((float *)&v97 + 1) = v34;
      v23 = v34;
      if (v34 <= v24)
        goto LABEL_30;
      goto LABEL_38;
    }
LABEL_37:
    if (v34 <= v24)
    {
LABEL_30:
      v35 = v32[10];
      if (v35 < v26)
        goto LABEL_31;
      goto LABEL_39;
    }
LABEL_38:
    *((float *)&v97 + 3) = v34;
    v24 = v34;
    v35 = v32[10];
    if (v35 < v26)
    {
LABEL_31:
      *(float *)&v97 = v35;
      v26 = v35;
      if (v35 <= v25)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    if (v35 <= v25)
    {
LABEL_32:
      v36 = v32[11];
      if (v36 >= v23)
        goto LABEL_41;
      goto LABEL_33;
    }
LABEL_40:
    *((float *)&v97 + 2) = v35;
    v25 = v35;
    v36 = v32[11];
    if (v36 >= v23)
    {
LABEL_41:
      if (v36 <= v24)
        goto LABEL_24;
      goto LABEL_42;
    }
LABEL_33:
    *((float *)&v97 + 1) = v36;
    v23 = v36;
    if (v36 <= v24)
      goto LABEL_24;
LABEL_42:
    *((float *)&v97 + 3) = v36;
    v24 = v36;
LABEL_24:
    ++v22;
  }
  if ((sub_223401C18((float *)&v97, (float ***)&v107, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_215;
LABEL_57:
  v40 = v105;
  if (a5 > (v105 - (_BYTE *)v104) >> 3)
  {
    v42 = (float **)v107;
    v41 = v108;
    goto LABEL_82;
  }
  v42 = (float **)v107;
  v41 = v108;
  if (a5 > (v102 - (_BYTE *)v101) >> 3 || a4 > 0x63 || ((char *)v108 - (_BYTE *)v107) >> 3 < a5)
  {
LABEL_82:
    if (v104 == v105 || v42 == v41)
    {
      if (v42 == v41)
        goto LABEL_100;
    }
    else
    {
      do
      {
        v52 = (char *)v104;
        if (v104 != v40)
        {
          do
          {
            v53 = *v42;
            v54 = *(_QWORD *)v52;
            if ((*v42)[10] >= *(float *)(*(_QWORD *)v52 + 32)
              && v53[8] <= *(float *)(v54 + 40)
              && v53[11] >= *(float *)(v54 + 36)
              && v53[9] <= *(float *)(v54 + 44))
            {
              if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v53, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v54, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
              v40 = v105;
            }
            v52 += 8;
          }
          while (v52 != v40);
          v41 = v108;
        }
        ++v42;
      }
      while (v42 != v41);
      v42 = (float **)v107;
      if (v107 == v41)
        goto LABEL_100;
    }
    v55 = v102;
    if (v101 != v102)
    {
      do
      {
        v69 = (char *)v101;
        if (v101 != v55)
        {
          do
          {
            v70 = *v42;
            v71 = *(_QWORD *)v69;
            if ((*v42)[10] >= *(float *)(*(_QWORD *)v69 + 32)
              && v70[8] <= *(float *)(v71 + 40)
              && v70[11] >= *(float *)(v71 + 36)
              && v70[9] <= *(float *)(v71 + 44))
            {
              if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v70, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v71, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
              v55 = v102;
            }
            v69 += 8;
          }
          while (v69 != v55);
          v41 = v108;
        }
        ++v42;
      }
      while (v42 != v41);
    }
    goto LABEL_100;
  }
  v97 = xmmword_2245F53F0;
  if (v107 != v108)
  {
    v43 = 3.4028e38;
    v44 = -3.4028e38;
    v45 = -3.4028e38;
    v46 = 3.4028e38;
    do
    {
      v47 = *v42;
      v48 = (*v42)[8];
      if (v48 >= v46)
      {
        if (v48 <= v45)
        {
LABEL_67:
          v49 = v47[9];
          if (v49 < v43)
            goto LABEL_68;
          goto LABEL_76;
        }
      }
      else
      {
        *(float *)&v97 = (*v42)[8];
        v46 = v48;
        if (v48 <= v45)
          goto LABEL_67;
      }
      *((float *)&v97 + 2) = v48;
      v45 = v48;
      v49 = v47[9];
      if (v49 < v43)
      {
LABEL_68:
        *((float *)&v97 + 1) = v49;
        v43 = v49;
        if (v49 <= v44)
          goto LABEL_69;
        goto LABEL_77;
      }
LABEL_76:
      if (v49 <= v44)
      {
LABEL_69:
        v50 = v47[10];
        if (v50 < v46)
          goto LABEL_70;
        goto LABEL_78;
      }
LABEL_77:
      *((float *)&v97 + 3) = v49;
      v44 = v49;
      v50 = v47[10];
      if (v50 < v46)
      {
LABEL_70:
        *(float *)&v97 = v50;
        v46 = v50;
        if (v50 <= v45)
          goto LABEL_71;
        goto LABEL_79;
      }
LABEL_78:
      if (v50 <= v45)
      {
LABEL_71:
        v51 = v47[11];
        if (v51 < v43)
          goto LABEL_72;
        goto LABEL_80;
      }
LABEL_79:
      *((float *)&v97 + 2) = v50;
      v45 = v50;
      v51 = v47[11];
      if (v51 < v43)
      {
LABEL_72:
        *((float *)&v97 + 1) = v51;
        v43 = v51;
        if (v51 > v44)
          goto LABEL_81;
        goto LABEL_64;
      }
LABEL_80:
      if (v51 > v44)
      {
LABEL_81:
        *((float *)&v97 + 3) = v51;
        v44 = v51;
      }
LABEL_64:
      ++v42;
    }
    while (v42 != v108);
  }
  if (!sub_223401C18((float *)&v97, (float ***)&v107, (float ***)&v104, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_223401C18((float *)&v97, (float ***)&v107, (float ***)&v101, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_215;
  }
LABEL_100:
  v57 = (float **)__p;
  v56 = v99;
  if (__p == v99)
    goto LABEL_176;
  v59 = v113;
  v58 = v114;
  if (a5 > v114 - v113 || a5 > (v111 - (_BYTE *)v110) >> 3 || a4 > 0x63 || (v99 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v113 == v114)
    {
      v73 = (char *)v110;
      v72 = v111;
      if (v110 != v111 && __p != v99)
        goto LABEL_162;
    }
    else
    {
      do
      {
        v75 = (char *)__p;
        if (__p != v56)
        {
          do
          {
            v76 = *v59;
            v77 = *(_QWORD *)v75;
            if ((*v59)[10] >= *(float *)(*(_QWORD *)v75 + 32)
              && v76[8] <= *(float *)(v77 + 40)
              && v76[11] >= *(float *)(v77 + 36)
              && v76[9] <= *(float *)(v77 + 44))
            {
              if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v76, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v77, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
              v56 = v99;
            }
            v75 += 8;
          }
          while (v75 != v56);
          v58 = v114;
        }
        ++v59;
      }
      while (v59 != v58);
      v73 = (char *)v110;
      v72 = v111;
      if (v110 != v111 && __p != v56)
      {
        do
        {
LABEL_162:
          v79 = (char *)__p;
          if (__p != v56)
          {
            do
            {
              v80 = *(_QWORD *)v73;
              v81 = *(_QWORD *)v79;
              if (*(float *)(*(_QWORD *)v73 + 40) >= *(float *)(*(_QWORD *)v79 + 32)
                && *(float *)(v80 + 32) <= *(float *)(v81 + 40)
                && *(float *)(v80 + 44) >= *(float *)(v81 + 36)
                && *(float *)(v80 + 36) <= *(float *)(v81 + 44))
              {
                if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v80, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v81, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                v56 = v99;
              }
              v79 += 8;
            }
            while (v79 != v56);
            v72 = v111;
          }
          v73 += 8;
        }
        while (v73 != v72);
      }
    }
LABEL_176:
    v83 = v113;
    v82 = v114;
    if (a5 > v114 - v113 || a4 > 0x63 || (v105 - (_BYTE *)v104) >> 3 < a5)
    {
      if (v113 != v114)
      {
        v84 = v105;
        if (v104 != v105)
        {
          do
          {
            v88 = (char *)v104;
            if (v104 != v84)
            {
              do
              {
                v89 = *v83;
                v90 = *(_QWORD *)v88;
                if ((*v83)[10] >= *(float *)(*(_QWORD *)v88 + 32)
                  && v89[8] <= *(float *)(v90 + 40)
                  && v89[11] >= *(float *)(v90 + 36)
                  && v89[9] <= *(float *)(v90 + 44))
                {
                  if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v89, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v90, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                  v84 = v105;
                }
                v88 += 8;
              }
              while (v88 != v84);
              v82 = v114;
            }
            ++v83;
          }
          while (v83 != v82);
        }
      }
    }
    else if ((sub_223401C18((float *)&v118, &v113, (float ***)&v104, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_215;
    }
    v86 = (char *)v110;
    v85 = v111;
    if (a5 > (v111 - (_BYTE *)v110) >> 3 || a4 > 0x63 || (v102 - (_BYTE *)v101) >> 3 < a5)
    {
      if (v110 != v111)
      {
        v87 = v102;
        if (v101 != v102)
        {
          do
          {
            v91 = (char *)v101;
            if (v101 != v87)
            {
              do
              {
                v92 = *(_QWORD *)v86;
                v93 = *(_QWORD *)v91;
                if (*(float *)(*(_QWORD *)v86 + 40) >= *(float *)(*(_QWORD *)v91 + 32)
                  && *(float *)(v92 + 32) <= *(float *)(v93 + 40)
                  && *(float *)(v92 + 44) >= *(float *)(v93 + 36)
                  && *(float *)(v92 + 36) <= *(float *)(v93 + 44))
                {
                  if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v92, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v93, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                  v87 = v102;
                }
                v91 += 8;
              }
              while (v91 != v87);
              v85 = v111;
            }
            v86 += 8;
          }
          while (v86 != v85);
        }
      }
    }
    else if ((sub_223401C18(v116, (float ***)&v110, (float ***)&v101, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_215;
    }
    v94 = 1;
    v95 = (char *)__p;
    if (__p)
      goto LABEL_216;
    goto LABEL_217;
  }
  v97 = xmmword_2245F53F0;
  v60 = 3.4028e38;
  v61 = -3.4028e38;
  v62 = -3.4028e38;
  v63 = 3.4028e38;
  do
  {
    v64 = *v57;
    v65 = (*v57)[8];
    if (v65 >= v63)
    {
      if (v65 <= v62)
      {
LABEL_109:
        v66 = v64[9];
        if (v66 < v60)
          goto LABEL_110;
        goto LABEL_118;
      }
    }
    else
    {
      *(float *)&v97 = (*v57)[8];
      v63 = v65;
      if (v65 <= v62)
        goto LABEL_109;
    }
    *((float *)&v97 + 2) = v65;
    v62 = v65;
    v66 = v64[9];
    if (v66 < v60)
    {
LABEL_110:
      *((float *)&v97 + 1) = v66;
      v60 = v66;
      if (v66 <= v61)
        goto LABEL_111;
      goto LABEL_119;
    }
LABEL_118:
    if (v66 <= v61)
    {
LABEL_111:
      v67 = v64[10];
      if (v67 < v63)
        goto LABEL_112;
      goto LABEL_120;
    }
LABEL_119:
    *((float *)&v97 + 3) = v66;
    v61 = v66;
    v67 = v64[10];
    if (v67 < v63)
    {
LABEL_112:
      *(float *)&v97 = v67;
      v63 = v67;
      if (v67 <= v62)
        goto LABEL_113;
      goto LABEL_121;
    }
LABEL_120:
    if (v67 <= v62)
    {
LABEL_113:
      v68 = v64[11];
      if (v68 >= v60)
        goto LABEL_122;
      goto LABEL_114;
    }
LABEL_121:
    *((float *)&v97 + 2) = v67;
    v62 = v67;
    v68 = v64[11];
    if (v68 >= v60)
    {
LABEL_122:
      if (v68 <= v61)
        goto LABEL_106;
      goto LABEL_123;
    }
LABEL_114:
    *((float *)&v97 + 1) = v68;
    v60 = v68;
    if (v68 <= v61)
      goto LABEL_106;
LABEL_123:
    *((float *)&v97 + 3) = v68;
    v61 = v68;
LABEL_106:
    ++v57;
  }
  while (v57 != (float **)v99);
  if (sub_223401C18((float *)&v97, &v113, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    && (sub_223401C18((float *)&v97, (float ***)&v110, (float ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_176;
  }
LABEL_215:
  v94 = 0;
  v95 = (char *)__p;
  if (__p)
  {
LABEL_216:
    v99 = v95;
    operator delete(v95);
  }
LABEL_217:
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = (float **)v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = (char *)v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  return v94;
}

void sub_223401648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v31 = a19;
    if (!a19)
    {
LABEL_3:
      v32 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a22;
  if (!a22)
  {
LABEL_4:
    v33 = a25;
    if (!a25)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v32);
  v33 = a25;
  if (!a25)
  {
LABEL_5:
    v34 = a28;
    if (!a28)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v33);
  v34 = a28;
  if (!a28)
  {
LABEL_6:
    v35 = *(void **)(v29 - 144);
    if (!v35)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v34);
  v35 = *(void **)(v29 - 144);
  if (!v35)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v29 - 136) = v35;
  operator delete(v35);
  _Unwind_Resume(exception_object);
}

float *sub_22340170C(float *result, float *a2, float ***a3, float ***a4, _QWORD *a5, _QWORD *a6)
{
  float **v6;
  float *v8;
  float *v9;
  float v10;
  _BOOL4 v11;
  char **v12;
  unint64_t v13;
  char *v14;
  float ***v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  float **v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  float **v27;
  float ***v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float ***v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  float **v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float **v43;
  _OWORD *v44;
  float **v45;
  uint64_t v46;
  __int128 v47;
  float *v48;
  unint64_t v49;
  float ***v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  float *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  float *v75;
  unint64_t v76;
  float ***v77;
  float *v81;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a2;
    v81 = result;
    v77 = a3;
    do
    {
      v9 = *v6;
      v10 = (*v6)[8];
      if (result[2] >= v10 && *result <= v9[10] && result[3] >= v9[9])
      {
        v11 = result[1] <= v9[11];
        if (v8[2] < v10)
          goto LABEL_25;
      }
      else
      {
        v11 = 0;
        if (v8[2] < v10)
          goto LABEL_25;
      }
      if (*v8 <= v9[10] && v8[3] >= v9[9] && v8[1] <= v9[11])
      {
        if (v11)
        {
          v12 = (char **)a6;
          v14 = (char *)a6[1];
          v13 = a6[2];
          if ((unint64_t)v14 >= v13)
          {
            v15 = a4;
            v16 = (char *)*a6;
            v17 = (uint64_t)&v14[-*a6];
            v18 = v17 >> 3;
            v19 = (v17 >> 3) + 1;
            if (v19 >> 61)
              sub_2233DCD38();
            v20 = v13 - (_QWORD)v16;
            if (v20 >> 2 > v19)
              v19 = v20 >> 2;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            v76 = v19;
            if (v19)
            {
              if (v19 >> 61)
                goto LABEL_82;
              v21 = operator new(8 * v19);
              v22 = (float **)&v21[8 * v18];
              *v22 = v9;
              v23 = (uint64_t)(v22 + 1);
              v24 = (char *)(v14 - v16);
              if (v14 != v16)
              {
LABEL_22:
                v25 = (unint64_t)(v24 - 8);
                v12 = (char **)a6;
                if (v25 < 0x58)
                {
                  a4 = v15;
                  goto LABEL_68;
                }
                v58 = v14 - v21 - v17;
                a4 = v15;
                if (v58 < 0x20)
                  goto LABEL_87;
                v59 = (v25 >> 3) + 1;
                v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                v61 = &v14[-v60];
                v22 = (float **)((char *)v22 - v60);
                v62 = &v21[8 * v18 - 16];
                v63 = v14 - 16;
                v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = *(_OWORD *)v63;
                  *(v62 - 1) = *((_OWORD *)v63 - 1);
                  *v62 = v65;
                  v62 -= 2;
                  v63 -= 32;
                  v64 -= 4;
                }
                while (v64);
                v14 = v61;
                if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_87:
                  do
                  {
LABEL_68:
                    v66 = (float *)*((_QWORD *)v14 - 1);
                    v14 -= 8;
                    *--v22 = v66;
                  }
                  while (v14 != v16);
                }
LABEL_75:
                v14 = *v12;
LABEL_76:
                *v12 = (char *)v22;
                v12[1] = (char *)v23;
                v12[2] = &v21[8 * v76];
                if (v14)
                  operator delete(v14);
                a3 = v77;
                result = v81;
LABEL_79:
                v12[1] = (char *)v23;
                goto LABEL_4;
              }
            }
            else
            {
              v21 = 0;
              v22 = (float **)(8 * v18);
              *(_QWORD *)(8 * v18) = v9;
              v23 = 8 * v18 + 8;
              v24 = (char *)(v14 - v16);
              if (v14 != v16)
                goto LABEL_22;
            }
            v12 = (char **)a6;
            a4 = v15;
            goto LABEL_76;
          }
LABEL_49:
          *(_QWORD *)v14 = v9;
          v23 = (uint64_t)(v14 + 8);
          goto LABEL_79;
        }
        v12 = (char **)a5;
        v14 = (char *)a5[1];
        v49 = a5[2];
        if ((unint64_t)v14 < v49)
          goto LABEL_49;
        v50 = a4;
        v51 = (char *)*a5;
        v52 = (uint64_t)&v14[-*a5];
        v53 = v52 >> 3;
        v54 = (v52 >> 3) + 1;
        if (v54 >> 61)
          sub_2233DCD38();
        v55 = v49 - (_QWORD)v51;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        v76 = v54;
        if (v54)
        {
          if (v54 >> 61)
LABEL_82:
            sub_223174E94();
          v21 = operator new(8 * v54);
          v22 = (float **)&v21[8 * v53];
          *v22 = v9;
          v23 = (uint64_t)(v22 + 1);
          v56 = (char *)(v14 - v51);
          if (v14 != v51)
          {
LABEL_58:
            v57 = (unint64_t)(v56 - 8);
            v12 = (char **)a5;
            if (v57 >= 0x58)
            {
              v67 = v14 - v21 - v52;
              a4 = v50;
              if (v67 >= 0x20)
              {
                v68 = (v57 >> 3) + 1;
                v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
                v70 = &v14[-v69];
                v22 = (float **)((char *)v22 - v69);
                v71 = &v21[8 * v53 - 16];
                v72 = v14 - 16;
                v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v74 = *(_OWORD *)v72;
                  *(v71 - 1) = *((_OWORD *)v72 - 1);
                  *v71 = v74;
                  v71 -= 2;
                  v72 -= 32;
                  v73 -= 4;
                }
                while (v73);
                v14 = v70;
                if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_75;
              }
            }
            else
            {
              a4 = v50;
            }
            do
            {
              v75 = (float *)*((_QWORD *)v14 - 1);
              v14 -= 8;
              *--v22 = v75;
            }
            while (v14 != v51);
            goto LABEL_75;
          }
        }
        else
        {
          v21 = 0;
          v22 = (float **)(8 * v53);
          *(_QWORD *)(8 * v53) = v9;
          v23 = 8 * v53 + 8;
          v56 = (char *)(v14 - v51);
          if (v14 != v51)
            goto LABEL_58;
        }
        v12 = (char **)a5;
        a4 = v50;
        goto LABEL_76;
      }
LABEL_25:
      if (v11)
      {
        v27 = a4[1];
        v26 = (unint64_t)a4[2];
        if ((unint64_t)v27 >= v26)
        {
          v28 = a4;
          v29 = (char *)*a4;
          v30 = (char *)v27 - (char *)*a4;
          v31 = v30 >> 3;
          v32 = (v30 >> 3) + 1;
          if (v32 >> 61)
            sub_2233DCD38();
          v33 = a3;
          v34 = v26 - (_QWORD)v29;
          if (v34 >> 2 > v32)
            v32 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v32;
          if (v35)
          {
            if (v35 >> 61)
              goto LABEL_82;
            v36 = operator new(8 * v35);
            v37 = (float **)&v36[8 * v31];
            *v37 = v9;
            v38 = (uint64_t)(v37 + 1);
            v39 = (char *)((char *)v27 - v29);
            if (v27 != (float **)v29)
            {
LABEL_36:
              v40 = (unint64_t)(v39 - 8);
              if (v40 < 0x58)
                goto LABEL_88;
              if ((unint64_t)((char *)v27 - v36 - v30) < 0x20)
                goto LABEL_88;
              v41 = (v40 >> 3) + 1;
              v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v27[v42 / 0xFFFFFFFFFFFFFFF8];
              v37 = (float **)((char *)v37 - v42);
              v44 = &v36[8 * v31 - 16];
              v45 = v27 - 2;
              v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v47 = *(_OWORD *)v45;
                *(v44 - 1) = *((_OWORD *)v45 - 1);
                *v44 = v47;
                v44 -= 2;
                v45 -= 4;
                v46 -= 4;
              }
              while (v46);
              v27 = v43;
              if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_88:
                do
                {
                  v48 = *--v27;
                  *--v37 = v48;
                }
                while (v27 != (float **)v29);
              }
              a4 = v28;
              v27 = *v28;
              *v28 = v37;
              v28[1] = (float **)v38;
              v28[2] = (float **)&v36[8 * v35];
              if (v27)
LABEL_43:
                operator delete(v27);
LABEL_44:
              a3 = v33;
              v8 = a2;
              result = v81;
              a4[1] = (float **)v38;
              goto LABEL_4;
            }
          }
          else
          {
            v36 = 0;
            v37 = (float **)(8 * v31);
            *(_QWORD *)(8 * v31) = v9;
            v38 = 8 * v31 + 8;
            v39 = (char *)((char *)v27 - v29);
            if (v27 != (float **)v29)
              goto LABEL_36;
          }
          a4 = v28;
          *v28 = v37;
          v28[1] = (float **)v38;
          v28[2] = (float **)&v36[8 * v35];
          if (v27)
            goto LABEL_43;
          goto LABEL_44;
        }
        *v27 = v9;
        a4[1] = v27 + 1;
      }
LABEL_4:
      ++v6;
    }
    while (v6 != a3[1]);
  }
  return result;
}

uint64_t sub_223401C18(float *a1, float ***a2, float ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  int **v23;
  int **v24;
  void *v25;
  float **v26;
  __n128 v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int **v38;
  int *v39;
  int *v40;
  void *v41;
  int **v42;
  int **v43;
  __n128 v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int **v50;
  int *v51;
  int *v52;
  void *v53;
  void *v54;
  float **v55;
  float **v56;
  float **v57;
  __n128 v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int **v64;
  int *v65;
  int *v66;
  int **v67;
  int **v68;
  int **v70;
  int *v71;
  int *v72;
  int **v74;
  int *v75;
  int *v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  float **v85;
  float **v86;
  void *v87;
  char *v88;
  char *v89;
  char *v90;
  int **v91;
  int *v92;
  int *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  __int128 v100;
  void *__p;
  void *v102;
  uint64_t v103;
  void *v104;
  char *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  int **v111;
  uint64_t v112;
  void *v113;
  int **v114;
  uint64_t v115;
  float **v116;
  float **v117;
  uint64_t v118;
  float v119[2];
  uint64_t v120;
  uint64_t v121;
  int v122;
  float v123;

  v17 = *((_QWORD *)a1 + 1);
  v18 = (float)(a1[1] + a1[3]) * 0.5;
  v121 = *(_QWORD *)a1;
  v122 = v17;
  LODWORD(v119[0]) = v121;
  v120 = v17;
  v123 = v18;
  v119[1] = v18;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  __p = 0;
  v102 = 0;
  v103 = 0;
  sub_22340170C((float *)&v121, v119, a2, &v116, &v113, &v110);
  sub_22340170C((float *)&v121, v119, a3, (float ***)&v107, &v104, &__p);
  v24 = (int **)v110;
  v23 = v111;
  if (v110 == v111)
    goto LABEL_100;
  v26 = (float **)__p;
  v25 = v102;
  if (a5 > ((char *)v111 - (_BYTE *)v110) >> 3 || a4 > 0x63 || ((_BYTE *)v102 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v102)
    {
      do
      {
        v38 = (int **)__p;
        if (__p != v25)
        {
          do
          {
            v39 = *v24;
            v40 = *v38;
            v19.n128_u32[0] = (*v24)[10];
            v20.n128_u32[0] = (*v38)[8];
            if (v19.n128_f32[0] >= v20.n128_f32[0])
            {
              v19.n128_u32[0] = v39[8];
              v20.n128_u32[0] = v40[10];
              if (v19.n128_f32[0] <= v20.n128_f32[0])
              {
                v19.n128_u32[0] = v39[11];
                v20.n128_u32[0] = v40[9];
                if (v19.n128_f32[0] >= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v39[9];
                  v20.n128_u32[0] = v40[11];
                  if (v19.n128_f32[0] <= v20.n128_f32[0])
                  {
                    if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v39, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v40, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                    v25 = v102;
                  }
                }
              }
            }
            ++v38;
          }
          while (v38 != v25);
          v23 = v111;
        }
        ++v24;
      }
      while (v24 != v23);
    }
    goto LABEL_57;
  }
  v27 = (__n128)xmmword_2245F53F0;
  v100 = xmmword_2245F53F0;
  v27.n128_u32[0] = 2139095039;
  v20.n128_u32[0] = -8388609;
  v21.n128_u32[0] = -8388609;
  v22.n128_u32[0] = 2139095039;
  do
  {
    v28 = (float *)*v24;
    v29 = *((float *)*v24 + 8);
    if (v29 >= v22.n128_f32[0])
    {
      if (v29 <= v21.n128_f32[0])
      {
LABEL_9:
        v30 = v28[9];
        if (v30 < v27.n128_f32[0])
          goto LABEL_10;
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v100) = (*v24)[8];
      v22.n128_f32[0] = v29;
      if (v29 <= v21.n128_f32[0])
        goto LABEL_9;
    }
    *((float *)&v100 + 2) = v29;
    v21.n128_f32[0] = v29;
    v30 = v28[9];
    if (v30 < v27.n128_f32[0])
    {
LABEL_10:
      *((float *)&v100 + 1) = v30;
      v27.n128_f32[0] = v30;
      if (v30 <= v20.n128_f32[0])
        goto LABEL_11;
      goto LABEL_19;
    }
LABEL_18:
    if (v30 <= v20.n128_f32[0])
    {
LABEL_11:
      v31 = v28[10];
      if (v31 < v22.n128_f32[0])
        goto LABEL_12;
      goto LABEL_20;
    }
LABEL_19:
    *((float *)&v100 + 3) = v30;
    v20.n128_f32[0] = v30;
    v31 = v28[10];
    if (v31 < v22.n128_f32[0])
    {
LABEL_12:
      *(float *)&v100 = v31;
      v22.n128_f32[0] = v31;
      if (v31 <= v21.n128_f32[0])
        goto LABEL_13;
      goto LABEL_21;
    }
LABEL_20:
    if (v31 <= v21.n128_f32[0])
    {
LABEL_13:
      v32 = v28[11];
      if (v32 >= v27.n128_f32[0])
        goto LABEL_22;
      goto LABEL_14;
    }
LABEL_21:
    *((float *)&v100 + 2) = v31;
    v21.n128_f32[0] = v31;
    v32 = v28[11];
    if (v32 >= v27.n128_f32[0])
    {
LABEL_22:
      if (v32 <= v20.n128_f32[0])
        goto LABEL_6;
      goto LABEL_23;
    }
LABEL_14:
    *((float *)&v100 + 1) = v32;
    v27.n128_f32[0] = v32;
    if (v32 <= v20.n128_f32[0])
      goto LABEL_6;
LABEL_23:
    *((float *)&v100 + 3) = v32;
    v20.n128_f32[0] = v32;
LABEL_6:
    ++v24;
  }
  while (v24 != v111);
  while (v26 != v102)
  {
    v33 = *v26;
    v34 = (*v26)[8];
    if (v34 >= v22.n128_f32[0])
    {
      if (v34 <= v21.n128_f32[0])
      {
LABEL_28:
        v35 = v33[9];
        if (v35 < v27.n128_f32[0])
          goto LABEL_29;
        goto LABEL_37;
      }
    }
    else
    {
      *(float *)&v100 = (*v26)[8];
      v22.n128_f32[0] = v34;
      if (v34 <= v21.n128_f32[0])
        goto LABEL_28;
    }
    *((float *)&v100 + 2) = v34;
    v21.n128_f32[0] = v34;
    v35 = v33[9];
    if (v35 < v27.n128_f32[0])
    {
LABEL_29:
      *((float *)&v100 + 1) = v35;
      v27.n128_f32[0] = v35;
      if (v35 <= v20.n128_f32[0])
        goto LABEL_30;
      goto LABEL_38;
    }
LABEL_37:
    if (v35 <= v20.n128_f32[0])
    {
LABEL_30:
      v36 = v33[10];
      if (v36 < v22.n128_f32[0])
        goto LABEL_31;
      goto LABEL_39;
    }
LABEL_38:
    *((float *)&v100 + 3) = v35;
    v20.n128_f32[0] = v35;
    v36 = v33[10];
    if (v36 < v22.n128_f32[0])
    {
LABEL_31:
      *(float *)&v100 = v36;
      v22.n128_f32[0] = v36;
      if (v36 <= v21.n128_f32[0])
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    if (v36 <= v21.n128_f32[0])
    {
LABEL_32:
      v37 = v33[11];
      if (v37 >= v27.n128_f32[0])
        goto LABEL_41;
      goto LABEL_33;
    }
LABEL_40:
    *((float *)&v100 + 2) = v36;
    v21.n128_f32[0] = v36;
    v37 = v33[11];
    if (v37 >= v27.n128_f32[0])
    {
LABEL_41:
      if (v37 <= v20.n128_f32[0])
        goto LABEL_24;
      goto LABEL_42;
    }
LABEL_33:
    *((float *)&v100 + 1) = v37;
    v27.n128_f32[0] = v37;
    if (v37 <= v20.n128_f32[0])
      goto LABEL_24;
LABEL_42:
    *((float *)&v100 + 3) = v37;
    v20.n128_f32[0] = v37;
LABEL_24:
    ++v26;
  }
  if ((sub_2234008DC(&v100, &v110, &__p, a4 + 1, a5, a6, a7, a8, v27, v20, v21, v22, a9, a10, a11) & 1) == 0)
    goto LABEL_215;
LABEL_57:
  v41 = v108;
  if (a5 > ((_BYTE *)v108 - (_BYTE *)v107) >> 3)
  {
    v43 = (int **)v110;
    v42 = v111;
    goto LABEL_82;
  }
  v43 = (int **)v110;
  v42 = v111;
  if (a5 > (v105 - (_BYTE *)v104) >> 3 || a4 > 0x63 || ((char *)v111 - (_BYTE *)v110) >> 3 < a5)
  {
LABEL_82:
    if (v107 == v108 || v43 == v42)
    {
      if (v43 == v42)
        goto LABEL_100;
    }
    else
    {
      do
      {
        v50 = (int **)v107;
        if (v107 != v41)
        {
          do
          {
            v51 = *v43;
            v52 = *v50;
            v19.n128_u32[0] = (*v43)[10];
            v20.n128_u32[0] = (*v50)[8];
            if (v19.n128_f32[0] >= v20.n128_f32[0])
            {
              v19.n128_u32[0] = v51[8];
              v20.n128_u32[0] = v52[10];
              if (v19.n128_f32[0] <= v20.n128_f32[0])
              {
                v19.n128_u32[0] = v51[11];
                v20.n128_u32[0] = v52[9];
                if (v19.n128_f32[0] >= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v51[9];
                  v20.n128_u32[0] = v52[11];
                  if (v19.n128_f32[0] <= v20.n128_f32[0])
                  {
                    if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v51, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v52, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                    v41 = v108;
                  }
                }
              }
            }
            ++v50;
          }
          while (v50 != v41);
          v42 = v111;
        }
        ++v43;
      }
      while (v43 != v42);
      v43 = (int **)v110;
      if (v110 == v42)
        goto LABEL_100;
    }
    v53 = v105;
    if (v104 != v105)
    {
      do
      {
        v64 = (int **)v104;
        if (v104 != v53)
        {
          do
          {
            v65 = *v43;
            v66 = *v64;
            v19.n128_u32[0] = (*v43)[10];
            v20.n128_u32[0] = (*v64)[8];
            if (v19.n128_f32[0] >= v20.n128_f32[0])
            {
              v19.n128_u32[0] = v65[8];
              v20.n128_u32[0] = v66[10];
              if (v19.n128_f32[0] <= v20.n128_f32[0])
              {
                v19.n128_u32[0] = v65[11];
                v20.n128_u32[0] = v66[9];
                if (v19.n128_f32[0] >= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v65[9];
                  v20.n128_u32[0] = v66[11];
                  if (v19.n128_f32[0] <= v20.n128_f32[0])
                  {
                    if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v65, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v66, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                    v53 = v105;
                  }
                }
              }
            }
            ++v64;
          }
          while (v64 != v53);
          v42 = v111;
        }
        ++v43;
      }
      while (v43 != v42);
    }
    goto LABEL_100;
  }
  v44 = (__n128)xmmword_2245F53F0;
  v100 = xmmword_2245F53F0;
  if (v110 != v111)
  {
    v44.n128_u32[0] = 2139095039;
    v20.n128_u32[0] = -8388609;
    v21.n128_u32[0] = -8388609;
    v22.n128_u32[0] = 2139095039;
    do
    {
      v45 = (float *)*v43;
      v46 = *((float *)*v43 + 8);
      if (v46 >= v22.n128_f32[0])
      {
        if (v46 <= v21.n128_f32[0])
        {
LABEL_67:
          v47 = v45[9];
          if (v47 < v44.n128_f32[0])
            goto LABEL_68;
          goto LABEL_76;
        }
      }
      else
      {
        LODWORD(v100) = (*v43)[8];
        v22.n128_f32[0] = v46;
        if (v46 <= v21.n128_f32[0])
          goto LABEL_67;
      }
      *((float *)&v100 + 2) = v46;
      v21.n128_f32[0] = v46;
      v47 = v45[9];
      if (v47 < v44.n128_f32[0])
      {
LABEL_68:
        *((float *)&v100 + 1) = v47;
        v44.n128_f32[0] = v47;
        if (v47 <= v20.n128_f32[0])
          goto LABEL_69;
        goto LABEL_77;
      }
LABEL_76:
      if (v47 <= v20.n128_f32[0])
      {
LABEL_69:
        v48 = v45[10];
        if (v48 < v22.n128_f32[0])
          goto LABEL_70;
        goto LABEL_78;
      }
LABEL_77:
      *((float *)&v100 + 3) = v47;
      v20.n128_f32[0] = v47;
      v48 = v45[10];
      if (v48 < v22.n128_f32[0])
      {
LABEL_70:
        *(float *)&v100 = v48;
        v22.n128_f32[0] = v48;
        if (v48 <= v21.n128_f32[0])
          goto LABEL_71;
        goto LABEL_79;
      }
LABEL_78:
      if (v48 <= v21.n128_f32[0])
      {
LABEL_71:
        v49 = v45[11];
        if (v49 < v44.n128_f32[0])
          goto LABEL_72;
        goto LABEL_80;
      }
LABEL_79:
      *((float *)&v100 + 2) = v48;
      v21.n128_f32[0] = v48;
      v49 = v45[11];
      if (v49 < v44.n128_f32[0])
      {
LABEL_72:
        *((float *)&v100 + 1) = v49;
        v44.n128_f32[0] = v49;
        if (v49 > v20.n128_f32[0])
          goto LABEL_81;
        goto LABEL_64;
      }
LABEL_80:
      if (v49 > v20.n128_f32[0])
      {
LABEL_81:
        *((float *)&v100 + 3) = v49;
        v20.n128_f32[0] = v49;
      }
LABEL_64:
      ++v43;
    }
    while (v43 != v111);
  }
  if (!sub_2234008DC(&v100, &v110, &v107, a4 + 1, a5, a6, a7, a8, v44, v20, v21, v22, a9, a10, a11)
    || (sub_2234008DC(&v100, &v110, &v104, a4 + 1, a5, a6, a7, a8, v77, v78, v79, v80, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_215;
  }
LABEL_100:
  v55 = (float **)__p;
  v54 = v102;
  if (__p == v102)
    goto LABEL_176;
  v57 = v116;
  v56 = v117;
  if (a5 > v117 - v116
    || a5 > ((char *)v114 - (_BYTE *)v113) >> 3
    || a4 > 0x63
    || ((_BYTE *)v102 - (_BYTE *)__p) >> 3 < a5)
  {
    if (v116 == v117)
    {
      v68 = (int **)v113;
      v67 = v114;
      if (v113 != v114 && __p != v102)
        goto LABEL_162;
    }
    else
    {
      do
      {
        v70 = (int **)__p;
        if (__p != v54)
        {
          do
          {
            v71 = (int *)*v57;
            v72 = *v70;
            v19.n128_f32[0] = (*v57)[10];
            v20.n128_u32[0] = (*v70)[8];
            if (v19.n128_f32[0] >= v20.n128_f32[0])
            {
              v19.n128_u32[0] = v71[8];
              v20.n128_u32[0] = v72[10];
              if (v19.n128_f32[0] <= v20.n128_f32[0])
              {
                v19.n128_u32[0] = v71[11];
                v20.n128_u32[0] = v72[9];
                if (v19.n128_f32[0] >= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v71[9];
                  v20.n128_u32[0] = v72[11];
                  if (v19.n128_f32[0] <= v20.n128_f32[0])
                  {
                    if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v71, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v72, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                    v54 = v102;
                  }
                }
              }
            }
            ++v70;
          }
          while (v70 != v54);
          v56 = v117;
        }
        ++v57;
      }
      while (v57 != v56);
      v68 = (int **)v113;
      v67 = v114;
      if (v113 != v114 && __p != v54)
      {
        do
        {
LABEL_162:
          v74 = (int **)__p;
          if (__p != v54)
          {
            do
            {
              v75 = *v68;
              v76 = *v74;
              v19.n128_u32[0] = (*v68)[10];
              v20.n128_u32[0] = (*v74)[8];
              if (v19.n128_f32[0] >= v20.n128_f32[0])
              {
                v19.n128_u32[0] = v75[8];
                v20.n128_u32[0] = v76[10];
                if (v19.n128_f32[0] <= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v75[11];
                  v20.n128_u32[0] = v76[9];
                  if (v19.n128_f32[0] >= v20.n128_f32[0])
                  {
                    v19.n128_u32[0] = v75[9];
                    v20.n128_u32[0] = v76[11];
                    if (v19.n128_f32[0] <= v20.n128_f32[0])
                    {
                      if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v75, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v76, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                      v54 = v102;
                    }
                  }
                }
              }
              ++v74;
            }
            while (v74 != v54);
            v67 = v114;
          }
          ++v68;
        }
        while (v68 != v67);
      }
    }
LABEL_176:
    v86 = v116;
    v85 = v117;
    if (a5 > v117 - v116 || a4 > 0x63 || ((_BYTE *)v108 - (_BYTE *)v107) >> 3 < a5)
    {
      if (v116 != v117)
      {
        v87 = v108;
        if (v107 != v108)
        {
          do
          {
            v91 = (int **)v107;
            if (v107 != v87)
            {
              do
              {
                v92 = (int *)*v86;
                v93 = *v91;
                v19.n128_f32[0] = (*v86)[10];
                v20.n128_u32[0] = (*v91)[8];
                if (v19.n128_f32[0] >= v20.n128_f32[0])
                {
                  v19.n128_u32[0] = v92[8];
                  v20.n128_u32[0] = v93[10];
                  if (v19.n128_f32[0] <= v20.n128_f32[0])
                  {
                    v19.n128_u32[0] = v92[11];
                    v20.n128_u32[0] = v93[9];
                    if (v19.n128_f32[0] >= v20.n128_f32[0])
                    {
                      v19.n128_u32[0] = v92[9];
                      v20.n128_u32[0] = v93[11];
                      if (v19.n128_f32[0] <= v20.n128_f32[0])
                      {
                        if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), v92, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), v93, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                        v87 = v108;
                      }
                    }
                  }
                }
                ++v91;
              }
              while (v91 != v87);
              v85 = v117;
            }
            ++v86;
          }
          while (v86 != v85);
        }
      }
    }
    else if ((sub_2234008DC(&v121, &v116, &v107, a4 + 1, a5, a6, a7, a8, v19, v20, v21, v22, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_215;
    }
    v89 = (char *)v113;
    v88 = (char *)v114;
    if (a5 > ((char *)v114 - (_BYTE *)v113) >> 3 || a4 > 0x63 || (v105 - (_BYTE *)v104) >> 3 < a5)
    {
      if (v113 != v114)
      {
        v90 = v105;
        if (v104 != v105)
        {
          do
          {
            v94 = (char *)v104;
            if (v104 != v90)
            {
              do
              {
                v95 = *(_QWORD *)v89;
                v96 = *(_QWORD *)v94;
                if (*(float *)(*(_QWORD *)v89 + 40) >= *(float *)(*(_QWORD *)v94 + 32)
                  && *(float *)(v95 + 32) <= *(float *)(v96 + 40)
                  && *(float *)(v95 + 44) >= *(float *)(v96 + 36)
                  && *(float *)(v95 + 36) <= *(float *)(v96 + 44))
                {
                  if (!sub_223402A48(*(_DWORD *)a6, *(float ***)(a6 + 8), (int *)v95, *(_DWORD *)(a6 + 16), *(float ***)(a6 + 24), (int *)v96, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48), *(_BYTE **)(a6 + 56)))goto LABEL_215;
                  v90 = v105;
                }
                v94 += 8;
              }
              while (v94 != v90);
              v88 = (char *)v114;
            }
            v89 += 8;
          }
          while (v89 != v88);
        }
      }
    }
    else if ((sub_2234008DC(v119, &v113, &v104, a4 + 1, a5, a6, a7, a8, v19, v20, v21, v22, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_215;
    }
    v97 = 1;
    v98 = __p;
    if (__p)
      goto LABEL_216;
    goto LABEL_217;
  }
  v58 = (__n128)xmmword_2245F53F0;
  v100 = xmmword_2245F53F0;
  v58.n128_u32[0] = 2139095039;
  v20.n128_u32[0] = -8388609;
  v21.n128_u32[0] = -8388609;
  v22.n128_u32[0] = 2139095039;
  do
  {
    v59 = *v55;
    v60 = (*v55)[8];
    if (v60 >= v22.n128_f32[0])
    {
      if (v60 <= v21.n128_f32[0])
      {
LABEL_109:
        v61 = v59[9];
        if (v61 < v58.n128_f32[0])
          goto LABEL_110;
        goto LABEL_118;
      }
    }
    else
    {
      *(float *)&v100 = (*v55)[8];
      v22.n128_f32[0] = v60;
      if (v60 <= v21.n128_f32[0])
        goto LABEL_109;
    }
    *((float *)&v100 + 2) = v60;
    v21.n128_f32[0] = v60;
    v61 = v59[9];
    if (v61 < v58.n128_f32[0])
    {
LABEL_110:
      *((float *)&v100 + 1) = v61;
      v58.n128_f32[0] = v61;
      if (v61 <= v20.n128_f32[0])
        goto LABEL_111;
      goto LABEL_119;
    }
LABEL_118:
    if (v61 <= v20.n128_f32[0])
    {
LABEL_111:
      v62 = v59[10];
      if (v62 < v22.n128_f32[0])
        goto LABEL_112;
      goto LABEL_120;
    }
LABEL_119:
    *((float *)&v100 + 3) = v61;
    v20.n128_f32[0] = v61;
    v62 = v59[10];
    if (v62 < v22.n128_f32[0])
    {
LABEL_112:
      *(float *)&v100 = v62;
      v22.n128_f32[0] = v62;
      if (v62 <= v21.n128_f32[0])
        goto LABEL_113;
      goto LABEL_121;
    }
LABEL_120:
    if (v62 <= v21.n128_f32[0])
    {
LABEL_113:
      v63 = v59[11];
      if (v63 >= v58.n128_f32[0])
        goto LABEL_122;
      goto LABEL_114;
    }
LABEL_121:
    *((float *)&v100 + 2) = v62;
    v21.n128_f32[0] = v62;
    v63 = v59[11];
    if (v63 >= v58.n128_f32[0])
    {
LABEL_122:
      if (v63 <= v20.n128_f32[0])
        goto LABEL_106;
      goto LABEL_123;
    }
LABEL_114:
    *((float *)&v100 + 1) = v63;
    v58.n128_f32[0] = v63;
    if (v63 <= v20.n128_f32[0])
      goto LABEL_106;
LABEL_123:
    *((float *)&v100 + 3) = v63;
    v20.n128_f32[0] = v63;
LABEL_106:
    ++v55;
  }
  while (v55 != v102);
  if (sub_2234008DC(&v100, &v116, &__p, a4 + 1, a5, a6, a7, a8, v58, v20, v21, v22, a9, a10, a11)
    && (sub_2234008DC(&v100, &v113, &__p, a4 + 1, a5, a6, a7, a8, v81, v82, v83, v84, a9, a10, a11) & 1) != 0)
  {
    goto LABEL_176;
  }
LABEL_215:
  v97 = 0;
  v98 = __p;
  if (__p)
  {
LABEL_216:
    v102 = v98;
    operator delete(v98);
  }
LABEL_217:
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = (int **)v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = (int **)v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  return v97;
}

void sub_223402984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v31 = a19;
    if (!a19)
    {
LABEL_3:
      v32 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a19;
    if (!a19)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a22;
  if (!a22)
  {
LABEL_4:
    v33 = a25;
    if (!a25)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v32);
  v33 = a25;
  if (!a25)
  {
LABEL_5:
    v34 = a28;
    if (!a28)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v33);
  v34 = a28;
  if (!a28)
  {
LABEL_6:
    v35 = *(void **)(v29 - 144);
    if (!v35)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v34);
  v35 = *(void **)(v29 - 144);
  if (!v35)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  *(_QWORD *)(v29 - 136) = v35;
  operator delete(v35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223402A48(int a1, float **a2, int *a3, int a4, float **a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, _BYTE *a12)
{
  uint64_t result;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  BOOL v45;
  uint64_t v46;
  float *v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  float *v72;
  float *v73;
  uint64_t v74;
  float *v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  float *v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  float v92;
  float *v93;
  float *v94;
  int *v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  float *v109;
  uint64_t v110;
  float *v111;
  float *v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  float *v119;
  uint64_t v122;
  float *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float *v131;
  float *v132;
  BOOL v133;
  uint64_t v134;
  float *v135;
  float *v136;
  int v137;
  int v138;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float *v144;
  float *v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  __int16 v150;
  int v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  int v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  _QWORD v163[19];
  char v164;
  char v165;
  _QWORD v166[19];
  char v167;
  char v168;

  if (*((_BYTE *)a3 + 80) && (unint64_t)(*((_QWORD *)a3 + 8) + 1) < *((_QWORD *)a3 + 9)
    || *((_BYTE *)a6 + 80) && (unint64_t)(*((_QWORD *)a6 + 8) + 1) < *((_QWORD *)a6 + 9))
  {
    return 1;
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = ((char *)v14 - (char *)*a2) >> 3;
  if (v14 == *a2)
    v16 = 0;
  else
    v16 = v15 + 1;
  v18 = *a5;
  v17 = a5[1];
  v19 = ((char *)v17 - (char *)v18) >> 3;
  if (v17 == v18)
    v20 = 0;
  else
    v20 = v19 + 1;
  v142 = v20;
  v21 = *((_QWORD *)a3 + 6);
  v22 = v16 - v21;
  if (v16 >= v15 || v22 >= v15)
  {
    v24 = a2[1];
    if (v22 <= v15)
      v24 = &v13[2 * (v22 % v15)];
    v25 = *((_QWORD *)a3 + 11);
    v26 = *((_QWORD *)a3 + 7);
    if (v22 < v15)
      goto LABEL_19;
LABEL_21:
    v27 = a2[1];
    if (v22 - 1 <= v15)
      v27 = &v13[2 * ((v22 - 1) % v15)];
    goto LABEL_23;
  }
  v24 = &v14[-2 * v21];
  v25 = *((_QWORD *)a3 + 11);
  v26 = *((_QWORD *)a3 + 7);
  if (v22 >= v15)
    goto LABEL_21;
LABEL_19:
  v27 = v24 - 2;
LABEL_23:
  v122 = v16 - v26;
  v28 = *a3;
  if (v26 == v21)
  {
LABEL_24:
    v29 = v16 - v21;
    v30 = v24;
    v31 = v22 - 1;
    if (v22 < v15)
      goto LABEL_25;
LABEL_44:
    v32 = v14;
    if (v31 <= v15)
    {
      v32 = &v13[2 * (v31 % v15)];
      v33 = v31;
      if (!v31)
        goto LABEL_26;
    }
    else
    {
      v33 = v31;
      if (!v31)
        goto LABEL_26;
    }
LABEL_46:
    if (v29 >= v15)
      goto LABEL_55;
    goto LABEL_47;
  }
  v34 = 0;
  v29 = v16 - v21;
  v30 = v24;
  v35 = v25;
  v36 = *((_QWORD *)a3 + 6);
  while (1)
  {
    v37 = v27;
    v38 = v29 - 2;
    if (v29 - 1 >= v15)
    {
      v39 = v14;
      if (v38 <= v15)
        v39 = &v13[2 * (v38 % v15)];
    }
    else
    {
      v39 = v27 - 2;
    }
    v40 = *v39;
    if (v28 == -1)
      break;
    if (v28 != 1)
      goto LABEL_24;
    if (v40 >= *((float *)a6 + 8))
    {
      v25 += v34;
      v21 += v34;
      v31 = v29 - 1;
      if (v29 >= v15)
        goto LABEL_44;
      goto LABEL_25;
    }
LABEL_40:
    if (v29 - 1 < v15)
    {
      v27 = v37 - 2;
    }
    else
    {
      v27 = v14;
      if (v38 <= v15)
        v27 = &v13[2 * (v38 % v15)];
    }
    ++v36;
    ++v35;
    ++v34;
    --v29;
    v30 = v37;
    if (v26 - v21 == v34)
    {
      v29 = v16 - v26;
      v30 = v37;
      v25 = v25 - v21 + v26;
      v21 = v26;
      v31 = v122 - 1;
      if (v122 < v15)
        goto LABEL_25;
      goto LABEL_44;
    }
  }
  if (v40 > *((float *)a6 + 10))
    goto LABEL_40;
  v25 = v35;
  v21 = v36;
  v31 = v29 - 1;
  if (v29 >= v15)
    goto LABEL_44;
LABEL_25:
  v32 = v30 - 2;
  v33 = v31;
  if (v31)
    goto LABEL_46;
LABEL_26:
  v33 = v16 - 1;
  if (v16 >= v15)
  {
    v32 = v14;
    if (v33 <= v15)
      v32 = &v13[2 * (v33 % v15)];
  }
  else
  {
    v32 = v14 - 2;
  }
  if (v16 == v29)
  {
    v33 = v16;
    v32 = v14;
  }
  if (v29 < v15)
  {
LABEL_47:
    v41 = v30 - 2;
    goto LABEL_57;
  }
LABEL_55:
  v41 = v14;
  if (v31 <= v15)
    v41 = &v13[2 * (v31 % v15)];
LABEL_57:
  v42 = v33 - 1;
  if (v33 < v15)
  {
    v131 = v32 - 2;
    v129 = v33 - 1;
    if (v33 == 1)
      goto LABEL_59;
LABEL_63:
    result = 1;
    if (v29 == v122)
      return result;
    goto LABEL_76;
  }
  v131 = v14;
  if (v42 <= v15)
  {
    v131 = &v13[2 * (v42 % v15)];
    v129 = v33 - 1;
    if (v33 != 1)
      goto LABEL_63;
  }
  else
  {
    v129 = v33 - 1;
    if (v33 != 1)
      goto LABEL_63;
  }
LABEL_59:
  v43 = v16 - 1;
  if (v16 >= v15)
  {
    v44 = v14;
    if (v43 <= v15)
      v44 = &v13[2 * (v43 % v15)];
  }
  else
  {
    v44 = v14 - 2;
  }
  v45 = v16 == v33;
  if (v16 == v33)
    v46 = v16;
  else
    v46 = v16 - 1;
  v129 = v46;
  if (v45)
    v47 = v14;
  else
    v47 = v44;
  v131 = v47;
  result = 1;
  if (v29 != v122)
  {
LABEL_76:
    v48 = -v28;
    v49 = *a6;
    v50 = -*a6;
    v51 = v142 < v19;
    if (v142 >= v19)
      v52 = 0;
    else
      v52 = -1;
    v134 = v142 - 1;
    if (v142 - 1 > v19)
      v51 = 1;
    v133 = v51;
    v53 = v16 < v15;
    if (v16 >= v15)
      v54 = 0;
    else
      v54 = -1;
    v114 = v16 - 1;
    if (v16 - 1 > v15)
      v53 = 1;
    v113 = v53;
    v132 = &v17[2 * v52];
    v112 = &v14[2 * v54];
    v118 = v14;
    v119 = v13;
    v116 = v16;
    v117 = v15;
    v137 = -*a6;
    v138 = *a6;
    v115 = v48;
    v135 = v17;
    v136 = v18;
    while (1)
    {
      v128 = v29 - 1;
      if (v29 >= v15)
      {
        v57 = v14;
        if (v29 - 1 <= v15)
          v57 = &v13[2 * (v128 % v15)];
      }
      else
      {
        v57 = v30 - 2;
      }
      v58 = *v57;
      if (v48 == -1)
      {
        if (v58 > *((float *)a6 + 10))
          return 1;
      }
      else if (v48 == 1 && v58 < *((float *)a6 + 8))
      {
        return 1;
      }
      if (v29 >= v15)
      {
        v59 = v14;
        if (v128 <= v15)
          v59 = &v13[2 * (v128 % v15)];
      }
      else
      {
        v59 = v30 - 2;
      }
      v130 = v31 - 1;
      if (v31 >= v15)
      {
        v60 = v14;
        if (v31 - 1 <= v15)
          v60 = &v13[2 * (v130 % v15)];
      }
      else
      {
        v60 = v41 - 2;
      }
      v166[0] = a3;
      v166[1] = v21;
      v166[2] = v59;
      v166[3] = v60;
      v166[4] = v131;
      v166[5] = v13;
      v166[6] = v14;
      v166[7] = v15;
      v166[8] = v129;
      v166[9] = v14;
      v166[10] = v13;
      v166[11] = v14;
      v166[12] = v15;
      v166[13] = v16;
      v166[14] = v13;
      v166[15] = v13;
      v166[16] = v14;
      v166[17] = v15;
      v166[18] = 0;
      v167 = 1;
      v61 = *((_QWORD *)a6 + 6);
      v62 = v142 - v61;
      v168 = 0;
      if (v142 >= v19 || v62 >= v19)
      {
        v63 = v17;
        if (v62 <= v19)
          v63 = &v18[2 * (v62 % v19)];
      }
      else
      {
        v63 = &v17[-2 * v61];
      }
      if (v62 >= v19)
      {
        v64 = v17;
        if (v62 - 1 <= v19)
          v64 = &v18[2 * ((v62 - 1) % v19)];
      }
      else
      {
        v64 = v63 - 2;
      }
      v124 = v29;
      v125 = v31;
      v65 = *((_QWORD *)a6 + 11);
      v66 = *((_QWORD *)a6 + 7);
      v141 = v142 - v66;
      if (v66 == v61)
      {
LABEL_118:
        v67 = v142 - v61;
        v68 = v63;
        v69 = v62 - 1;
        if (v62 < v19)
          goto LABEL_119;
        goto LABEL_158;
      }
      v77 = 0;
      v67 = v142 - v61;
      v68 = v63;
      v78 = *((_QWORD *)a6 + 11);
      v79 = v61;
      while (1)
      {
        v80 = v64;
        v81 = v67 - 2;
        if (v67 - 1 >= v19)
        {
          v82 = v17;
          if (v81 <= v19)
            v82 = &v18[2 * (v81 % v19)];
        }
        else
        {
          v82 = v64 - 2;
        }
        v83 = *v82;
        if (v49 != -1)
          break;
        if (v83 <= *((float *)a3 + 10))
        {
          v65 = v78;
          v61 = v79;
          v69 = v67 - 1;
          if (v67 >= v19)
            goto LABEL_158;
LABEL_119:
          v70 = v68 - 2;
          v71 = v69;
          v127 = v134 / v19;
          if (!v69)
            goto LABEL_120;
LABEL_160:
          v126 = v25;
          if (v67 >= v19)
            goto LABEL_128;
LABEL_161:
          v73 = v68 - 2;
          v74 = v71 - 1;
          if (v71 < v19)
            goto LABEL_131;
          goto LABEL_162;
        }
LABEL_154:
        if (v67 - 1 < v19)
        {
          v64 = v80 - 2;
        }
        else
        {
          v64 = v17;
          if (v81 <= v19)
            v64 = &v18[2 * (v81 % v19)];
        }
        ++v79;
        ++v78;
        ++v77;
        --v67;
        v68 = v80;
        if (v66 - v61 == v77)
        {
          v67 = v142 - v66;
          v68 = v80;
          v65 = v65 - v61 + v66;
          v61 = *((_QWORD *)a6 + 7);
          v69 = v141 - 1;
          if (v141 < v19)
            goto LABEL_119;
          goto LABEL_158;
        }
      }
      if (v49 != 1)
        goto LABEL_118;
      if (v83 < *((float *)a3 + 8))
        goto LABEL_154;
      v65 += v77;
      v61 += v77;
      v69 = v67 - 1;
      if (v67 < v19)
        goto LABEL_119;
LABEL_158:
      v70 = v17;
      if (v69 <= v19)
      {
        v70 = &v18[2 * (v69 % v19)];
        v71 = v69;
        v127 = v134 / v19;
        if (!v69)
          goto LABEL_120;
        goto LABEL_160;
      }
      v71 = v69;
      v127 = v134 / v19;
      if (v69)
        goto LABEL_160;
LABEL_120:
      v72 = v132;
      if (!v133)
        v72 = &v18[2 * (v134 - v127 * v19)];
      if (v142 == v67)
        v70 = v17;
      else
        v70 = v72;
      v71 = v142 - 1;
      if (v142 == v67)
        v71 = v142;
      v126 = v25;
      if (v67 < v19)
        goto LABEL_161;
LABEL_128:
      v73 = v17;
      if (v69 <= v19)
        v73 = &v18[2 * (v69 % v19)];
      v74 = v71 - 1;
      if (v71 < v19)
      {
LABEL_131:
        v75 = v70 - 2;
        v123 = v41;
        if (!v74)
          goto LABEL_132;
LABEL_164:
        if (v67 == v141)
          goto LABEL_165;
LABEL_167:
        v88 = v65 - 1;
        while (2)
        {
          v90 = v67 - 1;
          if (v67 >= v19)
          {
            v91 = v17;
            if (v90 <= v19)
              v91 = &v18[2 * (v90 % v19)];
          }
          else
          {
            v91 = v68 - 2;
          }
          v92 = *v91;
          if (v50 == -1)
          {
            if (v92 > *((float *)a3 + 10))
              goto LABEL_165;
          }
          else if (v50 == 1 && v92 < *((float *)a3 + 8))
          {
            goto LABEL_165;
          }
          if (a1 == a4 && *((_QWORD *)a3 + 2) == *((_QWORD *)a6 + 2) && *((_QWORD *)a3 + 3) == *((_QWORD *)a6 + 3))
          {
            if (a7)
            {
              if (v21 >= v61 || (a8 & 1) == 0)
              {
                if (v21 < v61)
                  break;
LABEL_195:
                if (v67 < v19)
                {
LABEL_196:
                  v68 -= 2;
                  goto LABEL_220;
                }
LABEL_218:
                v68 = v17;
                if (v90 <= v19)
                  v68 = &v18[2 * (v90 % v19)];
LABEL_220:
                if (v90 >= v19)
                {
                  v73 = v17;
                  if (v67 - 2 <= v19)
                    v73 = &v18[2 * ((v67 - 2) % v19)];
                }
                else
                {
                  v73 -= 2;
                }
                v89 = v74 - 1;
                if (v74 >= v19)
                {
                  v75 = v17;
                  if (v89 <= v19)
                    v75 = &v18[2 * (v89 % v19)];
                }
                else
                {
                  v75 -= 2;
                }
                if (v74 == 1)
                {
                  v109 = v132;
                  if (!v133)
                    v109 = &v18[2 * (v134 - v127 * v19)];
                  if (v142 == 1)
                    v75 = v17;
                  else
                    v75 = v109;
                  v89 = v142 - 1;
                  if (v142 == 1)
                    v89 = 1;
                }
                ++v88;
                ++v61;
                v74 = v89;
                --v67;
                if (v141 == v90)
                  goto LABEL_165;
                continue;
              }
            }
            else if (!a8)
            {
              break;
            }
            if (v126 == v88 || !v21 && *((_QWORD *)a3 + 9) - 2 <= v61)
              goto LABEL_195;
          }
          break;
        }
        if (v67 >= v19)
        {
          v93 = v17;
          if (v90 <= v19)
            v93 = &v18[2 * (v90 % v19)];
        }
        else
        {
          v93 = v68 - 2;
        }
        v143 = v88;
        v145 = v73;
        if (v90 >= v19)
        {
          v94 = v17;
          if (v67 - 2 <= v19)
            v94 = &v18[2 * ((v67 - 2) % v19)];
        }
        else
        {
          v94 = v73 - 2;
        }
        v163[0] = a6;
        v163[1] = v61;
        v163[2] = v93;
        v163[3] = v94;
        v144 = v75;
        v163[4] = v75;
        v163[5] = v18;
        v163[6] = v17;
        v163[7] = v19;
        v163[8] = v74;
        v163[9] = v17;
        v163[10] = v18;
        v163[11] = v17;
        v163[12] = v19;
        v163[13] = v142;
        v163[14] = v18;
        v163[15] = v18;
        v163[16] = v17;
        v163[17] = v19;
        v163[18] = 0;
        v164 = 0;
        v165 = 0;
        v147 = 0;
        v148 = 0;
        v149 = -1;
        v150 = 0;
        v151 = 0;
        v156 = xmmword_2245F4CF0;
        v157 = 0;
        v162 = xmmword_2245F4CF0;
        v152 = a1;
        v95 = a3;
        v153 = *((_OWORD *)a3 + 1);
        v154 = v21;
        v155 = -1;
        v158 = a4;
        v96 = a6;
        v159 = *((_OWORD *)a6 + 1);
        v97 = v61;
        v160 = v61;
        v161 = -1;
        v98 = a11[5];
        sub_223403894((uint64_t)v166, (uint64_t)v163, &v146, a9, a10, a11);
        v99 = a11[4];
        v100 = a11[1];
        v101 = a11[2];
        v102 = (_QWORD *)(v100 + 8 * (v99 / 0x19));
        if (v101 == v100)
        {
          v103 = 0;
          v61 = v97;
          if (!v98)
            goto LABEL_212;
        }
        else
        {
          v103 = *v102 + 160 * (v99 % 0x19);
          v61 = v97;
          if (!v98)
            goto LABEL_212;
        }
        v104 = v98 - 0x3333333333333333 * ((uint64_t)(v103 - *v102) >> 5);
        if (v104 < 1)
        {
          v105 = 24 - v104;
          v102 -= v105 / 0x19;
          v103 = *v102 + 160 * (25 * (v105 / 0x19) - v105) + 3840;
        }
        else
        {
          v102 += v104 / 0x19uLL;
          v103 = *v102 + 160 * (v104 % 0x19uLL);
        }
LABEL_212:
        a6 = v96;
        a3 = v95;
        v17 = v135;
        v18 = v136;
        v50 = v137;
        v49 = v138;
        v106 = a11[5] + v99;
        v107 = (_QWORD *)(v100 + 8 * (v106 / 0x19));
        if (v101 == v100)
        {
          v108 = 0;
          if (!v103)
            goto LABEL_217;
        }
        else
        {
          v108 = *v107 + 160 * (v106 % 0x19);
          if (v103 == v108)
            goto LABEL_217;
        }
        if (25 * (v107 - v102) - 0x3333333333333333 * ((uint64_t)(v108 - *v107) >> 5) != 0xCCCCCCCCCCCCCCCDLL
                                                                                         * ((uint64_t)(v103 - *v102) >> 5))
        {
          result = 0;
          *a12 = 1;
          return result;
        }
LABEL_217:
        v75 = v144;
        v73 = v145;
        v88 = v143;
        if (v67 < v19)
          goto LABEL_196;
        goto LABEL_218;
      }
LABEL_162:
      v75 = v17;
      if (v74 <= v19)
      {
        v75 = &v18[2 * (v74 % v19)];
        v123 = v41;
        if (v74)
          goto LABEL_164;
      }
      else
      {
        v123 = v41;
        if (v74)
          goto LABEL_164;
      }
LABEL_132:
      v76 = v132;
      if (!v133)
        v76 = &v18[2 * (v134 - v127 * v19)];
      if (v142 == v71)
        v75 = v17;
      else
        v75 = v76;
      if (v142 == v71)
        v74 = v142;
      else
        v74 = v142 - 1;
      if (v67 != v141)
        goto LABEL_167;
LABEL_165:
      v15 = v117;
      if (v124 < v117)
      {
        v13 = v119;
        v30 -= 2;
        v14 = v118;
        v16 = v116;
        v84 = v125;
        v85 = v126;
        v86 = v123;
        v29 = v128;
        v87 = v129;
        goto LABEL_233;
      }
      v14 = v118;
      v13 = v119;
      v30 = v118;
      v29 = v128;
      v87 = v129;
      v16 = v116;
      v84 = v125;
      v85 = v126;
      v86 = v123;
      v110 = v130;
      if (v128 <= v117)
      {
        v30 = &v119[2 * (v128 % v117)];
LABEL_233:
        v110 = v130;
      }
      if (v84 >= v117)
      {
        v41 = v14;
        if (v110 <= v117)
          v41 = &v13[2 * (v130 % v117)];
      }
      else
      {
        v41 = v86 - 2;
      }
      v55 = v87 - 1;
      if (v87 < v117)
      {
        v111 = v131 - 2;
        goto LABEL_242;
      }
      v131 = v14;
      if (v55 <= v117)
      {
        v111 = &v13[2 * (v55 % v117)];
LABEL_242:
        v131 = v111;
      }
      if (v87 == 1)
      {
        v56 = v112;
        if (!v113)
          v56 = &v13[2 * (v114 % v117)];
        v55 = v114;
        if (v16 == 1)
        {
          v55 = 1;
          v56 = v14;
        }
        v131 = v56;
      }
      ++v21;
      v25 = v85 + 1;
      v129 = v55;
      v31 = v130;
      v48 = v115;
      if (v84 == v122)
        return 1;
    }
  }
  return result;
}

_QWORD *sub_223403894(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  float *v12;
  float *v13;
  float *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[80];
  _BYTE v80[64];
  uint64_t v81;
  _QWORD v82[2];
  _QWORD v83[3];
  _QWORD v84[3];
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  _DWORD v91[7];
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  float *v98[2];
  float *v99[2];
  __int128 v100;
  _BYTE v101[40];
  __int128 v102;
  _BYTE v103[40];
  __int128 v104;
  int v105;
  uint64_t v106;

  v6 = a6;
  v106 = *MEMORY[0x24BDAC8D0];
  v97 = a6;
  v82[0] = a1;
  v82[1] = a2;
  v83[1] = a1;
  v83[2] = a2;
  v84[1] = a2;
  v84[2] = a1;
  v12 = *(float **)(a1 + 24);
  v13 = *(float **)(a2 + 16);
  v14 = *(float **)(a2 + 24);
  v99[0] = *(float **)(a1 + 16);
  v99[1] = v12;
  v98[0] = v13;
  v98[1] = v14;
  *(_OWORD *)&v79[8] = xmmword_2245F4CF0;
  *(_QWORD *)&v79[24] = 1065353216;
  *(float *)&v78 = *v12 - *v99[0];
  *(float *)v79 = *v14 - *v13;
  *((float *)&v78 + 1) = v12[1] - v99[0][1];
  *(float *)&v79[4] = v14[1] - v13[1];
  sub_223406564((float *)&v78, v99, v98, a1, a2, (uint64_t)&v85);
  v95 = a4;
  v96 = a5;
  v15 = LOBYTE(v91[0]);
  if (LOBYTE(v91[0]) != 100)
  {
    v78 = *a3;
    *(_OWORD *)&v80[16] = *(_OWORD *)(a3 + 13);
    *(_OWORD *)&v80[32] = *(_OWORD *)(a3 + 15);
    *(_OWORD *)&v80[48] = *(_OWORD *)(a3 + 17);
    v81 = a3[19];
    *(_OWORD *)&v79[32] = *(_OWORD *)(a3 + 5);
    *(_OWORD *)&v79[48] = *(_OWORD *)(a3 + 7);
    *(_OWORD *)&v79[64] = *(_OWORD *)(a3 + 9);
    *(_OWORD *)v80 = *(_OWORD *)(a3 + 11);
    *(_OWORD *)v79 = *(_OWORD *)(a3 + 1);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a3 + 3);
    switch(LOBYTE(v91[0]))
    {
      case '0':
      case 'a':
      case 'f':
      case 's':
        goto LABEL_3;
      case 'c':
        if (BYTE1(v91[0]))
        {
          sub_223405B84(a1, a2, (uint64_t)&v78, (uint64_t)&v97, (uint64_t)v82, (uint64_t)v83);
          return v97;
        }
        if (!v93)
        {
          sub_2234061FC(a1, a2, (uint64_t)&v78, (float *)&v85, (uint64_t)v91, (uint64_t)v83);
          *(_DWORD *)v79 = 5;
          goto LABEL_47;
        }
        sub_2234056BC(a1, a2, (uint64_t)&v78, (float *)&v85, (uint64_t)v91, (uint64_t)v83);
        v55 = v6[2];
        v48 = v6[1];
        v56 = 25 * ((v55 - v48) >> 3) - 1;
        if (v55 == v48)
          v56 = 0;
        v50 = v6[5] + v6[4];
        if (v56 == v50)
          goto LABEL_41;
        goto LABEL_42;
      case 'e':
        if (BYTE1(v91[0]))
        {
          v104 = *(_OWORD *)&v79[4];
          v105 = *(_DWORD *)&v79[20];
          v102 = *(_OWORD *)&v79[28];
          *(_OWORD *)v103 = *(_OWORD *)&v79[44];
          *(_OWORD *)&v103[12] = *(_OWORD *)&v79[56];
          v21 = *(_DWORD *)&v80[4];
          *(_OWORD *)&v101[12] = *(_OWORD *)&v80[40];
          v100 = *(_OWORD *)&v80[12];
          *(_OWORD *)v101 = *(_OWORD *)&v80[28];
          if (!v85)
            return v6;
          v22 = 0;
          v23 = HIDWORD(v81);
          v24 = v6[5];
          v25 = 1;
          do
          {
            v29 = v6[1];
            v30 = v6[2] == v29;
            v31 = 25 * ((v6[2] - v29) >> 3) - 1;
            v32 = *(&v85 + v22 + 1);
            v33 = (char *)&v85 + 28 * v22;
            *(_QWORD *)&v103[28] = *((_QWORD *)v33 + 3);
            *(_DWORD *)&v103[36] = *((_DWORD *)v33 + 8);
            *(_QWORD *)&v101[28] = *(_QWORD *)(v33 + 36);
            *(_DWORD *)&v101[36] = *((_DWORD *)v33 + 11);
            if (v30)
              v34 = 0;
            else
              v34 = v31;
            v35 = v6[4] + v24;
            if (v34 == v35)
            {
              sub_223408E68((uint64_t)v6);
              v29 = v6[1];
              v35 = v6[5] + v6[4];
            }
            v26 = *(_QWORD *)(v29 + 8 * (v35 / 0x19)) + 160 * (v35 % 0x19);
            *(_OWORD *)(v26 + 12) = v104;
            v27 = *(_OWORD *)v103;
            *(_OWORD *)(v26 + 36) = v102;
            *(_OWORD *)(v26 + 52) = v27;
            *(_OWORD *)(v26 + 68) = *(_OWORD *)&v103[16];
            *(_OWORD *)(v26 + 132) = *(_OWORD *)&v101[16];
            v28 = v100;
            *(_OWORD *)(v26 + 116) = *(_OWORD *)v101;
            *(_QWORD *)v26 = v32;
            *(_DWORD *)(v26 + 8) = 0;
            *(_DWORD *)(v26 + 28) = v105;
            *(_DWORD *)(v26 + 32) = 5;
            *(_QWORD *)(v26 + 84) = *(_QWORD *)&v103[32];
            *(_DWORD *)(v26 + 92) = v21;
            *(_DWORD *)(v26 + 96) = 5;
            *(_QWORD *)(v26 + 148) = *(_QWORD *)&v101[32];
            *(_OWORD *)(v26 + 100) = v28;
            *(_DWORD *)(v26 + 156) = v23;
            v24 = v6[5] + 1;
            v6[5] = v24;
            v22 = v25++;
          }
          while (v85 > v22);
        }
        else
        {
          sub_2234061FC(a1, a2, (uint64_t)&v78, (float *)&v85, (uint64_t)v91, (uint64_t)v83);
LABEL_47:
          v66 = v6[2];
          v67 = v6[1];
          v68 = 25 * ((v66 - v67) >> 3) - 1;
          if (v66 == v67)
            v68 = 0;
          v69 = v6[5] + v6[4];
          if (v68 == v69)
          {
            sub_223408E68((uint64_t)v6);
            v67 = v6[1];
            v69 = v6[5] + v6[4];
          }
          v70 = *(_QWORD *)(v67 + 8 * (v69 / 0x19)) + 160 * (v69 % 0x19);
          *(_QWORD *)v70 = v78;
          v71 = *(_OWORD *)v79;
          *(_OWORD *)(v70 + 24) = *(_OWORD *)&v79[16];
          *(_OWORD *)(v70 + 8) = v71;
          v72 = *(_OWORD *)&v79[32];
          v73 = *(_OWORD *)&v79[48];
          v74 = *(_OWORD *)&v79[64];
          *(_OWORD *)(v70 + 88) = *(_OWORD *)v80;
          *(_OWORD *)(v70 + 72) = v74;
          *(_OWORD *)(v70 + 56) = v73;
          *(_OWORD *)(v70 + 40) = v72;
          v75 = *(_OWORD *)&v80[16];
          v76 = *(_OWORD *)&v80[32];
          v77 = *(_OWORD *)&v80[48];
          *(_QWORD *)(v70 + 152) = v81;
          *(_OWORD *)(v70 + 136) = v77;
          *(_OWORD *)(v70 + 120) = v76;
          *(_OWORD *)(v70 + 104) = v75;
          ++v6[5];
        }
        if (((v15 - 97) > 0x12 || ((1 << (v15 - 97)) & 0x40021) == 0) && v15 != 48)
          return v6;
LABEL_3:
        if (!v85)
          return v6;
        v16 = v86;
        *(_QWORD *)&v79[72] = v87;
        *(_DWORD *)v80 = v88;
        LODWORD(v81) = v90;
        *(_QWORD *)&v80[56] = v89;
        v17 = v6[2];
        v18 = v6[1];
        v19 = 25 * ((v17 - v18) >> 3) - 1;
        v78 = v86;
        *(_DWORD *)v79 = 0;
        *(_DWORD *)&v79[24] = 4;
        *(_DWORD *)&v80[8] = 4;
        if (v17 == v18)
          v19 = 0;
        v20 = v6[5] + v6[4];
        if (v19 == v20)
        {
LABEL_22:
          sub_223408E68((uint64_t)v6);
          v18 = v6[1];
          v20 = v6[5] + v6[4];
          v16 = v78;
        }
LABEL_23:
        v39 = *(_QWORD *)(v18 + 8 * (v20 / 0x19)) + 160 * (v20 % 0x19);
        *(_QWORD *)v39 = v16;
        v40 = *(_OWORD *)v79;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)&v79[16];
        *(_OWORD *)(v39 + 8) = v40;
        v41 = *(_OWORD *)&v79[32];
        v42 = *(_OWORD *)&v79[48];
        v43 = *(_OWORD *)&v79[64];
        *(_OWORD *)(v39 + 88) = *(_OWORD *)v80;
        *(_OWORD *)(v39 + 72) = v43;
        *(_OWORD *)(v39 + 56) = v42;
        *(_OWORD *)(v39 + 40) = v41;
        v44 = *(_OWORD *)&v80[16];
        v45 = *(_OWORD *)&v80[32];
        v46 = *(_OWORD *)&v80[48];
        *(_QWORD *)(v39 + 152) = v81;
        *(_OWORD *)(v39 + 136) = v46;
        *(_OWORD *)(v39 + 120) = v45;
        *(_OWORD *)(v39 + 104) = v44;
        goto LABEL_43;
      case 'i':
        v16 = v86;
        *(_QWORD *)&v79[72] = v87;
        *(_DWORD *)v80 = v88;
        LODWORD(v81) = v90;
        *(_QWORD *)&v80[56] = v89;
        v36 = v6[2];
        v18 = v6[1];
        v37 = 25 * ((v36 - v18) >> 3) - 1;
        *(_DWORD *)v79 = 2;
        v78 = v86;
        if (v36 == v18)
          v37 = 0;
        v38 = v92 == 1;
        *(_DWORD *)&v79[64 * (unint64_t)(v92 != 1) + 24] = 1;
        *(_DWORD *)&v79[64 * (unint64_t)v38 + 24] = 2;
        v20 = v6[5] + v6[4];
        if (v37 == v20)
          goto LABEL_22;
        goto LABEL_23;
      case 'm':
        if (v94 == 1)
        {
          sub_22340416C(a1, a2, (uint64_t)&v78, (uint64_t)&v85, v91, (uint64_t)v83);
          v47 = v6[2];
          v48 = v6[1];
          v49 = 25 * ((v47 - v48) >> 3) - 1;
          if (v47 == v48)
            v49 = 0;
          v50 = v6[5] + v6[4];
          if (v49 == v50)
          {
LABEL_41:
            sub_223408E68((uint64_t)v6);
            v48 = v6[1];
            v50 = v6[5] + v6[4];
          }
        }
        else
        {
          sub_223404828(a2, a1, (uint64_t)&v78, (uint64_t)&v85, v91, (uint64_t)v84);
          v53 = v6[2];
          v48 = v6[1];
          v54 = 25 * ((v53 - v48) >> 3) - 1;
          if (v53 == v48)
            v54 = 0;
          v50 = v6[5] + v6[4];
          if (v54 == v50)
            goto LABEL_41;
        }
LABEL_42:
        v57 = *(_QWORD *)(v48 + 8 * (v50 / 0x19)) + 160 * (v50 % 0x19);
        *(_QWORD *)v57 = v78;
        v58 = *(_OWORD *)v79;
        *(_OWORD *)(v57 + 24) = *(_OWORD *)&v79[16];
        *(_OWORD *)(v57 + 8) = v58;
        v59 = *(_OWORD *)&v79[32];
        v60 = *(_OWORD *)&v79[48];
        v61 = *(_OWORD *)&v79[64];
        *(_OWORD *)(v57 + 88) = *(_OWORD *)v80;
        *(_OWORD *)(v57 + 72) = v61;
        *(_OWORD *)(v57 + 56) = v60;
        *(_OWORD *)(v57 + 40) = v59;
        v62 = *(_OWORD *)&v80[16];
        v63 = *(_OWORD *)&v80[32];
        v64 = *(_OWORD *)&v80[48];
        *(_QWORD *)(v57 + 152) = v81;
        *(_OWORD *)(v57 + 136) = v64;
        *(_OWORD *)(v57 + 120) = v63;
        *(_OWORD *)(v57 + 104) = v62;
LABEL_43:
        ++v6[5];
        break;
      case 't':
        sub_223404EE4(a1, a2, (uint64_t)&v78, (uint64_t)&v85, v91, (uint64_t)v83);
        v51 = v6[2];
        v48 = v6[1];
        v52 = 25 * ((v51 - v48) >> 3) - 1;
        if (v51 == v48)
          v52 = 0;
        v50 = v6[5] + v6[4];
        if (v52 == v50)
          goto LABEL_41;
        goto LABEL_42;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_22340416C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  double v40;
  int v41;
  double v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  float *v49;
  double v50;
  int v51;
  double v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float *v58;
  double v59;
  int v60;
  int v61;
  double v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  float *v69;
  double v70;
  int v71;
  double v72;
  uint64_t v73;
  double v74;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_QWORD *)(a3 + 80) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 88) = 0;
    v14 = a5[10];
    if (v14 == 1)
      goto LABEL_10;
  }
  else if (v8 == 1)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a3 + 80) = _D0;
    *(_DWORD *)(a3 + 88) = 1232348160;
    v14 = a5[10];
    if (v14 == 1)
    {
LABEL_10:
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(a3 + 144) = _D0;
      *(_DWORD *)(a3 + 152) = 1232348160;
      v15 = a5[7];
      v22 = *(_QWORD *)(a6 + 8);
      v17 = *(_QWORD *)(a6 + 16);
      v19 = *(float **)(v22 + 16);
      v18 = *(float **)(v22 + 24);
      if (*(_BYTE *)(v17 + 168))
        goto LABEL_19;
      goto LABEL_13;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)(a3 + 88) = *(_DWORD *)(a4 + 32);
    *(_QWORD *)(a3 + 80) = v20;
    v14 = a5[10];
    if (v14 == 1)
      goto LABEL_10;
  }
  if (v14 == -1)
  {
    *(_QWORD *)(a3 + 144) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 152) = 0;
    v15 = a5[7];
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v16 + 16);
    v18 = *(float **)(v16 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
  else
  {
    v23 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(a3 + 152) = *(_DWORD *)(a4 + 44);
    *(_QWORD *)(a3 + 144) = v23;
    v15 = a5[7];
    v24 = *(_QWORD *)(a6 + 8);
    v17 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v24 + 16);
    v18 = *(float **)(v24 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
LABEL_13:
  sub_223406FA4(v17, *(float **)(v17 + 24), v17 + 32);
  v25 = *(_QWORD *)(v17 + 56);
  v26 = *(_QWORD *)(v17 + 64);
  if (v26 >= v25)
  {
    v28 = v26 - 1;
    if (v28 <= v25)
      v27 = (_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * (v28 % v25));
    else
      v27 = *(_QWORD **)(v17 + 48);
  }
  else
  {
    v27 = (_QWORD *)(*(_QWORD *)(v17 + 32) - 8);
  }
  *(_QWORD *)(v17 + 160) = *v27;
  *(_BYTE *)(v17 + 168) = 1;
LABEL_19:
  v74 = 1.0;
  v29 = sub_2233DB7C4(v19, v18, (float *)(v17 + 160), &v74);
  if (v29 == 0.0)
    goto LABEL_20;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v31 = fabs(v29);
    if (v29 > 0.0)
      v30 = 1;
    else
      v30 = -1;
    if (v31 > v74 * 2.22044605e-16)
    {
      if (v15 + v30)
        goto LABEL_33;
      goto LABEL_28;
    }
LABEL_20:
    v30 = 0;
    if (v15)
      goto LABEL_33;
LABEL_28:
    v32 = a3 + 32;
    *(_DWORD *)(v32 + ((unint64_t)(v30 != -1) << 6)) = 1;
    *(_DWORD *)(v32 + ((unint64_t)(v30 == -1) << 6)) = 2;
    return;
  }
  if (v29 > 0.0)
    v30 = 1;
  else
    v30 = -1;
  if (!(v15 + v30))
    goto LABEL_28;
LABEL_33:
  v33 = *(_QWORD *)(a6 + 16);
  v34 = *(float **)(v33 + 16);
  v35 = *(float **)(v33 + 24);
  if (!*(_BYTE *)(v33 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 16), *(float **)(v33 + 24), v33 + 32);
    v36 = *(_QWORD *)(v33 + 56);
    v37 = *(_QWORD *)(v33 + 64);
    if (v37 >= v36)
    {
      v39 = v37 - 1;
      if (v39 <= v36)
        v38 = (_QWORD *)(*(_QWORD *)(v33 + 40) + 8 * (v39 % v36));
      else
        v38 = *(_QWORD **)(v33 + 48);
    }
    else
    {
      v38 = (_QWORD *)(*(_QWORD *)(v33 + 32) - 8);
    }
    *(_QWORD *)(v33 + 160) = *v38;
    *(_BYTE *)(v33 + 168) = 1;
  }
  v74 = 1.0;
  v40 = sub_2233DB7C4(v34, v35, (float *)(v33 + 160), &v74);
  if (v40 == 0.0)
    goto LABEL_41;
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v40 > 0.0)
      v41 = 1;
    else
      v41 = -1;
  }
  else
  {
    v42 = fabs(v40);
    if (v40 > 0.0)
      v41 = 1;
    else
      v41 = -1;
    if (v42 <= v74 * 2.22044605e-16)
LABEL_41:
      v41 = 0;
  }
  v43 = *(_QWORD *)(a6 + 16);
  v44 = *(float **)(v43 + 24);
  if (!*(_BYTE *)(v43 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 16), *(float **)(v43 + 24), v43 + 32);
    v45 = *(_QWORD *)(v43 + 56);
    v46 = *(_QWORD *)(v43 + 64);
    if (v46 >= v45)
    {
      v48 = v46 - 1;
      if (v48 <= v45)
        v47 = (_QWORD *)(*(_QWORD *)(v43 + 40) + 8 * (v48 % v45));
      else
        v47 = *(_QWORD **)(v43 + 48);
    }
    else
    {
      v47 = (_QWORD *)(*(_QWORD *)(v43 + 32) - 8);
    }
    *(_QWORD *)(v43 + 160) = *v47;
    *(_BYTE *)(v43 + 168) = 1;
  }
  v49 = *(float **)(*(_QWORD *)(a6 + 8) + 24);
  v74 = 1.0;
  v50 = sub_2233DB7C4(v44, (float *)(v43 + 160), v49, &v74);
  if (v50 == 0.0)
    goto LABEL_59;
  if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v50 > 0.0)
      v51 = 1;
    else
      v51 = -1;
  }
  else
  {
    v52 = fabs(v50);
    if (v50 > 0.0)
      v51 = 1;
    else
      v51 = -1;
    if (v52 <= v74 * 2.22044605e-16)
LABEL_59:
      v51 = 0;
  }
  if ((v30 & v15) == 0xFFFFFFFF && v41 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 96) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v15 == 1 && v30 == 1 && v41 == -1)
  {
    *(_DWORD *)(a3 + 32) = 1;
    if (v51 == -1)
      v53 = 1;
    else
      v53 = 3;
    *(_DWORD *)(a3 + 96) = v53;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v15 == v30 && v15 == v41)
  {
    v54 = (v41 == 1) ^ (v51 == 0);
    if (v51 * v15 != -1)
    {
LABEL_122:
      v73 = a3 + 32;
      *(_DWORD *)(v73 + ((unint64_t)v54 << 6)) = 1;
      *(_DWORD *)(v73 + ((unint64_t)(v54 ^ 1) << 6)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v55 = *(_QWORD *)(a6 + 8);
    v56 = *(float **)(v55 + 16);
    v57 = *(float **)(v55 + 24);
    v58 = *(float **)(*(_QWORD *)(a6 + 16) + 24);
    v74 = 1.0;
    v59 = sub_2233DB7C4(v56, v57, v58, &v74);
    if (v59 == 0.0)
      goto LABEL_83;
    if ((*(_QWORD *)&v59 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v59 > 0.0)
        v60 = 1;
      else
        v60 = -1;
    }
    else
    {
      v62 = fabs(v59);
      if (v59 > 0.0)
        v60 = 1;
      else
        v60 = -1;
      if (v62 <= v74 * 2.22044605e-16)
LABEL_83:
        v60 = 0;
    }
    v63 = *(_QWORD *)(a6 + 8);
    v64 = *(float **)(v63 + 24);
    if (!*(_BYTE *)(v63 + 168))
    {
      sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v63 + 24), v63 + 32);
      v65 = *(_QWORD *)(v63 + 56);
      v66 = *(_QWORD *)(v63 + 64);
      if (v66 >= v65)
      {
        v68 = v66 - 1;
        if (v68 <= v65)
          v67 = (_QWORD *)(*(_QWORD *)(v63 + 40) + 8 * (v68 % v65));
        else
          v67 = *(_QWORD **)(v63 + 48);
      }
      else
      {
        v67 = (_QWORD *)(*(_QWORD *)(v63 + 32) - 8);
      }
      *(_QWORD *)(v63 + 160) = *v67;
      *(_BYTE *)(v63 + 168) = 1;
    }
    v69 = *(float **)(*(_QWORD *)(a6 + 16) + 24);
    v74 = 1.0;
    v70 = sub_2233DB7C4(v64, (float *)(v63 + 160), v69, &v74);
    if (v70 == 0.0)
      goto LABEL_109;
    if ((*(_QWORD *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v70 > 0.0)
        v71 = 1;
      else
        v71 = -1;
    }
    else
    {
      v72 = fabs(v70);
      if (v70 > 0.0)
        v71 = 1;
      else
        v71 = -1;
      if (v72 <= v74 * 2.22044605e-16)
LABEL_109:
        v71 = 0;
    }
    if (v71 * v60 == 1 && sub_223408DD0(a6) * v51 == -1)
      v54 = (v41 == 1) == (v51 == 0);
    goto LABEL_122;
  }
  if (v30)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v15 == v41)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 96) = 4;
  }
  else
  {
    if (v41 == 1)
      v61 = 2;
    else
      v61 = 1;
    *(_DWORD *)(a3 + 32) = v61;
    *(_DWORD *)(a3 + 96) = 3;
  }
}

void sub_223404828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  double v40;
  int v41;
  double v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  float *v49;
  double v50;
  int v51;
  double v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float *v58;
  double v59;
  int v60;
  int v61;
  double v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  float *v69;
  double v70;
  int v71;
  double v72;
  uint64_t v73;
  double v74;

  *(_DWORD *)(a3 + 8) = 4;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_QWORD *)(a3 + 80) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 88) = 0;
    v14 = a5[10];
    if (v14 == 1)
      goto LABEL_10;
  }
  else if (v8 == 1)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a3 + 80) = _D0;
    *(_DWORD *)(a3 + 88) = 1232348160;
    v14 = a5[10];
    if (v14 == 1)
    {
LABEL_10:
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(a3 + 144) = _D0;
      *(_DWORD *)(a3 + 152) = 1232348160;
      v15 = a5[5];
      v22 = *(_QWORD *)(a6 + 8);
      v17 = *(_QWORD *)(a6 + 16);
      v19 = *(float **)(v22 + 16);
      v18 = *(float **)(v22 + 24);
      if (*(_BYTE *)(v17 + 168))
        goto LABEL_19;
      goto LABEL_13;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)(a3 + 88) = *(_DWORD *)(a4 + 32);
    *(_QWORD *)(a3 + 80) = v20;
    v14 = a5[10];
    if (v14 == 1)
      goto LABEL_10;
  }
  if (v14 == -1)
  {
    *(_QWORD *)(a3 + 144) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 152) = 0;
    v15 = a5[5];
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v16 + 16);
    v18 = *(float **)(v16 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
  else
  {
    v23 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(a3 + 152) = *(_DWORD *)(a4 + 44);
    *(_QWORD *)(a3 + 144) = v23;
    v15 = a5[5];
    v24 = *(_QWORD *)(a6 + 8);
    v17 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v24 + 16);
    v18 = *(float **)(v24 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
LABEL_13:
  sub_223406FA4(v17, *(float **)(v17 + 24), v17 + 32);
  v25 = *(_QWORD *)(v17 + 56);
  v26 = *(_QWORD *)(v17 + 64);
  if (v26 >= v25)
  {
    v28 = v26 - 1;
    if (v28 <= v25)
      v27 = (_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * (v28 % v25));
    else
      v27 = *(_QWORD **)(v17 + 48);
  }
  else
  {
    v27 = (_QWORD *)(*(_QWORD *)(v17 + 32) - 8);
  }
  *(_QWORD *)(v17 + 160) = *v27;
  *(_BYTE *)(v17 + 168) = 1;
LABEL_19:
  v74 = 1.0;
  v29 = sub_2233DB7C4(v19, v18, (float *)(v17 + 160), &v74);
  if (v29 == 0.0)
    goto LABEL_20;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v31 = fabs(v29);
    if (v29 > 0.0)
      v30 = 1;
    else
      v30 = -1;
    if (v31 > v74 * 2.22044605e-16)
    {
      if (v15 + v30)
        goto LABEL_33;
      goto LABEL_28;
    }
LABEL_20:
    v30 = 0;
    if (v15)
      goto LABEL_33;
LABEL_28:
    v32 = a3 + 32;
    *(_DWORD *)(v32 + ((unint64_t)(v30 == -1) << 6)) = 1;
    *(_DWORD *)(v32 + ((unint64_t)(v30 != -1) << 6)) = 2;
    return;
  }
  if (v29 > 0.0)
    v30 = 1;
  else
    v30 = -1;
  if (!(v15 + v30))
    goto LABEL_28;
LABEL_33:
  v33 = *(_QWORD *)(a6 + 16);
  v34 = *(float **)(v33 + 16);
  v35 = *(float **)(v33 + 24);
  if (!*(_BYTE *)(v33 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 16), *(float **)(v33 + 24), v33 + 32);
    v36 = *(_QWORD *)(v33 + 56);
    v37 = *(_QWORD *)(v33 + 64);
    if (v37 >= v36)
    {
      v39 = v37 - 1;
      if (v39 <= v36)
        v38 = (_QWORD *)(*(_QWORD *)(v33 + 40) + 8 * (v39 % v36));
      else
        v38 = *(_QWORD **)(v33 + 48);
    }
    else
    {
      v38 = (_QWORD *)(*(_QWORD *)(v33 + 32) - 8);
    }
    *(_QWORD *)(v33 + 160) = *v38;
    *(_BYTE *)(v33 + 168) = 1;
  }
  v74 = 1.0;
  v40 = sub_2233DB7C4(v34, v35, (float *)(v33 + 160), &v74);
  if (v40 == 0.0)
    goto LABEL_41;
  if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v40 > 0.0)
      v41 = 1;
    else
      v41 = -1;
  }
  else
  {
    v42 = fabs(v40);
    if (v40 > 0.0)
      v41 = 1;
    else
      v41 = -1;
    if (v42 <= v74 * 2.22044605e-16)
LABEL_41:
      v41 = 0;
  }
  v43 = *(_QWORD *)(a6 + 16);
  v44 = *(float **)(v43 + 24);
  if (!*(_BYTE *)(v43 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 16), *(float **)(v43 + 24), v43 + 32);
    v45 = *(_QWORD *)(v43 + 56);
    v46 = *(_QWORD *)(v43 + 64);
    if (v46 >= v45)
    {
      v48 = v46 - 1;
      if (v48 <= v45)
        v47 = (_QWORD *)(*(_QWORD *)(v43 + 40) + 8 * (v48 % v45));
      else
        v47 = *(_QWORD **)(v43 + 48);
    }
    else
    {
      v47 = (_QWORD *)(*(_QWORD *)(v43 + 32) - 8);
    }
    *(_QWORD *)(v43 + 160) = *v47;
    *(_BYTE *)(v43 + 168) = 1;
  }
  v49 = *(float **)(*(_QWORD *)(a6 + 8) + 24);
  v74 = 1.0;
  v50 = sub_2233DB7C4(v44, (float *)(v43 + 160), v49, &v74);
  if (v50 == 0.0)
    goto LABEL_59;
  if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v50 > 0.0)
      v51 = 1;
    else
      v51 = -1;
  }
  else
  {
    v52 = fabs(v50);
    if (v50 > 0.0)
      v51 = 1;
    else
      v51 = -1;
    if (v52 <= v74 * 2.22044605e-16)
LABEL_59:
      v51 = 0;
  }
  if ((v30 & v15) == 0xFFFFFFFF && v41 == 1)
  {
    *(_DWORD *)(a3 + 32) = 2;
    *(_DWORD *)(a3 + 96) = 2;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v15 == 1 && v30 == 1 && v41 == -1)
  {
    if (v51 == -1)
      v53 = 1;
    else
      v53 = 3;
    *(_DWORD *)(a3 + 32) = v53;
    *(_DWORD *)(a3 + 96) = 1;
    *(_BYTE *)(a3 + 12) = 1;
    return;
  }
  if (v15 == v30 && v15 == v41)
  {
    v54 = (v41 == 1) ^ (v51 != 0);
    if (v51 * v15 != -1)
    {
LABEL_122:
      v73 = a3 + 32;
      *(_DWORD *)(v73 + ((unint64_t)v54 << 6)) = 1;
      *(_DWORD *)(v73 + ((unint64_t)(v54 ^ 1) << 6)) = 2;
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
    v55 = *(_QWORD *)(a6 + 8);
    v56 = *(float **)(v55 + 16);
    v57 = *(float **)(v55 + 24);
    v58 = *(float **)(*(_QWORD *)(a6 + 16) + 24);
    v74 = 1.0;
    v59 = sub_2233DB7C4(v56, v57, v58, &v74);
    if (v59 == 0.0)
      goto LABEL_83;
    if ((*(_QWORD *)&v59 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v59 > 0.0)
        v60 = 1;
      else
        v60 = -1;
    }
    else
    {
      v62 = fabs(v59);
      if (v59 > 0.0)
        v60 = 1;
      else
        v60 = -1;
      if (v62 <= v74 * 2.22044605e-16)
LABEL_83:
        v60 = 0;
    }
    v63 = *(_QWORD *)(a6 + 8);
    v64 = *(float **)(v63 + 24);
    if (!*(_BYTE *)(v63 + 168))
    {
      sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v63 + 24), v63 + 32);
      v65 = *(_QWORD *)(v63 + 56);
      v66 = *(_QWORD *)(v63 + 64);
      if (v66 >= v65)
      {
        v68 = v66 - 1;
        if (v68 <= v65)
          v67 = (_QWORD *)(*(_QWORD *)(v63 + 40) + 8 * (v68 % v65));
        else
          v67 = *(_QWORD **)(v63 + 48);
      }
      else
      {
        v67 = (_QWORD *)(*(_QWORD *)(v63 + 32) - 8);
      }
      *(_QWORD *)(v63 + 160) = *v67;
      *(_BYTE *)(v63 + 168) = 1;
    }
    v69 = *(float **)(*(_QWORD *)(a6 + 16) + 24);
    v74 = 1.0;
    v70 = sub_2233DB7C4(v64, (float *)(v63 + 160), v69, &v74);
    if (v70 == 0.0)
      goto LABEL_109;
    if ((*(_QWORD *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v70 > 0.0)
        v71 = 1;
      else
        v71 = -1;
    }
    else
    {
      v72 = fabs(v70);
      if (v70 > 0.0)
        v71 = 1;
      else
        v71 = -1;
      if (v72 <= v74 * 2.22044605e-16)
LABEL_109:
        v71 = 0;
    }
    if (v71 * v60 == 1 && sub_223408DD0(a6) * v51 == -1)
      v54 = (v41 == 1) == (v51 != 0);
    goto LABEL_122;
  }
  if (v30)
  {
    *(_DWORD *)(a3 + 8) = 8;
  }
  else if (v15 == v41)
  {
    *(_DWORD *)(a3 + 32) = 4;
    *(_DWORD *)(a3 + 96) = 4;
  }
  else
  {
    if (v41 == 1)
      v61 = 2;
    else
      v61 = 1;
    *(_DWORD *)(a3 + 96) = v61;
    *(_DWORD *)(a3 + 32) = 3;
  }
}

void sub_223404EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v14;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  uint64_t v44;
  float *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  double v50;
  int v51;
  uint64_t v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  int v61;
  double v62;
  uint64_t v63;
  float *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  double v70;
  int v71;
  double v72;
  int v74;
  char v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v81;
  int v82;
  BOOL v83;
  int v84;
  int v85;
  int v86;
  double v87;
  int v88;
  double v89;
  int v90;
  int v91;
  BOOL v92;
  int v93;
  double v94;

  *(_DWORD *)(a3 + 8) = 3;
  *(_QWORD *)a3 = *(_QWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_QWORD *)(a3 + 80) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 88) = 0;
    v14 = a5[10];
    if (v14 != 1)
      goto LABEL_9;
    goto LABEL_4;
  }
  if (v9 != 1)
  {
    v20 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)(a3 + 88) = *(_DWORD *)(a4 + 32);
    *(_QWORD *)(a3 + 80) = v20;
    v14 = a5[10];
    if (v14 != 1)
      goto LABEL_9;
LABEL_4:
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a3 + 144) = _D0;
    *(_DWORD *)(a3 + 152) = 1232348160;
    v17 = *(_QWORD *)(a6 + 8);
    v16 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v16 + 16);
    v18 = *(float **)(v16 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
    goto LABEL_13;
  }
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a3 + 80) = _D0;
  *(_DWORD *)(a3 + 88) = 1232348160;
  v14 = a5[10];
  if (v14 == 1)
    goto LABEL_4;
LABEL_9:
  if (v14 == -1)
  {
    *(_QWORD *)(a3 + 144) = 0x3F80000000000000;
    *(_DWORD *)(a3 + 152) = 0;
    v17 = *(_QWORD *)(a6 + 8);
    v21 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v21 + 16);
    v18 = *(float **)(v21 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
  else
  {
    v22 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(a3 + 152) = *(_DWORD *)(a4 + 44);
    *(_QWORD *)(a3 + 144) = v22;
    v17 = *(_QWORD *)(a6 + 8);
    v23 = *(_QWORD *)(a6 + 16);
    v19 = *(float **)(v23 + 16);
    v18 = *(float **)(v23 + 24);
    if (*(_BYTE *)(v17 + 168))
      goto LABEL_19;
  }
LABEL_13:
  sub_223406FA4(v17, *(float **)(v17 + 24), v17 + 32);
  v24 = *(_QWORD *)(v17 + 56);
  v25 = *(_QWORD *)(v17 + 64);
  if (v25 >= v24)
  {
    v27 = v25 - 1;
    if (v27 <= v24)
      v26 = (_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * (v27 % v24));
    else
      v26 = *(_QWORD **)(v17 + 48);
  }
  else
  {
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 32) - 8);
  }
  *(_QWORD *)(v17 + 160) = *v26;
  *(_BYTE *)(v17 + 168) = 1;
LABEL_19:
  v94 = 1.0;
  v28 = sub_2233DB7C4(v19, v18, (float *)(v17 + 160), &v94);
  if (v28 == 0.0)
  {
LABEL_20:
    v29 = 0;
    v30 = a5[7];
    v31 = *(_QWORD *)(a6 + 8);
    v32 = *(_QWORD *)(a6 + 16);
    v34 = *(float **)(v31 + 16);
    v33 = *(float **)(v31 + 24);
    if (*(_BYTE *)(v32 + 168))
      goto LABEL_39;
    goto LABEL_28;
  }
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v35 = fabs(v28);
    if (v28 > 0.0)
      v29 = 1;
    else
      v29 = -1;
    if (v35 > v94 * 2.22044605e-16)
    {
      v30 = a5[7];
      v36 = *(_QWORD *)(a6 + 8);
      v32 = *(_QWORD *)(a6 + 16);
      v34 = *(float **)(v36 + 16);
      v33 = *(float **)(v36 + 24);
      if (*(_BYTE *)(v32 + 168))
        goto LABEL_39;
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  if (v28 > 0.0)
    v29 = 1;
  else
    v29 = -1;
  v30 = a5[7];
  v40 = *(_QWORD *)(a6 + 8);
  v32 = *(_QWORD *)(a6 + 16);
  v34 = *(float **)(v40 + 16);
  v33 = *(float **)(v40 + 24);
  if (!*(_BYTE *)(v32 + 168))
  {
LABEL_28:
    sub_223406FA4(v32, *(float **)(v32 + 24), v32 + 32);
    v37 = *(_QWORD *)(v32 + 56);
    v38 = *(_QWORD *)(v32 + 64);
    if (v38 >= v37)
    {
      v41 = v38 - 1;
      if (v41 <= v37)
        v39 = (_QWORD *)(*(_QWORD *)(v32 + 40) + 8 * (v41 % v37));
      else
        v39 = *(_QWORD **)(v32 + 48);
    }
    else
    {
      v39 = (_QWORD *)(*(_QWORD *)(v32 + 32) - 8);
    }
    *(_QWORD *)(v32 + 160) = *v39;
    *(_BYTE *)(v32 + 168) = 1;
  }
LABEL_39:
  v94 = 1.0;
  v42 = sub_2233DB7C4(v34, v33, (float *)(v32 + 160), &v94);
  if (v42 == 0.0)
  {
LABEL_40:
    v43 = 0;
    goto LABEL_50;
  }
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v42 > 0.0)
      v43 = 1;
    else
      v43 = -1;
    if (v43 * v30 != -1)
      goto LABEL_50;
LABEL_41:
    v44 = *(_QWORD *)(a6 + 8);
    v45 = *(float **)(v44 + 16);
    v46 = *(float **)(v44 + 24);
    if (!*(_BYTE *)(v44 + 168))
    {
      sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v44 + 24), v44 + 32);
      v47 = *(_QWORD *)(v44 + 56);
      v48 = *(_QWORD *)(v44 + 64);
      if (v48 >= v47)
      {
        v59 = v48 - 1;
        if (v59 <= v47)
          v49 = (_QWORD *)(*(_QWORD *)(v44 + 40) + 8 * (v59 % v47));
        else
          v49 = *(_QWORD **)(v44 + 48);
      }
      else
      {
        v49 = (_QWORD *)(*(_QWORD *)(v44 + 32) - 8);
      }
      *(_QWORD *)(v44 + 160) = *v49;
      *(_BYTE *)(v44 + 168) = 1;
    }
    v94 = 1.0;
    v87 = sub_2233DB7C4(v45, v46, (float *)(v44 + 160), &v94);
    if (v87 != 0.0)
    {
      if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v87 > 0.0)
          v88 = 1;
        else
          v88 = -1;
        if (v88 != v30)
          goto LABEL_172;
LABEL_162:
        if (!v29)
        {
          *(_DWORD *)(a3 + 32) = 3;
          v92 = v43 == 1;
          goto LABEL_188;
        }
        if (v29 == v43)
        {
          if (v43 == 1)
            v85 = 1;
          else
            v85 = 2;
          *(_DWORD *)(a3 + 32) = v85;
          goto LABEL_181;
        }
LABEL_172:
        if (v88 == v43)
        {
          v90 = sub_223409408(a6);
          if (!v90)
            goto LABEL_182;
          if (v90 == v43)
          {
            if (v43 == 1)
              v91 = 1;
            else
              v91 = 2;
            *(_DWORD *)(a3 + 32) = v91;
            if (v43 == 1)
              v85 = 2;
            else
              v85 = 1;
            goto LABEL_181;
          }
        }
        v92 = v43 == 1;
        if (v43 == 1)
          v93 = 2;
        else
          v93 = 1;
        *(_DWORD *)(a3 + 32) = v93;
LABEL_188:
        if (v92)
          v78 = 1;
        else
          v78 = 2;
        goto LABEL_191;
      }
      v89 = fabs(v87);
      if (v87 > 0.0)
        v88 = 1;
      else
        v88 = -1;
      if (v89 > v94 * 2.22044605e-16)
      {
        if (v88 != v30)
          goto LABEL_172;
        goto LABEL_162;
      }
    }
    v88 = 0;
    if (v30)
      goto LABEL_172;
    goto LABEL_162;
  }
  v50 = fabs(v42);
  if (v42 > 0.0)
    v43 = 1;
  else
    v43 = -1;
  if (v50 <= v94 * 2.22044605e-16)
    goto LABEL_40;
  if (v43 * v30 == -1)
    goto LABEL_41;
LABEL_50:
  v51 = sub_223409408(a6);
  v52 = *(_QWORD *)(a6 + 8);
  v53 = *(float **)(v52 + 16);
  v54 = *(float **)(v52 + 24);
  if (!*(_BYTE *)(v52 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v52 + 24), v52 + 32);
    v55 = *(_QWORD *)(v52 + 56);
    v56 = *(_QWORD *)(v52 + 64);
    if (v56 >= v55)
    {
      v58 = v56 - 1;
      if (v58 <= v55)
        v57 = (_QWORD *)(*(_QWORD *)(v52 + 40) + 8 * (v58 % v55));
      else
        v57 = *(_QWORD **)(v52 + 48);
    }
    else
    {
      v57 = (_QWORD *)(*(_QWORD *)(v52 + 32) - 8);
    }
    *(_QWORD *)(v52 + 160) = *v57;
    *(_BYTE *)(v52 + 168) = 1;
  }
  v94 = 1.0;
  v60 = sub_2233DB7C4(v53, v54, (float *)(v52 + 160), &v94);
  if (v60 != 0.0)
  {
    if ((*(_QWORD *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v60 > 0.0)
        v61 = 1;
      else
        v61 = -1;
      goto LABEL_75;
    }
    v62 = fabs(v60);
    if (v60 > 0.0)
      v61 = 1;
    else
      v61 = -1;
    if (v62 > v94 * 2.22044605e-16)
      goto LABEL_75;
  }
  v61 = 0;
LABEL_75:
  v63 = *(_QWORD *)(a6 + 16);
  v64 = *(float **)(v63 + 16);
  v65 = *(float **)(v63 + 24);
  if (!*(_BYTE *)(v63 + 168))
  {
    sub_223406FA4(v63, *(float **)(v63 + 24), v63 + 32);
    v66 = *(_QWORD *)(v63 + 56);
    v67 = *(_QWORD *)(v63 + 64);
    if (v67 >= v66)
    {
      v69 = v67 - 1;
      if (v69 <= v66)
        v68 = (_QWORD *)(*(_QWORD *)(v63 + 40) + 8 * (v69 % v66));
      else
        v68 = *(_QWORD **)(v63 + 48);
    }
    else
    {
      v68 = (_QWORD *)(*(_QWORD *)(v63 + 32) - 8);
    }
    *(_QWORD *)(v63 + 160) = *v68;
    *(_BYTE *)(v63 + 168) = 1;
  }
  v94 = 1.0;
  v70 = sub_2233DB7C4(v64, v65, (float *)(v63 + 160), &v94);
  if (v70 == 0.0)
    goto LABEL_83;
  if ((*(_QWORD *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v70 > 0.0)
      v71 = 1;
    else
      v71 = -1;
    goto LABEL_93;
  }
  v72 = fabs(v70);
  v71 = v70 > 0.0 ? 1 : -1;
  if (v72 <= v94 * 2.22044605e-16)
LABEL_83:
    v71 = 0;
LABEL_93:
  if (v43)
    _ZF = 1;
  else
    _ZF = v71 * v30 == 1;
  v74 = !_ZF;
  if (v61 == v30 || v61 == v43 || !(v43 | v30) && v61 != -1)
  {
    if (v51)
      v75 = 1;
    else
      v75 = v74;
    if ((v75 & 1) != 0)
    {
      if (!v29)
      {
        *(_DWORD *)(a3 + 32) = 3;
        if (v71 == 1)
          v82 = 2;
        else
          v82 = 1;
        if (v74)
          v78 = 3;
        else
          v78 = v82;
        goto LABEL_191;
      }
      if (v29 == v51 && v71 * v29 != -1)
      {
        if (v71 == 1)
          v76 = 1;
        else
          v76 = 2;
        *(_DWORD *)(a3 + 32) = v76;
        if (v71 == 1)
          v77 = 2;
        else
          v77 = 1;
        if (v74)
          v78 = 3;
        else
          v78 = v77;
        goto LABEL_191;
      }
      if (!(v51 + v71))
      {
        v83 = v71 == 1;
        if (v71 == 1)
          v84 = 2;
        else
          v84 = 1;
        *(_DWORD *)(a3 + 32) = v84;
        if (v83)
          v85 = 1;
        else
          v85 = 2;
LABEL_181:
        *(_DWORD *)(a3 + 96) = v85;
        *(_BYTE *)(a3 + 12) = 1;
        return;
      }
      if (v29 != -v71)
        return;
      if (v71 == 1)
        v86 = 2;
      else
        v86 = 1;
      *(_DWORD *)(a3 + 32) = v86;
      *(_DWORD *)(a3 + 96) = v86;
      if (v74)
      {
        v78 = 3;
LABEL_191:
        *(_DWORD *)(a3 + 96) = v78;
        return;
      }
LABEL_131:
      *(_BYTE *)(a3 + 12) = 1;
      return;
    }
LABEL_182:
    v78 = 4;
    *(_DWORD *)(a3 + 32) = 4;
    goto LABEL_191;
  }
  if (v71 == 1)
    v79 = 2;
  else
    v79 = 1;
  *(_DWORD *)(a3 + 32) = v79;
  if (v43 == 1 || v30 == 1)
    v81 = 1;
  else
    v81 = 2;
  if (v74)
    v81 = 3;
  *(_DWORD *)(a3 + 96) = v81;
  if ((v74 & 1) == 0)
    goto LABEL_131;
}

void sub_2234056BC(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  int v32;
  uint64_t v33;
  float *v34;
  float *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  double v41;
  int v42;
  double v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;

  v10 = a4[11];
  v11 = a4[18];
  if (vabds_f32(v10, v11) >= 50.0)
  {
    v15 = v10 < v11;
  }
  else
  {
    v12 = a4[9] / a4[10];
    v13 = a4[17];
    v14 = a4[16] / v13;
    if (v12 == v14)
    {
      v15 = 0;
    }
    else if (COERCE_UNSIGNED_INT(fabs(a4[9] / a4[10])) > 0x7F7FFFFF || COERCE_INT(fabs(a4[16] / v13)) > 2139095039)
    {
      v15 = 1;
    }
    else
    {
      v16 = vabds_f32(v12, v14);
      v17 = fabsf(v12);
      v18 = fabsf(v14);
      if (v17 < v18)
        v17 = v18;
      if (v17 >= 1.0)
        v19 = v17 * 0.00000011921;
      else
        v19 = 0.00000011921;
      v15 = v16 > v19;
    }
    if (v12 >= v14)
      v15 = 0;
  }
  *(_DWORD *)(a3 + 8) = 5;
  *(_QWORD *)a3 = *(_QWORD *)&a4[2 * v15 + 2];
  v20 = &a4[7 * v15];
  v21 = *((_QWORD *)v20 + 3);
  *(float *)(a3 + 88) = v20[8];
  *(_QWORD *)(a3 + 80) = v21;
  v22 = *(_QWORD *)(v20 + 9);
  *(float *)(a3 + 152) = v20[11];
  *(_QWORD *)(a3 + 144) = v22;
  v23 = *(_DWORD *)(a5 + 36);
  v24 = *(_QWORD *)(a6 + 8);
  v25 = *(float **)(v24 + 16);
  v26 = *(float **)(v24 + 24);
  if (!*(_BYTE *)(v24 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v24 + 24), v24 + 32);
    v27 = *(_QWORD *)(v24 + 56);
    v28 = *(_QWORD *)(v24 + 64);
    if (v28 >= v27)
    {
      v30 = v28 - 1;
      if (v30 <= v27)
        v29 = (_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * (v30 % v27));
      else
        v29 = *(_QWORD **)(v24 + 48);
    }
    else
    {
      v29 = (_QWORD *)(*(_QWORD *)(v24 + 32) - 8);
    }
    *(_QWORD *)(v24 + 160) = *v29;
    *(_BYTE *)(v24 + 168) = 1;
  }
  v67 = 1.0;
  v31 = sub_2233DB7C4(v25, v26, (float *)(v24 + 160), &v67);
  if (v31 == 0.0)
    goto LABEL_24;
  if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v31 > 0.0)
      v32 = 1;
    else
      v32 = -1;
    v33 = *(_QWORD *)(a6 + 16);
    v34 = *(float **)(v33 + 16);
    v35 = *(float **)(v33 + 24);
    if (*(_BYTE *)(v33 + 168))
      goto LABEL_43;
    goto LABEL_32;
  }
  v36 = fabs(v31);
  v32 = v31 > 0.0 ? 1 : -1;
  if (v36 <= v67 * 2.22044605e-16)
  {
LABEL_24:
    v32 = 0;
    v33 = *(_QWORD *)(a6 + 16);
    v34 = *(float **)(v33 + 16);
    v35 = *(float **)(v33 + 24);
    if (!*(_BYTE *)(v33 + 168))
      goto LABEL_32;
  }
  else
  {
    v33 = *(_QWORD *)(a6 + 16);
    v34 = *(float **)(v33 + 16);
    v35 = *(float **)(v33 + 24);
    if (!*(_BYTE *)(v33 + 168))
    {
LABEL_32:
      sub_223406FA4(v33, v35, v33 + 32);
      v37 = *(_QWORD *)(v33 + 56);
      v38 = *(_QWORD *)(v33 + 64);
      if (v38 >= v37)
      {
        v40 = v38 - 1;
        if (v40 <= v37)
          v39 = (_QWORD *)(*(_QWORD *)(v33 + 40) + 8 * (v40 % v37));
        else
          v39 = *(_QWORD **)(v33 + 48);
      }
      else
      {
        v39 = (_QWORD *)(*(_QWORD *)(v33 + 32) - 8);
      }
      *(_QWORD *)(v33 + 160) = *v39;
      *(_BYTE *)(v33 + 168) = 1;
    }
  }
LABEL_43:
  v67 = 1.0;
  v41 = sub_2233DB7C4(v34, v35, (float *)(v33 + 160), &v67);
  if (v41 == 0.0)
    goto LABEL_44;
  if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v41 > 0.0)
      v42 = 1;
    else
      v42 = -1;
    goto LABEL_54;
  }
  v43 = fabs(v41);
  v42 = v41 > 0.0 ? 1 : -1;
  if (v43 <= v67 * 2.22044605e-16)
LABEL_44:
    v42 = 0;
LABEL_54:
  if (v23 == 1)
    v44 = v32;
  else
    v44 = v42;
  v45 = v44 * v23;
  if (v45 == 1)
    v46 = 1;
  else
    v46 = 2;
  if (v45 == 1)
    v47 = 2;
  else
    v47 = 1;
  if (v45)
  {
    v48 = v47;
  }
  else
  {
    v46 = 4;
    v48 = 4;
  }
  *(_DWORD *)(a3 + 32) = v46;
  *(_DWORD *)(a3 + 96) = v48;
  if (v32)
  {
    v49 = *(float **)(a1 + 24);
    v50 = *(float *)a3;
    v51 = *(float *)(a3 + 4);
    v52 = *v49;
    v53 = v49[1];
  }
  else
  {
    if (*(_BYTE *)(a1 + 168))
    {
      v52 = *(float *)(a1 + 160);
      v53 = *(float *)(a1 + 164);
    }
    else
    {
      sub_223406FA4(a1, *(float **)(a1 + 24), a1 + 32);
      v54 = *(_QWORD *)(a1 + 56);
      v55 = *(_QWORD *)(a1 + 64);
      if (v55 >= v54)
      {
        v57 = v55 - 1;
        if (v57 <= v54)
          v56 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8 * (v57 % v54));
        else
          v56 = *(uint64_t **)(a1 + 48);
      }
      else
      {
        v56 = (uint64_t *)(*(_QWORD *)(a1 + 32) - 8);
      }
      v58 = *v56;
      *(_QWORD *)(a1 + 160) = v58;
      *(_BYTE *)(a1 + 168) = 1;
      v53 = *((float *)&v58 + 1);
      v52 = *(float *)&v58;
    }
    v50 = *(float *)a3;
    v51 = *(float *)(a3 + 4);
  }
  *(float *)(a3 + 92) = (float)((float)(v50 - v52) * (float)(v50 - v52))
                      + (float)((float)(v51 - v53) * (float)(v51 - v53));
  if (v42)
  {
    v59 = (float)((float)(v50 - **(float **)(a2 + 24)) * (float)(v50 - **(float **)(a2 + 24)))
        + (float)((float)(v51 - *(float *)(*(_QWORD *)(a2 + 24) + 4))
                * (float)(v51 - *(float *)(*(_QWORD *)(a2 + 24) + 4)));
  }
  else
  {
    if (*(_BYTE *)(a2 + 168))
    {
      v60 = *(float *)(a2 + 160);
      v61 = *(float *)(a2 + 164);
    }
    else
    {
      sub_223406FA4(a2, *(float **)(a2 + 24), a2 + 32);
      v62 = *(_QWORD *)(a2 + 56);
      v63 = *(_QWORD *)(a2 + 64);
      if (v63 >= v62)
      {
        v65 = v63 - 1;
        if (v65 <= v62)
          v64 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8 * (v65 % v62));
        else
          v64 = *(uint64_t **)(a2 + 48);
      }
      else
      {
        v64 = (uint64_t *)(*(_QWORD *)(a2 + 32) - 8);
      }
      v66 = *v64;
      *(_QWORD *)(a2 + 160) = v66;
      *(_BYTE *)(a2 + 168) = 1;
      v60 = *(float *)&v66;
      v50 = *(float *)a3;
      v51 = *(float *)(a3 + 4);
      v61 = *((float *)&v66 + 1);
    }
    v59 = (float)((float)(v51 - v61) * (float)(v51 - v61)) + (float)((float)(v50 - v60) * (float)(v50 - v60));
  }
  *(float *)(a3 + 156) = v59;
}

void sub_223405B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  double v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[24];
  __int128 v78;
  __int128 v79;
  _BYTE v80[24];
  __int128 v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v81 = *(_OWORD *)(a3 + 12);
  v82 = *(_DWORD *)(a3 + 28);
  v8 = *(_OWORD *)(a3 + 52);
  v78 = *(_OWORD *)(a3 + 36);
  v79 = v8;
  *(_OWORD *)v80 = *(_OWORD *)(a3 + 68);
  *(_QWORD *)&v80[16] = *(_QWORD *)(a3 + 84);
  v9 = *(_DWORD *)(a3 + 92);
  v10 = *(_OWORD *)(a3 + 100);
  v11 = *(_OWORD *)(a3 + 116);
  v12 = *(_OWORD *)(a3 + 132);
  *(_QWORD *)&v77[16] = *(_QWORD *)(a3 + 148);
  v76 = v11;
  *(_OWORD *)v77 = v12;
  v75 = v10;
  v13 = *(_DWORD *)(a3 + 156);
  v15 = *(_DWORD *)(a5 + 180);
  v14 = *(_DWORD *)(a5 + 184);
  if (v15 == 1)
  {
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(float **)(v16 + 16);
    v18 = *(float **)(v16 + 24);
    if (!*(_BYTE *)(v16 + 168))
    {
      sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v16 + 24), v16 + 32);
      v19 = *(_QWORD *)(v16 + 56);
      v20 = *(_QWORD *)(v16 + 64);
      if (v20 >= v19)
      {
        v22 = v20 - 1;
        if (v22 <= v19)
          v21 = (_QWORD *)(*(_QWORD *)(v16 + 40) + 8 * (v22 % v19));
        else
          v21 = *(_QWORD **)(v16 + 48);
      }
      else
      {
        v21 = (_QWORD *)(*(_QWORD *)(v16 + 32) - 8);
      }
      *(_QWORD *)(v16 + 160) = *v21;
      *(_BYTE *)(v16 + 168) = 1;
    }
    v74 = 1.0;
    v23 = sub_2233DB7C4(v17, v18, (float *)(v16 + 160), &v74);
    if (v23 == 0.0
      || (*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && fabs(v23) <= v74 * 2.22044605e-16)
    {
      v24 = a5 + 64;
      v25 = 5;
      v26 = 5;
    }
    else
    {
      v24 = a5 + 64;
      v26 = 3;
      if (v23 <= 0.0)
        v25 = 1;
      else
        v25 = 2;
    }
    v27 = *(_QWORD **)a4;
    v28 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    v29 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    v30 = *(_QWORD *)(v24 + 16);
    *(_QWORD *)&v80[12] = *(_QWORD *)(v24 + 52);
    *(_DWORD *)&v80[20] = *(_DWORD *)(v24 + 60);
    *(_QWORD *)&v77[12] = *(_QWORD *)(v24 + 64);
    *(_DWORD *)&v77[20] = *(_DWORD *)(v24 + 72);
    if (v28 == v29)
      v31 = 0;
    else
      v31 = 25 * ((v28 - v29) >> 3) - 1;
    v32 = v27[5] + v27[4];
    if (v31 == v32)
    {
      sub_223408E68((uint64_t)v27);
      v29 = v27[1];
      v32 = v27[5] + v27[4];
    }
    v33 = *(_QWORD *)(v29 + 8 * (v32 / 0x19)) + 160 * (v32 % 0x19);
    *(_OWORD *)(v33 + 12) = v81;
    v34 = v79;
    *(_OWORD *)(v33 + 36) = v78;
    *(_OWORD *)(v33 + 52) = v34;
    *(_OWORD *)(v33 + 68) = *(_OWORD *)v80;
    *(_OWORD *)(v33 + 132) = *(_OWORD *)v77;
    v35 = v75;
    *(_OWORD *)(v33 + 116) = v76;
    *(_QWORD *)v33 = v30;
    *(_DWORD *)(v33 + 8) = 5;
    *(_DWORD *)(v33 + 28) = v82;
    *(_DWORD *)(v33 + 32) = v25;
    *(_QWORD *)(v33 + 84) = *(_QWORD *)&v80[16];
    *(_DWORD *)(v33 + 92) = v9;
    *(_DWORD *)(v33 + 96) = v26;
    *(_QWORD *)(v33 + 148) = *(_QWORD *)&v77[16];
    *(_OWORD *)(v33 + 100) = v35;
    *(_DWORD *)(v33 + 156) = v13;
    ++v27[5];
  }
  if (v14 == 1)
  {
    v36 = *(_QWORD *)(a6 + 16);
    v37 = *(float **)(v36 + 16);
    v38 = *(float **)(v36 + 24);
    if (!*(_BYTE *)(v36 + 168))
    {
      sub_223406FA4(v36, *(float **)(v36 + 24), v36 + 32);
      v39 = *(_QWORD *)(v36 + 56);
      v40 = *(_QWORD *)(v36 + 64);
      if (v40 >= v39)
      {
        v56 = v40 - 1;
        if (v56 <= v39)
          v41 = (_QWORD *)(*(_QWORD *)(v36 + 40) + 8 * (v56 % v39));
        else
          v41 = *(_QWORD **)(v36 + 48);
      }
      else
      {
        v41 = (_QWORD *)(*(_QWORD *)(v36 + 32) - 8);
      }
      *(_QWORD *)(v36 + 160) = *v41;
      *(_BYTE *)(v36 + 168) = 1;
    }
    v74 = 1.0;
    v57 = sub_2233DB7C4(v37, v38, (float *)(v36 + 160), &v74);
    if (v57 == 0.0
      || (*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && fabs(v57) <= v74 * 2.22044605e-16)
    {
      v58 = a5 + 64;
      v59 = 5;
      v60 = 5;
    }
    else
    {
      v58 = a5 + 64;
      v60 = 3;
      if (v57 <= 0.0)
        v59 = 1;
      else
        v59 = 2;
    }
    v61 = *(_QWORD **)a4;
    v62 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    v63 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    v64 = 25 * ((v62 - v63) >> 3) - 1;
    v51 = v62 == v63;
    v65 = *(_QWORD *)(v58 + 8);
    v66 = *(_QWORD *)(v58 + 24);
    *(_DWORD *)&v80[20] = *(_DWORD *)(v58 + 32);
    *(_QWORD *)&v80[12] = v66;
    v67 = *(_QWORD *)(v58 + 36);
    *(_DWORD *)&v77[20] = *(_DWORD *)(v58 + 44);
    *(_QWORD *)&v77[12] = v67;
    if (v51)
      v68 = 0;
    else
      v68 = v64;
    v69 = v61[5] + v61[4];
    if (v68 == v69)
    {
      sub_223408E68((uint64_t)v61);
      v63 = v61[1];
      v69 = v61[5] + v61[4];
    }
    v70 = *(_QWORD *)(v63 + 8 * (v69 / 0x19)) + 160 * (v69 % 0x19);
    *(_OWORD *)(v70 + 12) = v81;
    v71 = v79;
    *(_OWORD *)(v70 + 36) = v78;
    *(_QWORD *)v70 = v65;
    *(_DWORD *)(v70 + 8) = 5;
    *(_DWORD *)(v70 + 28) = v82;
    *(_DWORD *)(v70 + 32) = v60;
    *(_OWORD *)(v70 + 52) = v71;
    *(_OWORD *)(v70 + 68) = *(_OWORD *)v80;
    *(_QWORD *)(v70 + 84) = *(_QWORD *)&v80[16];
    *(_DWORD *)(v70 + 92) = v9;
    *(_DWORD *)(v70 + 96) = v59;
    *(_QWORD *)(v70 + 148) = *(_QWORD *)&v77[16];
    *(_OWORD *)(v70 + 132) = *(_OWORD *)v77;
    v72 = v75;
    *(_OWORD *)(v70 + 116) = v76;
    *(_OWORD *)(v70 + 100) = v72;
    *(_DWORD *)(v70 + 156) = v13;
    ++v61[5];
  }
  else if (!v15 && v14 == -1 || v15 == -1 && !v14)
  {
    v43 = *(_QWORD *)(a5 + 64);
    v42 = (unint64_t *)(a5 + 64);
    if (v43)
    {
      v44 = 0;
      v45 = 1;
      do
      {
        v49 = *(_QWORD **)a4;
        v50 = *(_QWORD *)(*(_QWORD *)a4 + 8);
        v51 = *(_QWORD *)(*(_QWORD *)a4 + 16) == v50;
        v52 = 25 * ((*(_QWORD *)(*(_QWORD *)a4 + 16) - v50) >> 3) - 1;
        v53 = v42[v44 + 1];
        v54 = (char *)v42 + 28 * v44;
        *(_QWORD *)&v80[12] = *((_QWORD *)v54 + 3);
        *(_DWORD *)&v80[20] = *((_DWORD *)v54 + 8);
        *(_QWORD *)&v77[12] = *(_QWORD *)(v54 + 36);
        *(_DWORD *)&v77[20] = *((_DWORD *)v54 + 11);
        if (v51)
          v52 = 0;
        v55 = v49[5] + v49[4];
        if (v52 == v55)
        {
          sub_223408E68((uint64_t)v49);
          v50 = v49[1];
          v55 = v49[5] + v49[4];
        }
        v46 = *(_QWORD *)(v50 + 8 * (v55 / 0x19)) + 160 * (v55 % 0x19);
        *(_OWORD *)(v46 + 12) = v81;
        v47 = v79;
        *(_OWORD *)(v46 + 36) = v78;
        *(_OWORD *)(v46 + 52) = v47;
        *(_OWORD *)(v46 + 68) = *(_OWORD *)v80;
        *(_OWORD *)(v46 + 132) = *(_OWORD *)v77;
        v48 = v75;
        *(_OWORD *)(v46 + 116) = v76;
        *(_QWORD *)v46 = v53;
        *(_DWORD *)(v46 + 8) = 5;
        *(_DWORD *)(v46 + 28) = v82;
        *(_DWORD *)(v46 + 32) = 5;
        *(_QWORD *)(v46 + 84) = *(_QWORD *)&v80[16];
        *(_DWORD *)(v46 + 92) = v9;
        *(_DWORD *)(v46 + 96) = 5;
        *(_QWORD *)(v46 + 148) = *(_QWORD *)&v77[16];
        *(_OWORD *)(v46 + 100) = v48;
        *(_DWORD *)(v46 + 156) = v13;
        ++v49[5];
        v44 = v45++;
      }
      while (*v42 > v44);
    }
  }
}

void sub_2234061FC(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  double v44;
  int v45;
  BOOL v46;
  int v47;
  double v48;

  v8 = a4[11];
  v9 = a4[18];
  if (vabds_f32(v8, v9) >= 50.0)
  {
    v13 = v8 < v9;
  }
  else
  {
    v10 = a4[9] / a4[10];
    v11 = a4[17];
    v12 = a4[16] / v11;
    if (v10 == v12)
    {
      v13 = 0;
    }
    else if (COERCE_UNSIGNED_INT(fabs(a4[9] / a4[10])) > 0x7F7FFFFF || COERCE_INT(fabs(a4[16] / v11)) > 2139095039)
    {
      v13 = 1;
    }
    else
    {
      v14 = vabds_f32(v10, v12);
      v15 = fabsf(v10);
      v16 = fabsf(v12);
      if (v15 < v16)
        v15 = v16;
      if (v15 >= 1.0)
        v17 = v15 * 0.00000011921;
      else
        v17 = 0.00000011921;
      v13 = v14 > v17;
    }
    if (v10 >= v12)
      v13 = 0;
  }
  *(_DWORD *)(a3 + 8) = 6;
  *(_QWORD *)a3 = *(_QWORD *)&a4[2 * v13 + 2];
  v18 = &a4[7 * v13];
  v19 = *((_QWORD *)v18 + 3);
  *(float *)(a3 + 88) = v18[8];
  *(_QWORD *)(a3 + 80) = v19;
  v20 = *(_QWORD *)(v18 + 9);
  *(float *)(a3 + 152) = v18[11];
  *(_QWORD *)(a3 + 144) = v20;
  v21 = sub_223409408(a6);
  v22 = *(_QWORD *)(a6 + 8);
  v23 = *(float **)(v22 + 16);
  v24 = *(float **)(v22 + 24);
  if (!*(_BYTE *)(v22 + 168))
  {
    sub_223406FA4(*(_QWORD *)(a6 + 8), *(float **)(v22 + 24), v22 + 32);
    v25 = *(_QWORD *)(v22 + 56);
    v26 = *(_QWORD *)(v22 + 64);
    if (v26 >= v25)
    {
      v28 = v26 - 1;
      if (v28 <= v25)
        v27 = (_QWORD *)(*(_QWORD *)(v22 + 40) + 8 * (v28 % v25));
      else
        v27 = *(_QWORD **)(v22 + 48);
    }
    else
    {
      v27 = (_QWORD *)(*(_QWORD *)(v22 + 32) - 8);
    }
    *(_QWORD *)(v22 + 160) = *v27;
    *(_BYTE *)(v22 + 168) = 1;
  }
  v48 = 1.0;
  v29 = sub_2233DB7C4(v23, v24, (float *)(v22 + 160), &v48);
  if (v29 == 0.0)
  {
LABEL_24:
    v30 = 0;
    v31 = *(_QWORD *)(a6 + 8);
    v32 = *(_QWORD *)(a6 + 16);
    v34 = *(float **)(v31 + 16);
    v33 = *(float **)(v31 + 24);
    if (*(_BYTE *)(v32 + 168))
      goto LABEL_43;
    goto LABEL_32;
  }
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v35 = fabs(v29);
    if (v29 > 0.0)
      v30 = 1;
    else
      v30 = -1;
    if (v35 > v48 * 2.22044605e-16)
    {
      v36 = *(_QWORD *)(a6 + 8);
      v32 = *(_QWORD *)(a6 + 16);
      v34 = *(float **)(v36 + 16);
      v33 = *(float **)(v36 + 24);
      if (*(_BYTE *)(v32 + 168))
        goto LABEL_43;
      goto LABEL_32;
    }
    goto LABEL_24;
  }
  if (v29 > 0.0)
    v30 = 1;
  else
    v30 = -1;
  v40 = *(_QWORD *)(a6 + 8);
  v32 = *(_QWORD *)(a6 + 16);
  v34 = *(float **)(v40 + 16);
  v33 = *(float **)(v40 + 24);
  if (!*(_BYTE *)(v32 + 168))
  {
LABEL_32:
    sub_223406FA4(v32, *(float **)(v32 + 24), v32 + 32);
    v37 = *(_QWORD *)(v32 + 56);
    v38 = *(_QWORD *)(v32 + 64);
    if (v38 >= v37)
    {
      v41 = v38 - 1;
      if (v41 <= v37)
        v39 = (_QWORD *)(*(_QWORD *)(v32 + 40) + 8 * (v41 % v37));
      else
        v39 = *(_QWORD **)(v32 + 48);
    }
    else
    {
      v39 = (_QWORD *)(*(_QWORD *)(v32 + 32) - 8);
    }
    *(_QWORD *)(v32 + 160) = *v39;
    *(_BYTE *)(v32 + 168) = 1;
  }
LABEL_43:
  v48 = 1.0;
  v42 = sub_2233DB7C4(v34, v33, (float *)(v32 + 160), &v48);
  if (v42 == 0.0)
  {
LABEL_44:
    v43 = 0;
    goto LABEL_54;
  }
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v44 = fabs(v42);
    if (v42 > 0.0)
      v43 = 1;
    else
      v43 = -1;
    if (v44 > v48 * 2.22044605e-16)
      goto LABEL_54;
    goto LABEL_44;
  }
  if (v42 > 0.0)
    v43 = 1;
  else
    v43 = -1;
LABEL_54:
  if (v21 || v30 != v43)
  {
    if (v43 * v30 == -1)
      v46 = v30 == -1;
    else
      v46 = v21 == -1;
    if (v46)
      v47 = 2;
    else
      v47 = 1;
    *(_DWORD *)(a3 + 32) = v47;
    if (v46)
      v45 = 1;
    else
      v45 = 2;
  }
  else
  {
    v45 = 4;
    *(_DWORD *)(a3 + 32) = 4;
  }
  *(_DWORD *)(a3 + 96) = v45;
}

double sub_223406564@<D0>(float *a1@<X0>, float **a2@<X1>, float **a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  double result;
  __int128 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _BOOL4 v43;
  char v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double v55;
  float v57;
  float v58;
  float v59;
  float v60;
  float v62;
  float v63;
  float v64;
  float v65;
  float v67;
  float v68;
  float v69;
  float v70;
  float v72;
  float v73;
  float v74;
  float v75;
  float v77;
  float v78;
  float v79;
  float v80;
  float v82;
  float v83;
  float v84;
  float v85;
  double v86;
  int v87;
  int v88;
  double v89;
  int v90;
  double v91;
  double v92;
  int v93;
  double v94;
  double v95;
  int v96;
  double v97;
  __int128 v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  float **v114;
  __int16 v115;
  float v116;
  float v117;
  __int16 v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float **v125;
  float *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  _OWORD v130[3];
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v10 = *(float **)(a4 + 16);
  v11 = *(float **)(a4 + 24);
  v12 = *(float **)(a5 + 16);
  v13 = *(float **)(a5 + 24);
  v14 = *v10;
  v15 = *v11;
  if (*v10 != *v11)
  {
    if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_22;
    v21 = vabds_f32(v14, v15);
    v22 = fabsf(v14);
    v23 = fabsf(v15);
    if (v22 < v23)
      v22 = v23;
    v24 = v22 >= 1.0 ? v22 * 0.00000011921 : 0.00000011921;
    if (v21 > v24)
      goto LABEL_22;
  }
  v16 = v10[1];
  v17 = v11[1];
  if (v16 == v17)
    goto LABEL_3;
  if ((LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v17) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_22;
  v25 = vabds_f32(v16, v17);
  v26 = fabsf(v16);
  v27 = fabsf(v17);
  if (v26 < v27)
    v26 = v27;
  v28 = v26 >= 1.0 ? v26 * 0.00000011921 : 0.00000011921;
  if (v25 <= v28)
  {
LABEL_3:
    v18 = 1;
    v19 = *v12;
    v20 = *v13;
    if (*v12 == *v13)
      goto LABEL_23;
  }
  else
  {
LABEL_22:
    v18 = 0;
    v19 = *v12;
    v20 = *v13;
    if (*v12 == *v13)
      goto LABEL_23;
  }
  if ((LODWORD(v19) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v20) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_49;
  v35 = vabds_f32(v19, v20);
  v36 = fabsf(v19);
  v37 = fabsf(v20);
  if (v36 < v37)
    v36 = v37;
  v38 = v36 >= 1.0 ? v36 * 0.00000011921 : 0.00000011921;
  if (v35 > v38)
    goto LABEL_49;
LABEL_23:
  v29 = v12[1];
  v30 = v13[1];
  if (v29 == v30)
  {
    if (v18)
      goto LABEL_25;
    v43 = 1;
    goto LABEL_51;
  }
  if ((LODWORD(v29) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
LABEL_49:
    v43 = 0;
    goto LABEL_51;
  }
  v39 = vabds_f32(v29, v30);
  v40 = fabsf(v29);
  v41 = fabsf(v30);
  if (v40 < v41)
    v40 = v41;
  if (v40 >= 1.0)
    v42 = v40 * 0.00000011921;
  else
    v42 = 0.00000011921;
  v43 = v39 <= v42;
  if (v39 <= v42)
    v44 = v18;
  else
    v44 = 0;
  if ((v44 & 1) != 0)
  {
LABEL_25:
    if (v14 == v20)
      goto LABEL_149;
    if ((LODWORD(v14) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v72 = vabds_f32(v14, v20);
      v73 = fabsf(v14);
      v74 = fabsf(v20);
      if (v73 < v74)
        v73 = v74;
      v75 = v73 >= 1.0 ? v73 * 0.00000011921 : 0.00000011921;
      if (v72 <= v75)
      {
LABEL_149:
        v31 = v10[1];
        if (v31 == v30)
          goto LABEL_27;
        if ((LODWORD(v31) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v30) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v82 = vabds_f32(v31, v30);
          v83 = fabsf(v31);
          v84 = fabsf(v30);
          if (v83 < v84)
            v83 = v84;
          v85 = v83 >= 1.0 ? v83 * 0.00000011921 : 0.00000011921;
          if (v82 <= v85)
          {
LABEL_27:
            v32 = *a2;
            memset((char *)v130 + 2, 0, 40);
            *(_QWORD *)a6 = 1;
            *(_QWORD *)(a6 + 8) = *(_QWORD *)v32;
            *(_OWORD *)(a6 + 24) = xmmword_2245F4CF0;
            *(_QWORD *)(a6 + 40) = 1065353216;
            *(_BYTE *)(a6 + 48) = 0;
            *(_OWORD *)(a6 + 52) = xmmword_2245F4CF0;
            *(_QWORD *)(a6 + 68) = 1065353216;
            *(_BYTE *)(a6 + 76) = 0;
            *(_WORD *)(a6 + 80) = 48;
            *(_OWORD *)(a6 + 108) = *(_OWORD *)((char *)&v130[1] + 10);
            result = *(double *)&v130[1];
            v34 = v130[0];
            *(_OWORD *)(a6 + 98) = v130[1];
            *(_OWORD *)(a6 + 82) = v34;
            return result;
          }
        }
      }
    }
    goto LABEL_196;
  }
LABEL_51:
  if (v14 <= v15)
    v45 = *v10;
  else
    v45 = *v11;
  if (v14 > v15)
    v15 = *v10;
  if (v19 <= v20)
    v46 = v19;
  else
    v46 = v20;
  if (v19 <= v20)
    v47 = v20;
  else
    v47 = v19;
  if (v15 < v46)
  {
    if ((LODWORD(v46) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_196;
    v57 = vabds_f32(v46, v15);
    v58 = fabsf(v46);
    v59 = fabsf(v15);
    if (v58 >= v59)
      v59 = v58;
    v60 = v59 >= 1.0 ? v59 * 0.00000011921 : 0.00000011921;
    if (v57 > v60)
      goto LABEL_196;
  }
  if (v47 < v45)
  {
    if ((LODWORD(v45) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v47) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_196;
    v62 = vabds_f32(v45, v47);
    v63 = fabsf(v45);
    v64 = fabsf(v47);
    if (v63 >= v64)
      v64 = v63;
    v65 = v64 >= 1.0 ? v64 * 0.00000011921 : 0.00000011921;
    if (v62 > v65)
      goto LABEL_196;
  }
  v48 = v10[1];
  v49 = v11[1];
  v50 = v12[1];
  v51 = v13[1];
  if (v48 <= v49)
    v52 = v10[1];
  else
    v52 = v11[1];
  if (v48 > v49)
    v49 = v10[1];
  v53 = v50 <= v51 ? v12[1] : v13[1];
  v54 = v50 <= v51 ? v13[1] : v12[1];
  if (v49 < v53)
  {
    if ((LODWORD(v53) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v49) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_196;
    v67 = vabds_f32(v53, v49);
    v68 = fabsf(v53);
    v69 = fabsf(v49);
    if (v68 >= v69)
      v69 = v68;
    v70 = v69 >= 1.0 ? v69 * 0.00000011921 : 0.00000011921;
    if (v67 > v70)
      goto LABEL_196;
  }
  if (v54 < v52)
  {
    if ((LODWORD(v52) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v54) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_196;
    v77 = vabds_f32(v52, v54);
    v78 = fabsf(v52);
    v79 = fabsf(v54);
    if (v78 < v79)
      v78 = v79;
    v80 = v78 >= 1.0 ? v78 * 0.00000011921 : 0.00000011921;
    if (v77 > v80)
      goto LABEL_196;
  }
  v129 = 0;
  *(_QWORD *)&v130[0] = 0x3FF0000000000000;
  v55 = sub_2233DB7C4(v12, v13, v10, (double *)v130);
  v126 = a1;
  if (v55 == 0.0)
    goto LABEL_78;
  if ((*(_QWORD *)&v55 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v55 > 0.0)
      v88 = 1;
    else
      v88 = -1;
    v127 = v88;
  }
  else
  {
    v86 = fabs(v55);
    if (v55 > 0.0)
      v87 = 1;
    else
      v87 = -1;
    v127 = v87;
    if (v86 <= *(double *)v130 * 2.22044605e-16)
LABEL_78:
      v127 = 0;
  }
  *(_QWORD *)&v130[0] = 0x3FF0000000000000;
  v89 = sub_2233DB7C4(v12, v13, v11, (double *)v130);
  if (v89 == 0.0)
  {
LABEL_162:
    v90 = 0;
    goto LABEL_172;
  }
  if ((*(_QWORD *)&v89 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v89 > 0.0)
      v90 = 1;
    else
      v90 = -1;
  }
  else
  {
    v91 = fabs(v89);
    if (v89 > 0.0)
      v90 = 1;
    else
      v90 = -1;
    if (v91 <= *(double *)v130 * 2.22044605e-16)
      goto LABEL_162;
  }
LABEL_172:
  v128 = __PAIR64__(v90, v127);
  if (v90 * v127 == 1)
  {
LABEL_196:
    memset((char *)v130 + 2, 0, 40);
    *(_QWORD *)a6 = 0;
    *(_OWORD *)(a6 + 24) = xmmword_2245F4CF0;
    *(_QWORD *)(a6 + 40) = 1065353216;
    *(_BYTE *)(a6 + 48) = 0;
    *(_OWORD *)(a6 + 52) = xmmword_2245F4CF0;
    *(_QWORD *)(a6 + 68) = 1065353216;
    *(_BYTE *)(a6 + 76) = 0;
    *(_WORD *)(a6 + 80) = 100;
    v98 = v130[1];
    *(_OWORD *)(a6 + 82) = v130[0];
    *(_OWORD *)(a6 + 98) = v98;
    result = *(double *)((char *)&v130[1] + 10);
    *(_OWORD *)(a6 + 108) = *(_OWORD *)((char *)&v130[1] + 10);
    return result;
  }
  v125 = a3;
  *(_QWORD *)&v130[0] = 0x3FF0000000000000;
  v92 = sub_2233DB7C4(v10, v11, v12, (double *)v130);
  if (v92 == 0.0)
    goto LABEL_174;
  if ((*(_QWORD *)&v92 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v92 > 0.0)
      v93 = 1;
    else
      v93 = -1;
  }
  else
  {
    v94 = fabs(v92);
    if (v92 > 0.0)
      v93 = 1;
    else
      v93 = -1;
    if (v94 <= *(double *)v130 * 2.22044605e-16)
LABEL_174:
      v93 = 0;
  }
  *(_QWORD *)&v130[0] = 0x3FF0000000000000;
  v95 = sub_2233DB7C4(v10, v11, v13, (double *)v130);
  if (v95 == 0.0)
  {
LABEL_185:
    v96 = 0;
    goto LABEL_195;
  }
  if ((*(_QWORD *)&v95 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v95 > 0.0)
      v96 = 1;
    else
      v96 = -1;
  }
  else
  {
    v97 = fabs(v95);
    if (v95 > 0.0)
      v96 = 1;
    else
      v96 = -1;
    if (v97 <= *(double *)v130 * 2.22044605e-16)
      goto LABEL_185;
  }
LABEL_195:
  v129 = __PAIR64__(v96, v93);
  if (v96 * v93 == 1)
    goto LABEL_196;
  v100 = *v10;
  v99 = v10[1];
  v101 = *v11 - *v10;
  v103 = *v12;
  v102 = v12[1];
  v104 = *v13 - *v12;
  v105 = v11[1] - v99;
  v106 = v13[1] - v102;
  if (v90 | v127 | v93 | v96)
  {
    v107 = (float)(v101 * v106) - (float)(v104 * v105);
    v108 = fabsf(v101);
    v109 = fabsf(v105);
    v110 = fabsf(v104);
    v111 = fabsf(v106);
    if (v108 >= v109)
      v112 = v108;
    else
      v112 = v109;
    if (v112 < v110)
      v112 = v110;
    if (v112 < v111)
      v112 = v111;
    if (v112 < 1.0)
      v112 = 1.0;
    v114 = v125;
    v113 = (uint64_t)v126;
    if (v107 == 0.0)
      goto LABEL_208;
    v119 = (float)(v104 * v105) - (float)(v101 * v106);
    if (COERCE_UNSIGNED_INT(fabs((float)(v101 * v106) - (float)(v104 * v105))) > 0x7F7FFFFF)
    {
      if (v119 == 0.0)
        goto LABEL_208;
    }
    else if (v119 == 0.0 || fabsf(v107) <= (float)(v112 * 0.00000011921))
    {
      goto LABEL_208;
    }
    if (COERCE_UNSIGNED_INT(fabs((float)(v104 * v105) - (float)(v101 * v106))) > 0x7F7FFFFF
      || fabsf(v119) > (float)(v112 * 0.00000011921))
    {
      v120 = (float)(v104 * (float)(v99 - v102)) - (float)((float)(v100 - v103) * v106);
      v121 = v101 * (float)(v102 - v99);
      v122 = (float)(v103 - v100) * v105;
      v126[4] = v120;
      v126[5] = v107;
      if (v107 >= 0.0)
      {
        v123 = v121 - v122;
        if (v107 != 0.0)
        {
LABEL_239:
          v126[6] = (float)(v120 * 1000000.0) / v107;
          v126[7] = v123;
          v126[8] = v119;
          if (v119 >= 0.0)
            goto LABEL_240;
          goto LABEL_244;
        }
      }
      else
      {
        v120 = -v120;
        v107 = -v107;
        v126[4] = v120;
        v126[5] = v107;
        v123 = v121 - v122;
        if (v107 != 0.0)
          goto LABEL_239;
      }
      v126[6] = 0.0;
      v126[7] = v123;
      v126[8] = v119;
      if (v119 >= 0.0)
      {
LABEL_240:
        v124 = 0.0;
        if (v119 == 0.0)
        {
LABEL_241:
          v126[9] = v124;
LABEL_226:
          *(_QWORD *)&result = sub_2234078B0((int *)&v128, v113, a2, v114, a6).n128_u64[0];
          return result;
        }
LABEL_245:
        v124 = (float)(v123 * 1000000.0) / v119;
        goto LABEL_241;
      }
LABEL_244:
      v123 = -v123;
      v119 = -v119;
      v126[7] = v123;
      v126[8] = v119;
      v124 = 0.0;
      if (v119 == 0.0)
        goto LABEL_241;
      goto LABEL_245;
    }
LABEL_208:
    v128 = 0;
    v129 = 0;
    goto LABEL_210;
  }
  v108 = fabsf(v101);
  v109 = fabsf(v105);
  v110 = fabsf(v104);
  v111 = fabsf(v106);
  v114 = v125;
  v113 = (uint64_t)v126;
LABEL_210:
  if (v18)
  {
    v115 = (v110 >= v111) | 0x100;
  }
  else
  {
    if (v110 >= v108)
      v116 = v108;
    else
      v116 = v110;
    if (v111 >= v109)
      v117 = v109;
    else
      v117 = v111;
    v115 = (v116 > v117) | 0x100;
    if (v116 <= 0.0)
      v118 = 1;
    else
      v118 = 257;
    if (v116 == v117)
      v115 = v118;
    if (v43)
      v115 = (v108 >= v109) | 0x100;
  }
  if ((v115 & 0x100) == 0)
    goto LABEL_226;
  if ((v115 & 1) != 0)
    *(_QWORD *)&result = sub_2234071F8((uint64_t **)a2, (uint64_t **)v114, v10, v11, v12, v13, v18, v43, a6).n128_u64[0];
  else
    *(_QWORD *)&result = sub_223407554((uint64_t **)a2, (uint64_t **)v114, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v18, v43, a6).n128_u64[0];
  return result;
}

float sub_223406FA4(uint64_t a1, float *a2, uint64_t a3)
{
  float result;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  _OWORD *v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v4 = *a2;
  result = a2[1];
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(a3 + 32);
  if (v7 >= v6)
  {
    if (v7 - 1 <= v6)
      v8 = v5 + 8 * ((v7 - 1) % v6);
    else
      v8 = *(_QWORD *)(a3 + 16);
  }
  else
  {
    v8 = *(_QWORD *)a3 - 8;
  }
  v9 = 0;
  v10 = fabsf(v4);
  v11 = fabsf(result);
  v12 = *(_QWORD *)(a3 + 112);
  v13 = (_OWORD *)(a3 + 40);
  v14 = *(unsigned __int8 *)(a3 + 120);
  while (1)
  {
    v16 = *(float *)v8;
    v15 = *(float *)(v8 + 4);
    if (v4 != *(float *)v8)
    {
      if ((LODWORD(v4) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v16) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        return result;
      v17 = vabds_f32(v4, v16);
      v18 = fabsf(v16);
      if (v10 >= v18)
        v18 = v10;
      v19 = v18 >= 1.0 ? v18 * 0.00000011921 : 0.00000011921;
      if (v17 > v19)
        return result;
    }
    if (result != v15)
    {
      if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000 || (LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        return result;
      v20 = vabds_f32(result, v15);
      v21 = fabsf(v15);
      if (v11 >= v21)
        v21 = v11;
      v22 = v21 >= 1.0 ? v21 * 0.00000011921 : 0.00000011921;
      if (v20 > v22)
        return result;
    }
    if (v9 >= *(_QWORD *)(*(_QWORD *)a1 + 72))
      return result;
    v23 = v7 - 1;
    *(_QWORD *)(a3 + 32) = v7 - 1;
    if (v7 >= v6)
    {
      if (v23 <= v6)
      {
        *(_QWORD *)a3 = v5 + 8 * (v23 % v6);
        if (v23 != v12)
          goto LABEL_45;
      }
      else
      {
        *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
        if (v23 != v12)
          goto LABEL_45;
      }
    }
    else
    {
      *(_QWORD *)a3 -= 8;
      if (v23 != v12)
        goto LABEL_45;
    }
    v24 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)a3 = *v13;
    *(_OWORD *)(a3 + 16) = v24;
    v25 = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 32) = v25;
    v6 = *(_QWORD *)(a3 + 24);
    if (!v14)
    {
      v23 = v25;
      goto LABEL_45;
    }
    v23 = v25 - 1;
    *(_QWORD *)(a3 + 32) = v25 - 1;
    if (v25 >= v6)
    {
      if (v23 <= v6)
      {
        *(_QWORD *)a3 = *(_QWORD *)(a3 + 8) + 8 * (v23 % v6);
        if (v25 != v7)
          goto LABEL_45;
LABEL_44:
        v26 = *(_OWORD *)(a3 + 56);
        *(_OWORD *)a3 = *v13;
        *(_OWORD *)(a3 + 16) = v26;
        v23 = *(_QWORD *)(a3 + 72);
        *(_QWORD *)(a3 + 32) = v23;
        v6 = *(_QWORD *)(a3 + 24);
        goto LABEL_45;
      }
      *(_QWORD *)a3 = *(_QWORD *)(a3 + 16);
      if (v25 == v7)
        goto LABEL_44;
    }
    else
    {
      *(_QWORD *)a3 -= 8;
      if (v25 == v7)
        goto LABEL_44;
    }
LABEL_45:
    v5 = *(_QWORD *)(a3 + 8);
    if (v23 < v6)
    {
      v8 = *(_QWORD *)a3 - 8;
    }
    else if (v23 - 1 <= v6)
    {
      v8 = v5 + 8 * ((v23 - 1) % v6);
    }
    else
    {
      v8 = *(_QWORD *)(a3 + 16);
    }
    ++v9;
    v7 = v23;
  }
}

__n128 sub_2234071F8@<Q0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, float *a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;
  __n128 result;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  uint64_t v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[42];

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_223407AB4(a1, a2, a9, *a3, *a4, *a5, *a6);
      return result;
    }
    v13 = *a5 - *a3;
    v14 = *a4 - *a3;
    if (v14 < 0.0)
    {
      v13 = -v13;
      v14 = -v14;
    }
    v15 = 0.0;
    if (v14 == 0.0)
    {
      if (v13 < 0.0 || v13 > v14)
        goto LABEL_33;
    }
    else
    {
      v15 = (float)(v13 * 1000000.0) / v14;
      if (v13 < 0.0 || v13 > v14)
        goto LABEL_33;
    }
    v23 = **a2;
    v24 = atomic_load((unsigned __int8 *)&qword_25578BB68);
    if ((v24 & 1) == 0)
    {
      v37 = a9;
      v29 = v13;
      v31 = v15;
      v35 = v14;
      v33 = **a2;
      v27 = __cxa_guard_acquire(&qword_25578BB68);
      v23 = v33;
      v13 = v29;
      v15 = v31;
      v14 = v35;
      a9 = v37;
      if (v27)
      {
        qword_25578BB5C = 0x3F80000000000000;
        dword_25578BB64 = 0;
        __cxa_guard_release(&qword_25578BB68);
        v23 = v33;
        v13 = v29;
        v15 = v31;
        v14 = v35;
        a9 = v37;
      }
    }
    v25 = dword_25578BB64;
    memset(&v38[2], 0, 40);
    *(_QWORD *)a9 = 1;
    *(_QWORD *)(a9 + 8) = v23;
    *(float *)(a9 + 24) = v13;
    *(float *)(a9 + 28) = v14;
    *(float *)(a9 + 32) = v15;
    *(_QWORD *)(a9 + 36) = qword_25578BB5C;
    *(_DWORD *)(a9 + 44) = v25;
    goto LABEL_36;
  }
  v9 = *a6 - *a5;
  v10 = -(float)(*a3 - *a5);
  if (v9 >= 0.0)
    v10 = *a3 - *a5;
  else
    v9 = -v9;
  v11 = 0.0;
  if (v9 == 0.0)
  {
    if (v10 >= 0.0 && v10 <= v9)
      goto LABEL_26;
LABEL_33:
    memset(&v38[2], 0, 32);
    *(_QWORD *)a9 = 0;
    *(_OWORD *)(a9 + 24) = xmmword_2245F4CF0;
    *(_QWORD *)(a9 + 40) = 1065353216;
    *(_BYTE *)(a9 + 48) = 0;
    *(_OWORD *)(a9 + 52) = xmmword_2245F4CF0;
    *(_QWORD *)(a9 + 68) = 1065353216;
    *(_BYTE *)(a9 + 76) = 0;
    *(_WORD *)(a9 + 80) = 100;
    *(_OWORD *)(a9 + 82) = *(_OWORD *)v38;
    *(_OWORD *)(a9 + 98) = *(_OWORD *)&v38[16];
    result = 0uLL;
    *(_OWORD *)(a9 + 108) = 0uLL;
    return result;
  }
  v11 = (float)(v10 * 1000000.0) / v9;
  if (v10 < 0.0 || v10 > v9)
    goto LABEL_33;
LABEL_26:
  v19 = **a1;
  v20 = atomic_load((unsigned __int8 *)&qword_25578BB68);
  if ((v20 & 1) == 0)
  {
    v36 = a9;
    v28 = v9;
    v30 = v11;
    v32 = v10;
    v34 = **a1;
    v26 = __cxa_guard_acquire(&qword_25578BB68);
    v19 = v34;
    v11 = v30;
    v10 = v32;
    v9 = v28;
    a9 = v36;
    if (v26)
    {
      qword_25578BB5C = 0x3F80000000000000;
      dword_25578BB64 = 0;
      __cxa_guard_release(&qword_25578BB68);
      v19 = v34;
      v11 = v30;
      v10 = v32;
      v9 = v28;
      a9 = v36;
    }
  }
  v21 = dword_25578BB64;
  memset(&v38[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_QWORD *)(a9 + 8) = v19;
  *(_QWORD *)(a9 + 24) = qword_25578BB5C;
  *(_DWORD *)(a9 + 32) = v21;
  *(float *)(a9 + 36) = v10;
  *(float *)(a9 + 40) = v9;
  *(float *)(a9 + 44) = v11;
LABEL_36:
  *(_BYTE *)(a9 + 48) = 1;
  *(_OWORD *)(a9 + 52) = xmmword_2245F4CF0;
  *(_QWORD *)(a9 + 68) = 1065353216;
  *(_BYTE *)(a9 + 76) = 0;
  *(_WORD *)(a9 + 80) = 48;
  result = *(__n128 *)v38;
  *(_OWORD *)(a9 + 108) = *(_OWORD *)&v38[26];
  *(_OWORD *)(a9 + 98) = *(_OWORD *)&v38[16];
  *(_OWORD *)(a9 + 82) = *(_OWORD *)v38;
  return result;
}

__n128 sub_223407554@<Q0>(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  __n128 result;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[42];

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_223407AB4(a1, a2, a9, *(float *)(a3 + 4), *(float *)(a4 + 4), *(float *)(a5 + 4), *(float *)(a6 + 4));
      return result;
    }
    v15 = *(float *)(a3 + 4);
    v16 = *(float *)(a5 + 4) - v15;
    v17 = *(float *)(a4 + 4) - v15;
    if (v17 < 0.0)
    {
      v16 = -v16;
      v17 = -v17;
    }
    v18 = 0.0;
    if (v17 == 0.0)
    {
      if (v16 < 0.0 || v16 > v17)
        goto LABEL_33;
    }
    else
    {
      v18 = (float)(v16 * 1000000.0) / v17;
      if (v16 < 0.0 || v16 > v17)
        goto LABEL_33;
    }
    v26 = **a2;
    v27 = atomic_load((unsigned __int8 *)&qword_25578BB68);
    if ((v27 & 1) == 0)
    {
      v40 = a9;
      v32 = v16;
      v34 = v18;
      v38 = v17;
      v36 = **a2;
      v30 = __cxa_guard_acquire(&qword_25578BB68);
      v26 = v36;
      v16 = v32;
      v18 = v34;
      v17 = v38;
      a9 = v40;
      if (v30)
      {
        qword_25578BB5C = 0x3F80000000000000;
        dword_25578BB64 = 0;
        __cxa_guard_release(&qword_25578BB68);
        v26 = v36;
        v16 = v32;
        v18 = v34;
        v17 = v38;
        a9 = v40;
      }
    }
    v28 = dword_25578BB64;
    memset(&v41[2], 0, 40);
    *(_QWORD *)a9 = 1;
    *(_QWORD *)(a9 + 8) = v26;
    *(float *)(a9 + 24) = v16;
    *(float *)(a9 + 28) = v17;
    *(float *)(a9 + 32) = v18;
    *(_QWORD *)(a9 + 36) = qword_25578BB5C;
    *(_DWORD *)(a9 + 44) = v28;
    goto LABEL_36;
  }
  v9 = *(float *)(a5 + 4);
  v10 = *(float *)(a3 + 4) - v9;
  v11 = *(float *)(a6 + 4) - v9;
  v12 = -v10;
  if (v11 >= 0.0)
    v12 = v10;
  else
    v11 = -v11;
  v13 = 0.0;
  if (v11 == 0.0)
  {
    if (v12 >= 0.0 && v12 <= v11)
      goto LABEL_26;
LABEL_33:
    memset(&v41[2], 0, 32);
    *(_QWORD *)a9 = 0;
    *(_OWORD *)(a9 + 24) = xmmword_2245F4CF0;
    *(_QWORD *)(a9 + 40) = 1065353216;
    *(_BYTE *)(a9 + 48) = 0;
    *(_OWORD *)(a9 + 52) = xmmword_2245F4CF0;
    *(_QWORD *)(a9 + 68) = 1065353216;
    *(_BYTE *)(a9 + 76) = 0;
    *(_WORD *)(a9 + 80) = 100;
    *(_OWORD *)(a9 + 82) = *(_OWORD *)v41;
    *(_OWORD *)(a9 + 98) = *(_OWORD *)&v41[16];
    result = 0uLL;
    *(_OWORD *)(a9 + 108) = 0uLL;
    return result;
  }
  v13 = (float)(v12 * 1000000.0) / v11;
  if (v12 < 0.0 || v12 > v11)
    goto LABEL_33;
LABEL_26:
  v22 = **a1;
  v23 = atomic_load((unsigned __int8 *)&qword_25578BB68);
  if ((v23 & 1) == 0)
  {
    v39 = a9;
    v31 = v11;
    v33 = v13;
    v35 = v12;
    v37 = **a1;
    v29 = __cxa_guard_acquire(&qword_25578BB68);
    v22 = v37;
    v13 = v33;
    v12 = v35;
    v11 = v31;
    a9 = v39;
    if (v29)
    {
      qword_25578BB5C = 0x3F80000000000000;
      dword_25578BB64 = 0;
      __cxa_guard_release(&qword_25578BB68);
      v22 = v37;
      v13 = v33;
      v12 = v35;
      v11 = v31;
      a9 = v39;
    }
  }
  v24 = dword_25578BB64;
  memset(&v41[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_QWORD *)(a9 + 8) = v22;
  *(_QWORD *)(a9 + 24) = qword_25578BB5C;
  *(_DWORD *)(a9 + 32) = v24;
  *(float *)(a9 + 36) = v12;
  *(float *)(a9 + 40) = v11;
  *(float *)(a9 + 44) = v13;
LABEL_36:
  *(_BYTE *)(a9 + 48) = 1;
  *(_OWORD *)(a9 + 52) = xmmword_2245F4CF0;
  *(_QWORD *)(a9 + 68) = 1065353216;
  *(_BYTE *)(a9 + 76) = 0;
  *(_WORD *)(a9 + 80) = 48;
  result = *(__n128 *)v41;
  *(_OWORD *)(a9 + 108) = *(_OWORD *)&v41[26];
  *(_OWORD *)(a9 + 98) = *(_OWORD *)&v41[16];
  *(_OWORD *)(a9 + 82) = *(_OWORD *)v41;
  return result;
}

__n128 sub_2234078B0@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, float **a3@<X2>, float **a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  __n128 result;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[25];
  _BYTE v20[25];

  *(_OWORD *)v19 = xmmword_2245F4CF0;
  *(_QWORD *)&v19[16] = 1065353216;
  v19[24] = 0;
  *(_OWORD *)v20 = xmmword_2245F4CF0;
  *(_QWORD *)&v20[16] = 1065353216;
  v20[24] = 0;
  *(_QWORD *)&v17 = 1;
  sub_223408CB4((float *)a2, (float *)&v17 + 2, a3, a4);
  v19[24] = 1;
  *(_QWORD *)v19 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)&v19[8] = *(_DWORD *)(a2 + 24);
  *(_QWORD *)&v19[12] = *(_QWORD *)(a2 + 28);
  *(_DWORD *)&v19[20] = *(_DWORD *)(a2 + 36);
  v8 = *a1;
  v9 = a1[2];
  v10 = a1[3];
  if (!(*a1 | v9))
  {
    v9 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
    if (v10 == 1)
      v13 = 1;
    else
      v13 = -1;
    v14 = 102;
    goto LABEL_23;
  }
  v11 = a1[1];
  if (!(v11 | v10))
  {
    if (v9 == 1)
      v12 = -1;
    else
      v12 = 1;
    if (v9 == 1)
      v13 = 1;
    else
      v13 = -1;
    v9 = 1;
    v14 = 116;
    v8 = 1;
    goto LABEL_41;
  }
  if (!(v11 | v9))
  {
    if (v10 == 1)
      v12 = 1;
    else
      v12 = -1;
    v8 = -1;
    v9 = 1;
    goto LABEL_39;
  }
  if (!(v8 | v10))
  {
    if (v9 == 1)
      v12 = 1;
    else
      v12 = -1;
    v8 = 1;
    v9 = -1;
LABEL_39:
    v14 = 97;
    goto LABEL_40;
  }
  if (v9)
  {
    if (v8)
    {
      if (v10)
      {
        if (v11)
        {
          v9 = -1;
          if (v10 == 1)
            v12 = -1;
          else
            v12 = 1;
          if (v10 == 1)
            v13 = 1;
          else
            v13 = -1;
          v14 = 105;
LABEL_23:
          v8 = -1;
          goto LABEL_41;
        }
        v8 = 0;
        if (v10 == 1)
          v12 = 1;
        else
          v12 = -1;
        v9 = 1;
      }
      else
      {
        v9 = 0;
        if (v11 == 1)
          v12 = 1;
        else
          v12 = -1;
        v8 = 1;
      }
      v14 = 109;
LABEL_40:
      v13 = v12;
      goto LABEL_41;
    }
    v16 = v10 == 1;
    v9 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
  }
  else
  {
    v16 = v10 == 1;
    v8 = -1;
    if (v10 == 1)
      v12 = -1;
    else
      v12 = 1;
  }
  if (v16)
    v13 = a1[3];
  else
    v13 = -1;
  v14 = 115;
LABEL_41:
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)v19;
  *(_OWORD *)(a5 + 33) = *(_OWORD *)&v19[9];
  *(_OWORD *)(a5 + 52) = *(_OWORD *)v20;
  *(_OWORD *)(a5 + 61) = *(_OWORD *)&v20[9];
  *(_BYTE *)(a5 + 80) = v14;
  *(_BYTE *)(a5 + 81) = 0;
  *(_DWORD *)(a5 + 84) = v9;
  *(_DWORD *)(a5 + 88) = v8;
  *(_DWORD *)(a5 + 92) = v12;
  *(_DWORD *)(a5 + 96) = v13;
  result = *(__n128 *)a1;
  *(_OWORD *)(a5 + 100) = *(_OWORD *)a1;
  *(_DWORD *)(a5 + 116) = v9;
  *(_DWORD *)(a5 + 120) = v8;
  return result;
}

double sub_223407AB4@<D0>(_QWORD **a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>, float a7@<S3>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  int v42;
  char *v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  char *v62;
  float *v63;
  int v70;
  int v71;
  double result;
  __int128 v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _BYTE v82[42];
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v7 = a7 - a6;
  v8 = a4 - a6;
  *(float *)&v80 = a4 - a6;
  *((float *)&v80 + 1) = a7 - a6;
  v9 = a4 - a6;
  v10 = a7 - a6;
  if ((float)(a7 - a6) < 0.0)
  {
    v9 = -v8;
    v10 = -v7;
    *(float *)&v80 = -v8;
    *((float *)&v80 + 1) = -v7;
  }
  v11 = 0.0;
  if (v10 != 0.0)
    v11 = (float)(v9 * 1000000.0) / v10;
  v81 = LODWORD(v11);
  v12 = a5 - a6;
  *(float *)&v78 = a5 - a6;
  *((float *)&v78 + 1) = a7 - a6;
  v13 = a5 - a6;
  v14 = a7 - a6;
  if (v7 < 0.0)
  {
    v14 = -v7;
    v13 = -v12;
    *(float *)&v78 = -v12;
    *((float *)&v78 + 1) = -v7;
  }
  v15 = a5 - a4;
  v16 = 0.0;
  if (v14 != 0.0)
    v16 = (float)(v13 * 1000000.0) / v14;
  v79 = LODWORD(v16);
  v17 = a6 - a4;
  *(float *)&v76 = a6 - a4;
  *((float *)&v76 + 1) = a5 - a4;
  v18 = a6 - a4;
  v19 = a5 - a4;
  if (v15 < 0.0)
  {
    v18 = -v17;
    v19 = -v15;
    *(float *)&v76 = -v17;
    *((float *)&v76 + 1) = -v15;
  }
  v20 = 0.0;
  if (v19 != 0.0)
    v20 = (float)(v18 * 1000000.0) / v19;
  v77 = v20;
  v21 = a7 - a4;
  *(float *)&v74 = a7 - a4;
  *((float *)&v74 + 1) = a5 - a4;
  v22 = a7 - a4;
  v23 = a5 - a4;
  if (v15 >= 0.0)
  {
    if (v15 != 0.0)
    {
LABEL_15:
      v75 = (float)(v22 * 1000000.0) / v23;
      if (a4 == a6)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
  else
  {
    v23 = -v15;
    v22 = -v21;
    *(float *)&v74 = -v21;
    *((float *)&v74 + 1) = -v15;
    if ((float)-v15 != 0.0)
      goto LABEL_15;
  }
  v75 = 0.0;
  if (a4 == a6)
    goto LABEL_19;
LABEL_21:
  if ((LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (a4 != a7)
      goto LABEL_37;
LABEL_45:
    v24 = 3;
    if (a5 == a6)
      goto LABEL_77;
    goto LABEL_54;
  }
  if ((LODWORD(a6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v25 = fabsf(v8);
    v26 = fabsf(a4);
    v27 = fabsf(a6);
    if (v26 < v27)
      v26 = v27;
    v28 = v26 >= 1.0 ? v26 * 0.00000011921 : 0.00000011921;
    if (v25 <= v28)
    {
LABEL_19:
      v24 = 1;
      if (a5 == a6)
        goto LABEL_77;
      goto LABEL_54;
    }
  }
  if (a4 == a7)
    goto LABEL_45;
  if ((LODWORD(a7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v29 = vabds_f32(a4, a7);
    v30 = fabsf(a4);
    v31 = fabsf(a7);
    if (v30 < v31)
      v30 = v31;
    v32 = v30 >= 1.0 ? v30 * 0.00000011921 : 0.00000011921;
    if (v29 <= v32)
      goto LABEL_45;
  }
LABEL_37:
  if (a6 < a7)
  {
    if (a4 >= a6)
    {
      if (a4 <= a7)
        v24 = 2;
      else
        v24 = 4;
      if (a5 == a6)
        goto LABEL_77;
      goto LABEL_54;
    }
LABEL_48:
    v24 = 0;
    if (a5 == a6)
      goto LABEL_77;
    goto LABEL_54;
  }
  if (a4 > a6)
    goto LABEL_48;
  if (a4 >= a7)
    v24 = 2;
  else
    v24 = 4;
  if (a5 == a6)
    goto LABEL_77;
LABEL_54:
  if ((LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (a5 != a7)
      goto LABEL_70;
LABEL_80:
    v41 = 3;
    if (a4 != a6)
      goto LABEL_90;
    goto LABEL_84;
  }
  if ((LODWORD(a6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v33 = fabsf(v12);
    v34 = fabsf(a5);
    v35 = fabsf(a6);
    if (v34 < v35)
      v34 = v35;
    v36 = v34 >= 1.0 ? v34 * 0.00000011921 : 0.00000011921;
    if (v33 <= v36)
    {
LABEL_77:
      v41 = 1;
      if (a4 != a6)
        goto LABEL_90;
      goto LABEL_84;
    }
  }
  if (a5 == a7)
    goto LABEL_80;
  if ((LODWORD(a7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v37 = vabds_f32(a5, a7);
    v38 = fabsf(a5);
    v39 = fabsf(a7);
    if (v38 < v39)
      v38 = v39;
    v40 = v38 >= 1.0 ? v38 * 0.00000011921 : 0.00000011921;
    if (v37 <= v40)
      goto LABEL_80;
  }
LABEL_70:
  if (a6 < a7)
  {
    if (a5 >= a6)
    {
      if (a5 <= a7)
        v41 = 2;
      else
        v41 = 4;
      if (a4 != a6)
        goto LABEL_90;
LABEL_84:
      v42 = 1;
      v43 = (char *)&v76 + 4;
      v44 = &v77;
      if (a7 == a4)
        goto LABEL_125;
      goto LABEL_131;
    }
LABEL_83:
    v41 = 0;
    if (a4 != a6)
      goto LABEL_90;
    goto LABEL_84;
  }
  if (a5 > a6)
    goto LABEL_83;
  if (a5 >= a7)
    v41 = 2;
  else
    v41 = 4;
  if (a4 == a6)
    goto LABEL_84;
LABEL_90:
  if ((LODWORD(a6) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (a5 != a6)
      goto LABEL_113;
    goto LABEL_120;
  }
  if ((LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (a5 == a6)
      goto LABEL_120;
  }
  else
  {
    v45 = fabsf(v17);
    v46 = fabsf(a6);
    v47 = fabsf(a4);
    if (v46 < v47)
      v46 = v47;
    if (v46 >= 1.0)
      v48 = v46 * 0.00000011921;
    else
      v48 = 0.00000011921;
    if (v45 <= v48)
      v42 = 1;
    else
      v42 = 3;
    if (a5 == a6 || v45 <= v48)
    {
LABEL_124:
      v43 = (char *)&v76 + 4;
      v44 = &v77;
      if (a7 == a4)
        goto LABEL_125;
      goto LABEL_131;
    }
  }
  if ((LODWORD(a5) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v49 = vabds_f32(a6, a5);
    v50 = fabsf(a6);
    v51 = fabsf(a5);
    if (v50 < v51)
      v50 = v51;
    v52 = v50 >= 1.0 ? v50 * 0.00000011921 : 0.00000011921;
    if (v49 <= v52)
    {
LABEL_120:
      v42 = 3;
      v43 = (char *)&v76 + 4;
      v44 = &v77;
      if (a7 == a4)
        goto LABEL_125;
      goto LABEL_131;
    }
  }
LABEL_113:
  if (a4 < a5)
  {
    if (a6 >= a4)
    {
      if (a6 <= a5)
        v42 = 2;
      else
        v42 = 4;
      v43 = (char *)&v76 + 4;
      v44 = &v77;
      if (a7 == a4)
        goto LABEL_125;
      goto LABEL_131;
    }
LABEL_123:
    v42 = 0;
    goto LABEL_124;
  }
  if (a6 > a4)
    goto LABEL_123;
  if (a6 >= a5)
    v42 = 2;
  else
    v42 = 4;
  v43 = (char *)&v76 + 4;
  v44 = &v77;
  if (a7 == a4)
    goto LABEL_125;
LABEL_131:
  if ((LODWORD(a7) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if ((LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_146;
    v54 = fabsf(v21);
    v55 = fabsf(a7);
    v56 = fabsf(a4);
    if (v55 < v56)
      v55 = v56;
    v57 = v55 >= 1.0 ? v55 * 0.00000011921 : 0.00000011921;
    if (v54 > v57)
    {
LABEL_146:
      if (a7 != a5)
      {
        if ((LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          goto LABEL_147;
        v58 = vabds_f32(a7, a5);
        v59 = fabsf(a7);
        v60 = fabsf(a5);
        if (v59 < v60)
          v59 = v60;
        v61 = v59 >= 1.0 ? v59 * 0.00000011921 : 0.00000011921;
        if (v58 > v61)
          goto LABEL_147;
      }
LABEL_155:
      v53 = 3;
      if (v24 == 3)
        goto LABEL_165;
      goto LABEL_159;
    }
LABEL_125:
    v53 = 1;
    if (v24 == 3)
      goto LABEL_165;
    goto LABEL_159;
  }
  if (a7 == a5)
    goto LABEL_155;
LABEL_147:
  if (a4 >= a5)
  {
    if (a7 <= a4)
    {
      if (a7 >= a5)
        v53 = 2;
      else
        v53 = 4;
      if (v24 == 3)
        goto LABEL_165;
      goto LABEL_159;
    }
  }
  else if (a7 >= a4)
  {
    if (a7 <= a5)
      v53 = 2;
    else
      v53 = 4;
    if (v24 == 3)
      goto LABEL_165;
    goto LABEL_159;
  }
  v53 = 0;
  if (v24 == 3)
  {
LABEL_165:
    __asm { FMOV            V0.2S, #1.0 }
    v80 = _D0;
    v81 = 1232348160;
    LODWORD(v74) = 0;
    v62 = (char *)&v74 + 4;
    v63 = &v75;
    goto LABEL_166;
  }
LABEL_159:
  if (v24 != 1)
    goto LABEL_167;
  v80 = 0x3F80000000000000;
  v81 = 0;
  LODWORD(v76) = 0;
  v62 = (char *)&v76 + 4;
  v63 = &v77;
LABEL_166:
  *(_DWORD *)v62 = 1065353216;
  *v63 = 0.0;
LABEL_167:
  if (v41 == 3)
  {
    __asm { FMOV            V0.2S, #1.0 }
    v78 = _D0;
    v79 = 1232348160;
    LODWORD(v74) = 1065353216;
    v43 = (char *)&v74 + 4;
    v44 = &v75;
    goto LABEL_171;
  }
  if (v41 == 1)
  {
    v78 = 0x3F80000000000000;
    v79 = 0;
    LODWORD(v76) = 1065353216;
LABEL_171:
    *(_DWORD *)v43 = 1065353216;
    *v44 = 1000000.0;
    goto LABEL_172;
  }
  if (!(v41 | v24) || v24 >= 4 && v41 >= 4)
  {
    memset(&v82[2], 0, 40);
    *(_QWORD *)a3 = 0;
    *(_OWORD *)(a3 + 24) = xmmword_2245F4CF0;
    *(_QWORD *)(a3 + 40) = 1065353216;
    *(_BYTE *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 52) = xmmword_2245F4CF0;
    *(_QWORD *)(a3 + 68) = 1065353216;
    *(_BYTE *)(a3 + 76) = 0;
    *(_WORD *)(a3 + 80) = 100;
    v73 = *(_OWORD *)&v82[16];
    *(_OWORD *)(a3 + 82) = *(_OWORD *)v82;
    *(_OWORD *)(a3 + 98) = v73;
    result = *(double *)&v82[26];
    *(_OWORD *)(a3 + 108) = *(_OWORD *)&v82[26];
    return result;
  }
LABEL_172:
  if (v15 >= 0.0)
    v70 = 0;
  else
    v70 = -1;
  if (v15 > 0.0)
    v70 = 1;
  if (v7 >= 0.0)
    v71 = 0;
  else
    v71 = -1;
  if (v7 > 0.0)
    v71 = 1;
  sub_223408300(a1, a2, v70 != v71, v24, v41, v42, v53, (uint64_t)&v80, a3, (uint64_t)&v78, &v76, &v74);
  return result;
}

void sub_223408300(_QWORD **a1@<X0>, _QWORD **a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11, uint64_t *a12)
{
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  unsigned int v22;
  int v23;
  int v25;
  unsigned int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  __int128 v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[25];
  _OWORD v42[2];
  _BYTE v43[34];
  uint64_t v44;

  if ((a5 & 0xFFFFFFFD) == 1)
    v16 = 0;
  else
    v16 = -1;
  v17 = (a4 - 4) < 0xFFFFFFFD;
  v18 = (a4 & 0xFFFFFFFD) != 1;
  v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC)
    v18 = 0;
  if (a5 == 2)
    v20 = 1;
  else
    v20 = v16;
  if (a5 == 2)
    v21 = v18;
  else
    v21 = (a4 - 4) < 0xFFFFFFFD;
  v22 = a5 - 1;
  v44 = *MEMORY[0x24BDAC8D0];
  if ((a5 & 0xFFFFFFFD) == 1)
    v23 = !v19;
  else
    v23 = v21;
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3)
    v25 = !v19;
  else
    v25 = v23 + 1;
  sub_223408510(a1, a2, a4, a5, a6, a7, a8, (uint64_t)&v39, a10, a11, a12);
  memset(&v43[2], 0, 32);
  v26 = a7 & 0xFFFFFFFD;
  v27 = (a6 - 4) < 0xFFFFFFFD;
  v28 = (a6 & 0xFFFFFFFD) != 1;
  v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC)
    v28 = 0;
  v30 = !v29;
  if (a7 != 2)
    v28 = (a6 - 4) < 0xFFFFFFFD;
  v31 = a7 - 1;
  if (v26 == 1)
    v32 = v30;
  else
    v32 = v28;
  if (v26 == 1 && v31 < 3)
    v30 = v32 + 1;
  v34 = v23 == 0;
  if (v22 < 3)
    v34 = v17;
  v35 = v32 == 0;
  if (v31 >= 3)
    v27 = v35;
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (a3)
    {
      if (v20)
        v36 = 102;
      else
        v36 = 116;
    }
    else
    {
      v36 = 97;
    }
  }
  else
  {
    v36 = 99;
    if (v25 == 2 && v30 == 2)
      v36 = 101;
  }
  *(_OWORD *)a9 = v39;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)v41;
  *(_OWORD *)(a9 + 33) = *(_OWORD *)&v41[9];
  *(_OWORD *)(a9 + 52) = v42[0];
  *(_OWORD *)(a9 + 61) = *(_OWORD *)((char *)v42 + 9);
  v37 = *(_OWORD *)v43;
  *(_OWORD *)(a9 + 98) = *(_OWORD *)&v43[16];
  if (v26 == 1)
    v38 = 0;
  else
    v38 = -1;
  if (a7 == 2)
    v38 = 1;
  *(_QWORD *)(a9 + 16) = v40;
  *(_BYTE *)(a9 + 80) = v36;
  *(_BYTE *)(a9 + 81) = a3;
  *(_WORD *)(a9 + 114) = *(_WORD *)&v43[32];
  *(_OWORD *)(a9 + 82) = v37;
  *(_DWORD *)(a9 + 116) = v20;
  *(_DWORD *)(a9 + 120) = v38;
}

void sub_223408510(_QWORD **a1@<X0>, _QWORD **a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  unsigned int v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  int v35;
  char *v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned __int8 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v66;
  int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  _QWORD **v78;
  _QWORD **v79;
  _QWORD **v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  _QWORD **v89;
  _QWORD **v90;
  _QWORD **v91;
  _QWORD **v92;
  _QWORD **v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  _OWORD *v108;
  _OWORD *v109;
  _OWORD *v110;
  _OWORD *v111;
  _OWORD *v112;
  _OWORD *v113;
  _OWORD *v114;
  _OWORD *v115;
  _OWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  _BYTE v119[28];
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v11 = 0;
  v122 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a8 = 0;
  *(_OWORD *)(a8 + 24) = xmmword_2245F4CF0;
  v12 = (_OWORD *)(a8 + 24);
  *(_QWORD *)(a8 + 40) = 1065353216;
  *(_BYTE *)(a8 + 48) = 0;
  *(_OWORD *)(a8 + 52) = xmmword_2245F4CF0;
  v13 = (_OWORD *)(a8 + 52);
  *(_QWORD *)(a8 + 68) = 1065353216;
  *(_BYTE *)(a8 + 76) = 0;
  v120 = xmmword_2245F4CF0;
  v121 = 1065353216;
  if ((a3 - 1) > 2)
  {
    if (a5 != 2)
      goto LABEL_5;
  }
  else
  {
    v14 = a8 + 36;
    *(_QWORD *)(a8 + 8) = **a1;
    v15 = atomic_load((unsigned __int8 *)&qword_25578BB68);
    if ((v15 & 1) == 0)
    {
      v78 = a1;
      v101 = a8;
      v89 = a2;
      v95 = a6;
      v74 = a4;
      v83 = a5;
      v71 = a7;
      v113 = (_OWORD *)(a8 + 24);
      v107 = (_OWORD *)(a8 + 52);
      v72 = a8 + 36;
      v54 = __cxa_guard_acquire(&qword_25578BB68);
      a7 = v71;
      v14 = v72;
      a8 = v101;
      v13 = v107;
      v12 = v113;
      a5 = v83;
      a4 = v74;
      a6 = v95;
      a2 = v89;
      v55 = v54;
      a1 = v78;
      if (v55)
      {
        qword_25578BB5C = 0x3F80000000000000;
        dword_25578BB64 = 0;
        __cxa_guard_release(&qword_25578BB68);
        a7 = v71;
        v14 = v72;
        a8 = v101;
        v13 = v107;
        v12 = v113;
        a5 = v83;
        a4 = v74;
        a1 = v78;
        a6 = v95;
        a2 = v89;
      }
    }
    v16 = dword_25578BB64;
    *(_BYTE *)(a8 + 48) = 1;
    *(_QWORD *)(a8 + 24) = qword_25578BB5C;
    *(_DWORD *)(a8 + 32) = v16;
    *(_QWORD *)v14 = *(_QWORD *)a7;
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(a7 + 8);
    v17 = atomic_load((unsigned __int8 *)&qword_25578BB68);
    if ((v17 & 1) == 0)
    {
      v79 = a1;
      v102 = a8;
      v90 = a2;
      v96 = a6;
      v75 = a4;
      v84 = a5;
      v114 = v12;
      v108 = v13;
      v56 = __cxa_guard_acquire(&qword_25578BB68);
      a8 = v102;
      v13 = v108;
      v12 = v114;
      a5 = v84;
      a4 = v75;
      a6 = v96;
      a2 = v90;
      v57 = v56;
      a1 = v79;
      if (v57)
      {
        qword_25578BB5C = 0x3F80000000000000;
        dword_25578BB64 = 0;
        __cxa_guard_release(&qword_25578BB68);
        a8 = v102;
        v13 = v108;
        v12 = v114;
        a5 = v84;
        a4 = v75;
        a1 = v79;
        a6 = v96;
        a2 = v90;
      }
    }
    *(_QWORD *)&v120 = qword_25578BB5C;
    DWORD2(v120) = dword_25578BB64;
    v11 = 1;
    if (a5 != 2)
    {
LABEL_5:
      if ((a4 - 1) > 2)
        goto LABEL_14;
      goto LABEL_10;
    }
  }
  v18 = a10;
  v19 = v11;
  *(_QWORD *)(a8 + 8 * v11 + 8) = **a2;
  v20 = a8 + 28 * v11 + 24;
  v21 = atomic_load((unsigned __int8 *)&qword_25578BB68);
  if ((v21 & 1) == 0)
  {
    v80 = a1;
    v103 = a8;
    v91 = a2;
    v97 = a6;
    v76 = a4;
    v115 = v12;
    v109 = v13;
    v85 = v11;
    v70 = v11;
    v73 = a8 + 28 * v11 + 24;
    v58 = __cxa_guard_acquire(&qword_25578BB68);
    v18 = a10;
    v20 = v73;
    v19 = v70;
    v11 = v85;
    a8 = v103;
    v13 = v109;
    v12 = v115;
    a4 = v76;
    a6 = v97;
    a2 = v91;
    v59 = v58;
    a1 = v80;
    if (v59)
    {
      qword_25578BB5C = 0x3F80000000000000;
      dword_25578BB64 = 0;
      __cxa_guard_release(&qword_25578BB68);
      v18 = a10;
      v20 = v73;
      v19 = v70;
      v11 = v85;
      a8 = v103;
      v13 = v109;
      v12 = v115;
      a4 = v76;
      a1 = v80;
      a6 = v97;
      a2 = v91;
    }
  }
  v22 = dword_25578BB64;
  v23 = a8 + 28 * v19;
  *(_BYTE *)(v23 + 48) = 1;
  v24 = qword_25578BB5C;
  v25 = *v18;
  *(_QWORD *)v20 = *v18;
  v26 = *((_DWORD *)v18 + 2);
  *(_DWORD *)(v20 + 8) = v26;
  *(_QWORD *)(v23 + 36) = v24;
  *(_DWORD *)(v23 + 44) = v22;
  v27 = (unint64_t)&v120 | (4 * v19) | (8 * v19);
  *(_QWORD *)v27 = v25;
  *(_DWORD *)(v27 + 8) = v26;
  ++v11;
  if ((a4 - 1) <= 2)
  {
LABEL_10:
    if (v11 <= 1)
    {
      v28 = a9;
      v29 = v11;
      *(_QWORD *)(a8 + 8 * v11 + 8) = *a1[1];
      v30 = a8 + 28 * v11 + 24;
      v31 = atomic_load((unsigned __int8 *)&qword_25578BB80);
      if ((v31 & 1) == 0)
      {
        v104 = a8;
        v92 = a2;
        v98 = a6;
        v116 = v12;
        v110 = v13;
        v86 = v11;
        v77 = a8 + 28 * v11 + 24;
        v81 = v11;
        v60 = __cxa_guard_acquire(&qword_25578BB80);
        v28 = a9;
        v30 = v77;
        v29 = v81;
        v11 = v86;
        a8 = v104;
        v13 = v110;
        v12 = v116;
        a6 = v98;
        a2 = v92;
        if (v60)
        {
          __asm { FMOV            V0.2S, #1.0 }
          qword_25578BB70 = _D0;
          dword_25578BB78 = 1232348160;
          __cxa_guard_release(&qword_25578BB80);
          v28 = a9;
          v30 = v77;
          v29 = v81;
          v11 = v86;
          a8 = v104;
          v13 = v110;
          v12 = v116;
          a6 = v98;
          a2 = v92;
        }
      }
      v32 = dword_25578BB78;
      v33 = a8 + 28 * v29;
      *(_BYTE *)(v33 + 48) = 1;
      *(_QWORD *)v30 = qword_25578BB70;
      *(_DWORD *)(v30 + 8) = v32;
      *(_QWORD *)(v33 + 36) = *(_QWORD *)v28;
      *(_DWORD *)(v33 + 44) = *(_DWORD *)(v28 + 8);
      v34 = atomic_load((unsigned __int8 *)&qword_25578BB80);
      if ((v34 & 1) == 0)
      {
        v105 = a8;
        v93 = a2;
        v99 = a6;
        v117 = v12;
        v111 = v13;
        v87 = v11;
        v82 = v29;
        v66 = __cxa_guard_acquire(&qword_25578BB80);
        v29 = v82;
        v11 = v87;
        a8 = v105;
        v13 = v111;
        v12 = v117;
        a6 = v99;
        a2 = v93;
        if (v66)
        {
          __asm { FMOV            V0.2S, #1.0 }
          qword_25578BB70 = _D0;
          dword_25578BB78 = 1232348160;
          __cxa_guard_release(&qword_25578BB80);
          v29 = v82;
          v11 = v87;
          a8 = v105;
          v13 = v111;
          v12 = v117;
          a6 = v99;
          a2 = v93;
        }
      }
      v35 = dword_25578BB78;
      v36 = (char *)&v120 + 12 * v29;
      *(_QWORD *)v36 = qword_25578BB70;
      *((_DWORD *)v36 + 2) = v35;
      ++v11;
    }
  }
LABEL_14:
  if (a6 == 2 && v11 <= 1)
  {
    v37 = a11;
    v38 = v11;
    *(_QWORD *)(a8 + 8 * v11 + 8) = *a2[1];
    v39 = a8 + 28 * v11 + 24;
    v40 = atomic_load((unsigned __int8 *)&qword_25578BB80);
    if ((v40 & 1) == 0)
    {
      v106 = a8;
      v118 = v12;
      v112 = v13;
      v88 = v11;
      v94 = v11;
      v100 = a8 + 28 * v11 + 24;
      v68 = __cxa_guard_acquire(&qword_25578BB80);
      v38 = v94;
      v39 = v100;
      v37 = a11;
      v11 = v88;
      a8 = v106;
      v13 = v112;
      v12 = v118;
      if (v68)
      {
        __asm { FMOV            V0.2S, #1.0 }
        qword_25578BB70 = _D0;
        dword_25578BB78 = 1232348160;
        __cxa_guard_release(&qword_25578BB80);
        v38 = v94;
        v39 = v100;
        v37 = a11;
        v11 = v88;
        a8 = v106;
        v13 = v112;
        v12 = v118;
      }
    }
    v41 = dword_25578BB78;
    v42 = a8 + 28 * v38;
    *(_BYTE *)(v42 + 48) = 1;
    v43 = qword_25578BB70;
    v44 = *v37;
    *(_QWORD *)v39 = *v37;
    v45 = *((_DWORD *)v37 + 2);
    *(_DWORD *)(v39 + 8) = v45;
    *(_QWORD *)(v42 + 36) = v43;
    *(_DWORD *)(v42 + 44) = v41;
    v46 = (char *)&v120 + 12 * v38;
    *(_QWORD *)v46 = v44;
    *((_DWORD *)v46 + 2) = v45;
    ++v11;
  }
  if (v11 == 2)
  {
    if (vabds_f32(*((float *)&v121 + 1), *((float *)&v120 + 2)) >= 50.0)
    {
      if (*((float *)&v121 + 1) >= *((float *)&v120 + 2))
        goto LABEL_35;
    }
    else
    {
      v47 = *((float *)&v120 + 3) / *(float *)&v121;
      v48 = *(float *)&v120 / *((float *)&v120 + 1);
      if ((float)(*((float *)&v120 + 3) / *(float *)&v121) == (float)(*(float *)&v120 / *((float *)&v120 + 1)))
        goto LABEL_35;
      if (COERCE_UNSIGNED_INT(fabs(*((float *)&v120 + 3) / *(float *)&v121)) > 0x7F7FFFFF
        || COERCE_INT(fabs(*(float *)&v120 / *((float *)&v120 + 1))) > 2139095039)
      {
        v53 = 1;
        if (v47 >= v48)
          goto LABEL_35;
      }
      else
      {
        v49 = vabds_f32(v47, v48);
        v50 = fabsf(v47);
        v51 = fabsf(v48);
        if (v50 < v51)
          v50 = v51;
        if (v50 >= 1.0)
          v52 = v50 * 0.00000011921;
        else
          v52 = 0.00000011921;
        v53 = v49 > v52;
        if (v47 >= v48)
          goto LABEL_35;
      }
      if (!v53)
        goto LABEL_35;
    }
    *(_OWORD *)v119 = *v12;
    *(_OWORD *)&v119[12] = *(_OWORD *)((char *)v12 + 12);
    *v12 = *v13;
    *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v13 + 9);
    *v13 = *(_OWORD *)v119;
    *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)&v119[9];
    *(int8x16_t *)(a8 + 8) = vextq_s8(*(int8x16_t *)(a8 + 8), *(int8x16_t *)(a8 + 8), 8uLL);
  }
LABEL_35:
  *(_QWORD *)a8 = v11;
}

float sub_223408CB4(float *a1, float *a2, float **a3, float **a4)
{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  double v18;
  float v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float result;
  float v26;
  float v27;
  float *v28;

  v5 = *a1;
  v4 = a1[1];
  v6 = (float)(v5 * v5) + (float)(v4 * v4);
  v7 = v6;
  v9 = a1[2];
  v8 = a1[3];
  v10 = (float)(v9 * v9) + (float)(v8 * v8);
  v11 = v10;
  if (v6 >= v10)
    v12 = v6;
  else
    v12 = v10;
  if (v12 <= 0.0)
    goto LABEL_12;
  v13 = vabds_f32(0.5, a1[9] / 1000000.0);
  v14 = v13 + v13;
  v15 = vabds_f32(0.5, a1[6] / 1000000.0);
  v16 = v15 + v15;
  v17 = 1.0 - v7 / v12;
  v18 = 1.0 - v11 / v12;
  v19 = v16 <= 1.0 ? v16 * 5.0 : 5.0;
  v20 = v17 + v19;
  v21 = v14 <= 1.0 ? v14 * 5.0 : 5.0;
  if (v20 <= v18 + v21)
  {
    v26 = a1[7];
    v27 = a1[8];
    v28 = *a4;
    *a2 = (float)((float)(v9 * v26) / v27) + **a4;
    result = (float)((float)(v8 * v26) / v27) + v28[1];
    a2[1] = result;
  }
  else
  {
LABEL_12:
    v22 = a1[4];
    v23 = a1[5];
    v24 = *a3;
    *a2 = (float)((float)(v5 * v22) / v23) + **a3;
    result = (float)((float)(v4 * v22) / v23) + v24[1];
    a2[1] = result;
  }
  return result;
}

uint64_t sub_223408DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  float *v4;
  float *v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(float **)(v1 + 16);
  v4 = *(float **)(v1 + 24);
  v5 = *(float **)(v2 + 24);
  v9 = 1.0;
  v6 = sub_2233DB7C4(v3, v4, v5, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

void sub_223408E68(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x19;
  v4 = v2 - 25;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_223174E94();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFA0uLL);
      sub_22323CCA0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFA0uLL);
    sub_22323CE2C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFA0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_223174E94();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_223174E94();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_2234093A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2234093C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2234093D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2234093F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223409408(uint64_t a1)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t result;
  double v16;
  double v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(float **)(v2 + 24);
  if (*(_BYTE *)(v2 + 168))
  {
    v4 = (float *)(v2 + 160);
    v5 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v5 + 168))
      goto LABEL_16;
    goto LABEL_10;
  }
  sub_223406FA4(*(_QWORD *)(a1 + 16), *(float **)(v2 + 24), v2 + 32);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v2 + 64);
  if (v7 >= v6)
  {
    v9 = v7 - 1;
    if (v9 <= v6)
      v8 = (_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * (v9 % v6));
    else
      v8 = *(_QWORD **)(v2 + 48);
  }
  else
  {
    v8 = (_QWORD *)(*(_QWORD *)(v2 + 32) - 8);
  }
  *(_QWORD *)(v2 + 160) = *v8;
  *(_BYTE *)(v2 + 168) = 1;
  v4 = (float *)(v2 + 160);
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v5 + 168))
  {
LABEL_10:
    sub_223406FA4(v5, *(float **)(v5 + 24), v5 + 32);
    v10 = *(_QWORD *)(v5 + 56);
    v11 = *(_QWORD *)(v5 + 64);
    if (v11 >= v10)
    {
      v13 = v11 - 1;
      if (v13 <= v10)
        v12 = (_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * (v13 % v10));
      else
        v12 = *(_QWORD **)(v5 + 48);
    }
    else
    {
      v12 = (_QWORD *)(*(_QWORD *)(v5 + 32) - 8);
    }
    *(_QWORD *)(v5 + 160) = *v12;
    *(_BYTE *)(v5 + 168) = 1;
  }
LABEL_16:
  v17 = 1.0;
  v14 = sub_2233DB7C4(v3, v4, (float *)(v5 + 160), &v17);
  if (v14 == 0.0)
    return 0;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v14 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v16 = fabs(v14);
    if (v14 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v16 <= v17 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_2234095B0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 12;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 25;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223409674(uint64_t *a1, void **a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  xpc_object_t value;
  std::__shared_weak_count *v8;

  sub_2234097E8(&value, a1);
  v3 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *a2;
  }
  xpc_dictionary_set_value(v3, "meshes", value);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_22340974C()
{
  __break(1u);
}

void sub_2234097D0()
{
  __cxa_end_catch();
  JUMPOUT(0x2234097DCLL);
}

void sub_2234097E8(void **a1, uint64_t *a2)
{
  std::__shared_weak_count_vtbl *empty;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t i;
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  xpc_object_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t j;
  unsigned __int8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  xpc_object_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t k;
  unsigned __int8 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  xpc_object_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t m;
  unsigned __int8 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  xpc_object_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t n;
  unsigned __int8 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t ii;
  unsigned __int8 v84;
  std::__shared_weak_count_vtbl *readonly;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  xpc_object_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t jj;
  unsigned __int8 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t kk;
  unsigned __int8 v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  xpc_object_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t mm;
  unsigned __int8 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t nn;
  unsigned __int8 v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  xpc_object_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t i1;
  unsigned __int8 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t i2;
  unsigned __int8 v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  xpc_object_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t i3;
  unsigned __int8 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  xpc_object_t *v162;
  std::__shared_weak_count *v163;
  xpc_object_t *v164;
  unint64_t *v165;
  unint64_t v166;
  void *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  uint64_t i4;
  unsigned __int8 v177;
  xpc_object_t v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t i5;
  unsigned __int8 v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  xpc_object_t v192;
  unsigned __int8 v193;
  uint64_t v194;
  uint64_t i6;
  unsigned __int8 v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  xpc_object_t v200;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t i7;
  unsigned __int8 v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  const void *v208;
  unsigned __int8 v209;
  uint64_t v210;
  uint64_t i8;
  unsigned __int8 v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  std::ios_base *v218;
  _BYTE *v219;
  size_t v220;
  _BYTE *v221;
  std::__shared_weak_count_vtbl *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  void **v234;
  std::__shared_weak_count *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  void **v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  _BYTE *v250;
  void ***v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  _OWORD *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  void **v261;
  void *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  unsigned __int8 v270;
  uint64_t v271;
  uint64_t i9;
  unsigned __int8 v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  char *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  vm_address_t v281;
  uint64_t v282;
  void **v283;
  unsigned int *v284;
  unsigned int v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  std::__shared_weak_count_vtbl *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  void **v298;
  char *v299;
  char *v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  _BYTE *v308;
  std::__shared_weak_count_vtbl **v309;
  char *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  _OWORD *v315;
  char *v316;
  uint64_t v317;
  __int128 v318;
  std::__shared_weak_count_vtbl *v319;
  void *v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  unsigned __int8 v327;
  uint64_t v328;
  uint64_t i10;
  unsigned __int8 v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  void **v335;
  xpc_object_t *v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  unsigned __int8 v343;
  uint64_t v344;
  uint64_t i11;
  unsigned __int8 v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  xpc_object_t v354;
  unsigned __int8 v355;
  uint64_t v356;
  uint64_t i12;
  unsigned __int8 v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  void *v362;
  unsigned __int8 v363;
  uint64_t v364;
  uint64_t i13;
  unsigned __int8 v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::runtime_error *v370;
  std::runtime_error *exception;
  std::bad_alloc *v372;
  std::bad_alloc *v373;
  void *v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  void *v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  void *v383;
  uint64_t v384;
  std::__shared_weak_count_vtbl *v385;
  std::__shared_weak_count_vtbl *v386;
  char *v387;
  uint64_t v388;
  void **v389;
  xpc_object_t xdict;
  std::__shared_weak_count *v391;
  xpc_object_t v392;
  std::__shared_weak_count *v393;
  void **p_address;
  void **v395;
  vm_address_t v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  xpc_object_t value[2];
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  void *v405[6];
  _QWORD v406[20];
  void **v407[4];
  __int128 v408;
  __int128 v409;
  vm_address_t address;
  vm_address_t v411;
  vm_address_t v412;
  std::__shared_weak_count_vtbl *v413;
  vm_address_t *v414;
  char key[37];
  uint64_t v416;

  v416 = *MEMORY[0x24BDAC8D0];
  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  v5 = (std::__shared_weak_count *)operator new();
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = empty;
  *a1 = empty;
  a1[1] = v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  v389 = a1;
  if (v9)
  {
    v11 = *a2;
    v10 = a2[1];
    if (*a2 == v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    v11 = *a2;
    v10 = a2[1];
    if (*a2 == v10)
      return;
  }
  v375 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v376 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v382 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
  v383 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
  v380 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
  v381 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
  v374 = (void *)*MEMORY[0x24BEDB7F0];
  v379 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
  v378 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
  v377 = MEMORY[0x24BEDB848] + 16;
  v384 = v10;
  while (2)
  {
    if (*(_DWORD *)(v11 + 48))
      goto LABEL_10;
    sub_2245664AC((unsigned __int8 *)v11, key);
    if (*(_DWORD *)(v11 + 48))
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryMeshesXPC.cpp", 103, (uint64_t)"mesh_data.HoldsTriMeshData()", 28, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
      v12 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v13 = qword_255795648;
        for (i = qword_255795650; v13 != i; v13 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v13)(*(_QWORD *)(v13 + 8), "mesh_data.HoldsTriMeshData()", 28, &unk_2245855ED, 0);
      }
      v15 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "mesh_data.HoldsTriMeshData()", 28, &unk_2245855ED, 0);
      if (*(_DWORD *)(v11 + 48))
        sub_22316DD70();
    }
    v16 = *(_QWORD *)(v11 + 32);
    v17 = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)&xdict, v17, 0);
    v19 = *(_QWORD *)(v16 + 112);
    v18 = *(_QWORD *)(v16 + 120);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 2);
    v21 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(v20);
    v22 = (std::__shared_weak_count *)operator new();
    v23 = v22;
    v22->__shared_owners_ = 0;
    v24 = (unint64_t *)&v22->__shared_owners_;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 2);
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = v21;
    value[0] = v21;
    value[1] = v22;
    do
      v26 = __ldxr(v24);
    while (__stxr(v26 + 1, v24));
    do
      v27 = __ldaxr(v24);
    while (__stlxr(v27 - 1, v24));
    if (v27)
    {
      v28 = xdict;
      if (xdict)
        goto LABEL_36;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
      v28 = xdict;
      if (xdict)
        goto LABEL_36;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v29 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v30 = qword_255795648;
      for (j = qword_255795650; v30 != j; v30 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v30)(*(_QWORD *)(v30 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v32 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v28 = xdict;
LABEL_36:
    xpc_dictionary_set_value(v28, "num_mesh_vertices", value[0]);
    v33 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v34 = (unint64_t *)((char *)value[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(v25);
    v37 = (std::__shared_weak_count *)operator new();
    v38 = v37;
    v37->__shared_owners_ = 0;
    v39 = (unint64_t *)&v37->__shared_owners_;
    v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v36;
    value[0] = v36;
    value[1] = v37;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (v41)
    {
      v42 = xdict;
      if (xdict)
        goto LABEL_56;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v38);
      v42 = xdict;
      if (xdict)
        goto LABEL_56;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v43 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v44 = qword_255795648;
      for (k = qword_255795650; v44 != k; v44 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v44)(*(_QWORD *)(v44 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v46 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v42 = xdict;
LABEL_56:
    xpc_dictionary_set_value(v42, "num_mesh_faces", value[0]);
    v47 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_60;
    v48 = (unint64_t *)((char *)value[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v50 = *(_DWORD *)(v16 + 272);
      v51 = v25;
      if (v50 == 2)
        goto LABEL_63;
    }
    else
    {
LABEL_60:
      v50 = *(_DWORD *)(v16 + 272);
      v51 = v25;
      if (v50 == 2)
        goto LABEL_63;
    }
    if (!v50)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "TriMeshData doesnt have per-(face/vertex) metadata");
      exception->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
      __cxa_throw(exception, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v51 = v20;
LABEL_63:
    v52 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(v51);
    v53 = (std::__shared_weak_count *)operator new();
    v54 = v53;
    v53->__shared_owners_ = 0;
    v55 = (unint64_t *)&v53->__shared_owners_;
    v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v53->__shared_weak_owners_ = 0;
    v53[1].__vftable = v52;
    value[0] = v52;
    value[1] = v53;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (v57)
    {
      v58 = xdict;
      if (xdict)
        goto LABEL_78;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v54);
      v58 = xdict;
      if (xdict)
        goto LABEL_78;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v59 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v60 = qword_255795648;
      for (m = qword_255795650; v60 != m; v60 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v60)(*(_QWORD *)(v60 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v62 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v58 = xdict;
LABEL_78:
    xpc_dictionary_set_value(v58, "num_mesh_semantics", value[0]);
    v63 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_82;
    v64 = (unint64_t *)((char *)value[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      v66 = *(_DWORD *)(v16 + 104);
      if (v66 == 2)
        goto LABEL_85;
    }
    else
    {
LABEL_82:
      v66 = *(_DWORD *)(v16 + 104);
      if (v66 == 2)
        goto LABEL_85;
    }
    if (!v66)
    {
      v370 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v370, "TriMeshData doesnt have per-(face/vertex) metadata");
      v370->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
      __cxa_throw(v370, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v25 = v20;
LABEL_85:
    v67 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(v25);
    v68 = (std::__shared_weak_count *)operator new();
    v69 = v68;
    v68->__shared_owners_ = 0;
    v70 = (unint64_t *)&v68->__shared_owners_;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v67;
    value[0] = v67;
    value[1] = v68;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (v72)
    {
      v73 = xdict;
      if (xdict)
        goto LABEL_100;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v69);
      v73 = xdict;
      if (xdict)
        goto LABEL_100;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v74 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v75 = qword_255795648;
      for (n = qword_255795650; v75 != n; v75 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v75)(*(_QWORD *)(v75 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v77 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v73 = xdict;
LABEL_100:
    xpc_dictionary_set_value(v73, "num_mesh_normals", value[0]);
    v78 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_104;
    v79 = (unint64_t *)((char *)value[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if (*(_DWORD *)(v16 + 28) == 1)
        goto LABEL_113;
    }
    else
    {
LABEL_104:
      if (*(_DWORD *)(v16 + 28) == 1)
        goto LABEL_113;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryMeshesXPC.cpp", 97, (uint64_t)"vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
    v81 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v82 = qword_255795648;
      for (ii = qword_255795650; v82 != ii; v82 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v82)(*(_QWORD *)(v82 + 8), "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
    }
    v84 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
LABEL_113:
    readonly = (std::__shared_weak_count_vtbl *)xpc_shmem_create_readonly();
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v86;
    v86->__shared_owners_ = 0;
    v88 = (unint64_t *)&v86->__shared_owners_;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = readonly;
    value[0] = readonly;
    value[1] = v86;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    do
      v90 = __ldaxr(v88);
    while (__stlxr(v90 - 1, v88));
    if (v90)
    {
      v91 = xdict;
      if (xdict)
        goto LABEL_128;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v87);
      v91 = xdict;
      if (xdict)
        goto LABEL_128;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v92 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v93 = qword_255795648;
      for (jj = qword_255795650; v93 != jj; v93 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v93)(*(_QWORD *)(v93 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v95 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v91 = xdict;
LABEL_128:
    xpc_dictionary_set_value(v91, "mesh_vertices", value[0]);
    v96 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_132;
    v97 = (unint64_t *)((char *)value[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if (*(_DWORD *)(v16 + 140) == 1)
        goto LABEL_141;
    }
    else
    {
LABEL_132:
      if (*(_DWORD *)(v16 + 140) == 1)
        goto LABEL_141;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryMeshesXPC.cpp", 97, (uint64_t)"vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
    v99 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v100 = qword_255795648;
      for (kk = qword_255795650; v100 != kk; v100 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v100)(*(_QWORD *)(v100 + 8), "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
    }
    v102 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
LABEL_141:
    v103 = (std::__shared_weak_count_vtbl *)xpc_shmem_create_readonly();
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v104;
    v104->__shared_owners_ = 0;
    v106 = (unint64_t *)&v104->__shared_owners_;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v103;
    value[0] = v103;
    value[1] = v104;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
    do
      v108 = __ldaxr(v106);
    while (__stlxr(v108 - 1, v106));
    if (v108)
    {
      v109 = xdict;
      if (xdict)
        goto LABEL_156;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v105);
      v109 = xdict;
      if (xdict)
        goto LABEL_156;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v110 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v111 = qword_255795648;
      for (mm = qword_255795650; v111 != mm; v111 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v111)(*(_QWORD *)(v111 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v113 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v109 = xdict;
LABEL_156:
    xpc_dictionary_set_value(v109, "mesh_faces", value[0]);
    v114 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_160;
    v115 = (unint64_t *)((char *)value[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
      if (*(_DWORD *)(v16 + 268) == 1)
        goto LABEL_169;
    }
    else
    {
LABEL_160:
      if (*(_DWORD *)(v16 + 268) == 1)
        goto LABEL_169;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryMeshesXPC.cpp", 97, (uint64_t)"vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
    v117 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v118 = qword_255795648;
      for (nn = qword_255795650; v118 != nn; v118 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v118)(*(_QWORD *)(v118 + 8), "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
    }
    v120 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
LABEL_169:
    v121 = (std::__shared_weak_count_vtbl *)xpc_shmem_create_readonly();
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v122;
    v122->__shared_owners_ = 0;
    v124 = (unint64_t *)&v122->__shared_owners_;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v121;
    value[0] = v121;
    value[1] = v122;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    do
      v126 = __ldaxr(v124);
    while (__stlxr(v126 - 1, v124));
    if (v126)
    {
      v127 = xdict;
      if (xdict)
        goto LABEL_184;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v123);
      v127 = xdict;
      if (xdict)
        goto LABEL_184;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v128 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v129 = qword_255795648;
      for (i1 = qword_255795650; v129 != i1; v129 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v129)(*(_QWORD *)(v129 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v131 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v127 = xdict;
LABEL_184:
    xpc_dictionary_set_value(v127, "mesh_semantics", value[0]);
    v132 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_188;
    v133 = (unint64_t *)((char *)value[1] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
      if (*(_DWORD *)(v16 + 100) == 1)
        goto LABEL_197;
    }
    else
    {
LABEL_188:
      if (*(_DWORD *)(v16 + 100) == 1)
        goto LABEL_197;
    }
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryMeshesXPC.cpp", 97, (uint64_t)"vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
    v135 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v136 = qword_255795648;
      for (i2 = qword_255795650; v136 != i2; v136 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v136)(*(_QWORD *)(v136 + 8), "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
    }
    v138 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "vector.get_allocator().GetMode() == kmesh::TriMeshAllocatorMode::PageAlignedDarwin", 82, &unk_2245855ED, 0);
LABEL_197:
    v139 = (std::__shared_weak_count_vtbl *)xpc_shmem_create_readonly();
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v140;
    v140->__shared_owners_ = 0;
    v142 = (unint64_t *)&v140->__shared_owners_;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v139;
    value[0] = v139;
    value[1] = v140;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
    do
      v144 = __ldaxr(v142);
    while (__stlxr(v144 - 1, v142));
    if (v144)
    {
      v145 = xdict;
      if (!xdict)
      {
LABEL_204:
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
        v146 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v147 = qword_255795648;
          for (i3 = qword_255795650; v147 != i3; v147 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v147)(*(_QWORD *)(v147 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
        }
        v149 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
        v145 = xdict;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v141);
      v145 = xdict;
      if (!xdict)
        goto LABEL_204;
    }
    xpc_dictionary_set_value(v145, "mesh_normals", value[0]);
    v150 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_216;
    v151 = (unint64_t *)((char *)value[1] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
      if (!*(_BYTE *)(v11 + 120))
        goto LABEL_275;
    }
    else
    {
LABEL_216:
      if (!*(_BYTE *)(v11 + 120))
        goto LABEL_275;
    }
    v153 = 0;
    v154 = v11;
    v155 = v11 + 56;
    memset(v406, 0, 128);
    v404 = 0u;
    memset(v405, 0, sizeof(v405));
    v402 = 0u;
    v403 = 0u;
    *(_OWORD *)value = 0u;
    v401 = 0u;
    do
    {
      v156 = (std::__shared_weak_count_vtbl *)xpc_double_create(*(float *)(v155 + 4 * v153));
      v157 = (std::__shared_weak_count *)operator new();
      v158 = v157;
      v157->__shared_owners_ = 0;
      v159 = (unint64_t *)&v157->__shared_owners_;
      v157->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
      v157->__shared_weak_owners_ = 0;
      v157[1].__vftable = v156;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
      do
        v161 = __ldaxr(v159);
      while (__stlxr(v161 - 1, v159));
      if (v161)
      {
        v162 = &value[2 * v153];
        v163 = (std::__shared_weak_count *)v162[1];
        *v162 = v156;
        v162[1] = v157;
        if (!v163)
          goto LABEL_218;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v158);
        v164 = &value[2 * v153];
        v163 = (std::__shared_weak_count *)v164[1];
        *v164 = v156;
        v164[1] = v158;
        if (!v163)
          goto LABEL_218;
      }
      v165 = (unint64_t *)&v163->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
LABEL_218:
      ++v153;
    }
    while (v153 != 16);
    *(_QWORD *)&v397 = operator new(0x80uLL);
    *((_QWORD *)&v397 + 1) = v397;
    *(_QWORD *)&v398 = v397 + 128;
    v407[0] = (void **)&v397;
    sub_22345A000((uint64_t *)value, v407);
    v11 = v154;
    v167 = (void *)v397;
    v168 = (std::__shared_weak_count_vtbl *)xpc_array_create((xpc_object_t *)v397, (uint64_t)(*((_QWORD *)&v397 + 1) - v397) >> 3);
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v169;
    v169->__shared_owners_ = 0;
    v171 = (unint64_t *)&v169->__shared_owners_;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v168;
    *(_QWORD *)&v408 = v168;
    *((_QWORD *)&v408 + 1) = v169;
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
    do
      v173 = __ldaxr(v171);
    while (__stlxr(v173 - 1, v171));
    if (v173)
    {
      if (!(_QWORD)v408)
        goto LABEL_260;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v170);
      if (!(_QWORD)v408)
        goto LABEL_260;
    }
    if (MEMORY[0x2276858AC]() != MEMORY[0x24BDACF78])
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 39, (uint64_t)"!IsValid() || IsOfType(Type::Array)", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v174 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v175 = qword_255795648;
        for (i4 = qword_255795650; v175 != i4; v175 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v175)(*(_QWORD *)(v175 + 8), "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
      }
      v177 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v177 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
    }
LABEL_260:
    if (v167)
      operator delete(v167);
    sub_223459BF0(value);
    v178 = xdict;
    if (!xdict)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v179 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v180 = qword_255795648;
        for (i5 = qword_255795650; v180 != i5; v180 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v180)(*(_QWORD *)(v180 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v182 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v178 = xdict;
    }
    xpc_dictionary_set_value(v178, "mesh_to_world", (xpc_object_t)v408);
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
    if (!*((_QWORD *)&v408 + 1))
      goto LABEL_275;
    v184 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
      if (*(_BYTE *)(v11 + 140))
        goto LABEL_276;
    }
    else
    {
LABEL_275:
      if (*(_BYTE *)(v11 + 140))
      {
LABEL_276:
        v186 = (std::__shared_weak_count_vtbl *)xpc_uuid_create((const unsigned __int8 *)(v11 + 124));
        v187 = (std::__shared_weak_count *)operator new();
        v188 = v187;
        v187->__shared_owners_ = 0;
        v189 = (unint64_t *)&v187->__shared_owners_;
        v187->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
        v187->__shared_weak_owners_ = 0;
        v187[1].__vftable = v186;
        value[0] = v186;
        value[1] = v187;
        do
          v190 = __ldxr(v189);
        while (__stxr(v190 + 1, v189));
        do
          v191 = __ldaxr(v189);
        while (__stlxr(v191 - 1, v189));
        if (v191)
        {
          v192 = xdict;
          if (!xdict)
            goto LABEL_283;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v188);
          v192 = xdict;
          if (!xdict)
          {
LABEL_283:
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
            v193 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v194 = qword_255795648;
              for (i6 = qword_255795650; v194 != i6; v194 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v194)(*(_QWORD *)(v194 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
            }
            v196 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
            v192 = xdict;
          }
        }
        xpc_dictionary_set_value(v192, "mesh_room_id", value[0]);
        v197 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v198 = (unint64_t *)((char *)value[1] + 8);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
      }
    }
    sub_223457B68((float *)(v11 + 144), (std::__shared_weak_count_vtbl **)value);
    v200 = xdict;
    if (!xdict)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v201 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v202 = qword_255795648;
        for (i7 = qword_255795650; v202 != i7; v202 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v202)(*(_QWORD *)(v202 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v204 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v200 = xdict;
    }
    xpc_dictionary_set_value(v200, "mesh_bbox", value[0]);
    v205 = (std::__shared_weak_count *)value[1];
    if (!value[1])
      goto LABEL_656;
    v206 = (unint64_t *)((char *)value[1] + 8);
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (v207)
    {
LABEL_656:
      if (*(_BYTE *)(v11 + 184))
        goto LABEL_311;
LABEL_511:
      v362 = *v389;
      if (!*v389)
        goto LABEL_512;
      goto LABEL_520;
    }
    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
    std::__shared_weak_count::__release_weak(v205);
    if (!*(_BYTE *)(v11 + 184))
      goto LABEL_511;
LABEL_311:
    v208 = *(const void **)(v11 + 168);
    if (!v208)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/include/Reconstruction/SceneQuery/MeshSpatialLookup.h", 92, (uint64_t)"octree_ != nullptr", 18, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C);
      v209 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v209 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v210 = qword_255795648;
        for (i8 = qword_255795650; v210 != i8; v210 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v210)(*(_QWORD *)(v210 + 8), "octree_ != nullptr", 18, &unk_2245855ED, 0);
      }
      v212 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v212 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "octree_ != nullptr", 18, &unk_2245855ED, 0);
      v208 = *(const void **)(v11 + 168);
    }
    v213 = (char *)__dynamic_cast(v208, (const struct __class_type_info *)&unk_24EC36190, (const struct __class_type_info *)&unk_24EC361A0, 0);
    if (!v213)
      __cxa_bad_cast();
    v214 = v213;
    LODWORD(v407[0]) = *((_DWORD *)v213 + 8);
    *(_OWORD *)((char *)v407 + 4) = *(_OWORD *)(v213 + 8);
    *(void ***)((char *)&v407[2] + 4) = *((void ***)v213 + 3);
    v215 = MEMORY[0x24BEDB858];
    v216 = MEMORY[0x24BEDB858] + 104;
    v406[0] = MEMORY[0x24BEDB858] + 104;
    v217 = MEMORY[0x24BEDB858] + 64;
    *(_QWORD *)&v401 = MEMORY[0x24BEDB858] + 64;
    value[0] = v383;
    *(xpc_object_t *)((char *)value + *((_QWORD *)v383 - 3)) = v382;
    value[1] = 0;
    v218 = (std::ios_base *)((char *)value + *((_QWORD *)value[0] - 3));
    std::ios_base::init(v218, (char *)&v401 + 8);
    v218[1].__vftable = 0;
    v218[1].__fmtflags_ = -1;
    *(_QWORD *)&v401 = v381;
    *(_QWORD *)((char *)&v401 + *(_QWORD *)(v381 - 24)) = v380;
    value[0] = v379;
    *(xpc_object_t *)((char *)value + *((_QWORD *)v379 - 3)) = v378;
    v406[0] = v216;
    value[0] = (xpc_object_t)(v215 + 24);
    *(_QWORD *)&v401 = v217;
    std::streambuf::basic_streambuf();
    *((_QWORD *)&v401 + 1) = v377;
    memset(&v405[1], 0, 32);
    LODWORD(v405[5]) = 16;
    LODWORD(v397) = 1;
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    v398 = 0u;
    v399 = 0u;
    v397 = 0u;
    if (((uint64_t)v405[5] & 0x10) != 0)
    {
      v221 = v405[4];
      if (v405[4] < (void *)*((_QWORD *)&v404 + 1))
      {
        v405[4] = *((void **)&v404 + 1);
        v221 = (_BYTE *)*((_QWORD *)&v404 + 1);
      }
      v219 = (_BYTE *)v404;
      goto LABEL_330;
    }
    if (((uint64_t)v405[5] & 8) != 0)
    {
      v219 = (_BYTE *)*((_QWORD *)&v402 + 1);
      v221 = (_BYTE *)*((_QWORD *)&v403 + 1);
LABEL_330:
      v220 = v221 - v219;
      goto LABEL_331;
    }
    v219 = 0;
    v220 = 0;
LABEL_331:
    v222 = (std::__shared_weak_count_vtbl *)xpc_data_create(v219, v220);
    v223 = (std::__shared_weak_count *)operator new();
    v224 = v223;
    v223->__shared_owners_ = 0;
    v225 = (unint64_t *)&v223->__shared_owners_;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v222;
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
    do
      v227 = __ldaxr(v225);
    while (__stlxr(v227 - 1, v225));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v224);
    }
    *(_QWORD *)&v397 = v222;
    *((_QWORD *)&v397 + 1) = v224;
    v408 = 0u;
    v409 = 0u;
    v228 = xpc_shmem_create_readonly();
    v229 = (std::__shared_weak_count *)operator new();
    v230 = v229;
    v229->__shared_owners_ = 0;
    v231 = (unint64_t *)&v229->__shared_owners_;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = (std::__shared_weak_count_vtbl *)v228;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    do
      v233 = __ldaxr(v231);
    while (__stlxr(v233 - 1, v231));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v230);
    }
    *(_QWORD *)&v408 = v228;
    *((_QWORD *)&v408 + 1) = v230;
    v234 = (void **)xpc_uint64_create((uint64_t)(*((_QWORD *)v214 + 20) - *((_QWORD *)v214 + 19)) >> 2);
    v387 = v214;
    v235 = (std::__shared_weak_count *)operator new();
    v236 = v235;
    v235->__shared_owners_ = 0;
    v237 = (unint64_t *)&v235->__shared_owners_;
    v235->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v235->__shared_weak_owners_ = 0;
    v235[1].__vftable = (std::__shared_weak_count_vtbl *)v234;
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
    do
      v239 = __ldaxr(v237);
    while (__stlxr(v239 - 1, v237));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v236);
    }
    v388 = v11;
    *(_QWORD *)&v409 = v234;
    *((_QWORD *)&v409 + 1) = v236;
    address = (vm_address_t)operator new(0x10uLL);
    v411 = address;
    v412 = address + 16;
    p_address = (void **)&address;
    v414 = (vm_address_t *)v408;
    sub_2232EA538(&p_address, &v414);
    v414 = (vm_address_t *)v234;
    v240 = p_address;
    v242 = (char *)p_address[1];
    v241 = (char *)p_address[2];
    v386 = v222;
    if (v242 < v241)
    {
      *(_QWORD *)v242 = v234;
      v243 = (uint64_t)(v242 + 8);
      goto LABEL_368;
    }
    v244 = (char *)*p_address;
    v245 = v242 - (_BYTE *)*p_address;
    v246 = v245 >> 3;
    v247 = (v245 >> 3) + 1;
    if (v247 >> 61)
      sub_22316E078();
    v248 = v241 - v244;
    if (v248 >> 2 > v247)
      v247 = v248 >> 2;
    if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8)
      v249 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v249 = v247;
    if (!v249)
    {
      v250 = 0;
      v251 = (void ***)(8 * v246);
      *(_QWORD *)(8 * v246) = v234;
      v243 = 8 * v246 + 8;
      v252 = (char *)(v242 - v244);
      if (v242 != v244)
        goto LABEL_357;
      goto LABEL_366;
    }
    if (v249 >> 61)
      sub_223174E94();
    v250 = operator new(8 * v249);
    v251 = (void ***)&v250[8 * v246];
    *v251 = v234;
    v243 = (uint64_t)(v251 + 1);
    v252 = (char *)(v242 - v244);
    if (v242 == v244)
    {
LABEL_366:
      *v240 = v251;
      v240[1] = (void *)v243;
      v240[2] = &v250[8 * v249];
      if (!v242)
        goto LABEL_368;
LABEL_367:
      operator delete(v242);
      goto LABEL_368;
    }
LABEL_357:
    v253 = (unint64_t)(v252 - 8);
    if (v253 < 0x58)
      goto LABEL_657;
    if ((unint64_t)(v242 - v250 - v245) < 0x20)
      goto LABEL_657;
    v254 = (v253 >> 3) + 1;
    v255 = 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
    v256 = &v242[-v255];
    v251 = (void ***)((char *)v251 - v255);
    v257 = &v250[8 * v246 - 16];
    v258 = v242 - 16;
    v259 = v254 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v260 = *(_OWORD *)v258;
      *(v257 - 1) = *((_OWORD *)v258 - 1);
      *v257 = v260;
      v257 -= 2;
      v258 -= 32;
      v259 -= 4;
    }
    while (v259);
    v242 = v256;
    if (v254 != (v254 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_657:
      do
      {
        v261 = (void **)*((_QWORD *)v242 - 1);
        v242 -= 8;
        *--v251 = v261;
      }
      while (v242 != v244);
    }
    v242 = (char *)*v240;
    *v240 = v251;
    v240[1] = (void *)v243;
    v240[2] = &v250[8 * v249];
    if (v242)
      goto LABEL_367;
LABEL_368:
    v240[1] = (void *)v243;
    v262 = (void *)address;
    v263 = (std::__shared_weak_count_vtbl *)xpc_array_create((xpc_object_t *)address, (uint64_t)(v411 - address) >> 3);
    v264 = (std::__shared_weak_count *)operator new();
    v266 = v264;
    v264->__shared_owners_ = 0;
    v267 = (unint64_t *)&v264->__shared_owners_;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v263;
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
    do
      v269 = __ldaxr(v267);
    while (__stlxr(v269 - 1, v267));
    if (v269)
    {
      if (!v263)
        goto LABEL_384;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v266);
      if (!v263)
        goto LABEL_384;
    }
    if (MEMORY[0x2276858AC](v263) != MEMORY[0x24BDACF78])
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 39, (uint64_t)"!IsValid() || IsOfType(Type::Array)", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v270 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v270 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v271 = qword_255795648;
        for (i9 = qword_255795650; v271 != i9; v271 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v271)(*(_QWORD *)(v271 + 8), "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
      }
      v273 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v273 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
    }
LABEL_384:
    if (v262)
      operator delete(v262);
    do
      v274 = __ldaxr(v237);
    while (__stlxr(v274 - 1, v237));
    if (v274)
    {
      v275 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
      v276 = v387;
      if (!*((_QWORD *)&v408 + 1))
        goto LABEL_395;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
      v275 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
      v276 = v387;
      if (!*((_QWORD *)&v408 + 1))
        goto LABEL_395;
    }
    v277 = (unint64_t *)&v275->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
LABEL_395:
    *(_QWORD *)&v398 = v263;
    *((_QWORD *)&v398 + 1) = v266;
    LODWORD(v265) = *((_DWORD *)v276 + 8);
    v279 = (unint64_t)exp2((double)v265 * 3.0);
    v395 = 0;
    v396 = 0;
    p_address = 0;
    *(_QWORD *)&v408 = &p_address;
    BYTE8(v408) = 0;
    if (v279)
    {
      if (v279 >> 61)
        sub_2233C8450();
      v280 = (v279 + 511) & 0x1FFFFFFFFFFFFE00;
      address = 0;
      if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v280, 1))
      {
        v372 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v373 = std::bad_alloc::bad_alloc(v372);
        __cxa_throw(v373, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v281 = address;
      p_address = (void **)address;
      v396 = address + 8 * v280;
      bzero((void *)address, 8 * v279);
      v282 = 0;
      v395 = (void **)(v281 + 8 * v279);
      v283 = p_address;
      v284 = (unsigned int *)(*((_QWORD *)v276 + 14) + 4);
      do
      {
        v285 = *(v284 - 1);
        if ((v285 & 1) == 0)
          v283[v282] = (void *)(*v284 | ((unint64_t)(v285 >> 2) << 32));
        ++v282;
        v284 += 2;
      }
      while (v279 != v282);
    }
    v408 = 0u;
    v409 = 0u;
    v286 = xpc_shmem_create_readonly();
    v287 = (std::__shared_weak_count *)operator new();
    v288 = v287;
    v287->__shared_owners_ = 0;
    v289 = (unint64_t *)&v287->__shared_owners_;
    v287->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v287->__shared_weak_owners_ = 0;
    v287[1].__vftable = (std::__shared_weak_count_vtbl *)v286;
    do
      v290 = __ldxr(v289);
    while (__stxr(v290 + 1, v289));
    do
      v291 = __ldaxr(v289);
    while (__stlxr(v291 - 1, v289));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v288);
    }
    *(_QWORD *)&v408 = v286;
    *((_QWORD *)&v408 + 1) = v288;
    v292 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(v395 - p_address);
    v293 = (std::__shared_weak_count *)operator new();
    v294 = v293;
    v293->__shared_owners_ = 0;
    v295 = (unint64_t *)&v293->__shared_owners_;
    v293->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v293->__shared_weak_owners_ = 0;
    v293[1].__vftable = v292;
    do
      v296 = __ldxr(v295);
    while (__stxr(v296 + 1, v295));
    do
      v297 = __ldaxr(v295);
    while (__stlxr(v297 - 1, v295));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v294);
    }
    *(_QWORD *)&v409 = v292;
    *((_QWORD *)&v409 + 1) = v294;
    address = (vm_address_t)operator new(0x10uLL);
    v411 = address;
    v414 = &address;
    v412 = address + 16;
    v413 = (std::__shared_weak_count_vtbl *)v408;
    sub_2232EA538((void ***)&v414, &v413);
    v413 = v292;
    v298 = (void **)v414;
    v300 = (char *)v414[1];
    v299 = (char *)v414[2];
    v385 = v263;
    if (v300 < v299)
    {
      *(_QWORD *)v300 = v292;
      v301 = (uint64_t)(v300 + 8);
      v11 = v388;
      goto LABEL_435;
    }
    v302 = (char *)*v414;
    v303 = (uint64_t)&v300[-*v414];
    v304 = v303 >> 3;
    v305 = (v303 >> 3) + 1;
    if (v305 >> 61)
      sub_22316E078();
    v306 = v299 - v302;
    if (v306 >> 2 > v305)
      v305 = v306 >> 2;
    if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8)
      v307 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v307 = v305;
    if (!v307)
    {
      v308 = 0;
      v309 = (std::__shared_weak_count_vtbl **)(8 * v304);
      *(_QWORD *)(8 * v304) = v292;
      v301 = 8 * v304 + 8;
      v310 = (char *)(v300 - v302);
      if (v300 != v302)
        goto LABEL_423;
      goto LABEL_426;
    }
    if (v307 >> 61)
      sub_223174E94();
    v308 = operator new(8 * v307);
    v309 = (std::__shared_weak_count_vtbl **)&v308[8 * v304];
    *v309 = v292;
    v301 = (uint64_t)(v309 + 1);
    v310 = (char *)(v300 - v302);
    if (v300 == v302)
    {
LABEL_426:
      *v298 = v309;
      v298[1] = (void *)v301;
      v298[2] = &v308[8 * v307];
      v11 = v388;
      if (!v300)
        goto LABEL_435;
      goto LABEL_434;
    }
LABEL_423:
    v311 = (unint64_t)(v310 - 8);
    if (v311 < 0x58)
      goto LABEL_658;
    if ((unint64_t)(v300 - v308 - v303) < 0x20)
      goto LABEL_658;
    v312 = (v311 >> 3) + 1;
    v313 = 8 * (v312 & 0x3FFFFFFFFFFFFFFCLL);
    v314 = &v300[-v313];
    v309 = (std::__shared_weak_count_vtbl **)((char *)v309 - v313);
    v315 = &v308[8 * v304 - 16];
    v316 = v300 - 16;
    v317 = v312 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v318 = *(_OWORD *)v316;
      *(v315 - 1) = *((_OWORD *)v316 - 1);
      *v315 = v318;
      v315 -= 2;
      v316 -= 32;
      v317 -= 4;
    }
    while (v317);
    v300 = v314;
    if (v312 != (v312 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_658:
      do
      {
        v319 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v300 - 1);
        v300 -= 8;
        *--v309 = v319;
      }
      while (v300 != v302);
    }
    v300 = (char *)*v298;
    *v298 = v309;
    v298[1] = (void *)v301;
    v298[2] = &v308[8 * v307];
    v11 = v388;
    if (v300)
LABEL_434:
      operator delete(v300);
LABEL_435:
    v298[1] = (void *)v301;
    v320 = (void *)address;
    v321 = (std::__shared_weak_count_vtbl *)xpc_array_create((xpc_object_t *)address, (uint64_t)(v411 - address) >> 3);
    v322 = (std::__shared_weak_count *)operator new();
    v323 = v322;
    v322->__shared_owners_ = 0;
    v324 = (unint64_t *)&v322->__shared_owners_;
    v322->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v322->__shared_weak_owners_ = 0;
    v322[1].__vftable = v321;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
    do
      v326 = __ldaxr(v324);
    while (__stlxr(v326 - 1, v324));
    if (v326)
    {
      if (!v321)
        goto LABEL_451;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v323);
      if (!v321)
        goto LABEL_451;
    }
    if (MEMORY[0x2276858AC](v321) != MEMORY[0x24BDACF78])
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 39, (uint64_t)"!IsValid() || IsOfType(Type::Array)", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v327 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v327 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v328 = qword_255795648;
        for (i10 = qword_255795650; v328 != i10; v328 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v328)(*(_QWORD *)(v328 + 8), "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
      }
      v330 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      v11 = v388;
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
    }
LABEL_451:
    if (v320)
      operator delete(v320);
    do
      v331 = __ldaxr(v295);
    while (__stlxr(v331 - 1, v295));
    if (v331)
    {
      v332 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
      if (!*((_QWORD *)&v408 + 1))
        goto LABEL_461;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
      v332 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
      if (!*((_QWORD *)&v408 + 1))
        goto LABEL_461;
    }
    v333 = (unint64_t *)&v332->__shared_owners_;
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (v334)
    {
LABEL_461:
      *(_QWORD *)&v399 = v321;
      *((_QWORD *)&v399 + 1) = v323;
      v335 = p_address;
      if (p_address)
      {
LABEL_462:
        v395 = v335;
        if (MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v335, v396 - (_QWORD)v335))
        {
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2245855ED, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
          abort();
        }
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
      *(_QWORD *)&v399 = v321;
      *((_QWORD *)&v399 + 1) = v323;
      v335 = p_address;
      if (p_address)
        goto LABEL_462;
    }
    v336 = (xpc_object_t *)operator new(0x18uLL);
    *v336 = v386;
    v336[1] = v385;
    v336[2] = v321;
    v337 = (std::__shared_weak_count_vtbl *)xpc_array_create(v336, 3uLL);
    v338 = (std::__shared_weak_count *)operator new();
    v339 = v338;
    v338->__shared_owners_ = 0;
    v340 = (unint64_t *)&v338->__shared_owners_;
    v338->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v338->__shared_weak_owners_ = 0;
    v338[1].__vftable = v337;
    v392 = v337;
    v393 = v338;
    do
      v341 = __ldxr(v340);
    while (__stxr(v341 + 1, v340));
    do
      v342 = __ldaxr(v340);
    while (__stlxr(v342 - 1, v340));
    if (v342)
    {
      if (!v392)
        goto LABEL_479;
LABEL_470:
      if (MEMORY[0x2276858AC]() != MEMORY[0x24BDACF78])
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 39, (uint64_t)"!IsValid() || IsOfType(Type::Array)", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v343 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v344 = qword_255795648;
          for (i11 = qword_255795650; v344 != i11; v344 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v344)(*(_QWORD *)(v344 + 8), "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
        }
        v346 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "!IsValid() || IsOfType(Type::Array)", 35, "", 0);
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v339);
      if (v392)
        goto LABEL_470;
    }
LABEL_479:
    operator delete(v336);
    do
      v347 = __ldaxr(v324);
    while (__stlxr(v347 - 1, v324));
    if (v347)
    {
      v348 = (std::__shared_weak_count *)*((_QWORD *)&v398 + 1);
      if (!*((_QWORD *)&v398 + 1))
        goto LABEL_488;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
      v348 = (std::__shared_weak_count *)*((_QWORD *)&v398 + 1);
      if (!*((_QWORD *)&v398 + 1))
        goto LABEL_488;
    }
    v349 = (unint64_t *)&v348->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (v350)
    {
LABEL_488:
      v351 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
      if (*((_QWORD *)&v397 + 1))
        goto LABEL_489;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
      v351 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
      if (*((_QWORD *)&v397 + 1))
      {
LABEL_489:
        v352 = (unint64_t *)&v351->__shared_owners_;
        do
          v353 = __ldaxr(v352);
        while (__stlxr(v353 - 1, v352));
        if (!v353)
        {
          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
          std::__shared_weak_count::__release_weak(v351);
        }
      }
    }
    value[0] = v374;
    *(xpc_object_t *)((char *)value + *((_QWORD *)v374 - 3)) = v376;
    *(_QWORD *)&v401 = v375;
    *((_QWORD *)&v401 + 1) = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v405[3]) < 0)
      operator delete(v405[1]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v406);
    v354 = xdict;
    if (!xdict)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v355 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v355 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v356 = qword_255795648;
        for (i12 = qword_255795650; v356 != i12; v356 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v356)(*(_QWORD *)(v356 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v358 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v358 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v354 = xdict;
    }
    xpc_dictionary_set_value(v354, "mesh_spatial_lookup", v392);
    v359 = v393;
    if (!v393)
      goto LABEL_511;
    v360 = (unint64_t *)&v393->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (v361)
      goto LABEL_511;
    ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
    std::__shared_weak_count::__release_weak(v359);
    v362 = *v389;
    if (!*v389)
    {
LABEL_512:
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v363 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v363 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v364 = qword_255795648;
        for (i13 = qword_255795650; v364 != i13; v364 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v364)(*(_QWORD *)(v364 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v366 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v366 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v362 = *v389;
    }
LABEL_520:
    xpc_dictionary_set_value(v362, key, xdict);
    v367 = v391;
    if (v391)
    {
      v368 = (unint64_t *)&v391->__shared_owners_;
      do
        v369 = __ldaxr(v368);
      while (__stlxr(v369 - 1, v368));
      if (!v369)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
      }
    }
    v10 = v384;
LABEL_10:
    v11 += 192;
    if (v11 != v10)
      continue;
    break;
  }
}

void sub_22340D3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (v49)
      xpc_release(v49);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_22340DC08(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      xpc_release(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x22340DC00);
}

void sub_22340DC2C()
{
  __cxa_end_catch();
  JUMPOUT(0x22340DBE8);
}

void sub_22340DC48(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4;
  std::__shared_weak_count_vtbl *v5;
  uint64_t v6;
  BOOL v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  const char *v20[2];
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;

  v4 = *a1;
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a1;
  }
  if (!xpc_dictionary_get_value(v4, "meshes"))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22340DE98(exception, "XPC mesh state doesnt contain the required entries for decoding");
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20[0] = "meshes";
  v20[1] = (const char *)6;
  sub_224564900(a1, v20, &v21);
  v5 = v21;
  v6 = MEMORY[0x2276858AC](v21);
  v11 = v6 != MEMORY[0x24BDACFA0]
     || MEMORY[0x24BDACF98] == MEMORY[0x24BDACFA0]
     || v6 == MEMORY[0x24BDACF90]
     || v6 == MEMORY[0x24BDACF88]
     || v6 == MEMORY[0x24BDACF78]
     || v6 == MEMORY[0x24BDACF80];
  if (v11
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v23, v5, 1);
  v12.n128_f64[0] = sub_22340ED44(&v23, (uint64_t)sub_22340EF00, a2);
  v13 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v12);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_22340DE54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22340DE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22340DE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_22340DE98(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
  return result;
}

uint64_t sub_22340DEB8(uint64_t a1, void **a2)
{
  uint64_t *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v14;
  std::__shared_weak_count *v15;

  v4 = (uint64_t *)(a1 + 24);
  kdebug_trace();
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_9;
  sub_2234597A0((const unsigned __int8 **)a1, (std::__shared_weak_count_vtbl **)&v14);
  v5 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *a2;
  }
  xpc_dictionary_set_value(v5, "meshes_removed", v14);
  v6 = v15;
  if (!v15)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_9:
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
      return kdebug_trace();
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
      return kdebug_trace();
  }
  sub_2234097E8(&v14, v4);
  v9 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = *a2;
  }
  xpc_dictionary_set_value(v9, "meshes", v14);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return kdebug_trace();
}

void sub_22340E0A8(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  xpc_object_t *v3;
  uint64_t v4;
  const std::runtime_error *v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  const char *v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, const char *);
  v12 = va_arg(va1, _QWORD);
  sub_223167354(v4 - 48);
  if (a2 == 2)
  {
    v7 = (const std::runtime_error *)__cxa_begin_catch(a1);
    v10 = "meshes_removed";
    v12 = 14;
    sub_2245647E8(v3, (const char **)va);
    v10 = "meshes";
    v12 = 6;
    sub_2245647E8(v3, (const char **)va);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, v7);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
    __cxa_throw(v9, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_2231874DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22340E158()
{
  __cxa_end_catch();
  JUMPOUT(0x22340E168);
}

uint64_t sub_22340E17C@<X0>(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4;
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  char *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *__p[2];
  uint64_t v32;
  char v33;
  const char *v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  void *v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  int v42;
  char v43;

  v40 = 0u;
  v41 = 0u;
  v42 = 728337624;
  kdebug_trace();
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a1;
  }
  if (xpc_dictionary_get_value(v4, "meshes_removed"))
  {
    v34 = "meshes_removed";
    v35 = 14;
    sub_224564900(a1, &v34, &v36);
    v5 = v36;
    if (MEMORY[0x2276858AC](v36) != MEMORY[0x24BDACF78]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22456428C((std::__shared_weak_count_vtbl **)&v38, v5, 1);
    sub_2234598F8(&v38, (uint64_t)__p);
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v6;
      operator delete(v6);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v32;
    __p[1] = 0;
    v32 = 0;
    __p[0] = 0;
    v7 = v39;
    if (!v39)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = v37;
      if (!v37)
        goto LABEL_17;
    }
    else
    {
LABEL_13:
      v10 = v37;
      if (!v37)
        goto LABEL_17;
    }
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = *a1;
      if (!*a1)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
LABEL_17:
  v13 = *a1;
  if (!*a1)
  {
LABEL_18:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *a1;
  }
LABEL_20:
  if (!xpc_dictionary_get_value(v13, "meshes"))
    return kdebug_trace();
  v34 = "meshes";
  v35 = 6;
  sub_224564900(a1, &v34, &v36);
  v14 = v36;
  v15 = MEMORY[0x2276858AC](v36);
  if ((v15 != MEMORY[0x24BDACFA0]
     || MEMORY[0x24BDACF98] == MEMORY[0x24BDACFA0]
     || v15 == MEMORY[0x24BDACF90]
     || v15 == MEMORY[0x24BDACF88]
     || v15 == MEMORY[0x24BDACF78]
     || v15 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v38, v14, 1);
  sub_22340ED44(&v38, (uint64_t)sub_22340EF00, (uint64_t)__p);
  v16 = sub_22341348C((void **)(a2 + 24), (__n128 *)__p);
  *(_BYTE *)(a2 + 48) = v33;
  v17 = (char *)__p[0];
  if (!__p[0])
    goto LABEL_43;
  v18 = (char *)__p[1];
  v19 = __p[0];
  if (__p[1] == __p[0])
    goto LABEL_42;
  do
  {
    if (!*(v18 - 8))
      goto LABEL_37;
    v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 2);
    if (!v20)
      goto LABEL_37;
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22)
    {
LABEL_37:
      v23 = *((unsigned int *)v18 - 36);
      if ((_DWORD)v23 == -1)
        goto LABEL_31;
LABEL_38:
      ((void (*)(char *, char *, __n128))off_24EC365B0[v23])(&v43, v18 - 160, v16);
      goto LABEL_31;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v16);
    std::__shared_weak_count::__release_weak(v20);
    v23 = *((unsigned int *)v18 - 36);
    if ((_DWORD)v23 != -1)
      goto LABEL_38;
LABEL_31:
    *((_DWORD *)v18 - 36) = -1;
    v18 -= 192;
  }
  while (v18 != v17);
  v19 = __p[0];
LABEL_42:
  __p[1] = v17;
  operator delete(v19);
LABEL_43:
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v16);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v16);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return kdebug_trace();
}

void sub_22340E61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  sub_22340E78C(v7);
  sub_2231874DC((uint64_t)va2);
  _Unwind_Resume(a1);
}

void **sub_22340E698(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_15;
  do
  {
    if (!*(v3 - 8))
      goto LABEL_10;
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *((unsigned int *)v3 - 36);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, char *))off_24EC365B0[v8])(&v10, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *((unsigned int *)v3 - 36);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *((_DWORD *)v3 - 36) = -1;
    v3 -= 192;
  }
  while (v3 != v2);
  v4 = *a1;
LABEL_15:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_22340E78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  char v11;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_16;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 24);
  if (v3 == v2)
    goto LABEL_15;
  do
  {
    if (!*(_BYTE *)(v3 - 8))
      goto LABEL_10;
    v5 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, uint64_t))off_24EC365B0[v8])(&v11, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *(_DWORD *)(v3 - 144) = -1;
    v3 -= 192;
  }
  while (v3 != v2);
  v4 = *(void **)(a1 + 24);
LABEL_15:
  *(_QWORD *)(a1 + 32) = v2;
  operator delete(v4);
LABEL_16:
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_22340E890(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *object, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_22340E998(&v12, object);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = object;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = object;
    v13 = v5;
    *a1 = object;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_22340E96C(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    xpc_release(v1);
  __cxa_rethrow();
}

void sub_22340E984(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_22340E998(_QWORD *a1, xpc_object_t object)
{
  _QWORD *v4;

  if (object)
    xpc_retain(object);
  *a1 = object;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC36B90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = object;
  a1[1] = v4;
  return a1;
}

void sub_22340E9F8(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    xpc_release(v1);
  __cxa_rethrow();
}

void sub_22340EA10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22340EA28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22340EA4C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    xpc_release(v1);
}

uint64_t sub_22340EA6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit3xpc3PtrC1EPvEUlS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22340EADC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = MEMORY[0x24BEDB858];
  v5 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = v9;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v10, (void *)(a1 + 24));
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v7[4];
  v12 = v7[5];
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v6 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = v7[1];
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24)) = v7[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_22340EBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_22340EC14(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    if (MEMORY[0x2276857A4](*MEMORY[0x24BDAEC58], v2, a1[2] - v2))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2245855ED, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_22457406C);
      abort();
    }
  }
  return a1;
}

uint64_t sub_22340EC98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

double sub_22340ED44@<D0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  size_t count;
  void *v7;
  double result;
  std::runtime_error *exception;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD applier[6];

  v13 = a2;
  v10 = 0uLL;
  v11 = 0;
  v5 = *a1;
  if (!v5)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 81, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *a1;
  }
  count = xpc_dictionary_get_count(v5);
  sub_2234104D0((uint64_t)&v10, count);
  v7 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/DictionaryRef.h", 314, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245855ED, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v7 = *a1;
  }
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 0x40000000;
  applier[2] = sub_223410950;
  applier[3] = &unk_24EC365D0;
  applier[4] = &v10;
  applier[5] = &v13;
  if (!xpc_dictionary_apply(v7, applier))
  {
    sub_2234103F4((uint64_t *)&v10);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to decode dictionary of {UUID, ref}.");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_QWORD *)(a3 + 16) = v11;
  *(_BYTE *)(a3 + 24) = v12;
  return result;
}

void sub_22340EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_22340E698(&a9);
  _Unwind_Resume(a1);
}

void sub_22340EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22340E698(&a9);
  _Unwind_Resume(a1);
}

void sub_22340EEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22340E698(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22340EF00@<X0>(_OWORD *a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  size_t v22;
  void *v23;
  __int128 v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  size_t v41;
  xpc_object_t v42;
  xpc_object_t value;
  uint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  xpc_object_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  std::__shared_weak_count_vtbl *v60;
  void *v61;
  uint64_t v62;
  const void *bytes_ptr;
  size_t length;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char *v135;
  void *v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _OWORD *v154;
  uint64_t v155;
  char v156;
  char v157;
  unint64_t v158;
  const char *v159[2];
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  char v166;
  _OWORD v167[2];
  __int128 v168;
  void *v169[4];
  __int128 v170;
  xpc_object_t v171;
  std::__shared_weak_count *v172;
  void *v173;
  std::__shared_weak_count *v174;
  void *v175;
  std::__shared_weak_count *v176;
  void *v177;
  size_t v178;
  uint64_t v179;
  xpc_object_t v180;
  std::__shared_weak_count *v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *region;
  size_t v187;
  uint64_t v188;
  std::__shared_weak_count_vtbl *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  __int128 __p;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  void *v205;
  __int128 v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  _OWORD v211[2];
  const void *v212;
  void *v213;
  _BYTE v214[12];
  int v215;
  __int128 v216;
  __int128 v217;
  _OWORD v218[2];
  _BYTE v219[33];
  _OWORD v220[7];
  _QWORD v221[22];

  v221[19] = *MEMORY[0x24BDAC8D0];
  v170 = 0u;
  v168 = 0u;
  memset(v169, 0, sizeof(v169));
  v167[1] = 0u;
  sub_223411F34((void **)v219, a2, "mesh_vertices", (const char *)0xD, "num_mesh_vertices", (const char *)0x11);
  *(_QWORD *)&v167[0] = *(_QWORD *)v219;
  *(_OWORD *)((char *)v167 + 8) = *(_OWORD *)&v219[8];
  *(_QWORD *)v219 = "mesh_faces";
  *(_QWORD *)&v219[8] = 10;
  v189 = (std::__shared_weak_count_vtbl *)"num_mesh_faces";
  v190 = 14;
  sub_224564900(a2, (const char **)v219, v211);
  v6 = *(void **)&v211[0];
  v216 = v211[0];
  if (*((_QWORD *)&v211[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v211[0] + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_224564900(a2, (const char **)&v189, &v213);
  v9 = sub_224565390(&v213);
  region = 0;
  v10 = xpc_shmem_map(v6, &region);
  v11 = region;
  v12 = *(std::__shared_weak_count **)v214;
  if (*(_QWORD *)v214)
  {
    v13 = (unint64_t *)(*(_QWORD *)v214 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (!*((_QWORD *)&v216 + 1))
    goto LABEL_13;
  v16 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
    if (!*((_QWORD *)&v211[0] + 1))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
    if (!*((_QWORD *)&v211[0] + 1))
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
LABEL_17:
    v21 = (void *)*((_QWORD *)&v167[1] + 1);
    v22 = v168;
    *((_QWORD *)&v167[1] + 1) = v11;
    *(_QWORD *)&v168 = v10;
    *((_QWORD *)&v168 + 1) = v9;
    if (!v21)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  v21 = (void *)*((_QWORD *)&v167[1] + 1);
  v22 = v168;
  *((_QWORD *)&v167[1] + 1) = v11;
  *(_QWORD *)&v168 = v10;
  *((_QWORD *)&v168 + 1) = v9;
  if (v21)
LABEL_18:
    munmap(v21, v22);
LABEL_19:
  sub_223411F34((void **)v219, a2, "mesh_normals", (const char *)0xC, "num_mesh_normals", (const char *)0x10);
  v23 = v169[0];
  v169[0] = *(void **)v219;
  *(_QWORD *)v219 = v23;
  v24 = *(_OWORD *)&v169[1];
  *(_OWORD *)&v169[1] = *(_OWORD *)&v219[8];
  *(_OWORD *)&v219[8] = v24;
  if (v23)
    munmap(v23, v24);
  *(_QWORD *)v219 = "mesh_semantics";
  *(_QWORD *)&v219[8] = 14;
  v189 = (std::__shared_weak_count_vtbl *)"num_mesh_semantics";
  v190 = 18;
  sub_224564900(a2, (const char **)v219, v211);
  v25 = *(void **)&v211[0];
  v216 = v211[0];
  if (*((_QWORD *)&v211[0] + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v211[0] + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  sub_224564900(a2, (const char **)&v189, &v213);
  v28 = sub_224565390(&v213);
  region = 0;
  v29 = xpc_shmem_map(v25, &region);
  v30 = region;
  v31 = *(std::__shared_weak_count **)v214;
  if (*(_QWORD *)v214)
  {
    v32 = (unint64_t *)(*(_QWORD *)v214 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (!*((_QWORD *)&v216 + 1))
    goto LABEL_33;
  v35 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
    if (!*((_QWORD *)&v211[0] + 1))
      goto LABEL_37;
  }
  else
  {
LABEL_33:
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
    if (!*((_QWORD *)&v211[0] + 1))
      goto LABEL_37;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_37:
    v40 = v169[3];
    v41 = v170;
    v169[3] = v30;
    *(_QWORD *)&v170 = v29;
    *((_QWORD *)&v170 + 1) = v28;
    if (!v40)
      goto LABEL_39;
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = v169[3];
  v41 = v170;
  v169[3] = v30;
  *(_QWORD *)&v170 = v29;
  *((_QWORD *)&v170 + 1) = v28;
  if (v40)
LABEL_38:
    munmap(v40, v41);
LABEL_39:
  v42 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v42 = *a2;
  }
  value = xpc_dictionary_get_value(v42, "mesh_to_world");
  v44 = MEMORY[0x24BDACF78];
  if (value)
  {
    v213 = "mesh_to_world";
    *(_QWORD *)v214 = 13;
    sub_224564900(a2, (const char **)&v213, v211);
    v45 = *(std::__shared_weak_count_vtbl **)&v211[0];
    if (MEMORY[0x2276858AC](*(_QWORD *)&v211[0]) != v44
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22456428C(&v189, v45, 1);
    sub_223456C24((xpc_object_t *)&v189, (float *)v219);
    v156 = v219[0];
    v216 = *(_OWORD *)&v219[1];
    v217 = *(_OWORD *)&v219[17];
    v218[0] = v220[0];
    *(_OWORD *)((char *)v218 + 15) = *(_OWORD *)((char *)v220 + 15);
    v46 = (std::__shared_weak_count *)v190;
    if (v190)
    {
      v47 = (unint64_t *)(v190 + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
    if (!*((_QWORD *)&v211[0] + 1))
      goto LABEL_54;
    v50 = (unint64_t *)(*((_QWORD *)&v211[0] + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      v52 = *a2;
      if (*a2)
        goto LABEL_69;
    }
    else
    {
LABEL_54:
      v52 = *a2;
      if (*a2)
        goto LABEL_69;
    }
  }
  else
  {
    v156 = 0;
    v52 = *a2;
    if (*a2)
      goto LABEL_69;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v52 = *a2;
LABEL_69:
  if (!xpc_dictionary_get_value(v52, "mesh_room_id"))
  {
    v158 = 0;
    v55 = 0;
    v157 = 0;
    LOBYTE(v164) = 0;
    v166 = 0;
    v59 = *a2;
    if (*a2)
      goto LABEL_80;
    goto LABEL_78;
  }
  v189 = (std::__shared_weak_count_vtbl *)"mesh_room_id";
  v190 = 12;
  sub_224564900(a2, (const char **)&v189, v219);
  v53 = sub_22456549C((xpc_object_t *)v219);
  v155 = v54;
  v55 = v53;
  v158 = v53 & 0xFFFFFFFFFFFFFF00;
  v56 = *(std::__shared_weak_count **)&v219[8];
  if (*(_QWORD *)&v219[8])
  {
    v57 = (unint64_t *)(*(_QWORD *)&v219[8] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v157 = 1;
  LOBYTE(v164) = 0;
  v166 = 0;
  v59 = *a2;
  if (!*a2)
  {
LABEL_78:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v59 = *a2;
  }
LABEL_80:
  if (!xpc_dictionary_get_value(v59, "mesh_spatial_lookup"))
    goto LABEL_185;
  v159[0] = "mesh_spatial_lookup";
  v159[1] = (const char *)19;
  sub_224564900(a2, v159, &v160);
  v60 = v160;
  if (MEMORY[0x2276858AC](v160) != v44
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&v162, v60, 1);
  v154 = a1;
  sub_224564350((xpc_object_t *)&v162, 0, v219);
  v61 = *(void **)v219;
  v62 = MEMORY[0x2276858AC](*(_QWORD *)v219);
  if ((v62 == v44
     || v62 == MEMORY[0x24BDACF80]
     || v62 != MEMORY[0x24BDACF90]
     || MEMORY[0x24BDACF88] == MEMORY[0x24BDACF90])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 181, (uint64_t)"IsOfType(Type::Data)", 20, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C)|| (bytes_ptr = xpc_data_get_bytes_ptr(v61), length = xpc_data_get_length(v61), v65 = (std::__shared_weak_count_vtbl *)length, !bytes_ptr)&& length&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2245855ED, 0,
         (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v66 = *(std::__shared_weak_count **)&v219[8];
  if (*(_QWORD *)&v219[8])
  {
    v67 = (unint64_t *)(*(_QWORD *)&v219[8] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v212 = bytes_ptr;
  v189 = v65;
  sub_2234120D8((uint64_t)v219, (uint64_t *)&v212, &v189);
  memset((char *)v211 + 4, 0, 24);
  LODWORD(v189) = 1;
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  sub_224564350((xpc_object_t *)&v162, 1uLL, &v189);
  v69 = v189;
  if (MEMORY[0x2276858AC](v189) != v44
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&v209, v69, 1);
  v70 = (std::__shared_weak_count *)v190;
  if (v190)
  {
    v71 = (unint64_t *)(v190 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  sub_224564350((xpc_object_t *)&v162, 2uLL, &v189);
  v73 = v189;
  if (MEMORY[0x2276858AC](v189) != v44
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&v207, v73, 1);
  v74 = (std::__shared_weak_count *)v190;
  if (v190)
  {
    v75 = (unint64_t *)(v190 + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  sub_2245644B8((xpc_object_t *)&v207, 0, &v182);
  v77 = v182;
  v184 = v182;
  v185 = v183;
  if (v183)
  {
    v78 = (unint64_t *)&v183->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  sub_2245644B8((xpc_object_t *)&v207, 1uLL, &v180);
  v80 = sub_224565390(&v180);
  region = 0;
  v187 = 0;
  v188 = 0;
  v213 = 0;
  v187 = xpc_shmem_map(v77, &v213);
  v188 = v80;
  region = v213;
  sub_2245644B8((xpc_object_t *)&v209, 0, &v173);
  v81 = v173;
  v175 = v173;
  v176 = v174;
  if (v174)
  {
    v82 = (unint64_t *)&v174->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  sub_2245644B8((xpc_object_t *)&v209, 1uLL, &v171);
  v84 = sub_224565390(&v171);
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v213 = 0;
  v178 = xpc_shmem_map(v81, &v213);
  v179 = v84;
  v177 = v213;
  v85.i32[0] = HIDWORD(v211[0]);
  v86.i32[0] = DWORD2(v211[1]);
  v213 = *(void **)((char *)v211 + 4);
  *(_DWORD *)v214 = HIDWORD(v211[0]);
  v215 = DWORD2(v211[1]);
  *(_QWORD *)&v214[4] = *(_QWORD *)&v211[1];
  sub_2233C80D8((uint64_t)&v189, (uint64_t)&v213, v211[0], (uint64_t)&region, &v177, v85, v86);
  v87 = (char *)operator new(0xC8uLL);
  v88 = (std::__shared_weak_count *)v87;
  *((_QWORD *)v87 + 1) = 0;
  v89 = (unint64_t *)(v87 + 8);
  *((_QWORD *)v87 + 2) = 0;
  *(_QWORD *)v87 = &off_24EC36AF0;
  *((_QWORD *)v87 + 4) = v190;
  v90 = v193;
  *((_DWORD *)v87 + 10) = v191;
  *(_QWORD *)(v87 + 44) = v192;
  v91 = v194;
  v92 = v196;
  *((_DWORD *)v87 + 13) = v90;
  *((_DWORD *)v87 + 14) = v91;
  *((_DWORD *)v87 + 17) = v92;
  *(_QWORD *)(v87 + 60) = v195;
  *(_OWORD *)(v87 + 72) = __p;
  v93 = v202;
  *((_QWORD *)v87 + 11) = v198;
  __p = 0uLL;
  v94 = v201;
  v95 = v199;
  *((_OWORD *)v87 + 7) = v200;
  *((_OWORD *)v87 + 8) = v94;
  *((_OWORD *)v87 + 6) = v95;
  *((_DWORD *)v87 + 38) = v203;
  *((_QWORD *)v87 + 18) = v93;
  *((_OWORD *)v87 + 10) = v204;
  *((_QWORD *)v87 + 3) = &off_24EC36180;
  v96 = v87 + 24;
  *((_QWORD *)v87 + 22) = v205;
  v198 = 0;
  v205 = 0;
  *(_OWORD *)(v87 + 184) = v206;
  v206 = 0uLL;
  do
    v97 = __ldxr(v89);
  while (__stxr(v97 + 1, v89));
  do
    v98 = __ldaxr(v89);
  while (__stlxr(v98 - 1, v89));
  if (v98)
  {
    v189 = (std::__shared_weak_count_vtbl *)&off_24EC36180;
    v99 = v205;
    if (v205)
      goto LABEL_121;
LABEL_124:
    v189 = (std::__shared_weak_count_vtbl *)&off_24EC36140;
    v100 = (void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_126;
    goto LABEL_125;
  }
  (*(void (**)(char *))(*(_QWORD *)v87 + 16))(v87);
  std::__shared_weak_count::__release_weak(v88);
  v189 = (std::__shared_weak_count_vtbl *)&off_24EC36180;
  v99 = v205;
  if (!v205)
    goto LABEL_124;
LABEL_121:
  munmap(v99, v206);
  v205 = 0;
  v189 = (std::__shared_weak_count_vtbl *)&off_24EC36140;
  v100 = (void *)__p;
  if ((_QWORD)__p)
  {
LABEL_125:
    *((_QWORD *)&__p + 1) = v100;
    operator delete(v100);
  }
LABEL_126:
  if (v177)
  {
    munmap(v177, v178);
    v177 = 0;
  }
  v101 = v172;
  if (v172)
  {
    v102 = (unint64_t *)&v172->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v176;
  if (!v176)
    goto LABEL_137;
  v105 = (unint64_t *)&v176->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
    std::__shared_weak_count::__release_weak(v104);
    v107 = v174;
    if (!v174)
      goto LABEL_141;
  }
  else
  {
LABEL_137:
    v107 = v174;
    if (!v174)
      goto LABEL_141;
  }
  v108 = (unint64_t *)&v107->__shared_owners_;
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (v109)
  {
LABEL_141:
    v110 = region;
    if (!region)
      goto LABEL_143;
    goto LABEL_142;
  }
  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
  std::__shared_weak_count::__release_weak(v107);
  v110 = region;
  if (region)
  {
LABEL_142:
    munmap(v110, v187);
    region = 0;
  }
LABEL_143:
  v111 = v181;
  if (v181)
  {
    v112 = (unint64_t *)&v181->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v185;
  if (v185)
  {
    v115 = (unint64_t *)&v185->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v183;
  if (v183)
  {
    v118 = (unint64_t *)&v183->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v208;
  if (v208)
  {
    v121 = (unint64_t *)&v208->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v210;
  if (v210)
  {
    v124 = (unint64_t *)&v210->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  std::istream::~istream();
  sub_22341293C((uint64_t)&v219[16]);
  MEMORY[0x227684BE0](v221);
  v164 = v96;
  if (v166)
  {
    v126 = v165;
    v165 = v88;
    if (v126)
    {
      v127 = (unint64_t *)&v126->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  else
  {
    v165 = v88;
    v166 = 1;
  }
  v129 = v163;
  a1 = v154;
  if (v163)
  {
    v130 = (unint64_t *)&v163->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v161;
  if (v161)
  {
    v133 = (unint64_t *)&v161->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
LABEL_185:
  *(_OWORD *)a3 = *a1;
  v135 = (char *)operator new(0x78uLL);
  *(_QWORD *)v135 = &off_24EC36B40;
  *((_QWORD *)v135 + 3) = *(_QWORD *)&v167[0];
  *((_QWORD *)v135 + 6) = *((_QWORD *)&v167[1] + 1);
  v136 = v169[3];
  *((void **)v135 + 9) = v169[0];
  *(_OWORD *)(v135 + 8) = 0u;
  *(_QWORD *)&v167[0] = 0;
  *((_OWORD *)v135 + 2) = *(_OWORD *)((char *)v167 + 8);
  memset((char *)v167 + 8, 0, 24);
  *(_OWORD *)(v135 + 56) = v168;
  v168 = 0u;
  *((_OWORD *)v135 + 5) = *(_OWORD *)&v169[1];
  *(_OWORD *)&v169[1] = 0u;
  *((_QWORD *)v135 + 12) = v136;
  v169[0] = 0;
  v169[3] = 0;
  *(_OWORD *)(v135 + 104) = v170;
  v170 = 0u;
  *(_QWORD *)(a3 + 16) = v135 + 24;
  *(_QWORD *)(a3 + 24) = v135;
  *(_OWORD *)v219 = 0u;
  *(_DWORD *)(a3 + 32) = 1;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (value)
  {
    *(_BYTE *)(a3 + 40) = v156;
    v137 = v217;
    *(_OWORD *)(a3 + 41) = v216;
    *(_OWORD *)(a3 + 57) = v137;
    *(_OWORD *)(a3 + 73) = v218[0];
    *(_OWORD *)(a3 + 88) = *(_OWORD *)((char *)v218 + 15);
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_QWORD *)(a3 + 108) = v55 | v158;
  *(_QWORD *)(a3 + 116) = v155;
  *(_BYTE *)(a3 + 124) = v157;
  v213 = "mesh_bbox";
  *(_QWORD *)v214 = 9;
  sub_224564900(a2, (const char **)&v213, v211);
  sub_22456428C(&v189, *(std::__shared_weak_count_vtbl **)&v211[0], 1);
  sub_223457FC8((xpc_object_t *)&v189, (float *)(a3 + 128));
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  if (v166)
  {
    v138 = v165;
    *(_QWORD *)(a3 + 152) = v164;
    *(_QWORD *)(a3 + 160) = v138;
    if (v138)
    {
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 1, v139));
    }
    *(_BYTE *)(a3 + 168) = 1;
  }
  v141 = (std::__shared_weak_count *)v190;
  if (v190)
  {
    v142 = (unint64_t *)(v190 + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = (std::__shared_weak_count *)*((_QWORD *)&v211[0] + 1);
  if (*((_QWORD *)&v211[0] + 1))
  {
    v145 = (unint64_t *)(*((_QWORD *)&v211[0] + 1) + 8);
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = *(std::__shared_weak_count **)&v219[8];
  if (*(_QWORD *)&v219[8])
  {
    v148 = (unint64_t *)(*(_QWORD *)&v219[8] + 8);
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if (v166)
  {
    v150 = v165;
    if (v165)
    {
      v151 = (unint64_t *)&v165->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
  }
  return sub_22341340C((uint64_t)v167);
}

void sub_22341016C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  sub_2233C8380(&a54);
  sub_2233C8348((uint64_t)&a42);
  sub_223167354((uint64_t)&a36);
  sub_223167354((uint64_t)&a40);
  sub_223167354((uint64_t)&a38);
  sub_223412208((uint64_t)&a51);
  sub_223167354((uint64_t)&a45);
  sub_223167354((uint64_t)&a49);
  sub_223167354((uint64_t)&a47);
  sub_223167354((uint64_t)&STACK[0x218]);
  sub_223167354((uint64_t)&STACK[0x228]);
  sub_223412240((uint64_t)&STACK[0x2C8]);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a16);
  sub_223224234((uint64_t)&a20);
  sub_22341340C((uint64_t)&a23);
  JUMPOUT(0x223410360);
}

void sub_223410368()
{
  sub_223167354((uint64_t)&STACK[0x2C8]);
  JUMPOUT(0x223410318);
}

void sub_223410378(_Unwind_Exception *a1, int a2)
{
  std::runtime_error *exception;

  if (a2)
  {
    __cxa_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Couldnt deserialize spatial lookup");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(a1);
}

void sub_2234103C8()
{
  __cxa_end_catch();
  JUMPOUT(0x223410310);
}

void sub_2234103E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2234103F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    while (1)
    {
      if (*(_BYTE *)(v3 - 8))
      {
        v4 = *(std::__shared_weak_count **)(v3 - 16);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
            break;
        }
      }
      v7 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v7 != -1)
        goto LABEL_10;
LABEL_3:
      *(_DWORD *)(v3 - 144) = -1;
      v3 -= 192;
      if (v3 == v2)
        goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v7 == -1)
      goto LABEL_3;
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC365B0[v7])(&v8, v3 - 160);
    goto LABEL_3;
  }
LABEL_13:
  a1[1] = v2;
}

void sub_2234104D0(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 192 * a2;
    v6 = (char *)operator new(192 * a2);
    v7 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v6[v5];
    }
    else
    {
      v26 = &v6[v5];
      v8 = 0;
      do
      {
        v9 = &v7[v8];
        v10 = &v4[v8];
        *((_OWORD *)v9 - 12) = *(_OWORD *)&v4[v8 - 192];
        *((_OWORD *)v9 - 11) = *(_OWORD *)&v4[v8 - 176];
        v7[v8 - 160] = 0;
        v11 = (uint64_t)&v7[v8 - 160];
        *((_DWORD *)v9 - 36) = -1;
        v12 = *(unsigned int *)&v4[v8 - 144];
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, uint64_t, char *))off_24EC365C0[v12])(&v27, v11, v10 - 160);
          *((_DWORD *)v9 - 36) = v12;
        }
        *(v9 - 136) = 0;
        *(v9 - 72) = 0;
        if (*(v10 - 72))
        {
          v13 = *(_OWORD *)&v4[v8 - 136];
          v14 = *(_OWORD *)&v4[v8 - 120];
          v15 = *(_OWORD *)&v4[v8 - 88];
          *(_OWORD *)(v9 - 104) = *(_OWORD *)&v4[v8 - 104];
          *(_OWORD *)(v9 - 88) = v15;
          *(_OWORD *)(v9 - 136) = v13;
          *(_OWORD *)(v9 - 120) = v14;
          *(v9 - 72) = 1;
        }
        v16 = &v7[v8];
        v17 = &v4[v8];
        v18 = *(_OWORD *)&v4[v8 - 68];
        *(v16 - 52) = v4[v8 - 52];
        *(_OWORD *)(v16 - 68) = v18;
        v19 = *(_QWORD *)&v4[v8 - 48];
        *((_DWORD *)v16 - 10) = *(_DWORD *)&v4[v8 - 40];
        *((_QWORD *)v16 - 6) = v19;
        v20 = *(_QWORD *)&v4[v8 - 36];
        *((_DWORD *)v16 - 7) = *(_DWORD *)&v4[v8 - 28];
        *(_QWORD *)(v16 - 36) = v20;
        *(v16 - 24) = 0;
        *(v16 - 8) = 0;
        if (v4[v8 - 8])
        {
          *(_OWORD *)(v16 - 24) = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v17 - 3) = 0;
          *((_QWORD *)v17 - 2) = 0;
          *(v16 - 8) = 1;
        }
        v8 -= 192;
      }
      while (&v4[v8] != v2);
      v2 = *(char **)a1;
      v21 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8];
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v26;
      if (v21 != v2)
      {
        while (1)
        {
          if (*(v21 - 8))
          {
            v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 2);
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
                break;
            }
          }
          v25 = *((unsigned int *)v21 - 36);
          if ((_DWORD)v25 != -1)
            goto LABEL_21;
LABEL_14:
          *((_DWORD *)v21 - 36) = -1;
          v21 -= 192;
          if (v21 == v2)
            goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *, uint64_t))v22->__on_zero_shared)(v22, v11);
        std::__shared_weak_count::__release_weak(v22);
        v25 = *((unsigned int *)v21 - 36);
        if ((_DWORD)v25 == -1)
          goto LABEL_14;
LABEL_21:
        ((void (*)(char *, char *))off_24EC365B0[v25])(&v28, v21 - 160);
        goto LABEL_14;
      }
    }
LABEL_25:
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_223410744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    while (1)
    {
      *(_QWORD *)(a1 + 16) = v3 - 192;
      if (*(_BYTE *)(v3 - 8))
      {
        v4 = *(std::__shared_weak_count **)(v3 - 16);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
            break;
        }
      }
      v7 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v7 != -1)
        goto LABEL_10;
LABEL_3:
      *(_DWORD *)(v3 - 144) = -1;
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 == v2)
        goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v7 == -1)
      goto LABEL_3;
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC365B0[v7])(&v9, v3 - 160);
    goto LABEL_3;
  }
LABEL_13:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_223410830(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 sub_223410840(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t sub_223410850(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        v5 = *(unsigned int *)(a1 + 32);
        if ((_DWORD)v5 == -1)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24EC365B0[v5])(&v7, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t sub_2234108F8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EC365B0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

BOOL sub_223410950(uint64_t a1, const char *a2, xpc_object_t object)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  void (*v17)(std::__shared_weak_count_vtbl **__return_ptr, unsigned __int8 *, std::__shared_weak_count_vtbl **);
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  char v32;
  std::__shared_weak_count_vtbl *__dst;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  char v38;
  unsigned __int8 v39[16];
  unsigned __int8 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_22340E998(&__dst, object);
  v28 = __dst;
  v29 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v34;
    if (v34)
    {
      v8 = (unint64_t *)&v34->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = strlen(a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v34 = (std::__shared_weak_count *)v11;
    v35 = v14 | 0x8000000000000000;
    __dst = (std::__shared_weak_count_vtbl *)p_dst;
    goto LABEL_16;
  }
  HIBYTE(v35) = v10;
  p_dst = (void **)&__dst;
  if (v10)
LABEL_16:
    memcpy(p_dst, a2, v11);
  *((_BYTE *)p_dst + v11) = 0;
  sub_224566720((unint64_t)&__dst, (uint64_t)v39);
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__dst);
    v15 = v40;
    if (!v40)
      goto LABEL_33;
  }
  else
  {
    v15 = v40;
    if (!v40)
      goto LABEL_33;
  }
  v16 = *(uint64_t **)(a1 + 32);
  v17 = **(void (***)(std::__shared_weak_count_vtbl **__return_ptr, unsigned __int8 *, std::__shared_weak_count_vtbl **))(a1 + 40);
  sub_2245646E8(&v30, v28, 1);
  v17(&__dst, v39, &v30);
  sub_223410C78(v16, v39, (uint64_t)&__dst);
  if (v38)
  {
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        v21 = v36;
        if (v36 == -1)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
  }
  v21 = v36;
  if (v36 != -1)
LABEL_27:
    ((void (*)(char *, unint64_t *))off_24EC365B0[v21])(&v32, &v35);
LABEL_28:
  v36 = -1;
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_33:
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v15 != 0;
}

void sub_223410BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_223410C78(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v7 = *a1;
  v6 = (unsigned __int8 *)a1[1];
  if (v6 != (unsigned __int8 *)*a1)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 6);
    do
    {
      v9 = (unsigned __int8 *)(v7 + 192 * (v8 >> 1));
      v10 = (char)sub_22319835C(v9, a2);
      if (v10 >= 0)
        v8 >>= 1;
      else
        v8 += ~(v8 >> 1);
      if (v10 < 0)
        v7 = (uint64_t)(v9 + 192);
    }
    while (v8);
    v6 = (unsigned __int8 *)v7;
    v7 = a1[1];
  }
  if ((unsigned __int8 *)v7 == v6 || (sub_22319835C(v6, a2) & 0x80) != 0 || (sub_22319835C(a2, v6) & 0x80) != 0)
    return (unsigned __int8 *)sub_223410F90(a1, v6, a2, a3);
  sub_223410D6C((uint64_t)(v6 + 16), a3);
  return v6;
}

uint64_t sub_223410D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(unsigned int *)(a1 + 32);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(char *, uint64_t))off_24EC365B0[v4])(&v27, a1 + 16);
    *(_DWORD *)(a1 + 32) = -1;
    goto LABEL_6;
  }
  v26 = a1 + 16;
  ((void (*)(uint64_t *))off_24EC365F0[v5])(&v26);
LABEL_6:
  v6 = (_OWORD *)(a1 + 40);
  v7 = (__int128 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v8 = *v7;
      v9 = *(_OWORD *)(a2 + 56);
      v10 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v10;
      *v6 = v8;
      *(_OWORD *)(a1 + 56) = v9;
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    v11 = *v7;
    v12 = *(_OWORD *)(a2 + 56);
    v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v13;
    *v6 = v11;
    *(_OWORD *)(a1 + 56) = v12;
    *(_BYTE *)(a1 + 104) = 1;
  }
  v14 = *(_OWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_OWORD *)(a1 + 108) = v14;
  v15 = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v15;
  v16 = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 140) = v16;
  v17 = (__int128 *)(a2 + 152);
  if (*(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 168))
  {
    if (!*(_BYTE *)(a1 + 168))
      return a1;
    v18 = *v17;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(a2 + 160) = 0;
    v19 = *(std::__shared_weak_count **)(a1 + 160);
    *(_OWORD *)(a1 + 152) = v18;
    if (!v19)
      return a1;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      return a1;
    }
    else
    {
      return a1;
    }
  }
  else if (*(_BYTE *)(a1 + 168))
  {
    v23 = *(std::__shared_weak_count **)(a1 + 160);
    if (!v23)
      goto LABEL_24;
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      *(_BYTE *)(a1 + 168) = 0;
      return a1;
    }
    else
    {
LABEL_24:
      *(_BYTE *)(a1 + 168) = 0;
      return a1;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 152) = *v17;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 1;
    return a1;
  }
}

_OWORD *sub_223410F90(uint64_t *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v6;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  char v45;
  void *__p[2];
  __int128 v47;
  _QWORD v48[2];
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  char v62;
  _QWORD *v63;
  uint64_t v64;

  v6 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v8 = (_OWORD *)a1[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 6);
  v11 = a1[2];
  if ((unint64_t)v8 < v11)
  {
    if (a2 == v8)
    {
      *a2 = *a3;
      v23 = v9 + 192 * v10;
      v24 = *(_OWORD *)a4;
      *(_DWORD *)(v23 + 48) = -1;
      v25 = (_DWORD *)(v23 + 48);
      *((_OWORD *)v25 - 2) = v24;
      *((_BYTE *)v25 - 16) = 0;
      v26 = *(unsigned int *)(a4 + 32);
      if ((_DWORD)v26 != -1)
      {
        ((void (*)(void **, _DWORD *, uint64_t))off_24EC365C0[v26])(__p, v25 - 4, a4 + 16);
        *v25 = v26;
      }
      v27 = v9 + 192 * v10;
      *(_BYTE *)(v27 + 120) = 0;
      v28 = (_BYTE *)(v27 + 120);
      *(v28 - 64) = 0;
      if (*(_BYTE *)(a4 + 104))
      {
        v29 = *(_OWORD *)(a4 + 40);
        v30 = *(_OWORD *)(a4 + 56);
        v31 = *(_OWORD *)(a4 + 88);
        *((_OWORD *)v28 - 2) = *(_OWORD *)(a4 + 72);
        *((_OWORD *)v28 - 1) = v31;
        *((_OWORD *)v28 - 4) = v29;
        *((_OWORD *)v28 - 3) = v30;
        *v28 = 1;
      }
      v32 = v9 + 192 * v10;
      v33 = *(_OWORD *)(a4 + 108);
      *(_BYTE *)(v32 + 140) = *(_BYTE *)(a4 + 124);
      *(_OWORD *)(v32 + 124) = v33;
      v34 = *(_QWORD *)(a4 + 128);
      *(_DWORD *)(v32 + 152) = *(_DWORD *)(a4 + 136);
      *(_QWORD *)(v32 + 144) = v34;
      v35 = *(_QWORD *)(a4 + 140);
      v36 = *(_DWORD *)(a4 + 148);
      *(_BYTE *)(v32 + 184) = 0;
      v37 = (_BYTE *)(v32 + 184);
      *((_DWORD *)v37 - 5) = v36;
      *(_QWORD *)(v37 - 28) = v35;
      *(v37 - 16) = 0;
      if (*(_BYTE *)(a4 + 168))
      {
        *((_OWORD *)v37 - 1) = *(_OWORD *)(a4 + 152);
        *(_QWORD *)(a4 + 152) = 0;
        *(_QWORD *)(a4 + 160) = 0;
        *v37 = 1;
      }
      a1[1] = (uint64_t)(v6 + 12);
    }
    else
    {
      v63 = a1 + 2;
      v12 = *(_OWORD *)a4;
      *(_OWORD *)__p = *a3;
      v47 = v12;
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v13 = *(unsigned int *)(a4 + 32);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *, _QWORD *, uint64_t))off_24EC365C0[v13])(&v45, v48, a4 + 16);
        v49 = v13;
      }
      LOBYTE(v50) = 0;
      v54 = 0;
      if (*(_BYTE *)(a4 + 104))
      {
        v14 = *(_OWORD *)(a4 + 56);
        v50 = *(_OWORD *)(a4 + 40);
        v51 = v14;
        v15 = *(_OWORD *)(a4 + 88);
        v52 = *(_OWORD *)(a4 + 72);
        v53 = v15;
        v54 = 1;
      }
      v55 = *(_OWORD *)(a4 + 108);
      v56 = *(_BYTE *)(a4 + 124);
      v57 = *(_QWORD *)(a4 + 128);
      v58 = *(_DWORD *)(a4 + 136);
      v59 = *(_QWORD *)(a4 + 140);
      v60 = *(_DWORD *)(a4 + 148);
      LOBYTE(v61) = 0;
      v62 = 0;
      if (*(_BYTE *)(a4 + 168))
      {
        v61 = *(_OWORD *)(a4 + 152);
        *(_QWORD *)(a4 + 152) = 0;
        *(_QWORD *)(a4 + 160) = 0;
        v62 = 1;
      }
      sub_2234115F0((uint64_t)a1, (uint64_t)v6, a1[1], (uint64_t)(v6 + 12));
      *v6 = *(_OWORD *)__p;
      sub_223410D6C(v9 + 192 * v10 + 16, (uint64_t)&v47);
      if (v62)
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
        if (*((_QWORD *)&v61 + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      if (v49 != -1)
        ((void (*)(char *, _QWORD *))off_24EC365B0[v49])(&v45, v48);
    }
    return v6;
  }
  v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 6) + 1;
  if (v19 > 0x155555555555555)
    sub_22316E078();
  v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v9) >> 6);
  if (2 * v20 > v19)
    v19 = 2 * v20;
  if (v20 >= 0xAAAAAAAAAAAAAALL)
    v21 = 0x155555555555555;
  else
    v21 = v19;
  v48[0] = a1 + 2;
  if (v21)
  {
    if (v21 > 0x155555555555555)
      sub_223174E94();
    v22 = (char *)operator new(192 * v21);
  }
  else
  {
    v22 = 0;
  }
  __p[0] = v22;
  __p[1] = &v22[192 * v10];
  *(void **)&v47 = __p[1];
  *((_QWORD *)&v47 + 1) = &v22[192 * v21];
  sub_223411858((uint64_t)__p, a3, (__int128 *)a4);
  v6 = (_OWORD *)sub_223411C68(a1, __p, (uint64_t)v6);
  v38 = __p[1];
  v39 = v47;
  if ((void *)v47 != __p[1])
  {
    while (1)
    {
      *(_QWORD *)&v47 = v39 - 192;
      if (*(_BYTE *)(v39 - 8))
      {
        v40 = *(std::__shared_weak_count **)(v39 - 16);
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
            break;
        }
      }
      v43 = *(unsigned int *)(v39 - 144);
      if ((_DWORD)v43 != -1)
        goto LABEL_43;
LABEL_36:
      *(_DWORD *)(v39 - 144) = -1;
      v39 = v47;
      if ((void *)v47 == v38)
        goto LABEL_46;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = *(unsigned int *)(v39 - 144);
    if ((_DWORD)v43 == -1)
      goto LABEL_36;
LABEL_43:
    ((void (*)(char *, uint64_t))off_24EC365B0[v43])(&v45, v39 - 160);
    goto LABEL_36;
  }
LABEL_46:
  if (__p[0])
    operator delete(__p[0]);
  return v6;
}

void sub_223411414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223411460(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24EC365B0[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_223411524(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24EC365B0[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 1;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_2234115F0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = *(_QWORD *)(result + 8);
  v6 = v5 - a4;
  v7 = a2 + v5 - a4;
  v8 = v5;
  if (v7 < a3)
  {
    v24 = result;
    v25 = v5 - a4;
    v26 = a4;
    v10 = 0;
    do
    {
      v11 = v5 + v10;
      v12 = v7 + v10;
      *(_OWORD *)v11 = *(_OWORD *)(v7 + v10);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v7 + v10 + 16);
      *(_BYTE *)(v5 + v10 + 32) = 0;
      *(_DWORD *)(v11 + 48) = -1;
      v13 = *(unsigned int *)(v7 + v10 + 48);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_24EC365C0[v13])(&v27, v5 + v10 + 32, v12 + 32);
        *(_DWORD *)(v11 + 48) = v13;
      }
      *(_BYTE *)(v11 + 56) = 0;
      *(_BYTE *)(v11 + 120) = 0;
      if (*(_BYTE *)(v12 + 120))
      {
        v14 = *(_OWORD *)(v7 + v10 + 56);
        v15 = *(_OWORD *)(v7 + v10 + 72);
        v16 = *(_OWORD *)(v7 + v10 + 104);
        *(_OWORD *)(v11 + 88) = *(_OWORD *)(v7 + v10 + 88);
        *(_OWORD *)(v11 + 104) = v16;
        *(_OWORD *)(v11 + 56) = v14;
        *(_OWORD *)(v11 + 72) = v15;
        *(_BYTE *)(v11 + 120) = 1;
      }
      v17 = v5 + v10;
      v18 = *(_OWORD *)(v12 + 124);
      *(_BYTE *)(v17 + 140) = *(_BYTE *)(v12 + 140);
      *(_OWORD *)(v17 + 124) = v18;
      v19 = *(_QWORD *)(v12 + 144);
      *(_DWORD *)(v17 + 152) = *(_DWORD *)(v12 + 152);
      *(_QWORD *)(v17 + 144) = v19;
      v20 = *(_QWORD *)(v12 + 156);
      *(_DWORD *)(v17 + 164) = *(_DWORD *)(v12 + 164);
      *(_QWORD *)(v17 + 156) = v20;
      *(_BYTE *)(v17 + 168) = 0;
      *(_BYTE *)(v17 + 184) = 0;
      if (*(_BYTE *)(v12 + 184))
      {
        v21 = v7 + v10;
        *(_OWORD *)(v17 + 168) = *(_OWORD *)(v7 + v10 + 168);
        *(_QWORD *)(v21 + 168) = 0;
        *(_QWORD *)(v21 + 176) = 0;
        *(_BYTE *)(v17 + 184) = 1;
      }
      v10 += 192;
    }
    while (v12 + 192 < a3);
    v8 = v5 + v10;
    v6 = v25;
    a4 = v26;
    result = v24;
  }
  *(_QWORD *)(result + 8) = v8;
  if (v5 != a4)
  {
    v22 = (_OWORD *)(v5 - 192);
    v23 = v6 >> 6 << 6;
    do
    {
      *v22 = *(_OWORD *)(a2 + v23 - 192);
      result = sub_223410D6C((uint64_t)(v22 + 1), a2 + v23 - 176);
      v22 -= 12;
      v23 -= 192;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_2234117B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 176);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        v5 = *(unsigned int *)(a1 + 48);
        if ((_DWORD)v5 == -1)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24EC365B0[v5])(&v7, a1 + 32);
LABEL_8:
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

void sub_223411858(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  char v52;
  char v53;
  char v54;

  v6 = *(char **)(a1 + 16);
  if (v6 == *(char **)(a1 + 24))
  {
    v7 = *(char **)a1;
    v8 = *(char **)(a1 + 8);
    if ((unint64_t)v8 <= *(_QWORD *)a1)
    {
      v14 = 0x5555555555555556 * ((v6 - v7) >> 6);
      if (v6 == v7)
        v14 = 1;
      if (v14 >= 0x155555555555556)
        sub_223174E94();
      v15 = v14 >> 2;
      v16 = 192 * v14;
      v17 = (char *)operator new(192 * v14);
      v18 = &v17[192 * v15];
      if (v6 == v8)
      {
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v18;
        *(_QWORD *)(a1 + 24) = &v17[v16];
      }
      else
      {
        v49 = &v17[v16];
        v50 = v17;
        v51 = a2;
        v19 = 0;
        v20 = (v6 - v8) / 192;
        v48 = &v18[192 * v20];
        v21 = 192 * v20;
        do
        {
          v22 = &v8[v19];
          v23 = &v18[v19];
          *(_OWORD *)v23 = *(_OWORD *)&v8[v19];
          *((_OWORD *)v23 + 1) = *(_OWORD *)&v8[v19 + 16];
          v18[v19 + 32] = 0;
          v24 = (uint64_t)&v18[v19 + 32];
          *((_DWORD *)v23 + 12) = -1;
          v25 = *(unsigned int *)&v8[v19 + 48];
          if ((_DWORD)v25 != -1)
          {
            ((void (*)(char *, uint64_t, char *))off_24EC365C0[v25])(&v52, v24, v22 + 32);
            *((_DWORD *)v23 + 12) = v25;
          }
          v23[56] = 0;
          v23[120] = 0;
          if (v22[120])
          {
            v26 = *(_OWORD *)&v8[v19 + 56];
            v27 = *(_OWORD *)&v8[v19 + 72];
            v28 = *(_OWORD *)&v8[v19 + 104];
            *(_OWORD *)(v23 + 88) = *(_OWORD *)&v8[v19 + 88];
            *(_OWORD *)(v23 + 104) = v28;
            *(_OWORD *)(v23 + 56) = v26;
            *(_OWORD *)(v23 + 72) = v27;
            v23[120] = 1;
          }
          v29 = &v18[v19];
          v30 = *(_OWORD *)(v22 + 124);
          v29[140] = v22[140];
          *(_OWORD *)(v29 + 124) = v30;
          v31 = *((_QWORD *)v22 + 18);
          *((_DWORD *)v29 + 38) = *((_DWORD *)v22 + 38);
          *((_QWORD *)v29 + 18) = v31;
          v32 = *(_QWORD *)(v22 + 156);
          *((_DWORD *)v29 + 41) = *((_DWORD *)v22 + 41);
          *(_QWORD *)(v29 + 156) = v32;
          v29[168] = 0;
          v29[184] = 0;
          if (v22[184])
          {
            v33 = &v8[v19];
            *(_OWORD *)(v29 + 168) = *(_OWORD *)&v8[v19 + 168];
            *((_QWORD *)v33 + 21) = 0;
            *((_QWORD *)v33 + 22) = 0;
            v29[184] = 1;
          }
          v19 += 192;
        }
        while (v21 != v19);
        v7 = *(char **)a1;
        v34 = *(_QWORD *)(a1 + 8);
        v35 = *(_QWORD *)(a1 + 16);
        a2 = v51;
        *(_QWORD *)a1 = v50;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v48;
        for (*(_QWORD *)(a1 + 24) = v49; v35 != v34; v35 -= 192)
        {
          if (*(_BYTE *)(v35 - 8))
          {
            v36 = *(std::__shared_weak_count **)(v35 - 16);
            if (v36)
            {
              p_shared_owners = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v36->__on_zero_shared)(v36, v24);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
          v39 = *(unsigned int *)(v35 - 144);
          if ((_DWORD)v39 != -1)
            ((void (*)(char *, uint64_t))off_24EC365B0[v39])(&v53, v35 - 160);
          *(_DWORD *)(v35 - 144) = -1;
        }
      }
      if (v7)
        operator delete(v7);
      v6 = *(char **)(a1 + 16);
    }
    else
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(_QWORD *)a1] >> 6);
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v12 = -v11;
      if (v8 == v6)
      {
        v13 = &v8[-192 * v11];
      }
      else
      {
        do
        {
          *(_OWORD *)&v8[192 * v12] = *(_OWORD *)v8;
          sub_223410D6C((uint64_t)&v8[192 * v12 + 16], (uint64_t)(v8 + 16));
          v8 += 192;
        }
        while (v8 != v6);
        v6 = *(char **)(a1 + 8);
        v13 = &v8[192 * v12];
      }
      *(_QWORD *)(a1 + 8) = &v6[192 * v12];
      *(_QWORD *)(a1 + 16) = v13;
      v6 = v13;
    }
  }
  *(_OWORD *)v6 = *a2;
  v40 = *a3;
  v6[32] = 0;
  *((_OWORD *)v6 + 1) = v40;
  *((_DWORD *)v6 + 12) = -1;
  v41 = *((unsigned int *)a3 + 8);
  if ((_DWORD)v41 != -1)
  {
    ((void (*)(char *))off_24EC365C0[v41])(&v54);
    *((_DWORD *)v6 + 12) = v41;
  }
  v6[56] = 0;
  v6[120] = 0;
  if (*((_BYTE *)a3 + 104))
  {
    v42 = *(__int128 *)((char *)a3 + 40);
    v43 = *(__int128 *)((char *)a3 + 56);
    v44 = *(__int128 *)((char *)a3 + 88);
    *(_OWORD *)(v6 + 88) = *(__int128 *)((char *)a3 + 72);
    *(_OWORD *)(v6 + 104) = v44;
    *(_OWORD *)(v6 + 56) = v42;
    *(_OWORD *)(v6 + 72) = v43;
    v6[120] = 1;
  }
  v45 = *(__int128 *)((char *)a3 + 108);
  v6[140] = *((_BYTE *)a3 + 124);
  *(_OWORD *)(v6 + 124) = v45;
  v46 = *((_QWORD *)a3 + 16);
  *((_DWORD *)v6 + 38) = *((_DWORD *)a3 + 34);
  *((_QWORD *)v6 + 18) = v46;
  v47 = *(_QWORD *)((char *)a3 + 140);
  *((_DWORD *)v6 + 41) = *((_DWORD *)a3 + 37);
  *(_QWORD *)(v6 + 156) = v47;
  v6[168] = 0;
  v6[184] = 0;
  if (*((_BYTE *)a3 + 168))
  {
    *(_OWORD *)(v6 + 168) = *(__int128 *)((char *)a3 + 152);
    *((_QWORD *)a3 + 19) = 0;
    *((_QWORD *)a3 + 20) = 0;
    v6[184] = 1;
  }
  *(_QWORD *)(a1 + 16) += 192;
}

uint64_t sub_223411C68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  _QWORD *v39;
  char v40;
  char v41;

  v4 = a2[1];
  v5 = *a1;
  v6 = v4;
  v39 = a1;
  if (*a1 != a3)
  {
    v7 = a2;
    v8 = 0;
    do
    {
      v9 = v4 + v8;
      v10 = a3 + v8;
      *(_OWORD *)(v9 - 192) = *(_OWORD *)(a3 + v8 - 192);
      *(_OWORD *)(v9 - 176) = *(_OWORD *)(a3 + v8 - 176);
      *(_BYTE *)(v4 + v8 - 160) = 0;
      *(_DWORD *)(v9 - 144) = -1;
      v11 = *(unsigned int *)(a3 + v8 - 144);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_24EC365C0[v11])(&v40, v4 + v8 - 160, v10 - 160);
        *(_DWORD *)(v9 - 144) = v11;
      }
      *(_BYTE *)(v9 - 136) = 0;
      *(_BYTE *)(v9 - 72) = 0;
      if (*(_BYTE *)(v10 - 72))
      {
        v12 = *(_OWORD *)(a3 + v8 - 136);
        v13 = *(_OWORD *)(a3 + v8 - 120);
        v14 = *(_OWORD *)(a3 + v8 - 88);
        *(_OWORD *)(v9 - 104) = *(_OWORD *)(a3 + v8 - 104);
        *(_OWORD *)(v9 - 88) = v14;
        *(_OWORD *)(v9 - 136) = v12;
        *(_OWORD *)(v9 - 120) = v13;
        *(_BYTE *)(v9 - 72) = 1;
      }
      v15 = v4 + v8;
      v16 = a3 + v8;
      v17 = *(_OWORD *)(a3 + v8 - 68);
      *(_BYTE *)(v15 - 52) = *(_BYTE *)(a3 + v8 - 52);
      *(_OWORD *)(v15 - 68) = v17;
      v18 = *(_QWORD *)(a3 + v8 - 48);
      *(_DWORD *)(v15 - 40) = *(_DWORD *)(a3 + v8 - 40);
      *(_QWORD *)(v15 - 48) = v18;
      v19 = *(_QWORD *)(a3 + v8 - 36);
      *(_DWORD *)(v15 - 28) = *(_DWORD *)(a3 + v8 - 28);
      *(_QWORD *)(v15 - 36) = v19;
      *(_BYTE *)(v15 - 24) = 0;
      *(_BYTE *)(v15 - 8) = 0;
      if (*(_BYTE *)(a3 + v8 - 8))
      {
        *(_OWORD *)(v15 - 24) = *(_OWORD *)(v16 - 24);
        *(_QWORD *)(v16 - 24) = 0;
        *(_QWORD *)(v16 - 16) = 0;
        *(_BYTE *)(v15 - 8) = 1;
      }
      v8 -= 192;
    }
    while (a3 + v8 != v5);
    v6 = v4 + v8;
    a2 = v7;
    a1 = v39;
  }
  a2[1] = v6;
  v20 = a1[1];
  v21 = a2[2];
  if (v20 != a3)
  {
    v38 = a2;
    v22 = 0;
    do
    {
      v23 = a3 + v22;
      v24 = v21 + v22;
      *(_OWORD *)v24 = *(_OWORD *)(a3 + v22);
      *(_OWORD *)(v24 + 16) = *(_OWORD *)(a3 + v22 + 16);
      *(_BYTE *)(v21 + v22 + 32) = 0;
      *(_DWORD *)(v24 + 48) = -1;
      v25 = *(unsigned int *)(a3 + v22 + 48);
      if ((_DWORD)v25 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_24EC365C0[v25])(&v41, v21 + v22 + 32, v23 + 32);
        *(_DWORD *)(v24 + 48) = v25;
      }
      *(_BYTE *)(v24 + 56) = 0;
      *(_BYTE *)(v24 + 120) = 0;
      if (*(_BYTE *)(v23 + 120))
      {
        v26 = *(_OWORD *)(a3 + v22 + 56);
        v27 = *(_OWORD *)(a3 + v22 + 72);
        v28 = *(_OWORD *)(a3 + v22 + 104);
        *(_OWORD *)(v24 + 88) = *(_OWORD *)(a3 + v22 + 88);
        *(_OWORD *)(v24 + 104) = v28;
        *(_OWORD *)(v24 + 56) = v26;
        *(_OWORD *)(v24 + 72) = v27;
        *(_BYTE *)(v24 + 120) = 1;
      }
      v29 = v21 + v22;
      v30 = *(_OWORD *)(v23 + 124);
      *(_BYTE *)(v29 + 140) = *(_BYTE *)(v23 + 140);
      *(_OWORD *)(v29 + 124) = v30;
      v31 = *(_QWORD *)(v23 + 144);
      *(_DWORD *)(v29 + 152) = *(_DWORD *)(v23 + 152);
      *(_QWORD *)(v29 + 144) = v31;
      v32 = *(_QWORD *)(v23 + 156);
      *(_DWORD *)(v29 + 164) = *(_DWORD *)(v23 + 164);
      *(_QWORD *)(v29 + 156) = v32;
      *(_BYTE *)(v29 + 168) = 0;
      *(_BYTE *)(v29 + 184) = 0;
      if (*(_BYTE *)(v23 + 184))
      {
        v33 = a3 + v22;
        *(_OWORD *)(v29 + 168) = *(_OWORD *)(a3 + v22 + 168);
        *(_QWORD *)(v33 + 168) = 0;
        *(_QWORD *)(v33 + 176) = 0;
        *(_BYTE *)(v29 + 184) = 1;
      }
      v22 += 192;
    }
    while (v23 + 192 != v20);
    a2 = v38;
    a1 = v39;
    v6 = v38[1];
    v21 += v22;
  }
  a2[2] = v21;
  v34 = *a1;
  *a1 = v6;
  a2[1] = v34;
  v35 = a1[1];
  a1[1] = a2[2];
  a2[2] = v35;
  v36 = a1[2];
  a1[2] = a2[3];
  a2[3] = v36;
  *a2 = a2[1];
  return v4;
}

void sub_223411F34(void **a1, xpc_object_t *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  xpc_object_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  const char *v27[2];
  const char *v28[2];
  void *region;

  v28[0] = a3;
  v28[1] = a4;
  v27[0] = a5;
  v27[1] = a6;
  sub_224564900(a2, v28, &v23);
  v8 = v23;
  v25 = v23;
  v26 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_224564900(a2, v27, &v21);
  v11 = sub_224565390(&v21);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  region = 0;
  a1[1] = (void *)xpc_shmem_map(v8, &region);
  a1[2] = (void *)v11;
  *a1 = region;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v24;
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_223412098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234120B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2234120D8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::ios_base *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10[2];

  *(_QWORD *)(a1 + 152) = MEMORY[0x24BEDB898] + 16;
  v6 = (std::ios_base *)(a1 + 152);
  v7 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &off_24EC36790;
  *(_QWORD *)(a1 + 152) = &unk_24EC36758;
  *(_QWORD *)a1 = &unk_24EC36730;
  std::ios_base::init(v6, v7);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_QWORD *)a1 = &off_24EC36618;
  *(_QWORD *)(a1 + 152) = &unk_24EC36640;
  v8 = *a2 + *a3;
  v10[0] = *a2;
  v10[1] = v8;
  sub_22341227C(a1, v10);
  return a1;
}

void sub_2234121C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::istream::~istream();
  sub_22341293C(v2);
  MEMORY[0x227684BE0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223412208(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    munmap(v2, *(_QWORD *)(a1 + 8));
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

uint64_t sub_223412240(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  sub_22341293C(v2 + 16);
  MEMORY[0x227684BE0](a1 + 152);
  return a1;
}

double sub_22341227C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  std::error_code v7;
  std::ios_base::failure v8;

  std::ios_base::clear((std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0);
  if (*(_QWORD *)(a1 + 112) || *(_QWORD *)(a1 + 128))
  {
    *(_QWORD *)&v7.__val_ = 1;
    v7.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v8, "already open", &v7);
    sub_223412D54((uint64_t)&v8);
  }
  v4 = *a2;
  v5 = a2[1];
  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 120) = v5;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) &= 0xFFFFFFF9;
  return result;
}

void sub_22341232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_223412340(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  sub_22341293C(v2 + 16);
  MEMORY[0x227684BE0](a1 + 152);
  return a1;
}

void sub_223412380(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  sub_22341293C(v2 + 16);
  MEMORY[0x227684BE0](a1 + 152);
  JUMPOUT(0x227684CE8);
}

void sub_2234123D0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  sub_22341293C((uint64_t)(v1 + 16));
  JUMPOUT(0x227684BE0);
}

void sub_223412414(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  sub_22341293C((uint64_t)(v1 + 16));
  MEMORY[0x227684BE0](v1 + 152);
  JUMPOUT(0x227684CE8);
}

void sub_223412470(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  sub_22341293C(v2 + 16);
  MEMORY[0x227684BE0](a1 + 152);
  JUMPOUT(0x227684CE8);
}

void sub_2234124BC(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  sub_22341293C((uint64_t)(v1 + 16));
  JUMPOUT(0x227684BE0);
}

void sub_2234124FC(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  sub_22341293C((uint64_t)(v1 + 16));
  MEMORY[0x227684BE0](v1 + 152);
  JUMPOUT(0x227684CE8);
}

void sub_223412558(uint64_t a1)
{
  sub_22341293C(a1);
  JUMPOUT(0x227684CE8);
}

double sub_223412580@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return sub_223412B2C(a1, *(_QWORD *)(a2 + 128), 0, a3, a4);
}

uint64_t sub_223412590(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  BOOL v6;
  uint64_t v7;
  std::ios_base::failure v8;

  v1 = (unsigned __int8 *)a1[12];
  if (!v1)
  {
    sub_2234132E8(&v8);
    sub_223412D54((uint64_t)&v8);
  }
  v2 = (unsigned __int8 *)a1[3];
  v3 = (unsigned __int8 *)a1[13];
  if (v2)
  {
    if (v2 != v3)
      return *v2;
  }
  else
  {
    a1[2] = v1;
    a1[3] = v1;
    a1[4] = v3;
    v5 = (unsigned __int8 *)a1[14];
    if (v5)
      v6 = v1 == v5;
    else
      v6 = 0;
    if (v6 && (v7 = a1[6]) != 0)
    {
      v2 = &v1[(int)v7 - (int)v1];
      a1[3] = v2;
      a1[6] = 0;
      a1[7] = 0;
      a1[5] = 0;
      if (v2 != v3)
        return *v2;
    }
    else
    {
      v2 = v1;
      if (v1 != v3)
        return *v2;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_223412644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223412658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::ios_base::failure v6;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
  {
    sub_2234132E8(&v6);
    sub_223412D54((uint64_t)&v6);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (v4)
  {
    sub_22341332C(&v6);
    sub_223412D54((uint64_t)&v6);
  }
  *(_QWORD *)(a1 + 24) = v3 - 1;
  if ((_DWORD)a2 == -1)
    return 0;
  *(_BYTE *)(v3 - 1) = a2;
  return a2;
}

void sub_2234126E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_2234126FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223412710(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  std::error_code v9;
  std::ios_base::failure v10;

  v2 = (_BYTE *)a1[14];
  if (!v2)
  {
    *(_QWORD *)&v9.__val_ = 1;
    v9.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v10, "no write access", &v9);
    sub_223412D54((uint64_t)&v10);
  }
  v3 = (_BYTE *)a1[6];
  if (!v3)
  {
    v5 = a1[15];
    a1[5] = v2;
    a1[6] = v2;
    a1[7] = v5;
    v6 = (_BYTE *)a1[12];
    if (v6)
      v7 = v6 == v2;
    else
      v7 = 0;
    if (v7 && (v8 = a1[3]) != 0)
    {
      v3 = &v2[(int)v8 - (int)v2];
      a1[6] = v3;
      a1[3] = 0;
      a1[4] = 0;
      a1[2] = 0;
      if ((_DWORD)a2 != -1)
        goto LABEL_4;
    }
    else
    {
      v3 = v2;
      if ((_DWORD)a2 != -1)
        goto LABEL_4;
    }
    return 0;
  }
  if ((_DWORD)a2 == -1)
    return 0;
LABEL_4:
  if (v3 == (_BYTE *)a1[15])
  {
    *(_QWORD *)&v9.__val_ = 1;
    v9.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v10, "write area exhausted", &v9);
    sub_223412D54((uint64_t)&v10);
  }
  *v3 = a2;
  ++a1[6];
  return a2;
}

void sub_223412828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

void sub_22341283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223412854(_QWORD *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2 == 16)
  {
    v2 = result + 14;
    if (!result[14])
      return result;
    v3 = result + 5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v2 = result + 12;
    if (result[12])
    {
      v3 = result + 2;
LABEL_7:
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v2 = 0;
      v2[1] = 0;
    }
  }
  return result;
}

uint64_t sub_2234128B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t sub_2234128C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) = a2;
  return result;
}

uint64_t sub_2234128C8()
{
  return 1;
}

void *sub_2234128D0()
{
  return &unk_24EC36A08;
}

uint64_t sub_2234128DC(uint64_t a1)
{
  return a1 + 72;
}

uint64_t sub_2234128E4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC36890;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void sub_223412900(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC36890;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  std::streambuf::~streambuf();
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22341293C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24EC36790;
  if (*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      sub_2234129F0((_DWORD *)a1, 8, (_DWORD *)a1, 16);
      if (*(_BYTE *)(a1 + 88))
        *(_BYTE *)(a1 + 88) = 0;
    }
  }
  *(_QWORD *)a1 = &off_24EC36890;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void sub_2234129B8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(_BYTE *)(v1 + 88))
    *(_BYTE *)(v1 + 88) = 0;
  __cxa_rethrow();
}

void sub_2234129D0(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x223412990);
}

uint64_t sub_2234129F0(_DWORD *a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a2 == 16)
  {
    v8 = a1[16];
    if ((v8 & 4) != 0)
      goto LABEL_8;
    v7 = v8 | 4;
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v6 = a1[16];
    if ((v6 & 2) == 0)
    {
      v7 = v6 | 2;
LABEL_7:
      a1[16] = v7;
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 120))(a1);
    }
  }
LABEL_8:
  if ((_DWORD)a4 == 16)
  {
    v11 = a3[16];
    if ((v11 & 4) == 0)
    {
      v10 = v11 | 4;
      goto LABEL_14;
    }
  }
  else if ((_DWORD)a4 == 8)
  {
    v9 = a3[16];
    if ((v9 & 2) == 0)
    {
      v10 = v9 | 2;
LABEL_14:
      a3[16] = v10;
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a3 + 120))(a3, a4);
    }
  }
  return 0;
}

void sub_223412AA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_begin_catch(a1);
  sub_223412AD4((uint64_t)&a9);
  __cxa_rethrow();
}

void sub_223412AC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *sub_223412AD4(uint64_t a1)
{
  _DWORD *result;
  int v3;
  int v4;
  int v5;

  result = *(_DWORD **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 16)
  {
    v5 = result[16];
    if ((v5 & 4) == 0)
    {
      result[16] = v5 | 4;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 120))(result);
    }
  }
  else if (v3 == 8)
  {
    v4 = result[16];
    if ((v4 & 2) == 0)
    {
      result[16] = v4 | 2;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 120))(result);
    }
  }
  return result;
}

double sub_223412B2C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  std::ios_base::failure v21;

  v5 = a1[12];
  if (v5)
  {
    v6 = a1[14];
    if (v6)
      v7 = (a4 & 0x18) == 24;
    else
      v7 = 0;
    if (v7 && v5 != v6)
    {
      sub_223412DA4(&v21);
      sub_223412D54((uint64_t)&v21);
    }
    if (v6)
      v9 = v5 == v6;
    else
      v9 = 0;
    v10 = v9;
    if (v9)
    {
      v11 = a1[6];
      if (v11)
      {
        v12 = a1[13];
        v13 = v5 + (int)v11 - (int)v5;
        a1[2] = v5;
        a1[3] = v13;
        a1[4] = v12;
        a1[5] = 0;
        a1[6] = 0;
        a1[7] = 0;
        if (v13)
          goto LABEL_26;
LABEL_25:
        v15 = a1[13];
        a1[2] = v5;
        a1[3] = v5;
        a1[4] = v15;
        v13 = v5;
LABEL_26:
        v14 = a2;
        if (a3)
        {
          if (a3 == 2)
          {
            v14 = a2 - v5 + a1[13];
          }
          else
          {
            if (a3 != 1)
            {
              v14 = 0;
              v16 = a1[13];
              if (v16 - v5 >= 0)
                goto LABEL_33;
              goto LABEL_43;
            }
            v14 = a2 - v5 + v13;
          }
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          v16 = a1[13];
          if (v14 <= v16 - v5)
          {
LABEL_33:
            a1[2] = v5;
            a1[3] = v5 + v14;
            a1[4] = v16;
            if ((a4 & 0x10) == 0)
              goto LABEL_48;
            goto LABEL_34;
          }
        }
LABEL_43:
        sub_223412DA4(&v21);
        sub_223412D54((uint64_t)&v21);
      }
    }
    else if ((a4 & 8) == 0)
    {
      goto LABEL_22;
    }
    v13 = a1[3];
    if (v13)
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_22:
  v10 = 0;
  v14 = -1;
  if ((a4 & 0x10) == 0)
    goto LABEL_48;
LABEL_34:
  if ((v10 & 1) == 0)
  {
    v17 = a1[14];
    if (v17)
    {
      v18 = a1[6];
      if (!v18)
      {
        v19 = a1[15];
        a1[5] = v17;
        a1[6] = v17;
        a1[7] = v19;
        v18 = v17;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          a2 = a2 - v17 + a1[15];
        }
        else
        {
          if (a3 != 1)
          {
            v14 = 0;
            if (a1[15] - v17 >= 0)
            {
LABEL_47:
              a1[6] = v18 + (int)v17 - (int)v18 + (int)v14;
              goto LABEL_48;
            }
LABEL_50:
            sub_223412DA4(&v21);
            sub_223412D54((uint64_t)&v21);
          }
          a2 = a2 - v17 + v18;
        }
      }
      v14 = a2;
      if ((a2 & 0x8000000000000000) == 0 && a2 <= a1[15] - v17)
        goto LABEL_47;
      goto LABEL_50;
    }
  }
LABEL_48:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v14;
  return result;
}

void sub_223412D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_223412D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_223412D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_223412D54(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  sub_223412DE8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC36938, (void (*)(void *))sub_223412E60);
}

void sub_223412D90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::ios_base::failure *sub_223412DA4@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v3;

  *(_QWORD *)&v3.__val_ = 1;
  v3.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "bad seek", &v3);
}

uint64_t sub_223412DE8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24EC36548;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB818] + 16;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)a1 = &unk_24EC36990;
  *(_QWORD *)(a1 + 8) = &unk_24EC369C0;
  *(_QWORD *)(a1 + 40) = &unk_24EC369E8;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_223412E60(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 48) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_223412EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24EC36548;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB888] + 16;
  *(_QWORD *)(v2 + 40) = &unk_24EC365A0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 48) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_DWORD *)(v2 + 72) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)v2 = &unk_24EC36990;
  *(_QWORD *)(v2 + 8) = &unk_24EC369C0;
  *(_QWORD *)(v2 + 40) = &unk_24EC369E8;
  sub_2233E5A54(v2 + 40, a1 + 40);
  return v2;
}

void sub_223412F98(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x227684CE8](v1, 0x10F1C40C009A862);
  _Unwind_Resume(a1);
}

void sub_223412FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_223412FE0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  sub_223413210((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24EC36938, (void (*)(void *))sub_223412E60);
}

void sub_22341301C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_223413030(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 48) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223413098(std::runtime_error *this)
{
  const char *imp;

  this[2].__vftable = (std::runtime_error_vtbl *)&unk_24EC365A0;
  imp = this[2].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[2].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_2234130E8(std::runtime_error *this)
{
  const char *imp;

  this[2].__vftable = (std::runtime_error_vtbl *)&unk_24EC365A0;
  imp = this[2].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[2].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x227684CE8);
}

void sub_223413154(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24EC365A0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 2);
}

void sub_2234131A4(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24EC365A0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223413210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24EC36548;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB818] + 16;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB888] + 16;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &unk_24EC365A0;
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_24EC36990;
  *(_QWORD *)(a1 + 8) = &unk_24EC369C0;
  *(_QWORD *)(a1 + 40) = &unk_24EC369E8;
  return a1;
}

void sub_2234132D4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

std::ios_base::failure *sub_2234132E8@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v3;

  *(_QWORD *)&v3.__val_ = 1;
  v3.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "no read access", &v3);
}

std::ios_base::failure *sub_22341332C@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v3;

  *(_QWORD *)&v3.__val_ = 1;
  v3.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "putback buffer full", &v3);
}

void sub_223413370(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223413380(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2234133B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2234133C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234133D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223413400(uint64_t a1)
{
  return sub_22341340C(a1 + 24);
}

uint64_t sub_22341340C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    munmap(v2, *(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    munmap(v3, *(_QWORD *)(a1 + 56));
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    munmap(v4, *(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

__n128 sub_22341348C(void **a1, __n128 *a2)
{
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __n128 result;
  char v12;

  v4 = (char *)*a1;
  if (!*a1)
    goto LABEL_16;
  v5 = (char *)a1[1];
  v6 = *a1;
  if (v5 == v4)
    goto LABEL_15;
  do
  {
    if (!*(v5 - 8))
      goto LABEL_10;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 2);
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
LABEL_10:
      v10 = *((unsigned int *)v5 - 36);
      if ((_DWORD)v10 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, char *))off_24EC365B0[v10])(&v12, v5 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *((unsigned int *)v5 - 36);
    if ((_DWORD)v10 != -1)
      goto LABEL_11;
LABEL_4:
    *((_DWORD *)v5 - 36) = -1;
    v5 -= 192;
  }
  while (v5 != v4);
  v6 = *a1;
LABEL_15:
  a1[1] = v4;
  operator delete(v6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_16:
  result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_2234135A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float32x2_t v20;
  float32x4_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int128 v95;
  int32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  __int128 v99;
  int8x16_t v100;
  int32x4_t v101;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float v141;
  float64x2_t v142;
  int8x16_t v143;
  float32x4_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t *v147;
  int8x16_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  unsigned __int8 v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v158;
  float64x2_t v166;
  float64x2_t v168;
  unint64_t v170;
  float64x2_t v172;
  int64x2_t v173;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v180;
  float64x2_t v182;
  float64x2_t v184;
  float64x2_t v185;
  int8x16_t v186;
  float32x4_t v187;
  _DWORD *v188;
  _DWORD *v189;
  float64x2_t v190;
  int8x16_t v191;
  float64x2_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  double v198;
  float32x4_t v199;
  float32x4_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  int8x16_t v206;
  int8x16_t v207;
  float64x2_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  float32x4_t v214;
  double v215;
  float32x4_t v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  float32x2_t v222;
  float32x2_t *v223;
  unint64_t v224;
  char *v225;
  int8x16_t v226;
  double v227;
  float32x4_t v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  float32x2_t v234;
  _QWORD *v235;
  _QWORD *v236;
  int v237;
  int v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  float v266;
  int32x2_t v267;
  int8x8_t v268;
  uint64_t v269;
  unsigned __int16 *v270;
  int v271;
  int v272;
  unsigned __int16 *v273;
  float32x2_t v274;
  void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  _QWORD *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  _QWORD *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t *v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  int8x16_t v347;
  int8x16_t v348;
  float32x4_t v349;
  float32x4_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t (**v355)();
  _QWORD *v356;
  std::__shared_weak_count *v357;
  uint64_t (**v358)();
  _QWORD *v359;
  std::__shared_weak_count *v360;
  float32x2_t v361[2];
  char v362;
  unint64_t v363;
  uint64_t v364;
  __int32 v365;
  char v366;
  _BYTE __p[56];
  __int128 v368;
  int v369;
  void *v370[2];
  int8x16_t v371;
  float64x2_t v372;
  float32x4_t v373;
  _QWORD v374[6];
  uint64_t (**v375)();
  uint64_t *v376;
  std::__shared_weak_count *v377;
  uint64_t v378;
  unsigned int v379;
  char v380;
  char v381;
  uint64_t (**v382)();
  __int128 v383;
  uint64_t v384;
  int v385;
  int v386;
  char v387;
  float v388;
  uint64_t (**v389)();
  __int128 v390;
  _OWORD v391[7];
  uint64_t (**v392)();
  uint64_t v393;
  std::__shared_weak_count *v394;
  uint64_t v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  __int16 v399;
  _QWORD v400[2];
  std::__shared_weak_count *v401;
  uint64_t (**v402)();
  uint64_t v403;
  std::__shared_weak_count *v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  uint64_t v408;
  unsigned __int16 v409;
  _OWORD v410[3];
  float32x2_t v411;
  unsigned __int32 v412;
  int v413;
  _OWORD v414[2];
  int8x16_t v415;
  float32x4_t v416;
  uint64_t (**v417)();
  uint64_t v418;
  std::__shared_weak_count *v419;
  float32x2_t v420[2];
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  int v425;
  unint64_t v426;
  _BYTE v427[24];
  _BYTE *v428;
  char v429;
  uint64_t v430;

  v430 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a2 + 80);
  LODWORD(v389) = *(_DWORD *)(a2 + 64);
  HIDWORD(v389) = v10;
  *(_QWORD *)&v390 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 100);
  sub_223207E58(__p, (int *)&v389);
  v421 = *(_OWORD *)&__p[8];
  v422 = *(_OWORD *)&__p[24];
  v423 = *(_OWORD *)&__p[40];
  v424 = v368;
  v425 = v369;
  v426 = v11;
  v420[1] = (float32x2_t)&off_24EC20868;
  v420[0] = (float32x2_t)&off_24EC207B8;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  v389 = &off_24EC715B8;
  *(_QWORD *)&v390 = v12;
  *((_QWORD *)&v390 + 1) = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v351 = (uint64_t)a5;
  if (sub_2242A78F0((uint64_t)&v389) == 1380410945)
  {
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)__p = &off_24EC715B8;
    *(_QWORD *)&__p[8] = v17;
    *(_QWORD *)&__p[16] = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    sub_2234164F4(&v417, (uint64_t)__p, v11);
    *(_QWORD *)__p = &off_24EC715B8;
    v22 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v23 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    goto LABEL_102;
  }
  v25 = sub_2242A78F0((uint64_t)&v389);
  if (v25 == 875836518)
  {
    v375 = &off_24EC715B8;
    v376 = (uint64_t *)v12;
    v377 = v13;
    if (v13)
    {
      v39 = (unint64_t *)&v13->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    sub_223C239BC((uint64_t)&v375, v11, 1, __p);
    v41 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v390 = v41;
    if (v13)
    {
      v42 = (unint64_t *)&v13->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_QWORD *)__p = &off_24EC715B8;
    v44 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v45 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v375 = &off_24EC715B8;
    v36 = v377;
    if (!v377)
      goto LABEL_67;
    v47 = (unint64_t *)&v377->__shared_owners_;
    do
      v38 = __ldaxr(v47);
    while (__stlxr(v38 - 1, v47));
LABEL_65:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    goto LABEL_67;
  }
  if (v25 != 1111970369)
  {
    v375 = &off_24EC715B8;
    v376 = (uint64_t *)v12;
    v377 = v13;
    if (v13)
    {
      v48 = (unint64_t *)&v13->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    sub_223C27024((uint64_t)&v375, v11, __p);
    v50 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v390 = v50;
    if (v13)
    {
      v51 = (unint64_t *)&v13->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_QWORD *)__p = &off_24EC715B8;
    v53 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v54 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v375 = &off_24EC715B8;
    v36 = v377;
    if (!v377)
      goto LABEL_67;
    v56 = (unint64_t *)&v377->__shared_owners_;
    do
      v38 = __ldaxr(v56);
    while (__stlxr(v38 - 1, v56));
    goto LABEL_65;
  }
  v27 = *(_QWORD *)(a1 + 8);
  v26 = *(std::__shared_weak_count **)(a1 + 16);
  v375 = &off_24EC715B8;
  v376 = (uint64_t *)v27;
  v377 = v26;
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  sub_2234164F4(__p, (uint64_t)&v375, v11);
  v30 = *(_OWORD *)&__p[8];
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  v390 = v30;
  if (v13)
  {
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)__p = &off_24EC715B8;
  v33 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v34 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v375 = &off_24EC715B8;
  v36 = v377;
  if (v377)
  {
    v37 = (unint64_t *)&v377->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    goto LABEL_65;
  }
LABEL_67:
  if ((_QWORD)v390)
  {
    v57 = *(std::__shared_weak_count **)(v390 + 8);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      do
        v60 = __ldaxr(v58);
      while (__stlxr(v60 - 1, v58));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  __p[0] = 0;
  __p[24] = 0;
  v61 = (uint64_t *)v390;
  v383 = v390;
  if (*((_QWORD *)&v390 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    v61 = (uint64_t *)v383;
  }
  v382 = &off_24EC71528;
  if (v61)
  {
    v64 = *v61;
    v65 = (std::__shared_weak_count *)v61[1];
    if (!v65)
      goto LABEL_84;
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    do
      v68 = __ldaxr(v66);
    while (__stlxr(v68 - 1, v66));
    if (v68)
    {
LABEL_84:
      if (!v64)
        goto LABEL_86;
      goto LABEL_85;
    }
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (v64)
LABEL_85:
      sub_2242AE7CC(v383);
  }
LABEL_86:
  sub_223C27CA8((uint64_t)&v382, (uint64_t)__p, &v417);
  if (!(_QWORD)v383)
    goto LABEL_94;
  v69 = *(_QWORD *)v383;
  v70 = *(std::__shared_weak_count **)(v383 + 8);
  if (!v70)
    goto LABEL_92;
  v71 = (unint64_t *)&v70->__shared_owners_;
  do
    v72 = __ldxr(v71);
  while (__stxr(v72 + 1, v71));
  do
    v73 = __ldaxr(v71);
  while (__stlxr(v73 - 1, v71));
  if (v73)
  {
LABEL_92:
    if (!v69)
      goto LABEL_94;
    goto LABEL_93;
  }
  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
  std::__shared_weak_count::__release_weak(v70);
  if (v69)
LABEL_93:
    sub_2242AE9A8(v383);
LABEL_94:
  v382 = &off_24EC715B8;
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
  if (*((_QWORD *)&v383 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (__p[24] && *(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
LABEL_102:
  v389 = &off_24EC715B8;
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
  if (!*((_QWORD *)&v390 + 1))
    goto LABEL_106;
  v78 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = (uint64_t *)v418;
    if (!v418)
      goto LABEL_127;
  }
  else
  {
LABEL_106:
    v80 = (uint64_t *)v418;
    if (!v418)
      goto LABEL_127;
  }
  v81 = *v80;
  v82 = (std::__shared_weak_count *)v80[1];
  if (!v82)
    goto LABEL_112;
  v83 = (unint64_t *)&v82->__shared_owners_;
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
  do
    v85 = __ldaxr(v83);
  while (__stlxr(v85 - 1, v83));
  if (v85)
  {
LABEL_112:
    if (v81)
      goto LABEL_113;
LABEL_127:
    a5[1] = 0;
    a5[2] = 0;
    *a5 = &off_24EC715B8;
    goto LABEL_382;
  }
  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
  std::__shared_weak_count::__release_weak(v82);
  if (!v81)
    goto LABEL_127;
LABEL_113:
  v86.i32[0] = a4[1].i32[0];
  v87 = (float32x2_t)a4[2];
  v88 = (float32x2_t)a4[4];
  v20.i32[0] = a4[5].i32[0];
  *(int32x2_t *)v21.f32 = a4[6];
  v21.i32[2] = a4[7].i32[0];
  v89 = (int8x16_t)vnegq_f32(v21);
  v90 = *(float32x4_t *)(a2 + 16);
  v91 = vmulq_n_f32(*(float32x4_t *)a2, v86.f32[0]);
  v86.i32[1] = a4[3].i32[0];
  v92 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*a4, (int32x2_t)v87), *(float *)v89.i32), (float32x2_t)vzip2_s32(*a4, (int32x2_t)v87), *(float32x2_t *)v21.f32, 1), v86, v21, 2);
  v86.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v88, *(float32x2_t *)v89.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v88, 1), *(float32x2_t *)v21.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), v20).u32[0];
  v93 = *(float32x4_t *)(a2 + 32);
  v94 = *(float32x4_t *)(a2 + 48);
  HIDWORD(v95) = 0;
  v96 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*a4)), v90, v87.f32[0]), v93, v88.f32[0]), (float32x4_t)0, v94);
  v97 = (int32x4_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*(float32x4_t *)a2, (float32x2_t)*a4, 1), v90, v87, 1), v93, v88, 1), (float32x4_t)0, v94);
  v98 = vaddq_f32(v94, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, v92.f32[0]), v90, v92, 1), v93, v86.f32[0]));
  v415 = (int8x16_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v91, v90, v86.f32[1]), v93, v20.f32[0]), (float32x4_t)0, v94);
  v416 = v98;
  *(_QWORD *)&v99 = vzip1q_s32(v96, v97).u64[0];
  v98.i64[0] ^= 0x8000000080000000;
  *((_QWORD *)&v99 + 1) = v415.u32[0];
  v100 = (int8x16_t)vtrn2q_s32(v96, v97);
  v100.i32[2] = v415.i32[1];
  v414[0] = v96;
  v414[1] = v97;
  v101 = vzip2q_s32(v96, v97);
  v101.i32[2] = v415.i32[2];
  LODWORD(v95) = vdupq_lane_s32(*(int32x2_t *)&v100, 0).i32[3];
  *(_QWORD *)((char *)&v95 + 4) = vextq_s8(v100, (int8x16_t)v101, 4uLL).u64[0];
  v101.i64[1] = vdupq_laneq_s32(v101, 2).u32[0];
  v410[1] = v95;
  v410[0] = v99;
  v410[2] = v101;
  v411 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v99, v98.f32[0]), *(float32x2_t *)v100.i8, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v101.i8, COERCE_FLOAT(v98.i32[2] ^ 0x80000000));
  v412 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v415.i8, *(float32x2_t *)v98.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.f32, 1), *(float32x2_t *)v415.i8, 1), (float32x2_t)(v98.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v415, v415, 8uLL)).u32[0];
  v413 = 1065353216;
  v102 = (uint64_t *)v418;
  v376 = (uint64_t *)v418;
  v377 = v419;
  if (v419)
  {
    v103 = (unint64_t *)&v419->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v375 = &off_24EC71528;
  if (!v102)
  {
    v110 = 0;
    goto LABEL_129;
  }
  v105 = *v102;
  v106 = (std::__shared_weak_count *)v102[1];
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    do
      v109 = __ldaxr(v107);
    while (__stlxr(v109 - 1, v107));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
      v110 = (uint64_t)v376;
      if (!v105)
        goto LABEL_129;
      goto LABEL_123;
    }
  }
  v110 = (uint64_t)v376;
  if (v105)
LABEL_123:
    sub_2242AE7CC(v110);
LABEL_129:
  v400[0] = &off_24EC715B8;
  v400[1] = v110;
  v401 = v377;
  v376 = 0;
  v377 = 0;
  sub_22429724C((uint64_t)v400, (uint64_t)__p);
  v389 = &off_24EC28CD0;
  v390 = *(_OWORD *)&__p[8];
  v391[0] = *(_OWORD *)&__p[24];
  *(_OWORD *)((char *)v391 + 14) = *(_OWORD *)&__p[38];
  v402 = &off_24EC28D40;
  sub_2232BF504((uint64_t)&v389, (uint64_t)&v403);
  v389 = &off_24EC28CD0;
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
  if (!*((_QWORD *)&v390 + 1))
    goto LABEL_133;
  v112 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
    v400[0] = &off_24EC715B8;
    v114 = v401;
    if (!v401)
      goto LABEL_137;
  }
  else
  {
LABEL_133:
    v400[0] = &off_24EC715B8;
    v114 = v401;
    if (!v401)
      goto LABEL_137;
  }
  v115 = (unint64_t *)&v114->__shared_owners_;
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (v116)
  {
LABEL_137:
    v117 = v376;
    if (!v376)
      goto LABEL_145;
    goto LABEL_138;
  }
  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
  std::__shared_weak_count::__release_weak(v114);
  v117 = v376;
  if (!v376)
    goto LABEL_145;
LABEL_138:
  v118 = *v117;
  v119 = (std::__shared_weak_count *)v117[1];
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
    do
      v122 = __ldaxr(v120);
    while (__stlxr(v122 - 1, v120));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      if (!v118)
        goto LABEL_145;
      goto LABEL_144;
    }
  }
  if (v118)
LABEL_144:
    sub_2242AE9A8((uint64_t)v376);
LABEL_145:
  v375 = &off_24EC715B8;
  v123 = v377;
  if (!v377)
    goto LABEL_149;
  v124 = (unint64_t *)&v377->__shared_owners_;
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (v125)
  {
LABEL_149:
    v126 = v403;
    v127 = v404;
    if (v404)
      goto LABEL_150;
LABEL_182:
    v392 = &off_24EC21DF8;
    v393 = v126;
    v394 = 0;
    v395 = v405;
    v396 = v406;
    v397 = v407;
    v398 = v408;
    v399 = v409;
    goto LABEL_183;
  }
  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
  std::__shared_weak_count::__release_weak(v123);
  v126 = v403;
  v127 = v404;
  if (!v404)
    goto LABEL_182;
LABEL_150:
  v128 = (unint64_t *)&v127->__shared_owners_;
  do
    v129 = __ldxr(v128);
  while (__stxr(v129 + 1, v128));
  v11 = v409;
  do
    v130 = __ldxr(v128);
  while (__stxr(v130 + 1, v128));
  v131 = v405;
  *(_OWORD *)__p = v406;
  *(_OWORD *)&__p[16] = v407;
  *(_QWORD *)&__p[32] = v408;
  do
    v132 = __ldxr(v128);
  while (__stxr(v132 + 1, v128));
  do
    v133 = __ldaxr(v128);
  while (__stlxr(v133 - 1, v128));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  do
    v134 = __ldaxr(v128);
  while (__stlxr(v134 - 1, v128));
  if (!v134)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  v392 = &off_24EC21DF8;
  do
    v135 = __ldxr(v128);
  while (__stxr(v135 + 1, v128));
  do
    v136 = __ldxr(v128);
  while (__stxr(v136 + 1, v128));
  v396 = *(_OWORD *)__p;
  v397 = *(_OWORD *)&__p[16];
  v398 = *(_QWORD *)&__p[32];
  do
    v137 = __ldxr(v128);
  while (__stxr(v137 + 1, v128));
  v393 = v126;
  v394 = v127;
  v395 = v131;
  v399 = v11;
  do
    v138 = __ldaxr(v128);
  while (__stlxr(v138 - 1, v128));
  if (!v138)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  do
    v139 = __ldaxr(v128);
  while (__stlxr(v139 - 1, v128));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  do
    v140 = __ldaxr(v128);
  while (__stlxr(v140 - 1, v128));
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
LABEL_183:
  sub_223CC580C((uint64_t)&v392, (uint64_t)&v389);
  v141 = *(float *)(a2 + 108);
  v388 = 1.0 / v141;
  v387 = 0;
  v382 = &off_24EC216B8;
  sub_22321B00C(&v426, &dword_2245F5CE0, &v383);
  v375 = &off_24EC21B18;
  sub_2231C5C38(&v426, &v376);
  v374[0] = v420;
  v374[1] = v414;
  v374[2] = &v387;
  v374[3] = &v375;
  v374[4] = &v388;
  v374[5] = &v382;
  v145 = *(_QWORD **)(a3 + 40);
  v146 = (_QWORD *)(a3 + 48);
  if (v145 != (_QWORD *)(a3 + 48))
  {
    v147 = &qword_25578F000;
    v148.i32[3] = 0;
    while (1)
    {
      v149 = v145[6];
      v144.i64[0] = *(_QWORD *)(v149 + 16);
      v144.i32[2] = *(_DWORD *)(v149 + 24);
      v148.i64[0] = *(_QWORD *)(v149 + 28);
      v148.i32[2] = *(_DWORD *)(v149 + 36);
      v150 = atomic_load((unsigned __int8 *)&qword_25578F140);
      if ((v150 & 1) == 0)
      {
        v347 = v148;
        v349 = v144;
        v237 = __cxa_guard_acquire(&qword_25578F140);
        v148 = v347;
        v144 = v349;
        if (v237)
        {
          *((_DWORD *)v147 + 78) = 1065098332;
          __cxa_guard_release(&qword_25578F140);
          v148 = v347;
          v144 = v349;
        }
      }
      v151 = atomic_load((unsigned __int8 *)&qword_25578F150);
      if ((v151 & 1) == 0)
      {
        v348 = v148;
        v350 = v144;
        v238 = __cxa_guard_acquire(&qword_25578F150);
        v148 = v348;
        v144 = v350;
        if (v238)
        {
          dword_25578F148 = 1043452119;
          __cxa_guard_release(&qword_25578F150);
          v148 = v348;
          v144 = v350;
        }
      }
      v152 = vcvt_hight_f64_f32((float32x4_t)v148);
      v153 = vcvtq_f64_f32(*(float32x2_t *)v148.i8);
      v154 = (float64x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL);
      if (fabsf(*(float *)(v149 + 36)) >= *((float *)v147 + 78))
      {
        v172.f64[0] = v153.f64[0];
        v172.f64[1] = v154.f64[0];
        v173 = (int64x2_t)vmulq_f64(v172, (float64x2_t)0);
        _Q6.f64[0] = v152.f64[0];
        *(_QWORD *)&_Q6.f64[1] = v173.i64[0];
        v175 = vmulq_f64(v172, (float64x2_t)xmmword_2245F5CB0);
        v176 = (float64x2_t)vextq_s8((int8x16_t)v175, (int8x16_t)vmulq_f64(v152, (float64x2_t)0), 8uLL);
        v177 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v173, 1), v175);
        _Q4 = vsubq_f64(_Q6, v176);
        _Q5 = vmulq_f64(_Q4, _Q4);
        _Q6.f64[0] = _Q4.f64[1];
        __asm { FMLA            D5, D6, V4.D[1] }
        _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v177.f64[0], v177.f64[0]));
        v168 = vmulq_n_f64(_Q4, _Q5.f64[0]);
        _Q3 = vmulq_f64(v177, _Q5);
        _Q5.f64[0] = v154.f64[0];
        _Q5.f64[1] = v152.f64[0];
        _Q6.f64[0] = v152.f64[0];
        _Q6.f64[1] = v153.f64[0];
        v180.f64[0] = _Q3.f64[0];
        v180.f64[1] = v168.f64[0];
        _Q5 = vmlsq_f64(vmulq_f64(_Q5, v180), _Q6, (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)_Q3, 8uLL));
        v182 = vmlsq_f64(vmulq_laneq_f64(v153, v168, 1), v154, v168);
        _Q6 = vmulq_f64(_Q5, _Q5);
        _D7 = _Q5.f64[1];
        __asm { FMLA            D6, D7, V5.D[1] }
        _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v182.f64[0], v182.f64[0]));
        v142 = vmulq_n_f64(_Q5, _Q6.f64[0]);
        v166 = (float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)vmulq_f64(v182, _Q6), 8uLL);
        *(_QWORD *)&_Q6.f64[0] = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
        v170 = vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
      }
      else
      {
        v155.f64[0] = v154.f64[0];
        v155.f64[1] = v152.f64[0];
        v156.f64[0] = v152.f64[0];
        v156.f64[1] = v153.f64[0];
        v142.f64[0] = -0.0;
        _Q6 = vmlaq_f64(vmulq_f64(v156, (float64x2_t)xmmword_2245D2420), v155, (float64x2_t)xmmword_2245F5CB0);
        v158 = vmlaq_f64(vmulq_f64(v154, v142), v153, (float64x2_t)0);
        _Q7 = vmulq_f64(_Q6, _Q6);
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q7.f64[0], v158.f64[0], v158.f64[0]));
        _Q16 = vmulq_f64(v158, _Q7);
        v142 = vmulq_n_f64(_Q6, _Q7.f64[0]);
        v166 = (float64x2_t)vextq_s8((int8x16_t)v142, (int8x16_t)_Q16, 8uLL);
        _Q16.f64[1] = v142.f64[0];
        _Q4 = vmlsq_f64(vmulq_f64(v156, v166), v155, _Q16);
        _Q6 = vmlsq_laneq_f64(vmulq_f64(v154, v142), v153, v142, 1);
        _Q3 = vmulq_f64(_Q4, _Q4);
        _Q16.f64[0] = _Q4.f64[1];
        __asm { FMLA            D3, D16, V4.D[1] }
        _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], _Q6.f64[0], _Q6.f64[0]));
        v168 = vmulq_n_f64(_Q4, _Q3.f64[0]);
        *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vmulq_f64(_Q6, _Q3);
        v170 = vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
        *(_QWORD *)&_Q6.f64[0] = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
      }
      *(_QWORD *)&v184.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v144);
      v142.f64[1] = v166.f64[0];
      v153.f64[1] = v154.f64[0];
      *(_QWORD *)&v168.f64[1] = v170;
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
      *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
      *(_QWORD *)&v152.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
      v185.f64[1] = 1.0;
      v185.f64[0] = v184.f64[0];
      v148 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v153), v152);
      v186 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142), _Q6);
      v187 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v168), _Q3);
      v144 = vcvt_hight_f32_f64(*(int32x2_t *)v144.f32, v185);
      *(float32x4_t *)v370 = v187;
      v371 = v186;
      v372 = (float64x2_t)v148;
      v373 = v144;
      if (*(_BYTE *)(v149 + 384))
      {
        v188 = *(_DWORD **)(v149 + 360);
        v189 = *(_DWORD **)(v149 + 368);
        if (v188 == v189)
        {
          v190 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
          v191 = (int8x16_t)xmmword_2245F5CC0;
          v192 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        }
        else
        {
          v186 = *(int8x16_t *)v370;
          v148 = v371;
          _Q3 = v372;
          v187.i64[0] = vextq_s8(v186, v186, 8uLL).u64[0];
          _Q6 = (float64x2_t)vextq_s8(v148, v148, 8uLL);
          v190 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
          v191 = (int8x16_t)xmmword_2245F5CC0;
          v192 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
          v193 = (float32x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
          do
          {
            LODWORD(v184.f64[0]) = *v188;
            v143.i32[0] = v188[1];
            v188 += 2;
            v194 = vmla_n_f32(vmul_n_f32((float32x2_t)v370[0], *(float *)v184.f64), *(float32x2_t *)v371.i8, *(float *)v143.i32);
            *(float32x2_t *)v195.f32 = vmla_f32(v194, (float32x2_t)vdup_n_s32(0xBC23D70A), *(float32x2_t *)&v372.f64[0]);
            v196 = vmla_f32(vmul_f32(*(float32x2_t *)v187.f32, *(float32x2_t *)&v184.f64[0]), *(float32x2_t *)v143.i8, *(float32x2_t *)&_Q6.f64[0]);
            v143.i32[0] = -1138501878;
            *(float32x2_t *)&v195.u32[2] = vmla_f32(v196, *(float32x2_t *)v143.i8, v193);
            v197 = vaddq_f32(v195, v144);
            v198 = v197.f32[2];
            *(int32x2_t *)v195.f32 = vdup_n_s32(0x3C23D70Au);
            *(float32x2_t *)v199.f32 = vmla_f32(v194, *(float32x2_t *)v195.f32, *(float32x2_t *)&v372.f64[0]);
            v195.i32[0] = 1008981770;
            *(float32x2_t *)&v199.u32[2] = vmla_f32(v196, *(float32x2_t *)v195.f32, v193);
            v200 = vaddq_f32(v199, v144);
            *(double *)v199.i64 = v200.f32[2];
            v201 = vcvtq_f64_f32(*(float32x2_t *)v197.f32);
            v202 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v192, v201), (int8x16_t)v201, (int8x16_t)v192);
            v203 = vcvtq_f64_f32(*(float32x2_t *)v200.f32);
            v192 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v202, v203), (int8x16_t)v203, (int8x16_t)v202);
            v204 = (float64x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL);
            v195.i64[1] = *(_QWORD *)&v204.f64[1];
            *(_QWORD *)&v205.f64[1] = v191.i64[1];
            v195.i64[0] = v191.i64[0];
            v205.f64[0] = v198;
            v206.i64[1] = *(_QWORD *)&v204.f64[1];
            *(double *)v206.i64 = v198;
            v207 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v195, v205), v206, v191);
            v184 = (float64x2_t)vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL);
            v195.i64[1] = *(_QWORD *)&v184.f64[1];
            *(_QWORD *)&v205.f64[1] = v207.i64[1];
            v195.i64[0] = v207.i64[0];
            *(_QWORD *)&v205.f64[0] = v199.i64[0];
            v206.i64[1] = *(_QWORD *)&v184.f64[1];
            v206.i64[0] = v199.i64[0];
            v191 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v195, v205), v206, v207);
            v204.f64[1] = v198;
            v208 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v204, v190), (int8x16_t)v204, (int8x16_t)v190);
            *(_QWORD *)&v184.f64[1] = v199.i64[0];
            v143 = (int8x16_t)vcgtq_f64(v184, v208);
            v190 = (float64x2_t)vbslq_s8(v143, (int8x16_t)v184, (int8x16_t)v208);
          }
          while (v188 != v189);
        }
        *(float64x2_t *)__p = v192;
        *(int8x16_t *)&__p[16] = v191;
        *(float64x2_t *)&__p[32] = v190;
        v361[0].i32[0] = 1036831949;
        v361[0].f32[1] = v141;
        if (!sub_223EA6588((double *)__p, (uint64_t)v410, v420, v361, (float32x4_t)v186, *(double *)v148.i64, v190.f64[0], _Q3.f64[0], *(double *)v187.i64, (int8x16_t)v192, (int8x16_t)_Q6, v191))goto LABEL_210;
      }
      if (!*(_BYTE *)(v149 + 457))
        sub_22324A974();
      v209 = *(unsigned __int8 *)(v149 + 456);
      if (*(_BYTE *)(v149 + 448))
        break;
      if (*(_BYTE *)(v149 + 384))
      {
        v223 = *(float32x2_t **)(v149 + 360);
        v224 = (uint64_t)(*(_QWORD *)(v149 + 368) - (_QWORD)v223) >> 3;
        v225 = &byte_2245C3FE4[3 * v209];
        if (v209 >= 0x2A)
          v225 = &byte_2245C9FE2;
        v186.i8[0] = *v225;
        *(float *)v186.i32 = (float)v186.u32[0];
        v148.i8[0] = v225[1];
        LOBYTE(v185.f64[0]) = v225[2];
        *(float *)&v186.i32[1] = (float)v148.u32[0];
        *(float *)&v186.i32[2] = (float)LODWORD(v185.f64[0]);
        v226 = (int8x16_t)vdivq_f32((float32x4_t)v186, (float32x4_t)vdupq_n_s32(0x437F0000u));
        v365 = v226.i32[2];
        v364 = v226.i64[0];
        v366 = 1;
        v11 &= 0xFFFFFFFFFFFF0000;
        sub_224003F18(v224, v223, (float32x2_t *)v370, 1, (uint64_t)&v364, v11, (uint64_t)__p, v226);
        sub_223415678((uint64_t)v374, (uint64_t *)__p, v227, v228, v229, v230, v231, v232, v233, v234);
        goto LABEL_209;
      }
LABEL_210:
      v235 = (_QWORD *)v145[1];
      if (v235)
      {
        do
        {
          v236 = v235;
          v235 = (_QWORD *)*v235;
        }
        while (v235);
      }
      else
      {
        do
        {
          v236 = (_QWORD *)v145[2];
          _ZF = *v236 == (_QWORD)v145;
          v145 = v236;
        }
        while (!_ZF);
      }
      v145 = v236;
      if (v236 == v146)
        goto LABEL_220;
    }
    v210 = v147;
    v212 = *(_QWORD *)(v149 + 424);
    v211 = *(_QWORD *)(v149 + 432);
    v213 = &byte_2245C3FE4[3 * v209];
    if (v209 >= 0x2A)
      v213 = &byte_2245C9FE2;
    v186.i8[0] = *v213;
    *(float *)v186.i32 = (float)v186.u32[0];
    v148.i8[0] = v213[1];
    LOBYTE(v185.f64[0]) = v213[2];
    *(float *)&v186.i32[1] = (float)v148.u32[0];
    *(float *)&v186.i32[2] = (float)LODWORD(v185.f64[0]);
    v214 = vdivq_f32((float32x4_t)v186, (float32x4_t)vdupq_n_s32(0x437F0000u));
    v361[1].i32[0] = v214.i32[2];
    v361[0] = *(float32x2_t *)v214.f32;
    sub_2241498F4((uint64_t)__p, 0);
    for (; v212 != v211; v212 += 24)
      sub_223744DD8((unint64_t *)__p, (uint64_t)(*(_QWORD *)(v212 + 8) - *(_QWORD *)v212) >> 3, *(int32x4_t **)v212, (float32x2_t *)v370);
    sub_2237415E8((unint64_t)__p, (float32x2_t *)v370, (uint64_t)v361, v209 | 0x100);
    v147 = v210;
    sub_223415678((uint64_t)v374, (uint64_t *)__p, v215, v216, v217, v218, v219, v220, v221, v222);
LABEL_209:
    sub_22316F8F4((uint64_t *)__p);
    goto LABEL_210;
  }
LABEL_220:
  *(_QWORD *)__p = &off_24EC232F0;
  sub_223416D28((uint64_t)&v389, (uint64_t *)&__p[8]);
  v239 = *(_QWORD *)&__p[8];
  if (!*(_QWORD *)&__p[8])
    goto LABEL_236;
  v240 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v241 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
    do
      v243 = __ldaxr(v241);
    while (__stlxr(v243 - 1, v241));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
    v239 = *(_QWORD *)&__p[8];
    v244 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v245 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v246 = __ldxr(v245);
      while (__stxr(v246 + 1, v245));
      do
        v247 = __ldaxr(v245);
      while (__stlxr(v247 - 1, v245));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
  }
  if (BYTE1(v369))
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v239 + 96))(v370, v239, 1);
    v248 = (uint64_t)v376;
    v249 = v377;
    if (!v377)
      goto LABEL_241;
  }
  else
  {
LABEL_236:
    v370[0] = 0;
    v248 = (uint64_t)v376;
    v249 = v377;
    if (!v377)
      goto LABEL_241;
  }
  v250 = (unint64_t *)&v249->__shared_owners_;
  do
    v251 = __ldxr(v250);
  while (__stxr(v251 + 1, v250));
  do
    v252 = __ldaxr(v250);
  while (__stlxr(v252 - 1, v250));
  if (v252)
  {
LABEL_241:
    if (!v248)
      goto LABEL_246;
    goto LABEL_242;
  }
  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
  std::__shared_weak_count::__release_weak(v249);
  if (!v248)
  {
LABEL_246:
    v361[0] = 0;
    v253 = v368;
    v254 = *(_QWORD *)&__p[24];
    if (!(_BYTE)v369)
      goto LABEL_255;
    goto LABEL_247;
  }
LABEL_242:
  if (!v381)
    goto LABEL_246;
  (*(void (**)(float32x2_t *__return_ptr, uint64_t *, uint64_t))(*v376 + 96))(v361, v376, 1);
  v253 = v368;
  v254 = *(_QWORD *)&__p[24];
  if (!(_BYTE)v369)
    goto LABEL_255;
LABEL_247:
  if (v254)
  {
    v255 = *(_QWORD *)&__p[8];
    v256 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v257 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v258 = __ldxr(v257);
      while (__stxr(v258 + 1, v257));
      do
        v259 = __ldaxr(v257);
      while (__stlxr(v259 - 1, v257));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v255 + 88))(v255, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v254 = *(_QWORD *)&__p[24];
  }
LABEL_255:
  if (v380 && v378)
    (*(void (**)(uint64_t *, uint64_t, const char *))(*v376 + 88))(v376, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
  v354 = *(unsigned int *)&__p[52];
  v260 = (DWORD1(v368) * *(_DWORD *)&__p[52]);
  if ((_DWORD)v260)
  {
    v261 = (3 * v253);
    if (3 * v253)
    {
      v262 = 0;
      v353 = v254 + v260;
      v352 = v379;
      v263 = v378;
      do
      {
        v264 = 0;
        v265 = 0;
        do
        {
          if (*(float *)(v384 + 4 * (v385 * v265 + v386 * v262)) != -65504.0)
          {
            v269 = v254;
            v270 = (unsigned __int16 *)(v254 + v264);
            if (!(v254 + v264)
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v271 = *((unsigned __int8 *)v270 + 2), v272 = *v270, (v273 = (unsigned __int16 *)(v263 + v264)) == 0)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v266 = (float)*v273 * 0.5;
            v267 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vadd_f32(vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)(*(_QWORD *)&vdup_n_s32(v272 | (v271 << 16)) & 0xFFFFFF00FFFFFFLL), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (float32x2_t)0x3F0000003F000000), vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)(*(_QWORD *)&vdup_n_s32(*v273 | (*((unsigned __int8 *)v273 + 2) << 16)) & 0xFFFFFF00FFFFFFLL), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (float32x2_t)0x3F0000003F000000))), (uint32x2_t)0x800000010);
            v268 = vorr_s8((int8x8_t)v267, (int8x8_t)vdup_lane_s32(v267, 1));
            *((_BYTE *)v270 + 2) = v268.i8[2];
            *v270 = v268.i16[0] | (int)(float)((float)((float)v272 * 0.5) + v266);
            v254 = v269;
          }
          ++v265;
          v264 += 3;
        }
        while (v261 != v264);
        v254 += v354;
        v263 += v352;
        ++v262;
      }
      while (v254 != v353);
    }
  }
  v274 = v361[0];
  v361[0] = 0;
  if (v274)
    (*(void (**)(float32x2_t))(**(_QWORD **)&v274 + 8))(v274);
  v275 = v370[0];
  v370[0] = 0;
  if (v275)
    (*(void (**)(void *))(*(_QWORD *)v275 + 8))(v275);
  v276 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v277 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  *(_QWORD *)__p = &off_24EC232F0;
  sub_223416D28((uint64_t)&v389, (uint64_t *)&__p[8]);
  v279 = *(void **)&__p[24];
  if ((_BYTE)v369 && *(_QWORD *)&__p[24])
  {
    v280 = *(_QWORD *)&__p[8];
    v281 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v282 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v283 = __ldxr(v282);
      while (__stxr(v283 + 1, v282));
      do
        v284 = __ldaxr(v282);
      while (__stlxr(v284 - 1, v282));
      if (!v284)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v280 + 88))(v280, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v279 = *(void **)&__p[24];
  }
  v427[0] = 0;
  v429 = 0;
  sub_2242A90AC((unsigned int *)&v368, 0x18u, v279, *(unsigned int *)&__p[52] | 0x100000000, (uint64_t)v427, (uint64_t)v370);
  if (v429)
  {
    v285 = v428;
    if (v428 == v427)
    {
      v286 = 4;
      v285 = v427;
    }
    else
    {
      if (!v428)
        goto LABEL_295;
      v286 = 5;
    }
    (*(void (**)(void))(*v285 + 8 * v286))();
  }
LABEL_295:
  v287 = sub_2232B5FC8((uint64_t)v370);
  v363 = sub_2242A9824(v287);
  v288 = sub_2232B5FC8((uint64_t)v370);
  v289 = sub_2242A78F0(v288);
  v362 = 12;
  strcpy((char *)v361, "color_buffer");
  sub_2242A8FB0(v351, (unsigned int *)&v363, v289, (uint64_t *)v361, 1u);
  if (v362 < 0)
    operator delete(*(void **)v361);
  v290 = sub_2232B5FC8((uint64_t)v370);
  v291 = *(_QWORD **)(v290 + 8);
  v292 = *(std::__shared_weak_count **)(v290 + 16);
  v359 = v291;
  v360 = v292;
  if (v292)
  {
    v293 = (unint64_t *)&v292->__shared_owners_;
    do
      v294 = __ldxr(v293);
    while (__stxr(v294 + 1, v293));
    v291 = v359;
  }
  v358 = &off_24EC71528;
  if (v291)
  {
    v295 = *v291;
    v296 = (std::__shared_weak_count *)v291[1];
    if (!v296)
      goto LABEL_307;
    v297 = (unint64_t *)&v296->__shared_owners_;
    do
      v298 = __ldxr(v297);
    while (__stxr(v298 + 1, v297));
    do
      v299 = __ldaxr(v297);
    while (__stlxr(v299 - 1, v297));
    if (v299)
    {
LABEL_307:
      if (!v295)
        goto LABEL_309;
      goto LABEL_308;
    }
    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
    std::__shared_weak_count::__release_weak(v296);
    if (v295)
LABEL_308:
      sub_2242AE7CC((uint64_t)v359);
  }
LABEL_309:
  v300 = *(_QWORD **)(v351 + 8);
  v301 = *(std::__shared_weak_count **)(v351 + 16);
  v356 = v300;
  v357 = v301;
  if (v301)
  {
    v302 = (unint64_t *)&v301->__shared_owners_;
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
    v300 = v356;
  }
  v355 = &off_24EC71548;
  if (v300)
  {
    v304 = *v300;
    v305 = (std::__shared_weak_count *)v300[1];
    if (!v305)
      goto LABEL_319;
    v306 = (unint64_t *)&v305->__shared_owners_;
    do
      v307 = __ldxr(v306);
    while (__stxr(v307 + 1, v306));
    do
      v308 = __ldaxr(v306);
    while (__stlxr(v308 - 1, v306));
    if (v308)
    {
LABEL_319:
      if (!v304)
        goto LABEL_321;
      goto LABEL_320;
    }
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
    if (v304)
LABEL_320:
      sub_2242AE8BC((uint64_t)v356);
  }
LABEL_321:
  sub_2242AB678((uint64_t)&v358, (uint64_t)&v355);
  if (v356)
  {
    v310 = *v356;
    v309 = (std::__shared_weak_count *)v356[1];
    if (v309)
    {
      v311 = (unint64_t *)&v309->__shared_owners_;
      do
        v312 = __ldxr(v311);
      while (__stxr(v312 + 1, v311));
      do
        v313 = __ldaxr(v311);
      while (__stlxr(v313 - 1, v311));
      if (!v313)
      {
        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
        std::__shared_weak_count::__release_weak(v309);
        if (!v310)
          goto LABEL_329;
        goto LABEL_328;
      }
    }
    if (v310)
LABEL_328:
      sub_2242AEA98((uint64_t)v356);
  }
LABEL_329:
  v355 = &off_24EC715B8;
  v314 = v357;
  if (!v357)
    goto LABEL_333;
  v315 = (unint64_t *)&v357->__shared_owners_;
  do
    v316 = __ldaxr(v315);
  while (__stlxr(v316 - 1, v315));
  if (!v316)
  {
    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
    std::__shared_weak_count::__release_weak(v314);
    v317 = v359;
    if (!v359)
      goto LABEL_341;
  }
  else
  {
LABEL_333:
    v317 = v359;
    if (!v359)
      goto LABEL_341;
  }
  v319 = *v317;
  v318 = (std::__shared_weak_count *)v317[1];
  if (v318)
  {
    v320 = (unint64_t *)&v318->__shared_owners_;
    do
      v321 = __ldxr(v320);
    while (__stxr(v321 + 1, v320));
    do
      v322 = __ldaxr(v320);
    while (__stlxr(v322 - 1, v320));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
      if (!v319)
        goto LABEL_341;
      goto LABEL_340;
    }
  }
  if (v319)
LABEL_340:
    sub_2242AE9A8((uint64_t)v359);
LABEL_341:
  v358 = &off_24EC715B8;
  v323 = v360;
  if (v360)
  {
    v324 = (unint64_t *)&v360->__shared_owners_;
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
      if (LOBYTE(v372.f64[0]))
        goto LABEL_346;
LABEL_350:
      if (v371.i8[15] < 0)
        operator delete(v370[1]);
      goto LABEL_352;
    }
  }
  if (!LOBYTE(v372.f64[0]))
    goto LABEL_350;
LABEL_346:
  (*(void (**)(void **))v370[0])(v370);
LABEL_352:
  v326 = *(std::__shared_weak_count **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    v327 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  v329 = v377;
  if (v377)
  {
    v330 = (unint64_t *)&v377->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
  if (*((_QWORD *)&v383 + 1))
  {
    v333 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
    do
      v334 = __ldaxr(v333);
    while (__stlxr(v334 - 1, v333));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
  }
  v335 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
  if (*((_QWORD *)&v390 + 1))
  {
    v336 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  v338 = v394;
  if (v394)
  {
    v339 = (unint64_t *)&v394->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  v402 = &off_24EC28D40;
  v341 = v404;
  if (v404)
  {
    v342 = (unint64_t *)&v404->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
LABEL_382:
  v417 = &off_24EC715B8;
  v344 = v419;
  if (v419)
  {
    v345 = (unint64_t *)&v419->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
}

void sub_2234152D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_2234155BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223167354(a13);
  sub_223167354(a14);
  sub_223167354(&STACK[0x3E8]);
  sub_2231CE1A0(&STACK[0x468]);
  sub_2232BAA2C(&STACK[0x4D0]);
  sub_2242A8F3C(&STACK[0x5A8]);
  _Unwind_Resume(a1);
}

void sub_2234155DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223167354(a13);
  sub_223167354(a14);
  sub_223167354(&STACK[0x3E8]);
  sub_2231CE1A0(&STACK[0x468]);
  sub_2232BAA2C(&STACK[0x4D0]);
  sub_2242A8F3C(&STACK[0x5A8]);
  _Unwind_Resume(a1);
}

void sub_2234155E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223167354(a13);
  sub_223167354(a14);
  sub_223167354(&STACK[0x3E8]);
  sub_2231CE1A0(&STACK[0x468]);
  sub_2232BAA2C(&STACK[0x4D0]);
  sub_2242A8F3C(&STACK[0x5A8]);
  _Unwind_Resume(a1);
}

void sub_2234155EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  unint64_t v41;

  if (a35)
    (*(void (**)(uint64_t))(*(_QWORD *)a35 + 8))(a35);
  v41 = STACK[0x280];
  STACK[0x280] = 0;
  if (v41)
    (*(void (**)(unint64_t))(*(_QWORD *)v41 + 8))(v41);
  sub_2231E94AC(&a41);
  JUMPOUT(0x22341563CLL);
}

void sub_223415630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_22316F8F4(&a41);
  JUMPOUT(0x22341563CLL);
}

void sub_223415678(uint64_t a1, uint64_t *a2, double a3, float32x4_t a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10)
{
  float32x2_t *v12;
  int8x16_t *v13;
  float32x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x2_t v18;
  unsigned __int32 v19;
  float32x2_t v20;
  unsigned __int32 v21;
  float32x2_t v22;
  unsigned __int32 v23;
  float32x2_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  float32x2_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  char *v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  char *v53;
  float32x2_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t *v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  BOOL v68;
  float v69;
  float v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  BOOL v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float32x2_t *v158;
  unsigned int *v159;
  uint64_t (**v160)();
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t (**v163)();
  float v164;
  float32x2_t v165;
  float v166;
  float32x2_t v167;
  float v168;
  _QWORD *v169;
  float32x2_t v170;
  unsigned __int32 v171;
  float32x2_t v172;
  unsigned __int32 v173;
  float32x2_t v174;
  unsigned __int32 v175;
  unint64_t v176;
  unsigned __int32 v177;
  void *__p;
  char *v179;
  char *v180;
  float32x2_t v181;
  float32_t v182;
  uint64_t v183;
  __int32 v184;

  v12 = *(float32x2_t **)a1;
  v13 = *(int8x16_t **)(a1 + 8);
  v169 = a2;
  v14 = v12[3];
  v15 = v13[1];
  v17 = v13[2];
  v16 = v13[3];
  a10.i32[0] = v12[2].i32[0];
  a4.i32[1] = 0;
  v18.i32[0] = 0;
  v18.i32[1] = v12[2].i32[1];
  v19 = vmla_laneq_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*v13, *v13, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v13->i8, 0), 0, *(float32x2_t *)v13->i8, 1)), 0, *(float32x4_t *)v13, 3).u32[0];
  v20 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(a10, *(float *)v15.i32), v18, *(float32x2_t *)v15.i8, 1), v14, (float32x4_t)v15, 2), 0, (float32x4_t)v15, 3);
  v21 = vmla_laneq_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, 0), 0, *(float32x2_t *)v15.i8, 1)), 0, (float32x4_t)v15, 3).u32[0];
  v22 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(a10, *(float *)v17.i32), v18, *(float32x2_t *)v17.i8, 1), v14, (float32x4_t)v17, 2), 0, (float32x4_t)v17, 3);
  v23 = vmla_laneq_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, 0), 0, *(float32x2_t *)v17.i8, 1)), 0, (float32x4_t)v17, 3).u32[0];
  v24 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(a10, *(float *)v16.i32), v18, *(float32x2_t *)v16.i8, 1), v14, (float32x4_t)v16, 2), 0, (float32x4_t)v16, 3);
  v170 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(a10, COERCE_FLOAT(*v13)), v18, *(float32x2_t *)v13->i8, 1), v14, *(float32x4_t *)v13, 2), 0, *(float32x4_t *)v13, 3);
  v171 = v19;
  v172 = v20;
  *(float32x2_t *)v25.f32 = vmla_laneq_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, 0), 0, *(float32x2_t *)v16.i8, 1)), 0, (float32x4_t)v16, 3);
  v173 = v21;
  v174 = v22;
  v176 = (unint64_t)v24;
  v175 = v23;
  v177 = v25.i32[0];
  v27 = *a2;
  v26 = a2[1];
  v179 = 0;
  v180 = 0;
  __p = 0;
  v28 = v26 - v27;
  if (!v28)
  {
    v30 = 0;
    v35 = (unsigned int *)a2[14];
    v159 = (unsigned int *)a2[15];
    if (v35 == v159)
      goto LABEL_67;
    goto LABEL_11;
  }
  v29 = v28 / 12;
  if ((unint64_t)(v28 / 12) >> 60)
    sub_22316E078();
  v30 = (char *)operator new(16 * v29);
  __p = v30;
  v180 = &v30[16 * v29];
  v31 = v30;
  if (((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_73;
  v32 = ((v29 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v31 = &v30[16 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
  v33 = v30 + 16;
  v34 = v32 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v33 - 16) = 0;
    *v33 = 0;
    *(v33 - 4) = 0;
    v33[12] = 0;
    v33 += 32;
    v34 -= 2;
  }
  while (v34);
  if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_73:
    do
    {
      *v31 = 0;
      v31[12] = 0;
      v31 += 16;
    }
    while (v31 != &v30[16 * v29]);
  }
  v179 = &v30[16 * v29];
  v35 = (unsigned int *)a2[14];
  v159 = (unsigned int *)a2[15];
  if (v35 != v159)
  {
LABEL_11:
    v36 = 0;
    v158 = (float32x2_t *)((unint64_t)&v181 | 0xC);
    v37 = 1.0;
    while (1)
    {
      if (*((_DWORD *)a2 + 16) == 2)
      {
        v38 = a2[4] + 12 * v36;
        v39 = *v35;
        v40 = (char *)__p;
        v41 = (char *)__p + 16 * v39;
        if (v41[12])
          goto LABEL_20;
      }
      else
      {
        v39 = *v35;
        v38 = a2[4] + 12 * v39;
        v40 = (char *)__p;
        v41 = (char *)__p + 16 * v39;
        if (v41[12])
          goto LABEL_20;
      }
      v42 = (float32x2_t *)(*v169 + 12 * v39);
      a4.i32[0] = v171;
      v25.i32[0] = v173;
      v22.i32[0] = v175;
      v24.i32[0] = v42[1].i32[0];
      *(float32x2_t *)v43.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v170, COERCE_FLOAT(*v42)), v172, *v42, 1), v174, v24.f32[0]);
      *(float32x2_t *)&v43.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *v42), *(float32x2_t *)v25.f32, *v42, 1), v24, v22);
      a4.i64[0] = v176;
      a4.i32[2] = v177;
      v44 = vaddq_f32(v43, a4);
      a4.i32[0] = v44.i32[2];
      if (fabsf(v44.f32[2]) < 0.0001)
        a4.f32[0] = 0.0001;
      v44.f32[2] = v37;
      a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
      v41[12] = 1;
      v45 = vdivq_f32(v44, a4);
      *((_DWORD *)v41 + 2) = v45.i32[2];
      *(_QWORD *)v41 = v45.i64[0];
LABEL_20:
      v160 = *(uint64_t (***)())v41;
      LODWORD(v161) = *((_DWORD *)v41 + 2);
      v46 = v35[1];
      v47 = &v40[16 * v46];
      if (!v47[12])
      {
        v48 = (float32x2_t *)(*v169 + 12 * v46);
        a4.i32[0] = v171;
        v25.i32[0] = v173;
        v22.i32[0] = v175;
        v24.i32[0] = v48[1].i32[0];
        *(float32x2_t *)v49.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v170, COERCE_FLOAT(*v48)), v172, *v48, 1), v174, v24.f32[0]);
        *(float32x2_t *)&v49.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *v48), *(float32x2_t *)v25.f32, *v48, 1), v24, v22);
        a4.i64[0] = v176;
        a4.i32[2] = v177;
        v50 = vaddq_f32(v49, a4);
        a4.i32[0] = v50.i32[2];
        if (fabsf(v50.f32[2]) < 0.0001)
          a4.f32[0] = 0.0001;
        v50.f32[2] = v37;
        a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
        v47[12] = 1;
        v51 = vdivq_f32(v50, a4);
        *((_DWORD *)v47 + 2) = v51.i32[2];
        *(_QWORD *)v47 = v51.i64[0];
      }
      v181 = *(float32x2_t *)v47;
      v182 = *((float *)v47 + 2);
      v52 = v35[2];
      v53 = &v40[16 * v52];
      if (!v53[12])
      {
        v54 = (float32x2_t *)(*v169 + 12 * v52);
        a4.i32[0] = v171;
        v25.i32[0] = v173;
        v22.i32[0] = v175;
        v24.i32[0] = v54[1].i32[0];
        *(float32x2_t *)v55.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v170, COERCE_FLOAT(*v54)), v172, *v54, 1), v174, v24.f32[0]);
        *(float32x2_t *)&v55.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *v54), *(float32x2_t *)v25.f32, *v54, 1), v24, v22);
        a4.i64[0] = v176;
        a4.i32[2] = v177;
        v56 = vaddq_f32(v55, a4);
        a4.i32[0] = v56.i32[2];
        if (fabsf(v56.f32[2]) < 0.0001)
          a4.f32[0] = 0.0001;
        v56.f32[2] = v37;
        v53[12] = 1;
        v57 = vdivq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0));
        *((_DWORD *)v53 + 2) = v57.i32[2];
        *(_QWORD *)v53 = v57.i64[0];
      }
      v163 = v160;
      v164 = *(float *)&v161;
      v165 = v181;
      v166 = v182;
      v167 = *(float32x2_t *)v53;
      v168 = *((float *)v53 + 2);
      v58 = *(float32x2_t **)a1;
      v59 = *(_QWORD *)(a1 + 24);
      v60 = **(float **)(a1 + 32);
      v61 = *(_QWORD *)(a1 + 40);
      v160 = &off_24EC21FE8;
      sub_2231DCF04(v61, &v161);
      if (v164 > 10.0 && v166 > 10.0 && v168 > 10.0 || v164 < 0.0 && v166 < 0.0 && v168 < 0.0)
        goto LABEL_34;
      if (v164 <= 0.0)
        goto LABEL_46;
      if (v166 <= 0.0 || v168 >= v60 || v166 >= v60 || v164 >= v60 || v168 <= 0.0)
      {
        if (v164 <= 10.0)
        {
          v101 = v168 <= 0.0;
          if (v168 > 10.0)
            v101 = 1;
          if (v166 <= 0.0 || v166 > 10.0)
          {
            v130 = 1.0 / v168;
            v131 = v58[4];
            v132 = v58[5];
            if (v101)
            {
              *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32((float32x2_t)v163, v131), v132);
              v25.i32[2] = 1.0;
              v133 = vmulq_n_f32(v25, 1.0 / v164);
              *(float32x2_t *)v25.f32 = vadd_f32(v132, vmul_f32(v131, v165));
              v25.i32[2] = 1.0;
              v134 = vmulq_n_f32(v25, 1.0 / v166);
              *(float32x2_t *)v25.f32 = vadd_f32(v132, vmul_f32(v131, v167));
              v135 = vsubq_f32(v133, v134);
              v136 = vmulq_n_f32(v135, 0.1 - v134.f32[2]);
              v137 = (int8x16_t)vaddq_f32(v134, vdivq_f32(v136, (float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2)));
              *(float32x2_t *)v135.f32 = v58[6];
              v136.i32[0] = v58[7].i32[0];
              v138 = *(float32x2_t *)((char *)v58 + 60);
              v62.i32[0] = v58[8].i32[1];
              v139 = v58[9];
              v63.i32[0] = v58[10].i32[0];
              *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v135.f32, *(float *)v137.i32), v138, *(float32x2_t *)v137.i8, 1), v139, (float32x4_t)v137, 2);
              v25.i32[2] = 1.0;
              v64.i32[2] = 1.0;
              v140 = vmulq_n_f32(v25, v130);
              v141 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v137.i8), v62, *(float32x2_t *)v137.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL), v63), 0));
              v142 = vsubq_f32(v133, v140);
              v143 = vdivq_f32(vmulq_n_f32(v142, 0.1 - v140.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2));
              v144 = (int8x16_t)vaddq_f32(v140, v143);
              *(float32x2_t *)v143.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v135.f32, *(float *)v144.i32), v138, *(float32x2_t *)v144.i8, 1), v139, (float32x4_t)v144, 2);
              v143.i32[2] = 1.0;
              v182 = v141.f32[2];
              v145 = vdivq_f32(v143, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v144.i8), v62, *(float32x2_t *)v144.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL), v63), 0));
              v181 = *(float32x2_t *)v141.f32;
              v184 = v145.i32[2];
              v183 = v145.i64[0];
              sub_223416974((float32x2_t *)&v163, &v181, v158, (uint64_t)&v160, v38, v59, v60);
            }
            else
            {
              *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32(v165, v131), v132);
              v25.i32[2] = 1.0;
              v146 = vmulq_n_f32(v25, 1.0 / v166);
              *(float32x2_t *)v25.f32 = vadd_f32(v132, vmul_f32(v131, (float32x2_t)v163));
              v25.i32[2] = 1.0;
              v147 = vmulq_n_f32(v25, 1.0 / v164);
              *(float32x2_t *)v25.f32 = vadd_f32(v132, vmul_f32(v131, v167));
              v148 = vsubq_f32(v146, v147);
              v149 = vmulq_n_f32(v148, 0.1 - v147.f32[2]);
              v150 = (int8x16_t)vaddq_f32(v147, vdivq_f32(v149, (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2)));
              *(float32x2_t *)v148.f32 = v58[6];
              v149.i32[0] = v58[7].i32[0];
              v151 = *(float32x2_t *)((char *)v58 + 60);
              v62.i32[0] = v58[8].i32[1];
              v152 = v58[9];
              v63.i32[0] = v58[10].i32[0];
              *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v148.f32, *(float *)v150.i32), v151, *(float32x2_t *)v150.i8, 1), v152, (float32x4_t)v150, 2);
              v25.i32[2] = 1.0;
              v64.i32[2] = 1.0;
              v153 = vmulq_n_f32(v25, v130);
              v154 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v150.i8), v62, *(float32x2_t *)v150.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL), v63), 0));
              v155 = vsubq_f32(v146, v153);
              v156 = (int8x16_t)vaddq_f32(v153, vdivq_f32(vmulq_n_f32(v155, 0.1 - v153.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2)));
              *(float32x2_t *)v153.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v148.f32, *(float *)v156.i32), v151, *(float32x2_t *)v156.i8, 1), v152, (float32x4_t)v156, 2);
              v153.i32[2] = 1.0;
              v182 = v154.f32[2];
              v157 = vdivq_f32(v153, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v156.i8), v62, *(float32x2_t *)v156.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), v63), 0));
              v181 = *(float32x2_t *)v154.f32;
              v184 = v157.i32[2];
              v183 = v157.i64[0];
              sub_223416974((float32x2_t *)&v163, &v167, v158, (uint64_t)&v160, v38, v59, v60);
              sub_223416974((float32x2_t *)&v163, v158, &v181, (uint64_t)&v160, v38, v59, v60);
            }
          }
          else if (v101)
          {
            v102.i32[1] = v165.i32[1];
            v103 = v58[4];
            v104 = v58[5];
            *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32(v167, v103), v104);
            v25.i32[2] = 1.0;
            v105 = vmulq_n_f32(v25, 1.0 / v168);
            *(float32x2_t *)v25.f32 = vadd_f32(v104, vmul_f32(v103, (float32x2_t)v163));
            v106 = vmulq_n_f32(v25, 1.0 / v164);
            *(float32x2_t *)v25.f32 = vadd_f32(v104, vmul_f32(v103, v165));
            v107 = vsubq_f32(v105, v106);
            v108 = (int8x16_t)vaddq_f32(v106, vdivq_f32(vmulq_n_f32(v107, 0.1 - v106.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2)));
            *(float32x2_t *)v107.f32 = v58[6];
            v102.i32[0] = v58[7].i32[0];
            v109 = *(float32x2_t *)((char *)v58 + 60);
            v62.i32[0] = v58[8].i32[1];
            v110 = v58[9];
            v63.i32[0] = v58[10].i32[0];
            *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v107.f32, *(float *)v108.i32), v109, *(float32x2_t *)v108.i8, 1), v110, (float32x4_t)v108, 2);
            v25.i32[2] = 1.0;
            v64.i32[2] = 1.0;
            v111 = vmulq_n_f32(v25, 1.0 / v166);
            v112 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v102, *(float32x2_t *)v108.i8), v62, *(float32x2_t *)v108.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL), v63), 0));
            v113 = vsubq_f32(v105, v111);
            v114 = vdivq_f32(vmulq_n_f32(v113, 0.1 - v111.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2));
            v115 = (int8x16_t)vaddq_f32(v111, v114);
            *(float32x2_t *)v114.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v107.f32, *(float *)v115.i32), v109, *(float32x2_t *)v115.i8, 1), v110, (float32x4_t)v115, 2);
            v114.i32[2] = 1.0;
            v182 = v112.f32[2];
            v116 = vdivq_f32(v114, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v102, *(float32x2_t *)v115.i8), v62, *(float32x2_t *)v115.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL), v63), 0));
            v181 = *(float32x2_t *)v112.f32;
            v184 = v116.i32[2];
            v183 = v116.i64[0];
            sub_223416974((float32x2_t *)&v163, &v165, v158, (uint64_t)&v160, v38, v59, v60);
            sub_223416974((float32x2_t *)&v163, v158, &v181, (uint64_t)&v160, v38, v59, v60);
          }
          else
          {
            sub_223416974((float32x2_t *)&v163, &v165, &v167, (uint64_t)&v160, v38, v59, v60);
          }
          goto LABEL_34;
        }
LABEL_46:
        v68 = v168 <= 0.0;
        if (v168 > 10.0)
          v68 = 1;
        if (v166 <= 0.0 || v166 > 10.0)
        {
          if (!v68)
          {
            v86.i32[1] = v165.i32[1];
            v87 = v58[4];
            v88 = v58[5];
            *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32(v167, v87), v88);
            v25.i32[2] = 1.0;
            v89 = vmulq_n_f32(v25, 1.0 / v168);
            *(float32x2_t *)v25.f32 = vadd_f32(v88, vmul_f32(v87, (float32x2_t)v163));
            v90 = vmulq_n_f32(v25, 1.0 / v164);
            *(float32x2_t *)v25.f32 = vadd_f32(v88, vmul_f32(v87, v165));
            v91 = vsubq_f32(v89, v90);
            v92 = (int8x16_t)vaddq_f32(v90, vdivq_f32(vmulq_n_f32(v91, 0.1 - v90.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2)));
            *(float32x2_t *)v91.f32 = v58[6];
            v86.i32[0] = v58[7].i32[0];
            v93 = *(float32x2_t *)((char *)v58 + 60);
            v62.i32[0] = v58[8].i32[1];
            v94 = v58[9];
            v63.i32[0] = v58[10].i32[0];
            *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v91.f32, *(float *)v92.i32), v93, *(float32x2_t *)v92.i8, 1), v94, (float32x4_t)v92, 2);
            v25.i32[2] = 1.0;
            v64.i32[2] = 1.0;
            v95 = vmulq_n_f32(v25, 1.0 / v166);
            v96 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v86, *(float32x2_t *)v92.i8), v62, *(float32x2_t *)v92.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), v63), 0));
            v97 = vsubq_f32(v89, v95);
            v98 = vdivq_f32(vmulq_n_f32(v97, 0.1 - v95.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2));
            v99 = (int8x16_t)vaddq_f32(v95, v98);
            *(float32x2_t *)v98.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v91.f32, *(float *)v99.i32), v93, *(float32x2_t *)v99.i8, 1), v94, (float32x4_t)v99, 2);
            v98.i32[2] = 1.0;
            v182 = v96.f32[2];
            v100 = vdivq_f32(v98, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v86, *(float32x2_t *)v99.i8), v62, *(float32x2_t *)v99.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), v63), 0));
            v181 = *(float32x2_t *)v96.f32;
            v184 = v100.i32[2];
            v183 = v100.i64[0];
            sub_223416974(&v167, &v181, v158, (uint64_t)&v160, v38, v59, v60);
          }
        }
        else
        {
          v69 = 1.0 / v168;
          v70 = 1.0 / v166;
          v71 = 1.0 / v164;
          v72 = v58[4];
          v73 = v58[5];
          if (v68)
          {
            *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32(v165, v72), v73);
            v25.i32[2] = 1.0;
            v74 = vmulq_n_f32(v25, v70);
            *(float32x2_t *)v25.f32 = vadd_f32(v73, vmul_f32(v72, (float32x2_t)v163));
            v25.i32[2] = 1.0;
            v75 = vmulq_n_f32(v25, v71);
            *(float32x2_t *)v25.f32 = vadd_f32(v73, vmul_f32(v72, v167));
            v76 = vsubq_f32(v74, v75);
            v77 = vmulq_n_f32(v76, 0.1 - v75.f32[2]);
            v78 = (int8x16_t)vaddq_f32(v75, vdivq_f32(v77, (float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2)));
            *(float32x2_t *)v76.f32 = v58[6];
            v77.i32[0] = v58[7].i32[0];
            v79 = *(float32x2_t *)((char *)v58 + 60);
            v62.i32[0] = v58[8].i32[1];
            v80 = v58[9];
            v63.i32[0] = v58[10].i32[0];
            *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v76.f32, *(float *)v78.i32), v79, *(float32x2_t *)v78.i8, 1), v80, (float32x4_t)v78, 2);
            v25.i32[2] = 1.0;
            v64.i32[2] = 1.0;
            v81 = vmulq_n_f32(v25, v69);
            v82 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v78.i8), v62, *(float32x2_t *)v78.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), v63), 0));
            v83 = vsubq_f32(v74, v81);
            v84 = (int8x16_t)vaddq_f32(v81, vdivq_f32(vmulq_n_f32(v83, 0.1 - v81.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2)));
            *(float32x2_t *)v81.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v76.f32, *(float *)v84.i32), v79, *(float32x2_t *)v84.i8, 1), v80, (float32x4_t)v84, 2);
            v81.i32[2] = 1.0;
            v182 = v82.f32[2];
            v85 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v84.i8), v62, *(float32x2_t *)v84.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), v63), 0));
            v181 = *(float32x2_t *)v82.f32;
            v184 = v85.i32[2];
            v183 = v85.i64[0];
          }
          else
          {
            *(float32x2_t *)v25.f32 = vadd_f32(vmul_f32((float32x2_t)v163, v72), v73);
            v25.i32[2] = 1.0;
            v117 = vmulq_n_f32(v25, v71);
            *(float32x2_t *)v25.f32 = vadd_f32(v73, vmul_f32(v72, v165));
            v25.i32[2] = 1.0;
            v118 = vmulq_n_f32(v25, v70);
            *(float32x2_t *)v25.f32 = vadd_f32(v73, vmul_f32(v72, v167));
            v119 = vsubq_f32(v117, v118);
            v120 = vmulq_n_f32(v119, 0.1 - v118.f32[2]);
            v121 = (int8x16_t)vaddq_f32(v118, vdivq_f32(v120, (float32x4_t)vdupq_laneq_s32((int32x4_t)v119, 2)));
            *(float32x2_t *)v119.f32 = v58[6];
            v120.i32[0] = v58[7].i32[0];
            v122 = *(float32x2_t *)((char *)v58 + 60);
            v62.i32[0] = v58[8].i32[1];
            v123 = v58[9];
            v63.i32[0] = v58[10].i32[0];
            *(float32x2_t *)v64.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v119.f32, *(float *)v121.i32), v122, *(float32x2_t *)v121.i8, 1), v123, (float32x4_t)v121, 2);
            v25.i32[2] = 1.0;
            v64.i32[2] = 1.0;
            v124 = vmulq_n_f32(v25, v69);
            v125 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v121.i8), v62, *(float32x2_t *)v121.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), v63), 0));
            v126 = vsubq_f32(v117, v124);
            v127 = vdivq_f32(vmulq_n_f32(v126, 0.1 - v124.f32[2]), (float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2));
            v128 = (int8x16_t)vaddq_f32(v124, v127);
            *(float32x2_t *)v127.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v119.f32, *(float *)v128.i32), v122, *(float32x2_t *)v128.i8, 1), v123, (float32x4_t)v128, 2);
            v127.i32[2] = 1.0;
            v182 = v125.f32[2];
            v129 = vdivq_f32(v127, (float32x4_t)vdupq_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v128.i8), v62, *(float32x2_t *)v128.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v63), 0));
            v181 = *(float32x2_t *)v125.f32;
            v184 = v129.i32[2];
            v183 = v129.i64[0];
            sub_223416974(&v165, &v167, v158, (uint64_t)&v160, v38, v59, v60);
          }
          sub_223416974(&v165, v158, &v181, (uint64_t)&v160, v38, v59, v60);
        }
      }
LABEL_34:
      v65 = v162;
      v37 = 1.0;
      if (v162)
      {
        p_shared_owners = (unint64_t *)&v162->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          v37 = 1.0;
        }
      }
      v35 += 3;
      ++v36;
      if (v35 == v159)
      {
        v30 = (char *)__p;
        break;
      }
    }
  }
LABEL_67:
  if (v30)
  {
    v179 = v30;
    operator delete(v30);
  }
}

void sub_2234164BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2234164F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int128 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27[2];
  char v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t (**v32)();
  __int128 v33;
  void (**v34)(_QWORD);
  __int128 __p;
  char v36;
  char v37;
  CVPixelBufferPoolRef *v38;
  std::__shared_weak_count *v39;

  v6 = atomic_load((unsigned __int8 *)&qword_2540CAC58);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC58))
  {
    qword_2540CAC80 = 0;
    qword_2540CAC78 = 0;
    qword_2540CAC70 = (uint64_t)&qword_2540CAC78;
    __cxa_atexit((void (*)(void *))sub_2232B5FA0, &qword_2540CAC70, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAC58);
  }
  v7 = sub_2242A78F0(a2);
  sub_223C8536C((uint64_t **)&qword_2540CAC70, a3, v7, 1u, (std::__shared_weak_count_vtbl ***)&v38);
  sub_2242A7370(v38, (uint64_t)&v34);
  if (!v37
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryOverlay.cpp", 42, (uint64_t)"buffer_opt && \"Failed to create pixel buffer\"", 45, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v32 = &off_24EC715B8;
  v33 = __p;
  if (*((_QWORD *)&__p + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_2242AA1D0((uint64_t)&v32, &v29);
  if (v30)
  {
    v11 = *v30;
    v10 = (std::__shared_weak_count *)v30[1];
    if (!v10)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v11)
        goto LABEL_15;
    }
    else
    {
LABEL_13:
      if (v11)
        goto LABEL_15;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryOverlay.cpp", 45, (uint64_t)"out_buffer_iosurface && \"Expect IOSurface backed pixel buffer\"", 62, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_15:
  v28 = 11;
  strcpy((char *)v27, "ResizeImage");
  sub_2244E116C((uint64_t)&v29, v27);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  v15 = atomic_load((unsigned __int8 *)&qword_2540CAC68);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC68))
  {
    sub_223FC4CB0(&qword_2540CAC60);
    __cxa_atexit((void (*)(void *))sub_223416934, &qword_2540CAC60, &dword_22314D000);
    __cxa_guard_release(&qword_2540CAC68);
  }
  v16 = sub_223FC4D34(&qword_2540CAC60, a2, (uint64_t)&v32);
  v17 = (__int128 *)(a1 + 1);
  if ((v16 & 0xFF00000000) == 0)
  {
    *v17 = v33;
    v17 = &v33;
  }
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *a1 = &off_24EC715B8;
  v29 = &off_24EC76F28;
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v32 = &off_24EC715B8;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_29;
  v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v37)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    if (v37)
    {
LABEL_30:
      (*v34)(&v34);
      goto LABEL_34;
    }
  }
  if (v36 < 0)
    operator delete((void *)__p);
LABEL_34:
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_2234168A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  __cxa_guard_abort(&qword_2540CAC68);
  sub_2244E0FF4(&a15);
  sub_2242A8F3C(&a18);
  sub_2232B6080((uint64_t)&a21);
  sub_223167354(v21 - 64);
  _Unwind_Resume(a1);
}

OpaqueVTPixelTransferSession **sub_223416934(OpaqueVTPixelTransferSession **a1)
{
  OpaqueVTPixelTransferSession *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(v2);
  }
  return a1;
}

void sub_223416974(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float64x2_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  float32x4_t v39;
  int v41;
  uint64_t v42;
  float v43;
  int v44;
  unsigned int v45;
  int v47;
  int v48;
  uint64_t v49;
  float32x4_t v50;
  _BYTE *v51;
  float v56;
  float v58;
  float v59;
  _BOOL4 v60;
  uint64_t v61;
  int v62;
  int v63;
  float32x4_t v64;
  uint64_t v65;
  int v66;
  float32x4_t v67;
  simd_double2x2 v68;
  simd_double2x2 v69;

  v14 = vcvtq_f64_f32(vsub_f32(*a3, *a1));
  v69.columns[0] = (simd_double2)vcvtq_f64_f32(vsub_f32(*a2, *a1));
  v69.columns[1] = (simd_double2)v14;
  sub_22322BB5C(&v69, &v68);
  v69 = v68;
  if ((*(_QWORD *)&v68.columns[0].f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v69.columns[0].f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v69.columns[1].f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v69.columns[1].f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = (int)a1->f32[0];
    v16 = (int)a1->f32[1];
    v17 = (int)a2->f32[0];
    v18 = (int)a2->f32[1];
    if (v15 >= v17)
      v19 = (int)a2->f32[0];
    else
      v19 = (int)a1->f32[0];
    if (v16 >= v18)
      v20 = (int)a2->f32[1];
    else
      v20 = (int)a1->f32[1];
    v21 = v17 + 1;
    if (v21 <= v15 + 1)
      v22 = v15 + 1;
    else
      v22 = v21;
    if (v18 + 1 <= v16 + 1)
      v23 = v16 + 1;
    else
      v23 = v18 + 1;
    v24 = (int)a3->f32[0];
    v25 = (int)a3->f32[1];
    if (v19 >= v24)
      v26 = (int)a3->f32[0];
    else
      v26 = v19;
    if (v20 >= v25)
      v27 = (int)a3->f32[1];
    else
      v27 = v20;
    if (v24 + 1 > v22)
      v22 = v24 + 1;
    if (v25 + 1 > v23)
      v28 = v25 + 1;
    else
      v28 = v23;
    v29 = *(_DWORD *)(a4 + 32);
    v30 = *(_DWORD *)(a4 + 36);
    if ((v26 & 0x80000000) == 0 || (v22 & 0x80000000) == 0)
    {
      v31 = v26 < v29 || v22 < v29;
      if (v31 && ((v27 & 0x80000000) == 0 || (v28 & 0x80000000) == 0) && (v27 < v30 || v28 < v30))
      {
        if (v29 >= v26)
          v33 = v26 & ~(v26 >> 31);
        else
          v33 = *(_DWORD *)(a4 + 32);
        v63 = v33;
        if (v30 >= v27)
          v34 = v27 & ~(v27 >> 31);
        else
          v34 = *(_DWORD *)(a4 + 36);
        v35 = v30 - 1;
        if (v28 < v30)
          v35 = v28 & ~(v28 >> 31);
        v62 = v35;
        if (v34 != v35 + 1)
        {
          v36 = v22 >= v29 ? v29 - 1 : v22 & ~(v22 >> 31);
          v37 = v36 + 1;
          if (v33 != v36 + 1)
          {
            _D11 = a3[1].f32[0];
            v39 = (float32x4_t)vdupq_n_s32(0x437F0000u);
            v61 = a4;
            v64 = v39;
            do
            {
              v41 = *(_DWORD *)(a4 + 40);
              v42 = *(_QWORD *)(a4 + 24) + 4 * (*(_DWORD *)(a4 + 44) * v34);
              v43 = (float)v34;
              v44 = v63;
              v45 = v63 * v41;
              v66 = v34;
              v65 = v42;
              do
              {
                _Q0 = (float32x4_t)vmlaq_n_f64(vmulq_n_f64((float64x2_t)v69.columns[0], (float)((float)v44 - a1->f32[0])), (float64x2_t)v69.columns[1], (float)(v43 - a1->f32[1]));
                if (*(double *)&_Q0.i64[1] >= 0.0
                  && *(double *)_Q0.i64 >= 0.0
                  && 1.0 - vaddvq_f64((float64x2_t)_Q0) >= 0.0)
                {
                  __asm { FMLA            D1, D11, V0.D[1] }
                  v56 = _D1;
                  if (v56 >= a7 && v56 <= 10.0)
                  {
                    v58 = *(float *)(v42 + 4 * v45);
                    v59 = 1.0 / v56;
                    if (v58 == -65504.0 || v58 > v59)
                    {
                      *(float *)(v42 + 4 * v45) = v59;
                      _Q0.i64[0] = *(_QWORD *)a5;
                      _Q0.i32[2] = *(_DWORD *)(a5 + 8);
                      v48 = *(_DWORD *)(a6 + 120);
                      v47 = *(_DWORD *)(a6 + 124);
                      v49 = *(_QWORD *)(a6 + 32);
                      if (!v49)
                      {
                        v67 = _Q0;
                        v60 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        _Q0 = v67;
                        v42 = v65;
                        v39 = v64;
                        v34 = v66;
                        if (v60)
                          abort();
                      }
                      v50 = vmulq_f32(_Q0, v39);
                      v51 = (_BYTE *)(v49 + (v48 * v44 + v47 * v34));
                      *v51 = (int)v50.f32[0];
                      v51[1] = (int)v50.f32[1];
                      v51[2] = (int)v50.f32[2];
                    }
                  }
                }
                ++v44;
                v45 += v41;
              }
              while (v37 != v44);
              _ZF = v34++ == v62;
              a4 = v61;
            }
            while (!_ZF);
          }
        }
      }
    }
  }
}

void sub_223416D28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_2231E9B14(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_223416E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_223167354((uint64_t)&a9);
  sub_223167354((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223416E30(_QWORD *a1, void **a2)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t *i;
  _OWORD *v5;
  __int128 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t k;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t m;
  unsigned __int8 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t n;
  unsigned __int8 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  const unsigned __int8 *v42;
  const unsigned __int8 *v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  xpc_object_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t ii;
  xpc_object_t v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t jj;
  void *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t kk;
  unsigned __int8 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v75;
  xpc_object_t v76;
  std::__shared_weak_count *v77;
  xpc_object_t xarray;
  std::__shared_weak_count *v79;
  xpc_object_t xdict;
  std::__shared_weak_count *v81;
  xpc_object_t value[2];
  __int128 v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
  for (i = (uint64_t *)a1[2]; i; i = (uint64_t *)*i)
  {
    sub_2245664AC((unsigned __int8 *)i + 16, value);
    v5 = operator new(0x28uLL);
    v6 = v83;
    *v5 = *(_OWORD *)value;
    v5[1] = v6;
    *((_DWORD *)v5 + 8) = v84;
    *((_BYTE *)v5 + 36) = 0;
    sub_22341BA28((std::__shared_weak_count_vtbl **)value, i + 4);
    v7 = xdict;
    if (!xdict)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v8 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v13 = qword_255795648;
        for (j = qword_255795650; v13 != j; v13 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v13)(*(_QWORD *)(v13 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v9 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v7 = xdict;
    }
    xpc_dictionary_set_value(v7, (const char *)v5, value[0]);
    v10 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v11 = (unint64_t *)((char *)value[1] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v5);
  }
  v15 = *a2;
  if (!*a2)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v16 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v17 = qword_255795648;
      for (k = qword_255795650; v17 != k; v17 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v17)(*(_QWORD *)(v17 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v19 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v15 = *a2;
  }
  xpc_dictionary_set_value(v15, "keyframe_plane_segmentations", xdict);
  v20 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_223417E60((std::__shared_weak_count_vtbl **)value, a1 + 5);
  v23 = *a2;
  if (!*a2)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v24 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v25 = qword_255795648;
      for (m = qword_255795650; v25 != m; v25 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v25)(*(_QWORD *)(v25 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v27 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v23 = *a2;
  }
  xpc_dictionary_set_value(v23, "global_planes", value[0]);
  v28 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v29 = (unint64_t *)((char *)value[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_223418CF0((std::__shared_weak_count_vtbl **)value, a1 + 8);
  v31 = *a2;
  if (!*a2)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v32 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v33 = qword_255795648;
      for (n = qword_255795650; v33 != n; v33 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v33)(*(_QWORD *)(v33 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v35 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v31 = *a2;
  }
  xpc_dictionary_set_value(v31, "global_planes_to_kfs", value[0]);
  v36 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v37 = (unint64_t *)((char *)value[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184((std::__shared_weak_count_vtbl **)&v76, v39, 0);
  v40 = a1[12];
  v75 = a1[13];
  if (v40 == v75)
    goto LABEL_115;
  while (2)
  {
    sub_2245664AC((unsigned __int8 *)v40, value);
    v41 = (std::__shared_weak_count_vtbl *)xpc_array_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)&xarray, v41, 0);
    v43 = *(const unsigned __int8 **)(v40 + 16);
    v42 = *(const unsigned __int8 **)(v40 + 24);
    while (v43 != v42)
    {
      v44 = (std::__shared_weak_count_vtbl *)xpc_uuid_create(v43);
      v45 = (std::__shared_weak_count *)operator new();
      v46 = v45;
      v45->__shared_owners_ = 0;
      v47 = (unint64_t *)&v45->__shared_owners_;
      v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
      v45->__shared_weak_owners_ = 0;
      v45[1].__vftable = v44;
      xdict = v44;
      v81 = v45;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (v49)
      {
        v50 = xarray;
        if (xarray)
          goto LABEL_84;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v46);
        v50 = xarray;
        if (xarray)
          goto LABEL_84;
      }
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 84, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v51 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v56 = qword_255795648;
        for (ii = qword_255795650; v56 != ii; v56 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v56)(*(_QWORD *)(v56 + 8), "IsValid()", 9, "", 0);
      }
      v52 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, "", 0);
      v50 = xarray;
LABEL_84:
      xpc_array_append_value(v50, xdict);
      v53 = v81;
      if (v81)
      {
        v54 = (unint64_t *)&v81->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v43 += 16;
    }
    v58 = v76;
    if (!v76)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
      v59 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v64 = qword_255795648;
        for (jj = qword_255795650; v64 != jj; v64 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v64)(*(_QWORD *)(v64 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
      }
      v60 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
      v58 = v76;
    }
    xpc_dictionary_set_value(v58, (const char *)value, xarray);
    v61 = v79;
    if (v79)
    {
      v62 = (unint64_t *)&v79->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v40 += 40;
    if (v40 != v75)
      continue;
    break;
  }
LABEL_115:
  v66 = *a2;
  if (!*a2)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C);
    v67 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v68 = qword_255795648;
      for (kk = qword_255795650; v68 != kk; v68 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v68)(*(_QWORD *)(v68 + 8), "IsValid()", 9, &unk_2245B87B7, 0);
    }
    v70 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, &unk_2245B87B7, 0);
    v66 = *a2;
  }
  xpc_dictionary_set_value(v66, "kfs_to_gps", v76);
  v71 = v77;
  if (v77)
  {
    v72 = (unint64_t *)&v77->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_223417C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t *a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, const char *a15, uint64_t a16, char a17)
{
  const std::runtime_error *v17;
  std::runtime_error *exception;
  std::runtime_error *v19;

  if (a2 == 1)
  {
    v17 = (const std::runtime_error *)__cxa_begin_catch(a1);
    a15 = "keyframe_plane_segmentations";
    a16 = 28;
    sub_2245647E8(a9, &a15);
    a15 = "global_planes";
    a16 = 13;
    sub_2245647E8(a9, &a15);
    a15 = "global_planes_to_kfs";
    a16 = 20;
    sub_2245647E8(a9, &a15);
    a15 = "kfs_to_gps";
    a16 = 10;
    sub_2245647E8(a9, &a15);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v19 = std::runtime_error::runtime_error(exception, v17);
    v19->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
    __cxa_throw(v19, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(a1);
}

void sub_223417E2C()
{
  __cxa_end_catch();
  JUMPOUT(0x223417E50);
}

void sub_223417E60(std::__shared_weak_count_vtbl **a1, _QWORD *a2)
{
  std::__shared_weak_count_vtbl *empty;
  unsigned __int8 *v5;
  uint64_t v6;
  std::ios_base *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  char *v23;
  uint64_t *v24;
  void *v25;
  char *v26;
  void *v27;
  void *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  xpc_object_t value;
  std::__shared_weak_count *v48;
  uint64_t (**v49)();
  uint64_t v50;
  uint64_t *v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[6];
  unint64_t v55;
  __int128 __p;
  __int128 v57;
  int v58;
  uint64_t v59[19];
  unint64_t v60;
  uint64_t v61;
  char key[37];
  _BYTE v63[40];
  _BYTE v64[248];
  void *v65;
  char *v66;
  char v67;
  char v68;
  void *v69;
  char *v70;
  char v71;
  void *v72;
  char *v73;
  char v74;
  void *v75;
  uint64_t *v76;
  char v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184(a1, empty, 0);
  v5 = (unsigned __int8 *)*a2;
  v46 = (unsigned __int8 *)(a2 + 1);
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v44 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
    v45 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
    v43 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
    v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
    v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 48);
    v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 8);
    v36 = *MEMORY[0x24BEDB7F0];
    v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v6 = MEMORY[0x24BEDB858];
    v39 = MEMORY[0x24BEDB848] + 16;
    do
    {
      sub_2245664AC(v5 + 32, key);
      sub_2232E9EE8((uint64_t)v63, *((_QWORD *)v5 + 6));
      v59[0] = v6 + 104;
      v53 = v6 + 64;
      v52[0] = v45;
      *(_QWORD *)((char *)v52 + *(_QWORD *)(v45 - 24)) = v44;
      v52[1] = 0;
      v7 = (std::ios_base *)((char *)v52 + *(_QWORD *)(v52[0] - 24));
      std::ios_base::init(v7, v54);
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      *(_QWORD *)((char *)&v54[-1] + *(_QWORD *)(v43 - 24)) = v42;
      *(_QWORD *)((char *)v52 + *(_QWORD *)(v40 - 24)) = v41;
      v59[0] = v6 + 104;
      v52[0] = v6 + 24;
      v53 = v6 + 64;
      std::streambuf::basic_streambuf();
      v54[0] = v39;
      __p = 0u;
      v57 = 0u;
      v58 = 16;
      v49 = &off_24EC790B8;
      v50 = 1;
      v51 = &v53;
      LODWORD(v61) = 1;
      std::ostream::write();
      v61 = (uint64_t)v63;
      sub_22341C1E8();
      LODWORD(v61) = 1;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v61 = (uint64_t)v64;
      sub_22341C304();
      std::ostream::write();
      std::ostream::write();
      if (v64[176])
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        LODWORD(v61) = 1;
        std::ostream::write();
        std::ostream::write();
        LODWORD(v61) = 1;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      else
      {
        LOBYTE(v61) = 0;
      }
      std::ostream::write();
      std::ostream::write();
      LODWORD(v61) = 2;
      std::ostream::write();
      v8 = v61;
      if (v61 >= 3
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/DataModels/ContinuousTrackingResultSample.h", 169, (uint64_t)"version <= sample.MaxVersion()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      LODWORD(v61) = 2;
      std::ostream::write();
      std::ostream::write();
      LOBYTE(v61) = v64[208];
      std::ostream::write();
      std::ostream::write();
      if (v8 >= 2)
      {
        if (v64[240])
        {
          LOBYTE(v61) = 1;
          std::ostream::write();
          LODWORD(v61) = 2;
          std::ostream::write();
          std::ostream::write();
          LOBYTE(v61) = v64[232];
        }
        else
        {
          LOBYTE(v61) = 0;
        }
        std::ostream::write();
      }
      v61 = (v66 - (_BYTE *)v65) >> 4;
      std::ostream::write();
      v9 = (char *)v65;
      v10 = v66;
      if (v66 != v65)
      {
        do
        {
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          v9 += 16;
        }
        while (v9 != v10);
      }
      if (v67)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        LODWORD(v61) = 1;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      else
      {
        LOBYTE(v61) = 0;
      }
      std::ostream::write();
      if (v68)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      else
      {
        LOBYTE(v61) = 0;
      }
      std::ostream::write();
      if (v71)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        LODWORD(v61) = 1;
        std::ostream::write();
        v61 = (v70 - (_BYTE *)v69) >> 3;
        std::ostream::write();
        v11 = (char *)v69;
        v12 = v70;
        if (v70 != v69)
        {
          do
          {
            std::ostream::write();
            std::ostream::write();
            v11 += 8;
          }
          while (v11 != v12);
        }
      }
      else
      {
        LOBYTE(v61) = 0;
        std::ostream::write();
      }
      if (v74)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        v61 = (v73 - (_BYTE *)v72) >> 4;
        std::ostream::write();
        v13 = (char *)v72;
        v14 = v73;
        if (v73 != v72)
        {
          do
          {
            LODWORD(v60) = 1;
            std::ostream::write();
            std::ostream::write();
            std::ostream::write();
            std::ostream::write();
            std::ostream::write();
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
      else
      {
        LOBYTE(v61) = 0;
        std::ostream::write();
      }
      if (v77)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (_BYTE *)v75) >> 3);
        std::ostream::write();
        v15 = (uint64_t *)v75;
        v16 = v76;
        if (v76 != v75)
        {
          do
          {
            v61 = (v15[1] - *v15) >> 3;
            std::ostream::write();
            v17 = *v15;
            v18 = v15[1];
            if (v18 != *v15)
            {
              do
              {
                std::ostream::write();
                std::ostream::write();
                v17 += 8;
              }
              while (v17 != v18);
            }
            v15 += 3;
          }
          while (v15 != v16);
        }
      }
      else
      {
        LOBYTE(v61) = 0;
        std::ostream::write();
      }
      if (v78)
      {
        LOBYTE(v61) = 1;
        std::ostream::write();
      }
      else
      {
        LOBYTE(v61) = 0;
      }
      std::ostream::write();
      if ((v58 & 0x10) != 0)
      {
        v21 = *((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1) < v55)
        {
          *((_QWORD *)&v57 + 1) = v55;
          v21 = v55;
        }
        v19 = (const void *)v54[5];
      }
      else
      {
        if ((v58 & 8) == 0)
        {
          v19 = 0;
          v20 = 0;
          goto LABEL_51;
        }
        v19 = (const void *)v54[2];
        v21 = v54[4];
      }
      v20 = v21 - (_QWORD)v19;
LABEL_51:
      v22 = (std::__shared_weak_count_vtbl *)xpc_data_create(v19, v20);
      sub_22340E890((std::__shared_weak_count_vtbl **)&value, v22, 0);
      v52[0] = v36;
      *(_QWORD *)((char *)v52 + *(_QWORD *)(v36 - 24)) = v38;
      v53 = v37;
      v54[0] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v57) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x227684BE0](v59);
      if (v77)
      {
        v23 = (char *)v75;
        if (v75)
        {
          v24 = v76;
          v25 = v75;
          if (v76 != v75)
          {
            v26 = (char *)v76;
            do
            {
              v28 = (void *)*((_QWORD *)v26 - 3);
              v26 -= 24;
              v27 = v28;
              if (v28)
              {
                *(v24 - 2) = (uint64_t)v27;
                operator delete(v27);
              }
              v24 = (uint64_t *)v26;
            }
            while (v26 != v23);
            v25 = v75;
          }
          v76 = (uint64_t *)v23;
          operator delete(v25);
        }
      }
      if (v74 && v72)
      {
        v73 = (char *)v72;
        operator delete(v72);
      }
      if (v71 && v69)
      {
        v70 = (char *)v69;
        operator delete(v69);
      }
      if (v65)
      {
        v66 = (char *)v65;
        operator delete(v65);
      }
      v29 = *a1;
      if (!*a1)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v29 = *a1;
      }
      xpc_dictionary_set_value(v29, key, value);
      v30 = v48;
      if (!v48)
        goto LABEL_77;
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        v33 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (!v33)
        {
          do
          {
LABEL_81:
            v34 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
            v35 = *(_QWORD *)v34 == (_QWORD)v5;
            v5 = v34;
          }
          while (!v35);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_77:
        v33 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (!v33)
          goto LABEL_81;
      }
      do
      {
        v34 = v33;
        v33 = *(unsigned __int8 **)v33;
      }
      while (v33);
LABEL_3:
      v5 = v34;
    }
    while (v34 != v46);
  }
}

void sub_223418BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_223167354((uint64_t)&a63);
  JUMPOUT(0x223418CD0);
}

void sub_223418C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  sub_223195348((uint64_t)&a68);
  sub_2232E7728((uint64_t)&STACK[0x328]);
  sub_223167354(a62);
  _Unwind_Resume(a1);
}

void sub_223418C54(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  std::runtime_error *exception;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Couldnt serialize global plane");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
    __cxa_throw(exception, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_223195348((uint64_t)&a68);
  sub_2232E7728((uint64_t)&STACK[0x328]);
  sub_223167354(a62);
  _Unwind_Resume(a1);
}

void sub_223418CA8()
{
  __cxa_end_catch();
  JUMPOUT(0x223418CC0);
}

void sub_223418CE0(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x223418CD8);
}

void sub_223418CF0(std::__shared_weak_count_vtbl **a1, uint64_t *a2)
{
  std::__shared_weak_count_vtbl *empty;
  uint64_t v5;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  xpc_object_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t j;
  xpc_object_t v39;
  xpc_object_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  xpc_object_t xdict;
  std::__shared_weak_count *v55;
  xpc_object_t value;
  std::__shared_weak_count *v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  xpc_object_t xarray;
  std::__shared_weak_count *v61;
  char key[37];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  v52 = (void **)a1;
  sub_224564184(a1, empty, 0);
  v5 = *a2;
  v51 = a2[1];
  if (*a2 != v51)
  {
    do
    {
      sub_2245664AC((unsigned __int8 *)v5, key);
      v6 = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
      sub_224564184((std::__shared_weak_count_vtbl **)&xdict, v6, 0);
      v7 = (std::__shared_weak_count_vtbl *)xpc_array_create_empty();
      sub_224564184((std::__shared_weak_count_vtbl **)&xarray, v7, 0);
      v8 = (std::__shared_weak_count_vtbl *)xpc_array_create_empty();
      sub_224564184((std::__shared_weak_count_vtbl **)&v58, v8, 0);
      v53 = v5;
      v10 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      while (v10 != v9)
      {
        v11 = (std::__shared_weak_count_vtbl *)xpc_uuid_create((const unsigned __int8 *)v10);
        v12 = (std::__shared_weak_count *)operator new();
        v13 = v12;
        v12->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
        v12->__shared_weak_owners_ = 0;
        v12[1].__vftable = v11;
        value = v11;
        v57 = v12;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (v16)
        {
          v17 = xarray;
          if (xarray)
            goto LABEL_20;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v13);
          v17 = xarray;
          if (xarray)
            goto LABEL_20;
        }
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 84, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v18 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v35 = qword_255795648;
          for (i = qword_255795650; v35 != i; v35 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v35)(*(_QWORD *)(v35 + 8), "IsValid()", 9, "", 0);
        }
        v19 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, "", 0);
        v17 = xarray;
LABEL_20:
        xpc_array_append_value(v17, value);
        v20 = v57;
        if (v57)
        {
          v21 = (unint64_t *)&v57->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = (std::__shared_weak_count_vtbl *)xpc_uint64_create(*(unsigned int *)(v10 + 16));
        v24 = (std::__shared_weak_count *)operator new();
        v25 = v24;
        v24->__shared_owners_ = 0;
        v26 = (unint64_t *)&v24->__shared_owners_;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
        v24->__shared_weak_owners_ = 0;
        v24[1].__vftable = v23;
        value = v23;
        v57 = v24;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (v28)
        {
          v29 = v58;
          if (v58)
            goto LABEL_38;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v25);
          v29 = v58;
          if (v58)
            goto LABEL_38;
        }
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 84, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v30 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v37 = qword_255795648;
          for (j = qword_255795650; v37 != j; v37 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v37)(*(_QWORD *)(v37 + 8), "IsValid()", 9, "", 0);
        }
        v31 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, "", 0);
        v29 = v58;
LABEL_38:
        xpc_array_append_value(v29, value);
        v32 = v57;
        if (v57)
        {
          v33 = (unint64_t *)&v57->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v10 += 20;
      }
      v39 = xdict;
      if (!xdict)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v39 = xdict;
      }
      xpc_dictionary_set_value(v39, "global_planes_to_kfs_uuid", xarray);
      v40 = xdict;
      if (!xdict)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v40 = xdict;
      }
      xpc_dictionary_set_value(v40, "global_planes_to_kfs_indices", v58);
      v41 = v59;
      if (!v59)
        goto LABEL_67;
      v42 = (unint64_t *)&v59->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v44 = v61;
        if (v61)
        {
LABEL_68:
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      else
      {
LABEL_67:
        v44 = v61;
        if (v61)
          goto LABEL_68;
      }
      v47 = *v52;
      if (!*v52)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v47 = *v52;
      }
      xpc_dictionary_set_value(v47, key, xdict);
      v48 = v55;
      if (v55)
      {
        v49 = (unint64_t *)&v55->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v5 = v53 + 40;
    }
    while (v53 + 40 != v51);
  }
}

void sub_2234193C8()
{
  JUMPOUT(0x2234194A0);
}

void sub_223419414(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      xpc_release(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x2234194C0);
}

void sub_223419438()
{
  __cxa_end_catch();
  JUMPOUT(0x2234194A0);
}

void sub_223419448(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      xpc_release(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x2234194C0);
}

void sub_22341946C()
{
  __cxa_end_catch();
  JUMPOUT(0x2234194A0);
}

void sub_223419478(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x2234194C0);
}

void sub_223419494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va3);
  sub_223167354((uint64_t)va);
  sub_223167354(a4);
  _Unwind_Resume(a1);
}

void sub_2234194C8(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::runtime_error *exception;
  const char *v45[2];
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  void *v48;
  std::__shared_weak_count *v49;
  const char *v50[2];
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  void *v53;
  std::__shared_weak_count *v54;
  const char *v55[2];
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  void *v58;
  std::__shared_weak_count *v59;
  const char *v60[2];
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  void *v63;
  std::__shared_weak_count *v64;

  v4 = *a1;
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_80;
    }
    v4 = *a1;
  }
  if (!xpc_dictionary_get_value(v4, "global_planes"))
    goto LABEL_79;
  v5 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_80;
    }
    v5 = *a1;
  }
  if (!xpc_dictionary_get_value(v5, "keyframe_plane_segmentations"))
    goto LABEL_79;
  v6 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_80;
    }
    v6 = *a1;
  }
  if (!xpc_dictionary_get_value(v6, "global_planes_to_kfs"))
    goto LABEL_79;
  v7 = *a1;
  if (*a1)
    goto LABEL_16;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_80:
    abort();
  }
  v7 = *a1;
LABEL_16:
  if (!xpc_dictionary_get_value(v7, "kfs_to_gps"))
  {
LABEL_79:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_22340DE98(exception, "XPC plane state doesnt contain the required entries for decoding");
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v60[0] = "keyframe_plane_segmentations";
  v60[1] = (const char *)28;
  sub_224564900(a1, v60, &v61);
  v8 = v61;
  v9 = MEMORY[0x2276858AC](v61);
  v10 = MEMORY[0x24BDACFA0];
  v11 = MEMORY[0x24BDACF98];
  v12 = MEMORY[0x24BDACF90];
  v13 = MEMORY[0x24BDACF88];
  v14 = MEMORY[0x24BDACF78];
  if ((v9 != MEMORY[0x24BDACFA0]
     || MEMORY[0x24BDACF98] == MEMORY[0x24BDACFA0]
     || v9 == MEMORY[0x24BDACF90]
     || v9 == MEMORY[0x24BDACF88]
     || v9 == MEMORY[0x24BDACF78]
     || v9 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v63, v8, 1);
  sub_22341C420(a2, &v63);
  v55[0] = "global_planes";
  v55[1] = (const char *)13;
  sub_224564900(a1, v55, &v56);
  v15 = v56;
  v16 = MEMORY[0x2276858AC](v56);
  if ((v16 != v10 || v11 == v10 || v16 == v12 || v16 == v13 || v16 == v14 || v16 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v58, v15, 1);
  sub_223419BCC((_QWORD *)(a2 + 40), &v58);
  v50[0] = "global_planes_to_kfs";
  v50[1] = (const char *)20;
  sub_224564900(a1, v50, &v51);
  v17 = v51;
  v18 = MEMORY[0x2276858AC](v51);
  if ((v18 != v10 || v11 == v10 || v18 == v12 || v18 == v13 || v18 == v14 || v18 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v53, v17, 1);
  sub_223419D5C(a2 + 64, &v53);
  v45[0] = "kfs_to_gps";
  v45[1] = (const char *)10;
  sub_224564900(a1, v45, &v46);
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v48, v46, 1);
  v19.n128_f64[0] = sub_223419F64(a2 + 96, &v48);
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  v20 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v19);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v47;
  if (v47)
  {
    v24 = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v19);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v54;
  if (v54)
  {
    v27 = (unint64_t *)&v54->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v19);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v52;
  if (v52)
  {
    v30 = (unint64_t *)&v52->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v19);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v59;
  if (v59)
  {
    v33 = (unint64_t *)&v59->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v32->__on_zero_shared)(v32, v19);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v57;
  if (v57)
  {
    v36 = (unint64_t *)&v57->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v19);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v64;
  if (v64)
  {
    v39 = (unint64_t *)&v64->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v19);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v62;
  if (v62)
  {
    v42 = (unint64_t *)&v62->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v19);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_223419AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;

  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a12);
  sub_22319A750(v27);
  sub_223167354((uint64_t)&a20);
  sub_223167354((uint64_t)&a18);
  sub_2231F5848(v28, *(_QWORD **)(v26 + 48));
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a24);
  sub_223183FF0(v26);
  sub_223167354(v29 - 104);
  sub_223167354(v29 - 120);
  _Unwind_Resume(a1);
}

void sub_223419BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_223419BCC(_QWORD *a1, void **a2)
{
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::runtime_error *exception;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _QWORD applier[6];

  v10 = 0;
  v11 = 0;
  v9 = &v10;
  v3 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/DictionaryRef.h", 314, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *a2;
  }
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 0x40000000;
  applier[2] = sub_22341DB40;
  applier[3] = &unk_24EC36C60;
  applier[4] = &v9;
  applier[5] = &v12;
  if (!xpc_dictionary_apply(v3, applier))
  {
    sub_2231F5848((uint64_t)&v9, v10);
    v10 = 0;
    v11 = 0;
    v9 = &v10;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to decode dictionary of {UUID, ref}.");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = v10;
  *a1 = v9;
  a1[1] = v5;
  v6 = a1 + 1;
  v7 = v11;
  a1[2] = v11;
  if (v7)
  {
    v5[2] = v6;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
    v5 = 0;
  }
  else
  {
    *a1 = v6;
  }
  sub_2231F5848((uint64_t)&v9, v5);
}

void sub_223419D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_2231F5848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_223419D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_2231F5848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

double sub_223419D5C(uint64_t a1, void **a2)
{
  void *v4;
  size_t count;
  void *v6;
  BOOL v7;
  uint64_t v8;
  double result;
  uint64_t i;
  void *v11;
  std::runtime_error *exception;
  uint64_t v13;
  __int128 v14;
  char v15;
  char v16;
  _QWORD applier[6];

  v13 = 0;
  v14 = 0uLL;
  v4 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 81, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a2;
  }
  count = xpc_dictionary_get_count(v4);
  sub_22341F3A8((uint64_t)&v13, count);
  v6 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/DictionaryRef.h", 314, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a2;
  }
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 0x40000000;
  applier[2] = sub_22341F52C;
  applier[3] = &unk_24EC36CD0;
  applier[4] = &v13;
  applier[5] = &v16;
  v7 = xpc_dictionary_apply(v6, applier);
  v8 = v13;
  if (!v7)
  {
    for (i = v14; i != v8; i -= 40)
    {
      v11 = *(void **)(i - 24);
      if (v11)
      {
        *(_QWORD *)(i - 16) = v11;
        operator delete(v11);
      }
    }
    *(_QWORD *)&v14 = v8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to decode dictionary of {UUID, ref}.");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)a1 = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 24) = v15;
  return result;
}

void sub_223419EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  void *v11;
  char *v13;
  char *v14;
  void *v15;

  __cxa_free_exception(v11);
  if (__p)
  {
    v13 = a11;
    v14 = __p;
    if (a11 != __p)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        if (v15)
        {
          *((_QWORD *)v13 - 2) = v15;
          operator delete(v15);
        }
        v13 -= 40;
      }
      while (v13 != __p);
      v14 = __p;
    }
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

double sub_223419F64(uint64_t a1, void **a2)
{
  void *v4;
  size_t count;
  void *v6;
  BOOL v7;
  uint64_t v8;
  double result;
  uint64_t i;
  void *v11;
  std::runtime_error *exception;
  uint64_t v13;
  __int128 v14;
  char v15;
  char v16;
  _QWORD applier[6];

  v13 = 0;
  v14 = 0uLL;
  v4 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 81, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a2;
  }
  count = xpc_dictionary_get_count(v4);
  sub_22341F3A8((uint64_t)&v13, count);
  v6 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/DictionaryRef.h", 314, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a2;
  }
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 0x40000000;
  applier[2] = sub_223420764;
  applier[3] = &unk_24EC36CF0;
  applier[4] = &v13;
  applier[5] = &v16;
  v7 = xpc_dictionary_apply(v6, applier);
  v8 = v13;
  if (!v7)
  {
    for (i = v14; i != v8; i -= 40)
    {
      v11 = *(void **)(i - 24);
      if (v11)
      {
        *(_QWORD *)(i - 16) = v11;
        operator delete(v11);
      }
    }
    *(_QWORD *)&v14 = v8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to decode dictionary of {UUID, ref}.");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)a1 = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 24) = v15;
  return result;
}

void sub_22341A104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  void *v11;
  char *v13;
  char *v14;
  void *v15;

  __cxa_free_exception(v11);
  if (__p)
  {
    v13 = a11;
    v14 = __p;
    if (a11 != __p)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        if (v15)
        {
          *((_QWORD *)v13 - 2) = v15;
          operator delete(v15);
        }
        v13 -= 40;
      }
      while (v13 != __p);
      v14 = __p;
    }
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void sub_22341A16C(uint64_t a1, void **a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *empty;
  uint64_t *i;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  const unsigned __int8 *v32;
  const unsigned __int8 *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  xpc_object_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t j;
  unsigned __int8 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  xpc_object_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  xpc_object_t xarray;
  std::__shared_weak_count *v61;
  xpc_object_t xdict;
  std::__shared_weak_count *v63;
  xpc_object_t value;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_9;
  sub_2234597A0((const unsigned __int8 **)a1, (std::__shared_weak_count_vtbl **)&value);
  v3 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v3 = *a2;
  }
  xpc_dictionary_set_value(v3, "keyframe_plane_removed_ids", value);
  v4 = v65;
  if (!v65)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v65->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_9:
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_30;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_30;
  }
  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184((std::__shared_weak_count_vtbl **)&xdict, empty, 0);
  for (i = *(uint64_t **)(a1 + 64); i; i = (uint64_t *)*i)
  {
    sub_2245664AC((unsigned __int8 *)i + 16, &value);
    sub_22341BA28((std::__shared_weak_count_vtbl **)&xarray, i + 4);
    v9 = xdict;
    if (!xdict)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = xdict;
    }
    xpc_dictionary_set_value(v9, (const char *)&value, xarray);
    v10 = v61;
    if (v61)
    {
      v11 = (unint64_t *)&v61->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v13 = *a2;
  }
  xpc_dictionary_set_value(v13, "keyframe_plane_segmentations", xdict);
  v14 = v63;
  if (v63)
  {
    v15 = (unint64_t *)&v63->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_30:
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
    goto LABEL_115;
  sub_2234597A0((const unsigned __int8 **)(a1 + 24), (std::__shared_weak_count_vtbl **)&value);
  v17 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v17 = *a2;
  }
  xpc_dictionary_set_value(v17, "global_plane_removed_ids", value);
  v18 = v65;
  if (!v65)
    goto LABEL_115;
  v19 = (unint64_t *)&v65->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_115:
    if (*(_QWORD *)(a1 + 104))
    {
LABEL_39:
      sub_223417E60((std::__shared_weak_count_vtbl **)&value, (_QWORD *)(a1 + 88));
      v21 = *a2;
      if (!*a2)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v21 = *a2;
      }
      xpc_dictionary_set_value(v21, "global_planes", value);
      v22 = v65;
      if (v65)
      {
        v23 = (unint64_t *)&v65->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (*(_QWORD *)(a1 + 104))
      goto LABEL_39;
  }
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 120))
  {
    sub_223418CF0((std::__shared_weak_count_vtbl **)&value, (uint64_t *)(a1 + 112));
    v25 = *a2;
    if (!*a2)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v25 = *a2;
    }
    xpc_dictionary_set_value(v25, "global_planes_to_kfs", value);
    v26 = v65;
    if (v65)
    {
      v27 = (unint64_t *)&v65->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v29 = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184((std::__shared_weak_count_vtbl **)&v58, v29, 0);
  v30 = *(_QWORD *)(a1 + 144);
  v57 = *(_QWORD *)(a1 + 152);
  if (v30 == v57)
    goto LABEL_95;
  while (2)
  {
    sub_2245664AC((unsigned __int8 *)v30, &value);
    v31 = (std::__shared_weak_count_vtbl *)xpc_array_create_empty();
    sub_224564184((std::__shared_weak_count_vtbl **)&xarray, v31, 0);
    v33 = *(const unsigned __int8 **)(v30 + 16);
    v32 = *(const unsigned __int8 **)(v30 + 24);
    while (v33 != v32)
    {
      v34 = (std::__shared_weak_count_vtbl *)xpc_uuid_create(v33);
      v35 = (std::__shared_weak_count *)operator new();
      v36 = v35;
      v35->__shared_owners_ = 0;
      v37 = (unint64_t *)&v35->__shared_owners_;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36B90;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = v34;
      xdict = v34;
      v63 = v35;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (v39)
      {
        v40 = xarray;
        if (xarray)
          goto LABEL_78;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v36);
        v40 = xarray;
        if (xarray)
          goto LABEL_78;
      }
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 84, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v41 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v42 = qword_255795648;
        for (j = qword_255795650; v42 != j; v42 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v42)(*(_QWORD *)(v42 + 8), "IsValid()", 9, "", 0);
      }
      v44 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        abort();
      qword_255795660(*(_QWORD *)algn_255795668, "IsValid()", 9, "", 0);
      v40 = xarray;
LABEL_78:
      xpc_array_append_value(v40, xdict);
      v45 = v63;
      if (v63)
      {
        v46 = (unint64_t *)&v63->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v33 += 16;
    }
    v48 = v58;
    if (!v58)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v48 = v58;
    }
    xpc_dictionary_set_value(v48, (const char *)&value, xarray);
    v49 = v61;
    if (v61)
    {
      v50 = (unint64_t *)&v61->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v30 += 40;
    if (v30 != v57)
      continue;
    break;
  }
LABEL_95:
  v52 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v52 = *a2;
  }
  xpc_dictionary_set_value(v52, "kfs_to_gps", v58);
  v53 = v59;
  if (v59)
  {
    v54 = (unint64_t *)&v59->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_22341A9E8(_Unwind_Exception *a1, int a2, xpc_object_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const std::runtime_error *v8;
  std::runtime_error *exception;
  std::runtime_error *v10;
  const char *v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, const char *);
  v13 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  if (a2 == 1)
  {
    v8 = (const std::runtime_error *)__cxa_begin_catch(a1);
    v11 = "keyframe_plane_removed_ids";
    v13 = 26;
    sub_2245647E8(a3, (const char **)va);
    v11 = "keyframe_plane_segmentations";
    v13 = 28;
    sub_2245647E8(a3, (const char **)va);
    v11 = "global_plane_removed_ids";
    v13 = 24;
    sub_2245647E8(a3, (const char **)va);
    v11 = "global_planes";
    v13 = 13;
    sub_2245647E8(a3, (const char **)va);
    v11 = "global_planes_to_kfs";
    v13 = 20;
    sub_2245647E8(a3, (const char **)va);
    v11 = "kfs_to_gps";
    v13 = 10;
    sub_2245647E8(a3, (const char **)va);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v10 = std::runtime_error::runtime_error(exception, v8);
    v10->__vftable = (std::runtime_error_vtbl *)&off_24EC37268;
    __cxa_throw(v10, (struct type_info *)&unk_24EC37280, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(a1);
}

void sub_22341ABD4()
{
  __cxa_end_catch();
  JUMPOUT(0x22341AC00);
}

void sub_22341AC10(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  xpc_object_t v6;
  xpc_object_t value;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  xpc_object_t v30;
  std::__shared_weak_count_vtbl *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  xpc_object_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  std::__shared_weak_count *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  xpc_object_t v54;
  std::__shared_weak_count_vtbl *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  xpc_object_t v67;
  std::__shared_weak_count_vtbl *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  void *__p[2];
  void *v82;
  char v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  uint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;

  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  v4 = a2 + 96;
  *(_DWORD *)(a2 + 80) = 1065353216;
  *(_QWORD *)(a2 + 88) = a2 + 96;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v5 = (void **)(a2 + 112);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  value = xpc_dictionary_get_value(v6, "keyframe_plane_removed_ids");
  v8 = MEMORY[0x24BDACF78];
  if (!value)
    goto LABEL_17;
  v84 = "keyframe_plane_removed_ids";
  v85 = 26;
  sub_224564900(a1, &v84, &v86);
  v9 = v86;
  if (MEMORY[0x2276858AC](v86) != v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&v88, v9, 1);
  sub_2234598F8(&v88, (uint64_t)__p);
  v10 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v10;
    operator delete(v10);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v82;
  __p[1] = 0;
  v82 = 0;
  __p[0] = 0;
  v11 = v89;
  if (!v89)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v89->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_17:
    v17 = *a1;
    if (*a1)
      goto LABEL_20;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  v17 = *a1;
  if (*a1)
    goto LABEL_20;
LABEL_18:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v17 = *a1;
LABEL_20:
  v18 = xpc_dictionary_get_value(v17, "keyframe_plane_segmentations");
  v80 = (void **)(a2 + 144);
  v19 = MEMORY[0x24BDACFA0];
  if (!v18)
    goto LABEL_40;
  v86 = (std::__shared_weak_count_vtbl *)"keyframe_plane_segmentations";
  v87 = 28;
  sub_224564900(a1, (const char **)&v86, __p);
  v20 = (std::__shared_weak_count_vtbl *)__p[0];
  v21 = MEMORY[0x2276858AC](__p[0]);
  if ((v21 != v19
     || MEMORY[0x24BDACF98] == v19
     || v21 == MEMORY[0x24BDACF90]
     || v21 == MEMORY[0x24BDACF88]
     || v21 == v8
     || v21 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v88, v20, 1);
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_22341C420((uint64_t)__p, &v88);
  sub_223421294(a2 + 48, (uint64_t *)__p);
  v25 = v82;
  if (v82)
  {
    do
    {
      v45 = v25;
      v25 = (_QWORD *)*v25;
      v46 = (std::__shared_weak_count *)v45[5];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      operator delete(v45);
    }
    while (v25);
  }
  v26 = __p[0];
  __p[0] = 0;
  if (v26)
    operator delete(v26);
  v27 = v89;
  if (!v89)
    goto LABEL_40;
  v28 = (unint64_t *)&v89->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = *a1;
    if (*a1)
      goto LABEL_43;
  }
  else
  {
LABEL_40:
    v30 = *a1;
    if (*a1)
      goto LABEL_43;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v30 = *a1;
LABEL_43:
  if (!xpc_dictionary_get_value(v30, "global_plane_removed_ids"))
    goto LABEL_56;
  v84 = "global_plane_removed_ids";
  v85 = 24;
  sub_224564900(a1, &v84, &v86);
  v31 = v86;
  if (MEMORY[0x2276858AC](v86) != v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&v88, v31, 1);
  sub_2234598F8(&v88, (uint64_t)__p);
  v32 = *(void **)(a2 + 24);
  if (v32)
  {
    *(_QWORD *)(a2 + 32) = v32;
    operator delete(v32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v82;
  __p[1] = 0;
  v82 = 0;
  __p[0] = 0;
  v33 = v89;
  if (!v89)
    goto LABEL_52;
  v34 = (unint64_t *)&v89->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v36 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_56;
  }
  else
  {
LABEL_52:
    v36 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_56;
  }
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = *a1;
    if (*a1)
      goto LABEL_59;
    goto LABEL_57;
  }
LABEL_56:
  v39 = *a1;
  if (*a1)
    goto LABEL_59;
LABEL_57:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v39 = *a1;
LABEL_59:
  if (!xpc_dictionary_get_value(v39, "global_planes"))
    goto LABEL_84;
  v84 = "global_planes";
  v85 = 13;
  sub_224564900(a1, &v84, &v86);
  v40 = v86;
  v41 = MEMORY[0x2276858AC](v86);
  if ((v41 != v19
     || MEMORY[0x24BDACF98] == v19
     || v41 == MEMORY[0x24BDACF90]
     || v41 == MEMORY[0x24BDACF88]
     || v41 == v8
     || v41 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v88, v40, 1);
  sub_223419BCC(__p, &v88);
  sub_2231F5848(a2 + 88, *(_QWORD **)(a2 + 96));
  v42 = __p[1];
  *(void **)(a2 + 88) = __p[0];
  *(_QWORD *)(a2 + 96) = v42;
  v43 = v82;
  *(_QWORD *)(a2 + 104) = v82;
  if (v43)
  {
    v42[2] = v4;
    __p[0] = &__p[1];
    __p[1] = 0;
    v82 = 0;
    sub_2231F5848((uint64_t)__p, 0);
    v44 = v89;
    if (!v89)
      goto LABEL_80;
  }
  else
  {
    *(_QWORD *)(a2 + 88) = v4;
    sub_2231F5848((uint64_t)__p, v42);
    v44 = v89;
    if (!v89)
      goto LABEL_80;
  }
  v49 = (unint64_t *)&v44->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v51 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_84;
    goto LABEL_81;
  }
LABEL_80:
  v51 = (std::__shared_weak_count *)v87;
  if (!v87)
    goto LABEL_84;
LABEL_81:
  v52 = (unint64_t *)&v51->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v54 = *a1;
    if (*a1)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_84:
  v54 = *a1;
  if (*a1)
    goto LABEL_87;
LABEL_85:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v54 = *a1;
LABEL_87:
  if (!xpc_dictionary_get_value(v54, "global_planes_to_kfs"))
    goto LABEL_111;
  v84 = "global_planes_to_kfs";
  v85 = 20;
  sub_224564900(a1, &v84, &v86);
  v55 = v86;
  v56 = MEMORY[0x2276858AC](v86);
  if ((v56 != v19
     || MEMORY[0x24BDACF98] == v19
     || v56 == MEMORY[0x24BDACF90]
     || v56 == MEMORY[0x24BDACF88]
     || v56 == v8
     || v56 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8((std::__shared_weak_count_vtbl **)&v88, v55, 1);
  sub_223419D5C((uint64_t)__p, &v88);
  v57 = (char *)*v5;
  if (*v5)
  {
    v58 = *(char **)(a2 + 120);
    v59 = *v5;
    if (v58 != v57)
    {
      do
      {
        v60 = (void *)*((_QWORD *)v58 - 3);
        if (v60)
        {
          *((_QWORD *)v58 - 2) = v60;
          operator delete(v60);
        }
        v58 -= 40;
      }
      while (v58 != v57);
      v59 = *v5;
    }
    *(_QWORD *)(a2 + 120) = v57;
    operator delete(v59);
    *v5 = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
  }
  *(_OWORD *)(a2 + 112) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 128) = v82;
  __p[1] = 0;
  v82 = 0;
  __p[0] = 0;
  *(_BYTE *)(a2 + 136) = v83;
  v61 = v89;
  if (!v89)
    goto LABEL_107;
  v62 = (unint64_t *)&v89->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    v64 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_111;
  }
  else
  {
LABEL_107:
    v64 = (std::__shared_weak_count *)v87;
    if (!v87)
      goto LABEL_111;
  }
  v65 = (unint64_t *)&v64->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    v67 = *a1;
    if (*a1)
      goto LABEL_114;
    goto LABEL_112;
  }
LABEL_111:
  v67 = *a1;
  if (*a1)
    goto LABEL_114;
LABEL_112:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v67 = *a1;
LABEL_114:
  if (xpc_dictionary_get_value(v67, "kfs_to_gps"))
  {
    v84 = "kfs_to_gps";
    v85 = 10;
    sub_224564900(a1, &v84, &v86);
    v68 = v86;
    v69 = MEMORY[0x2276858AC](v86);
    if ((v69 != v19
       || MEMORY[0x24BDACF98] == v19
       || v69 == MEMORY[0x24BDACF90]
       || v69 == MEMORY[0x24BDACF88]
       || v69 == v8
       || v69 == MEMORY[0x24BDACF80])
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245646E8((std::__shared_weak_count_vtbl **)&v88, v68, 1);
    sub_223419F64((uint64_t)__p, &v88);
    v70 = (char *)*v80;
    if (*v80)
    {
      v71 = *(char **)(a2 + 152);
      v72 = *v80;
      if (v71 != v70)
      {
        do
        {
          v73 = (void *)*((_QWORD *)v71 - 3);
          if (v73)
          {
            *((_QWORD *)v71 - 2) = v73;
            operator delete(v73);
          }
          v71 -= 40;
        }
        while (v71 != v70);
        v72 = *v80;
      }
      *(_QWORD *)(a2 + 152) = v70;
      operator delete(v72);
      *v80 = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 160) = 0;
    }
    *(_OWORD *)(a2 + 144) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 160) = v82;
    __p[1] = 0;
    v82 = 0;
    __p[0] = 0;
    *(_BYTE *)(a2 + 168) = v83;
    v74 = v89;
    if (v89)
    {
      v75 = (unint64_t *)&v89->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)v87;
    if (v87)
    {
      v78 = (unint64_t *)(v87 + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
}

void sub_22341B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  sub_22341B9E0(v11);
  _Unwind_Resume(a1);
}

void sub_22341B88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  sub_22341B9E0(v11);
  _Unwind_Resume(a1);
}

void sub_22341B90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B934(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B948(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B970(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B984(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22341B9E0(v1);
  _Unwind_Resume(a1);
}

void sub_22341B998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_223167354((uint64_t)va);
  sub_22341B9E0(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_22341B9E0(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_2233C8A78(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_22341BA28(std::__shared_weak_count_vtbl **a1, uint64_t *a2)
{
  std::__shared_weak_count_vtbl *empty;
  __IOSurface *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count_vtbl *XPCObject;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  float *v29;
  float *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  xpc_object_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *__p;
  char *v66;
  xpc_object_t v67;
  std::__shared_weak_count *v68;
  xpc_object_t value;
  std::__shared_weak_count *v70;
  __int128 v71;
  xpc_object_t v72;
  char *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;

  empty = (std::__shared_weak_count_vtbl *)xpc_dictionary_create_empty();
  sub_224564184(a1, empty, 0);
  sub_2242AA1D0(*a2, &v72);
  if (v73)
  {
    v5 = *(__IOSurface **)v73;
    v6 = (std::__shared_weak_count *)*((_QWORD *)v73 + 1);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  XPCObject = (std::__shared_weak_count_vtbl *)IOSurfaceCreateXPCObject(v5);
  sub_22340E890((std::__shared_weak_count_vtbl **)&value, XPCObject, 0);
  v72 = &off_24EC76F28;
  v11 = v74;
  if (!v74)
    goto LABEL_13;
  v12 = (unint64_t *)&v74->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *a1;
    if (*a1)
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v14 = *a1;
    if (*a1)
      goto LABEL_17;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v14 = *a1;
LABEL_17:
  xpc_dictionary_set_value(v14, "kf_plane_seg_image", value);
  sub_223456E4C(*a2 + 24, (std::__shared_weak_count_vtbl **)&v72);
  v15 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v15 = *a1;
  }
  xpc_dictionary_set_value(v15, "kf_plane_seg_camera", v72);
  v16 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v17 = (unint64_t *)(v73 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_223456A10(*a2 + 120, (std::__shared_weak_count_vtbl **)&v72);
  v19 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v19 = *a1;
  }
  xpc_dictionary_set_value(v19, "kf_plane_seg_world_to_kf", v72);
  v20 = (std::__shared_weak_count *)v73;
  if (!v73)
    goto LABEL_32;
  v21 = (unint64_t *)(v73 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = *a2;
    v24 = *(_QWORD *)(*a2 + 184);
    v25 = *(_QWORD *)(*a2 + 192);
    if (v24 == v25)
      goto LABEL_91;
  }
  else
  {
LABEL_32:
    v23 = *a2;
    v24 = *(_QWORD *)(*a2 + 184);
    v25 = *(_QWORD *)(*a2 + 192);
    if (v24 == v25)
      goto LABEL_91;
  }
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  if (v26 >> 60)
    sub_22316E078();
  v27 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v25 - v24) >> 3));
  v28 = v27;
  v72 = v27;
  v73 = v27;
  v74 = (std::__shared_weak_count *)&v27[16 * v26];
  v29 = *(float **)(v23 + 184);
  v30 = *(float **)(v23 + 192);
  if (v29 == v30)
  {
    v49 = v27;
    __p = v27;
    v66 = v27;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v50 = 0;
  }
  else
  {
    do
    {
      sub_2234589B4(v29, (std::__shared_weak_count_vtbl **)&v71);
      v31 = v73;
      if (v73 < (char *)v74)
      {
        *(_OWORD *)v73 = v71;
        v73 = v31 + 16;
      }
      else
      {
        v32 = (char *)v72;
        v33 = (v73 - (_BYTE *)v72) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          sub_22316E078();
        v35 = (char *)v74 - (_BYTE *)v72;
        if (((char *)v74 - (_BYTE *)v72) >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 60)
            sub_223174E94();
          v37 = (char *)operator new(16 * v36);
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[16 * v33];
        *(_OWORD *)v38 = v71;
        v39 = v38 + 16;
        v40 = (std::__shared_weak_count *)&v37[16 * v36];
        v71 = 0uLL;
        if (v31 == v32)
        {
          v72 = v38;
          v73 = v38 + 16;
          v74 = (std::__shared_weak_count *)&v37[16 * v36];
        }
        else
        {
          do
          {
            v41 = *((_OWORD *)v31 - 1);
            v31 -= 16;
            *((_OWORD *)v38 - 1) = v41;
            v38 -= 16;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
          }
          while (v31 != v32);
          v31 = (char *)v72;
          v42 = v73;
          v72 = v38;
          v73 = v39;
          v74 = v40;
          while (v42 != v31)
          {
            v43 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v42 -= 16;
          }
        }
        if (v31)
          operator delete(v31);
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        v73 = v39;
        if (*((_QWORD *)&v71 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      v29 += 6;
    }
    while (v29 != v30);
    v49 = (char *)v72;
    v28 = v73;
    __p = (char *)v72;
    v66 = v73;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v50 = v66 - __p;
    if (v66 - __p < 0)
      sub_22316E078();
  }
  v72 = operator new((unint64_t)v50 >> 1);
  v73 = (char *)v72;
  v74 = (std::__shared_weak_count *)((char *)v72 + 8 * (v50 >> 4));
  *(_QWORD *)&v71 = &v72;
  do
  {
    v75 = *(_QWORD *)v49;
    sub_2232EA538((void ***)&v71, &v75);
    v49 += 16;
  }
  while (v49 != v28);
  v51 = v72;
  v52 = (std::__shared_weak_count_vtbl *)xpc_array_create((xpc_object_t *)v72, (v73 - (_BYTE *)v72) >> 3);
  sub_22456428C((std::__shared_weak_count_vtbl **)&v67, v52, 0);
  if (v51)
    operator delete(v51);
  v53 = *a1;
  if (!*a1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 48, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v53 = *a1;
  }
  xpc_dictionary_set_value(v53, "kf_plane_local_planes", v67);
  v54 = v68;
  if (v68)
  {
    v55 = (unint64_t *)&v68->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = __p;
  if (__p)
  {
    v58 = v66;
    if (v66 != __p)
    {
      do
      {
        v59 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v58 -= 16;
      }
      while (v58 != __p);
      v57 = __p;
    }
    operator delete(v57);
  }
LABEL_91:
  v62 = v70;
  if (v70)
  {
    v63 = (unint64_t *)&v70->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_22341C0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  sub_223167354((uint64_t)&a15);
  sub_223167354(v20);
  _Unwind_Resume(a1);
}

void sub_22341C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2244E0FF4((uint64_t *)va);
  sub_223167354(v11);
  _Unwind_Resume(a1);
}

void sub_22341C164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  JUMPOUT(0x22341C1ACLL);
}

uint64_t sub_22341C1E8()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return std::ostream::write();
}

uint64_t sub_22341C304()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return std::ostream::write();
}

void sub_22341C420(uint64_t a1, void **a2)
{
  void *v4;
  unint64_t prime;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  std::runtime_error *exception;
  void *__p[2];
  __int128 v22;
  float v23;
  void (*v24)(xpc_object_t *@<X0>, _QWORD *@<X8>);
  _QWORD applier[6];

  v24 = sub_22341C754;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 1.0;
  v4 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 81, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *a2;
  }
  prime = vcvtps_u32_f32((float)xpc_dictionary_get_count(v4) / v23);
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  if ((void *)prime > __p[1])
    goto LABEL_9;
  if ((void *)prime < __p[1])
  {
    v6 = vcvtps_u32_f32((float)*((unint64_t *)&v22 + 1) / v23);
    if (__p[1] < (void *)3 || (v7 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (prime <= v6)
      prime = v6;
    if ((void *)prime < __p[1])
LABEL_9:
      sub_2231B0668((uint64_t)__p, prime);
  }
  v9 = *a2;
  if (!*a2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/DictionaryRef.h", 314, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = *a2;
  }
  applier[0] = MEMORY[0x24BDAC760];
  applier[1] = 0x40000000;
  applier[2] = sub_22341D110;
  applier[3] = &unk_24EC36BD0;
  applier[4] = __p;
  applier[5] = &v24;
  if (!xpc_dictionary_apply(v9, applier))
  {
    sub_22341D064(__p);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to decode dictionary of {UUID, ref}.");
    exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
    __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = __p[0];
  v11 = (unint64_t)__p[1];
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = *((_QWORD *)&v22 + 1);
  v13 = (_QWORD *)v22;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v12;
  *(float *)(a1 + 32) = v23;
  if (v12)
  {
    v14 = v13[1];
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v14 >= v11)
        v14 %= v11;
    }
    else
    {
      v14 &= v11 - 1;
    }
    v10[v14] = a1 + 16;
    v22 = 0uLL;
  }
  else
  {
    while (v13)
    {
      v15 = v13;
      v13 = (_QWORD *)*v13;
      v16 = (std::__shared_weak_count *)v15[5];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      operator delete(v15);
    }
  }
  v19 = __p[0];
  __p[0] = 0;
  if (v19)
    operator delete(v19);
}

void sub_22341C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_223183FF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22341C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223183FF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22341C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223183FF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22341C754(xpc_object_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const __CFAllocator *v14;
  __IOSurface *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  xpc_object_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  xpc_object_t v42;
  size_t count;
  size_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t, int, xpc_object_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count_vtbl *applier;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, int, xpc_object_t);
  uint64_t (**v77)();
  const char **v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  const char *v90;
  uint64_t v91;
  char *v92;
  const char *v93[2];
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  char *v96;
  xpc_object_t xarray;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, int, xpc_object_t);
  CVPixelBufferRef pixelBufferOut;
  uint64_t (**v116)();
  uint64_t v117;
  std::__shared_weak_count *v118;

  *(_QWORD *)&v99 = "kf_plane_seg_image";
  *((_QWORD *)&v99 + 1) = 18;
  sub_224564900(a1, (const char **)&v99, &v103);
  v4 = v103;
  v5 = v104;
  applier = v103;
  v75 = (uint64_t)v104;
  if (v104)
  {
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count_vtbl *)IOSurfaceLookupFromXPCObject(v4);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = v104;
  if (v104)
  {
    v12 = (unint64_t *)&v104->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_2244E0D64(&v116, v8, 0, 0);
  pixelBufferOut = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v117)
  {
    v15 = *(__IOSurface **)v117;
    v16 = *(std::__shared_weak_count **)(v117 + 8);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v15 = 0;
  }
  CVPixelBufferCreateWithIOSurface(v14, v15, 0, &pixelBufferOut);
  sub_2242A8B78(&v112, (std::__shared_weak_count_vtbl *)pixelBufferOut, 0, 0);
  v94 = (std::__shared_weak_count_vtbl *)"kf_plane_seg_camera";
  v95 = 19;
  sub_224564900(a1, (const char **)&v94, &v99);
  v20 = (std::__shared_weak_count_vtbl *)v99;
  v21 = MEMORY[0x2276858AC](v99);
  v22 = MEMORY[0x24BDACF78];
  if (v21 != MEMORY[0x24BDACF78]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&applier, v20, 1);
  v23.n128_f64[0] = sub_2234572A4((xpc_object_t *)&applier, (uint64_t)&v103);
  v24 = (std::__shared_weak_count *)v75;
  if (v75)
  {
    v25 = (unint64_t *)(v75 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v23);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v27->__on_zero_shared)(v27, v23);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  xarray = "kf_plane_seg_world_to_kf";
  v98 = 24;
  sub_224564900(a1, (const char **)&xarray, &v94);
  v30 = v94;
  if (MEMORY[0x2276858AC](v94) != v22
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&applier, v30, 1);
  sub_223456C24((xpc_object_t *)&applier, (float *)&v99);
  v31 = (std::__shared_weak_count *)v75;
  if (!v75)
    goto LABEL_40;
  v32 = (unint64_t *)(v75 + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v34 = (std::__shared_weak_count *)v95;
    if (!v95)
      goto LABEL_44;
  }
  else
  {
LABEL_40:
    v34 = (std::__shared_weak_count *)v95;
    if (!v95)
      goto LABEL_44;
  }
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v37 = *a1;
    if (*a1)
      goto LABEL_50;
    goto LABEL_45;
  }
LABEL_44:
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v37 = *a1;
  if (*a1)
    goto LABEL_50;
LABEL_45:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/DictionaryRef.cpp", 88, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2245B87B7, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v37 = *a1;
LABEL_50:
  if (!xpc_dictionary_get_value(v37, "kf_plane_local_planes"))
    goto LABEL_76;
  v93[0] = "kf_plane_local_planes";
  v93[1] = (const char *)21;
  sub_224564900(a1, v93, &applier);
  v38 = applier;
  if (MEMORY[0x2276858AC](applier) != v22
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&xarray, v38, 1);
  v39 = (std::__shared_weak_count *)v75;
  if (!v75)
    goto LABEL_57;
  v40 = (unint64_t *)(v75 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = xarray;
    if (xarray)
      goto LABEL_61;
  }
  else
  {
LABEL_57:
    v42 = xarray;
    if (xarray)
      goto LABEL_61;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_84;
  }
  v42 = xarray;
LABEL_61:
  count = xpc_array_get_count(v42);
  v44 = count;
  v45 = (char *)v94;
  if (0xAAAAAAAAAAAAAAABLL * ((v96 - (char *)v94) >> 3) < count)
  {
    if (count >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v46 = v95;
    v47 = (char *)operator new(24 * count);
    v48 = &v47[v46 - (_QWORD)v45];
    v49 = v48;
    if ((char *)v46 != v45)
    {
      v49 = &v47[v46 - (_QWORD)v45];
      do
      {
        v50 = *(_QWORD *)(v46 - 24);
        v46 -= 24;
        v51 = *(_DWORD *)(v46 + 8);
        *((_QWORD *)v49 - 3) = v50;
        v49 -= 24;
        *((_DWORD *)v49 + 2) = v51;
        v52 = *(_QWORD *)(v46 + 12);
        *((_DWORD *)v49 + 5) = *(_DWORD *)(v46 + 20);
        *(_QWORD *)(v49 + 12) = v52;
      }
      while ((char *)v46 != v45);
    }
    v94 = (std::__shared_weak_count_vtbl *)v49;
    v95 = (uint64_t)v48;
    v96 = &v47[24 * v44];
    if (v45)
      operator delete(v45);
  }
  v53 = xarray;
  if (xarray)
    goto LABEL_71;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/include/Kit/XPC/ArrayRef.h", 216, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_84:
    abort();
  }
  v53 = xarray;
LABEL_71:
  applier = (std::__shared_weak_count_vtbl *)MEMORY[0x24BDAC760];
  v75 = 0x40000000;
  v76 = sub_22341D78C;
  v77 = (uint64_t (**)())&unk_24EC36BF0;
  v78 = (const char **)&v94;
  xpc_array_apply(v53, &applier);
  v54 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v55 = (unint64_t *)(v98 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_76:
  v81 = v107;
  v82 = v108;
  v83 = v109;
  v89 = v102;
  v88 = v101;
  v87 = v100;
  v58 = v113;
  v57 = v114;
  v73 = a2;
  applier = (std::__shared_weak_count_vtbl *)&off_24EC715B8;
  v75 = v113;
  v76 = v114;
  v113 = 0;
  v114 = 0;
  v60 = v105;
  v59 = v106;
  v78 = (const char **)&off_24EC20868;
  v79 = v105;
  v80 = v106;
  v84 = v110;
  v61 = v111;
  v85 = v111;
  v77 = &off_24EC207B8;
  v86 = v99;
  v62 = (const char *)v94;
  v63 = v95;
  v90 = (const char *)v94;
  v91 = v95;
  v64 = v96;
  v92 = v96;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v65 = operator new(0xE8uLL);
  v65[1] = 0;
  v65[2] = 0;
  *v65 = &off_24EC36C20;
  v65[3] = &off_24EC715B8;
  v65[4] = v58;
  v65[5] = v57;
  v65[8] = v60;
  v65[9] = v59;
  v66 = v108;
  v67 = v109;
  *((_OWORD *)v65 + 5) = v107;
  *((_OWORD *)v65 + 6) = v66;
  *((_OWORD *)v65 + 7) = v67;
  *((_DWORD *)v65 + 32) = v110;
  v65[17] = v61;
  v65[6] = &off_24EC207B8;
  v65[7] = &off_24EC20868;
  v68 = v102;
  *((_OWORD *)v65 + 11) = v101;
  *((_OWORD *)v65 + 12) = v68;
  v69 = v100;
  *((_OWORD *)v65 + 9) = v99;
  *((_OWORD *)v65 + 10) = v69;
  v65[26] = v62;
  v65[27] = v63;
  v65[28] = v64;
  *v73 = v65 + 3;
  v73[1] = v65;
  v70 = v118;
  v116 = &off_24EC76F28;
  if (v118)
  {
    v71 = (unint64_t *)&v118->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_22341CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (__p)
  {
    operator delete(__p);
    sub_2242A8F3C((_QWORD *)(v43 - 144));
    sub_2244E0FF4((_QWORD *)(v43 - 112));
    _Unwind_Resume(a1);
  }
  sub_2242A8F3C((_QWORD *)(v43 - 144));
  sub_2244E0FF4((_QWORD *)(v43 - 112));
  _Unwind_Resume(a1);
}

void sub_22341D064(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a1[3])
  {
    v2 = (_QWORD *)a1[2];
    while (v2)
    {
      v5 = v2;
      v2 = (_QWORD *)*v2;
      v6 = (std::__shared_weak_count *)v5[5];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      operator delete(v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

BOOL sub_22341D110(uint64_t a1, const char *a2, xpc_object_t object)
{
  unint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(__int128 *__return_ptr, std::__shared_weak_count_vtbl **);
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  void (__cdecl **v30)(std::__shared_weak_count *__hidden);
  __int128 v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (__cdecl **v48)(std::__shared_weak_count *__hidden);
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  std::__shared_weak_count_vtbl *__dst;
  std::__shared_weak_count *v65;
  unint64_t v66;
  __int128 v67;
  unsigned __int8 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  sub_22340E998(&__dst, object);
  v59 = __dst;
  v60 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v65;
    if (v65)
    {
      v9 = (unint64_t *)&v65->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = strlen(a2);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v65 = (std::__shared_weak_count *)v12;
    v66 = v15 | 0x8000000000000000;
    __dst = (std::__shared_weak_count_vtbl *)p_dst;
    goto LABEL_16;
  }
  HIBYTE(v66) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_16:
    memcpy(p_dst, a2, v12);
  *((_BYTE *)p_dst + v12) = 0;
  sub_224566720((unint64_t)&__dst, (uint64_t)&v67);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__dst);
    v16 = v68;
    if (!v68)
      goto LABEL_102;
  }
  else
  {
    v16 = v68;
    if (!v68)
      goto LABEL_102;
  }
  v17 = *(_QWORD *)(a1 + 32);
  v18 = **(void (***)(__int128 *__return_ptr, std::__shared_weak_count_vtbl **))(a1 + 40);
  sub_2245646E8(&v61, v59, 1);
  v18(&v63, &v61);
  v19 = sub_22456636C((unsigned __int8 *)&v67);
  v20 = v19;
  v21 = *(_QWORD *)(v17 + 8);
  if (!v21)
    goto LABEL_48;
  v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v3 = v19;
    if (v19 >= v21)
      v3 = v19 % v21;
  }
  else
  {
    v3 = (v21 - 1) & v19;
  }
  v23 = *(uint64_t ***)(*(_QWORD *)v17 + 8 * v3);
  if (!v23 || (v24 = *v23) == 0)
  {
LABEL_48:
    v29 = (std::__shared_weak_count_vtbl *)operator new(0x30uLL);
    v30 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v17 + 16);
    __dst = v29;
    v65 = (std::__shared_weak_count *)(v17 + 16);
    v29->~__shared_weak_count = 0;
    v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
    v31 = v63;
    *(_OWORD *)&v29->__on_zero_shared = v67;
    *(_OWORD *)&v29->__on_zero_shared_weak = v31;
    v63 = 0uLL;
    LOBYTE(v66) = 1;
    v32 = (float)(unint64_t)(*(_QWORD *)(v17 + 24) + 1);
    v33 = *(float *)(v17 + 32);
    if (!v21 || (float)(v33 * (float)v21) < v32)
    {
      v34 = 1;
      if (v21 >= 3)
        v34 = (v21 & (v21 - 1)) != 0;
      v35 = v34 | (2 * v21);
      v36 = vcvtps_u32_f32(v32 / v33);
      if (v35 <= v36)
        prime = v36;
      else
        prime = v35;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v38 = *(int8x8_t *)(v17 + 8);
      if (prime > *(_QWORD *)&v38)
        goto LABEL_60;
      if (prime < *(_QWORD *)&v38)
      {
        v39 = vcvtps_u32_f32((float)*(unint64_t *)(v17 + 24) / *(float *)(v17 + 32));
        if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
        {
          v39 = std::__next_prime(v39);
        }
        else
        {
          v41 = 1 << -(char)__clz(v39 - 1);
          if (v39 >= 2)
            v39 = v41;
        }
        if (prime <= v39)
          prime = v39;
        if (prime < *(_QWORD *)&v38)
LABEL_60:
          sub_2231B0668(v17, prime);
      }
      v21 = *(_QWORD *)(v17 + 8);
      v46 = v21 - 1;
      if ((v21 & (v21 - 1)) == 0)
      {
        v3 = v46 & v20;
        v47 = *(_QWORD *)v17;
        v48 = *(void (__cdecl ***)(std::__shared_weak_count *__hidden))(*(_QWORD *)v17 + 8 * (v46 & v20));
        if (!v48)
          goto LABEL_84;
LABEL_82:
        v29->~__shared_weak_count = *v48;
        goto LABEL_90;
      }
      if (v20 >= v21)
      {
        v3 = v20 % v21;
        v47 = *(_QWORD *)v17;
        v48 = *(void (__cdecl ***)(std::__shared_weak_count *__hidden))(*(_QWORD *)v17 + 8 * (v20 % v21));
        if (v48)
          goto LABEL_82;
        goto LABEL_84;
      }
      v3 = v20;
    }
    v47 = *(_QWORD *)v17;
    v48 = *(void (__cdecl ***)(std::__shared_weak_count *__hidden))(*(_QWORD *)v17 + 8 * v3);
    if (v48)
      goto LABEL_82;
LABEL_84:
    v29->~__shared_weak_count = *v30;
    *v30 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
    *(_QWORD *)(v47 + 8 * v3) = v30;
    if (!v29->~__shared_weak_count)
    {
LABEL_91:
      ++*(_QWORD *)(v17 + 24);
      goto LABEL_92;
    }
    v49 = *((_QWORD *)v29->~__shared_weak_count + 1);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v49 >= v21)
        v49 %= v21;
    }
    else
    {
      v49 &= v21 - 1;
    }
    v48 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(*(_QWORD *)v17 + 8 * v49);
LABEL_90:
    *v48 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
    goto LABEL_91;
  }
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v24[1];
      if (v28 == v19)
      {
        if (v24[2] == (_QWORD)v67 && v24[3] == *((_QWORD *)&v67 + 1))
          goto LABEL_67;
      }
      else if ((v28 & (v21 - 1)) != v3)
      {
        goto LABEL_48;
      }
      v24 = (uint64_t *)*v24;
      if (!v24)
        goto LABEL_48;
    }
  }
  while (1)
  {
    v26 = v24[1];
    if (v26 == v19)
      break;
    if (v26 >= v21)
      v26 %= v21;
    if (v26 != v3)
      goto LABEL_48;
LABEL_35:
    v24 = (uint64_t *)*v24;
    if (!v24)
      goto LABEL_48;
  }
  if (v24[2] != (_QWORD)v67 || v24[3] != *((_QWORD *)&v67 + 1))
    goto LABEL_35;
LABEL_67:
  v42 = v63;
  v63 = 0uLL;
  v43 = (std::__shared_weak_count *)v24[5];
  *((_OWORD *)v24 + 2) = v42;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_92:
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v62;
  if (v62)
  {
    v54 = (unint64_t *)&v62->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
LABEL_102:
  if (v60)
  {
    v56 = (unint64_t *)&v60->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return v16 != 0;
}

void sub_22341D684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_2231AFCEC((uint64_t)&__p);
  sub_223167354((uint64_t)&a13);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22341D6FC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  a1[3] = &off_24EC20828;
  *a1 = &off_24EC715B8;
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_22341D78C(uint64_t a1, int a2, xpc_object_t object)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char **v9;
  __n128 v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl **v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count_vtbl *v14;
  char *v15;
  std::__shared_weak_count_vtbl **v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count_vtbl *v36;
  _BYTE v37[12];
  int v38;

  sub_22340E998(&v36, object);
  v32 = v36;
  v33 = *(std::__shared_weak_count **)v37;
  if (*(_QWORD *)v37)
  {
    v4 = (unint64_t *)(*(_QWORD *)v37 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(std::__shared_weak_count **)v37;
    if (*(_QWORD *)v37)
    {
      v7 = (unint64_t *)(*(_QWORD *)v37 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = *(char ***)(a1 + 32);
  if (MEMORY[0x2276858AC](v32) != MEMORY[0x24BDACF78]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C(&v34, v32, 1);
  v10.n128_f32[0] = sub_223458E14((xpc_object_t *)&v34, (float *)&v36);
  v12 = (std::__shared_weak_count_vtbl **)v9[1];
  v11 = (unint64_t)v9[2];
  if ((unint64_t)v12 >= v11)
  {
    v16 = (std::__shared_weak_count_vtbl **)*v9;
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - *v9) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v21 = (char *)operator new(24 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[24 * v17];
    *(_QWORD *)v22 = v36;
    *((_DWORD *)v22 + 2) = *(_DWORD *)v37;
    *(_QWORD *)(v22 + 12) = *(_QWORD *)&v37[4];
    *((_DWORD *)v22 + 5) = v38;
    v15 = v22 + 24;
    if (v12 != v16)
    {
      do
      {
        v23 = (uint64_t)*(v12 - 3);
        v12 -= 3;
        v24 = *((_DWORD *)v12 + 2);
        *((_QWORD *)v22 - 3) = v23;
        v22 -= 24;
        *((_DWORD *)v22 + 2) = v24;
        v25 = *(uint64_t *)((char *)v12 + 12);
        *((_DWORD *)v22 + 5) = *((_DWORD *)v12 + 5);
        *(_QWORD *)(v22 + 12) = v25;
      }
      while (v12 != v16);
      v12 = (std::__shared_weak_count_vtbl **)*v9;
    }
    *v9 = v22;
    v9[1] = v15;
    v9[2] = &v21[24 * v20];
    if (v12)
      operator delete(v12);
  }
  else
  {
    v13 = v36;
    *((_DWORD *)v12 + 2) = *(_DWORD *)v37;
    *v12 = v13;
    v14 = *(std::__shared_weak_count_vtbl **)&v37[4];
    *((_DWORD *)v12 + 5) = v38;
    *(std::__shared_weak_count_vtbl **)((char *)v12 + 12) = v14;
    v15 = (char *)(v12 + 3);
  }
  v9[1] = v15;
  v26 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v10);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v10);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return 1;
}

void sub_22341DA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341DA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341DA78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22341DA88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22341DAB8(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  a1[6] = &off_24EC20828;
  a1[3] = &off_24EC715B8;
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

BOOL sub_22341DB40(uint64_t a1, const char *a2, xpc_object_t object)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD **v16;
  uint64_t v17;
  const void *bytes_ptr;
  size_t length;
  void **v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  void *v63;
  char *v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  void **v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  uint64_t (**v86)();
  uint64_t v87;
  _BYTE *v88;
  const void *v89;
  char v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unsigned __int8 v94[16];
  unsigned __int8 v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  __int128 v122;
  __int128 v123;
  char v124;
  __int128 v125;
  uint64_t v126;
  unsigned __int8 v127;
  __int128 v128;
  uint64_t v129;
  unsigned __int8 v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  __int16 v134;
  void **__dst;
  std::__shared_weak_count *v136;
  __int128 v137;
  _BYTE v138[64];
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  int v150;
  unint64_t v151;
  char v152;
  char v153;
  void *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  char v162;
  void *__p;
  char *v164;
  uint64_t v165;
  char v166;
  void *v167;
  _BYTE *v168;
  uint64_t v169;
  char v170;
  void *v171;
  char *v172;
  uint64_t v173;
  char v174;
  __int16 v175;
  _BYTE v176[16];
  uint64_t v177;
  _QWORD v178[20];

  v178[19] = *MEMORY[0x24BDAC8D0];
  sub_22340E998(&__dst, object);
  v83 = __dst;
  v84 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v136;
    if (v136)
    {
      v8 = (unint64_t *)&v136->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = strlen(a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    *(_QWORD *)&v137 = v14 | 0x8000000000000000;
    __dst = p_dst;
    v136 = (std::__shared_weak_count *)v11;
    goto LABEL_16;
  }
  BYTE7(v137) = v10;
  p_dst = (void **)&__dst;
  if (v10)
LABEL_16:
    memcpy(p_dst, a2, v11);
  *((_BYTE *)p_dst + v11) = 0;
  sub_224566720((unint64_t)&__dst, (uint64_t)v94);
  if (SBYTE7(v137) < 0)
  {
    operator delete(__dst);
    v15 = v95;
    if (!v95)
      goto LABEL_186;
  }
  else
  {
    v15 = v95;
    if (!v95)
      goto LABEL_186;
  }
  v16 = *(_QWORD ***)(a1 + 32);
  v17 = MEMORY[0x2276858AC](v83);
  if ((v17 == MEMORY[0x24BDACF78]
     || v17 == MEMORY[0x24BDACF80]
     || v17 != MEMORY[0x24BDACF90]
     || MEMORY[0x24BDACF88] == MEMORY[0x24BDACF90])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 181, (uint64_t)"IsOfType(Type::Data)", 20, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C)|| (bytes_ptr = xpc_data_get_bytes_ptr(v83), length = xpc_data_get_length(v83), v20 = (void **)length, !bytes_ptr)&& length&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v89 = bytes_ptr;
  __dst = v20;
  sub_2234120D8((uint64_t)v176, (uint64_t *)&v89, &__dst);
  LOBYTE(v140) = 0;
  v147 = 0;
  v137 = 0u;
  memset(v138, 0, sizeof(v138));
  v139 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  LOBYTE(v151) = 0;
  v153 = 0;
  v159 = 0;
  LOBYTE(v160) = 0;
  v162 = 0;
  LOBYTE(__p) = 0;
  v166 = 0;
  LOBYTE(v167) = 0;
  v170 = 0;
  LOBYTE(v171) = 0;
  v174 = 0;
  v175 = 0;
  v155 = 0;
  v154 = 0;
  LOBYTE(v157) = 0;
  v156 = 0;
  v86 = &off_24EC791F8;
  v87 = 1;
  v88 = v176;
  LODWORD(v91) = 1;
  std::istream::read();
  v91 = (unint64_t)&__dst;
  sub_22341F170();
  LODWORD(v91) = 1;
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  v91 = (unint64_t)&v138[8];
  sub_22341F28C();
  std::istream::read();
  std::istream::read();
  LOBYTE(v93) = 0;
  std::istream::read();
  if ((_BYTE)v93)
  {
    if (!v147)
    {
      v146 = 0;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v147 = 1;
    }
    LODWORD(v91) = 1;
    std::istream::read();
    std::istream::read();
    LODWORD(v91) = 1;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  else if (v147)
  {
    v147 = 0;
  }
  std::istream::read();
  LODWORD(v91) = 2;
  std::istream::read();
  v21 = v91;
  if (v91 >= 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/DataModels/ContinuousTrackingResultSample.h", 169, (uint64_t)"version <= sample.MaxVersion()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  LODWORD(v91) = 2;
  std::istream::read();
  v22 = v91;
  if (v91 >= 2)
    v22 = 2;
  if (v22 < 2)
  {
    v91 = 0;
    v92 = 0;
    std::istream::read();
    LOBYTE(v93) = 0;
    std::istream::read();
    v23 = v93;
    v148 = v91;
  }
  else
  {
    std::istream::read();
    LOBYTE(v91) = 0;
    std::istream::read();
    v23 = v91;
  }
  v149 = v23;
  std::istream::read();
  if (v21 >= 2)
  {
    v90 = 0;
    std::istream::read();
    if (v90)
    {
      if (!v153)
      {
        v151 = 0;
        v152 = 0;
        v153 = 1;
      }
      LODWORD(v91) = 2;
      std::istream::read();
      v24 = v91;
      if (v91 >= 2)
        v24 = 2;
      if (v24 < 2)
      {
        v91 = 0;
        v92 = 0;
        std::istream::read();
        LOBYTE(v93) = 0;
        std::istream::read();
        v25 = v93;
        v151 = v91;
      }
      else
      {
        std::istream::read();
        LOBYTE(v91) = 0;
        std::istream::read();
        v25 = v91;
      }
      v152 = v25;
    }
    else if (v153)
    {
      v153 = 0;
    }
  }
  v93 = (v155 - (_BYTE *)v154) >> 4;
  std::istream::read();
  v26 = v155;
  v27 = (char *)v154;
  v28 = (v155 - (_BYTE *)v154) >> 4;
  if (v93 <= v28)
  {
    if (v93 < v28)
    {
      v26 = (char *)v154 + 16 * v93;
      v155 = v26;
    }
  }
  else
  {
    sub_2232C68D0((char **)&v154, v93 - v28);
    v27 = (char *)v154;
    v26 = v155;
  }
  if (v26 != v27)
  {
    v29 = 16 * ((v26 - v27) >> 4);
    do
    {
      v91 = (unint64_t)v27;
      sub_22341F170();
      v27 += 16;
      v29 -= 16;
    }
    while (v29);
  }
  LOBYTE(v93) = 0;
  std::istream::read();
  if ((_BYTE)v93)
  {
    if (!v159)
    {
      v157 = 0;
      v158 = 0;
      v159 = 1;
    }
    LODWORD(v91) = 1;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  else if (v159)
  {
    v159 = 0;
  }
  LOBYTE(v91) = 0;
  std::istream::read();
  if ((_BYTE)v91)
  {
    if (!v162)
    {
      v160 = 0u;
      v161 = 0u;
      v162 = 1;
    }
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  else if (v162)
  {
    v162 = 0;
  }
  LOBYTE(v93) = 0;
  std::istream::read();
  if ((_BYTE)v93)
  {
    if (!v166)
    {
      __p = 0;
      v164 = 0;
      v165 = 0;
      v166 = 1;
    }
    LODWORD(v91) = 1;
    std::istream::read();
    v91 = (v164 - (_BYTE *)__p) >> 3;
    std::istream::read();
    v30 = v164;
    v31 = (char *)__p;
    v32 = (v164 - (_BYTE *)__p) >> 3;
    if (v91 <= v32)
    {
      if (v91 < v32)
      {
        v30 = (char *)__p + 8 * v91;
        v164 = v30;
      }
    }
    else
    {
      sub_2232F8F14(&__p, v91 - v32);
      v31 = (char *)__p;
      v30 = v164;
    }
    if (v30 != v31)
    {
      v33 = v30;
      do
      {
        std::istream::read();
        std::istream::read();
        v31 += 8;
      }
      while (v31 != v33);
    }
  }
  else if (v166)
  {
    if (__p)
    {
      v164 = (char *)__p;
      operator delete(__p);
    }
    v166 = 0;
  }
  v90 = 0;
  std::istream::read();
  if (v90)
  {
    if (v170)
    {
      v34 = v168;
      v35 = v167;
    }
    else
    {
      v35 = 0;
      v34 = 0;
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v170 = 1;
    }
    v91 = (v34 - v35) >> 4;
    std::istream::read();
    v36 = v168;
    v37 = (char *)v167;
    v38 = (v168 - (_BYTE *)v167) >> 4;
    if (v91 <= v38)
    {
      if (v91 < v38)
      {
        v36 = (char *)v167 + 16 * v91;
        v168 = v36;
      }
    }
    else
    {
      sub_2232C68D0((char **)&v167, v91 - v38);
      v37 = (char *)v167;
      v36 = v168;
    }
    if (v36 != v37)
    {
      v39 = v36;
      do
      {
        LODWORD(v93) = 1;
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
        v37 += 16;
      }
      while (v37 != v39);
    }
  }
  else if (v170)
  {
    if (v167)
    {
      v168 = v167;
      operator delete(v167);
    }
    v170 = 0;
  }
  v90 = 0;
  std::istream::read();
  if (!v90)
  {
    if (v174)
    {
      v41 = (char *)v171;
      if (v171)
      {
        v42 = v172;
        v43 = v171;
        if (v172 != v171)
        {
          v44 = v172;
          do
          {
            v46 = (void *)*((_QWORD *)v44 - 3);
            v44 -= 24;
            v45 = v46;
            if (v46)
            {
              *((_QWORD *)v42 - 2) = v45;
              operator delete(v45);
            }
            v42 = v44;
          }
          while (v44 != v41);
          v43 = v171;
        }
        v172 = v41;
        operator delete(v43);
      }
      v174 = 0;
    }
    goto LABEL_138;
  }
  if (v174)
  {
    v40 = 0xAAAAAAAAAAAAAAABLL * ((v172 - (_BYTE *)v171) >> 3);
  }
  else
  {
    v40 = 0;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v174 = 1;
  }
  v93 = v40;
  std::istream::read();
  v47 = v172;
  v48 = 0xAAAAAAAAAAAAAAABLL * ((v172 - (_BYTE *)v171) >> 3);
  if (v93 <= v48)
  {
    if (v93 >= v48)
    {
      v49 = v172;
      v50 = (char *)v171;
      if (v172 == v171)
        goto LABEL_138;
    }
    else
    {
      v49 = (char *)v171 + 24 * v93;
      if (v172 != v49)
      {
        v51 = v172;
        do
        {
          v53 = (void *)*((_QWORD *)v51 - 3);
          v51 -= 24;
          v52 = v53;
          if (v53)
          {
            *((_QWORD *)v47 - 2) = v52;
            operator delete(v52);
          }
          v47 = v51;
        }
        while (v51 != v49);
      }
      v172 = v49;
      v50 = (char *)v171;
      if (v49 == v171)
        goto LABEL_138;
    }
    do
    {
LABEL_127:
      v91 = (uint64_t)(*((_QWORD *)v50 + 1) - *(_QWORD *)v50) >> 3;
      std::istream::read();
      v55 = *(char **)v50;
      v54 = (char *)*((_QWORD *)v50 + 1);
      v56 = (uint64_t)&v54[-*(_QWORD *)v50] >> 3;
      if (v91 <= v56)
      {
        if (v91 < v56)
        {
          v54 = &v55[8 * v91];
          *((_QWORD *)v50 + 1) = v54;
        }
      }
      else
      {
        sub_2232F8F14((void **)v50, v91 - v56);
        v55 = *(char **)v50;
        v54 = (char *)*((_QWORD *)v50 + 1);
      }
      if (v54 != v55)
      {
        v57 = v54;
        do
        {
          std::istream::read();
          std::istream::read();
          v55 += 8;
        }
        while (v55 != v57);
      }
      v50 += 24;
    }
    while (v50 != v49);
    goto LABEL_138;
  }
  sub_2232C7FD8((uint64_t)&v171, v93 - v48);
  v49 = v172;
  v50 = (char *)v171;
  if (v172 != v171)
    goto LABEL_127;
LABEL_138:
  LOBYTE(v91) = 0;
  std::istream::read();
  if ((_BYTE)v91)
  {
    if (!HIBYTE(v175))
      v175 = 256;
    std::istream::read();
  }
  else if (HIBYTE(v175))
  {
    HIBYTE(v175) = 0;
  }
  sub_223ED4594((uint64_t)&__dst, (uint64_t)&v96);
  if (v174)
  {
    v58 = (char *)v171;
    if (v171)
    {
      v59 = v172;
      v60 = v171;
      if (v172 != v171)
      {
        v61 = v172;
        do
        {
          v63 = (void *)*((_QWORD *)v61 - 3);
          v61 -= 24;
          v62 = v63;
          if (v63)
          {
            *((_QWORD *)v59 - 2) = v62;
            operator delete(v62);
          }
          v59 = v61;
        }
        while (v61 != v58);
        v60 = v171;
      }
      v172 = v58;
      operator delete(v60);
    }
  }
  if (v170 && v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v166 && __p)
  {
    v164 = (char *)__p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = (char *)v154;
    operator delete(v154);
  }
  std::istream::~istream();
  sub_22341293C((uint64_t)&v177);
  MEMORY[0x227684BE0](v178);
  v64 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *(_QWORD *)v64 = &off_24EC36C90;
  *((_QWORD *)v64 + 5) = v97;
  v65 = v100;
  *((_DWORD *)v64 + 12) = v98;
  *(_QWORD *)(v64 + 52) = v99;
  *(_OWORD *)(v64 + 24) = v96;
  *((_DWORD *)v64 + 15) = v65;
  v66 = v101;
  v67 = v102;
  v68 = v104;
  *((_OWORD *)v64 + 6) = v103;
  *((_OWORD *)v64 + 7) = v68;
  *((_OWORD *)v64 + 4) = v66;
  *((_OWORD *)v64 + 5) = v67;
  *((_QWORD *)v64 + 16) = v105;
  v64[136] = 0;
  v64[240] = 0;
  if (v113)
  {
    v64[136] = v106;
    v69 = v110;
    *((_OWORD *)v64 + 11) = v109;
    *((_OWORD *)v64 + 12) = v69;
    v70 = v112;
    *((_OWORD *)v64 + 13) = v111;
    *((_OWORD *)v64 + 14) = v70;
    v71 = v108;
    *((_OWORD *)v64 + 9) = v107;
    *((_OWORD *)v64 + 10) = v71;
    v64[240] = 1;
  }
  v72 = v119;
  *((_QWORD *)v64 + 37) = v117;
  v73 = v115;
  *(_OWORD *)(v64 + 248) = v114;
  v74 = v116;
  *(_OWORD *)(v64 + 264) = v73;
  *(_OWORD *)(v64 + 280) = v74;
  *((_OWORD *)v64 + 19) = v118;
  *((_QWORD *)v64 + 40) = v72;
  v119 = 0;
  v118 = 0uLL;
  v64[328] = 0;
  v64[344] = 0;
  if (v121)
  {
    *(_OWORD *)(v64 + 328) = v120;
    v64[344] = 1;
  }
  v64[348] = 0;
  v64[380] = 0;
  if (v124)
  {
    *(_OWORD *)(v64 + 348) = v122;
    *(_OWORD *)(v64 + 364) = v123;
    v64[380] = 1;
  }
  v64[384] = 0;
  v64[408] = 0;
  v75 = v127;
  if (v127)
  {
    *((_OWORD *)v64 + 24) = v125;
    *((_QWORD *)v64 + 50) = v126;
    v126 = 0;
    v125 = 0uLL;
    v64[408] = 1;
  }
  v64[416] = 0;
  v64[440] = 0;
  v76 = v130;
  if (v130)
  {
    *((_OWORD *)v64 + 26) = v128;
    *((_QWORD *)v64 + 54) = v129;
    v129 = 0;
    v128 = 0uLL;
    v64[440] = 1;
  }
  v64[448] = 0;
  v64[472] = 0;
  if (v133)
  {
    *((_OWORD *)v64 + 28) = v131;
    *((_QWORD *)v64 + 58) = v132;
    v132 = 0;
    v131 = 0uLL;
    v64[472] = 1;
  }
  *((_WORD *)v64 + 240) = v134;
  *(_QWORD *)&v85 = v64 + 24;
  *((_QWORD *)&v85 + 1) = v64;
  if (v76 && (_QWORD)v128)
  {
    *((_QWORD *)&v128 + 1) = v128;
    operator delete((void *)v128);
    v75 = v127;
  }
  if (v75 && (_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    operator delete((void *)v125);
  }
  if ((_QWORD)v118)
  {
    *((_QWORD *)&v118 + 1) = v118;
    operator delete((void *)v118);
  }
  sub_22341EDB8(v16, v94, &v85);
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_186:
  if (v84)
  {
    v80 = (unint64_t *)&v84->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  return v15 != 0;
}

void sub_22341EC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341ECA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_223248D8C((uint64_t)va1);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341ECC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2232E7728((uint64_t)&STACK[0x250]);
  sub_223412240((uint64_t)&STACK[0x428]);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341ECC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    sub_223167354((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x22341ED98);
}

void sub_22341ECF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22341ED04(_Unwind_Exception *a1, int a2)
{
  std::runtime_error *exception;

  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Couldnt deserialize global plane");
  exception->__vftable = (std::runtime_error_vtbl *)&off_24EC372A8;
  __cxa_throw(exception, (struct type_info *)&unk_24EC372C0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_22341ED70()
{
  __cxa_end_catch();
  JUMPOUT(0x22341ED88);
}

void sub_22341EDA8(void *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  JUMPOUT(0x22341ED20);
}

uint64_t *sub_22341EDB8(_QWORD **a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  char v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  __int128 v17;
  unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v22;
  unsigned __int8 *v23;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint64_t *)(a1 + 1);
    do
    {
      v9 = sub_22319835C((unsigned __int8 *)v7 + 32, a2);
      if (v9 >= 0)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9 >= 0)
        v8 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v8 != v6 && (sub_22319835C(a2, (unsigned __int8 *)v8 + 32) & 0x80) == 0)
    {
      v11 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v12 = (std::__shared_weak_count *)v8[7];
      *((_OWORD *)v8 + 3) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      return v8;
    }
    v6 = v8;
  }
  v15 = sub_22341EF18(a1, v6, &v23, &v22, a2);
  v8 = *(uint64_t **)v15;
  if (!*(_QWORD *)v15)
  {
    v16 = v15;
    v8 = (uint64_t *)operator new(0x40uLL);
    v17 = *a3;
    *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 3) = v17;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v18 = v23;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v18;
    *(_QWORD *)v16 = v8;
    v19 = (_QWORD *)**a1;
    v20 = v8;
    if (v19)
    {
      *a1 = v19;
      v20 = *(uint64_t **)v16;
    }
    sub_2231A9A8C(a1[1], v20);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v8;
}

unsigned __int8 *sub_22341EF18(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || (sub_22319835C(a5, (unsigned __int8 *)a2 + 32) & 0x80) != 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
    }
    else
    {
      v11 = (unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (unsigned __int8 *)v16[2];
          v17 = *(_QWORD *)v12 == (_QWORD)v16;
          v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((sub_22319835C(v12 + 32, a5) & 0x80) == 0)
      {
        v18 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v18;
              v20 = v18 + 32;
              if ((sub_22319835C(a5, v18 + 32) & 0x80) == 0)
                break;
              v18 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_22319835C(v20, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v18 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v18);
          goto LABEL_23;
        }
        goto LABEL_18;
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((sub_22319835C((unsigned __int8 *)a2 + 32, a5) & 0x80) == 0)
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v21 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v21;
        v21 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if ((sub_22319835C(a5, v15 + 32) & 0x80) == 0)
      {
        v22 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v22;
              v23 = v22 + 32;
              if ((sub_22319835C(a5, v22 + 32) & 0x80) == 0)
                break;
              v22 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_22319835C(v23, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v22);
          goto LABEL_23;
        }
LABEL_18:
        v19 = v9;
LABEL_23:
        *a3 = v19;
        return v9;
      }
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
  }
  return (unsigned __int8 *)a4;
}

void sub_22341F124(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22341F134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22341F164(uint64_t a1)
{
  sub_22324A5A0(a1 + 24);
}

uint64_t sub_22341F170()
{
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  return std::istream::read();
}

uint64_t sub_22341F28C()
{
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  return std::istream::read();
}

void sub_22341F3A8(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 40;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v12 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v2)
      {
        v13 = (void *)*((_QWORD *)v12 - 3);
        if (v13)
        {
          *((_QWORD *)v12 - 2) = v13;
          operator delete(v13);
        }
        v12 -= 40;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_22341F4C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 40;
        *(_QWORD *)(a1 + 16) = v2 - 40;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_22341F52C(uint64_t a1, const char *a2, xpc_object_t object)
{
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  size_t count;
  size_t v28;
  void *v29;
  size_t v30;
  size_t i;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  xpc_object_t v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  void *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  char *v92;
  uint64_t v93;
  void *v94;
  void **v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned __int8 *v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  unsigned __int8 *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v118;
  int v119;
  _QWORD *v120;
  __int128 v121;
  void *__p[2];
  char *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  const char *v126;
  uint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  uint64_t v129;
  xpc_object_t xarray;
  std::__shared_weak_count *v131;
  __int128 v132;
  unsigned __int8 v133;
  __int128 __dst;
  unint64_t v135;
  char *v136;
  _QWORD *v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  sub_22340E998(&__dst, object);
  v121 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = strlen(a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    v135 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v135) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_16:
    memcpy(p_dst, a2, v11);
  *((_BYTE *)p_dst + v11) = 0;
  sub_224566720((unint64_t)&__dst, (uint64_t)&v132);
  if (SHIBYTE(v135) < 0)
  {
    operator delete((void *)__dst);
    v15 = v133;
    if (!v133)
      goto LABEL_202;
  }
  else
  {
    v15 = v133;
    if (!v133)
      goto LABEL_202;
  }
  v120 = *(_QWORD **)(a1 + 32);
  v16 = MEMORY[0x2276858AC](v121);
  v17 = MEMORY[0x24BDACF78];
  if ((v16 != MEMORY[0x24BDACFA0]
     || MEMORY[0x24BDACF98] == MEMORY[0x24BDACFA0]
     || v16 == MEMORY[0x24BDACF90]
     || v16 == MEMORY[0x24BDACF88]
     || v16 == MEMORY[0x24BDACF78]
     || v16 == MEMORY[0x24BDACF80])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 172, (uint64_t)"IsOfType(Type::Dictionary)", 26, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2245646E8(&v124, (std::__shared_weak_count_vtbl *)v121, 1);
  v128 = (std::__shared_weak_count_vtbl *)"global_planes_to_kfs_uuid";
  v129 = 25;
  sub_224564900((xpc_object_t *)&v124, (const char **)&v128, &xarray);
  v18 = (std::__shared_weak_count_vtbl *)xarray;
  if (MEMORY[0x2276858AC](xarray) != v17
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&__dst, v18, 1);
  v19 = v131;
  if (v131)
  {
    p_shared_owners = (unint64_t *)&v131->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v126 = "global_planes_to_kfs_indices";
  v127 = 28;
  sub_224564900((xpc_object_t *)&v124, &v126, &v128);
  v22 = v128;
  if (MEMORY[0x2276858AC](v128) != v17
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&xarray, v22, 1);
  v23 = (std::__shared_weak_count *)v129;
  if (!v129)
    goto LABEL_41;
  v24 = (unint64_t *)(v129 + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (void *)__dst;
    if ((_QWORD)__dst)
      goto LABEL_45;
  }
  else
  {
LABEL_41:
    v26 = (void *)__dst;
    if ((_QWORD)__dst)
      goto LABEL_45;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v26 = (void *)__dst;
LABEL_45:
  count = xpc_array_get_count(v26);
  v28 = count;
  *(_OWORD *)__p = 0uLL;
  v123 = 0;
  if (count)
  {
    if (count > 0xCCCCCCCCCCCCCCCLL)
      sub_22316E078();
    __p[0] = operator new(20 * count);
    __p[1] = __p[0];
    v123 = (char *)__p[0] + 20 * v28;
  }
  v29 = (void *)__dst;
  if (!(_QWORD)__dst)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v29 = (void *)__dst;
  }
  v30 = xpc_array_get_count(v29);
  v119 = v15;
  if (v30)
  {
    for (i = 0; i != v30; ++i)
    {
      v32 = (void *)__dst;
      if (!(_QWORD)__dst)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_230;
        }
        v32 = (void *)__dst;
      }
      if (xpc_array_get_count(v32) <= i
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 59, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_230:
        abort();
      }
      sub_2245644B8((xpc_object_t *)&__dst, i, &v128);
      v33 = sub_22456549C((xpc_object_t *)&v128);
      v35 = v34;
      v36 = xarray;
      if (!xarray)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 79, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_229;
        }
        v36 = xarray;
      }
      if (xpc_array_get_count(v36) <= i
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/ArrayRef.cpp", 59, (uint64_t)"index < Size()", 14, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_229:
        abort();
      }
      sub_2245644B8(&xarray, i, &v126);
      v37 = sub_224565390((xpc_object_t *)&v126);
      v38 = v37;
      v39 = (char *)__p[1];
      if (__p[1] >= v123)
      {
        v41 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 2) + 1;
        if (v41 > 0xCCCCCCCCCCCCCCCLL)
          sub_22316E078();
        if (0x999999999999999ALL * ((v123 - (char *)__p[0]) >> 2) > v41)
          v41 = 0x999999999999999ALL * ((v123 - (char *)__p[0]) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((v123 - (char *)__p[0]) >> 2) >= 0x666666666666666)
          v42 = 0xCCCCCCCCCCCCCCCLL;
        else
          v42 = v41;
        if (v42)
        {
          if (v42 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v43 = (char *)operator new(20 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[4 * (((char *)__p[1] - (char *)__p[0]) >> 2)];
        *(_QWORD *)v44 = v33;
        *((_QWORD *)v44 + 1) = v35;
        *((_DWORD *)v44 + 4) = v38;
        v45 = v44;
        if (__p[1] != __p[0])
        {
          do
          {
            v46 = *(_OWORD *)(v39 - 20);
            *((_DWORD *)v45 - 1) = *((_DWORD *)v39 - 1);
            *(_OWORD *)(v45 - 20) = v46;
            v45 -= 20;
            v39 -= 20;
          }
          while (v39 != __p[0]);
          v39 = (char *)__p[0];
        }
        v47 = &v43[20 * v42];
        v40 = (uint64_t)(v44 + 20);
        __p[0] = v45;
        v123 = v47;
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)__p[1] = v33;
        *((_QWORD *)__p[1] + 1) = v35;
        v40 = (uint64_t)__p[1] + 20;
        *((_DWORD *)__p[1] + 4) = v37;
      }
      __p[1] = (void *)v40;
      v48 = (std::__shared_weak_count *)v127;
      if (!v127)
        goto LABEL_85;
      v49 = (unint64_t *)(v127 + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        v51 = (std::__shared_weak_count *)v129;
        if (v129)
        {
LABEL_86:
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      else
      {
LABEL_85:
        v51 = (std::__shared_weak_count *)v129;
        if (v129)
          goto LABEL_86;
      }
    }
  }
  v54 = v131;
  if (v131)
  {
    v55 = (unint64_t *)&v131->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (!*((_QWORD *)&__dst + 1))
    goto LABEL_101;
  v58 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v60 = v125;
    if (!v125)
      goto LABEL_105;
  }
  else
  {
LABEL_101:
    v60 = v125;
    if (!v125)
      goto LABEL_105;
  }
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v63 = v120;
    v65 = (unsigned __int8 *)*v120;
    v64 = (unsigned __int8 *)v120[1];
    v66 = (uint64_t)&v64[-*v120];
    if (v64 != (unsigned __int8 *)*v120)
      goto LABEL_106;
LABEL_131:
    v68 = v64;
    if (v65 == v64)
      goto LABEL_157;
LABEL_132:
    v75 = *v68;
    v76 = v132;
    v77 = v75 >= v132;
    if (v75 != v132 || (v75 = v68[1], v76 = BYTE1(v132), v77 = v75 >= BYTE1(v132), v75 != BYTE1(v132)))
    {
      if (!v77)
        goto LABEL_157;
      goto LABEL_151;
    }
    v78 = v68[2];
    v79 = BYTE2(v132);
    if (v78 == BYTE2(v132))
    {
      v78 = v68[3];
      v79 = BYTE3(v132);
      if (v78 == BYTE3(v132))
      {
        v78 = v68[4];
        v79 = BYTE4(v132);
        if (v78 == BYTE4(v132))
        {
          v78 = v68[5];
          v79 = BYTE5(v132);
          if (v78 == BYTE5(v132))
          {
            v78 = v68[6];
            v79 = BYTE6(v132);
            if (v78 == BYTE6(v132))
            {
              v78 = v68[7];
              v79 = BYTE7(v132);
              if (v78 == BYTE7(v132))
              {
                v78 = v68[8];
                v79 = BYTE8(v132);
                if (v78 == BYTE8(v132))
                {
                  v78 = v68[9];
                  v79 = BYTE9(v132);
                  if (v78 == BYTE9(v132))
                  {
                    v78 = v68[10];
                    v79 = BYTE10(v132);
                    if (v78 == BYTE10(v132))
                    {
                      v78 = v68[11];
                      v79 = BYTE11(v132);
                      if (v78 == BYTE11(v132))
                      {
                        v78 = v68[12];
                        v79 = BYTE12(v132);
                        if (v78 == BYTE12(v132))
                        {
                          v78 = v68[13];
                          v79 = BYTE13(v132);
                          if (v78 == BYTE13(v132) && (v78 = v68[14], v79 = BYTE14(v132), v78 == BYTE14(v132)))
                          {
                            v78 = v68[15];
                            v79 = HIBYTE(v132);
                            v63 = v120;
                            if (v78 == HIBYTE(v132))
                              goto LABEL_213;
                          }
                          else
                          {
                            v63 = v120;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v78 < v79)
      goto LABEL_157;
LABEL_213:
    v76 = BYTE2(v132);
    v75 = v68[2];
    if (BYTE2(v132) == v75)
    {
      v76 = BYTE3(v132);
      v75 = v68[3];
      if (BYTE3(v132) == v75)
      {
        v76 = BYTE4(v132);
        v75 = v68[4];
        if (BYTE4(v132) == v75)
        {
          v76 = BYTE5(v132);
          v75 = v68[5];
          if (BYTE5(v132) == v75)
          {
            v76 = BYTE6(v132);
            v75 = v68[6];
            if (BYTE6(v132) == v75)
            {
              v76 = BYTE7(v132);
              v75 = v68[7];
              if (BYTE7(v132) == v75)
              {
                v76 = BYTE8(v132);
                v75 = v68[8];
                if (BYTE8(v132) == v75)
                {
                  v76 = BYTE9(v132);
                  v75 = v68[9];
                  if (BYTE9(v132) == v75)
                  {
                    v76 = BYTE10(v132);
                    v75 = v68[10];
                    if (BYTE10(v132) == v75)
                    {
                      v76 = BYTE11(v132);
                      v75 = v68[11];
                      if (BYTE11(v132) == v75)
                      {
                        v76 = BYTE12(v132);
                        v75 = v68[12];
                        if (BYTE12(v132) == v75
                          && (v76 = BYTE13(v132), v75 = v68[13], BYTE13(v132) == v75)
                          && (v76 = BYTE14(v132), v75 = v68[14], BYTE14(v132) == v75))
                        {
                          v76 = HIBYTE(v132);
                          v75 = v68[15];
                          v63 = v120;
                          if (HIBYTE(v132) == v75)
                            goto LABEL_152;
                        }
                        else
                        {
                          v63 = v120;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_151:
    if (v76 < v75)
      goto LABEL_157;
LABEL_152:
    v80 = (void *)*((_QWORD *)v68 + 2);
    if (v80)
    {
      *((_QWORD *)v68 + 3) = v80;
      operator delete(v80);
      *((_QWORD *)v68 + 2) = 0;
      *((_QWORD *)v68 + 3) = 0;
      *((_QWORD *)v68 + 4) = 0;
    }
    *((_OWORD *)v68 + 1) = *(_OWORD *)__p;
    *((_QWORD *)v68 + 4) = v123;
    v15 = v119;
    goto LABEL_202;
  }
LABEL_105:
  v63 = v120;
  v65 = (unsigned __int8 *)*v120;
  v64 = (unsigned __int8 *)v120[1];
  v66 = (uint64_t)&v64[-*v120];
  if (v64 == (unsigned __int8 *)*v120)
    goto LABEL_131;
LABEL_106:
  v67 = 0xCCCCCCCCCCCCCCCDLL * (v66 >> 3);
  v68 = v65;
  do
  {
    v69 = v67 >> 1;
    v70 = &v68[40 * (v67 >> 1)];
    v71 = *v70;
    v72 = v132;
    if (v71 != v132)
      goto LABEL_124;
    v71 = v70[1];
    v72 = BYTE1(v132);
    if (v71 != BYTE1(v132))
      goto LABEL_124;
    v71 = v70[2];
    v72 = BYTE2(v132);
    if (v71 != BYTE2(v132))
      goto LABEL_124;
    v71 = v70[3];
    v72 = BYTE3(v132);
    if (v71 != BYTE3(v132))
      goto LABEL_124;
    v71 = v70[4];
    v72 = BYTE4(v132);
    if (v71 != BYTE4(v132))
      goto LABEL_124;
    v71 = v70[5];
    v72 = BYTE5(v132);
    if (v71 != BYTE5(v132))
      goto LABEL_124;
    v71 = v70[6];
    v72 = BYTE6(v132);
    if (v71 != BYTE6(v132))
      goto LABEL_124;
    v71 = v70[7];
    v72 = BYTE7(v132);
    if (v71 != BYTE7(v132))
      goto LABEL_124;
    v71 = v70[8];
    v72 = BYTE8(v132);
    if (v71 != BYTE8(v132))
      goto LABEL_124;
    v71 = v70[9];
    v72 = BYTE9(v132);
    if (v71 != BYTE9(v132))
      goto LABEL_124;
    v71 = v70[10];
    v72 = BYTE10(v132);
    if (v71 != BYTE10(v132))
      goto LABEL_124;
    v71 = v70[11];
    v72 = BYTE11(v132);
    if (v71 != BYTE11(v132))
      goto LABEL_124;
    v71 = v70[12];
    v72 = BYTE12(v132);
    if (v71 != BYTE12(v132)
      || (v71 = v70[13], v72 = BYTE13(v132), v71 != BYTE13(v132))
      || (v71 = v70[14], v72 = BYTE14(v132), v71 != BYTE14(v132))
      || (v71 = v70[15], v72 = HIBYTE(v132), v71 != HIBYTE(v132)))
    {
LABEL_124:
      v73 = v70 + 40;
      v74 = v67 + ~v69;
      if (v71 < v72)
      {
        v69 = v74;
        v68 = v73;
      }
    }
    v67 = v69;
  }
  while (v69);
  v63 = v120;
  if (v64 != v68)
    goto LABEL_132;
LABEL_157:
  v81 = (v68 - v65) / 40;
  v82 = &v65[40 * v81];
  v83 = v63[2];
  if ((unint64_t)v64 < v83)
  {
    if (v82 == v64)
    {
      v103 = &v65[40 * v81];
      *(_OWORD *)v64 = v132;
      *((_QWORD *)v103 + 2) = 0;
      *((_QWORD *)v103 + 3) = 0;
      *((_QWORD *)v103 + 4) = 0;
      *((_OWORD *)v103 + 1) = *(_OWORD *)__p;
      *((_QWORD *)v103 + 4) = v123;
      v63[1] = v64 + 40;
      v15 = v119;
    }
    else
    {
      __dst = v132;
      v84 = v63[1];
      v85 = (char *)(v82 + 40);
      v86 = v84 - 40;
      v87 = v84;
      if (v84 >= 0x28)
      {
        do
        {
          *(_OWORD *)v87 = *(_OWORD *)v86;
          *(_QWORD *)(v87 + 24) = 0;
          *(_QWORD *)(v87 + 32) = 0;
          *(_QWORD *)(v87 + 16) = 0;
          *(_OWORD *)(v87 + 16) = *(_OWORD *)(v86 + 16);
          *(_QWORD *)(v87 + 32) = *(_QWORD *)(v86 + 32);
          *(_QWORD *)(v86 + 16) = 0;
          *(_QWORD *)(v86 + 24) = 0;
          *(_QWORD *)(v86 + 32) = 0;
          v87 += 40;
          v86 += 40;
        }
        while (v86 < v84);
      }
      v63[1] = v87;
      if ((char *)v84 != v85)
      {
        v88 = 0;
        v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v84 - (_QWORD)v85) >> 3);
        v90 = -40 * v89;
        v91 = &v65[40 * v81 + 40 * v89];
        do
        {
          v92 = (char *)&v91[v88];
          v93 = v84 + v88;
          v95 = (void **)(v84 + v88 - 24);
          v94 = *v95;
          *(_OWORD *)(v84 + v88 - 40) = *(_OWORD *)&v91[v88 - 40];
          if (v94)
          {
            *(_QWORD *)(v93 - 16) = v94;
            operator delete(v94);
            *v95 = 0;
            *(_QWORD *)(v84 + v88 - 16) = 0;
            *(_QWORD *)(v84 + v88 - 8) = 0;
          }
          *(_OWORD *)v95 = *(_OWORD *)(v92 - 24);
          *(_QWORD *)(v93 - 8) = *((_QWORD *)v92 - 1);
          *((_QWORD *)v92 - 3) = 0;
          *((_QWORD *)v92 - 2) = 0;
          *((_QWORD *)v92 - 1) = 0;
          v88 -= 40;
        }
        while (v90 != v88);
      }
      *(_OWORD *)v82 = __dst;
      v99 = &v65[40 * v81];
      v102 = (void *)*((_QWORD *)v99 + 2);
      v101 = v99 + 16;
      v100 = v102;
      if (v102)
      {
        *(_QWORD *)&v65[40 * v81 + 24] = v100;
        operator delete(v100);
        *v101 = 0;
        v101[1] = 0;
        v101[2] = 0;
      }
      *(_OWORD *)v101 = *(_OWORD *)__p;
      *(_QWORD *)&v65[40 * v81 + 32] = v123;
      v15 = v119;
    }
    goto LABEL_202;
  }
  v96 = 0xCCCCCCCCCCCCCCCDLL * (v66 >> 3) + 1;
  if (v96 > 0x666666666666666)
    sub_22316E078();
  if (0x999999999999999ALL * ((uint64_t)(v83 - (_QWORD)v65) >> 3) > v96)
    v96 = 0x999999999999999ALL * ((uint64_t)(v83 - (_QWORD)v65) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - (_QWORD)v65) >> 3) >= 0x333333333333333)
    v97 = 0x666666666666666;
  else
    v97 = v96;
  v137 = v63 + 2;
  if (v97)
  {
    if (v97 > 0x666666666666666)
      sub_223174E94();
    v98 = (char *)operator new(40 * v97);
  }
  else
  {
    v98 = 0;
  }
  v104 = &v98[40 * v81];
  *(_QWORD *)&__dst = v98;
  *((_QWORD *)&__dst + 1) = v104;
  v135 = (unint64_t)v104;
  v136 = &v98[40 * v97];
  if (v81 == v97)
  {
    if (v68 - v65 < 1)
    {
      if (v68 == v65)
        v106 = 1;
      else
        v106 = 2 * v81;
      if (v106 > 0x666666666666666)
        sub_223174E94();
      v107 = (char *)operator new(40 * v106);
      v104 = &v107[40 * (v106 >> 2)];
      v136 = &v107[40 * v106];
      if (v98)
        operator delete(v98);
    }
    else
    {
      v105 = v81 + 2;
      if (v81 >= -1)
        v105 = v81 + 1;
      v104 -= 40 * (v105 >> 1);
    }
  }
  *(_OWORD *)v104 = v132;
  *((_OWORD *)v104 + 1) = *(_OWORD *)__p;
  *((_QWORD *)v104 + 4) = v123;
  v108 = (unint64_t)(v104 + 40);
  v135 = (unint64_t)(v104 + 40);
  v109 = (char *)*v120;
  if ((unsigned __int8 *)*v120 == v82)
  {
    v15 = v119;
    v113 = (unsigned __int8 *)v120[1];
    if (v113 == v82)
      goto LABEL_195;
    do
    {
LABEL_198:
      *(_OWORD *)v108 = *(_OWORD *)v82;
      *(_QWORD *)(v108 + 24) = 0;
      *(_QWORD *)(v108 + 32) = 0;
      *(_QWORD *)(v108 + 16) = 0;
      *(_OWORD *)(v108 + 16) = *((_OWORD *)v82 + 1);
      *(_QWORD *)(v108 + 32) = *((_QWORD *)v82 + 4);
      *((_QWORD *)v82 + 2) = 0;
      *((_QWORD *)v82 + 3) = 0;
      *((_QWORD *)v82 + 4) = 0;
      v108 += 40;
      v82 += 40;
    }
    while (v82 != v113);
    v114 = (unsigned __int8 *)*v120;
    v82 = (unsigned __int8 *)v120[1];
    *v120 = v104;
    v120[1] = v108;
    v120[2] = v136;
    if (v82 == v114)
    {
LABEL_200:
      if (!v82)
        goto LABEL_202;
LABEL_201:
      operator delete(v82);
      goto LABEL_202;
    }
    goto LABEL_209;
  }
  v110 = 0;
  v15 = v119;
  do
  {
    v111 = &v104[v110];
    v112 = (char *)&v82[v110];
    *(_OWORD *)(v111 - 40) = *(_OWORD *)&v82[v110 - 40];
    *(_OWORD *)(v111 - 24) = *(_OWORD *)&v82[v110 - 24];
    *((_QWORD *)v111 - 1) = *(_QWORD *)&v82[v110 - 8];
    *((_QWORD *)v112 - 3) = 0;
    *((_QWORD *)v112 - 2) = 0;
    *((_QWORD *)v112 - 1) = 0;
    v110 -= 40;
  }
  while (&v82[v110] != (unsigned __int8 *)v109);
  v108 = v135;
  v104 += v110;
  v113 = (unsigned __int8 *)v120[1];
  if (v113 != v82)
    goto LABEL_198;
LABEL_195:
  v114 = (unsigned __int8 *)*v120;
  *v120 = v104;
  v120[1] = v108;
  v120[2] = v136;
  if (v82 == v114)
    goto LABEL_200;
  do
  {
LABEL_209:
    v118 = (void *)*((_QWORD *)v82 - 3);
    if (v118)
    {
      *((_QWORD *)v82 - 2) = v118;
      operator delete(v118);
    }
    v82 -= 40;
  }
  while (v82 != v114);
  v82 = v114;
  if (v114)
    goto LABEL_201;
LABEL_202:
  if (*((_QWORD *)&v121 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v121 + 1) + 16))(*((_QWORD *)&v121 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v121 + 1));
    }
  }
  return v15 != 0;
}

void sub_223420648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_22341F4C0(v24 - 144);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    sub_223167354((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_223420764(uint64_t a1, const char *a2, xpc_object_t object)
{
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void **v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unsigned __int8 *v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  unsigned __int8 *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  char *v64;
  __int128 v65;
  unint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  void *__p[2];
  uint64_t v82;
  __int128 v83;
  unsigned __int8 v84;
  __int128 __dst;
  unint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  sub_22340E998(&__dst, object);
  v80 = __dst;
  if (*((_QWORD *)&__dst + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = strlen(a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    v86 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v86) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_16:
    memcpy(p_dst, a2, v11);
  *((_BYTE *)p_dst + v11) = 0;
  sub_224566720((unint64_t)&__dst, (uint64_t)&v83);
  if (SHIBYTE(v86) < 0)
  {
    operator delete((void *)__dst);
    v15 = v84;
    if (!v84)
      goto LABEL_137;
  }
  else
  {
    v15 = v84;
    if (!v84)
      goto LABEL_137;
  }
  v16 = *(_QWORD **)(a1 + 32);
  if (MEMORY[0x2276858AC](v80) != MEMORY[0x24BDACF78]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/XPC/src/Ref.cpp", 163, (uint64_t)"IsOfType(Type::Array)", 21, (uint64_t)&unk_2245B8832, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22456428C((std::__shared_weak_count_vtbl **)&__dst, (std::__shared_weak_count_vtbl *)v80, 1);
  v17.n128_f64[0] = sub_2234598F8((xpc_object_t *)&__dst, (uint64_t)__p);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
      std::__shared_weak_count::__release_weak(v18);
      v79 = v15;
      v22 = (unsigned __int8 *)*v16;
      v21 = (unsigned __int8 *)v16[1];
      v23 = (uint64_t)&v21[-*v16];
      if (v21 != (unsigned __int8 *)*v16)
        goto LABEL_28;
LABEL_51:
      v25 = v21;
      if (v22 == v21)
        goto LABEL_87;
      goto LABEL_52;
    }
  }
  v79 = v15;
  v22 = (unsigned __int8 *)*v16;
  v21 = (unsigned __int8 *)v16[1];
  v23 = (uint64_t)&v21[-*v16];
  if (v21 == (unsigned __int8 *)*v16)
    goto LABEL_51;
LABEL_28:
  v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 3);
  v25 = v22;
  do
  {
    v26 = v24 >> 1;
    v27 = &v25[40 * (v24 >> 1)];
    v28 = *v27;
    v29 = v83;
    if (v28 != v83)
      goto LABEL_46;
    v28 = v27[1];
    v29 = BYTE1(v83);
    if (v28 != BYTE1(v83))
      goto LABEL_46;
    v28 = v27[2];
    v29 = BYTE2(v83);
    if (v28 != BYTE2(v83))
      goto LABEL_46;
    v28 = v27[3];
    v29 = BYTE3(v83);
    if (v28 != BYTE3(v83))
      goto LABEL_46;
    v28 = v27[4];
    v29 = BYTE4(v83);
    if (v28 != BYTE4(v83))
      goto LABEL_46;
    v28 = v27[5];
    v29 = BYTE5(v83);
    if (v28 != BYTE5(v83))
      goto LABEL_46;
    v28 = v27[6];
    v29 = BYTE6(v83);
    if (v28 != BYTE6(v83))
      goto LABEL_46;
    v28 = v27[7];
    v29 = BYTE7(v83);
    if (v28 != BYTE7(v83))
      goto LABEL_46;
    v28 = v27[8];
    v29 = BYTE8(v83);
    if (v28 != BYTE8(v83))
      goto LABEL_46;
    v28 = v27[9];
    v29 = BYTE9(v83);
    if (v28 != BYTE9(v83))
      goto LABEL_46;
    v28 = v27[10];
    v29 = BYTE10(v83);
    if (v28 != BYTE10(v83))
      goto LABEL_46;
    v28 = v27[11];
    v29 = BYTE11(v83);
    if (v28 != BYTE11(v83))
      goto LABEL_46;
    v28 = v27[12];
    v29 = BYTE12(v83);
    if (v28 != BYTE12(v83)
      || (v28 = v27[13], v29 = BYTE13(v83), v28 != BYTE13(v83))
      || (v28 = v27[14], v29 = BYTE14(v83), v28 != BYTE14(v83))
      || (v28 = v27[15], v29 = HIBYTE(v83), v28 != HIBYTE(v83)))
    {
LABEL_46:
      v30 = v27 + 40;
      v31 = v24 + ~v26;
      if (v28 < v29)
      {
        v26 = v31;
        v25 = v30;
      }
    }
    v24 = v26;
  }
  while (v26);
  if (v21 == v25)
  {
LABEL_87:
    v37 = (v25 - v22) / 40;
    v38 = &v22[40 * v37];
    v39 = v16[2];
    if ((unint64_t)v21 < v39)
    {
      if (v38 == v21)
      {
        v59 = &v22[40 * v37];
        *(_OWORD *)v21 = v83;
        *((_QWORD *)v59 + 2) = 0;
        *((_QWORD *)v59 + 3) = 0;
        *((_QWORD *)v59 + 4) = 0;
        *((_OWORD *)v59 + 1) = *(_OWORD *)__p;
        *((_QWORD *)v59 + 4) = v82;
        __p[1] = 0;
        v82 = 0;
        __p[0] = 0;
        v16[1] = v21 + 40;
        v15 = v79;
        goto LABEL_137;
      }
      __dst = v83;
      v77 = *(_OWORD *)__p;
      v78 = v82;
      __p[1] = 0;
      v82 = 0;
      __p[0] = 0;
      v40 = v16[1];
      v41 = (char *)(v38 + 40);
      v42 = v40 - 40;
      v43 = v40;
      if (v40 >= 0x28)
      {
        do
        {
          *(_OWORD *)v43 = *(_OWORD *)v42;
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 16) = 0;
          *(_OWORD *)(v43 + 16) = *(_OWORD *)(v42 + 16);
          *(_QWORD *)(v43 + 32) = *(_QWORD *)(v42 + 32);
          *(_QWORD *)(v42 + 16) = 0;
          *(_QWORD *)(v42 + 24) = 0;
          *(_QWORD *)(v42 + 32) = 0;
          v43 += 40;
          v42 += 40;
        }
        while (v42 < v40);
      }
      v16[1] = v43;
      if ((char *)v40 != v41)
      {
        v44 = 0;
        v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (_QWORD)v41) >> 3);
        v46 = -40 * v45;
        v47 = &v22[40 * v37 + 40 * v45];
        do
        {
          v48 = (char *)&v47[v44];
          v49 = v40 + v44;
          v51 = (void **)(v40 + v44 - 24);
          v50 = *v51;
          *(_OWORD *)(v40 + v44 - 40) = *(_OWORD *)&v47[v44 - 40];
          if (v50)
          {
            *(_QWORD *)(v49 - 16) = v50;
            operator delete(v50);
            *v51 = 0;
            *(_QWORD *)(v40 + v44 - 16) = 0;
            *(_QWORD *)(v40 + v44 - 8) = 0;
          }
          *(_OWORD *)v51 = *(_OWORD *)(v48 - 24);
          *(_QWORD *)(v49 - 8) = *((_QWORD *)v48 - 1);
          *((_QWORD *)v48 - 3) = 0;
          *((_QWORD *)v48 - 2) = 0;
          *((_QWORD *)v48 - 1) = 0;
          v44 -= 40;
        }
        while (v46 != v44);
      }
      *(_OWORD *)v38 = __dst;
      v55 = &v22[40 * v37];
      v58 = (void *)*((_QWORD *)v55 + 2);
      v57 = v55 + 16;
      v56 = v58;
      if (v58)
      {
        *(_QWORD *)&v22[40 * v37 + 24] = v56;
        operator delete(v56);
        *v57 = 0;
        v57[1] = 0;
        v57[2] = 0;
      }
      *(_OWORD *)v57 = v77;
      *(_QWORD *)&v22[40 * v37 + 32] = v78;
      v15 = v79;
      goto LABEL_135;
    }
    v52 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 3) + 1;
    if (v52 > 0x666666666666666)
      sub_22316E078();
    if (0x999999999999999ALL * ((uint64_t)(v39 - (_QWORD)v22) >> 3) > v52)
      v52 = 0x999999999999999ALL * ((uint64_t)(v39 - (_QWORD)v22) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - (_QWORD)v22) >> 3) >= 0x333333333333333)
      v53 = 0x666666666666666;
    else
      v53 = v52;
    v88 = v16 + 2;
    if (v53)
    {
      if (v53 > 0x666666666666666)
        sub_223174E94();
      v54 = (char *)operator new(40 * v53);
    }
    else
    {
      v54 = 0;
    }
    v60 = &v54[40 * v37];
    *(_QWORD *)&__dst = v54;
    *((_QWORD *)&__dst + 1) = v60;
    v86 = (unint64_t)v60;
    v87 = &v54[40 * v53];
    if (v37 == v53)
    {
      if (v25 - v22 < 1)
      {
        if (v25 == v22)
          v63 = 1;
        else
          v63 = 2 * v37;
        if (v63 > 0x666666666666666)
          sub_223174E94();
        v64 = (char *)operator new(40 * v63);
        v60 = &v64[40 * (v63 >> 2)];
        v87 = &v64[40 * v63];
        if (v54)
          operator delete(v54);
      }
      else
      {
        v61 = v37 + 2;
        if (v37 >= -1)
          v61 = v37 + 1;
        v60 -= 40 * (v61 >> 1);
      }
    }
    v65 = *(_OWORD *)__p;
    *(_OWORD *)v60 = v83;
    *((_OWORD *)v60 + 1) = v65;
    *((_QWORD *)v60 + 4) = v82;
    __p[0] = 0;
    __p[1] = 0;
    v82 = 0;
    v66 = (unint64_t)(v60 + 40);
    v86 = (unint64_t)(v60 + 40);
    v67 = (unsigned __int8 *)*v16;
    if ((unsigned __int8 *)*v16 == v38)
    {
      v15 = v79;
      v71 = (unsigned __int8 *)v16[1];
      if (v71 == v38)
        goto LABEL_128;
    }
    else
    {
      v68 = 0;
      v15 = v79;
      do
      {
        v69 = &v60[v68];
        v70 = (char *)&v38[v68];
        *(_OWORD *)(v69 - 40) = *(_OWORD *)&v38[v68 - 40];
        *(_OWORD *)(v69 - 24) = *(_OWORD *)&v38[v68 - 24];
        *((_QWORD *)v69 - 1) = *(_QWORD *)&v38[v68 - 8];
        *((_QWORD *)v70 - 3) = 0;
        *((_QWORD *)v70 - 2) = 0;
        *((_QWORD *)v70 - 1) = 0;
        v68 -= 40;
      }
      while (&v38[v68] != v67);
      v66 = v86;
      v60 += v68;
      v71 = (unsigned __int8 *)v16[1];
      if (v71 == v38)
      {
LABEL_128:
        v72 = (unsigned __int8 *)*v16;
        *v16 = v60;
        v16[1] = v66;
        v16[2] = v87;
        if (v38 == v72)
          goto LABEL_133;
        goto LABEL_144;
      }
    }
    do
    {
      *(_OWORD *)v66 = *(_OWORD *)v38;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0;
      *(_QWORD *)(v66 + 16) = 0;
      *(_OWORD *)(v66 + 16) = *((_OWORD *)v38 + 1);
      *(_QWORD *)(v66 + 32) = *((_QWORD *)v38 + 4);
      *((_QWORD *)v38 + 2) = 0;
      *((_QWORD *)v38 + 3) = 0;
      *((_QWORD *)v38 + 4) = 0;
      v66 += 40;
      v38 += 40;
    }
    while (v38 != v71);
    v72 = (unsigned __int8 *)*v16;
    v38 = (unsigned __int8 *)v16[1];
    *v16 = v60;
    v16[1] = v66;
    v16[2] = v87;
    if (v38 == v72)
    {
LABEL_133:
      if (!v38)
        goto LABEL_135;
      goto LABEL_134;
    }
    do
    {
LABEL_144:
      v76 = (void *)*((_QWORD *)v38 - 3);
      if (v76)
      {
        *((_QWORD *)v38 - 2) = v76;
        operator delete(v76);
      }
      v38 -= 40;
    }
    while (v38 != v72);
    v38 = v72;
    if (!v72)
      goto LABEL_135;
LABEL_134:
    operator delete(v38);
LABEL_135:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_137;
  }
LABEL_52:
  v32 = *v25;
  v33 = v83;
  v34 = v32 >= v83;
  if (v32 != v83 || (v32 = v25[1], v33 = BYTE1(v83), v34 = v32 >= BYTE1(v83), v32 != BYTE1(v83)))
  {
    if (!v34)
      goto LABEL_87;
LABEL_86:
    if (v33 < v32)
      goto LABEL_87;
    goto LABEL_115;
  }
  v35 = v25[2];
  v36 = BYTE2(v83);
  if (v35 != BYTE2(v83))
    goto LABEL_68;
  v35 = v25[3];
  v36 = BYTE3(v83);
  if (v35 != BYTE3(v83))
    goto LABEL_68;
  v35 = v25[4];
  v36 = BYTE4(v83);
  if (v35 != BYTE4(v83))
    goto LABEL_68;
  v35 = v25[5];
  v36 = BYTE5(v83);
  if (v35 != BYTE5(v83))
    goto LABEL_68;
  v35 = v25[6];
  v36 = BYTE6(v83);
  if (v35 != BYTE6(v83))
    goto LABEL_68;
  v35 = v25[7];
  v36 = BYTE7(v83);
  if (v35 != BYTE7(v83))
    goto LABEL_68;
  v35 = v25[8];
  v36 = BYTE8(v83);
  if (v35 != BYTE8(v83))
    goto LABEL_68;
  v35 = v25[9];
  v36 = BYTE9(v83);
  if (v35 != BYTE9(v83))
    goto LABEL_68;
  v35 = v25[10];
  v36 = BYTE10(v83);
  if (v35 != BYTE10(v83))
    goto LABEL_68;
  v35 = v25[11];
  v36 = BYTE11(v83);
  if (v35 != BYTE11(v83))
    goto LABEL_68;
  v35 = v25[12];
  v36 = BYTE12(v83);
  if (v35 != BYTE12(v83)
    || (v35 = v25[13], v36 = BYTE13(v83), v35 != BYTE13(v83))
    || (v35 = v25[14], v36 = BYTE14(v83), v35 != BYTE14(v83))
    || (v35 = v25[15], v36 = HIBYTE(v83), v35 != HIBYTE(v83)))
  {
LABEL_68:
    if (v35 < v36)
      goto LABEL_87;
  }
  v33 = BYTE2(v83);
  v32 = v25[2];
  if (BYTE2(v83) != v32)
    goto LABEL_86;
  v33 = BYTE3(v83);
  v32 = v25[3];
  if (BYTE3(v83) != v32)
    goto LABEL_86;
  v33 = BYTE4(v83);
  v32 = v25[4];
  if (BYTE4(v83) != v32)
    goto LABEL_86;
  v33 = BYTE5(v83);
  v32 = v25[5];
  if (BYTE5(v83) != v32)
    goto LABEL_86;
  v33 = BYTE6(v83);
  v32 = v25[6];
  if (BYTE6(v83) != v32)
    goto LABEL_86;
  v33 = BYTE7(v83);
  v32 = v25[7];
  if (BYTE7(v83) != v32)
    goto LABEL_86;
  v33 = BYTE8(v83);
  v32 = v25[8];
  if (BYTE8(v83) != v32)
    goto LABEL_86;
  v33 = BYTE9(v83);
  v32 = v25[9];
  if (BYTE9(v83) != v32)
    goto LABEL_86;
  v33 = BYTE10(v83);
  v32 = v25[10];
  if (BYTE10(v83) != v32)
    goto LABEL_86;
  v33 = BYTE11(v83);
  v32 = v25[11];
  if (BYTE11(v83) != v32)
    goto LABEL_86;
  v33 = BYTE12(v83);
  v32 = v25[12];
  if (BYTE12(v83) != v32)
    goto LABEL_86;
  v33 = BYTE13(v83);
  v32 = v25[13];
  if (BYTE13(v83) != v32)
    goto LABEL_86;
  v33 = BYTE14(v83);
  v32 = v25[14];
  if (BYTE14(v83) != v32)
    goto LABEL_86;
  v33 = HIBYTE(v83);
  v32 = v25[15];
  if (HIBYTE(v83) != v32)
    goto LABEL_86;
LABEL_115:
  v62 = (void *)*((_QWORD *)v25 + 2);
  if (v62)
  {
    *((_QWORD *)v25 + 3) = v62;
    operator delete(v62);
    *((_QWORD *)v25 + 2) = 0;
    *((_QWORD *)v25 + 3) = 0;
    *((_QWORD *)v25 + 4) = 0;
  }
  *((_OWORD *)v25 + 1) = *(_OWORD *)__p;
  *((_QWORD *)v25 + 4) = v82;
  v15 = v79;
LABEL_137:
  if (*((_QWORD *)&v80 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
    }
  }
  return v15 != 0;
}

void sub_223421208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_22341F4C0((uint64_t)&a21);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    sub_223167354((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_223167354((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_223421294(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[5];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t sub_2234213C8(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  *(_OWORD *)(a1 + 20) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = *a3;
  v6 = a3[1];
  v7 = a3[2];
  *(_OWORD *)(a1 + 84) = a3[3];
  *(_OWORD *)(a1 + 68) = v7;
  *(_OWORD *)(a1 + 52) = v6;
  *(_OWORD *)(a1 + 36) = v5;
  v8 = a3[4];
  v9 = a3[5];
  v10 = a3[6];
  v11 = a3[7];
  *(_QWORD *)(a1 + 168) = 0;
  v12 = (uint64_t **)(a1 + 168);
  *(_OWORD *)(a1 + 148) = v11;
  *(_OWORD *)(a1 + 132) = v10;
  *(_OWORD *)(a1 + 116) = v9;
  *(_OWORD *)(a1 + 100) = v8;
  sub_223224144(&v36);
  sub_22319ED0C(&v34, (uint64_t)&v36);
  sub_2232231D0((_BYTE *)(a1 + 8), (uint64_t)&v34);
  v13 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = operator new();
  sub_223427C60(v16, (_DWORD *)(a1 + 8));
  v17 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v16;
  if (v17)
  {
    v18 = sub_2232D3058(v17);
    MEMORY[0x227684CE8](v18, 0x1060C40EFCE1224);
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v19 = (uint64_t *)operator new();
    sub_223227930(v19);
    sub_2232279C4(v19 + 1);
    v25 = *v12;
    *v12 = v19;
    if (v25)
    {
      v26 = (std::__shared_weak_count *)v25[2];
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = sub_22322797C((void **)v25, v20, v21, v22, v23, v24);
      MEMORY[0x227684CE8](v29, 0xA0C409BE6959DLL);
    }
  }
  sub_223421740(a1);
  v30 = v37;
  if (!v37)
    return a1;
  v31 = (unint64_t *)&v37->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
    return a1;
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  return a1;
}

void sub_2234215D0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a8);
  sub_22322797C(v10, a2, a3, a4, a5, a6);
  MEMORY[0x227684CE8](v10, 0xA0C409BE6959DLL);
  sub_223167354((uint64_t)va);
  sub_2234216B8(v9, v12, v13, v14, v15, v16);
  sub_223421674(v8);
  _Unwind_Resume(a1);
}

uint64_t *sub_223421674(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_2232D3058(v2);
    MEMORY[0x227684CE8](v3, 0x1060C40EFCE1224);
  }
  return a1;
}

uint64_t *sub_2234216B8(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;

  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = sub_22322797C((void **)v7, a2, a3, a4, a5, a6);
    MEMORY[0x227684CE8](v11, 0xA0C409BE6959DLL);
  }
  return a1;
}

void sub_223421740(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  sub_223427F24(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v14);
  sub_223431244(&v14, *(_DWORD *)(a1 + 8), (_BYTE *)(a1 + 12));
  v2 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v17;
  if (v17)
  {
    v6 = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v16;
  if (v16)
  {
    v9 = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_223421874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223421888(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;

  v7 = a1[21];
  a1[21] = 0;
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = sub_22322797C((void **)v7, a2, a3, a4, a5, a6);
    MEMORY[0x227684CE8](v11, 0xA0C409BE6959DLL);
    v17 = a1[21];
    a1[21] = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 16);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = sub_22322797C((void **)v17, v12, v13, v14, v15, v16);
      MEMORY[0x227684CE8](v21, 0xA0C409BE6959DLL);
    }
  }
  v22 = *a1;
  *a1 = 0;
  if (v22)
  {
    v23 = sub_2232D3058(v22);
    MEMORY[0x227684CE8](v23, 0x1060C40EFCE1224);
  }
  return a1;
}

void sub_223421994(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  unsigned __int8 *v90;
  BOOL v91;
  unint64_t *v92;
  unint64_t v93;
  __n128 v94;
  int32x4_t v95;
  float32x4_t v96;
  __int128 v97;
  int8x16_t v98;
  float32x2_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  float32x2_t v103;
  float32x2_t v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t *v117;
  __int128 v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  void *v148[2];
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  __int128 v161;
  void *v162[2];
  int8x16_t v163;
  int32x4_t v164;
  float32x2_t v165;
  unsigned __int32 v166;
  int v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;
  void *v173[2];
  uint64_t v174;
  __int128 __p;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  __int128 v184;
  uint64_t v185;
  char v186;
  __int128 v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  sub_223427F24(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v168);
  if (a7 && (_QWORD)v168)
  {
    sub_2234227AC((uint64_t)v162, v168);
    sub_223428024((uint64_t)v162, a6, (uint64_t)v148);
    v16 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &off_24EC36D40;
    v17 = v148[0];
    v18 = (unint64_t)v148[1];
    *((void **)v16 + 3) = v148[0];
    v148[0] = 0;
    v148[1] = 0;
    *((_QWORD *)v16 + 4) = v18;
    v20 = v149;
    v19 = v150;
    *((_QWORD *)v16 + 5) = v149;
    *((_QWORD *)v16 + 6) = v19;
    *((_DWORD *)v16 + 14) = v151;
    if (v19)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v21 >= v18)
          v21 %= v18;
      }
      else
      {
        v21 &= v18 - 1;
      }
      v17[v21] = v16 + 40;
      v149 = 0;
      v150 = 0;
    }
    v23 = v152;
    v22 = v153;
    *((_QWORD *)v16 + 9) = v153;
    v24 = v16 + 72;
    *((_QWORD *)v16 + 8) = v23;
    v25 = v154;
    *((_QWORD *)v16 + 10) = v154;
    if (v25)
    {
      *(_QWORD *)(v22 + 16) = v24;
      v152 = &v153;
      v153 = 0;
      v154 = 0;
    }
    else
    {
      *((_QWORD *)v16 + 8) = v24;
    }
    *(_OWORD *)(v16 + 88) = v155;
    *((_QWORD *)v16 + 13) = v156;
    v155 = 0uLL;
    v16[112] = v157;
    *(_OWORD *)(v16 + 120) = v158;
    *((_QWORD *)v16 + 17) = v159;
    v156 = 0;
    v158 = 0uLL;
    v159 = 0;
    v16[144] = v160;
    *(_OWORD *)(v16 + 152) = v161;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
    *(_QWORD *)&v168 = v16 + 24;
    *((_QWORD *)&v168 + 1) = v16;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    sub_2234288A8((uint64_t)a6, (_QWORD *)v168, (uint64_t)v173);
    v29 = (char *)operator new(0xD8uLL);
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *(_QWORD *)v29 = &off_24EC36D90;
    *(_OWORD *)(v29 + 24) = *(_OWORD *)v173;
    v31 = v176;
    v30 = v177;
    *((_QWORD *)v29 + 5) = v174;
    v173[0] = 0;
    v173[1] = 0;
    *((_OWORD *)v29 + 3) = __p;
    v174 = 0;
    __p = 0uLL;
    v176 = 0;
    v32 = *((_QWORD *)&v177 + 1);
    v33 = v178;
    *((_QWORD *)v29 + 8) = v31;
    *((_QWORD *)v29 + 9) = v30;
    *((_QWORD *)v29 + 10) = v32;
    v177 = 0uLL;
    v34 = *((_QWORD *)&v178 + 1);
    *((_QWORD *)v29 + 11) = v33;
    *((_QWORD *)v29 + 12) = v34;
    *((_DWORD *)v29 + 26) = v179;
    if (v34)
    {
      v35 = *(_QWORD *)(v33 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v35 >= v32)
          v35 %= v32;
      }
      else
      {
        v35 &= v32 - 1;
      }
      *(_QWORD *)(v30 + 8 * v35) = v29 + 88;
      v178 = 0uLL;
    }
    v36 = *((_QWORD *)&v179 + 1);
    v37 = v180;
    *((_QWORD *)v29 + 15) = v180;
    v38 = v29 + 120;
    *((_QWORD *)v29 + 14) = v36;
    v39 = *((_QWORD *)&v180 + 1);
    *((_QWORD *)v29 + 16) = *((_QWORD *)&v180 + 1);
    if (v39)
    {
      *(_QWORD *)(v37 + 16) = v38;
      *((_QWORD *)&v179 + 1) = &v180;
      v180 = 0uLL;
    }
    else
    {
      *((_QWORD *)v29 + 14) = v38;
    }
    *(_OWORD *)(v29 + 136) = v181;
    *((_QWORD *)v29 + 19) = v182;
    v181 = 0uLL;
    v29[160] = v183;
    *(_OWORD *)(v29 + 168) = v184;
    *((_QWORD *)v29 + 23) = v185;
    v182 = 0;
    v184 = 0uLL;
    v185 = 0;
    v29[192] = v186;
    *(_OWORD *)(v29 + 200) = v187;
    v40 = *(std::__shared_weak_count **)(a8 + 8);
    *(_QWORD *)a8 = v29 + 24;
    *(_QWORD *)(a8 + 8) = v29;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    sub_2233C8A78((uint64_t)&v177);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v173[0])
    {
      v173[1] = v173[0];
      operator delete(v173[0]);
    }
    sub_2233C8A78((uint64_t)v148);
    sub_2233C8A78((uint64_t)v162);
  }
  if (!a3)
    goto LABEL_94;
  v43 = v169;
  if (!(_QWORD)v169)
    goto LABEL_94;
  sub_223426270(v162, (uint64_t *)v169);
  v163.i8[8] = *(_BYTE *)(v43 + 24);
  sub_22342A090((uint64_t)v162, a2, *(_DWORD *)(a1 + 32), (uint64_t)v148);
  v44 = (char *)operator new(0x38uLL);
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = 0;
  *(_QWORD *)v44 = &off_24EC36DE0;
  *(_OWORD *)(v44 + 24) = *(_OWORD *)v148;
  *((_QWORD *)v44 + 5) = v149;
  v148[0] = 0;
  v148[1] = 0;
  v149 = 0;
  v44[48] = v150;
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  *(_QWORD *)&v169 = v44 + 24;
  *((_QWORD *)&v169 + 1) = v44;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  sub_22342A5E4((__int128 **)a2, v169, v173);
  v48 = (char *)operator new(0x50uLL);
  *((_QWORD *)v48 + 1) = 0;
  *((_QWORD *)v48 + 2) = 0;
  *(_QWORD *)v48 = &off_24EC36E30;
  v49 = *(_OWORD *)v173;
  v50 = v176;
  *((_QWORD *)v48 + 5) = v174;
  *(_OWORD *)(v48 + 24) = v49;
  v173[0] = 0;
  v173[1] = 0;
  *((_OWORD *)v48 + 3) = __p;
  *((_QWORD *)v48 + 8) = v50;
  v174 = 0;
  __p = 0uLL;
  v176 = 0;
  v48[72] = v177;
  v51 = *(std::__shared_weak_count **)(a8 + 24);
  *(_QWORD *)(a8 + 16) = v48 + 24;
  *(_QWORD *)(a8 + 24) = v48;
  if (!v51)
    goto LABEL_47;
  v52 = (unint64_t *)&v51->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v54 = (char *)__p;
    if (!(_QWORD)__p)
      goto LABEL_62;
  }
  else
  {
LABEL_47:
    v54 = (char *)__p;
    if (!(_QWORD)__p)
      goto LABEL_62;
  }
  v55 = (char *)*((_QWORD *)&__p + 1);
  v56 = v54;
  if (*((char **)&__p + 1) == v54)
    goto LABEL_61;
  do
  {
    if (!*(v55 - 8))
      goto LABEL_56;
    v57 = (std::__shared_weak_count *)*((_QWORD *)v55 - 2);
    if (!v57)
      goto LABEL_56;
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (v59)
    {
LABEL_56:
      v60 = *((unsigned int *)v55 - 36);
      if ((_DWORD)v60 == -1)
        goto LABEL_50;
LABEL_57:
      ((void (*)(char *, char *))off_24EC36D10[v60])(&v172, v55 - 160);
      goto LABEL_50;
    }
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v60 = *((unsigned int *)v55 - 36);
    if ((_DWORD)v60 != -1)
      goto LABEL_57;
LABEL_50:
    *((_DWORD *)v55 - 36) = -1;
    v55 -= 192;
  }
  while (v55 != v54);
  v56 = (char *)__p;
LABEL_61:
  *((_QWORD *)&__p + 1) = v54;
  operator delete(v56);
LABEL_62:
  if (v173[0])
  {
    v173[1] = v173[0];
    operator delete(v173[0]);
  }
  v61 = (char *)v148[0];
  if (!v148[0])
    goto LABEL_79;
  v62 = (char *)v148[1];
  v63 = v148[0];
  if (v148[1] == v148[0])
    goto LABEL_78;
  if (!*(v62 - 8))
    goto LABEL_73;
  v64 = (std::__shared_weak_count *)*((_QWORD *)v62 - 2);
  if (!v64)
    goto LABEL_73;
  while (2)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v67 = *((unsigned int *)v62 - 36);
      if ((_DWORD)v67 != -1)
LABEL_74:
        ((void (*)(void **, char *))off_24EC36D10[v67])(v173, v62 - 160);
    }
    else
    {
LABEL_73:
      v67 = *((unsigned int *)v62 - 36);
      if ((_DWORD)v67 != -1)
        goto LABEL_74;
    }
    *((_DWORD *)v62 - 36) = -1;
    v62 -= 192;
    if (v62 != v61)
      continue;
    break;
  }
  v63 = v148[0];
LABEL_78:
  v148[1] = v61;
  operator delete(v63);
LABEL_79:
  v68 = (char *)v162[0];
  if (!v162[0])
    goto LABEL_94;
  v69 = (char *)v162[1];
  v70 = v162[0];
  if (v162[1] == v162[0])
    goto LABEL_93;
  if (!*(v69 - 8))
    goto LABEL_88;
  v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 2);
  if (!v71)
    goto LABEL_88;
  while (2)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
      v74 = *((unsigned int *)v69 - 36);
      if ((_DWORD)v74 != -1)
LABEL_89:
        ((void (*)(void **, char *))off_24EC36D10[v74])(v173, v69 - 160);
    }
    else
    {
LABEL_88:
      v74 = *((unsigned int *)v69 - 36);
      if ((_DWORD)v74 != -1)
        goto LABEL_89;
    }
    *((_DWORD *)v69 - 36) = -1;
    v69 -= 192;
    if (v69 != v68)
      continue;
    break;
  }
  v70 = v162[0];
LABEL_93:
  v162[1] = v68;
  operator delete(v70);
LABEL_94:
  if (!a5)
    goto LABEL_138;
  if (!(_QWORD)v170)
    goto LABEL_121;
  v173[1] = 0;
  v174 = 0;
  v173[0] = &v173[1];
  v75 = (unsigned __int8 *)(v170 + 8);
  v76 = *(unsigned __int8 **)v170;
  if (*(_QWORD *)v170 != (_QWORD)v170 + 8)
  {
    do
    {
      v82 = sub_22341EF18(v173, (uint64_t *)&v173[1], (unsigned __int8 **)v162, (uint64_t *)v148, v76 + 32);
      if (*(_QWORD *)v82)
      {
        v83 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
        if (v83)
          goto LABEL_110;
      }
      else
      {
        v84 = (uint64_t *)operator new(0x40uLL);
        v85 = v84;
        *((_OWORD *)v84 + 2) = *((_OWORD *)v76 + 2);
        v84[6] = *((_QWORD *)v76 + 6);
        v86 = *((_QWORD *)v76 + 7);
        v84[7] = v86;
        if (v86)
        {
          v87 = (unint64_t *)(v86 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v89 = v162[0];
        *v84 = 0;
        v84[1] = 0;
        v84[2] = (uint64_t)v89;
        *(_QWORD *)v82 = v84;
        if (*(_QWORD *)v173[0])
        {
          v173[0] = *(void **)v173[0];
          v85 = *(uint64_t **)v82;
        }
        sub_2231A9A8C((uint64_t *)v173[1], v85);
        ++v174;
        v83 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
        if (v83)
        {
          do
          {
LABEL_110:
            v90 = v83;
            v83 = *(unsigned __int8 **)v83;
          }
          while (v83);
          goto LABEL_100;
        }
      }
      do
      {
        v90 = (unsigned __int8 *)*((_QWORD *)v76 + 2);
        v91 = *(_QWORD *)v90 == (_QWORD)v76;
        v76 = v90;
      }
      while (!v91);
LABEL_100:
      v76 = v90;
    }
    while (v90 != v75);
  }
  sub_22342B8A8((uint64_t)v173, a4, v162);
  v77 = operator new(0x30uLL);
  v77[1] = 0;
  v77[2] = 0;
  v78 = v162[1];
  v77[3] = v162[0];
  *v77 = &off_24EC36E80;
  v77[4] = v78;
  v79 = (char *)(v77 + 4);
  v80 = v163.i64[0];
  v77[5] = v163.i64[0];
  if (v80)
  {
    v78[2] = v79;
    v162[0] = &v162[1];
    v162[1] = 0;
    v163.i64[0] = 0;
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
    *(_QWORD *)&v170 = v77 + 3;
    *((_QWORD *)&v170 + 1) = v77;
    if (!v81)
      goto LABEL_120;
  }
  else
  {
    v77[3] = v79;
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
    *(_QWORD *)&v170 = v77 + 3;
    *((_QWORD *)&v170 + 1) = v77;
    if (!v81)
      goto LABEL_120;
  }
  v92 = (unint64_t *)&v81->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
LABEL_120:
  sub_2231F5848((uint64_t)v162, (_QWORD *)v162[1]);
  sub_2231F5848((uint64_t)v173, (_QWORD *)v173[1]);
LABEL_121:
  if ((_QWORD)v171 && *(_BYTE *)(a4 + 2512) && *(_BYTE *)(a4 + 2504))
  {
    v94 = sub_22342BBF8((unsigned __int8 **)(a4 + 2368), (uint64_t **)v173);
    v94.n128_u64[0] = *(_QWORD *)(a1 + 36);
    v94.n128_u32[2] = *(_DWORD *)(a1 + 44);
    v95.i64[0] = *(_QWORD *)(a1 + 52);
    v95.i32[2] = *(_DWORD *)(a1 + 60);
    v96.i64[0] = *(_QWORD *)(a1 + 84);
    v96.i32[2] = *(_DWORD *)(a1 + 92);
    *(_QWORD *)&v97 = vzip1q_s32((int32x4_t)v94, v95).u64[0];
    v98 = (int8x16_t)vnegq_f32(v96);
    v99.i32[0] = *(_DWORD *)(a1 + 76);
    v100 = (int8x16_t)vtrn2q_s32((int32x4_t)v94, v95);
    v100.i32[2] = HIDWORD(*(_QWORD *)(a1 + 68));
    v101 = (int8x16_t)vzip2q_s32((int32x4_t)v94, v95);
    v102 = (int32x4_t)v101;
    v102.i32[2] = v99.i32[0];
    v103 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v97, *(float *)v98.i32), *(float32x2_t *)v100.i8, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v101.i8, v96, 2);
    v104 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 68), *(float32x2_t *)v98.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 68), 1), *(float32x2_t *)v96.f32, 1);
    v96.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
    *((_QWORD *)&v97 + 1) = *(_QWORD *)(a1 + 68);
    v98.i32[3] = 0;
    v98.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v100, 0).i32[3];
    *(uint64_t *)((char *)v98.i64 + 4) = vextq_s8(v100, v101, 4uLL).u64[0];
    v102.i64[1] = vdupq_laneq_s32(v102, 2).u32[0];
    v163 = v98;
    v164 = v102;
    *(_OWORD *)v162 = v97;
    v165 = v103;
    v166 = vmla_f32(v104, *(float32x2_t *)v96.f32, v99).u32[0];
    v167 = 1065353216;
    sub_22344D7F0((float32x2_t *)v173, (float32x2_t *)v162);
    v105 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v105 + 1) = 0;
    *((_QWORD *)v105 + 2) = 0;
    v106 = v173[1];
    *((void **)v105 + 3) = v173[0];
    *(_QWORD *)v105 = &off_24EC36ED0;
    *((_QWORD *)v105 + 4) = v106;
    v107 = v105 + 32;
    v108 = v174;
    *((_QWORD *)v105 + 5) = v174;
    if (v108)
    {
      v106[2] = v107;
      v173[0] = &v173[1];
      v173[1] = 0;
      v174 = 0;
    }
    else
    {
      *((_QWORD *)v105 + 3) = v107;
    }
    v109 = __p;
    *((_QWORD *)v105 + 7) = *((_QWORD *)&__p + 1);
    v110 = v105 + 56;
    *((_QWORD *)v105 + 6) = v109;
    v111 = v176;
    *((_QWORD *)v105 + 8) = v176;
    if (v111)
    {
      *(_QWORD *)(*((_QWORD *)&v109 + 1) + 16) = v110;
      *(_QWORD *)&__p = (char *)&__p + 8;
      *((_QWORD *)&__p + 1) = 0;
      v176 = 0;
    }
    else
    {
      *((_QWORD *)v105 + 6) = v110;
    }
    v112 = v178;
    *(_OWORD *)(v105 + 72) = v177;
    *(_OWORD *)(v105 + 88) = v112;
    v113 = v180;
    *(_OWORD *)(v105 + 104) = v179;
    *(_OWORD *)(v105 + 120) = v113;
    *(_OWORD *)(v105 + 136) = v181;
    v105[152] = v182;
    v114 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    *(_QWORD *)&v171 = v105 + 24;
    *((_QWORD *)&v171 + 1) = v105;
    if (v114)
    {
      v115 = (unint64_t *)&v114->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    sub_2233C8E54((uint64_t)&__p, *((_QWORD **)&__p + 1));
    sub_2233C8E54((uint64_t)v173, (_QWORD *)v173[1]);
  }
LABEL_138:
  v117 = *(uint64_t **)a1;
  v118 = v168;
  v168 = 0uLL;
  v144 = v118;
  v145 = v169;
  v169 = 0uLL;
  v119 = v170;
  v170 = 0uLL;
  v146 = v119;
  v147 = v171;
  v171 = 0uLL;
  sub_223427D88((uint64_t)v117, (uint64_t *)&v144);
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  sub_223421740(a1);
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
}

void sub_2234226A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  sub_223422A08((uint64_t)&a63);
  sub_223422A40(&a53);
  sub_22340EC98(v63);
  _Unwind_Resume(a1);
}

uint64_t sub_2234227AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_223261304(a1, a2);
  v4[6] = 0;
  v4[5] = v4 + 6;
  v4[7] = 0;
  sub_223426140(v4 + 5, *(unsigned __int8 **)(a2 + 40), (unsigned __int8 *)(a2 + 48));
  sub_2232617A8((_QWORD *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  sub_2232619D8((_QWORD *)(a1 + 96), (uint64_t *)(a2 + 96));
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

void sub_22342283C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v5 = v3;
  v6 = (char *)*v3;
  if (v6)
  {
    v7 = *(char **)(v1 + 72);
    v8 = v6;
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        if (v9)
        {
          *((_QWORD *)v7 - 2) = v9;
          operator delete(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(v1 + 72) = v6;
    operator delete(v8);
  }
  sub_2231F5848(v2, *(_QWORD **)(v1 + 48));
  v10 = *(_QWORD **)(v1 + 16);
  while (v10)
  {
    v12 = v10;
    v10 = (_QWORD *)*v10;
    v13 = (std::__shared_weak_count *)v12[5];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    operator delete(v12);
  }
  v11 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v11)
    operator delete(v11);
  _Unwind_Resume(a1);
}

void **sub_223422914(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_15;
  do
  {
    if (!*(v3 - 8))
      goto LABEL_10;
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *((unsigned int *)v3 - 36);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, char *))off_24EC36D10[v8])(&v10, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *((unsigned int *)v3 - 36);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *((_DWORD *)v3 - 36) = -1;
    v3 -= 192;
  }
  while (v3 != v2);
  v4 = *a1;
LABEL_15:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

uint64_t sub_223422A08(uint64_t a1)
{
  sub_2233C8E54(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_2233C8E54(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_223422A40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_223422B68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v3 = *a1;
  v4 = a2[1];
  v28 = *a2;
  v29 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[3];
  v30 = a2[2];
  v31 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a2[5];
  v32 = a2[4];
  v33 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a2[7];
  v34 = a2[6];
  v35 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_223427D88(v3, &v28);
  v16 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v29;
  if (!v29)
    goto LABEL_32;
  v26 = (unint64_t *)&v29->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    sub_223421740((uint64_t)a1);
  }
  else
  {
LABEL_32:
    sub_223421740((uint64_t)a1);
  }
}

void sub_223422D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_223422D2C(uint64_t *a1@<X0>, float32x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_mutex_base *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p;
  void *v44;
  _OWORD v45[4];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v6 = *a1;
  v7 = (std::__shared_mutex_base *)(*a1 + 64);
  std::__shared_mutex_base::lock_shared(v7);
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v8 = *(_QWORD **)v6;
  if (*(_QWORD *)v6)
  {
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_QWORD *)&v46 = v8;
    *((_QWORD *)&v46 + 1) = v9;
  }
  std::__shared_mutex_base::unlock_shared(v7);
  if (!v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 169, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v12 = *(float32x4_t *)((char *)a1 + 36);
  v13 = *(float32x4_t *)((char *)a1 + 52);
  v14 = *(float32x4_t *)((char *)a1 + 68);
  v15 = *(float32x4_t *)((char *)a1 + 84);
  v16 = *(float32x4_t *)a2[6].f32;
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v13, a2[2], 1), v14, *(float32x4_t *)a2[2].f32, 2), v15, *(float32x4_t *)a2[2].f32, 3);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v13, a2[4], 1), v14, *(float32x4_t *)a2[4].f32, 2), v15, *(float32x4_t *)a2[4].f32, 3);
  v45[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)a2->f32)), v13, *a2, 1), v14, *(float32x4_t *)a2->f32, 2), v15, *(float32x4_t *)a2->f32, 3);
  v45[1] = v17;
  v45[2] = v18;
  v45[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v16.f32[0]), v13, *(float32x2_t *)v16.f32, 1), v14, v16, 2), v15, v16, 3);
  sub_2233B7164(v8, (uint64_t)v45, &__p);
  v19 = (unsigned __int8 *)__p;
  if (__p == v44)
  {
    *a3 = 0;
    a3[1] = 0;
    v30 = __p;
    if (!__p)
      goto LABEL_22;
    goto LABEL_21;
  }
  v22 = v8[6];
  v21 = v8 + 6;
  v20 = v22;
  if (!v22)
    goto LABEL_15;
  while (1)
  {
    while (1)
    {
      v23 = (uint64_t *)v20;
      v24 = (unsigned __int8 *)(v20 + 32);
      if (((char)sub_22319835C(v19, (unsigned __int8 *)(v20 + 32)) & 0x80000000) == 0)
        break;
      v20 = *v23;
      v21 = v23;
      if (!*v23)
        goto LABEL_15;
    }
    if (((char)sub_22319835C(v24, v19) & 0x80000000) == 0)
      break;
    v20 = v23[1];
    v21 = v23 + 1;
    if (!v20)
      goto LABEL_15;
  }
  v25 = *v21;
  if (!*v21)
LABEL_15:
    sub_223198218("map::at:  key not found");
  v27 = *(_QWORD *)(v25 + 48);
  v26 = *(_QWORD *)(v25 + 56);
  *a3 = v27;
  a3[1] = v26;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = __p;
  if (__p)
  {
LABEL_21:
    v44 = v30;
    operator delete(v30);
  }
LABEL_22:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_223423014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223423028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223423040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  sub_223422A40(&a21);
  _Unwind_Resume(a1);
}

void sub_223423068(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  std::__shared_mutex_base *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int v22;
  __int128 v23;
  int8x16_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t *v31;
  uint64_t *v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t v61;
  int8x16_t v62;

  v6 = *(uint64_t **)a1;
  v7 = (std::__shared_mutex_base *)(*(_QWORD *)a1 + 64);
  std::__shared_mutex_base::lock_shared(v7);
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v8 = *v6;
  if (*v6)
  {
    v9 = v6[1];
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *(_QWORD *)&v55 = v8;
    *((_QWORD *)&v55 + 1) = v9;
  }
  v12 = (uint64_t *)v6[2];
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v6[3];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    *(_QWORD *)&v56 = v12;
    *((_QWORD *)&v56 + 1) = v13;
  }
  else
  {
    v13 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v7);
  if (!v8
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 182, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !v12&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 183, (uint64_t)"state.mesh_state", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v22 = *(_DWORD *)(a2 + 28);
  if ((v22 & 2) != 0)
  {
    if ((v22 & 1) == 0)
    {
      sub_2233CADDC(v12, a2, &v59);
      v25 = v60;
      v26 = v59;
      goto LABEL_21;
    }
    v27 = *(_OWORD *)(a1 + 52);
    v59 = *(_OWORD *)(a1 + 36);
    v60 = v27;
    v28 = *(int8x16_t *)(a1 + 84);
    v61 = *(float32x4_t *)(a1 + 68);
    v62 = v28;
    sub_2233C90C8(v8, a2, (uint64_t)&v59, (uint64_t *)&v53, v61, v28, v16, v17, v18, v19, v20, v21);
    sub_2233CADDC(v12, a2, &v59);
    v31 = (uint64_t *)v53;
    v32 = (uint64_t *)v59;
    if ((_QWORD)v53 == *((_QWORD *)&v53 + 1))
    {
      if ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
        goto LABEL_28;
    }
    else
    {
      if ((_QWORD)v59 != *((_QWORD *)&v59 + 1))
      {
        v29.i64[0] = *(_QWORD *)v53;
        v29.i32[2] = *(_DWORD *)(v53 + 8);
        v30.i64[0] = *(_QWORD *)v59;
        v30.i32[2] = *(_DWORD *)(v59 + 8);
        v33 = (int8x16_t)vsubq_f32(v29, v30);
        v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1);
        v35 = (float32x2_t)vextq_s8(v33, v33, 8uLL).u64[0];
        v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), v34, *(float32x2_t *)v33.i8, 1), v35, v35);
        if (sqrtf(v36.f32[0]) <= 0.1)
        {
          v37 = (uint64_t *)(v53 + 12);
          v34.i32[0] = *(_DWORD *)(v53 + 20);
          v36.i32[0] = *(_DWORD *)(v59 + 20);
          if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v53 + 12), *(float32x2_t *)(v59 + 12)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v59 + 12), 1), *(float32x2_t *)(v53 + 12), 1), v36, v34).f32[0] >= 0.86602)
          {
            v38 = (char *)operator new(0x1CuLL);
            v39 = v38 + 28;
            v40 = *v31;
            *((_DWORD *)v38 + 2) = *((_DWORD *)v31 + 2);
            *(_QWORD *)v38 = v40;
            v41 = *v37;
            *((_DWORD *)v38 + 5) = *((_DWORD *)v31 + 5);
            *(_QWORD *)(v38 + 12) = v41;
            v42 = *((_WORD *)v31 + 12);
LABEL_29:
            *((_WORD *)v38 + 12) = v42;
            a3[1] = v39;
            a3[2] = v39;
            *a3 = v38;
LABEL_32:
            *((_QWORD *)&v59 + 1) = v32;
            operator delete(v32);
            v31 = (uint64_t *)v53;
LABEL_33:
            if (v31)
            {
              *((_QWORD *)&v53 + 1) = v31;
              operator delete(v31);
            }
            goto LABEL_35;
          }
        }
LABEL_28:
        v38 = (char *)operator new(0x1CuLL);
        v39 = v38 + 28;
        v43 = *v32;
        *((_DWORD *)v38 + 2) = *((_DWORD *)v32 + 2);
        *(_QWORD *)v38 = v43;
        v44 = *(uint64_t *)((char *)v32 + 12);
        *((_DWORD *)v38 + 5) = *((_DWORD *)v32 + 5);
        *(_QWORD *)(v38 + 12) = v44;
        v42 = *((_WORD *)v32 + 12);
        goto LABEL_29;
      }
      v45 = (char *)operator new(0x1CuLL);
      v46 = *v31;
      *((_DWORD *)v45 + 2) = *((_DWORD *)v31 + 2);
      *(_QWORD *)v45 = v46;
      v47 = *(uint64_t *)((char *)v31 + 12);
      *((_DWORD *)v45 + 5) = *((_DWORD *)v31 + 5);
      *(_QWORD *)(v45 + 12) = v47;
      *((_WORD *)v45 + 12) = *((_WORD *)v31 + 12);
      a3[1] = v45 + 28;
      a3[2] = v45 + 28;
      *a3 = v45;
    }
    if (!v32)
      goto LABEL_33;
    goto LABEL_32;
  }
  if ((v22 & 1) != 0)
  {
    v23 = *(_OWORD *)(a1 + 52);
    v59 = *(_OWORD *)(a1 + 36);
    v60 = v23;
    v24 = *(int8x16_t *)(a1 + 84);
    v61 = *(float32x4_t *)(a1 + 68);
    v62 = v24;
    sub_2233C90C8(v8, a2, (uint64_t)&v59, (uint64_t *)&v53, v61, v24, v16, v17, v18, v19, v20, v21);
    v25 = v54;
    v26 = v53;
LABEL_21:
    *(_OWORD *)a3 = v26;
    a3[2] = v25;
  }
LABEL_35:
  if (v13)
  {
    v48 = (unint64_t *)&v13->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_223423444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v23;
  void *v25;

  operator delete(v23);
  if (__p)
  {
    operator delete(__p);
    v25 = *(void **)v22;
    if (*(_QWORD *)v22)
    {
LABEL_6:
      *(_QWORD *)(v22 + 8) = v25;
      operator delete(v25);
      sub_223422A40(&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v25 = *(void **)v22;
    if (*(_QWORD *)v22)
      goto LABEL_6;
  }
  sub_223422A40(&a13);
  _Unwind_Resume(a1);
}

void sub_2234234D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2234234E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2234234FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223423510(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint32x2_t **a4)
{
  float32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint32x2_t *v11;
  uint64_t (**v12)();
  uint64_t *v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  std::mutex *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type v73;
  std::string::size_type v74;
  int v75;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::mutex *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  std::mutex *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  void **v124;
  void *v125;
  void *v126;
  int v127;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  float32x4_t v133;
  uint32x2_t *v134;
  void *__p[2];
  __int128 v137;
  int v138;
  std::string v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  __int128 v155;
  _BYTE *v156;
  __int128 v157;
  uint64_t (**v158)();
  __int128 v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  char v162;
  std::string v163;
  _BYTE v164[40];
  void *v165;
  char v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v164[8] = 0;
  *(_QWORD *)&v164[16] = 0;
  *(_QWORD *)v164 = &v164[8];
  sub_2245314F4(v164, __p);
  v155 = *(_OWORD *)__p;
  sub_22323DF84((uint64_t)v164, *(char **)&v164[8]);
  v11 = *a4;
  v134 = a4[1];
  if (*a4 != v134)
  {
    v12 = 0;
    *(float32x2_t *)v7.f32 = a2[6];
    v13 = (uint64_t *)((unint64_t)v164 | 0xC);
    v7.i32[2] = a2[7].i32[0];
    v133 = v7;
    while (1)
    {
      v158 = v12;
      *(_QWORD *)&v159 = v11;
      *(float32x2_t *)v7.f32 = vadd_f32(vmul_f32(a3[4], vcvt_f32_u32(*v11)), a3[5]);
      v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 1);
      v14.f32[0] = 1.0
                 / sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), v14, *(float32x2_t *)v7.f32, 1).f32[0]+ 1.0);
      v15 = vmul_f32(*(float32x2_t *)v7.f32, v14);
      v16 = vmul_lane_f32(v14, *(float32x2_t *)v7.f32, 1);
      v7.i32[2] = 1.0;
      v17 = (int8x16_t)vmulq_n_f32(v7, v14.f32[0]);
      v8.i32[0] = a2[1].i32[0];
      v18 = a2[2];
      v9.i32[0] = a2[3].i32[0];
      v19 = a2[4];
      v10.i32[0] = a2[5].i32[0];
      *(float32x2_t *)v20.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a2, *(float *)v17.i32), v18, *(float32x2_t *)v17.i8, 1), v19, (float32x4_t)v17, 2);
      v21 = vmla_f32(vmla_lane_f32(vmul_f32(v8, *(float32x2_t *)v17.i8), v9, *(float32x2_t *)v17.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v10);
      *(float32x2_t *)v17.i8 = vmla_lane_f32(vmul_f32(vmla_f32(vmla_f32(vmul_f32(v15, *a2), v18, v16), v19, v14), *(float32x2_t *)v20.f32), vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(v15, *a2, 1), v16, v18, 1), v14, v19, 1), *(float32x2_t *)v20.f32, 1);
      *(float32x2_t *)&v20.u32[2] = v21;
      *(_DWORD *)&v164[8] = v133.i32[2];
      v22 = vmulq_n_f32(v20, 1.0/ sqrtf(vmla_f32(*(float32x2_t *)v17.i8, v21, vmla_f32(vmla_f32(vmul_f32(v15, v8), v9, v16), v10, v14)).f32[0]));
      *(_DWORD *)&v164[20] = v22.i32[2];
      *(_QWORD *)v164 = v133.i64[0];
      *(_QWORD *)&v164[12] = v22.i64[0];
      *(_QWORD *)&v164[24] = 0x341200000;
      __p[1] = 0;
      *(_QWORD *)&v137 = 0;
      __p[0] = &__p[1];
      sub_2245314F4(__p, &v160);
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v160;
      sub_22323DF84((uint64_t)__p, (char *)__p[1]);
      HIBYTE(v161) = 7;
      strcpy((char *)&v160, "Request");
      __p[1] = 0;
      *(_QWORD *)&v137 = 0;
      __p[0] = &__p[1];
      sub_2245314F4(__p, &v163);
      v157 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)__p, (char *)__p[1]);
      BYTE7(v137) = 6;
      strcpy((char *)__p, "origin");
      v156 = v164;
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v163);
      sub_22342669C((uint64_t)&v157, v163.__r_.__value_.__l.__data_, (uint64_t *)&v156);
      size = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
      if (v163.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
          break;
      }
      if (SBYTE7(v137) < 0)
        goto LABEL_9;
LABEL_10:
      BYTE7(v137) = 9;
      strcpy((char *)__p, "direction");
      v156 = (_BYTE *)((unint64_t)v164 | 0xC);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v163);
      sub_22342669C((uint64_t)&v157, v163.__r_.__value_.__l.__data_, (uint64_t *)&v156);
      v26 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
      if (v163.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if ((SBYTE7(v137) & 0x80000000) == 0)
            goto LABEL_16;
LABEL_15:
          operator delete(__p[0]);
          goto LABEL_16;
        }
      }
      if (SBYTE7(v137) < 0)
        goto LABEL_15;
LABEL_16:
      sub_224527BAC((uint64_t)&v160, (CFStringRef *)__p);
      sub_223427380((uint64_t)&v139, __p[0], (void **)&v157);
      v29 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_20;
      v30 = (unint64_t *)((char *)__p[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (!*((_QWORD *)&v157 + 1))
          goto LABEL_30;
      }
      else
      {
LABEL_20:
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (!*((_QWORD *)&v157 + 1))
          goto LABEL_30;
      }
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
LABEL_30:
      if (SHIBYTE(v161) < 0)
        operator delete((void *)v160);
      BYTE7(v137) = 11;
      strcpy((char *)__p, "ReplyPlanes");
      v150 = *(_QWORD *)v164;
      v151 = *(_DWORD *)&v164[8];
      v152 = *v13;
      v153 = *(_DWORD *)(((unint64_t)v164 | 0xC) + 8);
      v154 = *(_QWORD *)&v164[24];
      sub_223424AF0((uint64_t)&v163, a1, (uint64_t)&v150, 1);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v160);
      sub_223427380((uint64_t)&v139, (void *)v160, (void **)&v163.__r_.__value_.__l.__data_);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
      if (!*((_QWORD *)&v160 + 1))
        goto LABEL_36;
      v36 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        v38 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_42;
      }
      else
      {
LABEL_36:
        v38 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_42;
      }
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
LABEL_42:
      if (SBYTE7(v137) < 0)
        operator delete(__p[0]);
      BYTE7(v137) = 11;
      strcpy((char *)__p, "ReplyMeshes");
      v145 = *(_QWORD *)v164;
      v146 = *(_DWORD *)&v164[8];
      v147 = *v13;
      v148 = *(_DWORD *)(((unint64_t)v164 | 0xC) + 8);
      v149 = *(_QWORD *)&v164[24];
      sub_223424AF0((uint64_t)&v163, a1, (uint64_t)&v145, 2);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v160);
      sub_223427380((uint64_t)&v139, (void *)v160, (void **)&v163.__r_.__value_.__l.__data_);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
      if (!*((_QWORD *)&v160 + 1))
        goto LABEL_48;
      v42 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v44 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_54;
      }
      else
      {
LABEL_48:
        v44 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_54;
      }
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
LABEL_54:
      if (SBYTE7(v137) < 0)
        operator delete(__p[0]);
      BYTE7(v137) = 8;
      strcpy((char *)__p, "ReplyAll");
      v140 = *(_QWORD *)v164;
      v141 = *(_DWORD *)&v164[8];
      v142 = *v13;
      v143 = *(_DWORD *)(((unint64_t)v164 | 0xC) + 8);
      v144 = *(_QWORD *)&v164[24];
      sub_223424AF0((uint64_t)&v163, a1, (uint64_t)&v140, 3);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v160);
      sub_223427380((uint64_t)&v139, (void *)v160, (void **)&v163.__r_.__value_.__l.__data_);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
      if (!*((_QWORD *)&v160 + 1))
        goto LABEL_60;
      v48 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v50 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_66;
      }
      else
      {
LABEL_60:
        v50 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
        if (!v163.__r_.__value_.__l.__size_)
          goto LABEL_66;
      }
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
LABEL_66:
      if (SBYTE7(v137) < 0)
        operator delete(__p[0]);
      sub_223425184((unint64_t *)&v158);
      sub_224527BAC((uint64_t)__p, (CFStringRef *)&v160);
      sub_223427380((uint64_t)&v155, (void *)v160, (void **)&v139.__r_.__value_.__l.__data_);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
      if (!*((_QWORD *)&v160 + 1))
        goto LABEL_72;
      v54 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        if ((SBYTE7(v137) & 0x80000000) == 0)
        {
LABEL_73:
          v56 = (std::__shared_weak_count *)v139.__r_.__value_.__l.__size_;
          if (v139.__r_.__value_.__l.__size_)
            goto LABEL_77;
          goto LABEL_3;
        }
      }
      else
      {
LABEL_72:
        if ((SBYTE7(v137) & 0x80000000) == 0)
          goto LABEL_73;
      }
      operator delete(__p[0]);
      v56 = (std::__shared_weak_count *)v139.__r_.__value_.__l.__size_;
      if (v139.__r_.__value_.__l.__size_)
      {
LABEL_77:
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
LABEL_3:
      ++v11;
      v12 = (uint64_t (**)())((char *)v12 + 1);
      if (v11 == v134)
        goto LABEL_81;
    }
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((SBYTE7(v137) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    operator delete(__p[0]);
    goto LABEL_10;
  }
LABEL_81:
  *(_QWORD *)v164 = "cv3d.recon.";
  *(_QWORD *)&v164[8] = 11;
  *(_QWORD *)&v164[16] = "RaycastEval.CameraModel";
  *(_QWORD *)&v164[24] = 23;
  sub_2231A9820((uint64_t)v164, (uint64_t)&v164[32], 0, 0, &v163);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v59 = sub_2241471F8();
    v60 = v59[2];
    if (!v60)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v60 = v59[2];
    }
    v61 = *(_QWORD *)(v60 + 64);
    v62 = (std::mutex *)(v61 + 32);
    std::mutex::lock((std::mutex *)(v61 + 32));
    v64 = *(_QWORD *)(v61 + 96);
    v63 = *(_QWORD *)(v61 + 104);
    std::mutex::unlock(v62);
    if (v64 != v63)
    {
      sub_2241471F8();
      v65 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65))
      {
        memset(v164, 0, 32);
        *(_DWORD *)&v164[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65))
        {
          v158 = (uint64_t (**)())(uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v159 = 2;
          v66 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65))
          {
            v67 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 56))(v65);
            LOBYTE(__p[0]) = 0;
            BYTE8(v137) = 0;
            sub_223427540((uint64_t)a3, (__int128 *)__p, (__int128 *)&v158, &v160);
            sub_2231AA5A4((uint64_t)v66, v67, (uint64_t)&v160);
            v68 = v161;
            if (v161)
            {
              v69 = (unint64_t *)&v161->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            if (BYTE8(v137) && SBYTE7(v137) < 0)
              operator delete(__p[0]);
          }
        }
        kdebug_trace();
      }
    }
  }
  memset(v164, 0, 32);
  *(_DWORD *)&v164[32] = 728325624;
  kdebug_trace();
  v71 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v71 = v163.__r_.__value_.__l.__size_;
  if (v71 >= 0x11)
  {
    v72 = &v163;
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v72 = (std::string *)v163.__r_.__value_.__r.__words[0];
    v73 = v72->__r_.__value_.__r.__words[0];
    v74 = v72->__r_.__value_.__l.__size_;
    v75 = v72->__r_.__value_.__s.__data_[16];
    if (v73 == 0x6365722E64337663 && v74 == 0x73746174532E6E6FLL && v75 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v78 = sub_2241471F8();
    v79 = v78[2];
    if (!v79)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v79 = v78[2];
    }
    v80 = *(_QWORD *)(v79 + 64);
    v81 = (std::mutex *)(v80 + 32);
    std::mutex::lock((std::mutex *)(v80 + 32));
    v83 = *(_QWORD *)(v80 + 96);
    v82 = *(_QWORD *)(v80 + 104);
    std::mutex::unlock(v81);
    if (v83 != v82)
    {
      *(_QWORD *)v164 = "cv3d.recon.";
      *(_QWORD *)&v164[8] = 11;
      *(_QWORD *)&v164[16] = "RaycastEval.CameraToWorld";
      *(_QWORD *)&v164[24] = 25;
      sub_2231A9820((uint64_t)v164, (uint64_t)&v164[32], 0, 0, &v139);
      sub_2241471F8();
      v84 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
      {
        *(_OWORD *)__p = 0u;
        v137 = 0u;
        v138 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
        {
          *(_QWORD *)&v157 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v157 + 1) = 2;
          v85 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
          {
            sub_224141CD8((uint64_t *)&v160, a2, flt_22469B46C);
            v86 = v160;
            v87 = operator new();
            *(_BYTE *)v87 = 0;
            *(_DWORD *)(v87 + 128) = -1;
            v88 = *(unsigned int *)(v86 + 128);
            if ((_DWORD)v88 != -1)
            {
              ((void (*)(uint64_t (***)(), uint64_t, uint64_t))off_24EC6BD10[v88])(&v158, v87, v86);
              *(_DWORD *)(v87 + 128) = v88;
            }
            *(_BYTE *)(v87 + 136) = *(_BYTE *)(v86 + 136);
            *(_QWORD *)v164 = v87;
            v164[8] = 0;
            v164[32] = 0;
            LOBYTE(v165) = 0;
            v167 = 0;
            v89 = v160;
            *(_QWORD *)&v160 = 0;
            if (v89)
              MEMORY[0x227684CE8](v89, 0x1000C4072FAA15ELL);
            LOBYTE(v160) = 0;
            v162 = 0;
            sub_2232A3848((uint64_t)v164, &v160, &v157, &v163);
            if (v162 && SHIBYTE(v161) < 0)
              operator delete((void *)v160);
            if (v167 && v166 < 0)
              operator delete(v165);
            if (v164[32] && (v164[31] & 0x80000000) != 0)
              operator delete(*(void **)&v164[8]);
            v90 = *(_QWORD *)v164;
            *(_QWORD *)v164 = 0;
            if (v90)
              MEMORY[0x227684CE8](v90, 0x1000C4072FAA15ELL);
            v91 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 56))(v84);
            v92 = *v91;
            v93 = (std::__shared_weak_count *)v91[1];
            if (v93)
            {
              v94 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldxr(v94);
              while (__stxr(v95 + 1, v94));
            }
            v96 = *(_OWORD *)&v163.__r_.__value_.__r.__words[1];
            v158 = &off_24EC6A3B8;
            v159 = *(_OWORD *)&v163.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v163.__r_.__value_.__r.__words[1] = 0uLL;
            *(_QWORD *)v164 = v92;
            *(_QWORD *)&v164[8] = v93;
            if (v93)
            {
              v97 = (unint64_t *)&v93->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }
            *(_QWORD *)&v164[16] = &off_24EC6A3B8;
            *(_OWORD *)&v164[24] = v96;
            if (*((_QWORD *)&v96 + 1))
            {
              v99 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v85 + 16))(v85, v164);
            v101 = *(std::__shared_weak_count **)&v164[32];
            if (*(_QWORD *)&v164[32])
            {
              v102 = (unint64_t *)(*(_QWORD *)&v164[32] + 8);
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            v104 = *(std::__shared_weak_count **)&v164[8];
            if (*(_QWORD *)&v164[8])
            {
              v105 = (unint64_t *)(*(_QWORD *)&v164[8] + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v107 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
            if (*((_QWORD *)&v159 + 1))
            {
              v108 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            if (v93)
            {
              v110 = (unint64_t *)&v93->__shared_owners_;
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v112 = (std::__shared_weak_count *)v163.__r_.__value_.__r.__words[2];
            if (v163.__r_.__value_.__r.__words[2])
            {
              v113 = (unint64_t *)(v163.__r_.__value_.__r.__words[2] + 8);
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
    }
  }
  *(_QWORD *)v164 = "cv3d.recon.";
  *(_QWORD *)&v164[8] = 11;
  *(_QWORD *)&v164[16] = "RaycastEval.Raycasts";
  *(_QWORD *)&v164[24] = 20;
  sub_2231A9820((uint64_t)v164, (uint64_t)&v164[32], 0, 0, (std::string *)__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v115 = sub_2241471F8();
    v116 = v115[2];
    if (!v116)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v116 = v115[2];
    }
    v117 = *(_QWORD *)(v116 + 64);
    v118 = (std::mutex *)(v117 + 32);
    std::mutex::lock((std::mutex *)(v117 + 32));
    v120 = *(_QWORD *)(v117 + 96);
    v119 = *(_QWORD *)(v117 + 104);
    std::mutex::unlock(v118);
    if (v120 != v119)
    {
      sub_2241471F8();
      v121 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
      {
        memset(v164, 0, 32);
        *(_DWORD *)&v164[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
        {
          *(_QWORD *)&v160 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v160 + 1) = 2;
          v122 = sub_2241471F8();
          sub_2234277D4((uint64_t)v122, v121, (uint64_t)&v155, (uint64_t)&unk_2245C9EFE, &v160);
        }
        kdebug_trace();
      }
    }
  }
  memset(v164, 0, 32);
  *(_DWORD *)&v164[32] = 728325624;
  kdebug_trace();
  v123 = BYTE7(v137);
  if (SBYTE7(v137) < 0)
    v123 = (unint64_t)__p[1];
  if (v123 >= 0x11)
  {
    v124 = __p;
    if (SBYTE7(v137) < 0)
      v124 = (void **)__p[0];
    v125 = *v124;
    v126 = v124[1];
    v127 = *((unsigned __int8 *)v124 + 16);
    if (v125 == (void *)0x6365722E64337663 && v126 == (void *)0x73746174532E6E6FLL && v127 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SBYTE7(v137) < 0)
    operator delete(__p[0]);
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
}

void sub_223424798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;

  MEMORY[0x227684CE8](v50, 0x1000C4072FAA15ELL);
  v53 = *(_QWORD *)(v51 - 240);
  *(_QWORD *)(v51 - 240) = 0;
  if (v53)
    MEMORY[0x227684CE8](v53, 0x1000C4072FAA15ELL);
  sub_2231874DC((uint64_t)&a15);
  if (a29 < 0)
    operator delete(__p);
  sub_223167354((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_223424AF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  void *v8;
  std::__shared_weak_count *v9;
  CFDictionaryRef v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v20;
  std::__shared_weak_count *v21;
  CFStringRef v22;
  unint64_t *p_info;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  CFDictionaryRef v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  CFStringRef v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  float v52;
  _BYTE *v53;
  _BYTE *v54;
  void *key;
  std::__shared_weak_count *v56;
  __int128 __p;
  uint64_t v58;
  CFStringRef value[3];
  unsigned __int8 v60;

  *(_DWORD *)(a3 + 28) = a4;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  sub_223423068(a2, a3, &v53);
  v52 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  *((_QWORD *)&__p + 1) = 0;
  v58 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  sub_2245314F4(&__p, value);
  *(_OWORD *)a1 = *(_OWORD *)value;
  sub_22323DF84((uint64_t)&__p, *((char **)&__p + 1));
  HIBYTE(v58) = 7;
  strcpy((char *)&__p, "success");
  v60 = v53 != v54;
  sub_224527BAC((uint64_t)&__p, (CFStringRef *)&key);
  v8 = key;
  v10 = *(CFDictionaryRef *)a1;
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v9)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    if (!v10)
      goto LABEL_8;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, v8))
    goto LABEL_8;
  sub_22452795C(&v60, (std::__shared_weak_count_vtbl **)value);
  v22 = value[0];
  v21 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    p_info = (unint64_t *)&value[1]->info;
    do
      v24 = __ldxr(p_info);
    while (__stxr(v24 + 1, p_info));
    do
      v25 = __ldaxr(p_info);
    while (__stlxr(v25 - 1, p_info));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v22)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  if (v22)
LABEL_31:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v8, value[0]);
LABEL_32:
  v26 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v27 = (unint64_t *)&value[1]->info;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_8:
  v14 = v56;
  if (v56)
  {
    v15 = (unint64_t *)&v56->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  if (SHIBYTE(v58) < 0)
LABEL_13:
    operator delete((void *)__p);
LABEL_14:
  HIBYTE(v58) = 12;
  strcpy((char *)&__p, "elapsed_time");
  sub_224527BAC((uint64_t)&__p, value);
  sub_223426BD4(a1, (void *)value[0], &v52);
  v17 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_18;
  v18 = (unint64_t *)&value[1]->info;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
LABEL_19:
      v20 = v53;
      if (v53 == v54)
        goto LABEL_20;
      goto LABEL_41;
    }
  }
  else
  {
LABEL_18:
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      goto LABEL_19;
  }
  operator delete((void *)__p);
  v20 = v53;
  if (v53 == v54)
  {
LABEL_20:
    if (!v20)
      return;
    goto LABEL_21;
  }
LABEL_41:
  HIBYTE(v58) = 12;
  strcpy((char *)&__p, "intersection");
  key = v20;
  sub_224527BAC((uint64_t)&__p, value);
  sub_22342669C(a1, (void *)value[0], (uint64_t *)&key);
  v29 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v30 = (unint64_t *)&value[1]->info;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (SHIBYTE(v58) < 0)
LABEL_46:
    operator delete((void *)__p);
LABEL_47:
  HIBYTE(v58) = 6;
  strcpy((char *)&__p, "normal");
  key = v20 + 12;
  sub_224527BAC((uint64_t)&__p, value);
  sub_22342669C(a1, (void *)value[0], (uint64_t *)&key);
  v32 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v33 = (unint64_t *)&value[1]->info;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (SHIBYTE(v58) < 0)
LABEL_52:
    operator delete((void *)__p);
LABEL_53:
  HIBYTE(v58) = 12;
  strcpy((char *)&__p, "surface_type");
  sub_224527BAC((uint64_t)&__p, (CFStringRef *)&key);
  v35 = key;
  v37 = *(CFDictionaryRef *)a1;
  v36 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v36)
    goto LABEL_58;
  v38 = (unint64_t *)&v36->__shared_owners_;
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 - 1, v38));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if (!v37)
      goto LABEL_60;
  }
  else
  {
LABEL_58:
    if (!v37)
      goto LABEL_60;
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)a1, v35))
  {
    v60 = v20[24];
    sub_22452736C(&v60, (CFNumberRef *)value);
    v45 = value[0];
    v44 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v46 = (unint64_t *)&value[1]->info;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v45)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v35, value[0]);
    v49 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v50 = (unint64_t *)&value[1]->info;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
LABEL_60:
  v41 = v56;
  if (!v56)
    goto LABEL_64;
  v42 = (unint64_t *)&v56->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
LABEL_65:
      v20 = v53;
      if (!v53)
        return;
LABEL_21:
      operator delete(v20);
      return;
    }
  }
  else
  {
LABEL_64:
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      goto LABEL_65;
  }
  operator delete((void *)__p);
  v20 = v53;
  if (v53)
    goto LABEL_21;
}

void sub_2234250DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  sub_223167354((uint64_t)&a22);
  sub_223167354((uint64_t)&a14);
  if (a21 < 0)
    operator delete(__p);
  sub_223167354(v22);
  if (a11)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_223425168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  sub_22323DF84((uint64_t)&a16, a17);
  if (!a11)
    JUMPOUT(0x223425160);
  JUMPOUT(0x22342515CLL);
}

uint64_t sub_223425184(unint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC36F40[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC36F28[v3])(v5, v2);
  return result;
}

void sub_223425270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223425288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2234252AC(uint64_t **a1)
{
  uint64_t *v1;
  std::__shared_mutex_base *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *a1;
  v2 = (std::__shared_mutex_base *)(*a1 + 8);
  std::__shared_mutex_base::lock_shared(v2);
  v3 = *v1;
  if (*v1)
  {
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v2);
  if (!v3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 299, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v7 = *(_QWORD *)(v3 + 56);
  if (!v4)
    return v7;
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v7;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v7;
}

void sub_2234253BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2234253D4(uint64_t **a1)
{
  uint64_t *v1;
  std::__shared_mutex_base *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *a1;
  v2 = (std::__shared_mutex_base *)(*a1 + 8);
  std::__shared_mutex_base::lock_shared(v2);
  v3 = *v1;
  if (*v1)
  {
    v4 = (std::__shared_weak_count *)v1[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v4 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v2);
  if (!v3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 305, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v7 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return v7;
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v7;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v7;
}

void sub_2234254E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_2234254FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::__shared_mutex_base *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  unsigned __int32 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  unsigned __int32 v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v4 = *(uint64_t **)a1;
  v5 = (std::__shared_mutex_base *)(*(_QWORD *)a1 + 64);
  std::__shared_mutex_base::lock_shared(v5);
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v6 = *v4;
  if (*v4)
  {
    v7 = v4[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_QWORD *)&v40 = v6;
    *((_QWORD *)&v40 + 1) = v7;
  }
  v10 = v4[6];
  if (v10)
  {
    v11 = (std::__shared_weak_count *)v4[7];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    *(_QWORD *)&v43 = v10;
    *((_QWORD *)&v43 + 1) = v11;
  }
  else
  {
    v11 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v5);
  if (!v6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 318, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !v10&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 319, (uint64_t)"state.room_boundary_state", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v14.i64[0] = *(_QWORD *)(a1 + 36);
  v14.i32[2] = *(_DWORD *)(a1 + 44);
  v15.i64[0] = *(_QWORD *)(a1 + 52);
  v15.i32[2] = *(_DWORD *)(a1 + 60);
  v16.i32[0] = *(_DWORD *)(a1 + 76);
  v17.i64[0] = *(_QWORD *)(a1 + 84);
  v17.i32[2] = *(_DWORD *)(a1 + 92);
  *(_QWORD *)&v19 = vzip1q_s32(v14, v15).u64[0];
  v20 = (int8x16_t)vnegq_f32(v17);
  v21 = (int8x16_t)vtrn2q_s32(v14, v15);
  v21.i32[2] = HIDWORD(*(_QWORD *)(a1 + 68));
  v22 = vzip2q_s32(v14, v15);
  *(float32x2_t *)v18.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v19, *(float *)v20.i32), *(float32x2_t *)v21.i8, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v22.i8, v17, 2);
  v22.i32[2] = v16.i32[0];
  v23 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a1 + 68), *(float32x2_t *)v20.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + 68), 1), *(float32x2_t *)v17.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), *(float32x2_t *)v16.i8).u32[0];
  *((_QWORD *)&v19 + 1) = *(_QWORD *)(a1 + 68);
  HIDWORD(v24) = 0;
  LODWORD(v24) = vdupq_lane_s32(*(int32x2_t *)&v21, 0).i32[3];
  *(_QWORD *)((char *)&v24 + 4) = vextq_s8(v21, (int8x16_t)v22, 4uLL).u64[0];
  v22.i64[1] = vdupq_laneq_s32(v22, 2).u32[0];
  v36[1] = v24;
  v36[2] = v22;
  v36[0] = v19;
  v37 = v18.i64[0];
  v38 = v23;
  v39 = 1065353216;
  sub_2233CFC2C(v10, v6, (float32x2_t *)v36, (float *)(a1 + 20), a2, v16, (int32x4_t)v17, *(float32x2_t *)v20.i8, v18);
  sub_22344C294(a2, v6, (float32x2_t *)v36);
  sub_22344FFF8(a2);
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_223425804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223425820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  if (*(_BYTE *)(v9 + 40))
  {
    v11 = *(void **)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 24) = v11;
      operator delete(v11);
    }
  }
  sub_223422A40((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22342584C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  std::__shared_mutex_base *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  v3 = (_QWORD *)*a1;
  v4 = (std::__shared_mutex_base *)(*a1 + 64);
  std::__shared_mutex_base::lock_shared(v4);
  v17 = 0u;
  v5 = (uint64_t *)v3[2];
  if (v5)
  {
    v6 = v3[3];
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *((_QWORD *)&v17 + 1) = v6;
  }
  v9 = (unsigned __int8 *)v3[6];
  if (v9)
  {
    v10 = (std::__shared_weak_count *)v3[7];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  if (!v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 332, (uint64_t)"state.mesh_state", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| !v9&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 333, (uint64_t)"state.room_boundary_state", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2233D63BC(v9, v5, a2);
  sub_223450C60((uint64_t)a2, (unsigned __int8 **)v5);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*((_QWORD *)&v17 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
}

void sub_223425A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  if (*(_BYTE *)(v9 + 40))
  {
    v11 = *(void **)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 24) = v11;
      operator delete(v11);
      sub_223422A40(&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_223425AD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  std::__shared_mutex_base *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v8 = *(uint64_t **)a1;
  v9 = (std::__shared_mutex_base *)(*(_QWORD *)a1 + 64);
  std::__shared_mutex_base::lock_shared(v9);
  v10 = *v8;
  if (*v8)
  {
    v11 = (std::__shared_weak_count *)v8[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v11 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v9);
  if (!v10
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 344, (uint64_t)"state.plane_state", 17, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2234135A8(a2, a3, v10, (int32x2_t *)(a1 + 36), a4);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_223425C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_223425C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_223425C3C(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  std::__shared_mutex_base *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (!a1[21]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 352, (uint64_t)"scene_renderer_", 15, (uint64_t)"Needs valid scene renderer to generate rendering!", 49, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (_QWORD *)*a1;
  v5 = (std::__shared_mutex_base *)(*a1 + 64);
  std::__shared_mutex_base::lock_shared(v5);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v6 = v4[2];
  if (v6)
  {
    v7 = v4[3];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_QWORD *)&v27 = v6;
    *((_QWORD *)&v27 + 1) = v7;
  }
  v10 = v4[4];
  if (v10)
  {
    v11 = v4[5];
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)&v28 = v10;
    *((_QWORD *)&v28 + 1) = v11;
  }
  std::__shared_mutex_base::unlock_shared(v5);
  sub_223454CB0(a1[21], (uint64_t)&v26, a2);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_223425E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

void sub_223425E50(_QWORD *a1@<X0>, unsigned __int32 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_mutex_base *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float32x4_t v13;
  unint64_t *v14;
  unint64_t v15;

  v7 = *a1;
  v8 = (std::__shared_mutex_base *)(*a1 + 64);
  std::__shared_mutex_base::lock_shared(v8);
  v9 = *(uint64_t **)(v7 + 16);
  if (v9)
  {
    v10 = *(std::__shared_weak_count **)(v7 + 24);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v8);
  if (!v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 362, (uint64_t)"state.mesh_state", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2233B4F98(v9, a2, a3, a4, v13);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_223425FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223425FD8(_QWORD *a1, unsigned __int32 *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_mutex_base *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = *a1;
  v6 = (std::__shared_mutex_base *)(*a1 + 64);
  std::__shared_mutex_base::lock_shared(v6);
  v7 = *(uint64_t **)(v5 + 16);
  if (v7)
  {
    v8 = *(std::__shared_weak_count **)(v5 + 24);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (!v7
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQuerySession.cpp", 370, (uint64_t)"state.mesh_state", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v15 = sub_2233B4C1C(v7, a2, a3, v11, v12, v13, v14);
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v15;
}

void sub_22342612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223422A40(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223426140(_QWORD *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  _QWORD **v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  BOOL v19;
  uint64_t v20;
  unsigned __int8 *v21[9];

  if (a2 != a3)
  {
    v21[7] = v3;
    v21[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_22341EF18(v7, v8, v21, &v20, v6 + 32);
      if (*result)
      {
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_13;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x40uLL);
        v12 = v11;
        *((_OWORD *)v11 + 2) = *((_OWORD *)v6 + 2);
        v11[6] = *((_QWORD *)v6 + 6);
        v13 = *((_QWORD *)v6 + 7);
        v11[7] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = v21[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v16;
        *v10 = v11;
        v17 = (_QWORD *)**v7;
        if (v17)
        {
          *v7 = v17;
          v12 = *v10;
        }
        result = sub_2231A9A8C(v7[1], v12);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_13:
            v18 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v18 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v19 = *(_QWORD *)v18 == (_QWORD)v6;
        v6 = v18;
      }
      while (!v19);
LABEL_3:
      v6 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

_QWORD *sub_223426270(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 6);
    if (v6 >= 0x155555555555556)
      sub_22316E078();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[192 * v6];
    sub_2234263D4((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_22342631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;

  v15 = (char *)*v13;
  if (*v13)
  {
    v16 = (char *)v13[1];
    v17 = *v13;
    if (v16 != v15)
    {
      do
      {
        if (*(v16 - 8))
        {
          v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 2);
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        v21 = *((unsigned int *)v16 - 36);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, char *))off_24EC36D10[v21])(&a13, v16 - 160);
        *((_DWORD *)v16 - 36) = -1;
        v16 -= 192;
      }
      while (v16 != v15);
      v17 = *v13;
    }
    v13[1] = v15;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234263D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_2234264FC(v4 + v7, a2 + v7);
      v7 += 192;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_223426450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;

  if (!v16)
  {
LABEL_2:
    *(_QWORD *)(v13 + 8) = v15;
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    if (*(_BYTE *)(v14 - 8))
    {
      v18 = *(std::__shared_weak_count **)(v14 - 16);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
          break;
      }
    }
    v21 = *(unsigned int *)(v14 - 144);
    if ((_DWORD)v21 != -1)
      goto LABEL_11;
LABEL_4:
    *(_DWORD *)(v14 - 144) = -1;
    v14 -= 192;
    if (v14 == v15)
      goto LABEL_2;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  v21 = *(unsigned int *)(v14 - 144);
  if ((_DWORD)v21 == -1)
    goto LABEL_4;
LABEL_11:
  ((void (*)(char *, uint64_t))off_24EC36D10[v21])(&a13, v14 - 160);
  goto LABEL_4;
}

uint64_t sub_2234264FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v16[2];

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24EC36D20[v5])(v16, a1 + 32, a2 + 32);
    *(_DWORD *)(a1 + 48) = v5;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 72);
    v8 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v8;
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = v7;
    *(_BYTE *)(a1 + 120) = 1;
  }
  v9 = *(_OWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_OWORD *)(a1 + 124) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = v11;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v12 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a1 + 184) = 1;
  }
  return a1;
}

void sub_223426618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24EC36D10[v16])(&a13, v14);
  *(_DWORD *)(v13 + 48) = -1;
  _Unwind_Resume(exception_object);
}

void sub_223426654(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_223426678(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

BOOL sub_22342669C(uint64_t a1, void *key, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_223426814(a3, (CFMutableArrayRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_223426800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223426814(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *value;
  std::__shared_weak_count *v39;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_224528230((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v7 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_57:
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_58;
    }
  }
  if (!v6)
    goto LABEL_57;
LABEL_7:
  v10 = *a1;
  sub_224527784((void *)v10, (CFNumberRef *)&value);
  v12 = value;
  v11 = v39;
  if (!v39)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_12:
    if (v12)
      goto LABEL_13;
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    v16 = v39;
    if (!v39)
      goto LABEL_22;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12)
    goto LABEL_18;
LABEL_13:
  CFArrayAppendValue(theArray[0], value);
  v16 = v39;
  if (!v39)
    goto LABEL_22;
LABEL_19:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_22:
    if (!v12)
      goto LABEL_58;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!v12)
    goto LABEL_58;
LABEL_23:
  sub_224527784((void *)(v10 + 4), (CFNumberRef *)&value);
  v20 = value;
  v19 = v39;
  if (!v39)
    goto LABEL_28;
  v21 = (unint64_t *)&v39->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v20)
    {
LABEL_29:
      CFArrayAppendValue(theArray[0], value);
      v24 = v39;
      if (!v39)
        goto LABEL_38;
      goto LABEL_35;
    }
  }
  else
  {
LABEL_28:
    if (v20)
      goto LABEL_29;
  }
  *a2 = 0;
  a2[1] = 0;
  v24 = v39;
  if (!v39)
    goto LABEL_38;
LABEL_35:
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_38:
    if (!v20)
      goto LABEL_58;
LABEL_39:
    sub_224527784((void *)(v10 + 8), (CFNumberRef *)&value);
    v28 = value;
    v27 = v39;
    if (!v39)
      goto LABEL_44;
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v28)
      {
LABEL_45:
        CFArrayAppendValue(theArray[0], value);
        v32 = v39;
        if (!v39)
          goto LABEL_55;
        goto LABEL_51;
      }
    }
    else
    {
LABEL_44:
      if (v28)
        goto LABEL_45;
    }
    *a2 = 0;
    a2[1] = 0;
    v32 = v39;
    if (!v39)
    {
LABEL_55:
      if (!v28)
        goto LABEL_58;
      *(_OWORD *)a2 = *(_OWORD *)theArray;
      a2 = theArray;
      goto LABEL_57;
    }
LABEL_51:
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (v20)
    goto LABEL_39;
LABEL_58:
  v35 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v36 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_223426B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_223426BD4(uint64_t a1, void *key, void *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  sub_224527784(a3, (CFNumberRef *)&value);
  v14 = value;
  v13 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v11 = v14 != 0;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v11 = v14 != 0;
  if (v14)
LABEL_18:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_19:
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_223426D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_223426D4C(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || (sub_22319835C(a5, (unsigned __int8 *)a2 + 25) & 0x80) != 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
    }
    else
    {
      v11 = (unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (unsigned __int8 *)v16[2];
          v17 = *(_QWORD *)v12 == (_QWORD)v16;
          v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((sub_22319835C(v12 + 25, a5) & 0x80) == 0)
      {
        v18 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v18;
              v20 = v18 + 25;
              if ((sub_22319835C(a5, v18 + 25) & 0x80) == 0)
                break;
              v18 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_22319835C(v20, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v18 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v18);
          goto LABEL_23;
        }
        goto LABEL_18;
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  else
  {
    if ((sub_22319835C((unsigned __int8 *)a2 + 25, a5) & 0x80) == 0)
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v21 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v21;
        v21 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if ((sub_22319835C(a5, v15 + 25) & 0x80) == 0)
      {
        v22 = *(unsigned __int8 **)v9;
        if (*(_QWORD *)v9)
        {
          do
          {
            while (1)
            {
              v19 = v22;
              v23 = v22 + 25;
              if ((sub_22319835C(a5, v22 + 25) & 0x80) == 0)
                break;
              v22 = *(unsigned __int8 **)v19;
              v9 = v19;
              if (!*(_QWORD *)v19)
                goto LABEL_23;
            }
            if ((sub_22319835C(v23, a5) & 0x80) == 0)
              break;
            v9 = v19 + 8;
            v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
          }
          while (v22);
          goto LABEL_23;
        }
LABEL_18:
        v19 = v9;
LABEL_23:
        *a3 = v19;
        return v9;
      }
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
  }
  return (unsigned __int8 *)a4;
}

void sub_223426F58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223426F68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223426F98(uint64_t a1)
{
  return sub_2233C8A78(a1 + 24);
}

void sub_223426FA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223426FB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223426FE4(_QWORD *a1)
{
  void *v2;
  void *v3;

  sub_2233C8A78((uint64_t)(a1 + 9));
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

void sub_223427034(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223427044(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223427074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 24);
  if (v3 == v1)
    goto LABEL_15;
  do
  {
    if (!*(_BYTE *)(v3 - 8))
      goto LABEL_10;
    v5 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, uint64_t))off_24EC36D10[v8])(&v9, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *(_DWORD *)(v3 - 144) = -1;
    v3 -= 192;
  }
  while (v3 != v1);
  v4 = *(void **)(a1 + 24);
LABEL_15:
  *(_QWORD *)(a1 + 32) = v1;
  operator delete(v4);
}

void sub_223427168(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223427178(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234271A8(uint64_t a1)
{
  sub_2234271B4(a1 + 24);
}

void sub_2234271B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_16;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(a1 + 24);
  if (v3 == v2)
    goto LABEL_15;
  do
  {
    if (!*(_BYTE *)(v3 - 8))
      goto LABEL_10;
    v5 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v5)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
LABEL_10:
      v8 = *(unsigned int *)(v3 - 144);
      if ((_DWORD)v8 == -1)
        goto LABEL_4;
LABEL_11:
      ((void (*)(char *, uint64_t))off_24EC36D10[v8])(&v10, v3 - 160);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(unsigned int *)(v3 - 144);
    if ((_DWORD)v8 != -1)
      goto LABEL_11;
LABEL_4:
    *(_DWORD *)(v3 - 144) = -1;
    v3 -= 192;
  }
  while (v3 != v2);
  v4 = *(void **)(a1 + 24);
LABEL_15:
  *(_QWORD *)(a1 + 32) = v2;
  operator delete(v4);
LABEL_16:
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
}

void sub_2234272B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2234272C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234272F4(uint64_t a1)
{
  sub_2231F5848(a1 + 24, *(_QWORD **)(a1 + 32));
}

void sub_223427308(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223427318(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223427348(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  sub_2233C8E54(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_2233C8E54(v2, *(_QWORD **)(a1 + 32));
}

BOOL sub_223427380(uint64_t a1, void *key, void **a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *value;
  std::__shared_weak_count *v25;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return 0;
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    value = v14;
    v25 = v13;
    do
      v17 = __ldxr(v15);
    while (__stxr(v17 + 1, v15));
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    value = v14;
    v25 = 0;
  }
  v11 = v14 != 0;
  if (v14)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v11;
}

void sub_22342752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223427540@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  char *v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  mach_timebase_info v23[2];
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(v23);
    LODWORD(v22) = v23[0].denom;
    LODWORD(v21) = v23[0].numer;
    *(double *)&qword_255795558 = (double)v21 / (double)v22;
    __cxa_guard_release(&qword_255795560);
  }
  v25[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v25[1] = 2;
  LOBYTE(v26) = 0;
  v28 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v26 = *a2;
    v27 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v28 = 1;
  }
  v29 = 0;
  v30 = 0;
  v31 = *a3;
  v32 = 1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v10 = (char *)operator new(0x78uLL);
  v11 = (std::__shared_weak_count *)v10;
  v12 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 56) = v12;
  v13 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)v10 = &off_24EC28318;
  *((_QWORD *)v10 + 4) = &off_24EC20868;
  *((_DWORD *)v10 + 26) = *(_DWORD *)(a1 + 80);
  *((_QWORD *)v10 + 3) = &off_24EC207B8;
  *((_QWORD *)v10 + 1) = 0;
  v14 = (unint64_t *)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_OWORD *)(v10 + 88) = v13;
  *((_QWORD *)v10 + 14) = *(_QWORD *)(a1 + 88);
  v23[0] = (mach_timebase_info)&off_24EC6D000;
  v23[1] = (mach_timebase_info)(v10 + 24);
  v24 = (std::__shared_weak_count *)v10;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    (*(void (**)(char *))(*(_QWORD *)v10 + 16))(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_2232A55DC((uint64_t)v23, (uint64_t)v25, a4);
  v23[0] = (mach_timebase_info)&off_24EC6D000;
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return sub_2231AD66C((uint64_t)v25);
}

void sub_22342778C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_2234277A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_224159450(&a9);
  sub_2231AD66C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2234277C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2234277D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 __p;
  char v15;
  char v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    LOBYTE(__p) = 0;
    v16 = 0;
    sub_2234278E8(a3, &__p, a5, v17);
    sub_2231AA5A4(a1, v9, (uint64_t)v17);
    v10 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 && v15 < 0)
      operator delete((void *)__p);
  }
  return a1;
}

void sub_2234278B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  sub_2241231D8((uint64_t)&a18);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2234278E8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v11;
  unint64_t v12;
  mach_timebase_info info;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info(&info);
    LODWORD(v11) = info.numer;
    LODWORD(v12) = info.denom;
    *(double *)&qword_255795558 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_255795560);
  }
  v14[0] = llround(*(double *)&qword_255795558 * (double)v8);
  v14[1] = 2;
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = 1;
  }
  v18 = 0;
  v19 = 0;
  v20 = *a3;
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_223427A70(a1, (uint64_t)v14, a4);
  return sub_2231AD66C((uint64_t)v14);
}

void sub_223427A44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795560);
  _Unwind_Resume(a1);
}

void sub_223427A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2231AD66C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223427A70(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  uint64_t (**v17)();
  __int128 v18;
  _QWORD v19[28];

  v19[27] = *MEMORY[0x24BDAC8D0];
  sub_2231AEC20(&v14, a1);
  sub_2244E40A8((uint64_t *)&v16, (uint64_t)&v14, 1);
  v18 = v16;
  v16 = 0uLL;
  v17 = &off_24EC20AE0;
  sub_2231AB0FC((uint64_t)v19, a2);
  v17 = &off_24EC66920;
  sub_2231ADC74((uint64_t)&v17, a3);
  v17 = &off_24EC20AE0;
  sub_2231AD66C((uint64_t)v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_223427BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  sub_224017008(&a13);
  sub_223167354((uint64_t)&a11);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223427C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223427C60(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = sub_2233C8858(a1, *a2);
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v3 + 64));
  return a1;
}

void sub_223427C98(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = (std::__shared_weak_count *)v1[7];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)v1[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v1[3];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)v1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223427D88(uint64_t a1, uint64_t *a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_mutex_base *)(a1 + 64);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 64));
  if (*(_QWORD *)a1)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v7 = *(std::__shared_weak_count **)(a1 + 8);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v10 = a2[2];
    if (v10)
    {
      v11 = a2[3];
      a2[2] = 0;
      a2[3] = 0;
      v12 = *(std::__shared_weak_count **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v15 = a2[4];
    if (v15)
    {
      v16 = a2[5];
      a2[4] = 0;
      a2[5] = 0;
      v17 = *(std::__shared_weak_count **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v20 = a2[6];
    if (v20)
    {
      v21 = a2[7];
      a2[6] = 0;
      a2[7] = 0;
      v22 = *(std::__shared_weak_count **)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v21;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  std::__shared_mutex_base::unlock(v4);
}

void sub_223427F24(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_mutex_base *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v6 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a2 & 1) != 0)
  {
    v7 = *a1;
    if (*a1)
    {
      v8 = a1[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
    }
  }
  if ((a2 & 2) != 0)
  {
    v11 = a1[2];
    if (v11)
    {
      v12 = a1[3];
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *(_QWORD *)(a3 + 16) = v11;
      *(_QWORD *)(a3 + 24) = v12;
    }
  }
  if ((a2 & 4) != 0)
  {
    v15 = a1[4];
    if (v15)
    {
      v16 = a1[5];
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *(_QWORD *)(a3 + 32) = v15;
      *(_QWORD *)(a3 + 40) = v16;
    }
  }
  if ((a2 & 8) != 0)
  {
    v19 = a1[6];
    if (v19)
    {
      v20 = a1[7];
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      *(_QWORD *)(a3 + 48) = v19;
      *(_QWORD *)(a3 + 56) = v20;
    }
  }
  std::__shared_mutex_base::unlock_shared(v6);
}

__n128 sub_223428024@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *i;
  unsigned __int8 *v8;
  unsigned __int8 *j;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *k;
  _QWORD *v16;
  void *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *m;
  unsigned __int8 *v31;
  unsigned __int8 *n;
  unsigned __int8 *v33;
  unsigned __int8 *ii;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __n128 *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 result;
  __int128 v57;

  v6 = (unsigned __int8 *)a2[4];
  for (i = (unsigned __int8 *)a2[5]; v6 != i; v6 += 16)
  {
    sub_22342D92C((unsigned __int8 **)(a1 + 40), v6);
    sub_2234284EC((unsigned __int8 **)(a1 + 64), v6);
  }
  v8 = (unsigned __int8 *)a2[1];
  for (j = (unsigned __int8 *)a2[2]; v8 != j; v8 += 464)
  {
    v10 = operator new(0x1E8uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_24EC36C90;
    *(_QWORD *)&v57 = sub_223249DC0((uint64_t)(v10 + 3), (uint64_t)v8);
    *((_QWORD *)&v57 + 1) = v10;
    sub_22341EDB8((_QWORD **)(a1 + 40), v8, &v57);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = (unsigned __int8 *)a2[17];
  for (k = (unsigned __int8 *)a2[18]; v14 != k; v14 += 16)
  {
    v16 = sub_22342DA5C((_QWORD *)a1, (uint64_t)v14);
    if (v16)
    {
      v17 = v16;
      v18 = *(int8x8_t *)(a1 + 8);
      v19 = v16[1];
      v20 = (uint8x8_t)vcnt_s8(v18);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        if (v19 >= *(_QWORD *)&v18)
          v19 %= *(_QWORD *)&v18;
      }
      else
      {
        v19 &= *(_QWORD *)&v18 - 1;
      }
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v19);
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21 != v16);
      if (v22 == (_QWORD *)(a1 + 16))
        goto LABEL_33;
      v23 = v22[1];
      if (v20.u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&v18)
          v23 %= *(_QWORD *)&v18;
      }
      else
      {
        v23 &= *(_QWORD *)&v18 - 1;
      }
      if (v23 != v19)
      {
LABEL_33:
        if (!*v16)
          goto LABEL_34;
        v24 = *(_QWORD *)(*v16 + 8);
        if (v20.u32[0] > 1uLL)
        {
          if (v24 >= *(_QWORD *)&v18)
            v24 %= *(_QWORD *)&v18;
        }
        else
        {
          v24 &= *(_QWORD *)&v18 - 1;
        }
        if (v24 != v19)
LABEL_34:
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = 0;
      }
      v25 = *v16;
      if (*v16)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v20.u32[0] > 1uLL)
        {
          if (v26 >= *(_QWORD *)&v18)
            v26 %= *(_QWORD *)&v18;
        }
        else
        {
          v26 &= *(_QWORD *)&v18 - 1;
        }
        if (v26 != v19)
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v22;
          v25 = *v16;
        }
      }
      *v22 = v25;
      *v16 = 0;
      --*(_QWORD *)(a1 + 24);
      v27 = (std::__shared_weak_count *)v16[5];
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      operator delete(v17);
    }
    sub_2234284EC((unsigned __int8 **)(a1 + 96), v14);
  }
  for (m = (uint64_t *)a2[12]; m; m = (uint64_t *)*m)
  {
    v41 = sub_22342DB8C(a1, (uint64_t)(m + 2), (_OWORD *)m + 1, m + 4);
    if (!v42)
    {
      v44 = m[4];
      v43 = m[5];
      if (v43)
      {
        v45 = (unint64_t *)(v43 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = (std::__shared_weak_count *)v41[5];
      v41[4] = v44;
      v41[5] = v43;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  v31 = (unsigned __int8 *)a2[20];
  for (n = (unsigned __int8 *)a2[21]; v31 != n; v31 += 40)
    sub_223428684((unsigned __int8 **)(a1 + 64), v31, (uint64_t)(v31 + 16));
  v33 = (unsigned __int8 *)a2[24];
  for (ii = (unsigned __int8 *)a2[25]; v33 != ii; v33 += 40)
    sub_22342879C((unsigned __int8 **)(a1 + 96), v33, (uint64_t)(v33 + 16));
  v35 = *a2;
  if (!*(_BYTE *)(a1 + 136))
    *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 128) = v35;
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a3 = v36;
  *(_QWORD *)(a3 + 8) = v37;
  v38 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a3 + 16) = v38;
  v39 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a3 + 24) = v39;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 32);
  if (v39)
  {
    v40 = *(_QWORD *)(v38 + 8);
    if ((v37 & (v37 - 1)) != 0)
    {
      if (v40 >= v37)
        v40 %= v37;
    }
    else
    {
      v40 &= v37 - 1;
    }
    *(_QWORD *)(v36 + 8 * v40) = a3 + 16;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v50 = (__n128 *)(a1 + 128);
  v51 = (_QWORD *)(a1 + 48);
  v52 = *(_QWORD *)(a1 + 48);
  v53 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a3 + 48) = v52;
  v54 = a3 + 48;
  *(_QWORD *)(a3 + 40) = v53;
  v55 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a3 + 56) = v55;
  if (v55)
  {
    *(_QWORD *)(v52 + 16) = v54;
    *(_QWORD *)(a1 + 40) = v51;
    *v51 = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 40) = v54;
  }
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a3 + 88) = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a3 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a3 + 120) = *(_BYTE *)(a1 + 120);
  result = *v50;
  *(__n128 *)(a3 + 128) = *v50;
  return result;
}

void sub_2234284C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2234284D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2234284EC(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  char v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  void *v14;
  void *v15;

  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
    do
    {
      v7 = &v5[40 * (v6 >> 1)];
      v8 = (char)sub_22319835C(v7, a2);
      if (v8 >= 0)
        v6 >>= 1;
      else
        v6 += ~(v6 >> 1);
      if (v8 < 0)
        v5 = v7 + 40;
    }
    while (v6);
    v4 = v5;
    v5 = a1[1];
  }
  if (v5 == v4)
    return 0;
  if ((sub_22319835C(v4, a2) & 0x80) != 0)
    return 0;
  v9 = sub_22319835C(a2, v4);
  result = 0;
  if ((v9 & 0x80) == 0)
  {
    v11 = a1[1];
    if (v11 != v4)
    {
      if (v4 + 40 != v11)
      {
        do
        {
          *(_OWORD *)v4 = *(_OWORD *)(v4 + 40);
          v14 = (void *)*((_QWORD *)v4 + 2);
          if (v14)
          {
            *((_QWORD *)v4 + 3) = v14;
            operator delete(v14);
            *((_QWORD *)v4 + 3) = 0;
            *((_QWORD *)v4 + 4) = 0;
          }
          *((_OWORD *)v4 + 1) = *(_OWORD *)(v4 + 56);
          *((_QWORD *)v4 + 4) = *((_QWORD *)v4 + 9);
          *((_QWORD *)v4 + 8) = 0;
          *((_QWORD *)v4 + 9) = 0;
          *((_QWORD *)v4 + 7) = 0;
          v12 = v4 + 40;
          v13 = v4 + 80;
          v4 += 40;
        }
        while (v13 != v11);
        v11 = a1[1];
        v4 = v12;
      }
      while (v11 != v4)
      {
        v15 = (void *)*((_QWORD *)v11 - 3);
        if (v15)
        {
          *((_QWORD *)v11 - 2) = v15;
          operator delete(v15);
        }
        v11 -= 40;
      }
      a1[1] = v4;
      return 1;
    }
  }
  return result;
}

__int128 *sub_223428684(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v7 = *a1;
  v6 = (uint64_t)a1[1];
  if ((unsigned __int8 *)v6 != *a1)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)*a1) >> 3);
    do
    {
      v9 = &v7[40 * (v8 >> 1)];
      v10 = (char)sub_22319835C(v9, a2);
      if (v10 >= 0)
        v8 >>= 1;
      else
        v8 += ~(v8 >> 1);
      if (v10 < 0)
        v7 = v9 + 40;
    }
    while (v8);
    v6 = (uint64_t)v7;
    v7 = a1[1];
  }
  if (v7 == (unsigned __int8 *)v6
    || (sub_22319835C((unsigned __int8 *)v6, a2) & 0x80) != 0
    || (sub_22319835C(a2, (unsigned __int8 *)v6) & 0x80) != 0)
  {
    return sub_22342DEF4(a1, v6, (__int128 *)a2, (const void **)a3);
  }
  if (v6 + 16 != a3)
    sub_22342D404((_QWORD *)(v6 + 16), *(char **)a3, *(char **)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2));
  return (__int128 *)v6;
}

__int128 *sub_22342879C(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;

  v7 = *a1;
  v6 = (uint64_t)a1[1];
  if ((unsigned __int8 *)v6 != *a1)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)*a1) >> 3);
    do
    {
      v9 = &v7[40 * (v8 >> 1)];
      v10 = (char)sub_22319835C(v9, a2);
      if (v10 >= 0)
        v8 >>= 1;
      else
        v8 += ~(v8 >> 1);
      if (v10 < 0)
        v7 = v9 + 40;
    }
    while (v8);
    v6 = (uint64_t)v7;
    v7 = a1[1];
  }
  if (v7 == (unsigned __int8 *)v6
    || (sub_22319835C((unsigned __int8 *)v6, a2) & 0x80) != 0
    || (sub_22319835C(a2, (unsigned __int8 *)v6) & 0x80) != 0)
  {
    return sub_22342E6D4(a1, v6, (__int128 *)a2, (const void **)a3);
  }
  if (v6 + 16 != a3)
    sub_2231984D0((_QWORD *)(v6 + 16), *(char **)a3, *(char **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  return (__int128 *)v6;
}

void sub_2234288A8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v5;
  __int128 *v6;
  __int128 *v7;
  _OWORD *v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t **v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned __int8 v54;
  const void *v55;
  size_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  size_t v77;
  size_t v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  const char *v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t *v151;
  int v152;
  _QWORD v155[3];
  int v156;
  const char *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  void *__p[2];
  std::__shared_weak_count *v164;
  char *v165;
  std::__shared_weak_count *v166;
  _QWORD *v167;
  __int128 v168;
  char __s[37];
  _BYTE v170[24];
  __int128 v171;
  void *v172[2];
  unint64_t v173;
  char v174;
  _QWORD v175[5];

  v3 = a2;
  v175[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  v5 = (_QWORD *)(a3 + 96);
  *(_DWORD *)(a3 + 80) = 1065353216;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  v148 = a3 + 112;
  *(_QWORD *)(a3 + 88) = a3 + 96;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  v151 = (uint64_t *)(a3 + 144);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 184) = 0;
  v6 = *(__int128 **)(a1 + 32);
  v7 = *(__int128 **)(a1 + 40);
  if (v6 != v7)
  {
    v8 = 0;
    v9 = (_QWORD *)(a3 + 24);
    do
    {
      while (1)
      {
        v11 = *(_QWORD *)(a3 + 40);
        if ((unint64_t)v8 >= v11)
          break;
        v10 = *v6++;
        *v8 = v10;
        *(_QWORD *)(a3 + 32) = ++v8;
        if (v6 == v7)
          goto LABEL_22;
      }
      v12 = (_OWORD *)*v9;
      v13 = ((uint64_t)v8 - *v9) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        sub_22316E078();
      v15 = v11 - (_QWORD)v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 60)
          sub_223174E94();
        v17 = (char *)operator new(16 * v16);
        v18 = &v17[16 * v13];
        *(_OWORD *)v18 = *v6;
        v19 = (uint64_t)v18;
        if (v8 != v12)
        {
          do
          {
LABEL_16:
            *(_OWORD *)(v19 - 16) = *(v8 - 1);
            v19 -= 16;
            --v8;
          }
          while (v8 != v12);
          v8 = (_OWORD *)*v9;
          v20 = v18 + 16;
          *(_QWORD *)(a3 + 24) = v19;
          *(_QWORD *)(a3 + 32) = v18 + 16;
          *(_QWORD *)(a3 + 40) = &v17[16 * v16];
          if (!v8)
            goto LABEL_21;
LABEL_20:
          operator delete(v8);
          goto LABEL_21;
        }
      }
      else
      {
        v17 = 0;
        v18 = (char *)(16 * v13);
        *(_OWORD *)(16 * v13) = *v6;
        v19 = 16 * v13;
        if (v8 != v12)
          goto LABEL_16;
      }
      v20 = v18 + 16;
      *(_QWORD *)(a3 + 24) = v19;
      *(_QWORD *)(a3 + 32) = v18 + 16;
      *(_QWORD *)(a3 + 40) = &v17[16 * v16];
      if (v8)
        goto LABEL_20;
LABEL_21:
      v3 = a2;
      *(_QWORD *)(a3 + 32) = v20;
      ++v6;
      v8 = v20;
    }
    while (v6 != v7);
  }
LABEL_22:
  v21 = *(unsigned __int8 **)(a1 + 8);
  v22 = *(unsigned __int8 **)(a1 + 16);
  if (v21 != v22)
  {
LABEL_25:
    v23 = (uint64_t **)v3[6];
    if (!v23)
LABEL_300:
      sub_223198218("map::at:  key not found");
    v24 = *v21;
    while (1)
    {
      v25 = *((unsigned __int8 *)v23 + 32);
      v26 = v24 >= v25;
      if (v24 != v25)
        break;
      v27 = v21[1];
      v25 = *((unsigned __int8 *)v23 + 33);
      v26 = v27 >= v25;
      if (v27 == v25
        && (v27 = v21[2], v25 = *((unsigned __int8 *)v23 + 34), v26 = v27 >= v25, v27 == v25)
        && (v27 = v21[3], v25 = *((unsigned __int8 *)v23 + 35), v26 = v27 >= v25, v27 == v25))
      {
        v28 = v21[4];
        v29 = *((unsigned __int8 *)v23 + 36);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[5];
        v29 = *((unsigned __int8 *)v23 + 37);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[6];
        v29 = *((unsigned __int8 *)v23 + 38);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[7];
        v29 = *((unsigned __int8 *)v23 + 39);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[8];
        v29 = *((unsigned __int8 *)v23 + 40);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[9];
        v29 = *((unsigned __int8 *)v23 + 41);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[10];
        v29 = *((unsigned __int8 *)v23 + 42);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[11];
        v29 = *((unsigned __int8 *)v23 + 43);
        if (v28 != v29)
          goto LABEL_44;
        v28 = v21[12];
        v29 = *((unsigned __int8 *)v23 + 44);
        if (v28 != v29
          || (v28 = v21[13], v29 = *((unsigned __int8 *)v23 + 45), v28 != v29)
          || (v28 = v21[14], v29 = *((unsigned __int8 *)v23 + 46), v28 != v29)
          || (v28 = v21[15], v29 = *((unsigned __int8 *)v23 + 47), v28 != v29))
        {
LABEL_44:
          if (v28 < v29)
            goto LABEL_27;
        }
        v25 = *((unsigned __int8 *)v23 + 36);
        v27 = v21[4];
        if (v25 == v27)
        {
          v25 = *((unsigned __int8 *)v23 + 37);
          v27 = v21[5];
          if (v25 == v27)
          {
            v25 = *((unsigned __int8 *)v23 + 38);
            v27 = v21[6];
            if (v25 == v27)
            {
              v25 = *((unsigned __int8 *)v23 + 39);
              v27 = v21[7];
              if (v25 == v27)
              {
                v25 = *((unsigned __int8 *)v23 + 40);
                v27 = v21[8];
                if (v25 == v27)
                {
                  v25 = *((unsigned __int8 *)v23 + 41);
                  v27 = v21[9];
                  if (v25 == v27)
                  {
                    v25 = *((unsigned __int8 *)v23 + 42);
                    v27 = v21[10];
                    if (v25 == v27)
                    {
                      v25 = *((unsigned __int8 *)v23 + 43);
                      v27 = v21[11];
                      if (v25 == v27)
                      {
                        v25 = *((unsigned __int8 *)v23 + 44);
                        v27 = v21[12];
                        if (v25 == v27)
                        {
                          v25 = *((unsigned __int8 *)v23 + 45);
                          v27 = v21[13];
                          if (v25 == v27)
                          {
                            v25 = *((unsigned __int8 *)v23 + 46);
                            v27 = v21[14];
                            if (v25 == v27)
                            {
                              v25 = *((unsigned __int8 *)v23 + 47);
                              v27 = v21[15];
                              if (v25 == v27)
                              {
LABEL_64:
                                *(_OWORD *)v170 = *(_OWORD *)v21;
                                v31 = v23[6];
                                v30 = (std::__shared_weak_count *)v23[7];
                                *(_QWORD *)&v170[16] = v31;
                                *(_QWORD *)&v171 = v30;
                                if (v30)
                                {
                                  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
                                  do
                                    v33 = __ldxr(p_shared_owners);
                                  while (__stxr(v33 + 1, p_shared_owners));
                                }
                                v34 = *v5;
                                v35 = v5;
                                v36 = v5;
                                if (!*v5)
                                  goto LABEL_108;
                                do
                                {
                                  while (2)
                                  {
                                    v36 = (_QWORD *)v34;
                                    v37 = *(unsigned __int8 *)(v34 + 32);
                                    if (v170[0] == v37)
                                    {
                                      v37 = *((unsigned __int8 *)v36 + 33);
                                      if (v170[1] == v37)
                                      {
                                        v38 = *((unsigned __int8 *)v36 + 34);
                                        v39 = v170[2];
                                        if (v170[2] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 35);
                                        v39 = v170[3];
                                        if (v170[3] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 36);
                                        v39 = v170[4];
                                        if (v170[4] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 37);
                                        v39 = v170[5];
                                        if (v170[5] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 38);
                                        v39 = v170[6];
                                        if (v170[6] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 39);
                                        v39 = v170[7];
                                        if (v170[7] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 40);
                                        v39 = v170[8];
                                        if (v170[8] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 41);
                                        v39 = v170[9];
                                        if (v170[9] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 42);
                                        v39 = v170[10];
                                        if (v170[10] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 43);
                                        v39 = v170[11];
                                        if (v170[11] != v38)
                                          goto LABEL_86;
                                        v38 = *((unsigned __int8 *)v36 + 44);
                                        v39 = v170[12];
                                        if (v170[12] != v38
                                          || (v38 = *((unsigned __int8 *)v36 + 45), v39 = v170[13], v170[13] != v38)
                                          || (v38 = *((unsigned __int8 *)v36 + 46), v39 = v170[14], v170[14] != v38)
                                          || (v38 = *((unsigned __int8 *)v36 + 47), v39 = v170[15], v170[15] != v38))
                                        {
LABEL_86:
                                          if (v39 < v38)
                                          {
LABEL_69:
                                            v34 = *v36;
                                            v35 = v36;
                                            if (!*v36)
                                              goto LABEL_108;
                                            continue;
                                          }
                                        }
                                        v37 = *((unsigned __int8 *)v36 + 34);
                                        v40 = v170[2];
                                        if (v37 == v170[2])
                                        {
                                          v37 = *((unsigned __int8 *)v36 + 35);
                                          v40 = v170[3];
                                          if (v37 == v170[3])
                                          {
                                            v37 = *((unsigned __int8 *)v36 + 36);
                                            v40 = v170[4];
                                            if (v37 == v170[4])
                                            {
                                              v37 = *((unsigned __int8 *)v36 + 37);
                                              v40 = v170[5];
                                              if (v37 == v170[5])
                                              {
                                                v37 = *((unsigned __int8 *)v36 + 38);
                                                v40 = v170[6];
                                                if (v37 == v170[6])
                                                {
                                                  v37 = *((unsigned __int8 *)v36 + 39);
                                                  v40 = v170[7];
                                                  if (v37 == v170[7])
                                                  {
                                                    v37 = *((unsigned __int8 *)v36 + 40);
                                                    v40 = v170[8];
                                                    if (v37 == v170[8])
                                                    {
                                                      v37 = *((unsigned __int8 *)v36 + 41);
                                                      v40 = v170[9];
                                                      if (v37 == v170[9])
                                                      {
                                                        v37 = *((unsigned __int8 *)v36 + 42);
                                                        v40 = v170[10];
                                                        if (v37 == v170[10])
                                                        {
                                                          v37 = *((unsigned __int8 *)v36 + 43);
                                                          v40 = v170[11];
                                                          if (v37 == v170[11])
                                                          {
                                                            v37 = *((unsigned __int8 *)v36 + 44);
                                                            v40 = v170[12];
                                                            if (v37 == v170[12])
                                                            {
                                                              v37 = *((unsigned __int8 *)v36 + 45);
                                                              v40 = v170[13];
                                                              if (v37 == v170[13])
                                                              {
                                                                v37 = *((unsigned __int8 *)v36 + 46);
                                                                v40 = v170[14];
                                                                if (v37 == v170[14])
                                                                {
                                                                  v37 = *((unsigned __int8 *)v36 + 47);
                                                                  v40 = v170[15];
                                                                  if (v37 == v170[15])
                                                                    goto LABEL_111;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v40 = v170[1];
                                        if (v170[1] < v37)
                                          goto LABEL_69;
                                      }
                                    }
                                    else
                                    {
                                      v40 = v170[0];
                                      if (v170[0] < v37)
                                        goto LABEL_69;
                                    }
                                    break;
                                  }
                                  if (v37 >= v40)
                                    goto LABEL_111;
                                  v34 = v36[1];
                                }
                                while (v34);
                                v35 = v36 + 1;
LABEL_108:
                                v41 = operator new(0x40uLL);
                                v41[2] = *(_OWORD *)v170;
                                *((_QWORD *)v41 + 6) = v31;
                                *((_QWORD *)v41 + 7) = v30;
                                *(_QWORD *)&v170[16] = 0;
                                *(_QWORD *)&v171 = 0;
                                *(_QWORD *)v41 = 0;
                                *((_QWORD *)v41 + 1) = 0;
                                *((_QWORD *)v41 + 2) = v36;
                                *v35 = v41;
                                v42 = **(_QWORD **)(a3 + 88);
                                if (v42)
                                {
                                  *(_QWORD *)(a3 + 88) = v42;
                                  v41 = (_OWORD *)*v35;
                                }
                                sub_2231A9A8C(*(uint64_t **)(a3 + 96), (uint64_t *)v41);
                                ++*(_QWORD *)(a3 + 104);
                                v30 = (std::__shared_weak_count *)v171;
LABEL_111:
                                if (v30)
                                {
                                  v43 = (unint64_t *)&v30->__shared_owners_;
                                  do
                                    v44 = __ldaxr(v43);
                                  while (__stlxr(v44 - 1, v43));
                                  if (!v44)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                                    std::__shared_weak_count::__release_weak(v30);
                                  }
                                }
                                v21 += 464;
                                if (v21 == v22)
                                  goto LABEL_116;
                                goto LABEL_25;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_61:
        if (v25 >= v27)
          goto LABEL_64;
        v23 = (uint64_t **)v23[1];
        if (!v23)
          goto LABEL_300;
      }
      else
      {
LABEL_59:
        if (v26)
          goto LABEL_61;
LABEL_27:
        v23 = (uint64_t **)*v23;
        if (!v23)
          goto LABEL_300;
      }
    }
    v27 = *v21;
    goto LABEL_59;
  }
LABEL_116:
  if (a1 + 136 != a3)
    sub_2231984D0((_QWORD *)a3, *(char **)(a1 + 136), *(char **)(a1 + 144), (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 4);
  v45 = *(uint64_t **)(a1 + 96);
  if (v45)
  {
    v46 = a3 + 48;
    do
    {
      v47 = sub_223340F28(v3, (uint64_t)(v45 + 2));
      if (v47)
      {
        *(_OWORD *)v170 = *((_OWORD *)v45 + 1);
        v48 = v47[5];
        *(_QWORD *)&v170[16] = v47[4];
        *(_QWORD *)&v171 = v48;
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        sub_22342EE64(v46, (uint64_t)v170, (uint64_t)v170);
        v51 = (std::__shared_weak_count *)v171;
        if (!(_QWORD)v171)
          goto LABEL_120;
        v52 = (unint64_t *)(v171 + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        goto LABEL_128;
      }
      v54 = atomic_load((unsigned __int8 *)&qword_2557892F0);
      if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
      {
        __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
        __cxa_guard_release(&qword_2557892F0);
      }
      sub_223429EA8(v170);
      if (*(char *)(*(_QWORD *)v170 + 39) < 0)
      {
        v55 = *(const void **)(*(_QWORD *)v170 + 16);
        v56 = *(_QWORD *)(*(_QWORD *)v170 + 24);
      }
      else
      {
        v55 = (const void *)(*(_QWORD *)v170 + 16);
        v56 = *(unsigned __int8 *)(*(_QWORD *)v170 + 39);
      }
      sub_223195728((uint64_t)&unk_255789280, v55, v56, "Updated keyframe %.13s not in updated plane state", 0x31uLL);
      sub_223429F9C(&v162);
      if (**(int **)(v162 + 56) > 5)
        goto LABEL_120;
      v57 = *(unsigned __int8 *)(v162 + 72);
      v58 = sub_22322F254(v162, "OSLogSurrogateAppender", 1, 0);
      v59 = v58;
      if (!v57 && !v58)
        goto LABEL_120;
      v155[0] = &v162;
      v155[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v155[2] = std::chrono::system_clock::now().__d_.__rep_;
      v156 = 5;
      v157 = "unknown file";
      v158 = 144;
      v159 = "unknown function";
      v160 = 0;
      v161 = 0;
      sub_2245664AC((unsigned __int8 *)v45 + 16, __s);
      v60 = *(_QWORD *)v155[0];
      v61 = (const char *)(*(_QWORD *)v155[0] + 16);
      v149 = v61;
      if (*(char *)(*(_QWORD *)v155[0] + 39) < 0)
      {
        v61 = *(const char **)(v60 + 16);
        v62 = *(_QWORD *)(v60 + 24);
        v150 = *(_QWORD *)v155[0];
        v64 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v152 = v57;
        if ((v64 & 1) != 0)
          goto LABEL_141;
      }
      else
      {
        v62 = *(unsigned __int8 *)(*(_QWORD *)v155[0] + 39);
        v150 = *(_QWORD *)v155[0];
        v63 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v152 = v57;
        if ((v63 & 1) != 0)
          goto LABEL_141;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v165 && SHIBYTE(v164) < 0)
          operator delete(__p[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_141:
      if (byte_255788F57 >= 0)
        v65 = (const char *)&xmmword_255788F40;
      else
        v65 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v66 = byte_255788F57;
      else
        v66 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v170 = os_log_create(v65, v61);
      if (v66 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v66 >= 0x17)
      {
        v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v66 | 7) != 0x17)
          v68 = v66 | 7;
        v69 = v68 + 1;
        v67 = operator new(v68 + 1);
        *(_QWORD *)&v170[16] = v66;
        *(_QWORD *)&v171 = v69 | 0x8000000000000000;
        *(_QWORD *)&v170[8] = v67;
LABEL_154:
        memmove(v67, v65, v66);
        goto LABEL_155;
      }
      BYTE7(v171) = v66;
      v67 = &v170[8];
      if (v66)
        goto LABEL_154;
LABEL_155:
      v67[v66] = 0;
      BYTE8(v171) = 1;
      if (v62 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v46 = a3 + 48;
      if (v62 >= 0x17)
      {
        v72 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v72 = v62 | 7;
        v73 = v72 + 1;
        v70 = (void **)operator new(v72 + 1);
        v172[1] = (void *)v62;
        v173 = v73 | 0x8000000000000000;
        v172[0] = v70;
      }
      else
      {
        HIBYTE(v173) = v62;
        v70 = v172;
        if (!v62)
        {
          LOBYTE(v172[0]) = 0;
          v174 = 1;
          v71 = *(NSObject **)v170;
          if ((SHIBYTE(v173) & 0x80000000) == 0)
            goto LABEL_159;
          goto LABEL_165;
        }
      }
      memmove(v70, v61, v62);
      *((_BYTE *)v70 + v62) = 0;
      v174 = 1;
      v71 = *(NSObject **)v170;
      if ((SHIBYTE(v173) & 0x80000000) == 0)
      {
LABEL_159:
        v3 = a2;
        if (!BYTE8(v171))
          goto LABEL_168;
        goto LABEL_166;
      }
LABEL_165:
      operator delete(v172[0]);
      v3 = a2;
      if (!BYTE8(v171))
        goto LABEL_168;
LABEL_166:
      if (SBYTE7(v171) < 0)
        operator delete(*(void **)&v170[8]);
LABEL_168:
      if (*(_QWORD *)v170)
        os_release(*(void **)v170);
      if (!v59 || !*(_QWORD *)(v59 + 24))
      {
        os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        *(_QWORD *)v170 = 0xD04100202;
        *(_WORD *)&v170[8] = 2080;
        *(_QWORD *)&v170[10] = __s;
        v80 = (void *)_os_log_send_and_compose_impl();
        if (!v80)
          goto LABEL_240;
        free(v80);
        if (v152)
          goto LABEL_241;
        goto LABEL_242;
      }
      v74 = _os_log_pack_size();
      v75 = (std::__shared_weak_count_vtbl *)operator new(v74, (std::align_val_t)8uLL);
      v76 = (std::__shared_weak_count *)operator new();
      v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
      v76->__shared_owners_ = 0;
      v76->__shared_weak_owners_ = 0;
      v76[1].__vftable = v75;
      __p[0] = v75;
      __p[1] = v75;
      v164 = v76;
      v165 = 0;
      v166 = 0;
      v77 = strlen(__s);
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v78 = v77;
      if (v77 >= 0x17)
      {
        v81 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v81 = v77 | 7;
        v82 = v81 + 1;
        v79 = operator new(v81 + 1);
        *(_QWORD *)&v168 = v78;
        *((_QWORD *)&v168 + 1) = v82 | 0x8000000000000000;
        v167 = v79;
LABEL_182:
        memcpy(v79, __s, v78);
        goto LABEL_183;
      }
      HIBYTE(v168) = v77;
      v79 = &v167;
      if (v77)
        goto LABEL_182;
LABEL_183:
      *((_BYTE *)v79 + v78) = 0;
      v83 = v167;
      v175[0] = v168;
      *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v168 + 7);
      v84 = HIBYTE(v168);
      v85 = operator new(0x38uLL);
      v85[1] = 0;
      v85[2] = 0;
      v85[3] = off_24EC1FA48;
      *v85 = &off_24EC1F9F8;
      v86 = v175[0];
      v85[4] = v83;
      v85[5] = v86;
      *(_QWORD *)((char *)v85 + 47) = *(_QWORD *)((char *)v175 + 7);
      *((_BYTE *)v85 + 55) = v84;
      v175[0] = 0;
      *(_QWORD *)((char *)v175 + 7) = 0;
      v87 = v166;
      v165 = (char *)(v85 + 3);
      v166 = (std::__shared_weak_count *)v85;
      v46 = a3 + 48;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      *(_OWORD *)v170 = *(_OWORD *)__p;
      v90 = v165;
      *(_QWORD *)&v170[16] = v164;
      if (v164)
      {
        v91 = (unint64_t *)&v164->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v93 = v166;
      *(_QWORD *)&v171 = v90;
      *((_QWORD *)&v171 + 1) = v166;
      if (v166)
      {
        v94 = (unint64_t *)&v166->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
        v172[0] = v90;
        do
          v96 = __ldaxr(v94);
        while (__stlxr(v96 - 1, v94));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      else
      {
        v172[0] = v90;
      }
      v97 = v164;
      if (v164)
      {
        v98 = (unint64_t *)&v164->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = *(_QWORD *)v170;
      if (*((char *)v172[0] + 31) >= 0)
        v101 = (char *)v172[0] + 8;
      else
        v101 = (char *)*((_QWORD *)v172[0] + 1);
      v102 = _os_log_pack_fill();
      *(_DWORD *)v102 = 68157954;
      *(_DWORD *)(v102 + 4) = 13;
      *(_WORD *)(v102 + 8) = 2080;
      *(_QWORD *)(v102 + 10) = v101;
      v103 = (char *)operator new();
      v104 = *(unsigned __int8 *)(v150 + 39);
      v105 = v149;
      if ((v104 & 0x80u) != 0)
      {
        v105 = *(const char **)(v150 + 16);
        v104 = *(_QWORD *)(v150 + 24);
      }
      *(_QWORD *)v103 = v100;
      *(_OWORD *)(v103 + 8) = *(_OWORD *)&v170[8];
      *(_QWORD *)&v170[8] = 0;
      *(_QWORD *)&v170[16] = 0;
      *(_OWORD *)(v103 + 24) = v171;
      v171 = 0uLL;
      *((_QWORD *)v103 + 5) = v105;
      *((_QWORD *)v103 + 6) = v104;
      v103[56] = 16;
      v167 = 0;
      __p[0] = v103;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v59 + 24) + 40))(*(_QWORD *)(v59 + 24), __p);
      v106 = __p[0];
      __p[0] = 0;
      if (v106)
      {
        v107 = (std::__shared_weak_count *)*((_QWORD *)v106 + 4);
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v110 = (std::__shared_weak_count *)*((_QWORD *)v106 + 2);
        if (v110)
        {
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        MEMORY[0x227684CE8](v106, 0x10F0C40B62ED6C6);
        v113 = v167;
        v167 = 0;
        if (v113)
        {
          v114 = (std::__shared_weak_count *)v113[4];
          if (v114)
          {
            v115 = (unint64_t *)&v114->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          v117 = (std::__shared_weak_count *)v113[2];
          if (v117)
          {
            v118 = (unint64_t *)&v117->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          MEMORY[0x227684CE8](v113, 0x10F0C40B62ED6C6);
        }
      }
      v120 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
      if (!*((_QWORD *)&v171 + 1))
        goto LABEL_236;
      v121 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
        v123 = *(std::__shared_weak_count **)&v170[16];
        if (!*(_QWORD *)&v170[16])
          goto LABEL_240;
      }
      else
      {
LABEL_236:
        v123 = *(std::__shared_weak_count **)&v170[16];
        if (!*(_QWORD *)&v170[16])
          goto LABEL_240;
      }
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (v125)
      {
LABEL_240:
        if (!v152)
          goto LABEL_242;
LABEL_241:
        sub_2245664AC((unsigned __int8 *)v45 + 16, v170);
        sub_22322C138((uint64_t)v155, "Updated keyframe %.13s not in updated plane state", v170);
        sub_223182C08((uint64_t)v155);
        goto LABEL_242;
      }
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
      if (v152)
        goto LABEL_241;
LABEL_242:
      sub_223182C08((uint64_t)v155);
      v51 = v161;
      if (v161)
      {
        v126 = (unint64_t *)&v161->__shared_owners_;
        do
          v53 = __ldaxr(v126);
        while (__stlxr(v53 - 1, v126));
LABEL_128:
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
LABEL_120:
      v45 = (uint64_t *)*v45;
    }
    while (v45);
  }
  v127 = a1;
  if (v148 != a1 + 160)
  {
    v129 = *(_QWORD *)(a1 + 160);
    v128 = *(_QWORD *)(a1 + 168);
    v130 = *(_QWORD *)(a3 + 128);
    v131 = 0xCCCCCCCCCCCCCCCDLL * ((v128 - v129) >> 3);
    v132 = *(_QWORD *)(a3 + 112);
    if (0xCCCCCCCCCCCCCCCDLL * ((v130 - v132) >> 3) < v131)
    {
      if (v132)
      {
        v133 = *(_QWORD *)(a3 + 120);
        v134 = *(void **)(a3 + 112);
        if (v133 != v132)
        {
          do
          {
            v135 = *(void **)(v133 - 24);
            if (v135)
            {
              *(_QWORD *)(v133 - 16) = v135;
              operator delete(v135);
            }
            v133 -= 40;
          }
          while (v133 != v132);
          v134 = *(void **)v148;
        }
        *(_QWORD *)(a3 + 120) = v132;
        operator delete(v134);
        v130 = 0;
        *(_QWORD *)v148 = 0;
        *(_QWORD *)(v148 + 8) = 0;
        *(_QWORD *)(v148 + 16) = 0;
      }
      if (v131 > 0x666666666666666)
        goto LABEL_306;
      v142 = 0xCCCCCCCCCCCCCCCDLL * (v130 >> 3);
      v143 = 2 * v142;
      if (2 * v142 <= v131)
        v143 = 0xCCCCCCCCCCCCCCCDLL * ((v128 - v129) >> 3);
      v144 = v142 >= 0x333333333333333 ? 0x666666666666666 : v143;
      if (v144 > 0x666666666666666)
LABEL_306:
        sub_22316E078();
      v145 = (char *)operator new(40 * v144);
      *(_QWORD *)(a3 + 112) = v145;
      *(_QWORD *)(a3 + 120) = v145;
      *(_QWORD *)(a3 + 128) = &v145[40 * v144];
      v146 = sub_2232618B0(a3 + 128, v129, v128, (uint64_t)v145);
LABEL_288:
      *(_QWORD *)(a3 + 120) = v146;
      v127 = a1;
      goto LABEL_289;
    }
    v136 = *(_QWORD *)(a3 + 120);
    v137 = (v136 - v132) >> 3;
    v138 = 0xCCCCCCCCCCCCCCCDLL * v137;
    if (0xCCCCCCCCCCCCCCCDLL * v137 < v131)
    {
      if (v136 != v132)
      {
        v139 = 8 * v137;
        v140 = *(_QWORD *)(a1 + 160);
        do
        {
          *(_OWORD *)v132 = *(_OWORD *)v140;
          if (v140 != v132)
            sub_22342D404((_QWORD *)(v132 + 16), *(char **)(v140 + 16), *(char **)(v140 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v140 + 24) - *(_QWORD *)(v140 + 16)) >> 2));
          v140 += 40;
          v132 += 40;
          v139 -= 40;
        }
        while (v139);
        v132 = *(_QWORD *)(a3 + 120);
      }
      v146 = sub_2232618B0(a3 + 128, v129 + 40 * v138, v128, v132);
      goto LABEL_288;
    }
    if (v129 == v128)
    {
      v141 = *(_QWORD *)(a3 + 112);
      v127 = a1;
      if (v136 == v132)
        goto LABEL_295;
    }
    else
    {
      v141 = *(_QWORD *)(a3 + 112);
      do
      {
        *(_OWORD *)v132 = *(_OWORD *)v129;
        if (v129 != v132)
          sub_22342D404((_QWORD *)(v132 + 16), *(char **)(v129 + 16), *(char **)(v129 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v129 + 24) - *(_QWORD *)(v129 + 16)) >> 2));
        v129 += 40;
        v132 += 40;
        v141 += 40;
      }
      while (v129 != v128);
      v136 = *(_QWORD *)(a3 + 120);
      v127 = a1;
      if (v136 == v141)
      {
LABEL_295:
        *(_QWORD *)(a3 + 120) = v141;
        *(_BYTE *)(a3 + 136) = *(_BYTE *)(v127 + 184);
        if (v151 == (uint64_t *)(v127 + 192))
          goto LABEL_291;
        goto LABEL_290;
      }
    }
    do
    {
      v147 = *(void **)(v136 - 24);
      if (v147)
      {
        *(_QWORD *)(v136 - 16) = v147;
        operator delete(v147);
      }
      v136 -= 40;
    }
    while (v136 != v141);
    goto LABEL_295;
  }
LABEL_289:
  *(_BYTE *)(a3 + 136) = *(_BYTE *)(v127 + 184);
  if (v151 != (uint64_t *)(v127 + 192))
LABEL_290:
    sub_22342D57C(v151, *(_QWORD *)(v127 + 192), *(_QWORD *)(v127 + 200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v127 + 200) - *(_QWORD *)(v127 + 192)) >> 3));
LABEL_291:
  *(_BYTE *)(a3 + 168) = *(_BYTE *)(v127 + 216);
}

void sub_223429D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;

  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a29);
  sub_22341B9E0(v45);
  _Unwind_Resume(a1);
}

void sub_223429EA8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CAC90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAC90))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CAC90);
  }
  *a1 = qword_2540CAC88;
}

void sub_223429F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CAC90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CAC90);
  _Unwind_Resume(a1);
}

void sub_223429F9C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CACA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACA0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAC98);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CACA0);
  }
  *a1 = qword_2540CAC98;
}

void sub_22342A038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CACA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CACA0);
  _Unwind_Resume(a1);
}

uint64_t sub_22342A090@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float **v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  unsigned __int8 *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  _QWORD v54[2];
  unsigned int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  __int128 v61;
  unsigned __int8 v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  std::__shared_weak_count *v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v46 = a3;
  v48 = a3;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 728337632;
  kdebug_trace();
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    while (1)
    {
      v9 = (_QWORD *)*((_QWORD *)v7 + 2);
      if (*v9 == v9[1])
      {
        v37 = *(_QWORD *)a1;
        v38 = *(unsigned __int8 **)(a1 + 8);
        if (v38 != *(unsigned __int8 **)a1)
        {
          v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-*(_QWORD *)a1] >> 6);
          do
          {
            v40 = v39 >> 1;
            v41 = (unsigned __int8 *)(v37 + 192 * (v39 >> 1));
            v42 = *v41;
            v43 = *v7;
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[1];
            v43 = v7[1];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[2];
            v43 = v7[2];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[3];
            v43 = v7[3];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[4];
            v43 = v7[4];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[5];
            v43 = v7[5];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[6];
            v43 = v7[6];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[7];
            v43 = v7[7];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[8];
            v43 = v7[8];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[9];
            v43 = v7[9];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[10];
            v43 = v7[10];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[11];
            v43 = v7[11];
            if (v42 != v43)
              goto LABEL_60;
            v42 = v41[12];
            v43 = v7[12];
            if (v42 != v43
              || (v42 = v41[13], v43 = v7[13], v42 != v43)
              || (v42 = v41[14], v43 = v7[14], v42 != v43)
              || (v42 = v41[15], v43 = v7[15], v42 != v43))
            {
LABEL_60:
              if (v42 < v43)
              {
                v40 = v39 + ~v40;
                v37 = (uint64_t)(v41 + 192);
              }
            }
            v39 = v40;
          }
          while (v40);
          v44 = (unsigned __int8 *)v37;
          v37 = *(_QWORD *)(a1 + 8);
          v38 = v44;
        }
        if ((unsigned __int8 *)v37 != v38
          && ((char)sub_22319835C(v38, v7) & 0x80000000) == 0
          && ((char)sub_22319835C(v7, v38) & 0x80000000) == 0
          && *(unsigned __int8 **)(a1 + 8) != v38)
        {
          sub_22342F1AC(a1, v38);
        }
        goto LABEL_4;
      }
      v53 = *(_OWORD *)v7;
      v10 = *((_QWORD *)v7 + 3);
      v54[0] = v9;
      v54[1] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v55 = 0;
      LOBYTE(v56) = 0;
      v60 = 0;
      if (v7[96])
      {
        v13 = *((_OWORD *)v7 + 2);
        v14 = *((_OWORD *)v7 + 3);
        v15 = *((_OWORD *)v7 + 5);
        v58 = *((_OWORD *)v7 + 4);
        v59 = v15;
        v56 = v13;
        v57 = v14;
        v60 = 1;
      }
      v16 = *(_OWORD *)(v7 + 100);
      v62 = v7[116];
      v61 = v16;
      v17 = (float **)*((_QWORD *)v7 + 2);
      v64 = 0uLL;
      v63 = 0;
      v18 = *v17;
      if (*v17 != v17[1])
      {
        v19 = *(_QWORD *)v18;
        *((float *)&v64 + 3) = v18[2];
        *(_QWORD *)((char *)&v64 + 4) = v19;
        v20 = *(_QWORD *)v18;
        *(float *)&v64 = v18[2];
        v63 = v20;
        v21 = v17[1];
        if (v18 != v21)
        {
          v23 = *((float *)&v63 + 1);
          v22 = *(float *)&v63;
          v25 = *((float *)&v64 + 1);
          v24 = *(float *)&v64;
          v27 = *((float *)&v64 + 3);
          v26 = *((float *)&v64 + 2);
          do
          {
            if (*v18 < v22)
              v22 = *v18;
            *(float *)&v63 = v22;
            if (v18[1] < v23)
              v23 = v18[1];
            *((float *)&v63 + 1) = v23;
            if (v18[2] < v24)
              v24 = v18[2];
            *(float *)&v64 = v24;
            if (v25 < *v18)
              v25 = *v18;
            *((float *)&v64 + 1) = v25;
            if (v26 < v18[1])
              v26 = v18[1];
            *((float *)&v64 + 2) = v26;
            if (v27 < v18[2])
              v27 = v18[2];
            *((float *)&v64 + 3) = v27;
            v18 += 3;
          }
          while (v18 != v21);
        }
      }
      v65 = 0;
      v67 = 0;
      v28 = sub_223410C78((uint64_t *)a1, v7, (uint64_t)&v53);
      if (!v67)
        break;
      v29 = v66;
      if (!v66)
        break;
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (v31)
        break;
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v32 = v55;
      if (v55 != -1)
        goto LABEL_33;
LABEL_34:
      if ((v46 & 1) != 0)
      {
        sub_2233B5644((uint64_t)(v28 + 16), &v53);
        sub_2233C6D48(&v47, (uint64_t)&v53, (uint64_t)(v28 + 144), v33);
        if (v28[184])
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v28 + 22);
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        *(_OWORD *)(v28 + 168) = v47;
        v28[184] = 1;
      }
LABEL_4:
      v7 += 120;
      if (v7 == v8)
        goto LABEL_70;
    }
    v32 = v55;
    if (v55 == -1)
      goto LABEL_34;
LABEL_33:
    ((void (*)(__int128 *, _QWORD *))off_24EC36F58[v32])(&v47, v54);
    goto LABEL_34;
  }
LABEL_70:
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a4 + 24) = *(_BYTE *)(a1 + 24);
  return kdebug_trace();
}

void sub_22342A5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22342A5E4(__int128 **a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *v3;
  __int128 v4;
  __int128 *v5;
  __int128 *v6;
  _OWORD *v7;
  unsigned __int8 *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  int64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  unsigned int *v60;
  unsigned int v61;
  char *v62;
  _BYTE *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  __int128 v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __n128 v98;
  char *v99;
  char *v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v115;
  void *v116[2];
  unint64_t v117;
  char v118;
  char v119;
  __int128 v120;
  _QWORD v121[2];
  unsigned int v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127;
  __int128 v128;
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  __int128 v134;
  char v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[16];
  unsigned int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned __int8 v144;
  __int128 v145;
  char v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  __int128 v151;
  unsigned __int8 v152;
  void *__p[2];
  __int128 v154;
  _QWORD v155[2];
  unsigned int v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char v161;
  __int128 v162;
  char v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  __int128 v168;
  char v169;
  unint64_t *v170;
  uint64_t v171;

  v3 = a3;
  v171 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v117 = 0;
  *(_OWORD *)v116 = 0u;
  v6 = *a1;
  v5 = a1[1];
  v115 = v5;
  if (*a1 != v5)
  {
    v113 = v3;
    while (1)
    {
      if (**((_QWORD **)v6 + 2) == *(_QWORD *)(*((_QWORD *)v6 + 2) + 8))
      {
        v27 = (__int128 *)*((_QWORD *)v3 + 1);
        v26 = *((_QWORD *)v3 + 2);
        if ((unint64_t)v27 < v26)
        {
          *v27 = *v6;
          v7 = v27 + 1;
        }
        else
        {
          v28 = *(__int128 **)v3;
          v29 = ((uint64_t)v27 - *(_QWORD *)v3) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            sub_22316E078();
          v31 = v26 - (_QWORD)v28;
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 >> 60)
              sub_223174E94();
            v33 = (char *)operator new(16 * v32);
          }
          else
          {
            v33 = 0;
          }
          v75 = &v33[16 * v29];
          *(_OWORD *)v75 = *v6;
          v76 = v75;
          if (v27 != v28)
          {
            do
            {
              *((_OWORD *)v76 - 1) = *(v27 - 1);
              v76 -= 16;
              --v27;
            }
            while (v27 != v28);
            v27 = *(__int128 **)v3;
          }
          v7 = v75 + 16;
          *(_QWORD *)v3 = v76;
          *((_QWORD *)v3 + 1) = v75 + 16;
          *((_QWORD *)v3 + 2) = &v33[16 * v32];
          if (v27)
            operator delete(v27);
        }
        *((_QWORD *)v3 + 1) = v7;
        goto LABEL_5;
      }
      v8 = sub_22342B690(a2, (unsigned __int8 *)v6);
      v120 = *v6;
      v14 = *((_QWORD *)v6 + 3);
      v121[0] = *((_QWORD *)v6 + 2);
      v121[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v122 = 0;
      LOBYTE(v123) = 0;
      v127 = 0;
      if (*((_BYTE *)v6 + 96))
      {
        v17 = v6[2];
        v18 = v6[3];
        v19 = v6[5];
        v125 = v6[4];
        v126 = v19;
        v123 = v17;
        v124 = v18;
        v127 = 1;
      }
      v20 = *(__int128 *)((char *)v6 + 100);
      v129 = *((_BYTE *)v6 + 116);
      v128 = v20;
      v21 = *((_QWORD *)v8 + 16);
      v131 = *((_DWORD *)v8 + 34);
      v130 = v21;
      LODWORD(v21) = *((_DWORD *)v8 + 37);
      v132 = *(_QWORD *)(v8 + 140);
      v133 = v21;
      LOBYTE(v134) = 0;
      v135 = 0;
      if (v8[168])
      {
        v22 = *((_QWORD *)v8 + 20);
        *(_QWORD *)&v134 = *((_QWORD *)v8 + 19);
        *((_QWORD *)&v134 + 1) = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          v25 = v122;
        }
        else
        {
          v25 = 0;
        }
        v135 = 1;
      }
      else
      {
        v25 = 0;
      }
      v136 = *v6;
      v137 = v120;
      v138[0] = 0;
      v139 = -1;
      if (v25 != 0xFFFFFFFFLL)
      {
        ((void (*)(void **, _BYTE *, _QWORD *))off_24EC36F68[v25])(__p, v138, v121);
        v139 = v25;
      }
      LOBYTE(v140) = 0;
      v144 = 0;
      if (v127)
      {
        v140 = v123;
        v141 = v124;
        v142 = v125;
        v143 = v126;
        v34 = 1;
        v144 = 1;
      }
      else
      {
        v34 = 0;
      }
      v145 = v128;
      v146 = v129;
      v147 = v130;
      v148 = v131;
      v149 = v132;
      v150 = v133;
      LOBYTE(v151) = 0;
      v152 = 0;
      if (v135)
      {
        v151 = v134;
        v134 = 0uLL;
        v35 = 1;
        v152 = 1;
        v36 = (unsigned __int8 *)v116[0];
        v37 = (unsigned __int8 *)v116[1];
        v38 = (char *)v116[1] - (char *)v116[0];
        if (v116[1] == v116[0])
          goto LABEL_60;
      }
      else
      {
        v35 = 0;
        v36 = (unsigned __int8 *)v116[0];
        v37 = (unsigned __int8 *)v116[1];
        v38 = (char *)v116[1] - (char *)v116[0];
        if (v116[1] == v116[0])
        {
LABEL_60:
          v40 = v37;
          if (v36 == v37)
            goto LABEL_94;
          goto LABEL_61;
        }
      }
      v13 = v136;
      v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 6);
      v9 = (unsigned int *)BYTE8(v136);
      v10 = BYTE9(v136);
      v11 = BYTE10(v136);
      v12 = BYTE11(v136);
      v40 = v36;
      do
      {
        v41 = v39 >> 1;
        v42 = &v40[192 * (v39 >> 1)];
        v43 = *v42;
        v44 = v136;
        if (v43 != v136)
          goto LABEL_55;
        v43 = v42[1];
        v44 = BYTE1(v136);
        if (v43 != BYTE1(v136))
          goto LABEL_55;
        v43 = v42[2];
        v44 = BYTE2(v136);
        if (v43 != BYTE2(v136))
          goto LABEL_55;
        v43 = v42[3];
        v44 = BYTE3(v136);
        if (v43 != BYTE3(v136))
          goto LABEL_55;
        v43 = v42[4];
        v44 = BYTE4(v136);
        if (v43 != BYTE4(v136))
          goto LABEL_55;
        v43 = v42[5];
        v44 = BYTE5(v136);
        if (v43 != BYTE5(v136))
          goto LABEL_55;
        v43 = v42[6];
        v44 = BYTE6(v136);
        if (v43 != BYTE6(v136))
          goto LABEL_55;
        v43 = v42[7];
        v44 = BYTE7(v136);
        if (v43 != BYTE7(v136))
          goto LABEL_55;
        v43 = v42[8];
        v44 = BYTE8(v136);
        if (v43 != BYTE8(v136))
          goto LABEL_55;
        v43 = v42[9];
        v44 = BYTE9(v136);
        if (v43 != BYTE9(v136))
          goto LABEL_55;
        v43 = v42[10];
        v44 = BYTE10(v136);
        if (v43 != BYTE10(v136))
          goto LABEL_55;
        v43 = v42[11];
        v44 = BYTE11(v136);
        if (v43 != BYTE11(v136))
          goto LABEL_55;
        v43 = v42[12];
        v44 = BYTE12(v136);
        v12 = BYTE11(v136);
        if (v43 != BYTE12(v136)
          || (v43 = v42[13], v44 = BYTE13(v136), v43 != BYTE13(v136))
          || (v43 = v42[14], v44 = BYTE14(v136), v43 != BYTE14(v136))
          || (v43 = v42[15], v44 = HIBYTE(v136), v43 != HIBYTE(v136)))
        {
LABEL_55:
          if (v43 < v44)
          {
            v41 = v39 + ~v41;
            v40 = v42 + 192;
          }
        }
        v39 = v41;
      }
      while (v41);
      if (v37 == v40)
        goto LABEL_94;
LABEL_61:
      v45 = *v40;
      v46 = v136;
      v47 = v45 >= v136;
      if (v45 != v136)
        goto LABEL_91;
      v45 = v40[1];
      v46 = BYTE1(v136);
      v47 = v45 >= BYTE1(v136);
      if (v45 != BYTE1(v136))
        goto LABEL_91;
      v45 = v40[2];
      v46 = BYTE2(v136);
      v47 = v45 >= BYTE2(v136);
      if (v45 == BYTE2(v136) && (v45 = v40[3], v46 = BYTE3(v136), v47 = v45 >= BYTE3(v136), v45 == BYTE3(v136)))
      {
        v48 = v40[4];
        v49 = BYTE4(v136);
        if (v48 == BYTE4(v136))
        {
          v48 = v40[5];
          v49 = BYTE5(v136);
          if (v48 == BYTE5(v136))
          {
            v48 = v40[6];
            v49 = BYTE6(v136);
            if (v48 == BYTE6(v136))
            {
              v48 = v40[7];
              v49 = BYTE7(v136);
              if (v48 == BYTE7(v136))
              {
                v48 = v40[8];
                v49 = BYTE8(v136);
                if (v48 == BYTE8(v136))
                {
                  v48 = v40[9];
                  v49 = BYTE9(v136);
                  if (v48 == BYTE9(v136))
                  {
                    v48 = v40[10];
                    v49 = BYTE10(v136);
                    if (v48 == BYTE10(v136))
                    {
                      v48 = v40[11];
                      v49 = BYTE11(v136);
                      if (v48 == BYTE11(v136))
                      {
                        v48 = v40[12];
                        v49 = BYTE12(v136);
                        if (v48 == BYTE12(v136))
                        {
                          v48 = v40[13];
                          v49 = BYTE13(v136);
                          if (v48 == BYTE13(v136))
                          {
                            v48 = v40[14];
                            v49 = BYTE14(v136);
                            if (v48 == BYTE14(v136))
                            {
                              v48 = v40[15];
                              v49 = HIBYTE(v136);
                              if (v48 == HIBYTE(v136))
                                goto LABEL_78;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v48 >= v49)
        {
LABEL_78:
          v46 = BYTE4(v136);
          v45 = v40[4];
          if (BYTE4(v136) == v45)
          {
            v46 = BYTE5(v136);
            v45 = v40[5];
            if (BYTE5(v136) == v45)
            {
              v46 = BYTE6(v136);
              v45 = v40[6];
              if (BYTE6(v136) == v45)
              {
                v46 = BYTE7(v136);
                v45 = v40[7];
                if (BYTE7(v136) == v45)
                {
                  v46 = BYTE8(v136);
                  v45 = v40[8];
                  if (BYTE8(v136) == v45)
                  {
                    v46 = BYTE9(v136);
                    v45 = v40[9];
                    if (BYTE9(v136) == v45)
                    {
                      v46 = BYTE10(v136);
                      v45 = v40[10];
                      if (BYTE10(v136) == v45)
                      {
                        v46 = BYTE11(v136);
                        v45 = v40[11];
                        if (BYTE11(v136) == v45)
                        {
                          v46 = BYTE12(v136);
                          v45 = v40[12];
                          if (BYTE12(v136) == v45)
                          {
                            v46 = BYTE13(v136);
                            v45 = v40[13];
                            if (BYTE13(v136) == v45)
                            {
                              v46 = BYTE14(v136);
                              v45 = v40[14];
                              if (BYTE14(v136) == v45)
                              {
                                v46 = HIBYTE(v136);
                                v45 = v40[15];
                                if (HIBYTE(v136) == v45)
                                  goto LABEL_164;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_93:
          if (v46 >= v45)
            goto LABEL_164;
        }
      }
      else
      {
LABEL_91:
        if (v47)
          goto LABEL_93;
      }
LABEL_94:
      v50 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v36) >> 6);
      if ((unint64_t)v37 >= v117)
      {
        v55 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 6) + 1;
        if (v55 > 0x155555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(v117 - (_QWORD)v36) >> 6) > v55)
          v55 = 0x5555555555555556 * ((uint64_t)(v117 - (_QWORD)v36) >> 6);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - (_QWORD)v36) >> 6) >= 0xAAAAAAAAAAAAAALL)
          v56 = 0x155555555555555;
        else
          v56 = v55;
        v155[0] = &v117;
        if (v56)
        {
          if (v56 > 0x155555555555555)
            sub_223174E94();
          v57 = (char *)operator new(192 * v56);
        }
        else
        {
          v57 = 0;
        }
        v73 = &v57[64 * ((v40 - v36) >> 6)];
        __p[0] = v57;
        __p[1] = v73;
        *(_QWORD *)&v154 = v73;
        *((_QWORD *)&v154 + 1) = &v57[192 * v56];
        if (v50 == v56)
        {
          if (v40 - v36 < 1)
          {
            if (v40 == v36)
              v77 = 1;
            else
              v77 = 0x5555555555555556 * ((v40 - v36) >> 6);
            if (v77 > 0x155555555555555)
              sub_223174E94();
            v78 = (char *)operator new(192 * v77);
            v73 = &v78[192 * (v77 >> 2)];
            __p[0] = v78;
            __p[1] = v73;
            *(_QWORD *)&v154 = v73;
            *((_QWORD *)&v154 + 1) = &v78[192 * v77];
            if (v57)
              operator delete(v57);
          }
          else
          {
            v74 = v50 + 2;
            if (v50 >= -1)
              v74 = v50 + 1;
            v73 -= 192 * (v74 >> 1);
            *(_QWORD *)&v154 = v73;
            __p[1] = v73;
          }
        }
        v79 = v137;
        *(_OWORD *)v73 = v136;
        *((_OWORD *)v73 + 1) = v79;
        v73[32] = 0;
        *((_DWORD *)v73 + 12) = -1;
        v80 = v139;
        if (v139 != -1)
        {
          ((void (*)(char *, char *, _BYTE *))off_24EC36F68[v139])(&v119, v73 + 32, v138);
          *((_DWORD *)v73 + 12) = v80;
        }
        v73[56] = 0;
        v73[120] = 0;
        if (v144)
        {
          v81 = v141;
          *(_OWORD *)(v73 + 56) = v140;
          *(_OWORD *)(v73 + 72) = v81;
          v82 = v143;
          *(_OWORD *)(v73 + 88) = v142;
          *(_OWORD *)(v73 + 104) = v82;
          v73[120] = 1;
        }
        *(_OWORD *)(v73 + 124) = v145;
        v73[140] = v146;
        *((_DWORD *)v73 + 38) = v148;
        *((_QWORD *)v73 + 18) = v147;
        *(_QWORD *)(v73 + 156) = v149;
        *((_DWORD *)v73 + 41) = v150;
        v73[168] = 0;
        v73[184] = 0;
        if (v152)
        {
          *(_OWORD *)(v73 + 168) = v151;
          v151 = 0uLL;
          v73[184] = 1;
        }
        *(_QWORD *)&v154 = v154 + 192;
        sub_223411C68(v116, __p, (uint64_t)v40);
        v83 = __p[1];
        while (2)
        {
          v84 = v154;
          if ((void *)v154 == v83)
          {
            if (__p[0])
              operator delete(__p[0]);
            goto LABEL_163;
          }
          *(_QWORD *)&v154 = v154 - 192;
          if (!*(_BYTE *)(v84 - 8))
            goto LABEL_157;
          v85 = *(std::__shared_weak_count **)(v84 - 16);
          if (!v85)
            goto LABEL_157;
          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldaxr(p_shared_owners);
          while (__stlxr(v87 - 1, p_shared_owners));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
            v88 = *(unsigned int *)(v84 - 144);
            if ((_DWORD)v88 != -1)
LABEL_158:
              ((void (*)(char *, uint64_t))off_24EC36F58[v88])(&v119, v84 - 160);
          }
          else
          {
LABEL_157:
            v88 = *(unsigned int *)(v84 - 144);
            if ((_DWORD)v88 != -1)
              goto LABEL_158;
          }
          *(_DWORD *)(v84 - 144) = -1;
          continue;
        }
      }
      if (v40 != v37)
      {
        v170 = &v117;
        *(_OWORD *)__p = v136;
        v154 = v137;
        LOBYTE(v155[0]) = 0;
        v156 = -1;
        if (v25 != 0xFFFFFFFFLL)
        {
          ((void (*)(char *, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))off_24EC36F68[v25])(&v119, v155, v138, v10, v11, v12, v13);
          v156 = v25;
          v34 = v144;
        }
        LOBYTE(v157) = 0;
        v161 = 0;
        if (v34)
        {
          v157 = v140;
          v158 = v141;
          v159 = v142;
          v160 = v143;
          v161 = 1;
        }
        v162 = v145;
        v163 = v146;
        v164 = v147;
        v165 = v148;
        v166 = v149;
        v167 = v150;
        LOBYTE(v168) = 0;
        v169 = 0;
        if (v152)
        {
          v168 = v151;
          v151 = 0uLL;
          v169 = 1;
        }
        sub_2234115F0((uint64_t)v116, (uint64_t)v40, (unint64_t)v116[1], (uint64_t)(v40 + 192));
        *(_OWORD *)v40 = *(_OWORD *)__p;
        sub_223410D6C((uint64_t)&v36[64 * ((v40 - v36) >> 6) + 16], (uint64_t)&v154);
        if (!v169)
          goto LABEL_107;
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
        if (!*((_QWORD *)&v168 + 1))
          goto LABEL_107;
        v52 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
          v54 = v156;
          if (v156 == -1)
            goto LABEL_163;
        }
        else
        {
LABEL_107:
          v54 = v156;
          if (v156 == -1)
            goto LABEL_163;
        }
        ((void (*)(char *, _QWORD *))off_24EC36F58[v54])(&v119, v155);
        goto LABEL_163;
      }
      *(_OWORD *)v37 = v136;
      v58 = (char *)&v36[64 * ((v40 - v36) >> 6)];
      v59 = v137;
      *((_DWORD *)v58 + 12) = -1;
      v60 = (unsigned int *)(v58 + 48);
      *((_OWORD *)v60 - 2) = v59;
      *((_BYTE *)v60 - 16) = 0;
      v9 = v60 - 4;
      v61 = v139;
      if (v139 != -1)
      {
        ((void (*)(void **, unsigned int *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))off_24EC36F68[v139])(__p, v9, v138, v10, v11, v12, v13);
        *v60 = v61;
      }
      v62 = (char *)&v36[64 * ((v40 - v36) >> 6)];
      v62[120] = 0;
      v63 = v62 + 120;
      *(v63 - 64) = 0;
      if (v144)
      {
        v64 = v140;
        v65 = v141;
        v66 = v143;
        *((_OWORD *)v63 - 2) = v142;
        *((_OWORD *)v63 - 1) = v66;
        *((_OWORD *)v63 - 4) = v64;
        *((_OWORD *)v63 - 3) = v65;
        *v63 = 1;
      }
      v67 = (char *)&v36[64 * ((v40 - v36) >> 6)];
      v68 = v145;
      v67[140] = v146;
      *(_OWORD *)(v67 + 124) = v68;
      v69 = v147;
      *((_DWORD *)v67 + 38) = v148;
      *((_QWORD *)v67 + 18) = v69;
      v70 = v149;
      v71 = v150;
      v67[184] = 0;
      v72 = v67 + 184;
      *((_DWORD *)v72 - 5) = v71;
      *(_QWORD *)(v72 - 28) = v70;
      *(v72 - 16) = 0;
      if (v152)
      {
        *((_OWORD *)v72 - 1) = v151;
        v151 = 0uLL;
        *v72 = 1;
      }
      v116[1] = v37 + 192;
LABEL_163:
      v35 = v152;
LABEL_164:
      v3 = v113;
      if (v35)
      {
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
        if (*((_QWORD *)&v151 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *, unsigned int *))v89->__on_zero_shared)(v89, v9);
            std::__shared_weak_count::__release_weak(v89);
            v92 = v139;
            if (v139 == -1)
              goto LABEL_171;
LABEL_170:
            ((void (*)(void **, _BYTE *))off_24EC36F58[v92])(__p, v138);
            goto LABEL_171;
          }
        }
      }
      v92 = v139;
      if (v139 != -1)
        goto LABEL_170;
LABEL_171:
      v139 = -1;
      if (v135)
      {
        v93 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
        if (*((_QWORD *)&v134 + 1))
        {
          v94 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
            v96 = v122;
            if (v122 == -1)
              goto LABEL_5;
LABEL_177:
            ((void (*)(void **, _QWORD *))off_24EC36F58[v96])(__p, v121);
            goto LABEL_5;
          }
        }
      }
      v96 = v122;
      if (v122 != -1)
        goto LABEL_177;
LABEL_5:
      v6 = (__int128 *)((char *)v6 + 120);
      if (v6 == v115)
      {
        v4 = *(_OWORD *)v116;
        v97 = v117;
        LOBYTE(v5) = v118;
        goto LABEL_186;
      }
    }
  }
  v97 = 0;
LABEL_186:
  *(_OWORD *)__p = v4;
  *(_QWORD *)&v154 = v97;
  v116[1] = 0;
  v117 = 0;
  v116[0] = 0;
  BYTE8(v154) = (_BYTE)v5;
  v98 = sub_22341348C((void **)v3 + 3, (__n128 *)__p);
  *((_BYTE *)v3 + 48) = BYTE8(v154);
  v99 = (char *)__p[0];
  if (!__p[0])
    goto LABEL_201;
  v100 = (char *)__p[1];
  v101 = __p[0];
  if (__p[1] == __p[0])
    goto LABEL_200;
  do
  {
    if (!*(v100 - 8))
      goto LABEL_195;
    v102 = (std::__shared_weak_count *)*((_QWORD *)v100 - 2);
    if (!v102)
      goto LABEL_195;
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (v104)
    {
LABEL_195:
      v105 = *((unsigned int *)v100 - 36);
      if ((_DWORD)v105 == -1)
        goto LABEL_189;
LABEL_196:
      ((void (*)(__int128 *, char *, __n128))off_24EC36F58[v105])(&v136, v100 - 160, v98);
      goto LABEL_189;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v102->__on_zero_shared)(v102, v98);
    std::__shared_weak_count::__release_weak(v102);
    v105 = *((unsigned int *)v100 - 36);
    if ((_DWORD)v105 != -1)
      goto LABEL_196;
LABEL_189:
    *((_DWORD *)v100 - 36) = -1;
    v100 -= 192;
  }
  while (v100 != v99);
  v101 = __p[0];
LABEL_200:
  __p[1] = v99;
  operator delete(v101);
LABEL_201:
  v106 = (char *)v116[0];
  if (!v116[0])
    return;
  v107 = (char *)v116[1];
  v108 = v116[0];
  if (v116[1] == v116[0])
    goto LABEL_215;
  if (!*(v107 - 8))
    goto LABEL_210;
  v109 = (std::__shared_weak_count *)*((_QWORD *)v107 - 2);
  if (!v109)
    goto LABEL_210;
  while (2)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v98);
      std::__shared_weak_count::__release_weak(v109);
      v112 = *((unsigned int *)v107 - 36);
      if ((_DWORD)v112 != -1)
LABEL_211:
        ((void (*)(void **, char *, __n128))off_24EC36F58[v112])(__p, v107 - 160, v98);
    }
    else
    {
LABEL_210:
      v112 = *((unsigned int *)v107 - 36);
      if ((_DWORD)v112 != -1)
        goto LABEL_211;
    }
    *((_DWORD *)v107 - 36) = -1;
    v107 -= 192;
    if (v107 != v106)
      continue;
    break;
  }
  v108 = v116[0];
LABEL_215:
  v116[1] = v106;
  operator delete(v108);
}

void sub_22342B5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_223410744((uint64_t)&STACK[0x270]);
  sub_22342B800((uint64_t)&a63);
  sub_223410850((uint64_t)&a41);
  sub_22340E698(&a35);
  sub_22340E78C(a22);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_22342B690(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  std::logic_error *exception;
  std::string v11;

  v3 = *(unsigned __int8 **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v4)
    goto LABEL_14;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 6);
  do
  {
    v7 = &v3[192 * (v6 >> 1)];
    v8 = (char)sub_22319835C(v7, a2);
    if (v8 >= 0)
      v6 >>= 1;
    else
      v6 += ~(v6 >> 1);
    if (v8 < 0)
      v3 = v7 + 192;
  }
  while (v6);
  if (*(unsigned __int8 **)(a1 + 8) == v3
    || (sub_22319835C(v3, a2) & 0x80) != 0
    || (sub_22319835C(a2, v3) & 0x80) != 0
    || v3 == *(unsigned __int8 **)(a1 + 8))
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_22342F2E4("FlatMap::at:  key not found (", a2, (uint64_t)")");
    std::logic_error::logic_error(exception, &v11);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
  }
  return v3 + 16;
}

void sub_22342B7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_22342B800(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 176);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        v5 = *(unsigned int *)(a1 + 48);
        if ((_DWORD)v5 == -1)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24EC36F58[v5])(&v7, a1 + 32);
LABEL_8:
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

void sub_22342B8A8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;

  v5 = *(_QWORD *)(a2 + 1872);
  for (i = *(_QWORD *)(a2 + 1880); v5 != i; v5 += 248)
  {
    v7 = (char *)operator new(0x110uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24EC36FD0;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v5;
    *((_QWORD *)v7 + 5) = *(_QWORD *)(v5 + 16);
    v8 = *(_QWORD *)(v5 + 24);
    *((_QWORD *)v7 + 6) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *(_OWORD *)(v5 + 32);
    v12 = *(_OWORD *)(v5 + 48);
    v13 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v7 + 104) = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v7 + 88) = v13;
    *(_OWORD *)(v7 + 72) = v12;
    *(_OWORD *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 120) = *(_OWORD *)(v5 + 96);
    v14 = *(_OWORD *)(v5 + 112);
    v15 = *(_OWORD *)(v5 + 128);
    v16 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(v7 + 184) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(v7 + 168) = v16;
    *(_OWORD *)(v7 + 152) = v15;
    *(_OWORD *)(v7 + 136) = v14;
    v17 = *(_OWORD *)(v5 + 176);
    v18 = *(_OWORD *)(v5 + 192);
    v19 = *(_OWORD *)(v5 + 208);
    *(_OWORD *)(v7 + 248) = *(_OWORD *)(v5 + 224);
    *(_OWORD *)(v7 + 232) = v19;
    *(_OWORD *)(v7 + 216) = v18;
    *(_OWORD *)(v7 + 200) = v17;
    v20 = *(_WORD *)(v5 + 240);
    *((_WORD *)v7 + 132) = v20;
    v28 = v7 + 24;
    v29 = (std::__shared_weak_count *)v7;
    if ((v20 & 0x30) != 0)
      sub_22342D92C((unsigned __int8 **)a1, (unsigned __int8 *)v5);
    else
      sub_22342BA6C((_QWORD **)a1, (unsigned __int8 *)v5, &v28);
    v21 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v24 = (_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 8);
  *a3 = *(_QWORD *)a1;
  a3[1] = v25;
  v26 = a3 + 1;
  v27 = *(_QWORD *)(a1 + 16);
  a3[2] = v27;
  if (v27)
  {
    *(_QWORD *)(v25 + 16) = v26;
    *(_QWORD *)a1 = v24;
    *v24 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *a3 = v26;
  }
}

void sub_22342BA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_22342BA6C(_QWORD **a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v28;
  unsigned __int8 *v29;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (v7)
  {
    v8 = (unsigned __int8 *)(a1 + 1);
    do
    {
      v9 = sub_22319835C((unsigned __int8 *)v7 + 32, a2);
      if (v9 >= 0)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9 >= 0)
        v8 = (unsigned __int8 *)v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v8 != (unsigned __int8 *)v6 && (sub_22319835C(a2, v8 + 32) & 0x80) == 0)
    {
      v12 = (_QWORD *)*a3;
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        v13 = v11 + 1;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)v8 + 7);
      *((_QWORD *)v8 + 6) = v12;
      *((_QWORD *)v8 + 7) = v11;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return v8;
    }
    v6 = (uint64_t *)v8;
  }
  v18 = sub_22341EF18(a1, v6, &v29, &v28, a2);
  v8 = *(unsigned __int8 **)v18;
  if (!*(_QWORD *)v18)
  {
    v19 = v18;
    v20 = (unsigned __int8 *)operator new(0x40uLL);
    v8 = v20;
    *((_OWORD *)v20 + 2) = *(_OWORD *)a2;
    v21 = a3[1];
    *((_QWORD *)v20 + 6) = *a3;
    *((_QWORD *)v20 + 7) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v29;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v24;
    *(_QWORD *)v19 = v20;
    v25 = (_QWORD *)**a1;
    v26 = (uint64_t *)v20;
    if (v25)
    {
      *a1 = v25;
      v26 = *(uint64_t **)v19;
    }
    sub_2231A9A8C(a1[1], v26);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v8;
}

__n128 sub_22342BBF8@<Q0>(unsigned __int8 **a1@<X0>, uint64_t **a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  __int128 *v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 *v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  char v65;
  uint64_t *v66;
  unsigned __int8 v67;
  const void *v68;
  size_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  const char *v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  const char *v77;
  size_t v78;
  _BYTE *v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  size_t v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  size_t v91;
  size_t v92;
  _QWORD *p_dst;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  __int128 v143;
  __n128 result;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  const char *__src;
  _QWORD v149[3];
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  char *v159;
  std::__shared_weak_count *v160;
  _QWORD *__dst;
  __int128 v162;
  char __s[37];
  _BYTE v164[24];
  __int128 v165;
  void *v166[2];
  unint64_t v167;
  char v168;
  _QWORD v169[5];

  v169[2] = *MEMORY[0x24BDAC8D0];
  a2[1] = 0;
  v4 = (unsigned __int8 *)(a2 + 1);
  *a2 = (uint64_t *)(a2 + 1);
  a2[4] = 0;
  v5 = a2 + 4;
  a2[5] = 0;
  a2[2] = 0;
  a2[3] = (uint64_t *)(a2 + 4);
  *((_OWORD *)a2 + 3) = xmmword_2245F6154;
  *((_OWORD *)a2 + 4) = *(_OWORD *)algn_2245F6164;
  *((_OWORD *)a2 + 5) = xmmword_2245F6174;
  *((_OWORD *)a2 + 6) = unk_2245F6184;
  *((_BYTE *)a2 + 112) = 0;
  *((_BYTE *)a2 + 128) = 0;
  v6 = (__int128 *)*a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    while (1)
    {
      v8 = *(uint64_t **)v4;
      v9 = v4;
      v10 = v4;
      if (*(_QWORD *)v4)
        break;
LABEL_43:
      v17 = operator new(0x198uLL);
      v18 = *v6;
      *v17 = 0;
      v17[1] = 0;
      *((_OWORD *)v17 + 2) = v18;
      *((_OWORD *)v17 + 3) = 0u;
      *((_OWORD *)v17 + 4) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_OWORD *)v17 + 7) = 0u;
      *((_OWORD *)v17 + 8) = 0u;
      *((_OWORD *)v17 + 9) = 0u;
      *((_OWORD *)v17 + 10) = 0u;
      *((_OWORD *)v17 + 11) = 0u;
      *((_OWORD *)v17 + 12) = 0u;
      *((_OWORD *)v17 + 13) = 0u;
      *((_OWORD *)v17 + 14) = 0u;
      *((_OWORD *)v17 + 15) = 0u;
      *((_OWORD *)v17 + 16) = 0u;
      *((_OWORD *)v17 + 17) = 0u;
      *((_OWORD *)v17 + 18) = 0u;
      *((_OWORD *)v17 + 19) = 0u;
      *((_OWORD *)v17 + 20) = 0u;
      *((_OWORD *)v17 + 21) = 0u;
      *((_OWORD *)v17 + 22) = 0u;
      *((_OWORD *)v17 + 23) = 0u;
      *((_OWORD *)v17 + 24) = 0u;
      v17[50] = 0;
      v17[2] = v10;
      *(_QWORD *)v9 = v17;
      v19 = v17;
      v20 = (uint64_t *)**a2;
      if (v20)
      {
        *a2 = v20;
        v19 = *(uint64_t **)v9;
      }
      v21 = *(uint64_t **)v4;
      v22 = v19 == *(uint64_t **)v4;
      *((_BYTE *)v19 + 24) = v22;
      if (!v22)
      {
        do
        {
          v23 = v19[2];
          if (*(_BYTE *)(v23 + 24))
            break;
          v24 = *(uint64_t **)(v23 + 16);
          v25 = *v24;
          if (*v24 == v23)
          {
            v28 = v24[1];
            if (!v28 || (v29 = *(unsigned __int8 *)(v28 + 24), v26 = (_BYTE *)(v28 + 24), v29))
            {
              if (*(uint64_t **)v23 == v19)
              {
                *(_BYTE *)(v23 + 24) = 1;
                *((_BYTE *)v24 + 24) = 0;
                v32 = *(_QWORD *)(v23 + 8);
                *v24 = v32;
                if (v32)
                  goto LABEL_60;
              }
              else
              {
                v30 = *(uint64_t **)(v23 + 8);
                v31 = *v30;
                *(_QWORD *)(v23 + 8) = *v30;
                if (v31)
                {
                  *(_QWORD *)(v31 + 16) = v23;
                  v24 = *(uint64_t **)(v23 + 16);
                }
                v30[2] = (uint64_t)v24;
                *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v30;
                *v30 = v23;
                *(_QWORD *)(v23 + 16) = v30;
                v24 = (uint64_t *)v30[2];
                v23 = *v24;
                *((_BYTE *)v30 + 24) = 1;
                *((_BYTE *)v24 + 24) = 0;
                v32 = *(_QWORD *)(v23 + 8);
                *v24 = v32;
                if (v32)
LABEL_60:
                  *(_QWORD *)(v32 + 16) = v24;
              }
              *(_QWORD *)(v23 + 16) = v24[2];
              *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v23;
              *(_QWORD *)(v23 + 8) = v24;
LABEL_67:
              v24[2] = v23;
              break;
            }
          }
          else if (!v25 || (v27 = *(unsigned __int8 *)(v25 + 24), v26 = (_BYTE *)(v25 + 24), v27))
          {
            if (*(uint64_t **)v23 == v19)
            {
              v34 = v19[1];
              *(_QWORD *)v23 = v34;
              if (v34)
              {
                *(_QWORD *)(v34 + 16) = v23;
                v24 = *(uint64_t **)(v23 + 16);
              }
              v19[2] = (uint64_t)v24;
              *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v19;
              v19[1] = v23;
              *(_QWORD *)(v23 + 16) = v19;
              v24 = (uint64_t *)v19[2];
              *((_BYTE *)v19 + 24) = 1;
              *((_BYTE *)v24 + 24) = 0;
              v23 = v24[1];
              v33 = *(uint64_t **)v23;
              v24[1] = *(_QWORD *)v23;
              if (v33)
LABEL_65:
                v33[2] = (uint64_t)v24;
            }
            else
            {
              *(_BYTE *)(v23 + 24) = 1;
              *((_BYTE *)v24 + 24) = 0;
              v23 = v24[1];
              v33 = *(uint64_t **)v23;
              v24[1] = *(_QWORD *)v23;
              if (v33)
                goto LABEL_65;
            }
            *(_QWORD *)(v23 + 16) = v24[2];
            *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v23;
            *(_QWORD *)v23 = v24;
            goto LABEL_67;
          }
          *(_BYTE *)(v23 + 24) = 1;
          v19 = v24;
          *((_BYTE *)v24 + 24) = v24 == v21;
          *v26 = 1;
        }
        while (v24 != v21);
      }
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
LABEL_69:
      sub_22342D07C((uint64_t)(v17 + 6), v6);
      v6 = (__int128 *)((char *)v6 + 360);
      if (v6 == (__int128 *)v7)
        goto LABEL_77;
    }
    v11 = *(unsigned __int8 *)v6;
    while (1)
    {
      while (1)
      {
        v10 = (unsigned __int8 *)v8;
        v12 = *((unsigned __int8 *)v8 + 32);
        v13 = v11 >= v12;
        if (v11 == v12)
          break;
        v14 = *(unsigned __int8 *)v6;
LABEL_38:
        if (v13)
          goto LABEL_40;
LABEL_4:
        v8 = *(uint64_t **)v10;
        v9 = v10;
        if (!*(_QWORD *)v10)
          goto LABEL_43;
      }
      v14 = *((unsigned __int8 *)v6 + 1);
      v12 = v10[33];
      v13 = v14 >= v12;
      if (v14 != v12)
        goto LABEL_38;
      v15 = *((unsigned __int8 *)v6 + 2);
      v16 = v10[34];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 3);
      v16 = v10[35];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 4);
      v16 = v10[36];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 5);
      v16 = v10[37];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 6);
      v16 = v10[38];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 7);
      v16 = v10[39];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 8);
      v16 = v10[40];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 9);
      v16 = v10[41];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 10);
      v16 = v10[42];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 11);
      v16 = v10[43];
      if (v15 != v16)
        goto LABEL_21;
      v15 = *((unsigned __int8 *)v6 + 12);
      v16 = v10[44];
      if (v15 != v16
        || (v15 = *((unsigned __int8 *)v6 + 13), v16 = v10[45], v15 != v16)
        || (v15 = *((unsigned __int8 *)v6 + 14), v16 = v10[46], v15 != v16)
        || (v15 = *((unsigned __int8 *)v6 + 15), v16 = v10[47], v15 != v16))
      {
LABEL_21:
        if (v15 < v16)
          goto LABEL_4;
      }
      v12 = v10[34];
      v14 = *((unsigned __int8 *)v6 + 2);
      if (v12 == v14)
      {
        v12 = v10[35];
        v14 = *((unsigned __int8 *)v6 + 3);
        if (v12 == v14)
        {
          v12 = v10[36];
          v14 = *((unsigned __int8 *)v6 + 4);
          if (v12 == v14)
          {
            v12 = v10[37];
            v14 = *((unsigned __int8 *)v6 + 5);
            if (v12 == v14)
            {
              v12 = v10[38];
              v14 = *((unsigned __int8 *)v6 + 6);
              if (v12 == v14)
              {
                v12 = v10[39];
                v14 = *((unsigned __int8 *)v6 + 7);
                if (v12 == v14)
                {
                  v12 = v10[40];
                  v14 = *((unsigned __int8 *)v6 + 8);
                  if (v12 == v14)
                  {
                    v12 = v10[41];
                    v14 = *((unsigned __int8 *)v6 + 9);
                    if (v12 == v14)
                    {
                      v12 = v10[42];
                      v14 = *((unsigned __int8 *)v6 + 10);
                      if (v12 == v14)
                      {
                        v12 = v10[43];
                        v14 = *((unsigned __int8 *)v6 + 11);
                        if (v12 == v14)
                        {
                          v12 = v10[44];
                          v14 = *((unsigned __int8 *)v6 + 12);
                          if (v12 == v14)
                          {
                            v12 = v10[45];
                            v14 = *((unsigned __int8 *)v6 + 13);
                            if (v12 == v14)
                            {
                              v12 = v10[46];
                              v14 = *((unsigned __int8 *)v6 + 14);
                              if (v12 == v14)
                              {
                                v12 = v10[47];
                                v14 = *((unsigned __int8 *)v6 + 15);
                                if (v12 == v14)
                                {
LABEL_62:
                                  v17 = v10;
                                  goto LABEL_69;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_40:
      if (v12 >= v14)
        goto LABEL_62;
      v8 = (uint64_t *)*((_QWORD *)v10 + 1);
      if (!v8)
      {
        v9 = v10 + 8;
        goto LABEL_43;
      }
    }
  }
LABEL_77:
  v35 = (__int128 *)a1[3];
  v36 = a1[4];
  if (v35 != (__int128 *)v36)
  {
    while (1)
    {
      v37 = *v5;
      v38 = v5;
      v39 = v5;
      if (*v5)
        break;
LABEL_119:
      v46 = operator new(0x198uLL);
      v47 = *v35;
      *v46 = 0;
      v46[1] = 0;
      *((_OWORD *)v46 + 2) = v47;
      *((_OWORD *)v46 + 3) = 0u;
      *((_OWORD *)v46 + 4) = 0u;
      *((_OWORD *)v46 + 5) = 0u;
      *((_OWORD *)v46 + 6) = 0u;
      *((_OWORD *)v46 + 7) = 0u;
      *((_OWORD *)v46 + 8) = 0u;
      *((_OWORD *)v46 + 9) = 0u;
      *((_OWORD *)v46 + 10) = 0u;
      *((_OWORD *)v46 + 11) = 0u;
      *((_OWORD *)v46 + 12) = 0u;
      *((_OWORD *)v46 + 13) = 0u;
      *((_OWORD *)v46 + 14) = 0u;
      *((_OWORD *)v46 + 15) = 0u;
      *((_OWORD *)v46 + 16) = 0u;
      *((_OWORD *)v46 + 17) = 0u;
      *((_OWORD *)v46 + 18) = 0u;
      *((_OWORD *)v46 + 19) = 0u;
      *((_OWORD *)v46 + 20) = 0u;
      *((_OWORD *)v46 + 21) = 0u;
      *((_OWORD *)v46 + 22) = 0u;
      *((_OWORD *)v46 + 23) = 0u;
      *((_OWORD *)v46 + 24) = 0u;
      v46[50] = 0;
      v46[2] = v39;
      *v38 = v46;
      v48 = v46;
      v49 = (uint64_t *)*a2[3];
      if (v49)
      {
        a2[3] = v49;
        v48 = *v38;
      }
      v50 = *v5;
      v22 = v48 == *v5;
      *((_BYTE *)v48 + 24) = v22;
      if (!v22)
      {
        do
        {
          v51 = v48[2];
          if (*(_BYTE *)(v51 + 24))
            break;
          v52 = *(uint64_t **)(v51 + 16);
          v53 = *v52;
          if (*v52 == v51)
          {
            v56 = v52[1];
            if (!v56 || (v57 = *(unsigned __int8 *)(v56 + 24), v54 = (_BYTE *)(v56 + 24), v57))
            {
              if (*(uint64_t **)v51 == v48)
              {
                *(_BYTE *)(v51 + 24) = 1;
                *((_BYTE *)v52 + 24) = 0;
                v60 = *(_QWORD *)(v51 + 8);
                *v52 = v60;
                if (v60)
                  goto LABEL_136;
              }
              else
              {
                v58 = *(uint64_t **)(v51 + 8);
                v59 = *v58;
                *(_QWORD *)(v51 + 8) = *v58;
                if (v59)
                {
                  *(_QWORD *)(v59 + 16) = v51;
                  v52 = *(uint64_t **)(v51 + 16);
                }
                v58[2] = (uint64_t)v52;
                *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8 * (**(_QWORD **)(v51 + 16) != v51)) = v58;
                *v58 = v51;
                *(_QWORD *)(v51 + 16) = v58;
                v52 = (uint64_t *)v58[2];
                v51 = *v52;
                *((_BYTE *)v58 + 24) = 1;
                *((_BYTE *)v52 + 24) = 0;
                v60 = *(_QWORD *)(v51 + 8);
                *v52 = v60;
                if (v60)
LABEL_136:
                  *(_QWORD *)(v60 + 16) = v52;
              }
              *(_QWORD *)(v51 + 16) = v52[2];
              *(_QWORD *)(v52[2] + 8 * (*(_QWORD *)v52[2] != (_QWORD)v52)) = v51;
              *(_QWORD *)(v51 + 8) = v52;
LABEL_143:
              v52[2] = v51;
              break;
            }
          }
          else if (!v53 || (v55 = *(unsigned __int8 *)(v53 + 24), v54 = (_BYTE *)(v53 + 24), v55))
          {
            if (*(uint64_t **)v51 == v48)
            {
              v62 = v48[1];
              *(_QWORD *)v51 = v62;
              if (v62)
              {
                *(_QWORD *)(v62 + 16) = v51;
                v52 = *(uint64_t **)(v51 + 16);
              }
              v48[2] = (uint64_t)v52;
              *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8 * (**(_QWORD **)(v51 + 16) != v51)) = v48;
              v48[1] = v51;
              *(_QWORD *)(v51 + 16) = v48;
              v52 = (uint64_t *)v48[2];
              *((_BYTE *)v48 + 24) = 1;
              *((_BYTE *)v52 + 24) = 0;
              v51 = v52[1];
              v61 = *(uint64_t **)v51;
              v52[1] = *(_QWORD *)v51;
              if (v61)
LABEL_141:
                v61[2] = (uint64_t)v52;
            }
            else
            {
              *(_BYTE *)(v51 + 24) = 1;
              *((_BYTE *)v52 + 24) = 0;
              v51 = v52[1];
              v61 = *(uint64_t **)v51;
              v52[1] = *(_QWORD *)v51;
              if (v61)
                goto LABEL_141;
            }
            *(_QWORD *)(v51 + 16) = v52[2];
            *(_QWORD *)(v52[2] + 8 * (*(_QWORD *)v52[2] != (_QWORD)v52)) = v51;
            *(_QWORD *)v51 = v52;
            goto LABEL_143;
          }
          *(_BYTE *)(v51 + 24) = 1;
          v48 = v52;
          *((_BYTE *)v52 + 24) = v52 == v50;
          *v54 = 1;
        }
        while (v52 != v50);
      }
      a2[5] = (uint64_t *)((char *)a2[5] + 1);
LABEL_145:
      sub_22342D07C((uint64_t)(v46 + 6), v35);
      v35 = (__int128 *)((char *)v35 + 360);
      if (v35 == (__int128 *)v36)
        goto LABEL_153;
    }
    v40 = *(unsigned __int8 *)v35;
    while (1)
    {
      while (1)
      {
        v39 = (uint64_t **)v37;
        v41 = *((unsigned __int8 *)v37 + 32);
        v42 = v40 >= v41;
        if (v40 == v41)
          break;
        v43 = *(unsigned __int8 *)v35;
LABEL_114:
        if (v42)
          goto LABEL_116;
LABEL_80:
        v37 = *v39;
        v38 = v39;
        if (!*v39)
          goto LABEL_119;
      }
      v43 = *((unsigned __int8 *)v35 + 1);
      v41 = *((unsigned __int8 *)v39 + 33);
      v42 = v43 >= v41;
      if (v43 != v41)
        goto LABEL_114;
      v44 = *((unsigned __int8 *)v35 + 2);
      v45 = *((unsigned __int8 *)v39 + 34);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 3);
      v45 = *((unsigned __int8 *)v39 + 35);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 4);
      v45 = *((unsigned __int8 *)v39 + 36);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 5);
      v45 = *((unsigned __int8 *)v39 + 37);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 6);
      v45 = *((unsigned __int8 *)v39 + 38);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 7);
      v45 = *((unsigned __int8 *)v39 + 39);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 8);
      v45 = *((unsigned __int8 *)v39 + 40);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 9);
      v45 = *((unsigned __int8 *)v39 + 41);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 10);
      v45 = *((unsigned __int8 *)v39 + 42);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 11);
      v45 = *((unsigned __int8 *)v39 + 43);
      if (v44 != v45)
        goto LABEL_97;
      v44 = *((unsigned __int8 *)v35 + 12);
      v45 = *((unsigned __int8 *)v39 + 44);
      if (v44 != v45
        || (v44 = *((unsigned __int8 *)v35 + 13), v45 = *((unsigned __int8 *)v39 + 45), v44 != v45)
        || (v44 = *((unsigned __int8 *)v35 + 14), v45 = *((unsigned __int8 *)v39 + 46), v44 != v45)
        || (v44 = *((unsigned __int8 *)v35 + 15), v45 = *((unsigned __int8 *)v39 + 47), v44 != v45))
      {
LABEL_97:
        if (v44 < v45)
          goto LABEL_80;
      }
      v41 = *((unsigned __int8 *)v39 + 34);
      v43 = *((unsigned __int8 *)v35 + 2);
      if (v41 == v43)
      {
        v41 = *((unsigned __int8 *)v39 + 35);
        v43 = *((unsigned __int8 *)v35 + 3);
        if (v41 == v43)
        {
          v41 = *((unsigned __int8 *)v39 + 36);
          v43 = *((unsigned __int8 *)v35 + 4);
          if (v41 == v43)
          {
            v41 = *((unsigned __int8 *)v39 + 37);
            v43 = *((unsigned __int8 *)v35 + 5);
            if (v41 == v43)
            {
              v41 = *((unsigned __int8 *)v39 + 38);
              v43 = *((unsigned __int8 *)v35 + 6);
              if (v41 == v43)
              {
                v41 = *((unsigned __int8 *)v39 + 39);
                v43 = *((unsigned __int8 *)v35 + 7);
                if (v41 == v43)
                {
                  v41 = *((unsigned __int8 *)v39 + 40);
                  v43 = *((unsigned __int8 *)v35 + 8);
                  if (v41 == v43)
                  {
                    v41 = *((unsigned __int8 *)v39 + 41);
                    v43 = *((unsigned __int8 *)v35 + 9);
                    if (v41 == v43)
                    {
                      v41 = *((unsigned __int8 *)v39 + 42);
                      v43 = *((unsigned __int8 *)v35 + 10);
                      if (v41 == v43)
                      {
                        v41 = *((unsigned __int8 *)v39 + 43);
                        v43 = *((unsigned __int8 *)v35 + 11);
                        if (v41 == v43)
                        {
                          v41 = *((unsigned __int8 *)v39 + 44);
                          v43 = *((unsigned __int8 *)v35 + 12);
                          if (v41 == v43)
                          {
                            v41 = *((unsigned __int8 *)v39 + 45);
                            v43 = *((unsigned __int8 *)v35 + 13);
                            if (v41 == v43)
                            {
                              v41 = *((unsigned __int8 *)v39 + 46);
                              v43 = *((unsigned __int8 *)v35 + 14);
                              if (v41 == v43)
                              {
                                v41 = *((unsigned __int8 *)v39 + 47);
                                v43 = *((unsigned __int8 *)v35 + 15);
                                if (v41 == v43)
                                {
LABEL_138:
                                  v46 = v39;
                                  goto LABEL_145;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_116:
      if (v41 >= v43)
        goto LABEL_138;
      v37 = v39[1];
      if (!v37)
      {
        v38 = v39 + 1;
        goto LABEL_119;
      }
    }
  }
LABEL_153:
  if (*((_BYTE *)a1 + 128))
  {
    v63 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v64 = v4;
      do
      {
        v65 = sub_22319835C((unsigned __int8 *)(v63 + 32), (unsigned __int8 *)a1 + 112);
        if (v65 >= 0)
          v66 = (uint64_t *)v63;
        else
          v66 = (uint64_t *)(v63 + 8);
        if (v65 >= 0)
          v64 = (unsigned __int8 *)v63;
        v63 = *v66;
      }
      while (*v66);
      if (v64 != v4 && ((char)sub_22319835C((unsigned __int8 *)a1 + 112, v64 + 32) & 0x80000000) == 0)
      {
        *((_OWORD *)a2 + 7) = *((_OWORD *)a1 + 7);
        *((_BYTE *)a2 + 128) = *((_BYTE *)a1 + 128);
        goto LABEL_283;
      }
    }
    v67 = atomic_load((unsigned __int8 *)&qword_2557892F0);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_2557892F0))
    {
      __cxa_atexit((void (*)(void *))sub_2231A8A28, &unk_255789280, &dword_22314D000);
      __cxa_guard_release(&qword_2557892F0);
    }
    sub_223429EA8(v164);
    if (*(char *)(*(_QWORD *)v164 + 39) < 0)
    {
      v68 = *(const void **)(*(_QWORD *)v164 + 16);
      v69 = *(_QWORD *)(*(_QWORD *)v164 + 24);
    }
    else
    {
      v68 = (const void *)(*(_QWORD *)v164 + 16);
      v69 = *(unsigned __int8 *)(*(_QWORD *)v164 + 39);
    }
    sub_223195728((uint64_t)&unk_255789280, v68, v69, "Room boundary result has current room set to %.13s, which is missing from the list of rooms.", 0x5CuLL);
    sub_223429F9C(&v156);
    if (**(int **)(v156 + 56) <= 5)
    {
      v70 = *(unsigned __int8 *)(v156 + 72);
      v71 = sub_22322F254(v156, "OSLogSurrogateAppender", 1, 0);
      v72 = v71;
      if (v70 || v71)
      {
        v149[0] = &v156;
        v149[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v149[2] = std::chrono::system_clock::now().__d_.__rep_;
        v150 = 5;
        v151 = "unknown file";
        v152 = 255;
        v154 = 0;
        v155 = 0;
        v153 = "unknown function";
        sub_2245664AC((unsigned __int8 *)a1 + 112, __s);
        v147 = v156;
        if (*(char *)(v156 + 39) < 0)
        {
          v74 = *(const char **)(v156 + 16);
          v73 = *(_QWORD *)(v156 + 24);
          v146 = v156 + 16;
          v76 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v76 & 1) != 0)
            goto LABEL_176;
        }
        else
        {
          v73 = *(unsigned __int8 *)(v156 + 39);
          v74 = (const char *)(v156 + 16);
          v146 = v156 + 16;
          v75 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v75 & 1) != 0)
            goto LABEL_176;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v164);
          sub_223199C58("com.apple.cv3d", (unint64_t)v164, &xmmword_255788F40);
          if ((_BYTE)v165 && (v164[23] & 0x80000000) != 0)
            operator delete(*(void **)v164);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_176:
        if (byte_255788F57 >= 0)
          v77 = (const char *)&xmmword_255788F40;
        else
          v77 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v78 = byte_255788F57;
        else
          v78 = *((_QWORD *)&xmmword_255788F40 + 1);
        __src = v74;
        *(_QWORD *)v164 = os_log_create(v77, v74);
        v79 = &v164[8];
        if (v78 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v78 >= 0x17)
        {
          v80 = v72;
          v81 = v70;
          v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v78 | 7) != 0x17)
            v82 = v78 | 7;
          v83 = v82 + 1;
          v79 = operator new(v82 + 1);
          *(_QWORD *)&v164[16] = v78;
          *(_QWORD *)&v165 = v83 | 0x8000000000000000;
          *(_QWORD *)&v164[8] = v79;
          v70 = v81;
          v72 = v80;
        }
        else
        {
          BYTE7(v165) = v78;
          if (!v78)
          {
LABEL_190:
            v79[v78] = 0;
            BYTE8(v165) = 1;
            v84 = v166;
            if (v73 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v73 >= 0x17)
            {
              v85 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v73 | 7) != 0x17)
                v85 = v73 | 7;
              v86 = v85 + 1;
              v84 = (void **)operator new(v85 + 1);
              v166[1] = (void *)v73;
              v167 = v86 | 0x8000000000000000;
              v166[0] = v84;
            }
            else
            {
              HIBYTE(v167) = v73;
              if (!v73)
              {
LABEL_198:
                *((_BYTE *)v84 + v73) = 0;
                v168 = 1;
                v87 = *(NSObject **)v164;
                if (SHIBYTE(v167) < 0)
                  operator delete(v166[0]);
                if (BYTE8(v165) && SBYTE7(v165) < 0)
                  operator delete(*(void **)&v164[8]);
                if (*(_QWORD *)v164)
                  os_release(*(void **)v164);
                if (!v72 || !*(_QWORD *)(v72 + 24))
                {
                  os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
                  *(_QWORD *)v164 = 0xD04100202;
                  *(_WORD *)&v164[8] = 2080;
                  *(_QWORD *)&v164[10] = __s;
                  v94 = (void *)_os_log_send_and_compose_impl();
                  if (v94)
                    free(v94);
                  goto LABEL_276;
                }
                v88 = _os_log_pack_size();
                v89 = (std::__shared_weak_count_vtbl *)operator new(v88, (std::align_val_t)8uLL);
                v90 = (std::__shared_weak_count *)operator new();
                v90->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v90->__shared_owners_ = 0;
                v90->__shared_weak_owners_ = 0;
                v90[1].__vftable = v89;
                *(_QWORD *)&v157 = v89;
                *((_QWORD *)&v157 + 1) = v89;
                v159 = 0;
                v160 = 0;
                v158 = v90;
                v91 = strlen(__s);
                if (v91 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v92 = v91;
                if (v91 >= 0x17)
                {
                  v95 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v91 | 7) != 0x17)
                    v95 = v91 | 7;
                  v96 = v95 + 1;
                  p_dst = operator new(v95 + 1);
                  *(_QWORD *)&v162 = v92;
                  *((_QWORD *)&v162 + 1) = v96 | 0x8000000000000000;
                  __dst = p_dst;
                }
                else
                {
                  HIBYTE(v162) = v91;
                  p_dst = &__dst;
                  if (!v91)
                  {
LABEL_217:
                    *((_BYTE *)p_dst + v92) = 0;
                    v97 = __dst;
                    v169[0] = v162;
                    *(_QWORD *)((char *)v169 + 7) = *(_QWORD *)((char *)&v162 + 7);
                    v98 = HIBYTE(v162);
                    v99 = operator new(0x38uLL);
                    v99[1] = 0;
                    v99[2] = 0;
                    v99[3] = off_24EC1FA48;
                    *v99 = &off_24EC1F9F8;
                    v100 = v169[0];
                    v99[4] = v97;
                    v99[5] = v100;
                    *(_QWORD *)((char *)v99 + 47) = *(_QWORD *)((char *)v169 + 7);
                    *((_BYTE *)v99 + 55) = v98;
                    v169[0] = 0;
                    *(_QWORD *)((char *)v169 + 7) = 0;
                    v101 = v160;
                    v159 = (char *)(v99 + 3);
                    v160 = (std::__shared_weak_count *)v99;
                    if (v101)
                    {
                      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
                      do
                        v103 = __ldaxr(p_shared_owners);
                      while (__stlxr(v103 - 1, p_shared_owners));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                    *(_OWORD *)v164 = v157;
                    v104 = v159;
                    *(_QWORD *)&v164[16] = v158;
                    if (v158)
                    {
                      v105 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v106 = __ldxr(v105);
                      while (__stxr(v106 + 1, v105));
                    }
                    v107 = v160;
                    *(_QWORD *)&v165 = v104;
                    *((_QWORD *)&v165 + 1) = v160;
                    if (v160)
                    {
                      v108 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v109 = __ldxr(v108);
                      while (__stxr(v109 + 1, v108));
                      v166[0] = v104;
                      do
                        v110 = __ldaxr(v108);
                      while (__stlxr(v110 - 1, v108));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                        std::__shared_weak_count::__release_weak(v107);
                      }
                    }
                    else
                    {
                      v166[0] = v104;
                    }
                    v111 = v158;
                    if (v158)
                    {
                      v112 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    v114 = *(_QWORD *)v164;
                    if (*((char *)v166[0] + 31) >= 0)
                      v115 = (char *)v166[0] + 8;
                    else
                      v115 = (char *)*((_QWORD *)v166[0] + 1);
                    v116 = _os_log_pack_fill();
                    *(_DWORD *)v116 = 68157954;
                    *(_DWORD *)(v116 + 4) = 13;
                    *(_WORD *)(v116 + 8) = 2080;
                    *(_QWORD *)(v116 + 10) = v115;
                    v117 = operator new();
                    v118 = *(unsigned __int8 *)(v147 + 39);
                    v119 = v146;
                    if ((v118 & 0x80u) != 0)
                    {
                      v119 = *(_QWORD *)(v147 + 16);
                      v118 = *(_QWORD *)(v147 + 24);
                    }
                    *(_QWORD *)v117 = v114;
                    *(_OWORD *)(v117 + 8) = *(_OWORD *)&v164[8];
                    *(_QWORD *)&v164[8] = 0;
                    *(_QWORD *)&v164[16] = 0;
                    *(_OWORD *)(v117 + 24) = v165;
                    v165 = 0uLL;
                    *(_QWORD *)(v117 + 40) = v119;
                    *(_QWORD *)(v117 + 48) = v118;
                    *(_BYTE *)(v117 + 56) = 16;
                    __dst = 0;
                    *(_QWORD *)&v157 = v117;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v72 + 24) + 40))(*(_QWORD *)(v72 + 24), &v157);
                    v120 = v157;
                    *(_QWORD *)&v157 = 0;
                    if (v120)
                    {
                      v121 = *(std::__shared_weak_count **)(v120 + 32);
                      if (v121)
                      {
                        v122 = (unint64_t *)&v121->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      v124 = *(std::__shared_weak_count **)(v120 + 16);
                      if (v124)
                      {
                        v125 = (unint64_t *)&v124->__shared_owners_;
                        do
                          v126 = __ldaxr(v125);
                        while (__stlxr(v126 - 1, v125));
                        if (!v126)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                        }
                      }
                      MEMORY[0x227684CE8](v120, 0x10F0C40B62ED6C6);
                      v127 = __dst;
                      __dst = 0;
                      if (v127)
                      {
                        v128 = (std::__shared_weak_count *)v127[4];
                        if (v128)
                        {
                          v129 = (unint64_t *)&v128->__shared_owners_;
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        v131 = (std::__shared_weak_count *)v127[2];
                        if (v131)
                        {
                          v132 = (unint64_t *)&v131->__shared_owners_;
                          do
                            v133 = __ldaxr(v132);
                          while (__stlxr(v133 - 1, v132));
                          if (!v133)
                          {
                            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                            std::__shared_weak_count::__release_weak(v131);
                          }
                        }
                        MEMORY[0x227684CE8](v127, 0x10F0C40B62ED6C6);
                      }
                    }
                    v134 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
                    if (*((_QWORD *)&v165 + 1))
                    {
                      v135 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
                    v137 = *(std::__shared_weak_count **)&v164[16];
                    if (*(_QWORD *)&v164[16])
                    {
                      v138 = (unint64_t *)(*(_QWORD *)&v164[16] + 8);
                      do
                        v139 = __ldaxr(v138);
                      while (__stlxr(v139 - 1, v138));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                    }
LABEL_276:
                    if (v70)
                    {
                      sub_2245664AC((unsigned __int8 *)a1 + 112, v164);
                      sub_22322C138((uint64_t)v149, "Room boundary result has current room set to %.13s, which is missing from the list of rooms.", v164);
                      sub_223182C08((uint64_t)v149);
                    }
                    sub_223182C08((uint64_t)v149);
                    v140 = v155;
                    if (v155)
                    {
                      v141 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v142 = __ldaxr(v141);
                      while (__stlxr(v142 - 1, v141));
                      if (!v142)
                      {
                        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                        std::__shared_weak_count::__release_weak(v140);
                      }
                    }
                    goto LABEL_283;
                  }
                }
                memcpy(p_dst, __s, v92);
                goto LABEL_217;
              }
            }
            memmove(v84, __src, v73);
            goto LABEL_198;
          }
        }
        memmove(v79, v77, v78);
        goto LABEL_190;
      }
    }
  }
LABEL_283:
  v143 = *((_OWORD *)a1 + 4);
  *((_OWORD *)a2 + 3) = *((_OWORD *)a1 + 3);
  *((_OWORD *)a2 + 4) = v143;
  result = *((__n128 *)a1 + 5);
  v145 = *((_OWORD *)a1 + 6);
  *((__n128 *)a2 + 5) = result;
  *((_OWORD *)a2 + 6) = v145;
  return result;
}

void sub_22342CF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  if (*(_BYTE *)(v8 - 168))
  {
    if (*(char *)(v8 - 169) < 0)
      operator delete(*(void **)(v8 - 192));
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)va);
  sub_223422A08(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_22342D07C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  if ((__int128 *)a1 != a2)
  {
    sub_2231984D0((_QWORD *)(a1 + 24), *((char **)a2 + 3), *((char **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
    sub_22342D7E8((_QWORD *)(a1 + 48), *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 2);
  }
  v6 = *((_QWORD *)a2 + 9);
  v5 = *((_QWORD *)a2 + 10);
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v5;
  if (!v9)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v13 = *((_QWORD *)a2 + 11);
    v12 = *((_QWORD *)a2 + 12);
    if (!v12)
      goto LABEL_13;
  }
  else
  {
LABEL_10:
    v13 = *((_QWORD *)a2 + 11);
    v12 = *((_QWORD *)a2 + 12);
    if (!v12)
      goto LABEL_13;
  }
  v14 = (unint64_t *)(v12 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_13:
  v16 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v12;
  if (!v16)
    goto LABEL_17;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v20 = *((_QWORD *)a2 + 13);
    v19 = *((_QWORD *)a2 + 14);
    if (!v19)
      goto LABEL_20;
  }
  else
  {
LABEL_17:
    v20 = *((_QWORD *)a2 + 13);
    v19 = *((_QWORD *)a2 + 14);
    if (!v19)
      goto LABEL_20;
  }
  v21 = (unint64_t *)(v19 + 8);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
LABEL_20:
  v23 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v19;
  if (!v23)
    goto LABEL_24;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v27 = *((_QWORD *)a2 + 15);
    v26 = *((_QWORD *)a2 + 16);
    if (!v26)
      goto LABEL_27;
  }
  else
  {
LABEL_24:
    v27 = *((_QWORD *)a2 + 15);
    v26 = *((_QWORD *)a2 + 16);
    if (!v26)
      goto LABEL_27;
  }
  v28 = (unint64_t *)(v26 + 8);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
LABEL_27:
  v30 = *(std::__shared_weak_count **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v27;
  *(_QWORD *)(a1 + 128) = v26;
  if (!v30)
    goto LABEL_31;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = (_OWORD *)(a1 + 136);
    v34 = (__int128 *)((char *)a2 + 136);
    v35 = *(unsigned __int8 *)(a1 + 200);
    if (v35 == *((unsigned __int8 *)a2 + 200))
    {
LABEL_32:
      if (v35)
      {
        v36 = *v34;
        v37 = v34[1];
        v38 = v34[3];
        v33[2] = v34[2];
        v33[3] = v38;
        *v33 = v36;
        v33[1] = v37;
        v39 = *(__int128 *)((char *)a2 + 204);
        *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
        *(_OWORD *)(a1 + 204) = v39;
        v41 = *((_QWORD *)a2 + 29);
        v40 = *((_QWORD *)a2 + 30);
        if (!v40)
          goto LABEL_47;
        goto LABEL_45;
      }
LABEL_44:
      v42 = *(__int128 *)((char *)a2 + 204);
      *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
      *(_OWORD *)(a1 + 204) = v42;
      v41 = *((_QWORD *)a2 + 29);
      v40 = *((_QWORD *)a2 + 30);
      if (!v40)
        goto LABEL_47;
      goto LABEL_45;
    }
  }
  else
  {
LABEL_31:
    v33 = (_OWORD *)(a1 + 136);
    v34 = (__int128 *)((char *)a2 + 136);
    v35 = *(unsigned __int8 *)(a1 + 200);
    if (v35 == *((unsigned __int8 *)a2 + 200))
      goto LABEL_32;
  }
  if (v35)
  {
    *(_BYTE *)(a1 + 200) = 0;
    goto LABEL_44;
  }
  v54 = *v34;
  v55 = v34[1];
  v56 = v34[3];
  v33[2] = v34[2];
  v33[3] = v56;
  *v33 = v54;
  v33[1] = v55;
  *(_BYTE *)(a1 + 200) = 1;
  v57 = *(__int128 *)((char *)a2 + 204);
  *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 204) = v57;
  v41 = *((_QWORD *)a2 + 29);
  v40 = *((_QWORD *)a2 + 30);
  if (!v40)
    goto LABEL_47;
LABEL_45:
  v43 = (unint64_t *)(v40 + 8);
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
LABEL_47:
  v45 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v41;
  *(_QWORD *)(a1 + 240) = v40;
  if (!v45)
    goto LABEL_51;
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
LABEL_51:
    v48 = (_OWORD *)(a1 + 248);
    v49 = (__int128 *)((char *)a2 + 248);
    v50 = *(unsigned __int8 *)(a1 + 312);
    if (v50 == *((unsigned __int8 *)a2 + 312))
      goto LABEL_52;
LABEL_55:
    if (v50)
    {
      *(_BYTE *)(a1 + 312) = 0;
    }
    else
    {
      v58 = *v49;
      v59 = v49[1];
      v60 = v49[3];
      v48[2] = v49[2];
      v48[3] = v60;
      *v48 = v58;
      v48[1] = v59;
      *(_BYTE *)(a1 + 312) = 1;
    }
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  v48 = (_OWORD *)(a1 + 248);
  v49 = (__int128 *)((char *)a2 + 248);
  v50 = *(unsigned __int8 *)(a1 + 312);
  if (v50 != *((unsigned __int8 *)a2 + 312))
    goto LABEL_55;
LABEL_52:
  if (v50)
  {
    v51 = *v49;
    v52 = v49[1];
    v53 = v49[3];
    v48[2] = v49[2];
    v48[3] = v53;
    *v48 = v51;
    v48[1] = v52;
  }
LABEL_60:
  v61 = *(__int128 *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
  *(_OWORD *)(a1 + 316) = v61;
  v62 = *((_QWORD *)a2 + 43);
  *(_DWORD *)(a1 + 352) = *((_DWORD *)a2 + 88);
  *(_QWORD *)(a1 + 344) = v62;
  return a1;
}

_QWORD *sub_22342D404(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v11;
    if (v12 > 0xCCCCCCCCCCCCCCCLL)
LABEL_23:
      sub_22316E078();
    v13 = 20 * v12;
    result = operator new(20 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 2) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_22342D57C(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(_QWORD *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 40;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_39;
    v18 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= __sz)
      v19 = __sz;
    v20 = v18 >= 0x333333333333333 ? 0x666666666666666 : v19;
    if (v20 > 0x666666666666666)
LABEL_39:
      sub_22316E078();
    v21 = 40 * v20;
    v22 = operator new(40 * v20);
    *a1 = (uint64_t)v22;
    a1[1] = (uint64_t)v22;
    a1[2] = (uint64_t)v22 + v21;
    v23 = sub_223261AE0(v9, v6, a3, (uint64_t)v22);
LABEL_31:
    a1[1] = v23;
    return;
  }
  v14 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v10) >> 3) < __sz)
  {
    v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      v16 = 8 * ((v14 - v10) >> 3);
      do
      {
        *(_OWORD *)v10 = *(_OWORD *)v6;
        if (v6 != v10)
          sub_2231984D0((_QWORD *)(v10 + 16), *(char **)(v6 + 16), *(char **)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 4);
        v6 += 40;
        v10 += 40;
        v16 -= 40;
      }
      while (v16);
      v10 = a1[1];
    }
    v23 = sub_223261AE0(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    v17 = *a1;
  }
  else
  {
    v17 = *a1;
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)v6;
      if (v6 != v10)
        sub_2231984D0((_QWORD *)(v10 + 16), *(char **)(v6 + 16), *(char **)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 4);
      v6 += 40;
      v10 += 40;
      v17 += 40;
    }
    while (v6 != a3);
    v14 = a1[1];
  }
  while (v14 != v17)
  {
    v24 = *(void **)(v14 - 24);
    if (v24)
    {
      *(_QWORD *)(v14 - 16) = v24;
      operator delete(v24);
    }
    v14 -= 40;
  }
  a1[1] = v17;
}

void sub_22342D7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22342D7E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_22342D7E8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_22316E078();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_22342D92C(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  char v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = (unsigned __int8 *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)(a1 + 1);
  do
  {
    v7 = sub_22319835C(v3 + 32, a2);
    if (v7 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
      v6 = v3;
    v3 = (unsigned __int8 *)*v8;
  }
  while (*v8);
  if (v6 == v2 || (sub_22319835C(a2, v6 + 32) & 0x80) != 0)
    return 0;
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  sub_2231AFE60(v14, (uint64_t *)v6);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v6 + 7);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v6);
  return 1;
}

_QWORD *sub_22342DA5C(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_22456636C((unsigned __int8 *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v12 == v4)
      {
        if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v14 != v4)
      break;
    if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

_QWORD *sub_22342DB8C(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v9 = sub_22456636C((unsigned __int8 *)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if (v17 == v9)
            {
              if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14[2] == *(_QWORD *)a2 && v14[3] == *(_QWORD *)(a2 + 8))
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v19 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = *a3;
  v20 = a4[1];
  v14[4] = *a4;
  v14[5] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v11 && (float)(v24 * (float)v11) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v26)
    {
LABEL_37:
      *v14 = *v26;
LABEL_72:
      *v26 = v14;
      goto LABEL_73;
    }
  }
  else
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_48;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_48:
        sub_2231B0668(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v26)
          goto LABEL_37;
      }
      else
      {
        v4 = v10;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v26)
          goto LABEL_37;
      }
    }
    else
    {
      v4 = v35 & v10;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v10));
      if (v26)
        goto LABEL_37;
    }
  }
  *v14 = *v19;
  *v19 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v19;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22342DEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231AFCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *sub_22342DEF4(_QWORD *a1, uint64_t a2, __int128 *a3, const void **a4)
{
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _BYTE *v12;
  const void *v13;
  int64_t v14;
  void *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  char **v25;
  char **v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 *v37;
  char *v38;
  __int128 *v39;
  char *v40;
  __int128 *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void **v51;
  char *v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  unint64_t v56;
  void *v57;
  __int128 v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v7 = (__int128 *)*a1;
  v8 = a1[1];
  v9 = (a2 - *a1) / 40;
  v10 = (__int128 *)(*a1 + 40 * v9);
  v11 = a1[2];
  if (v8 >= v11)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v7) >> 3) + 1;
    if (v19 > 0x666666666666666)
      sub_22316E078();
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v7) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x333333333333333)
      v21 = 0x666666666666666;
    else
      v21 = v19;
    v61 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x666666666666666)
        sub_223174E94();
      v22 = (char *)operator new(40 * v21);
    }
    else
    {
      v22 = 0;
    }
    *(_QWORD *)&v58 = v22;
    *((_QWORD *)&v58 + 1) = &v22[40 * v9];
    v59 = (char *)*((_QWORD *)&v58 + 1);
    v60 = &v22[40 * v21];
    sub_22342E438((uint64_t)&v58, a3, (uint64_t)a4);
    v31 = *((_QWORD *)&v58 + 1);
    v32 = (__int128 *)*a1;
    v33 = *((_QWORD *)&v58 + 1);
    if ((__int128 *)*a1 != v10)
    {
      v34 = 0;
      do
      {
        v35 = v31 + v34;
        v36 = (char *)v10 + v34;
        *(_OWORD *)(v35 - 40) = *(__int128 *)((char *)v10 + v34 - 40);
        *(_QWORD *)(v35 - 16) = 0;
        *(_QWORD *)(v35 - 8) = 0;
        *(_QWORD *)(v35 - 24) = 0;
        *(_OWORD *)(v35 - 24) = *(__int128 *)((char *)v10 + v34 - 24);
        *(_QWORD *)(v35 - 8) = *(_QWORD *)((char *)v10 + v34 - 8);
        *((_QWORD *)v36 - 3) = 0;
        *((_QWORD *)v36 - 2) = 0;
        *((_QWORD *)v36 - 1) = 0;
        v34 -= 40;
      }
      while ((__int128 *)((char *)v10 + v34) != v32);
      v33 = v31 + v34;
    }
    *((_QWORD *)&v58 + 1) = v33;
    v37 = (__int128 *)a1[1];
    v38 = v59;
    if (v37 != v10)
    {
      do
      {
        *(_OWORD *)v38 = *v10;
        *((_QWORD *)v38 + 3) = 0;
        *((_QWORD *)v38 + 4) = 0;
        *((_QWORD *)v38 + 2) = 0;
        *((_OWORD *)v38 + 1) = v10[1];
        *((_QWORD *)v38 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        *((_QWORD *)v10 + 4) = 0;
        v38 += 40;
        v10 = (__int128 *)((char *)v10 + 40);
      }
      while (v10 != v37);
      v33 = *((_QWORD *)&v58 + 1);
      v10 = (__int128 *)a1[1];
    }
    v39 = (__int128 *)*a1;
    *a1 = v33;
    a1[1] = v38;
    v40 = (char *)a1[2];
    a1[2] = v60;
    v59 = (char *)v10;
    v60 = v40;
    *(_QWORD *)&v58 = v39;
    *((_QWORD *)&v58 + 1) = v39;
    if (v10 == v39)
    {
      if (!v10)
        return (__int128 *)v31;
    }
    else
    {
      do
      {
        while (1)
        {
          v42 = (__int128 *)((char *)v10 - 40);
          v59 = (char *)v10 - 40;
          v43 = (void *)*((_QWORD *)v10 - 3);
          if (!v43)
            break;
          *((_QWORD *)v10 - 2) = v43;
          operator delete(v43);
          v10 = (__int128 *)v59;
          if (v59 == (char *)v39)
            goto LABEL_36;
        }
        v10 = (__int128 *)((char *)v10 - 40);
      }
      while (v42 != v39);
LABEL_36:
      v10 = (__int128 *)v58;
      if (!(_QWORD)v58)
        return (__int128 *)v31;
    }
    operator delete(v10);
    return (__int128 *)v31;
  }
  if (v10 != (__int128 *)v8)
  {
    v58 = *a3;
    v61 = 0;
    v62 = a1 + 2;
    v59 = 0;
    v60 = 0;
    v13 = *a4;
    v12 = a4[1];
    v14 = v12 - (_BYTE *)*a4;
    if (v12 == *a4)
    {
      v56 = 0;
      v57 = 0;
      v16 = (char *)v10 + 40;
      v17 = v8 - 40;
      v18 = v8;
      if (v8 < 0x28)
      {
LABEL_40:
        a1[1] = v18;
        if ((char *)v8 != v16)
        {
          v44 = 0;
          v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v16) >> 3);
          v46 = -40 * v45;
          v47 = (char *)v7 + 40 * v9 + 40 * v45;
          do
          {
            v48 = &v47[v44];
            v49 = v8 + v44;
            v51 = (void **)(v8 + v44 - 24);
            v50 = *v51;
            *(_OWORD *)(v8 + v44 - 40) = *(_OWORD *)&v47[v44 - 40];
            if (v50)
            {
              *(_QWORD *)(v49 - 16) = v50;
              operator delete(v50);
              *v51 = 0;
              *(_QWORD *)(v8 + v44 - 16) = 0;
              *(_QWORD *)(v8 + v44 - 8) = 0;
            }
            *(_OWORD *)v51 = *(_OWORD *)(v48 - 24);
            *(_QWORD *)(v49 - 8) = *((_QWORD *)v48 - 1);
            *((_QWORD *)v48 - 3) = 0;
            *((_QWORD *)v48 - 2) = 0;
            *((_QWORD *)v48 - 1) = 0;
            v44 -= 40;
          }
          while (v46 != v44);
        }
        *v10 = v58;
        v52 = (char *)v7 + 40 * v9;
        v55 = (void *)*((_QWORD *)v52 + 2);
        v54 = v52 + 16;
        v53 = v55;
        if (v55)
        {
          *((_QWORD *)v7 + 5 * v9 + 3) = v53;
          operator delete(v53);
          *v54 = 0;
          v54[1] = 0;
          v54[2] = 0;
        }
        *v54 = v57;
        *(__int128 *)((char *)v7 + 40 * v9 + 24) = (__int128)vdupq_n_s64(v56);
        return v10;
      }
    }
    else
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v14 >> 2) > 0xCCCCCCCCCCCCCCCLL)
        sub_22316E078();
      v15 = operator new(v14);
      v56 = (unint64_t)v15 + 4 * (v14 >> 2);
      v57 = v15;
      memcpy(v15, v13, v14);
      v16 = (char *)v10 + 40;
      v17 = v8 - 40;
      v18 = v8;
      if (v8 - 40 >= v8)
        goto LABEL_40;
    }
    do
    {
      *(_OWORD *)v18 = *(_OWORD *)v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(v17 + 16);
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      v18 += 40;
      v17 += 40;
    }
    while (v17 < v8);
    goto LABEL_40;
  }
  *v10 = *a3;
  v23 = (char *)v7 + 40 * v9;
  *((_QWORD *)v23 + 2) = 0;
  v24 = v23 + 16;
  v24[1] = 0;
  v25 = (char **)(v24 + 1);
  v24[2] = 0;
  v26 = (char **)(v24 + 2);
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v28 >> 2) > 0xCCCCCCCCCCCCCCCLL)
      sub_22316E078();
    v29 = (char *)operator new(v28);
    *v24 = v29;
    *v25 = v29;
    v30 = &v29[4 * (v28 >> 2)];
    *v26 = v30;
    memcpy(v29, v27, v28);
    *v25 = v30;
  }
  a1[1] = (char *)v10 + 40;
  return v10;
}

void sub_22342E3E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD *v4;
  void *v6;

  v6 = *v3;
  if (*v3)
  {
    *v4 = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

void sub_22342E408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22342E438(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  __int128 v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;

  v6 = *(char **)(a1 + 16);
  if (v6 == *(char **)(a1 + 24))
  {
    v7 = *(char **)a1;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8 <= *(_QWORD *)a1)
    {
      v17 = 0x999999999999999ALL * ((v6 - v7) >> 3);
      if (v6 == v7)
        v17 = 1;
      if (v17 >= 0x666666666666667)
        sub_223174E94();
      v18 = v17 >> 2;
      v19 = 40 * v17;
      v20 = (char *)operator new(40 * v17);
      v21 = &v20[40 * v18];
      v22 = &v20[v19];
      if (v6 == (char *)v8)
      {
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v22;
      }
      else
      {
        v23 = &v6[(_QWORD)v21 - v8];
        v24 = 40 * v18;
        do
        {
          v25 = &v20[v24];
          *(_OWORD *)v25 = *(_OWORD *)v8;
          *((_OWORD *)v25 + 1) = *(_OWORD *)(v8 + 16);
          *((_QWORD *)v25 + 4) = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          v24 += 40;
          v8 += 40;
        }
        while (v25 + 40 != v23);
        v7 = *(char **)a1;
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = v23;
        *(_QWORD *)(a1 + 24) = v22;
        while (v27 != v26)
        {
          v28 = *(void **)(v27 - 24);
          if (v28)
          {
            *(_QWORD *)(v27 - 16) = v28;
            operator delete(v28);
          }
          v27 -= 40;
        }
      }
      if (v7)
        operator delete(v7);
      v6 = *(char **)(a1 + 16);
    }
    else
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *(_QWORD *)a1) >> 3);
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v12 = -v11;
      if ((char *)v8 == v6)
      {
        v29 = (char *)(v8 - 40 * v11);
      }
      else
      {
        v13 = -40 * v11;
        do
        {
          v14 = v8 + v13;
          *(_OWORD *)(v8 + 40 * v12) = *(_OWORD *)v8;
          v16 = (void **)(v8 + v13 + 16);
          v15 = *v16;
          if (*v16)
          {
            *(_QWORD *)(v14 + 24) = v15;
            operator delete(v15);
            *v16 = 0;
            *(_QWORD *)(v8 + v13 + 24) = 0;
            *(_QWORD *)(v8 + v13 + 32) = 0;
          }
          *(_OWORD *)v16 = *(_OWORD *)(v8 + 16);
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          v8 += 40;
        }
        while ((char *)v8 != v6);
        v6 = *(char **)(a1 + 8);
        v29 = (char *)(v8 + 40 * v12);
      }
      *(_QWORD *)(a1 + 8) = &v6[40 * v12];
      *(_QWORD *)(a1 + 16) = v29;
      v6 = v29;
    }
  }
  v30 = *a2;
  *((_QWORD *)v6 + 2) = 0;
  *(_OWORD *)v6 = v30;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v31 = *(const void **)a3;
  v32 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v32)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v32 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
      sub_22316E078();
    v33 = (char *)operator new(v32);
    *((_QWORD *)v6 + 2) = v33;
    *((_QWORD *)v6 + 3) = v33;
    v34 = &v33[4 * (v32 >> 2)];
    *((_QWORD *)v6 + 4) = v34;
    memcpy(v33, v31, v32);
    *((_QWORD *)v6 + 3) = v34;
  }
  *(_QWORD *)(a1 + 16) += 40;
}

void sub_22342E6B8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void *v4;

  v4 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v2 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_22342E6D4(_QWORD *a1, uint64_t a2, __int128 *a3, const void **a4)
{
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _BYTE *v12;
  const void *v13;
  int64_t v14;
  void *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  char **v25;
  char **v26;
  _BYTE *v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 *v38;
  char *v39;
  __int128 *v40;
  char *v41;
  __int128 *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  void **v52;
  char *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  unint64_t v57;
  void *v58;
  __int128 v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v7 = (__int128 *)*a1;
  v8 = a1[1];
  v9 = (a2 - *a1) / 40;
  v10 = (__int128 *)(*a1 + 40 * v9);
  v11 = a1[2];
  if (v8 >= v11)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v7) >> 3) + 1;
    if (v19 > 0x666666666666666)
      sub_22316E078();
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v7) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x333333333333333)
      v21 = 0x666666666666666;
    else
      v21 = v19;
    v62 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x666666666666666)
        sub_223174E94();
      v22 = (char *)operator new(40 * v21);
    }
    else
    {
      v22 = 0;
    }
    *(_QWORD *)&v59 = v22;
    *((_QWORD *)&v59 + 1) = &v22[40 * v9];
    v60 = (char *)*((_QWORD *)&v59 + 1);
    v61 = &v22[40 * v21];
    sub_22342EBE8((uint64_t)&v59, a3, (uint64_t)a4);
    v32 = *((_QWORD *)&v59 + 1);
    v33 = (__int128 *)*a1;
    v34 = *((_QWORD *)&v59 + 1);
    if ((__int128 *)*a1 != v10)
    {
      v35 = 0;
      do
      {
        v36 = v32 + v35;
        v37 = (char *)v10 + v35;
        *(_OWORD *)(v36 - 40) = *(__int128 *)((char *)v10 + v35 - 40);
        *(_QWORD *)(v36 - 16) = 0;
        *(_QWORD *)(v36 - 8) = 0;
        *(_QWORD *)(v36 - 24) = 0;
        *(_OWORD *)(v36 - 24) = *(__int128 *)((char *)v10 + v35 - 24);
        *(_QWORD *)(v36 - 8) = *(_QWORD *)((char *)v10 + v35 - 8);
        *((_QWORD *)v37 - 3) = 0;
        *((_QWORD *)v37 - 2) = 0;
        *((_QWORD *)v37 - 1) = 0;
        v35 -= 40;
      }
      while ((__int128 *)((char *)v10 + v35) != v33);
      v34 = v32 + v35;
    }
    *((_QWORD *)&v59 + 1) = v34;
    v38 = (__int128 *)a1[1];
    v39 = v60;
    if (v38 != v10)
    {
      do
      {
        *(_OWORD *)v39 = *v10;
        *((_QWORD *)v39 + 3) = 0;
        *((_QWORD *)v39 + 4) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *((_OWORD *)v39 + 1) = v10[1];
        *((_QWORD *)v39 + 4) = *((_QWORD *)v10 + 4);
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        *((_QWORD *)v10 + 4) = 0;
        v39 += 40;
        v10 = (__int128 *)((char *)v10 + 40);
      }
      while (v10 != v38);
      v34 = *((_QWORD *)&v59 + 1);
      v10 = (__int128 *)a1[1];
    }
    v40 = (__int128 *)*a1;
    *a1 = v34;
    a1[1] = v39;
    v41 = (char *)a1[2];
    a1[2] = v61;
    v60 = (char *)v10;
    v61 = v41;
    *(_QWORD *)&v59 = v40;
    *((_QWORD *)&v59 + 1) = v40;
    if (v10 == v40)
    {
      if (!v10)
        return (__int128 *)v32;
    }
    else
    {
      do
      {
        while (1)
        {
          v43 = (__int128 *)((char *)v10 - 40);
          v60 = (char *)v10 - 40;
          v44 = (void *)*((_QWORD *)v10 - 3);
          if (!v44)
            break;
          *((_QWORD *)v10 - 2) = v44;
          operator delete(v44);
          v10 = (__int128 *)v60;
          if (v60 == (char *)v40)
            goto LABEL_36;
        }
        v10 = (__int128 *)((char *)v10 - 40);
      }
      while (v43 != v40);
LABEL_36:
      v10 = (__int128 *)v59;
      if (!(_QWORD)v59)
        return (__int128 *)v32;
    }
    operator delete(v10);
    return (__int128 *)v32;
  }
  if (v10 != (__int128 *)v8)
  {
    v59 = *a3;
    v62 = 0;
    v63 = a1 + 2;
    v60 = 0;
    v61 = 0;
    v13 = *a4;
    v12 = a4[1];
    v14 = v12 - (_BYTE *)*a4;
    if (v12 == *a4)
    {
      v57 = 0;
      v58 = 0;
      v16 = (char *)v10 + 40;
      v17 = v8 - 40;
      v18 = v8;
      if (v8 < 0x28)
      {
LABEL_40:
        a1[1] = v18;
        if ((char *)v8 != v16)
        {
          v45 = 0;
          v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v16) >> 3);
          v47 = -40 * v46;
          v48 = (char *)v7 + 40 * v9 + 40 * v46;
          do
          {
            v49 = &v48[v45];
            v50 = v8 + v45;
            v52 = (void **)(v8 + v45 - 24);
            v51 = *v52;
            *(_OWORD *)(v8 + v45 - 40) = *(_OWORD *)&v48[v45 - 40];
            if (v51)
            {
              *(_QWORD *)(v50 - 16) = v51;
              operator delete(v51);
              *v52 = 0;
              *(_QWORD *)(v8 + v45 - 16) = 0;
              *(_QWORD *)(v8 + v45 - 8) = 0;
            }
            *(_OWORD *)v52 = *(_OWORD *)(v49 - 24);
            *(_QWORD *)(v50 - 8) = *((_QWORD *)v49 - 1);
            *((_QWORD *)v49 - 3) = 0;
            *((_QWORD *)v49 - 2) = 0;
            *((_QWORD *)v49 - 1) = 0;
            v45 -= 40;
          }
          while (v47 != v45);
        }
        *v10 = v59;
        v53 = (char *)v7 + 40 * v9;
        v56 = (void *)*((_QWORD *)v53 + 2);
        v55 = v53 + 16;
        v54 = v56;
        if (v56)
        {
          *((_QWORD *)v7 + 5 * v9 + 3) = v54;
          operator delete(v54);
          *v55 = 0;
          v55[1] = 0;
          v55[2] = 0;
        }
        *v55 = v58;
        *(__int128 *)((char *)v7 + 40 * v9 + 24) = (__int128)vdupq_n_s64(v57);
        return v10;
      }
    }
    else
    {
      if (v14 < 0)
        sub_22316E078();
      v15 = operator new(v12 - (_BYTE *)*a4);
      v57 = (unint64_t)v15 + 16 * (v14 >> 4);
      v58 = v15;
      memcpy(v15, v13, v14);
      v16 = (char *)v10 + 40;
      v17 = v8 - 40;
      v18 = v8;
      if (v8 - 40 >= v8)
        goto LABEL_40;
    }
    do
    {
      *(_OWORD *)v18 = *(_OWORD *)v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(v17 + 16);
      *(_QWORD *)(v18 + 32) = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      v18 += 40;
      v17 += 40;
    }
    while (v17 < v8);
    goto LABEL_40;
  }
  *v10 = *a3;
  v23 = (char *)v7 + 40 * v9;
  *((_QWORD *)v23 + 2) = 0;
  v24 = v23 + 16;
  v24[1] = 0;
  v25 = (char **)(v24 + 1);
  v24[2] = 0;
  v26 = (char **)(v24 + 2);
  v28 = *a4;
  v27 = a4[1];
  v29 = v27 - (_BYTE *)*a4;
  if (v29)
  {
    if (v29 < 0)
      sub_22316E078();
    v30 = (char *)operator new(v27 - (_BYTE *)*a4);
    *v24 = v30;
    *v25 = v30;
    v31 = &v30[16 * (v29 >> 4)];
    *v26 = v31;
    memcpy(v30, v28, v29);
    *v25 = v31;
  }
  a1[1] = (char *)v10 + 40;
  return v10;
}

void sub_22342EB98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD *v4;
  void *v6;

  v6 = *v3;
  if (*v3)
  {
    *v4 = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

void sub_22342EBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22342EBE8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  __int128 v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;

  v6 = *(char **)(a1 + 16);
  if (v6 == *(char **)(a1 + 24))
  {
    v7 = *(char **)a1;
    v8 = *(_QWORD *)(a1 + 8);
    if (v8 <= *(_QWORD *)a1)
    {
      v17 = 0x999999999999999ALL * ((v6 - v7) >> 3);
      if (v6 == v7)
        v17 = 1;
      if (v17 >= 0x666666666666667)
        sub_223174E94();
      v18 = v17 >> 2;
      v19 = 40 * v17;
      v20 = (char *)operator new(40 * v17);
      v21 = &v20[40 * v18];
      v22 = &v20[v19];
      if (v6 == (char *)v8)
      {
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v22;
      }
      else
      {
        v23 = &v6[(_QWORD)v21 - v8];
        v24 = 40 * v18;
        do
        {
          v25 = &v20[v24];
          *(_OWORD *)v25 = *(_OWORD *)v8;
          *((_OWORD *)v25 + 1) = *(_OWORD *)(v8 + 16);
          *((_QWORD *)v25 + 4) = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          v24 += 40;
          v8 += 40;
        }
        while (v25 + 40 != v23);
        v7 = *(char **)a1;
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = v23;
        *(_QWORD *)(a1 + 24) = v22;
        while (v27 != v26)
        {
          v28 = *(void **)(v27 - 24);
          if (v28)
          {
            *(_QWORD *)(v27 - 16) = v28;
            operator delete(v28);
          }
          v27 -= 40;
        }
      }
      if (v7)
        operator delete(v7);
      v6 = *(char **)(a1 + 16);
    }
    else
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *(_QWORD *)a1) >> 3);
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v12 = -v11;
      if ((char *)v8 == v6)
      {
        v29 = (char *)(v8 - 40 * v11);
      }
      else
      {
        v13 = -40 * v11;
        do
        {
          v14 = v8 + v13;
          *(_OWORD *)(v8 + 40 * v12) = *(_OWORD *)v8;
          v16 = (void **)(v8 + v13 + 16);
          v15 = *v16;
          if (*v16)
          {
            *(_QWORD *)(v14 + 24) = v15;
            operator delete(v15);
            *v16 = 0;
            *(_QWORD *)(v8 + v13 + 24) = 0;
            *(_QWORD *)(v8 + v13 + 32) = 0;
          }
          *(_OWORD *)v16 = *(_OWORD *)(v8 + 16);
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          v8 += 40;
        }
        while ((char *)v8 != v6);
        v6 = *(char **)(a1 + 8);
        v29 = (char *)(v8 + 40 * v12);
      }
      *(_QWORD *)(a1 + 8) = &v6[40 * v12];
      *(_QWORD *)(a1 + 16) = v29;
      v6 = v29;
    }
  }
  v30 = *a2;
  *((_QWORD *)v6 + 2) = 0;
  *(_OWORD *)v6 = v30;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v31 = *(const void **)a3;
  v32 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v32)
  {
    if (v32 < 0)
      sub_22316E078();
    v33 = (char *)operator new(v32);
    *((_QWORD *)v6 + 2) = v33;
    *((_QWORD *)v6 + 3) = v33;
    v34 = &v33[16 * (v32 >> 4)];
    *((_QWORD *)v6 + 4) = v34;
    memcpy(v33, v31, v32);
    *((_QWORD *)v6 + 3) = v34;
  }
  *(_QWORD *)(a1 + 16) += 40;
}

void sub_22342EE48(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void *v4;

  v4 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v2 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22342EE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v17 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x30uLL);
  *v12 = 0;
  v12[1] = v8;
  v18 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v12 + 2) = v18;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *v12 = *v22;
LABEL_69:
      *v22 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_45;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v31 & v8;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v8));
      if (v22)
        goto LABEL_34;
    }
  }
  *v12 = *v17;
  *v17 = v12;
  *(_QWORD *)(v21 + 8 * v3) = v17;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_22342F198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2231AFCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_22342F1AC(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  char v14;

  v4 = a2 + 12;
  v5 = *(_OWORD **)(a1 + 8);
  if (a2 + 12 != v5)
  {
    v6 = a2;
    do
    {
      v7 = v6 + 12;
      *v6 = v6[12];
      sub_223410D6C((uint64_t)(v6 + 1), (uint64_t)(v6 + 13));
      v8 = v6 + 24;
      v6 += 12;
    }
    while (v8 != v5);
    v4 = *(_OWORD **)(a1 + 8);
    if (v4 == v7)
      goto LABEL_18;
LABEL_9:
    while (1)
    {
      if (*((_BYTE *)v4 - 8))
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
            break;
        }
      }
      v12 = *((unsigned int *)v4 - 36);
      if ((_DWORD)v12 != -1)
        goto LABEL_15;
LABEL_8:
      *((_DWORD *)v4 - 36) = -1;
      v4 -= 12;
      if (v4 == v7)
        goto LABEL_18;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *((unsigned int *)v4 - 36);
    if ((_DWORD)v12 == -1)
      goto LABEL_8;
LABEL_15:
    ((void (*)(char *, _OWORD *))off_24EC36F58[v12])(&v14, v4 - 10);
    goto LABEL_8;
  }
  v7 = a2;
  if (v4 != a2)
    goto LABEL_9;
LABEL_18:
  *(_QWORD *)(a1 + 8) = v7;
  return a2;
}

uint64_t sub_22342F2E4(char *__s, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_2231B0F48(v7, __s);
  sub_22319B83C((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_22316DD70();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24EC36F90[v8])(&v10, v7);
  if (v8 == -1)
    sub_22316DD70();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC36FA8[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC36F78[v8])(v9, v7);
  return result;
}

void sub_22342F3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22342F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22342F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22342F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22342F42C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22342F43C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC36FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22342F46C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_22342F4C8(uint64_t *a1@<X0>, _QWORD *j@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *i;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  __int128 *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  __int128 *v16;
  __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  unsigned __int8 *v29;
  uint64_t **v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  char v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  unsigned __int8 *v54;
  BOOL v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  char *v63;
  _QWORD *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned __int8 *v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 **v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  char *v102;
  unsigned __int8 *v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int8 *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned __int8 *v109;
  unint64_t v110;
  unsigned __int8 *v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  _DWORD *v135;
  uint64_t v136;
  char *v137;
  _BYTE *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  _BYTE *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unint64_t v158;
  char *v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  char v199;
  _QWORD *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unsigned __int8 *v216;
  char *v217;
  void *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t *v238;
  _QWORD *v240;
  unsigned __int8 *v241;
  void *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  char v245;
  uint64_t v246;
  char v247;
  void *__p[2];
  __int128 v249;
  void **v250;
  uint64_t **v251;
  uint64_t *v252;
  _BYTE v253[32];
  _BYTE v254[32];
  char v255;
  _BYTE v256[20];
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  char v263;
  void **v264;
  uint64_t v265;

  v4 = a1;
  v265 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = *a1;
  if (*a1)
  {
    if (*j)
    {
      sub_2234227AC((uint64_t)__p, v5);
      v6 = *j;
      v8 = *(unsigned __int8 **)(*j + 24);
      for (i = *(unsigned __int8 **)(*j + 32); v8 != i; v8 += 16)
      {
        sub_22342D92C((unsigned __int8 **)&v251, v8);
        sub_2234284EC((unsigned __int8 **)&v253[8], v8);
      }
      v10 = *(unsigned __int8 **)v6;
      v9 = *(unsigned __int8 **)(v6 + 8);
      if (*(unsigned __int8 **)v6 != v9)
      {
        do
        {
          v11 = (__int128 *)sub_22342DA5C(__p, (uint64_t)v10);
          v12 = v11;
          if (v11)
          {
            v13 = (unint64_t)__p[1];
            v14 = *((_QWORD *)v11 + 1);
            v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v15.i16[0] = vaddlv_u8(v15);
            if (v15.u32[0] > 1uLL)
            {
              if ((void *)v14 >= __p[1])
                v14 %= (unint64_t)__p[1];
            }
            else
            {
              v14 &= (unint64_t)__p[1] - 1;
            }
            v16 = (__int128 *)*((_QWORD *)__p[0] + v14);
            do
            {
              v17 = v16;
              v16 = *(__int128 **)v16;
            }
            while (v16 != v11);
            if (v17 == &v249)
              goto LABEL_24;
            v18 = *((_QWORD *)v17 + 1);
            if (v15.u32[0] > 1uLL)
            {
              if ((void *)v18 >= __p[1])
                v18 %= (unint64_t)__p[1];
            }
            else
            {
              v18 &= (unint64_t)__p[1] - 1;
            }
            if (v18 != v14)
            {
LABEL_24:
              if (!*(_QWORD *)v11)
                goto LABEL_25;
              v19 = *(_QWORD *)(*(_QWORD *)v11 + 8);
              if (v15.u32[0] > 1uLL)
              {
                if ((void *)v19 >= __p[1])
                  v19 %= (unint64_t)__p[1];
              }
              else
              {
                v19 &= (unint64_t)__p[1] - 1;
              }
              if (v19 != v14)
LABEL_25:
                *((_QWORD *)__p[0] + v14) = 0;
            }
            v20 = *(_QWORD *)v11;
            if (*(_QWORD *)v11)
            {
              v21 = *(_QWORD *)(v20 + 8);
              if (v15.u32[0] > 1uLL)
              {
                if (v21 >= v13)
                  v21 %= v13;
              }
              else
              {
                v21 &= v13 - 1;
              }
              if (v21 != v14)
              {
                *((_QWORD *)__p[0] + v21) = v17;
                v20 = *(_QWORD *)v11;
              }
            }
            *(_QWORD *)v17 = v20;
            *(_QWORD *)v11 = 0;
            --*((_QWORD *)&v249 + 1);
            v22 = (std::__shared_weak_count *)*((_QWORD *)v11 + 5);
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            operator delete(v12);
          }
          sub_2234284EC((unsigned __int8 **)&v254[8], v10);
          v10 += 16;
        }
        while (v10 != v9);
      }
      v240 = j;
      v25 = *(unsigned __int8 **)(v6 + 88);
      if (v25 != (unsigned __int8 *)(v6 + 96))
      {
        while (1)
        {
          v26 = v252;
          v27 = (uint64_t *)&v252;
          if (v252)
          {
            v28 = &v252;
            do
            {
              v29 = (unsigned __int8 *)v26;
              v30 = v28;
              v31 = *((unsigned __int8 *)v26 + 32);
              v32 = v25[32];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[33];
              v32 = v25[33];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[34];
              v32 = v25[34];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[35];
              v32 = v25[35];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[36];
              v32 = v25[36];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[37];
              v32 = v25[37];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[38];
              v32 = v25[38];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[39];
              v32 = v25[39];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[40];
              v32 = v25[40];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[41];
              v32 = v25[41];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[42];
              v32 = v25[42];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[43];
              v32 = v25[43];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[44];
              v32 = v25[44];
              if (v31 != v32)
                goto LABEL_62;
              v31 = v29[45];
              v32 = v25[45];
              if (v31 == v32
                && (v31 = v29[46], v32 = v25[46], v31 == v32)
                && (v31 = v29[47], v32 = v25[47], v31 == v32))
              {
                v33 = 0;
                v34 = v29;
                v28 = (uint64_t **)v29;
              }
              else
              {
LABEL_62:
                v33 = v31 < v32;
                v34 = v29 + 8;
                if (!v33)
                {
                  v34 = v29;
                  v28 = (uint64_t **)v29;
                }
              }
              v26 = *(uint64_t **)v34;
            }
            while (v26);
            v27 = (uint64_t *)&v252;
            if (v28 != &v252)
            {
              v35 = v33 ? (unsigned __int8 *)(v30 + 4) : v29 + 32;
              v36 = sub_22319835C(v25 + 32, v35);
              v27 = (uint64_t *)v28;
              if ((v36 & 0x80000000) == 0)
                break;
            }
          }
          v47 = sub_22341EF18(&v251, v27, (unsigned __int8 **)&v242, &v246, v25 + 32);
          if (*(_QWORD *)v47)
            goto LABEL_86;
          v48 = (uint64_t *)operator new(0x40uLL);
          v49 = v48;
          *((_OWORD *)v48 + 2) = *((_OWORD *)v25 + 2);
          v48[6] = *((_QWORD *)v25 + 6);
          v50 = *((_QWORD *)v25 + 7);
          v48[7] = v50;
          if (v50)
          {
            v51 = (unint64_t *)(v50 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          v53 = v242;
          *v48 = 0;
          v48[1] = 0;
          v48[2] = (uint64_t)v53;
          *(_QWORD *)v47 = v48;
          if (*v251)
          {
            v251 = (uint64_t **)*v251;
            v49 = *(uint64_t **)v47;
          }
          sub_2231A9A8C(v252, v49);
          ++*(_QWORD *)v253;
          v46 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
          if (v46)
          {
            do
            {
LABEL_94:
              v54 = v46;
              v46 = *(unsigned __int8 **)v46;
            }
            while (v46);
            goto LABEL_42;
          }
          do
          {
LABEL_96:
            v54 = (unsigned __int8 *)*((_QWORD *)v25 + 2);
            v55 = *(_QWORD *)v54 == (_QWORD)v25;
            v25 = v54;
          }
          while (!v55);
LABEL_42:
          v25 = v54;
          if (v54 == (unsigned __int8 *)(v6 + 96))
            goto LABEL_99;
        }
        if (v33)
          v37 = (unsigned __int8 *)v30;
        else
          v37 = v29;
        v39 = *((_QWORD *)v25 + 6);
        v38 = *((_QWORD *)v25 + 7);
        if (v38)
        {
          v40 = (unint64_t *)(v38 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        *((_QWORD *)v37 + 6) = v39;
        if (v33)
          v42 = (unsigned __int8 *)v30;
        else
          v42 = v29;
        v43 = (std::__shared_weak_count *)*((_QWORD *)v42 + 7);
        *((_QWORD *)v42 + 7) = v38;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t **))v43->__on_zero_shared)(v43, v28);
            std::__shared_weak_count::__release_weak(v43);
            v46 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
            if (v46)
              goto LABEL_94;
            goto LABEL_96;
          }
        }
LABEL_86:
        v46 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
        if (v46)
          goto LABEL_94;
        goto LABEL_96;
      }
LABEL_99:
      v56 = *(uint64_t **)(v6 + 64);
      for (j = v240; v56; v56 = (uint64_t *)*v56)
      {
        v68 = sub_22342DB8C((uint64_t)__p, (uint64_t)(v56 + 2), (_OWORD *)v56 + 1, v56 + 4);
        if (!v69)
        {
          v71 = v56[4];
          v70 = v56[5];
          if (v70)
          {
            v72 = (unint64_t *)(v70 + 8);
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = (std::__shared_weak_count *)v68[5];
          v68[4] = v71;
          v68[5] = v70;
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
      }
      v57 = *(unsigned __int8 **)(v6 + 112);
      v58 = *(unsigned __int8 **)(v6 + 120);
      if (v57 != v58)
      {
        do
        {
          v59 = v57 + 16;
          sub_223428684((unsigned __int8 **)&v253[8], v57, (uint64_t)(v57 + 16));
          v57 = v59 + 24;
        }
        while (v59 + 24 != v58);
      }
      v60 = *(unsigned __int8 **)(v6 + 144);
      v61 = *(unsigned __int8 **)(v6 + 152);
      v4 = a1;
      if (v60 != v61)
      {
        do
        {
          v62 = v60 + 16;
          sub_22342879C((unsigned __int8 **)&v254[8], v60, (uint64_t)(v60 + 16));
          v60 = v62 + 24;
        }
        while (v62 + 24 != v61);
      }
      v63 = (char *)operator new(0xA8uLL);
      *((_QWORD *)v63 + 1) = 0;
      *((_QWORD *)v63 + 2) = 0;
      *(_QWORD *)v63 = &off_24EC36D40;
      v64 = __p[0];
      v65 = (unint64_t)__p[1];
      *((void **)v63 + 3) = __p[0];
      __p[0] = 0;
      __p[1] = 0;
      *((_QWORD *)v63 + 4) = v65;
      v66 = v249;
      *(_OWORD *)(v63 + 40) = v249;
      *((_DWORD *)v63 + 14) = (_DWORD)v250;
      if (*((_QWORD *)&v66 + 1))
      {
        v67 = *(_QWORD *)(v66 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v67 >= v65)
            v67 %= v65;
        }
        else
        {
          v67 &= v65 - 1;
        }
        v64[v67] = v63 + 40;
        v249 = 0uLL;
      }
      v82 = (unsigned __int8 *)v251;
      v81 = v252;
      *((_QWORD *)v63 + 9) = v252;
      v83 = v63 + 72;
      *((_QWORD *)v63 + 8) = v82;
      v84 = *(_QWORD *)v253;
      *((_QWORD *)v63 + 10) = *(_QWORD *)v253;
      if (v84)
      {
        v81[2] = (uint64_t)v83;
        v251 = &v252;
        v252 = 0;
        *(_QWORD *)v253 = 0;
      }
      else
      {
        *((_QWORD *)v63 + 8) = v83;
      }
      *(_OWORD *)(v63 + 88) = *(_OWORD *)&v253[8];
      *((_QWORD *)v63 + 13) = *(_QWORD *)&v253[24];
      *(_OWORD *)&v253[8] = 0uLL;
      v63[112] = v254[0];
      *(_OWORD *)(v63 + 120) = *(_OWORD *)&v254[8];
      *((_QWORD *)v63 + 17) = *(_QWORD *)&v254[24];
      *(_QWORD *)&v253[24] = 0;
      memset(&v254[8], 0, 24);
      v63[144] = v255;
      *(_OWORD *)(v63 + 152) = *(_OWORD *)&v256[4];
      v85 = *(std::__shared_weak_count **)(a3 + 8);
      *(_QWORD *)a3 = v63 + 24;
      *(_QWORD *)(a3 + 8) = v63;
      if (!v85)
        goto LABEL_133;
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        sub_2233C8A78((uint64_t)__p);
        v80 = a1[2];
        if (!v80)
          goto LABEL_340;
      }
      else
      {
LABEL_133:
        sub_2233C8A78((uint64_t)__p);
        v80 = a1[2];
        if (!v80)
          goto LABEL_340;
      }
      goto LABEL_134;
    }
    v77 = a1[1];
    if (v77)
    {
      v78 = (unint64_t *)(v77 + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v77;
  }
  v80 = a1[2];
  if (!v80)
    goto LABEL_340;
LABEL_134:
  if (!j[2])
  {
    v210 = v4[3];
    if (v210)
    {
      v211 = (unint64_t *)(v210 + 8);
      do
        v212 = __ldxr(v211);
      while (__stxr(v212 + 1, v211));
    }
    v213 = *(std::__shared_weak_count **)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v80;
    *(_QWORD *)(a3 + 24) = v210;
    if (v213)
    {
      v214 = (unint64_t *)&v213->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    goto LABEL_340;
  }
  v238 = v4;
  sub_223426270(&v242, (uint64_t *)v80);
  v245 = *(_BYTE *)(v80 + 24);
  v88 = (unsigned __int8 **)j[2];
  v89 = *v88;
  v90 = v88[1];
  if (*v88 != v90)
  {
    do
    {
      v91 = (unsigned __int8 *)v242;
      v92 = v243;
      if (v243 != v242)
      {
        v93 = 0xAAAAAAAAAAAAAAABLL * ((v243 - (_BYTE *)v242) >> 6);
        do
        {
          v94 = v93 >> 1;
          v95 = &v91[192 * (v93 >> 1)];
          v96 = *v95;
          v97 = *v89;
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[1];
          v97 = v89[1];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[2];
          v97 = v89[2];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[3];
          v97 = v89[3];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[4];
          v97 = v89[4];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[5];
          v97 = v89[5];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[6];
          v97 = v89[6];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[7];
          v97 = v89[7];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[8];
          v97 = v89[8];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[9];
          v97 = v89[9];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[10];
          v97 = v89[10];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[11];
          v97 = v89[11];
          if (v96 != v97)
            goto LABEL_157;
          v96 = v95[12];
          v97 = v89[12];
          if (v96 != v97
            || (v96 = v95[13], v97 = v89[13], v96 != v97)
            || (v96 = v95[14], v97 = v89[14], v96 != v97)
            || (v96 = v95[15], v97 = v89[15], v96 != v97))
          {
LABEL_157:
            v98 = v95 + 192;
            v99 = v93 + ~v94;
            if (v96 < v97)
            {
              v94 = v99;
              v91 = v98;
            }
          }
          v93 = v94;
        }
        while (v94);
        v100 = v91;
        v91 = v243;
        v92 = v100;
      }
      if (v91 != v92
        && ((char)sub_22319835C(v92, v89) & 0x80000000) == 0
        && ((char)sub_22319835C(v89, v92) & 0x80000000) == 0
        && v243 != v92)
      {
        sub_22342F1AC((uint64_t)&v242, v92);
      }
      v89 += 16;
    }
    while (v89 != v90);
  }
  v101 = v88[3];
  v241 = v88[4];
  if (v101 != v241)
  {
    while (1)
    {
      v102 = (char *)v242;
      v103 = v243;
      if (v243 != v242)
      {
        v104 = 0xAAAAAAAAAAAAAAABLL * ((v243 - (_BYTE *)v242) >> 6);
        do
        {
          v105 = v104 >> 1;
          v106 = (unsigned __int8 *)&v102[192 * (v104 >> 1)];
          v107 = *v106;
          v108 = *v101;
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[1];
          v108 = v101[1];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[2];
          v108 = v101[2];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[3];
          v108 = v101[3];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[4];
          v108 = v101[4];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[5];
          v108 = v101[5];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[6];
          v108 = v101[6];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[7];
          v108 = v101[7];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[8];
          v108 = v101[8];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[9];
          v108 = v101[9];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[10];
          v108 = v101[10];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[11];
          v108 = v101[11];
          if (v107 != v108)
            goto LABEL_188;
          v107 = v106[12];
          v108 = v101[12];
          if (v107 != v108
            || (v107 = v106[13], v108 = v101[13], v107 != v108)
            || (v107 = v106[14], v108 = v101[14], v107 != v108)
            || (v107 = v106[15], v108 = v101[15], v107 != v108))
          {
LABEL_188:
            v109 = v106 + 192;
            v110 = v104 + ~v105;
            if (v107 < v108)
            {
              v105 = v110;
              v102 = (char *)v109;
            }
          }
          v104 = v105;
        }
        while (v105);
        v111 = (unsigned __int8 *)v102;
        v102 = (char *)v243;
        v103 = v111;
      }
      v112 = (__int128 *)(v101 + 16);
      if (v102 != (char *)v103
        && ((char)sub_22319835C(v103, v101) & 0x80000000) == 0
        && ((char)sub_22319835C(v101, v103) & 0x80000000) == 0)
      {
        break;
      }
      v115 = (unsigned __int8 *)v242;
      v116 = v103 - (_BYTE *)v242;
      v117 = 0xAAAAAAAAAAAAAAABLL * ((v103 - (_BYTE *)v242) >> 6);
      if (v243 >= v244)
      {
        v130 = 0xAAAAAAAAAAAAAAABLL * ((v243 - (_BYTE *)v242) >> 6) + 1;
        if (v130 > 0x155555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((v244 - (_BYTE *)v242) >> 6) > v130)
          v130 = 0x5555555555555556 * ((v244 - (_BYTE *)v242) >> 6);
        if (0xAAAAAAAAAAAAAAABLL * ((v244 - (_BYTE *)v242) >> 6) >= 0xAAAAAAAAAAAAAALL)
          v131 = 0x155555555555555;
        else
          v131 = v130;
        v250 = (void **)&v244;
        if (v131)
        {
          if (v131 > 0x155555555555555)
            sub_223174E94();
          v132 = (char *)operator new(192 * v131);
        }
        else
        {
          v132 = 0;
        }
        v151 = &v132[192 * v117];
        __p[0] = v132;
        __p[1] = v151;
        *(_QWORD *)&v249 = v151;
        *((_QWORD *)&v249 + 1) = &v132[192 * v131];
        if (v117 == v131)
        {
          if (v116 < 1)
          {
            if (v103 == v115)
              v158 = 1;
            else
              v158 = 2 * v117;
            if (v158 > 0x155555555555555)
              sub_223174E94();
            v159 = (char *)operator new(192 * v158);
            v151 = &v159[192 * (v158 >> 2)];
            __p[0] = v159;
            __p[1] = v151;
            *(_QWORD *)&v249 = v151;
            *((_QWORD *)&v249 + 1) = &v159[192 * v158];
            if (v132)
              operator delete(v132);
          }
          else
          {
            v152 = v117 + 2;
            if (v117 >= -1)
              v152 = v117 + 1;
            v151 -= 192 * (v152 >> 1);
            __p[1] = v151;
            *(_QWORD *)&v249 = v151;
          }
        }
        *(_OWORD *)v151 = *(_OWORD *)v101;
        v160 = *v112;
        v151[32] = 0;
        *((_OWORD *)v151 + 1) = v160;
        *((_DWORD *)v151 + 12) = -1;
        v161 = *((unsigned int *)v101 + 12);
        if ((_DWORD)v161 != -1)
        {
          ((void (*)(char *, char *, unsigned __int8 *))off_24EC37020[v161])(&v247, v151 + 32, v101 + 32);
          *((_DWORD *)v151 + 12) = v161;
        }
        v151[56] = 0;
        v151[120] = 0;
        if (v101[120])
        {
          v162 = *(_OWORD *)(v101 + 56);
          v163 = *(_OWORD *)(v101 + 72);
          v164 = *(_OWORD *)(v101 + 104);
          *(_OWORD *)(v151 + 88) = *(_OWORD *)(v101 + 88);
          *(_OWORD *)(v151 + 104) = v164;
          *(_OWORD *)(v151 + 56) = v162;
          *(_OWORD *)(v151 + 72) = v163;
          v151[120] = 1;
        }
        v165 = *(_OWORD *)(v101 + 124);
        v151[140] = v101[140];
        *(_OWORD *)(v151 + 124) = v165;
        v166 = *((_QWORD *)v101 + 18);
        *((_DWORD *)v151 + 38) = *((_DWORD *)v101 + 38);
        *((_QWORD *)v151 + 18) = v166;
        v167 = *(_QWORD *)(v101 + 156);
        *((_DWORD *)v151 + 41) = *((_DWORD *)v101 + 41);
        *(_QWORD *)(v151 + 156) = v167;
        v151[168] = 0;
        v151[184] = 0;
        if (v101[184])
        {
          *((_QWORD *)v151 + 21) = *((_QWORD *)v101 + 21);
          v168 = *((_QWORD *)v101 + 22);
          *((_QWORD *)v151 + 22) = v168;
          if (v168)
          {
            v169 = (unint64_t *)(v168 + 8);
            do
              v170 = __ldxr(v169);
            while (__stxr(v170 + 1, v169));
          }
          v151[184] = 1;
        }
        *(_QWORD *)&v249 = v249 + 192;
        sub_223411C68(&v242, __p, (uint64_t)v103);
        v171 = __p[1];
        v172 = v249;
        if ((void *)v249 == __p[1])
        {
LABEL_264:
          if (__p[0])
            operator delete(__p[0]);
          goto LABEL_168;
        }
        while (2)
        {
          *(_QWORD *)&v249 = v172 - 192;
          if (!*(_BYTE *)(v172 - 8))
            goto LABEL_272;
          v173 = *(std::__shared_weak_count **)(v172 - 16);
          if (!v173)
            goto LABEL_272;
          v174 = (unint64_t *)&v173->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
            v176 = *(unsigned int *)(v172 - 144);
            if ((_DWORD)v176 != -1)
LABEL_273:
              ((void (*)(uint64_t *, uint64_t))off_24EC37010[v176])(&v246, v172 - 160);
          }
          else
          {
LABEL_272:
            v176 = *(unsigned int *)(v172 - 144);
            if ((_DWORD)v176 != -1)
              goto LABEL_273;
          }
          *(_DWORD *)(v172 - 144) = -1;
          v172 = v249;
          if ((void *)v249 == v171)
            goto LABEL_264;
          continue;
        }
      }
      if (v103 == v243)
      {
        *(_OWORD *)v103 = *(_OWORD *)v101;
        v133 = (char *)&v115[192 * v117];
        v134 = *v112;
        *((_DWORD *)v133 + 12) = -1;
        v135 = v133 + 48;
        *((_OWORD *)v135 - 2) = v134;
        *((_BYTE *)v135 - 16) = 0;
        v136 = *((unsigned int *)v101 + 12);
        if ((_DWORD)v136 != -1)
        {
          ((void (*)(uint64_t *, _DWORD *, unsigned __int8 *))off_24EC37020[v136])(&v246, v135 - 4, v101 + 32);
          *v135 = v136;
        }
        v137 = (char *)&v115[192 * v117];
        v137[120] = 0;
        v138 = v137 + 120;
        *(v138 - 64) = 0;
        if (v101[120])
        {
          v139 = *(_OWORD *)(v101 + 56);
          v140 = *(_OWORD *)(v101 + 72);
          v141 = *(_OWORD *)(v101 + 104);
          *((_OWORD *)v138 - 2) = *(_OWORD *)(v101 + 88);
          *((_OWORD *)v138 - 1) = v141;
          *((_OWORD *)v138 - 4) = v139;
          *((_OWORD *)v138 - 3) = v140;
          *v138 = 1;
        }
        v142 = (char *)&v115[192 * v117];
        v143 = *(_OWORD *)(v101 + 124);
        v142[140] = v101[140];
        *(_OWORD *)(v142 + 124) = v143;
        v144 = *((_QWORD *)v101 + 18);
        *((_DWORD *)v142 + 38) = *((_DWORD *)v101 + 38);
        *((_QWORD *)v142 + 18) = v144;
        v145 = *(_QWORD *)(v101 + 156);
        v146 = *((_DWORD *)v101 + 41);
        v142[184] = 0;
        v147 = v142 + 184;
        *((_DWORD *)v147 - 5) = v146;
        *(_QWORD *)(v147 - 28) = v145;
        *(v147 - 16) = 0;
        if (v101[184])
        {
          *((_QWORD *)v147 - 2) = *((_QWORD *)v101 + 21);
          v148 = *((_QWORD *)v101 + 22);
          *(_QWORD *)&v115[192 * v117 + 176] = v148;
          if (v148)
          {
            v149 = (unint64_t *)(v148 + 8);
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          *v147 = 1;
        }
        v243 = v103 + 192;
      }
      else
      {
        v264 = (void **)&v244;
        *(_OWORD *)__p = *(_OWORD *)v101;
        v249 = *v112;
        LOBYTE(v250) = 0;
        LODWORD(v252) = -1;
        v118 = *((unsigned int *)v101 + 12);
        if ((_DWORD)v118 != -1)
        {
          ((void (*)(char *, void ***, unsigned __int8 *))off_24EC37020[v118])(&v247, &v250, v101 + 32);
          LODWORD(v252) = v118;
        }
        v253[0] = 0;
        v255 = 0;
        if (v101[120])
        {
          v119 = *(_OWORD *)(v101 + 56);
          v120 = *(_OWORD *)(v101 + 72);
          v121 = *(_OWORD *)(v101 + 104);
          *(_OWORD *)v254 = *(_OWORD *)(v101 + 88);
          *(_OWORD *)&v254[16] = v121;
          *(_OWORD *)v253 = v119;
          *(_OWORD *)&v253[16] = v120;
          v255 = 1;
        }
        v122 = *(_OWORD *)(v101 + 124);
        v256[16] = v101[140];
        *(_OWORD *)v256 = v122;
        v123 = *((_QWORD *)v101 + 18);
        v258 = *((_DWORD *)v101 + 38);
        v257 = v123;
        LODWORD(v123) = *((_DWORD *)v101 + 41);
        v259 = *(_QWORD *)(v101 + 156);
        v260 = v123;
        LOBYTE(v261) = 0;
        v263 = 0;
        if (v101[184])
        {
          v124 = (std::__shared_weak_count *)*((_QWORD *)v101 + 22);
          v261 = *((_QWORD *)v101 + 21);
          v262 = v124;
          if (v124)
          {
            v125 = (unint64_t *)&v124->__shared_owners_;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          v263 = 1;
        }
        sub_2234115F0((uint64_t)&v242, (uint64_t)v103, (unint64_t)v243, (uint64_t)(v103 + 192));
        *(_OWORD *)v103 = *(_OWORD *)__p;
        sub_223410D6C((uint64_t)&v115[192 * v117 + 16], (uint64_t)&v249);
        if (v263)
        {
          v127 = v262;
          if (v262)
          {
            v128 = (unint64_t *)&v262->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
        }
        if ((_DWORD)v252 != -1)
          ((void (*)(uint64_t *, void ***))off_24EC37010[v252])(&v246, &v250);
      }
LABEL_168:
      v101 += 192;
      if (v101 == v241)
        goto LABEL_297;
    }
    *((_OWORD *)v103 + 1) = *v112;
    v113 = *((unsigned int *)v103 + 12);
    v114 = *((unsigned int *)v101 + 12);
    if ((_DWORD)v113 == -1)
    {
      if ((_DWORD)v114 == -1)
        goto LABEL_243;
    }
    else if ((_DWORD)v114 == -1)
    {
      ((void (*)(void **, unsigned __int8 *))off_24EC37010[v113])(__p, v103 + 32);
      *((_DWORD *)v103 + 12) = -1;
LABEL_243:
      v153 = v103 + 56;
      v154 = (__int128 *)(v101 + 56);
      if (v103[120] == v101[120])
      {
        if (v103[120])
        {
          v155 = *v154;
          v156 = *(_OWORD *)(v101 + 72);
          v157 = *(_OWORD *)(v101 + 104);
          *(_OWORD *)(v103 + 88) = *(_OWORD *)(v101 + 88);
          *(_OWORD *)(v103 + 104) = v157;
          *v153 = v155;
          *(_OWORD *)(v103 + 72) = v156;
        }
      }
      else if (v103[120])
      {
        v103[120] = 0;
      }
      else
      {
        v177 = *v154;
        v178 = *(_OWORD *)(v101 + 72);
        v179 = *(_OWORD *)(v101 + 104);
        *(_OWORD *)(v103 + 88) = *(_OWORD *)(v101 + 88);
        *(_OWORD *)(v103 + 104) = v179;
        *v153 = v177;
        *(_OWORD *)(v103 + 72) = v178;
        v103[120] = 1;
      }
      v180 = *(_OWORD *)(v101 + 124);
      v103[140] = v101[140];
      *(_OWORD *)(v103 + 124) = v180;
      v181 = *((_QWORD *)v101 + 18);
      *((_DWORD *)v103 + 38) = *((_DWORD *)v101 + 38);
      *((_QWORD *)v103 + 18) = v181;
      v182 = *(_QWORD *)(v101 + 156);
      *((_DWORD *)v103 + 41) = *((_DWORD *)v101 + 41);
      *(_QWORD *)(v103 + 156) = v182;
      if (v103[184] == v101[184])
      {
        if (v103[184])
        {
          v184 = *((_QWORD *)v101 + 21);
          v183 = *((_QWORD *)v101 + 22);
          if (v183)
          {
            v185 = (unint64_t *)(v183 + 8);
            do
              v186 = __ldxr(v185);
            while (__stxr(v186 + 1, v185));
          }
          v187 = (std::__shared_weak_count *)*((_QWORD *)v103 + 22);
          *((_QWORD *)v103 + 21) = v184;
          *((_QWORD *)v103 + 22) = v183;
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
        }
      }
      else if (v103[184])
      {
        v190 = (std::__shared_weak_count *)*((_QWORD *)v103 + 22);
        if (v190)
        {
          v191 = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        v103[184] = 0;
      }
      else
      {
        *((_QWORD *)v103 + 21) = *((_QWORD *)v101 + 21);
        v193 = *((_QWORD *)v101 + 22);
        *((_QWORD *)v103 + 22) = v193;
        if (v193)
        {
          v194 = (unint64_t *)(v193 + 8);
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        v103[184] = 1;
      }
      goto LABEL_168;
    }
    __p[0] = v103 + 32;
    ((void (*)(void **))off_24EC37030[v114])(__p);
    goto LABEL_243;
  }
LABEL_297:
  v196 = v242;
  v197 = v243;
  __p[0] = v242;
  __p[1] = v243;
  v198 = v244;
  *(_QWORD *)&v249 = v244;
  v243 = 0;
  v244 = 0;
  v242 = 0;
  v199 = v245;
  BYTE8(v249) = v245;
  v200 = operator new(0x38uLL);
  v200[1] = 0;
  v200[2] = 0;
  *v200 = &off_24EC36240;
  v200[3] = v196;
  v200[4] = v197;
  v200[5] = v198;
  __p[1] = 0;
  *(_QWORD *)&v249 = 0;
  __p[0] = 0;
  *((_BYTE *)v200 + 48) = v199;
  v201 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v200 + 3;
  *(_QWORD *)(a3 + 24) = v200;
  if (!v201)
    goto LABEL_301;
  v202 = (unint64_t *)&v201->__shared_owners_;
  do
    v203 = __ldaxr(v202);
  while (__stlxr(v203 - 1, v202));
  if (!v203)
  {
    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
    std::__shared_weak_count::__release_weak(v201);
    v204 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_324;
  }
  else
  {
LABEL_301:
    v204 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_324;
  }
  v205 = (char *)__p[1];
  if (__p[1] == v204)
    goto LABEL_323;
  do
  {
    if (!*(v205 - 8))
      goto LABEL_310;
    v206 = (std::__shared_weak_count *)*((_QWORD *)v205 - 2);
    if (!v206)
      goto LABEL_310;
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (v208)
    {
LABEL_310:
      v209 = *((unsigned int *)v205 - 36);
      if ((_DWORD)v209 == -1)
        goto LABEL_304;
LABEL_311:
      ((void (*)(uint64_t *, char *))off_24EC37010[v209])(&v246, v205 - 160);
      goto LABEL_304;
    }
    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
    std::__shared_weak_count::__release_weak(v206);
    v209 = *((unsigned int *)v205 - 36);
    if ((_DWORD)v209 != -1)
      goto LABEL_311;
LABEL_304:
    *((_DWORD *)v205 - 36) = -1;
    v205 -= 192;
  }
  while (v205 != v204);
  v204 = (char *)__p[0];
LABEL_323:
  operator delete(v204);
LABEL_324:
  v216 = (unsigned __int8 *)v242;
  if (!v242)
    goto LABEL_339;
  v217 = (char *)v243;
  v218 = v242;
  if (v243 == v242)
    goto LABEL_338;
  if (!*(v217 - 8))
    goto LABEL_333;
  v219 = (std::__shared_weak_count *)*((_QWORD *)v217 - 2);
  if (!v219)
    goto LABEL_333;
  while (2)
  {
    v220 = (unint64_t *)&v219->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
      v222 = *((unsigned int *)v217 - 36);
      if ((_DWORD)v222 != -1)
LABEL_334:
        ((void (*)(void **, char *))off_24EC37010[v222])(__p, v217 - 160);
    }
    else
    {
LABEL_333:
      v222 = *((unsigned int *)v217 - 36);
      if ((_DWORD)v222 != -1)
        goto LABEL_334;
    }
    *((_DWORD *)v217 - 36) = -1;
    v217 -= 192;
    if (v217 != (char *)v216)
      continue;
    break;
  }
  v218 = v242;
LABEL_338:
  v243 = v216;
  operator delete(v218);
LABEL_339:
  v4 = v238;
LABEL_340:
  v224 = v4[4];
  v223 = v4[5];
  if (v223)
  {
    v225 = (unint64_t *)(v223 + 8);
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
  }
  v227 = *(std::__shared_weak_count **)(a3 + 40);
  *(_QWORD *)(a3 + 32) = v224;
  *(_QWORD *)(a3 + 40) = v223;
  if (v227)
  {
    v228 = (unint64_t *)&v227->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v231 = v4[6];
  v230 = v4[7];
  if (v230)
  {
    v232 = (unint64_t *)(v230 + 8);
    do
      v233 = __ldxr(v232);
    while (__stxr(v233 + 1, v232));
  }
  v234 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v231;
  *(_QWORD *)(a3 + 56) = v230;
  if (v234)
  {
    v235 = (unint64_t *)&v234->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
}

void sub_223430B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_223422914(&__p);
  sub_22340E698(&a19);
  sub_223422A40(a16);
  _Unwind_Resume(a1);
}

void sub_223430DA0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _OWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;

  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 112) = 1065353216;
  *(_BYTE *)(a3 + 368) = 0;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 209) = 0u;
  v6 = a1 + 12;
  v7 = (_QWORD *)a1[11];
  if (v7 != a1 + 12)
  {
    v8 = 0;
    do
    {
      v9 = v7[6];
      if (v8 >= *(_QWORD *)(a3 + 24))
      {
        v8 = sub_22324A768((_QWORD *)(a3 + 8), v9);
        *(_QWORD *)(a3 + 16) = v8;
        v10 = (_QWORD *)v7[1];
        if (v10)
        {
          do
          {
LABEL_8:
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        sub_223249DC0(v8, v9);
        v8 += 464;
        *(_QWORD *)(a3 + 16) = v8;
        *(_QWORD *)(a3 + 16) = v8;
        v10 = (_QWORD *)v7[1];
        if (v10)
          goto LABEL_8;
      }
      do
      {
        v11 = (_QWORD *)v7[2];
        v12 = *v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
LABEL_3:
      v7 = v11;
    }
    while (v11 != v6);
  }
  v27 = a2;
  v13 = (_OWORD *)a1[3];
  v14 = (_OWORD *)a1[4];
  if (v13 != v14)
  {
    v15 = (_QWORD *)(a3 + 32);
    v16 = *(_OWORD **)(a3 + 40);
    while (1)
    {
      v18 = *(_QWORD *)(a3 + 48);
      if ((unint64_t)v16 >= v18)
        break;
      *v16 = *v13;
      v17 = v16 + 1;
LABEL_16:
      *(_QWORD *)(a3 + 40) = v17;
      ++v13;
      v16 = v17;
      if (v13 == v14)
        goto LABEL_33;
    }
    v19 = (_OWORD *)*v15;
    v20 = ((uint64_t)v16 - *v15) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      sub_22316E078();
    v22 = v18 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 60)
        sub_223174E94();
      v24 = (char *)operator new(16 * v23);
      v25 = &v24[16 * v20];
      *(_OWORD *)v25 = *v13;
      v26 = (uint64_t)v25;
      if (v16 == v19)
      {
LABEL_27:
        v17 = v25 + 16;
        *(_QWORD *)(a3 + 32) = v26;
        *(_QWORD *)(a3 + 40) = v25 + 16;
        *(_QWORD *)(a3 + 48) = &v24[16 * v23];
        if (!v16)
          goto LABEL_16;
        goto LABEL_32;
      }
    }
    else
    {
      v24 = 0;
      v25 = (char *)(16 * v20);
      *(_OWORD *)(16 * v20) = *v13;
      v26 = 16 * v20;
      if (v16 == v19)
        goto LABEL_27;
    }
    do
    {
      *(_OWORD *)(v26 - 16) = *(v16 - 1);
      v26 -= 16;
      --v16;
    }
    while (v16 != v19);
    v16 = (_OWORD *)*v15;
    v17 = v25 + 16;
    *(_QWORD *)(a3 + 32) = v26;
    *(_QWORD *)(a3 + 40) = v25 + 16;
    *(_QWORD *)(a3 + 48) = &v24[16 * v23];
    if (!v16)
      goto LABEL_16;
LABEL_32:
    operator delete(v16);
    goto LABEL_16;
  }
LABEL_33:
  *(_QWORD *)a3 = *v27;
}

void sub_223431000(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_223431014(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_223431028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_223431040(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22327F500(v1);
  _Unwind_Resume(a1);
}

void sub_223431054(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC37010[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 0;
}

void sub_223431148(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *a3;
      v6 = a3[1];
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_24EC37010[v5])(&v16, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v13 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_DWORD *)(v4 + 16) = 1;
}

void sub_223431244(uint64_t *a1, char a2, _BYTE *a3)
{
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::string::size_type *p_size;
  std::string::size_type *v19;
  unsigned int v20;
  std::string::size_type size;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  std::string::size_type v28;
  BOOL v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  double v46;
  std::string *p_p;
  std::string::size_type v48;
  _QWORD *v49;
  std::string *v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  std::string *v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  size_t v67;
  _BYTE *v68;
  unint64_t v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  char v75;
  size_t v76;
  void *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  const char *v84;
  size_t v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  const char *v88;
  size_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  size_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  size_t v105;
  size_t v106;
  unint64_t v107;
  _QWORD *v108;
  void *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void **v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::string::size_type v163;
  uint64_t v164;
  int v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  const char *v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  __int128 *v175;
  unint64_t v176;
  const char *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  size_t v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  unint64_t v231[3];
  int v232;
  const char *v233;
  int v234;
  const char *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  int64_t v239;
  std::string __p;
  uint64_t v241;
  const char *v242;
  std::__shared_weak_count *v243;
  const char *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t v247;
  void *v248;
  char v249;
  unint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  void *object;
  __int128 v255;
  __int128 v256;
  void *v257[2];
  unint64_t v258;
  const void *v259;
  unint64_t v260;
  void *v261;
  char v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  __int128 v266;
  std::__shared_weak_count *v267;
  char *v268;
  std::__shared_weak_count *v269;
  _QWORD *v270;
  __int128 v271;
  _BYTE __dst[24];
  __int128 v273;
  void *v274[2];
  unint64_t v275;
  char v276;
  _QWORD v277[5];

  v277[2] = *MEMORY[0x24BDAC8D0];
  if (!*a3)
    return;
  v3 = (uint64_t)a3;
  v5 = sub_223433248(a1, a2);
  v6 = sub_223436B14(a1, v3);
  v228 = sub_223442CD8(a1, v3);
  sub_223195210((uint64_t)&object);
  v7 = *a1;
  if (!*a1)
  {
    sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)"[planes: nil]", 13);
    goto LABEL_134;
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v8 = *(_QWORD *)(v7 + 96);
  v229 = *(_QWORD *)(v7 + 104);
  v231[0] = 0;
  if (v8 != v229)
  {
    v225 = v5;
    v223 = v3;
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int8 **)(v8 + 16);
      v11 = *(unsigned __int8 **)(v8 + 24);
      while (v10 != v11)
      {
        v12 = *(unsigned __int8 **)(*a1 + 48);
        if (v12)
        {
          v13 = *v10;
          v14 = (unsigned __int8 *)(*a1 + 48);
          do
          {
            while (1)
            {
              v15 = v12[32];
              v16 = *v10;
              if (v15 != v13)
                break;
              v15 = v12[33];
              v16 = v10[1];
              if (v15 != v16)
                break;
              v15 = v12[34];
              v16 = v10[2];
              if (v15 != v16)
                break;
              v15 = v12[35];
              v16 = v10[3];
              if (v15 != v16)
                break;
              v15 = v12[36];
              v16 = v10[4];
              if (v15 != v16)
                break;
              v15 = v12[37];
              v16 = v10[5];
              if (v15 != v16)
                break;
              v15 = v12[38];
              v16 = v10[6];
              if (v15 != v16)
                break;
              v15 = v12[39];
              v16 = v10[7];
              if (v15 != v16)
                break;
              v15 = v12[40];
              v16 = v10[8];
              if (v15 != v16)
                break;
              v15 = v12[41];
              v16 = v10[9];
              if (v15 != v16)
                break;
              v15 = v12[42];
              v16 = v10[10];
              if (v15 != v16)
                break;
              v15 = v12[43];
              v16 = v10[11];
              if (v15 != v16)
                break;
              v15 = v12[44];
              v16 = v10[12];
              if (v15 != v16)
                break;
              v15 = v12[45];
              v16 = v10[13];
              if (v15 != v16)
                break;
              v15 = v12[46];
              v16 = v10[14];
              if (v15 != v16)
                break;
              v15 = v12[47];
              v16 = v10[15];
              if (v15 != v16)
                break;
              v14 = v12;
              v12 = *(unsigned __int8 **)v12;
              if (!v12)
                goto LABEL_36;
            }
            if (v15 < v16)
              v12 += 8;
            else
              v14 = v12;
            v12 = *(unsigned __int8 **)v12;
          }
          while (v12);
LABEL_36:
          if (v14 != (unsigned __int8 *)(*a1 + 48))
          {
            v17 = v14[32];
            if (v13 == v17)
            {
              v13 = v10[1];
              v17 = v14[33];
              if (v13 == v17)
              {
                v13 = v10[2];
                v17 = v14[34];
                if (v13 == v17)
                {
                  v13 = v10[3];
                  v17 = v14[35];
                  if (v13 == v17)
                  {
                    v13 = v10[4];
                    v17 = v14[36];
                    if (v13 == v17)
                    {
                      v13 = v10[5];
                      v17 = v14[37];
                      if (v13 == v17)
                      {
                        v13 = v10[6];
                        v17 = v14[38];
                        if (v13 == v17)
                        {
                          v13 = v10[7];
                          v17 = v14[39];
                          if (v13 == v17)
                          {
                            v13 = v10[8];
                            v17 = v14[40];
                            if (v13 == v17)
                            {
                              v13 = v10[9];
                              v17 = v14[41];
                              if (v13 == v17)
                              {
                                v13 = v10[10];
                                v17 = v14[42];
                                if (v13 == v17)
                                {
                                  v13 = v10[11];
                                  v17 = v14[43];
                                  if (v13 == v17)
                                  {
                                    v13 = v10[12];
                                    v17 = v14[44];
                                    if (v13 == v17)
                                    {
                                      v13 = v10[13];
                                      v17 = v14[45];
                                      if (v13 == v17)
                                      {
                                        v13 = v10[14];
                                        v17 = v14[46];
                                        if (v13 == v17)
                                        {
                                          v13 = v10[15];
                                          v17 = v14[47];
                                          if (v13 == v17)
                                            goto LABEL_11;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v13 >= v17)
              goto LABEL_11;
          }
        }
        p_size = &__p.__r_.__value_.__l.__size_;
        v19 = &__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_89;
        v20 = *v10;
        size = __p.__r_.__value_.__l.__size_;
        do
        {
          while (1)
          {
            v19 = (std::string::size_type *)size;
            v22 = *(unsigned __int8 *)(size + 25);
            v23 = v20 >= v22;
            if (v20 != v22)
            {
              v24 = *v10;
              goto LABEL_84;
            }
            v24 = v10[1];
            v22 = *((unsigned __int8 *)v19 + 26);
            v23 = v24 >= v22;
            if (v24 == v22)
            {
              v24 = v10[2];
              v22 = *((unsigned __int8 *)v19 + 27);
              v23 = v24 >= v22;
              if (v24 == v22)
              {
                v24 = v10[3];
                v22 = *((unsigned __int8 *)v19 + 28);
                v23 = v24 >= v22;
                if (v24 == v22)
                {
                  v24 = v10[4];
                  v22 = *((unsigned __int8 *)v19 + 29);
                  v23 = v24 >= v22;
                  if (v24 == v22)
                  {
                    v24 = v10[5];
                    v22 = *((unsigned __int8 *)v19 + 30);
                    v23 = v24 >= v22;
                    if (v24 == v22)
                    {
                      v24 = v10[6];
                      v22 = *((unsigned __int8 *)v19 + 31);
                      v23 = v24 >= v22;
                      if (v24 == v22)
                      {
                        v24 = v10[7];
                        v22 = *((unsigned __int8 *)v19 + 32);
                        v23 = v24 >= v22;
                        if (v24 == v22)
                          break;
                      }
                    }
                  }
                }
              }
            }
LABEL_84:
            if (v23)
              goto LABEL_86;
LABEL_56:
            size = *v19;
            p_size = v19;
            if (!*v19)
              goto LABEL_89;
          }
          v25 = v10[8];
          v26 = *((unsigned __int8 *)v19 + 33);
          if (v25 != v26)
            goto LABEL_73;
          v25 = v10[9];
          v26 = *((unsigned __int8 *)v19 + 34);
          if (v25 != v26)
            goto LABEL_73;
          v25 = v10[10];
          v26 = *((unsigned __int8 *)v19 + 35);
          if (v25 != v26)
            goto LABEL_73;
          v25 = v10[11];
          v26 = *((unsigned __int8 *)v19 + 36);
          if (v25 != v26)
            goto LABEL_73;
          v25 = v10[12];
          v26 = *((unsigned __int8 *)v19 + 37);
          if (v25 != v26
            || (v25 = v10[13], v26 = *((unsigned __int8 *)v19 + 38), v25 != v26)
            || (v25 = v10[14], v26 = *((unsigned __int8 *)v19 + 39), v25 != v26)
            || (v25 = v10[15], v26 = *((unsigned __int8 *)v19 + 40), v25 != v26))
          {
LABEL_73:
            if (v25 < v26)
              goto LABEL_56;
          }
          v22 = *((unsigned __int8 *)v19 + 33);
          v24 = v10[8];
          if (v22 == v24)
          {
            v22 = *((unsigned __int8 *)v19 + 34);
            v24 = v10[9];
            if (v22 == v24)
            {
              v22 = *((unsigned __int8 *)v19 + 35);
              v24 = v10[10];
              if (v22 == v24)
              {
                v22 = *((unsigned __int8 *)v19 + 36);
                v24 = v10[11];
                if (v22 == v24)
                {
                  v22 = *((unsigned __int8 *)v19 + 37);
                  v24 = v10[12];
                  if (v22 == v24)
                  {
                    v22 = *((unsigned __int8 *)v19 + 38);
                    v24 = v10[13];
                    if (v22 == v24)
                    {
                      v22 = *((unsigned __int8 *)v19 + 39);
                      v24 = v10[14];
                      if (v22 == v24)
                      {
                        v22 = *((unsigned __int8 *)v19 + 40);
                        v24 = v10[15];
                        if (v22 == v24)
                          goto LABEL_11;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_86:
          if (v22 >= v24)
            goto LABEL_11;
          size = v19[1];
        }
        while (size);
        p_size = v19 + 1;
LABEL_89:
        v27 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v27 + 25) = *(_OWORD *)v10;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = v19;
        *p_size = (std::string::size_type)v27;
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_)
        {
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v27 = (char *)*p_size;
        }
        v28 = __p.__r_.__value_.__l.__size_;
        v29 = v27 == (char *)__p.__r_.__value_.__l.__size_;
        v27[24] = v27 == (char *)__p.__r_.__value_.__l.__size_;
        if (!v29)
        {
          do
          {
            v30 = *((_QWORD *)v27 + 2);
            if (*(_BYTE *)(v30 + 24))
              break;
            v31 = *(_BYTE **)(v30 + 16);
            v32 = *(_QWORD *)v31;
            if (*(_QWORD *)v31 == v30)
            {
              v35 = *((_QWORD *)v31 + 1);
              if (!v35 || (v36 = *(unsigned __int8 *)(v35 + 24), v33 = (_BYTE *)(v35 + 24), v36))
              {
                if (*(char **)v30 == v27)
                {
                  *(_BYTE *)(v30 + 24) = 1;
                  v31[24] = 0;
                  v39 = *(_QWORD *)(v30 + 8);
                  *(_QWORD *)v31 = v39;
                  if (v39)
                    goto LABEL_106;
                }
                else
                {
                  v37 = *(uint64_t **)(v30 + 8);
                  v38 = *v37;
                  *(_QWORD *)(v30 + 8) = *v37;
                  if (v38)
                  {
                    *(_QWORD *)(v38 + 16) = v30;
                    v31 = *(_BYTE **)(v30 + 16);
                  }
                  v37[2] = (uint64_t)v31;
                  *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v37;
                  *v37 = v30;
                  *(_QWORD *)(v30 + 16) = v37;
                  v31 = (_BYTE *)v37[2];
                  v30 = *(_QWORD *)v31;
                  *((_BYTE *)v37 + 24) = 1;
                  v31[24] = 0;
                  v39 = *(_QWORD *)(v30 + 8);
                  *(_QWORD *)v31 = v39;
                  if (v39)
LABEL_106:
                    *(_QWORD *)(v39 + 16) = v31;
                }
                *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
                *(_QWORD *)(*((_QWORD *)v31 + 2) + 8 * (**((_QWORD **)v31 + 2) != (_QWORD)v31)) = v30;
                *(_QWORD *)(v30 + 8) = v31;
LABEL_9:
                *((_QWORD *)v31 + 2) = v30;
                break;
              }
            }
            else if (!v32 || (v34 = *(unsigned __int8 *)(v32 + 24), v33 = (_BYTE *)(v32 + 24), v34))
            {
              if (*(char **)v30 == v27)
              {
                v41 = *((_QWORD *)v27 + 1);
                *(_QWORD *)v30 = v41;
                if (v41)
                {
                  *(_QWORD *)(v41 + 16) = v30;
                  v31 = *(_BYTE **)(v30 + 16);
                }
                *((_QWORD *)v27 + 2) = v31;
                *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v27;
                *((_QWORD *)v27 + 1) = v30;
                *(_QWORD *)(v30 + 16) = v27;
                v31 = (_BYTE *)*((_QWORD *)v27 + 2);
                v27[24] = 1;
                v31[24] = 0;
                v30 = *((_QWORD *)v31 + 1);
                v40 = *(char **)v30;
                *((_QWORD *)v31 + 1) = *(_QWORD *)v30;
                if (!v40)
                  goto LABEL_8;
              }
              else
              {
                *(_BYTE *)(v30 + 24) = 1;
                v31[24] = 0;
                v30 = *((_QWORD *)v31 + 1);
                v40 = *(char **)v30;
                *((_QWORD *)v31 + 1) = *(_QWORD *)v30;
                if (!v40)
                  goto LABEL_8;
              }
              *((_QWORD *)v40 + 2) = v31;
LABEL_8:
              *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
              *(_QWORD *)(*((_QWORD *)v31 + 2) + 8 * (**((_QWORD **)v31 + 2) != (_QWORD)v31)) = v30;
              *(_QWORD *)v30 = v31;
              goto LABEL_9;
            }
            *(_BYTE *)(v30 + 24) = 1;
            v27 = v31;
            v31[24] = v31 == (_BYTE *)v28;
            *v33 = 1;
          }
          while (v31 != (_BYTE *)v28);
        }
        __p.__r_.__value_.__r.__words[2] = ++v9;
LABEL_11:
        v10 += 16;
      }
      v8 += 40;
      if (v8 == v229)
      {
        v42 = (_QWORD *)__p.__r_.__value_.__l.__size_;
        v3 = v223;
        v5 = v225;
        goto LABEL_120;
      }
    }
  }
  v42 = 0;
  v9 = 0;
LABEL_120:
  sub_223198030((uint64_t)&__p, v42);
  v231[0] = v9;
  v43 = *(_QWORD *)(*a1 + 56);
  v44 = *(_QWORD *)(*a1 + 24);
  sub_223425184(v231);
  if (__dst[23] >= 0)
    v45 = __dst;
  else
    v45 = *(_BYTE **)__dst;
  if (*(_BYTE *)(*a1 + 136))
    v46 = (double)*(uint64_t *)(*a1 + 128) / 1000000000.0;
  else
    v46 = 0.0;
  sub_22456D250("[planes: %zu, kf: %zu, filtered: %s, ts: %.3f]", &__p, v43, v44, v45, *(_QWORD *)&v46);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v48 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)p_p, v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_134:
      v49 = (_QWORD *)a1[2];
      if (v49)
        goto LABEL_135;
LABEL_145:
      sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)"[meshes: nil]", 13);
      goto LABEL_146;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_134;
  }
  operator delete(*(void **)__dst);
  v49 = (_QWORD *)a1[2];
  if (!v49)
    goto LABEL_145;
LABEL_135:
  sub_22456D250("[meshes: %zu]", &__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49[1] - *v49) >> 6));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &__p;
  else
    v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v51 = __p.__r_.__value_.__l.__size_;
  sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)v50, v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_146:
  v52 = a1[4];
  if (v52)
  {
    sub_22456D250("[keyframes: %zu]", &__p, *(_QWORD *)(v52 + 16));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    else
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v54 = __p.__r_.__value_.__l.__size_;
    sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)v53, v54);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)"[keyframes: nil]", 16);
  }
  v55 = a1[6];
  if (v55)
  {
    v56 = *(_QWORD *)(v55 + 16);
    v57 = *(_QWORD *)(v55 + 40);
    if (*(_BYTE *)(v55 + 128))
      v58 = "yes";
    else
      v58 = "no";
    sub_22456D250("[rooms: %zu, rooms no kf: %zu, current room: %s]", &__p, v56, v57, v58);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &__p;
    else
      v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v60 = __p.__r_.__value_.__l.__size_;
    sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)v59, v60);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_2231813E8((_QWORD *)&v255 + 1, (uint64_t)"[rooms: nil]", 12);
  }
  sub_223446D5C(&v253);
  v61 = MEMORY[0x24BEDB7F0];
  v62 = MEMORY[0x24BEDB848];
  if (**(int **)(v253 + 56) <= 3)
  {
    v63 = *(unsigned __int8 *)(v253 + 72);
    v64 = sub_22322F254(v253, "OSLogSurrogateAppender", 1, 0);
    v65 = v64;
    if (v63 || v64)
    {
      v230 = v63;
      sub_223195210((uint64_t)&__p);
      v66 = sub_2231813E8(&__p.__r_.__value_.__r.__words[2], (uint64_t)"SQ: ", 4);
      v224 = v3;
      v227 = v6;
      if ((v264 & 0x10) != 0)
      {
        v69 = v263;
        if (v263 < v260)
        {
          v263 = v260;
          v69 = v260;
        }
        v70 = v259;
        v67 = v69 - (_QWORD)v259;
        if (v69 - (unint64_t)v259 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_251;
      }
      else
      {
        if ((v264 & 8) == 0)
        {
          v67 = 0;
          __dst[23] = 0;
          v68 = __dst;
          goto LABEL_185;
        }
        v70 = v257[0];
        v67 = v258 - (unint64_t)v257[0];
        if (v258 - (unint64_t)v257[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_251:
          sub_22316DBC0();
      }
      if (v67 >= 0x17)
      {
        v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v71 = v67 | 7;
        v72 = v71 + 1;
        v68 = operator new(v71 + 1);
        *(_QWORD *)&__dst[8] = v67;
        *(_QWORD *)&__dst[16] = v72 | 0x8000000000000000;
        *(_QWORD *)__dst = v68;
      }
      else
      {
        __dst[23] = v67;
        v68 = __dst;
        if (!v67)
        {
LABEL_185:
          v68[v67] = 0;
          if (__dst[23] >= 0)
            v73 = __dst;
          else
            v73 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v74 = __dst[23];
          else
            v74 = *(_QWORD *)&__dst[8];
          sub_2231813E8(v66, (uint64_t)v73, v74);
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            v75 = v251;
            if ((v251 & 0x10) == 0)
            {
LABEL_193:
              if ((v75 & 8) == 0)
              {
                v76 = 0;
                HIBYTE(v239) = 0;
                v77 = v238;
                goto LABEL_206;
              }
              v79 = v243;
              v76 = v245 - (_QWORD)v243;
              if ((unint64_t)(v245 - (_QWORD)v243) > 0x7FFFFFFFFFFFFFF7)
LABEL_253:
                sub_22316DBC0();
LABEL_199:
              if (v76 >= 0x17)
              {
                v80 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v76 | 7) != 0x17)
                  v80 = v76 | 7;
                v81 = v80 + 1;
                v77 = operator new(v80 + 1);
                v238[1] = (void *)v76;
                v239 = v81 | 0x8000000000000000;
                v238[0] = v77;
              }
              else
              {
                HIBYTE(v239) = v76;
                v77 = v238;
                if (!v76)
                {
LABEL_206:
                  *((_BYTE *)v77 + v76) = 0;
                  v231[0] = (unint64_t)&v253;
                  v231[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  v231[2] = std::chrono::system_clock::now().__d_.__rep_;
                  v232 = 3;
                  v233 = "unknown file";
                  v234 = 492;
                  v236 = 0;
                  v237 = 0;
                  v235 = "unknown function";
                  if (v239 >= 0)
                    v82 = v238;
                  else
                    v82 = (void **)v238[0];
                  v83 = *(_QWORD *)v231[0];
                  v84 = (const char *)(*(_QWORD *)v231[0] + 16);
                  v222 = v84;
                  if (*(char *)(*(_QWORD *)v231[0] + 39) < 0)
                  {
                    v84 = *(const char **)(v83 + 16);
                    v85 = *(_QWORD *)(v83 + 24);
                    v226 = v5;
                    v87 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v87 & 1) != 0)
                      goto LABEL_213;
                  }
                  else
                  {
                    v85 = *(unsigned __int8 *)(*(_QWORD *)v231[0] + 39);
                    v226 = v5;
                    v86 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v86 & 1) != 0)
                      goto LABEL_213;
                  }
                  if (__cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)__dst);
                    sub_223199C58("com.apple.cv3d", (unint64_t)__dst, &xmmword_255788F40);
                    if ((_BYTE)v273 && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
LABEL_213:
                  if (byte_255788F57 >= 0)
                    v88 = (const char *)&xmmword_255788F40;
                  else
                    v88 = (const char *)xmmword_255788F40;
                  if (byte_255788F57 >= 0)
                    v89 = byte_255788F57;
                  else
                    v89 = *((_QWORD *)&xmmword_255788F40 + 1);
                  *(_QWORD *)__dst = os_log_create(v88, v84);
                  v90 = &__dst[8];
                  if (v89 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v89 >= 0x17)
                  {
                    v91 = v61;
                    v92 = v83;
                    v93 = v82;
                    v94 = v65;
                    v95 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v89 | 7) != 0x17)
                      v95 = v89 | 7;
                    v96 = v95 + 1;
                    v90 = operator new(v95 + 1);
                    *(_QWORD *)&__dst[16] = v89;
                    *(_QWORD *)&v273 = v96 | 0x8000000000000000;
                    *(_QWORD *)&__dst[8] = v90;
                    v65 = v94;
                    v82 = v93;
                    v83 = v92;
                    v61 = v91;
                  }
                  else
                  {
                    BYTE7(v273) = v89;
                    if (!v89)
                    {
LABEL_227:
                      v90[v89] = 0;
                      BYTE8(v273) = 1;
                      v97 = v274;
                      if (v85 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v5 = v226;
                      if (v85 >= 0x17)
                      {
                        v98 = v65;
                        v99 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v85 | 7) != 0x17)
                          v99 = v85 | 7;
                        v100 = v99 + 1;
                        v97 = (void **)operator new(v99 + 1);
                        v274[1] = (void *)v85;
                        v275 = v100 | 0x8000000000000000;
                        v274[0] = v97;
                        v65 = v98;
                      }
                      else
                      {
                        HIBYTE(v275) = v85;
                        if (!v85)
                        {
LABEL_235:
                          *((_BYTE *)v97 + v85) = 0;
                          v276 = 1;
                          v101 = *(NSObject **)__dst;
                          if (SHIBYTE(v275) < 0)
                            operator delete(v274[0]);
                          if (BYTE8(v273) && SBYTE7(v273) < 0)
                            operator delete(*(void **)&__dst[8]);
                          if (*(_QWORD *)__dst)
                            os_release(*(void **)__dst);
                          if (!v65 || !*(_QWORD *)(v65 + 24))
                          {
                            os_log_type_enabled(v101, OS_LOG_TYPE_INFO);
                            *(_DWORD *)__dst = 136315138;
                            *(_QWORD *)&__dst[4] = v82;
                            v109 = (void *)_os_log_send_and_compose_impl();
                            v3 = v224;
                            v6 = v227;
                            v62 = MEMORY[0x24BEDB848];
                            v110 = v230;
                            if (v109)
                              free(v109);
                            goto LABEL_318;
                          }
                          v102 = _os_log_pack_size();
                          v103 = (std::__shared_weak_count_vtbl *)operator new(v102, (std::align_val_t)8uLL);
                          v104 = (std::__shared_weak_count *)operator new();
                          v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                          v104->__shared_owners_ = 0;
                          v104->__shared_weak_owners_ = 0;
                          v104[1].__vftable = v103;
                          *(_QWORD *)&v266 = v103;
                          *((_QWORD *)&v266 + 1) = v103;
                          v268 = 0;
                          v269 = 0;
                          v267 = v104;
                          v105 = strlen((const char *)v82);
                          if (v105 > 0x7FFFFFFFFFFFFFF7)
                            sub_22316DBC0();
                          v106 = v105;
                          v107 = v65;
                          if (v105 >= 0x17)
                          {
                            v111 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v105 | 7) != 0x17)
                              v111 = v105 | 7;
                            v112 = v111 + 1;
                            v108 = operator new(v111 + 1);
                            *(_QWORD *)&v271 = v106;
                            *((_QWORD *)&v271 + 1) = v112 | 0x8000000000000000;
                            v270 = v108;
                          }
                          else
                          {
                            HIBYTE(v271) = v105;
                            v108 = &v270;
                            if (!v105)
                            {
LABEL_258:
                              *((_BYTE *)v108 + v106) = 0;
                              v113 = v270;
                              v277[0] = v271;
                              *(_QWORD *)((char *)v277 + 7) = *(_QWORD *)((char *)&v271 + 7);
                              v114 = HIBYTE(v271);
                              v115 = operator new(0x38uLL);
                              v115[1] = 0;
                              v115[2] = 0;
                              v115[3] = off_24EC1FA48;
                              *v115 = &off_24EC1F9F8;
                              v116 = v277[0];
                              v115[4] = v113;
                              v115[5] = v116;
                              *(_QWORD *)((char *)v115 + 47) = *(_QWORD *)((char *)v277 + 7);
                              *((_BYTE *)v115 + 55) = v114;
                              v277[0] = 0;
                              *(_QWORD *)((char *)v277 + 7) = 0;
                              v117 = v269;
                              v268 = (char *)(v115 + 3);
                              v269 = (std::__shared_weak_count *)v115;
                              v118 = v107;
                              if (v117)
                              {
                                p_shared_owners = (unint64_t *)&v117->__shared_owners_;
                                do
                                  v120 = __ldaxr(p_shared_owners);
                                while (__stlxr(v120 - 1, p_shared_owners));
                                if (!v120)
                                {
                                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                  std::__shared_weak_count::__release_weak(v117);
                                }
                              }
                              *(_OWORD *)__dst = v266;
                              v121 = v268;
                              *(_QWORD *)&__dst[16] = v267;
                              if (v267)
                              {
                                v122 = (unint64_t *)&v267->__shared_owners_;
                                do
                                  v123 = __ldxr(v122);
                                while (__stxr(v123 + 1, v122));
                              }
                              v124 = v269;
                              *(_QWORD *)&v273 = v121;
                              *((_QWORD *)&v273 + 1) = v269;
                              if (v269)
                              {
                                v125 = (unint64_t *)&v269->__shared_owners_;
                                do
                                  v126 = __ldxr(v125);
                                while (__stxr(v126 + 1, v125));
                                v274[0] = v121;
                                do
                                  v127 = __ldaxr(v125);
                                while (__stlxr(v127 - 1, v125));
                                if (!v127)
                                {
                                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                                  std::__shared_weak_count::__release_weak(v124);
                                }
                              }
                              else
                              {
                                v274[0] = v121;
                              }
                              v128 = v267;
                              if (v267)
                              {
                                v129 = (unint64_t *)&v267->__shared_owners_;
                                do
                                  v130 = __ldaxr(v129);
                                while (__stlxr(v130 - 1, v129));
                                if (!v130)
                                {
                                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                                  std::__shared_weak_count::__release_weak(v128);
                                }
                              }
                              v131 = *(_QWORD *)__dst;
                              if (*((char *)v274[0] + 31) >= 0)
                                v132 = (char *)v274[0] + 8;
                              else
                                v132 = (char *)*((_QWORD *)v274[0] + 1);
                              v133 = _os_log_pack_fill();
                              *(_DWORD *)v133 = 136315138;
                              *(_QWORD *)(v133 + 4) = v132;
                              v134 = operator new();
                              v135 = *(unsigned __int8 *)(v83 + 39);
                              v136 = *(const char **)(v83 + 16);
                              v137 = *(_QWORD *)(v83 + 24);
                              v138 = v273;
                              *(_OWORD *)(v134 + 8) = *(_OWORD *)&__dst[8];
                              if ((v135 & 0x80u) != 0)
                                v135 = v137;
                              else
                                v136 = v222;
                              *(_QWORD *)v134 = v131;
                              *(_QWORD *)&__dst[8] = 0;
                              *(_QWORD *)&__dst[16] = 0;
                              *(_OWORD *)(v134 + 24) = v138;
                              v273 = 0uLL;
                              *(_QWORD *)(v134 + 40) = v136;
                              *(_QWORD *)(v134 + 48) = v135;
                              *(_BYTE *)(v134 + 56) = 1;
                              v270 = 0;
                              *(_QWORD *)&v266 = v134;
                              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v118 + 24) + 40))(*(_QWORD *)(v118 + 24), &v266);
                              v6 = v227;
                              v139 = v266;
                              *(_QWORD *)&v266 = 0;
                              v3 = v224;
                              v110 = v230;
                              if (v139)
                              {
                                v140 = *(std::__shared_weak_count **)(v139 + 32);
                                if (v140)
                                {
                                  v141 = (unint64_t *)&v140->__shared_owners_;
                                  do
                                    v142 = __ldaxr(v141);
                                  while (__stlxr(v142 - 1, v141));
                                  if (!v142)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                                    std::__shared_weak_count::__release_weak(v140);
                                  }
                                }
                                v143 = *(std::__shared_weak_count **)(v139 + 16);
                                if (v143)
                                {
                                  v144 = (unint64_t *)&v143->__shared_owners_;
                                  do
                                    v145 = __ldaxr(v144);
                                  while (__stlxr(v145 - 1, v144));
                                  if (!v145)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                                    std::__shared_weak_count::__release_weak(v143);
                                  }
                                }
                                MEMORY[0x227684CE8](v139, 0x10F0C40B62ED6C6);
                                v146 = v270;
                                v270 = 0;
                                if (v146)
                                {
                                  v147 = (std::__shared_weak_count *)v146[4];
                                  if (v147)
                                  {
                                    v148 = (unint64_t *)&v147->__shared_owners_;
                                    do
                                      v149 = __ldaxr(v148);
                                    while (__stlxr(v149 - 1, v148));
                                    if (!v149)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                      std::__shared_weak_count::__release_weak(v147);
                                    }
                                  }
                                  v150 = (std::__shared_weak_count *)v146[2];
                                  if (v150)
                                  {
                                    v151 = (unint64_t *)&v150->__shared_owners_;
                                    do
                                      v152 = __ldaxr(v151);
                                    while (__stlxr(v152 - 1, v151));
                                    if (!v152)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                                      std::__shared_weak_count::__release_weak(v150);
                                    }
                                  }
                                  MEMORY[0x227684CE8](v146, 0x10F0C40B62ED6C6);
                                }
                              }
                              v153 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
                              v62 = MEMORY[0x24BEDB848];
                              if (*((_QWORD *)&v273 + 1))
                              {
                                v154 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
                                do
                                  v155 = __ldaxr(v154);
                                while (__stlxr(v155 - 1, v154));
                                if (!v155)
                                {
                                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                                  std::__shared_weak_count::__release_weak(v153);
                                }
                              }
                              v156 = *(std::__shared_weak_count **)&__dst[16];
                              if (*(_QWORD *)&__dst[16])
                              {
                                v157 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                                do
                                  v158 = __ldaxr(v157);
                                while (__stlxr(v158 - 1, v157));
                                if (!v158)
                                {
                                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                                  std::__shared_weak_count::__release_weak(v156);
                                }
                              }
LABEL_318:
                              if (v110)
                              {
                                v159 = v238;
                                if (v239 < 0)
                                  v159 = (void **)v238[0];
                                sub_22322C138((uint64_t)v231, "%s", (const char *)v159);
                                sub_223182C08((uint64_t)v231);
                              }
                              sub_223182C08((uint64_t)v231);
                              v160 = v237;
                              if (v237)
                              {
                                v161 = (unint64_t *)&v237->__shared_owners_;
                                do
                                  v162 = __ldaxr(v161);
                                while (__stlxr(v162 - 1, v161));
                                if (!v162)
                                {
                                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                                  std::__shared_weak_count::__release_weak(v160);
                                }
                              }
                              if (SHIBYTE(v239) < 0)
                                operator delete(v238[0]);
                              __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v61;
                              v163 = *(_QWORD *)(v61 + 72);
                              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                                        + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(v61 + 64);
                              __p.__r_.__value_.__r.__words[2] = v163;
                              v241 = v62 + 16;
                              if (v249 < 0)
                                operator delete(v248);
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              MEMORY[0x227684BE0](&v252);
                              goto LABEL_332;
                            }
                          }
                          memcpy(v108, v82, v106);
                          goto LABEL_258;
                        }
                      }
                      memmove(v97, v84, v85);
                      goto LABEL_235;
                    }
                  }
                  memmove(v90, v88, v89);
                  goto LABEL_227;
                }
              }
              memmove(v77, v79, v76);
              goto LABEL_206;
            }
          }
          else
          {
            v75 = v251;
            if ((v251 & 0x10) == 0)
              goto LABEL_193;
          }
          v78 = v250;
          if (v250 < v247)
          {
            v250 = v247;
            v78 = v247;
          }
          v79 = v246;
          v76 = v78 - (_QWORD)v246;
          if (v78 - (unint64_t)v246 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_253;
          goto LABEL_199;
        }
      }
      memmove(v68, v70, v67);
      goto LABEL_185;
    }
  }
LABEL_332:
  object = *(void **)v61;
  v164 = *(_QWORD *)(v61 + 72);
  *(void **)((char *)&object + *((_QWORD *)object - 3)) = *(void **)(v61 + 64);
  *((_QWORD *)&v255 + 1) = v164;
  *(_QWORD *)&v256 = v62 + 16;
  if (v262 < 0)
    operator delete(v261);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v265);
  if (v5 | v6 | v228)
  {
    if (*(_BYTE *)(v3 + 2))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryStateVerification.cpp", 61, (uint64_t)"", 0, (uint64_t)"VerifySceneQueryState: state is invalid", 39, (void (*)(void **))sub_22457406C);
      abort();
    }
    sub_223446D5C(&v266);
    if (**(int **)(v266 + 56) <= 5)
    {
      v165 = *(unsigned __int8 *)(v266 + 72);
      v166 = *(_BYTE *)(v266 + 72) != 0;
      v167 = sub_22322F254(v266, "OSLogSurrogateAppender", 1, 0);
      if (((v167 == 0) & ~v166) == 0)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v241) = 5;
        v242 = "unknown file";
        LODWORD(v243) = 63;
        v245 = 0;
        v246 = 0;
        v244 = "unknown function";
        v168 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v169 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v171 = *(const char **)(v168 + 16);
          v170 = *(_QWORD *)(v168 + 24);
        }
        else
        {
          v170 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v171 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        }
        v172 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)&object);
          sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
          if ((_BYTE)v256 && SHIBYTE(v255) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v173 = (const char *)&xmmword_255788F40;
        else
          v173 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v174 = byte_255788F57;
        else
          v174 = *((_QWORD *)&xmmword_255788F40 + 1);
        object = os_log_create(v173, v171);
        v175 = &v255;
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v174 >= 0x17)
        {
          v176 = v167;
          v177 = v171;
          v178 = v168;
          v179 = v165;
          v180 = v169;
          v181 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v181 = v174 | 7;
          v182 = v181 + 1;
          v175 = (__int128 *)operator new(v181 + 1);
          *((_QWORD *)&v255 + 1) = v174;
          *(_QWORD *)&v256 = v182 | 0x8000000000000000;
          *(_QWORD *)&v255 = v175;
          v169 = v180;
          v165 = v179;
          v168 = v178;
          v171 = v177;
          v167 = v176;
        }
        else
        {
          BYTE7(v256) = v174;
          if (!v174)
          {
LABEL_356:
            *((_BYTE *)v175 + v174) = 0;
            BYTE8(v256) = 1;
            v183 = v257;
            if (v170 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v170 >= 0x17)
            {
              v184 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v170 | 7) != 0x17)
                v184 = v170 | 7;
              v185 = v184 + 1;
              v183 = operator new(v184 + 1);
              v258 = v185 | 0x8000000000000000;
              v257[0] = v183;
              v257[1] = (void *)v170;
            }
            else
            {
              HIBYTE(v258) = v170;
              if (!v170)
                goto LABEL_364;
            }
            memmove(v183, v171, v170);
LABEL_364:
            *((_BYTE *)v183 + v170) = 0;
            LOBYTE(v259) = 1;
            v186 = object;
            if (SHIBYTE(v258) < 0)
              operator delete(v257[0]);
            if (BYTE8(v256) && SBYTE7(v256) < 0)
              operator delete((void *)v255);
            if (object)
              os_release(object);
            if (v167 && *(_QWORD *)(v167 + 24))
            {
              v187 = _os_log_pack_size();
              v188 = (std::__shared_weak_count_vtbl *)operator new(v187, (std::align_val_t)8uLL);
              v189 = (std::__shared_weak_count *)operator new();
              v190 = v189;
              v189->__shared_owners_ = 0;
              v191 = (unint64_t *)&v189->__shared_owners_;
              v189->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v189->__shared_weak_owners_ = 0;
              v189[1].__vftable = v188;
              object = v188;
              *(_QWORD *)&v255 = v188;
              *((_QWORD *)&v255 + 1) = v189;
              do
                v192 = __ldxr(v191);
              while (__stxr(v192 + 1, v191));
              v256 = 0uLL;
              v257[0] = 0;
              do
                v193 = __ldaxr(v191);
              while (__stlxr(v193 - 1, v191));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v190);
              }
              v194 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v195 = operator new();
              v196 = *(unsigned __int8 *)(v168 + 39);
              if ((v196 & 0x80u) == 0)
                v197 = v169;
              else
                v197 = *(_QWORD *)(v168 + 16);
              if ((v196 & 0x80u) != 0)
                v196 = *(_QWORD *)(v168 + 24);
              *(_QWORD *)v195 = v194;
              *(_OWORD *)(v195 + 8) = v255;
              v255 = 0uLL;
              *(_OWORD *)(v195 + 24) = v256;
              v256 = 0uLL;
              *(_QWORD *)(v195 + 40) = v197;
              *(_QWORD *)(v195 + 48) = v196;
              *(_BYTE *)(v195 + 56) = 16;
              v231[0] = 0;
              *(_QWORD *)__dst = v195;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v167 + 24) + 40))(*(_QWORD *)(v167 + 24), __dst);
              v198 = *(_QWORD *)__dst;
              *(_QWORD *)__dst = 0;
              if (v198)
              {
                v199 = *(std::__shared_weak_count **)(v198 + 32);
                if (v199)
                {
                  v200 = (unint64_t *)&v199->__shared_owners_;
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                v202 = *(std::__shared_weak_count **)(v198 + 16);
                if (v202)
                {
                  v203 = (unint64_t *)&v202->__shared_owners_;
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
                MEMORY[0x227684CE8](v198, 0x10F0C40B62ED6C6);
                v205 = v231[0];
                v231[0] = 0;
                if (v205)
                {
                  v206 = *(std::__shared_weak_count **)(v205 + 32);
                  if (v206)
                  {
                    v207 = (unint64_t *)&v206->__shared_owners_;
                    do
                      v208 = __ldaxr(v207);
                    while (__stlxr(v208 - 1, v207));
                    if (!v208)
                    {
                      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                      std::__shared_weak_count::__release_weak(v206);
                    }
                  }
                  v209 = *(std::__shared_weak_count **)(v205 + 16);
                  if (v209)
                  {
                    v210 = (unint64_t *)&v209->__shared_owners_;
                    do
                      v211 = __ldaxr(v210);
                    while (__stlxr(v211 - 1, v210));
                    if (!v211)
                    {
                      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                      std::__shared_weak_count::__release_weak(v209);
                    }
                  }
                  MEMORY[0x227684CE8](v205, 0x10F0C40B62ED6C6);
                }
              }
              v212 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
              if (*((_QWORD *)&v256 + 1))
              {
                v213 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
                do
                  v214 = __ldaxr(v213);
                while (__stlxr(v214 - 1, v213));
                if (!v214)
                {
                  ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                  std::__shared_weak_count::__release_weak(v212);
                }
              }
              v215 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
              if (*((_QWORD *)&v255 + 1))
              {
                v216 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
                do
                  v217 = __ldaxr(v216);
                while (__stlxr(v217 - 1, v216));
                if (!v217)
                {
                  ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                  std::__shared_weak_count::__release_weak(v215);
                }
              }
            }
            else
            {
              os_log_type_enabled(v186, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v218 = (void *)_os_log_send_and_compose_impl();
              if (v218)
                free(v218);
            }
            if (v165)
            {
              sub_22322C138((uint64_t)&__p, "VerifySceneQueryState: state is invalid");
              sub_223182C08((uint64_t)&__p);
            }
            sub_223182C08((uint64_t)&__p);
            v219 = v246;
            if (v246)
            {
              v220 = (unint64_t *)&v246->__shared_owners_;
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                std::__shared_weak_count::__release_weak(v219);
              }
            }
            return;
          }
        }
        memmove(v175, v173, v174);
        goto LABEL_356;
      }
    }
  }
}

void sub_223432E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;

  if (a73)
  {
    if (a72 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223432E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;
  uint64_t v70;

  if (*(_BYTE *)(v70 - 168) && *(char *)(v70 - 169) < 0)
    operator delete(*(void **)(v70 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a19);
  if (a33 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a34);
  sub_223195348((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_223433128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_223195348((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22343313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v70 - 169) < 0)
  {
    operator delete(*(void **)(v70 - 192));
    sub_223195348((uint64_t)&a70);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_223433178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_223195348((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_22343318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;

  if (a36 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a70);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_2234331E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_223195348((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_2234331F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_223195348((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_223433208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_223195348((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_223433228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _QWORD *v31;

  sub_223198030((uint64_t)&a31, v31);
  JUMPOUT(0x223433238);
}

uint64_t sub_223433248(_QWORD *a1, char a2)
{
  char v2;
  _QWORD *v3;
  _BOOL4 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  size_t v9;
  const char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v15;
  const char *v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  void *v20;
  char v21;
  const char *v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned __int8 v67;
  const char *v68;
  size_t v69;
  void *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  size_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  unint64_t *v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v117;
  size_t v118;
  const char *v119;
  char v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  size_t v126;
  const char *v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v132;
  size_t v133;
  const char *v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  size_t v139;
  const char *v140;
  unsigned __int8 v141;
  const char *v142;
  size_t v143;
  void *v144;
  unint64_t v145;
  const char *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  size_t v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unsigned __int8 v189;
  const char *v190;
  size_t v191;
  void *v192;
  unint64_t v193;
  const char *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  size_t v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unsigned __int8 v237;
  const char *v238;
  size_t v239;
  void *v240;
  unint64_t v241;
  const char *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  size_t v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  void *v281;
  unint64_t *v282;
  uint64_t v283;
  unsigned __int8 v284;
  const char *v285;
  size_t v286;
  void *v287;
  unint64_t v288;
  const char *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  NSObject *v296;
  size_t v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  void *v328;
  unint64_t *v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  size_t v335;
  const char *v336;
  int v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  size_t v342;
  const char *v343;
  unsigned __int8 v344;
  const char *v345;
  size_t v346;
  void *v347;
  unint64_t v348;
  const char *v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  NSObject *v358;
  size_t v359;
  std::__shared_weak_count_vtbl *v360;
  std::__shared_weak_count *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  void *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unsigned __int8 v394;
  const char *v395;
  size_t v396;
  void *v397;
  unint64_t v398;
  const char *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  NSObject *v408;
  size_t v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  unint64_t *v441;
  BOOL v443;
  const char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t *v457;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v459;
  int v460;
  const char *v461;
  int v462;
  const char *v463;
  uint64_t v464;
  std::__shared_weak_count *v465;
  uint64_t v466;
  void *object;
  void *v468[2];
  __int128 v469;
  void *__p;
  size_t v471;
  unint64_t v472;
  char v473;
  uint64_t v474;
  _QWORD v475[2];

  v2 = a2;
  v3 = a1;
  v4 = *a1 != 0;
  if ((a2 & 1) == v4)
    goto LABEL_182;
  if (*a1)
  {
    sub_223446D5C(&v466);
    if (**(int **)(v466 + 56) > 5)
      goto LABEL_182;
    v5 = *(unsigned __int8 *)(v466 + 72);
    v6 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
    v7 = v6;
    if (!v5 && v6 == 0)
      goto LABEL_182;
    v457 = &v466;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v459 = std::chrono::system_clock::now().__d_.__rep_;
    v460 = 5;
    v461 = "unknown file";
    v462 = 78;
    v464 = 0;
    v465 = 0;
    v463 = "unknown function";
    v451 = v466;
    if (*(char *)(v466 + 39) < 0)
    {
      v10 = *(const char **)(v466 + 16);
      v9 = *(_QWORD *)(v466 + 24);
    }
    else
    {
      v9 = *(unsigned __int8 *)(v466 + 39);
      v10 = (const char *)(v466 + 16);
    }
    v445 = v466 + 16;
    v17 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v18 = (const char *)&xmmword_255788F40;
    else
      v18 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v19 = byte_255788F57;
    else
      v19 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v18, v10);
    v20 = v468;
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v19 >= 0x17)
    {
      v443 = v4;
      v21 = v2;
      v22 = v10;
      v23 = v7;
      v24 = v3;
      v25 = v5;
      v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v26 = v19 | 7;
      v27 = v26 + 1;
      v20 = operator new(v26 + 1);
      v468[1] = (void *)v19;
      *(_QWORD *)&v469 = v27 | 0x8000000000000000;
      v468[0] = v20;
      v5 = v25;
      v3 = v24;
      v7 = v23;
      v10 = v22;
      v2 = v21;
      LOBYTE(v4) = v443;
    }
    else
    {
      BYTE7(v469) = v19;
      if (!v19)
      {
LABEL_33:
        *((_BYTE *)v20 + v19) = 0;
        BYTE8(v469) = 1;
        p_p = &__p;
        if (v9 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v9 >= 0x17)
        {
          v29 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v29 = v9 | 7;
          v30 = v29 + 1;
          p_p = operator new(v29 + 1);
          v471 = v9;
          v472 = v30 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v472) = v9;
          if (!v9)
          {
LABEL_41:
            *((_BYTE *)p_p + v9) = 0;
            v473 = 1;
            v31 = object;
            if (SHIBYTE(v472) < 0)
              operator delete(__p);
            if (BYTE8(v469) && SBYTE7(v469) < 0)
              operator delete(v468[0]);
            if (object)
              os_release(object);
            if (v7 && *(_QWORD *)(v7 + 24))
            {
              v32 = _os_log_pack_size();
              v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
              v34 = (std::__shared_weak_count *)operator new();
              v35 = v34;
              v34->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v34->__shared_weak_owners_ = 0;
              v34[1].__vftable = v33;
              object = v33;
              v468[0] = v33;
              v468[1] = v34;
              do
                v37 = __ldxr(p_shared_owners);
              while (__stxr(v37 + 1, p_shared_owners));
              v469 = 0uLL;
              __p = 0;
              do
                v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v35);
              }
              v39 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v40 = operator new();
              v41 = *(unsigned __int8 *)(v451 + 39);
              v42 = v445;
              if ((v41 & 0x80u) != 0)
              {
                v42 = *(_QWORD *)(v451 + 16);
                v41 = *(_QWORD *)(v451 + 24);
              }
              *(_QWORD *)v40 = v39;
              *(_OWORD *)(v40 + 8) = *(_OWORD *)v468;
              v468[0] = 0;
              v468[1] = 0;
              *(_OWORD *)(v40 + 24) = v469;
              v469 = 0uLL;
              *(_QWORD *)(v40 + 40) = v42;
              *(_QWORD *)(v40 + 48) = v41;
              *(_BYTE *)(v40 + 56) = 16;
              v474 = 0;
              v475[0] = v40;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v475);
              v43 = v475[0];
              v475[0] = 0;
              if (v43)
              {
                v44 = *(std::__shared_weak_count **)(v43 + 32);
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                v47 = *(std::__shared_weak_count **)(v43 + 16);
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                MEMORY[0x227684CE8](v43, 0x10F0C40B62ED6C6);
                v50 = v474;
                v474 = 0;
                if (v50)
                {
                  v51 = *(std::__shared_weak_count **)(v50 + 32);
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v54 = *(std::__shared_weak_count **)(v50 + 16);
                  if (v54)
                  {
                    v55 = (unint64_t *)&v54->__shared_owners_;
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 - 1, v55));
                    if (!v56)
                    {
                      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                      std::__shared_weak_count::__release_weak(v54);
                    }
                  }
                  MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
                }
              }
              v57 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
              if (*((_QWORD *)&v469 + 1))
              {
                v58 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)v468[1];
              if (v468[1])
              {
                v61 = (unint64_t *)((char *)v468[1] + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
            }
            else
            {
              os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v63 = (void *)_os_log_send_and_compose_impl();
              if (v63)
                free(v63);
            }
            if (v5)
            {
              sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: plane state is set but not requested");
              sub_223182C08((uint64_t)&v457);
            }
            sub_223182C08((uint64_t)&v457);
            v64 = v465;
            if (v465)
            {
              v65 = (unint64_t *)&v465->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              goto LABEL_180;
            }
            goto LABEL_182;
          }
        }
        memmove(p_p, v10, v9);
        goto LABEL_41;
      }
    }
    memmove(v20, v18, v19);
    goto LABEL_33;
  }
  sub_223446D5C(&v466);
  if (**(int **)(v466 + 56) > 5)
    goto LABEL_182;
  v11 = *(unsigned __int8 *)(v466 + 72);
  v12 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
  v13 = v12;
  if (!v11 && v12 == 0)
    goto LABEL_182;
  v457 = &v466;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v459 = std::chrono::system_clock::now().__d_.__rep_;
  v460 = 5;
  v461 = "unknown file";
  v462 = 80;
  v464 = 0;
  v465 = 0;
  v463 = "unknown function";
  v452 = v466;
  if (*(char *)(v466 + 39) < 0)
  {
    v16 = *(const char **)(v466 + 16);
    v15 = *(_QWORD *)(v466 + 24);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v466 + 39);
    v16 = (const char *)(v466 + 16);
  }
  v446 = v466 + 16;
  v67 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v68 = (const char *)&xmmword_255788F40;
  else
    v68 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v69 = byte_255788F57;
  else
    v69 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v68, v16);
  v70 = v468;
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v69 >= 0x17)
  {
    v444 = v16;
    v71 = v13;
    v72 = v11;
    v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v73 = v69 | 7;
    v74 = v73 + 1;
    v70 = operator new(v73 + 1);
    v468[1] = (void *)v69;
    *(_QWORD *)&v469 = v74 | 0x8000000000000000;
    v468[0] = v70;
    v11 = v72;
    v13 = v71;
    v16 = v444;
    goto LABEL_114;
  }
  BYTE7(v469) = v69;
  if (v69)
LABEL_114:
    memmove(v70, v68, v69);
  *((_BYTE *)v70 + v69) = 0;
  BYTE8(v469) = 1;
  v75 = &__p;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v15 >= 0x17)
  {
    v76 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v76 = v15 | 7;
    v77 = v76 + 1;
    v75 = operator new(v76 + 1);
    v471 = v15;
    v472 = v77 | 0x8000000000000000;
    __p = v75;
    goto LABEL_122;
  }
  HIBYTE(v472) = v15;
  if (v15)
LABEL_122:
    memmove(v75, v16, v15);
  *((_BYTE *)v75 + v15) = 0;
  v473 = 1;
  v78 = object;
  if (SHIBYTE(v472) < 0)
    operator delete(__p);
  if (BYTE8(v469) && SBYTE7(v469) < 0)
    operator delete(v468[0]);
  if (object)
    os_release(object);
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    v79 = _os_log_pack_size();
    v80 = (std::__shared_weak_count_vtbl *)operator new(v79, (std::align_val_t)8uLL);
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v81;
    v81->__shared_owners_ = 0;
    v83 = (unint64_t *)&v81->__shared_owners_;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
    object = v80;
    v468[0] = v80;
    v468[1] = v81;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    v469 = 0uLL;
    __p = 0;
    do
      v85 = __ldaxr(v83);
    while (__stlxr(v85 - 1, v83));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v82);
    }
    v86 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v87 = operator new();
    v88 = *(unsigned __int8 *)(v452 + 39);
    v89 = v446;
    if ((v88 & 0x80u) != 0)
    {
      v89 = *(_QWORD *)(v452 + 16);
      v88 = *(_QWORD *)(v452 + 24);
    }
    *(_QWORD *)v87 = v86;
    *(_OWORD *)(v87 + 8) = *(_OWORD *)v468;
    v468[0] = 0;
    v468[1] = 0;
    *(_OWORD *)(v87 + 24) = v469;
    v469 = 0uLL;
    *(_QWORD *)(v87 + 40) = v89;
    *(_QWORD *)(v87 + 48) = v88;
    *(_BYTE *)(v87 + 56) = 16;
    v474 = 0;
    v475[0] = v87;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), v475);
    v90 = v475[0];
    v475[0] = 0;
    if (v90)
    {
      v91 = *(std::__shared_weak_count **)(v90 + 32);
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = *(std::__shared_weak_count **)(v90 + 16);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
      v97 = v474;
      v474 = 0;
      if (v97)
      {
        v98 = *(std::__shared_weak_count **)(v97 + 32);
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v101 = *(std::__shared_weak_count **)(v97 + 16);
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        MEMORY[0x227684CE8](v97, 0x10F0C40B62ED6C6);
      }
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
    if (*((_QWORD *)&v469 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = (std::__shared_weak_count *)v468[1];
    if (v468[1])
    {
      v108 = (unint64_t *)((char *)v468[1] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  else
  {
    os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v110 = (void *)_os_log_send_and_compose_impl();
    if (v110)
      free(v110);
  }
  if (v11)
  {
    sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: plane state is not set but requested");
    sub_223182C08((uint64_t)&v457);
  }
  sub_223182C08((uint64_t)&v457);
  v64 = v465;
  if (v465)
  {
    v111 = (unint64_t *)&v465->__shared_owners_;
    do
      v66 = __ldaxr(v111);
    while (__stlxr(v66 - 1, v111));
LABEL_180:
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_182:
  v112 = v3[2];
  if ((v112 != 0) == (v2 & 2) >> 1)
  {
    v120 = v2 ^ v4;
    v121 = v3[4];
    if ((v121 != 0) == (v2 & 4) >> 2)
      goto LABEL_458;
    goto LABEL_192;
  }
  if (v112)
  {
    sub_223446D5C(&v466);
    if (**(int **)(v466 + 56) > 5)
      goto LABEL_457;
    v113 = *(unsigned __int8 *)(v466 + 72);
    v114 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
    v115 = v114;
    if (!v113 && v114 == 0)
      goto LABEL_457;
    v457 = &v466;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v459 = std::chrono::system_clock::now().__d_.__rep_;
    v460 = 5;
    v461 = "unknown file";
    v462 = 88;
    v464 = 0;
    v465 = 0;
    v463 = "unknown function";
    v117 = *v457;
    v453 = *v457;
    if (*(char *)(*v457 + 39) < 0)
    {
      v119 = *(const char **)(v117 + 16);
      v118 = *(_QWORD *)(v117 + 24);
    }
    else
    {
      v118 = *(unsigned __int8 *)(*v457 + 39);
      v119 = (const char *)(*v457 + 16);
    }
    v447 = *v457 + 16;
    v141 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v142 = (const char *)&xmmword_255788F40;
    else
      v142 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v143 = byte_255788F57;
    else
      v143 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v142, v119);
    v144 = v468;
    if (v143 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v143 >= 0x17)
    {
      v145 = v115;
      v146 = v119;
      v147 = v113;
      v148 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v143 | 7) != 0x17)
        v148 = v143 | 7;
      v149 = v148 + 1;
      v144 = operator new(v148 + 1);
      v468[1] = (void *)v143;
      *(_QWORD *)&v469 = v149 | 0x8000000000000000;
      v468[0] = v144;
      v113 = v147;
      v119 = v146;
      v115 = v145;
    }
    else
    {
      BYTE7(v469) = v143;
      if (!v143)
      {
LABEL_226:
        *((_BYTE *)v144 + v143) = 0;
        BYTE8(v469) = 1;
        v150 = &__p;
        if (v118 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v118 >= 0x17)
        {
          v151 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v118 | 7) != 0x17)
            v151 = v118 | 7;
          v152 = v151 + 1;
          v150 = operator new(v151 + 1);
          v471 = v118;
          v472 = v152 | 0x8000000000000000;
          __p = v150;
        }
        else
        {
          HIBYTE(v472) = v118;
          if (!v118)
          {
LABEL_234:
            *((_BYTE *)v150 + v118) = 0;
            v473 = 1;
            v153 = object;
            if (SHIBYTE(v472) < 0)
              operator delete(__p);
            if (BYTE8(v469) && SBYTE7(v469) < 0)
              operator delete(v468[0]);
            if (object)
              os_release(object);
            if (v115 && *(_QWORD *)(v115 + 24))
            {
              v154 = _os_log_pack_size();
              v155 = (std::__shared_weak_count_vtbl *)operator new(v154, (std::align_val_t)8uLL);
              v156 = (std::__shared_weak_count *)operator new();
              v157 = v156;
              v156->__shared_owners_ = 0;
              v158 = (unint64_t *)&v156->__shared_owners_;
              v156->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v156->__shared_weak_owners_ = 0;
              v156[1].__vftable = v155;
              object = v155;
              v468[0] = v155;
              v468[1] = v156;
              do
                v159 = __ldxr(v158);
              while (__stxr(v159 + 1, v158));
              v469 = 0uLL;
              __p = 0;
              do
                v160 = __ldaxr(v158);
              while (__stlxr(v160 - 1, v158));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v157);
              }
              v161 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v162 = operator new();
              v163 = *(unsigned __int8 *)(v453 + 39);
              v164 = v447;
              if ((v163 & 0x80u) != 0)
              {
                v164 = *(_QWORD *)(v453 + 16);
                v163 = *(_QWORD *)(v453 + 24);
              }
              *(_QWORD *)v162 = v161;
              *(_OWORD *)(v162 + 8) = *(_OWORD *)v468;
              v468[0] = 0;
              v468[1] = 0;
              *(_OWORD *)(v162 + 24) = v469;
              v469 = 0uLL;
              *(_QWORD *)(v162 + 40) = v164;
              *(_QWORD *)(v162 + 48) = v163;
              *(_BYTE *)(v162 + 56) = 16;
              v474 = 0;
              v475[0] = v162;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v115 + 24) + 40))(*(_QWORD *)(v115 + 24), v475);
              v165 = v475[0];
              v475[0] = 0;
              if (v165)
              {
                v166 = *(std::__shared_weak_count **)(v165 + 32);
                if (v166)
                {
                  v167 = (unint64_t *)&v166->__shared_owners_;
                  do
                    v168 = __ldaxr(v167);
                  while (__stlxr(v168 - 1, v167));
                  if (!v168)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v166);
                  }
                }
                v169 = *(std::__shared_weak_count **)(v165 + 16);
                if (v169)
                {
                  v170 = (unint64_t *)&v169->__shared_owners_;
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                    std::__shared_weak_count::__release_weak(v169);
                  }
                }
                MEMORY[0x227684CE8](v165, 0x10F0C40B62ED6C6);
                v172 = v474;
                v474 = 0;
                if (v172)
                {
                  v173 = *(std::__shared_weak_count **)(v172 + 32);
                  if (v173)
                  {
                    v174 = (unint64_t *)&v173->__shared_owners_;
                    do
                      v175 = __ldaxr(v174);
                    while (__stlxr(v175 - 1, v174));
                    if (!v175)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                  v176 = *(std::__shared_weak_count **)(v172 + 16);
                  if (v176)
                  {
                    v177 = (unint64_t *)&v176->__shared_owners_;
                    do
                      v178 = __ldaxr(v177);
                    while (__stlxr(v178 - 1, v177));
                    if (!v178)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                    }
                  }
                  MEMORY[0x227684CE8](v172, 0x10F0C40B62ED6C6);
                }
              }
              v179 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
              if (*((_QWORD *)&v469 + 1))
              {
                v180 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                }
              }
              v182 = (std::__shared_weak_count *)v468[1];
              if (v468[1])
              {
                v183 = (unint64_t *)((char *)v468[1] + 8);
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
            }
            else
            {
              os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v185 = (void *)_os_log_send_and_compose_impl();
              if (v185)
                free(v185);
            }
            if (v113)
            {
              sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: mesh state is set but not requested");
              sub_223182C08((uint64_t)&v457);
            }
            sub_223182C08((uint64_t)&v457);
            v186 = v465;
            if (v465)
            {
              v187 = (unint64_t *)&v465->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              goto LABEL_455;
            }
            goto LABEL_457;
          }
        }
        memmove(v150, v119, v118);
        goto LABEL_234;
      }
    }
    memmove(v144, v142, v143);
    goto LABEL_226;
  }
  sub_223446D5C(&v466);
  if (**(int **)(v466 + 56) > 5)
    goto LABEL_457;
  v128 = *(unsigned __int8 *)(v466 + 72);
  v129 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
  v130 = v129;
  if (!v128 && v129 == 0)
    goto LABEL_457;
  v457 = &v466;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v459 = std::chrono::system_clock::now().__d_.__rep_;
  v460 = 5;
  v461 = "unknown file";
  v462 = 90;
  v464 = 0;
  v465 = 0;
  v463 = "unknown function";
  v132 = *v457;
  v455 = *v457;
  if (*(char *)(*v457 + 39) < 0)
  {
    v134 = *(const char **)(v132 + 16);
    v133 = *(_QWORD *)(v132 + 24);
  }
  else
  {
    v133 = *(unsigned __int8 *)(*v457 + 39);
    v134 = (const char *)(*v457 + 16);
  }
  v449 = *v457 + 16;
  v237 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v237 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v238 = (const char *)&xmmword_255788F40;
  else
    v238 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v239 = byte_255788F57;
  else
    v239 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v238, v134);
  v240 = v468;
  if (v239 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v239 >= 0x17)
  {
    v241 = v130;
    v242 = v134;
    v243 = v128;
    v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17)
      v244 = v239 | 7;
    v245 = v244 + 1;
    v240 = operator new(v244 + 1);
    v468[1] = (void *)v239;
    *(_QWORD *)&v469 = v245 | 0x8000000000000000;
    v468[0] = v240;
    v128 = v243;
    v134 = v242;
    v130 = v241;
    goto LABEL_389;
  }
  BYTE7(v469) = v239;
  if (v239)
LABEL_389:
    memmove(v240, v238, v239);
  *((_BYTE *)v240 + v239) = 0;
  BYTE8(v469) = 1;
  v246 = &__p;
  if (v133 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v133 >= 0x17)
  {
    v247 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v133 | 7) != 0x17)
      v247 = v133 | 7;
    v248 = v247 + 1;
    v246 = operator new(v247 + 1);
    v471 = v133;
    v472 = v248 | 0x8000000000000000;
    __p = v246;
    goto LABEL_397;
  }
  HIBYTE(v472) = v133;
  if (v133)
LABEL_397:
    memmove(v246, v134, v133);
  *((_BYTE *)v246 + v133) = 0;
  v473 = 1;
  v249 = object;
  if (SHIBYTE(v472) < 0)
    operator delete(__p);
  if (BYTE8(v469) && SBYTE7(v469) < 0)
    operator delete(v468[0]);
  if (object)
    os_release(object);
  if (v130 && *(_QWORD *)(v130 + 24))
  {
    v250 = _os_log_pack_size();
    v251 = (std::__shared_weak_count_vtbl *)operator new(v250, (std::align_val_t)8uLL);
    v252 = (std::__shared_weak_count *)operator new();
    v253 = v252;
    v252->__shared_owners_ = 0;
    v254 = (unint64_t *)&v252->__shared_owners_;
    v252->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v252->__shared_weak_owners_ = 0;
    v252[1].__vftable = v251;
    object = v251;
    v468[0] = v251;
    v468[1] = v252;
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
    v469 = 0uLL;
    __p = 0;
    do
      v256 = __ldaxr(v254);
    while (__stlxr(v256 - 1, v254));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v253);
    }
    v257 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v258 = operator new();
    v259 = *(unsigned __int8 *)(v455 + 39);
    v260 = v449;
    if ((v259 & 0x80u) != 0)
    {
      v260 = *(_QWORD *)(v455 + 16);
      v259 = *(_QWORD *)(v455 + 24);
    }
    *(_QWORD *)v258 = v257;
    *(_OWORD *)(v258 + 8) = *(_OWORD *)v468;
    v468[0] = 0;
    v468[1] = 0;
    *(_OWORD *)(v258 + 24) = v469;
    v469 = 0uLL;
    *(_QWORD *)(v258 + 40) = v260;
    *(_QWORD *)(v258 + 48) = v259;
    *(_BYTE *)(v258 + 56) = 16;
    v474 = 0;
    v475[0] = v258;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v130 + 24) + 40))(*(_QWORD *)(v130 + 24), v475);
    v261 = v475[0];
    v475[0] = 0;
    if (v261)
    {
      v262 = *(std::__shared_weak_count **)(v261 + 32);
      if (v262)
      {
        v263 = (unint64_t *)&v262->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      v265 = *(std::__shared_weak_count **)(v261 + 16);
      if (v265)
      {
        v266 = (unint64_t *)&v265->__shared_owners_;
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
          std::__shared_weak_count::__release_weak(v265);
        }
      }
      MEMORY[0x227684CE8](v261, 0x10F0C40B62ED6C6);
      v268 = v474;
      v474 = 0;
      if (v268)
      {
        v269 = *(std::__shared_weak_count **)(v268 + 32);
        if (v269)
        {
          v270 = (unint64_t *)&v269->__shared_owners_;
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }
        v272 = *(std::__shared_weak_count **)(v268 + 16);
        if (v272)
        {
          v273 = (unint64_t *)&v272->__shared_owners_;
          do
            v274 = __ldaxr(v273);
          while (__stlxr(v274 - 1, v273));
          if (!v274)
          {
            ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
            std::__shared_weak_count::__release_weak(v272);
          }
        }
        MEMORY[0x227684CE8](v268, 0x10F0C40B62ED6C6);
      }
    }
    v275 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
    if (*((_QWORD *)&v469 + 1))
    {
      v276 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    v278 = (std::__shared_weak_count *)v468[1];
    if (v468[1])
    {
      v279 = (unint64_t *)((char *)v468[1] + 8);
      do
        v280 = __ldaxr(v279);
      while (__stlxr(v280 - 1, v279));
      if (!v280)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
  }
  else
  {
    os_log_type_enabled(v249, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v281 = (void *)_os_log_send_and_compose_impl();
    if (v281)
      free(v281);
  }
  if (v128)
  {
    sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: mesh state is not set but requested");
    sub_223182C08((uint64_t)&v457);
  }
  sub_223182C08((uint64_t)&v457);
  v186 = v465;
  if (v465)
  {
    v282 = (unint64_t *)&v465->__shared_owners_;
    do
      v188 = __ldaxr(v282);
    while (__stlxr(v188 - 1, v282));
LABEL_455:
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
LABEL_457:
  v120 = 1;
  v121 = v3[4];
  if ((v121 != 0) == (v2 & 4) >> 2)
  {
LABEL_458:
    v283 = v3[6];
    if ((v283 != 0) == (v2 & 8) >> 3)
      return v120 & 1;
LABEL_544:
    if (v283)
    {
      sub_223446D5C(&v466);
      if (**(int **)(v466 + 56) <= 5)
      {
        v330 = *(unsigned __int8 *)(v466 + 72);
        v331 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
        v332 = v331;
        if (v330 || v331)
        {
          v457 = &v466;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v459 = std::chrono::system_clock::now().__d_.__rep_;
          v460 = 5;
          v461 = "unknown file";
          v462 = 111;
          v464 = 0;
          v465 = 0;
          v463 = "unknown function";
          v333 = *v457;
          v334 = *v457 + 16;
          if (*(char *)(*v457 + 39) < 0)
          {
            v336 = *(const char **)(v333 + 16);
            v335 = *(_QWORD *)(v333 + 24);
          }
          else
          {
            v335 = *(unsigned __int8 *)(*v457 + 39);
            v336 = (const char *)(*v457 + 16);
          }
          v344 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
          {
            sub_224568628((uint64_t)&object);
            sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
            if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
            __cxa_guard_release(&qword_255788F58);
          }
          if (byte_255788F57 >= 0)
            v345 = (const char *)&xmmword_255788F40;
          else
            v345 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v346 = byte_255788F57;
          else
            v346 = *((_QWORD *)&xmmword_255788F40 + 1);
          object = os_log_create(v345, v336);
          v347 = v468;
          if (v346 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v346 >= 0x17)
          {
            v348 = v332;
            v349 = v336;
            v350 = v333;
            v351 = v330;
            v352 = v334;
            v353 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v346 | 7) != 0x17)
              v353 = v346 | 7;
            v354 = v353 + 1;
            v347 = operator new(v353 + 1);
            v468[1] = (void *)v346;
            *(_QWORD *)&v469 = v354 | 0x8000000000000000;
            v468[0] = v347;
            v334 = v352;
            v330 = v351;
            v333 = v350;
            v336 = v349;
            v332 = v348;
          }
          else
          {
            BYTE7(v469) = v346;
            if (!v346)
            {
LABEL_571:
              *((_BYTE *)v347 + v346) = 0;
              BYTE8(v469) = 1;
              v355 = &__p;
              if (v335 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v335 >= 0x17)
              {
                v356 = (v335 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v335 | 7) != 0x17)
                  v356 = v335 | 7;
                v357 = v356 + 1;
                v355 = operator new(v356 + 1);
                v471 = v335;
                v472 = v357 | 0x8000000000000000;
                __p = v355;
              }
              else
              {
                HIBYTE(v472) = v335;
                if (!v335)
                  goto LABEL_579;
              }
              memmove(v355, v336, v335);
LABEL_579:
              *((_BYTE *)v355 + v335) = 0;
              v473 = 1;
              v358 = object;
              if (SHIBYTE(v472) < 0)
                operator delete(__p);
              if (BYTE8(v469) && SBYTE7(v469) < 0)
                operator delete(v468[0]);
              if (object)
                os_release(object);
              if (v332 && *(_QWORD *)(v332 + 24))
              {
                v359 = _os_log_pack_size();
                v360 = (std::__shared_weak_count_vtbl *)operator new(v359, (std::align_val_t)8uLL);
                v361 = (std::__shared_weak_count *)operator new();
                v362 = v361;
                v361->__shared_owners_ = 0;
                v363 = (unint64_t *)&v361->__shared_owners_;
                v361->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v361->__shared_weak_owners_ = 0;
                v361[1].__vftable = v360;
                object = v360;
                v468[0] = v360;
                v468[1] = v361;
                do
                  v364 = __ldxr(v363);
                while (__stxr(v364 + 1, v363));
                v469 = 0uLL;
                __p = 0;
                do
                  v365 = __ldaxr(v363);
                while (__stlxr(v365 - 1, v363));
                if (!v365)
                {
                  ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                  std::__shared_weak_count::__release_weak(v362);
                }
                v366 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v367 = operator new();
                v368 = *(unsigned __int8 *)(v333 + 39);
                if ((v368 & 0x80u) == 0)
                  v369 = v334;
                else
                  v369 = *(_QWORD *)(v333 + 16);
                if ((v368 & 0x80u) != 0)
                  v368 = *(_QWORD *)(v333 + 24);
                *(_QWORD *)v367 = v366;
                *(_OWORD *)(v367 + 8) = *(_OWORD *)v468;
                v468[0] = 0;
                v468[1] = 0;
                *(_OWORD *)(v367 + 24) = v469;
                v469 = 0uLL;
                *(_QWORD *)(v367 + 40) = v369;
                *(_QWORD *)(v367 + 48) = v368;
                *(_BYTE *)(v367 + 56) = 16;
                v474 = 0;
                v475[0] = v367;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v332 + 24) + 40))(*(_QWORD *)(v332 + 24), v475);
                v370 = v475[0];
                v475[0] = 0;
                if (v370)
                {
                  v371 = *(std::__shared_weak_count **)(v370 + 32);
                  if (v371)
                  {
                    v372 = (unint64_t *)&v371->__shared_owners_;
                    do
                      v373 = __ldaxr(v372);
                    while (__stlxr(v373 - 1, v372));
                    if (!v373)
                    {
                      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                      std::__shared_weak_count::__release_weak(v371);
                    }
                  }
                  v374 = *(std::__shared_weak_count **)(v370 + 16);
                  if (v374)
                  {
                    v375 = (unint64_t *)&v374->__shared_owners_;
                    do
                      v376 = __ldaxr(v375);
                    while (__stlxr(v376 - 1, v375));
                    if (!v376)
                    {
                      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                      std::__shared_weak_count::__release_weak(v374);
                    }
                  }
                  MEMORY[0x227684CE8](v370, 0x10F0C40B62ED6C6);
                  v377 = v474;
                  v474 = 0;
                  if (v377)
                  {
                    v378 = *(std::__shared_weak_count **)(v377 + 32);
                    if (v378)
                    {
                      v379 = (unint64_t *)&v378->__shared_owners_;
                      do
                        v380 = __ldaxr(v379);
                      while (__stlxr(v380 - 1, v379));
                      if (!v380)
                      {
                        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                        std::__shared_weak_count::__release_weak(v378);
                      }
                    }
                    v381 = *(std::__shared_weak_count **)(v377 + 16);
                    if (v381)
                    {
                      v382 = (unint64_t *)&v381->__shared_owners_;
                      do
                        v383 = __ldaxr(v382);
                      while (__stlxr(v383 - 1, v382));
                      if (!v383)
                      {
                        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                        std::__shared_weak_count::__release_weak(v381);
                      }
                    }
                    MEMORY[0x227684CE8](v377, 0x10F0C40B62ED6C6);
                  }
                }
                v384 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
                if (*((_QWORD *)&v469 + 1))
                {
                  v385 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
                  do
                    v386 = __ldaxr(v385);
                  while (__stlxr(v386 - 1, v385));
                  if (!v386)
                  {
                    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                    std::__shared_weak_count::__release_weak(v384);
                  }
                }
                v387 = (std::__shared_weak_count *)v468[1];
                if (v468[1])
                {
                  v388 = (unint64_t *)((char *)v468[1] + 8);
                  do
                    v389 = __ldaxr(v388);
                  while (__stlxr(v389 - 1, v388));
                  if (!v389)
                  {
                    ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                    std::__shared_weak_count::__release_weak(v387);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v358, OS_LOG_TYPE_ERROR);
                LOWORD(object) = 0;
                v390 = (void *)_os_log_send_and_compose_impl();
                if (v390)
                  free(v390);
              }
              if (v330)
              {
                sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: room boundary state is set but not requested");
                sub_223182C08((uint64_t)&v457);
              }
              sub_223182C08((uint64_t)&v457);
              v391 = v465;
              if (!v465)
                goto LABEL_726;
              v392 = (unint64_t *)&v465->__shared_owners_;
              do
                v393 = __ldaxr(v392);
              while (__stlxr(v393 - 1, v392));
              goto LABEL_724;
            }
          }
          memmove(v347, v345, v346);
          goto LABEL_571;
        }
      }
LABEL_726:
      v120 = 1;
      return v120 & 1;
    }
    sub_223446D5C(&v466);
    if (**(int **)(v466 + 56) > 5)
      goto LABEL_726;
    v337 = *(unsigned __int8 *)(v466 + 72);
    v338 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
    v339 = v338;
    if (!v337 && !v338)
      goto LABEL_726;
    v457 = &v466;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v459 = std::chrono::system_clock::now().__d_.__rep_;
    v460 = 5;
    v461 = "unknown file";
    v462 = 114;
    v464 = 0;
    v465 = 0;
    v463 = "unknown function";
    v340 = *v457;
    v341 = *v457 + 16;
    if (*(char *)(*v457 + 39) < 0)
    {
      v343 = *(const char **)(v340 + 16);
      v342 = *(_QWORD *)(v340 + 24);
    }
    else
    {
      v342 = *(unsigned __int8 *)(*v457 + 39);
      v343 = (const char *)(*v457 + 16);
    }
    v394 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v394 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v395 = (const char *)&xmmword_255788F40;
    else
      v395 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v396 = byte_255788F57;
    else
      v396 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v395, v343);
    v397 = v468;
    if (v396 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v396 >= 0x17)
    {
      v398 = v339;
      v399 = v343;
      v400 = v340;
      v401 = v337;
      v402 = v341;
      v403 = (v396 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v396 | 7) != 0x17)
        v403 = v396 | 7;
      v404 = v403 + 1;
      v397 = operator new(v403 + 1);
      v468[1] = (void *)v396;
      *(_QWORD *)&v469 = v404 | 0x8000000000000000;
      v468[0] = v397;
      v341 = v402;
      v337 = v401;
      v340 = v400;
      v343 = v399;
      v339 = v398;
    }
    else
    {
      BYTE7(v469) = v396;
      if (!v396)
      {
LABEL_656:
        *((_BYTE *)v397 + v396) = 0;
        BYTE8(v469) = 1;
        v405 = &__p;
        if (v342 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v342 >= 0x17)
        {
          v406 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v342 | 7) != 0x17)
            v406 = v342 | 7;
          v407 = v406 + 1;
          v405 = operator new(v406 + 1);
          v471 = v342;
          v472 = v407 | 0x8000000000000000;
          __p = v405;
        }
        else
        {
          HIBYTE(v472) = v342;
          if (!v342)
            goto LABEL_664;
        }
        memmove(v405, v343, v342);
LABEL_664:
        *((_BYTE *)v405 + v342) = 0;
        v473 = 1;
        v408 = object;
        if (SHIBYTE(v472) < 0)
          operator delete(__p);
        if (BYTE8(v469) && SBYTE7(v469) < 0)
          operator delete(v468[0]);
        if (object)
          os_release(object);
        if (v339 && *(_QWORD *)(v339 + 24))
        {
          v409 = _os_log_pack_size();
          v410 = (std::__shared_weak_count_vtbl *)operator new(v409, (std::align_val_t)8uLL);
          v411 = (std::__shared_weak_count *)operator new();
          v412 = v411;
          v411->__shared_owners_ = 0;
          v413 = (unint64_t *)&v411->__shared_owners_;
          v411->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v411->__shared_weak_owners_ = 0;
          v411[1].__vftable = v410;
          object = v410;
          v468[0] = v410;
          v468[1] = v411;
          do
            v414 = __ldxr(v413);
          while (__stxr(v414 + 1, v413));
          v469 = 0uLL;
          __p = 0;
          do
            v415 = __ldaxr(v413);
          while (__stlxr(v415 - 1, v413));
          if (!v415)
          {
            ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
            std::__shared_weak_count::__release_weak(v412);
          }
          v416 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v417 = operator new();
          v418 = *(unsigned __int8 *)(v340 + 39);
          if ((v418 & 0x80u) == 0)
            v419 = v341;
          else
            v419 = *(_QWORD *)(v340 + 16);
          if ((v418 & 0x80u) != 0)
            v418 = *(_QWORD *)(v340 + 24);
          *(_QWORD *)v417 = v416;
          *(_OWORD *)(v417 + 8) = *(_OWORD *)v468;
          v468[0] = 0;
          v468[1] = 0;
          *(_OWORD *)(v417 + 24) = v469;
          v469 = 0uLL;
          *(_QWORD *)(v417 + 40) = v419;
          *(_QWORD *)(v417 + 48) = v418;
          *(_BYTE *)(v417 + 56) = 16;
          v474 = 0;
          v475[0] = v417;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v339 + 24) + 40))(*(_QWORD *)(v339 + 24), v475);
          v420 = v475[0];
          v475[0] = 0;
          if (v420)
          {
            v421 = *(std::__shared_weak_count **)(v420 + 32);
            if (v421)
            {
              v422 = (unint64_t *)&v421->__shared_owners_;
              do
                v423 = __ldaxr(v422);
              while (__stlxr(v423 - 1, v422));
              if (!v423)
              {
                ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                std::__shared_weak_count::__release_weak(v421);
              }
            }
            v424 = *(std::__shared_weak_count **)(v420 + 16);
            if (v424)
            {
              v425 = (unint64_t *)&v424->__shared_owners_;
              do
                v426 = __ldaxr(v425);
              while (__stlxr(v426 - 1, v425));
              if (!v426)
              {
                ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
                std::__shared_weak_count::__release_weak(v424);
              }
            }
            MEMORY[0x227684CE8](v420, 0x10F0C40B62ED6C6);
            v427 = v474;
            v474 = 0;
            if (v427)
            {
              v428 = *(std::__shared_weak_count **)(v427 + 32);
              if (v428)
              {
                v429 = (unint64_t *)&v428->__shared_owners_;
                do
                  v430 = __ldaxr(v429);
                while (__stlxr(v430 - 1, v429));
                if (!v430)
                {
                  ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
                  std::__shared_weak_count::__release_weak(v428);
                }
              }
              v431 = *(std::__shared_weak_count **)(v427 + 16);
              if (v431)
              {
                v432 = (unint64_t *)&v431->__shared_owners_;
                do
                  v433 = __ldaxr(v432);
                while (__stlxr(v433 - 1, v432));
                if (!v433)
                {
                  ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                  std::__shared_weak_count::__release_weak(v431);
                }
              }
              MEMORY[0x227684CE8](v427, 0x10F0C40B62ED6C6);
            }
          }
          v434 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
          if (*((_QWORD *)&v469 + 1))
          {
            v435 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          v437 = (std::__shared_weak_count *)v468[1];
          if (v468[1])
          {
            v438 = (unint64_t *)((char *)v468[1] + 8);
            do
              v439 = __ldaxr(v438);
            while (__stlxr(v439 - 1, v438));
            if (!v439)
            {
              ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
              std::__shared_weak_count::__release_weak(v437);
            }
          }
        }
        else
        {
          os_log_type_enabled(v408, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v440 = (void *)_os_log_send_and_compose_impl();
          if (v440)
            free(v440);
        }
        if (v337)
        {
          sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: room boundary state is not set but requested");
          sub_223182C08((uint64_t)&v457);
        }
        sub_223182C08((uint64_t)&v457);
        v391 = v465;
        if (!v465)
          goto LABEL_726;
        v441 = (unint64_t *)&v465->__shared_owners_;
        do
          v393 = __ldaxr(v441);
        while (__stlxr(v393 - 1, v441));
LABEL_724:
        if (!v393)
        {
          ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
          std::__shared_weak_count::__release_weak(v391);
        }
        goto LABEL_726;
      }
    }
    memmove(v397, v395, v396);
    goto LABEL_656;
  }
LABEL_192:
  if (v121)
  {
    sub_223446D5C(&v466);
    if (**(int **)(v466 + 56) > 5)
      goto LABEL_543;
    v122 = *(unsigned __int8 *)(v466 + 72);
    v123 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
    v124 = v123;
    if (!v122 && !v123)
      goto LABEL_543;
    v457 = &v466;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v459 = std::chrono::system_clock::now().__d_.__rep_;
    v460 = 5;
    v461 = "unknown file";
    v462 = 99;
    v464 = 0;
    v465 = 0;
    v463 = "unknown function";
    v125 = *v457;
    v454 = *v457;
    if (*(char *)(*v457 + 39) < 0)
    {
      v127 = *(const char **)(v125 + 16);
      v126 = *(_QWORD *)(v125 + 24);
    }
    else
    {
      v126 = *(unsigned __int8 *)(*v457 + 39);
      v127 = (const char *)(*v457 + 16);
    }
    v448 = *v457 + 16;
    v189 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v189 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)&object);
      sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
      if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v190 = (const char *)&xmmword_255788F40;
    else
      v190 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v191 = byte_255788F57;
    else
      v191 = *((_QWORD *)&xmmword_255788F40 + 1);
    object = os_log_create(v190, v127);
    v192 = v468;
    if (v191 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v191 >= 0x17)
    {
      v193 = v124;
      v194 = v127;
      v195 = v122;
      v196 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v191 | 7) != 0x17)
        v196 = v191 | 7;
      v197 = v196 + 1;
      v192 = operator new(v196 + 1);
      v468[1] = (void *)v191;
      *(_QWORD *)&v469 = v197 | 0x8000000000000000;
      v468[0] = v192;
      v122 = v195;
      v127 = v194;
      v124 = v193;
    }
    else
    {
      BYTE7(v469) = v191;
      if (!v191)
      {
LABEL_308:
        *((_BYTE *)v192 + v191) = 0;
        BYTE8(v469) = 1;
        v198 = &__p;
        if (v126 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v126 >= 0x17)
        {
          v199 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v126 | 7) != 0x17)
            v199 = v126 | 7;
          v200 = v199 + 1;
          v198 = operator new(v199 + 1);
          v471 = v126;
          v472 = v200 | 0x8000000000000000;
          __p = v198;
        }
        else
        {
          HIBYTE(v472) = v126;
          if (!v126)
          {
LABEL_316:
            *((_BYTE *)v198 + v126) = 0;
            v473 = 1;
            v201 = object;
            if (SHIBYTE(v472) < 0)
              operator delete(__p);
            if (BYTE8(v469) && SBYTE7(v469) < 0)
              operator delete(v468[0]);
            if (object)
              os_release(object);
            if (v124 && *(_QWORD *)(v124 + 24))
            {
              v202 = _os_log_pack_size();
              v203 = (std::__shared_weak_count_vtbl *)operator new(v202, (std::align_val_t)8uLL);
              v204 = (std::__shared_weak_count *)operator new();
              v205 = v204;
              v204->__shared_owners_ = 0;
              v206 = (unint64_t *)&v204->__shared_owners_;
              v204->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v204->__shared_weak_owners_ = 0;
              v204[1].__vftable = v203;
              object = v203;
              v468[0] = v203;
              v468[1] = v204;
              do
                v207 = __ldxr(v206);
              while (__stxr(v207 + 1, v206));
              v469 = 0uLL;
              __p = 0;
              do
                v208 = __ldaxr(v206);
              while (__stlxr(v208 - 1, v206));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v205);
              }
              v209 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v210 = operator new();
              v211 = *(unsigned __int8 *)(v454 + 39);
              v212 = v448;
              if ((v211 & 0x80u) != 0)
              {
                v212 = *(_QWORD *)(v454 + 16);
                v211 = *(_QWORD *)(v454 + 24);
              }
              *(_QWORD *)v210 = v209;
              *(_OWORD *)(v210 + 8) = *(_OWORD *)v468;
              v468[0] = 0;
              v468[1] = 0;
              *(_OWORD *)(v210 + 24) = v469;
              v469 = 0uLL;
              *(_QWORD *)(v210 + 40) = v212;
              *(_QWORD *)(v210 + 48) = v211;
              *(_BYTE *)(v210 + 56) = 16;
              v474 = 0;
              v475[0] = v210;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v124 + 24) + 40))(*(_QWORD *)(v124 + 24), v475);
              v213 = v475[0];
              v475[0] = 0;
              if (v213)
              {
                v214 = *(std::__shared_weak_count **)(v213 + 32);
                if (v214)
                {
                  v215 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v216 = __ldaxr(v215);
                  while (__stlxr(v216 - 1, v215));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
                v217 = *(std::__shared_weak_count **)(v213 + 16);
                if (v217)
                {
                  v218 = (unint64_t *)&v217->__shared_owners_;
                  do
                    v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                    std::__shared_weak_count::__release_weak(v217);
                  }
                }
                MEMORY[0x227684CE8](v213, 0x10F0C40B62ED6C6);
                v220 = v474;
                v474 = 0;
                if (v220)
                {
                  v221 = *(std::__shared_weak_count **)(v220 + 32);
                  if (v221)
                  {
                    v222 = (unint64_t *)&v221->__shared_owners_;
                    do
                      v223 = __ldaxr(v222);
                    while (__stlxr(v223 - 1, v222));
                    if (!v223)
                    {
                      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                      std::__shared_weak_count::__release_weak(v221);
                    }
                  }
                  v224 = *(std::__shared_weak_count **)(v220 + 16);
                  if (v224)
                  {
                    v225 = (unint64_t *)&v224->__shared_owners_;
                    do
                      v226 = __ldaxr(v225);
                    while (__stlxr(v226 - 1, v225));
                    if (!v226)
                    {
                      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                      std::__shared_weak_count::__release_weak(v224);
                    }
                  }
                  MEMORY[0x227684CE8](v220, 0x10F0C40B62ED6C6);
                }
              }
              v227 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
              if (*((_QWORD *)&v469 + 1))
              {
                v228 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                }
              }
              v230 = (std::__shared_weak_count *)v468[1];
              if (v468[1])
              {
                v231 = (unint64_t *)((char *)v468[1] + 8);
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
            }
            else
            {
              os_log_type_enabled(v201, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v233 = (void *)_os_log_send_and_compose_impl();
              if (v233)
                free(v233);
            }
            if (v122)
            {
              sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: keyframing state is set but not requested");
              sub_223182C08((uint64_t)&v457);
            }
            sub_223182C08((uint64_t)&v457);
            v234 = v465;
            if (v465)
            {
              v235 = (unint64_t *)&v465->__shared_owners_;
              do
                v236 = __ldaxr(v235);
              while (__stlxr(v236 - 1, v235));
              goto LABEL_541;
            }
            goto LABEL_543;
          }
        }
        memmove(v198, v127, v126);
        goto LABEL_316;
      }
    }
    memmove(v192, v190, v191);
    goto LABEL_308;
  }
  sub_223446D5C(&v466);
  if (**(int **)(v466 + 56) > 5)
    goto LABEL_543;
  v135 = *(unsigned __int8 *)(v466 + 72);
  v136 = sub_22322F254(v466, "OSLogSurrogateAppender", 1, 0);
  v137 = v136;
  if (!v135 && !v136)
    goto LABEL_543;
  v457 = &v466;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v459 = std::chrono::system_clock::now().__d_.__rep_;
  v460 = 5;
  v461 = "unknown file";
  v462 = 102;
  v464 = 0;
  v465 = 0;
  v463 = "unknown function";
  v138 = *v457;
  v456 = *v457;
  if (*(char *)(*v457 + 39) < 0)
  {
    v140 = *(const char **)(v138 + 16);
    v139 = *(_QWORD *)(v138 + 24);
  }
  else
  {
    v139 = *(unsigned __int8 *)(*v457 + 39);
    v140 = (const char *)(*v457 + 16);
  }
  v450 = *v457 + 16;
  v284 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v284 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v469 && SHIBYTE(v468[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v285 = (const char *)&xmmword_255788F40;
  else
    v285 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v286 = byte_255788F57;
  else
    v286 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v285, v140);
  v287 = v468;
  if (v286 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v286 >= 0x17)
  {
    v288 = v137;
    v289 = v140;
    v290 = v135;
    v291 = (v286 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v286 | 7) != 0x17)
      v291 = v286 | 7;
    v292 = v291 + 1;
    v287 = operator new(v291 + 1);
    v468[1] = (void *)v286;
    *(_QWORD *)&v469 = v292 | 0x8000000000000000;
    v468[0] = v287;
    v135 = v290;
    v140 = v289;
    v137 = v288;
    goto LABEL_475;
  }
  BYTE7(v469) = v286;
  if (v286)
LABEL_475:
    memmove(v287, v285, v286);
  *((_BYTE *)v287 + v286) = 0;
  BYTE8(v469) = 1;
  v293 = &__p;
  if (v139 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v139 >= 0x17)
  {
    v294 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v139 | 7) != 0x17)
      v294 = v139 | 7;
    v295 = v294 + 1;
    v293 = operator new(v294 + 1);
    v471 = v139;
    v472 = v295 | 0x8000000000000000;
    __p = v293;
    goto LABEL_483;
  }
  HIBYTE(v472) = v139;
  if (v139)
LABEL_483:
    memmove(v293, v140, v139);
  *((_BYTE *)v293 + v139) = 0;
  v473 = 1;
  v296 = object;
  if (SHIBYTE(v472) < 0)
    operator delete(__p);
  if (BYTE8(v469) && SBYTE7(v469) < 0)
    operator delete(v468[0]);
  if (object)
    os_release(object);
  if (v137 && *(_QWORD *)(v137 + 24))
  {
    v297 = _os_log_pack_size();
    v298 = (std::__shared_weak_count_vtbl *)operator new(v297, (std::align_val_t)8uLL);
    v299 = (std::__shared_weak_count *)operator new();
    v300 = v299;
    v299->__shared_owners_ = 0;
    v301 = (unint64_t *)&v299->__shared_owners_;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v298;
    object = v298;
    v468[0] = v298;
    v468[1] = v299;
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
    v469 = 0uLL;
    __p = 0;
    do
      v303 = __ldaxr(v301);
    while (__stlxr(v303 - 1, v301));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v300);
    }
    v304 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v305 = operator new();
    v306 = *(unsigned __int8 *)(v456 + 39);
    v307 = v450;
    if ((v306 & 0x80u) != 0)
    {
      v307 = *(_QWORD *)(v456 + 16);
      v306 = *(_QWORD *)(v456 + 24);
    }
    *(_QWORD *)v305 = v304;
    *(_OWORD *)(v305 + 8) = *(_OWORD *)v468;
    v468[0] = 0;
    v468[1] = 0;
    *(_OWORD *)(v305 + 24) = v469;
    v469 = 0uLL;
    *(_QWORD *)(v305 + 40) = v307;
    *(_QWORD *)(v305 + 48) = v306;
    *(_BYTE *)(v305 + 56) = 16;
    v474 = 0;
    v475[0] = v305;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v137 + 24) + 40))(*(_QWORD *)(v137 + 24), v475);
    v308 = v475[0];
    v475[0] = 0;
    if (v308)
    {
      v309 = *(std::__shared_weak_count **)(v308 + 32);
      if (v309)
      {
        v310 = (unint64_t *)&v309->__shared_owners_;
        do
          v311 = __ldaxr(v310);
        while (__stlxr(v311 - 1, v310));
        if (!v311)
        {
          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
          std::__shared_weak_count::__release_weak(v309);
        }
      }
      v312 = *(std::__shared_weak_count **)(v308 + 16);
      if (v312)
      {
        v313 = (unint64_t *)&v312->__shared_owners_;
        do
          v314 = __ldaxr(v313);
        while (__stlxr(v314 - 1, v313));
        if (!v314)
        {
          ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
          std::__shared_weak_count::__release_weak(v312);
        }
      }
      MEMORY[0x227684CE8](v308, 0x10F0C40B62ED6C6);
      v315 = v474;
      v474 = 0;
      if (v315)
      {
        v316 = *(std::__shared_weak_count **)(v315 + 32);
        if (v316)
        {
          v317 = (unint64_t *)&v316->__shared_owners_;
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        v319 = *(std::__shared_weak_count **)(v315 + 16);
        if (v319)
        {
          v320 = (unint64_t *)&v319->__shared_owners_;
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        MEMORY[0x227684CE8](v315, 0x10F0C40B62ED6C6);
      }
    }
    v322 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
    if (*((_QWORD *)&v469 + 1))
    {
      v323 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
    v325 = (std::__shared_weak_count *)v468[1];
    if (v468[1])
    {
      v326 = (unint64_t *)((char *)v468[1] + 8);
      do
        v327 = __ldaxr(v326);
      while (__stlxr(v327 - 1, v326));
      if (!v327)
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
    }
  }
  else
  {
    os_log_type_enabled(v296, OS_LOG_TYPE_ERROR);
    LOWORD(object) = 0;
    v328 = (void *)_os_log_send_and_compose_impl();
    if (v328)
      free(v328);
  }
  if (v135)
  {
    sub_22322C138((uint64_t)&v457, "VerifySceneQueryState: keyframing state is not set but requested");
    sub_223182C08((uint64_t)&v457);
  }
  sub_223182C08((uint64_t)&v457);
  v234 = v465;
  if (v465)
  {
    v329 = (unint64_t *)&v465->__shared_owners_;
    do
      v236 = __ldaxr(v329);
    while (__stlxr(v236 - 1, v329));
LABEL_541:
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
LABEL_543:
  v120 = 1;
  v283 = v3[6];
  if ((v283 != 0) != (v2 & 8) >> 3)
    goto LABEL_544;
  return v120 & 1;
}

void sub_223436660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2234366D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v7 - 96));
  sub_22319A054((uint64_t *)(v7 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234367D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223436804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223436818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x227684CE8](v7, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223436844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223436878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22343688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234368A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234368B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2234368C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a32 && a31 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_223436B14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  const char *v16;
  const char *v17;
  size_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned __int8 *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  int v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v100;
  const char *v101;
  size_t v102;
  unsigned __int8 *v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  void *v117;
  _QWORD *v118;
  size_t v119;
  size_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  BOOL v171;
  int v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  const char *v176;
  uint64_t v177;
  size_t v178;
  const char *v179;
  unsigned __int8 v180;
  const char *v181;
  size_t v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  int v191;
  size_t v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unsigned __int8 *v230;
  unsigned __int8 *v231;
  unint64_t v232;
  unint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  unsigned int v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  size_t v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  const char *v249;
  const char *v250;
  size_t v251;
  unsigned __int8 v252;
  unsigned __int8 v253;
  const char *v254;
  size_t v255;
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  unsigned __int8 *v261;
  NSObject *v262;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  void *v266;
  _QWORD *v267;
  size_t v268;
  size_t v269;
  void *v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  _QWORD *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  unsigned __int8 v320;
  const char *v321;
  size_t v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  unsigned __int8 *v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  NSObject *v330;
  size_t v331;
  void *v332;
  _QWORD *v333;
  size_t v334;
  size_t v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  _QWORD *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  unsigned __int8 *v387;
  unsigned __int8 *v388;
  int v389;
  _BYTE *v390;
  int v391;
  unint64_t v392;
  unint64_t v393;
  const char *v395;
  size_t v396;
  const char *v397;
  unsigned __int8 v398;
  unsigned __int8 v399;
  const char *v400;
  size_t v401;
  _BYTE *v402;
  _BYTE *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  _BYTE *v407;
  NSObject *v408;
  uint64_t v409;
  size_t v410;
  void *v411;
  _QWORD *v412;
  size_t v413;
  size_t v414;
  void *v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  _QWORD *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  const char *v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  int v465;
  unint64_t v466;
  unint64_t v467;
  const char *v468;
  uint64_t v469;
  size_t v470;
  const char *v471;
  unsigned __int8 v472;
  const char *v473;
  size_t v474;
  _BYTE *v475;
  uint64_t v476;
  uint64_t v477;
  _BYTE *v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  NSObject *v482;
  int v483;
  size_t v484;
  std::__shared_weak_count_vtbl *v485;
  std::__shared_weak_count *v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  void *v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  int v520;
  unint64_t v521;
  unint64_t v522;
  const char *v523;
  uint64_t v524;
  size_t v525;
  const char *v526;
  unsigned __int8 v527;
  unsigned __int8 v528;
  const char *v529;
  size_t v530;
  _BYTE *v531;
  uint64_t v532;
  uint64_t v533;
  _BYTE *v534;
  uint64_t v535;
  uint64_t v536;
  NSObject *v537;
  size_t v538;
  std::__shared_weak_count_vtbl *v539;
  std::__shared_weak_count *v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  _DWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  uint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  void *v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  unsigned __int8 *v575;
  unsigned __int8 *v576;
  unsigned __int8 *v577;
  unsigned __int8 *v578;
  unint64_t v579;
  unsigned int v580;
  unsigned __int8 *v581;
  unint64_t v582;
  unint64_t v583;
  unsigned __int8 *v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  BOOL v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned __int8 v592;
  int v593;
  unint64_t v594;
  unint64_t v595;
  const char *v597;
  const char *v598;
  size_t v599;
  unsigned __int8 v600;
  unint64_t v601;
  unsigned __int8 *v602;
  unsigned int v603;
  unsigned int v604;
  unsigned int v605;
  BOOL v606;
  unsigned int v607;
  unsigned int v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  uint64_t v613;
  int v615;
  unint64_t v616;
  char *v617;
  const char *v618;
  const char *v619;
  size_t v620;
  unsigned __int8 v621;
  unsigned __int8 v622;
  const char *v623;
  size_t v624;
  _BYTE *v625;
  uint64_t v626;
  uint64_t v627;
  _BYTE *v628;
  NSObject *v629;
  uint64_t v630;
  uint64_t v631;
  size_t v632;
  std::__shared_weak_count_vtbl *v633;
  std::__shared_weak_count *v634;
  unint64_t *v635;
  char *v636;
  std::__shared_weak_count *v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  void *v643;
  unsigned __int8 v644;
  int v645;
  unint64_t v646;
  unint64_t v647;
  const char *v648;
  const char *v649;
  size_t v650;
  unint64_t *v651;
  unint64_t v652;
  uint64_t v653;
  char *v654;
  char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  const char *v659;
  uint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  uint64_t v667;
  std::__shared_weak_count *v668;
  unint64_t *v669;
  unint64_t v670;
  std::__shared_weak_count *v671;
  unint64_t *v672;
  unint64_t v673;
  std::__shared_weak_count *v674;
  unint64_t *v675;
  unint64_t v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  unsigned __int8 v683;
  const char *v684;
  size_t v685;
  _BYTE *v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  _BYTE *v690;
  NSObject *v691;
  uint64_t v692;
  uint64_t v693;
  size_t v694;
  std::__shared_weak_count_vtbl *v695;
  std::__shared_weak_count *v696;
  size_t v697;
  size_t v698;
  _BYTE *v699;
  int v700;
  void *v701;
  unsigned __int8 v702;
  const char *v703;
  size_t v704;
  _BYTE *v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  _BYTE *v709;
  NSObject *v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  size_t v714;
  std::__shared_weak_count_vtbl *v715;
  std::__shared_weak_count *v716;
  size_t v717;
  size_t v718;
  char *v719;
  int v720;
  void *v721;
  uint64_t v722;
  uint64_t v723;
  size_t v724;
  size_t v725;
  char *v726;
  uint64_t v727;
  uint64_t v728;
  char *v729;
  std::__shared_weak_count *v730;
  unint64_t *v731;
  unint64_t v732;
  char *v733;
  std::__shared_weak_count *v734;
  uint64_t v735;
  uint64_t v736;
  size_t v737;
  size_t v738;
  char *v739;
  uint64_t v740;
  uint64_t v741;
  size_t v742;
  size_t v743;
  _QWORD *v744;
  uint64_t v745;
  uint64_t v746;
  char *v747;
  __int128 v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  char *v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  unint64_t v755;
  std::__shared_weak_count *v756;
  unint64_t *v757;
  unint64_t v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  uint64_t v763;
  char *v764;
  char *v765;
  uint64_t v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  const char *v770;
  uint64_t v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  uint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  std::__shared_weak_count *v788;
  unint64_t *v789;
  unint64_t v790;
  unint64_t *v791;
  unint64_t v792;
  unint64_t *v793;
  unint64_t v794;
  std::__shared_weak_count *v795;
  unint64_t *v796;
  unint64_t v797;
  unint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  uint64_t v802;
  char *v803;
  char *v804;
  char *v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  const char *v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  uint64_t v818;
  std::__shared_weak_count *v819;
  unint64_t *v820;
  unint64_t v821;
  std::__shared_weak_count *v822;
  unint64_t *v823;
  unint64_t v824;
  std::__shared_weak_count *v825;
  unint64_t *v826;
  unint64_t v827;
  std::__shared_weak_count *v828;
  unint64_t *v829;
  unint64_t v830;
  uint64_t v831;
  unint64_t *v832;
  int v833;
  unint64_t v834;
  unint64_t v835;
  BOOL v836;
  const char *v837;
  uint64_t v838;
  size_t v839;
  const char *v840;
  unsigned __int8 v841;
  const char *v842;
  size_t v843;
  _BYTE *v844;
  uint64_t v845;
  uint64_t v846;
  _BYTE *v847;
  uint64_t v848;
  uint64_t v849;
  NSObject *v850;
  size_t v851;
  std::__shared_weak_count_vtbl *v852;
  std::__shared_weak_count *v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  unint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  std::__shared_weak_count *v864;
  unint64_t *v865;
  unint64_t v866;
  std::__shared_weak_count *v867;
  unint64_t *v868;
  unint64_t v869;
  uint64_t v870;
  std::__shared_weak_count *v871;
  unint64_t *v872;
  unint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  unint64_t v882;
  void *v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  unsigned __int8 *v887;
  unsigned __int8 *v888;
  unsigned __int8 *v889;
  unsigned __int8 *v890;
  unsigned int v891;
  unsigned __int8 *v892;
  unsigned int v893;
  unsigned int v894;
  unsigned int v895;
  char *v896;
  char **v897;
  char **v898;
  unsigned int v899;
  unsigned int v900;
  BOOL v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  char *v905;
  _BYTE *v906;
  uint64_t v907;
  _BYTE *v908;
  uint64_t v909;
  _BYTE *v910;
  int v911;
  uint64_t v912;
  int v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  char *v917;
  unsigned __int8 v919;
  int v920;
  unint64_t v921;
  unint64_t v922;
  BOOL v923;
  const char *v924;
  const char *v925;
  size_t v926;
  unsigned __int8 v927;
  uint64_t v928;
  unsigned __int8 v929;
  const char *v930;
  size_t v931;
  _BYTE *v932;
  uint64_t v933;
  uint64_t v934;
  _BYTE *v935;
  NSObject *v936;
  uint64_t v937;
  uint64_t v938;
  size_t v939;
  std::__shared_weak_count_vtbl *v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  char *v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  unint64_t v947;
  unint64_t v948;
  std::__shared_weak_count *v949;
  void *v950;
  unint64_t *v951;
  unint64_t v952;
  uint64_t v953;
  char *v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  const char *v959;
  uint64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  uint64_t v967;
  std::__shared_weak_count *v968;
  unint64_t *v969;
  unint64_t v970;
  std::__shared_weak_count *v971;
  unint64_t *v972;
  unint64_t v973;
  std::__shared_weak_count *v974;
  unint64_t *v975;
  unint64_t v976;
  std::__shared_weak_count *v977;
  unint64_t *v978;
  unint64_t v979;
  std::__shared_weak_count *v980;
  unint64_t *v981;
  unint64_t v982;
  int v983;
  BOOL v984;
  int v985;
  unint64_t v986;
  unint64_t v987;
  const char *v989;
  const char *v990;
  size_t v991;
  unsigned __int8 v992;
  const char *v993;
  size_t v994;
  _BYTE *v995;
  uint64_t v996;
  uint64_t v997;
  _BYTE *v998;
  uint64_t v999;
  uint64_t v1000;
  NSObject *v1001;
  size_t v1002;
  std::__shared_weak_count_vtbl *v1003;
  std::__shared_weak_count *v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  _DWORD *v1010;
  uint64_t v1011;
  uint64_t v1012;
  const char *v1013;
  uint64_t v1014;
  std::__shared_weak_count *v1015;
  unint64_t *v1016;
  unint64_t v1017;
  std::__shared_weak_count *v1018;
  unint64_t *v1019;
  unint64_t v1020;
  uint64_t v1021;
  std::__shared_weak_count *v1022;
  unint64_t *v1023;
  unint64_t v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::__shared_weak_count *v1028;
  unint64_t *v1029;
  unint64_t v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  void *v1034;
  std::__shared_weak_count *v1035;
  unint64_t *v1036;
  unint64_t v1037;
  unsigned __int8 *v1038;
  int v1039;
  uint64_t v1040;
  int v1041;
  unint64_t v1042;
  unint64_t v1043;
  const char *v1045;
  const char *v1046;
  size_t v1047;
  uint64_t v1048;
  unsigned __int8 v1049;
  const char *v1050;
  size_t v1051;
  _BYTE *v1052;
  int v1053;
  uint64_t v1054;
  uint64_t v1055;
  _BYTE *v1056;
  NSObject *v1057;
  uint64_t v1058;
  uint64_t v1059;
  double v1060;
  size_t v1061;
  void *v1062;
  _QWORD *v1063;
  size_t v1064;
  size_t v1065;
  void *v1066;
  void *v1067;
  int v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  char v1072;
  _QWORD *v1073;
  uint64_t v1074;
  std::__shared_weak_count *v1075;
  unint64_t *v1076;
  unint64_t v1077;
  uint64_t v1078;
  unint64_t *v1079;
  unint64_t v1080;
  std::__shared_weak_count *v1081;
  unint64_t *v1082;
  unint64_t v1083;
  unint64_t v1084;
  std::__shared_weak_count *v1085;
  unint64_t *v1086;
  unint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  const char *v1093;
  uint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  uint64_t v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  unint64_t v1104;
  std::__shared_weak_count *v1105;
  unint64_t *v1106;
  unint64_t v1107;
  std::__shared_weak_count *v1108;
  unint64_t *v1109;
  unint64_t v1110;
  std::__shared_weak_count *v1111;
  unint64_t *v1112;
  unint64_t v1113;
  std::__shared_weak_count *v1114;
  unint64_t *v1115;
  unint64_t v1116;
  unsigned __int8 *v1117;
  unsigned __int8 *v1118;
  int v1119;
  unint64_t v1120;
  unint64_t v1121;
  const char *v1123;
  uint64_t v1124;
  size_t v1125;
  const char *v1126;
  unsigned __int8 v1127;
  const char *v1128;
  size_t v1129;
  _BYTE *v1130;
  const char *v1131;
  const char *v1132;
  int v1133;
  uint64_t v1134;
  int v1135;
  uint64_t v1136;
  uint64_t v1137;
  _BYTE *v1138;
  int v1139;
  uint64_t v1140;
  uint64_t v1141;
  NSObject *v1142;
  size_t v1143;
  std::__shared_weak_count_vtbl *v1144;
  std::__shared_weak_count *v1145;
  std::__shared_weak_count *v1146;
  unint64_t *v1147;
  unint64_t v1148;
  unint64_t v1149;
  uint64_t v1150;
  _DWORD *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  std::__shared_weak_count *v1156;
  unint64_t *v1157;
  unint64_t v1158;
  std::__shared_weak_count *v1159;
  unint64_t *v1160;
  unint64_t v1161;
  uint64_t v1162;
  std::__shared_weak_count *v1163;
  unint64_t *v1164;
  unint64_t v1165;
  std::__shared_weak_count *v1166;
  unint64_t *v1167;
  unint64_t v1168;
  std::__shared_weak_count *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  void *v1175;
  std::__shared_weak_count *v1176;
  unint64_t *v1177;
  unint64_t v1178;
  unsigned __int8 *v1179;
  int v1180;
  uint64_t v1181;
  unsigned __int8 *v1182;
  unsigned __int8 *v1183;
  unsigned __int8 *v1184;
  unsigned __int8 *v1185;
  unsigned int v1186;
  unsigned int v1187;
  int v1188;
  unint64_t v1189;
  unint64_t v1190;
  const char *v1192;
  size_t v1193;
  const char *v1194;
  int v1195;
  unsigned __int8 v1196;
  unsigned __int8 v1197;
  const char *v1198;
  size_t v1199;
  _BYTE *v1200;
  uint64_t v1201;
  uint64_t v1202;
  _BYTE *v1203;
  int v1204;
  NSObject *v1205;
  uint64_t v1206;
  uint64_t v1207;
  size_t v1208;
  void *v1209;
  _QWORD *v1210;
  size_t v1211;
  size_t v1212;
  void *v1213;
  void *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  char v1218;
  _QWORD *v1219;
  uint64_t v1220;
  std::__shared_weak_count *v1221;
  unint64_t *v1222;
  unint64_t v1223;
  uint64_t v1224;
  unint64_t *v1225;
  unint64_t v1226;
  std::__shared_weak_count *v1227;
  unint64_t *v1228;
  unint64_t v1229;
  unint64_t v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  std::__shared_weak_count *v1241;
  unint64_t *v1242;
  unint64_t v1243;
  std::__shared_weak_count *v1244;
  unint64_t *v1245;
  unint64_t v1246;
  uint64_t v1247;
  std::__shared_weak_count *v1248;
  unint64_t *v1249;
  unint64_t v1250;
  std::__shared_weak_count *v1251;
  unint64_t *v1252;
  unint64_t v1253;
  std::__shared_weak_count *v1254;
  unint64_t *v1255;
  unint64_t v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  std::__shared_weak_count *v1260;
  unint64_t *v1261;
  unint64_t v1262;
  int v1263;
  unint64_t v1264;
  unint64_t v1265;
  int v1266;
  const char *v1267;
  const char *v1268;
  size_t v1269;
  unsigned __int8 v1270;
  const char *v1271;
  size_t v1272;
  _BYTE *v1273;
  uint64_t v1274;
  uint64_t v1275;
  _BYTE *v1276;
  uint64_t v1277;
  uint64_t v1278;
  NSObject *v1279;
  size_t v1280;
  std::__shared_weak_count_vtbl *v1281;
  std::__shared_weak_count *v1282;
  std::__shared_weak_count *v1283;
  unint64_t *v1284;
  unint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  _DWORD *v1288;
  uint64_t v1289;
  uint64_t v1290;
  const char *v1291;
  uint64_t v1292;
  std::__shared_weak_count *v1293;
  unint64_t *v1294;
  unint64_t v1295;
  std::__shared_weak_count *v1296;
  unint64_t *v1297;
  unint64_t v1298;
  uint64_t v1299;
  std::__shared_weak_count *v1300;
  unint64_t *v1301;
  unint64_t v1302;
  std::__shared_weak_count *v1303;
  unint64_t *v1304;
  unint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  std::__shared_weak_count *v1309;
  unint64_t *v1310;
  unint64_t v1311;
  void *v1312;
  std::__shared_weak_count *v1313;
  unint64_t *v1314;
  unint64_t v1315;
  std::logic_error *exception;
  uint64_t v1318;
  const char *v1319;
  const char *v1320;
  const char *v1321;
  unsigned int v1322;
  int v1323;
  const char *v1324;
  int v1325;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  int v1330;
  int v1331;
  unsigned __int8 *v1332;
  const char *v1333;
  const char *v1334;
  const char *v1335;
  uint64_t v1336;
  const char *v1337;
  const char *v1338;
  uint64_t v1339;
  const char *v1340;
  const char *v1341;
  char *category;
  char *categorya;
  char *categoryb;
  char *categoryc;
  char *categoryd;
  char *categorye;
  char *categoryf;
  char *categoryg;
  char *categoryh;
  char *categoryi;
  const char *v1352;
  const char *v1353;
  int v1354;
  uint64_t v1355;
  int v1356;
  int v1357;
  int v1358;
  uint64_t v1359;
  int v1360;
  unsigned __int8 *v1361;
  unsigned __int8 *v1362;
  uint64_t v1363;
  uint64_t v1364;
  unsigned __int8 *v1365;
  int v1366;
  int v1367;
  unsigned __int8 *v1368;
  int v1369;
  int v1370;
  int v1371;
  unsigned __int8 *v1372;
  const char *v1373;
  int v1374;
  const char *v1375;
  unsigned __int8 *v1377;
  unint64_t v1378;
  int v1379;
  const char *v1380;
  uint64_t v1381;
  const char **v1382;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v1384;
  int v1385;
  const char *v1386;
  int v1387;
  const char *v1388;
  uint64_t v1389;
  std::__shared_weak_count *v1390;
  _QWORD *v1391;
  __int128 v1392;
  char *v1393;
  __int128 v1394;
  char *v1395;
  __int128 v1396;
  char v1397[8];
  _OWORD v1398[2];
  char v1399[40];
  char __src[8];
  __int128 v1401;
  _BYTE object[80];
  _BYTE v1403[24];
  __int128 v1404;
  char *v1405;
  char __s[16];
  std::__shared_weak_count *v1407;
  char *v1408;
  std::__shared_weak_count *v1409;
  uint64_t v1410;

  v1410 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(unsigned __int8 **)(v2 + 40);
  v1363 = *a1;
  v1377 = (unsigned __int8 *)(v2 + 48);
  if (v3 != (unsigned __int8 *)(v2 + 48))
  {
    v4 = 0;
    while (1)
    {
      v6 = *(unsigned __int8 **)(v1363 + 64);
      v5 = *(unsigned __int8 **)(v1363 + 72);
      if (v5 != v6)
      {
        v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
        do
        {
          v8 = v7 >> 1;
          v9 = &v6[40 * (v7 >> 1)];
          v10 = *v9;
          v11 = v3[32];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[1];
          v11 = v3[33];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[2];
          v11 = v3[34];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[3];
          v11 = v3[35];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[4];
          v11 = v3[36];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[5];
          v11 = v3[37];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[6];
          v11 = v3[38];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[7];
          v11 = v3[39];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[8];
          v11 = v3[40];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[9];
          v11 = v3[41];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[10];
          v11 = v3[42];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[11];
          v11 = v3[43];
          if (v10 != v11)
            goto LABEL_24;
          v10 = v9[12];
          v11 = v3[44];
          if (v10 != v11
            || (v10 = v9[13], v11 = v3[45], v10 != v11)
            || (v10 = v9[14], v11 = v3[46], v10 != v11)
            || (v10 = v9[15], v11 = v3[47], v10 != v11))
          {
LABEL_24:
            if (v10 < v11)
            {
              v8 = v7 + ~v8;
              v6 = v9 + 40;
            }
          }
          v7 = v8;
        }
        while (v8);
        if (v5 != v6
          && ((char)sub_22319835C(v6, v3 + 32) & 0x80000000) == 0
          && ((char)sub_22319835C(v3 + 32, v6) & 0x80000000) == 0
          && *(unsigned __int8 **)(v1363 + 72) != v6)
        {
          goto LABEL_146;
        }
      }
      ++v4;
      if (!*(_BYTE *)(a2 + 1))
        goto LABEL_146;
      sub_223446D5C(v1397);
      if (**(int **)(*(_QWORD *)v1397 + 56) > 5)
        goto LABEL_146;
      v12 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
      v13 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
      v14 = v13;
      v15 = !v12 && v13 == 0;
      if (v15)
        goto LABEL_146;
      v1382 = (const char **)v1397;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v1384 = std::chrono::system_clock::now().__d_.__rep_;
      v1385 = 5;
      v1386 = "unknown file";
      v1387 = 137;
      v1388 = "unknown function";
      v1389 = 0;
      v1390 = 0;
      sub_2245664AC(v3 + 32, __s);
      v16 = *v1382;
      v17 = *v1382 + 16;
      category = (char *)v17;
      v1352 = *v1382;
      if ((*v1382)[39] < 0)
      {
        v17 = (const char *)*((_QWORD *)v16 + 2);
        v18 = *((_QWORD *)v16 + 3);
        v20 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v1365 = v3 + 32;
        v1356 = v12;
        if ((v20 & 1) != 0)
          goto LABEL_40;
      }
      else
      {
        v18 = *((unsigned __int8 *)*v1382 + 39);
        v19 = atomic_load((unsigned __int8 *)&qword_255788F58);
        v1365 = v3 + 32;
        v1356 = v12;
        if ((v19 & 1) != 0)
          goto LABEL_40;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v1403);
        sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
        if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
          operator delete(*(void **)v1403);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_40:
      if (byte_255788F57 >= 0)
        v21 = (const char *)&xmmword_255788F40;
      else
        v21 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v22 = byte_255788F57;
      else
        v22 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v21, v17);
      if (v22 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v22 >= 0x17)
      {
        v24 = v4;
        v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v25 = v22 | 7;
        v26 = v25 + 1;
        v23 = operator new(v25 + 1);
        *(_QWORD *)&object[24] = v26 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v23;
        *(_QWORD *)&object[16] = v22;
        v4 = v24;
LABEL_53:
        memmove(v23, v21, v22);
        goto LABEL_54;
      }
      object[31] = v22;
      v23 = &object[8];
      if (v22)
        goto LABEL_53;
LABEL_54:
      v23[v22] = 0;
      object[32] = 1;
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v18 >= 0x17)
      {
        v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v30 = v18 | 7;
        v31 = v30 + 1;
        v27 = operator new(v30 + 1);
        *(_QWORD *)&object[56] = v31 | 0x8000000000000000;
        *(_QWORD *)&object[40] = v27;
        *(_QWORD *)&object[48] = v18;
        v28 = v1365;
      }
      else
      {
        object[63] = v18;
        v27 = &object[40];
        v28 = v1365;
        if (!v18)
        {
          object[40] = 0;
          object[64] = 1;
          v29 = *(NSObject **)object;
          if ((object[63] & 0x80000000) == 0)
            goto LABEL_58;
          goto LABEL_64;
        }
      }
      memmove(v27, v17, v18);
      v27[v18] = 0;
      object[64] = 1;
      v29 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
      {
LABEL_58:
        if (!object[32])
          goto LABEL_67;
        goto LABEL_65;
      }
LABEL_64:
      operator delete(*(void **)&object[40]);
      if (!object[32])
        goto LABEL_67;
LABEL_65:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
LABEL_67:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (!v14 || !*(_QWORD *)(v14 + 24))
      {
        os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
        *(_QWORD *)object = 0xD04100202;
        *(_WORD *)&object[8] = 2080;
        *(_QWORD *)&object[10] = __s;
        v38 = (void *)_os_log_send_and_compose_impl();
        if (v38)
        {
          free(v38);
          if (!v1356)
            goto LABEL_141;
          goto LABEL_140;
        }
        goto LABEL_139;
      }
      v32 = _os_log_pack_size();
      v33 = operator new(v32, (std::align_val_t)8uLL);
      v34 = (_QWORD *)operator new();
      *v34 = &off_24EC1F7F0;
      v34[1] = 0;
      v34[2] = 0;
      v34[3] = v33;
      *(_QWORD *)v1403 = v33;
      *(_QWORD *)&v1403[8] = v33;
      *(_QWORD *)&v1403[16] = v34;
      v1404 = 0uLL;
      v35 = strlen(__s);
      if (v35 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v36 = v35;
      if (v35 >= 0x17)
      {
        v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v35 | 7) != 0x17)
          v39 = v35 | 7;
        v40 = v39 + 1;
        v37 = operator new(v39 + 1);
        *((_QWORD *)&v1401 + 1) = v40 | 0x8000000000000000;
        *(_QWORD *)__src = v37;
        *(_QWORD *)&v1401 = v36;
LABEL_81:
        memcpy(v37, __s, v36);
        goto LABEL_82;
      }
      HIBYTE(v1401) = v35;
      v37 = __src;
      if (v35)
        goto LABEL_81;
LABEL_82:
      *((_BYTE *)v37 + v36) = 0;
      v41 = *(_QWORD *)__src;
      *(_QWORD *)v1399 = v1401;
      *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
      v42 = HIBYTE(v1401);
      v43 = operator new(0x38uLL);
      v43[1] = 0;
      v43[2] = 0;
      v43[3] = off_24EC1FA48;
      *v43 = &off_24EC1F9F8;
      v44 = *(_QWORD *)v1399;
      v43[4] = v41;
      v43[5] = v44;
      *(_QWORD *)((char *)v43 + 47) = *(_QWORD *)&v1399[7];
      *((_BYTE *)v43 + 55) = v42;
      *(_QWORD *)v1399 = 0;
      *(_QWORD *)&v1399[7] = 0;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
      *(_QWORD *)&v1404 = v43 + 3;
      *((_QWORD *)&v1404 + 1) = v43;
      v28 = v1365;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      *(_OWORD *)object = *(_OWORD *)v1403;
      v48 = v1404;
      *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
      if (*(_QWORD *)&v1403[16])
      {
        v49 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
      *(_QWORD *)&object[24] = v48;
      *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
      if (*((_QWORD *)&v1404 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        *(_QWORD *)&object[40] = v48;
        do
          v54 = __ldaxr(v52);
        while (__stlxr(v54 - 1, v52));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      else
      {
        *(_QWORD *)&object[40] = v48;
      }
      v55 = *(std::__shared_weak_count **)&v1403[16];
      if (*(_QWORD *)&v1403[16])
      {
        v56 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = *(_QWORD *)object;
      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
        v59 = *(_QWORD *)&object[40] + 8;
      else
        v59 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
      v60 = _os_log_pack_fill();
      *(_DWORD *)v60 = 68157954;
      *(_DWORD *)(v60 + 4) = 13;
      *(_WORD *)(v60 + 8) = 2080;
      *(_QWORD *)(v60 + 10) = v59;
      v61 = operator new();
      v62 = *((unsigned __int8 *)v1352 + 39);
      v63 = category;
      if ((v62 & 0x80u) != 0)
      {
        v63 = (char *)*((_QWORD *)v1352 + 2);
        v62 = *((_QWORD *)v1352 + 3);
      }
      *(_QWORD *)v61 = v58;
      *(_OWORD *)(v61 + 8) = *(_OWORD *)&object[8];
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)(v61 + 24) = *(_OWORD *)&object[24];
      *(_QWORD *)&object[24] = 0;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)(v61 + 40) = v63;
      *(_QWORD *)(v61 + 48) = v62;
      *(_BYTE *)(v61 + 56) = 16;
      *(_QWORD *)__src = 0;
      *(_QWORD *)v1403 = v61;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), v1403);
      v64 = *(_QWORD *)v1403;
      *(_QWORD *)v1403 = 0;
      if (v64)
      {
        v65 = *(std::__shared_weak_count **)(v64 + 32);
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = *(std::__shared_weak_count **)(v64 + 16);
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
        v71 = *(_QWORD *)__src;
        *(_QWORD *)__src = 0;
        if (v71)
        {
          v72 = *(std::__shared_weak_count **)(v71 + 32);
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = *(std::__shared_weak_count **)(v71 + 16);
          if (v75)
          {
            v76 = (unint64_t *)&v75->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          MEMORY[0x227684CE8](v71, 0x10F0C40B62ED6C6);
        }
      }
      v78 = *(std::__shared_weak_count **)&object[32];
      if (!*(_QWORD *)&object[32])
        goto LABEL_135;
      v79 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
        v81 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_139;
      }
      else
      {
LABEL_135:
        v81 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_139;
      }
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        if (!v1356)
          goto LABEL_141;
LABEL_140:
        sub_2245664AC(v28, object);
        sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gp %.13s missing in lookup", object);
        sub_223182C08((uint64_t)&v1382);
        goto LABEL_141;
      }
LABEL_139:
      if (v1356)
        goto LABEL_140;
LABEL_141:
      sub_223182C08((uint64_t)&v1382);
      v84 = v1390;
      if (v1390)
      {
        v85 = (unint64_t *)&v1390->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
LABEL_146:
      v87 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v87)
      {
        do
        {
          v88 = v87;
          v87 = *(unsigned __int8 **)v87;
        }
        while (v87);
      }
      else
      {
        do
        {
          v88 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v15 = *(_QWORD *)v88 == (_QWORD)v3;
          v3 = v88;
        }
        while (!v15);
      }
      v3 = v88;
      if (v88 == v1377)
        goto LABEL_163;
    }
  }
  v4 = 0;
LABEL_163:
  v89 = *(unsigned __int8 **)(v1363 + 64);
  v90 = *(unsigned __int8 **)(v1363 + 72);
  v1357 = v4;
  v91 = 0;
  if (v89 != v90)
  {
    while (1)
    {
      v92 = *(unsigned __int8 **)v1377;
      if (!*(_QWORD *)v1377)
        goto LABEL_196;
      v93 = v1377;
      do
      {
        v94 = v92[32];
        v95 = *v89;
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[33];
        v95 = v89[1];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[34];
        v95 = v89[2];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[35];
        v95 = v89[3];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[36];
        v95 = v89[4];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[37];
        v95 = v89[5];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[38];
        v95 = v89[6];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[39];
        v95 = v89[7];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[40];
        v95 = v89[8];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[41];
        v95 = v89[9];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[42];
        v95 = v89[10];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[43];
        v95 = v89[11];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[44];
        v95 = v89[12];
        if (v94 != v95)
          goto LABEL_185;
        v94 = v92[45];
        v95 = v89[13];
        if (v94 == v95 && (v94 = v92[46], v95 = v89[14], v94 == v95) && (v94 = v92[47], v95 = v89[15], v94 == v95))
        {
          v93 = v92;
        }
        else
        {
LABEL_185:
          if (v94 < v95)
            v92 += 8;
          else
            v93 = v92;
        }
        v92 = *(unsigned __int8 **)v92;
      }
      while (v92);
      if (v93 == v1377 || (char)sub_22319835C(v89, v93 + 32) < 0)
      {
LABEL_196:
        ++v91;
        if (*(_BYTE *)(a2 + 1))
        {
          sub_223446D5C(v1397);
          if (**(int **)(*(_QWORD *)v1397 + 56) <= 5)
          {
            v96 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
            v97 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
            v98 = v97;
            if (v96 || v97 != 0)
              break;
          }
        }
      }
LABEL_165:
      v89 += 40;
      if (v89 == v90)
        goto LABEL_316;
    }
    v1382 = (const char **)v1397;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 148;
    v1388 = "unknown function";
    v1389 = 0;
    v1390 = 0;
    sub_2245664AC(v89, __s);
    v1366 = v96;
    v100 = *v1382;
    v101 = *v1382 + 16;
    categorya = (char *)v101;
    if ((*v1382)[39] < 0)
    {
      v101 = (const char *)*((_QWORD *)v100 + 2);
      v102 = *((_QWORD *)v100 + 3);
      v1353 = *v1382;
      v103 = v90;
      v105 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v105 & 1) != 0)
        goto LABEL_201;
    }
    else
    {
      v102 = *((unsigned __int8 *)*v1382 + 39);
      v1353 = *v1382;
      v103 = v90;
      v104 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v104 & 1) != 0)
        goto LABEL_201;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v1403);
      sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
      if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
        operator delete(*(void **)v1403);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_201:
    if (byte_255788F57 >= 0)
      v106 = (const char *)&xmmword_255788F40;
    else
      v106 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v107 = byte_255788F57;
    else
      v107 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v106, v101);
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v107 >= 0x17)
    {
      v109 = v91;
      v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v110 = v107 | 7;
      v111 = v110 + 1;
      v108 = operator new(v110 + 1);
      *(_QWORD *)&object[24] = v111 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v108;
      *(_QWORD *)&object[16] = v107;
      v91 = v109;
    }
    else
    {
      object[31] = v107;
      v108 = &object[8];
      if (!v107)
      {
LABEL_215:
        v108[v107] = 0;
        object[32] = 1;
        if (v102 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v90 = v103;
        if (v102 >= 0x17)
        {
          v114 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v102 | 7) != 0x17)
            v114 = v102 | 7;
          v115 = v114 + 1;
          v112 = operator new(v114 + 1);
          *(_QWORD *)&object[56] = v115 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v112;
          *(_QWORD *)&object[48] = v102;
          v4 = v1357;
        }
        else
        {
          object[63] = v102;
          v112 = &object[40];
          v4 = v1357;
          if (!v102)
          {
            object[40] = 0;
            object[64] = 1;
            v113 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_219;
            goto LABEL_225;
          }
        }
        memmove(v112, v101, v102);
        v112[v102] = 0;
        object[64] = 1;
        v113 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_219:
          if (!object[32])
            goto LABEL_228;
          goto LABEL_226;
        }
LABEL_225:
        operator delete(*(void **)&object[40]);
        if (!object[32])
          goto LABEL_228;
LABEL_226:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_228:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v98 || !*(_QWORD *)(v98 + 24))
        {
          os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
          *(_QWORD *)object = 0xD04100202;
          *(_WORD *)&object[8] = 2080;
          *(_QWORD *)&object[10] = __s;
          v122 = (void *)_os_log_send_and_compose_impl();
          if (v122)
          {
            free(v122);
            if (!v1366)
              goto LABEL_302;
            goto LABEL_301;
          }
          goto LABEL_300;
        }
        v116 = _os_log_pack_size();
        v117 = operator new(v116, (std::align_val_t)8uLL);
        v118 = (_QWORD *)operator new();
        *v118 = &off_24EC1F7F0;
        v118[1] = 0;
        v118[2] = 0;
        v118[3] = v117;
        *(_QWORD *)v1403 = v117;
        *(_QWORD *)&v1403[8] = v117;
        *(_QWORD *)&v1403[16] = v118;
        v1404 = 0uLL;
        v119 = strlen(__s);
        if (v119 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v120 = v119;
        if (v119 >= 0x17)
        {
          v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v119 | 7) != 0x17)
            v123 = v119 | 7;
          v124 = v123 + 1;
          v121 = operator new(v123 + 1);
          *((_QWORD *)&v1401 + 1) = v124 | 0x8000000000000000;
          *(_QWORD *)__src = v121;
          *(_QWORD *)&v1401 = v120;
        }
        else
        {
          HIBYTE(v1401) = v119;
          v121 = __src;
          if (!v119)
            goto LABEL_243;
        }
        memcpy(v121, __s, v120);
LABEL_243:
        *((_BYTE *)v121 + v120) = 0;
        v125 = *(_QWORD *)__src;
        *(_QWORD *)v1399 = v1401;
        *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
        v126 = HIBYTE(v1401);
        v127 = operator new(0x38uLL);
        v127[1] = 0;
        v127[2] = 0;
        v127[3] = off_24EC1FA48;
        *v127 = &off_24EC1F9F8;
        v128 = *(_QWORD *)v1399;
        v127[4] = v125;
        v127[5] = v128;
        *(_QWORD *)((char *)v127 + 47) = *(_QWORD *)&v1399[7];
        *((_BYTE *)v127 + 55) = v126;
        *(_QWORD *)v1399 = 0;
        *(_QWORD *)&v1399[7] = 0;
        v129 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
        *(_QWORD *)&v1404 = v127 + 3;
        *((_QWORD *)&v1404 + 1) = v127;
        v4 = v1357;
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        *(_OWORD *)object = *(_OWORD *)v1403;
        v132 = v1404;
        *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
        if (*(_QWORD *)&v1403[16])
        {
          v133 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        v135 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
        *(_QWORD *)&object[24] = v132;
        *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
        if (*((_QWORD *)&v1404 + 1))
        {
          v136 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
          do
            v137 = __ldxr(v136);
          while (__stxr(v137 + 1, v136));
          *(_QWORD *)&object[40] = v132;
          do
            v138 = __ldaxr(v136);
          while (__stlxr(v138 - 1, v136));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        else
        {
          *(_QWORD *)&object[40] = v132;
        }
        v139 = *(std::__shared_weak_count **)&v1403[16];
        if (*(_QWORD *)&v1403[16])
        {
          v140 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v142 = *(_QWORD *)object;
        if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
          v143 = *(_QWORD *)&object[40] + 8;
        else
          v143 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
        v144 = _os_log_pack_fill();
        *(_DWORD *)v144 = 68157954;
        *(_DWORD *)(v144 + 4) = 13;
        *(_WORD *)(v144 + 8) = 2080;
        *(_QWORD *)(v144 + 10) = v143;
        v145 = operator new();
        v146 = *((unsigned __int8 *)v1353 + 39);
        v147 = categorya;
        if ((v146 & 0x80u) != 0)
        {
          v147 = (char *)*((_QWORD *)v1353 + 2);
          v146 = *((_QWORD *)v1353 + 3);
        }
        *(_QWORD *)v145 = v142;
        *(_OWORD *)(v145 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v145 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)(v145 + 40) = v147;
        *(_QWORD *)(v145 + 48) = v146;
        *(_BYTE *)(v145 + 56) = 16;
        *(_QWORD *)__src = 0;
        *(_QWORD *)v1403 = v145;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v98 + 24) + 40))(*(_QWORD *)(v98 + 24), v1403);
        v148 = *(_QWORD *)v1403;
        *(_QWORD *)v1403 = 0;
        if (v148)
        {
          v149 = *(std::__shared_weak_count **)(v148 + 32);
          if (v149)
          {
            v150 = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v152 = *(std::__shared_weak_count **)(v148 + 16);
          if (v152)
          {
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          MEMORY[0x227684CE8](v148, 0x10F0C40B62ED6C6);
          v155 = *(_QWORD *)__src;
          *(_QWORD *)__src = 0;
          if (v155)
          {
            v156 = *(std::__shared_weak_count **)(v155 + 32);
            if (v156)
            {
              v157 = (unint64_t *)&v156->__shared_owners_;
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            v159 = *(std::__shared_weak_count **)(v155 + 16);
            if (v159)
            {
              v160 = (unint64_t *)&v159->__shared_owners_;
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            MEMORY[0x227684CE8](v155, 0x10F0C40B62ED6C6);
          }
        }
        v162 = *(std::__shared_weak_count **)&object[32];
        if (!*(_QWORD *)&object[32])
          goto LABEL_296;
        v163 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
          v165 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_300;
        }
        else
        {
LABEL_296:
          v165 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_300;
        }
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
          if (!v1366)
            goto LABEL_302;
          goto LABEL_301;
        }
LABEL_300:
        if (!v1366)
        {
LABEL_302:
          sub_223182C08((uint64_t)&v1382);
          v168 = v1390;
          if (v1390)
          {
            v169 = (unint64_t *)&v1390->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          goto LABEL_165;
        }
LABEL_301:
        sub_2245664AC(v89, object);
        sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gp %.13s is extra in lookup", object);
        sub_223182C08((uint64_t)&v1382);
        goto LABEL_302;
      }
    }
    memmove(v108, v106, v107);
    goto LABEL_215;
  }
LABEL_316:
  v171 = v4 <= 0 && v91 <= 0;
  v172 = !v171;
  v1322 = v172;
  if (!v171)
  {
    sub_223446D5C(__src);
    if (**(int **)(*(_QWORD *)__src + 56) <= 5)
    {
      v173 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
      v174 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0);
      v175 = v174;
      if (v173 || v174)
      {
        v1382 = (const char **)__src;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v1384 = std::chrono::system_clock::now().__d_.__rep_;
        v1385 = 5;
        v1386 = "unknown file";
        v1387 = 157;
        v1389 = 0;
        v1390 = 0;
        v1388 = "unknown function";
        v176 = *v1382;
        v177 = (uint64_t)(*v1382 + 16);
        if ((*v1382)[39] < 0)
        {
          v179 = (const char *)*((_QWORD *)v176 + 2);
          v178 = *((_QWORD *)v176 + 3);
        }
        else
        {
          v178 = *((unsigned __int8 *)*v1382 + 39);
          v179 = *v1382 + 16;
        }
        v1367 = v91;
        v180 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F57 >= 0)
          v181 = (const char *)&xmmword_255788F40;
        else
          v181 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v182 = byte_255788F57;
        else
          v182 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v181, v179);
        v183 = &object[8];
        if (v182 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v182 >= 0x17)
        {
          v184 = (v182 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v182 | 7) != 0x17)
            v184 = v182 | 7;
          v185 = v184 + 1;
          v183 = operator new(v184 + 1);
          *(_QWORD *)&object[24] = v185 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v183;
          *(_QWORD *)&object[16] = v182;
        }
        else
        {
          object[31] = v182;
          if (!v182)
          {
LABEL_344:
            v183[v182] = 0;
            object[32] = 1;
            v186 = &object[40];
            if (v178 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v178 >= 0x17)
            {
              v188 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v178 | 7) != 0x17)
                v188 = v178 | 7;
              v189 = v188 + 1;
              v186 = operator new(v188 + 1);
              *(_QWORD *)&object[56] = v189 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v186;
              *(_QWORD *)&object[48] = v178;
              v187 = v1367;
            }
            else
            {
              object[63] = v178;
              v187 = v1367;
              if (!v178)
                goto LABEL_352;
            }
            memmove(v186, v179, v178);
LABEL_352:
            v186[v178] = 0;
            object[64] = 1;
            v190 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              operator delete(*(void **)&object[40]);
            v191 = v1357;
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v175 && *(_QWORD *)(v175 + 24))
            {
              v192 = _os_log_pack_size();
              v193 = (std::__shared_weak_count_vtbl *)operator new(v192, (std::align_val_t)8uLL);
              v194 = (std::__shared_weak_count *)operator new();
              v195 = v194;
              v194->__shared_owners_ = 0;
              v196 = (unint64_t *)&v194->__shared_owners_;
              v194->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v194->__shared_weak_owners_ = 0;
              v194[1].__vftable = v193;
              *(_QWORD *)object = v193;
              *(_QWORD *)&object[8] = v193;
              *(_QWORD *)&object[16] = v194;
              do
                v197 = __ldxr(v196);
              while (__stxr(v197 + 1, v196));
              memset(&object[24], 0, 24);
              do
                v198 = __ldaxr(v196);
              while (__stlxr(v198 - 1, v196));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v195);
              }
              v199 = *(_QWORD *)object;
              v200 = _os_log_pack_fill();
              *(_DWORD *)v200 = 67109376;
              *(_DWORD *)(v200 + 4) = v1357;
              *(_WORD *)(v200 + 8) = 1024;
              *(_DWORD *)(v200 + 10) = v1367;
              v201 = operator new();
              v202 = *((unsigned __int8 *)v176 + 39);
              if ((v202 & 0x80u) == 0)
                v203 = v177;
              else
                v203 = *((_QWORD *)v176 + 2);
              if ((v202 & 0x80u) != 0)
                v202 = *((_QWORD *)v176 + 3);
              *(_QWORD *)v201 = v199;
              *(_OWORD *)(v201 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v201 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v201 + 40) = v203;
              *(_QWORD *)(v201 + 48) = v202;
              *(_BYTE *)(v201 + 56) = 16;
              *(_QWORD *)__s = 0;
              *(_QWORD *)v1403 = v201;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v175 + 24) + 40))(*(_QWORD *)(v175 + 24), v1403);
              v204 = *(_QWORD *)v1403;
              *(_QWORD *)v1403 = 0;
              v191 = v1357;
              v187 = v1367;
              if (v204)
              {
                v205 = *(std::__shared_weak_count **)(v204 + 32);
                if (v205)
                {
                  v206 = (unint64_t *)&v205->__shared_owners_;
                  do
                    v207 = __ldaxr(v206);
                  while (__stlxr(v207 - 1, v206));
                  if (!v207)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                v208 = *(std::__shared_weak_count **)(v204 + 16);
                if (v208)
                {
                  v209 = (unint64_t *)&v208->__shared_owners_;
                  do
                    v210 = __ldaxr(v209);
                  while (__stlxr(v210 - 1, v209));
                  if (!v210)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v208);
                  }
                }
                MEMORY[0x227684CE8](v204, 0x10F0C40B62ED6C6);
                v211 = *(_QWORD *)__s;
                *(_QWORD *)__s = 0;
                if (v211)
                {
                  v212 = *(std::__shared_weak_count **)(v211 + 32);
                  if (v212)
                  {
                    v213 = (unint64_t *)&v212->__shared_owners_;
                    do
                      v214 = __ldaxr(v213);
                    while (__stlxr(v214 - 1, v213));
                    if (!v214)
                    {
                      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                      std::__shared_weak_count::__release_weak(v212);
                    }
                  }
                  v215 = *(std::__shared_weak_count **)(v211 + 16);
                  if (v215)
                  {
                    v216 = (unint64_t *)&v215->__shared_owners_;
                    do
                      v217 = __ldaxr(v216);
                    while (__stlxr(v217 - 1, v216));
                    if (!v217)
                    {
                      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                      std::__shared_weak_count::__release_weak(v215);
                    }
                  }
                  MEMORY[0x227684CE8](v211, 0x10F0C40B62ED6C6);
                }
              }
              v218 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v219 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v220 = __ldaxr(v219);
                while (__stlxr(v220 - 1, v219));
                if (!v220)
                {
                  ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                  std::__shared_weak_count::__release_weak(v218);
                }
              }
              v221 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v222 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
            }
            else
            {
              os_log_type_enabled(v190, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 67109376;
              *(_DWORD *)&object[4] = v1357;
              *(_WORD *)&object[8] = 1024;
              *(_DWORD *)&object[10] = v187;
              v224 = (void *)_os_log_send_and_compose_impl();
              if (v224)
                free(v224);
            }
            if (v173)
            {
              sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gps and lookup inconsistent (missing: %d, extra: %d)", v191, v187);
              sub_223182C08((uint64_t)&v1382);
            }
            sub_223182C08((uint64_t)&v1382);
            v225 = v1390;
            if (v1390)
            {
              v226 = (unint64_t *)&v1390->__shared_owners_;
              do
                v227 = __ldaxr(v226);
              while (__stlxr(v227 - 1, v226));
              if (!v227)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            goto LABEL_414;
          }
        }
        memmove(v183, v181, v182);
        goto LABEL_344;
      }
    }
  }
LABEL_414:
  v228 = *(unsigned __int8 **)(v1363 + 16);
  if (v228)
  {
    v229 = 0;
    v1354 = 0;
    while (1)
    {
      v231 = *(unsigned __int8 **)(v1363 + 96);
      v230 = *(unsigned __int8 **)(v1363 + 104);
      if (v230 != v231)
      {
        v232 = 0xCCCCCCCCCCCCCCCDLL * ((v230 - v231) >> 3);
        do
        {
          v233 = v232 >> 1;
          v234 = &v231[40 * (v232 >> 1)];
          v235 = *v234;
          v236 = v228[16];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[1];
          v236 = v228[17];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[2];
          v236 = v228[18];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[3];
          v236 = v228[19];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[4];
          v236 = v228[20];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[5];
          v236 = v228[21];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[6];
          v236 = v228[22];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[7];
          v236 = v228[23];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[8];
          v236 = v228[24];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[9];
          v236 = v228[25];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[10];
          v236 = v228[26];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[11];
          v236 = v228[27];
          if (v235 != v236)
            goto LABEL_436;
          v235 = v234[12];
          v236 = v228[28];
          if (v235 != v236
            || (v235 = v234[13], v236 = v228[29], v235 != v236)
            || (v235 = v234[14], v236 = v228[30], v235 != v236)
            || (v235 = v234[15], v236 = v228[31], v235 != v236))
          {
LABEL_436:
            if (v235 < v236)
            {
              v233 = v232 + ~v233;
              v231 = v234 + 40;
            }
          }
          v232 = v233;
        }
        while (v233);
        if (v230 != v231
          && ((char)sub_22319835C(v231, v228 + 16) & 0x80000000) == 0
          && ((char)sub_22319835C(v228 + 16, v231) & 0x80000000) == 0
          && v231 != *(unsigned __int8 **)(v1363 + 104))
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v228 + 4) + 192) - *(_QWORD *)(*((_QWORD *)v228 + 4) + 184)) >> 3) != (uint64_t)(*((_QWORD *)v231 + 3) - *((_QWORD *)v231 + 2)) >> 4)
          {
            ++v1354;
            if (*(_BYTE *)(a2 + 1))
            {
              sub_223446D5C(v1397);
              if (**(int **)(*(_QWORD *)v1397 + 56) <= 5)
              {
                v237 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
                v238 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
                v239 = v238;
                if (v237 || v238)
                {
                  v1382 = (const char **)v1397;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v1384 = std::chrono::system_clock::now().__d_.__rep_;
                  v1385 = 5;
                  v1386 = "unknown file";
                  v1387 = 183;
                  v1388 = "unknown function";
                  v1389 = 0;
                  v1390 = 0;
                  v240 = *((_QWORD *)v228 + 4);
                  v242 = *(_QWORD *)(v240 + 184);
                  v241 = *(_QWORD *)(v240 + 192);
                  sub_2245664AC(v228 + 16, __s);
                  v243 = *v1382;
                  v1320 = *v1382;
                  if ((*v1382)[39] < 0)
                  {
                    v244 = *((_QWORD *)v243 + 3);
                    categoryb = (char *)*((_QWORD *)v243 + 2);
                  }
                  else
                  {
                    v244 = *((unsigned __int8 *)*v1382 + 39);
                    categoryb = (char *)(*v1382 + 16);
                  }
                  v1336 = v241;
                  v1318 = (uint64_t)(*v1382 + 16);
                  v1323 = v237;
                  v1327 = *((_QWORD *)v231 + 2);
                  v1329 = *((_QWORD *)v231 + 3);
                  v320 = atomic_load((unsigned __int8 *)&qword_255788F58);
                  if ((v320 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                  {
                    sub_224568628((uint64_t)v1403);
                    sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
                    if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
                      operator delete(*(void **)v1403);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                    __cxa_guard_release(&qword_255788F58);
                  }
                  if (byte_255788F57 >= 0)
                    v321 = (const char *)&xmmword_255788F40;
                  else
                    v321 = (const char *)xmmword_255788F40;
                  if (byte_255788F57 >= 0)
                    v322 = byte_255788F57;
                  else
                    v322 = *((_QWORD *)&xmmword_255788F40 + 1);
                  *(_QWORD *)object = os_log_create(v321, categoryb);
                  if (v322 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  v1359 = v229;
                  if (v322 >= 0x17)
                  {
                    v324 = (v322 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v322 | 7) != 0x17)
                      v324 = v322 | 7;
                    v325 = v324 + 1;
                    v323 = operator new(v324 + 1);
                    *(_QWORD *)&object[24] = v325 | 0x8000000000000000;
                    *(_QWORD *)&object[8] = v323;
                    *(_QWORD *)&object[16] = v322;
                  }
                  else
                  {
                    object[31] = v322;
                    v323 = &object[8];
                    if (!v322)
                    {
LABEL_585:
                      v323[v322] = 0;
                      object[32] = 1;
                      if (v244 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v326 = v228 + 16;
                      if (v244 >= 0x17)
                      {
                        v328 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v244 | 7) != 0x17)
                          v328 = v244 | 7;
                        v329 = v328 + 1;
                        v327 = operator new(v328 + 1);
                        *(_QWORD *)&object[56] = v329 | 0x8000000000000000;
                        *(_QWORD *)&object[40] = v327;
                        *(_QWORD *)&object[48] = v244;
                      }
                      else
                      {
                        object[63] = v244;
                        v327 = &object[40];
                        if (!v244)
                        {
LABEL_593:
                          v327[v244] = 0;
                          object[64] = 1;
                          v330 = *(NSObject **)object;
                          if ((object[63] & 0x80000000) != 0)
                            operator delete(*(void **)&object[40]);
                          if (object[32] && (object[31] & 0x80000000) != 0)
                            operator delete(*(void **)&object[8]);
                          if (*(_QWORD *)object)
                            os_release(*(void **)object);
                          if (v239 && *(_QWORD *)(v239 + 24))
                          {
                            v331 = _os_log_pack_size();
                            v332 = operator new(v331, (std::align_val_t)8uLL);
                            v333 = (_QWORD *)operator new();
                            *v333 = &off_24EC1F7F0;
                            v333[1] = 0;
                            v333[2] = 0;
                            v333[3] = v332;
                            *(_QWORD *)v1403 = v332;
                            *(_QWORD *)&v1403[8] = v332;
                            *(_QWORD *)&v1403[16] = v333;
                            v1404 = 0uLL;
                            v334 = strlen(__s);
                            if (v334 > 0x7FFFFFFFFFFFFFF7)
                              sub_22316DBC0();
                            v335 = v334;
                            if (v334 >= 0x17)
                            {
                              v338 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v334 | 7) != 0x17)
                                v338 = v334 | 7;
                              v339 = v338 + 1;
                              v336 = operator new(v338 + 1);
                              *((_QWORD *)&v1401 + 1) = v339 | 0x8000000000000000;
                              *(_QWORD *)__src = v336;
                              *(_QWORD *)&v1401 = v335;
                            }
                            else
                            {
                              HIBYTE(v1401) = v334;
                              v336 = __src;
                              if (!v334)
                                goto LABEL_612;
                            }
                            memcpy(v336, __s, v335);
LABEL_612:
                            *((_BYTE *)v336 + v335) = 0;
                            v340 = *(_QWORD *)__src;
                            *(_QWORD *)v1399 = v1401;
                            *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
                            v341 = HIBYTE(v1401);
                            v342 = operator new(0x40uLL);
                            v342[1] = 0;
                            v342[2] = 0;
                            v342[3] = off_24EC370A0;
                            *v342 = &off_24EC37050;
                            v343 = *(_QWORD *)v1399;
                            v342[4] = v340;
                            v342[5] = v343;
                            *(_QWORD *)((char *)v342 + 47) = *(_QWORD *)&v1399[7];
                            *((_BYTE *)v342 + 55) = v341;
                            *(_QWORD *)v1399 = 0;
                            *(_QWORD *)&v1399[7] = 0;
                            v344 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
                            *(_QWORD *)&v1404 = v342 + 3;
                            *((_QWORD *)&v1404 + 1) = v342;
                            v326 = v228 + 16;
                            if (v344)
                            {
                              v345 = (unint64_t *)&v344->__shared_owners_;
                              do
                                v346 = __ldaxr(v345);
                              while (__stlxr(v346 - 1, v345));
                              if (!v346)
                              {
                                ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                                std::__shared_weak_count::__release_weak(v344);
                              }
                            }
                            *(_OWORD *)object = *(_OWORD *)v1403;
                            v347 = v1404;
                            *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
                            if (*(_QWORD *)&v1403[16])
                            {
                              v348 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
                              do
                                v349 = __ldxr(v348);
                              while (__stxr(v349 + 1, v348));
                            }
                            v350 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
                            *(_QWORD *)&object[24] = v347;
                            *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
                            if (*((_QWORD *)&v1404 + 1))
                            {
                              v351 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
                              do
                                v352 = __ldxr(v351);
                              while (__stxr(v352 + 1, v351));
                              *(_QWORD *)&object[40] = v347;
                              do
                                v353 = __ldaxr(v351);
                              while (__stlxr(v353 - 1, v351));
                              if (!v353)
                              {
                                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                                std::__shared_weak_count::__release_weak(v350);
                              }
                            }
                            else
                            {
                              *(_QWORD *)&object[40] = v347;
                            }
                            v354 = *(std::__shared_weak_count **)&v1403[16];
                            if (*(_QWORD *)&v1403[16])
                            {
                              v355 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
                              do
                                v356 = __ldaxr(v355);
                              while (__stlxr(v356 - 1, v355));
                              if (!v356)
                              {
                                ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                                std::__shared_weak_count::__release_weak(v354);
                              }
                            }
                            v357 = *(_QWORD *)object;
                            if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                              v358 = *(_QWORD *)&object[40] + 8;
                            else
                              v358 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                            v359 = _os_log_pack_fill();
                            *(_DWORD *)v359 = 134218754;
                            *(_QWORD *)(v359 + 4) = 0xAAAAAAAAAAAAAAABLL * ((v1336 - v242) >> 3);
                            *(_WORD *)(v359 + 12) = 1040;
                            *(_DWORD *)(v359 + 14) = 13;
                            *(_WORD *)(v359 + 18) = 2080;
                            *(_QWORD *)(v359 + 20) = v358;
                            *(_WORD *)(v359 + 28) = 2048;
                            *(_QWORD *)(v359 + 30) = (v1329 - v1327) >> 4;
                            v360 = operator new();
                            v361 = *((unsigned __int8 *)v1320 + 39);
                            v362 = v1318;
                            if ((v361 & 0x80u) != 0)
                            {
                              v362 = *((_QWORD *)v1320 + 2);
                              v361 = *((_QWORD *)v1320 + 3);
                            }
                            *(_QWORD *)v360 = v357;
                            *(_OWORD *)(v360 + 8) = *(_OWORD *)&object[8];
                            *(_QWORD *)&object[8] = 0;
                            *(_QWORD *)&object[16] = 0;
                            *(_OWORD *)(v360 + 24) = *(_OWORD *)&object[24];
                            *(_QWORD *)&object[24] = 0;
                            *(_QWORD *)&object[32] = 0;
                            *(_QWORD *)(v360 + 40) = v362;
                            *(_QWORD *)(v360 + 48) = v361;
                            *(_BYTE *)(v360 + 56) = 16;
                            *(_QWORD *)__src = 0;
                            *(_QWORD *)v1403 = v360;
                            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v239 + 24) + 40))(*(_QWORD *)(v239 + 24), v1403);
                            v229 = v1359;
                            v363 = *(_QWORD *)v1403;
                            *(_QWORD *)v1403 = 0;
                            if (v363)
                            {
                              v364 = *(std::__shared_weak_count **)(v363 + 32);
                              if (v364)
                              {
                                v365 = (unint64_t *)&v364->__shared_owners_;
                                do
                                  v366 = __ldaxr(v365);
                                while (__stlxr(v366 - 1, v365));
                                if (!v366)
                                {
                                  ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                                  std::__shared_weak_count::__release_weak(v364);
                                }
                              }
                              v367 = *(std::__shared_weak_count **)(v363 + 16);
                              if (v367)
                              {
                                v368 = (unint64_t *)&v367->__shared_owners_;
                                do
                                  v369 = __ldaxr(v368);
                                while (__stlxr(v369 - 1, v368));
                                if (!v369)
                                {
                                  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                                  std::__shared_weak_count::__release_weak(v367);
                                }
                              }
                              MEMORY[0x227684CE8](v363, 0x10F0C40B62ED6C6);
                              v370 = *(_QWORD *)__src;
                              *(_QWORD *)__src = 0;
                              if (v370)
                              {
                                v371 = *(std::__shared_weak_count **)(v370 + 32);
                                if (v371)
                                {
                                  v372 = (unint64_t *)&v371->__shared_owners_;
                                  do
                                    v373 = __ldaxr(v372);
                                  while (__stlxr(v373 - 1, v372));
                                  if (!v373)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                                    std::__shared_weak_count::__release_weak(v371);
                                  }
                                }
                                v374 = *(std::__shared_weak_count **)(v370 + 16);
                                if (v374)
                                {
                                  v375 = (unint64_t *)&v374->__shared_owners_;
                                  do
                                    v376 = __ldaxr(v375);
                                  while (__stlxr(v376 - 1, v375));
                                  if (!v376)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                                    std::__shared_weak_count::__release_weak(v374);
                                  }
                                }
                                MEMORY[0x227684CE8](v370, 0x10F0C40B62ED6C6);
                              }
                            }
                            v377 = *(std::__shared_weak_count **)&object[32];
                            if (*(_QWORD *)&object[32])
                            {
                              v378 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                              do
                                v379 = __ldaxr(v378);
                              while (__stlxr(v379 - 1, v378));
                              if (!v379)
                              {
                                ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                                std::__shared_weak_count::__release_weak(v377);
                              }
                            }
                            v380 = *(std::__shared_weak_count **)&object[16];
                            if (*(_QWORD *)&object[16])
                            {
                              v381 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                              do
                                v382 = __ldaxr(v381);
                              while (__stlxr(v382 - 1, v381));
                              if (!v382)
                              {
                                ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                                std::__shared_weak_count::__release_weak(v380);
                              }
                            }
                          }
                          else
                          {
                            os_log_type_enabled(v330, OS_LOG_TYPE_ERROR);
                            *(_DWORD *)object = 134218754;
                            *(_QWORD *)&object[4] = 0xAAAAAAAAAAAAAAABLL * ((v1336 - v242) >> 3);
                            *(_WORD *)&object[12] = 1040;
                            *(_DWORD *)&object[14] = 13;
                            *(_WORD *)&object[18] = 2080;
                            *(_QWORD *)&object[20] = __s;
                            *(_WORD *)&object[28] = 2048;
                            *(_QWORD *)&object[30] = (v1329 - v1327) >> 4;
                            v337 = (void *)_os_log_send_and_compose_impl();
                            v229 = v1359;
                            if (v337)
                              free(v337);
                          }
                          if (v1323)
                          {
                            v383 = *((_QWORD *)v228 + 4);
                            v385 = *(_QWORD *)(v383 + 184);
                            v384 = *(_QWORD *)(v383 + 192);
                            sub_2245664AC(v326, object);
                            sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: number of local planes (%zu) in kf %.13s doesnt match with linked gps (%zu)", 0xAAAAAAAAAAAAAAABLL * ((v384 - v385) >> 3), object, (uint64_t)(*((_QWORD *)v231 + 3) - *((_QWORD *)v231 + 2)) >> 4);
                            sub_223182C08((uint64_t)&v1382);
                          }
                          sub_223182C08((uint64_t)&v1382);
                          v317 = v1390;
                          if (!v1390)
                            goto LABEL_416;
                          v386 = (unint64_t *)&v1390->__shared_owners_;
                          do
                            v319 = __ldaxr(v386);
                          while (__stlxr(v319 - 1, v386));
LABEL_563:
                          if (!v319)
                          {
                            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                            std::__shared_weak_count::__release_weak(v317);
                          }
                          goto LABEL_416;
                        }
                      }
                      memmove(v327, categoryb, v244);
                      goto LABEL_593;
                    }
                  }
                  memmove(v323, v321, v322);
                  goto LABEL_585;
                }
              }
            }
          }
          goto LABEL_416;
        }
      }
      v229 = (v229 + 1);
      if (!*(_BYTE *)(a2 + 1))
        goto LABEL_416;
      sub_223446D5C(v1397);
      if (**(int **)(*(_QWORD *)v1397 + 56) > 5)
        goto LABEL_416;
      v245 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
      v246 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
      v247 = v246;
      if (!v245 && v246 == 0)
        goto LABEL_416;
      v1382 = (const char **)v1397;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v1384 = std::chrono::system_clock::now().__d_.__rep_;
      v1385 = 5;
      v1386 = "unknown file";
      v1387 = 171;
      v1388 = "unknown function";
      v1389 = 0;
      v1390 = 0;
      sub_2245664AC(v228 + 16, __s);
      v249 = *v1382;
      v250 = *v1382 + 16;
      categoryc = (char *)*v1382;
      v1335 = v250;
      if ((*v1382)[39] < 0)
      {
        v250 = (const char *)*((_QWORD *)v249 + 2);
        v251 = *((_QWORD *)v249 + 3);
        v1358 = v245;
        v1368 = v228 + 16;
        v253 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v253 & 1) != 0)
          goto LABEL_459;
      }
      else
      {
        v251 = *((unsigned __int8 *)*v1382 + 39);
        v1358 = v245;
        v1368 = v228 + 16;
        v252 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v252 & 1) != 0)
          goto LABEL_459;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v1403);
        sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
        if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
          operator delete(*(void **)v1403);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_459:
      if (byte_255788F57 >= 0)
        v254 = (const char *)&xmmword_255788F40;
      else
        v254 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v255 = byte_255788F57;
      else
        v255 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v254, v250);
      if (v255 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v255 >= 0x17)
      {
        v257 = v229;
        v258 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v255 | 7) != 0x17)
          v258 = v255 | 7;
        v259 = v258 + 1;
        v256 = operator new(v258 + 1);
        *(_QWORD *)&object[24] = v259 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v256;
        *(_QWORD *)&object[16] = v255;
        v229 = v257;
LABEL_472:
        memmove(v256, v254, v255);
        goto LABEL_473;
      }
      object[31] = v255;
      v256 = &object[8];
      if (v255)
        goto LABEL_472;
LABEL_473:
      v256[v255] = 0;
      object[32] = 1;
      if (v251 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v251 >= 0x17)
      {
        v263 = (v251 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v251 | 7) != 0x17)
          v263 = v251 | 7;
        v264 = v263 + 1;
        v260 = operator new(v263 + 1);
        *(_QWORD *)&object[56] = v264 | 0x8000000000000000;
        *(_QWORD *)&object[40] = v260;
        *(_QWORD *)&object[48] = v251;
        v261 = v1368;
      }
      else
      {
        object[63] = v251;
        v260 = &object[40];
        v261 = v1368;
        if (!v251)
        {
          object[40] = 0;
          object[64] = 1;
          v262 = *(NSObject **)object;
          if ((object[63] & 0x80000000) == 0)
            goto LABEL_477;
          goto LABEL_483;
        }
      }
      memmove(v260, v250, v251);
      v260[v251] = 0;
      object[64] = 1;
      v262 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
      {
LABEL_477:
        if (!object[32])
          goto LABEL_486;
        goto LABEL_484;
      }
LABEL_483:
      operator delete(*(void **)&object[40]);
      if (!object[32])
        goto LABEL_486;
LABEL_484:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
LABEL_486:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (!v247 || !*(_QWORD *)(v247 + 24))
      {
        os_log_type_enabled(v262, OS_LOG_TYPE_ERROR);
        *(_QWORD *)object = 0xD04100202;
        *(_WORD *)&object[8] = 2080;
        *(_QWORD *)&object[10] = __s;
        v271 = (void *)_os_log_send_and_compose_impl();
        if (!v271)
          goto LABEL_558;
        free(v271);
        if (v1358)
          goto LABEL_559;
        goto LABEL_560;
      }
      v265 = _os_log_pack_size();
      v266 = operator new(v265, (std::align_val_t)8uLL);
      v267 = (_QWORD *)operator new();
      *v267 = &off_24EC1F7F0;
      v267[1] = 0;
      v267[2] = 0;
      v267[3] = v266;
      *(_QWORD *)v1403 = v266;
      *(_QWORD *)&v1403[8] = v266;
      *(_QWORD *)&v1403[16] = v267;
      v1404 = 0uLL;
      v268 = strlen(__s);
      if (v268 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v269 = v268;
      if (v268 >= 0x17)
      {
        v272 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v268 | 7) != 0x17)
          v272 = v268 | 7;
        v273 = v272 + 1;
        v270 = operator new(v272 + 1);
        *((_QWORD *)&v1401 + 1) = v273 | 0x8000000000000000;
        *(_QWORD *)__src = v270;
        *(_QWORD *)&v1401 = v269;
LABEL_500:
        memcpy(v270, __s, v269);
        goto LABEL_501;
      }
      HIBYTE(v1401) = v268;
      v270 = __src;
      if (v268)
        goto LABEL_500;
LABEL_501:
      *((_BYTE *)v270 + v269) = 0;
      v274 = *(_QWORD *)__src;
      *(_QWORD *)v1399 = v1401;
      *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
      v275 = HIBYTE(v1401);
      v276 = operator new(0x38uLL);
      v276[1] = 0;
      v276[2] = 0;
      v276[3] = off_24EC1FA48;
      *v276 = &off_24EC1F9F8;
      v277 = *(_QWORD *)v1399;
      v276[4] = v274;
      v276[5] = v277;
      *(_QWORD *)((char *)v276 + 47) = *(_QWORD *)&v1399[7];
      *((_BYTE *)v276 + 55) = v275;
      *(_QWORD *)v1399 = 0;
      *(_QWORD *)&v1399[7] = 0;
      v278 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
      *(_QWORD *)&v1404 = v276 + 3;
      *((_QWORD *)&v1404 + 1) = v276;
      v261 = v1368;
      if (v278)
      {
        v279 = (unint64_t *)&v278->__shared_owners_;
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      *(_OWORD *)object = *(_OWORD *)v1403;
      v281 = v1404;
      *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
      if (*(_QWORD *)&v1403[16])
      {
        v282 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
        do
          v283 = __ldxr(v282);
        while (__stxr(v283 + 1, v282));
      }
      v284 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
      *(_QWORD *)&object[24] = v281;
      *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
      if (*((_QWORD *)&v1404 + 1))
      {
        v285 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
        *(_QWORD *)&object[40] = v281;
        do
          v287 = __ldaxr(v285);
        while (__stlxr(v287 - 1, v285));
        if (!v287)
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
      }
      else
      {
        *(_QWORD *)&object[40] = v281;
      }
      v288 = *(std::__shared_weak_count **)&v1403[16];
      if (*(_QWORD *)&v1403[16])
      {
        v289 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      v291 = *(_QWORD *)object;
      if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
        v292 = *(_QWORD *)&object[40] + 8;
      else
        v292 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
      v293 = _os_log_pack_fill();
      *(_DWORD *)v293 = 68157954;
      *(_DWORD *)(v293 + 4) = 13;
      *(_WORD *)(v293 + 8) = 2080;
      *(_QWORD *)(v293 + 10) = v292;
      v294 = operator new();
      v295 = categoryc[39];
      v296 = v1335;
      if ((v295 & 0x80u) != 0)
      {
        v296 = (const char *)*((_QWORD *)categoryc + 2);
        v295 = *((_QWORD *)categoryc + 3);
      }
      *(_QWORD *)v294 = v291;
      *(_OWORD *)(v294 + 8) = *(_OWORD *)&object[8];
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)(v294 + 24) = *(_OWORD *)&object[24];
      *(_QWORD *)&object[24] = 0;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)(v294 + 40) = v296;
      *(_QWORD *)(v294 + 48) = v295;
      *(_BYTE *)(v294 + 56) = 16;
      *(_QWORD *)__src = 0;
      *(_QWORD *)v1403 = v294;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v247 + 24) + 40))(*(_QWORD *)(v247 + 24), v1403);
      v297 = *(_QWORD *)v1403;
      *(_QWORD *)v1403 = 0;
      if (v297)
      {
        v298 = *(std::__shared_weak_count **)(v297 + 32);
        if (v298)
        {
          v299 = (unint64_t *)&v298->__shared_owners_;
          do
            v300 = __ldaxr(v299);
          while (__stlxr(v300 - 1, v299));
          if (!v300)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
        v301 = *(std::__shared_weak_count **)(v297 + 16);
        if (v301)
        {
          v302 = (unint64_t *)&v301->__shared_owners_;
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        MEMORY[0x227684CE8](v297, 0x10F0C40B62ED6C6);
        v304 = *(_QWORD *)__src;
        *(_QWORD *)__src = 0;
        if (v304)
        {
          v305 = *(std::__shared_weak_count **)(v304 + 32);
          if (v305)
          {
            v306 = (unint64_t *)&v305->__shared_owners_;
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
          v308 = *(std::__shared_weak_count **)(v304 + 16);
          if (v308)
          {
            v309 = (unint64_t *)&v308->__shared_owners_;
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
              std::__shared_weak_count::__release_weak(v308);
            }
          }
          MEMORY[0x227684CE8](v304, 0x10F0C40B62ED6C6);
        }
      }
      v311 = *(std::__shared_weak_count **)&object[32];
      if (!*(_QWORD *)&object[32])
        goto LABEL_554;
      v312 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v313 = __ldaxr(v312);
      while (__stlxr(v313 - 1, v312));
      if (!v313)
      {
        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
        std::__shared_weak_count::__release_weak(v311);
        v314 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_558;
      }
      else
      {
LABEL_554:
        v314 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_558;
      }
      v315 = (unint64_t *)&v314->__shared_owners_;
      do
        v316 = __ldaxr(v315);
      while (__stlxr(v316 - 1, v315));
      if (v316)
      {
LABEL_558:
        if (!v1358)
          goto LABEL_560;
LABEL_559:
        sub_2245664AC(v261, object);
        sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kf %.13s missing in lookup", object);
        sub_223182C08((uint64_t)&v1382);
        goto LABEL_560;
      }
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
      if (v1358)
        goto LABEL_559;
LABEL_560:
      sub_223182C08((uint64_t)&v1382);
      v317 = v1390;
      if (v1390)
      {
        v318 = (unint64_t *)&v1390->__shared_owners_;
        do
          v319 = __ldaxr(v318);
        while (__stlxr(v319 - 1, v318));
        goto LABEL_563;
      }
LABEL_416:
      v228 = *(unsigned __int8 **)v228;
      if (!v228)
        goto LABEL_688;
    }
  }
  v1354 = 0;
  LODWORD(v229) = 0;
LABEL_688:
  v387 = *(unsigned __int8 **)(v1363 + 96);
  v388 = *(unsigned __int8 **)(v1363 + 104);
  v1360 = v229;
  v389 = 0;
  if (v387 != v388)
  {
    v390 = &object[8];
    while (1)
    {
      if (!sub_223340F28((_QWORD *)v1363, (uint64_t)v387))
      {
        ++v389;
        if (*(_BYTE *)(a2 + 1))
        {
          sub_223446D5C(v1397);
          if (**(int **)(*(_QWORD *)v1397 + 56) <= 5)
          {
            v391 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
            v392 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
            v393 = v392;
            if (v391 || v392 != 0)
              break;
          }
        }
      }
LABEL_690:
      v387 += 40;
      if (v387 == v388)
        goto LABEL_817;
    }
    v1382 = (const char **)v1397;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 195;
    v1388 = "unknown function";
    v1389 = 0;
    v1390 = 0;
    sub_2245664AC(v387, __s);
    v395 = *v1382;
    v1334 = *v1382;
    if ((*v1382)[39] < 0)
    {
      v397 = (const char *)*((_QWORD *)v395 + 2);
      v396 = *((_QWORD *)v395 + 3);
      v1333 = *v1382 + 16;
      v399 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v1369 = v391;
      if ((v399 & 1) != 0)
        goto LABEL_702;
    }
    else
    {
      v396 = *((unsigned __int8 *)*v1382 + 39);
      v397 = *v1382 + 16;
      v1333 = v397;
      v398 = atomic_load((unsigned __int8 *)&qword_255788F58);
      v1369 = v391;
      if ((v398 & 1) != 0)
        goto LABEL_702;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v1403);
      sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
      if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
        operator delete(*(void **)v1403);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_702:
    if (byte_255788F57 >= 0)
      v400 = (const char *)&xmmword_255788F40;
    else
      v400 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v401 = byte_255788F57;
    else
      v401 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v400, v397);
    if (v401 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    categoryd = (char *)v397;
    if (v401 >= 0x17)
    {
      v403 = v390;
      v404 = v389;
      v405 = (v401 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v401 | 7) != 0x17)
        v405 = v401 | 7;
      v406 = v405 + 1;
      v402 = operator new(v405 + 1);
      *(_QWORD *)&object[24] = v406 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v402;
      *(_QWORD *)&object[16] = v401;
      v389 = v404;
      v390 = v403;
    }
    else
    {
      object[31] = v401;
      v402 = v390;
      if (!v401)
      {
LABEL_716:
        v402[v401] = 0;
        object[32] = 1;
        if (v396 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v396 >= 0x17)
        {
          v409 = (v396 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v396 | 7) != 0x17)
            v409 = v396 | 7;
          v229 = v409 + 1;
          v407 = operator new(v409 + 1);
          *(_QWORD *)&object[56] = v229 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v407;
          *(_QWORD *)&object[48] = v396;
          LODWORD(v229) = v1360;
        }
        else
        {
          object[63] = v396;
          v407 = &object[40];
          LODWORD(v229) = v1360;
          if (!v396)
          {
            object[40] = 0;
            object[64] = 1;
            v408 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_720;
            goto LABEL_726;
          }
        }
        memmove(v407, categoryd, v396);
        v407[v396] = 0;
        object[64] = 1;
        v408 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_720:
          if (!object[32])
            goto LABEL_729;
          goto LABEL_727;
        }
LABEL_726:
        operator delete(*(void **)&object[40]);
        if (!object[32])
          goto LABEL_729;
LABEL_727:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_729:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v393 || !*(_QWORD *)(v393 + 24))
        {
          os_log_type_enabled(v408, OS_LOG_TYPE_ERROR);
          *(_QWORD *)object = 0xD04100202;
          *(_WORD *)&object[8] = 2080;
          *(_QWORD *)&object[10] = __s;
          v416 = (void *)_os_log_send_and_compose_impl();
          if (v416)
          {
            free(v416);
            if (!v1369)
              goto LABEL_803;
            goto LABEL_802;
          }
          goto LABEL_801;
        }
        v410 = _os_log_pack_size();
        v411 = operator new(v410, (std::align_val_t)8uLL);
        v412 = (_QWORD *)operator new();
        *v412 = &off_24EC1F7F0;
        v412[1] = 0;
        v412[2] = 0;
        v412[3] = v411;
        *(_QWORD *)v1403 = v411;
        *(_QWORD *)&v1403[8] = v411;
        *(_QWORD *)&v1403[16] = v412;
        v1404 = 0uLL;
        v413 = strlen(__s);
        if (v413 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        v414 = v413;
        if (v413 >= 0x17)
        {
          v417 = (v413 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v413 | 7) != 0x17)
            v417 = v413 | 7;
          v418 = v417 + 1;
          v415 = operator new(v417 + 1);
          *((_QWORD *)&v1401 + 1) = v418 | 0x8000000000000000;
          *(_QWORD *)__src = v415;
          *(_QWORD *)&v1401 = v414;
        }
        else
        {
          HIBYTE(v1401) = v413;
          v415 = __src;
          if (!v413)
            goto LABEL_744;
        }
        memcpy(v415, __s, v414);
LABEL_744:
        *((_BYTE *)v415 + v414) = 0;
        v419 = *(_QWORD *)__src;
        *(_QWORD *)v1399 = v1401;
        *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
        v420 = HIBYTE(v1401);
        v421 = operator new(0x38uLL);
        v421[1] = 0;
        v421[2] = 0;
        v421[3] = off_24EC1FA48;
        *v421 = &off_24EC1F9F8;
        v422 = *(_QWORD *)v1399;
        v421[4] = v419;
        v421[5] = v422;
        *(_QWORD *)((char *)v421 + 47) = *(_QWORD *)&v1399[7];
        *((_BYTE *)v421 + 55) = v420;
        *(_QWORD *)v1399 = 0;
        *(_QWORD *)&v1399[7] = 0;
        v423 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
        *(_QWORD *)&v1404 = v421 + 3;
        *((_QWORD *)&v1404 + 1) = v421;
        LODWORD(v229) = v1360;
        if (v423)
        {
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
          }
        }
        *(_OWORD *)object = *(_OWORD *)v1403;
        v426 = v1404;
        *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
        if (*(_QWORD *)&v1403[16])
        {
          v427 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
          do
            v428 = __ldxr(v427);
          while (__stxr(v428 + 1, v427));
        }
        v429 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
        *(_QWORD *)&object[24] = v426;
        *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
        if (*((_QWORD *)&v1404 + 1))
        {
          v430 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
          do
            v431 = __ldxr(v430);
          while (__stxr(v431 + 1, v430));
          *(_QWORD *)&object[40] = v426;
          do
            v432 = __ldaxr(v430);
          while (__stlxr(v432 - 1, v430));
          if (!v432)
          {
            ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
            std::__shared_weak_count::__release_weak(v429);
          }
        }
        else
        {
          *(_QWORD *)&object[40] = v426;
        }
        v433 = *(std::__shared_weak_count **)&v1403[16];
        if (*(_QWORD *)&v1403[16])
        {
          v434 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
          do
            v435 = __ldaxr(v434);
          while (__stlxr(v435 - 1, v434));
          if (!v435)
          {
            ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
            std::__shared_weak_count::__release_weak(v433);
          }
        }
        v436 = *(_QWORD *)object;
        if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
          v437 = *(_QWORD *)&object[40] + 8;
        else
          v437 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
        v438 = _os_log_pack_fill();
        *(_DWORD *)v438 = 68157954;
        *(_DWORD *)(v438 + 4) = 13;
        *(_WORD *)(v438 + 8) = 2080;
        *(_QWORD *)(v438 + 10) = v437;
        v439 = operator new();
        v440 = *((unsigned __int8 *)v1334 + 39);
        v441 = v1333;
        if ((v440 & 0x80u) != 0)
        {
          v441 = (const char *)*((_QWORD *)v1334 + 2);
          v440 = *((_QWORD *)v1334 + 3);
        }
        *(_QWORD *)v439 = v436;
        *(_OWORD *)(v439 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v439 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)(v439 + 40) = v441;
        *(_QWORD *)(v439 + 48) = v440;
        *(_BYTE *)(v439 + 56) = 16;
        *(_QWORD *)__src = 0;
        *(_QWORD *)v1403 = v439;
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v393 + 24) + 40))(*(_QWORD *)(v393 + 24), v1403);
        v442 = *(_QWORD *)v1403;
        *(_QWORD *)v1403 = 0;
        if (v442)
        {
          v443 = *(std::__shared_weak_count **)(v442 + 32);
          if (v443)
          {
            v444 = (unint64_t *)&v443->__shared_owners_;
            do
              v445 = __ldaxr(v444);
            while (__stlxr(v445 - 1, v444));
            if (!v445)
            {
              ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
              std::__shared_weak_count::__release_weak(v443);
            }
          }
          v446 = *(std::__shared_weak_count **)(v442 + 16);
          if (v446)
          {
            v447 = (unint64_t *)&v446->__shared_owners_;
            do
              v448 = __ldaxr(v447);
            while (__stlxr(v448 - 1, v447));
            if (!v448)
            {
              ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
              std::__shared_weak_count::__release_weak(v446);
            }
          }
          MEMORY[0x227684CE8](v442, 0x10F0C40B62ED6C6);
          v449 = *(_QWORD *)__src;
          *(_QWORD *)__src = 0;
          if (v449)
          {
            v450 = *(std::__shared_weak_count **)(v449 + 32);
            if (v450)
            {
              v451 = (unint64_t *)&v450->__shared_owners_;
              do
                v452 = __ldaxr(v451);
              while (__stlxr(v452 - 1, v451));
              if (!v452)
              {
                ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                std::__shared_weak_count::__release_weak(v450);
              }
            }
            v453 = *(std::__shared_weak_count **)(v449 + 16);
            if (v453)
            {
              v454 = (unint64_t *)&v453->__shared_owners_;
              do
                v455 = __ldaxr(v454);
              while (__stlxr(v455 - 1, v454));
              if (!v455)
              {
                ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                std::__shared_weak_count::__release_weak(v453);
              }
            }
            MEMORY[0x227684CE8](v449, 0x10F0C40B62ED6C6);
          }
        }
        v456 = *(std::__shared_weak_count **)&object[32];
        if (!*(_QWORD *)&object[32])
          goto LABEL_797;
        v457 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v458 = __ldaxr(v457);
        while (__stlxr(v458 - 1, v457));
        if (!v458)
        {
          ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
          std::__shared_weak_count::__release_weak(v456);
          v459 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_801;
        }
        else
        {
LABEL_797:
          v459 = *(std::__shared_weak_count **)&object[16];
          if (!*(_QWORD *)&object[16])
            goto LABEL_801;
        }
        v460 = (unint64_t *)&v459->__shared_owners_;
        do
          v461 = __ldaxr(v460);
        while (__stlxr(v461 - 1, v460));
        if (!v461)
        {
          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
          std::__shared_weak_count::__release_weak(v459);
          if (!v1369)
            goto LABEL_803;
          goto LABEL_802;
        }
LABEL_801:
        if (!v1369)
        {
LABEL_803:
          sub_223182C08((uint64_t)&v1382);
          v462 = v1390;
          if (v1390)
          {
            v463 = (unint64_t *)&v1390->__shared_owners_;
            do
              v464 = __ldaxr(v463);
            while (__stlxr(v464 - 1, v463));
            if (!v464)
            {
              ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
              std::__shared_weak_count::__release_weak(v462);
            }
          }
          goto LABEL_690;
        }
LABEL_802:
        sub_2245664AC(v387, object);
        sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kf %.13s is extra in lookup", object);
        sub_223182C08((uint64_t)&v1382);
        goto LABEL_803;
      }
    }
    memmove(v402, v400, v401);
    goto LABEL_716;
  }
LABEL_817:
  if ((int)v229 > 0 || v389 > 0)
  {
    sub_223446D5C(__src);
    if (**(int **)(*(_QWORD *)__src + 56) > 5)
      goto LABEL_912;
    v465 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
    v466 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0);
    v467 = v466;
    if (!v465 && !v466)
      goto LABEL_912;
    v1382 = (const char **)__src;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 204;
    v1389 = 0;
    v1390 = 0;
    v1388 = "unknown function";
    v468 = *v1382;
    v469 = (uint64_t)(*v1382 + 16);
    if ((*v1382)[39] < 0)
    {
      v471 = (const char *)*((_QWORD *)v468 + 2);
      v470 = *((_QWORD *)v468 + 3);
    }
    else
    {
      v470 = *((unsigned __int8 *)*v1382 + 39);
      v471 = *v1382 + 16;
    }
    v1370 = v389;
    v472 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v472 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v473 = (const char *)&xmmword_255788F40;
    else
      v473 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v474 = byte_255788F57;
    else
      v474 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v473, v471);
    v475 = &object[8];
    if (v474 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v474 >= 0x17)
    {
      v476 = (v474 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v474 | 7) != 0x17)
        v476 = v474 | 7;
      v477 = v476 + 1;
      v475 = operator new(v476 + 1);
      *(_QWORD *)&object[24] = v477 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v475;
      *(_QWORD *)&object[16] = v474;
    }
    else
    {
      object[31] = v474;
      if (!v474)
      {
LABEL_842:
        v475[v474] = 0;
        object[32] = 1;
        v478 = &object[40];
        if (v470 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v470 >= 0x17)
        {
          v480 = (v470 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v470 | 7) != 0x17)
            v480 = v470 | 7;
          v481 = v480 + 1;
          v478 = operator new(v480 + 1);
          *(_QWORD *)&object[56] = v481 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v478;
          *(_QWORD *)&object[48] = v470;
          v479 = v1370;
        }
        else
        {
          object[63] = v470;
          v479 = v1370;
          if (!v470)
            goto LABEL_850;
        }
        memmove(v478, v471, v470);
LABEL_850:
        v478[v470] = 0;
        object[64] = 1;
        v482 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        v483 = v1360;
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v467 && *(_QWORD *)(v467 + 24))
        {
          v484 = _os_log_pack_size();
          v485 = (std::__shared_weak_count_vtbl *)operator new(v484, (std::align_val_t)8uLL);
          v486 = (std::__shared_weak_count *)operator new();
          v487 = v486;
          v486->__shared_owners_ = 0;
          v488 = (unint64_t *)&v486->__shared_owners_;
          v486->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v486->__shared_weak_owners_ = 0;
          v486[1].__vftable = v485;
          *(_QWORD *)object = v485;
          *(_QWORD *)&object[8] = v485;
          *(_QWORD *)&object[16] = v486;
          do
            v489 = __ldxr(v488);
          while (__stxr(v489 + 1, v488));
          memset(&object[24], 0, 24);
          do
            v490 = __ldaxr(v488);
          while (__stlxr(v490 - 1, v488));
          if (!v490)
          {
            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
            std::__shared_weak_count::__release_weak(v487);
          }
          v491 = *(_QWORD *)object;
          v492 = _os_log_pack_fill();
          *(_DWORD *)v492 = 67109376;
          *(_DWORD *)(v492 + 4) = v1360;
          *(_WORD *)(v492 + 8) = 1024;
          *(_DWORD *)(v492 + 10) = v1370;
          v493 = operator new();
          v494 = *((unsigned __int8 *)v468 + 39);
          if ((v494 & 0x80u) == 0)
            v495 = v469;
          else
            v495 = *((_QWORD *)v468 + 2);
          if ((v494 & 0x80u) != 0)
            v494 = *((_QWORD *)v468 + 3);
          *(_QWORD *)v493 = v491;
          *(_OWORD *)(v493 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v493 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v493 + 40) = v495;
          *(_QWORD *)(v493 + 48) = v494;
          *(_BYTE *)(v493 + 56) = 16;
          *(_QWORD *)__s = 0;
          *(_QWORD *)v1403 = v493;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v467 + 24) + 40))(*(_QWORD *)(v467 + 24), v1403);
          v496 = *(_QWORD *)v1403;
          *(_QWORD *)v1403 = 0;
          v483 = v1360;
          v479 = v1370;
          if (v496)
          {
            v497 = *(std::__shared_weak_count **)(v496 + 32);
            if (v497)
            {
              v498 = (unint64_t *)&v497->__shared_owners_;
              do
                v499 = __ldaxr(v498);
              while (__stlxr(v499 - 1, v498));
              if (!v499)
              {
                ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                std::__shared_weak_count::__release_weak(v497);
              }
            }
            v500 = *(std::__shared_weak_count **)(v496 + 16);
            if (v500)
            {
              v501 = (unint64_t *)&v500->__shared_owners_;
              do
                v502 = __ldaxr(v501);
              while (__stlxr(v502 - 1, v501));
              if (!v502)
              {
                ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                std::__shared_weak_count::__release_weak(v500);
              }
            }
            MEMORY[0x227684CE8](v496, 0x10F0C40B62ED6C6);
            v503 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (v503)
            {
              v504 = *(std::__shared_weak_count **)(v503 + 32);
              if (v504)
              {
                v505 = (unint64_t *)&v504->__shared_owners_;
                do
                  v506 = __ldaxr(v505);
                while (__stlxr(v506 - 1, v505));
                if (!v506)
                {
                  ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                  std::__shared_weak_count::__release_weak(v504);
                }
              }
              v507 = *(std::__shared_weak_count **)(v503 + 16);
              if (v507)
              {
                v508 = (unint64_t *)&v507->__shared_owners_;
                do
                  v509 = __ldaxr(v508);
                while (__stlxr(v509 - 1, v508));
                if (!v509)
                {
                  ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                  std::__shared_weak_count::__release_weak(v507);
                }
              }
              MEMORY[0x227684CE8](v503, 0x10F0C40B62ED6C6);
            }
          }
          v510 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v511 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v512 = __ldaxr(v511);
            while (__stlxr(v512 - 1, v511));
            if (!v512)
            {
              ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
              std::__shared_weak_count::__release_weak(v510);
            }
          }
          v513 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v514 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v515 = __ldaxr(v514);
            while (__stlxr(v515 - 1, v514));
            if (!v515)
            {
              ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
              std::__shared_weak_count::__release_weak(v513);
            }
          }
        }
        else
        {
          os_log_type_enabled(v482, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109376;
          *(_DWORD *)&object[4] = v1360;
          *(_WORD *)&object[8] = 1024;
          *(_DWORD *)&object[10] = v479;
          v516 = (void *)_os_log_send_and_compose_impl();
          if (v516)
            free(v516);
        }
        if (v465)
        {
          sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kfs and lookup inconsistent (missing: %d, extra: %d)", v483, v479);
          sub_223182C08((uint64_t)&v1382);
        }
        sub_223182C08((uint64_t)&v1382);
        v517 = v1390;
        if (v1390)
        {
          v518 = (unint64_t *)&v1390->__shared_owners_;
          do
            v519 = __ldaxr(v518);
          while (__stlxr(v519 - 1, v518));
          if (!v519)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
LABEL_912:
        v1322 = 1;
        if (v1354 < 1)
          goto LABEL_1005;
LABEL_913:
        sub_223446D5C(__src);
        if (**(int **)(*(_QWORD *)__src + 56) > 5
          || (v520 = *(unsigned __int8 *)(*(_QWORD *)__src + 72),
              v521 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0),
              v522 = v521,
              !v520)
          && !v521)
        {
LABEL_1004:
          v1322 = 1;
          goto LABEL_1005;
        }
        v1382 = (const char **)__src;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v1384 = std::chrono::system_clock::now().__d_.__rep_;
        v1385 = 5;
        v1386 = "unknown file";
        v1387 = 212;
        v1389 = 0;
        v1390 = 0;
        v1388 = "unknown function";
        v523 = *v1382;
        v524 = (uint64_t)(*v1382 + 16);
        if ((*v1382)[39] < 0)
        {
          v526 = (const char *)*((_QWORD *)v523 + 2);
          v525 = *((_QWORD *)v523 + 3);
          v528 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v528 & 1) != 0)
            goto LABEL_920;
        }
        else
        {
          v525 = *((unsigned __int8 *)*v1382 + 39);
          v526 = *v1382 + 16;
          v527 = atomic_load((unsigned __int8 *)&qword_255788F58);
          if ((v527 & 1) != 0)
            goto LABEL_920;
        }
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)object);
          sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
LABEL_920:
        if (byte_255788F57 >= 0)
          v529 = (const char *)&xmmword_255788F40;
        else
          v529 = (const char *)xmmword_255788F40;
        if (byte_255788F57 >= 0)
          v530 = byte_255788F57;
        else
          v530 = *((_QWORD *)&xmmword_255788F40 + 1);
        *(_QWORD *)object = os_log_create(v529, v526);
        v531 = &object[8];
        if (v530 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v530 >= 0x17)
        {
          v532 = (v530 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v530 | 7) != 0x17)
            v532 = v530 | 7;
          v533 = v532 + 1;
          v531 = operator new(v532 + 1);
          *(_QWORD *)&object[24] = v533 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v531;
          *(_QWORD *)&object[16] = v530;
        }
        else
        {
          object[31] = v530;
          if (!v530)
          {
LABEL_934:
            v531[v530] = 0;
            object[32] = 1;
            v534 = &object[40];
            if (v525 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v525 >= 0x17)
            {
              v535 = (v525 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v525 | 7) != 0x17)
                v535 = v525 | 7;
              v536 = v535 + 1;
              v534 = operator new(v535 + 1);
              *(_QWORD *)&object[56] = v536 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v534;
              *(_QWORD *)&object[48] = v525;
            }
            else
            {
              object[63] = v525;
              if (!v525)
                goto LABEL_942;
            }
            memmove(v534, v526, v525);
LABEL_942:
            v534[v525] = 0;
            object[64] = 1;
            v537 = *(NSObject **)object;
            if ((object[63] & 0x80000000) != 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v522 && *(_QWORD *)(v522 + 24))
            {
              v538 = _os_log_pack_size();
              v539 = (std::__shared_weak_count_vtbl *)operator new(v538, (std::align_val_t)8uLL);
              v540 = (std::__shared_weak_count *)operator new();
              v541 = v540;
              v540->__shared_owners_ = 0;
              v542 = (unint64_t *)&v540->__shared_owners_;
              v540->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v540->__shared_weak_owners_ = 0;
              v540[1].__vftable = v539;
              *(_QWORD *)object = v539;
              *(_QWORD *)&object[8] = v539;
              *(_QWORD *)&object[16] = v540;
              do
                v543 = __ldxr(v542);
              while (__stxr(v543 + 1, v542));
              memset(&object[24], 0, 24);
              do
                v544 = __ldaxr(v542);
              while (__stlxr(v544 - 1, v542));
              if (!v544)
              {
                ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                std::__shared_weak_count::__release_weak(v541);
              }
              v545 = *(_QWORD *)object;
              v546 = (_DWORD *)_os_log_pack_fill();
              *v546 = 67109120;
              v546[1] = v1354;
              v547 = operator new();
              v548 = *((unsigned __int8 *)v523 + 39);
              if ((v548 & 0x80u) == 0)
                v549 = v524;
              else
                v549 = *((_QWORD *)v523 + 2);
              if ((v548 & 0x80u) != 0)
                v548 = *((_QWORD *)v523 + 3);
              *(_QWORD *)v547 = v545;
              *(_OWORD *)(v547 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v547 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v547 + 40) = v549;
              *(_QWORD *)(v547 + 48) = v548;
              *(_BYTE *)(v547 + 56) = 16;
              *(_QWORD *)__s = 0;
              *(_QWORD *)v1403 = v547;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v522 + 24) + 40))(*(_QWORD *)(v522 + 24), v1403);
              v550 = *(_QWORD *)v1403;
              *(_QWORD *)v1403 = 0;
              if (v550)
              {
                v551 = *(std::__shared_weak_count **)(v550 + 32);
                if (v551)
                {
                  v552 = (unint64_t *)&v551->__shared_owners_;
                  do
                    v553 = __ldaxr(v552);
                  while (__stlxr(v553 - 1, v552));
                  if (!v553)
                  {
                    ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
                    std::__shared_weak_count::__release_weak(v551);
                  }
                }
                v554 = *(std::__shared_weak_count **)(v550 + 16);
                if (v554)
                {
                  v555 = (unint64_t *)&v554->__shared_owners_;
                  do
                    v556 = __ldaxr(v555);
                  while (__stlxr(v556 - 1, v555));
                  if (!v556)
                  {
                    ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                    std::__shared_weak_count::__release_weak(v554);
                  }
                }
                MEMORY[0x227684CE8](v550, 0x10F0C40B62ED6C6);
                v557 = *(_QWORD *)__s;
                *(_QWORD *)__s = 0;
                if (v557)
                {
                  v558 = *(std::__shared_weak_count **)(v557 + 32);
                  if (v558)
                  {
                    v559 = (unint64_t *)&v558->__shared_owners_;
                    do
                      v560 = __ldaxr(v559);
                    while (__stlxr(v560 - 1, v559));
                    if (!v560)
                    {
                      ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
                      std::__shared_weak_count::__release_weak(v558);
                    }
                  }
                  v561 = *(std::__shared_weak_count **)(v557 + 16);
                  if (v561)
                  {
                    v562 = (unint64_t *)&v561->__shared_owners_;
                    do
                      v563 = __ldaxr(v562);
                    while (__stlxr(v563 - 1, v562));
                    if (!v563)
                    {
                      ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
                      std::__shared_weak_count::__release_weak(v561);
                    }
                  }
                  MEMORY[0x227684CE8](v557, 0x10F0C40B62ED6C6);
                }
              }
              v564 = *(std::__shared_weak_count **)&object[32];
              if (*(_QWORD *)&object[32])
              {
                v565 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v566 = __ldaxr(v565);
                while (__stlxr(v566 - 1, v565));
                if (!v566)
                {
                  ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
                  std::__shared_weak_count::__release_weak(v564);
                }
              }
              v567 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v568 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v569 = __ldaxr(v568);
                while (__stlxr(v569 - 1, v568));
                if (!v569)
                {
                  ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
                  std::__shared_weak_count::__release_weak(v567);
                }
              }
            }
            else
            {
              os_log_type_enabled(v537, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 67109120;
              *(_DWORD *)&object[4] = v1354;
              v570 = (void *)_os_log_send_and_compose_impl();
              if (v570)
                free(v570);
            }
            if (v520)
            {
              sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: keyframe planes inconsistent with number of global planes in the lookup (mismatch: %d)", v1354);
              sub_223182C08((uint64_t)&v1382);
            }
            sub_223182C08((uint64_t)&v1382);
            v571 = v1390;
            if (v1390)
            {
              v572 = (unint64_t *)&v1390->__shared_owners_;
              do
                v573 = __ldaxr(v572);
              while (__stlxr(v573 - 1, v572));
              if (!v573)
              {
                ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
                std::__shared_weak_count::__release_weak(v571);
              }
            }
            goto LABEL_1004;
          }
        }
        memmove(v531, v529, v530);
        goto LABEL_934;
      }
    }
    memmove(v475, v473, v474);
    goto LABEL_842;
  }
  if (v1354 >= 1)
    goto LABEL_913;
LABEL_1005:
  v574 = *(_QWORD *)(v1363 + 64);
  v1328 = *(_QWORD *)(v1363 + 72);
  if (v574 != v1328)
  {
    v1371 = 0;
    v1331 = 0;
    v1330 = 0;
    while (1)
    {
      v576 = *(unsigned __int8 **)(v574 + 16);
      v575 = *(unsigned __int8 **)(v574 + 24);
      v1355 = v574;
      v1361 = v575;
      while (v576 != v575)
      {
        v578 = *(unsigned __int8 **)(v1363 + 96);
        v577 = *(unsigned __int8 **)(v1363 + 104);
        if (v577 == v578)
          goto LABEL_1067;
        v579 = 0xCCCCCCCCCCCCCCCDLL * ((v577 - v578) >> 3);
        v580 = *v576;
        v581 = *(unsigned __int8 **)(v1363 + 96);
        v582 = v579;
        do
        {
          v583 = v582 >> 1;
          v584 = &v581[40 * (v582 >> 1)];
          v585 = *v584;
          v586 = *v576;
          if (v585 != v580)
            goto LABEL_1030;
          v585 = v584[1];
          v586 = v576[1];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[2];
          v586 = v576[2];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[3];
          v586 = v576[3];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[4];
          v586 = v576[4];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[5];
          v586 = v576[5];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[6];
          v586 = v576[6];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[7];
          v586 = v576[7];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[8];
          v586 = v576[8];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[9];
          v586 = v576[9];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[10];
          v586 = v576[10];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[11];
          v586 = v576[11];
          if (v585 != v586)
            goto LABEL_1030;
          v585 = v584[12];
          v586 = v576[12];
          if (v585 != v586
            || (v585 = v584[13], v586 = v576[13], v585 != v586)
            || (v585 = v584[14], v586 = v576[14], v585 != v586)
            || (v585 = v584[15], v586 = v576[15], v585 != v586))
          {
LABEL_1030:
            if (v585 < v586)
            {
              v583 = v582 + ~v583;
              v581 = v584 + 40;
            }
          }
          v582 = v583;
        }
        while (v583);
        if (v577 == v581)
        {
LABEL_1067:
          ++v1371;
          if (!*(_BYTE *)(a2 + 1))
            goto LABEL_1009;
          v592 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
          if ((v592 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
          {
            sub_22455F53C(&v1382);
            sub_223174DE4(object, "cv3dapi.recon3d");
            sub_2232300E0((uint64_t **)&v1382, (uint64_t)object, &qword_2540CACA8);
            if ((object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_guard_release(&qword_2540CACB0);
          }
          *(_QWORD *)v1397 = qword_2540CACA8;
          if (**(int **)(qword_2540CACA8 + 56) > 5)
            goto LABEL_1009;
          v593 = *(unsigned __int8 *)(qword_2540CACA8 + 72);
          v594 = sub_22322F254(qword_2540CACA8, "OSLogSurrogateAppender", 1, 0);
          v595 = v594;
          if (!v593 && v594 == 0)
            goto LABEL_1009;
          v1382 = (const char **)v1397;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v1384 = std::chrono::system_clock::now().__d_.__rep_;
          v1385 = 5;
          v1386 = "unknown file";
          v1387 = 229;
          v1388 = "unknown function";
          v1389 = 0;
          v1390 = 0;
          sub_2245664AC(v576, __src);
          sub_2245664AC((unsigned __int8 *)v1355, v1399);
          v1395 = v1399;
          v597 = *v1382;
          v598 = *v1382 + 16;
          v1337 = v598;
          if ((*v1382)[39] < 0)
          {
            v598 = (const char *)*((_QWORD *)v597 + 2);
            v599 = *((_QWORD *)v597 + 3);
            categorye = (char *)*v1382;
            v622 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v622 & 1) == 0)
            {
LABEL_1516:
              if (__cxa_guard_acquire(&qword_255788F58))
              {
                sub_224568628((uint64_t)v1403);
                sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
                if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1403);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                __cxa_guard_release(&qword_255788F58);
              }
            }
          }
          else
          {
            v599 = *((unsigned __int8 *)*v1382 + 39);
            categorye = (char *)*v1382;
            v600 = atomic_load((unsigned __int8 *)&qword_255788F58);
            if ((v600 & 1) == 0)
              goto LABEL_1516;
          }
          if (byte_255788F57 >= 0)
            v623 = (const char *)&xmmword_255788F40;
          else
            v623 = (const char *)xmmword_255788F40;
          if (byte_255788F57 >= 0)
            v624 = byte_255788F57;
          else
            v624 = *((_QWORD *)&xmmword_255788F40 + 1);
          *(_QWORD *)object = os_log_create(v623, v598);
          if (v624 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v624 >= 0x17)
          {
            v626 = (v624 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v624 | 7) != 0x17)
              v626 = v624 | 7;
            v627 = v626 + 1;
            v625 = operator new(v626 + 1);
            *(_QWORD *)&object[24] = v627 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v625;
            *(_QWORD *)&object[16] = v624;
          }
          else
          {
            object[31] = v624;
            v625 = &object[8];
            if (!v624)
            {
LABEL_1157:
              v625[v624] = 0;
              object[32] = 1;
              if (v599 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v599 >= 0x17)
              {
                v630 = (v599 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v599 | 7) != 0x17)
                  v630 = v599 | 7;
                v631 = v630 + 1;
                v628 = operator new(v630 + 1);
                *(_QWORD *)&object[56] = v631 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v628;
                *(_QWORD *)&object[48] = v599;
              }
              else
              {
                object[63] = v599;
                v628 = &object[40];
                if (!v599)
                {
                  object[40] = 0;
                  object[64] = 1;
                  v629 = *(NSObject **)object;
                  if ((object[63] & 0x80000000) == 0)
                    goto LABEL_1161;
LABEL_1167:
                  operator delete(*(void **)&object[40]);
                  if (object[32])
                    goto LABEL_1168;
                  goto LABEL_1170;
                }
              }
              memmove(v628, v598, v599);
              v628[v599] = 0;
              object[64] = 1;
              v629 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                goto LABEL_1167;
LABEL_1161:
              if (object[32])
              {
LABEL_1168:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_1170:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v595 && *(_QWORD *)(v595 + 24))
              {
                v632 = _os_log_pack_size();
                v633 = (std::__shared_weak_count_vtbl *)operator new(v632, (std::align_val_t)8uLL);
                v634 = (std::__shared_weak_count *)operator new();
                v634->__shared_owners_ = 0;
                v635 = (unint64_t *)&v634->__shared_owners_;
                v634->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                v634->__shared_weak_owners_ = 0;
                v634[1].__vftable = v633;
                *(_QWORD *)__s = v633;
                *(_QWORD *)&__s[8] = v633;
                v1407 = v634;
                v1408 = 0;
                v1409 = 0;
                sub_223446F28((uint64_t)object, __src, (const char **)&v1395);
                v636 = (char *)operator new(0x50uLL);
                v637 = (std::__shared_weak_count *)v636;
                *((_QWORD *)v636 + 1) = 0;
                v638 = (unint64_t *)(v636 + 8);
                *((_QWORD *)v636 + 2) = 0;
                *(_QWORD *)v636 = &off_24EC20730;
                *((_QWORD *)v636 + 3) = off_24EC20780;
                *((_OWORD *)v636 + 2) = *(_OWORD *)&object[8];
                *((_QWORD *)v636 + 6) = *(_QWORD *)&object[24];
                *(_OWORD *)(v636 + 56) = *(_OWORD *)&object[32];
                *((_QWORD *)v636 + 9) = *(_QWORD *)&object[48];
                v1408 = v636 + 24;
                v1409 = (std::__shared_weak_count *)v636;
                *(_QWORD *)v1403 = v633;
                *(_QWORD *)&v1403[8] = v633;
                *(_QWORD *)&v1403[16] = v634;
                do
                  v639 = __ldxr(v635);
                while (__stxr(v639 + 1, v635));
                *(_QWORD *)&v1404 = v636 + 24;
                *((_QWORD *)&v1404 + 1) = v636;
                do
                  v640 = __ldxr(v638);
                while (__stxr(v640 + 1, v638));
                v1405 = v636 + 24;
                do
                  v641 = __ldaxr(v638);
                while (__stlxr(v641 - 1, v638));
                if (v641)
                {
                  v642 = v1407;
                  if (!v1407)
                    goto LABEL_1197;
                }
                else
                {
                  (*(void (**)(char *))(*(_QWORD *)v636 + 16))(v636);
                  std::__shared_weak_count::__release_weak(v637);
                  v642 = v1407;
                  if (!v1407)
                    goto LABEL_1197;
                }
                v651 = (unint64_t *)&v642->__shared_owners_;
                do
                  v652 = __ldaxr(v651);
                while (__stlxr(v652 - 1, v651));
                if (!v652)
                {
                  ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                  std::__shared_weak_count::__release_weak(v642);
                }
LABEL_1197:
                v653 = *(_QWORD *)v1403;
                if (v1405[31] >= 0)
                  v654 = v1405 + 8;
                else
                  v654 = (char *)*((_QWORD *)v1405 + 1);
                if (v1405[55] >= 0)
                  v655 = v1405 + 32;
                else
                  v655 = (char *)*((_QWORD *)v1405 + 4);
                v656 = _os_log_pack_fill();
                *(_DWORD *)v656 = 68158466;
                *(_DWORD *)(v656 + 4) = 13;
                *(_WORD *)(v656 + 8) = 2080;
                *(_QWORD *)(v656 + 10) = v654;
                *(_WORD *)(v656 + 18) = 1040;
                *(_DWORD *)(v656 + 20) = 13;
                *(_WORD *)(v656 + 24) = 2080;
                *(_QWORD *)(v656 + 26) = v655;
                v657 = operator new();
                v658 = categorye[39];
                v659 = v1337;
                if ((v658 & 0x80u) != 0)
                {
                  v659 = (const char *)*((_QWORD *)categorye + 2);
                  v658 = *((_QWORD *)categorye + 3);
                }
                *(_QWORD *)v657 = v653;
                *(_OWORD *)(v657 + 8) = *(_OWORD *)&v1403[8];
                *(_QWORD *)&v1403[8] = 0;
                *(_QWORD *)&v1403[16] = 0;
                *(_OWORD *)(v657 + 24) = v1404;
                v1404 = 0uLL;
                *(_QWORD *)(v657 + 40) = v659;
                *(_QWORD *)(v657 + 48) = v658;
                *(_BYTE *)(v657 + 56) = 16;
                *(_QWORD *)__s = 0;
                *(_QWORD *)object = v657;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v595 + 24) + 40))(*(_QWORD *)(v595 + 24), object);
                v660 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v660)
                {
                  v661 = *(std::__shared_weak_count **)(v660 + 32);
                  if (!v661)
                    goto LABEL_1210;
                  v662 = (unint64_t *)&v661->__shared_owners_;
                  do
                    v663 = __ldaxr(v662);
                  while (__stlxr(v663 - 1, v662));
                  if (!v663)
                  {
                    ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
                    std::__shared_weak_count::__release_weak(v661);
                    v664 = *(std::__shared_weak_count **)(v660 + 16);
                    if (v664)
                    {
LABEL_1211:
                      v665 = (unint64_t *)&v664->__shared_owners_;
                      do
                        v666 = __ldaxr(v665);
                      while (__stlxr(v666 - 1, v665));
                      if (!v666)
                      {
                        ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
                        std::__shared_weak_count::__release_weak(v664);
                      }
                    }
                  }
                  else
                  {
LABEL_1210:
                    v664 = *(std::__shared_weak_count **)(v660 + 16);
                    if (v664)
                      goto LABEL_1211;
                  }
                  MEMORY[0x227684CE8](v660, 0x10F0C40B62ED6C6);
                  v667 = *(_QWORD *)__s;
                  *(_QWORD *)__s = 0;
                  if (v667)
                  {
                    v668 = *(std::__shared_weak_count **)(v667 + 32);
                    if (!v668)
                      goto LABEL_1221;
                    v669 = (unint64_t *)&v668->__shared_owners_;
                    do
                      v670 = __ldaxr(v669);
                    while (__stlxr(v670 - 1, v669));
                    if (!v670)
                    {
                      ((void (*)(std::__shared_weak_count *))v668->__on_zero_shared)(v668);
                      std::__shared_weak_count::__release_weak(v668);
                      v671 = *(std::__shared_weak_count **)(v667 + 16);
                      if (v671)
                      {
LABEL_1222:
                        v672 = (unint64_t *)&v671->__shared_owners_;
                        do
                          v673 = __ldaxr(v672);
                        while (__stlxr(v673 - 1, v672));
                        if (!v673)
                        {
                          ((void (*)(std::__shared_weak_count *))v671->__on_zero_shared)(v671);
                          std::__shared_weak_count::__release_weak(v671);
                        }
                      }
                    }
                    else
                    {
LABEL_1221:
                      v671 = *(std::__shared_weak_count **)(v667 + 16);
                      if (v671)
                        goto LABEL_1222;
                    }
                    MEMORY[0x227684CE8](v667, 0x10F0C40B62ED6C6);
                  }
                }
                v674 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
                if (!*((_QWORD *)&v1404 + 1))
                  goto LABEL_1232;
                v675 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
                do
                  v676 = __ldaxr(v675);
                while (__stlxr(v676 - 1, v675));
                if (!v676)
                {
                  ((void (*)(std::__shared_weak_count *))v674->__on_zero_shared)(v674);
                  std::__shared_weak_count::__release_weak(v674);
                  v677 = *(std::__shared_weak_count **)&v1403[16];
                  if (*(_QWORD *)&v1403[16])
                  {
LABEL_1233:
                    v678 = (unint64_t *)&v677->__shared_owners_;
                    do
                      v679 = __ldaxr(v678);
                    while (__stlxr(v679 - 1, v678));
                    if (!v679)
                    {
                      ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
                      std::__shared_weak_count::__release_weak(v677);
                    }
                  }
                }
                else
                {
LABEL_1232:
                  v677 = *(std::__shared_weak_count **)&v1403[16];
                  if (*(_QWORD *)&v1403[16])
                    goto LABEL_1233;
                }
              }
              else
              {
                os_log_type_enabled(v629, OS_LOG_TYPE_ERROR);
                *(_QWORD *)object = 0xD04100402;
                *(_WORD *)&object[8] = 2080;
                *(_QWORD *)&object[10] = __src;
                *(_WORD *)&object[18] = 1040;
                *(_DWORD *)&object[20] = 13;
                *(_WORD *)&object[24] = 2080;
                *(_QWORD *)&object[26] = v1395;
                v643 = (void *)_os_log_send_and_compose_impl();
                if (v643)
                  free(v643);
              }
              if (v593)
              {
                sub_2245664AC(v576, object);
                sub_2245664AC((unsigned __int8 *)v1355, v1403);
                sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kf %.13s referenced in gp %.13s lookup missing from kf lookup", object, v1403);
                sub_223182C08((uint64_t)&v1382);
              }
              sub_223182C08((uint64_t)&v1382);
              v680 = v1390;
              if (v1390)
              {
                v681 = (unint64_t *)&v1390->__shared_owners_;
                do
                  v682 = __ldaxr(v681);
                while (__stlxr(v682 - 1, v681));
                if (!v682)
                  goto LABEL_1507;
              }
              goto LABEL_1009;
            }
          }
          memmove(v625, v623, v624);
          goto LABEL_1157;
        }
        v587 = *v581;
        v588 = v587 >= v580;
        if (v587 != v580)
        {
          v589 = *v576;
LABEL_1064:
          if (!v588)
            goto LABEL_1067;
LABEL_1066:
          if (v589 < v587)
            goto LABEL_1067;
          goto LABEL_1078;
        }
        v587 = v581[1];
        v589 = v576[1];
        v588 = v587 >= v589;
        if (v587 != v589)
          goto LABEL_1064;
        v587 = v581[2];
        v589 = v576[2];
        v588 = v587 >= v589;
        if (v587 != v589)
          goto LABEL_1064;
        v587 = v581[3];
        v589 = v576[3];
        v588 = v587 >= v589;
        if (v587 != v589)
          goto LABEL_1064;
        v590 = v581[4];
        v591 = v576[4];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[5];
        v591 = v576[5];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[6];
        v591 = v576[6];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[7];
        v591 = v576[7];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[8];
        v591 = v576[8];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[9];
        v591 = v576[9];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[10];
        v591 = v576[10];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[11];
        v591 = v576[11];
        if (v590 != v591)
          goto LABEL_1049;
        v590 = v581[12];
        v591 = v576[12];
        if (v590 != v591
          || (v590 = v581[13], v591 = v576[13], v590 != v591)
          || (v590 = v581[14], v591 = v576[14], v590 != v591)
          || (v590 = v581[15], v591 = v576[15], v590 != v591))
        {
LABEL_1049:
          if (v590 < v591)
            goto LABEL_1067;
        }
        v589 = v576[4];
        v587 = v581[4];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[5];
        v587 = v581[5];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[6];
        v587 = v581[6];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[7];
        v587 = v581[7];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[8];
        v587 = v581[8];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[9];
        v587 = v581[9];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[10];
        v587 = v581[10];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[11];
        v587 = v581[11];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[12];
        v587 = v581[12];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[13];
        v587 = v581[13];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[14];
        v587 = v581[14];
        if (v589 != v587)
          goto LABEL_1066;
        v589 = v576[15];
        v587 = v581[15];
        if (v589 != v587)
          goto LABEL_1066;
        do
        {
LABEL_1078:
          v601 = v579 >> 1;
          v602 = &v578[40 * (v579 >> 1)];
          v603 = *v602;
          v604 = *v576;
          if (v603 != v580)
            goto LABEL_1094;
          v603 = v602[1];
          v604 = v576[1];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[2];
          v604 = v576[2];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[3];
          v604 = v576[3];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[4];
          v604 = v576[4];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[5];
          v604 = v576[5];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[6];
          v604 = v576[6];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[7];
          v604 = v576[7];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[8];
          v604 = v576[8];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[9];
          v604 = v576[9];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[10];
          v604 = v576[10];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[11];
          v604 = v576[11];
          if (v603 != v604)
            goto LABEL_1094;
          v603 = v602[12];
          v604 = v576[12];
          if (v603 != v604
            || (v603 = v602[13], v604 = v576[13], v603 != v604)
            || (v603 = v602[14], v604 = v576[14], v603 != v604)
            || (v603 = v602[15], v604 = v576[15], v603 != v604))
          {
LABEL_1094:
            if (v603 < v604)
            {
              v601 = v579 + ~v601;
              v578 = v602 + 40;
            }
          }
          v579 = v601;
        }
        while (v601);
        if (v577 == v578)
        {
LABEL_2440:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_22342F2E4("FlatMap::at:  key not found (", v576, (uint64_t)")");
          std::logic_error::logic_error(exception, (const std::string *)object);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24EC1E390, MEMORY[0x24BEDAB00]);
        }
        v605 = *v578;
        v606 = v605 >= v580;
        if (v605 != v580)
          goto LABEL_1127;
        v605 = v578[1];
        v580 = v576[1];
        v606 = v605 >= v580;
        if (v605 != v580
          || (v605 = v578[2], v580 = v576[2], v606 = v605 >= v580, v605 != v580)
          || (v605 = v578[3], v580 = v576[3], v606 = v605 >= v580, v605 != v580))
        {
LABEL_1127:
          if (!v606)
            goto LABEL_2440;
LABEL_1129:
          if (v580 < v605)
            goto LABEL_2440;
          goto LABEL_1130;
        }
        v607 = v578[4];
        v608 = v576[4];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[5];
        v608 = v576[5];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[6];
        v608 = v576[6];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[7];
        v608 = v576[7];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[8];
        v608 = v576[8];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[9];
        v608 = v576[9];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[10];
        v608 = v576[10];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[11];
        v608 = v576[11];
        if (v607 != v608)
          goto LABEL_1113;
        v607 = v578[12];
        v608 = v576[12];
        if (v607 != v608
          || (v607 = v578[13], v608 = v576[13], v607 != v608)
          || (v607 = v578[14], v608 = v576[14], v607 != v608)
          || (v607 = v578[15], v608 = v576[15], v607 != v608))
        {
LABEL_1113:
          if (v607 < v608)
            goto LABEL_2440;
        }
        v580 = v576[4];
        v605 = v578[4];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[5];
        v605 = v578[5];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[6];
        v605 = v578[6];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[7];
        v605 = v578[7];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[8];
        v605 = v578[8];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[9];
        v605 = v578[9];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[10];
        v605 = v578[10];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[11];
        v605 = v578[11];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[12];
        v605 = v578[12];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[13];
        v605 = v578[13];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[14];
        v605 = v578[14];
        if (v580 != v605)
          goto LABEL_1129;
        v580 = v576[15];
        v605 = v578[15];
        if (v580 != v605)
          goto LABEL_1129;
LABEL_1130:
        v609 = *((_QWORD *)v578 + 2);
        v610 = *((unsigned int *)v576 + 4);
        if (v610 >= (*((_QWORD *)v578 + 3) - v609) >> 4)
        {
          ++v1331;
          if (*(_BYTE *)(a2 + 1))
          {
            v644 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
            if ((v644 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
            {
              sub_22455F53C(&v1382);
              sub_223174DE4(object, "cv3dapi.recon3d");
              sub_2232300E0((uint64_t **)&v1382, (uint64_t)object, &qword_2540CACA8);
              if ((object[23] & 0x80000000) != 0)
                operator delete(*(void **)object);
              __cxa_guard_release(&qword_2540CACB0);
            }
            v1393 = (char *)qword_2540CACA8;
            if (**(int **)(qword_2540CACA8 + 56) <= 5)
            {
              v645 = *(unsigned __int8 *)(qword_2540CACA8 + 72);
              v646 = sub_22322F254(qword_2540CACA8, "OSLogSurrogateAppender", 1, 0);
              v647 = v646;
              if (v645 || v646)
              {
                v1382 = (const char **)&v1393;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v1384 = std::chrono::system_clock::now().__d_.__rep_;
                v1385 = 5;
                v1386 = "unknown file";
                v1387 = 242;
                v1388 = "unknown function";
                v1389 = 0;
                v1390 = 0;
                sub_2245664AC((unsigned __int8 *)v1355, __src);
                sub_2245664AC(v576, v1399);
                v1325 = v645;
                v648 = *v1382;
                v649 = *v1382 + 16;
                v1319 = v649;
                if ((*v1382)[39] < 0)
                {
                  v649 = (const char *)*((_QWORD *)v648 + 2);
                  v650 = *((_QWORD *)v648 + 3);
                }
                else
                {
                  v650 = *((unsigned __int8 *)*v1382 + 39);
                }
                v1321 = *v1382;
                categoryg = (char *)*((_QWORD *)v578 + 3);
                v1339 = *((_QWORD *)v578 + 2);
                v683 = atomic_load((unsigned __int8 *)&qword_255788F58);
                if ((v683 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
                {
                  sub_224568628((uint64_t)v1403);
                  sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
                  if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1403);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                  __cxa_guard_release(&qword_255788F58);
                }
                if (byte_255788F57 >= 0)
                  v684 = (const char *)&xmmword_255788F40;
                else
                  v684 = (const char *)xmmword_255788F40;
                if (byte_255788F57 >= 0)
                  v685 = byte_255788F57;
                else
                  v685 = *((_QWORD *)&xmmword_255788F40 + 1);
                *(_QWORD *)object = os_log_create(v684, v649);
                if (v685 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v685 >= 0x17)
                {
                  v687 = (v685 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v685 | 7) != 0x17)
                    v687 = v685 | 7;
                  v688 = v687 + 1;
                  v686 = operator new(v687 + 1);
                  *(_QWORD *)&object[24] = v688 | 0x8000000000000000;
                  *(_QWORD *)&object[8] = v686;
                  *(_QWORD *)&object[16] = v685;
                }
                else
                {
                  object[31] = v685;
                  v686 = &object[8];
                  if (!v685)
                  {
LABEL_1261:
                    v686[v685] = 0;
                    object[32] = 1;
                    if (v650 > 0x7FFFFFFFFFFFFFF7)
                      sub_22316DBC0();
                    v689 = v647;
                    if (v650 >= 0x17)
                    {
                      v692 = (v650 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v650 | 7) != 0x17)
                        v692 = v650 | 7;
                      v693 = v692 + 1;
                      v690 = operator new(v692 + 1);
                      *(_QWORD *)&object[56] = v693 | 0x8000000000000000;
                      *(_QWORD *)&object[40] = v690;
                      *(_QWORD *)&object[48] = v650;
                    }
                    else
                    {
                      object[63] = v650;
                      v690 = &object[40];
                      if (!v650)
                      {
                        object[40] = 0;
                        object[64] = 1;
                        v691 = *(NSObject **)object;
                        if ((object[63] & 0x80000000) == 0)
                          goto LABEL_1265;
LABEL_1271:
                        operator delete(*(void **)&object[40]);
                        if (object[32])
                          goto LABEL_1272;
                        goto LABEL_1274;
                      }
                    }
                    memmove(v690, v649, v650);
                    v690[v650] = 0;
                    object[64] = 1;
                    v691 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) != 0)
                      goto LABEL_1271;
LABEL_1265:
                    if (object[32])
                    {
LABEL_1272:
                      if ((object[31] & 0x80000000) != 0)
                        operator delete(*(void **)&object[8]);
                    }
LABEL_1274:
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (v647 && *(_QWORD *)(v647 + 24))
                    {
                      v694 = _os_log_pack_size();
                      v695 = (std::__shared_weak_count_vtbl *)operator new(v694, (std::align_val_t)8uLL);
                      v696 = (std::__shared_weak_count *)operator new();
                      v696->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                      v696->__shared_owners_ = 0;
                      v696->__shared_weak_owners_ = 0;
                      v696[1].__vftable = v695;
                      *(_QWORD *)__s = v695;
                      *(_QWORD *)&__s[8] = v695;
                      v1407 = v696;
                      v1408 = 0;
                      v1409 = 0;
                      v697 = strlen(__src);
                      if (v697 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v698 = v697;
                      if (v697 >= 0x17)
                      {
                        v722 = (v697 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v697 | 7) != 0x17)
                          v722 = v697 | 7;
                        v723 = v722 + 1;
                        v699 = operator new(v722 + 1);
                        *((_QWORD *)&v1398[0] + 1) = v723 | 0x8000000000000000;
                        *(_QWORD *)v1397 = v699;
                        *(_QWORD *)&v1398[0] = v698;
                      }
                      else
                      {
                        HIBYTE(v1398[0]) = v697;
                        v699 = v1397;
                        if (!v697)
                        {
LABEL_1328:
                          v699[v698] = 0;
                          v724 = strlen(v1399);
                          if (v724 > 0x7FFFFFFFFFFFFFF7)
                            sub_22316DBC0();
                          v725 = v724;
                          if (v724 >= 0x17)
                          {
                            v727 = (v724 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v724 | 7) != 0x17)
                              v727 = v724 | 7;
                            v728 = v727 + 1;
                            v726 = (char *)operator new(v727 + 1);
                            *((_QWORD *)&v1396 + 1) = v728 | 0x8000000000000000;
                            v1395 = v726;
                            *(_QWORD *)&v1396 = v725;
                          }
                          else
                          {
                            HIBYTE(v1396) = v724;
                            v726 = (char *)&v1395;
                            if (!v724)
                              goto LABEL_1336;
                          }
                          memcpy(v726, v1399, v725);
LABEL_1336:
                          v726[v725] = 0;
                          *(_QWORD *)&object[16] = *(_QWORD *)&v1398[0];
                          *(_QWORD *)&object[23] = *(_QWORD *)((char *)v1398 + 7);
                          *(_QWORD *)&object[40] = v1396;
                          *(_QWORD *)&object[47] = *(_QWORD *)((char *)&v1396 + 7);
                          *(_QWORD *)object = off_24EC37128;
                          *(_QWORD *)&object[8] = *(_QWORD *)v1397;
                          object[31] = HIBYTE(v1398[0]);
                          *(_QWORD *)&object[32] = v1395;
                          object[55] = HIBYTE(v1396);
                          v729 = (char *)operator new(0x58uLL);
                          *((_QWORD *)v729 + 1) = 0;
                          *((_QWORD *)v729 + 2) = 0;
                          *((_QWORD *)v729 + 3) = off_24EC37128;
                          *(_QWORD *)v729 = &off_24EC370D8;
                          *((_OWORD *)v729 + 2) = *(_OWORD *)&object[8];
                          *((_QWORD *)v729 + 6) = *(_QWORD *)&object[24];
                          memset(&object[8], 0, 24);
                          *(_OWORD *)(v729 + 56) = *(_OWORD *)&object[32];
                          *((_QWORD *)v729 + 9) = *(_QWORD *)&object[48];
                          memset(&object[32], 0, 24);
                          v730 = v1409;
                          v1408 = v729 + 24;
                          v1409 = (std::__shared_weak_count *)v729;
                          if (!v730)
                            goto LABEL_1340;
                          v731 = (unint64_t *)&v730->__shared_owners_;
                          do
                            v732 = __ldaxr(v731);
                          while (__stlxr(v732 - 1, v731));
                          if (v732)
                          {
LABEL_1340:
                            if ((object[55] & 0x80000000) == 0)
                              goto LABEL_1341;
LABEL_1374:
                            operator delete(*(void **)&object[32]);
                            if ((object[31] & 0x80000000) != 0)
                              goto LABEL_1375;
LABEL_1342:
                            *(_OWORD *)v1403 = *(_OWORD *)__s;
                            v734 = v1407;
                            v733 = v1408;
                            *(_QWORD *)&v1403[16] = v1407;
                            if (!v1407)
                              goto LABEL_1378;
LABEL_1376:
                            v754 = (unint64_t *)&v734->__shared_owners_;
                            do
                              v755 = __ldxr(v754);
                            while (__stxr(v755 + 1, v754));
                            goto LABEL_1378;
                          }
                          ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
                          std::__shared_weak_count::__release_weak(v730);
                          if ((object[55] & 0x80000000) != 0)
                            goto LABEL_1374;
LABEL_1341:
                          if ((object[31] & 0x80000000) == 0)
                            goto LABEL_1342;
LABEL_1375:
                          operator delete(*(void **)&object[8]);
                          *(_OWORD *)v1403 = *(_OWORD *)__s;
                          v734 = v1407;
                          v733 = v1408;
                          *(_QWORD *)&v1403[16] = v1407;
                          if (v1407)
                            goto LABEL_1376;
LABEL_1378:
                          v756 = v1409;
                          *(_QWORD *)&v1404 = v733;
                          *((_QWORD *)&v1404 + 1) = v1409;
                          if (v1409)
                          {
                            v757 = (unint64_t *)&v1409->__shared_owners_;
                            do
                              v758 = __ldxr(v757);
                            while (__stxr(v758 + 1, v757));
                            v1405 = v733;
                            do
                              v759 = __ldaxr(v757);
                            while (__stlxr(v759 - 1, v757));
                            if (!v759)
                            {
                              ((void (*)(std::__shared_weak_count *))v756->__on_zero_shared)(v756);
                              std::__shared_weak_count::__release_weak(v756);
                            }
                          }
                          else
                          {
                            v1405 = v733;
                          }
                          v760 = v1407;
                          if (v1407)
                          {
                            v761 = (unint64_t *)&v1407->__shared_owners_;
                            do
                              v762 = __ldaxr(v761);
                            while (__stlxr(v762 - 1, v761));
                            if (!v762)
                            {
                              ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
                              std::__shared_weak_count::__release_weak(v760);
                            }
                          }
                          v763 = *(_QWORD *)v1403;
                          if (v1405[31] >= 0)
                            v764 = v1405 + 8;
                          else
                            v764 = (char *)*((_QWORD *)v1405 + 1);
                          if (v1405[55] >= 0)
                            v765 = v1405 + 32;
                          else
                            v765 = (char *)*((_QWORD *)v1405 + 4);
                          v766 = _os_log_pack_fill();
                          v767 = *((_DWORD *)v576 + 4);
                          *(_DWORD *)v766 = 68158978;
                          *(_DWORD *)(v766 + 4) = 13;
                          *(_WORD *)(v766 + 8) = 2080;
                          *(_QWORD *)(v766 + 10) = v764;
                          *(_WORD *)(v766 + 18) = 1040;
                          *(_DWORD *)(v766 + 20) = 13;
                          *(_WORD *)(v766 + 24) = 2080;
                          *(_QWORD *)(v766 + 26) = v765;
                          *(_WORD *)(v766 + 34) = 1024;
                          *(_DWORD *)(v766 + 36) = v767;
                          *(_WORD *)(v766 + 40) = 2048;
                          *(_QWORD *)(v766 + 42) = (uint64_t)&categoryg[-v1339] >> 4;
                          v768 = operator new();
                          v769 = *((unsigned __int8 *)v1321 + 39);
                          v770 = v1319;
                          if ((v769 & 0x80u) != 0)
                          {
                            v770 = (const char *)*((_QWORD *)v1321 + 2);
                            v769 = *((_QWORD *)v1321 + 3);
                          }
                          *(_QWORD *)v768 = v763;
                          *(_OWORD *)(v768 + 8) = *(_OWORD *)&v1403[8];
                          *(_QWORD *)&v1403[8] = 0;
                          *(_QWORD *)&v1403[16] = 0;
                          *(_OWORD *)(v768 + 24) = v1404;
                          v1404 = 0uLL;
                          *(_QWORD *)(v768 + 40) = v770;
                          *(_QWORD *)(v768 + 48) = v769;
                          *(_BYTE *)(v768 + 56) = 16;
                          *(_QWORD *)__s = 0;
                          *(_QWORD *)object = v768;
                          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v689 + 24) + 40))(*(_QWORD *)(v689 + 24), object);
                          v771 = *(_QWORD *)object;
                          *(_QWORD *)object = 0;
                          if (v771)
                          {
                            v772 = *(std::__shared_weak_count **)(v771 + 32);
                            if (v772)
                            {
                              v773 = (unint64_t *)&v772->__shared_owners_;
                              do
                                v774 = __ldaxr(v773);
                              while (__stlxr(v774 - 1, v773));
                              if (!v774)
                              {
                                ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                                std::__shared_weak_count::__release_weak(v772);
                              }
                            }
                            v775 = *(std::__shared_weak_count **)(v771 + 16);
                            if (v775)
                            {
                              v776 = (unint64_t *)&v775->__shared_owners_;
                              do
                                v777 = __ldaxr(v776);
                              while (__stlxr(v777 - 1, v776));
                              if (!v777)
                              {
                                ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
                                std::__shared_weak_count::__release_weak(v775);
                              }
                            }
                            MEMORY[0x227684CE8](v771, 0x10F0C40B62ED6C6);
                            v778 = *(_QWORD *)__s;
                            *(_QWORD *)__s = 0;
                            if (v778)
                            {
                              v779 = *(std::__shared_weak_count **)(v778 + 32);
                              if (v779)
                              {
                                v780 = (unint64_t *)&v779->__shared_owners_;
                                do
                                  v781 = __ldaxr(v780);
                                while (__stlxr(v781 - 1, v780));
                                if (!v781)
                                {
                                  ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
                                  std::__shared_weak_count::__release_weak(v779);
                                }
                              }
                              v782 = *(std::__shared_weak_count **)(v778 + 16);
                              if (v782)
                              {
                                v783 = (unint64_t *)&v782->__shared_owners_;
                                do
                                  v784 = __ldaxr(v783);
                                while (__stlxr(v784 - 1, v783));
                                if (!v784)
                                {
                                  ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
                                  std::__shared_weak_count::__release_weak(v782);
                                }
                              }
                              MEMORY[0x227684CE8](v778, 0x10F0C40B62ED6C6);
                            }
                          }
                          v785 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
                          if (*((_QWORD *)&v1404 + 1))
                          {
                            v786 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
                            do
                              v787 = __ldaxr(v786);
                            while (__stlxr(v787 - 1, v786));
                            if (!v787)
                            {
                              ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
                              std::__shared_weak_count::__release_weak(v785);
                              v788 = *(std::__shared_weak_count **)&v1403[16];
                              if (*(_QWORD *)&v1403[16])
                                goto LABEL_1427;
                              goto LABEL_1430;
                            }
                          }
                          v788 = *(std::__shared_weak_count **)&v1403[16];
                          if (!*(_QWORD *)&v1403[16])
                            goto LABEL_1430;
LABEL_1427:
                          v789 = (unint64_t *)&v788->__shared_owners_;
                          do
                            v790 = __ldaxr(v789);
                          while (__stlxr(v790 - 1, v789));
                          if (v790)
                          {
LABEL_1430:
                            if (v1325)
                              goto LABEL_1431;
LABEL_1432:
                            sub_223182C08((uint64_t)&v1382);
                            v680 = v1390;
                            if (!v1390)
                              goto LABEL_1009;
                            v791 = (unint64_t *)&v1390->__shared_owners_;
                            do
                              v792 = __ldaxr(v791);
                            while (__stlxr(v792 - 1, v791));
LABEL_1506:
                            if (v792)
                              goto LABEL_1009;
LABEL_1507:
                            ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
                            std::__shared_weak_count::__release_weak(v680);
                            goto LABEL_1009;
                          }
                          ((void (*)(std::__shared_weak_count *))v788->__on_zero_shared)(v788);
                          std::__shared_weak_count::__release_weak(v788);
                          if (!v1325)
                            goto LABEL_1432;
LABEL_1431:
                          sub_2245664AC((unsigned __int8 *)v1355, object);
                          sub_2245664AC(v576, v1403);
                          sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gp %.13s lookup reference kf %.13s, index %u; this is oob, as kf has "
                            "only %zu segments",
                            object,
                            v1403,
                            *((_DWORD *)v576 + 4),
                            (uint64_t)(*((_QWORD *)v578 + 3) - *((_QWORD *)v578 + 2)) >> 4);
                          sub_223182C08((uint64_t)&v1382);
                          goto LABEL_1432;
                        }
                      }
                      memcpy(v699, __src, v698);
                      goto LABEL_1328;
                    }
                    os_log_type_enabled(v691, OS_LOG_TYPE_ERROR);
                    v700 = *((_DWORD *)v576 + 4);
                    *(_QWORD *)object = 0xD04100602;
                    *(_WORD *)&object[8] = 2080;
                    *(_QWORD *)&object[10] = __src;
                    *(_WORD *)&object[18] = 1040;
                    *(_DWORD *)&object[20] = 13;
                    *(_WORD *)&object[24] = 2080;
                    *(_QWORD *)&object[26] = v1399;
                    *(_WORD *)&object[34] = 1024;
                    *(_DWORD *)&object[36] = v700;
                    *(_WORD *)&object[40] = 2048;
                    *(_QWORD *)&object[42] = (uint64_t)&categoryg[-v1339] >> 4;
                    v701 = (void *)_os_log_send_and_compose_impl();
                    if (!v701)
                      goto LABEL_1430;
                    free(v701);
                    if (!v1325)
                      goto LABEL_1432;
                    goto LABEL_1431;
                  }
                }
                memmove(v686, v684, v685);
                goto LABEL_1261;
              }
            }
          }
        }
        else
        {
          v611 = (uint64_t *)(v609 + 16 * v610);
          v613 = *v611;
          v612 = v611[1];
          if (v613 != *(_QWORD *)v1355 || v612 != *(_QWORD *)(v1355 + 8))
          {
            ++v1330;
            if (*(_BYTE *)(a2 + 1))
            {
              sub_223446D5C(&v1381);
              if (**(int **)(v1381 + 56) <= 5)
              {
                v615 = *(unsigned __int8 *)(v1381 + 72);
                v616 = sub_22322F254(v1381, "OSLogSurrogateAppender", 1, 0);
                v617 = (char *)v616;
                if (v615 || v616)
                {
                  v1382 = (const char **)&v1381;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v1384 = std::chrono::system_clock::now().__d_.__rep_;
                  v1385 = 5;
                  v1386 = "unknown file";
                  v1387 = 251;
                  v1388 = "unknown function";
                  v1389 = 0;
                  v1390 = 0;
                  sub_2245664AC((unsigned __int8 *)v1355, __src);
                  categoryf = v617;
                  sub_2245664AC(v576, v1399);
                  sub_2245664AC((unsigned __int8 *)(*((_QWORD *)v578 + 2) + 16 * *((unsigned int *)v576 + 4)), v1397);
                  v618 = *v1382;
                  v619 = *v1382 + 16;
                  v1324 = v619;
                  if ((*v1382)[39] < 0)
                  {
                    v619 = (const char *)*((_QWORD *)v618 + 2);
                    v620 = *((_QWORD *)v618 + 3);
                    v1338 = *v1382;
                    v702 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v702 & 1) == 0)
                    {
LABEL_1530:
                      if (__cxa_guard_acquire(&qword_255788F58))
                      {
                        sub_224568628((uint64_t)v1403);
                        sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
                        if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
                          operator delete(*(void **)v1403);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
                        __cxa_guard_release(&qword_255788F58);
                      }
                    }
                  }
                  else
                  {
                    v620 = *((unsigned __int8 *)*v1382 + 39);
                    v1338 = *v1382;
                    v621 = atomic_load((unsigned __int8 *)&qword_255788F58);
                    if ((v621 & 1) == 0)
                      goto LABEL_1530;
                  }
                  if (byte_255788F57 >= 0)
                    v703 = (const char *)&xmmword_255788F40;
                  else
                    v703 = (const char *)xmmword_255788F40;
                  if (byte_255788F57 >= 0)
                    v704 = byte_255788F57;
                  else
                    v704 = *((_QWORD *)&xmmword_255788F40 + 1);
                  *(_QWORD *)object = os_log_create(v703, v619);
                  if (v704 > 0x7FFFFFFFFFFFFFF7)
                    sub_22316DBC0();
                  if (v704 >= 0x17)
                  {
                    v706 = (v704 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v704 | 7) != 0x17)
                      v706 = v704 | 7;
                    v707 = v706 + 1;
                    v705 = operator new(v706 + 1);
                    *(_QWORD *)&object[24] = v707 | 0x8000000000000000;
                    *(_QWORD *)&object[8] = v705;
                    *(_QWORD *)&object[16] = v704;
                  }
                  else
                  {
                    object[31] = v704;
                    v705 = &object[8];
                    if (!v704)
                    {
LABEL_1300:
                      v705[v704] = 0;
                      object[32] = 1;
                      if (v620 > 0x7FFFFFFFFFFFFFF7)
                        sub_22316DBC0();
                      v708 = v615;
                      if (v620 >= 0x17)
                      {
                        v712 = (v620 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v620 | 7) != 0x17)
                          v712 = v620 | 7;
                        v713 = v712 + 1;
                        v709 = operator new(v712 + 1);
                        *(_QWORD *)&object[56] = v713 | 0x8000000000000000;
                        *(_QWORD *)&object[40] = v709;
                        *(_QWORD *)&object[48] = v620;
                      }
                      else
                      {
                        object[63] = v620;
                        v709 = &object[40];
                        if (!v620)
                        {
                          object[40] = 0;
                          object[64] = 1;
                          v710 = *(NSObject **)object;
                          if ((object[63] & 0x80000000) == 0)
                            goto LABEL_1304;
LABEL_1310:
                          operator delete(*(void **)&object[40]);
                          v711 = categoryf;
                          if (object[32])
                            goto LABEL_1311;
                          goto LABEL_1313;
                        }
                      }
                      memmove(v709, v619, v620);
                      v709[v620] = 0;
                      object[64] = 1;
                      v710 = *(NSObject **)object;
                      if ((object[63] & 0x80000000) != 0)
                        goto LABEL_1310;
LABEL_1304:
                      v711 = categoryf;
                      if (object[32])
                      {
LABEL_1311:
                        if ((object[31] & 0x80000000) != 0)
                          operator delete(*(void **)&object[8]);
                      }
LABEL_1313:
                      if (*(_QWORD *)object)
                        os_release(*(void **)object);
                      if (v711 && *((_QWORD *)v711 + 3))
                      {
                        v714 = _os_log_pack_size();
                        v715 = (std::__shared_weak_count_vtbl *)operator new(v714, (std::align_val_t)8uLL);
                        v716 = (std::__shared_weak_count *)operator new();
                        v716->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                        v716->__shared_owners_ = 0;
                        v716->__shared_weak_owners_ = 0;
                        v716[1].__vftable = v715;
                        *(_QWORD *)__s = v715;
                        *(_QWORD *)&__s[8] = v715;
                        v1407 = v716;
                        v1408 = 0;
                        v1409 = 0;
                        v717 = strlen(__src);
                        if (v717 > 0x7FFFFFFFFFFFFFF7)
                          sub_22316DBC0();
                        v718 = v717;
                        if (v717 >= 0x17)
                        {
                          v735 = (v717 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v717 | 7) != 0x17)
                            v735 = v717 | 7;
                          v736 = v735 + 1;
                          v719 = (char *)operator new(v735 + 1);
                          *((_QWORD *)&v1396 + 1) = v736 | 0x8000000000000000;
                          v1395 = v719;
                          *(_QWORD *)&v1396 = v718;
                        }
                        else
                        {
                          HIBYTE(v1396) = v717;
                          v719 = (char *)&v1395;
                          if (!v717)
                          {
LABEL_1348:
                            v719[v718] = 0;
                            v737 = strlen(v1399);
                            if (v737 > 0x7FFFFFFFFFFFFFF7)
                              sub_22316DBC0();
                            v738 = v737;
                            if (v737 >= 0x17)
                            {
                              v740 = (v737 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v737 | 7) != 0x17)
                                v740 = v737 | 7;
                              v741 = v740 + 1;
                              v739 = (char *)operator new(v740 + 1);
                              *((_QWORD *)&v1394 + 1) = v741 | 0x8000000000000000;
                              v1393 = v739;
                              *(_QWORD *)&v1394 = v738;
                            }
                            else
                            {
                              HIBYTE(v1394) = v737;
                              v739 = (char *)&v1393;
                              if (!v737)
                              {
LABEL_1356:
                                v739[v738] = 0;
                                v742 = strlen(v1397);
                                if (v742 > 0x7FFFFFFFFFFFFFF7)
                                  sub_22316DBC0();
                                v743 = v742;
                                if (v742 >= 0x17)
                                {
                                  v745 = (v742 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v742 | 7) != 0x17)
                                    v745 = v742 | 7;
                                  v746 = v745 + 1;
                                  v744 = operator new(v745 + 1);
                                  *(_QWORD *)&v1392 = v743;
                                  *((_QWORD *)&v1392 + 1) = v746 | 0x8000000000000000;
                                  v1391 = v744;
                                }
                                else
                                {
                                  HIBYTE(v1392) = v742;
                                  v744 = &v1391;
                                  if (!v742)
                                    goto LABEL_1364;
                                }
                                memcpy(v744, v1397, v743);
LABEL_1364:
                                *((_BYTE *)v744 + v743) = 0;
                                *(_QWORD *)&object[16] = v1396;
                                *(_QWORD *)&object[23] = *(_QWORD *)((char *)&v1396 + 7);
                                *(_QWORD *)&object[40] = v1394;
                                *(_QWORD *)&object[47] = *(_QWORD *)((char *)&v1394 + 7);
                                *(_QWORD *)&object[71] = *(_QWORD *)((char *)&v1392 + 7);
                                *(_QWORD *)&object[64] = v1392;
                                *(_QWORD *)object = off_24EC371B0;
                                *(_QWORD *)&object[8] = v1395;
                                object[31] = HIBYTE(v1396);
                                *(_QWORD *)&object[32] = v1393;
                                object[55] = HIBYTE(v1394);
                                *(_QWORD *)&object[56] = v1391;
                                object[79] = HIBYTE(v1392);
                                v747 = (char *)operator new(0x68uLL);
                                *((_QWORD *)v747 + 1) = 0;
                                *((_QWORD *)v747 + 2) = 0;
                                *(_QWORD *)v747 = &off_24EC37160;
                                *((_QWORD *)v747 + 3) = off_24EC371B0;
                                *((_OWORD *)v747 + 2) = *(_OWORD *)&object[8];
                                *((_QWORD *)v747 + 6) = *(_QWORD *)&object[24];
                                memset(&object[8], 0, 24);
                                *(_OWORD *)(v747 + 56) = *(_OWORD *)&object[32];
                                *((_QWORD *)v747 + 9) = *(_QWORD *)&object[48];
                                memset(&object[32], 0, 24);
                                v748 = *(_OWORD *)&object[56];
                                *((_QWORD *)v747 + 12) = *(_QWORD *)&object[72];
                                *((_OWORD *)v747 + 5) = v748;
                                memset(&object[56], 0, 24);
                                v749 = v1409;
                                v1408 = v747 + 24;
                                v1409 = (std::__shared_weak_count *)v747;
                                if (!v749)
                                  goto LABEL_1368;
                                v750 = (unint64_t *)&v749->__shared_owners_;
                                do
                                  v751 = __ldaxr(v750);
                                while (__stlxr(v751 - 1, v750));
                                if (!v751)
                                {
                                  ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
                                  std::__shared_weak_count::__release_weak(v749);
                                  if ((object[79] & 0x80000000) != 0)
                                    goto LABEL_1441;
LABEL_1369:
                                  if ((object[55] & 0x80000000) == 0)
                                    goto LABEL_1370;
LABEL_1442:
                                  operator delete(*(void **)&object[32]);
                                  if ((object[31] & 0x80000000) != 0)
                                    goto LABEL_1443;
LABEL_1371:
                                  *(_OWORD *)v1403 = *(_OWORD *)__s;
                                  v753 = v1407;
                                  v752 = v1408;
                                  *(_QWORD *)&v1403[16] = v1407;
                                  if (v1407)
                                  {
LABEL_1444:
                                    v793 = (unint64_t *)&v753->__shared_owners_;
                                    do
                                      v794 = __ldxr(v793);
                                    while (__stxr(v794 + 1, v793));
                                  }
                                }
                                else
                                {
LABEL_1368:
                                  if ((object[79] & 0x80000000) == 0)
                                    goto LABEL_1369;
LABEL_1441:
                                  operator delete(*(void **)&object[56]);
                                  if ((object[55] & 0x80000000) != 0)
                                    goto LABEL_1442;
LABEL_1370:
                                  if ((object[31] & 0x80000000) == 0)
                                    goto LABEL_1371;
LABEL_1443:
                                  operator delete(*(void **)&object[8]);
                                  *(_OWORD *)v1403 = *(_OWORD *)__s;
                                  v753 = v1407;
                                  v752 = v1408;
                                  *(_QWORD *)&v1403[16] = v1407;
                                  if (v1407)
                                    goto LABEL_1444;
                                }
                                v795 = v1409;
                                *(_QWORD *)&v1404 = v752;
                                *((_QWORD *)&v1404 + 1) = v1409;
                                if (v1409)
                                {
                                  v796 = (unint64_t *)&v1409->__shared_owners_;
                                  do
                                    v797 = __ldxr(v796);
                                  while (__stxr(v797 + 1, v796));
                                  v1405 = v752;
                                  do
                                    v798 = __ldaxr(v796);
                                  while (__stlxr(v798 - 1, v796));
                                  if (!v798)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v795->__on_zero_shared)(v795);
                                    std::__shared_weak_count::__release_weak(v795);
                                  }
                                }
                                else
                                {
                                  v1405 = v752;
                                }
                                v799 = v1407;
                                if (v1407)
                                {
                                  v800 = (unint64_t *)&v1407->__shared_owners_;
                                  do
                                    v801 = __ldaxr(v800);
                                  while (__stlxr(v801 - 1, v800));
                                  if (!v801)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
                                    std::__shared_weak_count::__release_weak(v799);
                                  }
                                }
                                v802 = *(_QWORD *)v1403;
                                if (v1405[31] >= 0)
                                  v803 = v1405 + 8;
                                else
                                  v803 = (char *)*((_QWORD *)v1405 + 1);
                                if (v1405[55] >= 0)
                                  v804 = v1405 + 32;
                                else
                                  v804 = (char *)*((_QWORD *)v1405 + 4);
                                if (v1405[79] >= 0)
                                  v805 = v1405 + 56;
                                else
                                  v805 = (char *)*((_QWORD *)v1405 + 7);
                                v806 = _os_log_pack_fill();
                                v807 = *((_DWORD *)v576 + 4);
                                *(_DWORD *)v806 = 68159234;
                                *(_DWORD *)(v806 + 4) = 13;
                                *(_WORD *)(v806 + 8) = 2080;
                                *(_QWORD *)(v806 + 10) = v803;
                                *(_WORD *)(v806 + 18) = 1040;
                                *(_DWORD *)(v806 + 20) = 13;
                                *(_WORD *)(v806 + 24) = 2080;
                                *(_QWORD *)(v806 + 26) = v804;
                                *(_WORD *)(v806 + 34) = 1024;
                                *(_DWORD *)(v806 + 36) = v807;
                                *(_WORD *)(v806 + 40) = 1040;
                                *(_DWORD *)(v806 + 42) = 13;
                                *(_WORD *)(v806 + 46) = 2080;
                                *(_QWORD *)(v806 + 48) = v805;
                                v808 = operator new();
                                v809 = *((unsigned __int8 *)v1338 + 39);
                                v810 = v1324;
                                if ((v809 & 0x80u) != 0)
                                {
                                  v810 = (const char *)*((_QWORD *)v1338 + 2);
                                  v809 = *((_QWORD *)v1338 + 3);
                                }
                                *(_QWORD *)v808 = v802;
                                *(_OWORD *)(v808 + 8) = *(_OWORD *)&v1403[8];
                                *(_QWORD *)&v1403[8] = 0;
                                *(_QWORD *)&v1403[16] = 0;
                                *(_OWORD *)(v808 + 24) = v1404;
                                v1404 = 0uLL;
                                *(_QWORD *)(v808 + 40) = v810;
                                *(_QWORD *)(v808 + 48) = v809;
                                *(_BYTE *)(v808 + 56) = 16;
                                *(_QWORD *)__s = 0;
                                *(_QWORD *)object = v808;
                                (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)categoryf + 3) + 40))(*((_QWORD *)categoryf + 3), object);
                                v811 = *(_QWORD *)object;
                                *(_QWORD *)object = 0;
                                if (v811)
                                {
                                  v812 = *(std::__shared_weak_count **)(v811 + 32);
                                  if (v812)
                                  {
                                    v813 = (unint64_t *)&v812->__shared_owners_;
                                    do
                                      v814 = __ldaxr(v813);
                                    while (__stlxr(v814 - 1, v813));
                                    if (!v814)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v812->__on_zero_shared)(v812);
                                      std::__shared_weak_count::__release_weak(v812);
                                    }
                                  }
                                  v815 = *(std::__shared_weak_count **)(v811 + 16);
                                  if (v815)
                                  {
                                    v816 = (unint64_t *)&v815->__shared_owners_;
                                    do
                                      v817 = __ldaxr(v816);
                                    while (__stlxr(v817 - 1, v816));
                                    if (!v817)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
                                      std::__shared_weak_count::__release_weak(v815);
                                    }
                                  }
                                  MEMORY[0x227684CE8](v811, 0x10F0C40B62ED6C6);
                                  v818 = *(_QWORD *)__s;
                                  *(_QWORD *)__s = 0;
                                  if (v818)
                                  {
                                    v819 = *(std::__shared_weak_count **)(v818 + 32);
                                    if (v819)
                                    {
                                      v820 = (unint64_t *)&v819->__shared_owners_;
                                      do
                                        v821 = __ldaxr(v820);
                                      while (__stlxr(v821 - 1, v820));
                                      if (!v821)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v819->__on_zero_shared)(v819);
                                        std::__shared_weak_count::__release_weak(v819);
                                      }
                                    }
                                    v822 = *(std::__shared_weak_count **)(v818 + 16);
                                    if (v822)
                                    {
                                      v823 = (unint64_t *)&v822->__shared_owners_;
                                      do
                                        v824 = __ldaxr(v823);
                                      while (__stlxr(v824 - 1, v823));
                                      if (!v824)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v822->__on_zero_shared)(v822);
                                        std::__shared_weak_count::__release_weak(v822);
                                      }
                                    }
                                    MEMORY[0x227684CE8](v818, 0x10F0C40B62ED6C6);
                                  }
                                }
                                v825 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
                                if (*((_QWORD *)&v1404 + 1))
                                {
                                  v826 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
                                  do
                                    v827 = __ldaxr(v826);
                                  while (__stlxr(v827 - 1, v826));
                                  if (!v827)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v825->__on_zero_shared)(v825);
                                    std::__shared_weak_count::__release_weak(v825);
                                    v828 = *(std::__shared_weak_count **)&v1403[16];
                                    if (*(_QWORD *)&v1403[16])
                                      goto LABEL_1498;
                                    goto LABEL_1501;
                                  }
                                }
                                v828 = *(std::__shared_weak_count **)&v1403[16];
                                if (!*(_QWORD *)&v1403[16])
                                  goto LABEL_1501;
LABEL_1498:
                                v829 = (unint64_t *)&v828->__shared_owners_;
                                do
                                  v830 = __ldaxr(v829);
                                while (__stlxr(v830 - 1, v829));
                                if (v830)
                                {
LABEL_1501:
                                  if (v708)
                                    goto LABEL_1502;
LABEL_1503:
                                  sub_223182C08((uint64_t)&v1382);
                                  v680 = v1390;
                                  if (!v1390)
                                    goto LABEL_1009;
                                  v832 = (unint64_t *)&v1390->__shared_owners_;
                                  do
                                    v792 = __ldaxr(v832);
                                  while (__stlxr(v792 - 1, v832));
                                  goto LABEL_1506;
                                }
                                ((void (*)(std::__shared_weak_count *))v828->__on_zero_shared)(v828);
                                std::__shared_weak_count::__release_weak(v828);
                                if (!v708)
                                  goto LABEL_1503;
LABEL_1502:
                                sub_2245664AC((unsigned __int8 *)v1355, object);
                                sub_2245664AC(v576, v1403);
                                v831 = *((unsigned int *)v576 + 4);
                                sub_2245664AC((unsigned __int8 *)(*((_QWORD *)v578 + 2) + 16 * v831), __s);
                                sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gp %.13s and kf %.13s index %u not cycle-consistent; kf referen"
                                  "ces gp %.13s at this index",
                                  object,
                                  v1403,
                                  v831,
                                  __s);
                                sub_223182C08((uint64_t)&v1382);
                                goto LABEL_1503;
                              }
                            }
                            memcpy(v739, v1399, v738);
                            goto LABEL_1356;
                          }
                        }
                        memcpy(v719, __src, v718);
                        goto LABEL_1348;
                      }
                      os_log_type_enabled(v710, OS_LOG_TYPE_ERROR);
                      v720 = *((_DWORD *)v576 + 4);
                      *(_QWORD *)object = 0xD04100702;
                      *(_WORD *)&object[8] = 2080;
                      *(_QWORD *)&object[10] = __src;
                      *(_WORD *)&object[18] = 1040;
                      *(_DWORD *)&object[20] = 13;
                      *(_WORD *)&object[24] = 2080;
                      *(_QWORD *)&object[26] = v1399;
                      *(_WORD *)&object[34] = 1024;
                      *(_DWORD *)&object[36] = v720;
                      *(_WORD *)&object[40] = 1040;
                      *(_DWORD *)&object[42] = 13;
                      *(_WORD *)&object[46] = 2080;
                      *(_QWORD *)&object[48] = v1397;
                      v721 = (void *)_os_log_send_and_compose_impl();
                      if (!v721)
                        goto LABEL_1501;
                      free(v721);
                      if (!v708)
                        goto LABEL_1503;
                      goto LABEL_1502;
                    }
                  }
                  memmove(v705, v703, v704);
                  goto LABEL_1300;
                }
              }
            }
          }
        }
LABEL_1009:
        v576 += 20;
        v575 = v1361;
      }
      v574 = v1355 + 40;
      if (v1355 + 40 == v1328)
        goto LABEL_1536;
    }
  }
  v1330 = 0;
  v1331 = 0;
  v1371 = 0;
LABEL_1536:
  if (v1371 > 0 || v1331 > 0 || v1330 > 0)
  {
    sub_223446D5C(__src);
    if (**(int **)(*(_QWORD *)__src + 56) > 5
      || ((v833 = *(unsigned __int8 *)(*(_QWORD *)__src + 72),
           v834 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0),
           v835 = v834,
           !v833)
        ? (v836 = v834 == 0)
        : (v836 = 0),
          v836))
    {
LABEL_1632:
      v1322 = 1;
      goto LABEL_1633;
    }
    v1382 = (const char **)__src;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 262;
    v1389 = 0;
    v1390 = 0;
    v1388 = "unknown function";
    v837 = *v1382;
    v838 = (uint64_t)(*v1382 + 16);
    if ((*v1382)[39] < 0)
    {
      v840 = (const char *)*((_QWORD *)v837 + 2);
      v839 = *((_QWORD *)v837 + 3);
    }
    else
    {
      v839 = *((unsigned __int8 *)*v1382 + 39);
      v840 = *v1382 + 16;
    }
    v841 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v841 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v842 = (const char *)&xmmword_255788F40;
    else
      v842 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v843 = byte_255788F57;
    else
      v843 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v842, v840);
    v844 = &object[8];
    if (v843 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v843 >= 0x17)
    {
      v845 = (v843 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v843 | 7) != 0x17)
        v845 = v843 | 7;
      v846 = v845 + 1;
      v844 = operator new(v845 + 1);
      *(_QWORD *)&object[24] = v846 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v844;
      *(_QWORD *)&object[16] = v843;
    }
    else
    {
      object[31] = v843;
      if (!v843)
      {
LABEL_1562:
        v844[v843] = 0;
        object[32] = 1;
        v847 = &object[40];
        if (v839 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v839 >= 0x17)
        {
          v848 = (v839 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v839 | 7) != 0x17)
            v848 = v839 | 7;
          v849 = v848 + 1;
          v847 = operator new(v848 + 1);
          *(_QWORD *)&object[56] = v849 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v847;
          *(_QWORD *)&object[48] = v839;
        }
        else
        {
          object[63] = v839;
          if (!v839)
            goto LABEL_1570;
        }
        memmove(v847, v840, v839);
LABEL_1570:
        v847[v839] = 0;
        object[64] = 1;
        v850 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v835 && *(_QWORD *)(v835 + 24))
        {
          v851 = _os_log_pack_size();
          v852 = (std::__shared_weak_count_vtbl *)operator new(v851, (std::align_val_t)8uLL);
          v853 = (std::__shared_weak_count *)operator new();
          v854 = v853;
          v853->__shared_owners_ = 0;
          v855 = (unint64_t *)&v853->__shared_owners_;
          v853->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v853->__shared_weak_owners_ = 0;
          v853[1].__vftable = v852;
          *(_QWORD *)object = v852;
          *(_QWORD *)&object[8] = v852;
          *(_QWORD *)&object[16] = v853;
          do
            v856 = __ldxr(v855);
          while (__stxr(v856 + 1, v855));
          memset(&object[24], 0, 24);
          do
            v857 = __ldaxr(v855);
          while (__stlxr(v857 - 1, v855));
          if (!v857)
          {
            ((void (*)(std::__shared_weak_count *))v853->__on_zero_shared)(v853);
            std::__shared_weak_count::__release_weak(v854);
          }
          v858 = *(_QWORD *)object;
          v859 = _os_log_pack_fill();
          *(_DWORD *)v859 = 67109632;
          *(_DWORD *)(v859 + 4) = v1371;
          *(_WORD *)(v859 + 8) = 1024;
          *(_DWORD *)(v859 + 10) = v1331;
          *(_WORD *)(v859 + 14) = 1024;
          *(_DWORD *)(v859 + 16) = v1330;
          v860 = operator new();
          v861 = *((unsigned __int8 *)v837 + 39);
          if ((v861 & 0x80u) == 0)
            v862 = v838;
          else
            v862 = *((_QWORD *)v837 + 2);
          if ((v861 & 0x80u) != 0)
            v861 = *((_QWORD *)v837 + 3);
          *(_QWORD *)v860 = v858;
          *(_OWORD *)(v860 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v860 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v860 + 40) = v862;
          *(_QWORD *)(v860 + 48) = v861;
          *(_BYTE *)(v860 + 56) = 16;
          *(_QWORD *)__s = 0;
          *(_QWORD *)v1403 = v860;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v835 + 24) + 40))(*(_QWORD *)(v835 + 24), v1403);
          v863 = *(_QWORD *)v1403;
          *(_QWORD *)v1403 = 0;
          if (v863)
          {
            v864 = *(std::__shared_weak_count **)(v863 + 32);
            if (v864)
            {
              v865 = (unint64_t *)&v864->__shared_owners_;
              do
                v866 = __ldaxr(v865);
              while (__stlxr(v866 - 1, v865));
              if (!v866)
              {
                ((void (*)(std::__shared_weak_count *))v864->__on_zero_shared)(v864);
                std::__shared_weak_count::__release_weak(v864);
              }
            }
            v867 = *(std::__shared_weak_count **)(v863 + 16);
            if (v867)
            {
              v868 = (unint64_t *)&v867->__shared_owners_;
              do
                v869 = __ldaxr(v868);
              while (__stlxr(v869 - 1, v868));
              if (!v869)
              {
                ((void (*)(std::__shared_weak_count *))v867->__on_zero_shared)(v867);
                std::__shared_weak_count::__release_weak(v867);
              }
            }
            MEMORY[0x227684CE8](v863, 0x10F0C40B62ED6C6);
            v870 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (v870)
            {
              v871 = *(std::__shared_weak_count **)(v870 + 32);
              if (v871)
              {
                v872 = (unint64_t *)&v871->__shared_owners_;
                do
                  v873 = __ldaxr(v872);
                while (__stlxr(v873 - 1, v872));
                if (!v873)
                {
                  ((void (*)(std::__shared_weak_count *))v871->__on_zero_shared)(v871);
                  std::__shared_weak_count::__release_weak(v871);
                }
              }
              v874 = *(std::__shared_weak_count **)(v870 + 16);
              if (v874)
              {
                v875 = (unint64_t *)&v874->__shared_owners_;
                do
                  v876 = __ldaxr(v875);
                while (__stlxr(v876 - 1, v875));
                if (!v876)
                {
                  ((void (*)(std::__shared_weak_count *))v874->__on_zero_shared)(v874);
                  std::__shared_weak_count::__release_weak(v874);
                }
              }
              MEMORY[0x227684CE8](v870, 0x10F0C40B62ED6C6);
            }
          }
          v877 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v878 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v879 = __ldaxr(v878);
            while (__stlxr(v879 - 1, v878));
            if (!v879)
            {
              ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
              std::__shared_weak_count::__release_weak(v877);
            }
          }
          v880 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v881 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v882 = __ldaxr(v881);
            while (__stlxr(v882 - 1, v881));
            if (!v882)
            {
              ((void (*)(std::__shared_weak_count *))v880->__on_zero_shared)(v880);
              std::__shared_weak_count::__release_weak(v880);
            }
          }
        }
        else
        {
          os_log_type_enabled(v850, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 67109632;
          *(_DWORD *)&object[4] = v1371;
          *(_WORD *)&object[8] = 1024;
          *(_DWORD *)&object[10] = v1331;
          *(_WORD *)&object[14] = 1024;
          *(_DWORD *)&object[16] = v1330;
          v883 = (void *)_os_log_send_and_compose_impl();
          if (v883)
            free(v883);
        }
        if (v833)
        {
          sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kfs and gp lookups not cycle consistent (unknown kf: %d, oob kf index: %d, gp mismatch: %d)", v1371, v1331, v1330);
          sub_223182C08((uint64_t)&v1382);
        }
        sub_223182C08((uint64_t)&v1382);
        v884 = v1390;
        if (v1390)
        {
          v885 = (unint64_t *)&v1390->__shared_owners_;
          do
            v886 = __ldaxr(v885);
          while (__stlxr(v886 - 1, v885));
          if (!v886)
          {
            ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
            std::__shared_weak_count::__release_weak(v884);
          }
        }
        goto LABEL_1632;
      }
    }
    memmove(v844, v842, v843);
    goto LABEL_1562;
  }
LABEL_1633:
  v1398[0] = 0uLL;
  *(_QWORD *)v1397 = v1398;
  v887 = *(unsigned __int8 **)(v1363 + 96);
  v1332 = *(unsigned __int8 **)(v1363 + 104);
  if (v887 == v1332)
    goto LABEL_1964;
  do
  {
    v889 = (unsigned __int8 *)*((_QWORD *)v887 + 2);
    v888 = (unsigned __int8 *)*((_QWORD *)v887 + 3);
    v1362 = v887;
    v1372 = v888;
    if (v889 != v888)
    {
      while (1)
      {
        v890 = *(unsigned __int8 **)v1377;
        if (!*(_QWORD *)v1377)
          goto LABEL_1748;
        v891 = *v889;
        v892 = v1377;
        do
        {
          while (1)
          {
            v893 = v890[32];
            v894 = *v889;
            if (v893 != v891)
              break;
            v893 = v890[33];
            v894 = v889[1];
            if (v893 != v894)
              break;
            v893 = v890[34];
            v894 = v889[2];
            if (v893 != v894)
              break;
            v893 = v890[35];
            v894 = v889[3];
            if (v893 != v894)
              break;
            v893 = v890[36];
            v894 = v889[4];
            if (v893 != v894)
              break;
            v893 = v890[37];
            v894 = v889[5];
            if (v893 != v894)
              break;
            v893 = v890[38];
            v894 = v889[6];
            if (v893 != v894)
              break;
            v893 = v890[39];
            v894 = v889[7];
            if (v893 != v894)
              break;
            v893 = v890[40];
            v894 = v889[8];
            if (v893 != v894)
              break;
            v893 = v890[41];
            v894 = v889[9];
            if (v893 != v894)
              break;
            v893 = v890[42];
            v894 = v889[10];
            if (v893 != v894)
              break;
            v893 = v890[43];
            v894 = v889[11];
            if (v893 != v894)
              break;
            v893 = v890[44];
            v894 = v889[12];
            if (v893 != v894)
              break;
            v893 = v890[45];
            v894 = v889[13];
            if (v893 != v894)
              break;
            v893 = v890[46];
            v894 = v889[14];
            if (v893 != v894)
              break;
            v893 = v890[47];
            v894 = v889[15];
            if (v893 != v894)
              break;
            v892 = v890;
            v890 = *(unsigned __int8 **)v890;
            if (!v890)
              goto LABEL_1663;
          }
          if (v893 < v894)
            v890 += 8;
          else
            v892 = v890;
          v890 = *(unsigned __int8 **)v890;
        }
        while (v890);
LABEL_1663:
        if (v892 == v1377)
          goto LABEL_1748;
        v895 = v892[32];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[1];
        v895 = v892[33];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[2];
        v895 = v892[34];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[3];
        v895 = v892[35];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[4];
        v895 = v892[36];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[5];
        v895 = v892[37];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[6];
        v895 = v892[38];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[7];
        v895 = v892[39];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[8];
        v895 = v892[40];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[9];
        v895 = v892[41];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[10];
        v895 = v892[42];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[11];
        v895 = v892[43];
        if (v891 != v895)
          goto LABEL_1680;
        v891 = v889[12];
        v895 = v892[44];
        if (v891 != v895
          || (v891 = v889[13], v895 = v892[45], v891 != v895)
          || (v891 = v889[14], v895 = v892[46], v891 != v895)
          || (v891 = v889[15], v895 = v892[47], v891 != v895))
        {
LABEL_1680:
          if (v891 < v895)
          {
LABEL_1748:
            v896 = *(char **)&v1398[0];
            v897 = (char **)v1398;
            v898 = (char **)v1398;
            if (*(_QWORD *)&v1398[0])
            {
              v899 = *v889;
              while (1)
              {
                v898 = (char **)v896;
                v900 = v896[25];
                v901 = v899 >= v900;
                if (v899 != v900)
                  break;
                v902 = v889[1];
                v900 = *((unsigned __int8 *)v898 + 26);
                v901 = v902 >= v900;
                if (v902 == v900
                  && (v902 = v889[2], v900 = *((unsigned __int8 *)v898 + 27), v901 = v902 >= v900, v902 == v900)
                  && (v902 = v889[3], v900 = *((unsigned __int8 *)v898 + 28), v901 = v902 >= v900, v902 == v900))
                {
                  v903 = v889[4];
                  v904 = *((unsigned __int8 *)v898 + 29);
                  if (v903 == v904)
                  {
                    v903 = v889[5];
                    v904 = *((unsigned __int8 *)v898 + 30);
                    if (v903 == v904)
                    {
                      v903 = v889[6];
                      v904 = *((unsigned __int8 *)v898 + 31);
                      if (v903 == v904)
                      {
                        v903 = v889[7];
                        v904 = *((unsigned __int8 *)v898 + 32);
                        if (v903 == v904)
                        {
                          v903 = v889[8];
                          v904 = *((unsigned __int8 *)v898 + 33);
                          if (v903 == v904)
                          {
                            v903 = v889[9];
                            v904 = *((unsigned __int8 *)v898 + 34);
                            if (v903 == v904)
                            {
                              v903 = v889[10];
                              v904 = *((unsigned __int8 *)v898 + 35);
                              if (v903 == v904)
                              {
                                v903 = v889[11];
                                v904 = *((unsigned __int8 *)v898 + 36);
                                if (v903 == v904)
                                {
                                  v903 = v889[12];
                                  v904 = *((unsigned __int8 *)v898 + 37);
                                  if (v903 == v904)
                                  {
                                    v903 = v889[13];
                                    v904 = *((unsigned __int8 *)v898 + 38);
                                    if (v903 == v904)
                                    {
                                      v903 = v889[14];
                                      v904 = *((unsigned __int8 *)v898 + 39);
                                      if (v903 == v904)
                                      {
                                        v903 = v889[15];
                                        v904 = *((unsigned __int8 *)v898 + 40);
                                        if (v903 == v904)
                                          goto LABEL_1701;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (v903 >= v904)
                  {
LABEL_1701:
                    v900 = *((unsigned __int8 *)v898 + 29);
                    v902 = v889[4];
                    if (v900 == v902)
                    {
                      v900 = *((unsigned __int8 *)v898 + 30);
                      v902 = v889[5];
                      if (v900 == v902)
                      {
                        v900 = *((unsigned __int8 *)v898 + 31);
                        v902 = v889[6];
                        if (v900 == v902)
                        {
                          v900 = *((unsigned __int8 *)v898 + 32);
                          v902 = v889[7];
                          if (v900 == v902)
                          {
                            v900 = *((unsigned __int8 *)v898 + 33);
                            v902 = v889[8];
                            if (v900 == v902)
                            {
                              v900 = *((unsigned __int8 *)v898 + 34);
                              v902 = v889[9];
                              if (v900 == v902)
                              {
                                v900 = *((unsigned __int8 *)v898 + 35);
                                v902 = v889[10];
                                if (v900 == v902)
                                {
                                  v900 = *((unsigned __int8 *)v898 + 36);
                                  v902 = v889[11];
                                  if (v900 == v902)
                                  {
                                    v900 = *((unsigned __int8 *)v898 + 37);
                                    v902 = v889[12];
                                    if (v900 == v902)
                                    {
                                      v900 = *((unsigned __int8 *)v898 + 38);
                                      v902 = v889[13];
                                      if (v900 == v902)
                                      {
                                        v900 = *((unsigned __int8 *)v898 + 39);
                                        v902 = v889[14];
                                        if (v900 == v902)
                                        {
                                          v900 = *((unsigned __int8 *)v898 + 40);
                                          v902 = v889[15];
                                          if (v900 == v902)
                                            goto LABEL_1745;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_1717;
                  }
LABEL_1683:
                  v896 = *v898;
                  v897 = v898;
                  if (!*v898)
                    goto LABEL_1720;
                }
                else
                {
LABEL_1715:
                  if (!v901)
                    goto LABEL_1683;
LABEL_1717:
                  if (v900 >= v902)
                    goto LABEL_1745;
                  v896 = v898[1];
                  if (!v896)
                  {
                    v897 = v898 + 1;
                    goto LABEL_1720;
                  }
                }
              }
              v902 = *v889;
              goto LABEL_1715;
            }
LABEL_1720:
            v905 = (char *)operator new(0x30uLL);
            *(_OWORD *)(v905 + 25) = *(_OWORD *)v889;
            *(_QWORD *)v905 = 0;
            *((_QWORD *)v905 + 1) = 0;
            *((_QWORD *)v905 + 2) = v898;
            *v897 = v905;
            if (**(_QWORD **)v1397)
            {
              *(_QWORD *)v1397 = **(_QWORD **)v1397;
              v905 = *v897;
            }
            v906 = *(_BYTE **)&v1398[0];
            v15 = v905 == *(char **)&v1398[0];
            v905[24] = v905 == *(char **)&v1398[0];
            if (!v15)
            {
              do
              {
                v907 = *((_QWORD *)v905 + 2);
                if (*(_BYTE *)(v907 + 24))
                  break;
                v908 = *(_BYTE **)(v907 + 16);
                v909 = *(_QWORD *)v908;
                if (*(_QWORD *)v908 == v907)
                {
                  v912 = *((_QWORD *)v908 + 1);
                  if (!v912 || (v913 = *(unsigned __int8 *)(v912 + 24), v910 = (_BYTE *)(v912 + 24), v913))
                  {
                    if (*(char **)v907 == v905)
                    {
                      *(_BYTE *)(v907 + 24) = 1;
                      v908[24] = 0;
                      v916 = *(_QWORD *)(v907 + 8);
                      *(_QWORD *)v908 = v916;
                      if (v916)
                        goto LABEL_1737;
                    }
                    else
                    {
                      v914 = *(uint64_t **)(v907 + 8);
                      v915 = *v914;
                      *(_QWORD *)(v907 + 8) = *v914;
                      if (v915)
                      {
                        *(_QWORD *)(v915 + 16) = v907;
                        v908 = *(_BYTE **)(v907 + 16);
                      }
                      v914[2] = (uint64_t)v908;
                      *(_QWORD *)(*(_QWORD *)(v907 + 16) + 8 * (**(_QWORD **)(v907 + 16) != v907)) = v914;
                      *v914 = v907;
                      *(_QWORD *)(v907 + 16) = v914;
                      v908 = (_BYTE *)v914[2];
                      v907 = *(_QWORD *)v908;
                      *((_BYTE *)v914 + 24) = 1;
                      v908[24] = 0;
                      v916 = *(_QWORD *)(v907 + 8);
                      *(_QWORD *)v908 = v916;
                      if (v916)
LABEL_1737:
                        *(_QWORD *)(v916 + 16) = v908;
                    }
                    *(_QWORD *)(v907 + 16) = *((_QWORD *)v908 + 2);
                    *(_QWORD *)(*((_QWORD *)v908 + 2) + 8 * (**((_QWORD **)v908 + 2) != (_QWORD)v908)) = v907;
                    *(_QWORD *)(v907 + 8) = v908;
LABEL_1743:
                    *((_QWORD *)v908 + 2) = v907;
                    break;
                  }
                }
                else if (!v909 || (v911 = *(unsigned __int8 *)(v909 + 24), v910 = (_BYTE *)(v909 + 24), v911))
                {
                  if (*(char **)v907 == v905)
                  {
                    v928 = *((_QWORD *)v905 + 1);
                    *(_QWORD *)v907 = v928;
                    if (v928)
                    {
                      *(_QWORD *)(v928 + 16) = v907;
                      v908 = *(_BYTE **)(v907 + 16);
                    }
                    *((_QWORD *)v905 + 2) = v908;
                    *(_QWORD *)(*(_QWORD *)(v907 + 16) + 8 * (**(_QWORD **)(v907 + 16) != v907)) = v905;
                    *((_QWORD *)v905 + 1) = v907;
                    *(_QWORD *)(v907 + 16) = v905;
                    v908 = (_BYTE *)*((_QWORD *)v905 + 2);
                    v905[24] = 1;
                    v908[24] = 0;
                    v907 = *((_QWORD *)v908 + 1);
                    v917 = *(char **)v907;
                    *((_QWORD *)v908 + 1) = *(_QWORD *)v907;
                    if (v917)
LABEL_1741:
                      *((_QWORD *)v917 + 2) = v908;
                  }
                  else
                  {
                    *(_BYTE *)(v907 + 24) = 1;
                    v908[24] = 0;
                    v907 = *((_QWORD *)v908 + 1);
                    v917 = *(char **)v907;
                    *((_QWORD *)v908 + 1) = *(_QWORD *)v907;
                    if (v917)
                      goto LABEL_1741;
                  }
                  *(_QWORD *)(v907 + 16) = *((_QWORD *)v908 + 2);
                  *(_QWORD *)(*((_QWORD *)v908 + 2) + 8 * (**((_QWORD **)v908 + 2) != (_QWORD)v908)) = v907;
                  *(_QWORD *)v907 = v908;
                  goto LABEL_1743;
                }
                *(_BYTE *)(v907 + 24) = 1;
                v905 = v908;
                v908[24] = v908 == v906;
                *v910 = 1;
              }
              while (v908 != v906);
            }
            ++*((_QWORD *)&v1398[0] + 1);
LABEL_1745:
            if (*(_BYTE *)(a2 + 3) && *(_BYTE *)(a2 + 1) != 0)
              break;
          }
        }
LABEL_1639:
        v889 += 16;
        if (v889 == v888)
          goto LABEL_1635;
      }
      v919 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
      if ((v919 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
      {
        sub_22455F53C(&v1382);
        sub_223174DE4(object, "cv3dapi.recon3d");
        sub_2232300E0((uint64_t **)&v1382, (uint64_t)object, &qword_2540CACA8);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CACB0);
      }
      v1395 = (char *)qword_2540CACA8;
      if (**(int **)(qword_2540CACA8 + 56) > 5
        || ((v920 = *(unsigned __int8 *)(qword_2540CACA8 + 72),
             v921 = sub_22322F254(qword_2540CACA8, "OSLogSurrogateAppender", 1, 0),
             v922 = v921,
             !v920)
          ? (v923 = v921 == 0)
          : (v923 = 0),
            v923))
      {
LABEL_1638:
        v888 = v1372;
        goto LABEL_1639;
      }
      v1382 = (const char **)&v1395;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v1384 = std::chrono::system_clock::now().__d_.__rep_;
      v1385 = 5;
      v1386 = "unknown file";
      v1387 = 274;
      v1388 = "unknown function";
      v1389 = 0;
      v1390 = 0;
      sub_2245664AC(v1362, __src);
      sub_2245664AC(v889, v1399);
      v1393 = v1399;
      v924 = *v1382;
      v925 = *v1382 + 16;
      categoryh = (char *)*v1382;
      v1340 = v925;
      if ((*v1382)[39] < 0)
      {
        v925 = (const char *)*((_QWORD *)v924 + 2);
        v926 = *((_QWORD *)v924 + 3);
        v929 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v929 & 1) != 0)
          goto LABEL_1763;
      }
      else
      {
        v926 = *((unsigned __int8 *)*v1382 + 39);
        v927 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v927 & 1) != 0)
          goto LABEL_1763;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v1403);
        sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
        if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
          operator delete(*(void **)v1403);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_1763:
      if (byte_255788F57 >= 0)
        v930 = (const char *)&xmmword_255788F40;
      else
        v930 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v931 = byte_255788F57;
      else
        v931 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v930, v925);
      if (v931 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v931 >= 0x17)
      {
        v933 = (v931 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v931 | 7) != 0x17)
          v933 = v931 | 7;
        v934 = v933 + 1;
        v932 = operator new(v933 + 1);
        *(_QWORD *)&object[24] = v934 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v932;
        *(_QWORD *)&object[16] = v931;
      }
      else
      {
        object[31] = v931;
        v932 = &object[8];
        if (!v931)
        {
LABEL_1777:
          v932[v931] = 0;
          object[32] = 1;
          if (v926 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v926 >= 0x17)
          {
            v937 = (v926 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v926 | 7) != 0x17)
              v937 = v926 | 7;
            v938 = v937 + 1;
            v935 = operator new(v937 + 1);
            *(_QWORD *)&object[56] = v938 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v935;
            *(_QWORD *)&object[48] = v926;
          }
          else
          {
            object[63] = v926;
            v935 = &object[40];
            if (!v926)
            {
              object[40] = 0;
              object[64] = 1;
              v936 = *(NSObject **)object;
              if ((object[63] & 0x80000000) == 0)
                goto LABEL_1781;
              goto LABEL_1787;
            }
          }
          memmove(v935, v925, v926);
          v935[v926] = 0;
          object[64] = 1;
          v936 = *(NSObject **)object;
          if ((object[63] & 0x80000000) == 0)
          {
LABEL_1781:
            if (!object[32])
              goto LABEL_1790;
            goto LABEL_1788;
          }
LABEL_1787:
          operator delete(*(void **)&object[40]);
          if (!object[32])
            goto LABEL_1790;
LABEL_1788:
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_1790:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v922 || !*(_QWORD *)(v922 + 24))
          {
            os_log_type_enabled(v936, OS_LOG_TYPE_ERROR);
            *(_QWORD *)object = 0xD04100402;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = __src;
            *(_WORD *)&object[18] = 1040;
            *(_DWORD *)&object[20] = 13;
            *(_WORD *)&object[24] = 2080;
            *(_QWORD *)&object[26] = v1393;
            v950 = (void *)_os_log_send_and_compose_impl();
            if (v950)
              free(v950);
            goto LABEL_1853;
          }
          v939 = _os_log_pack_size();
          v940 = (std::__shared_weak_count_vtbl *)operator new(v939, (std::align_val_t)8uLL);
          v941 = (std::__shared_weak_count *)operator new();
          v941->__shared_owners_ = 0;
          v942 = (unint64_t *)&v941->__shared_owners_;
          v941->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v941->__shared_weak_owners_ = 0;
          v941[1].__vftable = v940;
          *(_QWORD *)__s = v940;
          *(_QWORD *)&__s[8] = v940;
          v1407 = v941;
          v1408 = 0;
          v1409 = 0;
          sub_223446F28((uint64_t)object, __src, (const char **)&v1393);
          v943 = (char *)operator new(0x50uLL);
          v944 = (std::__shared_weak_count *)v943;
          *((_QWORD *)v943 + 1) = 0;
          v945 = (unint64_t *)(v943 + 8);
          *((_QWORD *)v943 + 2) = 0;
          *(_QWORD *)v943 = &off_24EC20730;
          *((_QWORD *)v943 + 3) = off_24EC20780;
          *((_OWORD *)v943 + 2) = *(_OWORD *)&object[8];
          *((_QWORD *)v943 + 6) = *(_QWORD *)&object[24];
          *(_OWORD *)(v943 + 56) = *(_OWORD *)&object[32];
          *((_QWORD *)v943 + 9) = *(_QWORD *)&object[48];
          v1408 = v943 + 24;
          v1409 = (std::__shared_weak_count *)v943;
          *(_QWORD *)v1403 = v940;
          *(_QWORD *)&v1403[8] = v940;
          *(_QWORD *)&v1403[16] = v941;
          do
            v946 = __ldxr(v942);
          while (__stxr(v946 + 1, v942));
          *(_QWORD *)&v1404 = v943 + 24;
          *((_QWORD *)&v1404 + 1) = v943;
          do
            v947 = __ldxr(v945);
          while (__stxr(v947 + 1, v945));
          v1405 = v943 + 24;
          do
            v948 = __ldaxr(v945);
          while (__stlxr(v948 - 1, v945));
          if (v948)
          {
            v949 = v1407;
            if (!v1407)
              goto LABEL_1812;
          }
          else
          {
            (*(void (**)(char *))(*(_QWORD *)v943 + 16))(v943);
            std::__shared_weak_count::__release_weak(v944);
            v949 = v1407;
            if (!v1407)
              goto LABEL_1812;
          }
          v951 = (unint64_t *)&v949->__shared_owners_;
          do
            v952 = __ldaxr(v951);
          while (__stlxr(v952 - 1, v951));
          if (!v952)
          {
            ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
            std::__shared_weak_count::__release_weak(v949);
          }
LABEL_1812:
          v953 = *(_QWORD *)v1403;
          if (v1405[31] >= 0)
            v954 = v1405 + 8;
          else
            v954 = (char *)*((_QWORD *)v1405 + 1);
          if (v1405[55] >= 0)
            v955 = v1405 + 32;
          else
            v955 = (char *)*((_QWORD *)v1405 + 4);
          v956 = _os_log_pack_fill();
          *(_DWORD *)v956 = 68158466;
          *(_DWORD *)(v956 + 4) = 13;
          *(_WORD *)(v956 + 8) = 2080;
          *(_QWORD *)(v956 + 10) = v954;
          *(_WORD *)(v956 + 18) = 1040;
          *(_DWORD *)(v956 + 20) = 13;
          *(_WORD *)(v956 + 24) = 2080;
          *(_QWORD *)(v956 + 26) = v955;
          v957 = operator new();
          v958 = categoryh[39];
          v959 = v1340;
          if ((v958 & 0x80u) != 0)
          {
            v959 = (const char *)*((_QWORD *)categoryh + 2);
            v958 = *((_QWORD *)categoryh + 3);
          }
          *(_QWORD *)v957 = v953;
          *(_OWORD *)(v957 + 8) = *(_OWORD *)&v1403[8];
          *(_QWORD *)&v1403[8] = 0;
          *(_QWORD *)&v1403[16] = 0;
          *(_OWORD *)(v957 + 24) = v1404;
          v1404 = 0uLL;
          *(_QWORD *)(v957 + 40) = v959;
          *(_QWORD *)(v957 + 48) = v958;
          *(_BYTE *)(v957 + 56) = 16;
          *(_QWORD *)__s = 0;
          *(_QWORD *)object = v957;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v922 + 24) + 40))(*(_QWORD *)(v922 + 24), object);
          v960 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (!v960)
            goto LABEL_1843;
          v961 = *(std::__shared_weak_count **)(v960 + 32);
          if (!v961)
            goto LABEL_1825;
          v962 = (unint64_t *)&v961->__shared_owners_;
          do
            v963 = __ldaxr(v962);
          while (__stlxr(v963 - 1, v962));
          if (!v963)
          {
            ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
            std::__shared_weak_count::__release_weak(v961);
            v964 = *(std::__shared_weak_count **)(v960 + 16);
            if (!v964)
              goto LABEL_1831;
          }
          else
          {
LABEL_1825:
            v964 = *(std::__shared_weak_count **)(v960 + 16);
            if (!v964)
              goto LABEL_1831;
          }
          v965 = (unint64_t *)&v964->__shared_owners_;
          do
            v966 = __ldaxr(v965);
          while (__stlxr(v966 - 1, v965));
          if (!v966)
          {
            ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
            std::__shared_weak_count::__release_weak(v964);
          }
LABEL_1831:
          MEMORY[0x227684CE8](v960, 0x10F0C40B62ED6C6);
          v967 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (v967)
          {
            v968 = *(std::__shared_weak_count **)(v967 + 32);
            if (!v968)
              goto LABEL_1836;
            v969 = (unint64_t *)&v968->__shared_owners_;
            do
              v970 = __ldaxr(v969);
            while (__stlxr(v970 - 1, v969));
            if (!v970)
            {
              ((void (*)(std::__shared_weak_count *))v968->__on_zero_shared)(v968);
              std::__shared_weak_count::__release_weak(v968);
              v971 = *(std::__shared_weak_count **)(v967 + 16);
              if (v971)
                goto LABEL_1837;
            }
            else
            {
LABEL_1836:
              v971 = *(std::__shared_weak_count **)(v967 + 16);
              if (v971)
              {
LABEL_1837:
                v972 = (unint64_t *)&v971->__shared_owners_;
                do
                  v973 = __ldaxr(v972);
                while (__stlxr(v973 - 1, v972));
                if (!v973)
                {
                  ((void (*)(std::__shared_weak_count *))v971->__on_zero_shared)(v971);
                  std::__shared_weak_count::__release_weak(v971);
                }
              }
            }
            MEMORY[0x227684CE8](v967, 0x10F0C40B62ED6C6);
          }
LABEL_1843:
          v974 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
          if (!*((_QWORD *)&v1404 + 1))
            goto LABEL_1847;
          v975 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
          do
            v976 = __ldaxr(v975);
          while (__stlxr(v976 - 1, v975));
          if (!v976)
          {
            ((void (*)(std::__shared_weak_count *))v974->__on_zero_shared)(v974);
            std::__shared_weak_count::__release_weak(v974);
            v977 = *(std::__shared_weak_count **)&v1403[16];
            if (*(_QWORD *)&v1403[16])
              goto LABEL_1848;
          }
          else
          {
LABEL_1847:
            v977 = *(std::__shared_weak_count **)&v1403[16];
            if (*(_QWORD *)&v1403[16])
            {
LABEL_1848:
              v978 = (unint64_t *)&v977->__shared_owners_;
              do
                v979 = __ldaxr(v978);
              while (__stlxr(v979 - 1, v978));
              if (!v979)
              {
                ((void (*)(std::__shared_weak_count *))v977->__on_zero_shared)(v977);
                std::__shared_weak_count::__release_weak(v977);
              }
            }
          }
LABEL_1853:
          if (v920)
          {
            sub_2245664AC(v1362, object);
            sub_2245664AC(v889, v1403);
            sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kf %.13s linked to gp %.13s is missing from state.", object, v1403);
            sub_223182C08((uint64_t)&v1382);
          }
          sub_223182C08((uint64_t)&v1382);
          v980 = v1390;
          if (v1390)
          {
            v981 = (unint64_t *)&v1390->__shared_owners_;
            do
              v982 = __ldaxr(v981);
            while (__stlxr(v982 - 1, v981));
            if (!v982)
            {
              ((void (*)(std::__shared_weak_count *))v980->__on_zero_shared)(v980);
              std::__shared_weak_count::__release_weak(v980);
            }
          }
          goto LABEL_1638;
        }
      }
      memmove(v932, v930, v931);
      goto LABEL_1777;
    }
LABEL_1635:
    v887 = v1362 + 40;
  }
  while (v1362 + 40 != v1332);
  v983 = DWORD2(v1398[0]);
  if (*(_BYTE *)(a2 + 3))
    v984 = SDWORD2(v1398[0]) <= 0;
  else
    v984 = 1;
  if (v984)
    goto LABEL_1964;
  sub_223446D5C(__src);
  if (**(int **)(*(_QWORD *)__src + 56) > 5)
    goto LABEL_1963;
  v985 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
  v986 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0);
  v987 = v986;
  if (!v985 && v986 == 0)
    goto LABEL_1963;
  v1382 = (const char **)__src;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v1384 = std::chrono::system_clock::now().__d_.__rep_;
  v1385 = 5;
  v1386 = "unknown file";
  v1387 = 288;
  v1389 = 0;
  v1390 = 0;
  v1388 = "unknown function";
  v989 = *v1382;
  v990 = *v1382 + 16;
  v1373 = v990;
  if ((*v1382)[39] < 0)
  {
    v990 = (const char *)*((_QWORD *)v989 + 2);
    v991 = *((_QWORD *)v989 + 3);
  }
  else
  {
    v991 = *((unsigned __int8 *)*v1382 + 39);
  }
  v992 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v992 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v993 = (const char *)&xmmword_255788F40;
  else
    v993 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v994 = byte_255788F57;
  else
    v994 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v993, v990);
  v995 = &object[8];
  if (v994 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v994 >= 0x17)
  {
    v996 = (v994 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v994 | 7) != 0x17)
      v996 = v994 | 7;
    v997 = v996 + 1;
    v995 = operator new(v996 + 1);
    *(_QWORD *)&object[24] = v997 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v995;
    *(_QWORD *)&object[16] = v994;
    goto LABEL_1895;
  }
  object[31] = v994;
  if (v994)
LABEL_1895:
    memmove(v995, v993, v994);
  v995[v994] = 0;
  object[32] = 1;
  v998 = &object[40];
  if (v991 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v991 >= 0x17)
  {
    v999 = (v991 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v991 | 7) != 0x17)
      v999 = v991 | 7;
    v1000 = v999 + 1;
    v998 = operator new(v999 + 1);
    *(_QWORD *)&object[56] = v1000 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v998;
    *(_QWORD *)&object[48] = v991;
  }
  else
  {
    object[63] = v991;
    if (!v991)
      goto LABEL_1904;
  }
  memmove(v998, v990, v991);
LABEL_1904:
  v998[v991] = 0;
  object[64] = 1;
  v1001 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v987 && *(_QWORD *)(v987 + 24))
  {
    v1002 = _os_log_pack_size();
    v1003 = (std::__shared_weak_count_vtbl *)operator new(v1002, (std::align_val_t)8uLL);
    v1004 = (std::__shared_weak_count *)operator new();
    v1005 = v1004;
    v1004->__shared_owners_ = 0;
    v1006 = (unint64_t *)&v1004->__shared_owners_;
    v1004->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v1004->__shared_weak_owners_ = 0;
    v1004[1].__vftable = v1003;
    *(_QWORD *)object = v1003;
    *(_QWORD *)&object[8] = v1003;
    *(_QWORD *)&object[16] = v1004;
    do
      v1007 = __ldxr(v1006);
    while (__stxr(v1007 + 1, v1006));
    memset(&object[24], 0, 24);
    do
      v1008 = __ldaxr(v1006);
    while (__stlxr(v1008 - 1, v1006));
    if (!v1008)
    {
      ((void (*)(std::__shared_weak_count *))v1004->__on_zero_shared)(v1004);
      std::__shared_weak_count::__release_weak(v1005);
    }
    v1009 = *(_QWORD *)object;
    v1010 = (_DWORD *)_os_log_pack_fill();
    *v1010 = 67109120;
    v1010[1] = v983;
    v1011 = operator new();
    v1012 = *((unsigned __int8 *)v989 + 39);
    v1013 = v1373;
    if ((v1012 & 0x80u) != 0)
    {
      v1013 = (const char *)*((_QWORD *)v989 + 2);
      v1012 = *((_QWORD *)v989 + 3);
    }
    *(_QWORD *)v1011 = v1009;
    *(_OWORD *)(v1011 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v1011 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v1011 + 40) = v1013;
    *(_QWORD *)(v1011 + 48) = v1012;
    *(_BYTE *)(v1011 + 56) = 16;
    *(_QWORD *)__s = 0;
    *(_QWORD *)v1403 = v1011;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v987 + 24) + 40))(*(_QWORD *)(v987 + 24), v1403);
    v1014 = *(_QWORD *)v1403;
    *(_QWORD *)v1403 = 0;
    if (v1014)
    {
      v1015 = *(std::__shared_weak_count **)(v1014 + 32);
      if (v1015)
      {
        v1016 = (unint64_t *)&v1015->__shared_owners_;
        do
          v1017 = __ldaxr(v1016);
        while (__stlxr(v1017 - 1, v1016));
        if (!v1017)
        {
          ((void (*)(std::__shared_weak_count *))v1015->__on_zero_shared)(v1015);
          std::__shared_weak_count::__release_weak(v1015);
        }
      }
      v1018 = *(std::__shared_weak_count **)(v1014 + 16);
      if (v1018)
      {
        v1019 = (unint64_t *)&v1018->__shared_owners_;
        do
          v1020 = __ldaxr(v1019);
        while (__stlxr(v1020 - 1, v1019));
        if (!v1020)
        {
          ((void (*)(std::__shared_weak_count *))v1018->__on_zero_shared)(v1018);
          std::__shared_weak_count::__release_weak(v1018);
        }
      }
      MEMORY[0x227684CE8](v1014, 0x10F0C40B62ED6C6);
      v1021 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v1021)
      {
        v1022 = *(std::__shared_weak_count **)(v1021 + 32);
        if (v1022)
        {
          v1023 = (unint64_t *)&v1022->__shared_owners_;
          do
            v1024 = __ldaxr(v1023);
          while (__stlxr(v1024 - 1, v1023));
          if (!v1024)
          {
            ((void (*)(std::__shared_weak_count *))v1022->__on_zero_shared)(v1022);
            std::__shared_weak_count::__release_weak(v1022);
          }
        }
        v1025 = *(std::__shared_weak_count **)(v1021 + 16);
        if (v1025)
        {
          v1026 = (unint64_t *)&v1025->__shared_owners_;
          do
            v1027 = __ldaxr(v1026);
          while (__stlxr(v1027 - 1, v1026));
          if (!v1027)
          {
            ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
            std::__shared_weak_count::__release_weak(v1025);
          }
        }
        MEMORY[0x227684CE8](v1021, 0x10F0C40B62ED6C6);
      }
    }
    v1028 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v1029 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v1030 = __ldaxr(v1029);
      while (__stlxr(v1030 - 1, v1029));
      if (!v1030)
      {
        ((void (*)(std::__shared_weak_count *))v1028->__on_zero_shared)(v1028);
        std::__shared_weak_count::__release_weak(v1028);
      }
    }
    v1031 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v1032 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v1033 = __ldaxr(v1032);
      while (__stlxr(v1033 - 1, v1032));
      if (!v1033)
      {
        ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
        std::__shared_weak_count::__release_weak(v1031);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1001, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = v983;
    v1034 = (void *)_os_log_send_and_compose_impl();
    if (v1034)
      free(v1034);
  }
  if (v985)
  {
    sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: %d global planes referenced in kf lookup are missing from state.", v983);
    sub_223182C08((uint64_t)&v1382);
  }
  sub_223182C08((uint64_t)&v1382);
  v1035 = v1390;
  if (v1390)
  {
    v1036 = (unint64_t *)&v1390->__shared_owners_;
    do
      v1037 = __ldaxr(v1036);
    while (__stlxr(v1037 - 1, v1036));
    if (!v1037)
    {
      ((void (*)(std::__shared_weak_count *))v1035->__on_zero_shared)(v1035);
      std::__shared_weak_count::__release_weak(v1035);
    }
  }
LABEL_1963:
  v1322 = 1;
LABEL_1964:
  sub_223198030((uint64_t)v1397, *(_QWORD **)&v1398[0]);
  if (!*(_BYTE *)(v1363 + 136))
    goto LABEL_2195;
  v1038 = *(unsigned __int8 **)(v1363 + 40);
  if (v1038 == v1377)
    goto LABEL_2195;
  v1039 = 0;
  v1040 = *(_QWORD *)(v1363 + 128);
  do
  {
    if (*(_QWORD *)(*((_QWORD *)v1038 + 6) + 232) <= v1040)
      goto LABEL_2085;
    ++v1039;
    if (!*(_BYTE *)(a2 + 1))
      goto LABEL_2085;
    sub_223446D5C(v1397);
    if (**(int **)(*(_QWORD *)v1397 + 56) > 5)
      goto LABEL_2085;
    v1041 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
    v1042 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
    v1043 = v1042;
    if (!v1041 && v1042 == 0)
      goto LABEL_2085;
    v1382 = (const char **)v1397;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 306;
    v1388 = "unknown function";
    v1389 = 0;
    v1390 = 0;
    sub_2245664AC(v1038 + 32, __s);
    v1045 = *v1382;
    v1046 = *v1382 + 16;
    categoryi = (char *)*v1382;
    v1341 = v1046;
    if ((*v1382)[39] < 0)
    {
      v1046 = (const char *)*((_QWORD *)v1045 + 2);
      v1047 = *((_QWORD *)v1045 + 3);
    }
    else
    {
      v1047 = *((unsigned __int8 *)*v1382 + 39);
    }
    v1374 = v1041;
    v1048 = *(_QWORD *)(*((_QWORD *)v1038 + 6) + 232);
    v1049 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v1049 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v1403);
      sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
      if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
        operator delete(*(void **)v1403);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v1050 = (const char *)&xmmword_255788F40;
    else
      v1050 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v1051 = byte_255788F57;
    else
      v1051 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v1050, v1046);
    if (v1051 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v1051 >= 0x17)
    {
      v1053 = v1039;
      v1054 = (v1051 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1051 | 7) != 0x17)
        v1054 = v1051 | 7;
      v1055 = v1054 + 1;
      v1052 = operator new(v1054 + 1);
      *(_QWORD *)&object[24] = v1055 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1052;
      *(_QWORD *)&object[16] = v1051;
      v1039 = v1053;
LABEL_1992:
      memmove(v1052, v1050, v1051);
      goto LABEL_1993;
    }
    object[31] = v1051;
    v1052 = &object[8];
    if (v1051)
      goto LABEL_1992;
LABEL_1993:
    v1052[v1051] = 0;
    object[32] = 1;
    if (v1047 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v1047 >= 0x17)
    {
      v1058 = (v1047 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1047 | 7) != 0x17)
        v1058 = v1047 | 7;
      v1059 = v1058 + 1;
      v1056 = operator new(v1058 + 1);
      *(_QWORD *)&object[56] = v1059 | 0x8000000000000000;
      *(_QWORD *)&object[40] = v1056;
      *(_QWORD *)&object[48] = v1047;
    }
    else
    {
      object[63] = v1047;
      v1056 = &object[40];
      if (!v1047)
      {
        object[40] = 0;
        object[64] = 1;
        v1057 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
          goto LABEL_1997;
        goto LABEL_2003;
      }
    }
    memmove(v1056, v1046, v1047);
    v1056[v1047] = 0;
    object[64] = 1;
    v1057 = *(NSObject **)object;
    if ((object[63] & 0x80000000) == 0)
    {
LABEL_1997:
      if (!object[32])
        goto LABEL_2006;
      goto LABEL_2004;
    }
LABEL_2003:
    operator delete(*(void **)&object[40]);
    if (!object[32])
      goto LABEL_2006;
LABEL_2004:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
LABEL_2006:
    if (*(_QWORD *)object)
      os_release(*(void **)object);
    v1060 = (double)v1048 / 1000000000.0;
    if (!v1043 || !*(_QWORD *)(v1043 + 24))
    {
      os_log_type_enabled(v1057, OS_LOG_TYPE_ERROR);
      *(_QWORD *)object = 0xD04100402;
      *(_WORD *)&object[8] = 2080;
      *(_QWORD *)&object[10] = __s;
      *(_WORD *)&object[18] = 2048;
      *(double *)&object[20] = v1060;
      *(_WORD *)&object[28] = 2048;
      *(double *)&object[30] = (double)v1040 / 1000000000.0;
      v1067 = (void *)_os_log_send_and_compose_impl();
      v1068 = v1374;
      if (!v1067)
        goto LABEL_2078;
      free(v1067);
      if (!v1374)
        goto LABEL_2080;
LABEL_2079:
      sub_2245664AC(v1038 + 32, object);
      sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: gp %.13s has timestamp %.3f newer than the last update timestamp %.3f.", object, (double)*(uint64_t *)(*((_QWORD *)v1038 + 6) + 232) / 1000000000.0, (double)v1040 / 1000000000.0);
      sub_223182C08((uint64_t)&v1382);
      goto LABEL_2080;
    }
    v1061 = _os_log_pack_size();
    v1062 = operator new(v1061, (std::align_val_t)8uLL);
    v1063 = (_QWORD *)operator new();
    *v1063 = &off_24EC1F7F0;
    v1063[1] = 0;
    v1063[2] = 0;
    v1063[3] = v1062;
    *(_QWORD *)v1403 = v1062;
    *(_QWORD *)&v1403[8] = v1062;
    *(_QWORD *)&v1403[16] = v1063;
    v1404 = 0uLL;
    v1064 = strlen(__s);
    if (v1064 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v1065 = v1064;
    if (v1064 >= 0x17)
    {
      v1069 = (v1064 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1064 | 7) != 0x17)
        v1069 = v1064 | 7;
      v1070 = v1069 + 1;
      v1066 = operator new(v1069 + 1);
      *((_QWORD *)&v1401 + 1) = v1070 | 0x8000000000000000;
      *(_QWORD *)__src = v1066;
      *(_QWORD *)&v1401 = v1065;
    }
    else
    {
      HIBYTE(v1401) = v1064;
      v1066 = __src;
      if (!v1064)
        goto LABEL_2021;
    }
    memcpy(v1066, __s, v1065);
LABEL_2021:
    *((_BYTE *)v1066 + v1065) = 0;
    v1071 = *(_QWORD *)__src;
    *(_QWORD *)v1399 = v1401;
    *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
    v1072 = HIBYTE(v1401);
    v1073 = operator new(0x40uLL);
    v1073[1] = 0;
    v1073[2] = 0;
    v1073[3] = off_24EC1F890;
    *v1073 = &off_24EC1F840;
    v1074 = *(_QWORD *)v1399;
    v1073[4] = v1071;
    v1073[5] = v1074;
    *(_QWORD *)((char *)v1073 + 47) = *(_QWORD *)&v1399[7];
    *((_BYTE *)v1073 + 55) = v1072;
    *(_QWORD *)v1399 = 0;
    *(_QWORD *)&v1399[7] = 0;
    v1075 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
    *(_QWORD *)&v1404 = v1073 + 3;
    *((_QWORD *)&v1404 + 1) = v1073;
    if (v1075)
    {
      v1076 = (unint64_t *)&v1075->__shared_owners_;
      do
        v1077 = __ldaxr(v1076);
      while (__stlxr(v1077 - 1, v1076));
      if (!v1077)
      {
        ((void (*)(std::__shared_weak_count *))v1075->__on_zero_shared)(v1075);
        std::__shared_weak_count::__release_weak(v1075);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v1403;
    v1078 = v1404;
    *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
    if (*(_QWORD *)&v1403[16])
    {
      v1079 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
      do
        v1080 = __ldxr(v1079);
      while (__stxr(v1080 + 1, v1079));
    }
    v1081 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
    *(_QWORD *)&object[24] = v1078;
    *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
    if (*((_QWORD *)&v1404 + 1))
    {
      v1082 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
      do
        v1083 = __ldxr(v1082);
      while (__stxr(v1083 + 1, v1082));
      *(_QWORD *)&object[40] = v1078;
      do
        v1084 = __ldaxr(v1082);
      while (__stlxr(v1084 - 1, v1082));
      if (!v1084)
      {
        ((void (*)(std::__shared_weak_count *))v1081->__on_zero_shared)(v1081);
        std::__shared_weak_count::__release_weak(v1081);
      }
    }
    else
    {
      *(_QWORD *)&object[40] = v1078;
    }
    v1085 = *(std::__shared_weak_count **)&v1403[16];
    if (*(_QWORD *)&v1403[16])
    {
      v1086 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
      do
        v1087 = __ldaxr(v1086);
      while (__stlxr(v1087 - 1, v1086));
      if (!v1087)
      {
        ((void (*)(std::__shared_weak_count *))v1085->__on_zero_shared)(v1085);
        std::__shared_weak_count::__release_weak(v1085);
      }
    }
    v1088 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
      v1089 = *(_QWORD *)&object[40] + 8;
    else
      v1089 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
    v1090 = _os_log_pack_fill();
    *(_DWORD *)v1090 = 68158466;
    *(_DWORD *)(v1090 + 4) = 13;
    *(_WORD *)(v1090 + 8) = 2080;
    *(_QWORD *)(v1090 + 10) = v1089;
    *(_WORD *)(v1090 + 18) = 2048;
    *(double *)(v1090 + 20) = v1060;
    *(_WORD *)(v1090 + 28) = 2048;
    *(double *)(v1090 + 30) = (double)v1040 / 1000000000.0;
    v1091 = operator new();
    v1092 = categoryi[39];
    v1093 = v1341;
    if ((v1092 & 0x80u) != 0)
    {
      v1093 = (const char *)*((_QWORD *)categoryi + 2);
      v1092 = *((_QWORD *)categoryi + 3);
    }
    *(_QWORD *)v1091 = v1088;
    *(_OWORD *)(v1091 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v1091 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v1091 + 40) = v1093;
    *(_QWORD *)(v1091 + 48) = v1092;
    *(_BYTE *)(v1091 + 56) = 16;
    *(_QWORD *)__src = 0;
    *(_QWORD *)v1403 = v1091;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1043 + 24) + 40))(*(_QWORD *)(v1043 + 24), v1403);
    v1094 = *(_QWORD *)v1403;
    *(_QWORD *)v1403 = 0;
    if (v1094)
    {
      v1095 = *(std::__shared_weak_count **)(v1094 + 32);
      if (v1095)
      {
        v1096 = (unint64_t *)&v1095->__shared_owners_;
        do
          v1097 = __ldaxr(v1096);
        while (__stlxr(v1097 - 1, v1096));
        if (!v1097)
        {
          ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
          std::__shared_weak_count::__release_weak(v1095);
        }
      }
      v1098 = *(std::__shared_weak_count **)(v1094 + 16);
      if (v1098)
      {
        v1099 = (unint64_t *)&v1098->__shared_owners_;
        do
          v1100 = __ldaxr(v1099);
        while (__stlxr(v1100 - 1, v1099));
        if (!v1100)
        {
          ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
          std::__shared_weak_count::__release_weak(v1098);
        }
      }
      MEMORY[0x227684CE8](v1094, 0x10F0C40B62ED6C6);
      v1101 = *(_QWORD *)__src;
      *(_QWORD *)__src = 0;
      if (v1101)
      {
        v1102 = *(std::__shared_weak_count **)(v1101 + 32);
        if (v1102)
        {
          v1103 = (unint64_t *)&v1102->__shared_owners_;
          do
            v1104 = __ldaxr(v1103);
          while (__stlxr(v1104 - 1, v1103));
          if (!v1104)
          {
            ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
            std::__shared_weak_count::__release_weak(v1102);
          }
        }
        v1105 = *(std::__shared_weak_count **)(v1101 + 16);
        if (v1105)
        {
          v1106 = (unint64_t *)&v1105->__shared_owners_;
          do
            v1107 = __ldaxr(v1106);
          while (__stlxr(v1107 - 1, v1106));
          if (!v1107)
          {
            ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
            std::__shared_weak_count::__release_weak(v1105);
          }
        }
        MEMORY[0x227684CE8](v1101, 0x10F0C40B62ED6C6);
      }
    }
    v1108 = *(std::__shared_weak_count **)&object[32];
    v1068 = v1374;
    if (!*(_QWORD *)&object[32])
      goto LABEL_2074;
    v1109 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
    do
      v1110 = __ldaxr(v1109);
    while (__stlxr(v1110 - 1, v1109));
    if (!v1110)
    {
      ((void (*)(std::__shared_weak_count *))v1108->__on_zero_shared)(v1108);
      std::__shared_weak_count::__release_weak(v1108);
      v1111 = *(std::__shared_weak_count **)&object[16];
      if (!*(_QWORD *)&object[16])
        goto LABEL_2078;
    }
    else
    {
LABEL_2074:
      v1111 = *(std::__shared_weak_count **)&object[16];
      if (!*(_QWORD *)&object[16])
        goto LABEL_2078;
    }
    v1112 = (unint64_t *)&v1111->__shared_owners_;
    do
      v1113 = __ldaxr(v1112);
    while (__stlxr(v1113 - 1, v1112));
    if (!v1113)
    {
      ((void (*)(std::__shared_weak_count *))v1111->__on_zero_shared)(v1111);
      std::__shared_weak_count::__release_weak(v1111);
      if (!v1374)
        goto LABEL_2080;
      goto LABEL_2079;
    }
LABEL_2078:
    if (v1068)
      goto LABEL_2079;
LABEL_2080:
    sub_223182C08((uint64_t)&v1382);
    v1114 = v1390;
    if (v1390)
    {
      v1115 = (unint64_t *)&v1390->__shared_owners_;
      do
        v1116 = __ldaxr(v1115);
      while (__stlxr(v1116 - 1, v1115));
      if (!v1116)
      {
        ((void (*)(std::__shared_weak_count *))v1114->__on_zero_shared)(v1114);
        std::__shared_weak_count::__release_weak(v1114);
      }
    }
LABEL_2085:
    v1117 = (unsigned __int8 *)*((_QWORD *)v1038 + 1);
    if (v1117)
    {
      do
      {
        v1118 = v1117;
        v1117 = *(unsigned __int8 **)v1117;
      }
      while (v1117);
    }
    else
    {
      do
      {
        v1118 = (unsigned __int8 *)*((_QWORD *)v1038 + 2);
        v15 = *(_QWORD *)v1118 == (_QWORD)v1038;
        v1038 = v1118;
      }
      while (!v15);
    }
    v1038 = v1118;
  }
  while (v1118 != v1377);
  if (v1039 <= 0)
    goto LABEL_2195;
  sub_223446D5C(__src);
  if (**(int **)(*(_QWORD *)__src + 56) > 5)
    goto LABEL_2194;
  v1119 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
  v1120 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0);
  v1121 = v1120;
  if (!v1119 && v1120 == 0)
    goto LABEL_2194;
  v1382 = (const char **)__src;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v1384 = std::chrono::system_clock::now().__d_.__rep_;
  v1385 = 5;
  v1386 = "unknown file";
  v1387 = 316;
  v1389 = 0;
  v1390 = 0;
  v1388 = "unknown function";
  v1123 = *v1382;
  v1124 = (uint64_t)(*v1382 + 16);
  if ((*v1382)[39] < 0)
  {
    v1126 = (const char *)*((_QWORD *)v1123 + 2);
    v1125 = *((_QWORD *)v1123 + 3);
  }
  else
  {
    v1125 = *((unsigned __int8 *)*v1382 + 39);
    v1126 = *v1382 + 16;
  }
  v1127 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v1127 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v1128 = (const char *)&xmmword_255788F40;
  else
    v1128 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v1129 = byte_255788F57;
  else
    v1129 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v1128, v1126);
  v1130 = &object[8];
  if (v1129 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1129 >= 0x17)
  {
    v1378 = v1121;
    v1131 = v1126;
    v1132 = v1123;
    v1133 = v1119;
    v1134 = v1124;
    v1135 = v1039;
    v1136 = (v1129 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1129 | 7) != 0x17)
      v1136 = v1129 | 7;
    v1137 = v1136 + 1;
    v1130 = operator new(v1136 + 1);
    *(_QWORD *)&object[24] = v1137 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v1130;
    *(_QWORD *)&object[16] = v1129;
    v1039 = v1135;
    v1124 = v1134;
    v1119 = v1133;
    v1123 = v1132;
    v1126 = v1131;
    v1121 = v1378;
    goto LABEL_2123;
  }
  object[31] = v1129;
  if (v1129)
LABEL_2123:
    memmove(v1130, v1128, v1129);
  v1130[v1129] = 0;
  object[32] = 1;
  v1138 = &object[40];
  if (v1125 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1125 >= 0x17)
  {
    v1139 = v1039;
    v1140 = (v1125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1125 | 7) != 0x17)
      v1140 = v1125 | 7;
    v1141 = v1140 + 1;
    v1138 = operator new(v1140 + 1);
    *(_QWORD *)&object[56] = v1141 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v1138;
    *(_QWORD *)&object[48] = v1125;
    v1039 = v1139;
    goto LABEL_2131;
  }
  object[63] = v1125;
  if (v1125)
LABEL_2131:
    memmove(v1138, v1126, v1125);
  v1138[v1125] = 0;
  object[64] = 1;
  v1142 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v1121 && *(_QWORD *)(v1121 + 24))
  {
    v1143 = _os_log_pack_size();
    v1144 = (std::__shared_weak_count_vtbl *)operator new(v1143, (std::align_val_t)8uLL);
    v1145 = (std::__shared_weak_count *)operator new();
    v1146 = v1145;
    v1145->__shared_owners_ = 0;
    v1147 = (unint64_t *)&v1145->__shared_owners_;
    v1145->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v1145->__shared_weak_owners_ = 0;
    v1145[1].__vftable = v1144;
    *(_QWORD *)object = v1144;
    *(_QWORD *)&object[8] = v1144;
    *(_QWORD *)&object[16] = v1145;
    do
      v1148 = __ldxr(v1147);
    while (__stxr(v1148 + 1, v1147));
    memset(&object[24], 0, 24);
    do
      v1149 = __ldaxr(v1147);
    while (__stlxr(v1149 - 1, v1147));
    if (!v1149)
    {
      ((void (*)(std::__shared_weak_count *))v1145->__on_zero_shared)(v1145);
      std::__shared_weak_count::__release_weak(v1146);
    }
    v1150 = *(_QWORD *)object;
    v1151 = (_DWORD *)_os_log_pack_fill();
    *v1151 = 67109120;
    v1151[1] = v1039;
    v1152 = operator new();
    v1153 = *((unsigned __int8 *)v1123 + 39);
    if ((v1153 & 0x80u) == 0)
      v1154 = v1124;
    else
      v1154 = *((_QWORD *)v1123 + 2);
    if ((v1153 & 0x80u) != 0)
      v1153 = *((_QWORD *)v1123 + 3);
    *(_QWORD *)v1152 = v1150;
    *(_OWORD *)(v1152 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v1152 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v1152 + 40) = v1154;
    *(_QWORD *)(v1152 + 48) = v1153;
    *(_BYTE *)(v1152 + 56) = 16;
    *(_QWORD *)__s = 0;
    *(_QWORD *)v1403 = v1152;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1121 + 24) + 40))(*(_QWORD *)(v1121 + 24), v1403);
    v1155 = *(_QWORD *)v1403;
    *(_QWORD *)v1403 = 0;
    if (v1155)
    {
      v1156 = *(std::__shared_weak_count **)(v1155 + 32);
      if (v1156)
      {
        v1157 = (unint64_t *)&v1156->__shared_owners_;
        do
          v1158 = __ldaxr(v1157);
        while (__stlxr(v1158 - 1, v1157));
        if (!v1158)
        {
          ((void (*)(std::__shared_weak_count *))v1156->__on_zero_shared)(v1156);
          std::__shared_weak_count::__release_weak(v1156);
        }
      }
      v1159 = *(std::__shared_weak_count **)(v1155 + 16);
      if (v1159)
      {
        v1160 = (unint64_t *)&v1159->__shared_owners_;
        do
          v1161 = __ldaxr(v1160);
        while (__stlxr(v1161 - 1, v1160));
        if (!v1161)
        {
          ((void (*)(std::__shared_weak_count *))v1159->__on_zero_shared)(v1159);
          std::__shared_weak_count::__release_weak(v1159);
        }
      }
      MEMORY[0x227684CE8](v1155, 0x10F0C40B62ED6C6);
      v1162 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v1162)
      {
        v1163 = *(std::__shared_weak_count **)(v1162 + 32);
        if (v1163)
        {
          v1164 = (unint64_t *)&v1163->__shared_owners_;
          do
            v1165 = __ldaxr(v1164);
          while (__stlxr(v1165 - 1, v1164));
          if (!v1165)
          {
            ((void (*)(std::__shared_weak_count *))v1163->__on_zero_shared)(v1163);
            std::__shared_weak_count::__release_weak(v1163);
          }
        }
        v1166 = *(std::__shared_weak_count **)(v1162 + 16);
        if (v1166)
        {
          v1167 = (unint64_t *)&v1166->__shared_owners_;
          do
            v1168 = __ldaxr(v1167);
          while (__stlxr(v1168 - 1, v1167));
          if (!v1168)
          {
            ((void (*)(std::__shared_weak_count *))v1166->__on_zero_shared)(v1166);
            std::__shared_weak_count::__release_weak(v1166);
          }
        }
        MEMORY[0x227684CE8](v1162, 0x10F0C40B62ED6C6);
      }
    }
    v1169 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v1170 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v1171 = __ldaxr(v1170);
      while (__stlxr(v1171 - 1, v1170));
      if (!v1171)
      {
        ((void (*)(std::__shared_weak_count *))v1169->__on_zero_shared)(v1169);
        std::__shared_weak_count::__release_weak(v1169);
      }
    }
    v1172 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v1173 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v1174 = __ldaxr(v1173);
      while (__stlxr(v1174 - 1, v1173));
      if (!v1174)
      {
        ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
        std::__shared_weak_count::__release_weak(v1172);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1142, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = v1039;
    v1175 = (void *)_os_log_send_and_compose_impl();
    if (v1175)
      free(v1175);
  }
  if (v1119)
  {
    sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: %d global planes have timestamp newer than the last update timestamp.", v1039);
    sub_223182C08((uint64_t)&v1382);
  }
  sub_223182C08((uint64_t)&v1382);
  v1176 = v1390;
  if (v1390)
  {
    v1177 = (unint64_t *)&v1390->__shared_owners_;
    do
      v1178 = __ldaxr(v1177);
    while (__stlxr(v1178 - 1, v1177));
    if (!v1178)
    {
      ((void (*)(std::__shared_weak_count *))v1176->__on_zero_shared)(v1176);
      std::__shared_weak_count::__release_weak(v1176);
    }
  }
LABEL_2194:
  v1322 = 1;
LABEL_2195:
  if (!a1[4])
    return v1322;
  v1179 = *(unsigned __int8 **)(v1363 + 16);
  if (!v1179)
    return v1322;
  v1180 = 0;
  while (2)
  {
    v1181 = a1[4];
    v1184 = *(unsigned __int8 **)(v1181 + 8);
    v1182 = (unsigned __int8 *)(v1181 + 8);
    v1183 = v1184;
    if (v1184)
    {
      v1185 = v1182;
      do
      {
        v1186 = v1183[32];
        v1187 = v1179[16];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[33];
        v1187 = v1179[17];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[34];
        v1187 = v1179[18];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[35];
        v1187 = v1179[19];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[36];
        v1187 = v1179[20];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[37];
        v1187 = v1179[21];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[38];
        v1187 = v1179[22];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[39];
        v1187 = v1179[23];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[40];
        v1187 = v1179[24];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[41];
        v1187 = v1179[25];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[42];
        v1187 = v1179[26];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[43];
        v1187 = v1179[27];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[44];
        v1187 = v1179[28];
        if (v1186 != v1187)
          goto LABEL_2218;
        v1186 = v1183[45];
        v1187 = v1179[29];
        if (v1186 == v1187
          && (v1186 = v1183[46], v1187 = v1179[30], v1186 == v1187)
          && (v1186 = v1183[47], v1187 = v1179[31], v1186 == v1187))
        {
          v1185 = v1183;
        }
        else
        {
LABEL_2218:
          if (v1186 < v1187)
            v1183 += 8;
          else
            v1185 = v1183;
        }
        v1183 = *(unsigned __int8 **)v1183;
      }
      while (v1183);
      if (v1185 != v1182 && ((char)sub_22319835C(v1179 + 16, v1185 + 32) & 0x80000000) == 0)
        goto LABEL_2198;
    }
    ++v1180;
    if (!*(_BYTE *)(a2 + 1))
      goto LABEL_2198;
    sub_223446D5C(v1397);
    if (**(int **)(*(_QWORD *)v1397 + 56) > 5)
      goto LABEL_2198;
    v1188 = *(unsigned __int8 *)(*(_QWORD *)v1397 + 72);
    v1189 = sub_22322F254(*(uint64_t *)v1397, "OSLogSurrogateAppender", 1, 0);
    v1190 = v1189;
    if (!v1188 && v1189 == 0)
      goto LABEL_2198;
    v1382 = (const char **)v1397;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v1384 = std::chrono::system_clock::now().__d_.__rep_;
    v1385 = 5;
    v1386 = "unknown file";
    v1387 = 330;
    v1388 = "unknown function";
    v1389 = 0;
    v1390 = 0;
    sub_2245664AC(v1179 + 16, __s);
    v1192 = *v1382;
    v1379 = v1188;
    v1364 = (uint64_t)(*v1382 + 16);
    v1375 = *v1382;
    if ((*v1382)[39] < 0)
    {
      v1194 = (const char *)*((_QWORD *)v1192 + 2);
      v1193 = *((_QWORD *)v1192 + 3);
      v1195 = v1180;
      v1197 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v1197 & 1) == 0)
      {
LABEL_2344:
        if (__cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v1403);
          sub_223199C58("com.apple.cv3d", (unint64_t)v1403, &xmmword_255788F40);
          if ((_BYTE)v1404 && (v1403[23] & 0x80000000) != 0)
            operator delete(*(void **)v1403);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
      }
    }
    else
    {
      v1193 = *((unsigned __int8 *)*v1382 + 39);
      v1194 = *v1382 + 16;
      v1195 = v1180;
      v1196 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v1196 & 1) == 0)
        goto LABEL_2344;
    }
    if (byte_255788F57 >= 0)
      v1198 = (const char *)&xmmword_255788F40;
    else
      v1198 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v1199 = byte_255788F57;
    else
      v1199 = *((_QWORD *)&xmmword_255788F40 + 1);
    *(_QWORD *)object = os_log_create(v1198, v1194);
    if (v1199 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v1199 >= 0x17)
    {
      v1201 = (v1199 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1199 | 7) != 0x17)
        v1201 = v1199 | 7;
      v1202 = v1201 + 1;
      v1200 = operator new(v1201 + 1);
      *(_QWORD *)&object[24] = v1202 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v1200;
      *(_QWORD *)&object[16] = v1199;
      goto LABEL_2247;
    }
    object[31] = v1199;
    v1200 = &object[8];
    if (v1199)
LABEL_2247:
      memmove(v1200, v1198, v1199);
    v1200[v1199] = 0;
    object[32] = 1;
    if (v1193 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v1180 = v1195;
    if (v1193 >= 0x17)
    {
      v1206 = (v1193 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1193 | 7) != 0x17)
        v1206 = v1193 | 7;
      v1207 = v1206 + 1;
      v1204 = v1379;
      v1203 = operator new(v1206 + 1);
      *(_QWORD *)&object[56] = v1207 | 0x8000000000000000;
      *(_QWORD *)&object[40] = v1203;
      *(_QWORD *)&object[48] = v1193;
    }
    else
    {
      object[63] = v1193;
      v1203 = &object[40];
      v1204 = v1379;
      if (!v1193)
      {
        object[40] = 0;
        object[64] = 1;
        v1205 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
          goto LABEL_2252;
LABEL_2258:
        operator delete(*(void **)&object[40]);
        if (object[32])
          goto LABEL_2259;
        goto LABEL_2261;
      }
    }
    memmove(v1203, v1194, v1193);
    v1203[v1193] = 0;
    object[64] = 1;
    v1205 = *(NSObject **)object;
    if ((object[63] & 0x80000000) != 0)
      goto LABEL_2258;
LABEL_2252:
    if (object[32])
    {
LABEL_2259:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
    }
LABEL_2261:
    if (*(_QWORD *)object)
      os_release(*(void **)object);
    if (!v1190 || !*(_QWORD *)(v1190 + 24))
    {
      os_log_type_enabled(v1205, OS_LOG_TYPE_ERROR);
      *(_QWORD *)object = 0xD04100202;
      *(_WORD *)&object[8] = 2080;
      *(_QWORD *)&object[10] = __s;
      v1214 = (void *)_os_log_send_and_compose_impl();
      if (!v1214)
        goto LABEL_2333;
      free(v1214);
      if (!v1204)
        goto LABEL_2335;
LABEL_2334:
      sub_2245664AC(v1179 + 16, object);
      sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: kf segmentation %.13s is unknown in keyframing state.", object);
      sub_223182C08((uint64_t)&v1382);
      goto LABEL_2335;
    }
    v1208 = _os_log_pack_size();
    v1209 = operator new(v1208, (std::align_val_t)8uLL);
    v1210 = (_QWORD *)operator new();
    *v1210 = &off_24EC1F7F0;
    v1210[1] = 0;
    v1210[2] = 0;
    v1210[3] = v1209;
    *(_QWORD *)v1403 = v1209;
    *(_QWORD *)&v1403[8] = v1209;
    *(_QWORD *)&v1403[16] = v1210;
    v1404 = 0uLL;
    v1211 = strlen(__s);
    if (v1211 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v1212 = v1211;
    if (v1211 >= 0x17)
    {
      v1215 = (v1211 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1211 | 7) != 0x17)
        v1215 = v1211 | 7;
      v1216 = v1215 + 1;
      v1213 = operator new(v1215 + 1);
      *((_QWORD *)&v1401 + 1) = v1216 | 0x8000000000000000;
      *(_QWORD *)__src = v1213;
      *(_QWORD *)&v1401 = v1212;
    }
    else
    {
      HIBYTE(v1401) = v1211;
      v1213 = __src;
      if (!v1211)
        goto LABEL_2276;
    }
    memcpy(v1213, __s, v1212);
LABEL_2276:
    *((_BYTE *)v1213 + v1212) = 0;
    v1217 = *(_QWORD *)__src;
    *(_QWORD *)v1399 = v1401;
    *(_QWORD *)&v1399[7] = *(_QWORD *)((char *)&v1401 + 7);
    v1218 = HIBYTE(v1401);
    v1219 = operator new(0x38uLL);
    v1219[1] = 0;
    v1219[2] = 0;
    v1219[3] = off_24EC1FA48;
    *v1219 = &off_24EC1F9F8;
    v1220 = *(_QWORD *)v1399;
    v1219[4] = v1217;
    v1219[5] = v1220;
    *(_QWORD *)((char *)v1219 + 47) = *(_QWORD *)&v1399[7];
    *((_BYTE *)v1219 + 55) = v1218;
    *(_QWORD *)v1399 = 0;
    *(_QWORD *)&v1399[7] = 0;
    v1221 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
    *(_QWORD *)&v1404 = v1219 + 3;
    *((_QWORD *)&v1404 + 1) = v1219;
    if (v1221)
    {
      v1222 = (unint64_t *)&v1221->__shared_owners_;
      do
        v1223 = __ldaxr(v1222);
      while (__stlxr(v1223 - 1, v1222));
      if (!v1223)
      {
        ((void (*)(std::__shared_weak_count *))v1221->__on_zero_shared)(v1221);
        std::__shared_weak_count::__release_weak(v1221);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v1403;
    v1224 = v1404;
    *(_QWORD *)&object[16] = *(_QWORD *)&v1403[16];
    if (*(_QWORD *)&v1403[16])
    {
      v1225 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
      do
        v1226 = __ldxr(v1225);
      while (__stxr(v1226 + 1, v1225));
    }
    v1227 = (std::__shared_weak_count *)*((_QWORD *)&v1404 + 1);
    *(_QWORD *)&object[24] = v1224;
    *(_QWORD *)&object[32] = *((_QWORD *)&v1404 + 1);
    if (*((_QWORD *)&v1404 + 1))
    {
      v1228 = (unint64_t *)(*((_QWORD *)&v1404 + 1) + 8);
      do
        v1229 = __ldxr(v1228);
      while (__stxr(v1229 + 1, v1228));
      *(_QWORD *)&object[40] = v1224;
      do
        v1230 = __ldaxr(v1228);
      while (__stlxr(v1230 - 1, v1228));
      if (!v1230)
      {
        ((void (*)(std::__shared_weak_count *))v1227->__on_zero_shared)(v1227);
        std::__shared_weak_count::__release_weak(v1227);
      }
    }
    else
    {
      *(_QWORD *)&object[40] = v1224;
    }
    v1231 = *(std::__shared_weak_count **)&v1403[16];
    if (*(_QWORD *)&v1403[16])
    {
      v1232 = (unint64_t *)(*(_QWORD *)&v1403[16] + 8);
      do
        v1233 = __ldaxr(v1232);
      while (__stlxr(v1233 - 1, v1232));
      if (!v1233)
      {
        ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
        std::__shared_weak_count::__release_weak(v1231);
      }
    }
    v1234 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
      v1235 = *(_QWORD *)&object[40] + 8;
    else
      v1235 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
    v1236 = _os_log_pack_fill();
    *(_DWORD *)v1236 = 68157954;
    *(_DWORD *)(v1236 + 4) = 13;
    *(_WORD *)(v1236 + 8) = 2080;
    *(_QWORD *)(v1236 + 10) = v1235;
    v1237 = operator new();
    v1238 = *((unsigned __int8 *)v1375 + 39);
    v1239 = v1364;
    if ((v1238 & 0x80u) != 0)
    {
      v1239 = *((_QWORD *)v1375 + 2);
      v1238 = *((_QWORD *)v1375 + 3);
    }
    *(_QWORD *)v1237 = v1234;
    *(_OWORD *)(v1237 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v1237 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v1237 + 40) = v1239;
    *(_QWORD *)(v1237 + 48) = v1238;
    *(_BYTE *)(v1237 + 56) = 16;
    *(_QWORD *)__src = 0;
    *(_QWORD *)v1403 = v1237;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1190 + 24) + 40))(*(_QWORD *)(v1190 + 24), v1403);
    v1240 = *(_QWORD *)v1403;
    *(_QWORD *)v1403 = 0;
    if (v1240)
    {
      v1241 = *(std::__shared_weak_count **)(v1240 + 32);
      if (v1241)
      {
        v1242 = (unint64_t *)&v1241->__shared_owners_;
        do
          v1243 = __ldaxr(v1242);
        while (__stlxr(v1243 - 1, v1242));
        if (!v1243)
        {
          ((void (*)(std::__shared_weak_count *))v1241->__on_zero_shared)(v1241);
          std::__shared_weak_count::__release_weak(v1241);
        }
      }
      v1244 = *(std::__shared_weak_count **)(v1240 + 16);
      if (v1244)
      {
        v1245 = (unint64_t *)&v1244->__shared_owners_;
        do
          v1246 = __ldaxr(v1245);
        while (__stlxr(v1246 - 1, v1245));
        if (!v1246)
        {
          ((void (*)(std::__shared_weak_count *))v1244->__on_zero_shared)(v1244);
          std::__shared_weak_count::__release_weak(v1244);
        }
      }
      MEMORY[0x227684CE8](v1240, 0x10F0C40B62ED6C6);
      v1247 = *(_QWORD *)__src;
      *(_QWORD *)__src = 0;
      if (v1247)
      {
        v1248 = *(std::__shared_weak_count **)(v1247 + 32);
        if (v1248)
        {
          v1249 = (unint64_t *)&v1248->__shared_owners_;
          do
            v1250 = __ldaxr(v1249);
          while (__stlxr(v1250 - 1, v1249));
          if (!v1250)
          {
            ((void (*)(std::__shared_weak_count *))v1248->__on_zero_shared)(v1248);
            std::__shared_weak_count::__release_weak(v1248);
          }
        }
        v1251 = *(std::__shared_weak_count **)(v1247 + 16);
        if (v1251)
        {
          v1252 = (unint64_t *)&v1251->__shared_owners_;
          do
            v1253 = __ldaxr(v1252);
          while (__stlxr(v1253 - 1, v1252));
          if (!v1253)
          {
            ((void (*)(std::__shared_weak_count *))v1251->__on_zero_shared)(v1251);
            std::__shared_weak_count::__release_weak(v1251);
          }
        }
        MEMORY[0x227684CE8](v1247, 0x10F0C40B62ED6C6);
      }
    }
    v1254 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v1255 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v1256 = __ldaxr(v1255);
      while (__stlxr(v1256 - 1, v1255));
      if (!v1256)
      {
        ((void (*)(std::__shared_weak_count *))v1254->__on_zero_shared)(v1254);
        std::__shared_weak_count::__release_weak(v1254);
        v1257 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
          goto LABEL_2330;
        goto LABEL_2333;
      }
    }
    v1257 = *(std::__shared_weak_count **)&object[16];
    if (!*(_QWORD *)&object[16])
      goto LABEL_2333;
LABEL_2330:
    v1258 = (unint64_t *)&v1257->__shared_owners_;
    do
      v1259 = __ldaxr(v1258);
    while (__stlxr(v1259 - 1, v1258));
    if (!v1259)
    {
      ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
      std::__shared_weak_count::__release_weak(v1257);
      if (!v1204)
        goto LABEL_2335;
      goto LABEL_2334;
    }
LABEL_2333:
    if (v1204)
      goto LABEL_2334;
LABEL_2335:
    sub_223182C08((uint64_t)&v1382);
    v1260 = v1390;
    if (v1390)
    {
      v1261 = (unint64_t *)&v1390->__shared_owners_;
      do
        v1262 = __ldaxr(v1261);
      while (__stlxr(v1262 - 1, v1261));
      if (!v1262)
      {
        ((void (*)(std::__shared_weak_count *))v1260->__on_zero_shared)(v1260);
        std::__shared_weak_count::__release_weak(v1260);
      }
    }
LABEL_2198:
    v1179 = *(unsigned __int8 **)v1179;
    if (v1179)
      continue;
    break;
  }
  if (v1180 <= 0)
    return v1322;
  sub_223446D5C(__src);
  if (**(int **)(*(_QWORD *)__src + 56) > 5)
    return 1;
  v1263 = *(unsigned __int8 *)(*(_QWORD *)__src + 72);
  v1264 = sub_22322F254(*(uint64_t *)__src, "OSLogSurrogateAppender", 1, 0);
  v1265 = v1264;
  if (!v1263 && !v1264)
    return 1;
  v1266 = v1180;
  v1382 = (const char **)__src;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v1384 = std::chrono::system_clock::now().__d_.__rep_;
  v1385 = 5;
  v1386 = "unknown file";
  v1387 = 339;
  v1389 = 0;
  v1390 = 0;
  v1388 = "unknown function";
  v1267 = *v1382;
  v1268 = *v1382 + 16;
  v1380 = v1268;
  if ((*v1382)[39] < 0)
  {
    v1268 = (const char *)*((_QWORD *)v1267 + 2);
    v1269 = *((_QWORD *)v1267 + 3);
  }
  else
  {
    v1269 = *((unsigned __int8 *)*v1382 + 39);
  }
  v1270 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v1270 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v1271 = (const char *)&xmmword_255788F40;
  else
    v1271 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v1272 = byte_255788F57;
  else
    v1272 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v1271, v1268);
  v1273 = &object[8];
  if (v1272 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1272 >= 0x17)
  {
    v1274 = (v1272 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1272 | 7) != 0x17)
      v1274 = v1272 | 7;
    v1275 = v1274 + 1;
    v1273 = operator new(v1274 + 1);
    *(_QWORD *)&object[24] = v1275 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v1273;
    *(_QWORD *)&object[16] = v1272;
    goto LABEL_2370;
  }
  object[31] = v1272;
  if (v1272)
LABEL_2370:
    memmove(v1273, v1271, v1272);
  v1273[v1272] = 0;
  object[32] = 1;
  v1276 = &object[40];
  if (v1269 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v1269 >= 0x17)
  {
    v1277 = (v1269 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1269 | 7) != 0x17)
      v1277 = v1269 | 7;
    v1278 = v1277 + 1;
    v1276 = operator new(v1277 + 1);
    *(_QWORD *)&object[56] = v1278 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v1276;
    *(_QWORD *)&object[48] = v1269;
    goto LABEL_2378;
  }
  object[63] = v1269;
  if (v1269)
LABEL_2378:
    memmove(v1276, v1268, v1269);
  v1276[v1269] = 0;
  object[64] = 1;
  v1279 = *(NSObject **)object;
  if ((object[63] & 0x80000000) != 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v1265 && *(_QWORD *)(v1265 + 24))
  {
    v1280 = _os_log_pack_size();
    v1281 = (std::__shared_weak_count_vtbl *)operator new(v1280, (std::align_val_t)8uLL);
    v1282 = (std::__shared_weak_count *)operator new();
    v1283 = v1282;
    v1282->__shared_owners_ = 0;
    v1284 = (unint64_t *)&v1282->__shared_owners_;
    v1282->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v1282->__shared_weak_owners_ = 0;
    v1282[1].__vftable = v1281;
    *(_QWORD *)object = v1281;
    *(_QWORD *)&object[8] = v1281;
    *(_QWORD *)&object[16] = v1282;
    do
      v1285 = __ldxr(v1284);
    while (__stxr(v1285 + 1, v1284));
    memset(&object[24], 0, 24);
    do
      v1286 = __ldaxr(v1284);
    while (__stlxr(v1286 - 1, v1284));
    if (!v1286)
    {
      ((void (*)(std::__shared_weak_count *))v1282->__on_zero_shared)(v1282);
      std::__shared_weak_count::__release_weak(v1283);
    }
    v1287 = *(_QWORD *)object;
    v1288 = (_DWORD *)_os_log_pack_fill();
    *v1288 = 67109120;
    v1288[1] = v1266;
    v1289 = operator new();
    v1290 = *((unsigned __int8 *)v1267 + 39);
    v1291 = v1380;
    if ((v1290 & 0x80u) != 0)
    {
      v1291 = (const char *)*((_QWORD *)v1267 + 2);
      v1290 = *((_QWORD *)v1267 + 3);
    }
    *(_QWORD *)v1289 = v1287;
    *(_OWORD *)(v1289 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v1289 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v1289 + 40) = v1291;
    *(_QWORD *)(v1289 + 48) = v1290;
    *(_BYTE *)(v1289 + 56) = 16;
    *(_QWORD *)__s = 0;
    *(_QWORD *)v1403 = v1289;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v1265 + 24) + 40))(*(_QWORD *)(v1265 + 24), v1403);
    v1292 = *(_QWORD *)v1403;
    *(_QWORD *)v1403 = 0;
    if (v1292)
    {
      v1293 = *(std::__shared_weak_count **)(v1292 + 32);
      if (v1293)
      {
        v1294 = (unint64_t *)&v1293->__shared_owners_;
        do
          v1295 = __ldaxr(v1294);
        while (__stlxr(v1295 - 1, v1294));
        if (!v1295)
        {
          ((void (*)(std::__shared_weak_count *))v1293->__on_zero_shared)(v1293);
          std::__shared_weak_count::__release_weak(v1293);
        }
      }
      v1296 = *(std::__shared_weak_count **)(v1292 + 16);
      if (v1296)
      {
        v1297 = (unint64_t *)&v1296->__shared_owners_;
        do
          v1298 = __ldaxr(v1297);
        while (__stlxr(v1298 - 1, v1297));
        if (!v1298)
        {
          ((void (*)(std::__shared_weak_count *))v1296->__on_zero_shared)(v1296);
          std::__shared_weak_count::__release_weak(v1296);
        }
      }
      MEMORY[0x227684CE8](v1292, 0x10F0C40B62ED6C6);
      v1299 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v1299)
      {
        v1300 = *(std::__shared_weak_count **)(v1299 + 32);
        if (v1300)
        {
          v1301 = (unint64_t *)&v1300->__shared_owners_;
          do
            v1302 = __ldaxr(v1301);
          while (__stlxr(v1302 - 1, v1301));
          if (!v1302)
          {
            ((void (*)(std::__shared_weak_count *))v1300->__on_zero_shared)(v1300);
            std::__shared_weak_count::__release_weak(v1300);
          }
        }
        v1303 = *(std::__shared_weak_count **)(v1299 + 16);
        if (v1303)
        {
          v1304 = (unint64_t *)&v1303->__shared_owners_;
          do
            v1305 = __ldaxr(v1304);
          while (__stlxr(v1305 - 1, v1304));
          if (!v1305)
          {
            ((void (*)(std::__shared_weak_count *))v1303->__on_zero_shared)(v1303);
            std::__shared_weak_count::__release_weak(v1303);
          }
        }
        MEMORY[0x227684CE8](v1299, 0x10F0C40B62ED6C6);
      }
    }
    v1306 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v1307 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v1308 = __ldaxr(v1307);
      while (__stlxr(v1308 - 1, v1307));
      if (!v1308)
      {
        ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
        std::__shared_weak_count::__release_weak(v1306);
      }
    }
    v1309 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v1310 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v1311 = __ldaxr(v1310);
      while (__stlxr(v1311 - 1, v1310));
      if (!v1311)
      {
        ((void (*)(std::__shared_weak_count *))v1309->__on_zero_shared)(v1309);
        std::__shared_weak_count::__release_weak(v1309);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1279, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = v1266;
    v1312 = (void *)_os_log_send_and_compose_impl();
    if (v1312)
      free(v1312);
  }
  if (v1263)
  {
    sub_22322C138((uint64_t)&v1382, "VerifySceneQueryState: %d keyframe segmentations are unknown in keyframing state.", v1266);
    sub_223182C08((uint64_t)&v1382);
  }
  sub_223182C08((uint64_t)&v1382);
  v1313 = v1390;
  if (v1390)
  {
    v1314 = (unint64_t *)&v1390->__shared_owners_;
    do
      v1315 = __ldaxr(v1314);
    while (__stlxr(v1315 - 1, v1314));
    if (!v1315)
    {
      ((void (*)(std::__shared_weak_count *))v1313->__on_zero_shared)(v1313);
      std::__shared_weak_count::__release_weak(v1313);
    }
  }
  return 1;
}

void sub_223441C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x2B7]) < 0)
      operator delete((void *)STACK[0x2A0]);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223441D44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CACB0);
  _Unwind_Resume(a1);
}

void sub_223441D60()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 184))
  {
    if (*(char *)(v0 - 185) < 0)
      JUMPOUT(0x223441D78);
  }
  JUMPOUT(0x223441D84);
}

void sub_223441D94(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_2540CACB0);
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223441DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)(v60 - 208));
  sub_22319A054((uint64_t *)(v60 - 160));
  sub_223199DE8((uint64_t)&STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223441EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223441F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)(v60 - 208));
  sub_22319A054((uint64_t *)&STACK[0x278]);
  sub_223199DE8((uint64_t)&STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223441F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_223199DE8((uint64_t)&STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223441F60(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441F68(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441F70(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441F78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441F80()
{
  if (LOBYTE(STACK[0x2C0]) && SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223441FB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441FBC()
{
  if (LOBYTE(STACK[0x2C0]) && SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223441FF0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223441FF8()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_2234421B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234421C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234421D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234421EC()
{
  if (LOBYTE(STACK[0x2C0]) && SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442220(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442254(_Unwind_Exception *a1)
{
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223442270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v72;

  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    sub_223199DE8(v72 - 160);
    sub_223182DAC((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223442B38);
}

void sub_22344247C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)&STACK[0x2A0]);
  sub_22319A054((uint64_t *)(v60 - 160));
  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234424A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234424C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223447208((uint64_t)&STACK[0x2A0]);
  sub_223199DE8(v60 - 160);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234424F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234424F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442538()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442544()
{
  JUMPOUT(0x223442878);
}

void sub_22344254C()
{
  JUMPOUT(0x223442578);
}

void sub_223442554()
{
  JUMPOUT(0x223442564);
}

void sub_223442588(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442590(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_22344259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234425C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_2234425E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)(v60 - 208));
  sub_22319A054((uint64_t *)&STACK[0x278]);
  sub_223199DE8((uint64_t)&STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_223199DE8((uint64_t)&STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_22344262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  int v61;
  uint64_t v62;

  if (v61 < 0)
    operator delete(v60);
  sub_223199DE8(v62 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  MEMORY[0x227684CE8](v60, 0x10D0C40B950D02ALL);
  sub_223182DAC(&a60);
  _Unwind_Resume(a1);
}

void sub_223442660()
{
  JUMPOUT(0x22344268CLL);
}

void sub_223442668()
{
  JUMPOUT(0x223442678);
}

void sub_22344269C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234426A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234426AC()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_2234426B8()
{
  JUMPOUT(0x2234428D8);
}

void sub_2234426CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)&STACK[0x2A0]);
  sub_22319A054((uint64_t *)(v60 - 160));
  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_22344274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_2234470C4((uint64_t)&STACK[0x2A0]);
  sub_223199DE8(v60 - 160);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  MEMORY[0x227684CE8](v60, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442784()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442790()
{
  JUMPOUT(0x22344292CLL);
}

void sub_223442798()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_2234427A4()
{
  JUMPOUT(0x223442978);
}

void sub_2234427B0()
{
  JUMPOUT(0x2234427DCLL);
}

void sub_2234427B8()
{
  JUMPOUT(0x2234427C8);
}

void sub_2234427EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234427F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442800(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442808()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442814()
{
  JUMPOUT(0x2234429CCLL);
}

void sub_223442824(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442830(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442844(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_22344284C()
{
  JUMPOUT(0x223442878);
}

void sub_223442854()
{
  JUMPOUT(0x223442864);
}

void sub_223442888(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442890(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234428AC()
{
  JUMPOUT(0x2234428D8);
}

void sub_2234428B4()
{
  JUMPOUT(0x2234428C4);
}

void sub_2234428E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234428F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442900()
{
  JUMPOUT(0x22344292CLL);
}

void sub_223442908()
{
  JUMPOUT(0x223442918);
}

void sub_22344293C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442944(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_22344294C()
{
  JUMPOUT(0x223442978);
}

void sub_223442954()
{
  JUMPOUT(0x223442964);
}

void sub_223442988(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442990(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234429A0()
{
  JUMPOUT(0x2234429CCLL);
}

void sub_2234429A8()
{
  JUMPOUT(0x2234429B8);
}

void sub_2234429DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_2234429E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)&STACK[0x2A0]);
  sub_22319A054((uint64_t *)(v60 - 160));
  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223442A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  sub_2231A87A4((uint64_t)&STACK[0x2A0]);
  sub_223199DE8(v60 - 160);
  sub_223182DAC((uint64_t)&a60);
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223442A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  sub_223182DAC((uint64_t)&a60);
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223442A94()
{
  JUMPOUT(0x223442BB0);
}

void sub_223442A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442AB8()
{
  JUMPOUT(0x223442AC0);
}

void sub_223442AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_2231A87A4((uint64_t)&STACK[0x2A0]);
  sub_223199DE8(v60 - 160);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319A054((uint64_t *)&STACK[0x2A0]);
  sub_22319A054((uint64_t *)(v60 - 160));
  sub_223199DE8(v60 - 208);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223199DE8(v60 - 160);
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442B58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442B60()
{
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442B68()
{
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442B7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442B84()
{
  JUMPOUT(0x223442BB0);
}

void sub_223442B8C()
{
  JUMPOUT(0x223442B9CLL);
}

void sub_223442BC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442BC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442BF8()
{
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  JUMPOUT(0x223442C88);
}

void sub_223442C00()
{
  JUMPOUT(0x223442C10);
}

void sub_223442C34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_223442CB4(a1);
  sub_22316DC48(a1);
}

void sub_223442C48(_Unwind_Exception *a1)
{
  int v1;
  void *v2;

  if (SLOBYTE(STACK[0x2B7]) < 0)
  {
    operator delete((void *)STACK[0x2A0]);
    if ((v1 & 1) == 0)
LABEL_6:
      JUMPOUT(0x223442CB8);
  }
  else if (!v1)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  _Unwind_Resume(a1);
}

void sub_223442C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_223182DAC((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223442C98(_Unwind_Exception *a1)
{
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_223442CB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_223442CC0(_Unwind_Exception *a1)
{
  sub_223198030((uint64_t)&STACK[0x228], (_QWORD *)STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t sub_223442CD8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned __int8 v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v103;
  const char *v104;
  size_t v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  char *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned __int8 **v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v171;
  size_t v172;
  const char *v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  size_t v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  int v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  int v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unsigned __int8 *v225;
  int v226;
  uint64_t ***v227;
  uint64_t **v228;
  unsigned __int8 *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t **v232;
  unsigned __int8 *v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  const char *v240;
  size_t v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  const char *v244;
  size_t v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  NSObject *v250;
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  char *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  const char *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v303;
  const char *v304;
  size_t v305;
  unsigned __int8 v306;
  const char *v307;
  size_t v308;
  _BYTE *v309;
  uint64_t v310;
  uint64_t v311;
  _BYTE *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  NSObject *v316;
  size_t v317;
  std::__shared_weak_count_vtbl *v318;
  std::__shared_weak_count *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  _DWORD *v325;
  uint64_t v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  void *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unsigned __int8 *v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  uint64_t *v359;
  int v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v364;
  uint64_t v365;
  size_t v366;
  const char *v367;
  unsigned __int8 v368;
  const char *v369;
  size_t v370;
  _BYTE *v371;
  unint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE *v377;
  uint64_t v378;
  uint64_t v379;
  NSObject *v380;
  size_t v381;
  void *v382;
  _QWORD *v383;
  size_t v384;
  size_t v385;
  void *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  _QWORD *v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v439;
  _QWORD *v440;
  const char *__dst;
  uint64_t v442;
  int v443;
  uint64_t v444;
  const char *v445;
  const char *v446;
  unsigned __int8 *v447;
  unsigned int v448;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  uint64_t v452;
  int v453;
  unsigned __int8 *v454;
  int v455;
  uint64_t v456;
  int v457;
  int v458;
  unsigned __int8 *v460;
  const char *v461;
  int v462;
  int v463;
  uint64_t ***v464;
  const char *v465;
  uint64_t v466;
  const char *v467;
  char *v468;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v470;
  int v471;
  const char *v472;
  int v473;
  const char *v474;
  uint64_t v475;
  std::__shared_weak_count *v476;
  uint64_t v477;
  _BYTE v478[30];
  char v479[8];
  __int128 v480;
  _BYTE object[24];
  _BYTE v482[24];
  size_t v483;
  unint64_t v484;
  char v485;
  _BYTE v486[24];
  __int128 v487;
  char *v488;
  char __s[8];
  std::__shared_weak_count_vtbl *v490;
  std::__shared_weak_count *v491;
  char *v492;
  char *v493;
  uint64_t v494;

  v494 = *MEMORY[0x24BDAC8D0];
  if (!a1[6])
    return 0;
  v2 = a2;
  v3 = a1;
  v439 = a1[6];
  v4 = "QueryMeshesENS_9allocatorIS4_EEEE";
  if (a1[4])
  {
    v5 = *(_QWORD **)v439;
    v6 = 0;
    if (*(_QWORD *)v439 != v439 + 8)
    {
      while (1)
      {
        v8 = (unsigned __int8 *)v5[9];
        v7 = (unsigned __int8 *)v5[10];
        if (v8 != v7)
          break;
LABEL_167:
        v83 = (_QWORD *)v5[1];
        if (v83)
        {
          do
          {
            v84 = v83;
            v83 = (_QWORD *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            v84 = (_QWORD *)v5[2];
            v22 = *v84 == (_QWORD)v5;
            v5 = v84;
          }
          while (!v22);
        }
        v5 = v84;
        if (v84 == (_QWORD *)(v439 + 8))
          goto LABEL_173;
      }
      v450 = (unsigned __int8 *)(v5 + 4);
      v454 = (unsigned __int8 *)v5[10];
      while (1)
      {
        v9 = v3[4];
        v12 = *(unsigned __int8 **)(v9 + 8);
        v10 = (unsigned __int8 *)(v9 + 8);
        v11 = v12;
        if (v12)
        {
          v13 = *v8;
          v14 = v10;
          do
          {
            while (1)
            {
              v15 = v11[32];
              v16 = *v8;
              if (v15 != v13)
                break;
              v15 = v11[33];
              v16 = v8[1];
              if (v15 != v16)
                break;
              v15 = v11[34];
              v16 = v8[2];
              if (v15 != v16)
                break;
              v15 = v11[35];
              v16 = v8[3];
              if (v15 != v16)
                break;
              v15 = v11[36];
              v16 = v8[4];
              if (v15 != v16)
                break;
              v15 = v11[37];
              v16 = v8[5];
              if (v15 != v16)
                break;
              v15 = v11[38];
              v16 = v8[6];
              if (v15 != v16)
                break;
              v15 = v11[39];
              v16 = v8[7];
              if (v15 != v16)
                break;
              v15 = v11[40];
              v16 = v8[8];
              if (v15 != v16)
                break;
              v15 = v11[41];
              v16 = v8[9];
              if (v15 != v16)
                break;
              v15 = v11[42];
              v16 = v8[10];
              if (v15 != v16)
                break;
              v15 = v11[43];
              v16 = v8[11];
              if (v15 != v16)
                break;
              v15 = v11[44];
              v16 = v8[12];
              if (v15 != v16)
                break;
              v15 = v11[45];
              v16 = v8[13];
              if (v15 != v16)
                break;
              v15 = v11[46];
              v16 = v8[14];
              if (v15 != v16)
                break;
              v15 = v11[47];
              v16 = v8[15];
              if (v15 != v16)
                break;
              v14 = v11;
              v11 = *(unsigned __int8 **)v11;
              if (!v11)
                goto LABEL_33;
            }
            if (v15 < v16)
              v11 += 8;
            else
              v14 = v11;
            v11 = *(unsigned __int8 **)v11;
          }
          while (v11);
LABEL_33:
          if (v14 != v10)
          {
            v17 = v14[32];
            if (v13 == v17)
            {
              v13 = v8[1];
              v17 = v14[33];
              if (v13 == v17)
              {
                v13 = v8[2];
                v17 = v14[34];
                if (v13 == v17)
                {
                  v13 = v8[3];
                  v17 = v14[35];
                  if (v13 == v17)
                  {
                    v13 = v8[4];
                    v17 = v14[36];
                    if (v13 == v17)
                    {
                      v13 = v8[5];
                      v17 = v14[37];
                      if (v13 == v17)
                      {
                        v13 = v8[6];
                        v17 = v14[38];
                        if (v13 == v17)
                        {
                          v13 = v8[7];
                          v17 = v14[39];
                          if (v13 == v17)
                          {
                            v13 = v8[8];
                            v17 = v14[40];
                            if (v13 == v17)
                            {
                              v13 = v8[9];
                              v17 = v14[41];
                              if (v13 == v17)
                              {
                                v13 = v8[10];
                                v17 = v14[42];
                                if (v13 == v17)
                                {
                                  v13 = v8[11];
                                  v17 = v14[43];
                                  if (v13 == v17)
                                  {
                                    v13 = v8[12];
                                    v17 = v14[44];
                                    if (v13 == v17)
                                    {
                                      v13 = v8[13];
                                      v17 = v14[45];
                                      if (v13 == v17)
                                      {
                                        v13 = v8[14];
                                        v17 = v14[46];
                                        if (v13 == v17)
                                        {
                                          v13 = v8[15];
                                          v17 = v14[47];
                                          if (v13 == v17)
                                            goto LABEL_9;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v13 >= v17)
              goto LABEL_9;
          }
        }
        ++v6;
        if (!*(_BYTE *)(v2 + 1))
          goto LABEL_9;
        v462 = v6;
        v18 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
        {
          sub_22455F53C(&v468);
          sub_223174DE4(object, "cv3dapi.recon3d");
          sub_2232300E0((uint64_t **)&v468, (uint64_t)object, &qword_2540CACA8);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_guard_release(&qword_2540CACB0);
          v2 = a2;
        }
        v477 = qword_2540CACA8;
        if (**(int **)(qword_2540CACA8 + 56) <= 5)
        {
          v19 = *(unsigned __int8 *)(qword_2540CACA8 + 72);
          v20 = sub_22322F254(qword_2540CACA8, "OSLogSurrogateAppender", 1, 0);
          v21 = v20;
          v22 = !v19 && v20 == 0;
          if (!v22)
            break;
        }
LABEL_8:
        v3 = a1;
        v6 = v462;
        v7 = v454;
LABEL_9:
        v8 += 16;
        if (v8 == v7)
          goto LABEL_167;
      }
      v468 = (char *)&v477;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v470 = std::chrono::system_clock::now().__d_.__rep_;
      v471 = 5;
      v472 = "unknown file";
      v473 = 369;
      v474 = "unknown function";
      v475 = 0;
      v476 = 0;
      sub_2245664AC(v450, v479);
      sub_2245664AC(v8, v478);
      v467 = v478;
      v23 = *(_QWORD *)v468;
      v24 = (const char *)(*(_QWORD *)v468 + 16);
      v446 = v24;
      if (*(char *)(*(_QWORD *)v468 + 39) < 0)
      {
        v24 = *(const char **)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v444 = *(_QWORD *)v468;
        v27 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v27 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        v25 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
        v444 = *(_QWORD *)v468;
        v26 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v26 & 1) != 0)
          goto LABEL_62;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v486);
        sub_223199C58("com.apple.cv3d", (unint64_t)v486, &xmmword_255788F40);
        if ((_BYTE)v487 && (v486[23] & 0x80000000) != 0)
          operator delete(*(void **)v486);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_62:
      if (byte_255788F57 >= 0)
        v28 = (const char *)&xmmword_255788F40;
      else
        v28 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v29 = byte_255788F57;
      else
        v29 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v28, v24);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v29 >= 0x17)
      {
        v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v31 = v29 | 7;
        v32 = v31 + 1;
        v30 = operator new(v31 + 1);
        *(_QWORD *)&object[16] = v29;
        *(_QWORD *)v482 = v32 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v30;
      }
      else
      {
        v482[7] = v29;
        v30 = &object[8];
        if (!v29)
        {
LABEL_76:
          v30[v29] = 0;
          v482[8] = 1;
          if (v25 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v25 >= 0x17)
          {
            v35 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v25 | 7) != 0x17)
              v35 = v25 | 7;
            v36 = v35 + 1;
            v33 = operator new(v35 + 1);
            v483 = v25;
            v484 = v36 | 0x8000000000000000;
            *(_QWORD *)&v482[16] = v33;
          }
          else
          {
            HIBYTE(v484) = v25;
            v33 = &v482[16];
            if (!v25)
            {
              v482[16] = 0;
              v485 = 1;
              v34 = *(NSObject **)object;
              if ((SHIBYTE(v484) & 0x80000000) == 0)
                goto LABEL_80;
              goto LABEL_86;
            }
          }
          memmove(v33, v24, v25);
          v33[v25] = 0;
          v485 = 1;
          v34 = *(NSObject **)object;
          if ((SHIBYTE(v484) & 0x80000000) == 0)
          {
LABEL_80:
            if (!v482[8])
              goto LABEL_89;
            goto LABEL_87;
          }
LABEL_86:
          operator delete(*(void **)&v482[16]);
          if (!v482[8])
            goto LABEL_89;
LABEL_87:
          if ((v482[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_89:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v21 || !*(_QWORD *)(v21 + 24))
          {
            os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
            v2 = a2;
            *(_QWORD *)object = 0xD04100402;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = v479;
            *(_WORD *)&object[18] = 1040;
            *(_DWORD *)&object[20] = 13;
            *(_WORD *)v482 = 2080;
            *(_QWORD *)&v482[2] = v467;
            v48 = (void *)_os_log_send_and_compose_impl();
            if (v48)
              free(v48);
            goto LABEL_151;
          }
          v37 = _os_log_pack_size();
          v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
          v39 = (std::__shared_weak_count *)operator new();
          v39->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v39->__shared_weak_owners_ = 0;
          v39[1].__vftable = v38;
          *(_QWORD *)__s = v38;
          v490 = v38;
          v491 = v39;
          v492 = 0;
          v493 = 0;
          sub_223446F28((uint64_t)object, v479, &v467);
          v41 = (char *)operator new(0x50uLL);
          v42 = (std::__shared_weak_count *)v41;
          *((_QWORD *)v41 + 1) = 0;
          v43 = (unint64_t *)(v41 + 8);
          *((_QWORD *)v41 + 2) = 0;
          *(_QWORD *)v41 = &off_24EC20730;
          *((_QWORD *)v41 + 3) = off_24EC20780;
          *((_OWORD *)v41 + 2) = *(_OWORD *)&object[8];
          *((_QWORD *)v41 + 6) = *(_QWORD *)v482;
          *(_OWORD *)(v41 + 56) = *(_OWORD *)&v482[8];
          *((_QWORD *)v41 + 9) = v483;
          v492 = v41 + 24;
          v493 = v41;
          *(_QWORD *)v486 = v38;
          *(_QWORD *)&v486[8] = v38;
          *(_QWORD *)&v486[16] = v39;
          do
            v44 = __ldxr(p_shared_owners);
          while (__stxr(v44 + 1, p_shared_owners));
          *(_QWORD *)&v487 = v41 + 24;
          *((_QWORD *)&v487 + 1) = v41;
          do
            v45 = __ldxr(v43);
          while (__stxr(v45 + 1, v43));
          v488 = v41 + 24;
          do
            v46 = __ldaxr(v43);
          while (__stlxr(v46 - 1, v43));
          if (v46)
          {
            v47 = v491;
            if (!v491)
              goto LABEL_109;
          }
          else
          {
            (*(void (**)(char *))(*(_QWORD *)v41 + 16))(v41);
            std::__shared_weak_count::__release_weak(v42);
            v47 = v491;
            if (!v491)
              goto LABEL_109;
          }
          v49 = (unint64_t *)&v47->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
LABEL_109:
          v51 = *(_QWORD *)v486;
          if (v488[31] >= 0)
            v52 = v488 + 8;
          else
            v52 = (char *)*((_QWORD *)v488 + 1);
          if (v488[55] >= 0)
            v53 = v488 + 32;
          else
            v53 = (char *)*((_QWORD *)v488 + 4);
          v54 = _os_log_pack_fill();
          *(_DWORD *)v54 = 68158466;
          *(_DWORD *)(v54 + 4) = 13;
          *(_WORD *)(v54 + 8) = 2080;
          *(_QWORD *)(v54 + 10) = v52;
          *(_WORD *)(v54 + 18) = 1040;
          *(_DWORD *)(v54 + 20) = 13;
          *(_WORD *)(v54 + 24) = 2080;
          *(_QWORD *)(v54 + 26) = v53;
          v55 = operator new();
          v56 = *(unsigned __int8 *)(v444 + 39);
          v57 = *(const char **)(v444 + 16);
          v58 = *(_QWORD *)(v444 + 24);
          v59 = v487;
          *(_OWORD *)(v55 + 8) = *(_OWORD *)&v486[8];
          if ((v56 & 0x80u) != 0)
            v56 = v58;
          else
            v57 = v446;
          *(_QWORD *)v55 = v51;
          *(_QWORD *)&v486[8] = 0;
          *(_QWORD *)&v486[16] = 0;
          *(_OWORD *)(v55 + 24) = v59;
          v487 = 0uLL;
          *(_QWORD *)(v55 + 40) = v57;
          *(_QWORD *)(v55 + 48) = v56;
          *(_BYTE *)(v55 + 56) = 16;
          *(_QWORD *)__s = 0;
          *(_QWORD *)object = v55;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), object);
          v2 = a2;
          v60 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (!v60)
            goto LABEL_141;
          v61 = *(std::__shared_weak_count **)(v60 + 32);
          if (!v61)
            goto LABEL_123;
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            v64 = *(std::__shared_weak_count **)(v60 + 16);
            if (!v64)
              goto LABEL_129;
          }
          else
          {
LABEL_123:
            v64 = *(std::__shared_weak_count **)(v60 + 16);
            if (!v64)
              goto LABEL_129;
          }
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
LABEL_129:
          MEMORY[0x227684CE8](v60, 0x10F0C40B62ED6C6);
          v67 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (v67)
          {
            v68 = *(std::__shared_weak_count **)(v67 + 32);
            if (!v68)
              goto LABEL_134;
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
              v71 = *(std::__shared_weak_count **)(v67 + 16);
              if (v71)
                goto LABEL_135;
            }
            else
            {
LABEL_134:
              v71 = *(std::__shared_weak_count **)(v67 + 16);
              if (v71)
              {
LABEL_135:
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
            }
            MEMORY[0x227684CE8](v67, 0x10F0C40B62ED6C6);
          }
LABEL_141:
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
          if (!*((_QWORD *)&v487 + 1))
            goto LABEL_145;
          v75 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
            v77 = *(std::__shared_weak_count **)&v486[16];
            if (*(_QWORD *)&v486[16])
              goto LABEL_146;
          }
          else
          {
LABEL_145:
            v77 = *(std::__shared_weak_count **)&v486[16];
            if (*(_QWORD *)&v486[16])
            {
LABEL_146:
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
LABEL_151:
          if (v19)
          {
            sub_2245664AC(v450, object);
            sub_2245664AC(v8, v486);
            sub_22322C138((uint64_t)&v468, "VerifySceneQueryState: room %.13s is observed from kf %.13s that is unknown in keyframing state.", object, v486);
            sub_223182C08((uint64_t)&v468);
          }
          sub_223182C08((uint64_t)&v468);
          v80 = v476;
          if (v476)
          {
            v81 = (unint64_t *)&v476->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          goto LABEL_8;
        }
      }
      memmove(v30, v28, v29);
      goto LABEL_76;
    }
LABEL_173:
    v463 = v6;
    v85 = *(_QWORD **)(v439 + 24);
    if (v85 != (_QWORD *)(v439 + 32))
    {
      v86 = 0;
      while (1)
      {
        v88 = (unsigned __int8 *)v85[9];
        v87 = (unsigned __int8 *)v85[10];
        if (v88 != v87)
          break;
LABEL_337:
        v163 = (_QWORD *)v85[1];
        if (v163)
        {
          do
          {
            v164 = v163;
            v163 = (_QWORD *)*v163;
          }
          while (v163);
        }
        else
        {
          do
          {
            v164 = (_QWORD *)v85[2];
            v22 = *v164 == (_QWORD)v85;
            v85 = v164;
          }
          while (!v22);
        }
        v85 = v164;
        if (v164 == (_QWORD *)(v439 + 32))
          goto LABEL_347;
      }
      v447 = (unsigned __int8 *)(v85 + 4);
      v451 = (unsigned __int8 *)v85[10];
      while (1)
      {
        v89 = v3[4];
        v92 = *(unsigned __int8 **)(v89 + 8);
        v90 = (unsigned __int8 *)(v89 + 8);
        v91 = v92;
        if (v92)
        {
          v93 = *v88;
          v94 = v90;
          do
          {
            while (1)
            {
              v95 = v91[32];
              v96 = *v88;
              if (v95 != v93)
                break;
              v95 = v91[33];
              v96 = v88[1];
              if (v95 != v96)
                break;
              v95 = v91[34];
              v96 = v88[2];
              if (v95 != v96)
                break;
              v95 = v91[35];
              v96 = v88[3];
              if (v95 != v96)
                break;
              v95 = v91[36];
              v96 = v88[4];
              if (v95 != v96)
                break;
              v95 = v91[37];
              v96 = v88[5];
              if (v95 != v96)
                break;
              v95 = v91[38];
              v96 = v88[6];
              if (v95 != v96)
                break;
              v95 = v91[39];
              v96 = v88[7];
              if (v95 != v96)
                break;
              v95 = v91[40];
              v96 = v88[8];
              if (v95 != v96)
                break;
              v95 = v91[41];
              v96 = v88[9];
              if (v95 != v96)
                break;
              v95 = v91[42];
              v96 = v88[10];
              if (v95 != v96)
                break;
              v95 = v91[43];
              v96 = v88[11];
              if (v95 != v96)
                break;
              v95 = v91[44];
              v96 = v88[12];
              if (v95 != v96)
                break;
              v95 = v91[45];
              v96 = v88[13];
              if (v95 != v96)
                break;
              v95 = v91[46];
              v96 = v88[14];
              if (v95 != v96)
                break;
              v95 = v91[47];
              v96 = v88[15];
              if (v95 != v96)
                break;
              v94 = v91;
              v91 = *(unsigned __int8 **)v91;
              if (!v91)
                goto LABEL_203;
            }
            if (v95 < v96)
              v91 += 8;
            else
              v94 = v91;
            v91 = *(unsigned __int8 **)v91;
          }
          while (v91);
LABEL_203:
          if (v94 != v90)
          {
            v97 = v94[32];
            if (v93 == v97)
            {
              v93 = v88[1];
              v97 = v94[33];
              if (v93 == v97)
              {
                v93 = v88[2];
                v97 = v94[34];
                if (v93 == v97)
                {
                  v93 = v88[3];
                  v97 = v94[35];
                  if (v93 == v97)
                  {
                    v93 = v88[4];
                    v97 = v94[36];
                    if (v93 == v97)
                    {
                      v93 = v88[5];
                      v97 = v94[37];
                      if (v93 == v97)
                      {
                        v93 = v88[6];
                        v97 = v94[38];
                        if (v93 == v97)
                        {
                          v93 = v88[7];
                          v97 = v94[39];
                          if (v93 == v97)
                          {
                            v93 = v88[8];
                            v97 = v94[40];
                            if (v93 == v97)
                            {
                              v93 = v88[9];
                              v97 = v94[41];
                              if (v93 == v97)
                              {
                                v93 = v88[10];
                                v97 = v94[42];
                                if (v93 == v97)
                                {
                                  v93 = v88[11];
                                  v97 = v94[43];
                                  if (v93 == v97)
                                  {
                                    v93 = v88[12];
                                    v97 = v94[44];
                                    if (v93 == v97)
                                    {
                                      v93 = v88[13];
                                      v97 = v94[45];
                                      if (v93 == v97)
                                      {
                                        v93 = v88[14];
                                        v97 = v94[46];
                                        if (v93 == v97)
                                        {
                                          v93 = v88[15];
                                          v97 = v94[47];
                                          if (v93 == v97)
                                            goto LABEL_179;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v93 >= v97)
              goto LABEL_179;
          }
        }
        ++v86;
        if (!*(_BYTE *)(v2 + 1))
          goto LABEL_179;
        v455 = v86;
        v98 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
        if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
        {
          sub_22455F53C(&v468);
          sub_223174DE4(object, "cv3dapi.recon3d");
          sub_2232300E0((uint64_t **)&v468, (uint64_t)object, &qword_2540CACA8);
          if ((object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_guard_release(&qword_2540CACB0);
          v2 = a2;
        }
        v477 = qword_2540CACA8;
        if (**(int **)(qword_2540CACA8 + 56) <= 5)
        {
          v99 = *(unsigned __int8 *)(qword_2540CACA8 + 72);
          v100 = sub_22322F254(qword_2540CACA8, "OSLogSurrogateAppender", 1, 0);
          v101 = v100;
          if (v99 || v100 != 0)
            break;
        }
LABEL_178:
        v86 = v455;
        v3 = a1;
        v87 = v451;
LABEL_179:
        v88 += 16;
        if (v88 == v87)
          goto LABEL_337;
      }
      v468 = (char *)&v477;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v470 = std::chrono::system_clock::now().__d_.__rep_;
      v471 = 5;
      v472 = "unknown file";
      v473 = 384;
      v474 = "unknown function";
      v475 = 0;
      v476 = 0;
      sub_2245664AC(v447, v479);
      sub_2245664AC(v88, v478);
      v467 = v478;
      v103 = *(_QWORD *)v468;
      v104 = (const char *)(*(_QWORD *)v468 + 16);
      v445 = v104;
      if (*(char *)(*(_QWORD *)v468 + 39) < 0)
      {
        v104 = *(const char **)(v103 + 16);
        v105 = *(_QWORD *)(v103 + 24);
        v442 = *(_QWORD *)v468;
        v107 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v107 & 1) != 0)
          goto LABEL_232;
      }
      else
      {
        v105 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
        v442 = *(_QWORD *)v468;
        v106 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v106 & 1) != 0)
          goto LABEL_232;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)v486);
        sub_223199C58("com.apple.cv3d", (unint64_t)v486, &xmmword_255788F40);
        if ((_BYTE)v487 && (v486[23] & 0x80000000) != 0)
          operator delete(*(void **)v486);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_232:
      if (byte_255788F57 >= 0)
        v108 = (const char *)&xmmword_255788F40;
      else
        v108 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v109 = byte_255788F57;
      else
        v109 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v108, v104);
      if (v109 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v109 >= 0x17)
      {
        v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v109 | 7) != 0x17)
          v111 = v109 | 7;
        v112 = v111 + 1;
        v110 = operator new(v111 + 1);
        *(_QWORD *)&object[16] = v109;
        *(_QWORD *)v482 = v112 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v110;
      }
      else
      {
        v482[7] = v109;
        v110 = &object[8];
        if (!v109)
        {
LABEL_246:
          v110[v109] = 0;
          v482[8] = 1;
          if (v105 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v105 >= 0x17)
          {
            v115 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v105 | 7) != 0x17)
              v115 = v105 | 7;
            v116 = v115 + 1;
            v113 = operator new(v115 + 1);
            v483 = v105;
            v484 = v116 | 0x8000000000000000;
            *(_QWORD *)&v482[16] = v113;
          }
          else
          {
            HIBYTE(v484) = v105;
            v113 = &v482[16];
            if (!v105)
            {
              v482[16] = 0;
              v485 = 1;
              v114 = *(NSObject **)object;
              if ((SHIBYTE(v484) & 0x80000000) == 0)
                goto LABEL_250;
              goto LABEL_256;
            }
          }
          memmove(v113, v104, v105);
          v113[v105] = 0;
          v485 = 1;
          v114 = *(NSObject **)object;
          if ((SHIBYTE(v484) & 0x80000000) == 0)
          {
LABEL_250:
            if (!v482[8])
              goto LABEL_259;
            goto LABEL_257;
          }
LABEL_256:
          operator delete(*(void **)&v482[16]);
          if (!v482[8])
            goto LABEL_259;
LABEL_257:
          if ((v482[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
LABEL_259:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v101 || !*(_QWORD *)(v101 + 24))
          {
            os_log_type_enabled(v114, OS_LOG_TYPE_ERROR);
            *(_QWORD *)object = 0xD04100402;
            *(_WORD *)&object[8] = 2080;
            *(_QWORD *)&object[10] = v479;
            *(_WORD *)&object[18] = 1040;
            *(_DWORD *)&object[20] = 13;
            *(_WORD *)v482 = 2080;
            *(_QWORD *)&v482[2] = v467;
            v128 = (void *)_os_log_send_and_compose_impl();
            v2 = a2;
            if (v128)
              free(v128);
            goto LABEL_321;
          }
          v117 = _os_log_pack_size();
          v118 = (std::__shared_weak_count_vtbl *)operator new(v117, (std::align_val_t)8uLL);
          v119 = (std::__shared_weak_count *)operator new();
          v119->__shared_owners_ = 0;
          v120 = (unint64_t *)&v119->__shared_owners_;
          v119->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v119->__shared_weak_owners_ = 0;
          v119[1].__vftable = v118;
          *(_QWORD *)__s = v118;
          v490 = v118;
          v491 = v119;
          v492 = 0;
          v493 = 0;
          sub_223446F28((uint64_t)object, v479, &v467);
          v121 = (char *)operator new(0x50uLL);
          v122 = (std::__shared_weak_count *)v121;
          *((_QWORD *)v121 + 1) = 0;
          v123 = (unint64_t *)(v121 + 8);
          *((_QWORD *)v121 + 2) = 0;
          *(_QWORD *)v121 = &off_24EC20730;
          *((_QWORD *)v121 + 3) = off_24EC20780;
          *((_OWORD *)v121 + 2) = *(_OWORD *)&object[8];
          *((_QWORD *)v121 + 6) = *(_QWORD *)v482;
          *(_OWORD *)(v121 + 56) = *(_OWORD *)&v482[8];
          *((_QWORD *)v121 + 9) = v483;
          v492 = v121 + 24;
          v493 = v121;
          *(_QWORD *)v486 = v118;
          *(_QWORD *)&v486[8] = v118;
          *(_QWORD *)&v486[16] = v119;
          do
            v124 = __ldxr(v120);
          while (__stxr(v124 + 1, v120));
          *(_QWORD *)&v487 = v121 + 24;
          *((_QWORD *)&v487 + 1) = v121;
          do
            v125 = __ldxr(v123);
          while (__stxr(v125 + 1, v123));
          v488 = v121 + 24;
          do
            v126 = __ldaxr(v123);
          while (__stlxr(v126 - 1, v123));
          if (v126)
          {
            v127 = v491;
            if (!v491)
              goto LABEL_279;
          }
          else
          {
            (*(void (**)(char *))(*(_QWORD *)v121 + 16))(v121);
            std::__shared_weak_count::__release_weak(v122);
            v127 = v491;
            if (!v491)
              goto LABEL_279;
          }
          v129 = (unint64_t *)&v127->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
LABEL_279:
          v131 = *(_QWORD *)v486;
          if (v488[31] >= 0)
            v132 = v488 + 8;
          else
            v132 = (char *)*((_QWORD *)v488 + 1);
          if (v488[55] >= 0)
            v133 = v488 + 32;
          else
            v133 = (char *)*((_QWORD *)v488 + 4);
          v134 = _os_log_pack_fill();
          *(_DWORD *)v134 = 68158466;
          *(_DWORD *)(v134 + 4) = 13;
          *(_WORD *)(v134 + 8) = 2080;
          *(_QWORD *)(v134 + 10) = v132;
          *(_WORD *)(v134 + 18) = 1040;
          *(_DWORD *)(v134 + 20) = 13;
          *(_WORD *)(v134 + 24) = 2080;
          *(_QWORD *)(v134 + 26) = v133;
          v135 = operator new();
          v136 = *(unsigned __int8 *)(v442 + 39);
          v137 = *(const char **)(v442 + 16);
          v138 = *(_QWORD *)(v442 + 24);
          v139 = v487;
          *(_OWORD *)(v135 + 8) = *(_OWORD *)&v486[8];
          if ((v136 & 0x80u) != 0)
            v136 = v138;
          else
            v137 = v445;
          *(_QWORD *)v135 = v131;
          *(_QWORD *)&v486[8] = 0;
          *(_QWORD *)&v486[16] = 0;
          *(_OWORD *)(v135 + 24) = v139;
          v487 = 0uLL;
          *(_QWORD *)(v135 + 40) = v137;
          *(_QWORD *)(v135 + 48) = v136;
          *(_BYTE *)(v135 + 56) = 16;
          *(_QWORD *)__s = 0;
          *(_QWORD *)object = v135;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v101 + 24) + 40))(*(_QWORD *)(v101 + 24), object);
          v2 = a2;
          v140 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (!v140)
            goto LABEL_311;
          v141 = *(std::__shared_weak_count **)(v140 + 32);
          if (!v141)
            goto LABEL_293;
          v142 = (unint64_t *)&v141->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
            v144 = *(std::__shared_weak_count **)(v140 + 16);
            if (!v144)
              goto LABEL_299;
          }
          else
          {
LABEL_293:
            v144 = *(std::__shared_weak_count **)(v140 + 16);
            if (!v144)
              goto LABEL_299;
          }
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
LABEL_299:
          MEMORY[0x227684CE8](v140, 0x10F0C40B62ED6C6);
          v147 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (v147)
          {
            v148 = *(std::__shared_weak_count **)(v147 + 32);
            if (!v148)
              goto LABEL_304;
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
              v151 = *(std::__shared_weak_count **)(v147 + 16);
              if (v151)
                goto LABEL_305;
            }
            else
            {
LABEL_304:
              v151 = *(std::__shared_weak_count **)(v147 + 16);
              if (v151)
              {
LABEL_305:
                v152 = (unint64_t *)&v151->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            MEMORY[0x227684CE8](v147, 0x10F0C40B62ED6C6);
          }
LABEL_311:
          v154 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
          if (!*((_QWORD *)&v487 + 1))
            goto LABEL_315;
          v155 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
            v157 = *(std::__shared_weak_count **)&v486[16];
            if (*(_QWORD *)&v486[16])
              goto LABEL_316;
          }
          else
          {
LABEL_315:
            v157 = *(std::__shared_weak_count **)&v486[16];
            if (*(_QWORD *)&v486[16])
            {
LABEL_316:
              v158 = (unint64_t *)&v157->__shared_owners_;
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
LABEL_321:
          if (v99)
          {
            sub_2245664AC(v447, object);
            sub_2245664AC(v88, v486);
            sub_22322C138((uint64_t)&v468, "VerifySceneQueryState: no-kf-room %.13s is observed from kf %.13s that is unknown in keyframing state.", object, v486);
            sub_223182C08((uint64_t)&v468);
          }
          sub_223182C08((uint64_t)&v468);
          v160 = v476;
          if (v476)
          {
            v161 = (unint64_t *)&v476->__shared_owners_;
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          goto LABEL_178;
        }
      }
      memmove(v110, v108, v109);
      goto LABEL_246;
    }
    v86 = 0;
LABEL_347:
    if (v463 > 0)
    {
      sub_223446D5C(v479);
      v4 = "QueryMeshesENS_9allocatorIS4_EEEE";
      if (**(int **)(*(_QWORD *)v479 + 56) > 5)
        goto LABEL_441;
      v167 = *(unsigned __int8 *)(*(_QWORD *)v479 + 72);
      v168 = sub_22322F254(*(uint64_t *)v479, "OSLogSurrogateAppender", 1, 0);
      v169 = v168;
      if (!v167 && v168 == 0)
        goto LABEL_441;
      v468 = v479;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v470 = std::chrono::system_clock::now().__d_.__rep_;
      v471 = 5;
      v472 = "unknown file";
      v473 = 395;
      v475 = 0;
      v476 = 0;
      v474 = "unknown function";
      v171 = *(_QWORD *)v468;
      if (*(char *)(*(_QWORD *)v468 + 39) < 0)
      {
        v173 = *(const char **)(v171 + 16);
        v172 = *(_QWORD *)(v171 + 24);
      }
      else
      {
        v172 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
        v173 = (const char *)(*(_QWORD *)v468 + 16);
      }
      v452 = *(_QWORD *)v468;
      v456 = *(_QWORD *)v468 + 16;
      v174 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
        if (v482[0] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F57 >= 0)
        v175 = (const char *)&xmmword_255788F40;
      else
        v175 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v176 = byte_255788F57;
      else
        v176 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)object = os_log_create(v175, v173);
      v177 = &object[8];
      if (v176 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v176 >= 0x17)
      {
        v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v176 | 7) != 0x17)
          v178 = v176 | 7;
        v179 = v178 + 1;
        v177 = operator new(v178 + 1);
        *(_QWORD *)&object[16] = v176;
        *(_QWORD *)v482 = v179 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v177;
        v4 = "QueryMeshesENS_9allocatorIS4_EEEE";
      }
      else
      {
        v482[7] = v176;
        if (!v176)
        {
LABEL_373:
          v177[v176] = 0;
          v482[8] = 1;
          v180 = &v482[16];
          if (v172 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v172 >= 0x17)
          {
            v181 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v172 | 7) != 0x17)
              v181 = v172 | 7;
            v182 = v181 + 1;
            v180 = operator new(v181 + 1);
            v483 = v172;
            v484 = v182 | 0x8000000000000000;
            *(_QWORD *)&v482[16] = v180;
            v3 = a1;
          }
          else
          {
            HIBYTE(v484) = v172;
            v3 = a1;
            if (!v172)
              goto LABEL_381;
          }
          memmove(v180, v173, v172);
LABEL_381:
          v180[v172] = 0;
          v485 = 1;
          v183 = *(NSObject **)object;
          if (SHIBYTE(v484) < 0)
            operator delete(*(void **)&v482[16]);
          if (v482[8] && (v482[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v169 && *(_QWORD *)(v169 + 24))
          {
            v184 = _os_log_pack_size();
            v185 = (std::__shared_weak_count_vtbl *)operator new(v184, (std::align_val_t)8uLL);
            v186 = (std::__shared_weak_count *)operator new();
            v187 = v186;
            v186->__shared_owners_ = 0;
            v188 = (unint64_t *)&v186->__shared_owners_;
            v186->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v186->__shared_weak_owners_ = 0;
            v186[1].__vftable = v185;
            *(_QWORD *)object = v185;
            *(_QWORD *)&object[8] = v185;
            *(_QWORD *)&object[16] = v186;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
            memset(v482, 0, sizeof(v482));
            do
              v190 = __ldaxr(v188);
            while (__stlxr(v190 - 1, v188));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v187);
            }
            v191 = *(_QWORD *)object;
            v192 = _os_log_pack_fill();
            *(_DWORD *)v192 = 67109376;
            *(_DWORD *)(v192 + 4) = v463;
            *(_WORD *)(v192 + 8) = 1024;
            *(_DWORD *)(v192 + 10) = v86;
            v193 = operator new();
            v194 = v86;
            v195 = *(unsigned __int8 *)(v452 + 39);
            v196 = *(_QWORD *)(v452 + 16);
            v197 = *(_QWORD *)(v452 + 24);
            v198 = *(_OWORD *)v482;
            *(_OWORD *)(v193 + 8) = *(_OWORD *)&object[8];
            if ((v195 & 0x80u) != 0)
              v195 = v197;
            else
              v196 = v456;
            *(_QWORD *)v193 = v191;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v193 + 24) = v198;
            *(_QWORD *)v482 = 0;
            *(_QWORD *)&v482[8] = 0;
            *(_QWORD *)(v193 + 40) = v196;
            *(_QWORD *)(v193 + 48) = v195;
            *(_BYTE *)(v193 + 56) = 16;
            *(_QWORD *)__s = 0;
            *(_QWORD *)v486 = v193;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v169 + 24) + 40))(*(_QWORD *)(v169 + 24), v486);
            v199 = *(_QWORD *)v486;
            *(_QWORD *)v486 = 0;
            v3 = a1;
            v200 = v463;
            if (v199)
            {
              v201 = *(std::__shared_weak_count **)(v199 + 32);
              if (v201)
              {
                v202 = (unint64_t *)&v201->__shared_owners_;
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              v204 = *(std::__shared_weak_count **)(v199 + 16);
              if (v204)
              {
                v205 = (unint64_t *)&v204->__shared_owners_;
                do
                  v206 = __ldaxr(v205);
                while (__stlxr(v206 - 1, v205));
                if (!v206)
                {
                  ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                  std::__shared_weak_count::__release_weak(v204);
                }
              }
              MEMORY[0x227684CE8](v199, 0x10F0C40B62ED6C6);
              v207 = *(_QWORD *)__s;
              *(_QWORD *)__s = 0;
              if (v207)
              {
                v208 = *(std::__shared_weak_count **)(v207 + 32);
                if (v208)
                {
                  v209 = (unint64_t *)&v208->__shared_owners_;
                  do
                    v210 = __ldaxr(v209);
                  while (__stlxr(v210 - 1, v209));
                  if (!v210)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v208);
                  }
                }
                v211 = *(std::__shared_weak_count **)(v207 + 16);
                if (v211)
                {
                  v212 = (unint64_t *)&v211->__shared_owners_;
                  do
                    v213 = __ldaxr(v212);
                  while (__stlxr(v213 - 1, v212));
                  if (!v213)
                  {
                    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                    std::__shared_weak_count::__release_weak(v211);
                  }
                }
                MEMORY[0x227684CE8](v207, 0x10F0C40B62ED6C6);
              }
            }
            v214 = *(std::__shared_weak_count **)&v482[8];
            if (*(_QWORD *)&v482[8])
            {
              v215 = (unint64_t *)(*(_QWORD *)&v482[8] + 8);
              do
                v216 = __ldaxr(v215);
              while (__stlxr(v216 - 1, v215));
              if (!v216)
              {
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
              }
            }
            v217 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v218 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v219 = __ldaxr(v218);
              while (__stlxr(v219 - 1, v218));
              if (!v219)
              {
                ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                std::__shared_weak_count::__release_weak(v217);
              }
            }
          }
          else
          {
            os_log_type_enabled(v183, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 67109376;
            v220 = v86;
            v200 = v463;
            *(_DWORD *)&object[4] = v463;
            *(_WORD *)&object[8] = 1024;
            v194 = v220;
            *(_DWORD *)&object[10] = v220;
            v221 = (void *)_os_log_send_and_compose_impl();
            if (v221)
              free(v221);
          }
          if (v167)
          {
            sub_22322C138((uint64_t)&v468, "VerifySceneQueryState: %d keyframes observing rooms are unknown in keyframing state (for non-kf-rooms: %d).", v200, v194);
            sub_223182C08((uint64_t)&v468);
          }
          sub_223182C08((uint64_t)&v468);
          v222 = v476;
          if (v476)
          {
            v223 = (unint64_t *)&v476->__shared_owners_;
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 - 1, v223));
            if (!v224)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
LABEL_441:
          v165 = 1;
          v2 = a2;
          v166 = (unsigned __int8 **)v3[2];
          if (!v166)
            goto LABEL_698;
          goto LABEL_442;
        }
      }
      memmove(v177, v175, v176);
      goto LABEL_373;
    }
    v165 = 0;
    v4 = "NSt3__120__shared_ptr_emplaceIN4cv3d5recon11scene_query16SceneQueryMeshesENS_9allocatorIS4_EEEE" + 62;
    v166 = (unsigned __int8 **)v3[2];
    if (!v166)
      goto LABEL_698;
  }
  else
  {
    v165 = 0;
    v166 = (unsigned __int8 **)a1[2];
    if (!v166)
      goto LABEL_698;
  }
LABEL_442:
  v225 = *v166;
  v460 = v166[1];
  if (*v166 == v460)
    goto LABEL_698;
  v226 = 0;
  v227 = (uint64_t ***)(v439 + 8);
  v464 = (uint64_t ***)(v439 + 32);
  v443 = *((_QWORD *)v4 + 65);
  v448 = v165;
  do
  {
    if (v225[140])
    {
      v228 = *v227;
      if (!*v227)
        goto LABEL_472;
      v229 = (unsigned __int8 *)(v439 + 8);
      do
      {
        v230 = *((unsigned __int8 *)v228 + 32);
        v231 = v225[124];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 33);
        v231 = v225[125];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 34);
        v231 = v225[126];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 35);
        v231 = v225[127];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 36);
        v231 = v225[128];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 37);
        v231 = v225[129];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 38);
        v231 = v225[130];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 39);
        v231 = v225[131];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 40);
        v231 = v225[132];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 41);
        v231 = v225[133];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 42);
        v231 = v225[134];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 43);
        v231 = v225[135];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 44);
        v231 = v225[136];
        if (v230 != v231)
          goto LABEL_466;
        v230 = *((unsigned __int8 *)v228 + 45);
        v231 = v225[137];
        if (v230 == v231
          && (v230 = *((unsigned __int8 *)v228 + 46), v231 = v225[138], v230 == v231)
          && (v230 = *((unsigned __int8 *)v228 + 47), v231 = v225[139], v230 == v231))
        {
          v229 = (unsigned __int8 *)v228;
        }
        else
        {
LABEL_466:
          if (v230 < v231)
            ++v228;
          else
            v229 = (unsigned __int8 *)v228;
        }
        v228 = (uint64_t **)*v228;
      }
      while (v228);
      if (v229 == (unsigned __int8 *)v227 || (char)sub_22319835C(v225 + 124, v229 + 32) < 0)
      {
LABEL_472:
        v232 = *v464;
        if (!*v464)
          goto LABEL_857;
        v233 = (unsigned __int8 *)(v439 + 32);
        do
        {
          v234 = *((unsigned __int8 *)v232 + 32);
          v235 = v225[124];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 33);
          v235 = v225[125];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 34);
          v235 = v225[126];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 35);
          v235 = v225[127];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 36);
          v235 = v225[128];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 37);
          v235 = v225[129];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 38);
          v235 = v225[130];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 39);
          v235 = v225[131];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 40);
          v235 = v225[132];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 41);
          v235 = v225[133];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 42);
          v235 = v225[134];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 43);
          v235 = v225[135];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 44);
          v235 = v225[136];
          if (v234 != v235)
            goto LABEL_491;
          v234 = *((unsigned __int8 *)v232 + 45);
          v235 = v225[137];
          if (v234 == v235
            && (v234 = *((unsigned __int8 *)v232 + 46), v235 = v225[138], v234 == v235)
            && (v234 = *((unsigned __int8 *)v232 + 47), v235 = v225[139], v234 == v235))
          {
            v233 = (unsigned __int8 *)v232;
          }
          else
          {
LABEL_491:
            if (v234 < v235)
              ++v232;
            else
              v233 = (unsigned __int8 *)v232;
          }
          v232 = (uint64_t **)*v232;
        }
        while (v232);
        if (v233 == (unsigned __int8 *)v464 || (char)sub_22319835C(v225 + 124, v233 + 32) < 0)
        {
LABEL_857:
          ++v226;
          if (*(_BYTE *)(v2 + 1))
          {
            sub_223446D5C(&v477);
            if (**(int **)(v477 + 56) > 5
              || (v236 = *(unsigned __int8 *)(v477 + 72),
                  v237 = sub_22322F254(v477, "OSLogSurrogateAppender", 1, 0),
                  v238 = v237,
                  !v236)
              && !v237)
            {
LABEL_444:
              v2 = a2;
              goto LABEL_445;
            }
            v453 = v236;
            v468 = (char *)&v477;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v470 = std::chrono::system_clock::now().__d_.__rep_;
            v471 = 5;
            v472 = "unknown file";
            v473 = 411;
            v474 = "unknown function";
            v475 = 0;
            v476 = 0;
            sub_2245664AC(v225, v479);
            sub_2245664AC(v225 + 124, v478);
            v467 = v478;
            v239 = *(_QWORD *)v468;
            v240 = (const char *)(*(_QWORD *)v468 + 16);
            __dst = v240;
            if (*(char *)(*(_QWORD *)v468 + 39) < 0)
            {
              v240 = *(const char **)(v239 + 16);
              v241 = *(_QWORD *)(v239 + 24);
              v440 = *(_QWORD **)v468;
              v243 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v457 = v226;
              if ((v243 & 1) != 0)
                goto LABEL_505;
            }
            else
            {
              v241 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
              v440 = *(_QWORD **)v468;
              v242 = atomic_load((unsigned __int8 *)&qword_255788F58);
              v457 = v226;
              if ((v242 & 1) != 0)
                goto LABEL_505;
            }
            if (__cxa_guard_acquire(&qword_255788F58))
            {
              sub_224568628((uint64_t)v486);
              sub_223199C58("com.apple.cv3d", (unint64_t)v486, &xmmword_255788F40);
              if ((_BYTE)v487 && (v486[23] & 0x80000000) != 0)
                operator delete(*(void **)v486);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
              __cxa_guard_release(&qword_255788F58);
            }
LABEL_505:
            if (byte_255788F57 >= 0)
              v244 = (const char *)&xmmword_255788F40;
            else
              v244 = (const char *)xmmword_255788F40;
            if (byte_255788F57 >= 0)
              v245 = byte_255788F57;
            else
              v245 = *((_QWORD *)&xmmword_255788F40 + 1);
            *(_QWORD *)object = os_log_create(v244, v240);
            if (v245 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            if (v245 >= 0x17)
            {
              v247 = (v245 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v245 | 7) != 0x17)
                v247 = v245 | 7;
              v248 = v247 + 1;
              v246 = operator new(v247 + 1);
              *(_QWORD *)&object[16] = v245;
              *(_QWORD *)v482 = v248 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v246;
            }
            else
            {
              v482[7] = v245;
              v246 = &object[8];
              if (!v245)
              {
LABEL_519:
                v246[v245] = 0;
                v482[8] = 1;
                if (v241 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v241 >= 0x17)
                {
                  v251 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v241 | 7) != 0x17)
                    v251 = v241 | 7;
                  v252 = v251 + 1;
                  v249 = operator new(v251 + 1);
                  v483 = v241;
                  v484 = v252 | 0x8000000000000000;
                  *(_QWORD *)&v482[16] = v249;
                }
                else
                {
                  HIBYTE(v484) = v241;
                  v249 = &v482[16];
                  if (!v241)
                  {
                    v482[16] = 0;
                    v485 = 1;
                    v250 = *(NSObject **)object;
                    if ((SHIBYTE(v484) & 0x80000000) == 0)
                      goto LABEL_523;
                    goto LABEL_529;
                  }
                }
                memmove(v249, v240, v241);
                v249[v241] = 0;
                v485 = 1;
                v250 = *(NSObject **)object;
                if ((SHIBYTE(v484) & 0x80000000) == 0)
                {
LABEL_523:
                  v226 = v457;
                  v165 = v448;
                  if (!v482[8])
                    goto LABEL_532;
                  goto LABEL_530;
                }
LABEL_529:
                operator delete(*(void **)&v482[16]);
                v226 = v457;
                v165 = v448;
                if (!v482[8])
                {
LABEL_532:
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v238 && *(_QWORD *)(v238 + 24))
                  {
                    v253 = _os_log_pack_size();
                    v254 = (std::__shared_weak_count_vtbl *)operator new(v253, (std::align_val_t)8uLL);
                    v255 = (std::__shared_weak_count *)operator new();
                    v255->__shared_owners_ = 0;
                    v256 = (unint64_t *)&v255->__shared_owners_;
                    v255->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
                    v255->__shared_weak_owners_ = 0;
                    v255[1].__vftable = v254;
                    *(_QWORD *)__s = v254;
                    v490 = v254;
                    v491 = v255;
                    v492 = 0;
                    v493 = 0;
                    sub_223446F28((uint64_t)object, v479, &v467);
                    v257 = (char *)operator new(0x50uLL);
                    v258 = (std::__shared_weak_count *)v257;
                    *((_QWORD *)v257 + 1) = 0;
                    v259 = (unint64_t *)(v257 + 8);
                    *((_QWORD *)v257 + 2) = 0;
                    *(_QWORD *)v257 = &off_24EC20730;
                    *((_QWORD *)v257 + 3) = off_24EC20780;
                    *((_OWORD *)v257 + 2) = *(_OWORD *)&object[8];
                    *((_QWORD *)v257 + 6) = *(_QWORD *)v482;
                    *(_OWORD *)(v257 + 56) = *(_OWORD *)&v482[8];
                    *((_QWORD *)v257 + 9) = v483;
                    v492 = v257 + 24;
                    v493 = v257;
                    *(_QWORD *)v486 = v254;
                    *(_QWORD *)&v486[8] = v254;
                    *(_QWORD *)&v486[16] = v255;
                    do
                      v260 = __ldxr(v256);
                    while (__stxr(v260 + 1, v256));
                    *(_QWORD *)&v487 = v257 + 24;
                    *((_QWORD *)&v487 + 1) = v257;
                    do
                      v261 = __ldxr(v259);
                    while (__stxr(v261 + 1, v259));
                    v488 = v257 + 24;
                    do
                      v262 = __ldaxr(v259);
                    while (__stlxr(v262 - 1, v259));
                    if (!v262)
                    {
                      (*(void (**)(char *))(*(_QWORD *)v257 + 16))(v257);
                      std::__shared_weak_count::__release_weak(v258);
                    }
                    v263 = v491;
                    if (v491)
                    {
                      v264 = (unint64_t *)&v491->__shared_owners_;
                      do
                        v265 = __ldaxr(v264);
                      while (__stlxr(v265 - 1, v264));
                      if (!v265)
                      {
                        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                        std::__shared_weak_count::__release_weak(v263);
                      }
                    }
                    v266 = *(_QWORD *)v486;
                    if (v488[31] >= 0)
                      v267 = v488 + 8;
                    else
                      v267 = (char *)*((_QWORD *)v488 + 1);
                    if (v488[55] >= 0)
                      v268 = v488 + 32;
                    else
                      v268 = (char *)*((_QWORD *)v488 + 4);
                    v269 = _os_log_pack_fill();
                    *(_DWORD *)v269 = v443;
                    *(_DWORD *)(v269 + 4) = 13;
                    *(_WORD *)(v269 + 8) = 2080;
                    *(_QWORD *)(v269 + 10) = v267;
                    *(_WORD *)(v269 + 18) = 1040;
                    *(_DWORD *)(v269 + 20) = 13;
                    *(_WORD *)(v269 + 24) = 2080;
                    *(_QWORD *)(v269 + 26) = v268;
                    v270 = operator new();
                    v271 = *((unsigned __int8 *)v440 + 39);
                    v272 = (const char *)v440[2];
                    v273 = v440[3];
                    v274 = v487;
                    *(_OWORD *)(v270 + 8) = *(_OWORD *)&v486[8];
                    if ((v271 & 0x80u) != 0)
                      v271 = v273;
                    else
                      v272 = __dst;
                    *(_QWORD *)v270 = v266;
                    *(_QWORD *)&v486[8] = 0;
                    *(_QWORD *)&v486[16] = 0;
                    *(_OWORD *)(v270 + 24) = v274;
                    v487 = 0uLL;
                    *(_QWORD *)(v270 + 40) = v272;
                    *(_QWORD *)(v270 + 48) = v271;
                    *(_BYTE *)(v270 + 56) = 16;
                    *(_QWORD *)__s = 0;
                    *(_QWORD *)object = v270;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v238 + 24) + 40))(*(_QWORD *)(v238 + 24), object);
                    v226 = v457;
                    v165 = v448;
                    v275 = *(_QWORD *)object;
                    *(_QWORD *)object = 0;
                    if (v275)
                    {
                      v276 = *(std::__shared_weak_count **)(v275 + 32);
                      if (v276)
                      {
                        v277 = (unint64_t *)&v276->__shared_owners_;
                        do
                          v278 = __ldaxr(v277);
                        while (__stlxr(v278 - 1, v277));
                        if (!v278)
                        {
                          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                          std::__shared_weak_count::__release_weak(v276);
                        }
                      }
                      v279 = *(std::__shared_weak_count **)(v275 + 16);
                      if (v279)
                      {
                        v280 = (unint64_t *)&v279->__shared_owners_;
                        do
                          v281 = __ldaxr(v280);
                        while (__stlxr(v281 - 1, v280));
                        if (!v281)
                        {
                          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                          std::__shared_weak_count::__release_weak(v279);
                        }
                      }
                      MEMORY[0x227684CE8](v275, 0x10F0C40B62ED6C6);
                      v282 = *(_QWORD *)__s;
                      *(_QWORD *)__s = 0;
                      if (v282)
                      {
                        v283 = *(std::__shared_weak_count **)(v282 + 32);
                        if (v283)
                        {
                          v284 = (unint64_t *)&v283->__shared_owners_;
                          do
                            v285 = __ldaxr(v284);
                          while (__stlxr(v285 - 1, v284));
                          if (!v285)
                          {
                            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                            std::__shared_weak_count::__release_weak(v283);
                          }
                        }
                        v286 = *(std::__shared_weak_count **)(v282 + 16);
                        if (v286)
                        {
                          v287 = (unint64_t *)&v286->__shared_owners_;
                          do
                            v288 = __ldaxr(v287);
                          while (__stlxr(v288 - 1, v287));
                          if (!v288)
                          {
                            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                            std::__shared_weak_count::__release_weak(v286);
                          }
                        }
                        MEMORY[0x227684CE8](v282, 0x10F0C40B62ED6C6);
                      }
                    }
                    v289 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
                    if (*((_QWORD *)&v487 + 1))
                    {
                      v290 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
                      do
                        v291 = __ldaxr(v290);
                      while (__stlxr(v291 - 1, v290));
                      if (!v291)
                      {
                        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                        std::__shared_weak_count::__release_weak(v289);
                      }
                    }
                    v292 = *(std::__shared_weak_count **)&v486[16];
                    if (*(_QWORD *)&v486[16])
                    {
                      v293 = (unint64_t *)(*(_QWORD *)&v486[16] + 8);
                      do
                        v294 = __ldaxr(v293);
                      while (__stlxr(v294 - 1, v293));
                      if (!v294)
                      {
                        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                        std::__shared_weak_count::__release_weak(v292);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v250, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)object = v443;
                    *(_DWORD *)&object[4] = 13;
                    *(_WORD *)&object[8] = 2080;
                    *(_QWORD *)&object[10] = v479;
                    *(_WORD *)&object[18] = 1040;
                    *(_DWORD *)&object[20] = 13;
                    *(_WORD *)v482 = 2080;
                    *(_QWORD *)&v482[2] = v467;
                    v295 = (void *)_os_log_send_and_compose_impl();
                    if (v295)
                      free(v295);
                  }
                  if (v453)
                  {
                    sub_2245664AC(v225, object);
                    sub_2245664AC(v225 + 124, v486);
                    sub_22322C138((uint64_t)&v468, "Mesh %.13s has unknown room id %.13s.", object, v486);
                    sub_223182C08((uint64_t)&v468);
                  }
                  sub_223182C08((uint64_t)&v468);
                  v296 = v476;
                  if (v476)
                  {
                    v297 = (unint64_t *)&v476->__shared_owners_;
                    do
                      v298 = __ldaxr(v297);
                    while (__stlxr(v298 - 1, v297));
                    if (!v298)
                    {
                      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                      std::__shared_weak_count::__release_weak(v296);
                    }
                  }
                  goto LABEL_444;
                }
LABEL_530:
                if ((v482[7] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                goto LABEL_532;
              }
            }
            memmove(v246, v244, v245);
            goto LABEL_519;
          }
        }
      }
    }
LABEL_445:
    v225 += 192;
  }
  while (v225 != v460);
  if (v226 <= 0)
    goto LABEL_698;
  sub_223446D5C(v479);
  if (**(int **)(*(_QWORD *)v479 + 56) > 5)
    goto LABEL_697;
  v299 = *(unsigned __int8 *)(*(_QWORD *)v479 + 72);
  v300 = sub_22322F254(*(uint64_t *)v479, "OSLogSurrogateAppender", 1, 0);
  v301 = v300;
  if (!v299 && v300 == 0)
    goto LABEL_697;
  v468 = v479;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v470 = std::chrono::system_clock::now().__d_.__rep_;
  v471 = 5;
  v472 = "unknown file";
  v473 = 420;
  v475 = 0;
  v476 = 0;
  v474 = "unknown function";
  v303 = *(_QWORD *)v468;
  v304 = (const char *)(*(_QWORD *)v468 + 16);
  v465 = v304;
  if (*(char *)(*(_QWORD *)v468 + 39) < 0)
  {
    v304 = *(const char **)(v303 + 16);
    v305 = *(_QWORD *)(v303 + 24);
  }
  else
  {
    v305 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
  }
  v458 = v226;
  v306 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v306 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (v482[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v307 = (const char *)&xmmword_255788F40;
  else
    v307 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v308 = byte_255788F57;
  else
    v308 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v307, v304);
  v309 = &object[8];
  if (v308 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v308 >= 0x17)
  {
    v310 = (v308 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v308 | 7) != 0x17)
      v310 = v308 | 7;
    v311 = v310 + 1;
    v309 = operator new(v310 + 1);
    *(_QWORD *)&object[16] = v308;
    *(_QWORD *)v482 = v311 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v309;
    goto LABEL_628;
  }
  v482[7] = v308;
  if (v308)
LABEL_628:
    memmove(v309, v307, v308);
  v309[v308] = 0;
  v482[8] = 1;
  v312 = &v482[16];
  if (v305 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v313 = v458;
  if (v305 >= 0x17)
  {
    v314 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v305 | 7) != 0x17)
      v314 = v305 | 7;
    v315 = v314 + 1;
    v312 = operator new(v314 + 1);
    v483 = v305;
    v484 = v315 | 0x8000000000000000;
    *(_QWORD *)&v482[16] = v312;
    goto LABEL_636;
  }
  HIBYTE(v484) = v305;
  if (v305)
LABEL_636:
    memmove(v312, v304, v305);
  v312[v305] = 0;
  v485 = 1;
  v316 = *(NSObject **)object;
  if (SHIBYTE(v484) < 0)
    operator delete(*(void **)&v482[16]);
  if (v482[8] && (v482[7] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v301 && *(_QWORD *)(v301 + 24))
  {
    v317 = _os_log_pack_size();
    v318 = (std::__shared_weak_count_vtbl *)operator new(v317, (std::align_val_t)8uLL);
    v319 = (std::__shared_weak_count *)operator new();
    v320 = v319;
    v319->__shared_owners_ = 0;
    v321 = (unint64_t *)&v319->__shared_owners_;
    v319->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v319->__shared_weak_owners_ = 0;
    v319[1].__vftable = v318;
    *(_QWORD *)object = v318;
    *(_QWORD *)&object[8] = v318;
    *(_QWORD *)&object[16] = v319;
    do
      v322 = __ldxr(v321);
    while (__stxr(v322 + 1, v321));
    memset(v482, 0, sizeof(v482));
    do
      v323 = __ldaxr(v321);
    while (__stlxr(v323 - 1, v321));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v320);
    }
    v324 = *(_QWORD *)object;
    v325 = (_DWORD *)_os_log_pack_fill();
    *v325 = 67109120;
    v325[1] = v458;
    v326 = operator new();
    v327 = *(unsigned __int8 *)(v303 + 39);
    v328 = *(const char **)(v303 + 16);
    v329 = *(_QWORD *)(v303 + 24);
    v330 = *(_OWORD *)v482;
    *(_OWORD *)(v326 + 8) = *(_OWORD *)&object[8];
    if ((v327 & 0x80u) != 0)
      v327 = v329;
    else
      v328 = v465;
    *(_QWORD *)v326 = v324;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v326 + 24) = v330;
    *(_QWORD *)v482 = 0;
    *(_QWORD *)&v482[8] = 0;
    *(_QWORD *)(v326 + 40) = v328;
    *(_QWORD *)(v326 + 48) = v327;
    *(_BYTE *)(v326 + 56) = 16;
    *(_QWORD *)__s = 0;
    *(_QWORD *)v486 = v326;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v301 + 24) + 40))(*(_QWORD *)(v301 + 24), v486);
    v331 = *(_QWORD *)v486;
    *(_QWORD *)v486 = 0;
    v313 = v458;
    if (v331)
    {
      v332 = *(std::__shared_weak_count **)(v331 + 32);
      if (v332)
      {
        v333 = (unint64_t *)&v332->__shared_owners_;
        do
          v334 = __ldaxr(v333);
        while (__stlxr(v334 - 1, v333));
        if (!v334)
        {
          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
          std::__shared_weak_count::__release_weak(v332);
        }
      }
      v335 = *(std::__shared_weak_count **)(v331 + 16);
      if (v335)
      {
        v336 = (unint64_t *)&v335->__shared_owners_;
        do
          v337 = __ldaxr(v336);
        while (__stlxr(v337 - 1, v336));
        if (!v337)
        {
          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
          std::__shared_weak_count::__release_weak(v335);
        }
      }
      MEMORY[0x227684CE8](v331, 0x10F0C40B62ED6C6);
      v338 = *(_QWORD *)__s;
      *(_QWORD *)__s = 0;
      if (v338)
      {
        v339 = *(std::__shared_weak_count **)(v338 + 32);
        if (v339)
        {
          v340 = (unint64_t *)&v339->__shared_owners_;
          do
            v341 = __ldaxr(v340);
          while (__stlxr(v341 - 1, v340));
          if (!v341)
          {
            ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
            std::__shared_weak_count::__release_weak(v339);
          }
        }
        v342 = *(std::__shared_weak_count **)(v338 + 16);
        if (v342)
        {
          v343 = (unint64_t *)&v342->__shared_owners_;
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
        MEMORY[0x227684CE8](v338, 0x10F0C40B62ED6C6);
      }
    }
    v345 = *(std::__shared_weak_count **)&v482[8];
    if (*(_QWORD *)&v482[8])
    {
      v346 = (unint64_t *)(*(_QWORD *)&v482[8] + 8);
      do
        v347 = __ldaxr(v346);
      while (__stlxr(v347 - 1, v346));
      if (!v347)
      {
        ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
        std::__shared_weak_count::__release_weak(v345);
      }
    }
    v348 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v349 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
  }
  else
  {
    os_log_type_enabled(v316, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = v458;
    v351 = (void *)_os_log_send_and_compose_impl();
    if (v351)
      free(v351);
  }
  if (v299)
  {
    sub_22322C138((uint64_t)&v468, "VerifySceneQueryState: %d meshes have unknown room ids.", v313);
    sub_223182C08((uint64_t)&v468);
  }
  sub_223182C08((uint64_t)&v468);
  v352 = v476;
  if (v476)
  {
    v353 = (unint64_t *)&v476->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
LABEL_697:
  v165 = 1;
LABEL_698:
  if (!*(_BYTE *)(v439 + 128))
    return v165;
  v355 = (unsigned __int8 *)(v439 + 112);
  v356 = v439 + 8;
  v357 = *(_QWORD *)(v439 + 8);
  if (v357)
  {
    do
    {
      v358 = sub_22319835C((unsigned __int8 *)(v357 + 32), v355);
      if (v358 >= 0)
        v359 = (uint64_t *)v357;
      else
        v359 = (uint64_t *)(v357 + 8);
      if (v358 >= 0)
        v356 = v357;
      v357 = *v359;
    }
    while (*v359);
    if (v356 != v439 + 8 && ((char)sub_22319835C(v355, (unsigned __int8 *)(v356 + 32)) & 0x80000000) == 0)
      return v165;
  }
  sub_223446D5C(&v477);
  if (**(int **)(v477 + 56) > 5)
    return 1;
  v360 = *(unsigned __int8 *)(v477 + 72);
  v361 = sub_22322F254(v477, "OSLogSurrogateAppender", 1, 0);
  v362 = v361;
  if (!v360 && v361 == 0)
    return 1;
  v468 = (char *)&v477;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v470 = std::chrono::system_clock::now().__d_.__rep_;
  v471 = 5;
  v472 = "unknown file";
  v473 = 431;
  v475 = 0;
  v476 = 0;
  v474 = "unknown function";
  sub_2245664AC(v355, __s);
  v364 = *(_QWORD *)v468;
  v365 = *(_QWORD *)v468 + 16;
  if (*(char *)(*(_QWORD *)v468 + 39) < 0)
  {
    v367 = *(const char **)(v364 + 16);
    v366 = *(_QWORD *)(v364 + 24);
  }
  else
  {
    v366 = *(unsigned __int8 *)(*(_QWORD *)v468 + 39);
    v367 = (const char *)(*(_QWORD *)v468 + 16);
  }
  v466 = *(_QWORD *)v468;
  v368 = atomic_load((unsigned __int8 *)&qword_255788F58);
  if ((v368 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)object);
    sub_223199C58("com.apple.cv3d", (unint64_t)object, &xmmword_255788F40);
    if (v482[0] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
  if (byte_255788F57 >= 0)
    v369 = (const char *)&xmmword_255788F40;
  else
    v369 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v370 = byte_255788F57;
  else
    v370 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)object = os_log_create(v369, v367);
  v371 = &object[8];
  if (v370 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v370 >= 0x17)
  {
    v461 = v367;
    v372 = v362;
    v373 = v365;
    v374 = v360;
    v375 = (v370 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v370 | 7) != 0x17)
      v375 = v370 | 7;
    v376 = v375 + 1;
    v371 = operator new(v375 + 1);
    *(_QWORD *)&object[16] = v370;
    *(_QWORD *)v482 = v376 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v371;
    v360 = v374;
    v365 = v373;
    v362 = v372;
    v367 = v461;
    goto LABEL_730;
  }
  v482[7] = v370;
  if (v370)
LABEL_730:
    memmove(v371, v369, v370);
  v371[v370] = 0;
  v482[8] = 1;
  v377 = &v482[16];
  if (v366 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v366 >= 0x17)
  {
    v378 = (v366 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v366 | 7) != 0x17)
      v378 = v366 | 7;
    v379 = v378 + 1;
    v377 = operator new(v378 + 1);
    v483 = v366;
    v484 = v379 | 0x8000000000000000;
    *(_QWORD *)&v482[16] = v377;
    goto LABEL_738;
  }
  HIBYTE(v484) = v366;
  if (v366)
LABEL_738:
    memmove(v377, v367, v366);
  v377[v366] = 0;
  v485 = 1;
  v380 = *(NSObject **)object;
  if (SHIBYTE(v484) < 0)
    operator delete(*(void **)&v482[16]);
  if (v482[8] && (v482[7] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v362 && *(_QWORD *)(v362 + 24))
  {
    v381 = _os_log_pack_size();
    v382 = operator new(v381, (std::align_val_t)8uLL);
    v383 = (_QWORD *)operator new();
    *v383 = &off_24EC1F7F0;
    v383[1] = 0;
    v383[2] = 0;
    v383[3] = v382;
    *(_QWORD *)v486 = v382;
    *(_QWORD *)&v486[8] = v382;
    v487 = 0uLL;
    *(_QWORD *)&v486[16] = v383;
    v384 = strlen(__s);
    if (v384 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v385 = v384;
    if (v384 >= 0x17)
    {
      v388 = (v384 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v384 | 7) != 0x17)
        v388 = v384 | 7;
      v389 = v388 + 1;
      v386 = operator new(v388 + 1);
      *(_QWORD *)&v480 = v385;
      *((_QWORD *)&v480 + 1) = v389 | 0x8000000000000000;
      *(_QWORD *)v479 = v386;
    }
    else
    {
      HIBYTE(v480) = v384;
      v386 = v479;
      if (!v384)
        goto LABEL_758;
    }
    memcpy(v386, __s, v385);
LABEL_758:
    *((_BYTE *)v386 + v385) = 0;
    v390 = *(_QWORD *)v479;
    *(_QWORD *)v478 = v480;
    *(_QWORD *)&v478[7] = *(_QWORD *)((char *)&v480 + 7);
    v391 = HIBYTE(v480);
    v392 = operator new(0x38uLL);
    v392[1] = 0;
    v392[2] = 0;
    v392[3] = off_24EC1FA48;
    *v392 = &off_24EC1F9F8;
    v393 = *(_QWORD *)v478;
    v392[4] = v390;
    v392[5] = v393;
    *(_QWORD *)((char *)v392 + 47) = *(_QWORD *)&v478[7];
    *((_BYTE *)v392 + 55) = v391;
    *(_QWORD *)v478 = 0;
    *(_QWORD *)&v478[7] = 0;
    v394 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
    *(_QWORD *)&v487 = v392 + 3;
    *((_QWORD *)&v487 + 1) = v392;
    if (v394)
    {
      v395 = (unint64_t *)&v394->__shared_owners_;
      do
        v396 = __ldaxr(v395);
      while (__stlxr(v396 - 1, v395));
      if (!v396)
      {
        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
        std::__shared_weak_count::__release_weak(v394);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v486;
    v397 = v487;
    *(_QWORD *)&object[16] = *(_QWORD *)&v486[16];
    if (*(_QWORD *)&v486[16])
    {
      v398 = (unint64_t *)(*(_QWORD *)&v486[16] + 8);
      do
        v399 = __ldxr(v398);
      while (__stxr(v399 + 1, v398));
    }
    v400 = (std::__shared_weak_count *)*((_QWORD *)&v487 + 1);
    *(_QWORD *)v482 = v397;
    *(_QWORD *)&v482[8] = *((_QWORD *)&v487 + 1);
    if (*((_QWORD *)&v487 + 1))
    {
      v401 = (unint64_t *)(*((_QWORD *)&v487 + 1) + 8);
      do
        v402 = __ldxr(v401);
      while (__stxr(v402 + 1, v401));
      *(_QWORD *)&v482[16] = v397;
      do
        v403 = __ldaxr(v401);
      while (__stlxr(v403 - 1, v401));
      if (!v403)
      {
        ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
        std::__shared_weak_count::__release_weak(v400);
      }
    }
    else
    {
      *(_QWORD *)&v482[16] = v397;
    }
    v404 = *(std::__shared_weak_count **)&v486[16];
    if (*(_QWORD *)&v486[16])
    {
      v405 = (unint64_t *)(*(_QWORD *)&v486[16] + 8);
      do
        v406 = __ldaxr(v405);
      while (__stlxr(v406 - 1, v405));
      if (!v406)
      {
        ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
        std::__shared_weak_count::__release_weak(v404);
      }
    }
    v407 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&v482[16] + 31) >= 0)
      v408 = *(_QWORD *)&v482[16] + 8;
    else
      v408 = *(_QWORD *)(*(_QWORD *)&v482[16] + 8);
    v409 = _os_log_pack_fill();
    *(_DWORD *)v409 = 68157954;
    *(_DWORD *)(v409 + 4) = 13;
    *(_WORD *)(v409 + 8) = 2080;
    *(_QWORD *)(v409 + 10) = v408;
    v410 = operator new();
    v411 = *(unsigned __int8 *)(v466 + 39);
    v412 = *(_QWORD *)(v466 + 16);
    v413 = *(_QWORD *)(v466 + 24);
    v414 = *(_OWORD *)v482;
    *(_OWORD *)(v410 + 8) = *(_OWORD *)&object[8];
    if ((v411 & 0x80u) != 0)
      v411 = v413;
    else
      v412 = v365;
    *(_QWORD *)v410 = v407;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v410 + 24) = v414;
    *(_QWORD *)v482 = 0;
    *(_QWORD *)&v482[8] = 0;
    *(_QWORD *)(v410 + 40) = v412;
    *(_QWORD *)(v410 + 48) = v411;
    *(_BYTE *)(v410 + 56) = 16;
    *(_QWORD *)v479 = 0;
    *(_QWORD *)v486 = v410;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v362 + 24) + 40))(*(_QWORD *)(v362 + 24), v486);
    v415 = *(_QWORD *)v486;
    *(_QWORD *)v486 = 0;
    if (v415)
    {
      v416 = *(std::__shared_weak_count **)(v415 + 32);
      if (v416)
      {
        v417 = (unint64_t *)&v416->__shared_owners_;
        do
          v418 = __ldaxr(v417);
        while (__stlxr(v418 - 1, v417));
        if (!v418)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
      }
      v419 = *(std::__shared_weak_count **)(v415 + 16);
      if (v419)
      {
        v420 = (unint64_t *)&v419->__shared_owners_;
        do
          v421 = __ldaxr(v420);
        while (__stlxr(v421 - 1, v420));
        if (!v421)
        {
          ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
          std::__shared_weak_count::__release_weak(v419);
        }
      }
      MEMORY[0x227684CE8](v415, 0x10F0C40B62ED6C6);
      v422 = *(_QWORD *)v479;
      *(_QWORD *)v479 = 0;
      if (v422)
      {
        v423 = *(std::__shared_weak_count **)(v422 + 32);
        if (v423)
        {
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
          }
        }
        v426 = *(std::__shared_weak_count **)(v422 + 16);
        if (v426)
        {
          v427 = (unint64_t *)&v426->__shared_owners_;
          do
            v428 = __ldaxr(v427);
          while (__stlxr(v428 - 1, v427));
          if (!v428)
          {
            ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
            std::__shared_weak_count::__release_weak(v426);
          }
        }
        MEMORY[0x227684CE8](v422, 0x10F0C40B62ED6C6);
      }
    }
    v429 = *(std::__shared_weak_count **)&v482[8];
    if (*(_QWORD *)&v482[8])
    {
      v430 = (unint64_t *)(*(_QWORD *)&v482[8] + 8);
      do
        v431 = __ldaxr(v430);
      while (__stlxr(v431 - 1, v430));
      if (!v431)
      {
        ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
        std::__shared_weak_count::__release_weak(v429);
      }
    }
    v432 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v433 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v434 = __ldaxr(v433);
      while (__stlxr(v434 - 1, v433));
      if (!v434)
      {
        ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
        std::__shared_weak_count::__release_weak(v432);
      }
    }
  }
  else
  {
    os_log_type_enabled(v380, OS_LOG_TYPE_ERROR);
    *(_QWORD *)object = 0xD04100202;
    *(_WORD *)&object[8] = 2080;
    *(_QWORD *)&object[10] = __s;
    v387 = (void *)_os_log_send_and_compose_impl();
    if (v387)
      free(v387);
  }
  if (v360)
  {
    sub_2245664AC(v355, object);
    sub_22322C138((uint64_t)&v468, "VerifySceneQueryState: Room boundary state has current room set to %.13s, which is missing from the list of rooms.", object);
    sub_223182C08((uint64_t)&v468);
  }
  sub_223182C08((uint64_t)&v468);
  v435 = v476;
  if (v476)
  {
    v436 = (unint64_t *)&v476->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  return 1;
}

void sub_2234467E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2234468BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CACB0);
  _Unwind_Resume(a1);
}

void sub_2234468EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_22319A054((uint64_t *)(v53 - 192));
  sub_22319A054((uint64_t *)(v53 - 144));
  sub_223199DE8((uint64_t)&a53);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  MEMORY[0x227684CE8](v33, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_22319A054((uint64_t *)(v53 - 192));
  sub_22319A054(&a48);
  sub_223199DE8((uint64_t)&a53);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  sub_223199DE8((uint64_t)&a53);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_2234469A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (v34 < 0)
  {
    operator delete(v33);
    sub_223199DE8(v35 - 192);
    sub_223182DAC((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  sub_223199DE8(v35 - 192);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446A04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223446D3CLL);
}

void sub_223446A4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223446D3CLL);
}

void sub_223446A8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a60 && a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223446D3CLL);
}

void sub_223446AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_223199DE8(v33 - 144);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  MEMORY[0x227684CE8](v33, 0x10D0C40B950D02ALL);
  sub_223182DAC(&a33);
  _Unwind_Resume(a1);
}

void sub_223446B00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223446D3CLL);
}

void sub_223446B74()
{
  JUMPOUT(0x223446BA8);
}

void sub_223446BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_223199DE8(v33 - 144);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_2231A87A4((uint64_t)&a53);
  sub_223199DE8(v53 - 144);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_223199DE8(v33 - 192);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;

  sub_22319A054(&a53);
  sub_22319A054((uint64_t *)(v53 - 144));
  sub_223199DE8(v53 - 192);
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446C54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  if (a59 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  JUMPOUT(0x223446D3CLL);
}

void sub_223446CD8()
{
  JUMPOUT(0x223446CE8);
}

void sub_223446D18(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223446D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_223182DAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223446D5C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CACB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACB0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CACA8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CACB0);
  }
  *a1 = qword_2540CACA8;
}

void sub_223446DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CACB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CACB0);
  _Unwind_Resume(a1);
}

uint64_t sub_223446E50(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223446E90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223446EA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223446ED0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223446EE8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

unint64_t sub_223446F28(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24EC20780;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_2234470A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2234470C4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22344711C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC370D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22344712C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC370D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22344715C(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_2234471AC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x227684CE8);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t sub_223447208(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223447278(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223447288(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC37160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2234472B8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*(void **)(a1 + 32));
      return;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_7;
}

void sub_223447320(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x227684CE8);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_223447394(_QWORD **a1, void **a2)
{
  _QWORD *v4;
  uint64_t *v5;

  v4 = *a1;
  if (v4)
    sub_223416E30(v4, a2);
  v5 = a1[2];
  if (v5)
    sub_223409674(v5, a2);
}

void sub_22344794C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CACC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CACC0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CACB8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CACC0);
  }
  *a1 = qword_2540CACB8;
}

void sub_2234479E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CACC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CACC0);
  _Unwind_Resume(a1);
}

void sub_223447A40(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28[80];
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;

  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_2234194C8(a1, (uint64_t)__p);
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24EC361F0;
  v5 = __p[0];
  v6 = (unint64_t)__p[1];
  *((void **)v4 + 3) = __p[0];
  __p[0] = 0;
  __p[1] = 0;
  *((_QWORD *)v4 + 4) = v6;
  v8 = v30;
  v7 = v31;
  *((_QWORD *)v4 + 5) = v30;
  *((_QWORD *)v4 + 6) = v7;
  *((_DWORD *)v4 + 14) = v32;
  if (v7)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v9 >= v6)
        v9 %= v6;
    }
    else
    {
      v9 &= v6 - 1;
    }
    v5[v9] = v4 + 40;
    v30 = 0;
    v31 = 0;
  }
  v11 = v33;
  v10 = v34;
  *((_QWORD *)v4 + 9) = v34;
  v12 = v4 + 72;
  *((_QWORD *)v4 + 8) = v11;
  v13 = v35;
  *((_QWORD *)v4 + 10) = v35;
  if (v13)
  {
    *(_QWORD *)(v10 + 16) = v12;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *((_QWORD *)v4 + 8) = v12;
  }
  *(_OWORD *)(v4 + 88) = v36;
  *((_QWORD *)v4 + 13) = v37;
  v36 = 0uLL;
  v4[112] = v38;
  *(_OWORD *)(v4 + 120) = v39;
  *((_QWORD *)v4 + 17) = v40;
  v37 = 0;
  v39 = 0uLL;
  v40 = 0;
  v4[144] = v41;
  *(_OWORD *)(v4 + 152) = v42;
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_2233C8A78((uint64_t)__p);
  sub_22340DC48(a1, (uint64_t)__p);
  v17 = (char *)operator new(0x38uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24EC36240;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)__p;
  *((_QWORD *)v17 + 5) = v30;
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v17[48] = v31;
  v18 = *(std::__shared_weak_count **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v17 + 24;
  *(_QWORD *)(a2 + 24) = v17;
  if (!v18)
    goto LABEL_19;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (char *)__p[0];
    if (!__p[0])
      return;
  }
  else
  {
LABEL_19:
    v21 = (char *)__p[0];
    if (!__p[0])
      return;
  }
  v22 = (char *)__p[1];
  v23 = v21;
  if (__p[1] == v21)
    goto LABEL_33;
  do
  {
    if (!*(v22 - 8))
      goto LABEL_28;
    v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 2);
    if (!v24)
      goto LABEL_28;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (v26)
    {
LABEL_28:
      v27 = *((unsigned int *)v22 - 36);
      if ((_DWORD)v27 == -1)
        goto LABEL_22;
LABEL_29:
      ((void (*)(char *, char *))off_24EC371D8[v27])(v28, v22 - 160);
      goto LABEL_22;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = *((unsigned int *)v22 - 36);
    if ((_DWORD)v27 != -1)
      goto LABEL_29;
LABEL_22:
    *((_DWORD *)v22 - 36) = -1;
    v22 -= 192;
  }
  while (v22 != v21);
  v23 = (char *)__p[0];
LABEL_33:
  __p[1] = v21;
  operator delete(v23);
}

#error "223447ED0: call analysis failed (funcsize=144)"

uint64_t sub_223448390(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_223448404(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  if (v4)
    sub_22341A16C(v4, a2);
  result = a1[2];
  if (result)
    return sub_22340DEB8(result, a2);
  return result;
}

void sub_2234489BC(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char v26[80];
  void *v27[2];
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_22341AC10(a1, (uint64_t)v27);
  v4 = (char *)operator new(0xD8uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24EC36D90;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)v27;
  *((_QWORD *)v4 + 5) = v28;
  v27[0] = 0;
  v27[1] = 0;
  *((_OWORD *)v4 + 3) = *(_OWORD *)__p;
  v6 = v30;
  v5 = v31;
  v28 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  *((_QWORD *)v4 + 8) = v6;
  *((_QWORD *)v4 + 9) = v5;
  v7 = v32;
  v8 = v33;
  *((_QWORD *)v4 + 10) = v32;
  v31 = 0;
  v32 = 0;
  v9 = v34;
  *((_QWORD *)v4 + 11) = v8;
  *((_QWORD *)v4 + 12) = v9;
  *((_DWORD *)v4 + 26) = v35;
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v5 + 8 * v10) = v4 + 88;
    v33 = 0;
    v34 = 0;
  }
  v12 = v36;
  v11 = v37;
  *((_QWORD *)v4 + 15) = v37;
  v13 = v4 + 120;
  *((_QWORD *)v4 + 14) = v12;
  v14 = v38;
  *((_QWORD *)v4 + 16) = v38;
  if (v14)
  {
    *(_QWORD *)(v11 + 16) = v13;
    v36 = &v37;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    *((_QWORD *)v4 + 14) = v13;
  }
  *(_OWORD *)(v4 + 136) = v39;
  *((_QWORD *)v4 + 19) = v40;
  v39 = 0uLL;
  v4[160] = v41;
  *(_OWORD *)(v4 + 168) = v42;
  *((_QWORD *)v4 + 23) = v43;
  v40 = 0;
  v42 = 0uLL;
  v43 = 0;
  v4[192] = v44;
  *(_OWORD *)(v4 + 200) = v45;
  *(_QWORD *)a2 = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4;
  sub_2233C8A78((uint64_t)&v31);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  sub_22340E17C(a1, (uint64_t)v27);
  v15 = (char *)operator new(0x50uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)v27;
  *(_QWORD *)v15 = &off_24EC36E30;
  *((_QWORD *)v15 + 5) = v28;
  v27[0] = 0;
  v27[1] = 0;
  *((_OWORD *)v15 + 3) = *(_OWORD *)__p;
  *((_QWORD *)v15 + 8) = v30;
  v28 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v15[72] = v31;
  v16 = *(std::__shared_weak_count **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v15 + 24;
  *(_QWORD *)(a2 + 24) = v15;
  if (!v16)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_33;
  }
  else
  {
LABEL_18:
    v19 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_33;
  }
  v20 = (char *)__p[1];
  v21 = v19;
  if (__p[1] == v19)
    goto LABEL_32;
  do
  {
    if (!*(v20 - 8))
      goto LABEL_27;
    v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 2);
    if (!v22)
      goto LABEL_27;
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (v24)
    {
LABEL_27:
      v25 = *((unsigned int *)v20 - 36);
      if ((_DWORD)v25 == -1)
        goto LABEL_21;
LABEL_28:
      ((void (*)(char *, char *))off_24EC371D8[v25])(v26, v20 - 160);
      goto LABEL_21;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = *((unsigned int *)v20 - 36);
    if ((_DWORD)v25 != -1)
      goto LABEL_28;
LABEL_21:
    *((_DWORD *)v20 - 36) = -1;
    v20 -= 192;
  }
  while (v20 != v19);
  v21 = (char *)__p[0];
LABEL_32:
  __p[1] = v19;
  operator delete(v21);
LABEL_33:
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
}

#error "223448E7C: call analysis failed (funcsize=129)"

void sub_223449274(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_2234497E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223449820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223449878(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_223449DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223449E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223449E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223449E7C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344A3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344A480(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344AA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344AA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344AA84(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344B030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344B088(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344B5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344B620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344B68C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344BC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344BC90(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24EC1FA48;
        *v22 = &off_24EC1F9F8;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x227684CE8](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x227684CE8](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_22344C204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_22344C228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22344C23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_223199DE8((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_223199DE8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_22344C294(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  const char *v27;
  size_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  size_t v63;
  size_t v64;
  _QWORD *v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  float32x2_t *v121;
  char *v122;
  unsigned __int8 *v123;
  const char *v124;
  char *v125;
  unsigned __int8 *v126;
  char *v127;
  void *v128;
  void *v129;
  char *v130;
  void *v131[2];
  char v132;
  void *v133;
  __int128 v134;
  _QWORD v135[3];
  int v136;
  const char *v137;
  int v138;
  const char *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  __int128 __p;
  std::__shared_weak_count *v144;
  char *v145;
  std::__shared_weak_count *v146;
  _QWORD *v147;
  __int128 v148;
  char __s[37];
  _BYTE v150[24];
  __int128 v151;
  void *v152[2];
  unint64_t v153;
  char v154;
  _QWORD v155[5];

  v155[2] = *MEMORY[0x24BDAC8D0];
  v133 = operator new(0x20uLL);
  v134 = xmmword_2245C6440;
  strcpy((char *)v133, "RoomAssociations.CurrentRoom");
  v132 = 6;
  strcpy((char *)v131, "Planes");
  if (!*(_BYTE *)(a1 + 40))
  {
    sub_22344D4B4((uint64_t)&v133, (uint64_t)v131);
    goto LABEL_240;
  }
  v121 = a3;
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 **)(a1 + 24);
  if (v6 == v7)
  {
    v8 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
    goto LABEL_236;
  }
  v8 = 0;
  v9 = 0;
  v127 = 0;
  v10 = (unsigned __int8 *)(a2 + 48);
  v123 = *(unsigned __int8 **)(a1 + 24);
  v126 = v10;
  while (2)
  {
    v11 = *(unsigned __int8 **)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_68;
    v12 = v10;
    do
    {
      v13 = v11[32];
      v14 = *v6;
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[33];
      v14 = v6[1];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[34];
      v14 = v6[2];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[35];
      v14 = v6[3];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[36];
      v14 = v6[4];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[37];
      v14 = v6[5];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[38];
      v14 = v6[6];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[39];
      v14 = v6[7];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[40];
      v14 = v6[8];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[41];
      v14 = v6[9];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[42];
      v14 = v6[10];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[43];
      v14 = v6[11];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[44];
      v14 = v6[12];
      if (v13 != v14)
        goto LABEL_25;
      v13 = v11[45];
      v14 = v6[13];
      if (v13 == v14 && (v13 = v11[46], v14 = v6[14], v13 == v14) && (v13 = v11[47], v14 = v6[15], v13 == v14))
      {
        v12 = v11;
      }
      else
      {
LABEL_25:
        if (v13 < v14)
          v11 += 8;
        else
          v12 = v11;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
    if (v12 == v10 || (char)sub_22319835C(v6, v12 + 32) < 0)
    {
LABEL_68:
      sub_2234525A0(&v142);
      if (**(int **)(v142 + 56) > 5)
        goto LABEL_5;
      v22 = *(unsigned __int8 *)(v142 + 72);
      v23 = sub_22322F254(v142, "OSLogSurrogateAppender", 1, 0);
      v24 = v23;
      if (!v22 && v23 == 0)
        goto LABEL_5;
      v135[0] = &v142;
      v135[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v135[2] = std::chrono::system_clock::now().__d_.__rep_;
      v136 = 5;
      v137 = "unknown file";
      v138 = 59;
      v139 = "unknown function";
      v140 = 0;
      v141 = 0;
      sub_2245664AC(v6, __s);
      v26 = *(_QWORD *)v135[0];
      v27 = (const char *)(*(_QWORD *)v135[0] + 16);
      v124 = v27;
      if (*(char *)(*(_QWORD *)v135[0] + 39) < 0)
      {
        v27 = *(const char **)(v26 + 16);
        v28 = *(_QWORD *)(v26 + 24);
        v125 = v8;
        v50 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v50 & 1) != 0)
          goto LABEL_103;
      }
      else
      {
        v28 = *(unsigned __int8 *)(*(_QWORD *)v135[0] + 39);
        v125 = v8;
        v29 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v29 & 1) != 0)
          goto LABEL_103;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
        if ((_BYTE)v145 && SHIBYTE(v144) < 0)
          operator delete((void *)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_103:
      if (byte_255788F57 >= 0)
        v51 = (const char *)&xmmword_255788F40;
      else
        v51 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v52 = byte_255788F57;
      else
        v52 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)v150 = os_log_create(v51, v27);
      if (v52 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v52 >= 0x17)
      {
        v122 = v9;
        v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v54 = v52 | 7;
        v55 = v54 + 1;
        v53 = operator new(v54 + 1);
        *(_QWORD *)&v150[16] = v52;
        *(_QWORD *)&v151 = v55 | 0x8000000000000000;
        *(_QWORD *)&v150[8] = v53;
        v9 = v122;
      }
      else
      {
        BYTE7(v151) = v52;
        v53 = &v150[8];
        if (!v52)
        {
LABEL_117:
          v53[v52] = 0;
          BYTE8(v151) = 1;
          if (v28 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v7 = v123;
          if (v28 >= 0x17)
          {
            v58 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v58 = v28 | 7;
            v59 = v58 + 1;
            v56 = (void **)operator new(v58 + 1);
            v152[1] = (void *)v28;
            v153 = v59 | 0x8000000000000000;
            v152[0] = v56;
            v8 = v125;
          }
          else
          {
            HIBYTE(v153) = v28;
            v56 = v152;
            v8 = v125;
            if (!v28)
            {
              LOBYTE(v152[0]) = 0;
              v154 = 1;
              v57 = *(NSObject **)v150;
              if ((SHIBYTE(v153) & 0x80000000) == 0)
                goto LABEL_121;
              goto LABEL_127;
            }
          }
          memmove(v56, v27, v28);
          *((_BYTE *)v56 + v28) = 0;
          v154 = 1;
          v57 = *(NSObject **)v150;
          if ((SHIBYTE(v153) & 0x80000000) == 0)
          {
LABEL_121:
            if (!BYTE8(v151))
              goto LABEL_130;
            goto LABEL_128;
          }
LABEL_127:
          operator delete(v152[0]);
          if (!BYTE8(v151))
            goto LABEL_130;
LABEL_128:
          if (SBYTE7(v151) < 0)
            operator delete(*(void **)&v150[8]);
LABEL_130:
          if (*(_QWORD *)v150)
            os_release(*(void **)v150);
          if (!v24 || !*(_QWORD *)(v24 + 24))
          {
            os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v150 = 136315138;
            *(_QWORD *)&v150[4] = __s;
            v66 = (void *)_os_log_send_and_compose_impl();
            if (v66)
            {
              free(v66);
              if (!v22)
                goto LABEL_211;
              goto LABEL_210;
            }
            goto LABEL_209;
          }
          v60 = _os_log_pack_size();
          v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
          v62 = (std::__shared_weak_count *)operator new();
          v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v62->__shared_owners_ = 0;
          v62->__shared_weak_owners_ = 0;
          v62[1].__vftable = v61;
          *(_QWORD *)&__p = v61;
          *((_QWORD *)&__p + 1) = v61;
          v144 = v62;
          v145 = 0;
          v146 = 0;
          v63 = strlen(__s);
          if (v63 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          v64 = v63;
          if (v63 >= 0x17)
          {
            v68 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v63 | 7) != 0x17)
              v68 = v63 | 7;
            v69 = v68 + 1;
            v65 = operator new(v68 + 1);
            *(_QWORD *)&v148 = v64;
            *((_QWORD *)&v148 + 1) = v69 | 0x8000000000000000;
            v147 = v65;
          }
          else
          {
            HIBYTE(v148) = v63;
            v65 = &v147;
            if (!v63)
              goto LABEL_152;
          }
          memcpy(v65, __s, v64);
LABEL_152:
          *((_BYTE *)v65 + v64) = 0;
          v70 = v147;
          v155[0] = v148;
          *(_QWORD *)((char *)v155 + 7) = *(_QWORD *)((char *)&v148 + 7);
          v71 = HIBYTE(v148);
          v72 = operator new(0x38uLL);
          v72[1] = 0;
          v72[2] = 0;
          v72[3] = off_24EC1FA48;
          *v72 = &off_24EC1F9F8;
          v73 = v155[0];
          v72[4] = v70;
          v72[5] = v73;
          *(_QWORD *)((char *)v72 + 47) = *(_QWORD *)((char *)v155 + 7);
          *((_BYTE *)v72 + 55) = v71;
          v155[0] = 0;
          *(_QWORD *)((char *)v155 + 7) = 0;
          v74 = v146;
          v145 = (char *)(v72 + 3);
          v146 = (std::__shared_weak_count *)v72;
          v8 = v125;
          if (v74)
          {
            p_shared_owners = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(p_shared_owners);
            while (__stlxr(v76 - 1, p_shared_owners));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          *(_OWORD *)v150 = __p;
          v77 = v145;
          *(_QWORD *)&v150[16] = v144;
          if (v144)
          {
            v78 = (unint64_t *)&v144->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = v146;
          *(_QWORD *)&v151 = v77;
          *((_QWORD *)&v151 + 1) = v146;
          if (v146)
          {
            v81 = (unint64_t *)&v146->__shared_owners_;
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
            v152[0] = v77;
            do
              v83 = __ldaxr(v81);
            while (__stlxr(v83 - 1, v81));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          else
          {
            v152[0] = v77;
          }
          v84 = v144;
          if (v144)
          {
            v85 = (unint64_t *)&v144->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = *(_QWORD *)v150;
          if (*((char *)v152[0] + 31) >= 0)
            v88 = (char *)v152[0] + 8;
          else
            v88 = (char *)*((_QWORD *)v152[0] + 1);
          v89 = _os_log_pack_fill();
          *(_DWORD *)v89 = 136315138;
          *(_QWORD *)(v89 + 4) = v88;
          v90 = operator new();
          v91 = *(unsigned __int8 *)(v26 + 39);
          v92 = v124;
          if ((v91 & 0x80u) != 0)
          {
            v92 = *(const char **)(v26 + 16);
            v91 = *(_QWORD *)(v26 + 24);
          }
          *(_QWORD *)v90 = v87;
          *(_OWORD *)(v90 + 8) = *(_OWORD *)&v150[8];
          *(_QWORD *)&v150[8] = 0;
          *(_QWORD *)&v150[16] = 0;
          *(_OWORD *)(v90 + 24) = v151;
          v151 = 0uLL;
          *(_QWORD *)(v90 + 40) = v92;
          *(_QWORD *)(v90 + 48) = v91;
          *(_BYTE *)(v90 + 56) = 16;
          v147 = 0;
          *(_QWORD *)&__p = v90;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), &__p);
          v93 = __p;
          *(_QWORD *)&__p = 0;
          if (v93)
          {
            v94 = *(std::__shared_weak_count **)(v93 + 32);
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            v97 = *(std::__shared_weak_count **)(v93 + 16);
            if (v97)
            {
              v98 = (unint64_t *)&v97->__shared_owners_;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            MEMORY[0x227684CE8](v93, 0x10F0C40B62ED6C6);
            v100 = v147;
            v147 = 0;
            if (v100)
            {
              v101 = (std::__shared_weak_count *)v100[4];
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              v104 = (std::__shared_weak_count *)v100[2];
              if (v104)
              {
                v105 = (unint64_t *)&v104->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              MEMORY[0x227684CE8](v100, 0x10F0C40B62ED6C6);
            }
          }
          v107 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (!*((_QWORD *)&v151 + 1))
            goto LABEL_205;
          v108 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
            v110 = *(std::__shared_weak_count **)&v150[16];
            if (!*(_QWORD *)&v150[16])
              goto LABEL_209;
          }
          else
          {
LABEL_205:
            v110 = *(std::__shared_weak_count **)&v150[16];
            if (!*(_QWORD *)&v150[16])
              goto LABEL_209;
          }
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
            if (!v22)
              goto LABEL_211;
            goto LABEL_210;
          }
LABEL_209:
          if (!v22)
          {
LABEL_211:
            sub_223182C08((uint64_t)v135);
            v34 = v141;
            if (!v141)
              goto LABEL_4;
            v113 = (unint64_t *)&v141->__shared_owners_;
            do
              v49 = __ldaxr(v113);
            while (__stlxr(v49 - 1, v113));
            goto LABEL_214;
          }
LABEL_210:
          sub_2245664AC(v6, v150);
          sub_22322C138((uint64_t)v135, "Plane state does not contain plane %s associated with current room.", v150);
          sub_223182C08((uint64_t)v135);
          goto LABEL_211;
        }
      }
      memmove(v53, v51, v52);
      goto LABEL_117;
    }
    v15 = *(unsigned __int8 **)v10;
    if (!*(_QWORD *)v10)
LABEL_245:
      sub_223198218("map::at:  key not found");
    v16 = *v6;
    while (1)
    {
      v17 = v15[32];
      v18 = v16 >= v17;
      if (v16 == v17)
        break;
      v19 = *v6;
LABEL_63:
      if (v18)
      {
LABEL_65:
        if (v17 >= v19)
          goto LABEL_76;
        v15 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
        if (!v15)
          goto LABEL_245;
      }
      else
      {
LABEL_33:
        v15 = *(unsigned __int8 **)v15;
        if (!v15)
          goto LABEL_245;
      }
    }
    v19 = v6[1];
    v17 = v15[33];
    v18 = v19 >= v17;
    if (v19 != v17)
      goto LABEL_63;
    v19 = v6[2];
    v17 = v15[34];
    v18 = v19 >= v17;
    if (v19 != v17)
      goto LABEL_63;
    v19 = v6[3];
    v17 = v15[35];
    v18 = v19 >= v17;
    if (v19 != v17)
      goto LABEL_63;
    v19 = v6[4];
    v17 = v15[36];
    v18 = v19 >= v17;
    if (v19 != v17)
      goto LABEL_63;
    v19 = v6[5];
    v17 = v15[37];
    v18 = v19 >= v17;
    if (v19 != v17)
      goto LABEL_63;
    v20 = v6[6];
    v21 = v15[38];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[7];
    v21 = v15[39];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[8];
    v21 = v15[40];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[9];
    v21 = v15[41];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[10];
    v21 = v15[42];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[11];
    v21 = v15[43];
    if (v20 != v21)
      goto LABEL_50;
    v20 = v6[12];
    v21 = v15[44];
    if (v20 != v21
      || (v20 = v6[13], v21 = v15[45], v20 != v21)
      || (v20 = v6[14], v21 = v15[46], v20 != v21)
      || (v20 = v6[15], v21 = v15[47], v20 != v21))
    {
LABEL_50:
      if (v20 < v21)
        goto LABEL_33;
    }
    v17 = v15[38];
    v19 = v6[6];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[39];
    v19 = v6[7];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[40];
    v19 = v6[8];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[41];
    v19 = v6[9];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[42];
    v19 = v6[10];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[43];
    v19 = v6[11];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[44];
    v19 = v6[12];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[45];
    v19 = v6[13];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[46];
    v19 = v6[14];
    if (v17 != v19)
      goto LABEL_65;
    v17 = v15[47];
    v19 = v6[15];
    if (v17 != v19)
      goto LABEL_65;
LABEL_76:
    v31 = *((_QWORD *)v15 + 6);
    v30 = *((_QWORD *)v15 + 7);
    *(_QWORD *)v150 = v31;
    *(_QWORD *)&v150[8] = v30;
    if (v30)
    {
      v32 = (unint64_t *)(v30 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    if (!v31
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/SceneQuery/src/SceneQueryVisualization.cpp", 55, (uint64_t)"p_ctr", 5, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    if (v8 >= v127)
    {
      v35 = v8;
      v36 = v8 - v9;
      v37 = v36 >> 3;
      v38 = (v36 >> 3) + 1;
      if (v38 >> 61)
        sub_223452694();
      if ((v127 - v9) >> 2 > v38)
        v38 = (v127 - v9) >> 2;
      if ((unint64_t)(v127 - v9) >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
      {
        if (v39 >> 61)
          sub_223174E94();
        v40 = (char *)operator new(8 * v39);
        v41 = &v40[8 * v37];
        *(_QWORD *)v41 = v31;
        v42 = (uint64_t)(v41 + 8);
        v43 = v35 - v9;
        if (v35 != v9)
        {
LABEL_93:
          v44 = v43 - 8;
          if (v44 >= 0x168)
          {
            v67 = (v35 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
            if (&v40[v36 - 8 - v67] > &v40[v36 - 8])
            {
              v45 = v35;
            }
            else if (&v35[-v67 - 8] > v35 - 8)
            {
              v45 = v35;
            }
            else if ((unint64_t)(v35 - v40 - v36) >= 0x20)
            {
              v114 = (v44 >> 3) + 1;
              v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v35[-v115];
              v41 -= v115;
              v116 = &v40[8 * v37 - 16];
              v117 = v35 - 16;
              v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v119 = *(_OWORD *)v117;
                *((_OWORD *)v116 - 1) = *((_OWORD *)v117 - 1);
                *(_OWORD *)v116 = v119;
                v116 -= 32;
                v117 -= 32;
                v118 -= 4;
              }
              while (v118);
              if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_96:
                v47 = v9;
                v9 = v41;
                v127 = &v40[8 * v39];
                if (!v47)
                  goto LABEL_98;
                goto LABEL_97;
              }
            }
            else
            {
              v45 = v35;
            }
          }
          else
          {
            v45 = v35;
          }
          do
          {
            v46 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v41 - 1) = v46;
            v41 -= 8;
          }
          while (v45 != v9);
          goto LABEL_96;
        }
      }
      else
      {
        v40 = 0;
        v41 = (char *)(8 * v37);
        *(_QWORD *)(8 * v37) = v31;
        v42 = 8 * v37 + 8;
        v43 = v35 - v9;
        if (v35 != v9)
          goto LABEL_93;
      }
      v9 = v41;
      v47 = v35;
      v127 = &v40[8 * v39];
      if (!v35)
      {
LABEL_98:
        v8 = (char *)v42;
        v34 = *(std::__shared_weak_count **)&v150[8];
        if (!*(_QWORD *)&v150[8])
          goto LABEL_4;
        goto LABEL_99;
      }
LABEL_97:
      operator delete(v47);
      goto LABEL_98;
    }
    *(_QWORD *)v8 = v31;
    v8 += 8;
    v34 = *(std::__shared_weak_count **)&v150[8];
    if (!*(_QWORD *)&v150[8])
      goto LABEL_4;
LABEL_99:
    v48 = (unint64_t *)&v34->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
LABEL_214:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
LABEL_4:
    v10 = v126;
LABEL_5:
    v6 += 16;
    if (v6 != v7)
      continue;
    break;
  }
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v120 = v8 - v9;
  if (v8 != v9)
  {
    if (v120 < 0)
      sub_223452694();
    v128 = operator new(v8 - v9);
    v130 = (char *)v128 + 8 * (v120 >> 3);
    memcpy(v128, v9, v8 - v9);
    v129 = v130;
    v8 = v9;
  }
LABEL_236:
  sub_22373C888((unsigned __int8 ***)&v128, (uint64_t *)&v133, (uint64_t)v131, v121, 1);
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v8)
    operator delete(v8);
LABEL_240:
  if ((v132 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v134) & 0x80000000) == 0)
      return;
LABEL_244:
    operator delete(v133);
    return;
  }
  operator delete(v131[0]);
  if (SHIBYTE(v134) < 0)
    goto LABEL_244;
}

void sub_22344D2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59 && a58 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a43);
  if (a18)
    operator delete(a18);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void sub_22344D4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  std::string __p;
  uint64_t v20[4];
  _QWORD v21[45];

  v21[44] = *MEMORY[0x24BDAC8D0];
  v20[0] = (uint64_t)"cv3d.recon.";
  v20[1] = 11;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a1;
  else
    v4 = *(_QWORD *)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  v20[2] = v4;
  v20[3] = v3;
  sub_2231A9820((uint64_t)v20, (uint64_t)v21, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v5[2];
    }
    v7 = *(_QWORD *)(v6 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      sub_2241471F8();
      v11 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
      {
        kdebug_trace();
        sub_2241498F4((uint64_t)v20, 0);
        sub_2234526A8((double *)&qword_255788F20, v11, (uint64_t)v20, a2);
        sub_22316F8F4(v20);
        kdebug_trace();
      }
    }
  }
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = p_p->__r_.__value_.__r.__words[0];
    v15 = p_p->__r_.__value_.__l.__size_;
    v16 = p_p->__r_.__value_.__s.__data_[16];
    if (v14 == 0x6365722E64337663 && v15 == 0x73746174532E6E6FLL && v16 == 46)
    {
      sub_223187510();
      sub_2241498F4((uint64_t)v20, 0);
      sub_22316F8F4(v20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22344D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_22344D7F0(float32x2_t *a1, float32x2_t *a2)
{
  void *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  const void *v37;
  std::__shared_weak_count *v38;
  CFDictionaryRef v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  float32x2_t *v46;
  float32x2_t *v47;
  void **v48;
  void **v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  _QWORD *v55;
  const void *v56;
  int64_t v57;
  char *v58;
  size_t v59;
  char *v60;
  char **v61;
  char **v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char **v71;
  uint64_t v72;
  char *v73;
  size_t v74;
  char *v75;
  char **v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  std::__shared_weak_count *v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  unint64_t v99;
  std::__shared_weak_count *i;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  std::__shared_weak_count *v107;
  CFDictionaryRef v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  const void *v121;
  std::__shared_weak_count *v122;
  CFDictionaryRef v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _OWORD *v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count_vtbl *v146;
  char **v147;
  char **v148;
  void *v149;
  char **v150;
  char *v151;
  char *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  float32x2_t *v156;
  float32x2_t *v157;
  BOOL v158;
  std::__shared_weak_count_vtbl *v159;
  CFMutableArrayRef v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  CFMutableArrayRef v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  std::__shared_weak_count_vtbl *shared_owners;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  void *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  void **v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  void *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count_vtbl *Mutable;
  __int128 v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  std::__shared_weak_count *v282;
  void *v283;
  unint64_t *p_shared_owners;
  unint64_t v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  _BYTE *v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  void **v294;
  void **v295;
  void *v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void *__src;
  unsigned __int8 v306;
  int v307;
  uint64_t *v308;
  float32x2_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  float32x2_t *v313;
  char **v314;
  char *v315;
  uint64_t v316;
  const __CFAllocator *allocator;
  std::string v318;
  __int128 v319;
  CFDictionaryRef theDict[3];
  uint64_t v321;
  void *v322;
  std::__shared_weak_count *v323;
  _BYTE theArray[24];
  void *v325;
  std::__shared_weak_count *v326;
  unint64_t v327;
  void *v328[2];
  std::__shared_weak_count *v329;
  void *v330;
  char **v331;
  CFDictionaryRef v332[2];
  __int128 v333;
  _DWORD v334[2];
  void *v335[2];
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  void *v339;
  std::__shared_weak_count *v340;
  void *v341[2];
  void *v342[2];
  CFMutableArrayRef v343[2];
  void *value[2];
  CFMutableArrayRef v345[2];
  void *key[2];
  void *__p[3];
  uint64_t v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  void *__dst[2];
  _BYTE v352[7];
  unsigned __int8 v353;
  _BYTE v354[32];
  unint64_t *v355;
  uint64_t v356;

  v356 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      v7 = v5;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v7[2];
    }
    v8 = *(_QWORD *)(v6 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      __p[0] = "cv3d.recon.";
      __p[1] = (void *)11;
      __p[2] = "RoomAssociations.RoomBoundaries";
      v348 = 31;
      sub_2231A9820((uint64_t)__p, (uint64_t)&v349, 0, 0, &v318);
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        goto LABEL_406;
      v13 = a1;
      kdebug_trace();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12)
        || (*(_QWORD *)&v319 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0),
            *((_QWORD *)&v319 + 1) = 2,
            v308 = sub_2241471F8(),
            !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12)))
      {
LABEL_405:
        kdebug_trace();
LABEL_406:
        if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v318.__r_.__value_.__l.__data_);
        return;
      }
      __p[2] = 0;
      __p[1] = 0;
      __p[0] = &__p[1];
      sub_2245314F4(__p, v335);
      *(_OWORD *)theDict = *(_OWORD *)v335;
      sub_22323DF84((uint64_t)__p, (char *)__p[1]);
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "boundary_to_user");
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v335);
      sub_2234529FC((uint64_t)theDict, v335[0], (uint64_t)&a1[6]);
      v18 = (std::__shared_weak_count *)v335[1];
      if (v335[1])
      {
        v19 = (unint64_t *)((char *)v335[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      *(float32x2_t *)v14.i8 = *a2;
      v14.i32[2] = a2[1].i32[0];
      *(float32x2_t *)v15.i8 = a2[2];
      v15.i32[2] = a2[3].i32[0];
      v16.i32[0] = a2[5].i32[0];
      v21.i64[0] = vzip1q_s32(v14, v15).u64[0];
      *(float32x2_t *)v17.f32 = a2[6];
      v17.i32[2] = a2[7].i32[0];
      v22 = (int8x16_t)vnegq_f32(v17);
      v23 = (int8x16_t)vtrn2q_s32(v14, v15);
      v23.i32[2] = HIDWORD(*(_QWORD *)&a2[4]);
      v24 = (int8x16_t)vzip2q_s32(v14, v15);
      *(float32x2_t *)v25.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v21.f32, *(float *)v22.i32), *(float32x2_t *)v23.i8, *(float32x2_t *)v17.f32, 1), *(float32x2_t *)v24.i8, v17, 2);
      v24.i32[2] = v16.i32[0];
      v25.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(a2[4], *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a2[4], 1), *(float32x2_t *)v17.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), v16).u32[0]);
      v26.i32[3] = 0;
      v26.i32[0] = v23.i32[0];
      v28 = vextq_s8(vextq_s8(v23, v23, 0xCuLL), v24, 8uLL);
      v27.i64[0] = v28.i64[1];
      *(uint64_t *)((char *)v26.i64 + 4) = v28.i64[0];
      v27.i64[1] = vdupq_laneq_s32((int32x4_t)v24, 2).u32[0];
      v21.i64[1] = *(_QWORD *)&a2[4];
      v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)a1[6].f32)), v26, a1[6], 1), v27, *(float32x4_t *)a1[6].f32, 2), v25, *(float32x4_t *)a1[6].f32, 3);
      v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)a1[8].f32)), v26, a1[8], 1), v27, *(float32x4_t *)a1[8].f32, 2), v25, *(float32x4_t *)a1[8].f32, 3);
      v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)a1[10].f32)), v26, a1[10], 1), v27, *(float32x4_t *)a1[10].f32, 2), v25, *(float32x4_t *)a1[10].f32, 3);
      v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)a1[12].f32)), v26, a1[12], 1), v27, *(float32x4_t *)a1[12].f32, 2), v25, *(float32x4_t *)a1[12].f32, 3);
      *(float32x4_t *)v335 = v29;
      v336 = v30;
      v337 = v31;
      v338 = v32;
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "boundary_to_vision");
      sub_224527BAC((uint64_t)__p, (CFStringRef *)v328);
      sub_2234529FC((uint64_t)theDict, v328[0], (uint64_t)v335);
      v33 = (std::__shared_weak_count *)v328[1];
      if (v328[1])
      {
        v34 = (unint64_t *)((char *)v328[1] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v36 = a1[16].u8[0];
      v307 = v36;
      if (v36)
      {
        sub_224566698((unsigned __int8 *)&a1[14], (uint64_t)__p);
        __src = __p[0];
        v2 = __p[1];
        v334[0] = __p[2];
        *(_DWORD *)((char *)v334 + 3) = *(_DWORD *)((char *)&__p[2] + 3);
        v36 = HIBYTE(__p[2]);
      }
      else
      {
        __src = 0;
      }
      v306 = v36;
      HIBYTE(v329) = 12;
      strcpy((char *)v328, "current_room");
      sub_224527BAC((uint64_t)v328, (CFStringRef *)key);
      v37 = key[0];
      v39 = theDict[0];
      v38 = (std::__shared_weak_count *)theDict[1];
      if (theDict[1])
      {
        v40 = (unint64_t *)((char *)theDict[1] + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (!v39 || CFDictionaryContainsKey(theDict[0], v37))
        goto LABEL_35;
      if (v307)
      {
        if ((v306 & 0x80) != 0)
        {
          sub_223197FA4(__dst, __src, (unint64_t)v2);
        }
        else
        {
          __dst[0] = __src;
          __dst[1] = v2;
          *(_DWORD *)v352 = v334[0];
          *(_DWORD *)&v352[3] = *(_DWORD *)((char *)v334 + 3);
          v353 = v306;
        }
        sub_22319BD1C(__p, (uint64_t)__dst, 1uLL);
      }
      else
      {
        memset(__p, 0, sizeof(__p));
      }
      Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      sub_224528230((std::__shared_weak_count_vtbl **)v354, Mutable, 0);
      v276 = *(_OWORD *)v354;
      if (*(_QWORD *)&v354[8])
      {
        v277 = (unint64_t *)(*(_QWORD *)&v354[8] + 8);
        do
          v278 = __ldxr(v277);
        while (__stxr(v278 + 1, v277));
        do
          v279 = __ldaxr(v277);
        while (__stlxr(v279 - 1, v277));
        if (!v279)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v276 + 1) + 16))(*((_QWORD *)&v276 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v276 + 1));
        }
      }
      if ((_QWORD)v276)
      {
        v280 = (char *)__p[0];
        v281 = (char *)__p[1];
        while (v280 != v281)
        {
          sub_224527BAC((uint64_t)v280, (CFStringRef *)&v325);
          v283 = v325;
          v282 = v326;
          if (v326)
          {
            p_shared_owners = (unint64_t *)&v326->__shared_owners_;
            do
              v285 = __ldxr(p_shared_owners);
            while (__stxr(v285 + 1, p_shared_owners));
            do
              v286 = __ldaxr(p_shared_owners);
            while (__stlxr(v286 - 1, p_shared_owners));
            if (!v286)
            {
              ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
              std::__shared_weak_count::__release_weak(v282);
            }
          }
          if (v283)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)v354, v325);
            v287 = v326;
            if (v326)
              goto LABEL_433;
          }
          else
          {
            *(_QWORD *)theArray = 0;
            *(_QWORD *)&theArray[8] = 0;
            v287 = v326;
            if (v326)
            {
LABEL_433:
              v288 = (unint64_t *)&v287->__shared_owners_;
              do
                v289 = __ldaxr(v288);
              while (__stlxr(v289 - 1, v288));
              if (!v289)
              {
                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                std::__shared_weak_count::__release_weak(v287);
              }
            }
          }
          if (!v283)
            goto LABEL_442;
          v280 += 24;
        }
        *(_OWORD *)theArray = *(_OWORD *)v354;
        v290 = v354;
      }
      else
      {
        v290 = theArray;
      }
      *(_QWORD *)v290 = 0;
      *((_QWORD *)v290 + 1) = 0;
LABEL_442:
      v291 = *(std::__shared_weak_count **)&v354[8];
      if (*(_QWORD *)&v354[8])
      {
        v292 = (unint64_t *)(*(_QWORD *)&v354[8] + 8);
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
      v294 = (void **)__p[0];
      if (__p[0])
      {
        v295 = (void **)__p[1];
        v296 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v295 - 1) < 0)
              operator delete(*(v295 - 3));
            v295 -= 3;
          }
          while (v295 != v294);
          v296 = __p[0];
        }
        __p[1] = v294;
        operator delete(v296);
      }
      if (v307 && (char)v353 < 0)
        operator delete(__dst[0]);
      v298 = *(_QWORD *)theArray;
      v297 = *(std::__shared_weak_count **)&theArray[8];
      if (*(_QWORD *)&theArray[8])
      {
        v299 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
        do
          v300 = __ldxr(v299);
        while (__stxr(v300 + 1, v299));
        do
          v301 = __ldaxr(v299);
        while (__stlxr(v301 - 1, v299));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
          std::__shared_weak_count::__release_weak(v297);
        }
      }
      if (v298)
        CFDictionaryAddValue(theDict[0], v37, *(const void **)theArray);
      v302 = *(std::__shared_weak_count **)&theArray[8];
      if (*(_QWORD *)&theArray[8])
      {
        v303 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
LABEL_35:
      v43 = (std::__shared_weak_count *)key[1];
      if (key[1])
      {
        v44 = (unint64_t *)((char *)key[1] + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (SHIBYTE(v329) < 0)
        operator delete(v328[0]);
      __p[2] = 0;
      __p[1] = 0;
      __p[0] = &__p[1];
      sub_2245314F4(__p, v328);
      v333 = *(_OWORD *)v328;
      sub_22323DF84((uint64_t)__p, (char *)__p[1]);
      v47 = v13 + 1;
      v46 = (float32x2_t *)*v13;
      if ((float32x2_t *)*v13 == &v13[1])
        goto LABEL_348;
      v48 = &__p[2];
      allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v309 = v13 + 1;
      v312 = v12;
      while (1)
      {
        *(_OWORD *)__p = *(_OWORD *)v46[4].f32;
        v49 = (void **)sub_223174250((uint64_t)v48, (__int128 *)&v46[6]);
        if (v350)
          break;
LABEL_189:
        v48 = (void **)sub_223173E64(v49);
        v156 = (float32x2_t *)v46[1];
        if (v156)
        {
          do
          {
            v157 = v156;
            v156 = (float32x2_t *)*v156;
          }
          while (v156);
        }
        else
        {
          do
          {
            v157 = (float32x2_t *)v46[2];
            v158 = *v157 == (_QWORD)v46;
            v46 = v157;
          }
          while (!v158);
        }
        v46 = v157;
        if (v157 == v47)
        {
LABEL_348:
          HIBYTE(__p[2]) = 15;
          strcpy((char *)__p, "room_boundaries");
          sub_224527BAC((uint64_t)__p, (CFStringRef *)v328);
          sub_223427380((uint64_t)theDict, v328[0], (void **)&v333);
          v241 = (std::__shared_weak_count *)v328[1];
          if (v328[1])
          {
            v242 = (unint64_t *)((char *)v328[1] + 8);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 - 1, v242));
            if (!v243)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v244 = (std::__shared_weak_count *)*((_QWORD *)&v333 + 1);
          if (*((_QWORD *)&v333 + 1))
          {
            v245 = (unint64_t *)(*((_QWORD *)&v333 + 1) + 8);
            do
              v246 = __ldaxr(v245);
            while (__stlxr(v246 - 1, v245));
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          if (v307 && (v306 & 0x80) != 0)
            operator delete(__src);
          LOBYTE(v335[0]) = 0;
          v336.i8[8] = 0;
          sub_2231AD9F0((uint64_t)theDict, (__int128 *)v335, &v319, &v321);
          if (v336.i8[8] && v336.i8[7] < 0)
            operator delete(v335[0]);
          v247 = (std::__shared_weak_count *)theDict[1];
          if (theDict[1])
          {
            v248 = (unint64_t *)((char *)theDict[1] + 8);
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 - 1, v248));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
          v250 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
          v251 = *(void **)v250;
          v252 = *(std::__shared_weak_count **)(v250 + 8);
          if (v252)
          {
            v253 = (unint64_t *)&v252->__shared_owners_;
            do
              v254 = __ldxr(v253);
            while (__stxr(v254 + 1, v253));
          }
          v256 = (uint64_t)v322;
          v255 = v323;
          v328[0] = &off_24EC6A3B8;
          v328[1] = v322;
          v329 = v323;
          v322 = 0;
          v323 = 0;
          __p[0] = v251;
          __p[1] = v252;
          if (v252)
          {
            v257 = (unint64_t *)&v252->__shared_owners_;
            do
              v258 = __ldxr(v257);
            while (__stxr(v258 + 1, v257));
          }
          __p[2] = &off_24EC6A3B8;
          v348 = v256;
          v349 = v255;
          if (v255)
          {
            v259 = (unint64_t *)&v255->__shared_owners_;
            do
              v260 = __ldxr(v259);
            while (__stxr(v260 + 1, v259));
          }
          (*(void (**)(uint64_t *, void **))(*v308 + 16))(v308, __p);
          v261 = v349;
          if (v349)
          {
            v262 = (unint64_t *)&v349->__shared_owners_;
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
              std::__shared_weak_count::__release_weak(v261);
            }
          }
          v264 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v265 = (unint64_t *)((char *)__p[1] + 8);
            do
              v266 = __ldaxr(v265);
            while (__stlxr(v266 - 1, v265));
            if (!v266)
            {
              ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
              std::__shared_weak_count::__release_weak(v264);
            }
          }
          v267 = v329;
          if (v329)
          {
            v268 = (unint64_t *)&v329->__shared_owners_;
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          if (v252)
          {
            v270 = (unint64_t *)&v252->__shared_owners_;
            do
              v271 = __ldaxr(v270);
            while (__stlxr(v271 - 1, v270));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
              std::__shared_weak_count::__release_weak(v252);
            }
          }
          v272 = v323;
          if (v323)
          {
            v273 = (unint64_t *)&v323->__shared_owners_;
            do
              v274 = __ldaxr(v273);
            while (__stlxr(v274 - 1, v273));
            if (!v274)
            {
              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
              std::__shared_weak_count::__release_weak(v272);
            }
          }
          goto LABEL_405;
        }
      }
      v328[1] = 0;
      v329 = 0;
      v328[0] = &v328[1];
      sub_2245314F4(v328, v354);
      *(_OWORD *)v332 = *(_OWORD *)v354;
      sub_22323DF84((uint64_t)v328, (char *)v328[1]);
      v328[0] = 0;
      v328[1] = 0;
      v329 = 0;
      v316 = v350;
      v51 = *(const void **)v350;
      v50 = *(_QWORD *)(v350 + 8);
      v52 = v50 - *(_QWORD *)v350;
      if (v50 != *(_QWORD *)v350)
      {
        if (v52 < 0)
          sub_22316E078();
        v53 = (char *)operator new(v50 - *(_QWORD *)v350);
        v328[0] = v53;
        v328[1] = v53;
        v329 = (std::__shared_weak_count *)&v53[8 * (v52 >> 3)];
        v54 = v52 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v53, v51, v54);
        v328[1] = &v53[v54];
      }
      sub_22329A5CC(&v330, (uint64_t *)(v316 + 24));
      v326 = 0;
      v327 = 0;
      v325 = 0;
      sub_223452D78((uint64_t)&v325, 0xAAAAAAAAAAAAAAABLL * (((char *)v331 - (_BYTE *)v330) >> 3) + 1);
      v55 = &v326->__vftable;
      v313 = v46;
      if ((unint64_t)v326 >= v327)
      {
        v60 = sub_223452F08((char **)&v325, (uint64_t)v328);
        v326 = (std::__shared_weak_count *)v60;
        v62 = (char **)v330;
        v61 = v331;
        v63 = (char *)v331 - (_BYTE *)v330;
        if ((char *)v331 - (_BYTE *)v330 < 1)
          goto LABEL_107;
      }
      else
      {
        v326->__vftable = 0;
        v55[1] = 0;
        v55[2] = 0;
        v56 = v328[0];
        v57 = (char *)v328[1] - (char *)v328[0];
        if (v328[1] != v328[0])
        {
          if (v57 < 0)
            sub_22316E078();
          v58 = (char *)operator new((char *)v328[1] - (char *)v328[0]);
          *v55 = v58;
          v55[1] = v58;
          v55[2] = &v58[8 * (v57 >> 3)];
          v59 = v57 & 0xFFFFFFFFFFFFFFF8;
          memcpy(v58, v56, v59);
          v55[1] = &v58[v59];
        }
        v60 = (char *)(v55 + 3);
        v326 = (std::__shared_weak_count *)(v55 + 3);
        v62 = (char **)v330;
        v61 = v331;
        v63 = (char *)v331 - (_BYTE *)v330;
        if ((char *)v331 - (_BYTE *)v330 < 1)
        {
LABEL_107:
          v354[23] = 7;
          strcpy(v354, "polygon");
          sub_224527BAC((uint64_t)v354, (CFStringRef *)&v339);
          v106 = v339;
          v108 = v332[0];
          v107 = (std::__shared_weak_count *)v332[1];
          if (!v332[1])
            goto LABEL_112;
          v109 = (unint64_t *)((char *)v332[1] + 8);
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
          do
            v111 = __ldaxr(v109);
          while (__stlxr(v111 - 1, v109));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
            if (!v108)
              goto LABEL_114;
          }
          else
          {
LABEL_112:
            if (!v108)
              goto LABEL_114;
          }
          if (CFDictionaryContainsKey(v332[0], v106))
            goto LABEL_114;
          v159 = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
          sub_224528230((std::__shared_weak_count_vtbl **)v343, v159, 0);
          v160 = v343[0];
          v161 = (std::__shared_weak_count *)v343[1];
          if (v343[1])
          {
            v162 = (unint64_t *)((char *)v343[1] + 8);
            do
              v163 = __ldxr(v162);
            while (__stxr(v163 + 1, v162));
            do
              v164 = __ldaxr(v162);
            while (__stlxr(v164 - 1, v162));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          if (v160)
          {
            v165 = (std::__shared_weak_count *)v325;
            v166 = v326;
            if (v325 != v326)
            {
              do
              {
                v167 = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                sub_224528230((std::__shared_weak_count_vtbl **)v345, v167, 0);
                v168 = v345[0];
                v169 = (std::__shared_weak_count *)v345[1];
                if (!v345[1])
                  goto LABEL_210;
                v170 = (unint64_t *)((char *)v345[1] + 8);
                do
                  v171 = __ldxr(v170);
                while (__stxr(v171 + 1, v170));
                do
                  v172 = __ldaxr(v170);
                while (__stlxr(v172 - 1, v170));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                  if (!v168)
                  {
LABEL_276:
                    v209 = v342;
                    goto LABEL_277;
                  }
                }
                else
                {
LABEL_210:
                  if (!v168)
                    goto LABEL_276;
                }
                v174 = v165->__vftable;
                shared_owners = (std::__shared_weak_count_vtbl *)v165->__shared_owners_;
                if (v165->__vftable != shared_owners)
                {
                  do
                  {
                    v175 = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                    sub_224528230((std::__shared_weak_count_vtbl **)theArray, v175, 0);
                    v177 = *(_QWORD *)theArray;
                    v176 = *(std::__shared_weak_count **)&theArray[8];
                    if (!*(_QWORD *)&theArray[8])
                      goto LABEL_217;
                    v178 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                    do
                      v179 = __ldxr(v178);
                    while (__stxr(v179 + 1, v178));
                    do
                      v180 = __ldaxr(v178);
                    while (__stlxr(v180 - 1, v178));
                    if (!v180)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                      if (!v177)
                      {
LABEL_227:
                        v187 = value;
LABEL_252:
                        *v187 = 0;
                        v187[1] = 0;
                        goto LABEL_253;
                      }
                    }
                    else
                    {
LABEL_217:
                      if (!v177)
                        goto LABEL_227;
                    }
                    sub_224527784(v174, (CFNumberRef *)key);
                    v181 = key[0];
                    v182 = (std::__shared_weak_count *)key[1];
                    if (!key[1])
                      goto LABEL_223;
                    v183 = (unint64_t *)((char *)key[1] + 8);
                    do
                      v184 = __ldxr(v183);
                    while (__stxr(v184 + 1, v183));
                    do
                      v185 = __ldaxr(v183);
                    while (__stlxr(v185 - 1, v183));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                      std::__shared_weak_count::__release_weak(v182);
                      if (v181)
                      {
LABEL_224:
                        CFArrayAppendValue(*(CFMutableArrayRef *)theArray, key[0]);
                        v186 = (std::__shared_weak_count *)key[1];
                        if (!key[1])
                          goto LABEL_233;
                        goto LABEL_230;
                      }
                    }
                    else
                    {
LABEL_223:
                      if (v181)
                        goto LABEL_224;
                    }
                    value[1] = 0;
                    value[0] = 0;
                    v186 = (std::__shared_weak_count *)key[1];
                    if (!key[1])
                      goto LABEL_233;
LABEL_230:
                    v188 = (unint64_t *)&v186->__shared_owners_;
                    do
                      v189 = __ldaxr(v188);
                    while (__stlxr(v189 - 1, v188));
                    if (!v189)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                      if (!v181)
                        goto LABEL_253;
                      goto LABEL_234;
                    }
LABEL_233:
                    if (!v181)
                      goto LABEL_253;
LABEL_234:
                    sub_224527784((char *)&v174->~__shared_weak_count + 4, (CFNumberRef *)key);
                    v190 = key[0];
                    v191 = (std::__shared_weak_count *)key[1];
                    if (!key[1])
                      goto LABEL_239;
                    v192 = (unint64_t *)((char *)key[1] + 8);
                    do
                      v193 = __ldxr(v192);
                    while (__stxr(v193 + 1, v192));
                    do
                      v194 = __ldaxr(v192);
                    while (__stlxr(v194 - 1, v192));
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                      std::__shared_weak_count::__release_weak(v191);
                      if (v190)
                      {
LABEL_240:
                        CFArrayAppendValue(*(CFMutableArrayRef *)theArray, key[0]);
                        v195 = (std::__shared_weak_count *)key[1];
                        if (!key[1])
                          goto LABEL_250;
                        goto LABEL_246;
                      }
                    }
                    else
                    {
LABEL_239:
                      if (v190)
                        goto LABEL_240;
                    }
                    value[1] = 0;
                    value[0] = 0;
                    v195 = (std::__shared_weak_count *)key[1];
                    if (!key[1])
                      goto LABEL_250;
LABEL_246:
                    v196 = (unint64_t *)&v195->__shared_owners_;
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
LABEL_250:
                    if (v190)
                    {
                      *(_OWORD *)value = *(_OWORD *)theArray;
                      v187 = (void **)theArray;
                      goto LABEL_252;
                    }
LABEL_253:
                    v198 = *(std::__shared_weak_count **)&theArray[8];
                    if (!*(_QWORD *)&theArray[8])
                      goto LABEL_257;
                    v199 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                    do
                      v200 = __ldaxr(v199);
                    while (__stlxr(v200 - 1, v199));
                    if (!v200)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                      v201 = value[0];
                      v202 = (std::__shared_weak_count *)value[1];
                      if (!value[1])
                        goto LABEL_264;
                    }
                    else
                    {
LABEL_257:
                      v201 = value[0];
                      v202 = (std::__shared_weak_count *)value[1];
                      if (!value[1])
                        goto LABEL_264;
                    }
                    v203 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v204 = __ldxr(v203);
                    while (__stxr(v204 + 1, v203));
                    do
                      v205 = __ldaxr(v203);
                    while (__stlxr(v205 - 1, v203));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                      std::__shared_weak_count::__release_weak(v202);
                    }
LABEL_264:
                    if (v201)
                    {
                      CFArrayAppendValue(v345[0], value[0]);
                      v206 = (std::__shared_weak_count *)value[1];
                      if (value[1])
                        goto LABEL_268;
                    }
                    else
                    {
                      v342[1] = 0;
                      v342[0] = 0;
                      v206 = (std::__shared_weak_count *)value[1];
                      if (value[1])
                      {
LABEL_268:
                        v207 = (unint64_t *)&v206->__shared_owners_;
                        do
                          v208 = __ldaxr(v207);
                        while (__stlxr(v208 - 1, v207));
                        if (!v208)
                        {
                          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                          std::__shared_weak_count::__release_weak(v206);
                        }
                      }
                    }
                    if (!v201)
                      goto LABEL_278;
                    v174 = (std::__shared_weak_count_vtbl *)((char *)v174 + 8);
                  }
                  while (v174 != shared_owners);
                }
                *(_OWORD *)v342 = *(_OWORD *)v345;
                v209 = v345;
LABEL_277:
                *v209 = 0;
                v209[1] = 0;
LABEL_278:
                v210 = (std::__shared_weak_count *)v345[1];
                if (!v345[1])
                  goto LABEL_282;
                v211 = (unint64_t *)((char *)v345[1] + 8);
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                  v213 = v342[0];
                  v214 = (std::__shared_weak_count *)v342[1];
                  if (!v342[1])
                    goto LABEL_287;
                }
                else
                {
LABEL_282:
                  v213 = v342[0];
                  v214 = (std::__shared_weak_count *)v342[1];
                  if (!v342[1])
                    goto LABEL_287;
                }
                v215 = (unint64_t *)&v214->__shared_owners_;
                do
                  v216 = __ldxr(v215);
                while (__stxr(v216 + 1, v215));
                do
                  v217 = __ldaxr(v215);
                while (__stlxr(v217 - 1, v215));
                if (v217)
                {
LABEL_287:
                  if (v213)
                    goto LABEL_288;
                  goto LABEL_293;
                }
                ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                std::__shared_weak_count::__release_weak(v214);
                if (v213)
                {
LABEL_288:
                  CFArrayAppendValue(v343[0], v342[0]);
                  v218 = (std::__shared_weak_count *)v342[1];
                  if (v342[1])
                    goto LABEL_294;
                  goto LABEL_298;
                }
LABEL_293:
                v341[1] = 0;
                v341[0] = 0;
                v218 = (std::__shared_weak_count *)v342[1];
                if (v342[1])
                {
LABEL_294:
                  v219 = (unint64_t *)&v218->__shared_owners_;
                  do
                    v220 = __ldaxr(v219);
                  while (__stlxr(v220 - 1, v219));
                  if (!v220)
                  {
                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                    std::__shared_weak_count::__release_weak(v218);
                  }
                }
LABEL_298:
                if (!v213)
                  goto LABEL_330;
                ++v165;
              }
              while (v165 != v166);
            }
            *(_OWORD *)v341 = *(_OWORD *)v343;
            v221 = v343;
          }
          else
          {
            v221 = v341;
          }
          *v221 = 0;
          v221[1] = 0;
LABEL_330:
          v230 = (std::__shared_weak_count *)v343[1];
          if (v343[1])
          {
            v231 = (unint64_t *)((char *)v343[1] + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          v233 = v341[0];
          v234 = (std::__shared_weak_count *)v341[1];
          if (v341[1])
          {
            v235 = (unint64_t *)((char *)v341[1] + 8);
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
            do
              v237 = __ldaxr(v235);
            while (__stlxr(v237 - 1, v235));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
          if (v233)
            CFDictionaryAddValue(v332[0], v106, v341[0]);
          v238 = (std::__shared_weak_count *)v341[1];
          if (v341[1])
          {
            v239 = (unint64_t *)((char *)v341[1] + 8);
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
            if (!v240)
            {
              ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
              std::__shared_weak_count::__release_weak(v238);
            }
          }
LABEL_114:
          v112 = v340;
          if (!v340)
            goto LABEL_118;
          v113 = (unint64_t *)&v340->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
            if ((v354[23] & 0x80000000) == 0)
              goto LABEL_120;
          }
          else
          {
LABEL_118:
            if ((v354[23] & 0x80000000) == 0)
            {
LABEL_120:
              v354[23] = 6;
              strcpy(v354, "bottom");
              LODWORD(key[0]) = *(_DWORD *)(v316 + 96);
              sub_224527BAC((uint64_t)v354, (CFStringRef *)theArray);
              sub_223426BD4((uint64_t)v332, *(void **)theArray, key);
              v115 = *(std::__shared_weak_count **)&theArray[8];
              if (!*(_QWORD *)&theArray[8])
                goto LABEL_124;
              v116 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
                if ((v354[23] & 0x80000000) == 0)
                  goto LABEL_126;
              }
              else
              {
LABEL_124:
                if ((v354[23] & 0x80000000) == 0)
                {
LABEL_126:
                  v354[23] = 6;
                  strcpy(v354, "height");
                  LODWORD(key[0]) = *(_DWORD *)(v316 + 100);
                  sub_224527BAC((uint64_t)v354, (CFStringRef *)theArray);
                  sub_223426BD4((uint64_t)v332, *(void **)theArray, key);
                  v118 = *(std::__shared_weak_count **)&theArray[8];
                  if (!*(_QWORD *)&theArray[8])
                    goto LABEL_130;
                  v119 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                    if ((v354[23] & 0x80000000) == 0)
                      goto LABEL_132;
                  }
                  else
                  {
LABEL_130:
                    if ((v354[23] & 0x80000000) == 0)
                    {
LABEL_132:
                      v354[23] = 19;
                      strcpy(v354, "polygon_to_boundary");
                      sub_224527BAC((uint64_t)v354, (CFStringRef *)key);
                      v121 = key[0];
                      v123 = v332[0];
                      v122 = (std::__shared_weak_count *)v332[1];
                      v46 = v313;
                      if (!v332[1])
                        goto LABEL_137;
                      v124 = (unint64_t *)((char *)v332[1] + 8);
                      do
                        v125 = __ldxr(v124);
                      while (__stxr(v125 + 1, v124));
                      do
                        v126 = __ldaxr(v124);
                      while (__stlxr(v126 - 1, v124));
                      if (!v126)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                        if (!v123)
                          goto LABEL_139;
                      }
                      else
                      {
LABEL_137:
                        if (!v123)
                          goto LABEL_139;
                      }
                      if (!CFDictionaryContainsKey(v332[0], v121))
                      {
                        sub_22321B920(v316 + 108, (CFMutableArrayRef *)theArray);
                        v223 = *(_QWORD *)theArray;
                        v222 = *(std::__shared_weak_count **)&theArray[8];
                        if (*(_QWORD *)&theArray[8])
                        {
                          v224 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                          do
                            v225 = __ldxr(v224);
                          while (__stxr(v225 + 1, v224));
                          do
                            v226 = __ldaxr(v224);
                          while (__stlxr(v226 - 1, v224));
                          if (!v226)
                          {
                            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                            std::__shared_weak_count::__release_weak(v222);
                          }
                        }
                        if (v223)
                          CFDictionaryAddValue(v332[0], v121, *(const void **)theArray);
                        v227 = *(std::__shared_weak_count **)&theArray[8];
                        if (*(_QWORD *)&theArray[8])
                        {
                          v228 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                          do
                            v229 = __ldaxr(v228);
                          while (__stlxr(v229 - 1, v228));
                          if (!v229)
                          {
                            ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                            std::__shared_weak_count::__release_weak(v227);
                          }
                        }
                      }
LABEL_139:
                      v127 = (std::__shared_weak_count *)key[1];
                      if (!key[1])
                        goto LABEL_143;
                      v128 = (unint64_t *)((char *)key[1] + 8);
                      do
                        v129 = __ldaxr(v128);
                      while (__stlxr(v129 - 1, v128));
                      if (!v129)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                        if ((v354[23] & 0x80000000) == 0)
                          goto LABEL_145;
                      }
                      else
                      {
LABEL_143:
                        if ((v354[23] & 0x80000000) == 0)
                        {
LABEL_145:
                          *(_QWORD *)&v354[8] = 0;
                          *(_QWORD *)&v354[16] = 0;
                          *(_QWORD *)v354 = &v354[8];
                          sub_2245314F4(v354, theArray);
                          *(_OWORD *)key = *(_OWORD *)theArray;
                          sub_22323DF84((uint64_t)v354, *(char **)&v354[8]);
                          v354[23] = 8;
                          strcpy(v354, "boundary");
                          sub_224527BAC((uint64_t)v354, (CFStringRef *)theArray);
                          sub_223427380((uint64_t)key, *(void **)theArray, (void **)v332);
                          v130 = *(std::__shared_weak_count **)&theArray[8];
                          if (!*(_QWORD *)&theArray[8])
                            goto LABEL_149;
                          v131 = (unint64_t *)(*(_QWORD *)&theArray[8] + 8);
                          do
                            v132 = __ldaxr(v131);
                          while (__stlxr(v132 - 1, v131));
                          if (!v132)
                          {
                            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                            std::__shared_weak_count::__release_weak(v130);
                            if ((v354[23] & 0x80000000) == 0)
                              goto LABEL_151;
                          }
                          else
                          {
LABEL_149:
                            if ((v354[23] & 0x80000000) == 0)
                            {
LABEL_151:
                              sub_2245664AC((unsigned __int8 *)__p, v354);
                              v133 = operator new(0x28uLL);
                              *(_QWORD *)theArray = v133;
                              *(_OWORD *)&theArray[8] = xmmword_2245C4640;
                              v134 = *(_OWORD *)&v354[16];
                              *v133 = *(_OWORD *)v354;
                              v133[1] = v134;
                              *((_DWORD *)v133 + 8) = (_DWORD)v355;
                              *((_BYTE *)v133 + 36) = 0;
                              sub_224527BAC((uint64_t)theArray, (CFStringRef *)v354);
                              sub_223427380((uint64_t)&v333, *(void **)v354, key);
                              v135 = *(std::__shared_weak_count **)&v354[8];
                              if (!*(_QWORD *)&v354[8])
                                goto LABEL_155;
                              v136 = (unint64_t *)(*(_QWORD *)&v354[8] + 8);
                              do
                                v137 = __ldaxr(v136);
                              while (__stlxr(v137 - 1, v136));
                              if (!v137)
                              {
                                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                                std::__shared_weak_count::__release_weak(v135);
                                if ((theArray[23] & 0x80000000) == 0)
                                {
LABEL_157:
                                  v138 = (std::__shared_weak_count *)key[1];
                                  if (key[1])
                                  {
                                    v139 = (unint64_t *)((char *)key[1] + 8);
                                    do
                                      v140 = __ldaxr(v139);
                                    while (__stlxr(v140 - 1, v139));
                                    if (!v140)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                                      std::__shared_weak_count::__release_weak(v138);
                                    }
                                  }
                                  v141 = (std::__shared_weak_count *)v325;
                                  if (v325)
                                  {
                                    v142 = v326;
                                    v143 = v325;
                                    if (v326 != v325)
                                    {
                                      v144 = v326;
                                      do
                                      {
                                        v146 = v144[-1].__vftable;
                                        --v144;
                                        v145 = v146;
                                        if (v146)
                                        {
                                          v142[-1].__shared_owners_ = (uint64_t)v145;
                                          operator delete(v145);
                                        }
                                        v142 = v144;
                                      }
                                      while (v144 != v141);
                                      v143 = v325;
                                    }
                                    v326 = v141;
                                    operator delete(v143);
                                  }
                                  v147 = (char **)v330;
                                  if (v330)
                                  {
                                    v148 = v331;
                                    v149 = v330;
                                    if (v331 != v330)
                                    {
                                      v150 = v331;
                                      do
                                      {
                                        v152 = *(v150 - 3);
                                        v150 -= 3;
                                        v151 = v152;
                                        if (v152)
                                        {
                                          *(v148 - 2) = v151;
                                          operator delete(v151);
                                        }
                                        v148 = v150;
                                      }
                                      while (v150 != v147);
                                      v149 = v330;
                                    }
                                    v331 = v147;
                                    operator delete(v149);
                                  }
                                  if (v328[0])
                                  {
                                    v328[1] = v328[0];
                                    operator delete(v328[0]);
                                  }
                                  v153 = (std::__shared_weak_count *)v332[1];
                                  if (v332[1])
                                  {
                                    v154 = (unint64_t *)((char *)v332[1] + 8);
                                    do
                                      v155 = __ldaxr(v154);
                                    while (__stlxr(v155 - 1, v154));
                                    if (!v155)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                                      std::__shared_weak_count::__release_weak(v153);
                                    }
                                  }
                                  v49 = &__p[2];
                                  goto LABEL_189;
                                }
                              }
                              else
                              {
LABEL_155:
                                if ((theArray[23] & 0x80000000) == 0)
                                  goto LABEL_157;
                              }
                              operator delete(*(void **)theArray);
                              goto LABEL_157;
                            }
                          }
                          operator delete(*(void **)v354);
                          goto LABEL_151;
                        }
                      }
                      operator delete(*(void **)v354);
                      goto LABEL_145;
                    }
                  }
                  operator delete(*(void **)v354);
                  goto LABEL_132;
                }
              }
              operator delete(*(void **)v354);
              goto LABEL_126;
            }
          }
          operator delete(*(void **)v354);
          goto LABEL_120;
        }
      }
      v64 = v63 / 24;
      v65 = (char *)v325;
      v66 = (v60 - (_BYTE *)v325) / 24;
      v67 = (char *)v325 + 24 * v66;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v60) >> 3)) >= v63 / 24)
      {
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v60 - v67) >> 3)) >= v64)
        {
          v71 = &v62[3 * v64];
          v80 = v60;
          v12 = v312;
        }
        else
        {
          *(_QWORD *)theArray = v60;
          key[0] = v60;
          v71 = &v62[(v60 - v67) >> 3];
          *(_QWORD *)v354 = &v327;
          *(_QWORD *)&v354[8] = key;
          *(_QWORD *)&v354[16] = theArray;
          v354[24] = 0;
          if (v71 == v61)
          {
            v80 = v60;
            v326 = (std::__shared_weak_count *)v60;
            v12 = v312;
            if (v60 - v67 < 1)
              goto LABEL_107;
          }
          else
          {
            v310 = v63 / 24;
            v314 = &v62[(v60 - v67) >> 3];
            v72 = 0;
            do
            {
              v75 = &v60[v72 * 8];
              v76 = &v314[v72];
              *(_QWORD *)v75 = 0;
              *((_QWORD *)v75 + 1) = 0;
              *((_QWORD *)v75 + 2) = 0;
              v78 = v314[v72];
              v77 = v314[v72 + 1];
              v79 = v77 - v78;
              if (v77 != v78)
              {
                if (v79 < 0)
                  sub_22316E078();
                v73 = (char *)operator new(v77 - *v76);
                *(_QWORD *)v75 = v73;
                *((_QWORD *)v75 + 1) = v73;
                *((_QWORD *)v75 + 2) = &v73[8 * (v79 >> 3)];
                v74 = v79 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v73, v78, v74);
                *((_QWORD *)v75 + 1) = &v73[v74];
              }
              *(_QWORD *)theArray = v75 + 24;
              v72 += 3;
            }
            while (v76 + 3 != v61);
            v80 = &v60[v72 * 8];
            v47 = v309;
            v64 = v310;
            v71 = &v62[(v60 - v67) >> 3];
            v326 = (std::__shared_weak_count *)v80;
            v12 = v312;
            if (v60 - v67 < 1)
              goto LABEL_107;
          }
        }
        v99 = (unint64_t)&v80[-24 * v64];
        for (i = (std::__shared_weak_count *)v80; v99 < (unint64_t)v60; v99 += 24)
        {
          i->__vftable = 0;
          i->__shared_owners_ = 0;
          i->__shared_weak_owners_ = 0;
          i->std::__shared_count = *(std::__shared_count *)v99;
          i->__shared_weak_owners_ = *(_QWORD *)(v99 + 16);
          *(_QWORD *)v99 = 0;
          *(_QWORD *)(v99 + 8) = 0;
          *(_QWORD *)(v99 + 16) = 0;
          ++i;
        }
        v101 = &v67[24 * v64];
        v326 = i;
        if (v80 != v101)
        {
          v102 = v80 - 24;
          v103 = 8 * ((v80 - v101) >> 3);
          do
          {
            v105 = *(void **)v102;
            if (*(_QWORD *)v102)
            {
              *((_QWORD *)v102 + 1) = v105;
              operator delete(v105);
              *(_QWORD *)v102 = 0;
              *((_QWORD *)v102 + 1) = 0;
              *((_QWORD *)v102 + 2) = 0;
            }
            v104 = (uint64_t)&v67[v103 - 24];
            *(_OWORD *)v102 = *(_OWORD *)v104;
            *((_QWORD *)v102 + 2) = *(_QWORD *)&v67[v103 - 8];
            *(_QWORD *)v104 = 0;
            *(_QWORD *)(v104 + 8) = 0;
            *(_QWORD *)(v104 + 16) = 0;
            v102 -= 24;
            v103 -= 24;
          }
          while (v103);
        }
        for (; v62 != v71; v67 += 24)
        {
          if (v62 != (char **)v67)
            sub_2233320C8(v67, *v62, v62[1], (v62[1] - *v62) >> 3);
          v62 += 3;
        }
        goto LABEL_107;
      }
      v68 = v66 + v64;
      if ((unint64_t)(v66 + v64) > 0xAAAAAAAAAAAAAAALL)
        sub_22329A3C4();
      if (0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v325) >> 3) > v68)
        v68 = 0x5555555555555556 * ((uint64_t)(v327 - (_QWORD)v325) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327 - (_QWORD)v325) >> 3) >= 0x555555555555555)
        v69 = 0xAAAAAAAAAAAAAAALL;
      else
        v69 = v68;
      v355 = &v327;
      if (v69)
      {
        if (v69 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v70 = (char *)operator new(24 * v69);
      }
      else
      {
        v70 = 0;
      }
      v311 = v66;
      *(_QWORD *)v354 = v70;
      *(_QWORD *)&v354[8] = &v70[24 * v66];
      *(_QWORD *)&v354[16] = *(_QWORD *)&v354[8];
      *(_QWORD *)&v354[24] = &v70[24 * v69];
      v81 = 24 * v64;
      v82 = (std::__shared_weak_count *)(*(_QWORD *)&v354[8] + 24 * v64);
      v315 = *(char **)&v354[8];
      v83 = *(_QWORD **)&v354[8];
      do
      {
        *v83 = 0;
        v83[1] = 0;
        v83[2] = 0;
        v85 = *v62;
        v84 = v62[1];
        v86 = v84 - *v62;
        if (v84 != *v62)
        {
          if (v86 < 0)
            sub_22316E078();
          v87 = (char *)operator new(v84 - *v62);
          *v83 = v87;
          v83[1] = v87;
          v83[2] = &v87[8 * (v86 >> 3)];
          v88 = v86 & 0xFFFFFFFFFFFFFFF8;
          memcpy(v87, v85, v88);
          v83[1] = &v87[v88];
        }
        v83 += 3;
        v62 += 3;
        v81 -= 24;
      }
      while (v81);
      *(_QWORD *)&v354[16] = v82;
      v89 = (char *)v325;
      v47 = v309;
      v90 = v315;
      if (v325 != v67)
      {
        v91 = 24 * v311;
        do
        {
          v92 = &v70[v91];
          v93 = &v65[v91];
          *(_OWORD *)(v92 - 24) = *(_OWORD *)&v65[v91 - 24];
          *((_QWORD *)v92 - 1) = *(_QWORD *)&v65[v91 - 8];
          *((_QWORD *)v93 - 3) = 0;
          *((_QWORD *)v93 - 2) = 0;
          *((_QWORD *)v93 - 1) = 0;
          v70 -= 24;
          v65 -= 24;
        }
        while (&v65[v91] != v89);
        v82 = *(std::__shared_weak_count **)&v354[16];
        v90 = &v70[24 * v311];
      }
      *(_QWORD *)&v354[8] = v90;
      v94 = v326;
      if (v326 == (std::__shared_weak_count *)v67)
      {
        v12 = v312;
        v95 = (char *)v325;
        v325 = v90;
        v326 = v82;
        v327 = *(_QWORD *)&v354[24];
        if (v67 == v95)
          goto LABEL_94;
      }
      else
      {
        v12 = v312;
        do
        {
          v82->__vftable = 0;
          v82->__shared_owners_ = 0;
          v82->__shared_weak_owners_ = 0;
          v82->std::__shared_count = *(std::__shared_count *)v67;
          v82->__shared_weak_owners_ = *((_QWORD *)v67 + 2);
          *(_QWORD *)v67 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = 0;
          ++v82;
          v67 += 24;
        }
        while (v67 != (char *)v94);
        v95 = (char *)v325;
        v67 = (char *)v326;
        v325 = *(void **)&v354[8];
        v326 = v82;
        v327 = *(_QWORD *)&v354[24];
        if (v67 == v95)
        {
LABEL_94:
          if (v95)
            operator delete(v95);
          goto LABEL_107;
        }
      }
      v96 = v67;
      do
      {
        v98 = (void *)*((_QWORD *)v96 - 3);
        v96 -= 24;
        v97 = v98;
        if (v98)
        {
          *((_QWORD *)v67 - 2) = v97;
          operator delete(v97);
        }
        v67 = v96;
      }
      while (v96 != v95);
      goto LABEL_94;
    }
  }
}

